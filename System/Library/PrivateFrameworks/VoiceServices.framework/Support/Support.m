uint64_t sub_1000045A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  v2 = qword_1000FDCD0;
  qword_1000FDCD0 = a1;
  qword_1000FDCC0 = a2;
  return v2;
}

uint64_t sub_1000045C8()
{
  return qword_1000FDCD0;
}

uint64_t sub_1000045DC()
{
  return (*(uint64_t (**)(void))(qword_1000FDCD0 + 304))();
}

uint64_t sub_1000045EC()
{
  return 0LL;
}

uint64_t sub_1000045F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1100);
}

uint64_t sub_1000045FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1996);
}

uint64_t sub_100004604(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1992);
}

uint64_t sub_10000460C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1856);
}

uint64_t sub_100004614(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1996) = a2;
  *(_DWORD *)(result + 1992) = 1;
  return result;
}

uint64_t sub_100004624(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1028);
}

uint64_t sub_10000462C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1096);
}

uint64_t sub_100004634(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    v2 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v4 = *v2;
    int v3 = v2[1];
  }

  else
  {
    v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    int v4 = *v6;
    int v3 = v6[1];
  }

  return (v3 - v4);
}

uint64_t sub_100004688(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1388);
}

uint64_t sub_100004690(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1390);
}

uint64_t sub_100004698(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4) {
    return *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
  }
  if (*(_DWORD *)(a1 + 2012))
  {
    uint64_t v6 = *(int *)(a1 + 1120) * (uint64_t)(int)a2;
  }

  else
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    uint64_t v6 = *(int *)(a1 + 1120) * (uint64_t)(v8 + a3);
  }

  return *(void *)(a1 + 96) + v6;
}

uint64_t sub_100004724(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  int v4 = *(_DWORD *)(a1 + 1072);
  if (*(_DWORD *)(a1 + 1108))
  {
    BOOL v5 = __OFSUB__(a2, v4);
    int v6 = a2 - v4;
    if (v6 < 0 == v5) {
      return *(void *)(a1 + 792) + 12LL * v6;
    }
    if (*(_DWORD *)(a1 + 2012))
    {
      uint64_t v7 = (int)(3 * a2);
    }

    else
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v10 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v10 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      uint64_t v7 = 3 * (v10 + a3);
    }

    return *(void *)(a1 + 144) + 4 * v7;
  }

  else if ((int)a2 >= v4)
  {
    return *(void *)(a1 + 792) + 4LL * (int)(6 * (a2 - v4));
  }

  else
  {
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      unsigned int v3 = v8 + a3;
    }

    int v11 = *(_DWORD *)(a1 + 1128) * v3;
    v12 = (void *)(a1 + 136);
    return *v12 + 4LL * v11;
  }
}

uint64_t sub_10000482C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1120);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      *(_BYTE *)(a3 + i) = *(_DWORD *)(a2 + (i & 0xFFFFFFFC)) >> (v4 & 0x18);
      v4 += 8;
    }
  }

  return result;
}

uint64_t sub_100004868(uint64_t result, unsigned int a2, int a3, unint64_t *a4)
{
  if (*(_DWORD *)(result + 1032))
  {
    int v4 = *(_DWORD *)(result + 1072);
    BOOL v5 = __OFSUB__(a2, v4);
    int v6 = a2 - v4;
    if (!*(_DWORD *)(result + 1108))
    {
      if (v6 < 0 != v5)
      {
        unsigned int v11 = a2;
        if (!*(_DWORD *)(result + 2012))
        {
          if (*(_DWORD *)(result + 1176)) {
            int v12 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
          }
          else {
            int v12 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
          }
          unsigned int v11 = v12 + a3;
        }

        int v14 = *(_DWORD *)(result + 1128) * v11;
        v18 = (uint64_t *)(result + 136);
      }

      else
      {
        v18 = (uint64_t *)(result + 792);
        int v14 = 6 * v6;
      }

      uint64_t v13 = *v18;
      goto LABEL_54;
    }

    if (v6 < 0 == v5)
    {
      uint64_t v13 = *(void *)(result + 792);
      int v14 = 3 * v6;
LABEL_54:
      uint64_t v8 = v13 + 4LL * v14;
LABEL_55:
      unint64_t v21 = *(void *)(result + 1520);
      uint64_t v35 = *(unsigned int *)(result + 1120);
      if ((int)v35 >= 1)
      {
        int v36 = 0;
        for (uint64_t i = 0LL; i != v35; ++i)
        {
          *(_BYTE *)(v21 + i) = *(_DWORD *)(v8 + (i & 0xFFFFFFFC)) >> (v36 & 0x18);
          v36 += 8;
        }

        unint64_t v21 = *(void *)(result + 1520);
      }

      goto LABEL_59;
    }

    if (*(_DWORD *)(result + 2012))
    {
      uint64_t v7 = (int)(3 * a2);
      if (*(_DWORD *)(result + 1080) > (signed int)a2)
      {
LABEL_7:
        uint64_t v8 = *(void *)(result + 136) + 4 * v7;
        goto LABEL_55;
      }
    }

    else
    {
      if (*(_DWORD *)(result + 1176)) {
        int v28 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
      }
      else {
        int v28 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
      }
      uint64_t v7 = 3 * (v28 + a3);
    }

    uint64_t v8 = *(void *)(result + 144) + 4 * v7;
    goto LABEL_55;
  }

  if (*(_DWORD *)(result + 1036))
  {
    int v9 = *(_DWORD *)(result + 1296);
    if (v9 != 3)
    {
      if (v9 != 4)
      {
        unsigned int v10 = 0;
        goto LABEL_23;
      }

      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          int v34 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
        }
        else {
          int v34 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
        }
        unsigned int v10 = v34 + a3;
        goto LABEL_23;
      }
    }

    unsigned int v10 = a2;
LABEL_23:
    uint64_t v19 = *(unsigned int *)(result + 1104);
    uint64_t v20 = *(void *)(result + 1536);
    unint64_t v21 = *(void *)(result + 1528);
    uint64_t v22 = *(void *)(result + 1512);
    uint64_t v23 = *(unsigned int *)(result + 1120);
    if ((int)v23 >= 1)
    {
      int v24 = 0;
      uint64_t v25 = 0LL;
      uint64_t v26 = *(void *)(result + 1232) + 4LL * (int)(*(_DWORD *)(result + 1128) * v10);
      do
      {
        *(_BYTE *)(v22 + v25) = *(_DWORD *)(v26 + (v25 & 0xFFFFFFFC)) >> (v24 & 0x18);
        ++v25;
        v24 += 8;
      }

      while (v23 != v25);
      uint64_t v22 = *(void *)(result + 1512);
    }

    if (!*(_DWORD *)(result + 2012))
    {
      if (*(_DWORD *)(result + 1176)) {
        int v27 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
      }
      else {
        int v27 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
      }
      a2 = v27 + a3;
    }

    int v29 = *(_DWORD *)(result + 1132);
    if (v29 >= 1)
    {
      uint64_t v30 = 0LL;
      uint64_t v31 = *(void *)(result + 192) + 4LL * (int)(v29 * a2) + 4;
      v32 = (_WORD *)(v20 + 4);
      do
      {
        *(v32 - 2) = *(_DWORD *)(v31 - 4);
        _WORD *v32 = *(_WORD *)(v31 - 2);
        *(v32 - 1) = *(_DWORD *)v31;
        v32[1] = *(_WORD *)(v31 + 2);
        v30 += 2LL;
        v31 += 8LL;
        v32 += 4;
      }

      while (v30 < *(int *)(result + 1132));
    }

    if ((int)v19 >= 1)
    {
      for (uint64_t j = 0LL; j != v19; ++j)
        *(_BYTE *)(v21 + j) = (*(unsigned __int8 *)(v22 + j) + 2 * *(unsigned __int16 *)(v20 + 2 * j))
                            / (2
                             * *(unsigned __int8 *)(v22 + j));
    }

LABEL_59:
    if (*(_DWORD *)(result + 1108)) {
      goto LABEL_60;
    }
LABEL_85:
    *a4 = v21;
    return result;
  }

  int v15 = *(_DWORD *)(result + 1072);
  if ((int)a2 >= v15)
  {
    unint64_t v21 = *(void *)(result + 784) + *(int *)(result + 1120) * (uint64_t)(int)(a2 - v15);
    if (*(_DWORD *)(result + 1108)) {
      goto LABEL_60;
    }
    goto LABEL_85;
  }

  unsigned int v16 = a2;
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v17 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
    }
    else {
      int v17 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
    }
    unsigned int v16 = v17 + a3;
  }

  uint64_t v57 = *(int *)(result + 1120) * (uint64_t)(int)v16;
  if (*(_DWORD *)(result + 1080) <= (signed int)a2)
  {
    unint64_t v21 = *(void *)(result + 96) + v57;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_85;
    }
  }

  else
  {
    unint64_t v21 = *(void *)(result + 16) + v57;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_85;
    }
  }

    sub_1000BCBC8(v12);
    return v13;
  }

  sub_1000BCBC8(v12);
  sub_1000C0EF8((uint64_t)v13);
  return 0LL;
}

                    if (++v53 == v54) {
                      goto LABEL_23;
                    }
                    continue;
                  }

                  v179 = v262 & 0xFFFFFFF0;
                  v180 = v263;
                  v181 = v265;
                  do
                  {
                    v182 = *v181++;
                    v116 = (int32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_1000F0310);
                    v183 = vmlaq_s32(v180[3], v158, (int32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_1000F0300));
                    v184 = vmlaq_s32(v180[1], v158, (int32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_1000F0320));
                    v185 = vmlaq_s32(v180[2], v158, v116);
                    *v180 = vmlaq_s32(*v180, v158, (int32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_1000F0330));
                    v180[1] = v184;
                    v180[2] = v185;
                    v180[3] = v183;
                    v180 += 4;
                    v179 -= 16LL;
                  }

                  while (v179);
                  v119 = v262 & 0xFFFFFFF0;
                  if (v251 != v262)
                  {
                    v159 = v262 & 0xFFFFFFF0;
                    v43.i64[0] = 0x1000000010LL;
                    v43.i64[1] = 0x1000000010LL;
                    if ((v262 & 8) == 0) {
                      goto LABEL_132;
                    }
                    goto LABEL_157;
                  }

    result = 0LL;
    *int v9 = 0;
  }

  return result;
}

        v124 = (v120 - v122);
        *((_DWORD *)v90 + (int)v124) = -1;
        v125 = (char *)sub_1000CAF58(20LL, v112, v113, v114, v115, v116, v117, v118);
        if (sub_100045B5C( v2,  *(unsigned int *)(v2 + 1320),  v155,  v124,  (uint64_t)v90,  (int *)&v165 + 1,  v161,  (uint64_t)v158,  (uint64_t)v119,  &v164,  &v165))
        {
          sub_1000CB038(v125, 20LL);
          sub_1000CB038(v119, 4LL * v167);
          sub_1000CB038(v158, 4LL * v167);
          sub_1000CB038(v161, 8LL * v167);
          sub_1000CB038(v90, 4LL * v167 + 4);
          sub_1000C0EF8(v80);
          int v4 = v156;
          break;
        }

        sprintf(v6, "ChoiceConstraint[%d]", v159);
        sprintf(v125, "%ld", HIDWORD(v165));
        sub_1000D8FE8(a2, (unsigned __int8 *)v6, v125);
        sprintf(v6, "ChoiceConstraintScore[%d]", v159);
        sprintf(v125, "%d", v165);
        sub_1000D8FE8(a2, (unsigned __int8 *)v6, v125);
        sub_1000CB038(v125, 20LL);
        if (v164 < 1)
        {
          v134 = 0;
        }

        else
        {
          v133 = 0LL;
          v134 = 0;
          do
          {
            if (v161[v133]) {
              v135 = (const char *)v161[v133];
            }
            else {
              v135 = "[NULL]";
            }
            v134 += 2 * sub_1000C88E4((unint64_t)v135) * *((_DWORD *)v119 + v133++) + 1;
          }

          while (v133 < v164);
        }

        v136 = v134 + 3LL;
        v137 = (unsigned __int8 *)sub_1000CAF58(v136, v126, v127, v128, v129, v130, v131, v132);
        sub_1000C896C(v137, "", v136);
        if (v164 >= 1)
        {
          for (uint64_t i = 0LL; i < v164; ++i)
          {
            v139 = (char *)v161[i];
            if (v139)
            {
              sub_1000D6480(v161[i], 0LL, v168, 256);
            }

            else
            {
              v139 = "[NULL]";
              if (*((int *)v119 + i) >= 1)
              {
LABEL_75:
                v140 = 0;
                do
                {
                  sub_1000C89F8(v137, v139, v136);
                  ++v140;
                }

                while (v140 < *((_DWORD *)v119 + i));
              }
            }
          }
        }

        sub_1000C89F8(v137, "", v136);
        v141 = sub_1000C88E4((unint64_t)v137);
        if ((int)v141 >= 1)
        {
          v153 = v90;
          v154 = v42;
          v142 = v141;
          v143 = 1;
          v144 = 1 - v141;
          do
          {
            v146 = v142 - 1;
            v147 = &v137[(v142 - 1)];
            v148 = *v147;
            if (v148 == 13 || v148 == 10)
            {
              v145 = (v141 + 1);
              else {
                v150 = v136;
              }
              j__memmove(v147 + 2, v147 + 1, v150 + v144);
              *v147 = 92;
              if (v142 <= v136)
              {
                if (v148 == 13) {
                  v151 = 114;
                }
                else {
                  v151 = 110;
                }
                v137[v142] = v151;
              }
            }

            else
            {
              v145 = v141;
            }

            ++v144;
            --v142;
            v141 = v145;
          }

          while ((unint64_t)(v146 + 1) > 1);
          int v6 = v157;
          v2 = v162;
          v90 = v153;
          v42 = v154;
          if (!v143) {
            v137[v136] = 0;
          }
        }

        uint64_t v7 = v159;
        sprintf(v6, "ChoiceConstraintParse[%d]", v159);
        sub_1000D8FE8(a2, (unsigned __int8 *)v6, (char *)v137);
        sub_1000CB038(v137, v136);
        sub_1000CB038(v119, 4LL * v167);
        sub_1000CB038(v158, 4LL * v167);
        sub_1000CB038(v161, 8LL * v167);
        sub_1000CB038(v90, 4LL * v167 + 4);
        v80 = v163;
      }

      sub_1000C0EF8((uint64_t)v42);
      sub_1000C0EF8(v80);
      int v4 = v156;
      if (v7 < *v156)
      {
LABEL_101:
        sprintf(v6, "Score[%d]", v7);
        sub_1000D911C(a2, (unsigned __int8 *)v6, *(_DWORD *)(*((void *)v4 + 1) + 4 * v7));
      }

LABEL_60:
  v38 = *(_BYTE **)(result + 1512);
  *a4 = (unint64_t)v38;
  uint64_t v39 = *(unsigned int *)(result + 1120);
  if (v39 < 8
    || (unint64_t)v38 < v21 + v39 && v21 < (unint64_t)&v38[2 * (v39 - 1) + 2])
  {
    v40 = v38;
    int v41 = *(_DWORD *)(result + 1120);
    v42 = (unsigned __int8 *)v21;
    goto LABEL_65;
  }

  if (v39 >= 0x20)
  {
    uint64_t v45 = v39 & 0x7FFFFFE0;
    v46 = (int8x16_t *)(v21 + 16);
    v47 = v38 + 32;
    v48.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v48.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    uint64_t v49 = v39 & 0xFFFFFFE0;
    do
    {
      v50 = v47 - 32;
      int8x16_t v51 = v46[-1];
      int8x16_t v52 = *v46;
      v59.val[0] = vandq_s8(v51, v48);
      v59.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v51, 4uLL);
      vst2q_s8(v50, v59);
      v59.val[0] = vandq_s8(v52, v48);
      v59.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v52, 4uLL);
      vst2q_s8(v47, v59);
      v46 += 2;
      v47 += 64;
      v49 -= 32LL;
    }

    while (v49);
    if (v45 == v39) {
      return result;
    }
    if ((v39 & 0x18) == 0)
    {
      v42 = (unsigned __int8 *)(v21 + v45);
      int v41 = v39 - v45;
      v40 = &v38[2 * v45];
LABEL_65:
      unsigned int v43 = v41 + 1;
      do
      {
        unsigned int v44 = *v42++;
        _BYTE *v40 = v44 & 0xF;
        v40[1] = v44 >> 4;
        v40 += 2;
        --v43;
      }

      while (v43 > 1);
      return result;
    }
  }

  else
  {
    uint64_t v45 = 0LL;
  }

  v40 = &v38[2 * (v39 & 0xFFFFFFF8)];
  int v41 = v39 - (v39 & 0xFFFFFFF8);
  v42 = (unsigned __int8 *)(v21 + (v39 & 0xFFFFFFF8));
  v53 = (int8x8_t *)(v21 + v45);
  uint64_t v54 = v45 - (v39 & 0xFFFFFFF8);
  v55 = &v38[2 * v45];
  do
  {
    int8x8_t v56 = *v53++;
    v58.val[0] = vand_s8(v56, (int8x8_t)0xF0F0F0F0F0F0F0FLL);
    v58.val[1] = (int8x8_t)vshr_n_u8((uint8x8_t)v56, 4uLL);
    vst2_s8(v55, v58);
    v55 += 16;
    v54 += 8LL;
  }

  while (v54);
  if ((v39 & 0x7FFFFFF8) != v39) {
    goto LABEL_65;
  }
  return result;
}

        if (v67 <= *(_DWORD *)(a1 + 152))
        {
LABEL_62:
          v68 = sub_1000935F4( *(void *)(a1 + 296),  *(_DWORD *)(a1 + 288),  *(void *)(a1 + 232),  *(void *)(a1 + 240),  v201[0]);
          if (v68 > *v194) {
            *v194 = v68;
          }
          if (v68 > *(_DWORD *)(a1 + 156)) {
            *(_DWORD *)(a1 + 156) = v68;
          }
          v69 = v201[0];
          for (uint64_t j = *v201[0]; j != 0xFFFF; uint64_t j = v71)
          {
            v72 = *(_DWORD *)(a1 + 288);
            v73 = __OFSUB__(j, v72);
            v74 = j - v72;
            if (!((v74 < 0) ^ v73 | (v74 == 0)))
            {
              v75 = v74 - 1LL;
              v76 = *(void *)(a1 + 272);
              v77 = *(unsigned __int8 *)(v76 + v75);
              if (v77 <= 0xFD) {
                *(_BYTE *)(v76 + v75) = v77 + 1;
              }
              v78 = *(void *)(a1 + 232);
              v79 = *(unsigned __int16 *)(*(void *)(a1 + 240) + 2LL * v74);
              v80 = *(unsigned __int16 *)(v78 + 2 * v79);
              if (v80 != 0xFFFF)
              {
                v81 = (unsigned __int16 *)(v78 + 2 * v79 + 2);
                do
                {
                  v83 = ~*(_DWORD *)(a1 + 284) + v80;
                  v84 = *(void *)(a1 + 264);
                  v85 = *(unsigned __int8 *)(v84 + v83);
                  if (v85 <= 0xFD) {
                    *(_BYTE *)(v84 + v83) = v85 + 1;
                  }
                  v82 = *v81++;
                  v80 = v82;
                }

                while (v82 != 0xFFFF);
              }
            }

            v71 = v69[1];
            ++v69;
          }

          unint64_t v21 = 1LL;
          goto LABEL_131;
        }

    sub_100095ED0((uint64_t *)v3);
    goto LABEL_61;
  }

  return v3;
}

                    int v28 = *(FILE **)(a1 + 32);
                    if (v28)
                    {
                      j__fseek(v28, v8, 0);
                      return 0LL;
                    }

                    if ((v8 & 0x80000000) == 0 && v8 <= *(_DWORD *)(a1 + 52))
                    {
                      result = 0LL;
                      *(_DWORD *)(a1 + 48) = v8;
                      return result;
                    }

                    return 0LL;
                  }
                }

                if (v6 <= v21) {
                  goto LABEL_60;
                }
                uint64_t v22 = *(unsigned __int8 **)a3;
                if (**(_BYTE **)a3)
                {
                  uint64_t v22 = *(unsigned __int8 **)a3;
                }

                sub_1000C8AB4(v22, "vstpar");
                uint64_t v23 = *(int *)(a3 + 12);
                int v24 = *(FILE **)(a1 + 32);
                if (v24)
                {
                  if (j__fseek(v24, v23, 1)) {
                    goto LABEL_53;
                  }
                }

                else
                {
                  uint64_t v25 = *(_DWORD *)(a1 + 48) + v23;
                  if (v25 < 0 || v25 > *(_DWORD *)(a1 + 52)) {
                    goto LABEL_53;
                  }
                  *(_DWORD *)(a1 + 48) = v25;
                }

                sub_1000C0EF8(*(void *)a3);
                *(void *)(a3 + 32) = 0LL;
                *(_OWORD *)a3 = 0u;
                *(_OWORD *)(a3 + 16) = 0u;
              }
            }

            return result;
          }
        }

        int v14 = *(unsigned __int8 **)a3;
        if (**(_BYTE **)a3)
        {
          int v14 = *(unsigned __int8 **)a3;
        }

        sub_1000C8AB4(v14, "vstpar");
        int v15 = *(int *)(a3 + 12);
        unsigned int v16 = *(FILE **)(a1 + 32);
        if (v16)
        {
          if (j__fseek(v16, v15, 1)) {
            goto LABEL_53;
          }
        }

        else
        {
          int v17 = *(_DWORD *)(a1 + 48) + v15;
          if (v17 < 0 || v17 > *(_DWORD *)(a1 + 52))
          {
LABEL_53:
            sub_1000C0EF8(*(void *)a3);
            result = 0LL;
            *(void *)(a3 + 32) = 0LL;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            return result;
          }

          *(_DWORD *)(a1 + 48) = v17;
        }

        sub_1000C0EF8(*(void *)a3);
        *(void *)(a3 + 32) = 0LL;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
      }
    }

    uint64_t v8 = *(_DWORD *)(a1 + 48);
LABEL_7:
    if (v6 < 0) {
      return 0LL;
    }
    goto LABEL_8;
  }

  uint64_t v8 = j__ftell(v7);
  int v9 = *(FILE **)(a1 + 32);
  if (!v9) {
    goto LABEL_7;
  }
  unsigned int v10 = j__fseek(v9, v6, 0);
  result = 0LL;
  if (!v10) {
    goto LABEL_13;
  }
  return result;
}

  if ((v21 & 0x80000000) == 0 && v21 <= *(_DWORD *)(a1 + 52)) {
    *(_DWORD *)(a1 + 48) = v21;
  }
LABEL_32:
  int v24 = *(FILE **)(a1 + 32);
  if (v24)
  {
    j__fseek(v24, v11, 0);
  }

  else if ((v11 & 0x80000000) == 0 && *(_DWORD *)(a1 + 52) >= v11)
  {
    *(_DWORD *)(a1 + 48) = v11;
  }

  return v23;
}

    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v17) {
      CFRelease(v17);
    }
    unsigned int v11 = v46 + 1;
    uint64_t v8 = v41;
  }

  while (v46 + 1 < Count && (_DWORD)v31);
  unsigned int v10 = theDict;
  if (!(_DWORD)v31)
  {
LABEL_69:
    if (cf)
    {
      v37 = v10;
      CFRelease(cf);
      unsigned int v10 = v37;
    }

    if (v10)
    {
      CFRelease(v10);
      return 0LL;
    }

    return v10;
  }

uint64_t sub_100004CE8( uint64_t result, unsigned int a2, int a3, uint64_t a4, double a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned int v11 = a2;
  if (!*(_DWORD *)(result + 1032))
  {
    if (*(_DWORD *)(result + 1036)) {
      return sub_10000515C(result, a4, a2, a3, a5, a6, *(double *)a7.i64);
    }
    signed int v23 = *(_DWORD *)(result + 1072);
    if ((int)a2 >= v23)
    {
      uint64_t v25 = (_BYTE *)(*(void *)(result + 784) + (int)(*(_DWORD *)(result + 1120) * (a2 - v23)));
      BOOL v26 = *(_DWORD *)(result + 1100) < 1;
      if (!*(_DWORD *)(result + 1108))
      {
LABEL_70:
        if (!v26)
        {
          uint64_t v55 = 0LL;
          do
          {
            unsigned int v56 = *(unsigned __int8 *)(a4 + v55);
            v25[v55++] = v56;
          }

          while (v55 < *(int *)(result + 1100));
        }

        return result;
      }
    }

    else
    {
      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          int v24 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
        }
        else {
          int v24 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
        }
        unsigned int v11 = v24 + a3;
      }

      uint64_t v25 = (_BYTE *)(*(void *)(result + 24) + (int)(*(_DWORD *)(result + 1120) * v11));
      BOOL v26 = *(_DWORD *)(result + 1100) < 1;
      if (!*(_DWORD *)(result + 1108)) {
        goto LABEL_70;
      }
    }

    if (!v26)
    {
      uint64_t v27 = 0LL;
      do
      {
        unsigned int v28 = *(unsigned __int8 *)(a4 + v27);
        unsigned int v29 = *(unsigned __int8 *)(result + 1771);
        if (v28 >= v29) {
          unsigned int v28 = *(unsigned __int8 *)(result + 1771);
        }
        unsigned int v30 = *(unsigned __int8 *)(result + 1770);
        if (v28 <= v30) {
          LOBYTE(v28) = *(_BYTE *)(result + 1770);
        }
        unsigned int v31 = *(unsigned __int8 *)(a4 + v27 + 1);
        if (v31 >= v29) {
          unsigned int v31 = *(unsigned __int8 *)(result + 1771);
        }
        if (v31 <= v30) {
          LOBYTE(v31) = *(_BYTE *)(result + 1770);
        }
        *v25++ = v28 + 16 * v31;
        v27 += 2LL;
      }

      while (v27 < *(int *)(result + 1100));
    }

    return result;
  }

  signed int v12 = *(_DWORD *)(result + 1072);
  if ((int)a2 < v12)
  {
    if (!*(_DWORD *)(result + 2012))
    {
      if (*(_DWORD *)(result + 1176)) {
        int v13 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
      }
      else {
        int v13 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
      }
      unsigned int v11 = v13 + a3;
    }

    int v14 = *(_DWORD *)(result + 1128) * v11;
    uint64_t v15 = *(void *)(result + 152);
    unsigned int v16 = *(_BYTE **)(result + 1520);
    BOOL v17 = *(_DWORD *)(result + 1100) < 1;
    if (!*(_DWORD *)(result + 1108)) {
      goto LABEL_41;
    }
LABEL_9:
    if (!v17)
    {
      uint64_t v18 = 0LL;
      do
      {
        unsigned int v19 = *(unsigned __int8 *)(a4 + v18);
        unsigned int v20 = *(unsigned __int8 *)(result + 1771);
        if (v19 >= v20) {
          unsigned int v19 = *(unsigned __int8 *)(result + 1771);
        }
        unsigned int v21 = *(unsigned __int8 *)(result + 1770);
        if (v19 <= v21) {
          LOBYTE(v19) = *(_BYTE *)(result + 1770);
        }
        unsigned int v22 = *(unsigned __int8 *)(a4 + v18 + 1);
        if (v22 >= v20) {
          unsigned int v22 = *(unsigned __int8 *)(result + 1771);
        }
        if (v22 <= v21) {
          LOBYTE(v22) = *(_BYTE *)(result + 1770);
        }
        *v16++ = v19 + 16 * v22;
        v18 += 2LL;
      }

      while (v18 < *(int *)(result + 1100));
    }

    goto LABEL_48;
  }

  int v14 = *(_DWORD *)(result + 1128) * (a2 - v12);
  uint64_t v15 = *(void *)(result + 792);
  unsigned int v16 = *(_BYTE **)(result + 1520);
  BOOL v17 = *(_DWORD *)(result + 1100) < 1;
  if (*(_DWORD *)(result + 1108)) {
    goto LABEL_9;
  }
LABEL_41:
  if (!v17)
  {
    uint64_t v32 = 0LL;
    do
    {
      unsigned int v33 = *(unsigned __int8 *)(a4 + v32);
      v16[v32++] = v33;
    }

    while (v32 < *(int *)(result + 1100));
  }

LABEL_48:
  unint64_t v34 = *(unsigned int *)(result + 1120);
  uint64_t v35 = v14;
  unint64_t v36 = *(void *)(result + 1520);
  unint64_t v37 = v34 >> 2;
  if (v34 < 0x20 || (unint64_t v38 = v15 + 4LL * v14, v38 < v36 + 4 * v37) && v36 < v15 + 4 * (v37 + v14))
  {
    uint64_t v39 = 0LL;
    goto LABEL_53;
  }

  if (v34 >= 0x40)
  {
    uint64_t v39 = (v34 >> 2) & 0x3FFFFFF0;
    a7.i64[1] = 0xFFFFFF07FFFFFF06LL;
    a8.i64[1] = 0xFFFFFF03FFFFFF02LL;
    uint64_t v52 = v39;
    v53 = *(const char **)(result + 1520);
    do
    {
      int8x16x4_t v57 = vld4q_s8(v53);
      v53 += 64;
      int8x16_t v54 = vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F0320), 8uLL),  vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F0320));
      *(int8x16_t *)(v38 + 32) = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F0310),  0x18uLL),  (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F0310),  0x10uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F0310),  8uLL),  vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F0310)));
      *(int8x16_t *)(v38 + 48) = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F0300),  0x18uLL),  (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F0300),  0x10uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F0300),  8uLL),  vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F0300)));
      a9 = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F0330), 0x18uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F0330), 0x10uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[1], (int8x16_t)xmmword_1000F0330), 8uLL),  vqtbl1q_s8(v57.val[0], (int8x16_t)xmmword_1000F0330)));
      a10 = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[3], (int8x16_t)xmmword_1000F0320), 0x18uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v57.val[2], (int8x16_t)xmmword_1000F0320), 0x10uLL)),  v54);
      *(int8x16_t *)unint64_t v38 = a9;
      *(int8x16_t *)(v38 + 16) = a10;
      v38 += 64LL;
      v52 -= 16LL;
    }

    while (v52);
    if (v39 == v37) {
      return result;
    }
    if ((v37 & 8) == 0)
    {
LABEL_53:
      unint64_t v40 = v37 - v39;
      uint64_t v41 = 4 * v39;
      v42 = (int *)(v15 + v41 + 4 * v35);
      unsigned int v43 = (unsigned __int8 *)(v41 + v36 + 1);
      do
      {
        int v44 = *(v43 - 1);
        int *v42 = v44;
        int v45 = v44 | (*v43 << 8);
        int *v42 = v45;
        int v46 = v45 | (v43[1] << 16);
        int *v42 = v46;
        *v42++ = v46 | (v43[2] << 24);
        v43 += 4;
        --v40;
      }

      while (v40);
      return result;
    }
  }

  else
  {
    uint64_t v39 = 0LL;
  }

  uint64_t v47 = v39;
  uint64_t v39 = v37 & 0x3FFFFFF8;
  int8x16_t v48 = (const char *)(v36 + 4 * v47);
  uint64_t v49 = (__n128 *)(v15 + 4 * v47 + 4 * v35);
  uint64_t v50 = v47 - v39;
  do
  {
    *(int8x8x4_t *)a7.i8 = vld4_s8(v48);
    v48 += 32;
    int8x16_t v51 = vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1000F0320), 8uLL),  vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F0320));
    a8 = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1000F0330), 0x18uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1000F0330), 0x10uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1000F0330), 8uLL),  vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F0330)));
    a7 = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1000F0320), 0x18uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1000F0320), 0x10uLL)),  v51);
    *uint64_t v49 = (__n128)a8;
    v49[1] = (__n128)a7;
    v49 += 2;
    v50 += 8LL;
  }

  while (v50);
  if (v39 != v37) {
    goto LABEL_53;
  }
  return result;
}

        v60 = 0LL;
        signed int v23 = v59;
        int v24 = v20;
        uint64_t v25 = v20 - 9LL;
        if (v25 >= 7) {
          goto LABEL_53;
        }
        goto LABEL_61;
      }

      if (*(_DWORD *)(a1 + 1108)) {
        goto LABEL_52;
      }
      sub_10001932C(a1, a2, v17, (_DWORD *)&v60 + 1, &v60);
      unsigned int v21 = *(_DWORD *)(a1 + 1044);
      unsigned int v22 = HIDWORD(v60);
      if (*(_DWORD *)(a1 + 1108))
      {
LABEL_65:
        if (v21)
        {
          *v13++ = v22;
          *v15++ = v60;
        }

        else
        {
          *v13++ = v60 + v22;
        }

        goto LABEL_39;
      }

      int v13 = HIDWORD(v32);
      uint64_t v18 = *(void *)(a1 + 9032);
      unsigned int v19 = *(void *)(v18 + (((unint64_t)HIDWORD(v32) >> 5) & 0x7FFFFF8)) + 32LL * BYTE4(v32);
      uint64_t v27 = *(_DWORD *)(a1 + 620);
      unsigned int v21 = *(unsigned __int16 *)(v19 + 18);
    }

    while ((int)v12 <= v27 || v27 >= v21);
  }

  unsigned int v31 = v12;
  while (v31 <= v14)
  {
    unsigned int v28 = &v30;
LABEL_52:
    result = sub_10006B4F8(a1, (_DWORD *)&v32 + 1, (unsigned int *)&v32, v28, &v31);
    uint64_t v18 = *(void *)(a1 + 9032);
    unsigned int v19 = *(void *)(v18 + (((unint64_t)HIDWORD(v32) >> 5) & 0x7FFFFF8)) + 32LL * BYTE4(v32);
    if (*(_DWORD *)(a1 + 552) == 3) {
      return result;
    }
  }

  if (*(__int16 *)(v19 + 18) != -1)
  {
    unsigned int v28 = 0LL;
    goto LABEL_52;
  }

  unsigned int v29 = *(void *)(v18 + (((unint64_t)v32 >> 5) & 0x7FFFFF8)) + 32LL * v32;
  *(_WORD *)(v29 + 18) = -1;
  *(void *)unsigned int v29 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 9044) = v32 + 1;
  return result;
}

      int v13 = HIDWORD(v32);
      uint64_t v18 = *(void *)(a1 + 9024);
      unsigned int v19 = *(void *)(v18 + (((unint64_t)HIDWORD(v32) >> 5) & 0x7FFFFF8)) + 48LL * BYTE4(v32);
      uint64_t v27 = *(_DWORD *)(a1 + 620);
      unsigned int v21 = *(unsigned __int16 *)(v19 + 32);
    }

    while ((int)v12 <= v27 || v27 >= v21);
  }

  unsigned int v31 = v12;
  while (v31 <= v14)
  {
    unsigned int v28 = &v30;
LABEL_52:
    result = sub_100072790(a1, (_DWORD *)&v32 + 1, (unsigned int *)&v32, v28, &v31);
    uint64_t v18 = *(void *)(a1 + 9024);
    unsigned int v19 = *(void *)(v18 + (((unint64_t)HIDWORD(v32) >> 5) & 0x7FFFFF8)) + 48LL * BYTE4(v32);
    if (*(_DWORD *)(a1 + 552) == 3) {
      return result;
    }
  }

  if (*(__int16 *)(v19 + 32) != -1)
  {
    unsigned int v28 = 0LL;
    goto LABEL_52;
  }

  unsigned int v29 = *(void *)(v18 + (((unint64_t)v32 >> 5) & 0x7FFFFF8)) + 48LL * v32;
  *(_WORD *)(v29 + 32) = -1;
  *(void *)unsigned int v29 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 9044) = v32 + 1;
  return result;
}

      v125 = 0LL;
      if (a12) {
        goto LABEL_37;
      }
      goto LABEL_49;
    }

    signed int v23 = v21;
  }

  return sub_10003967C(v23, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0LL);
}

        uint64_t v3 = result;
        goto LABEL_49;
      }
    }

    else if (*(_WORD *)a1)
    {
LABEL_49:
      *a3 = 0LL;
      unint64_t v34 = v3 - 2;
      do
      {
        uint64_t v35 = *((unsigned __int16 *)v34 + 1);
        v34 += 2;
      }

      while (v35);
      goto LABEL_62;
    }

uint64_t sub_10000515C(uint64_t result, uint64_t a2, unsigned int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v7 = *(void *)(result + 1216);
  int v8 = *(_DWORD *)(result + 1296);
  if (v7)
  {
    if (v8 != 3)
    {
      if (v8 != 4)
      {
        unsigned int v9 = 0;
        goto LABEL_11;
      }

      if (!*(_DWORD *)(result + 2012))
      {
        if (*(_DWORD *)(result + 1176)) {
          unsigned int v9 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a3) + a4;
        }
        else {
          unsigned int v9 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a3) + a4;
        }
        goto LABEL_11;
      }
    }

    unsigned int v9 = a3;
LABEL_11:
    uint64_t v10 = v7 + *(int *)(result + 1124) * (uint64_t)(int)v9;
    goto LABEL_17;
  }

  if (v8 == 3) {
    goto LABEL_9;
  }
  if (v8 == 4)
  {
    if (*(_DWORD *)(result + 2012))
    {
LABEL_9:
      unsigned int v9 = a3;
      goto LABEL_13;
    }

    if (*(_DWORD *)(result + 1176)) {
      int v25 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a3);
    }
    else {
      int v25 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a3);
    }
    unsigned int v9 = v25 + a4;
  }

  else
  {
    unsigned int v9 = 0;
  }

LABEL_13:
  uint64_t v10 = *(void *)(result + 1512);
  uint64_t v11 = *(unsigned int *)(result + 1120);
  if ((int)v11 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0LL;
    uint64_t v14 = *(void *)(result + 1232) + 4LL * (int)(*(_DWORD *)(result + 1128) * v9);
    do
    {
      *(_BYTE *)(v10 + v13) = *(_DWORD *)(v14 + (v13 & 0xFFFFFFFC)) >> (v12 & 0x18);
      ++v13;
      v12 += 8;
    }

    while (v11 != v13);
    uint64_t v10 = *(void *)(result + 1512);
  }

  uint64_t v16 = &a2->u8[v5];
  int v17 = v2 - v5;
  do
  {
    uint64_t v18 = *v16;
    if (v18 >= v4) {
      uint64_t v18 = v4;
    }
    if (v18 <= v3) {
      LOBYTE(v18) = v3;
    }
    *v16++ = v18;
    --v17;
  }

  while (v17);
  return result;
}

  sub_1000CB038(v13, 2LL * v14);
  return v17;
}

    sub_1000CB038(v17, v34);
    return 0LL;
  }

  int v6 = *(_WORD **)(a1 + 5520);
  if (v6) {
    unsigned __int16 *v6 = 0;
  }
  *(_DWORD *)(a1 + 5532) = 0;
  return result;
}

  unsigned int v19 = 0;
  do
  {
    int v20 = v19 + 1;
    if (v4 >> 13) {
      break;
    }
    v4 *= 2;
    v75 = v19++ >= 0xE;
  }

  while (!v75);
LABEL_19:
  uint64_t v21 = 15 - v20;
  uint64_t v22 = 1 << (14 - v20);
  if (a1[2])
  {
    signed int v23 = a1[1];
    int v24 = (int16x4_t *)*((void *)a1 + 2);
    int v25 = v23;
    BOOL v26 = a3 + 2LL * v23;
    uint64_t v27 = v3 + 1;
    unsigned int v28 = (v3 + 1) >> 1;
    unsigned int v29 = (_WORD *)(v26 + 2LL * -v28);
    unsigned int v30 = v28 - 1;
    if (v30 >= 0xF)
    {
      LODWORD(v31) = 0;
      int v45 = 2 * v25;
      int v46 = v27 & 0xFFFFFFFE;
      uint64_t v47 = 2 * v25 + a3 - v46;
      if ((unint64_t)(v47 - (void)v24) >= 0x20 && (unint64_t)(v47 - (void)a2) >= 0x20)
      {
        int8x16_t v48 = v30 + 1;
        unsigned int v31 = (v30 + 1) & 0x1FFFFFFF0LL;
        v29 += v31;
        uint64_t v49 = (int16x8_t *)((char *)a2 + 2 * v31);
        uint64_t v50 = (__int16 *)v24 + v31;
        int8x16_t v51 = vdupq_n_s32(v22);
        uint64_t v52 = v24 + 2;
        v53 = (int16x8_t *)(v45 - v46 + a3 + 16);
        int8x16_t v54 = (int16x4_t *)&a2[1];
        uint64_t v55 = vnegq_s32(vdupq_n_s32(v21));
        unsigned int v56 = v31;
        do
        {
          int8x16x4_t v57 = *(int16x8_t *)v52[-2].i8;
          int8x8x2_t v58 = *(int16x8_t *)v54[-2].i8;
          int8x16x2_t v59 = vmlal_s16(v51, *(int16x4_t *)v58.i8, *(int16x4_t *)v57.i8);
          v60 = vmlal_high_s16(v51, v58, v57);
          v61 = vuzp1q_s16( (int16x8_t)vshlq_s32(vmlal_s16(v51, *v54, *v52), v55),  (int16x8_t)vshlq_s32(vmlal_high_s16(v51, *(int16x8_t *)v54->i8, *(int16x8_t *)v52->i8), v55));
          v53[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v59, v55), (int16x8_t)vshlq_s32(v60, v55));
          const char *v53 = v61;
          v52 += 4;
          v53 += 2;
          v54 += 4;
          v56 -= 16LL;
        }

        while (v56);
        if (v48 == v31) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
    }

    else
    {
      LODWORD(v31) = 0;
    }

    uint64_t v49 = a2;
    uint64_t v50 = (__int16 *)*((void *)a1 + 2);
LABEL_38:
    v62 = v28 - v31;
    do
    {
      v64 = *v50++;
      v63 = v64;
      v65 = v49->i16[0];
      uint64_t v49 = (int16x8_t *)((char *)v49 + 2);
      *v29++ = (int)(v22 + v65 * v63) >> v21;
      --v62;
    }

    while (v62);
LABEL_40:
    int v24 = (int16x4_t *)*((void *)a1 + 2);
    a2 = v49;
    LODWORD(v3) = *a1;
    signed int v23 = a1[1];
LABEL_41:
    v66 = (int)v3 / 2;
    v67 = (__int16 *)v24 + (int)v3 / 2 - 1;
    v68 = v23 - (int)v3 / 2;
    if (v68 < 1)
    {
      v68 = 0;
      if (v66 <= 0) {
        return v20;
      }
      goto LABEL_66;
    }

    v69 = (v23 + ~v66);
    if (v69 >= 0xF)
    {
      LODWORD(v70) = 0;
      v72 = 2 * v69 + 2;
      v73 = a3 + v72;
      v74 = 2LL * v66;
      v75 = (unint64_t)a2->u64 + v72 <= a3 || (unint64_t)a2 >= v73;
      v76 = !v75;
      v77 = (unint64_t)v24 + v74 - 2 * v69 - 2 < v73 && (unint64_t)v24 + v74 > a3;
      if (!v77 && (v76 & 1) == 0)
      {
        v78 = v69 + 1;
        v70 = (v69 + 1) & 0x1FFFFFFF0LL;
        v79 = (_WORD *)(a3 + 2 * v70);
        v80 = (int16x8_t *)((char *)a2 + 2 * v70);
        v67 -= v70;
        v81 = vdupq_n_s32(v22);
        v82 = (int16x8_t *)((char *)&v24[-2] + 2 * v66);
        v83 = (int16x4_t *)&a2[1];
        v84 = (int16x8_t *)(a3 + 16);
        v85 = vnegq_s32(vdupq_n_s32(v21));
        v86 = v70;
        do
        {
          v87 = (int8x16_t)vrev64q_s16(*v82);
          v88 = (int16x8_t)vextq_s8(v87, v87, 8uLL);
          v89 = (int8x16_t)vrev64q_s16(v82[-1]);
          v90 = (int16x8_t)vextq_s8(v89, v89, 8uLL);
          v91 = *(int16x8_t *)v83[-2].i8;
          v92 = vmlal_s16(v81, *(int16x4_t *)v91.i8, *(int16x4_t *)v88.i8);
          v93 = vmlal_high_s16(v81, v91, v88);
          v94 = vmlal_s16(v81, *v83, *(int16x4_t *)v90.i8);
          v95 = vmlal_high_s16(v81, *(int16x8_t *)v83->i8, v90);
          v84[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v92, v85), (int16x8_t)vshlq_s32(v93, v85));
          *v84 = vuzp1q_s16((int16x8_t)vshlq_s32(v94, v85), (int16x8_t)vshlq_s32(v95, v85));
          v82 -= 2;
          v83 += 4;
          v84 += 2;
          v86 -= 16LL;
        }

        while (v86);
        if (v78 == v70)
        {
LABEL_65:
          v66 = (int)*a1 / 2;
          a2 = v80;
          a3 = (unint64_t)v79;
          if (v68 >= v66) {
            return v20;
          }
LABEL_66:
          v100 = (v66 + ~v68);
          if (v100 < 0xF
            || ((v108 = 2 * v100 + 2, v109 = a3 + v108, a3 < (unint64_t)a2->u64 + v108)
              ? (v110 = (unint64_t)a2 >= v109)
              : (v110 = 1),
                v110 ? (v111 = 0) : (v111 = 1),
                (unint64_t)&v67[-v100] < v109 ? (v112 = a3 >= (unint64_t)(v67 + 1)) : (v112 = 1),
                !v112 || (v111 & 1) != 0))
          {
            v101 = (_WORD *)a3;
            v102 = a2;
            v103 = v67;
          }

          else
          {
            v113 = v100 + 1;
            v114 = (v100 + 1) & 0x1FFFFFFF0LL;
            v101 = (_WORD *)(a3 + 2 * v114);
            v102 = (int16x8_t *)((char *)a2 + 2 * v114);
            v103 = &v67[-v114];
            v115 = vdupq_n_s32(v22);
            v68 += v114;
            v116 = (int16x8_t *)(v67 - 7);
            v117 = (int16x4_t *)&a2[1];
            v118 = (int16x8_t *)(a3 + 16);
            v119 = vnegq_s32(vdupq_n_s32(v21));
            v120 = v114;
            do
            {
              v121 = (int8x16_t)vrev64q_s16(*v116);
              v122 = (int16x8_t)vextq_s8(v121, v121, 8uLL);
              v123 = (int8x16_t)vrev64q_s16(v116[-1]);
              v124 = (int16x8_t)vextq_s8(v123, v123, 8uLL);
              v125 = *(int16x8_t *)v117[-2].i8;
              v126 = vmlal_s16(v115, *(int16x4_t *)v125.i8, *(int16x4_t *)v122.i8);
              v127 = vmlal_high_s16(v115, v125, v122);
              v128 = vaddq_s16( *v118,  vuzp1q_s16( (int16x8_t)vshlq_s32(vmlal_s16(v115, *v117, *(int16x4_t *)v124.i8), v119),  (int16x8_t)vshlq_s32(vmlal_high_s16(v115, *(int16x8_t *)v117->i8, v124), v119)));
              v118[-1] = vaddq_s16( v118[-1],  vuzp1q_s16((int16x8_t)vshlq_s32(v126, v119), (int16x8_t)vshlq_s32(v127, v119)));
              *v118 = v128;
              v116 -= 2;
              v117 += 4;
              v118 += 2;
              v120 -= 16LL;
            }

            while (v120);
            if (v113 == v114) {
              return v20;
            }
          }

          v104 = v66 - v68;
          do
          {
            v106 = *v103--;
            v105 = v106;
            v107 = v102->i16[0];
            v102 = (int16x8_t *)((char *)v102 + 2);
            *v101++ += (int)(v22 + v107 * v105) >> v21;
            --v104;
          }

          while (v104);
          return v20;
        }

  uint64_t v16 = (int)v3;
  if (*(_DWORD *)(a1 + 104))
  {
    int v17 = a2[1] - (uint64_t)v4;
    if ((int)v3 >= 3)
    {
      uint64_t v18 = a2 + 2;
      unsigned int v19 = (int *)(a1 + 24);
      int v20 = v3 - 2;
      do
      {
        uint64_t v21 = *v19++;
        uint64_t v22 = v17 * (v21 - v4 + 1);
        signed int v23 = *v18++;
        int v17 = v22 - v4 + v23;
        --v20;
      }

      while (v20);
    }

    uint64_t v15 = v17 + *(int *)(*(void *)(a1 + 48) + 4LL * *a2);
    goto LABEL_18;
  }

  BOOL v26 = (int *)(*(void *)(a1 + 48) + 4LL * *a2);
  unsigned int v28 = *v26;
  uint64_t v27 = v26[1];
  unsigned int v29 = v27 - v28;
  if (v27 != v28)
  {
    if ((int)v16 >= 2)
    {
      unsigned int v30 = a2 + 1;
      unsigned int v31 = v16 - 1;
      do
      {
        uint64_t v32 = v29 - 1;
        if (v29 < 1) {
          uint64_t v32 = v29;
        }
        unsigned int v33 = v32 >> 1;
        uint64_t v15 = (v32 >> 1) + v28;
        unint64_t v34 = (unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v15 * v31);
        uint64_t v35 = v30;
        unint64_t v36 = v31;
        while (1)
        {
          unint64_t v38 = *v35++;
          unint64_t v37 = v38;
          uint64_t v39 = *v34++;
          unint64_t v40 = v37 > v39;
          if (v37 < v39) {
            break;
          }
          if (v40)
          {
            unsigned int v33 = v29 + ~v33;
            unsigned int v28 = v15 + 1;
            break;
          }

          if (!--v36) {
            goto LABEL_18;
          }
        }

        int v24 = 0LL;
        unsigned int v29 = v33;
      }

      while (v33);
      return v24;
    }

    uint64_t v41 = v29 - 1;
    if (v29 < 1) {
      uint64_t v41 = v29;
    }
    uint64_t v15 = v28 + (v41 >> 1);
LABEL_18:
    *a3 = *(_DWORD *)(a1 + 96) + *(char *)(*(void *)(a1 + 80) + v15);
    return 1LL;
  }

  return 0LL;
}

  else {
    int v24 = v13;
  }
  int v25 = sub_10008E094( *(void *)(a1 + 528),  a2,  (uint64_t)&a4[v24],  v10 - v24,  (*(_DWORD *)(a1 + 524) + 1),  v14,  v15,  v16);
  BOOL v26 = v25 + v17;
  if (a5 && v25 >= 1)
  {
    else {
      uint64_t v27 = v25 + v17;
    }
    memset(&a5[v17], 255, 4LL * (v27 + ~v17) + 4);
  }

  return v26;
}

        uint64_t v13 = 0;
        LODWORD(v14) = 1;
        BOOL v5 = a3;
        goto LABEL_19;
      }

      uint64_t v10 = 0LL;
      if ((_DWORD)v6 != 255) {
        goto LABEL_13;
      }
LABEL_15:
      BOOL v5 = a3 + 2;
      uint64_t v14 = a3[1];
      if (*(_BYTE *)(v4 + v14) == 2)
      {
        uint64_t v15 = *(void *)(a1 + 104);
        uint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v14);
        uint64_t v13 = *(unsigned __int16 *)(v15 + 2 * v14 + 2) + ~(_DWORD)v16;
        int v17 = (unsigned __int8 *)(*(void *)(a1 + 88) + v16);
        LODWORD(v14) = *v17;
        uint64_t v10 = v17 + 1;
      }

      else
      {
        uint64_t v13 = 0;
      }

  int v20 = *(int *)(a1 + 208);
  if ((_DWORD)v20)
  {
    uint64_t v21 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v22 = v20 - 1;
        if (v20 - 1 < 0) {
          uint64_t v22 = v20;
        }
        signed int v23 = v22 >> 1;
        int v24 = *(unsigned __int16 *)(*(void *)(a1 + 216) + 2LL * (v21 + (int)v23));
        if (v24 <= v63) {
          break;
        }
        int v20 = (int)v23;
        if (!(_DWORD)v23) {
          goto LABEL_25;
        }
      }

      int v25 = v21 + (int)v23;
      if (v24 == v63) {
        break;
      }
      v20 -= (int)v23 + 1;
      uint64_t v21 = v25 + 1;
      if (!v20) {
        goto LABEL_25;
      }
    }

    if ((_DWORD)v25 != -1)
    {
      uint64_t v27 = *(void *)(a1 + 232);
      goto LABEL_40;
    }
  }

      uint64_t v11 = *(_DWORD *)(a1 + 528);
      if (!v11)
      {
        do
        {
          unsigned int v19 = *(unsigned __int16 *)(v5 - 2);
          v5 -= 2LL;
          int v4 = v19;
          LOWORD(v48) = v19;
        }

        while (v5 > (unint64_t)v9);
        goto LABEL_29;
      }

      int v12 = v5 - 2;
      int v4 = *(unsigned __int16 *)(v5 - 2);
LABEL_16:
      uint64_t v14 = 0;
      while (2)
      {
        uint64_t v15 = v11 - 1;
        if (v11 - 1 < 0) {
          uint64_t v15 = v11;
        }
        uint64_t v16 = v15 >> 1;
        int v17 = v16 + v14;
        uint64_t v18 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2LL * (v16 + v14));
        if (v18 > v4)
        {
LABEL_17:
          uint64_t v11 = v16;
          if (!v16) {
            goto LABEL_26;
          }
          continue;
        }

        break;
      }

      if (v18 != v4)
      {
        uint64_t v16 = v11 + ~v16;
        uint64_t v14 = v17 + 1;
        goto LABEL_17;
      }

      if (v5 == v7)
      {
        BOOL v5 = v7;
        uint64_t v10 = v7 - (void)v9;
        goto LABEL_33;
      }

      if (!(_WORD)v48 || sub_10007AF1C(*(void *)(a1 + 488), &v48) != 0xFFFF)
      {
LABEL_26:
        while (1)
        {
          LOWORD(v48) = v4;
          uint64_t v11 = *(_DWORD *)(a1 + 528);
          BOOL v5 = v12;
          uint64_t v13 = *(unsigned __int16 *)(v12 - 2);
          v12 -= 2LL;
          int v4 = v13;
          if (v11) {
            goto LABEL_16;
          }
        }

        BOOL v5 = v12;
      }

      unsigned int v30 = (unsigned __int16 *)(v23 + 8 * v24);
      while (1)
      {
        uint64_t v32 = a3;
        unsigned int v33 = 8LL * (a3 >> 8);
        unint64_t v34 = *(void *)(v5 + v33);
        uint64_t v35 = v32;
        unint64_t v36 = *(void *)(v8 + v33);
        unint64_t v37 = (_DWORD *)(v36 + 12LL * v35);
        unint64_t v38 = *(unsigned __int16 *)(v34 + 8 * v35);
        unsigned int v31 = v38 - (unsigned __int16)v7;
        unsigned int v31 = *v37 - v10;
        if (*v37 != v10) {
          goto LABEL_15;
        }
        uint64_t v39 = *(unsigned __int16 *)(v36 + 12LL * v35 + 4);
        unsigned int v31 = v39 - v11;
        if (v39 != v11) {
          goto LABEL_15;
        }
        unint64_t v40 = *(unsigned __int16 *)(v36 + 12LL * v35 + 6);
        unsigned int v31 = v40 - v12;
        if (v40 != v12) {
          goto LABEL_15;
        }
        uint64_t v41 = v34 + 8 * v35;
        v42 = *(unsigned __int16 *)(v41 + 2);
        if (v42 == WORD1(v7)) {
          break;
        }
        unsigned int v31 = (__int16)v42 - v13;
LABEL_15:
        a3 = (v32 - 1);
        if (v31 <= 0) {
          goto LABEL_24;
        }
      }

      unsigned int v43 = *(unsigned __int16 *)(v41 + 4);
      if (v43 != WORD2(v7))
      {
        unsigned int v31 = (__int16)v43 - (_DWORD)v14;
        goto LABEL_15;
      }

      LODWORD(a3) = v32 - 1;
LABEL_24:
      if ((_DWORD)v15 != (_DWORD)v32)
      {
        int v44 = v36 + 12LL * v35;
        int v45 = (unsigned __int16 *)(v44 + 4);
        int v46 = (unsigned __int16 *)(v44 + 6);
        uint64_t v47 = v34 + 8 * v35;
        int8x16_t v48 = (unsigned __int16 *)(v47 + 2);
        uint64_t v49 = (unsigned __int16 *)(v47 + 4);
        while (1)
        {
          uint64_t v50 = *v30;
          if (v50 != v38) {
            break;
          }
          if (*(_DWORD *)result != *v37) {
            goto LABEL_2;
          }
          int8x16_t v51 = *(unsigned __int16 *)(result + 4) - *v45;
          if (v51) {
            goto LABEL_34;
          }
          int8x16_t v51 = *(unsigned __int16 *)(result + 6) - *v46;
          if (v51) {
            goto LABEL_34;
          }
          uint64_t v52 = v30[1];
          v53 = *v48;
          if (v52 != v53 || (uint64_t v52 = v30[2], v53 = *v49, v52 != v53))
          {
            int8x16_t v51 = (__int16)v52 - (__int16)v53;
            goto LABEL_34;
          }

  DictionaryRepresentationWithResultHandlerInfo = (const void *)VSRecognitionResultCreateDictionaryRepresentation(a1);
  if (DictionaryRepresentationWithResultHandlerInfo) {
    goto LABEL_14;
  }
}

    Count = CFArrayGetCount(a4);
    if (Count >= 1)
    {
      uint64_t v16 = Count + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a4, v16 - 2);
        CFArrayInsertValueAtIndex(v10, a3, ValueAtIndex);
        if ((v13 & 1) == 0) {
          CFArrayInsertValueAtIndex(Copy, a3, 0LL);
        }
        --v16;
      }

      while (v16 > 1);
    }

    goto LABEL_18;
  }

  return 0LL;
}

LABEL_17:
  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176))
    {
      a3 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a3) + a4;
      uint64_t v15 = *(void *)(result + 184);
      if (!v15) {
        goto LABEL_25;
      }
    }

    else
    {
      a3 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a3) + a4;
      uint64_t v15 = *(void *)(result + 184);
      if (!v15) {
        goto LABEL_25;
      }
    }

  signed int v23 = *((_DWORD *)a2 + 3) - *((_DWORD *)__src + 3);
  if ((_DWORD)v9)
  {
    v23 += 10;
    int v24 = v9;
    int v25 = a4;
    if ((_DWORD)v9 == 0x7FFFFFFF)
    {
      int v24 = *a4;
      if (*a4 < a5) {
        goto LABEL_20;
      }
LABEL_24:
      --v24;
      goto LABEL_25;
    }

    goto LABEL_26;
  }

  int v25 = a4;
LABEL_29:
  uint64_t v32 = *a2;
  unsigned int v33 = a2[1];
  unint64_t v34 = a2[3];
  __src[2] = a2[2];
  __src[3] = v34;
  *__src = v32;
  __src[1] = v33;
  uint64_t v35 = a2[4];
  unint64_t v36 = a2[5];
  unint64_t v37 = a2[7];
  __src[6] = a2[6];
  __src[7] = v37;
  __src[4] = v35;
  __src[5] = v36;
  unint64_t v38 = (*v25 - 1);
  if (*v25 > 1)
  {
    if (*v25 == 2)
    {
      uint64_t v39 = 0LL;
      goto LABEL_35;
    }

    uint64_t v39 = v38 & 0xFFFFFFFE;
    unint64_t v40 = (_DWORD *)__src + 67;
    uint64_t v41 = v39;
    do
    {
      v42 = *v40 + v23;
      *(v40 - 32) += v23;
      _BYTE *v40 = v42;
      v40 += 64;
      v41 -= 2LL;
    }

    while (v41);
    if (v39 != v38)
    {
LABEL_35:
      unsigned int v43 = v38 - v39;
      int v44 = (_DWORD *)&__src[8 * v39 + 8] + 3;
      do
      {
        *v44 += v23;
        v44 += 32;
        --v43;
      }

      while (v43);
    }
  }

  return v9;
}

  if (a3 == (_DWORD)v19) {
    uint64_t v21 = -1;
  }
  else {
    uint64_t v21 = a3;
  }
  uint64_t v22 = *(void *)(a1 + 328);
  signed int v23 = v21;
  int v24 = a6 - 1;
  v83 = (unsigned __int16 *)(*(void *)(v22 + ((uint64_t)v21 << 6)) + 2LL * (a6 - 1));
  int v25 = v83[1] - *v83;
  result = sub_1000BB868(v16, a5, 0LL);
  BOOL v26 = result;
  v82 = v25;
  if (!qword_1000FDCC0)
  {
    unsigned int v29 = 0LL;
    unsigned int v28 = v25;
    goto LABEL_28;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 1076)) {
    uint64_t v27 = (int)v25 < 1;
  }
  else {
    uint64_t v27 = 1;
  }
  unsigned int v28 = v25;
  if (v27) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 376))
  {
    v77 = v16;
    v89 = 0LL;
    v88 = 0;
    v42 = *(void *)(a1 + 328);
    result = v42 + (v23 << 6);
    v72 = (void *)(result + 32);
    unsigned int v43 = v24;
    int v44 = *(int *)(*(void *)(result + 32) + 4LL * v24);
    int v45 = (void *)(result + 24);
    int v46 = *(unsigned __int16 **)(*(void *)(result + 24) + 8LL * v24);
    if (!v46)
    {
      uint64_t v47 = *(int *)(*v72 + 4LL * v24);
      int8x16_t v48 = sub_1000C1074(8LL * *(void *)(qword_1000FDCC0 + 4016));
      int v44 = v47;
      unsigned int v43 = v24;
      int v46 = (unsigned __int16 *)v48;
      result = v42 + (v23 << 6);
      unsigned int v28 = v82;
      *(void *)(*v45 + 8LL * v24) = v46;
    }

    v90[0] = 0;
    if ((int)v44 < 1)
    {
      uint64_t v16 = v77;
      uint64_t v52 = 0LL;
      v53 = v46;
    }

    else
    {
      uint64_t v49 = 0;
      uint64_t v50 = v44 - 1;
      uint64_t v16 = v77;
      do
      {
        int8x16_t v51 = (v49 + v50) >> 1;
        if (v46[4 * v51] >= v26) {
          uint64_t v50 = v51 - 1;
        }
        else {
          uint64_t v49 = v51 + 1;
        }
      }

      while (v49 <= v50);
      uint64_t v52 = v49;
      v53 = &v46[4 * v49];
      if (v49 < (int)v44 && *v53 == v26)
      {
        int8x16_t v54 = *(unsigned int *)&v46[4 * v49 + 2];
        unsigned int v29 = *(void *)(*(void *)(v42 + (v23 << 6) + 40) + ((v54 >> 7) & 0x1FFFFF8)) + 2 * (v54 & 0x3FF);
        goto LABEL_28;
      }
    }

    uint64_t v55 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v55 = *(void *)(qword_1000FDCC0 + 4016);
    }
    if (v55 != v44)
    {
      v68 = v53;
      v69 = v52;
      v70 = v44;
      v71 = v43;
      v74 = a8;
      unsigned int v56 = (unsigned __int16 *)(*(void *)result + 2 * v43);
      int8x16x4_t v57 = v56[1] - *v56;
      v67 = v42;
      int8x8x2_t v58 = v42 + (v23 << 6);
      v61 = *(_DWORD *)(v58 + 56);
      v60 = (const void **)(v58 + 56);
      int8x16x2_t v59 = v61;
      v62 = (v61 & 0xFFFFFC00) + 1024;
      else {
        v63 = v62;
      }
      result = sub_1000C1744(v60 - 2, (int *)v60 - 2, (signed int *)v60 - 1, 10, 2, v63 + v57);
      if ((_DWORD)result)
      {
        v79 = a5;
        v81 = sub_100033398(*(void *)(a1 + 256));
        sub_10003366C(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v23), &v89, &v88);
        unsigned int v29 = *((void *)*(v60 - 2) + (v63 >> 10)) + 2LL * (v63 & 0x3FF);
        if ((int)v57 >= 1)
        {
          for (uint64_t i = 0LL; i != v57; ++i)
          {
            v66 = *(unsigned __int16 *)(*(void *)(*(void *)(v67 + (v23 << 6) + 8)
            if (v66 == 65534) {
              v65 = -3;
            }
            else {
              v65 = sub_1000BB868(v81, v66, 0LL);
            }
            v90[0] = v65;
            *(_WORD *)(v29 + 2 * i) = sub_10005E540(v89, v88, 1LL, v90, v26);
          }
        }

        result = (uint64_t)j__memmove(v68 + 4, v68, 8 * (v70 - (int)v69));
        *v68 = v26;
        *(_DWORD *)&v46[4 * v69 + 2] = v63;
        *(_DWORD *)v60 = v63 + v57;
        ++*(_DWORD *)(*v72 + 4 * v71);
        a8 = v74;
        a5 = v79;
        uint64_t v16 = v77;
        unsigned int v28 = v82;
      }

      else
      {
        unsigned int v29 = 0LL;
        a8 = v74;
        uint64_t v16 = v77;
        unsigned int v28 = v82;
      }

          ++v6;
        }

        while (v10 < (int)v3);
      }

      else
      {
        uint64_t v16 = 0LL;
        uint64_t v7 = 0LL;
        int v17 = *(int **)(a1 + 288);
        uint64_t v18 = *v17;
        do
        {
          unsigned int v19 = v17[++v16];
          int v20 = (v19 - v18);
          if (v19 - v18 > 0)
          {
            uint64_t v21 = (int *)(*(void *)(a1 + 304) + 4LL * v18);
            while (1)
            {
              uint64_t v22 = *v21++;
              if (v22 == v5) {
                break;
              }
              if (!--v20) {
                goto LABEL_36;
              }
            }

            uint64_t v7 = (v7 + 1);
          }

      if (++v3 == a1) {
        return 0LL;
      }
    }
  }

  else
  {
    while (1)
    {
      BOOL v5 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v5 == 3)
      {
        int v6 = *(unsigned int *)(v5 + 268);
        if ((int)v6 <= a3 || (LODWORD(v4) = a3, *(_DWORD *)(*(void *)(v5 + 272) + 4LL * a3) != a3))
        {
          if ((int)v6 < 1)
          {
            LODWORD(v4) = 0;
          }

          else
          {
            int v4 = 0LL;
            uint64_t v7 = *(void *)(v5 + 272);
            while (*(_DWORD *)(v7 + 4 * v4) != a3)
            {
              if (v6 == ++v4) {
                goto LABEL_6;
              }
            }
          }
        }

        if ((_DWORD)v4 != (_DWORD)v6) {
          break;
        }
      }

        uint64_t v18 = 0LL;
LABEL_18:
        BOOL v26 = (unsigned __int16 *)sub_1000CAF58(2LL * (int)v18, a2, a3, a4, a5, a6, a7, a8);
        uint64_t v27 = *(uint64_t **)v10;
        unsigned int v28 = *(_DWORD *)(v12 + 16);
        if (v28 >= 1)
        {
          unint64_t v36 = v8;
          unint64_t v37 = v16;
          unint64_t v38 = v15;
          unsigned int v29 = 0;
          unsigned int v30 = 0;
          unsigned int v31 = -1;
          do
          {
            if (v33 != v31)
            {
              unint64_t v34 = sub_1000BB884( (uint64_t)v27,  *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128)
              v29 += sub_1000B39A4((uint64_t)v27, v34, (int16x8_t *)&v26[v29], (int)v18 - v29);
              unsigned int v28 = *(_DWORD *)(v12 + 16);
              unsigned int v31 = v33;
            }

            ++v30;
          }

          while (v30 < v28);
          uint64_t v27 = *(uint64_t **)v10;
          uint64_t v16 = v37;
          uint64_t v15 = v38;
          int v8 = v36;
        }

        uint64_t v35 = sub_10006135C((uint64_t)v39, v26, v18, v27, *(void *)(v10 + 8), 0LL, 1LL, 1LL, 0, v8);
        sub_1000CB038(v26, 2LL * (int)v18);
        if (!v35 || (result = sub_100062F94((uint64_t)v39), (int)result >= 2))
        {
          result = sub_1000600D0(v39);
          *(void *)(v15 + 8 * v16) = 0LL;
          --*(_DWORD *)(v10 + 128);
        }
      }
    }
  }

  return result;
}

  if (!qword_1000FDCC0 || !*(void *)(qword_1000FDCC0 + 1880))
  {
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  sub_100059808(*(void *)v7);
  result = sub_1000597C8(*(void *)v7);
  *(_DWORD *)(v7 + 6452) = 1;
  *(_DWORD *)(v7 + 6460) = 0;
  if (*(_DWORD *)(v7 + 5672)) {
    goto LABEL_25;
  }
LABEL_24:
  if (*(_DWORD *)(v7 + 6260)) {
    goto LABEL_25;
  }
LABEL_26:
  if (a2 == 1 && a3)
  {
    if (*(_DWORD *)(v7 + 364)) {
      *(_DWORD *)(v7 + 372) = 0;
    }
  }

  return result;
}

        sub_1000C0EF8(v10[6]);
        sub_1000C0EF8(v10[2]);
        sub_1000C0EF8(v10[4]);
        sub_1000C0EF8((uint64_t)v10);
        uint64_t v10 = 0LL;
      }
    }

  unsigned int v33 = *(unsigned __int8 *)(v17 + 32 * v13 + 26);
  if (v89 - 1 <= v33)
  {
    if (v89 == v33)
    {
      unint64_t v34 = *(__int16 *)(v17 + 32 * v13 + 20);
      uint64_t v35 = *(void *)(a1 + 9240);
      if (*(_DWORD *)v35 <= (int)v34)
      {
LABEL_23:
        goto LABEL_25;
      }
    }

    else
    {
      unint64_t v34 = *(__int16 *)(v17 + 32 * v13 + 2LL * *(int *)(a1 + 568) + 18);
      uint64_t v35 = *(void *)(a1 + 9240);
    }

    ++*(_WORD *)(*(void *)(v35 + 8) + 2 * v34);
    ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
    goto LABEL_23;
  }

  int v8 = (void *)sub_1000C1074(8LL * *v4 + 8);
  if (!v8) {
    goto LABEL_22;
  }
  unsigned int v9 = v8;
  *int v8 = 0LL;
  if (*v4 >= 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = *(void *)(v3 + 72);
    do
    {
      v9[v10 + 1] = v11;
      v11 += 2LL * (int)(sub_1000CC52C(v11) + 1);
      ++v10;
    }

    while (v10 < *v4);
  }

  *(void *)(v3 + 16) = v9;
  *(void *)(v3 + 24) = v9;
  return v3;
}

  sub_1000CB038(v13, v12);
  return v15;
}

  *(_DWORD *)(a1 + 304) = 4;
  *(void *)BOOL v5 = 0x200000002LL;
  *(_OWORD *)(v5 + 8) = xmmword_1000F2210;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)dbl_1000F2220;
  return result;
}

      sub_10009383C((uint64_t)&v9[v23], v34, 1);
      sub_1000CB038(v35, v33);
      ++v23;
      int v24 = v30;
    }

    while (v23 != v22);
    int v8 = v69;
    int v17 = v68;
    result = v67;
  }

  if (v8 >= 1) {
    goto LABEL_40;
  }
  return result;
}

    sub_100038D28(v13, 0LL);
    return 0LL;
  }

  return v13;
}

  v114 = __PAIR64__(a10, v31);
  v115 = a2;
  if ((int)a5 >= 1)
  {
    uint64_t v35 = a5;
    unint64_t v36 = (uint64_t **)a4;
    while (!sub_10002A330(*v36, v24, v25, v26, v27, v28, v29, v30))
    {
      ++v36;
      if (!--v35) {
        goto LABEL_21;
      }
    }

    *(_DWORD *)(v18 + 12) = 0;
    unint64_t v37 = v116;
    uint64_t v39 = v115;
    unint64_t v40 = HIDWORD(v114);
    if (v116 <= 0) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }

    uint64_t v11 = v8 + 500;
    *(_DWORD *)(v2 + 76) = v11;
    *(void *)(v2 + 80) = sub_1000C0C24(*(void *)(v2 + 80), 8LL * v11);
    *(void *)(v2 + 88) = sub_1000C0C24(*(void *)(v2 + 88), 4LL * *(int *)(v2 + 76));
    uint64_t v7 = *(unsigned __int16 *)(v2 + 12);
    goto LABEL_18;
  }

  unsigned int v9 = 1LL;
LABEL_34:
  sub_1000C0EF8(*(void *)a1);
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1000C0EF8(a1);
  return v9;
}

  *((void *)&v36 + 1) = a1;
  uint64_t v18 = sub_1000C9BD0(a1, a2, (uint64_t)&v35);
  unsigned int v19 = v37;
  sub_1000C0EF8(v35);
  if (!v18 || (v19 & 0x80000000) != 0) {
    goto LABEL_31;
  }
LABEL_19:
  int v20 = *(FILE **)(a1 + 32);
  if (v20)
  {
    uint64_t v21 = j__ftell(v20);
    uint64_t v22 = *(FILE **)(a1 + 32);
    uint64_t v35 = 0u;
    *(void *)&unint64_t v36 = 0LL;
    *((void *)&v36 + 1) = a1;
    unint64_t v37 = v19;
    if (v22)
    {
      if (!j__fseek(v22, v19, 0))
      {
        goto LABEL_39;
      }

  while (1)
  {
    unsigned int v19 = *a1 ? **a1 : 0LL;
    int v20 = sub_10004B3AC(v19, &v24);
    int v12 = v20;
    uint64_t v21 = (os_log_s *)VSGetLogDefault(v20);
    uint64_t v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
    if (v22) {
      break;
    }
    if (v12) {
      goto LABEL_25;
    }
LABEL_22:
    uint64_t v16 = v24;
    if (v24 != 2)
    {
      int v12 = 0;
      goto LABEL_31;
    }
  }

  *(_DWORD *)buf = 67109376;
  *(_DWORD *)uint64_t v27 = v12;
  *(_WORD *)&v27[4] = 1024;
  *(_DWORD *)&v27[6] = v24;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "#Audio ProcessSpeech (result = %d): reStatus = %d\n",  buf,  0xEu);
  if (!v12) {
    goto LABEL_22;
  }
LABEL_25:
  signed int v23 = (os_log_s *)VSGetLogDefault(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)uint64_t v27 = v12;
    *(_WORD *)&v27[4] = 2080;
    *(void *)&v27[6] = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
    unsigned int v28 = 1024;
    unsigned int v29 = 1917;
    unsigned int v30 = 2080;
    unsigned int v31 = "couldn't process samples";
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Error %d at %s:%d (%s)\n", buf, 0x22u);
  }

  uint64_t v16 = v24;
LABEL_28:
  if (v12 <= 0xB)
  {
LABEL_31:
    result = dword_1000F28F8[v12];
    if (!a5) {
      return result;
    }
LABEL_32:
    if (!(_DWORD)result && v25 != 2 && v16) {
      return 0LL;
    }
LABEL_15:
    *a5 = 1;
    return result;
  }

  result = 4294963295LL;
  if (a5) {
    goto LABEL_32;
  }
  return result;
}

  uint64_t v16 = (const __CFString *)CFDictionaryGetValue(v9, @"VSRecognitionModelDefinition");
  if (!v16)
  {
    uint64_t v27 = (const __CFString *)CFDictionaryGetValue(v9, @"VSRecognitionModelFileName");
    uint64_t v10 = v27;
    if (!v27) {
      goto LABEL_163;
    }
    if (!v7)
    {
      uint64_t v10 = 0LL;
      goto LABEL_165;
    }

    location = CFStringFind(v27, @".plist", 0xCuLL).location;
    if (location != -1)
    {
      unsigned int v29 = location;
      unsigned int v30 = CFStringCreateMutableCopy(v4, 0LL, v10);
      CFStringInsert(v30, v29, v7);
      CFStringInsert(v30, v29, @"-");
      unsigned int v31 = CFBundleCopyResourceURL(*(CFBundleRef *)(v3 + 80), v30, 0LL, 0LL);
      if (v31)
      {
        uint64_t v10 = (const __CFString *)v31;
        CFRelease(v30);
      }

      else
      {
        v98 = v4;
        v99 = v3;
        v100 = _VSCopyLanguageCodeFromLanguageIdentifier(v7);
        if (!v100)
        {
          CFRelease(v30);
          uint64_t v10 = 0LL;
          goto LABEL_164;
        }

        v101 = (const __CFString *)v100;
        v141.length = CFStringGetLength(v7);
        v141.location = v29 + 1;
        CFStringReplace(v30, v141, v101);
        uint64_t v10 = (const __CFString *)CFBundleCopyResourceURL(*(CFBundleRef *)(v99 + 80), v30, 0LL, 0LL);
        v102 = v101;
        uint64_t v3 = v99;
        CFRelease(v102);
        CFRelease(v30);
        int v4 = v98;
        if (!v10)
        {
LABEL_164:
          CFRelease(v7);
          goto LABEL_165;
        }
      }

      uint64_t v32 = CFReadStreamCreateWithFile(v4, (CFURLRef)v10);
      if (v32)
      {
        unsigned int v33 = v32;
        allocator = v4;
        if (CFReadStreamOpen(v32)
          && (unint64_t v34 = (const __CFString *)CFPropertyListCreateWithStream(v4, v33, 0LL, 0LL, 0LL, 0LL),
              CFReadStreamClose(v33),
              v34))
        {
          uint64_t v35 = v5;
          value = v34;
          unint64_t v36 = CFGetTypeID(v34);
          if (v36 == CFDictionaryGetTypeID())
          {
            unint64_t v37 = CFDictionaryCreateMutableCopy(allocator, 0LL, v9);
            BOOL v5 = v35;
            if (v37)
            {
              unint64_t v38 = v37;
              uint64_t v39 = value;
              CFDictionarySetValue(v37, @"VSRecognitionModelDefinition", value);
              CFDictionarySetValue(v38, @"lang", v7);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 96), a1, v38);
              CFRelease(v38);
              unsigned int v9 = v38;
              goto LABEL_173;
            }
          }

          else
          {
            BOOL v5 = v35;
          }

          uint64_t v39 = v34;
        }

        else
        {
          uint64_t v39 = 0LL;
        }

LABEL_19:
    uint64_t v16 = v15 + 2LL * (int)(*(_DWORD *)(result + 1120) * a3);
    int v17 = *(_DWORD *)(*(void *)(result + 1240) + 4LL * (int)v9);
    goto LABEL_26;
  }

  uint64_t v15 = *(void *)(result + 184);
  if (v15) {
    goto LABEL_19;
  }
LABEL_25:
  uint64_t v16 = *(void *)(result + 1536);
  int v17 = *(_DWORD *)(*(void *)(result + 1240) + 4LL * (int)v9);
LABEL_26:
  uint64_t v18 = 0LL;
  do
  {
    unsigned int v19 = *(unsigned __int8 *)(a2 + v18) * *(unsigned __int8 *)(v10 + v18);
    if (v19 >= 0x400) {
      unsigned int v19 = 1024;
    }
    *(_WORD *)(v16 + 2 * v18) = v19;
    LOBYTE(a7) = *(_BYTE *)(v10 + v18);
    a7 = (double)*(unint64_t *)&a7;
    v17 += (int)((double)(int)(v19 * v19) / a7 + 0.5);
    ++v18;
  }

  while (v18 < *(int *)(result + 1104));
LABEL_30:
  *(_DWORD *)(*(void *)(result + 168) + 4LL * (int)a3) = v17;
  int v20 = *(_DWORD *)(result + 1132);
  if (v20 >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = *(void *)(result + 200) + 4LL * (int)(v20 * a3);
    signed int v23 = (unsigned __int16 *)(v16 + 4);
    do
    {
      int v24 = (int *)(v22 + 4 * v21);
      *int v24 = *(v23 - 2) | (*v23 << 16);
      v24[1] = *(v23 - 1) | (v23[1] << 16);
      v21 += 2LL;
      v23 += 4;
    }

    while ((int)v21 < *(_DWORD *)(result + 1132));
  }

  return result;
}

  int v25 = 0LL;
  BOOL v26 = v19 * v18;
  uint64_t v27 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  unsigned int v28 = (_DWORD *)(*(void *)(a1 + 1240) + 4LL * (int)a2);
  unsigned int v29 = *(_DWORD *)(a1 + 1140);
  unsigned int v30 = vmovl_u8(*v10);
  unsigned int v31 = (int32x4_t)vmovl_high_u16(v30);
  uint64_t v32 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8);
  while (1)
  {
    unsigned int v33 = vmovl_u8(*(uint8x8_t *)(v17 + v25));
    unint64_t v34 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8);
    uint64_t v35 = vsubq_s32((int32x4_t)vmovl_high_u16(v33), v31);
    unint64_t v36 = vsubq_s32(v34, v32);
    a9.i64[0] = *(void *)(v27 + v25);
    unint64_t v37 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0330);
    a9 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0320);
    unint64_t v38 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v35, v35), a9), vmulq_s32(v36, v36), v37));
    if (v38 <= v29)
    {
      uint64_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 8), v10[1]);
      unint64_t v40 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 8));
      uint64_t v41 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v40.i8);
      a9 = (int32x4_t)vmovl_high_u16(v40);
      v42 = vaddvq_s32( vmlaq_s32( vmulq_s32(vmull_high_s16(v39, v39), a9),  vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8),  v41))
          + *v28
          + v38;
      if (v42 < v29)
      {
        unsigned int v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 16), v10[2]);
        int v44 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 16));
        int v45 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v44.i8);
        a9 = (int32x4_t)vmovl_high_u16(v44);
        int v46 = vaddvq_s32( vmlaq_s32( vmulq_s32(vmull_high_s16(v43, v43), a9),  vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8),  v45))
            + v42;
        if (v46 < v29)
        {
          uint64_t v47 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v25 + 24), v10[3]);
          int8x16_t v48 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8);
          uint64_t v49 = vmovl_u8(*(uint8x8_t *)(v27 + v25 + 24));
          uint64_t v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8);
          int8x16_t v51 = (int32x4_t)vmovl_high_u16(v49);
          uint64_t v52 = vmulq_s32(vmull_high_s16(v47, v47), v51);
          v51.i32[0] = *(_DWORD *)(v17 + v25 + 32);
          v9.i32[0] = v10[4].i32[0];
          v53 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
          int8x16_t v54 = (int32x4_t)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v51.i8), v53);
          a9 = vmulq_s32(v54, v54);
          v53.i32[0] = *(_DWORD *)(v27 + v25 + 32);
          unsigned int v9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v53));
          uint64_t v55 = vaddvq_s32(vmlaq_s32(vmlaq_s32(v52, v48, v50), a9, v9)) + v46;
          if (v55 < v29) {
            unsigned int v29 = v55;
          }
        }
      }
    }

    if (v26 == v25) {
      break;
    }
    ++v28;
    v25 += v18;
  }

            sub_1000BCBC8(v9);
            return v11;
          }
        }
      }
    }
  }

  uint64_t v16 = *(int *)(a1 + 224);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 228)) {
    return 0LL;
  }
  int v17 = *(void *)(a1 + 192);
  uint64_t v18 = *(_DWORD *)(a1 + 232);
  *a2 = *(char *)(*(void *)(a1 + 200) + v16);
  *a5 = *(void *)(a1 + 296) + 4LL * *(int *)(a1 + 224);
  if (a3)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 224);
    int v20 = *(_DWORD *)(a1 + 228);
    if (v19 == v20)
    {
      uint64_t v21 = 0;
    }

    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      signed int v23 = *(void *)(a1 + 208);
      do
      {
        if (!*(_BYTE *)(v23 + v19)) {
          break;
        }
        if (v19 + 1 == *(_DWORD *)(a1 + 236)) {
          unsigned int v19 = 0;
        }
        else {
          ++v19;
        }
        ++v22;
      }

      while (v19 != v20);
    }

    *a3 = v21;
  }

  if (a4)
  {
    int v24 = *(int *)(a1 + 224);
    int v25 = *(void *)(a1 + 208);
    BOOL v26 = *(unsigned __int8 *)(v25 + v24);
    if (*(_BYTE *)(v25 + v24))
    {
      uint64_t v27 = *(_DWORD *)(a1 + 244);
      if ((_DWORD)v24 == v27)
      {
        BOOL v26 = 0;
      }

      else
      {
        BOOL v26 = 0;
        do
        {
          LODWORD(v24) = v24 - 1;
          ++v26;
        }

        while ((_DWORD)v24 != v27);
      }
    }

    *a4 = v26;
  }

  unsigned int v28 = *(_DWORD *)(a1 + 224);
  if (v28 + 1 == *(_DWORD *)(a1 + 236)) {
    unsigned int v29 = 0;
  }
  else {
    unsigned int v29 = v28 + 1;
  }
  *(_DWORD *)(a1 + 224) = v29;
  return v17 + v18 * (uint64_t)(int)v16;
}

    unsigned int v19 = (char *)v15 - (char *)v9;
    int v20 = v10 - ((unint64_t)((char *)v11 - (char *)v9) >> 2);
    uint64_t v21 = (unint64_t)((char *)v11 - (char *)v15) >> 2;
    uint64_t v22 = (int)(v11 - v15);
    signed int v23 = 4 * v20;
    j__memmove(v15, &v15[v22], v23);
    int v24 = (int)(v19 >> 2);
    j__memmove((void *)(*((void *)a2 + 10) + v24), (const void *)(*((void *)a2 + 10) + v24 + v22), v20);
    int v25 = (char *)(*((void *)a2 + 9) + 2LL * (int)((unint64_t)v19 >> 2));
    j__memmove(v25, &v25[2 * (int)v21], 2 * v20);
    j__memmove((void *)(*((void *)a2 + 6) + 4 * v24), (const void *)(*((void *)a2 + 6) + 4 * v24 + 4 * v22), v23);
    j__memmove((void *)(*((void *)a2 + 7) + 4 * v24), (const void *)(*((void *)a2 + 7) + 4 * v24 + 4 * v22), v23);
    j__memmove((void *)(*((void *)a2 + 8) + v24), (const void *)(*((void *)a2 + 8) + v24 + v22), v20);
    BOOL v26 = v35;
    j__memmove( (void *)(*((void *)a2 + 1) + 4LL * a3),  (const void *)(*((void *)a2 + 1) + 4LL * v35),  4 * (*a2 - v35));
    j__memmove( (void *)(*((void *)a2 + 2) + 2LL * a3),  (const void *)(*((void *)a2 + 2) + 2LL * v26),  2 * (*a2 - v26));
    result = (unint64_t)j__memmove( (void *)(*((void *)a2 + 3) + 8LL * a3),  (const void *)(*((void *)a2 + 3) + 8LL * v26),  8 * (*a2 - v26));
    int v6 = v37;
    a4 = v36;
    LODWORD(v8) = a2[1] - 1;
    a2[1] = v8;
    if ((_DWORD)v8)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
  }

  a2[35] = -1;
  if (!a4) {
    goto LABEL_26;
  }
LABEL_21:
  if (a3)
  {
    if (a2[35] != -1)
    {
      if ((_DWORD)v8 == 1)
      {
        a2[35] = 100;
        LODWORD(v8) = 1;
      }

      else if (a3 == 1)
      {
        result = sub_100039924(*(void *)(v6 + 5512), **((_DWORD **)a2 + 1), *(_DWORD *)(*((void *)a2 + 1) + 4LL));
        a2[35] = result;
        LODWORD(v8) = a2[1];
      }
    }
  }

  else
  {
    a2[35] = -1;
  }

      if (v13)
      {
        --v13;
      }

      else
      {
        unsigned int v19 = *v5++;
        uint64_t v18 = v19;
        if (*(_BYTE *)(v4 + v19) != 2)
        {
          uint64_t v13 = 0;
          if ((_DWORD)v14) {
            goto LABEL_25;
          }
          return ((_DWORD)v5 - (_DWORD)a3);
        }

        int v20 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v18);
        uint64_t v21 = *v20;
        uint64_t v13 = v20[1] + ~(_DWORD)v21;
        uint64_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v21);
      }

      ++v10;
LABEL_24:
      if ((_DWORD)v14)
      {
LABEL_25:
        uint64_t v22 = 0;
        signed int v23 = *(_DWORD *)(a1 + 40);
        do
        {
          if (v23 < 1) {
            goto LABEL_47;
          }
          if (v13)
          {
            int v24 = v13 - 1;
            if (v24) {
              goto LABEL_30;
            }
          }

          else
          {
            BOOL v26 = *v5++;
            int v25 = v26;
            if (*(_BYTE *)(v4 + v26) != 2) {
              goto LABEL_35;
            }
            uint64_t v27 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v25);
            unsigned int v28 = *v27;
            int v24 = v27[1] + ~(_DWORD)v28;
            uint64_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v28);
            if (v24)
            {
LABEL_30:
              uint64_t v13 = v24 - 1;
              v10 += 2;
              if (v23 == 1) {
                goto LABEL_47;
              }
              goto LABEL_37;
            }
          }

          ++v10;
LABEL_35:
          unsigned int v30 = *v5++;
          unsigned int v29 = v30;
          if (*(_BYTE *)(v4 + v30) == 2)
          {
            unsigned int v31 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v29);
            uint64_t v32 = *v31;
            uint64_t v13 = v31[1] + ~(_DWORD)v32;
            uint64_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v32 + 1);
            if (v23 == 1) {
              goto LABEL_47;
            }
LABEL_37:
            if (v13)
            {
              --v13;
LABEL_43:
              ++v10;
              goto LABEL_47;
            }

            goto LABEL_41;
          }

          if (v23 == 1)
          {
            uint64_t v13 = 0;
            goto LABEL_47;
          }

    if (v3 == v2) {
      return 0xFFFFFFLL;
    }
    return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v3 >> 8)) + 12LL * v3 + 8);
  }

  uint64_t v3 = 0;
  if (!v2) {
    return 0xFFFFFFLL;
  }
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v3 >> 8)) + 12LL * v3 + 8);
}

            v71 = *(void *)(v71 + 32);
          }

          while (v71);
          do
          {
            v82 = *(int *)(v69 + 12);
            if ((int)v82 < **(_DWORD **)v69 - 1)
            {
              v83 = *(void *)(*(void *)v69 + 8LL);
              v84 = *(int *)(v83 + 8 * v82);
              v85 = *(_DWORD *)(v83 + 8LL * ((int)v82 + 1));
              if ((int)v84 < v85)
              {
                v86 = v66;
                do
                {
                  v87 = *(void *)(*(void *)v69 + 24LL);
                  v88 = v87 + 12 * v84;
                  v90 = *(_DWORD *)(v88 + 4);
                  v89 = (_DWORD *)(v88 + 4);
                  if (v90) {
                    v91 = v86 == 0;
                  }
                  else {
                    v91 = 1;
                  }
                  if (v91)
                  {
                    v66 = v86;
                  }

                  else
                  {
                    v92 = 0;
                    v93 = 0;
                    v94 = (_DWORD *)(v87 + 12 * v84 + 8);
                    v66 = v86;
                    do
                    {
                      if (*v89 == *(_DWORD *)(v86 + 8) && *(_DWORD *)(v69 + 20) == *(_DWORD *)(v86 + 16))
                      {
                        v95 = *(void *)v86;
                        if (v93)
                        {
                          v93 = 1;
                        }

                        else if (*(_DWORD *)(*(void *)(v95 + 8) + 8LL * *(int *)(v86 + 12) + 4))
                        {
                          sub_1000C0BFC(0x28uLL, v59, v60, v61, v62, v63, v64, v65);
                          *(void *)v96 = *(void *)v69;
                          *(_DWORD *)(v96 + 12) = *v94;
                          *(_DWORD *)(v96 + 16) = *(_DWORD *)(v69 + 16);
                          *(_DWORD *)(v96 + 20) = v393;
                          *(_DWORD *)(v96 + 8) = *(_DWORD *)(v69 + 8);
                          *(void *)(v96 + 32) = v66;
                          v95 = *(void *)v86;
                          v93 = 1;
                          v66 = v96;
                        }

                        else
                        {
                          v93 = 0;
                        }

                        v97 = *(void *)(v95 + 8);
                        v98 = *(int *)(v86 + 12);
                        v99 = *(_DWORD *)(v97 + 8 * v98);
                        if (v99 < *(_DWORD *)(v95 + 4) && !v92 && *(_DWORD *)(v97 + 8 * v98 + 8) > v99)
                        {
                          sub_1000C0BFC(0x28uLL, v59, v60, v61, v62, v63, v64, v65);
                          *(void *)v100 = *(void *)v69;
                          *(_DWORD *)(v100 + 12) = *(_DWORD *)(v69 + 12);
                          *(_DWORD *)(v100 + 16) = *(_DWORD *)(v69 + 16);
                          *(_DWORD *)(v100 + 20) = *(_DWORD *)(v69 + 20);
                          *(_DWORD *)(v100 + 8) = *(_DWORD *)(v69 + 8);
                          *(void *)(v100 + 32) = v66;
                          v92 = 1;
                          v66 = v100;
                        }

                        if (v92 ? v93 : 0) {
                          break;
                        }
                      }

                      v86 = *(void *)(v86 + 32);
                    }

                    while (v86);
                  }

                  ++v84;
                  v86 = v66;
                }

                while (v85 != (_DWORD)v84);
              }
            }

            v81 = *(void *)(v69 + 32);
            sub_1000C0EF8(v69);
            v69 = v81;
          }

          while (v81);
          if (v66) {
            break;
          }
          ++v391;
          signed int v23 = v379;
          if (v393 == v369) {
            goto LABEL_73;
          }
        }

        v104 = v66;
        signed int v23 = v379;
        do
        {
          if (*(_DWORD *)(*(void *)(*(void *)v104 + 8LL) + 8LL * *(int *)(v104 + 12) + 4))
          {
            v105 = *(_DWORD *)(v104 + 16);
            v106 = &v379[7 * v105];
            v108 = v106[3];
            v107 = v106 + 3;
            v109 = *(_DWORD *)(v104 + 8);
            if (v108 != v109 || v379[7 * v105 + 4] != (_DWORD)v391 + 1 - v105)
            {
              *v107 = v109;
              v379[7 * *(int *)(v104 + 16) + 4] = v393 - *(_DWORD *)(v104 + 16);
            }
          }

          v104 = *(void *)(v104 + 32);
        }

        while (v104);
        ++v391;
      }

      while (v393 != v369);
      do
      {
        v110 = *(void *)(v66 + 32);
        sub_1000C0EF8(v66);
        v66 = v110;
      }

      while (v110);
LABEL_73:
      v392 = 0;
      v111 = 0LL;
      HIDWORD(v400) = 0;
      v365 = v23 + 14;
LABEL_80:
      LODWORD(v400) = 0;
      v116 = &v23[7 * (int)v111];
      if (*v116 == 4) {
        goto LABEL_79;
      }
      v117 = (int)v111;
      v118 = v116 + 1;
      v119 = (char *)&v390[v116[1]];
      if (*v116 == 3)
      {
        v120 = *(unsigned __int16 *)v119;
        if (v120 == 45)
        {
          if ((int)v111 > 0)
          {
            v122 = (uint64_t)a7;
            v121 = v379;
            v123 = &v379[7 * (int)v111];
            v126 = v123[2];
            v124 = v123 + 2;
            v125 = v126;
            v127 = v380;
            if (v379[7 * (v111 - 1)] == 2)
            {
              v128 = v376;
              if (v379[7 * (v111 + 1)] == 2)
              {
                int8x16x2_t v59 = *((void *)v363 + 28);
                if (!v59) {
                  goto LABEL_79;
                }
                else {
                  v129 = *v384;
                }
                sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v129,  *v118,  0,  0,  0);
                goto LABEL_475;
              }
            }

            else
            {
              v128 = v376;
            }

      sub_1000C0EF8(*(void *)(v4 + 80));
      sub_1000C0EF8(*(void *)(v4 + 88));
    }
  }

  else
  {
    *(_DWORD *)(v4 + 52) = j__ftell(*(FILE **)(v4 + 32));
    if (!j__fseek(*(FILE **)(v4 + 32), 0LL, 0))
    {
      if (sub_1000C90E0((int *)v4))
      {
        *(_DWORD *)(v4 + 24) = 0;
        unsigned int v9 = j__ftell(*(FILE **)(v4 + 32));
        *(void *)(v4 + 64) = 0LL;
        *(_DWORD *)(v4 + 56) = v9;
        *(_DWORD *)(v4 + 60) = 0;
        return v4;
      }

      else
      {
        sub_1000C9070(v4);
        return 0LL;
      }
    }

    if (*(int *)(v4 + 76) >= 1)
    {
      if (*(_WORD *)(v4 + 12))
      {
        uint64_t v7 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v4 + 80) + 8 * v7++));
        while (v7 < *(unsigned __int16 *)(v4 + 12));
      }

      goto LABEL_19;
    }
  }

  int v8 = *(FILE **)(v4 + 32);
  if (v8) {
    j__fclose(v8);
  }
  sub_1000C0EF8(v4);
  return 0LL;
}

      if (!*a4) {
        *a4 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      }
      goto LABEL_21;
    }
  }

  uint64_t v14 = (os_log_s *)VSGetLogDefault(BundleWithIdentifier);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No bin file found\n", buf, 2u);
  }

  return 4294963290LL;
}

_DWORD *sub_10000539C(_DWORD *result, unsigned __int8 *a2, _WORD *a3)
{
  if (result[278])
  {
    if (result[440])
    {
      if ((int)result[275] >= 8)
      {
        int v3 = 0;
        int v4 = a3 + 4;
        do
        {
          unsigned int v5 = *a2;
          v4[2] = v5 >> 4;
          v4[3] = v5 & 0xF;
          unsigned int v6 = a2[1];
          *int v4 = v6 >> 4;
          v4[1] = v6 & 0xF;
          unsigned int v7 = a2[2];
          *(v4 - 2) = v7 >> 4;
          *(v4 - 1) = v7 & 0xF;
          unsigned int v8 = a2[3];
          *(v4 - 4) = v8 >> 4;
          *(v4 - 3) = v8 & 0xF;
          a2 += 4;
          ++v3;
          v4 += 4;
        }

        while (v3 < result[275] / 8);
      }
    }

    else if ((int)result[280] >= 1)
    {
      uint64_t v10 = 0LL;
      do
      {
        unsigned int v11 = a2[v10];
        *a3 = v11 & 0xF;
        a3[1] = v11 >> 4;
        ++v10;
        a3 += 2;
      }

      while (v10 < (int)result[280]);
    }
  }

  else if ((int)result[275] >= 1)
  {
    uint64_t v9 = 0LL;
    do
    {
      a3[v9] = *(_WORD *)&a2[2 * v9];
      ++v9;
    }

    while (v9 < (int)result[275]);
  }

  return result;
}

uint64_t sub_1000054A4(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1216);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3;
  }
  return *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)v5;
}

uint64_t sub_100005528(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1208) + 2LL * (int)(*(_DWORD *)(a1 + 1124) * a2);
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1208);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1208) + 2LL * (int)(*(_DWORD *)(a1 + 1124) * a2);
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3;
  }
  return *(void *)(a1 + 1208) + 2LL * *(_DWORD *)(a1 + 1124) * v5;
}

uint64_t sub_1000055BC(uint64_t result, unsigned int a2, int a3, void *a4, void *a5)
{
  *a4 = 0LL;
  *a5 = 0LL;
  int v5 = *(_DWORD *)(result + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  LODWORD(v7) = a2 - v5;
  if ((int)v7 < 0 == v6)
  {
    *a4 = *(void *)(result + 800) + 4LL * (int)v7;
    if (!*(_DWORD *)(result + 1044)) {
      return result;
    }
    uint64_t v7 = (int)v7;
    uint64_t v9 = (void *)(result + 808);
    goto LABEL_12;
  }

  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
    }
    a2 = v8 + a3;
  }

  *a4 = *(void *)(result + 40) + 4LL * (int)a2;
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v7 = (int)a2;
    uint64_t v9 = (void *)(result + 56);
LABEL_12:
    *a5 = *v9 + 4 * v7;
  }

  return result;
}

uint64_t sub_100005648(uint64_t result, unsigned int a2, int a3, void *a4, void *a5)
{
  *a4 = 0LL;
  *a5 = 0LL;
  int v5 = *(_DWORD *)(result + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  LODWORD(v7) = a2 - v5;
  if ((int)v7 < 0 == v6)
  {
    *a4 = *(void *)(result + 816) + 2LL * (int)v7;
    if (!*(_DWORD *)(result + 1044)) {
      return result;
    }
    uint64_t v7 = (int)v7;
    uint64_t v9 = (void *)(result + 824);
    goto LABEL_12;
  }

  if (!*(_DWORD *)(result + 2012))
  {
    if (*(_DWORD *)(result + 1176)) {
      int v8 = *(_DWORD *)(*(void *)(result + 1160) + 4LL * a2);
    }
    else {
      int v8 = *(unsigned __int16 *)(*(void *)(result + 1144) + 2LL * a2);
    }
    a2 = v8 + a3;
  }

  *a4 = *(void *)(result + 72) + 2LL * (int)a2;
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v7 = (int)a2;
    uint64_t v9 = (void *)(result + 88);
LABEL_12:
    *a5 = *v9 + 2 * v7;
  }

  return result;
}

uint64_t sub_1000056D4(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 != 3)
  {
    if (v3 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          int v4 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
        }
        else {
          int v4 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
        }
        a2 = v4 + a3;
      }
    }

    else
    {
      a2 = 0;
    }
  }

  return *(void *)(a1 + 1224) + 4LL * ((int)(*(_DWORD *)(a1 + 1124) * a2) / 2);
}

uint64_t sub_10000573C(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1296);
  if (v3 == 3) {
    return *(void *)(a1 + 1240) + 4LL * (int)a2;
  }
  if (v3 != 4) {
    return *(void *)(a1 + 1240);
  }
  if (*(_DWORD *)(a1 + 2012)) {
    return *(void *)(a1 + 1240) + 4LL * (int)a2;
  }
  if (*(_DWORD *)(a1 + 1176)) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3;
  }
  else {
    int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3;
  }
  return *(void *)(a1 + 1240) + 4LL * v5;
}

uint64_t sub_1000057B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  int v10 = a2;
  if (*(_DWORD *)(a1 + 1344))
  {
    LOWORD(v12) = *(_WORD *)(*(void *)(a1 + 1352)
                           + 2LL * ((int)a4 + ((int)a3 + *(_DWORD *)(a1 + 1884) * (int)a2) * *(_DWORD *)(a1 + 1884)));
    return (unsigned __int16)v12;
  }

  uint64_t v13 = (unsigned __int16 *)sub_1000CAF58(2LL * *(int *)(a1 + 1096), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = 1096LL;
  uint64_t v15 = *(unsigned int *)(a1 + v14);
  if ((int)v15 >= 1)
  {
    for (uint64_t i = 0LL; i != v15; ++i)
    {
      if (*(_DWORD *)(a1 + 1024) && *(_DWORD *)(a1 + 1884) <= (int)a3)
      {
        __int16 v17 = sub_10001CE5C(a1, a3, i);
      }

      else if (*(_DWORD *)(a1 + 1316))
      {
        __int16 v17 = *(_WORD *)(*(void *)(a1 + 1328)
                       + 2
                       * (i
      }

      else if (*(_DWORD *)(a1 + 1312))
      {
        __int16 v17 = sub_100038308(*(void *)(a1 + 1304), v10, a3, v8, i);
      }

      else
      {
        __int16 v17 = -1;
      }

      v13[i] = v17;
    }
  }

  int v18 = *(_DWORD *)(a1 + 1384);
  int v19 = v18 - 1;
  if (v18 < 1)
  {
LABEL_28:
    LOWORD(v12) = 0x7FFF;
    return (unsigned __int16)v12;
  }

  uint64_t v20 = *(int *)(a1 + 1096);
  uint64_t v21 = *(void *)(a1 + 1368);
  if ((_DWORD)v15 == 2)
  {
    int v22 = 0;
    while (1)
    {
      int v23 = v19 + v22;
      if (v19 + v22 < 0 != __OFADD__(v19, v22)) {
        ++v23;
      }
      int v12 = v23 >> 1;
      int v24 = (unsigned __int16 *)(v21 + 2LL * (int)v20 * (v23 >> 1));
      int v25 = *v13 - *v24;
      if (v25)
      {
        if (v25 < 0) {
          goto LABEL_19;
        }
LABEL_26:
        if (!v25) {
          goto LABEL_43;
        }
        int v22 = v12 + 1;
        if (v12 + 1 > v19) {
          goto LABEL_28;
        }
      }

      else
      {
        int v25 = v13[1] - v24[1];
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_19:
        int v19 = v12 - 1;
        if (v22 > v12 - 1) {
          goto LABEL_28;
        }
      }
    }
  }

  if ((int)v15 < 1)
  {
    int v12 = v19 >> 1;
LABEL_43:
    sub_1000CB038(v13, 2 * v20);
  }

  else
  {
    int v26 = 0;
    do
    {
      int v27 = v19 + v26;
      if (v19 + v26 < 0 != __OFADD__(v19, v26)) {
        ++v27;
      }
      int v12 = v27 >> 1;
      unsigned int v28 = (unsigned __int16 *)(v21 + 2LL * (int)v20 * (v27 >> 1));
      unsigned int v29 = v13;
      uint64_t v30 = v15;
      while (1)
      {
        unsigned int v32 = *v29++;
        unsigned int v31 = v32;
        unsigned int v34 = *v28++;
        unsigned int v33 = v34;
        if (v31 != v34) {
          break;
        }
        if (!--v30) {
          goto LABEL_43;
        }
      }

      if (v31 < v33) {
        int v19 = v12 - 1;
      }
      else {
        int v26 = v12 + 1;
      }
      LOWORD(v12) = 0x7FFF;
    }

    while (v26 <= v19);
  }

  return (unsigned __int16)v12;
}

uint64_t sub_1000059CC( uint64_t a1, unsigned __int16 *a2, int a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 2)
  {
    uint64_t v15 = a6;
  }

  else
  {
    unint64_t v12 = a3 + 1LL;
    unsigned int v13 = a3 - 1;
    do
    {
      uint64_t v14 = v13;
      uint64_t v15 = a2[v14];
      a4[v14] = sub_1000057B0(a1, a2[--v13], v15, (unsigned __int16)a6, a5, a6, a7, a8);
      --v12;
      a6 = v15;
    }

    while (v12 > 2);
  }

  uint64_t result = sub_1000057B0(a1, a5, *a2, v15, a5, a6, a7, a8);
  *a4 = result;
  return result;
}

uint64_t sub_100005A74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1884);
}

uint64_t sub_100005A7C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100005A94( uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *(void **)(a1 + 744);
  uint64_t v12 = v11[10];
  if (v12)
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = (__int16 *)(v11[6] + 2LL * a3);
    __int16 v16 = *v15;
    unsigned int v17 = (unsigned __int16)v15[1];
    int v18 = (unsigned __int8 *)(v14 + 3);
    unsigned int v19 = *(unsigned __int8 *)(v14 + 2);
    __int16 v20 = v16;
    if (!*(_BYTE *)(v14 + 2)) {
      goto LABEL_8;
    }
    do
    {
LABEL_5:
      if ((v19 & 1) != 0)
      {
        a2[(int)v13] = v16;
        uint64_t v13 = (v13 + 1);
      }

      v19 >>= 1;
      ++v16;
    }

    while (v19);
LABEL_8:
    while (1)
    {
      __int16 v16 = v20 + 8;
      unsigned int v21 = *v18++;
      unsigned int v19 = v21;
      v20 += 8;
      if (v21) {
        goto LABEL_5;
      }
    }

    a2[(int)v13] = *(_WORD *)v14;
  }

  else
  {
    int v23 = *(_DWORD *)(a1 + 1884);
    __int16 v24 = sub_1000057B0(a1, 0LL, a3, a4, a5, a6, a7, a8);
    *a2 = v24;
    if (v23 < 1)
    {
      uint64_t v13 = 1LL;
    }

    else
    {
      unsigned __int16 v29 = 0;
      uint64_t v13 = 1LL;
      do
      {
        int v30 = sub_1000057B0(a1, v29, a3, a4, v25, v26, v27, v28);
        if ((int)v13 < 1 || (unsigned __int16)*a2 == v30)
        {
          int v31 = 0;
        }

        else
        {
          unsigned __int16 v32 = 0;
          do
            int v31 = ++v32;
          while ((int)v13 > v32 && (unsigned __int16)a2[v32] != v30);
        }

        if ((_DWORD)v13 == v31)
        {
          a2[v13] = v30;
          uint64_t v13 = (v13 + 1);
        }

        ++v29;
      }

      while (v23 > v29);
      __int16 v24 = *a2;
    }

    a2[(int)v13] = v24;
    qsort(a2, (int)v13, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100005A7C);
  }

  return v13;
}

uint64_t sub_100005C2C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 744) + 96LL);
  if (v6) {
    return (byte_1000F166C[a2 & 7] & *(_BYTE *)(v6 + 8LL * a5 + ((unint64_t)a2 >> 3))) != 0;
  }
  if (!(_DWORD)a3) {
    return *(unsigned __int16 *)(a1 + 1390) == a5;
  }
  LODWORD(v10) = *(_DWORD *)(a1 + 1096);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = *(void *)(a1 + 1368) + 2LL * (int)(v10 * a5);
    do
    {
      if (*(_DWORD *)(a1 + 1024) && *(_DWORD *)(a1 + 1884) <= (int)a3)
      {
        BOOL v14 = sub_10001CE5C(a1, a3, v12) == *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v14;
        if (!v14) {
          return result;
        }
      }

      else if (*(_DWORD *)(a1 + 1316))
      {
        uint64_t result = *(unsigned __int16 *)(*(void *)(a1 + 1328)
                                     + 2
                                     * (v12
                                      + (int)((a4 + (a3 + *(_DWORD *)(a1 + 1884) * a2) * *(_DWORD *)(a1 + 1884)) * v10))) == *(unsigned __int16 *)(v13 + 2 * v12);
        if (*(unsigned __int16 *)(*(void *)(a1 + 1328) {
                                 + 2
        }
      }

      else if (*(_DWORD *)(a1 + 1312))
      {
        BOOL v14 = sub_100038308(*(void *)(a1 + 1304), a2, a3, a4, v12) == *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v14;
        if (!v14) {
          return result;
        }
      }

      else
      {
        int v15 = *(unsigned __int16 *)(v13 + 2 * v12);
        uint64_t result = v15 == 0xFFFF;
        if (v15 != 0xFFFF) {
          return result;
        }
      }

      ++v12;
      uint64_t v10 = *(int *)(a1 + 1096);
    }

    while (v12 < v10);
  }

  return 1LL;
}

BOOL sub_100005DBC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(void **)(a1 + 744);
  int v4 = *(_DWORD *)(a1 + 1884);
  int v5 = v4 - 1;
  if (v4 > 1)
  {
    uint64_t v8 = v3[6];
    int v9 = 1;
    int v10 = v5;
    do
    {
      int v11 = v10 + v9;
      if (v10 + v9 < 0 != __OFADD__(v10, v9)) {
        ++v11;
      }
      int v12 = v11 >> 1;
      else {
        int v10 = v12 - 1;
      }
    }

    while (v9 <= v10);
    int v13 = 1;
    do
    {
      int v14 = v5 + v13;
      if (v5 + v13 < 0 != __OFADD__(v5, v13)) {
        ++v14;
      }
      int v15 = v14 >> 1;
      else {
        int v5 = v15 - 1;
      }
    }

    while (v13 <= v5);
    uint64_t v7 = (unsigned __int16)(v13 - 1);
    uint64_t v6 = (unsigned __int16)(v9 - 1);
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = v3[6];
  }

  unint64_t v16 = a2 - *(unsigned __int16 *)(v8 + 2 * v6);
  if ((byte_1000F166C[v16 & 7] & *(_BYTE *)(*(void *)(v3[10] + 8 * v6)
                                                            + *(unsigned __int16 *)(*(void *)(v3[11] + 8 * v6) + 2 * v7)
                                                            + (v16 >> 3)
                                                            + 2)) == 0)
    return 0LL;
  unint64_t v17 = a3 - *(unsigned __int16 *)(v8 + 2 * v7);
  return (byte_1000F166C[v17 & 7] & *(_BYTE *)(*(void *)(v3[7] + 8 * v7)
                                                              + *(unsigned __int16 *)(*(void *)(v3[8] + 8 * v7)
                                                                                    + 2 * v6)
                                                              + (v17 >> 3)
                                                              + 2)) != 0;
}

uint64_t sub_100005ED0(uint64_t result, int a2)
{
  if (a2 == 5)
  {
    unsigned int v2 = sub_1000154C8;
  }

  else
  {
    if (a2 != 2) {
      return result;
    }
    unsigned int v2 = sub_100015224;
  }

  *(void *)(result + 1616) = v2;
  return result;
}

void sub_100005EFC( uint64_t a1, int32x4_t a2, double a3, int32x4_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v8 = *(unsigned int *)(a1 + 1100);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = v8 + 1;
    do
      *(_BYTE *)(*(void *)(a1 + 1544) + (v9-- - 2)) = *(_BYTE *)(a1 + 1770);
    while (v9 > 1);
  }

  if (*(_DWORD *)(a1 + 1036))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 1100);
    if ((int)v10 >= 1)
    {
      unint64_t v11 = v10 + 1;
      do
      {
        __int16 v12 = *(unsigned __int8 *)(*(void *)(a1 + 1544) + (v11 - 2));
        *(_WORD *)(*(void *)(a1 + 1584) + 2LL * (v11-- - 2)) = v12 * v12;
      }

      while (v11 > 1);
    }

    sub_100006244(a1, a2, a3, a4, a5, a6, a7);
  }

  sub_100015AE0(a1);
  *(_DWORD *)(a1 + 1600) = 0xFFFF;
}

void sub_100005F98( uint64_t a1, uint64_t a2, int a3, int32x4_t a4, double a5, int32x4_t a6, int32x4_t a7, int8x16_t a8, int8x16_t a9)
{
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 992) || !*(_DWORD *)(a1 + 448) && !*(_DWORD *)(a1 + 456))
    {
      if (*(_DWORD *)(a1 + 1776))
      {
        uint64_t v12 = *(unsigned int *)(a1 + 1100);
        if ((int)v12 >= 1)
        {
          int v13 = 1 << (*(_DWORD *)(a1 + 1784) - 1);
          unint64_t v14 = v12 + 1;
          do
          {
            uint64_t v15 = (v14 - 2);
            *(_BYTE *)(*(void *)(a1 + 1544) + v15) = v16;
            --v14;
          }

          while (v14 > 1);
        }
      }

      else
      {
        uint64_t v19 = *(unsigned int *)(a1 + 1100);
        if ((int)v19 >= 1)
        {
          unint64_t v20 = v19 + 1;
          do
          {
            *(_BYTE *)(*(void *)(a1 + 1544) + (v20 - 2)) = *(_BYTE *)(a2 + (v20 - 2));
            --v20;
          }

          while (v20 > 1);
        }
      }
    }
  }

  else
  {
    uint64_t v17 = *(unsigned int *)(a1 + 1100);
    if ((int)v17 >= 1)
    {
      unint64_t v18 = v17 + 1;
      do
        *(_BYTE *)(*(void *)(a1 + 1544) + (v18-- - 2)) = *(_BYTE *)(a1 + 1770);
      while (v18 > 1);
    }
  }

  if (*(_DWORD *)(a1 + 1036))
  {
    uint64_t v21 = *(unsigned int *)(a1 + 1100);
    if ((int)v21 >= 1)
    {
      unint64_t v22 = v21 + 1;
      do
      {
        __int16 v23 = *(unsigned __int8 *)(*(void *)(a1 + 1544) + (v22 - 2));
        *(_WORD *)(*(void *)(a1 + 1584) + 2LL * (v22-- - 2)) = v23 * v23;
      }

      while (v22 > 1);
    }

    *(double *)a4.i64 = sub_100006244(a1, a4, a5, a6, a7, a8, a9);
  }

  if (a3)
  {
    if (*(_DWORD *)(a1 + 1032))
    {
      if (!*(_DWORD *)(a1 + 1760))
      {
        sub_100006244(a1, a4, a5, a6, a7, a8, a9);
        if (*(_DWORD *)(a1 + 1004))
        {
LABEL_31:
          if (*(_DWORD *)(a1 + 656))
          {
            (*(void (**)(uint64_t))(a1 + 1656))(a1);
            return;
          }
        }

LABEL_34:
        if (*(_DWORD *)(a1 + 1016))
        {
          if (*(_DWORD *)(a1 + 976)) {
            (*(void (**)(void, uint64_t, uint64_t))(a1 + 960))(*(void *)(a1 + 944), a2, a1);
          }
        }

        return;
      }

      __int16 v24 = *(unsigned __int8 **)(a1 + 1544);
      uint64_t v25 = *(int **)(a1 + 1560);
      *uint64_t v25 = (v24[6] << 24) | (v24[7] << 28) | (v24[5] << 20) | (v24[4] << 16) | (v24[3] << 12) | (v24[2] << 8) | (16 * v24[1]) | *v24;
      v25[1] = (v24[14] << 24) | (v24[15] << 28) | (v24[13] << 20) | (v24[12] << 16) | (v24[11] << 12) | (v24[10] << 8) | (16 * v24[9]) | v24[8];
      v25[2] = (v24[22] << 24) | (v24[23] << 28) | (v24[21] << 20) | (v24[20] << 16) | (v24[19] << 12) | (v24[18] << 8) | (16 * v24[17]) | v24[16];
    }

    if (*(_DWORD *)(a1 + 1004)) {
      goto LABEL_31;
    }
    goto LABEL_34;
  }

      if (a3 == (_DWORD)v31)
      {
      }

      else if (sub_1000261D4( a1,  (unsigned __int16 *)(v11 + 2LL * (int)v31),  a3 - (int)v31,  *(unsigned __int16 *)(v11 + 2LL * ((int)v31 - 1)),  ((unint64_t)*(unsigned int *)(*(void *)(a1 + 272) + 4LL * *((int *)i + 1)) << 35) {
                              + (int)v31
      }
                              - 1
                              + *((_DWORD *)i + 3)
                              + ((uint64_t)*((int *)i + 2) << 10)))
      {
        return 1LL;
      }
    }

    unint64_t v22 = *(_DWORD *)(a1 + 392);
    if (v22 <= 0)
    {
      uint64_t i = *(unsigned __int16 **)(a1 + 384);
      if (*i == v21) {
        goto LABEL_30;
      }
    }

    else
    {
      __int16 v23 = 0;
      __int16 v24 = v22 - 1;
      uint64_t v25 = *(void *)(a1 + 384);
      do
      {
        uint64_t v26 = v24 + v23;
        if (v24 + v23 < 0 != __OFADD__(v24, v23)) {
          ++v26;
        }
        uint64_t v27 = v26 >> 1;
        else {
          __int16 v24 = v27 - 1;
        }
      }

      while (v23 <= v24);
      uint64_t i = (unsigned __int16 *)(v25 + 16LL * v23);
      if (*i == v21) {
        goto LABEL_30;
      }
    }

    return 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 400));
  sub_1000C0EF8(*(void *)(a1 + 408));
  sub_1000C0EF8(*(void *)(a1 + 416));
  uint64_t result = sub_1000C1074(2LL * a3);
  if (!result) {
    return result;
  }
  unint64_t v11 = result;
  int v13 = sub_1000C1074(2LL * a3);
  if (v13)
  {
    unint64_t v14 = (unsigned __int16 *)v13;
    uint64_t v15 = sub_1000C1074(4LL * a3);
    if (v15)
    {
      *(void *)(a1 + 400) = v11;
      *(void *)(a1 + 408) = v14;
      *(void *)(a1 + 416) = v15;
      *(_DWORD *)(a1 + 424) = a3;
      unsigned int v34 = 0;
      if (a3 < 1) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }

    sub_1000C0EF8(v11);
    unsigned int v33 = (uint64_t)v14;
  }

  else
  {
    unsigned int v33 = v11;
  }

  sub_1000C0EF8(v33);
  return 0LL;
}

  *(_DWORD *)(a2 + 116) = 0;
  unint64_t v22 = *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v20 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v20);
  *(_DWORD *)(a2 + 64) = v22;
  int v46 = v11;
  uint64_t v47 = a4;
  int v45 = v20;
  if (v22 < 1)
  {
    __int16 v23 = 0;
    LODWORD(v14) = 0;
    goto LABEL_79;
  }

  if (a5 == 0xFFFF)
  {
    __int16 v23 = 0;
    while (1)
    {
      int v31 = v23 + *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v20);
      uint64_t v28 = *(int *)(*(void *)(a1 + 304) + 4LL * v31);
      *(_DWORD *)(a2 + 56) = v28;
      unsigned __int16 v32 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v28);
      *(_DWORD *)(a2 + 44) = v32;
      unsigned int v33 = sub_100031134(*(void *)(a1 + 256), v32);
      *(void *)(a2 + 48) = v33;
      uint64_t result = sub_1000307F4(v33);
      *(_DWORD *)(a2 + 72) = result;
      if ((_DWORD)result) {
        break;
      }
      if (++v23 >= *(_DWORD *)(a2 + 64))
      {
        LODWORD(v14) = 0;
        goto LABEL_79;
      }
    }

    *(_WORD *)(a2 + 88) = 0;
    if (*(_DWORD *)(a1 + 336))
    {
      __int16 v24 = *(unsigned __int8 *)(*(void *)(a1 + 352) + v31);
      *(_WORD *)(a2 + 88) = v24;
    }

    else
    {
      __int16 v24 = 0;
    }

    unsigned int v34 = v47;
    LODWORD(v14) = 0;
    *(_WORD *)(a2 + 76) = sub_100030F30(*(void *)(a2 + 48), 0, 0, &v50);
    uint64_t v35 = (unsigned __int16 *)(a2 + 76);
    unint64_t v36 = qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_57:
      unint64_t v40 = v50;
      unint64_t v38 = (uint64_t *)(a2 + 192);
      *(_DWORD *)(a2 + 112) = 1;
      if (v40 == 1) {
        goto LABEL_58;
      }
      goto LABEL_56;
    }
  }

  else
  {
    __int16 v23 = 0;
    LODWORD(v14) = 0;
    while (1)
    {
      uint64_t v27 = v23 + *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v20);
      uint64_t v28 = *(int *)(*(void *)(a1 + 304) + 4LL * v27);
      *(_DWORD *)(a2 + 56) = v28;
      unsigned __int16 v29 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v28);
      *(_DWORD *)(a2 + 44) = v29;
      int v30 = sub_100031134(*(void *)(a1 + 256), v29);
      *(void *)(a2 + 48) = v30;
      uint64_t result = sub_1000307F4(v30);
      *(_DWORD *)(a2 + 72) = result;
      if ((_DWORD)result)
      {
        *(_WORD *)(a2 + 88) = 0;
        if (*(_DWORD *)(a1 + 336))
        {
          __int16 v24 = *(unsigned __int8 *)(*(void *)(a1 + 352) + v27);
          *(_WORD *)(a2 + 88) = v24;
        }

        else
        {
          __int16 v24 = 0;
        }

        uint64_t v25 = sub_1000BB868(v48, a5, 0LL);
        uint64_t v26 = v25;
        uint64_t result = sub_100030CA0(*(void *)(a2 + 48), v25, &v50);
        LODWORD(v14) = 0xFFFF;
        if ((_DWORD)result != 0xFFFF) {
          break;
        }
      }

      if (++v23 >= *(_DWORD *)(a2 + 64)) {
        goto LABEL_79;
      }
    }

    LODWORD(v14) = result;
    unsigned int v34 = v47;
    *(_WORD *)(a2 + 76) = v26;
    uint64_t v35 = (unsigned __int16 *)(a2 + 76);
    unint64_t v36 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_57;
    }
  }

  if (!*(_DWORD *)(v36 + 1172)) {
    goto LABEL_57;
  }
  unint64_t v37 = v50;
  unint64_t v38 = (uint64_t *)(a2 + 192);
  *(_DWORD *)(a2 + 112) = v50 == 1;
  if (v37 == 1)
  {
LABEL_58:
    uint64_t v39 = *(_BYTE *)(*(void *)(a1 + 296) + v28) != 0;
    goto LABEL_59;
  }

  LOWORD(v19) = *(_WORD *)(v12 + 6LL * (int)v13 + 4);
  return (unsigned __int16)v19;
}

  sub_1000CB038(v47, v89);
  sub_1000CB038(v39, v90);
  sub_1000CB038(__s2, v91);
  signed int v16 = a9;
LABEL_35:
  sub_1000B2C9C(a8);
  *(void *)(a1 + 480) = 0LL;
  *(_DWORD *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 464) = 0LL;
  v62 = sub_100025C94(v19);
  *(_WORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 460) = 0;
  v63 = (*(uint64_t (**)(uint64_t, void, void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, const mach_header_64 *))(a1 + 32))( a1,  0LL,  0LL,  &v103,  v58,  3LL,  2LL,  1LL,  &_mh_execute_header);
  int8x16_t v54 = *(_BYTE *)(a1 + 424) == 0;
  *(_DWORD *)(a1 + 416) = (*(_BYTE *)(a1 + 424) == 0) << 30;
  v64 = v54 ? -1 : 0;
  *(_DWORD *)(a1 + 420) = v64;
  *(_DWORD *)(a1 + 468) = v63;
  if (!v63) {
    goto LABEL_57;
  }
  LODWORD(v65) = v63;
  v66 = a7;
  v67 = a6;
  v95 = v66;
  do
  {
    v68 = sub_1000B2CAC(a8, &v100);
    if (!v68) {
      break;
    }
    v69 = v68;
    v70 = v100;
    v71 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (v71 <= 6 && ((1 << v71) & 0x66) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, v69, v70);
    }
  }

  while (((*(uint64_t (**)(uint64_t))(a1 + 64))(a1) & 0xFFFFFFFE) != 2);
  *(void *)(a1 + 480) = a8;
  (*(void (**)(uint64_t))(a1 + 160))(a1);
  v73 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
  int8x16x4_t v57 = 0LL;
  if (v73 == 3) {
    v65 = 0LL;
  }
  else {
    v65 = (unsigned int *)v65;
  }
  if (v73 != 3)
  {
    if (!*(_DWORD *)(a1 + 468) || (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) == 4)
    {
      *a5 = -1;
      v102 = 0x40000000;
      goto LABEL_56;
    }

    if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
    {
      v82 = (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, uint64_t, unsigned int *, uint64_t, void, void, void, void, void, _DWORD, void))(a1 + 104))( a1,  1LL,  &v102,  &v101,  v97,  a5,  v95,  0LL,  0LL,  0LL,  0LL,  0LL,  0,  0LL);
      if (v82)
      {
        if (v82 >= 1)
        {
          v83 = 0LL;
          do
          {
            v84 = v83;
            v85 = a5[v83++];
          }

          while (v85 != -1);
          *signed int v16 = v84;
          if ((_DWORD)v84)
          {
            v86 = -1LL;
            do
            {
              v87 = *a5++;
              sub_1000B39A4(*(void *)(a1 + 376), v87, v67, v83 + v86--);
              v67 = (int16x8_t *)((char *)v67 + 2);
            }

            while (v84 + v86 != -1);
          }

          int8x16x4_t v57 = v65;
          goto LABEL_58;
        }
      }

      else
      {
        (*(void (**)(uint64_t))(a1 + 96))(a1);
      }
    }

          *(_DWORD *)(a1 + 708) = 0;
LABEL_35:
          v75 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            v75 = *(_DWORD *)(qword_1000FDCC0 + 2896);
          }
          *(_DWORD *)(a1 + 360) = v75;
          uint64_t result = NAN;
          *(void *)(a1 + 432) = -1LL;
          *(_DWORD *)(a1 + 416) = -1;
          return result;
        }

        if (!*(_DWORD *)(qword_1000FDCC0 + 2848)) {
          goto LABEL_23;
        }
      }

            uint64_t v19 = qword_1000FDCC0;
            if (qword_1000FDCC0)
            {
LABEL_35:
              *(_WORD *)(a1 + 558) = v30 + *(_WORD *)(v19 + 3040);
              LOWORD(v19) = *(_WORD *)(v19 + 3136);
LABEL_48:
              *(_WORD *)(a1 + 556) = v19 + v30;
              LOWORD(v19) = *(_WORD *)(a1 + 714);
              goto LABEL_49;
            }

  sub_10006690C(v9);
  return 0LL;
}

    sub_100077380((uint64_t *)v3);
    goto LABEL_35;
  }

    sub_100079C54(v3);
    goto LABEL_35;
  }

  return v3;
}

    if (v46 > v24) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }

  v193 = v11;
  unsigned __int16 v29 = v28 + 12LL * v24;
  unsigned __int16 v32 = *(_DWORD *)(v29 + 4);
  int v30 = (_DWORD *)(v29 + 4);
  int v31 = v32;
  unsigned int v33 = v32 == 0xFFFFFFFFLL;
  LODWORD(v200) = v32;
  if (v32 != -1)
  {
    unsigned int v34 = *v12;
    uint64_t v35 = (unsigned __int8 *)(*(void *)(*v12 + ((v31 >> 5) & 0x7FFFFF8)) + v31);
    unint64_t v36 = *v35;
    if (v36 + a4 > 199)
    {
LABEL_20:
      uint64_t v21 = 0LL;
      unint64_t v11 = v193;
LABEL_131:
      sub_1000CB094(v11);
      return v21;
    }

    v192 = v33;
    v115 = *(unsigned __int16 *)(a1 + 204);
    if (v115 == 0xFFFF
      || (v116 = *(void *)(*(void *)(a1 + 208) + 8 * v27), !*(_BYTE *)(v116 + v24))
      || *(unsigned __int8 *)(v116 + v24) == 254)
    {
      v117 = v31 + 1;
      if (*v35)
      {
        v118 = 0;
        do
        {
          v119 = *(unsigned __int8 *)(*(void *)(v34 + 8LL * (v117 >> 8)) + v117);
          v53 = v117 + 1;
          if (*(_BYTE *)(*(void *)(v34 + 8LL * (v117 >> 8)) + v117))
          {
            do
            {
              else {
                v120 = 2;
              }
              v53 += v120;
              --v119;
            }

            while (v119);
          }

          ++v118;
          v117 = v53;
        }

        while (v118 != v36);
      }

      else
      {
        v53 = v31 + 1;
      }

      v122 = 0;
      v183 = 0;
      v186 = 0;
      v123 = 0LL;
    }

    else
    {
      v191 = *(unsigned __int8 *)(v116 + v24);
      if (v115 <= 0x7F) {
        v122 = 1;
      }
      else {
        v122 = 2;
      }
      if (!sub_1000C1744( (const void **)(a1 + 120),  (int *)(a1 + 132),  (signed int *)(a1 + 128),  8,  1,  v122 + v10 + *(_DWORD *)(a1 + 136))) {
        goto LABEL_20;
      }
      LODWORD(v200) = v31 + 1;
      v133 = sub_10008E7CC(*(void *)(a1 + 120), (int)v31 + 1);
      v141 = v133 + v31 + 1;
      v142 = *(_DWORD *)(a1 + 136);
      v182 = v116;
      if (v142 > v141)
      {
        do
        {
          *(_BYTE *)(*(void *)(*v12 + 8LL * ((v122 + v10 - 1 + v142) >> 8))
                   + (v122 + v10 - 1 + v142)) = *(_BYTE *)(*(void *)(*v12
                                                                                      + 8LL
          --v142;
        }

        while (v142 > v141);
        v142 = *(_DWORD *)(a1 + 136);
      }

      v53 = v141 + v122;
      *(_DWORD *)(a1 + 136) = v142 + v122;
      v143 = v133 + v122;
      v188 = v133 + v122;
      v180 = (char *)sub_1000CAF58(v188, v134, v135, v136, v137, v138, v139, v140);
      v184 = *(void *)(*(void *)(a1 + 120) + (((v31 + 1) >> 5) & 0xFFFFFF8));
      sub_10008E814(a1, v180, (unsigned int *)&v200);
      v185 = 2LL * *(unsigned __int8 *)(v184 + (v31 + 1)) + 4;
      v197 = (char *)sub_1000CAF58(v185, v144, v145, v146, v147, v148, v149, v150);
      sub_10009383C((uint64_t)&v197, v180, 1);
      sub_100093AE4(v197, v191, *(_WORD *)(a1 + 204));
      sub_1000938B8((unint64_t)&v197, v180, 1);
      if (v143 >= 1)
      {
        v151 = v31 + 1;
        v152 = v180;
        do
        {
          v153 = *v152++;
          *(_BYTE *)(*(void *)(*v12 + 8LL * (v151 >> 8)) + v151) = v153;
          ++v151;
          --v143;
        }

        while (v143);
      }

      sub_1000CB038(v197, v185);
      sub_1000CB038(v180, v188);
      v183 = 0;
      v186 = 0;
      v123 = 0LL;
      *(_BYTE *)(v182 + v24) = -2;
    }

    goto LABEL_122;
  }

  if (a4 <= 198)
  {
    v181 = v30;
    v192 = v33;
    v86 = sub_10008E454(a1, a2, 0LL, 0LL, v13, v14, v15, v16) + 1;
    v190 = (char *)sub_1000CAF58((int)v86, v87, v88, v89, v90, v91, v92, v93);
    v183 = v86;
    sub_10008E454(a1, a2, (uint64_t)v190, v86, v94, v95, v96, v97);
    v98 = *v195 + 1LL;
    __src = (void *)sub_1000CAF58(2 * v98, v99, v100, v101, v102, v103, v104, v105);
    v187 = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8 * v27) + v24) != 0;
    v106 = sub_1000943F4( *(void *)(a1 + 8),  v190,  *(_DWORD *)(a1 + 308),  *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8 * v27) + v24) != 0,  __src,  v98,  (uint64_t)&v199,  1u,  (uint64_t)&v200 + 4);
    if (SHIDWORD(v200) < 1)
    {
      v186 = v98;
    }

    else
    {
      sub_1000CB038(__src, 2 * v98);
      v107 = SHIDWORD(v200);
      __src = (void *)sub_1000CAF58(2LL * SHIDWORD(v200), v108, v109, v110, v111, v112, v113, v114);
      v106 = sub_1000943F4( *(void *)(a1 + 8),  v190,  *(_DWORD *)(a1 + 308),  v187,  __src,  v107,  (uint64_t)&v199,  1u,  (uint64_t)&v200 + 4);
      v186 = v107;
    }

    unint64_t v11 = v193;
    if (*(__int16 *)(a1 + 204) != -1)
    {
      v124 = *(void *)(*(void *)(a1 + 208) + 8 * v27);
      if (*(_BYTE *)(v124 + v24))
      {
        if (*(unsigned __int8 *)(v124 + v24) != 254)
        {
          v178 = *(unsigned __int8 *)(v124 + v24);
          v179 = v106;
          if ((int)(sub_100099EE0((unint64_t)__src) + 1) >= v186)
          {
            v132 = (void *)sub_1000CAF58(2LL * (v186 + 1), v125, v126, v127, v128, v129, v130, v131);
            j__memmove(v132, __src, 2 * v186);
            __src = v132;
            ++v186;
            unint64_t v11 = v193;
          }

          else
          {
            v132 = __src;
          }

          sub_100093AE4((char *)v132, v178, *(_WORD *)(a1 + 204));
          *(_BYTE *)(v124 + v24) = -2;
          v106 = v179;
        }
      }
    }

    if (v106)
    {
      v154 = sub_10009397C((uint64_t)&__src, 1LL);
      if (sub_1000C1744( (const void **)(a1 + 120),  (int *)(a1 + 132),  (signed int *)(a1 + 128),  8,  1,  v10 + 1 + v154 + *(_DWORD *)(a1 + 136)))
      {
        v162 = *(unsigned int *)(a1 + 136);
        LODWORD(v31) = v162;
        *v181 = v162;
        v163 = (char *)sub_1000CAF58(v154, v155, v156, v157, v158, v159, v160, v161);
        sub_1000938B8((unint64_t)&__src, v163, 1);
        uint64_t v35 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 120) + ((v162 >> 5) & 0x7FFFFF8)) + v162);
        *uint64_t v35 = 1;
        LODWORD(v200) = v31 + 1;
        if (v154 >= 1)
        {
          v164 = v154;
          v165 = v31 + 1;
          v166 = v163;
          do
          {
            v167 = *v166++;
            *(_BYTE *)(*(void *)(*v12 + 8LL * (v165 >> 8)) + v165) = v167;
            ++v165;
            --v164;
          }

          while (v164);
        }

        v53 = v31 + 1 + v154;
        sub_1000CB038(v163, v154);
        v168 = v154;
        v122 = 0;
        *(_DWORD *)(a1 + 136) += v168 + 1;
        v123 = v190;
LABEL_122:
        v169 = *(_DWORD *)(a1 + 48);
        if (v169 >= 1)
        {
          for (m = 0; m < v169; ++m)
          {
            v171 = *(void *)(*(void *)(a1 + 32) + 8LL * (m >> 8)) + 12LL * m;
            v174 = *(_DWORD *)(v171 + 4);
            v172 = (_DWORD *)(v171 + 4);
            v173 = v174;
            if (v174 > (int)v31 && v173 != -1)
            {
              *v172 = v122 + v10 + v173;
              v169 = *(_DWORD *)(a1 + 48);
            }
          }
        }

        v189 = v123;
        v177 = *v35 + 1;
        *uint64_t v35 = v177;
        uint64_t v52 = v177;
        goto LABEL_46;
      }
    }

    if (++v33 == v32) {
      goto LABEL_68;
    }
  }

  if (v43 == 255)
  {
    int v44 = (unsigned __int16 *)a2;
    if (!(_DWORD)v41) {
      goto LABEL_66;
    }
    while (*v44 == (unsigned __int16)*v39)
    {
      ++v39;
      ++v44;
      LODWORD(v41) = v41 - 1;
      if (!(_DWORD)v41) {
        goto LABEL_66;
      }
    }

    goto LABEL_34;
  }

  if ((_DWORD)v41)
  {
    uint64_t v50 = 0LL;
    do
    {
      int8x16_t v51 = (unsigned __int16 *)(a2 + 2 * v50);
      uint64_t v52 = v41;
      v53 = (unsigned __int16 *)(v34 + 2 * v38);
      while (*v51 == *v53)
      {
        ++v53;
        ++v51;
        if (!--v52) {
          goto LABEL_61;
        }
      }

      ++v50;
    }

    while (v50 != v12 - (_DWORD)v41);
    goto LABEL_34;
  }

  LODWORD(v50) = 0;
LABEL_61:
  if (*(_BYTE *)(v31 + 4 * v33 + 3))
  {
    unsigned __int16 v29 = *(char *)(v31 + 4 * v33 + 3);
  }

  else
  {
    int8x16_t v54 = 1LL;
    while ((_DWORD)v50 != *((__int16 *)v13 + v54))
    {
      if (v14 + 1 == ++v54) {
        goto LABEL_34;
      }
    }

    unsigned __int16 v29 = v54;
  }

  uint64_t v52 = sub_1000BE644(0xFFFFFFFF, 4, v50);
  v53 = *(void *)(*(void *)(a1 + 144) + 96LL);
  if (v53)
  {
LABEL_20:
    int8x16_t v54 = sub_1000BE644(-1431655765 * ((unint64_t)(v53 - *(void *)(a1 + 128)) >> 1), 4, v52);
    uint64_t v55 = *(void *)(*(void *)(a1 + 144) + 104LL);
    if (v55) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }

    v64 = v56;
    do
    {
      v65 = *(unsigned __int16 *)v64;
      if (!*(_WORD *)v64)
      {
LABEL_33:
        sub_1000CB038(v48, 4LL * (int)v54);
        int8x16_t v54 = (2 * v54);
        int8x16_t v48 = (void *)sub_1000CAF58(4LL * (int)v54, v57, v58, v59, v60, v61, v62, v63);
        goto LABEL_34;
      }

      v64 += 2;
    }

    while (sub_1000CBA60(v65));
    else {
      v73 = (void *)sub_1000CAF58(4LL * v54, v66, v67, v68, v69, v70, v71, v72);
    }
    v74 = sub_100082BB4(*a1, v13, 1LL, v56, (uint64_t)v73, v54, v341);
    v75 = v74;
    else {
      v76 = v74;
    }
    if ((int)v76 <= 0)
    {
      if (!v73)
      {
LABEL_54:
        if (v75 >= 1)
        {
          v87 = 0LL;
          v88 = 4LL * v75;
          do
          {
            sub_1000B33F8((char *)a1, *(_DWORD *)((char *)v48 + v87), (uint64_t)v336, v339);
            v90 = sub_1000CC52C((unint64_t)v336);
            v91 = sub_1000CC52C((unint64_t)v339);
            if (v91)
            {
              v92 = v91 + v55;
              if (v91 + (int)v55 <= v331 && !sub_1000CD3EC(&v318[v55], v339, v91))
              {
                v93 = v90 + v328;
                if ((v90 + (_DWORD)v328 != v326 || v92 >= v331) && (v93 >= v326 || v92 != v331))
                {
                  v89 = *(void *)(v323 + 8LL * v93);
                  if (*(_DWORD *)(v89 + 4LL * v92) == -1)
                  {
                    *(_DWORD *)(v89 + 4LL * v92) = *(_DWORD *)((char *)v48 + v87);
                    v94 = v320;
                    v95 = v321;
                    if (v92 > v320 && v93 == v321) {
                      v94 = v92;
                    }
                    v97 = v93 <= v321;
                    if (v93 > v321) {
                      v95 = v90 + v328;
                    }
                    v321 = v95;
                    if (v97) {
                      v98 = v94;
                    }
                    else {
                      v98 = v92;
                    }
                    v320 = v98;
                  }
                }
              }
            }

            v87 += 4LL;
          }

          while (v88 != v87);
          int v13 = v334;
          unsigned __int16 v32 = (_DWORD **)v323;
        }

      v157 = 0;
      goto LABEL_37;
    }

    if (v131 == 2)
    {
      v132 = sub_10001FE60(a1[1], (unsigned __int16)v264[v125]);
    }

    else
    {
      if (v131 != 3) {
        goto LABEL_34;
      }
      v132 = sub_100082D28(*a1);
    }

    v157 = v132;
LABEL_37:
    v158 = v267;
    if (v157 >= 255) {
      v159 = 255;
    }
    else {
      v159 = v157;
    }
    v99[v125] = v159;
    if (v159 * v255 > v267)
    {
      v265 = (char *)sub_1000CAF58(2LL * v159 * v255, v117, v118, v119, v120, v121, v122, v123);
      v158 = v159 * v255;
    }

    v267 = v158;
    *(void *)(v108 + 8 * v125) = sub_1000CAF58(8LL * v159, v117, v118, v119, v120, v121, v122, v123);
    if (v157 < 1)
    {
      v164 = v264[v125];
      v165 = *a1;
      v166 = v164 >> 30;
      if (v164 >> 30 == 1) {
        goto LABEL_52;
      }
    }

    else
    {
      v160 = 0LL;
      if (v159 <= 1) {
        v161 = 1;
      }
      else {
        v161 = v159;
      }
      v162 = 8LL * v161;
      v163 = v265;
      do
      {
        *(void *)(*(void *)(v108 + 8 * v125) + v160) = v163;
        v160 += 8LL;
        v163 = (_WORD *)((char *)v163 + v127);
      }

      while (v162 != v160);
      v164 = v264[v125];
      v165 = *a1;
      v166 = v164 >> 30;
      if (v164 >> 30 == 1)
      {
LABEL_52:
        v167 = sub_10001EDF8(a1[1], (unsigned __int16)v164, 0LL);
        v168 = a1[1];
LABEL_54:
        sub_10001ECA8(v168, v167);
        goto LABEL_55;
      }
    }

    if (v166 == 2)
    {
      v168 = a1[1];
      v167 = (unsigned __int16)v164;
      goto LABEL_54;
    }

    uint64_t v27 = v33;
    __int16 v24 = v36;
LABEL_35:
    if (v16) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v24 == 2;
    }
    uint64_t v10 = v28;
    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
    unint64_t v9 = v27 + 1;
    if (v9 == v31)
    {
LABEL_51:
      *int v30 = v7;
      return v10;
    }
  }

  uint64_t result = 0LL;
  uint64_t v26 = v10 == 0;
  uint64_t v10 = 0LL;
  if (v26) {
    goto LABEL_51;
  }
  return result;
}

double sub_100006244( uint64_t a1, int32x4_t a2, double a3, int32x4_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v7 = *(unsigned __int8 **)(a1 + 1544);
  uint64_t v8 = *(unsigned int *)(a1 + 1104);
  if ((int)v8 < 9)
  {
    unsigned __int32 v10 = 0;
    goto LABEL_9;
  }

  unint64_t v9 = v8 - 8;
  if ((unint64_t)(v8 - 8) < 8 || (int)v8 - 1 < (v8 - 9))
  {
    unsigned __int32 v10 = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 1104);
    goto LABEL_5;
  }

  if (v9 >= 0x20)
  {
    int32x4_t v36 = 0uLL;
    unint64_t v35 = v9 & 0xFFFFFFFFFFFFFFE0LL;
    int32x4_t v37 = 0uLL;
    uint64_t v38 = v8 - 1;
    unint64_t v39 = v9 & 0xFFFFFFFFFFFFFFE0LL;
    int32x4_t v40 = 0uLL;
    int32x4_t v41 = 0uLL;
    a6 = 0uLL;
    int32x4_t v42 = 0uLL;
    a7 = 0uLL;
    int32x4_t v43 = 0uLL;
    do
    {
      int v44 = &v7[v38];
      int8x16_t v45 = vrev64q_s8(*(int8x16_t *)(v44 - 15));
      uint8x16_t v46 = (uint8x16_t)vextq_s8(v45, v45, 8uLL);
      int8x16_t v47 = vrev64q_s8(*(int8x16_t *)(v44 - 31));
      uint8x16_t v48 = (uint8x16_t)vextq_s8(v47, v47, 8uLL);
      uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v46.i8);
      uint16x8_t v50 = vmovl_high_u8(v46);
      uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v48.i8);
      uint16x8_t v52 = vmovl_high_u8(v48);
      int32x4_t v41 = (int32x4_t)vmlal_high_u16((uint32x4_t)v41, v50, v50);
      int32x4_t v40 = (int32x4_t)vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v50.i8, *(uint16x4_t *)v50.i8);
      int32x4_t v37 = (int32x4_t)vmlal_high_u16((uint32x4_t)v37, v49, v49);
      int32x4_t v36 = (int32x4_t)vmlal_u16((uint32x4_t)v36, *(uint16x4_t *)v49.i8, *(uint16x4_t *)v49.i8);
      int32x4_t v43 = (int32x4_t)vmlal_high_u16((uint32x4_t)v43, v52, v52);
      a7 = (int8x16_t)vmlal_u16((uint32x4_t)a7, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8);
      int32x4_t v42 = (int32x4_t)vmlal_high_u16((uint32x4_t)v42, v51, v51);
      a6 = (int8x16_t)vmlal_u16((uint32x4_t)a6, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v51.i8);
      v38 -= 32LL;
      v39 -= 32LL;
    }

    while (v39);
    a4 = vaddq_s32(v42, v37);
    a5 = vaddq_s32(v43, v41);
    a2 = vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)a6, v36), vaddq_s32((int32x4_t)a7, v40)), vaddq_s32(a4, a5));
    a2.i32[0] = vaddvq_s32(a2);
    unsigned __int32 v10 = a2.i32[0];
    if (v9 == v35) {
      goto LABEL_9;
    }
    if ((v9 & 0x18) == 0)
    {
      uint64_t v11 = v8 - v35;
LABEL_5:
      unint64_t v12 = v11 + 1;
      do
      {
        int v13 = v7[(v12 - 2)];
        v10 += v13 * v13;
        --v12;
      }

      while (v12 > 9);
      goto LABEL_9;
    }
  }

  else
  {
    unsigned __int32 v10 = 0;
    unint64_t v35 = 0LL;
  }

  uint64_t v11 = v8 - (v9 & 0xFFFFFFFFFFFFFFF8LL);
  int32x4_t v53 = 0uLL;
  int32x4_t v54 = (int32x4_t)v10;
  uint64_t v55 = ~v35 + v8;
  unint64_t v56 = v35 - (v9 & 0xFFFFFFFFFFFFFFF8LL);
  do
  {
    a4 = (int32x4_t)vmovl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)&v7[v55 - 7]));
    int32x4_t v53 = (int32x4_t)vmlal_high_u16((uint32x4_t)v53, (uint16x8_t)a4, (uint16x8_t)a4);
    int32x4_t v54 = (int32x4_t)vmlal_u16((uint32x4_t)v54, *(uint16x4_t *)a4.i8, *(uint16x4_t *)a4.i8);
    v55 -= 8LL;
    v56 += 8LL;
  }

  while (v56);
  a2 = vaddq_s32(v54, v53);
  a2.i32[0] = vaddvq_s32(a2);
  unsigned __int32 v10 = a2.i32[0];
  if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8LL)) {
    goto LABEL_5;
  }
LABEL_9:
  int v14 = v7[7] * v7[7]
      + v7[6] * v7[6]
      + v7[5] * v7[5]
      + v7[4] * v7[4]
      + v7[3] * v7[3]
      + v7[2] * v7[2]
      + v7[1] * v7[1]
      + *v7 * *v7;
  *(_DWORD *)(a1 + 1572) = v14;
  *(_DWORD *)(a1 + 1576) = v10;
  *(_DWORD *)(a1 + 1568) = v14 + v10;
  uint64_t v15 = *(int **)(a1 + 1552);
  if (*(_DWORD *)(a1 + 1108))
  {
    *uint64_t v15 = (v7[2] << 24) | (v7[3] << 28) | (v7[1] << 20) | (*v7 << 16) | (v7[7] << 12) | (v7[6] << 8) | (16 * v7[5]) | v7[4];
    v15[1] = (v7[10] << 24) | (v7[11] << 28) | (v7[9] << 20) | (v7[8] << 16) | (v7[15] << 12) | (v7[14] << 8) | (16 * v7[13]) | v7[12];
    v15[2] = (v7[18] << 24) | (v7[19] << 28) | (v7[17] << 20) | (v7[16] << 16) | (v7[23] << 12) | (v7[22] << 8) | (16 * v7[21]) | v7[20];
    goto LABEL_11;
  }

  int v16 = *(_DWORD *)(a1 + 1100);
  int v17 = v16 - 24;
  *uint64_t v15 = (v7[1] << 24) | (*v7 << 16) | (v7[3] << 8) | v7[2];
  v15[1] = (v7[5] << 24) | (v7[4] << 16) | (v7[7] << 8) | v7[6];
  v15[2] = (v7[9] << 24) | (v7[8] << 16) | (v7[11] << 8) | v7[10];
  v15[3] = (v7[13] << 24) | (v7[12] << 16) | (v7[15] << 8) | v7[14];
  v15[4] = (v7[17] << 24) | (v7[16] << 16) | (v7[19] << 8) | v7[18];
  v15[5] = (v7[21] << 24) | (v7[20] << 16) | (v7[23] << 8) | v7[22];
  unsigned int v18 = v16 - 25;
  if (v16 >= 25)
  {
    uint64_t v19 = v7 + 24;
    unint64_t v20 = v15 + 6;
    if (v18 < 0x1C || (uint64_t v21 = (v18 & 0xFFFFFFFC) + 28LL, v20 < (int *)&v7[v21]) && v19 < (unsigned __int8 *)v15 + v21)
    {
      int v22 = 0;
      goto LABEL_19;
    }

    uint64_t v57 = (v18 >> 2) + 1;
    if (v18 >= 0x3C)
    {
      uint64_t v58 = v57 & 0x7FFFFFF0;
      a2.i64[0] = 0xFFFFFF01FFFFFF00LL;
      a4.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
      uint64_t v75 = v58;
      v76 = (const char *)(v7 + 24);
      v77 = (int8x16_t *)(v15 + 6);
      do
      {
        int8x16x4_t v83 = vld4q_s8(v76);
        v76 += 64;
        int8x16_t v78 = vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F0320), 0x10uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F0320), 0x18uLL));
        v77[2] = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F0310), 0x10uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F0310), 0x18uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F0310), 8uLL),  vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F0310)));
        v77[3] = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F0300), 0x10uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F0300), 0x18uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F0300), 8uLL),  vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F0300)));
        a6 = vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[0], (int8x16_t)xmmword_1000F0330), 0x10uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[1], (int8x16_t)xmmword_1000F0330), 0x18uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F0330), 8uLL),  vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F0330)));
        a7 = vorrq_s8( v78,  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(v83.val[3], (int8x16_t)xmmword_1000F0320), 8uLL),  vqtbl1q_s8(v83.val[2], (int8x16_t)xmmword_1000F0320)));
        int8x16_t *v77 = a6;
        v77[1] = a7;
        v77 += 4;
        v75 -= 16LL;
      }

      while (v75);
      if (v58 == v57) {
        goto LABEL_21;
      }
      if ((v57 & 8) == 0)
      {
        v20 += v58;
        v19 += 4 * v58;
        int v22 = 4 * v58;
LABEL_19:
        __int16 v23 = v19 + 1;
        do
        {
          *v20++ = (*v23 << 24) | (*(v23 - 1) << 16) | (v23[2] << 8) | v23[1];
          v22 += 4;
          v23 += 4;
        }

        while (v22 < v17);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v58 = 0LL;
    }

    int v22 = 4 * (v57 & 0x7FFFFFF8);
    uint64_t v59 = 4 * (v57 & 0x7FFFFFF8);
    v19 += v59;
    unint64_t v20 = (int *)((char *)v20 + v59);
    uint64_t v60 = 4 * v58 + 24;
    v61 = (__n128 *)((char *)v15 + v60);
    v62 = (const char *)&v7[v60];
    uint64_t v63 = v58 - (v57 & 0x7FFFFFF8);
    a2.i64[0] = 0xFFFFFF01FFFFFF00LL;
    do
    {
      *(int8x8x4_t *)a4.i8 = vld4_s8(v62);
      v62 += 32;
      int8x16_t v64 = vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a4, (int8x16_t)xmmword_1000F0320), 0x10uLL),  (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1000F0320), 0x18uLL));
      a4 = (int32x4_t)vorrq_s8( vorrq_s8( (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8((int8x16_t)a4, (int8x16_t)xmmword_1000F0330),  0x10uLL),  (int8x16_t)vshlq_n_s32( (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1000F0330),  0x18uLL)),  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F0330), 8uLL),  vqtbl1q_s8(a6, (int8x16_t)xmmword_1000F0330)));
      a5 = (int32x4_t)vorrq_s8( v64,  vorrq_s8( (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1000F0320), 8uLL),  vqtbl1q_s8(a6, (int8x16_t)xmmword_1000F0320)));
      __n128 *v61 = (__n128)a4;
      v61[1] = (__n128)a5;
      v61 += 2;
      v63 += 8LL;
    }

    while (v63);
    if ((v57 & 0x7FFFFFF8) != v57) {
      goto LABEL_19;
    }
  }

LABEL_21:
  if (*(_DWORD *)(a1 + 1036))
  {
    __int16 v24 = *(unsigned __int16 **)(a1 + 1584);
    uint64_t v25 = *(int **)(a1 + 1592);
    *uint64_t v25 = v24[2] | (*v24 << 16);
    v25[1] = v24[3] | (v24[1] << 16);
    v25[2] = v24[6] | (v24[4] << 16);
    v25[3] = v24[7] | (v24[5] << 16);
    v25[4] = v24[10] | (v24[8] << 16);
    v25[5] = v24[11] | (v24[9] << 16);
    v25[6] = v24[14] | (v24[12] << 16);
    v25[7] = v24[15] | (v24[13] << 16);
    v25[8] = v24[18] | (v24[16] << 16);
    v25[9] = v24[19] | (v24[17] << 16);
    v25[10] = v24[22] | (v24[20] << 16);
    v25[11] = v24[23] | (v24[21] << 16);
    _VF = __OFSUB__(v16, 25);
    int v27 = v16 - 25;
    if (v27 < 0 == _VF)
    {
      uint64_t v28 = (const __int16 *)(v24 + 24);
      unsigned __int16 v29 = (float *)(v25 + 12);
      if (v27 < 0x1C
        || (unsigned int v30 = v27 >> 2, v31 = 8LL * v30 + 56, v29 < (float *)((char *)v24 + v31))
        && v28 < (const __int16 *)((char *)v25 + v31))
      {
        int v32 = 0;
        unsigned int v33 = v25 + 12;
        unsigned int v34 = v24 + 24;
        do
        {
LABEL_27:
          *unsigned int v33 = v34[2] | (*v34 << 16);
          v33[1] = v34[3] | (v34[1] << 16);
          v32 += 4;
          v34 += 4;
          v33 += 2;
        }

        while (v32 < v17);
        goto LABEL_11;
      }

      uint64_t v65 = v30 + 1;
      uint64_t v66 = 4 * (v65 & 0x7FFFFFF8);
      unsigned int v33 = (int *)&v29[(unint64_t)v66 / 2];
      unsigned int v34 = (unsigned __int16 *)&v28[v66];
      int v32 = 4 * (v65 & 0x7FFFFFF8);
      uint64_t v67 = v65 & 0x7FFFFFF8;
      do
      {
        int16x8x4_t v82 = vld4q_s16(v28);
        v28 += 32;
        __asm { SHLL2           V5.4S, V0.8H, #0x10 }

        v81.val[0] = (float32x4_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[2]));
        __asm { SHLL2           V5.4S, V1.8H, #0x10 }

        v81.val[1] = (float32x4_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[3]));
        v80.val[0] = (float32x4_t)vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)v82.val[0].i8, 0x10uLL),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.val[2].i8));
        v73 = v29 + 16;
        a2 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.val[3].i8);
        v80.val[1] = (float32x4_t)vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)v82.val[1].i8, 0x10uLL), (int8x16_t)a2);
        vst2q_f32(v29, v80);
        v74 = v29 + 8;
        vst2q_f32(v74, v81);
        unsigned __int16 v29 = v73;
        v67 -= 8LL;
      }

      while (v67);
      if ((v65 & 0x7FFFFFF8) != v65) {
        goto LABEL_27;
      }
    }
  }

  if (!qword_1000FDCC0) {
    return v4;
  }
  if (!*(_DWORD *)(qword_1000FDCC0 + 1064)) {
    return v4;
  }
  uint64_t v6 = *(void (**)(uint64_t, void))(a1 + 1736);
  if (!v6) {
    return v4;
  }
  v6(a1, 0LL);
  return v4;
}

          int v16 = 1LL;
          int32x4_t v43 = qword_1000FDCC0;
          if (!qword_1000FDCC0) {
            goto LABEL_37;
          }
LABEL_31:
          if (!*(_DWORD *)(v43 + 3384))
          {
LABEL_37:
            uint16x8_t v51 = 1.0;
            uint16x8_t v52 = a1;
            LODWORD(v20) = v21;
            int32x4_t v53 = v19;
            int32x4_t v54 = (int *)v22;
            uint64_t v55 = v29;
            unint64_t v56 = v23;
            uint64_t v57 = (_WORD *)v27;
            goto LABEL_306;
          }

          int8x16_t v45 = 1.0;
          if ((int)v21 < 1)
          {
LABEL_305:
            uint16x8_t v52 = a1;
            uint64_t v28 = 0;
            int32x4_t v53 = v19;
            int32x4_t v54 = (int *)v22;
            uint64_t v55 = v29;
            unint64_t v56 = v23;
            uint64_t v57 = 0LL;
            uint16x8_t v51 = v45;
LABEL_306:
            sub_10000D9B8( v52,  v28,  v20,  v53,  v54,  v55,  v56,  v57,  v51,  a3,  a4,  *(double *)a5.i64,  *(double *)a6.i64,  *(double *)a7.i64,  *(double *)_Q6.i64);
            uint64_t v11 = v359;
            v353 = v360;
            if (*v359 != 4) {
              v353 = 1;
            }
            if ((v353 & 1) != 0) {
              goto LABEL_310;
            }
            goto LABEL_309;
          }

          uint8x16_t v46 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(v43 + 3376);
          a3 = (double)*(int *)(a1 + 1192);
          a4 = (double)v19;
          int8x16_t v47 = (const __int16 *)(a1 + 1768);
          if (v46 < 1)
          {
            if (v28)
            {
              if (v21 >= 0x10)
              {
                uint16x8_t v49 = 0;
                uint64_t v58 = 0LL;
                v179 = v27 + 2 * v21;
                v181 = v27 < v22 + 4 * v21 && v22 < v179;
                v183 = v27 < a1 + 1770 && (unint64_t)v47 < v179;
                v184 = (unint64_t)v29 >= v179 || v27 >= (unint64_t)v29 + 2 * v21;
                if (!v184 || v181)
                {
                  uint16x8_t v50 = 0;
                }

                else
                {
                  uint16x8_t v50 = 0;
                  if (!v183)
                  {
                    v185 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
                    v186 = (uint16x4_t)vld1_dup_s16(v47);
                    a7 = (int32x4_t)vmovl_u16(v186);
                    uint64_t v58 = v21 & 0xFFFFFFF0;
                    a6 = 0uLL;
                    v187 = v29 + 1;
                    __asm { FMOV            V7.2D, #0.5 }

                    v189 = (uint16x8_t *)(v27 + 16);
                    __asm { FMOV            V16.2D, #-0.5 }

                    v191 = (__int128 *)(v22 + 32);
                    v192 = v58;
                    _Q6 = 0uLL;
                    v193 = 0uLL;
                    v194 = 0uLL;
                    v195 = 0uLL;
                    v196 = 0uLL;
                    v197 = 0uLL;
                    v198 = 0uLL;
                    do
                    {
                      v200 = v187[-1];
                      v199 = *v187;
                      v202 = *(v191 - 2);
                      v201 = *(v191 - 1);
                      v203 = v191[1];
                      v189[-1] = v200;
                      v204 = *v191;
                      v191 += 4;
                      v205.i64[0] = SDWORD2(v202);
                      v205.i64[1] = SHIDWORD(v202);
                      v206 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v202;
                      v205.i64[1] = SDWORD1(v202);
                      v207 = v205;
                      v205.i64[0] = SDWORD2(v201);
                      v205.i64[1] = SHIDWORD(v201);
                      v208 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v201;
                      v205.i64[1] = SDWORD1(v201);
                      v209 = vcvtq_f64_s64(v205);
                      v205.i64[0] = SDWORD2(v204);
                      v205.i64[1] = SHIDWORD(v204);
                      v210 = v205;
                      v205.i64[0] = (int)v204;
                      v205.i64[1] = SDWORD1(v204);
                      v211 = vcvtq_f64_s64(v205);
                      v205.i64[0] = SDWORD2(v203);
                      v205.i64[1] = SHIDWORD(v203);
                      v212 = vcvtq_f64_s64(v205);
                      v205.i64[0] = (int)v203;
                      v205.i64[1] = SDWORD1(v203);
                      v213 = vmulq_n_f64(vdivq_f64(v185, v206), a3);
                      v214 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v207)), a3);
                      v215 = vmulq_n_f64(vdivq_f64(v185, v208), a3);
                      v216 = vmulq_n_f64(vdivq_f64(v185, v209), a3);
                      v217 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v210)), a3);
                      v218 = vmulq_n_f64(vdivq_f64(v185, v211), a3);
                      v219 = vmulq_n_f64(vdivq_f64(v185, v212), a3);
                      v220 = vmulq_n_f64(vdivq_f64(v185, vcvtq_f64_s64(v205)), a3);
                      v221 = (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v220,  (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v220), _Q16, _Q7))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v219,  (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v219), _Q16, _Q7))));
                      *(void *)&v220.f64[0] = 0x100000001LL;
                      *(void *)&v220.f64[1] = 0x100000001LL;
                      *v189 = v199;
                      v189 += 2;
                      v196 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v216,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v216),  _Q16,  _Q7))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v215,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v215),  _Q16,  _Q7)))),  (uint32x4_t)v220),  a7),  v196);
                      v195 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v214,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v214),  _Q16,  _Q7))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v213,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v213),  _Q16,  _Q7)))),  (uint32x4_t)v220),  a7),  v195);
                      v198 = vaddq_s32(vminq_s32((int32x4_t)vmaxq_u32(v221, (uint32x4_t)v220), a7), v198);
                      _Q6 = (int64x2_t)vaddw_high_u16((uint32x4_t)_Q6, v200);
                      a6 = (int32x4_t)vaddw_u16((uint32x4_t)a6, *(uint16x4_t *)v200.i8);
                      v197 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v218,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v218),  _Q16,  _Q7))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v217,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v217),  _Q16,  _Q7)))),  (uint32x4_t)v220),  a7),  v197);
                      v194 = (int32x4_t)vaddw_high_u16((uint32x4_t)v194, v199);
                      v193 = (int32x4_t)vaddw_u16((uint32x4_t)v193, *(uint16x4_t *)v199.i8);
                      v187 += 2;
                      v192 -= 16LL;
                    }

                    while (v192);
                    uint16x8_t v50 = vaddvq_s32(vaddq_s32(vaddq_s32(v197, v195), vaddq_s32(v198, v196)));
                    a5 = vaddq_s32(v194, (int32x4_t)_Q6);
                    uint16x8_t v49 = vaddvq_s32(vaddq_s32(vaddq_s32(v193, a6), a5));
                    int8x16_t v45 = 1.0;
                    if (v58 == v21) {
                      goto LABEL_303;
                    }
                  }
                }
              }

              else
              {
                uint64_t v58 = 0LL;
                uint16x8_t v49 = 0;
                uint16x8_t v50 = 0;
              }

              v334 = v21 - v58;
              v335 = (int *)(v22 + 4 * v58);
              v336 = v58;
              v337 = (__int16 *)(v27 + 2 * v58);
              v338 = &v29->i16[v336];
              a5.i64[0] = 0.5;
              a6.i64[0] = -0.5;
              do
              {
                *v337++ = *v338;
                v339 = *v335++;
                v340 = a4 / (double)v339 * a3;
                if (v340 >= 0.0) {
                  *(double *)a7.i64 = 0.5;
                }
                else {
                  *(double *)a7.i64 = -0.5;
                }
                v341 = (int)(v340 + *(double *)a7.i64);
                v50 += v341;
                v342 = (unsigned __int16)*v338++;
                v49 += v342;
                --v334;
              }

              while (v334);
              goto LABEL_303;
            }

            v177 = *(unsigned __int16 *)v47;
            if (v21 >= 8)
            {
              a6 = (int32x4_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
              a7 = vdupq_n_s32(v177);
              a5 = 0uLL;
              v178 = v21 & 0xFFFFFFF8;
              __asm
              {
                FMOV            V6.2D, #0.5
                FMOV            V7.2D, #-0.5
              }

              v309.i64[0] = 0x100000001LL;
              v309.i64[1] = 0x100000001LL;
              v310 = v178;
              v311 = v29;
              v312 = (__int128 *)v22;
              v313 = 0uLL;
              v314 = 0uLL;
              v315 = 0uLL;
              do
              {
                v317 = *v312;
                v316 = v312[1];
                v312 += 2;
                v318.i64[0] = SDWORD2(v317);
                v318.i64[1] = SHIDWORD(v317);
                v319 = vcvtq_f64_s64(v318);
                v318.i64[0] = (int)v317;
                v318.i64[1] = SDWORD1(v317);
                v320 = vcvtq_f64_s64(v318);
                v318.i64[0] = SDWORD2(v316);
                v318.i64[1] = SHIDWORD(v316);
                v321 = vcvtq_f64_s64(v318);
                v318.i64[0] = (int)v316;
                v318.i64[1] = SDWORD1(v316);
                v322 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v319), a3);
                v323 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v320), a3);
                v324 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, v321), a3);
                v325 = vmulq_n_f64(vdivq_f64((float64x2_t)a6, vcvtq_f64_s64(v318)), a3);
                v315 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v325,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v325),  _Q7,  (int8x16_t)_Q6))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v324,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v324),  _Q7,  (int8x16_t)_Q6)))),  v309),  a7),  v315);
                v314 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v323,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v323),  _Q7,  (int8x16_t)_Q6))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v322,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v322),  _Q7,  (int8x16_t)_Q6)))),  v309),  a7),  v314);
                v326 = *v311++;
                v313 = (int32x4_t)vaddw_high_u16((uint32x4_t)v313, v326);
                a5 = (int32x4_t)vaddw_u16((uint32x4_t)a5, *(uint16x4_t *)v326.i8);
                v310 -= 8LL;
              }

              while (v310);
              uint16x8_t v50 = vaddvq_s32(vaddq_s32(v314, v315));
              uint16x8_t v49 = vaddvq_s32(vaddq_s32(a5, v313));
              if (v178 == v21) {
                goto LABEL_303;
              }
            }

            else
            {
              v178 = 0LL;
              uint16x8_t v49 = 0;
              uint16x8_t v50 = 0;
            }

            v327 = v21 - v178;
            v328 = (unsigned __int16 *)v29 + v178;
            a5.i64[0] = 0.5;
            a6.i64[0] = -0.5;
            v329 = (int *)(v22 + 4 * v178);
            do
            {
              v330 = *v329++;
              v331 = a4 / (double)v330 * a3;
              if (v331 >= 0.0) {
                *(double *)a7.i64 = 0.5;
              }
              else {
                *(double *)a7.i64 = -0.5;
              }
              v332 = (int)(v331 + *(double *)a7.i64);
              if (v332 >= v177) {
                v332 = v177;
              }
              v50 += v332;
              v333 = *v328++;
              v49 += v333;
              --v327;
            }

            while (v327);
            goto LABEL_303;
          }

          *(double *)a5.i64 = (double)v46;
          if (v28)
          {
            if (v21 < 8)
            {
              uint8x16_t v48 = 0LL;
              uint16x8_t v49 = 0;
              uint16x8_t v50 = 0;
              goto LABEL_294;
            }

            uint16x8_t v49 = 0;
            uint8x16_t v48 = 0LL;
            v128 = v27 + 2 * v21;
            v129 = v22 + 4 * v21;
            v130 = (unint64_t)v29 + 2 * v21;
            v131 = a1 + 1770;
            v133 = v27 < v130 && (unint64_t)v29 < v128;
            v135 = v27 < v131 && (unint64_t)v47 < v128;
            v137 = v22 < v130 && (unint64_t)v29 < v129;
            v139 = v22 < v131 && (unint64_t)v47 < v129;
            v140 = v22 >= v128 || v27 >= v129;
            if (!v140 || v133)
            {
              uint16x8_t v50 = 0;
              goto LABEL_294;
            }

            uint16x8_t v50 = 0;
            if (v135) {
              goto LABEL_294;
            }
            if (v137) {
              goto LABEL_294;
            }
            if (v139) {
              goto LABEL_294;
            }
            v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
            _Q6 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
            v142 = (uint16x4_t)vld1_dup_s16(v47);
            v143 = (int32x4_t)vmovl_u16(v142);
            uint8x16_t v48 = v21 & 0xFFFFFFF8;
            a7 = 0uLL;
            __asm
            {
              FMOV            V16.2D, #0.5
              FMOV            V17.2D, #-0.5
            }

            v146.i64[0] = 0x100000001LL;
            v146.i64[1] = 0x100000001LL;
            v147 = v48;
            v148 = (int32x4_t *)v22;
            v149 = (uint16x8_t *)v27;
            v150 = v29;
            v151 = 0uLL;
            v152 = 0uLL;
            v153 = 0uLL;
            do
            {
              v154 = *v150++;
              *v149++ = v154;
              v155 = vmovl_u16(*(uint16x4_t *)v154.i8);
              v156.i64[0] = v155.u32[0];
              v156.i64[1] = v155.u32[1];
              v157 = vcvtq_f64_u64(v156);
              v156.i64[0] = v155.u32[2];
              v156.i64[1] = v155.u32[3];
              v158 = vcvtq_f64_u64(v156);
              v159 = vmovl_high_u16(v154);
              v156.i64[0] = v159.u32[0];
              v156.i64[1] = v159.u32[1];
              v160 = vcvtq_f64_u64(v156);
              v156.i64[0] = v159.u32[2];
              v156.i64[1] = v159.u32[3];
              v161 = vaddq_s32( *v148,  vuzp1q_s32( (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v157), *(double *)a5.i64)),  (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v158), *(double *)a5.i64))));
              v162 = vaddq_s32( v148[1],  vuzp1q_s32( (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, v160), *(double *)a5.i64)),  (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v141, vcvtq_f64_u64(v156)), *(double *)a5.i64))));
              *v148 = v161;
              v148[1] = v162;
              v148 += 2;
              v156.i64[0] = v161.i32[2];
              v156.i64[1] = v161.i32[3];
              v163 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v161.i32[0];
              v156.i64[1] = v161.i32[1];
              v164 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v162.i32[2];
              v156.i64[1] = v162.i32[3];
              v165 = vcvtq_f64_s64((int64x2_t)v156);
              v156.i64[0] = v162.i32[0];
              v156.i64[1] = v162.i32[1];
              v166 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v163), a3);
              v167 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v164), a3);
              v168 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v165), a3);
              v169 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, vcvtq_f64_s64((int64x2_t)v156)), a3);
              v153 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v169,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v169),  _Q17,  _Q16))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v168,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v168),  _Q17,  _Q16)))),  v146),  v143),  v153);
              v152 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v167,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v167),  _Q17,  _Q16))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v166,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v166),  _Q17,  _Q16)))),  v146),  v143),  v152);
              v151 = (int32x4_t)vaddw_high_u16((uint32x4_t)v151, v154);
              a7 = (int32x4_t)vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v154.i8);
              v147 -= 8LL;
            }

            while (v147);
            uint16x8_t v50 = vaddvq_s32(vaddq_s32(v152, v153));
            a6 = vaddq_s32(a7, v151);
            a6.i32[0] = vaddvq_s32(a6);
            uint16x8_t v49 = a6.i32[0];
            if (v48 != v21)
            {
LABEL_294:
              v343 = v21 - v48;
              v344 = (int *)(v22 + 4 * v48);
              v345 = v48;
              v346 = (__int16 *)(v27 + 2 * v48);
              v347 = &v29->i16[v345];
              a6.i64[0] = 0.5;
              a7.i64[0] = -0.5;
              do
              {
                *v346++ = *v347;
                _Q6.i16[0] = *v347;
                v348 = *v344 + (int)(a3 / (double)_Q6.u64[0] * *(double *)a5.i64);
                *v344++ = v348;
                v349 = a4 / (double)v348 * a3;
                if (v349 >= 0.0) {
                  v350 = 0.5;
                }
                else {
                  v350 = -0.5;
                }
                *(double *)_Q6.i64 = v349 + v350;
                v351 = (int)*(double *)_Q6.i64;
                v50 += v351;
                v352 = (unsigned __int16)*v347++;
                v49 += v352;
                --v343;
              }

              while (v343);
            }

  sub_1000C0EF8(*(void *)(v10 + 32));
  sub_1000C0EF8(*(void *)(v10 + 48));
  sub_1000C0EF8(*(void *)(v10 + 56));
  sub_1000C0EF8(v10);
  return 0LL;
}

  *(_DWORD *)(a1 + 344) = 0;
LABEL_34:
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1228) && *(int *)(a1 + 268) >= 2)
  {
    __int16 v24 = 1LL;
    do
      sub_100031EBC(*(uint64_t **)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v24++));
    while (v24 < *(int *)(a1 + 268));
  }

  uint64_t result = sub_1000339A8(*(void *)(a1 + 256), a4, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    uint64_t v26 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      return 1LL;
    }
    if (*(_DWORD *)(qword_1000FDCC0 + 4452))
    {
      if (*(int *)(a1 + 268) >= 2)
      {
        int v27 = 1LL;
        do
          sub_100032024(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v27++));
        while (v27 < *(int *)(a1 + 268));
        uint64_t v26 = qword_1000FDCC0;
        if (!qword_1000FDCC0) {
          return 1LL;
        }
      }
    }

    if (!*(_DWORD *)(v26 + 4544) || !*(_DWORD *)(a1 + 340) || !*(_DWORD *)(a1 + 376)) {
      return 1LL;
    }
    if (*(void *)(a1 + 320)
      || (uint64_t result = sub_1000C1074(4LL * *(void *)(v26 + 4136)), (*(void *)(a1 + 320) = result) != 0LL))
    {
      if (*(void *)(a1 + 328)
        || (uint64_t result = sub_1000C1074((uint64_t)*(int *)(a1 + 264) << 6), (*(void *)(a1 + 328) = result) != 0LL))
      {
        LODWORD(v28) = *(_DWORD *)(a1 + 268);
        if ((int)v28 >= 2)
        {
          unsigned __int16 v29 = 1LL;
          unsigned int v30 = 64LL;
          do
          {
            int32x4_t v42 = 0LL;
            int32x4_t v41 = 0;
            sub_10003366C(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29), &v42, &v41);
            if (v42
              && sub_1000336A8(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29))
              && !*(void *)(*(void *)(a1 + 328) + v30))
            {
              uint64_t v31 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                uint64_t v31 = *(void *)(qword_1000FDCC0 + 4136);
              }
              *(void *)(*(void *)(a1 + 328) + v30) = sub_1000C1074(2 * v31 + 2);
              int v32 = *(_WORD **)(*(void *)(a1 + 328) + v30);
              if (!v32) {
                return 0LL;
              }
              _WORD *v32 = 0;
              *(_WORD *)(*(void *)(*(void *)(a1 + 328) + v30) + 2LL) = 0;
              *(_WORD *)(*(void *)(*(void *)(a1 + 328) + v30) + 4LL) = 0;
            }

            ++v29;
            uint64_t v28 = *(int *)(a1 + 268);
            v30 += 64LL;
          }

          while (v29 < v28);
        }

        if (qword_1000FDCC0)
        {
          if (*(_DWORD *)(qword_1000FDCC0 + 1076) && (int)v28 >= 2)
          {
            unsigned int v34 = 0LL;
            unint64_t v35 = 1LL;
            while (1)
            {
              int32x4_t v37 = *(void *)(a1 + 328) + v34;
              if (*(void *)(v37 + 88))
              {
                uint64_t v38 = qword_1000FDCC0;
                if (qword_1000FDCC0) {
                  uint64_t v38 = *(void *)(qword_1000FDCC0 + 4136);
                }
                bzero(*(void **)(v37 + 96), 4 * v38);
                int32x4_t v36 = *(void *)(a1 + 328);
              }

              else
              {
                unint64_t v39 = qword_1000FDCC0;
                if (qword_1000FDCC0) {
                  unint64_t v39 = *(void *)(qword_1000FDCC0 + 4136);
                }
                *(void *)(*(void *)(a1 + 328) + v34 + 88) = sub_1000C1074(8 * v39);
                if (!*(void *)(*(void *)(a1 + 328) + v34 + 88)) {
                  return 0LL;
                }
                int32x4_t v40 = qword_1000FDCC0;
                if (qword_1000FDCC0) {
                  int32x4_t v40 = *(void *)(qword_1000FDCC0 + 4136);
                }
                *(void *)(*(void *)(a1 + 328) + v34 + 96) = sub_1000C1074(4 * v40);
                int32x4_t v36 = *(void *)(a1 + 328);
                if (!*(void *)(v36 + v34 + 96)) {
                  return 0LL;
                }
              }

              *(_DWORD *)(v36 + v34 + 120) = 0;
              ++v35;
              v34 += 64LL;
              uint64_t result = 1LL;
            }
          }
        }

        return 1LL;
      }
    }
  }

  return result;
}

  if (*(_DWORD *)(a1 + 340) && !*(_DWORD *)(a1 + 492) && !*(_DWORD *)(a1 + 352))
  {
    int v14 = *(void *)(a1 + 384);
    if ((*(_BYTE *)(v14 + v7) & 0x10) == 0) {
      goto LABEL_51;
    }
    goto LABEL_34;
  }

  int v14 = *(void *)(a1 + 384);
  if ((*(_BYTE *)(v14 + v7) & 4) == 0) {
    goto LABEL_51;
  }
  uint64_t v15 = *(_DWORD *)(a1 + 464) - v7;
  if (v15 < 0)
  {
    if (*(_DWORD *)(a1 + 320) + v15 > 1) {
      goto LABEL_34;
    }
LABEL_29:
    if (!*(_DWORD *)(a1 + 492)) {
      goto LABEL_51;
    }
    goto LABEL_34;
  }

  if (v15 <= 1) {
    goto LABEL_29;
  }
LABEL_34:
  int v17 = *(void *)(a1 + 368);
  int v16 = *(void *)(a1 + 376);
  *(_WORD *)(a1 + 504) = **(_WORD **)(v17 + 8 * v7);
  if (sub_1000225B0(*(void *)(a1 + 424), *(void *)(v17 + 8 * v7), (_BYTE *)(v14 + v7), v16))
  {
    if (*(_DWORD *)(a1 + 344))
    {
      if ((sub_1000220FC(*(void *)(a1 + 440)) & 0x80000000) == 0)
      {
        unsigned int v18 = 0LL;
        do
          *(_WORD *)(*(void *)(*(void *)(a1 + 400) + 8 * v7) + 2 * v18) = *(_WORD *)(*(void *)(a1 + 376) + 2 * v18);
        while (v18++ < (int)sub_1000220FC(*(void *)(a1 + 440)));
      }

      unint64_t v20 = *(int **)(a1 + 440);
      uint64_t v21 = sub_10005FDE0(*(void *)(a1 + 448));
      sub_100021EF8((void *)a1, v20, v21, *(__int16 **)(a1 + 376), v22, v23, v24, v25);
    }

    uint64_t v26 = 456LL;
    if (!*(_DWORD *)(a1 + 352)) {
      uint64_t v26 = 448LL;
    }
    sub_10005FC0C(*(int **)(a1 + v26), *(int16x8_t **)(a1 + 376), a2);
    uint16x8_t v52 = 0;
    unsigned int v34 = (void *)sub_1000CAF58(2LL * *(int *)(a1 + 304), v27, v28, v29, v30, v31, v32, v33);
    int32x4_t v42 = (void *)sub_1000CAF58(2LL * *(int *)(a1 + 304), v35, v36, v37, v38, v39, v40, v41);
    sub_100022AF8(*(void *)(a1 + 424), (uint64_t)v42);
    sub_10005FD68(*(int **)(a1 + 448), (uint64_t)v34, &v52);
    else {
      int32x4_t v43 = (*(__int16 *)v42 << (v52 - *(_DWORD *)(a1 + 308))) / *(unsigned __int16 *)v34;
    }
    sub_1000CB038(v42, 2LL * *(int *)(a1 + 304));
    sub_1000CB038(v34, 2LL * *(int *)(a1 + 304));
    *(_WORD *)a3 = v43;
    *(_DWORD *)(a1 + 484) = 4;
    int v44 = *(void *)(a1 + 384);
    if ((*(_BYTE *)(v44 + v7) & 2) != 0) {
      unsigned int v3 = 5LL;
    }
    else {
      unsigned int v3 = 6LL;
    }
    if (!*(_DWORD *)(a1 + 352) && !*(_DWORD *)(a1 + 356)) {
      *(_BYTE *)(v44 + v7) = 0;
    }
  }

  j__memmove(v7, *(const void **)(a1 + 592), 8LL * *(int *)(a1 + 608));
  sub_1000C0EF8(*(void *)(a1 + 592));
  *(void *)(a1 + 592) = v7;
  if (*(_DWORD *)(a1 + 556))
  {
    j__memmove(v8, *(const void **)(a1 + 600), 8LL * *(int *)(a1 + 608));
    sub_1000C0EF8(*(void *)(a1 + 600));
    *(void *)(a1 + 600) = v8;
  }

  *(_DWORD *)(a1 + 608) = v5;
  return 1LL;
}

        if (++v14 == v13) {
          break;
        }
        uint64_t v15 = *(void *)(a1 + 9032);
LABEL_17:
        int v16 = *(void *)(v15 + 8LL * (v14 >> 8)) + 32LL * v14;
      }
    }
  }

  uint64_t result = sub_10003941C(a1, *(unsigned int *)(a1 + 428), v2, v3, v4, v5, v6, v7);
  if ((_DWORD)result) {
    return sub_10003991C(a1);
  }
  return result;
}

      if (++v14 == v13) {
        goto LABEL_12;
      }
      uint64_t v15 = *(void *)(a1 + 9024);
      goto LABEL_17;
    }
  }

      sub_1000CF924();
      int v22 = v139;
      uint64_t v26 = v138;
LABEL_22:
      uint64_t v25 = v38 + 1;
      __int16 v24 = (unsigned __int16)(v38 + 1);
      __int16 v23 = *(_DWORD *)(a1 + 1072);
    }

    while (v23 > v24);
  }

  sub_1000BF344(v150, 1.0 / (double)v136);
  sub_1000CB038(v20, v137);
  return sub_1000CB038(v12, v137);
}

  uint64_t v8 = 0;
  uint64_t v7 = (void *)(a1 + 144);
  if (*v7)
  {
    if (v8 == *(_DWORD *)(a1 + 128))
    {
      *(void *)(a1 + 136) = *v7;
      goto LABEL_25;
    }

    return 0LL;
  }

  int32x4_t v37 = v116;
  if (v116 < 1)
  {
    *(_DWORD *)(v18 + 12) = 0;
    goto LABEL_37;
  }

  if (!qword_1000FDCC0)
  {
    *(_DWORD *)(v18 + 12) = 0;
    unint64_t v39 = v115;
    int32x4_t v40 = HIDWORD(v114);
    goto LABEL_40;
  }

  uint64_t v38 = *(_DWORD *)(qword_1000FDCC0 + 5248);
  *(_DWORD *)(v18 + 12) = v38 != 0;
  unint64_t v39 = v115;
  int32x4_t v40 = HIDWORD(v114);
  if (!v38)
  {
LABEL_40:
    v113 = a7;
    *(_DWORD *)(v18 + 20) = 1;
    int8x16_t v47 = (_DWORD *)(v18 + 20);
    goto LABEL_41;
  }

  int v32 = *(void *)(a1 + 8744);
  if (*(_DWORD *)(a1 + 8752) < (int)a5)
  {
    sub_1000C0EF8(*(void *)(a1 + 8744));
    int32x4_t v41 = sub_1000C1074(8LL * (int)a5);
    int v32 = v41;
    if (!v41)
    {
LABEL_54:
      sub_10003991C(*(void *)(a1 + 528));
LABEL_116:
      *(_DWORD *)(v18 + 16) = 1;
      return v32;
    }

    *(void *)(a1 + 8744) = v41;
    *(_DWORD *)(a1 + 8752) = a5;
  }

  v106 = a8;
  int32x4_t v42 = *(uint64_t **)(a1 + 376);
  v108 = *((void *)*a4 + 32);
  if ((int)a5 >= 1)
  {
    v110 = *(uint64_t **)(a1 + 376);
    int32x4_t v43 = 0;
    int v44 = a5;
    int8x16_t v45 = (uint64_t **)a4;
    while (1)
    {
      uint8x16_t v46 = sub_10002A3D8(*v45, 0LL, v25, v26, v27, v28, v29, v30);
      if (!v46) {
        goto LABEL_115;
      }
      ++v45;
      if (!--v44)
      {
        v113 = a7;
        v104 = a5;
        unint64_t v39 = v115;
        int32x4_t v42 = v110;
        goto LABEL_56;
      }
    }
  }

  v113 = a7;
  v104 = 0;
  int32x4_t v43 = 0;
LABEL_56:
  v102 = sub_100031764(v108, "<s>");
  v101 = sub_100031764(v108, "<e>");
  int32x4_t v54 = sub_1000B3338(v42);
  uint64_t v55 = sub_1000B3A9C((uint64_t)v42, v54);
  v117 = v55;
  if (v55 == 0xFFFF)
  {
    int8x16x4_t v83 = sub_1000B3918((uint64_t)v42, v54);
    if (v83 == 0xFFFFFF)
    {
      if (v104 >= 2)
      {
        v84 = v104 - 1;
        do
        {
          v85 = *(unsigned int **)v32;
          v32 += 8LL;
          sub_10002613C((uint64_t)v85);
          --v84;
        }

        while (v84);
      }
    }

    else
    {
      v87 = sub_1000B91B4(v42, v83);
      v117 = v87;
      if (v87 != 0xFFFF) {
        goto LABEL_57;
      }
      if (v104 >= 2)
      {
        v88 = v104 - 1;
        do
        {
          v89 = *(void *)v32;
          v32 += 8LL;
          sub_10002613C(v89);
          --v88;
        }

        while (v88);
      }
    }

      if (v8 == 1)
      {
        uint64_t result = (char *)sub_10001EDF8(v7[1], (unsigned __int16)a2, 0LL);
        if ((_DWORD)result == 0xFFFF)
        {
LABEL_31:
          if (!a3) {
            goto LABEL_34;
          }
          uint64_t result = "<NOID>";
          goto LABEL_33;
        }

        if ((_DWORD)result == 65534) {
          goto LABEL_16;
        }
        uint64_t result = (char *)sub_10001ECA8(v7[1], result);
        if ((_DWORD)result == 0xFFFFFF) {
          goto LABEL_16;
        }
        return (char *)sub_100082BAC(*v7);
      }

      if (v8 == 2)
      {
        uint64_t result = (char *)sub_10001ECA8(v7[1], (unsigned __int16)a2);
        if ((_DWORD)result == 0xFFFFFF) {
          goto LABEL_16;
        }
        return (char *)sub_100082BAC(*v7);
      }

    uint64_t v11 = *(_BYTE **)v9;
  }

  sub_1000C0EF8((uint64_t)v11);
  *(void *)(v9 + 32) = 0LL;
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  sub_1000C0EF8(v9);
  return 0LL;
}

LABEL_11:
  if (*(_DWORD *)(a1 + 1044))
  {
    *(int32x2_t *)a2.i8 = vsub_s32(*(int32x2_t *)(a1 + 1056), *(int32x2_t *)(a1 + 1572));
    *(void *)(a1 + 1064) = a2.i64[0];
  }

  return *(double *)a2.i64;
}

  if (*(_DWORD *)(a1 + 1036) && !*(void *)(a1 + 168))
  {
    uint64_t v15 = v9 * v5;
    int v16 = 2LL * v15;
    uint64_t result = sub_1000C1074(v16);
    *(void *)(a1 + 184) = result;
    if (!result) {
      return result;
    }
    int v17 = v15 >= 0 ? v15 : v15 + 1;
    unsigned int v18 = 4LL * (v17 >> 1);
    uint64_t result = sub_1000C1074(v18);
    *(void *)(a1 + 200) = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C1074(4LL * v9);
    *(void *)(a1 + 168) = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + 176) = *(void *)(a1 + 184);
    *(void *)(a1 + 192) = *(void *)(a1 + 200);
    *(void *)(a1 + 160) = result;
    if (a2)
    {
      memcpy(*(void **)(a1 + 184), *(const void **)(a1 + 176), v16);
      memcpy(*(void **)(a1 + 200), *(const void **)(a1 + 192), v18);
    }
  }

  if (!*(_DWORD *)(a1 + 1004)) {
    goto LABEL_16;
  }
  if (*(void *)(a1 + 528)) {
    goto LABEL_16;
  }
  if (*(void *)(a1 + 544)) {
    goto LABEL_16;
  }
  int v22 = *(void *)(a1 + 584);
  if (!v22) {
    goto LABEL_16;
  }
  __int16 v23 = *(int *)(v22 + 4LL * *(int *)(a1 + 576));
  if (*(_DWORD *)(a1 + 724))
  {
    uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 580));
    *(void *)(a1 + 560) = result;
    if (result)
    {
      uint64_t v25 = 4LL * ((int)v23 / 4);
      uint64_t result = sub_1000C1074(4LL * (v24 >> 2));
      *(void *)(a1 + 544) = result;
      if (result)
      {
        if (a2)
        {
          memcpy(*(void **)(a1 + 560), *(const void **)(a1 + 552), 2LL * *(int *)(a1 + 580));
          memcpy(*(void **)(a1 + 544), *(const void **)(a1 + 536), v25);
          uint64_t result = *(void *)(a1 + 544);
        }

        *(void *)(a1 + 552) = *(void *)(a1 + 560);
        *(void *)(a1 + 536) = result;
        goto LABEL_16;
      }
    }
  }

  else
  {
    uint64_t result = sub_1000C1074(v23);
    *(void *)(a1 + 528) = result;
    if (result)
    {
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 520), v23);
        uint64_t result = *(void *)(a1 + 528);
      }

      *(void *)(a1 + 520) = result;
LABEL_16:
      if (*(_DWORD *)(a1 + 1964))
      {
        if (*(void *)(a1 + 856))
        {
          if (!*(void *)(a1 + 904))
          {
LABEL_41:
            uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 1100));
            *(void *)(a1 + 904) = result;
            if (!result) {
              return result;
            }
            if (a2)
            {
              memcpy((void *)result, *(const void **)(a1 + 896), 2LL * *(int *)(a1 + 1100));
              uint64_t result = *(void *)(a1 + 904);
            }

            *(void *)(a1 + 896) = result;
          }
        }

        else
        {
          uint64_t result = sub_1000C1074(*(int *)(a1 + 1100));
          *(void *)(a1 + 856) = result;
          if (!result) {
            return result;
          }
          if (a2)
          {
            memcpy((void *)result, *(const void **)(a1 + 848), *(int *)(a1 + 1100));
            uint64_t result = *(void *)(a1 + 856);
          }

          *(void *)(a1 + 848) = result;
          if (!*(void *)(a1 + 904)) {
            goto LABEL_41;
          }
        }
      }

      return 1LL;
    }
  }

  return result;
}

  if (a2 == (_DWORD)v2) {
    int v4 = -1;
  }
  else {
    int v4 = a2;
  }
  return *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v4 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4LL * v4) > 0;
}

  if (a2 == (_DWORD)v3) {
    int v5 = -1;
  }
  else {
    int v5 = a2;
  }
  uint64_t v6 = (int *)(*(void *)(a1 + 288) + 4LL * v5);
  uint64_t v7 = *v6;
  uint64_t v8 = (v6[1] - v7);
  if (a3 && (int)v8 >= 1)
  {
    unint64_t v9 = (int *)(*(void *)(a1 + 304) + 4 * v7);
    unsigned __int32 v10 = v8;
    do
    {
      uint64_t v11 = *v9++;
      *a3++ = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v11);
      --v10;
    }

    while (v10);
  }

  return v8;
}

  else {
    uint64_t v19 = 0LL;
  }
  sub_1000CB038(v28, 13LL);
  if (v40)
  {
    *a2 = 0LL;
    return 1LL;
  }

  return v19;
}

    unint64_t v20 = 4;
    sub_1000BEA60();
    goto LABEL_9;
  }

  unsigned int v18 = sub_1000C0BA8(0LL);
  int v17 = sub_1000CAEC8(0LL);
  int v14 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v15 = sub_1000CF8F8(0LL, 0LL, &v16);
  nullsub_1(v15);
LABEL_8:
  unint64_t v20 = 1;
LABEL_9:
  sub_1000504B4(v20);
  sub_1000CF8F8(v15, v16, 0LL);
  sub_1000BEAB0(v14);
  sub_1000CAEC8(v17);
  sub_1000C0BA8(v18);
  return v20;
}

    int v14 = 4;
LABEL_14:
    uint64_t v26 = v14;
    sub_1000BEA60();
    goto LABEL_9;
  }

  __int16 v24 = sub_1000C0BA8(0LL);
  __int16 v23 = sub_1000CAEC8(0LL);
  unint64_t v20 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v21 = sub_1000CF8F8(0LL, 0LL, &v22);
  nullsub_1(v21);
LABEL_8:
  uint64_t v26 = 1;
LABEL_9:
  sub_1000504B4(v26);
  sub_1000CF8F8(v21, v22, 0LL);
  sub_1000BEAB0(v20);
  sub_1000CAEC8(v23);
  sub_1000C0BA8(v24);
  return v26;
}

      v86 = *(_WORD **)(v70 + 5520);
      if (v86) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }

      sub_1000C0EF8(*((void *)v10 + 3));
      *((void *)v10 + 2) = 0LL;
      *((void *)v10 + 3) = 0LL;
      sub_1000C0EF8((uint64_t)v10);
      unsigned __int32 v10 = 0LL;
    }
  }

  if (*(_DWORD *)(v4 + 9280))
  {
    uint64_t result = sub_1000BBC40( *(void *)(v4 + 376),  *(_DWORD *)(v4 + 9204),  v4 + 9202,  v2,  *(unsigned __int16 **)(v4 + 656),  *(_DWORD *)(v4 + 672),  *(__int16 **)(v4 + 664));
    *(_DWORD *)(v4 + 672) = result;
    LODWORD(v2) = *(_DWORD *)(v4 + 612);
  }

  if ((int)v2 >= 1)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v4 + 592) + 8LL * (v7 >> 8));
      unint64_t v9 = *(_WORD *)(v4 + 9070) + a2;
      unsigned __int32 v10 = v8 + 24LL * v7;
      *(_WORD *)(v10 + 16) = v9;
      uint64_t v11 = (_WORD *)(v10 + 16);
      if (*(_DWORD *)(v4 + 9280)) {
        *uint64_t v11 = *(_WORD *)(*(void *)(v4 + 664) + 2 * v7) + v9;
      }
      *(_DWORD *)(v8 + 24LL * v7++ + 8) = -1;
    }

    while (v7 < *(int *)(v4 + 612));
  }

  return result;
}

  int v16 = v9 - 88;
  if ((int)v9 - 88 >= 1)
  {
    int v17 = (v9 - 88);
    if (v16 < 0x10)
    {
      unsigned int v18 = 0LL;
      goto LABEL_42;
    }

    unsigned int v18 = v17 & 0xFFFFFFF0;
    uint64_t v19 = vdupq_n_s16(v11);
    unint64_t v20 = (int16x8_t *)(result + 192);
    uint64_t v21 = v16 & 0xFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *unint64_t v20 = v19;
      v20 += 2;
      v21 -= 16LL;
    }

    while (v21);
    if (v18 == v17)
    {
      int v5 = 7LL;
      goto LABEL_37;
    }

    uint64_t v8 = **(void **)(a1 + 176);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }

  if (a3 == 1 || a3 == 14) {
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v8 = *(void *)(*(void *)(a1 + 176) + 8LL);
  if (!v8)
  {
LABEL_18:
    unint64_t v9 = 0LL;
    *a4 = -1;
    return v9;
  }

    uint64_t v15 = (uint64_t)a2;
    if (v12)
    {
      if (a2)
      {
LABEL_13:
      }

  sub_1000C0EF8((uint64_t)v14);
  int v27 = *a2;
  if ((int)v27 >= 1)
  {
    while (*(double *)(*(void *)(*((void *)a2 + 1) + 8LL * (v27 - 1)) + 8LL * (v27 - 1)) != 0.0)
    {
      unsigned int v30 = *(double *)(v23 + 8LL * (v27 - 1));
      *(double *)(a5 + 8LL * (v27 - 1)) = v30;
      if (v27 < (int)*a2)
      {
        uint64_t v31 = v27;
        do
        {
          unsigned int v30 = v30
          *(double *)(a5 + 8LL * (v27 - 1)) = v30;
          ++v31;
        }

        while (v31 < (int)*a2);
      }

      *(double *)(a5 + 8LL * (v27 - 1)) = v30
                                                      / *(double *)(*(void *)(*((void *)a2 + 1)
      if (v27-- <= 1) {
        goto LABEL_12;
      }
    }

  unint64_t v9 = sub_1000C1074(40LL);
  if (!v9) {
    return v9;
  }
  unsigned __int32 v10 = sub_1000C88E4((unint64_t)a2) + 1;
  uint64_t v11 = (_BYTE *)sub_1000C1074(v10);
  *(void *)unint64_t v9 = v11;
  if (v11)
  {
    sub_1000C896C(v11, a2, v10);
    *(_DWORD *)(v9 + 8) = -1;
    *(void *)(v9 + 24) = a1;
    unint64_t v12 = *(FILE **)(a1 + 32);
    if (v12)
    {
      *(_DWORD *)(v9 + 32) = j__ftell(v12);
      goto LABEL_18;
    }

    if (*(void *)(a1 + 40))
    {
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(a1 + 48);
      if (sub_1000CA3DC(v9, *(_DWORD *)(a1 + 20)))
      {
LABEL_18:
        *(_DWORD *)(a1 + 72) = 1;
        return v9;
      }
    }

    else
    {
      *(_DWORD *)(v9 + 32) = -1;
    }

    *(void *)unsigned int v3 = v14;
    *(_DWORD *)(v3 + 8) = v12;
    *(_DWORD *)(v3 + 12) = v12;
  }

  if (*((void *)a1 + 2))
  {
    unsigned int v18 = *((_DWORD *)a1 + 14) + 255;
    uint64_t v19 = v18 >> 8;
    unint64_t v20 = sub_1000C0F68(8 * (v18 >> 8));
    if (!v20) {
      goto LABEL_44;
    }
    uint64_t v21 = v20;
    if (v18 >= 0x100)
    {
      int v22 = 0LL;
      if (v19 <= 1) {
        __int16 v23 = 1LL;
      }
      else {
        __int16 v23 = v19;
      }
      while (1)
      {
        __int16 v24 = sub_1000C0F68(0xC00uLL);
        *(void *)&v21[2 * v22] = v24;
        if (!v24) {
          break;
        }
        j__memmove(v24, *(const void **)(*((void *)a1 + 2) + 8 * v22++), 0xC00uLL);
        if (v23 == v22) {
          goto LABEL_20;
        }
      }

      if (v22)
      {
        int32x4_t v37 = v22 + 1;
        do
          sub_1000C0EF8(*(void *)&v21[2 * (v37-- - 2)]);
        while (v37 > 1);
      }

      goto LABEL_44;
    }

    if (a4)
    {
LABEL_12:
      *a4 = v14;
LABEL_25:
      if (a5) {
        *a5 = v22[0];
      }
      uint64_t result = 0LL;
      if (a6) {
        *a6 = Mutable;
      }
      return result;
    }

BOOL sub_1000069E0(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1856)) {
    return 0LL;
  }
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1388);
  int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v2);
  if (v3 == 0x4000) {
    LOWORD(v3) = sub_100015BC0(a1, v2);
  }
  uint64_t v4 = (__int16)(sub_100012328(a1) - v3);
  uint64_t v5 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v5 = *(void *)(qword_1000FDCC0 + 536);
  }
  return v5 < v4;
}

uint64_t sub_100006A60(uint64_t result, float64x2_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1100);
  signed int v4 = *(unsigned __int8 *)(result + 1771);
  signed int v5 = *(unsigned __int8 *)(result + 1770);
  if (v3 < 8
    || ((unint64_t)&a2->f64[v3] > a3 ? (BOOL v6 = a3 + v3 > (unint64_t)a2) : (BOOL v6 = 0), v6))
  {
    uint64_t v14 = 0LL;
  }

  else
  {
    int32x4_t v7 = vdupq_n_s32(v4);
    int32x4_t v8 = vdupq_n_s32(v5);
    __asm { FMOV            V2.2D, #0.5 }

    if (v3 >= 0x10)
    {
      uint64_t v14 = v3 & 0x7FFFFFF0;
      uint64_t v20 = v3 & 0xFFFFFFF0;
      uint64_t v21 = (int8x16_t *)a3;
      int v22 = a2;
      do
      {
        float64x2_t v24 = v22[6];
        float64x2_t v23 = v22[7];
        float64x2_t v26 = v22[4];
        float64x2_t v25 = v22[5];
        float64x2_t v28 = v22[2];
        float64x2_t v27 = v22[3];
        float64x2_t v30 = *v22;
        float64x2_t v29 = v22[1];
        v22 += 8;
        int32x4_t v31 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v24, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v23, _Q2)));
        int32x4_t v32 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v26, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v25, _Q2)));
        int32x4_t v33 = vminq_s32( vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v30, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v29, _Q2))),  v7);
        v45.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v31, v7), v8);
        v45.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v32, v7), v8);
        v45.val[1] = (int8x16_t)vmaxq_s32( vminq_s32( vuzp1q_s32( (int32x4_t)vcvtq_s64_f64(vaddq_f64(v28, _Q2)),  (int32x4_t)vcvtq_s64_f64(vaddq_f64(v27, _Q2))),  v7),  v8);
        v45.val[0] = (int8x16_t)vmaxq_s32(v33, v8);
        *v21++ = vqtbl4q_s8(v45, (int8x16_t)xmmword_1000F0340);
        v20 -= 16LL;
      }

      while (v20);
      if (v14 == v3) {
        return result;
      }
      if ((v3 & 8) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    uint64_t v34 = v14;
    uint64_t v14 = v3 & 0xFFFFFFF8;
    unint64_t v35 = (float64x2_t *)((char *)a2 + 8 * v34);
    int32x4_t v36 = (void *)(a3 + v34);
    uint64_t v37 = v34 - v14;
    do
    {
      float64x2_t v39 = v35[2];
      float64x2_t v38 = v35[3];
      float64x2_t v41 = *v35;
      float64x2_t v40 = v35[1];
      v35 += 4;
      int32x4_t v42 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v38, _Q2)));
      int32x4_t v43 = vminq_s32( vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v41, _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v40, _Q2))),  v7);
      v44.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v42, v7), v8);
      v44.val[0] = (int8x16_t)vmaxq_s32(v43, v8);
      *v36++ = vqtbl2q_s8(v44, (int8x16_t)xmmword_1000F0350).u64[0];
      v37 += 8LL;
    }

    while (v37);
    if (v14 == v3) {
      return result;
    }
  }

LABEL_10:
  uint64_t v15 = v3 - v14;
  int v16 = (_BYTE *)(a3 + v14);
  int v17 = &a2->f64[v14];
  do
  {
    double v18 = *v17++;
    int v19 = (int)(v18 + 0.5);
    if (v19 >= v4) {
      int v19 = v4;
    }
    if (v19 <= v5) {
      LOBYTE(v19) = v5;
    }
    *v16++ = v19;
    --v15;
  }

  while (v15);
  return result;
}

  unsigned __int32 v10 = (_BYTE *)(a3 + v9);
  uint64_t v11 = &a2->i32[v9];
  unint64_t v12 = v3 - v9;
  do
  {
    uint64_t v14 = *v11++;
    int v13 = v14;
    if (v14 >= v4) {
      int v13 = v4;
    }
    if (v13 <= v5) {
      LOBYTE(v13) = v5;
    }
    *v10++ = v13;
    --v12;
  }

  while (v12);
  return result;
}

  if (qword_1000FDCC0 && (int)v12 >= 1 && *(_DWORD *)(qword_1000FDCC0 + 4776))
  {
    float64x2_t v23 = 0LL;
    while (1)
    {
      uint64_t v21 = v16[v23 / 4] - *(_DWORD *)&v18[v23 + 384];
      if (v21) {
        goto LABEL_20;
      }
      v23 += 4LL;
      if (v15 == v23)
      {
        float64x2_t v24 = 0LL;
        while (1)
        {
          uint64_t v21 = v17[v24 / 4] - *(_DWORD *)&v18[v24 + 620];
          if (v21) {
            goto LABEL_20;
          }
          v24 += 4LL;
          if (v15 == v24) {
            goto LABEL_41;
          }
        }
      }
    }
  }

  sub_1000CB038(v17, v34);
  bzero(a4, 8LL * a2);
  if (a6)
  {
    bzero(a6, a2);
    *a6 = 1;
  }

  *a5 = 0;
  return 1LL;
}

  uint64_t v15 = **(_DWORD **)(result + 768);
LABEL_14:
  v14[1] = v15;
  int v16 = *(int *)(a2 + 4);
  else {
    int v17 = *(_DWORD *)(a2 + 4);
  }
  *uint64_t v14 = v17;
  if ((int)v16 < 1)
  {
LABEL_33:
    float64x2_t v27 = (v16 + 1);
    float64x2_t v28 = 11 - v27;
    float64x2_t v29 = v12 << 7;
    float64x2_t v30 = 10 - v27;
    if (HIDWORD(v30)) {
      goto LABEL_39;
    }
    int32x4_t v31 = (_OWORD *)((char *)&v13[v16 + 16] + v29);
    *(void *)&int32x4_t v32 = -1LL;
    *((void *)&v32 + 1) = -1LL;
    *(void *)&int32x4_t v33 = 0x4000000040000000LL;
    *((void *)&v33 + 1) = 0x4000000040000000LL;
    uint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8LL;
    do
    {
      *(_OWORD *)((char *)v31 + 24) = v32;
      *(_OWORD *)((char *)v31 + 40) = v32;
      *(v31 - 1) = v33;
      *int32x4_t v31 = v33;
      *(_OWORD *)((char *)v31 - 56) = v33;
      *(_OWORD *)((char *)v31 - 40) = v33;
      v31 += 2;
      v34 -= 8LL;
    }

    while (v34);
    v16 += v28 & 0xFFFFFFFFFFFFFFF8LL;
    if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8LL))
    {
LABEL_39:
      unint64_t v35 = v16 + 1;
      int32x4_t v36 = (int *)((char *)&v13[v16 + 12] + v29);
      do
      {
        v36[10] = -1;
        *int32x4_t v36 = 0x40000000;
        *(v36 - 10) = 0x40000000;
        ++v36;
      }

      while ((_DWORD)v35++ != 10);
    }

    goto LABEL_42;
  }

  float64x2_t v38 = a3;
  double v18 = 0LL;
  if (v17 <= 1) {
    int v19 = 1LL;
  }
  else {
    int v19 = v17;
  }
  do
  {
    while (1)
    {
      uint64_t v21 = *(int **)(a2 + 40);
      if (v18) {
        break;
      }
      if (v21) {
        goto LABEL_31;
      }
LABEL_21:
      uint64_t v20 = &v13[32 * v12 + v18];
      v20[22] = -1;
      v20[12] = 0x40000000;
      v20[2] = 0x40000000;
      if (++v18 == v19) {
        goto LABEL_32;
      }
    }

    int v22 = &v21[*(int *)(a2 + 32)];
    float64x2_t v23 = v18;
    do
    {
      float64x2_t v24 = v21;
      while (1)
      {
        float64x2_t v25 = *v24++;
        if (v25 == -1) {
          break;
        }
        uint64_t v21 = v24;
        if (v24 >= v22) {
          goto LABEL_21;
        }
      }

      ++v21;
      --v23;
    }

    while (v23);
LABEL_31:
    float64x2_t v26 = &v13[32 * v12 + v18];
    v26[22] = *v21;
    uint64_t result = sub_100039818(*(void *)(v5 + 5512));
    v26[12] = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v18) - result;
    v26[2] = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v18++);
  }

  while (v18 != v19);
LABEL_32:
  a3 = v38;
LABEL_42:
  if (*(_DWORD *)(v5 + 1300) < a3) {
    *(_DWORD *)(v5 + 1300) = a3;
  }
  return result;
}

  uint64_t v21 = v14 - 88;
  if ((int)v14 - 88 >= 1)
  {
    int v22 = (v14 - 88);
    if (v21 < 0x10)
    {
      float64x2_t v23 = 0LL;
      goto LABEL_52;
    }

    float64x2_t v23 = v22 & 0xFFFFFFF0;
    float64x2_t v24 = vdupq_n_s16(v16);
    float64x2_t v25 = (int16x8_t *)(a1 + 192);
    float64x2_t v26 = v21 & 0xFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *float64x2_t v25 = v24;
      v25 += 2;
      v26 -= 16LL;
    }

    while (v26);
    if (v23 == v22)
    {
      int v13 = 7LL;
      goto LABEL_35;
    }

  float64x2_t v39 = 0LL;
LABEL_11:
  sub_1000C0EF8((uint64_t)v34);
  sub_1000CB038(v32, v74);
  sub_1000CB038(v22, v75);
  if (!v76 && a6 > (int)v39) {
  return v39;
  }
}
    }
  }

  uint64_t v14 = 0LL;
LABEL_25:
  float64x2_t v26 = v14;
  sub_1000CB038(v11, v28);
  return v26;
}

  if (a2 + 5 >= 3)
  {
    if (a2 == -2)
    {
LABEL_16:
      if (!a3) {
        goto LABEL_34;
      }
      uint64_t result = "<SILENCE>";
      goto LABEL_33;
    }

    goto LABEL_31;
  }

  if (!a3) {
    goto LABEL_34;
  }
  if (a2 + 5 <= 2)
  {
    uint64_t result = off_1000FA120[a2 + 5];
    if (!*result) {
      goto LABEL_34;
    }
LABEL_33:
    uint64_t result = (char *)sub_1000CE25C(result, 0x7FFFFFFF, a3);
    goto LABEL_34;
  }

  uint64_t result = "<NOID>";
  if (aNoid[0]) {
    goto LABEL_33;
  }
LABEL_34:
  if (a4) {
    *a4 = 0;
  }
  return result;
}

      sub_1000CB038(v49, 4LL * v47);
      v47 *= 2;
      uint8x16_t v48 = 4LL * v47;
      goto LABEL_11;
    }

    ++v50;
  }

  while (sub_1000CBA60(v51));
  if (v47 < 1) {
    uint64_t v59 = 0LL;
  }
  else {
    uint64_t v59 = (void *)sub_1000CAF58(4LL * v47, v52, v53, v54, v55, v56, v57, v58);
  }
  uint64_t v60 = sub_100082CF0(*a1);
  v61 = v60;
  if (v60 >= v47) {
    v62 = v47;
  }
  else {
    v62 = v60;
  }
  if ((int)v62 < 1)
  {
    if (v59) {
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v63 = 0LL;
    uint64_t v63 = v62 & 0x7FFFFFF8;
    int8x16_t v64 = v59 + 2;
    uint64_t v65 = v49 + 2;
    uint64_t v66 = v62 & 0xFFFFFFF8;
    do
    {
      *(void *)&uint64_t v67 = __PAIR64__(HIDWORD(*v64), *(_OWORD *)v64) | 0xC0000000C0000000LL;
      DWORD2(v67) = v64[1] | 0xC0000000;
      HIDWORD(v67) = HIDWORD(*(_OWORD *)v64) | 0xC0000000;
      *(v65 - 1) = *((_OWORD *)v64 - 1) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
      *uint64_t v65 = v67;
      v64 += 4;
      v65 += 2;
      v66 -= 8LL;
    }

    while (v66);
    if (v63 != v62)
    {
LABEL_26:
      v68 = v62 - v63;
      v69 = 4 * v63;
      v70 = (unsigned int *)v49 + v63;
      v71 = (int *)((char *)v59 + v69);
      do
      {
        v72 = *v71++;
        *v70++ = v72 | 0xC0000000;
        --v68;
      }

      while (v68);
    }

uint64_t sub_100006C18(uint64_t result, int32x4_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 1100);
  signed int v4 = *(unsigned __int8 *)(result + 1773);
  signed int v5 = *(unsigned __int8 *)(result + 1772);
  if (v3 < 8
    || ((unint64_t)a2 + 4 * v3 > a3 ? (BOOL v6 = a3 + v3 > (unint64_t)a2) : (BOOL v6 = 0), v6))
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    int32x4_t v7 = vdupq_n_s32(v4);
    int32x4_t v8 = vdupq_n_s32(v5);
    if (v3 >= 0x20)
    {
      uint64_t v9 = v3 & 0x7FFFFFE0;
      uint64_t v15 = a2 + 4;
      int v16 = (int8x16_t *)(a3 + 16);
      uint64_t v17 = v3 & 0xFFFFFFE0;
      do
      {
        v26.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-3], v7), v8);
        v26.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-4], v7), v8);
        v26.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-2], v7), v8);
        v26.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v15[-1], v7), v8);
        v25.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v15[1], v7), v8);
        v25.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(*v15, v7), v8);
        v25.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(v15[2], v7), v8);
        v25.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(v15[3], v7), v8);
        v16[-1] = vqtbl4q_s8(v26, (int8x16_t)xmmword_1000F0340);
        *int v16 = vqtbl4q_s8(v25, (int8x16_t)xmmword_1000F0340);
        v15 += 8;
        v16 += 2;
        v17 -= 32LL;
      }

      while (v17);
      if (v9 == v3) {
        return result;
      }
      if ((v3 & 0x18) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    uint64_t v18 = v9;
    uint64_t v9 = v3 & 0xFFFFFFF8;
    int v19 = (int32x4_t *)((char *)a2 + 4 * v18);
    uint64_t v20 = (void *)(a3 + v18);
    uint64_t v21 = v18 - v9;
    do
    {
      int32x4_t v23 = *v19;
      int32x4_t v22 = v19[1];
      v19 += 2;
      v24.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v22, v7), v8);
      v24.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(v23, v7), v8);
      *v20++ = vqtbl2q_s8(v24, (int8x16_t)xmmword_1000F0350).u64[0];
      v21 += 8LL;
    }

    while (v21);
    if (v9 == v3) {
      return result;
    }
  }

uint64_t sub_100006D74(uint64_t result, uint8x16_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 1100);
  unsigned int v3 = *(unsigned __int8 *)(result + 1772);
  unsigned int v4 = *(unsigned __int8 *)(result + 1773);
  if (v2 >= 8)
  {
    if (v2 >= 0x20)
    {
      uint64_t v5 = v2 & 0x7FFFFFE0;
      uint8x16_t v6 = (uint8x16_t)vdupq_n_s8(v4);
      uint8x16_t v7 = (uint8x16_t)vdupq_n_s8(v3);
      int32x4_t v8 = a2 + 1;
      uint64_t v9 = v2 & 0xFFFFFFE0;
      do
      {
        uint8x16_t v10 = vmaxq_u8(vminq_u8(*v8, v6), v7);
        v8[-1] = vmaxq_u8(vminq_u8(v8[-1], v6), v7);
        *int32x4_t v8 = v10;
        v8 += 2;
        v9 -= 32LL;
      }

      while (v9);
      if (v5 == v2) {
        return result;
      }
      if ((v2 & 0x18) == 0) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    uint64_t v11 = v5;
    uint64_t v5 = v2 & 0xFFFFFFF8;
    uint8x8_t v12 = (uint8x8_t)vdup_n_s8(v4);
    uint8x8_t v13 = (uint8x8_t)vdup_n_s8(v3);
    signed int v14 = (uint8x8_t *)&a2->i8[v11];
    uint64_t v15 = v11 - v5;
    do
    {
      *signed int v14 = vmax_u8(vmin_u8(*v14, v12), v13);
      ++v14;
      v15 += 8LL;
    }

    while (v15);
    if (v5 == v2) {
      return result;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

uint64_t sub_100006E54(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    BOOL v4 = *(_DWORD *)(result + 1016) != 0;
    uint64_t v5 = (_OWORD *)(result + 1624);
    *(_DWORD *)a2 = v4;
    if (a4) {
      goto LABEL_3;
    }
  }

  else
  {
    BOOL v4 = 0;
    uint64_t v5 = (_OWORD *)(result + 1624);
    *(_DWORD *)a2 = 0;
    if (a4)
    {
LABEL_3:
      int v6 = *(_DWORD *)(result + 1004);
      *(_DWORD *)(a2 + 4) = v6 != 0;
      if (!*(_DWORD *)(result + 1008))
      {
        if (v6)
        {
          __int128 v7 = v5[1];
          *(void *)(a2 + 16) = *((void *)v5 + 2);
          *(_OWORD *)(a2 + 24) = v7;
          return result;
        }

        goto LABEL_9;
      }

LABEL_8:
      unint64_t v8 = *(void *)(result + 1640);
      *(void *)(a2 + 16) = v8;
      *(_OWORD *)(a2 + 24) = v8;
      return result;
    }
  }

  *(_DWORD *)(a2 + 4) = 0;
  if (*(_DWORD *)(result + 1008)) {
    goto LABEL_8;
  }
LABEL_9:
  __int128 v9 = *v5;
  if (v4) {
    *(void *)(a2 + 16) = *(void *)(result + 1728);
  }
  else {
    *(void *)(a2 + 16) = v9;
  }
  *(_OWORD *)(a2 + 24) = v9;
  return result;
}

  sub_1000BCBC8(v9);
  if (!*v12)
  {
    sub_10000A194((uint64_t)v11);
    signed int v14 = *((void *)v11 + 2);
    *((void *)v11 + 18) = *((void *)v11 + 17);
    uint64_t v15 = *((void *)v11 + 4);
    *((void *)v11 + 12) = v14;
    *((void *)v11 + 13) = v15;
    int v16 = *((void *)v11 + 6);
    *((void *)v11 + 14) = *((void *)v11 + 8);
    *((void *)v11 + 15) = v16;
    *((void *)v11 + 16) = *((void *)v11 + 10);
  }

  return v11;
}

  uint64_t v20 = a2 - 2;
  uint64_t v21 = *(_DWORD *)(a1 + 452) - v20;
  *(_DWORD *)(a1 + 452) = v21;
  memcpy((void *)(a1 + 448), (const void *)(a3 + 2LL * v20), 2LL * (int)v21);
  if (*(__int16 *)(a3 + 2LL * (a2 - 1)) == -3)
  {
    *(_WORD *)(a1 + 456) = -4;
    int32x4_t v22 = 1;
  }

  else
  {
LABEL_14:
    int32x4_t v22 = 0;
    *(_WORD *)(a1 + 456) = -1;
  }

  *(_DWORD *)(a1 + 460) = v22;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 32))( a1,  a3,  a2,  a5,  a4,  a6,  a7,  a8,  a9);
  int8x16x2_t v24 = *(_BYTE *)(a1 + 424) == 0;
  *(_DWORD *)(a1 + 416) = (*(_BYTE *)(a1 + 424) == 0) << 30;
  if (v24) {
    int8x16x4_t v25 = -1;
  }
  else {
    int8x16x4_t v25 = 0;
  }
  *(_DWORD *)(a1 + 420) = v25;
  *(_DWORD *)(a1 + 468) = result;
  return result;
}

  *(_DWORD *)(*(void *)(a2 + 120) + 4LL * v7) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(*(void *)(a2 + 24) + *(int *)(a2 + 52)) = a3;
  *(_BYTE *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = 0;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1904)) {
    *(_BYTE *)(*(void *)(a2 + 40) + *(int *)(a2 + 52)) = *v8;
  }
  int v16 = sub_1000477D4(a1, a3);
  *(_BYTE *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = 0;
  if ((v16 - 1) <= 2 && a3 && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 2096))
  {
    uint64_t v17 = sub_100059800(*(void *)a1);
    if (v17 >= 255) {
      unsigned int v18 = -1;
    }
    else {
      unsigned int v18 = v17;
    }
    *(_BYTE *)(*(void *)(a2 + 32) + *(int *)(a2 + 52)) = v18;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v19 + 1;
  uint64_t v21 = v19 + 1 == *(_DWORD *)(a1 + 236);
  int32x4_t v22 = *(_DWORD *)(a2 + 60);
  ++*(_DWORD *)(a2 + 64);
  if (v21) {
    int32x4_t v23 = 0;
  }
  else {
    int32x4_t v23 = v19 + 1;
  }
  *(_DWORD *)(a2 + 52) = v23;
  int8x16x2_t v24 = (v23 - v20 + v22) % v22;
  if (v24 > *(_DWORD *)(a2 + 88)) {
    *(_DWORD *)(a2 + 88) = v24;
  }
  return v16;
}

        uint8x8_t v13 = v28;
      }
    }

  v372 = a3;
  v395 = a1;
  uint64_t v17 = *(__int16 *)(v395 + 60);
  else {
    unsigned int v18 = a5;
  }
  int v19 = *(void *)(v395 + 48);
  uint64_t v20 = (int *)(v19 + 16LL * v18);
  uint64_t v21 = v20[1];
  if (v21 < 1) {
    goto LABEL_50;
  }
  v361 = a6;
  v362 = a7;
  v363 = a8;
  int32x4_t v22 = 0LL;
  int32x4_t v23 = *v20;
  int8x16x2_t v24 = v21 + *v20;
  int8x16x4_t v25 = (_DWORD *)(v19 + 16LL * v18 + 12);
  int8x16x4_t v26 = a2;
  v407 = (uint64_t)a2;
  float64x2_t v27 = v395;
  float64x2_t v28 = v372;
  do
  {
    unint64_t v35 = v23 >> 8;
    int32x4_t v36 = *(void *)(*(void *)v27 + 8LL * v35);
    uint64_t v37 = (unsigned __int16 *)(v36 + 8LL * v23);
    if (*(_DWORD *)(v27 + 116))
    {
      float64x2_t v38 = *(_WORD *)(v36 + 8LL * v23 + 2);
    }

    else
    {
      float64x2_t v38 = *(_WORD *)(v36 + 8LL * v23 + 2);
      if (!v38) {
        goto LABEL_26;
      }
    }

    if (v38 >= (__int16)a4)
    {
      if (!a10 || (__int16)*v37 == -2 || (v39 = sub_100026158((uint64_t)a9, a10), v28 = v372, float64x2_t v27 = v395, v39))
      {
        if (!*(_DWORD *)(v27 + 124)
          || !*(_WORD *)(*(void *)(*(void *)(v27 + 16) + 8 * v35) + 12LL * v23 + 6))
        {
          float64x2_t v40 = *v25 + *(__int16 *)(v36 + 8LL * v23 + 4);
          int8x16x4_t v26 = 0LL;
          float64x2_t v41 = -1;
          int32x4_t v42 = v22;
          int32x4_t v43 = a2;
          do
          {
            if (v43[3] > v41)
            {
              int8x16x4_t v26 = v43;
              float64x2_t v41 = v43[3];
            }

            v43 += 32;
            --v42;
          }

          while (v42);
          float64x2_t v27 = v395;
          if (v40 < v26[3])
          {
LABEL_43:
            int8x16x2_t v44 = *v37;
            if (v44 == 65534)
            {
              int32x4_t v33 = 0;
            }

            else
            {
              *((_WORD *)v26 + 8) = v44;
              *((_BYTE *)v26 + 89) = 0;
              int32x4_t v33 = 1;
            }

            *((_BYTE *)v26 + 88) = 0;
            *int8x16x4_t v26 = v23;
            v26[1] = v33;
            uint64_t v34 = (int)v22 < v28;
            v26[2] = 0;
            v26[3] = v40;
            else {
              int32x4_t v22 = (v22 + 1);
            }
            *((_WORD *)v26 + 62) = 0;
            if (v34) {
              v26 += 32;
            }
          }
        }
      }
    }

uint64_t sub_100006EFC(uint64_t result)
{
  if (result) {
    return sub_1000C0EF8(result);
  }
  return result;
}

uint64_t sub_100006F08( uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, unsigned __int16 a5, int a6, int32x4_t a7, double a8, int32x4_t a9, int32x4_t a10, int8x16_t a11, int8x16_t a12)
{
  int v17 = *(unsigned __int16 *)(a1 + 1600);
  BOOL v18 = v17 != a5;
  uint64_t v19 = *(unsigned __int16 *)(a1 + 1388);
  *(_WORD *)(a1 + 1600) = a5;
  if (a6)
  {
    sub_100015AE0(a1);
LABEL_3:
    *(_WORD *)(a1 + 1974) = 0x4000;
    goto LABEL_4;
  }

  if (v17 != a5)
  {
    *(_WORD *)(*(void *)(a1 + 1792) + 2 * v19) = 0x4000;
    uint64_t v33 = *(int *)(a1 + 1824);
    if ((int)v33 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v34 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v33 + 1;
      *(_WORD *)(v34 + 2 * v33) = v19;
    }

    uint64_t v35 = *(unsigned __int16 *)(a1 + 1960);
    if (v35 != 0xFFFF)
    {
      *(_WORD *)(*(void *)(a1 + 1792) + 2 * v35) = 0x4000;
      uint64_t v36 = *(int *)(a1 + 1824);
      if ((int)v36 < *(_DWORD *)(a1 + 1828))
      {
        __int16 v37 = *(_WORD *)(a1 + 1960);
        uint64_t v38 = *(void *)(a1 + 1832);
        *(_DWORD *)(a1 + 1824) = v36 + 1;
        *(_WORD *)(v38 + 2 * v36) = v37;
      }
    }

    goto LABEL_3;
  }

LABEL_4:
  *(void *)(a1 + 1704) = *(void *)(a4 + 24);
  *(void *)(a1 + 1712) = *(void *)(a4 + 16);
  *(void *)(a1 + 1720) = *(void *)(a4 + 32);
  if (*(_DWORD *)(a1 + 1016)) {
    *(_DWORD *)(a1 + 976) = *(_DWORD *)a4;
  }
  if (*(_DWORD *)(a1 + 1004)) {
    *(_DWORD *)(a1 + 656) = *(_DWORD *)(a4 + 4);
  }
  sub_100005F98(a1, a2, v18, a7, a8, a9, a10, a11, a12);
  *(_DWORD *)(a1 + 1604) = 1;
  *(_DWORD *)(a1 + 1976) = *a3;
  uint64_t v27 = *(void *)(a1 + 1792);
  uint64_t result = *(unsigned __int16 *)(v27 + 2 * v19);
  if ((_DWORD)result == 0x4000)
  {
    uint64_t result = sub_100015BC0(a1, v19);
    uint64_t v27 = *(void *)(a1 + 1792);
  }

  *(_WORD *)(v27 + 2 * v19) = result;
  if (*(_DWORD *)(a1 + 1968))
  {
    uint64_t result = sub_100011ECC(a1, v20, v21, v22, v23, v24, v25, v26);
    uint64_t v29 = *(void *)(a1 + 1792);
    int v30 = *(__int16 *)(v29 + 2 * v19);
    *(_WORD *)(v29 + 2 * v19) = v30;
    uint64_t v31 = *(int *)(a1 + 1824);
    if ((int)v31 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v32 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v31 + 1;
      *(_WORD *)(v32 + 2 * v31) = v19;
    }
  }

  else if (*(_DWORD *)(a1 + 1964) && v17 != a5)
  {
    return sub_100011044(a1);
  }

  return result;
}

      unsigned int v3 = v6;
      BOOL v4 = v7;
    }

    while (v2 < *(int *)(a1 + 576));
  }

      v3 += v8;
      if (v2 == v1) {
        goto LABEL_17;
      }
    }
  }

  unsigned int v3 = 0;
LABEL_17:
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    uint64_t v27 = *(__int16 *)(a1 + 1136);
    float64x2_t v28 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v3) >> *(_DWORD *)(a1 + 728));
    else {
      return v27;
    }
  }

  else
  {
    int v30 = *(__int16 *)(a1 + 1136);
    uint64_t v31 = (__int16)(int)((double)v3 * *(double *)(a1 + 8) + 0.5);
    else {
      return v30;
    }
  }

      v5 -= 274;
    }

    while (v24-- > 1);
  }

  return result;
}

    v18 += 1096;
    if (v18 >= v10)
    {
      __dst = v18;
      if (v11) {
        goto LABEL_79;
      }
      goto LABEL_47;
    }
  }

    *a4 = v14;
    goto LABEL_5;
  }

  uint64_t v11 = sub_1000B9330(*(uint64_t **)(a1 + 8), (unint64_t)a2, a3, 0LL, &v14, &v15);
  uint8x8_t v12 = v11;
  if (v11 == 1) {
    uint8x8_t v13 = 16;
  }
  else {
    uint8x8_t v13 = 1;
  }
  if (v11 == 2) {
    uint64_t result = 15LL;
  }
  else {
    uint64_t result = v13;
  }
  if (!v12)
  {
    uint64_t result = sub_1000505E8(a1, v14, 0LL);
    if ((_DWORD)result) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  return result;
}

    sub_1000CB038(v84, v76);
    sub_1000CB038(v75, v74);
    if (v69) {
      break;
    }
    uint64_t v67 = v116;
    uint64_t v59 = v117;
    *((_BYTE *)v116 + v68) = 1;
LABEL_6:
    if (v59 == ++v68)
    {
      v69 = sub_100050A1C(a1, v59, (uint64_t)v50, (uint64_t)v67, (uint64_t)&v123, v64, v65, v66);
      uint8x16_t v10 = v115;
      if (!v69)
      {
        else {
          v89 = v59;
        }
        if ((int)v89 >= 1)
        {
          v90 = 0LL;
          v90 = v89 & 0x7FFFFFF8;
          v91 = (__int128 *)(v50 + 2);
          v92 = (_OWORD *)(a5 + 16);
          v93 = v89 & 0xFFFFFFF8;
          do
          {
            v94 = *v91;
            *(v92 - 1) = *(v91 - 1);
            *v92 = v94;
            v91 += 2;
            v92 += 2;
            v93 -= 8LL;
          }

          while (v93);
          if (v90 != v89)
          {
LABEL_34:
            v95 = (_DWORD *)(a5 + 4 * v90);
            v96 = (int *)v50 + v90;
            v97 = v89 - v90;
            do
            {
              v98 = *v96++;
              *v95++ = v98;
              --v97;
            }

            while (v97);
          }
        }

        v69 = 0;
        *a6 = v89;
      }

      goto LABEL_46;
    }
  }

  uint64_t v67 = v116;
  if ((int)v68 < 1)
  {
    v101 = 1;
  }

  else
  {
    v100 = v68 + 1;
    v101 = 1;
    do
    {
      v102 = (v100 - 2);
      if (*((_BYTE *)v116 + v102))
      {
        v125 = 0;
        v101 = sub_1000BB674(*(uint64_t **)(a1 + 8), *((_DWORD *)v50 + v102), &v125);
        if (v125)
        {
          v103 = sub_1000BB860(*(uint64_t **)(a1 + 8));
          sub_10001CD48(*(void *)(a1 + 16), v103, v104, v105, v106, v107, v108, v109);
          v69 = 0;
        }
      }

      --v100;
    }

    while (v100 > 1);
  }

  v123 = v101;
  uint8x16_t v10 = v115;
  uint64_t v59 = v117;
LABEL_46:
  sub_1000CB038(v67, v59);
  v99 = v123 != 0;
LABEL_47:
  sub_1000CB038(v50, v10);
  sub_1000CB038(v42, v10);
  sub_1000CB038(v120, v10);
  sub_1000CB038(v121, v10);
  sub_1000CB038(v122, v10);
  if (v69) {
    v110 = v99;
  }
  else {
    v110 = 1;
  }
  if (v110) {
    return v69;
  }
  else {
    return 1LL;
  }
}

    BOOL v18 = *(unsigned __int8 *)(v14 + 38);
    if (!qword_1000FDCC0 || (*(_DWORD *)(qword_1000FDCC0 + 816) ? (uint64_t v19 = (_DWORD)v10 == v18) : (uint64_t v19 = 1), v19))
    {
      if ((_DWORD)v10 != v18) {
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v21 = v10;
      uint64_t v22 = sub_10002BA64(*(void *)(v9 + 8 * ((*(void *)v14 >> 53) & 0x3FFLL) + 680), *(void *)v14);
      uint8x16_t v10 = v21;
      if (!v22) {
        goto LABEL_37;
      }
    }

    if (((_DWORD)v10 != 1 && *(_DWORD *)(v9 + 544) == 2 || (*(void *)v14 & 0x8000000000000000LL) != 0)
      && *(_WORD *)(v14 + 24) != 0x4000)
    {
      uint8x16_t v46 = *(__int16 *)(v14 + 24);
      int8x16_t v47 = v10;
      uint16x8_t v52 = v16;
      uint8x16_t v48 = v11;
      uint16x8_t v51 = v8;
      uint64_t v23 = *(_DWORD *)(v14 + 16);
      unint64_t v56 = 0;
      uint64_t v24 = v55;
      uint64_t v25 = sub_1000CAF58(1096LL, a2, a3, a4, a5, a6, a7, a8);
      uint64_t v26 = sub_10002BA84((uint64_t)v54, *(_DWORD *)(v9 + 8872));
      *(_DWORD *)(v25 + 12) = 1;
      *(_OWORD *)(v25 + 264) = 0u;
      *(_OWORD *)(v25 + 280) = 0u;
      *(_OWORD *)(v25 + 296) = 0u;
      if (v53) {
        uint64_t v27 = v25 + 264;
      }
      else {
        uint64_t v27 = 0LL;
      }
      *(_OWORD *)(v25 + 307) = 0uLL;
      int8x16x4_t v45 = v23;
      float64x2_t v28 = sub_10009CEDC( *(void *)(v9 + 9000),  v23,  v25 + 28,  v25 + 384,  v25 + 323,  v25 + 856,  (__int16 *)(v25 + 146),  v27,  59,  &v56);
      *(_DWORD *)(v25 + 8) = v28;
      if (v28 <= 58)
      {
        LODWORD(v34) = v28;
        int8x16x2_t v44 = v9;
        if (v26)
        {
          if (v28 >= 1)
          {
            uint64_t v35 = v24;
            uint64_t v36 = 0LL;
            do
            {
              *(_DWORD *)(v25 + 4 * v36 + 620) = sub_1000315D4( v26,  *(unsigned int *)(v25 + 4 * v36 + 384),  *(unsigned int *)(v25 + 4 * v36 + 856),  v29,  v30,  v31,  v32,  v33);
              ++v36;
              uint64_t v34 = *(int *)(v25 + 8);
            }

            while (v36 < v34);
            uint64_t v24 = v35;
            __int128 v9 = v44;
          }
        }

        else
        {
          bzero((void *)(v25 + 620), 4 * v28);
        }

        __int16 v37 = (*(void *)v14 >> 53) & 0x3FFLL;
        unint64_t v56 = (*(void *)v14 >> 53) & 0x3FF;
        *(void *)(v25 + 16) = *(void *)(v9 + 8 * v37 + 680);
        *(_WORD *)(v25 + 2LL * (int)v34 + 28) = v52;
        *(_DWORD *)(v25 + 4LL * *(int *)(v25 + 8) + 384) = (*(void *)v14 >> 35) & 0x3FFFF;
        *(_BYTE *)(v25 + *(int *)(v25 + 8) + 323) = (*(void *)v14 & 0x3FFLL) == 0;
        *(_WORD *)(v25 + 2LL * (int)(*(_DWORD *)(v25 + 8))++ + 146) = *v50 - 1;
        *(_DWORD *)uint64_t v25 = *(_DWORD *)(v9 + 9076) + v46;
        int32x4_t v43 = v24 - 1;
        if (v24 < 1)
        {
LABEL_35:
          __int128 v9 = v44;
          sub_10007398C(v44, (unsigned __int16)v52, v14, v46, v45, v51, (int *)&v55, v49, v53);
        }

        else
        {
          uint64_t v38 = v24;
          float64x2_t v39 = 0;
          float64x2_t v40 = 1096 * v38 - 1096;
          float64x2_t v41 = v51;
          while (sub_100024334(v25, (uint64_t)v41))
          {
            v41 += 1096;
            ++v39;
            v40 -= 1096;
            if (v38 == v39) {
              goto LABEL_35;
            }
          }

          __int128 v9 = v44;
          if (*(_DWORD *)v25 < *(_DWORD *)v41)
          {
            uint64_t v55 = v43;
            if (v39 < v43) {
              j__memmove(v41, v41 + 1096, v40);
            }
            goto LABEL_35;
          }
        }
      }

      sub_1000CB038((void *)v25, 1096LL);
      unint64_t v8 = v51;
      uint8x16_t v10 = v47;
      uint64_t v11 = v48;
      int v16 = v52;
    }

  sub_1000CB038(v12, v4);
  return v14;
}

  sub_1000CB038(v12, v4);
  return v14;
}

    v7 += 2 * v11;
  }

  while (*(_WORD *)v7);
  *a4 = (unint64_t)(v9 - a3) >> 1;
  if (v9 != a3)
  {
    *(_WORD *)__int128 v9 = -1;
    uint64_t v5 = *a4 + 1;
    uint64_t result = 1LL;
LABEL_23:
    *a4 = v5;
    return result;
  }

  return 0LL;
}

    __int128 v7 = *(void *)(*(void *)(v5 + 16) + 8LL * (v10 >> 10)) + 24LL * (v10 & 0x3FF);
    __int128 v9 = (*(_WORD *)v7 & 0x3FF) == 0;
    ++v8;
    int v6 = *(_DWORD *)(v7 + 8);
    if (v6 == -1) {
      goto LABEL_21;
    }
  }

  if (*((_WORD *)a4 + 4)) {
    goto LABEL_4;
  }
LABEL_10:
  int v16 = v10 == *a4 && v9;
  int v17 = v15 | v16;
  if (v16) {
    BOOL v18 = v14;
  }
  else {
    BOOL v18 = v11;
  }
  if (v17 != 1) {
    goto LABEL_4;
  }
  uint64_t v11 = v18;
  if (v7) {
    goto LABEL_15;
  }
LABEL_37:
  uint8x16_t v10 = v13;
  if ((_DWORD)v11 == -1 && v8 == 0) {
    return 0LL;
  }
LABEL_31:
  if ((_DWORD)v11 == -1)
  {
    uint64_t v31 = a3;
    if (!v8)
    {
      LODWORD(v11) = -1;
      uint64_t result = sub_100029F28(*(void *)(a3 + 16), 0, 0);
      if (!(_DWORD)result) {
        return result;
      }
LABEL_36:
      *(_DWORD *)(a2 + 24) = v11;
      *(void *)(a2 + 16) = *(void *)(v31 + 16);
      return 1LL;
    }

    LODWORD(v30) = 0;
    float64x2_t v28 = *(void *)(v5 + 16);
    uint64_t v11 = 0xFFFFFFFFLL;
LABEL_46:
    uint64_t result = sub_100029F28( *(void *)(v31 + 16),  v30,  (*(void *)(*(void *)(v28 + 8LL * (v10 >> 10)) + 24LL * (v10 & 0x3FF)) >> 35) & 0x3FFFF);
    if (!(_DWORD)result) {
      return result;
    }
    float64x2_t v40 = sub_1000CAF58(4LL * v8, v33, v34, v35, v36, v37, v38, v39);
    float64x2_t v41 = (void *)v40;
    int32x4_t v42 = 4LL * (int)v8 - 4;
    int32x4_t v43 = v8;
    int8x16x2_t v44 = (unsigned int *)(a3 + 24);
    do
    {
      int8x16x4_t v45 = *v44;
      *(_DWORD *)(v40 + v42) = v45;
      int8x16x2_t v44 = (unsigned int *)(*(void *)(*(void *)(v5 + 16) + ((v45 >> 7) & 0x1FFFFF8)) + 24 * (v45 & 0x3FF) + 8);
      v42 -= 4LL;
      --v43;
    }

    while (v43);
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      uint8x16_t v48 = sub_10009C670( (unsigned int *)v5,  v11,  *(unsigned __int16 *)(v47 + 12),  *(void *)v47 & 0x7FFFFFFFFFFFFFFFLL,  *(void *)v47 >> 63,  0x4000,  -1);
      uint64_t v11 = v48;
    }

    *(_DWORD *)(a2 + 24) = v48;
    *(void *)(a2 + 16) = *(void *)(v31 + 16);
    sub_1000CB038(v41, 4LL * v8);
    return 1LL;
  }

  float64x2_t v28 = *(void *)(v5 + 16);
  uint64_t v29 = (*(void *)(*(void *)(v28 + 8LL * (v11 >> 10)) + 24 * (v11 & 0x3FF)) >> 35) & 0x3FFFFLL;
  LODWORD(v30) = v29;
  uint64_t v31 = a3;
  if (v8) {
    goto LABEL_46;
  }
LABEL_35:
  uint64_t result = sub_100029F28(*(void *)(v31 + 16), v29, 0);
  if ((_DWORD)result) {
    goto LABEL_36;
  }
  return result;
}

      v115 = v17;
      *(v16 - 1) = 4;
LABEL_5:
      ++v15;
      v16 += 7;
      if (v15 >= a12[4]) {
        goto LABEL_17;
      }
    }

    if (!sub_1000CD450((_WORD *)(a2 + 2LL * *v16), (unsigned __int16 *)"u", 2))
    {
      int v17 = 36;
      goto LABEL_4;
    }

    goto LABEL_3;
  }

  v115 = 0;
LABEL_17:
  uint64_t v19 = -1LL;
  uint64_t v20 = a12;
  do
  {
    uint64_t v21 = *v20;
    v20 += 7;
    ++v19;
  }

  while (v21 != 2);
  v117[0] = 0;
  uint64_t v29 = sub_1000A7D60(a1, a4, a5, a6, a7, a8, a10, a3, a2, v20 - 7, v117);
  int v30 = v19;
  v110 = a7;
  v111 = a8;
  if (a12[7 * v19])
  {
    uint64_t v31 = a1;
    while (*(v20 - 6) < v117[0])
    {
      uint64_t v32 = *v20;
      v20 += 7;
      int v30 = ++v19;
      if (!v32)
      {
        uint64_t v33 = a12[4];
        goto LABEL_49;
      }
    }

    int v30 = v19;
    uint64_t v33 = a12[4];
  }

  else
  {
    uint64_t v31 = a1;
    uint64_t v33 = a12[4];
  }

          signed int v14 = a14;
          goto LABEL_5;
        }

        uint64_t v35 = v14 + 28LL * v17;
        __int16 v37 = *(int *)(v35 + 4);
        uint64_t v36 = (int *)(v35 + 4);
        uint64_t v38 = *(unsigned __int16 *)(a2 + 2 * v37);
        if (v38 == 44)
        {
          float64x2_t v39 = a9;
          else {
            uint64_t v65 = *a9;
          }
          goto LABEL_105;
        }

        if (v38 == 45)
        {
          v61 = *(_WORD **)(v84 + 224);
          if (v61)
          {
            sub_1000B3680(a1, v61, 0LL, 1LL, 0LL, 30, (uint64_t)a9);
            int8x16_t v78 = *(unsigned int *)(a14 + 28LL * v17 + 8);
            sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, *a9, *v36, v78, SHIDWORD(v78), 0);
            signed int v14 = a14;
            ++v91;
          }

          goto LABEL_5;
        }

        if (v38 == 47 && *(void *)(v84 + 208))
        {
          float64x2_t v39 = a9;
          if ((int)sub_1000B3680(a1, L"/", 1LL, 1LL, 0LL, 30, (uint64_t)a9) >= 1)
          {
LABEL_63:
            sub_1000B8938( a4,  a5,  a6,  a7,  0LL,  a8,  a10,  a3,  *v39,  *v36,  *(_DWORD *)(a14 + 28LL * v17 + 8),  (int)&_mh_execute_header,  (unint64_t)&_mh_execute_header >> 32);
LABEL_106:
            ++v91;
            signed int v14 = a14;
            goto LABEL_5;
          }

          else {
            uint64_t v65 = *a9;
          }
LABEL_105:
          v79 = *(unsigned int *)(a14 + 28LL * v17 + 8);
          sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, v65, *v36, v79, SHIDWORD(v79), 0);
          goto LABEL_106;
        }
      }

  __int128 v7 = *(unint64_t **)(a1 + 32);
  if (v7)
  {
    unint64_t v8 = sub_1000CC52C(*(void *)(a1 + 32));
    BOOL v4 = sub_1000BE770(v7, 2, v8 + 1, v4);
  }

  __int128 v9 = *(unint64_t **)(a1 + 48);
  if (v9)
  {
    uint8x16_t v10 = sub_1000CC52C(*(void *)(a1 + 48));
    BOOL v4 = sub_1000BE770(v9, 2, v10 + 1, v4);
  }

  uint64_t v11 = *(unint64_t **)(a1 + 64);
  if (v11)
  {
    uint8x8_t v12 = sub_1000CC52C(*(void *)(a1 + 64));
    BOOL v4 = sub_1000BE770(v11, 2, v12 + 1, v4);
  }

  uint8x8_t v13 = *(unint64_t **)(a1 + 80);
  if (v13)
  {
    signed int v14 = sub_1000CC52C(*(void *)(a1 + 80));
    LODWORD(v4) = sub_1000BE770(v13, 2, v14 + 1, v4);
  }

  uint64_t v15 = sub_1000BE644(*(_DWORD *)(a1 + 96), 4, v4);
  if (*(int *)(a1 + 96) >= 1)
  {
    int v16 = 0LL;
    int v17 = 0LL;
    do
    {
      BOOL v18 = *(unint64_t **)(*(void *)(a1 + 104) + v16);
      uint64_t v19 = sub_1000CC52C((unint64_t)v18);
      uint64_t v15 = sub_1000BE770(v18, 2, v19 + 1, v15);
      ++v17;
      v16 += 16LL;
    }

    while (v17 < *(int *)(a1 + 96));
  }

  uint64_t v20 = sub_1000BE644(*(_DWORD *)(a1 + 120), 4, v15);
  if (*(int *)(a1 + 120) >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    do
    {
      uint64_t v23 = *(unint64_t **)(*(void *)(a1 + 128) + v21);
      uint64_t v24 = sub_1000CC52C((unint64_t)v23);
      uint64_t v25 = sub_1000BE770(v23, 2, v24 + 1, v20);
      uint64_t v26 = *(unint64_t **)(*(void *)(a1 + 128) + v21 + 16);
      uint64_t v27 = sub_1000CC52C((unint64_t)v26);
      uint64_t v20 = sub_1000BE770(v26, 2, v27 + 1, v25);
      ++v22;
      v21 += 32LL;
    }

    while (v22 < *(int *)(a1 + 120));
  }

  float64x2_t v28 = sub_1000BE644(*(_DWORD *)(a1 + 144), 4, v20);
  if (*(int *)(a1 + 144) >= 1)
  {
    uint64_t v29 = 0LL;
    int v30 = 0LL;
    do
    {
      uint64_t v31 = *(unint64_t **)(*(void *)(a1 + 152) + v29);
      uint64_t v32 = sub_1000CC52C((unint64_t)v31);
      uint64_t v33 = sub_1000BE770(v31, 2, v32 + 1, v28);
      uint64_t v34 = *(unint64_t **)(*(void *)(a1 + 152) + v29 + 16);
      uint64_t v35 = sub_1000CC52C((unint64_t)v34);
      float64x2_t v28 = sub_1000BE770(v34, 2, v35 + 1, v33);
      ++v30;
      v29 += 32LL;
    }

    while (v30 < *(int *)(a1 + 144));
  }

  uint64_t v36 = sub_1000BE644(*(_DWORD *)(a1 + 168), 4, v28);
  if (*(int *)(a1 + 168) >= 1)
  {
    __int16 v37 = 0LL;
    uint64_t v38 = 0LL;
    do
    {
      float64x2_t v39 = *(unint64_t **)(*(void *)(a1 + 176) + v37);
      float64x2_t v40 = sub_1000CC52C((unint64_t)v39);
      float64x2_t v41 = sub_1000BE770(v39, 2, v40 + 1, v36);
      int32x4_t v42 = *(unint64_t **)(*(void *)(a1 + 176) + v37 + 16);
      int32x4_t v43 = sub_1000CC52C((unint64_t)v42);
      uint64_t v36 = sub_1000BE770(v42, 2, v43 + 1, v41);
      ++v38;
      v37 += 32LL;
    }

    while (v38 < *(int *)(a1 + 168));
  }

  int8x16x2_t v44 = sub_1000BE644(*(_DWORD *)(a1 + 192), 4, v36);
  if (*(int *)(a1 + 192) >= 1)
  {
    int8x16x4_t v45 = 0LL;
    uint8x16_t v46 = 0LL;
    do
    {
      int8x16_t v47 = *(unint64_t **)(*(void *)(a1 + 200) + v45);
      uint8x16_t v48 = sub_1000CC52C((unint64_t)v47);
      uint16x8_t v49 = sub_1000BE770(v47, 2, v48 + 1, v44);
      uint16x8_t v50 = *(unint64_t **)(*(void *)(a1 + 200) + v45 + 16);
      uint16x8_t v51 = sub_1000CC52C((unint64_t)v50);
      int8x16x2_t v44 = sub_1000BE770(v50, 2, v51 + 1, v49);
      ++v46;
      v45 += 32LL;
    }

    while (v46 < *(int *)(a1 + 192));
  }

  return v44;
}

  uint64_t result = 0LL;
LABEL_5:
  *a6 = v13;
  *a2 = v12;
  return result;
}

  *a7 = v16;
  *a2 = v15;
  return result;
}

  if (v7)
  {
    sub_1000C0EF8(*(void *)(v7 + 8));
    sub_1000C0EF8(*(void *)(v7 + 16));
    sub_1000C0EF8(v7);
  }

  sub_1000C80FC(v15);
  return v23;
}

      if (v12) {
        goto LABEL_5;
      }
LABEL_6:
      v16[2] = v17;
LABEL_7:
      ++a7;
      ++v13;
    }

    while (v13 != v9);
  }

  return result;
}

uint64_t sub_1000070E0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  *(_DWORD *)(result + 1604) = 0;
  *(void *)(result + 1704) = 0LL;
  *(void *)(result + 1720) = 0LL;
  *(void *)(result + 1712) = 0LL;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1064)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 1736))(result, 1LL);
    }
  }

  return result;
}

uint64_t sub_10000711C( uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(unsigned __int16 *)(a1 + 1388);
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 5356))
    {
      LOWORD(v11) = sub_100011E04(a1);
      BOOL v12 = 0;
      if (!a2) {
        return (__int16)v11;
      }
      goto LABEL_17;
    }

    if (*(_DWORD *)(qword_1000FDCC0 + 5292))
    {
      int v13 = sub_100011ECC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v10);
      if (v11 == 0x4000) {
        LOWORD(v11) = sub_100015BC0(a1, v10);
      }
      BOOL v12 = 0;
      if (!a2) {
        return (__int16)v11;
      }
LABEL_17:
      *a2 = v12;
      return (__int16)v11;
    }
  }

  int v14 = sub_100012328(a1);
  int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v10);
  if (v11 == 0x4000) {
    LOWORD(v11) = sub_100015BC0(a1, v10);
  }
  BOOL v12 = v14 < (__int16)v11;
  if (a2) {
    goto LABEL_17;
  }
  return (__int16)v11;
}

uint64_t sub_100007200(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 2016)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *(_DWORD *)(a1 + 1100);
  int v7 = *(_DWORD *)(a1 + 1188);
  unsigned int v8 = sub_1000BE540(*(_DWORD *)(a1 + 1072), 0xFFFFFFFF);
  unsigned int v9 = sub_1000BE540(*(_DWORD *)(a1 + 1092), v8);
  unsigned int v10 = sub_1000BE540(*(_DWORD *)(a1 + 1096), v9);
  unsigned int v11 = sub_1000BE540(*(_DWORD *)(a1 + 1100), v10);
  unsigned int v12 = sub_1000BE540(*(_DWORD *)(a1 + 1104), v11);
  unsigned int v13 = sub_1000BE514(*(unsigned __int16 *)(a1 + 1136), v12);
  unsigned int v14 = sub_1000BE540(*(_DWORD *)(a1 + 1180), v13);
  unsigned int v15 = sub_1000BE540(*(_DWORD *)(a1 + 1188), v14);
  unsigned int v16 = sub_1000BE540(*(_DWORD *)(a1 + 1192), v15);
  unsigned int v17 = sub_1000BE540(*(_DWORD *)(a1 + 1200), v16);
  unsigned int v18 = sub_1000BE540(*(_DWORD *)(a1 + 1052), v17);
  unsigned int v19 = sub_1000BE540(*(_DWORD *)(a1 + 1384), v18);
  unsigned int v20 = sub_1000BE514(*(unsigned __int16 *)(a1 + 1388), v19);
  unsigned int v21 = sub_1000BE514(*(unsigned __int16 *)(a1 + 1390), v20);
  unsigned int v22 = sub_1000BE540(*(_DWORD *)(a1 + 1392), v21);
  unsigned int v23 = sub_1000BE540(*(unsigned __int16 *)(a1 + 1396), v22);
  unsigned int v24 = sub_1000BE540(*(_DWORD *)(a1 + 1016), v23);
  unsigned int v25 = sub_1000BE540(*(_DWORD *)(a1 + 1760), v24);
  unsigned int v26 = sub_1000BE540(*(_DWORD *)(a1 + 1764), v25);
  unsigned int v27 = sub_1000BE4F8(*(_BYTE *)(a1 + 1770), v26);
  unsigned int v28 = sub_1000BE4F8(*(_BYTE *)(a1 + 1771), v27);
  if ((_DWORD)a2)
  {
    unsigned int v29 = sub_1000BE514(*(unsigned __int16 *)(a1 + 1600), v28);
    unsigned int v28 = sub_1000BE514(*(unsigned __int16 *)(a1 + 1602), v29);
  }

  unsigned int v30 = sub_1000BE540(*(_DWORD *)(a1 + 1032), v28);
  uint64_t v38 = sub_1000BE540(*(_DWORD *)(a1 + 1296), v30);
  if (*(_DWORD *)(a1 + 996) && !*(_DWORD *)(a1 + 1036) && *(int *)(a1 + 1072) >= 1)
  {
    int v50 = 0;
    unsigned __int16 v51 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 2012))
      {
        if (!*(_DWORD *)(a1 + 1032))
        {
          int v57 = 1;
          int v58 = v50;
LABEL_27:
          int v60 = *(_DWORD *)(a1 + 1120);
          int v61 = v60 * v58;
          if (*(_DWORD *)(a1 + 1080) <= v50) {
            uint64_t v62 = 96LL;
          }
          else {
            uint64_t v62 = 16LL;
          }
          int32x4_t v54 = (unint64_t *)(*(void *)(a1 + v62) + v61);
          int v55 = v60 * v57;
          int v56 = 1;
          goto LABEL_18;
        }

        int v57 = 1;
        int v58 = v50;
        if (*(_DWORD *)(a1 + 1108))
        {
LABEL_33:
          uint64_t v64 = 3 * v58;
          if (*(_DWORD *)(a1 + 1080) <= v50) {
            uint64_t v65 = *(void *)(a1 + 144);
          }
          else {
            uint64_t v65 = *(void *)(a1 + 136);
          }
          int32x4_t v54 = (unint64_t *)(v65 + 4 * v64);
          goto LABEL_17;
        }
      }

      else
      {
        if (*(_DWORD *)(a1 + 1176))
        {
          uint64_t v59 = (int *)(*(void *)(a1 + 1160) + 4LL * v51);
          int v58 = *v59;
          int v57 = v59[1] - *v59;
          if (!*(_DWORD *)(a1 + 1032)) {
            goto LABEL_27;
          }
        }

        else
        {
          uint64_t v63 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * v51);
          int v58 = *v63;
          int v57 = v63[1] - v58;
          if (!*(_DWORD *)(a1 + 1032)) {
            goto LABEL_27;
          }
        }

        if (*(_DWORD *)(a1 + 1108)) {
          goto LABEL_33;
        }
      }

      int v52 = *(_DWORD *)(a1 + 1128) * v58;
      if (*(_DWORD *)(a1 + 1080) <= v50) {
        uint64_t v53 = 144LL;
      }
      else {
        uint64_t v53 = 136LL;
      }
      int32x4_t v54 = (unint64_t *)(*(void *)(a1 + v53) + 4LL * v52);
LABEL_17:
      int v55 = *(_DWORD *)(a1 + 1128) * v57;
      int v56 = 4;
LABEL_18:
      uint64_t v38 = sub_1000BE770(v54, v56, v55, v38);
      int v50 = ++v51;
    }

    while (*(_DWORD *)(a1 + 1072) > (int)v51);
  }

  if (*(_DWORD *)(a1 + 1004))
  {
    uint64_t v39 = *(int *)(a1 + 576);
    int v40 = *(_DWORD *)(*(void *)(a1 + 584) + 4 * v39);
    int v41 = *(_DWORD *)(*(void *)(a1 + 616) + 4 * v39);
    int v42 = v39 * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * *(int *)(a1 + 1072));
    uint64_t v43 = sub_1000BE540(*(_DWORD *)(a1 + 576), v38);
    uint64_t v44 = sub_1000BE770(*(unint64_t **)(a1 + 600), 4, (int)v39 + 1, v43);
    uint64_t v45 = sub_1000BE770(*(unint64_t **)(a1 + 616), 4, (int)v39 + 1, v44);
    uint64_t v46 = sub_1000BE770(*(unint64_t **)(a1 + 584), 4, (int)v39 + 1, v45);
    if (*(_DWORD *)(a1 + 724))
    {
      int v47 = v40 / 4;
      uint8x16_t v48 = *(unint64_t **)(a1 + 536);
      int v49 = 4;
    }

    else
    {
      uint8x16_t v48 = *(unint64_t **)(a1 + 520);
      int v49 = 1;
      int v47 = v40;
    }

    uint64_t v66 = sub_1000BE770(v48, v49, v47, v46);
    unsigned int v67 = sub_1000BE770(*(unint64_t **)(a1 + 640), 1, v42, v66);
    unsigned int v68 = sub_1000BE540(*(_DWORD *)(a1 + 716), v67);
    uint64_t v38 = sub_1000BE540(*(_DWORD *)(a1 + 720), v68);
    if (*(_DWORD *)(a1 + 724))
    {
      uint64_t v69 = sub_1000BE770(*(unint64_t **)(a1 + 552), 2, v41, v38);
      uint64_t v38 = sub_1000BE770(*(unint64_t **)(a1 + 568), 2, v39, v69);
    }

    if ((_DWORD)a2) {
      uint64_t v38 = sub_1000BE770(*(unint64_t **)(a1 + 632), 2, v41, v38);
    }
  }

  if (*(_DWORD *)(a1 + 1296) != 5 && !*(_DWORD *)(a1 + 1036))
  {
    if (*(_DWORD *)(a1 + 1032) && *(_DWORD *)(a1 + 1760))
    {
      v70 = *(unint64_t **)(a1 + 1224);
      int v71 = *(_DWORD *)(a1 + 1124) * v7 / 2;
      int v72 = 4;
    }

    else if (*(_DWORD *)(a1 + 1116))
    {
      v70 = *(unint64_t **)(a1 + 1216);
      int v71 = *(_DWORD *)(a1 + 1124) * v7;
      int v72 = 1;
    }

    else
    {
      if (*(_DWORD *)(a1 + 1112))
      {
        v110 = (unint64_t *)sub_1000CAF58(2LL * *(int *)(a1 + 1100), v31, v32, v33, v34, v35, v36, v37);
        if (v7 >= 1)
        {
          int v111 = 0;
          v112 = *(unsigned __int8 **)(a1 + 1208);
          do
          {
            sub_10000539C((_DWORD *)a1, v112, v110);
            uint64_t v38 = sub_1000BE770(v110, 2, *(_DWORD *)(a1 + 1100), v38);
            v112 += 2 * *(int *)(a1 + 1124);
            ++v111;
          }

          while (v7 > (unsigned __int16)v111);
        }

        sub_1000CB038(v110, 2LL * *(int *)(a1 + 1100));
        goto LABEL_50;
      }

      v70 = *(unint64_t **)(a1 + 1208);
      int v71 = *(_DWORD *)(a1 + 1124) * v7;
      int v72 = 2;
    }

    uint64_t v38 = sub_1000BE770(v70, v72, v71, v38);
LABEL_50:
    uint64_t v38 = sub_1000BE770(*(unint64_t **)(a1 + 1240), 4, v7, v38);
  }

  if ((_DWORD)a2)
  {
    v73 = *(unint64_t **)(a1 + 1544);
    if (v73) {
      LODWORD(v38) = sub_1000BE770(v73, 1, v6, v38);
    }
  }

  unsigned int v74 = sub_1000BE540(*(_DWORD *)(a1 + 1044), v38);
  unsigned int v75 = sub_1000BE540(*(_DWORD *)(a1 + 1048), v74);
  unsigned int v76 = sub_1000BE540(*(_DWORD *)(a1 + 1056), v75);
  uint64_t v77 = sub_1000BE540(*(_DWORD *)(a1 + 1060), v76);
  if (*(_DWORD *)(a1 + 1032))
  {
    if ((_DWORD)a2)
    {
      int v78 = *(_DWORD *)(a1 + 1128);
      if (*(_DWORD *)(a1 + 1760))
      {
        uint64_t v79 = sub_1000BE770(*(unint64_t **)(a1 + 1560), 4, v78, v77);
      }

      else
      {
        unsigned int v80 = sub_1000BE770(*(unint64_t **)(a1 + 1552), 4, v78, v77);
        unsigned int v81 = sub_1000BE540(*(_DWORD *)(a1 + 1572), v80);
        uint64_t v79 = sub_1000BE540(*(_DWORD *)(a1 + 1576), v81);
      }

      uint64_t v77 = v79;
    }

    if (!*(_DWORD *)(a1 + 1760) && *(_DWORD *)(a1 + 996) && *(int *)(a1 + 1072) >= 1)
    {
      int v91 = 0;
      unsigned __int16 v92 = 0;
      do
      {
        if (*(_DWORD *)(a1 + 2012))
        {
          int v93 = 1;
          int v94 = v91;
          if (!*(_DWORD *)(a1 + 1108)) {
            goto LABEL_93;
          }
        }

        else if (*(_DWORD *)(a1 + 1176))
        {
          v100 = (int *)(*(void *)(a1 + 1160) + 4LL * v92);
          int v94 = *v100;
          int v93 = v100[1] - *v100;
          if (!*(_DWORD *)(a1 + 1108)) {
            goto LABEL_93;
          }
        }

        else
        {
          v101 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * v92);
          int v94 = *v101;
          int v93 = v101[1] - v94;
          if (!*(_DWORD *)(a1 + 1108))
          {
LABEL_93:
            BOOL v102 = *(_DWORD *)(a1 + 1080) <= v91;
            uint64_t v103 = 104LL;
            if (!v102) {
              uint64_t v103 = 32LL;
            }
            uint64_t v104 = 120LL;
            if (!v102) {
              uint64_t v104 = 48LL;
            }
            uint64_t v105 = *(void *)(a1 + v104);
            uint64_t v77 = sub_1000BE770((unint64_t *)(*(void *)(a1 + v103) + 4LL * v94), 4, v93, v77);
            if (!*(_DWORD *)(a1 + 1044)) {
              goto LABEL_81;
            }
            if (v105) {
              v98 = (unint64_t *)(v105 + 4LL * v94);
            }
            else {
              v98 = 0LL;
            }
            int v99 = 4;
            goto LABEL_80;
          }
        }

        BOOL v102 = *(_DWORD *)(a1 + 1080) <= v91;
        uint64_t v95 = 112LL;
        if (v102)
        {
          uint64_t v96 = 128LL;
        }

        else
        {
          uint64_t v95 = 64LL;
          uint64_t v96 = 80LL;
        }

        uint64_t v97 = *(void *)(a1 + v96);
        uint64_t v77 = sub_1000BE770((unint64_t *)(*(void *)(a1 + v95) + 2LL * v94), 2, v93, v77);
        if (!*(_DWORD *)(a1 + 1044)) {
          goto LABEL_81;
        }
        v98 = (unint64_t *)(v97 + 2LL * v94);
        int v99 = 2;
LABEL_80:
        uint64_t v77 = sub_1000BE770(v98, v99, v93, v77);
LABEL_81:
        int v91 = ++v92;
      }

      while (*(_DWORD *)(a1 + 1072) > (int)v92);
    }
  }

  if ((_DWORD)a2)
  {
    int16x8x4_t v82 = *(unint64_t **)(a1 + 1792);
    if (v82) {
      uint64_t v77 = sub_1000BE770(v82, 2, *(_DWORD *)(a1 + 1072), v77);
    }
  }

  uint64_t v83 = *(void *)(a1 + 1304);
  if (v83)
  {
    unsigned int v84 = sub_1000388D8(v83);
    uint64_t v77 = sub_1000BE540(v84, v77);
  }

  uint64_t v85 = *(void *)(a1 + 944);
  if (v85)
  {
    unsigned int v86 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 952))(v85, a2);
    uint64_t v77 = sub_1000BE540(v86, v77);
  }

  v87 = *(unint64_t **)(a1 + 1144);
  if (v87) {
    uint64_t v77 = sub_1000BE770(v87, 2, *(_DWORD *)(a1 + 1072), v77);
  }
  v88 = *(unint64_t **)(a1 + 1160);
  if (v88) {
    LODWORD(v77) = sub_1000BE770(v88, 4, *(_DWORD *)(a1 + 1072), v77);
  }
  if (*(void *)(a1 + 1368))
  {
    if (*(int *)(a1 + 1384) < 1)
    {
      LODWORD(v90) = -1;
    }

    else
    {
      int v89 = 0;
      uint64_t v90 = 0xFFFFFFFFLL;
      do
        uint64_t v90 = sub_1000BE770( (unint64_t *)(*(void *)(a1 + 1368) + 2LL * *(_DWORD *)(a1 + 1096) * v89++),  2,  *(_DWORD *)(a1 + 1096),  v90);
      while (v89 < *(_DWORD *)(a1 + 1384));
    }

    LODWORD(v77) = sub_1000BE644(v90, 4, v77);
  }

  if (*(_DWORD *)(a1 + 992))
  {
    unsigned int v106 = sub_10007FC70(a1);
    LODWORD(v77) = sub_1000BE644(v106, 4, v77);
  }

  if (*(void *)(a1 + 1432))
  {
    unsigned int v107 = sub_10000A29C(a1);
    LODWORD(v77) = sub_1000BE644(v107, 4, v77);
  }

  uint64_t v108 = sub_1000BE540(*(_DWORD *)(a1 + 1864), v77);
  if (*(_DWORD *)(a1 + 1864)) {
    LODWORD(v108) = sub_1000BE770(*(unint64_t **)(a1 + 1840), 1, *(_DWORD *)(a1 + 1072), v108);
  }
  uint64_t v2 = sub_1000BE540(*(_DWORD *)(a1 + 1964), v108);
  if (!*(_DWORD *)(a1 + 1964)) {
    return v2;
  }
  unsigned int v109 = sub_1000110FC(a1, a2);
  return sub_1000BE644(v109, 4, v2);
}

uint64_t sub_100007ACC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(**(void **)(a1 + 1432) + 8LL * a2);
  uint64_t v3 = sub_1000BE540(*(_DWORD *)v2, 0xFFFFFFFF);
  uint64_t v4 = sub_1000BE770(*(unint64_t **)(v2 + 8), 2, *(_DWORD *)v2, v3);
  return sub_1000BE770(*(unint64_t **)(v2 + 16), 2, *(_DWORD *)v2, v4);
}

uint64_t sub_100007B20(unsigned int *a1, int a2)
{
  if (a2 && a1[502]) {
    return a1[505];
  }
  else {
    return a1[350];
  }
}

void sub_100007B44(uint64_t a1, unsigned int a2)
{
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  int v4 = *(_DWORD *)(a1 + 2012);
  if (v4 || *(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v5 = 1;
    uint64_t v6 = *(int *)(a1 + 1072);
    BOOL v7 = (int)a2 < (int)v6;
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }

  if (!*(_DWORD *)(a1 + 1176))
  {
    uint64_t v6 = *(int *)(a1 + 1072);
    BOOL v7 = (int)a2 < (int)v6;
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_11;
    }
LABEL_5:
    if (!v7)
    {
      uint64_t v10 = a2 - v6;
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 800) + 4 * v10);
      if (*(_DWORD *)(a1 + 1044))
      {
        unsigned int v11 = (void *)(a1 + 808);
LABEL_22:
        unsigned int v13 = 0LL;
        unsigned int v15 = 0LL;
        unsigned int v14 = (_DWORD *)(*v11 + 4 * v10);
        if (v5 < 1) {
          return;
        }
        goto LABEL_37;
      }

      goto LABEL_36;
    }

    signed int v8 = a2;
    if (v4)
    {
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4LL * (int)a2);
      if (*(_DWORD *)(a1 + 1044))
      {
LABEL_9:
        uint64_t v10 = v8;
        unsigned int v11 = (void *)(a1 + 56);
        goto LABEL_22;
      }
    }

    else if (*(_DWORD *)(a1 + 1176))
    {
      signed int v8 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4LL * v8);
      if (*(_DWORD *)(a1 + 1044)) {
        goto LABEL_9;
      }
    }

    else
    {
      signed int v8 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v9 = (_DWORD *)(*(void *)(a1 + 40) + 4LL * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2));
      if (*(_DWORD *)(a1 + 1044)) {
        goto LABEL_9;
      }
    }

LABEL_36:
    unsigned int v14 = 0LL;
    unsigned int v13 = 0LL;
    unsigned int v15 = 0LL;
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }

  int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  uint64_t v6 = *(int *)(a1 + 1072);
  BOOL v7 = (int)a2 < (int)v6;
  if (!*(_DWORD *)(a1 + 1108)) {
    goto LABEL_5;
  }
LABEL_11:
  if (v7)
  {
    signed int v12 = a2;
    if (v4)
    {
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2LL * (int)a2);
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }

    else if (*(_DWORD *)(a1 + 1176))
    {
      signed int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2LL * v12);
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }

    else
    {
      signed int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v13 = (_WORD *)(*(void *)(a1 + 72) + 2LL * *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2));
      if (!*(_DWORD *)(a1 + 1044)) {
        goto LABEL_33;
      }
    }

    unsigned int v9 = 0LL;
    unsigned int v14 = 0LL;
    unsigned int v15 = (_WORD *)(*(void *)(a1 + 88) + 2LL * v12);
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }

  uint64_t v16 = a2 - v6;
  unsigned int v13 = (_WORD *)(*(void *)(a1 + 816) + 2 * v16);
  if (*(_DWORD *)(a1 + 1044))
  {
    unsigned int v9 = 0LL;
    unsigned int v14 = 0LL;
    unsigned int v15 = (_WORD *)(*(void *)(a1 + 824) + 2 * v16);
    if (v5 < 1) {
      return;
    }
    goto LABEL_37;
  }

          int8x16_t v18 = v17[v16];
        }

        while (v16 != v3);
      }

      return v7;
    }

    return 0LL;
  }

      LODWORD(v84) = 0;
      uint64_t v85 = &v68[v69];
      unsigned int v86 = v59;
      do
      {
        LODWORD(v84) = v84 + 1;
        v87 = v68;
        while (1)
        {
          v88 = *v87++;
          if (v88 == -1) {
            break;
          }
          LODWORD(v84) = v84 + 1;
          unsigned int v68 = v87;
          if (v87 >= v85)
          {
            unsigned int v68 = 0LL;
            unsigned int v84 = -1LL;
            goto LABEL_43;
          }
        }

        ++v68;
        --v86;
      }

      while (v86);
      unsigned int v84 = (int)v84;
LABEL_43:
      int v89 = 0;
      uint64_t v90 = -1;
      int v91 = 1;
      unsigned __int16 v92 = (int *)v80;
      do
      {
        int v93 = v91;
        int v94 = v89;
        uint64_t v95 = *v92++;
        ++v90;
        ++v91;
        ++v89;
      }

      while (v95 != -1);
      uint64_t v96 = 0;
      LODWORD(v55) = -1;
      uint64_t v97 = v68;
      do
      {
        v98 = v96;
        int v99 = *v97++;
        int32x4_t v55 = (v55 + 1);
        --v93;
        ++v96;
      }

      while (v99 != -1);
      v100 = 4 * v83;
      v101 = *(void *)(v10 + 48);
      BOOL v102 = *(void *)(v10 + 56);
      uint64_t v56 = 4 * v84;
      uint64_t v103 = v102 == 0;
      uint64_t v104 = (int *)(v102 + 4 * v84);
      if (v102) {
        uint64_t v105 = (int *)(v102 + v100);
      }
      else {
        uint64_t v105 = 0LL;
      }
      if (v103) {
        uint64_t v104 = 0LL;
      }
      unsigned int v106 = (int *)(v101 + v100);
      unsigned int v107 = (int *)(v101 + v56);
      uint64_t v108 = v101 == 0;
      if (v101) {
        unsigned int v109 = v106;
      }
      else {
        unsigned int v109 = 0LL;
      }
      if (v108) {
        unsigned int v107 = 0LL;
      }
      v110 = v90 >= (int)v55 ? v55 : v90;
      if (v110 >= 1) {
        break;
      }
LABEL_67:
      if (v93)
      {
        else {
          v114 = 1;
        }
        v115 = v74 - 1;
        v116 = (_DWORD)v60 == v77;
      }

      else
      {
        v114 = 0;
        if (v110 >= 1 && v109)
        {
          v114 = 0;
          else {
            v117 = v94;
          }
          v118 = v117 - 1;
          do
          {
            v120 = *v109++;
            v119 = v120;
            v121 = *v107++;
            v122 = v119 == v121;
            v123 = v119 < v121;
            if (v119 == v121) {
              v124 = v114;
            }
            else {
              v124 = 1;
            }
            if (v123) {
              v114 = -1;
            }
            else {
              v114 = v124;
            }
          }

          while (v122 && v118-- != 0);
        }

        if (v110 >= 1 && v105)
        {
          else {
            v126 = v94;
          }
          v127 = v126 - 1;
          do
          {
            v129 = *v105++;
            v128 = v129;
            v130 = *v104++;
            v131 = v128 == v130;
            v132 = v128 < v130;
            if (v128 == v130) {
              v133 = v114;
            }
            else {
              v133 = 1;
            }
            if (v132) {
              v114 = -1;
            }
            else {
              v114 = v133;
            }
          }

          while (v131 && v127-- != 0);
        }

        v115 = v74 - 1;
        v116 = (_DWORD)v60 == v77;
        if ((int)v60 < v77)
        {
LABEL_115:
          unsigned int v67 = *(unsigned int *)(*(void *)(v10 + 8) + 4LL * v59++);
          goto LABEL_116;
        }
      }

  int32x4_t v35 = *(int *)(a1 + 12);
  if ((int)v35 >= *(_DWORD *)(a1 + 8)
    || v10 + *(__int16 *)(*(void *)(a1 + 40) + 2 * v35) > *(_DWORD *)(a1 + 56)
    || (uint64_t v36 = *(__int16 *)(*(void *)(a1 + 32) + 2 * v35),
        uint64_t v37 = sub_1000C88E4((unint64_t)a2) + v36,
        v37 >= *(_DWORD *)(a1 + 16)))
  {
    uint8x16_t v46 = 0;
    int8x16_t v45 = v48;
  }

  else
  {
    int32x4_t v38 = (int)v35 + 1;
    *(_WORD *)(*(void *)(a1 + 32) + 2 * v38) = v37 + 1;
    sub_1000C896C((_BYTE *)(*(void *)(a1 + 24) + v36), a2, *(_DWORD *)(a1 + 16) - v36);
    int32x4_t v39 = *(void *)(a1 + 40);
    int32x4_t v40 = *(__int16 *)(v39 + 2 * v35);
    if (v10 >= 1)
    {
      int32x4_t v41 = 4 * v40;
      int32x4_t v42 = (int *)v21;
      int32x4_t v43 = v10;
      do
      {
        uint64_t v44 = *v42++;
        *(_DWORD *)(*(void *)(a1 + 64) + v41) = v44;
        v41 += 4LL;
        --v43;
      }

      while (v43);
      int32x4_t v39 = *(void *)(a1 + 40);
    }

    int8x16_t v45 = v48;
    *(_WORD *)(v39 + 2 * v38) = v40 + v10;
    uint8x16_t v46 = 1;
  }

  if (v10) {
    sub_1000CB038(v21, 4LL * v10);
  }
  if (!v46) {
    return 1LL;
  }
  int8x16_t v18 = 0LL;
  *(_BYTE *)(*(void *)(a1 + 48) + v35) = v45;
  ++*(_DWORD *)(a1 + 12);
  return v18;
}

    if (v14 == v41) {
      return sub_1000CB038(v24, 1096LL);
    }
    if (--v42 < 1) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  return sub_1000CB038(v24, 1096LL);
}

    if (v14 == v41) {
      return sub_1000CB038(v24, 1096LL);
    }
    if (--v42 < 1) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  return sub_1000CB038(v24, 1096LL);
}

                v73 = *v54++;
                int v72 = v73;
                if (*(_BYTE *)(v44 + v73) != 2) {
                  goto LABEL_29;
                }
              }

              else
              {
                int32x4_t v55 = v62;
                unsigned int v74 = *v54++;
                int v72 = v74;
                if (*(_BYTE *)(v44 + v74) != 2)
                {
LABEL_29:
                  uint64_t v56 = 0;
                  uint64_t v63 = v65 | ((_DWORD)v72 << 8);
                  uint64_t v62 = v55;
                  if (v63 >= v59) {
                    continue;
                  }
                  goto LABEL_30;
                }
              }

              unsigned int v75 = *(void *)(v10 + 104);
              unsigned int v76 = *(unsigned __int16 *)(v75 + 2 * v72);
              uint64_t v56 = *(unsigned __int16 *)(v75 + 2 * v72 + 2) + ~(_DWORD)v76;
              uint64_t v77 = (unsigned __int8 *)(*(void *)(v10 + 88) + v76);
              int v78 = *v77;
              int32x4_t v55 = v77 + 1;
              uint64_t v79 = v65 | (v78 << 8);
              uint64_t v62 = v55;
              if (v79 >= v59) {
                continue;
              }
              goto LABEL_30;
            }

  uint64_t v56 = sub_1000BE644(0xFFFFFFFF, 4, v54);
  uint64_t v57 = *(void *)(*(void *)(a1 + 144) + 112LL);
  if (v57)
  {
LABEL_22:
    uint16x8_t v58 = sub_1000BE644(-1431655765 * ((unint64_t)(v57 - *(void *)(a1 + 128)) >> 1), 4, v56);
    uint64_t v59 = *(void *)(*(void *)(a1 + 144) + 120LL);
    if (v59) {
      goto LABEL_23;
    }
LABEL_38:
    uint64_t v60 = sub_1000BE644(0xFFFFFFFF, 4, v58);
    int v61 = *(void *)(*(void *)(a1 + 144) + 128LL);
    if (v61) {
      goto LABEL_24;
    }
    goto LABEL_39;
  }

        CFRelease(v10);
        goto LABEL_37;
      }

      CFRelease(v18);
      unsigned int v11 = v7;
    }

    if (a3 == 8000.0) {
      signed int v12 = a3;
    }
    else {
      signed int v12 = 16000.0;
    }
    if (v12 == 16000.0 && sub_1000DD5DC(v7, v10, @".16", v40))
    {
      unsigned int v13 = 0x40CF400000000000LL;
    }

    else
    {
      if (!sub_1000DD5DC(v7, v10, @".8", v40))
      {
        uint64_t v16 = 0;
        goto LABEL_31;
      }

      unsigned int v13 = 0x40BF400000000000LL;
    }

    a1[2] = (uint64_t *)v13;
    uint64_t v16 = 1;
LABEL_31:
    BOOL v7 = v11;
    goto LABEL_32;
  }

LABEL_33:
  unsigned int v9 = 0LL;
  unsigned int v14 = 0LL;
  unsigned int v15 = 0LL;
  if (v5 >= 1)
  {
LABEL_37:
    int v17 = 0;
    while (1)
    {
      sub_100004868(a1, a2, v17, (unint64_t *)&v59);
      if (!qword_1000FDCC0) {
        break;
      }
      unsigned int v20 = *(_DWORD *)(a1 + 1104);
      if (!*(_DWORD *)(qword_1000FDCC0 + 3496)) {
        goto LABEL_48;
      }
      if (v20 != 12)
      {
        if (v20 == 24)
        {
          if (!*(_DWORD *)(a1 + 1108))
          {
            sub_100019228(a1, a2, v17, (_DWORD *)&v60 + 1, (float *)&v60, v18, v19);
            int v21 = *(_DWORD *)(a1 + 1044);
            int v22 = HIDWORD(v60);
            if (*(_DWORD *)(a1 + 1108)) {
              goto LABEL_65;
            }
            goto LABEL_68;
          }

    unsigned int v27 = 0x40000000;
  }

  int v33 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  uint64_t v6 = *v33;
  unint64_t v32 = v33[1] - v6;
  if ((v32 & 1) != 0) {
    goto LABEL_15;
  }
LABEL_5:
  if (v32 < 2) {
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 2012)) {
    uint64_t v6 = a2;
  }
  BOOL v7 = 144LL;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    BOOL v7 = 136LL;
  }
  signed int v8 = 112LL;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    signed int v8 = 64LL;
  }
  unsigned int v9 = (const __int16 *)(*(void *)(a1 + v8) + 2LL * v6);
  uint64_t v10 = *(void *)(a1 + v7) + 12LL * v6;
  unsigned int v11 = v32 >> 1;
  signed int v12 = *(uint32x2_t **)(a1 + 1552);
  unsigned int v13 = v12[1].u32[0];
  unsigned int v14 = (int8x8_t)*v12;
  unsigned int v15 = (int8x8_t)vshr_n_u32(*v12, 4uLL);
  uint64_t v16 = (int8x8_t)vshr_n_u32(*v12, 8uLL);
  int v17 = (int8x8_t)vshr_n_u32(*v12, 0xCuLL);
  int8x16_t v18 = v13 & 0xF000F;
  int8x16_t v19 = (int32x2_t)vand_s8(v14, (int8x8_t)0xF000F000F000FLL);
  unsigned int v20 = (int32x2_t)vand_s8(v15, (int8x8_t)0xF000F000F000FLL);
  int v21 = (int32x2_t)vand_s8(v16, (int8x8_t)0xF000F000F000FLL);
  int v22 = (int32x2_t)vand_s8(v17, (int8x8_t)0xF000F000F000FLL);
  unsigned int v23 = (v13 >> 4) & 0xF000F;
  uint64_t v24 = (v13 >> 8) & 0xF000F;
  unint64_t v25 = (v13 >> 12) & 0xF000F;
  uint64_t v26 = v11 - 1;
  if (v26 >= 7)
  {
    unsigned int v80 = v26 + 1;
    unsigned int v81 = (v26 + 1) & 0x1FFFFFFF8LL;
    v11 -= v81;
    uint64_t v28 = v10 + 24 * v81;
    unsigned int v29 = &v9[2 * v81];
    v133 = vdupq_lane_s32(v20, 0);
    v135 = vdupq_lane_s32(v19, 0);
    v131 = vdupq_lane_s32(v22, 0);
    v132 = vdupq_lane_s32(v21, 0);
    v123 = v20;
    v124 = v19;
    v129 = vdupq_lane_s32(v20, 1);
    v130 = vdupq_lane_s32(v19, 1);
    v121 = v22;
    v122 = v21;
    v127 = vdupq_lane_s32(v22, 1);
    v128 = vdupq_lane_s32(v21, 1);
    v82.i64[0] = 0x4000000040000000LL;
    v82.i64[1] = 0x4000000040000000LL;
    v125 = vdupq_n_s32(v23);
    v126 = vdupq_n_s32(v18);
    v83.i64[0] = 0xF000F000F000FLL;
    v83.i64[1] = 0xF000F000F000FLL;
    unsigned int v84 = v81;
    v85.i64[0] = 0x4000000040000000LL;
    v85.i64[1] = 0x4000000040000000LL;
    unsigned int v86 = vdupq_n_s32(v24);
    v87 = vdupq_n_s32(v25);
    do
    {
      v137 = v82;
      v139 = v85;
      v140 = vld2q_s16(v9);
      v9 += 16;
      int v89 = *(int32x4_t *)(v10 + 32);
      v88 = *(int32x4_t *)(v10 + 48);
      int v91 = *(int32x4_t *)(v10 + 128);
      uint64_t v90 = *(int32x4_t *)(v10 + 144);
      unsigned __int16 v92 = *(int32x4_t *)(v10 + 16);
      int v93 = *(int32x4_t *)(v10 + 160);
      int v94 = *(int32x4_t *)(v10 + 176);
      uint64_t v95 = (int8x16_t)vtrn1q_s32(vuzp1q_s32(v90, v90), v93);
      LODWORD(v96) = *(void *)(v10 + 152);
      HIDWORD(v96) = v94.i32[0];
      uint64_t v97 = (int32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v94, 8uLL);
      v98.i64[0] = vzip2q_s32(*(int32x4_t *)v10, vuzp1q_s32(*(int32x4_t *)v10, v89)).u64[0];
      int v99 = vtrn1q_s32(vuzp1q_s32(v93, v93), v94);
      v94.i32[2] = HIDWORD(*(void *)(v10 + 160));
      v100.i32[0] = *(_OWORD *)v10;
      v100.i32[1] = *(void *)(v10 + 24);
      BOOL v102 = *(int32x4_t *)(v10 + 64);
      v101 = *(int32x4_t *)(v10 + 80);
      LODWORD(v103) = *(void *)(v10 + 56);
      v93.i32[2] = HIDWORD(*(void *)(v10 + 144));
      HIDWORD(v103) = v101.i32[0];
      uint64_t v104 = *(int32x4_t *)(v10 + 96);
      v98.i64[1] = v103;
      v105.i64[0] = vzip2q_s32(v104, vuzp1q_s32(v104, v91)).u64[0];
      v106.i32[1] = HIDWORD(*(void *)(v10 + 128));
      v106.i32[0] = v104.i32[3];
      v105.i64[1] = v96;
      v106.i64[1] = vzip2q_s32(v90, v97).i64[1];
      v100.i64[1] = vtrn1q_s32(vuzp1q_s32(v88, v88), v102).i64[1];
      unsigned int v107 = (int32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v101, 8uLL);
      v108.i32[1] = HIDWORD(*(void *)(v10 + 32));
      v108.i32[0] = HIDWORD(*(_OWORD *)v10);
      unsigned int v109 = vtrn1q_s32(vuzp1q_s32(v102, v102), v101);
      v101.i32[2] = HIDWORD(*(void *)(v10 + 64));
      v102.i32[2] = HIDWORD(*(void *)(v10 + 48));
      v90.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v92, *(int32x4_t *)v10), *(int8x16_t *)v10, 4uLL).u64[0];
      v110 = *(int32x4_t *)(v10 + 112);
      v108.i64[1] = vzip2q_s32(v88, v107).i64[1];
      v107.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v110, v104), (int8x16_t)v104, 4uLL).u64[0];
      v104.i32[1] = *(void *)(v10 + 120);
      v104.i64[1] = v95.i64[1];
      v88.i32[0] = v92.i32[0];
      v88.i32[1] = *(void *)(v10 + 40);
      v88.i64[1] = v109.i64[1];
      v95.i32[0] = v110.i32[0];
      v95.i32[1] = *(void *)(v10 + 136);
      v95.i64[1] = v99.i64[1];
      v107.i64[1] = v93.i64[1];
      v91.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v91, v110), (int8x16_t)v110, 4uLL).u64[0];
      v91.i64[1] = v94.i64[1];
      v90.i64[1] = v102.i64[1];
      v89.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v89, v92), (int8x16_t)v92, 4uLL).u64[0];
      v89.i64[1] = v101.i64[1];
      uint64_t v85 = vminq_s32( vsubq_s32( vmovl_high_s16(v140.val[1]),  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v106, v83), v135),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v106, 4uLL),  v83),  v133),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v106, 8uLL),  v83),  v132),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v106, 0xCuLL),  v83),  v131),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v95, v83), v130),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 4uLL), v83),  v129),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 8uLL), v83),  v128),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0xCuLL), v83),  v127),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v91, v83), v126),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 4uLL), v83),  v125),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 8uLL), v83),  v86),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 0xCuLL), v83),  v87),  0xFuLL)),  vminq_s32( vsubq_s32( vmovl_high_s16(v140.val[0]),  (int32x4_t)vsraq_n_u32( vsraq_n_u32(
                                 vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v104, v83), v135),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v104, 4uLL),  v83),  v133),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v104, 8uLL),  v83),  v132),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v104, 0xCuLL),  v83),  v131),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v107, v83), v130),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 4uLL),  v83),  v129),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 8uLL),  v83),  v128),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0xCuLL),  v83),  v127),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v105, v83), v126),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v105, 4uLL),  v83),  v125),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105, 8uLL), v83),  v86),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v105, 0xCuLL), v83),  v87),  0xFuLL)),  v139));
      v10 += 192LL;
      int16x8x4_t v82 = vminq_s32( vsubq_s32( vmovl_s16(*(int16x4_t *)v140.val[1].i8),  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v108, v83), v135),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v108, 4uLL),  v83),  v133),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v108, 8uLL),  v83),  v132),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v108, 0xCuLL),  v83),  v131),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v88, v83), v130),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 4uLL), v83),  v129),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 8uLL), v83),  v128),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v88, 0xCuLL), v83),  v127),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v89, v83), v126),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 4uLL), v83),  v125),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 8uLL), v83),  v86),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v89, 0xCuLL), v83),  v87),  0xFuLL)),  vminq_s32( vsubq_s32( vmovl_s16(*(int16x4_t *)v140.val[0].i8),  (int32x4_t)vsraq_n_u32( vsraq_n_u32(
                                 vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v100, v83), v135),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v100, 4uLL),  v83),  v133),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v100, 8uLL),  v83),  v132),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v100, 0xCuLL),  v83),  v131),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v90, v83), v130),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v90, 4uLL),  v83),  v129),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v90, 8uLL), v83),  v128),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v90, 0xCuLL), v83),  v127),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8(v98, v83), v126),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 4uLL), v83),  v125),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 8uLL), v83),  v86),  (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v98, 0xCuLL), v83),  v87),  0xFuLL)),  v137));
      v84 -= 8LL;
    }

    while (v84);
    unsigned int v27 = vminvq_s32(vminq_s32(v82, v85));
    unsigned int v20 = v123;
    int8x16_t v19 = v124;
    int v22 = v121;
    int v21 = v122;
    if (v80 == v81) {
  }
    }

  else
  {
    unsigned int v27 = 0x40000000;
    uint64_t v28 = v10;
    unsigned int v29 = v9;
  }

  int v111 = v11 + 1;
  v112 = (int8x8_t *)(v28 + 12);
  do
  {
    v113 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32( (int32x2_t)vand_s8(*(int8x8_t *)((char *)v112 - 12), (int8x8_t)0xF000F000F000FLL),  v19),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 4uLL),  (int8x8_t)0xF000F000F000FLL),  v20),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 8uLL),  (int8x8_t)0xF000F000F000FLL),  v21),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)((char *)&v112[-2] + 4), 0xCuLL),  (int8x8_t)0xF000F000F000FLL),  v22);
    v114 = (v112[-1].i32[1] & 0xF000F) * v18
         + (((unsigned __int32)v112[-1].i32[1] >> 4) & 0xF000F) * v23
         + (((unsigned __int32)v112[-1].i32[1] >> 8) & 0xF000F) * v24
         + (((unsigned __int32)v112[-1].i32[1] >> 12) & 0xF000F) * v25;
    v115 = v112[1].u32[0];
    v116 = *v112;
    v112 += 3;
    v117 = *v29
         - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v113, 0xFuLL), 1), v113, 0xFuLL).u32[0]
          + (v114 >> 15));
    v118 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(v116, (int8x8_t)0xF000F000F000FLL), v19),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v116, 4uLL),  (int8x8_t)0xF000F000F000FLL),  v20),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v116, 8uLL), (int8x8_t)0xF000F000F000FLL),  v21),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v116, 0xCuLL), (int8x8_t)0xF000F000F000FLL),  v22);
    v119 = v29[1]
         - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v118, 0xFuLL), 1), v118, 0xFuLL).u32[0]
          + (((v115 & 0xF000F) * v18
            + ((v115 >> 4) & 0xF000F) * v23
            + ((v115 >> 8) & 0xF000F) * v24
            + ((v115 >> 12) & 0xF000F) * v25) >> 15));
    if (v117 >= v27) {
      v117 = v27;
    }
    if (v119 >= v117) {
      unsigned int v27 = v117;
    }
    else {
      unsigned int v27 = v119;
    }
    --v111;
    v29 += 2;
  }

  while (v111 > 1);
}

  if (v3 < v4)
  {
    int8x16_t v18 = (v2 + v4 - v3);
    while (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208)
                                            + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
                                                                                                  + 8LL * (v3 >> 8))
                                                                                      + 2LL * v3) >> 5) & 0x7F8))
                                + 2LL
                                * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                        + 8LL * (v3 >> 8))
                                                            + 2LL * v3)) == a2)
    {
      uint64_t v2 = (v2 + 1);
      if (v4 == ++v3) {
        return v18;
      }
    }
  }

  return v2;
}

  sub_1000CB038(v82, v85);
  sub_1000CB038(v73, v86);
  sub_1000CB038(v93, v87);
  sub_1000CB038(v46, v88);
  sub_1000CB038(v89, v90);
  sub_10002613C(v57);
  uint64_t result = (void *)sub_1000C0EF8(*(void *)(v19 + 144));
  *(void *)(v19 + 144) = 0LL;
  return result;
}

  if (v13)
  {
    if (v6 == *(void *)(a1 + 6416))
    {
      unsigned int v20 = (*(_DWORD *)(a1 + 224) - *(_DWORD *)(a1 + 244) + *(_DWORD *)(a1 + 236)) % *(_DWORD *)(a1 + 236);
      if (v20 > *(_DWORD *)(*(void *)(a1 + 712) + 24LL * v26 + 8)) {
        sub_100048378(a1, v6, v20);
      }
    }
  }

  else
  {
    sub_1000474F8((unsigned int *)a1, v6, 1);
  }

  if (*(_DWORD *)(a1 + 5672))
  {
    unint64_t v25 = 0;
    int v21 = sub_100041544(a1, v6, &v25);
    if (v25 == 4)
    {
      uint64_t v2 = 2LL;
    }

    else if (v25 == 3)
    {
      uint64_t v2 = 1LL;
    }

    else
    {
      uint64_t v2 = v21;
      if (v25 == 1) {
        uint64_t v2 = 12LL;
      }
    }
  }

  if (*v14) {
    goto LABEL_46;
  }
LABEL_52:
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 2260)
    && sub_100025C94(*(unsigned int **)(a1 + 440)) == 1
    && *(_DWORD *)(a1 + 756) != 6
    && !*(_DWORD *)(a1 + 6456))
  {
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      unsigned int v23 = (uint64_t *)(a1 + 808);
    }
    else {
      unsigned int v23 = (uint64_t *)(a1 + 800);
    }
    uint64_t v24 = *v23;
    *(_DWORD *)(v24 + 4) = 0;
    *(_DWORD *)(v24 + 140) = -1;
    sub_10003991C(*v14);
  }

  *(_DWORD *)(a1 + 6448) = 0;
  if (!(_DWORD)v2)
  {
    if (*(_DWORD *)(a1 + 756) != 6)
    {
      unint64_t v25 = 0;
      return sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), &v25, v8, v9, v10, v11, v12);
    }

    return 0LL;
  }

  return v2;
}

        uint64_t v26 = 0LL;
LABEL_34:
        v18[1] = sub_10003967C( *(void *)(a1 + 5512),  v20,  (uint64_t)v23,  *v18,  *((_DWORD **)v18 + 1),  *((void *)v18 + 2),  v18[8],  *((_DWORD **)v18 + 5),  *((void *)v18 + 10),  *((void *)v18 + 6),  *((void *)v18 + 7),  *((void *)v18 + 8),  *((void *)v18 + 9),  *((void *)v18 + 3),  v18 + 35);
        if (v26) {
          sub_1000CB038(v26, 8LL * ((int)v25 + 1));
        }
        v18[34] = sub_100039800(*(void *)(a1 + 5512));
        LODWORD(v28) = v18[1];
        if ((int)v28 < (int)*v18)
        {
          uint64_t v28 = (int)v28;
          do
            *(_DWORD *)(*((void *)v18 + 1) + 4 * v28++) = 0x40000000;
          while (v28 < (int)*v18);
          LODWORD(v28) = v18[1];
        }

        unsigned int v29 = v28 - 1;
        if ((int)v28 < 1)
        {
          LODWORD(v34) = 0;
        }

        else
        {
          uint64_t v30 = *((void *)v18 + 5);
          if ((_DWORD)v28 == 1)
          {
            uint64_t v31 = (int *)*((void *)v18 + 5);
          }

          else
          {
            uint64_t v31 = (int *)*((void *)v18 + 5);
            do
            {
              unint64_t v32 = v31;
              while (1)
              {
                int v33 = *v32++;
                if (v33 == -1) {
                  break;
                }
                uint64_t v31 = v32;
                if ((unint64_t)v32 >= v30 + 4LL * (int)v18[8])
                {
                  uint64_t v31 = 0LL;
                  goto LABEL_51;
                }
              }

              ++v31;
              --v29;
            }

            while (v29);
          }

          unsigned int v13 = v209;
          uint64_t v16 = v214;
          unsigned int v15 = v216;
          goto LABEL_34;
        }

        int8x16_t v45 = *(void *)(a1 + 376);
        if (!qword_1000FDCC0) {
          goto LABEL_41;
        }
        if (*(_DWORD *)(qword_1000FDCC0 + 5360))
        {
          uint8x16_t v46 = *(unsigned __int8 *)(a1 + 664);
          goto LABEL_42;
        }

        if (*(_DWORD *)(qword_1000FDCC0 + 1776))
        {
          uint8x16_t v46 = 0;
        }

        else
        {
LABEL_41:
          int8x16_t v47 = sub_1000BB868(*(void *)(a1 + 376), *(unsigned __int16 *)(v24 + 4 * v22 + 2), 0LL);
          uint8x16_t v46 = sub_1000BBBB0(v45, 0LL, 0, v47);
        }

    sub_1000C0EF8(v16);
    uint64_t v16 = 0LL;
    goto LABEL_34;
  }

  return v16;
}

  else {
    sub_100024DB8(*(void *)(a1 + 376), (unint64_t)a2, (int *)&v29 + 1);
  }
  return HIDWORD(v29);
}

      j__memmove(a6 + 274, a6, 1096 * v42);
      goto LABEL_34;
    }

  else {
    sub_100024DB8(*(void *)(a1 + 376), (unint64_t)a2, (int *)&v29 + 1);
  }
  return HIDWORD(v29);
}

      j__memmove(a6 + 274, a6, 1096 * v42);
      goto LABEL_34;
    }

              if (a4 >= 2)
              {
                if (!sub_10007A674(*(void *)(a1 + 264), &v33, &v32))
                {
                  uint64_t v31 = 0;
                  sub_10007A674(*(void *)(a1 + 248), &v34, &v32);
                }
              }

              else
              {
                sub_10007A674(*(void *)(a1 + 248), &v34, &v32);
              }

              unsigned int v13 = v36 + v32;
              goto LABEL_39;
            }

  if (v17 < a3)
  {
    do
    {
      if (((v7 >> v17) & 1) != 0)
      {
        int32x4_t v43 = *(unsigned __int8 **)a2;
        uint64_t result = sub_10008B2E4(a1, v17, *(unsigned __int8 **)a2);
        *(void *)a2 = &v43[(int)result];
      }

      ++v17;
    }

    while (a3 != v17);
  }

  return result;
}

            v13 += 2 * v46;
            ++v45;
          }

          while (v45 != v15);
          goto LABEL_151;
        }

        uint64_t v26 = &v13[2 * (int)sub_1000CDC84(v13, &v139)];
        unsigned int v27 = v25;
        if (v139 != 12293)
        {
          uint64_t v28 = *(void *)(a1 + 296);
          if (v28)
          {
            unsigned int v29 = *(int *)(a1 + 288);
            if ((_DWORD)v29)
            {
              uint64_t v30 = 0;
              while (1)
              {
                while (1)
                {
                  unint64_t v32 = v29 - 1;
                  if (v29 - 1 < 0) {
                    unint64_t v32 = v29;
                  }
                  int v33 = v32 >> 1;
                  int32x4_t v34 = v30 + v33;
                  int32x4_t v35 = *(unsigned __int16 *)(v28 + 2LL * (v30 + (int)v33));
                  if (v35 <= v139) {
                    break;
                  }
                  unsigned int v29 = (int)v33;
                  if (!(_DWORD)v33) {
                    goto LABEL_50;
                  }
                }

                if (v35 == v139) {
                  break;
                }
                v29 -= (int)v33 + 1;
                uint64_t v30 = v34 + 1;
                if (!v29) {
                  goto LABEL_50;
                }
              }

              if (v34 != -1)
              {
                int v53 = (_WORD *)(*(void *)(a1 + 312) + 2LL * v34);
LABEL_61:
                *(_WORD *)unint64_t v25 = *v53;
                unsigned int v27 = v25 + 2;
                goto LABEL_62;
              }
            }
          }

          v107 += 2;
          if (v107 >= v106) {
            goto LABEL_26;
          }
        }

        v114 = *(void *)(v102 + 552);
        v257 = v107;
        v115 = v263;
        v116 = sub_10007895C(v114);
        unsigned __int16 v92 = v255;
        if (v101 >= 1)
        {
          if (v101 < 8)
          {
            v117 = 0LL;
            goto LABEL_42;
          }

          v117 = 0LL;
          v150 = v63 + 2LL * v101;
          v151 = v63 >= (unint64_t)v249 || (unint64_t)v263 >= v150;
          v152 = !v151;
          v153 = v63 >= (unint64_t)v248 || (unint64_t)v93 >= v150;
          v154 = !v153;
          v155 = v71 + v101;
          v156 = v71 >= (unint64_t)v249 || (unint64_t)v263 >= v155;
          v157 = !v156;
          v158 = v71 >= (unint64_t)v248 || (unint64_t)v93 >= v155;
          v159 = !v158;
          v160 = v71 >= v150 || v63 >= v155;
          if (!v160 || v152 || v154 || v157 || v159) {
            goto LABEL_42;
          }
          if (v101 < 0x20)
          {
            v117 = 0LL;
            goto LABEL_122;
          }

          v161 = vld1q_dup_s16(v263);
          v117 = v101 & 0xFFFFFFE0;
          v162 = vld1q_dup_s8(v93);
          v163 = v117;
          v164 = (int8x16_t *)(v71 + 16);
          v165 = (int16x8_t *)(v63 + 32);
          do
          {
            v165[-2] = v161;
            v165[-1] = v161;
            *v165 = v161;
            v165[1] = v161;
            v165 += 4;
            v164[-1] = v162;
            *v164 = v162;
            v164 += 2;
            v163 -= 32LL;
          }

          while (v163);
          if (v117 != v101)
          {
            if ((v101 & 0x18) == 0) {
              goto LABEL_42;
            }
LABEL_122:
            v166 = v117;
            v167 = vld1q_dup_s16(v263);
            v117 = v101 & 0xFFFFFFF8;
            v168 = vld1_dup_s8(v93);
            v169 = (int16x8_t *)(v63 + 2 * v166);
            v170 = (int8x8_t *)(v71 + v166);
            v171 = v166 - v117;
            do
            {
              *v169++ = v167;
              *v170++ = v168;
              v171 += 8LL;
            }

            while (v171);
            if (v117 != v101)
            {
LABEL_42:
              v118 = (char *)(v71 + v117);
              v119 = (__int16 *)(v63 + 2 * v117);
              v120 = v101 - v117;
              do
              {
                *v119++ = *v263;
                *v118++ = *v93;
                --v120;
              }

              while (v120);
            }
          }
        }

        if (v116 > 1)
        {
          v121 = v116;
          for (uint64_t i = 1LL; i < v121; ++i)
          {
            if (v101 < 1)
            {
              v124 = 0;
              goto LABEL_74;
            }

            v123 = 0LL;
            v124 = 0;
            while (*(unsigned __int16 *)(v63 + 2 * v123) != *(unsigned __int16 *)v115)
            {
LABEL_49:
              if (++v123 >= v101) {
                goto LABEL_74;
              }
            }

            v125 = v101;
            else {
              v126 = v101;
            }
            v127 = v101 + 1;
            while (v125 > v123)
            {
              v128 = v39[v125 - 1];
              v129 = *(unsigned __int8 *)(v71 - 1 + v125--);
              --v127;
              if (v39[v123] + v93[i] >= v128 + v129)
              {
                if (!v123) {
                  v124 = v127;
                }
                if (v127 == v254) {
                  goto LABEL_74;
                }
LABEL_64:
                if (v101 <= v255) {
                  ++v101;
                }
                v130 = v101 - 1;
                v131 = *(void *)(v47 + 8LL * (v101 - 1));
                v132 = v127;
                if (v101 - 1 > v127)
                {
                  v133 = v130;
                  v134 = 8LL * v130;
                  v135 = (void *)(v47 + v134);
                  v136 = (_DWORD *)(v55 + 4LL * v130);
                  v137 = (_WORD *)(v63 + 2LL * v130);
                  int v89 = &v39[(unint64_t)v134 / 8];
                  v138 = (void *)(v47 + v134);
                  v139 = v89;
                  v140 = v136;
                  v141 = v137;
                  do
                  {
                    uint64_t v90 = v71 + v133;
                    int v91 = v133 - 1;
                    v142 = *--v138;
                    *v135 = v142;
                    v143 = *--v139;
                    *int v89 = v143;
                    LODWORD(v143) = *--v140;
                    *v136 = v143;
                    LOWORD(v143) = *--v141;
                    *v137 = v143;
                    v137 = v141;
                    v136 = v140;
                    *(_BYTE *)(v71 + v133) = *(_BYTE *)(v71 + v133 - 1);
                    int v89 = v139;
                    v135 = v138;
                    v133 = v91;
                  }

                  while (v91 > v132);
                }

                *(void *)(v47 + 8 * v132) = v131;
                if (*(int *)(v55 + 4 * v123) >= 1)
                {
                  v144 = 0LL;
                  do
                  {
                    *(_WORD *)(*(void *)(v47 + 8 * v132) + 2 * v144) = *(_WORD *)(*(void *)(v47 + 8 * v123)
                                                                                  + 2 * v144);
                    ++v144;
                  }

                  while (v144 < *(int *)(v55 + 4 * v123));
                }

                v39[v132] = v39[v123];
                *(_DWORD *)(v55 + 4 * v132) = *(_DWORD *)(v55 + 4 * v123);
                v115 = v263;
                *(_WORD *)(v63 + 2 * v132) = v263[i];
                *(_BYTE *)(v71 + v132) = v93[i];
                goto LABEL_49;
              }
            }

            v127 = v126;
            if (!v123) {
              v124 = v126;
            }
            if (v126 != v254) {
              goto LABEL_64;
            }
LABEL_74:
            if (v124 > v255) {
              break;
            }
          }
        }

        if (v101 >= 1)
        {
          for (uint64_t j = 0LL; j != v101; ++j)
          {
            v265 = 0LL;
            v264 = 0;
            sub_10007A9E8(*((void *)v262 + 6), *(unsigned __int16 *)(v63 + 2 * j), &v265, &v264);
            if (v264 >= 1)
            {
              for (k = 0; k < v264; ++k)
              {
                v147 = v265;
                v265 = (int16x8_t *)((char *)v265 + 2);
                LOWORD(v147) = v147->i16[0];
                v148 = *(void *)(v47 + 8 * j);
                v149 = *(int *)(v55 + 4 * j);
                *(_DWORD *)(v55 + 4 * j) = v149 + 1;
                *(_WORD *)(v148 + 2 * v149) = (_WORD)v147;
              }
            }

            v39[j] += *(unsigned __int8 *)(v71 + j);
          }
        }

        BOOL v102 = (uint64_t)v262;
        unsigned int v106 = v256;
        unsigned int v107 = v257;
        goto LABEL_33;
      }

      goto LABEL_25;
    }

    if (v266[1] < 1) {
      goto LABEL_25;
    }
    if (v101 <= 0)
    {
      v181 = &v247[2 * v245];
      do
      {
        v183 = *(unsigned __int16 *)v181;
        v181 += 2;
        v182 = v183;
        v265 = 0LL;
        v264 = 0;
        if (v183 != 0xFFFF && (v252 != 6 || v182 != *((unsigned __int16 *)v262 + 92)))
        {
          v261 = v104;
          sub_10007A9E8(*((void *)v262 + 24), v182, &v265, &v264);
          uint64_t v104 = v261;
        }

        --v104;
      }

      while (v104);
LABEL_25:
      BOOL v102 = (uint64_t)v262;
      goto LABEL_26;
    }

    v172 = 0LL;
    BOOL v102 = (uint64_t)v262;
    v260 = v266[1];
    do
    {
      v173 = v253[v172];
      v265 = 0LL;
      v264 = 0;
      if (v173 != 0xFFFF && (v252 != 6 || v173 != *((unsigned __int16 *)v262 + 92)))
      {
        v258 = v172;
        sub_10007A9E8(*((void *)v262 + 24), v173, &v265, &v264);
        v172 = v258;
        uint64_t v104 = v260;
        v174 = v264;
        if (v264 >= 1)
        {
          for (m = 0LL; m != v101; ++m)
          {
            if (v174 >= 1)
            {
              v176 = 0LL;
              v177 = v265;
              do
              {
                v178 = v177->i16[v176];
                v179 = *(void *)(v47 + 8 * m);
                v180 = *(int *)(v55 + 4 * m);
                *(_DWORD *)(v55 + 4 * m) = v180 + 1;
                *(_WORD *)(v179 + 2 * v180) = v178;
                v174 = v264;
                ++v176;
              }

              while ((int)v176 < v264);
            }
          }
        }
      }

      ++v172;
    }

    while (v172 != v104);
LABEL_26:
    v100 = &v251[v266[0]];
  }

  while (*v100);
  v184 = v255;
  if (v101 <= 0)
  {
    uint64_t v30 = 0LL;
    v185 = v240;
    *v244 = v240;
    v186 = v240;
    goto LABEL_199;
  }

  uint16x8_t v50 = sub_1000BE644(0xFFFFFFFF, 4, v48);
  uint16x8_t v51 = *(void *)(*(void *)(a1 + 144) + 88LL);
  if (v51)
  {
LABEL_19:
    uint16x8_t v52 = sub_1000BE644(-1431655765 * ((unint64_t)(v51 - *(void *)(a1 + 128)) >> 1), 4, v50);
    int v53 = *(void *)(*(void *)(a1 + 144) + 96LL);
    if (v53) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

      *v147 = 4;
    }
  }

  v455 = v57;
  if (**(int **)v444 < 1)
  {
    v158 = 2;
  }

  else
  {
    v157 = (int *)(*(void *)v444 + 64LL);
    v158 = 2;
    do
    {
      v159 = *v157;
      v157 += 16;
      v158 += 2;
    }

    while (v159 > 0);
  }

  v160 = v158 * v111;
  v447 = v160 - 1;
  v456 = v58;
  v446 = v60;
  v436 = v108;
  v445 = v111;
  v428 = v71;
  v419 = v111 - 1;
  if (v160 >= 1)
  {
    v430 = 40LL * v160;
    v161 = sub_1000CAFC0(v430, v135, v136, v137, v138, (uint64_t)v458, v139, v140);
    if (v111 >= 1)
    {
      v162 = 0LL;
      v163 = 0LL;
      v164 = 0LL;
      v422 = v111;
      do
      {
        v165 = -1;
        v166 = 3LL;
        do
        {
          ++v165;
          v167 = v161[v166];
          v166 += 5LL;
        }

        while (v167);
        if (v447 <= v165) {
          break;
        }
        v168 = *v444;
        if (**(int **)v444 > 0)
        {
          v169 = vdup_n_s32(v162);
          do
          {
            if (v163) {
              v161[5 * v165 + 4] = v163;
            }
            v163 = (int32x2_t *)&v161[5 * v165];
            *v163 = v168;
            v163[1].i32[1] = 0;
            v163[2] = v169;
            v163[3].i32[0] = 1;
            v163[1].i32[0] = *(_DWORD *)(*(void *)&v168 + 56LL);
            v170 = 40LL * v165 + 64;
            do
            {
              ++v165;
              v171 = *(_DWORD *)((char *)v161 + v170);
              v170 += 40LL;
            }

            while (v171);
            if (v447 <= v165) {
              goto LABEL_156;
            }
            v172 = *(_DWORD *)(*(void *)&v168 + 64LL);
            *(void *)&v168 += 64LL;
          }

          while (v172 > 0);
        }

        v432 = v163;
        v173 = 0LL;
        v443 = (int *)v110 + 7 * v162;
        v439 = v162 + 1;
        v174 = v163;
        do
        {
          v176 = v174[1].i32[1];
          if ((int)v176 < *(_DWORD *)v174->i32[0] - 1)
          {
            v177 = *(void *)(*(void *)v174 + 8LL);
            v178 = *(int *)(v177 + 8 * v176);
            v179 = *(_DWORD *)(v177 + 8LL * ((int)v176 + 1));
            if ((int)v178 < v179)
            {
              v180 = v173;
              v181 = v164;
              do
              {
                v182 = *(void *)(*(void *)v174 + 24LL);
                v183 = *(_DWORD *)(v182 + 12 * v178);
                if (v183 && v162 == v174[2].i32[1])
                {
                  v184 = v110;
                  v185 = v162;
                  if (sub_1000AEBB8((uint64_t)v444, v183, (uint64_t)v458, v443))
                  {
                    v164 = (int32x2_t *)&v161[5 * v165];
                    v173 = v164;
                    if (v180)
                    {
                      v181[4] = (int32x2_t)v164;
                      v173 = v180;
                    }

                    *v164 = *v174;
                    v186 = 5LL * v165;
                    v187 = &v161[v186];
                    v187[3] = *(_DWORD *)(v182 + 12 * v178 + 8);
                    v187[4] = v174[2].i32[0];
                    v187[5] = v439;
                    v187[2] = v174[1].i32[0];
                    v187[6] = 1;
                    v188 = v186 * 8 + 64;
                    v162 = v185;
                    do
                    {
                      v189 = *(_DWORD *)((char *)v161 + v188);
                      ++v165;
                      v188 += 40LL;
                    }

                    while (v189);
                    uint16x8_t v58 = v456;
                    v110 = v184;
                    if (v447 <= v165)
                    {
                      sub_1000CB038(v161, v430);
                      uint64_t v60 = v446;
                      uint64_t v108 = v436;
                      int v111 = v445;
                      HIDWORD(v461) = 0;
                      if (v445 < 1) {
                        goto LABEL_394;
                      }
LABEL_158:
                      v222 = 0LL;
                      int v61 = 0LL;
                      v223 = 0;
                      v224 = (char *)v459 + 4;
                      v225 = (int)v442 - 1LL;
                      v413 = v110 + 7;
                      while (2)
                      {
                        v460 = 0LL;
                        LODWORD(v461) = 0;
                        v226 = (int *)v110 + 7 * v223;
                        v227 = *v226;
                        if (*v226 != 4)
                        {
                          v228 = v223;
                          if ((int)v222 >= (int)v442)
                          {
                            v233 = 1;
                            v231 = v455;
                          }

                          else
                          {
                            v229 = *((_DWORD *)v110 + 7 * v223 + 1);
                            v230 = (int)v222;
                            if (*((_DWORD *)v459 + (int)v222) >= v229)
                            {
                              v233 = 0;
                              v231 = v455;
                            }

                            else
                            {
                              v231 = v455;
                              while (v225 != v230)
                              {
                                v232 = *(_DWORD *)&v224[4 * v230++];
                                if (v232 >= v229)
                                {
                                  v233 = v230 >= (int)v442;
                                  goto LABEL_174;
                                }
                              }

                              v233 = 1;
                              v230 = v442;
                            }

  unsigned int v29 = (os_log_s *)VSGetLogDefault(MutableCopy);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v181) = 67109376;
    HIDWORD(v181) = v177;
    v182 = 1024;
    LODWORD(v183) = v176;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%d choices, first choice confidence %d\n",  (uint8_t *)&v181,  0xEu);
  }

  uint64_t v30 = v177;
  if (a2 != 1 || v177 < 2) {
    goto LABEL_51;
  }
  if (*v19) {
    uint64_t v31 = **v19;
  }
  else {
    uint64_t v31 = 0LL;
  }
  unint64_t v32 = sub_10004D938(v31, v177);
  if ((_DWORD)v32)
  {
    int v33 = v32;
    int32x4_t v34 = (os_log_s *)VSGetLogDefault(v32);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v181) = 67109890;
      v182 = 2080;
      v183 = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
      v184 = 1024;
      HIDWORD(v181) = v33;
      v185 = 2259;
      v186 = 2080;
      v187 = "couldn't rerecognize choice list";
      _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "Error %d at %s:%d (%s)\n",  (uint8_t *)&v181,  0x22u);
    }

    unsigned int v15 = 1;
LABEL_248:
    v127 = 0LL;
    v128 = 0LL;
    alloc = 0LL;
    v126 = v15 != 0;
    if (!v12) {
      goto LABEL_246;
    }
    goto LABEL_249;
  }

  if (*v19) {
    int32x4_t v35 = **v19;
  }
  else {
    int32x4_t v35 = 0LL;
  }
  uint64_t v36 = sub_10004CFE0(v35, &v177, &v176);
  unsigned int v15 = v36;
  if ((_DWORD)v36)
  {
    uint64_t v37 = (os_log_s *)VSGetLogDefault(v36);
    uint64_t v36 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v36)
    {
      LODWORD(v181) = 67109890;
      v182 = 2080;
      v183 = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
      v184 = 1024;
      HIDWORD(v181) = v15;
      v185 = 2263;
      v186 = 2080;
      v187 = "couldn't get choices";
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Error %d at %s:%d (%s)\n",  (uint8_t *)&v181,  0x22u);
    }
  }

  int32x4_t v38 = (os_log_s *)VSGetLogDefault(v36);
  int32x4_t v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
  uint64_t v30 = v177;
  if (v39)
  {
    LODWORD(v181) = 67109376;
    HIDWORD(v181) = v177;
    v182 = 1024;
    LODWORD(v183) = v176;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%d rerec choices, first choice confidence %d\n",  (uint8_t *)&v181,  0xEu);
    uint64_t v30 = v177;
    if (v15) {
      goto LABEL_248;
    }
  }

  else
  {
LABEL_51:
    if (v15) {
      goto LABEL_248;
    }
  }

  if (v30 < 1) {
    goto LABEL_248;
  }
  int32x4_t v40 = 0LL;
  int32x4_t v41 = 0;
  int32x4_t v42 = 0;
  cf2 = 0LL;
  theString2 = 0LL;
  v147 = 0;
  v155 = a5;
  do
  {
    if (v40)
    {
      int32x4_t v43 = key[2] <= v42 ? v42 - key[2] < 3 : key[2] - v42 < 3;
      if (!v43 && v12 == 0LL)
      {
        v126 = 0;
        v128 = cf2;
        v127 = theString2;
        goto LABEL_267;
      }
    }

    v167 = v42;
    if (*v19) {
      int8x16_t v45 = **v19;
    }
    else {
      int8x16_t v45 = 0LL;
    }
    uint8x16_t v46 = sub_10004C55C(v45, v41, 1024, v188, (int *)&v171, &key[2], &key[1], (uint64_t)&v181, key);
    int8x16_t v47 = v46;
    if ((_DWORD)v46)
    {
      uint8x16_t v48 = (os_log_s *)VSGetLogDefault(v46);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v199 = 67109890;
        *(_DWORD *)&v199[4] = v47;
        *(_WORD *)&v199[8] = 2080;
        *(void *)&v199[10] = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
        v200 = 1024;
        v201 = 2272;
        v202 = 2080;
        v203 = "couldn't get choice phrase";
        _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Error %d at %s:%d (%s)\n", v199, 0x22u);
      }
    }

    v170 = 0;
    int32x4_t v42 = v167;
    if (!v40) {
      goto LABEL_74;
    }
    if (key[2] <= v167)
    {
      if (v167 - key[2] >= 3)
      {
LABEL_73:
        if (!v12) {
          goto LABEL_204;
        }
      }
    }

    else if (key[2] - v167 >= 3)
    {
      goto LABEL_73;
    }

LABEL_52:
          uint64_t v60 = 0LL;
          unsigned int v23 = v59;
          uint64_t v24 = v20;
          unint64_t v25 = v20 - 9LL;
          if (v25 >= 7)
          {
LABEL_53:
            uint64_t v26 = (v24 - 1);
            uint64_t v28 = v24 - 8;
            if (v25 >= 0x1F)
            {
              int32x4_t v34 = 0uLL;
              uint64_t v30 = v28 & 0x1FFFFFFE0LL;
              int32x4_t v35 = 0uLL;
              uint64_t v36 = v24 - 1;
              uint64_t v37 = v28 & 0x1FFFFFFE0LL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              do
              {
                uint64_t v44 = &v23[v36];
                int8x16_t v45 = vrev64q_s8(*(int8x16_t *)(v44 - 15));
                uint8x16_t v46 = (uint8x16_t)vextq_s8(v45, v45, 8uLL);
                int8x16_t v47 = vrev64q_s8(*(int8x16_t *)(v44 - 31));
                uint8x16_t v48 = (uint8x16_t)vextq_s8(v47, v47, 8uLL);
                uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v46.i8);
                uint16x8_t v50 = vmovl_high_u8(v46);
                uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v48.i8);
                uint16x8_t v52 = vmovl_high_u8(v48);
                int32x4_t v39 = (int32x4_t)vmlal_high_u16((uint32x4_t)v39, v50, v50);
                int32x4_t v38 = (int32x4_t)vmlal_u16((uint32x4_t)v38, *(uint16x4_t *)v50.i8, *(uint16x4_t *)v50.i8);
                int32x4_t v35 = (int32x4_t)vmlal_high_u16((uint32x4_t)v35, v49, v49);
                int32x4_t v34 = (int32x4_t)vmlal_u16((uint32x4_t)v34, *(uint16x4_t *)v49.i8, *(uint16x4_t *)v49.i8);
                int32x4_t v43 = (int32x4_t)vmlal_high_u16((uint32x4_t)v43, v52, v52);
                int32x4_t v42 = (int32x4_t)vmlal_u16((uint32x4_t)v42, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8);
                int32x4_t v41 = (int32x4_t)vmlal_high_u16((uint32x4_t)v41, v51, v51);
                int32x4_t v40 = (int32x4_t)vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v51.i8);
                v36 -= 32LL;
                v37 -= 32LL;
              }

              while (v37);
              int v53 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v40, v34), vaddq_s32(v42, v38)),  vaddq_s32(vaddq_s32(v41, v35), vaddq_s32(v43, v39))));
              LODWORD(v60) = v53;
              if (v28 == v30) {
                goto LABEL_64;
              }
              unsigned int v29 = v53;
              if ((v28 & 0x18) != 0) {
                goto LABEL_75;
              }
              uint64_t v31 = v24 - v30;
            }

            else
            {
              unsigned int v29 = 0;
              uint64_t v30 = 0LL;
LABEL_75:
              uint64_t v31 = v24 - (v28 & 0x1FFFFFFF8LL);
              int32x4_t v54 = 0uLL;
              int32x4_t v55 = (int32x4_t)v29;
              uint64_t v56 = ~v30 + v24;
              uint64_t v57 = v30 - (v28 & 0x1FFFFFFF8LL);
              do
              {
                uint16x8_t v58 = vmovl_u8((uint8x8_t)vrev64_s8(*(int8x8_t *)&v23[v56 - 7]));
                int32x4_t v54 = (int32x4_t)vmlal_high_u16((uint32x4_t)v54, v58, v58);
                int32x4_t v55 = (int32x4_t)vmlal_u16((uint32x4_t)v55, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v58.i8);
                v56 -= 8LL;
                v57 += 8LL;
              }

              while (v57);
              LODWORD(v60) = vaddvq_s32(vaddq_s32(v55, v54));
              unsigned int v29 = v60;
              if (v28 == (v28 & 0x1FFFFFFF8LL))
              {
LABEL_64:
                HIDWORD(v60) = v23[7] * v23[7] + v23[6] * v23[6] + v23[5] * v23[5] + v23[4] * v23[4];
                HIDWORD(v60) += v23[3] * v23[3];
                HIDWORD(v60) += v23[2] * v23[2];
                HIDWORD(v60) += v23[1] * v23[1];
                HIDWORD(v60) += *v23 * *v23;
                int v21 = *(_DWORD *)(a1 + 1044);
                int v22 = HIDWORD(v60);
                if (*(_DWORD *)(a1 + 1108)) {
                  goto LABEL_65;
                }
                goto LABEL_68;
              }
            }

    if (*(_DWORD *)(v10 + 1032))
    {
      if (!*(_DWORD *)(v10 + 1760)) {
        sub_100007B44(v10, v9);
      }
    }

    return sub_1000CB038(v14, v12);
  }

  return result;
}

        __dst += 1096;
        if (__dst >= v10) {
          goto LABEL_79;
        }
      }

      uint64_t v30 = v31 - v32;
      goto LABEL_51;
    }

    do
    {
      uint64_t v37 = v29 - *(_DWORD *)__dst;
      if (v29 == *(_DWORD *)__dst)
      {
        int32x4_t v38 = a5[2];
        int32x4_t v39 = *((_DWORD *)__dst + 2);
        if ((_DWORD)v38 == v39)
        {
          int32x4_t v40 = 0LL;
          int32x4_t v41 = 2 * v38;
          while (1)
          {
            uint64_t v37 = *(unsigned __int16 *)((char *)a5 + v40 + 28) - *(unsigned __int16 *)&__dst[v40 + 28];
            if (v37) {
              break;
            }
            v40 += 2LL;
            if (v41 == v40) {
              goto LABEL_70;
            }
          }
        }

        else
        {
          uint64_t v37 = v38 - v39;
        }
      }

      if (v37 < 0)
      {
LABEL_78:
        int8x16_t v19 = __dst;
        break;
      }

    if (*(_DWORD *)(a1 + 360))
    {
      if (!*(_DWORD *)(a1 + 6548) && !*(_DWORD *)(a1 + 6456))
      {
        signed int v12 = sub_1000478D4((_DWORD *)a1);
        if (v8)
        {
          if (*(_DWORD *)(a1 + 756) != 6)
          {
            if (sub_100011D54(*(void *)(a1 + 16), v12 - 1, &v35))
            {
              unsigned int v13 = v35;
              if (v13 != sub_100004688(*(void *)(a1 + 16)))
              {
                unsigned int v14 = (int)sub_1000045F4(*(void *)(a1 + 16));
                int v22 = (void *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
                sub_1000085A4(*(void *)(a1 + 16), v35, (uint64_t)v22, v23, v24, v25, v26, v27);
                sub_100059828(*(void *)a1);
                sub_1000CB038(v22, v14);
              }
            }
          }
        }
      }
    }

    if (*a2 != 2 || *(_DWORD *)(a1 + 756) == 6 || sub_100048740(a1)) {
      goto LABEL_68;
    }
    if (*(_DWORD *)(a1 + 348))
    {
      if (sub_1000398CC(*(void *)(a1 + 5512)))
      {
LABEL_68:
        if (qword_1000FDCC0) {
          uint64_t v28 = v10;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v28 == 1
          && *(_DWORD *)(qword_1000FDCC0 + 2208)
          && !*(_DWORD *)(a1 + 652)
          && sub_100039408(*(void *)(a1 + 5512)) != -1)
        {
          sub_1000597B8(*(void *)a1);
          *(_DWORD *)(a1 + 652) = 1;
        }

        unsigned int v9 = 0LL;
        goto LABEL_75;
      }

      unsigned int v11 = 3;
    }

    else
    {
      unsigned int v11 = 1;
    }

    *a2 = v11;
    goto LABEL_68;
  }

  int v33 = sub_1000C0BA8(0LL);
  unint64_t v32 = sub_1000CAEC8(0LL);
  unsigned int v29 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v30 = sub_1000CF8F8(0LL, 0LL, &v31);
  nullsub_1(v30);
  int v5 = 1LL;
LABEL_12:
  sub_1000504B4(v5);
  sub_1000CF8F8(v30, v31, 0LL);
  sub_1000BEAB0(v29);
  sub_1000CAEC8(v32);
  sub_1000C0BA8(v33);
  return v5;
}

    int32x4_t v54 = v89;
    if (v89 > v39)
    {
      int32x4_t v55 = *(int *)(a1 + 568) - 1LL;
      LOWORD(v88) = *((_WORD *)v41 + v55 + 10);
      HIDWORD(v88) = *((_DWORD *)v41 + v55 + 2);
    }

  *(_WORD *)(result + 190) = v23;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(result + 32))( result,  v22 + 2LL * (7 - (int)v5),  (v5 + 1),  v5);
}

    int32x4_t v35 = (_WORD *)(a1 + 2 * v23 + 176);
    uint64_t v36 = v22 - v23;
    do
    {
      *v35++ = v16;
      --v36;
    }

    while (v36);
  }

  unsigned int v13 = 7LL;
  unsigned int v27 = a1 + 176;
  if (*(_DWORD *)(a1 + 116) < (int)a4)
  {
LABEL_36:
    if ((int)a4 >= 1)
    {
      uint64_t v28 = v27 + 2LL * (7 - (int)v13);
      unsigned int v29 = a4;
      do
      {
        uint64_t v31 = *a5++;
        uint64_t v30 = v31;
        if (v31 < 0xFFFBuLL)
        {
          unint64_t v32 = *(int *)(a1 + 148);
          if (v30 >= v32)
          {
            LODWORD(v30) = v30 - v32 + *(_DWORD *)(a1 + 152) + 1;
          }

          else
          {
            int v33 = *(void *)(a1 + 128);
            if (v33) {
              LOWORD(v30) = *(_WORD *)(v33 + 2 * v30);
            }
            else {
              LOWORD(v30) = v30 + *(_WORD *)(a1 + 144);
            }
          }
        }

        else if ((_DWORD)v30 == 65531)
        {
          LOWORD(v30) = *(_WORD *)(a1 + 114);
        }

        else if ((_DWORD)v30 == 65532 || (_DWORD)v30 == 65533)
        {
          LOWORD(v30) = *(_WORD *)(a1 + 112);
        }

        else
        {
          LOWORD(v30) = 0;
        }

        *(_WORD *)(a1 + 190) = v30;
        *a7++ = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(a1 + 32))( a1,  v28,  (v13 + 1),  v13,  0LL);
        --v29;
      }

      while (v29);
    }

    uint64_t result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 120) = -1;
    return result;
  }

        int8x16_t v47 = v55 - 1;
        v46 += 2;
        LODWORD(v48) = v48 | (*v56 << 8);
      }

      else
      {
LABEL_59:
        int v61 = *v45++;
        uint64_t v60 = v61;
        if (*(_BYTE *)(v5 + v61) == 2)
        {
          uint64_t v62 = *(void *)(a1 + 104);
          uint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v60);
          int8x16_t v47 = *(unsigned __int16 *)(v62 + 2 * v60 + 2) + ~(_DWORD)v63;
          uint64_t v64 = (unsigned __int8 *)(*(void *)(a1 + 88) + v63);
          uint8x16_t v46 = v64 + 1;
          LODWORD(v48) = v48 | (*v64 << 8);
        }

        else
        {
          int8x16_t v47 = 0;
          LODWORD(v48) = v48 | ((_DWORD)v60 << 8);
        }
      }
    }

    int32x4_t v55 = v47 - 1;
    uint64_t v56 = v46 + 1;
    LODWORD(v48) = *v46;
    if (!v55) {
      goto LABEL_58;
    }
    goto LABEL_52;
  }

  do
  {
    while (1)
    {
      while (v47)
      {
        --v47;
        uint16x8_t v49 = *v46++;
        LODWORD(v48) = v49;
        if (v49 >= v44) {
          goto LABEL_63;
        }
      }

      uint16x8_t v50 = *v45++;
      uint8x16_t v48 = v50;
      if (*(_BYTE *)(v5 + v50) != 2) {
        break;
      }
      uint16x8_t v51 = *(void *)(a1 + 104);
      uint16x8_t v52 = *(unsigned __int16 *)(v51 + 2 * v48);
      int8x16_t v47 = *(unsigned __int16 *)(v51 + 2 * v48 + 2) + ~(_DWORD)v52;
      int v53 = (unsigned __int8 *)(*(void *)(a1 + 88) + v52);
      int32x4_t v54 = *v53;
      uint8x16_t v46 = v53 + 1;
      LODWORD(v48) = v54;
      if (v54 >= v44) {
        goto LABEL_63;
      }
    }

    int8x16_t v47 = 0;
  }

  while ((int)v48 < v44);
LABEL_63:
  uint64_t v65 = (v48 - v44);
  uint64_t v66 = (_WORD *)(a2 + 2LL * (int)v65);
  if (!v15) {
    goto LABEL_66;
  }
LABEL_64:
  --v15;
  unsigned int v68 = v7 + 1;
  LODWORD(v67) = *(unsigned __int8 *)v7;
  if (v43 == 1) {
    goto LABEL_65;
  }
LABEL_68:
  if (v15)
  {
    --v15;
    v7 += 2LL;
  }

  else
  {
    BOOL v7 = v68;
LABEL_73:
    int v72 = *v6++;
    unsigned int v68 = v72;
    if (*(_BYTE *)(v5 + v72) != 2)
    {
      unsigned int v15 = 0;
      goto LABEL_77;
    }

    v73 = *(void *)(a1 + 104);
    unsigned int v74 = *(unsigned __int16 *)(v73 + 2 * v68);
    unsigned int v15 = *(unsigned __int16 *)(v73 + 2 * v68 + 2) + ~(_DWORD)v74;
    unsigned int v68 = *(void *)(a1 + 88) + v74;
    BOOL v7 = v68 + 1;
  }

  LODWORD(v68) = *(unsigned __int8 *)v68;
LABEL_77:
  LODWORD(v67) = v67 | ((_DWORD)v68 << 8);
  while ((int)v67 < *(_DWORD *)(a1 + 692))
  {
    *v66++ = v67;
    if (v15) {
      goto LABEL_64;
    }
LABEL_66:
    uint64_t v69 = *v6++;
    unsigned int v67 = v69;
    if (*(_BYTE *)(v5 + v69) == 2)
    {
      v70 = *(void *)(a1 + 104);
      int v71 = *(unsigned __int16 *)(v70 + 2 * v67);
      unsigned int v15 = *(unsigned __int16 *)(v70 + 2 * v67 + 2) + ~(_DWORD)v71;
      BOOL v7 = *(void *)(a1 + 88) + v71;
      unsigned int v68 = v7 + 1;
      LODWORD(v67) = *(unsigned __int8 *)v7;
      if (v43 != 1) {
        goto LABEL_68;
      }
LABEL_65:
      BOOL v7 = v68;
      continue;
    }

    if (v43 != 1) {
      goto LABEL_73;
    }
    unsigned int v15 = 0;
  }

  *uint64_t v66 = -1;
  *((_DWORD *)a5 + 4) = v15;
  *a5 = v6;
  a5[1] = (unsigned __int8 *)v7;
  return v65;
}

            int32x4_t v54 = v36;
LABEL_53:
            int32x4_t v55 = *(unsigned __int16 *)(a1 + 96);
            int32x4_t v43 = (char *)(v36 - 1);
            uint64_t v56 = *(void *)(a1 + 80);
            v88 = 0LL;
            v87 = 0;
            sub_10007A9E8(v56, v55, &v88, &v87);
            if ((int)v45 < 1)
            {
              uint64_t v36 = 0LL;
LABEL_64:
              if (!v47) {
                goto LABEL_66;
              }
LABEL_65:
            }

            else
            {
              if (v87 >= 1)
              {
                uint64_t v57 = 0;
                uint16x8_t v58 = v36 - 1;
LABEL_56:
                uint64_t v59 = v88;
                uint64_t v60 = v87;
                while (1)
                {
                  int v61 = *v59++;
                  if (!--v60)
                  {
                    uint64_t v36 = 0LL;
                    ++v57;
                    --v58;
                    if (v57 != (_DWORD)v45) {
                      goto LABEL_56;
                    }
                    goto LABEL_64;
                  }
                }

                uint64_t v36 = v58;
                if (v47) {
                  goto LABEL_65;
                }
                goto LABEL_66;
              }

              uint64_t v36 = 0LL;
              if (v47) {
                goto LABEL_65;
              }
LABEL_66:
              uint64_t v62 = *(_DWORD *)(a1 + 104);
              if (v62 < 1) {
                goto LABEL_34;
              }
              uint64_t v63 = 0LL;
              uint64_t v64 = (unsigned __int16 *)(*(void *)(a1 + 136) + 2LL);
              uint64_t v65 = v54 - v36;
              while (v65 < *(unsigned __int8 *)(*(void *)(a1 + 112) + v63))
              {
                do
                  uint64_t v66 = (__int16)*v64++;
                while (v66 != -1);
LABEL_68:
                if (++v63 >= v62) {
                  goto LABEL_33;
                }
              }

              unsigned int v67 = (unsigned __int16 *)v43;
              if ((__int16)*v64 != -1)
              {
                while (1)
                {
                  v88 = 0LL;
                  v87 = 0;
                  sub_10007A9E8(*(void *)(a1 + 80), *v64, &v88, &v87);
                  unsigned int v68 = v87;
                  if (v87 < 1) {
                    break;
                  }
                  uint64_t v69 = v88;
                  while (1)
                  {
                    v70 = *v69++;
                    if (*v67 == v70) {
                      break;
                    }
                    if (!--v68) {
                      goto LABEL_81;
                    }
                  }

                  if (v67 == (unsigned __int16 *)v18)
                  {
                    int v72 = 0;
                    unsigned int v76 = v64[1];
                    ++v64;
                    v73 = v76;
                    if (v76 == 0xFFFF) {
                      goto LABEL_84;
                    }
                    goto LABEL_83;
                  }

                  --v67;
                  int v71 = (__int16)v64[1];
                  ++v64;
                  if (v71 == -1) {
                    goto LABEL_32;
                  }
                }

      if (v7 < 0x100)
      {
        unsigned int v15 = sub_1000BF054(v7);
        goto LABEL_73;
      }

      if (v7 < 0x180)
      {
        unsigned int v14 = 2;
      }

      else
      {
        if (v7 < 0x400)
        {
          unsigned int v14 = 3;
        }

        else if (v7 < 0x500)
        {
          unsigned int v14 = 4;
        }

        else
        {
          unsigned int v13 = v7 >> 4;
          if (v7 >> 4 < 0x207)
          {
            unsigned int v14 = 5;
          }

          else
          {
            if (v13 < 0x20D)
            {
              unsigned int v14 = 6;
            }

            else
            {
              if (v7 >> 6 < 0xC1)
              {
                unsigned int v14 = 7;
              }

              else if (v7 >> 5 < 0x185)
              {
                unsigned int v14 = 8;
              }

              else if (v7 >> 8 < 0x31)
              {
                unsigned int v14 = 9;
              }

              else
              {
                if (v7 >> 6 < 0x27F)
                {
                  unsigned int v14 = 10;
                }

                else
                {
                  if (v13 < 0xD7B)
                  {
                    unsigned int v14 = 11;
                  }

                  else
                  {
                    unsigned int v14 = 12;
                  }
                }
              }
            }
          }
        }
      }

      if (((0xFE3uLL >> v14) & 1) == 0 && (*(unsigned int (**)(uint64_t))&dword_1000FA138[14 * v14 + 6])(v7))
      {
        if (v7 < 0x180)
        {
          int v17 = 2;
        }

        else if (v7 < 0x400)
        {
          int v17 = 3;
        }

        else if (v7 < 0x500)
        {
          int v17 = 4;
        }

        else
        {
          uint64_t v16 = v7 >> 4;
          if (v7 >> 4 < 0x207)
          {
            int v17 = 5;
          }

          else
          {
            if (v16 < 0x20D)
            {
              int v17 = 6;
            }

            else
            {
              if (v7 >> 6 < 0xC1)
              {
                int v17 = 7;
              }

              else if (v7 >> 5 < 0x185)
              {
                int v17 = 8;
              }

              else if (v7 >> 8 < 0x31)
              {
                int v17 = 9;
              }

              else
              {
                if (v7 >> 6 < 0x27F)
                {
                  int v17 = 10;
                }

                else
                {
                  if (v16 < 0xD7B)
                  {
                    int v17 = 11;
                  }

                  else
                  {
                    int v17 = 12;
                  }
                }
              }
            }
          }
        }

        if (((0xFE3uLL >> v17) & 1) == 0)
        {
          unsigned int v15 = (*(uint64_t (**)(uint64_t))&dword_1000FA138[14 * v17 + 8])(v7);
LABEL_73:
          LODWORD(v7) = v15;
        }
      }

LABEL_62:
            unint64_t v32 = v31 + 1;
            do
            {
              int v33 = v23[(v32 - 2)];
              v29 += v33 * v33;
              LODWORD(v60) = v29;
              --v32;
            }

            while (v32 > 9);
            goto LABEL_64;
          }

        j__memmove(v46 + 1096, v46, 1096 * v51);
        goto LABEL_20;
      }

      if (v46 != v42)
      {
        --v51;
        unsigned int v9 = v43;
        if (v51 < 1) {
          goto LABEL_20;
        }
        goto LABEL_62;
      }
    }

        uint64_t v96 = v70 + v66 - v23;
        do
        {
          v98 = *v67--;
          uint64_t v97 = v98;
          int v99 = v80->i16[0];
          unsigned int v80 = (int16x8_t *)((char *)v80 + 2);
          *v79++ = (int)(v22 + v99 * v97) >> v21;
          unsigned int v75 = __CFADD__(v96++, 1);
        }

        while (!v75);
        goto LABEL_65;
      }
    }

    else
    {
      LODWORD(v70) = 0;
    }

    uint64_t v79 = (_WORD *)a3;
    unsigned int v80 = a2;
    goto LABEL_62;
  }

  unint64_t v32 = (int16x4_t *)*((void *)a1 + 2);
  if ((int)v3 >= 1)
  {
    int v33 = (v3 + 1) >> 1;
    int32x4_t v34 = (v33 - 1);
    if (v34 >= 0xF)
    {
      LODWORD(v35) = 0;
      if (a3 - (unint64_t)v32 >= 0x20 && a3 - (unint64_t)a2 >= 0x20)
      {
        v164 = v34 + 1;
        int32x4_t v35 = (v34 + 1) & 0x1FFFFFFF0LL;
        uint64_t v36 = (int16x8_t *)(a3 + 2 * v35);
        uint64_t v37 = (int16x4_t *)((char *)a2 + 2 * v35);
        v165 = vdupq_n_s32(v22);
        int32x4_t v38 = (__int16 *)v32 + v35;
        v166 = v32 + 2;
        v167 = (int16x4_t *)&a2[1];
        v168 = (int16x8_t *)(a3 + 16);
        v169 = vnegq_s32(vdupq_n_s32(v21));
        v170 = v35;
        do
        {
          v171 = *(int16x8_t *)v166[-2].i8;
          v172 = *(int16x8_t *)v167[-2].i8;
          v173 = vmlal_s16(v165, *(int16x4_t *)v172.i8, *(int16x4_t *)v171.i8);
          v174 = vmlal_high_s16(v165, v172, v171);
          v175 = vuzp1q_s16( (int16x8_t)vshlq_s32(vmlal_s16(v165, *v167, *v166), v169),  (int16x8_t)vshlq_s32(vmlal_high_s16(v165, *(int16x8_t *)v167->i8, *(int16x8_t *)v166->i8), v169));
          v168[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v173, v169), (int16x8_t)vshlq_s32(v174, v169));
          *v168 = v175;
          v166 += 4;
          v167 += 4;
          v168 += 2;
          v170 -= 16LL;
        }

        while (v170);
        if (v164 == v35)
        {
LABEL_29:
          int32x4_t v43 = *((void *)a1 + 2);
          LODWORD(v3) = *a1;
          uint64_t v44 = v37;
          else {
            v129 = v3 + 1;
          }
          v130 = v129 >> 1;
          v131 = (__int16 *)(v43 + 2LL * ((v129 >> 1) - 1));
          v132 = (v3 + ~v33);
          v133 = 2 * v132 + 2;
          v134 = (int16x4_t *)&v36->i8[v133];
          v135 = 2LL * v130;
          v136 = v135 - 2 * v132 + v43 - 2;
          v137 = v43 + v135;
          v138 = v36 >= (int16x8_t *)((char *)v44 + v133) || v44 >= v134;
          v139 = !v138;
          v140 = v136 >= (unint64_t)v134 || (unint64_t)v36 >= v137;
          if (!v140 || v139)
          {
LABEL_108:
            v143 = v36;
            v144 = v44;
          }

          else
          {
            v141 = v132 + 1;
            v142 = (v132 + 1) & 0x1FFFFFFF0LL;
            v143 = (int16x8_t *)((char *)v36 + 2 * v142);
            v144 = (int16x4_t *)((char *)v44 + 2 * v142);
            v131 -= v142;
            v33 += v142;
            v145 = vdupq_n_s32(v22);
            v146 = (int16x8_t *)(v43 + 2LL * v130 - 16);
            v147 = v44 + 2;
            v148 = v36 + 1;
            v149 = vnegq_s32(vdupq_n_s32(v21));
            v150 = v142;
            do
            {
              v151 = (int8x16_t)vrev64q_s16(*v146);
              v152 = (int16x8_t)vextq_s8(v151, v151, 8uLL);
              v153 = (int8x16_t)vrev64q_s16(v146[-1]);
              v154 = (int16x8_t)vextq_s8(v153, v153, 8uLL);
              v155 = *(int16x8_t *)v147[-2].i8;
              v156 = vmlal_s16(v145, *(int16x4_t *)v155.i8, *(int16x4_t *)v152.i8);
              v157 = vmlal_high_s16(v145, v155, v152);
              v158 = vmlal_s16(v145, *v147, *(int16x4_t *)v154.i8);
              v159 = vmlal_high_s16(v145, *(int16x8_t *)v147->i8, v154);
              v148[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v156, v149), (int16x8_t)vshlq_s32(v157, v149));
              *v148 = vuzp1q_s16((int16x8_t)vshlq_s32(v158, v149), (int16x8_t)vshlq_s32(v159, v149));
              v146 -= 2;
              v147 += 4;
              v148 += 2;
              v150 -= 16LL;
            }

            while (v150);
            if (v141 == v142) {
              goto LABEL_111;
            }
          }

          v160 = v3 - v33;
          do
          {
            v162 = *v131--;
            v161 = v162;
            v163 = v144->i16[0];
            v144 = (int16x4_t *)((char *)v144 + 2);
            v143->i16[0] = (int)(v22 + v163 * v161) >> v21;
            v143 = (int16x8_t *)((char *)v143 + 2);
            --v160;
          }

          while (v160);
LABEL_111:
          LODWORD(v3) = *a1;
          goto LABEL_112;
        }

      if (v41 == *(unsigned __int8 *)(v45 + 38))
      {
        if (*(_DWORD *)(v11 + 544) == 2 || (*(void *)v45 & 0x8000000000000000LL) != 0)
        {
          uint16x8_t v49 = *(__int16 *)(v45 + 24);
          if (v49 >= v84) {
            LOWORD(v49) = v84;
          }
          unsigned int v84 = v49;
        }
      }

      else
      {
        uint16x8_t v50 = *(__int16 *)(v45 + 36);
        if (v50 >= v83) {
          LOWORD(v50) = v83;
        }
        uint64_t v83 = v50;
      }

      if (++v43 == v42) {
        break;
      }
      uint64_t v44 = *(void *)(v11 + 9024);
      int8x16_t v45 = *(void *)(v44 + 8LL * (v43 >> 8)) + 48LL * v43;
      int8x16_t v47 = *(unsigned __int16 *)(v45 + 32);
      if (v47 == 0xFFFF)
      {
LABEL_67:
        while (v42 - 1 != v43)
        {
          uint8x16_t v48 = *(void *)(v44 + 8LL * (++v43 >> 8));
          int8x16_t v47 = *(unsigned __int16 *)(v48 + 48LL * v43 + 32);
          if (v47 != 0xFFFF)
          {
            int8x16_t v45 = v48 + 48LL * v43;
            if (v47 != v46) {
              goto LABEL_61;
            }
            goto LABEL_62;
          }
        }

        break;
      }
    }

    uint16x8_t v51 = v84 <= v83;
  }

  else
  {
    uint16x8_t v51 = v12[124] == v12[5];
  }

  uint64_t result = sub_1000B25CC((unsigned int *)(v11 + 9084), v51);
  if (*(_DWORD *)(v11 + 9180)) {
    uint64_t result = sub_1000B25CC((unsigned int *)(v11 + 9132), v51);
  }
  if (*(_DWORD *)(v11 + 544) == 11)
  {
    uint16x8_t v52 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint16x8_t v52 = *(void *)(qword_1000FDCC0 + 4912);
    }
    if (v52 < (__int16)(*v12 - v12[56]))
    {
      if (*(_DWORD *)(v11 + 552) != 6) {
        *(_DWORD *)(v11 + 552) = 6;
      }
LABEL_87:
      uint64_t result = sub_1000B2750((_DWORD *)(v11 + 9084));
      if ((_DWORD)result)
      {
LABEL_88:
        uint64_t v59 = 0;
        uint64_t v60 = 0;
LABEL_102:
        if (qword_1000FDCC0)
        {
          uint64_t v59 = *(_DWORD *)(qword_1000FDCC0 + 5364);
          if (v59)
          {
            uint64_t result = sub_10003941C(v11, *(unsigned int *)(qword_1000FDCC0 + 5376), v53, v54, v55, v56, v57, v58);
            uint64_t v59 = result != 0;
          }
        }

          if (++v58 == v57) {
            goto LABEL_23;
          }
        }
      }

      while (1)
      {
        if (v10)
        {
          v192 = *(__int16 *)(*(void *)(v284 + 8) + 2LL * (void)v45);
          if (!v9) {
            goto LABEL_167;
          }
        }

        else
        {
          v192 = 1;
          if (!v9) {
            goto LABEL_167;
          }
        }

        v193 = *(unsigned int *)(a1 + 1100);
        sub_100005528(a1, v43, (int)v45);
        if (v279)
        {
          if (v193 < 0x10)
          {
            v194 = 0LL;
LABEL_159:
            v198 = v193 - v194;
            v199 = 2 * v194;
            do
            {
              v199 += 2LL;
              --v198;
            }

            while (v198);
            goto LABEL_167;
          }

          v196 = 0LL;
          v194 = v193 & 0xFFFFFFF0;
          v197 = v194;
          do
          {
            v196 += 32LL;
            v197 -= 16LL;
          }

          while (v197);
          if (v194 != v193) {
            goto LABEL_159;
          }
        }

        else
        {
          if (v193 < 0x10)
          {
            v195 = 0LL;
LABEL_165:
            v202 = v193 - v195;
            v203 = 2 * v195;
            do
            {
              v203 += 2LL;
              --v202;
            }

            while (v202);
            goto LABEL_167;
          }

          v200 = 0LL;
          v195 = v193 & 0xFFFFFFF0;
          v201 = v195;
          do
          {
            v200 += 32LL;
            v201 -= 16LL;
          }

          while (v201);
          if (v195 != v193) {
            goto LABEL_165;
          }
        }

        uint64_t v60 = &v26[2 * (int)sub_1000CDC84(v26, &v139)];
        if (v139 == 12293)
        {
          if (v27 <= v25) {
            goto LABEL_116;
          }
          int v61 = *((_WORD *)v27 - 1);
        }

        else
        {
          uint64_t v62 = *(void *)(a1 + 336);
          if (!v62) {
            goto LABEL_105;
          }
          uint64_t v63 = *(int *)(a1 + 328);
          if (!(_DWORD)v63) {
            goto LABEL_105;
          }
          uint64_t v64 = 0;
          while (1)
          {
            while (1)
            {
              uint64_t v65 = v63 - 1;
              if (v63 - 1 < 0) {
                uint64_t v65 = v63;
              }
              uint64_t v66 = v65 >> 1;
              unsigned int v67 = v64 + v66;
              unsigned int v68 = *(unsigned __int16 *)(v62 + 2LL * (v64 + (int)v66));
              if (v68 <= v139) {
                break;
              }
              uint64_t v63 = (int)v66;
              if (!(_DWORD)v66) {
                goto LABEL_105;
              }
            }

            if (v68 == v139) {
              break;
            }
            v63 -= (int)v66 + 1;
            uint64_t v64 = v67 + 1;
            if (!v63) {
              goto LABEL_105;
            }
          }

          if (v67 != -1)
          {
            int v61 = *(_WORD *)(*(void *)(a1 + 352) + 2LL * v67);
          }

          else
          {
LABEL_105:
            unsigned int v84 = *(int *)(a1 + 172);
            if (!(_DWORD)v84) {
              goto LABEL_116;
            }
            uint64_t v85 = 0;
            while (1)
            {
              while (1)
              {
                unsigned int v86 = v84 - 1;
                if (v84 - 1 < 0) {
                  unsigned int v86 = v84;
                }
                v87 = v86 >> 1;
                v88 = v85 + v87;
                int v89 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v85 + (int)v87));
                if (v89 <= v139) {
                  break;
                }
                unsigned int v84 = (int)v87;
                if (!(_DWORD)v87) {
                  goto LABEL_116;
                }
              }

              if (v89 == v139) {
                break;
              }
              v84 -= (int)v87 + 1;
              uint64_t v85 = v88 + 1;
              if (!v84) {
                goto LABEL_116;
              }
            }

            if (v88 == -1)
            {
LABEL_116:
              sub_1000CDC84(v60, &v139);
              if (v139 == 12293)
              {
                if (v27 > v25) {
                  goto LABEL_118;
                }
                goto LABEL_150;
              }

              int v91 = *(void *)(a1 + 376);
              if (v91)
              {
                unsigned __int16 v92 = *(int *)(a1 + 368);
                if ((_DWORD)v92)
                {
                  int v93 = 0;
                  uint64_t v79 = *(void *)(a1 + 392);
                  while (1)
                  {
                    while (1)
                    {
                      int v94 = v92 - 1;
                      if (v92 - 1 < 0) {
                        int v94 = v92;
                      }
                      uint64_t v95 = v94 >> 1;
                      uint64_t v96 = *(unsigned __int16 *)(v91 + 2LL * (v93 + (int)v95));
                      if (v96 <= v139) {
                        break;
                      }
                      unsigned __int16 v92 = (int)v95;
                      if (!(_DWORD)v95) {
                        goto LABEL_142;
                      }
                    }

                    uint64_t v83 = v93 + (int)v95;
                    if (v96 == v139) {
                      break;
                    }
                    v92 -= (int)v95 + 1;
                    int v93 = v83 + 1;
                    if (!v92) {
                      goto LABEL_142;
                    }
                  }

                  if ((_DWORD)v83 != -1)
                  {
LABEL_141:
                    uint64_t v44 = (4 * v15);
                    uint64_t v90 = *(_WORD *)(v79 + 2 * v83);
                    goto LABEL_119;
                  }
                }
              }

LABEL_61:
          unsigned int v29 = 0;
          uint64_t v31 = v24;
          goto LABEL_62;
        }

    *(void *)(a1 + 1632) = sub_10001244C;
    signed int v8 = v32 == 5;
    goto LABEL_100;
  }

  if (*(_DWORD *)(a1 + 1108) && *(_DWORD *)(a1 + 1112))
  {
    signed int v8 = 0;
    *(void *)(a1 + 1632) = sub_10001585C;
    goto LABEL_100;
  }

  uint64_t v37 = *(_DWORD *)(a1 + 1044);
  if (!*(_DWORD *)(a1 + 1116))
  {
    if (v37)
    {
      int32x4_t v42 = sub_10001405C;
    }

    else
    {
      if (*(_DWORD *)(a1 + 2024)) {
        goto LABEL_94;
      }
      int32x4_t v42 = sub_100012A04;
    }

    *(void *)(a1 + 1624) = v42;
    *(void *)(a1 + 1664) = 0LL;
LABEL_94:
    signed int v8 = 0;
    goto LABEL_95;
  }

  if (v37)
  {
    signed int v8 = 0;
    int32x4_t v38 = *(_DWORD *)(a1 + 1104);
    int32x4_t v39 = sub_100014440;
    int32x4_t v40 = sub_100014824;
  }

  else
  {
    signed int v8 = *(_DWORD *)(a1 + 1036);
    if (v8)
    {
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 164))
      {
        signed int v8 = 0;
        *(void *)(a1 + 1624) = sub_1000136D0;
        *(void *)(a1 + 1664) = 0LL;
        *(void *)(a1 + 1632) = sub_100013C2C;
      }

      else
      {
        signed int v8 = 0;
        *(void *)(a1 + 1624) = sub_100016660;
        *(void *)(a1 + 1664) = 0LL;
        *(void *)(a1 + 1632) = sub_100016950;
      }

      goto LABEL_100;
    }

    int32x4_t v38 = *(_DWORD *)(a1 + 1104);
    int32x4_t v39 = sub_100012EDC;
    int32x4_t v40 = sub_100013418;
  }

  if (v38 == 36) {
    int32x4_t v41 = v40;
  }
  else {
    int32x4_t v41 = v39;
  }
  *(void *)(a1 + 1624) = v41;
  *(void *)(a1 + 1664) = 0LL;
  *(void *)(a1 + 1632) = sub_100012720;
LABEL_100:
  uint64_t v44 = sub_10001C2D8;
  if (!*(_DWORD *)(a1 + 720)) {
    uint64_t v44 = sub_10001C014;
  }
  *(void *)(a1 + 1640) = v44;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1648) = sub_10001DF08;
  *(void *)(a1 + 1688) = 0LL;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 724))
    {
      *(void *)(a1 + 1656) = sub_10001B9CC;
      *(void *)(a1 + 1696) = 0LL;
      if (!v1) {
        return 1LL;
      }
    }

    else
    {
      *(void *)(a1 + 1656) = sub_10001DA70;
      *(void *)(a1 + 1696) = 0LL;
      if (!v1) {
        return 1LL;
      }
    }

    goto LABEL_107;
  }

  *(void *)(a1 + 1656) = sub_10001D7F4;
  *(void *)(a1 + 1696) = 0LL;
  if (v1)
  {
LABEL_107:
    *(void *)(a1 + 1640) = sub_10001E8D8;
    *(void *)(a1 + 1648) = 0LL;
    *(void *)(a1 + 1680) = 0LL;
    *(void *)(a1 + 1688) = 0LL;
    *(void *)(a1 + 1656) = sub_10001E36C;
    *(void *)(a1 + 1696) = 0LL;
  }

  return 1LL;
}

  int32x4_t v39 = (int *)(*(void *)(v10 + 288) + 4LL * v24);
  int32x4_t v40 = *v39;
  int32x4_t v41 = (v39[1] - v40);
  if (!(_DWORD)v41) {
    return 0LL;
  }
  v161 = 0LL;
  if (qword_1000FDCC0)
  {
    v135 = *(unsigned __int16 *)(qword_1000FDCC0 + 4168);
  }

  else
  {
    v135 = 0;
  }

  v138 = v41;
  int32x4_t v42 = 0LL;
  unsigned int v29 = 0LL;
  v145 = a4 & 0x7FE0000000000000LL;
  v141 = 1;
  int32x4_t v43 = a8;
  v130 = v40;
  do
  {
    uint64_t v44 = *(int *)(*(void *)(v10 + 304) + 4 * (v42 + v40));
    int8x16_t v45 = *(void *)(v10 + 272);
    uint8x16_t v46 = *(unsigned int *)(v45 + 4 * v44);
    int8x16_t v47 = sub_100031134(*(void *)(v10 + 256), *(_DWORD *)(v45 + 4 * v44));
    uint8x16_t v48 = sub_100030EF0(v47);
    uint64_t v56 = *(_DWORD *)(v48 + 16);
    if (v56 == -1)
    {
      v141 = 0;
      goto LABEL_69;
    }

    if (v56)
    {
      unsigned int v29 = (v56 + v29);
      if ((int)v29 <= a7)
      {
        uint64_t v57 = v48;
        v148 = v29;
        if (*(_DWORD *)(v10 + 336)) {
          uint16x8_t v58 = *(unsigned __int8 *)(*(void *)(v10 + 352) + v42 + v40);
        }
        else {
          uint16x8_t v58 = 0;
        }
        uint64_t v59 = v10;
        uint64_t v60 = *(void *)v48;
        int v61 = v145 + (v46 << 35);
        LODWORD(v163[0]) = *(char *)(*(void *)(v59 + 296) + v44);
        v153 = v56;
        uint64_t v62 = v43 + 24LL * v56;
        sub_100031070(v47, &v161, (_DWORD *)&v160 + 1);
        if (v161)
        {
          uint64_t v63 = *(__int16 **)(v59 + 432);
          if ((_DWORD)v137 == (_DWORD)v46)
          {
            sub_10005E814(v161, SHIDWORD(v160), a3, v153, *(unsigned __int16 **)(v57 + 8), v63);
          }

          else
          {
            sub_10005E9F4(v161, SHIDWORD(v160), v153, *(unsigned __int16 **)(v57 + 8), v63);
          }

          do
          {
            *(_WORD *)int32x4_t v43 = *(_WORD *)v60;
            uint64_t v66 = *v63++;
            *(_WORD *)(v43 + 2) = v58 - v135 + v66;
            *(void *)(v43 + 8) = v61 | *(int *)(v60 + 4);
            *(_DWORD *)(v43 + 16) = v163[0];
            v43 += 24LL;
            v60 += 8LL;
          }

          while (v43 < v62);
LABEL_89:
          uint64_t v10 = v146;
          unsigned int v29 = v148;
          int32x4_t v40 = v130;
LABEL_93:
          v43 -= 24 * v153;
          if ((int)v153 >= 1)
          {
            unsigned int v67 = 0LL;
            do
            {
              *(_WORD *)(v43 + 2) += sub_100030EF8(v47, *(_DWORD *)(*(void *)v57 + v67 + 4) >> 10);
              v43 += 24LL;
              v67 += 8LL;
            }

            while (8LL * v153 != v67);
          }

          goto LABEL_69;
        }

        if (v162) {
          uint16x8_t v58 = v58 - v135 + sub_10005EA2C(v162, v160, a3);
        }
        int32x4_t v40 = v130;
        if ((int)v153 < 1)
        {
          uint64_t v10 = v146;
        }

        else
        {
          uint64_t v64 = v60 + 2;
          uint64_t v10 = v146;
          do
          {
            *(_WORD *)int32x4_t v43 = *(_WORD *)(v64 - 2);
            *(_WORD *)(v43 + 2) = v58;
            *(void *)(v43 + 8) = v61 | *(int *)(v64 + 2);
            uint64_t v65 = v163[0];
            if (LODWORD(v163[0])) {
              uint64_t v65 = *(_WORD *)v64 != 0;
            }
            *(_DWORD *)(v43 + 16) = v65;
            v43 += 24LL;
            v64 += 8LL;
          }

          while (v43 < v62);
        }

        unsigned int v29 = v148;
      }
    }

        *(_DWORD *)(a1 + 152) = v67;
        goto LABEL_62;
      }

      do
      {
LABEL_39:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * (v46 >> 8)) + v46) = *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * ((v46 - 1) >> 8)) + (v46 - 1));
        --v46;
      }

      while (v46 > v24);
      goto LABEL_40;
    }

LABEL_68:
      if (v21)
      {
        *v9++ = v22;
        *v14++ = v60;
      }

      else
      {
        *v9++ = v60 + v22;
      }

      v118 = 2 * v15;
      *(_WORD *)(v9[1] + v118) = v29;
      *(_WORD *)(v9[2] + v118) = v27;
      return sub_1000CB038(v22, 4 * v20);
    }

    if (v20 >= 4)
    {
      uint64_t v108 = v21 & 0xFFFFFFFC;
      unsigned int v109 = v108;
      v110 = v22;
      do
      {
        *(int32x4_t *)v110 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v110, *v110, 0x1FuLL), 1uLL);
        ++v110;
        v109 -= 4LL;
      }

      while (v109);
      if (v108 == v21) {
        goto LABEL_60;
      }
    }

    else
    {
      uint64_t v108 = 0LL;
    }

    int v111 = &v22->i32[v108];
    v112 = v21 - v108;
    do
    {
      *v111++ /= 2;
      --v112;
    }

    while (v112);
LABEL_60:
    unsigned int v27 = v28 / 2;
    v29 /= 2;
    goto LABEL_61;
  }

  return result;
}

    if (++v67 == v21) {
      goto LABEL_114;
    }
  }

        uint64_t v59 = v64 / v59 + 1;
        goto LABEL_69;
      }

      uint64_t v57 = qword_1000FDCC0 ? (double)*(int *)(qword_1000FDCC0 + 3800) : 0.0;
      v937 = *(int **)(v1 + 312);
      v942 = *(int **)(v1 + 304);
      uint64_t v65 = sub_10007FD98(v1, v43, 0, 1);
      uint64_t v66 = *(_DWORD *)(v1 + 1100);
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 3864)) {
          break;
        }
      }

          unint64_t v25 = 0LL;
          int32x4_t v34 = 0;
          goto LABEL_69;
        }

        int32x4_t v42 = (unsigned __int16 *)(*(void *)(v13 + 104) + 2 * v41);
        int32x4_t v43 = *v42;
        unsigned int v15 = v42[1] + ~(_DWORD)v43;
        int v17 = *(void *)(v13 + 88) + v43;
      }

      ++v17;
    }

    if (v15)
    {
      uint64_t v44 = v15 - 1;
      int8x16_t v45 = (unsigned __int8 *)(v17 + 1);
      if (!*(_BYTE *)v17) {
        goto LABEL_68;
      }
LABEL_35:
      if (v44)
      {
        uint16x8_t v50 = v44 - 1;
        uint16x8_t v51 = (unsigned __int8 *)(v17 + 2);
        LODWORD(v17) = *v45;
        if (v14 == 1)
        {
LABEL_48:
          if (v11 < 1)
          {
            unint64_t v25 = 0LL;
            int32x4_t v34 = 1;
          }

          else
          {
            uint64_t v57 = *(_DWORD *)(v13 + 668) + v17;
            *a4 = v57;
            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3892)) {
              *a4 = (v57 >> 8) + (v57 >> 8) * *(unsigned __int16 *)(v13 + 728) + v57;
            }
            *a5 = 0;
            unint64_t v25 = 1LL;
            int32x4_t v34 = 1;
          }

          goto LABEL_69;
        }

        goto LABEL_41;
      }

  if (v29 >= v14) {
    int32x4_t v55 = v14;
  }
  else {
    int32x4_t v55 = v29;
  }
  if (v29 < -v14) {
    uint64_t v56 = 1LL;
  }
  else {
    uint64_t v56 = v55;
  }
  uint64_t v57 = v14 + (int)v56 + 1;
  uint16x8_t v58 = *((__int16 *)v13 + v57);
  uint64_t v59 = (_WORD *)(a2 + 2 * v58);
  if (v11 > v58)
  {
    uint64_t v60 = (_WORD *)(a2 + 2 * v11);
    int v61 = v60;
    do
    {
      uint64_t v62 = *--v61;
      *uint64_t v60 = v62;
      uint64_t v60 = v61;
    }

    while (v61 > v59);
  }

  *uint64_t v59 = *(_WORD *)(a1 + 184);
  uint64_t result = sub_1000CB038(v13, 2LL * v12);
  ++*a3;
  return result;
}

      uint64_t v59 = *(void *)(*v69 + ((v51 >> 5) & 0x7FFFFF8));
      if (*(__int16 *)(v59 + 8LL * v51) == -2)
      {
        uint16x8_t v52 = *(unsigned __int16 *)(v59 + 8LL * v51 + 2) == 0;
        int v53 = v76;
        uint64_t v37 = a2;
        int32x4_t v54 = *v45;
        if (v49 >= *v45)
        {
LABEL_70:
          if (v52)
          {
            uint64_t v60 = v37 + (v53 << 7);
            int v61 = sub_1000BB868(v10, *(unsigned __int16 *)(v60 + 2LL * (v54 - 1) + 16), 0LL);
            uint64_t v62 = v43;
            uint64_t v63 = sub_1000BBBB0(v10, a4, a5, v61);
            uint64_t result = sub_1000BBBB0(v10, 0LL, 0, v61);
            uint64_t v37 = a2;
            uint64_t v64 = *(_DWORD *)(v60 + 12) - result + v63;
            int32x4_t v43 = v62;
            int32x4_t v38 = a6;
            *(_DWORD *)(v60 + 12) = v64;
            ++v47;
          }
        }
      }

      else
      {
        uint64_t v37 = a2;
      }

LABEL_39:
      if (++v17 == v5) {
        return;
      }
    }

    unsigned int v20 = *(_DWORD *)(a1 + 1104);
    goto LABEL_48;
  }

        uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *, const void *, int *))v5[121])(v5, a2, &v24);
        if (*((_DWORD *)v5 + 227)) {
          *((_DWORD *)v5 + 150) = *((_DWORD *)v5 + 150) == 0;
        }
        int v21 = qword_1000FDCC0;
        if (qword_1000FDCC0)
        {
          if (*(_DWORD *)(qword_1000FDCC0 + 3224)) {
            *((_DWORD *)v5 + 151) = *((_DWORD *)v5 + 151) == 0;
          }
          int v22 = *(uint64_t *)(v21 + 584) >= 1 && v6 == 1;
          if (v22 && !*((_DWORD *)v5 + 162))
          {
            unsigned int v23 = 1LL;
            do
            {
              if (*(void *)(v21 + 584) <= v23) {
                break;
              }
              uint64_t result = (uint64_t *)sub_100052A3C(v5, *(void *)(v5[80] + 8 * v23++), &v24);
              int v21 = qword_1000FDCC0;
            }

            while (qword_1000FDCC0);
          }
        }

        return result;
      }

      LOBYTE(v18) = 0;
      *((_DWORD *)v5 + 150) = v17 > *(void *)(v7 + 2960);
LABEL_29:
      uint64_t v24 = *a3;
      if (*((_DWORD *)v5 + 227)) {
        goto LABEL_30;
      }
      goto LABEL_39;
    }

    uint64_t v16 = sub_100015698(v5[48], (uint64_t)a2, v5[77]);
    BOOL v7 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      int v17 = v16;
      int8x16_t v18 = *(_DWORD *)(qword_1000FDCC0 + 3272);
      if (!v18) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }

      signed int v12 = 0;
      ++v11;
    }

    while (v11 < v6[1]);
LABEL_42:
    uint64_t v6 = (int *)*((void *)v6 + 2);
    if (v6) {
      continue;
    }
    return (_DWORD)a4 == (_DWORD)a2;
  }

  sub_10006D83C(v9);
  return 0LL;
}

    else {
      unsigned int v29 = v13;
    }
    if (v13 >= 0) {
      LOWORD(v16) = v29;
    }
    else {
      LOWORD(v16) = 0;
    }
    return (__int16)v16;
  }

  LOWORD(v16) = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v16 = *(void *)(qword_1000FDCC0 + 3624);
    if ((v16 & 0x80000000) != 0)
    {
      LOWORD(v16) = 0;
    }

    else if (v16 >> 15)
    {
      LOWORD(v16) = 0x7FFF;
    }
  }

  return (__int16)v16;
}

      uint64_t v10 = v77;
    }
  }

      uint16x8_t v52 = *v16++;
      int v17 = v52;
      if (*(_BYTE *)(v18 + v52) != 2)
      {
        if (v14 == 1) {
          goto LABEL_48;
        }
LABEL_44:
        uint64_t v56 = *v16;
        if (*(_BYTE *)(v18 + v56) != 2)
        {
LABEL_47:
          LODWORD(v17) = v17 | ((_DWORD)v56 << 8);
          goto LABEL_48;
        }

        uint16x8_t v51 = (unsigned __int8 *)(*(void *)(v13 + 88) + *(unsigned __int16 *)(*(void *)(v13 + 104) + 2 * v56));
LABEL_46:
        LODWORD(v56) = *v51;
        goto LABEL_47;
      }

      int v53 = *(void *)(v13 + 104);
      int32x4_t v54 = *(unsigned __int16 *)(v53 + 2 * v17);
      uint16x8_t v50 = *(unsigned __int16 *)(v53 + 2 * v17 + 2) + ~(_DWORD)v54;
      int32x4_t v55 = (unsigned __int8 *)(*(void *)(v13 + 88) + v54);
      uint16x8_t v51 = v55 + 1;
      LODWORD(v17) = *v55;
      if (v14 == 1) {
        goto LABEL_48;
      }
LABEL_41:
      if (v50) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }

    goto LABEL_33;
  }

  uint64_t v26 = v13 + 376;
  unsigned int v27 = v67 + 1;
  uint64_t v28 = *v67;
  if (*(_BYTE *)(v13 + 376 + v28) != 2)
  {
    uint64_t v31 = v69;
    if ((_DWORD)v28 != 255) {
      goto LABEL_12;
    }
LABEL_17:
    if (v31)
    {
      int32x4_t v35 = v31 - 1;
      uint64_t v36 = v68;
      uint64_t v37 = ++v68;
      LODWORD(v33) = *v36;
      if (*(__int16 *)(v13 + 752) == -1)
      {
LABEL_58:
        unsigned int v67 = v27;
        LODWORD(v69) = v35;
        if (!(_DWORD)v33) {
          goto LABEL_68;
        }
        goto LABEL_59;
      }
    }

    else
    {
      unsigned int v27 = v67 + 2;
      int v33 = v67[1];
      if (*(_BYTE *)(v26 + v33) != 2)
      {
        goto LABEL_55;
      }

      int32x4_t v38 = *(void *)(v13 + 104);
      int32x4_t v39 = *(unsigned __int16 *)(v38 + 2 * v33);
      int32x4_t v35 = *(unsigned __int16 *)(v38 + 2 * v33 + 2) + ~(_DWORD)v39;
      int32x4_t v40 = (unsigned __int8 *)(*(void *)(v13 + 88) + v39);
      uint64_t v37 = v40 + 1;
      unsigned int v68 = v40 + 1;
      LODWORD(v33) = *v40;
    }

    if (v35)
    {
      --v35;
LABEL_57:
      unsigned int v68 = v37 + 1;
      goto LABEL_58;
    }

  sub_1000CB038(v45, v43);
  sub_1000CB038(v15, v57);
  return v53;
}

  uint64_t v62 = -1;
LABEL_40:
  uint64_t v63 = sub_1000BE644(v62, 4, v60);
  uint64_t v64 = sub_1000BE644(v63, 4, v26);
  uint64_t v65 = sub_1000BE770(*(unint64_t **)(a1 + 160), 4, 17, 0xFFFFFFFFLL);
  uint64_t v66 = sub_1000BE644(v65, 4, v64);
  unsigned int v67 = *(unint64_t **)(a1 + 184);
  if (!v67) {
    return v66;
  }
  unsigned int v68 = sub_1000BE770(v67, 2, *(_DWORD *)(a1 + 176), 0xFFFFFFFFLL);
  return sub_1000BE644(v68, 4, v66);
}

  *(_DWORD *)(v15 + 80) += v9 + 2;
  ++*(_DWORD *)(v15 + 124);
  return result;
}

      sub_10009DD60(v7);
      return 0LL;
    }
  }

          uint64_t v103 = v102;
LABEL_40:
          v110 = v103 + 1LL;
          if ((_DWORD)v110 != v94)
          {
            int v111 = &v95[16 * v103 + 32];
            v112 = (void **)&v95[16 * v110];
            v113 = 16 * (v94 - v103) - 32;
            v98 = v80;
            int v99 = v84;
            v114 = v85;
            j__memmove(v111, v112, v113);
            *(_DWORD *)v112 = v99;
            memcpy(v112[1], v71, v28);
            uint64_t v79 = v146;
            uint64_t v85 = v114;
LABEL_42:
            unsigned int v84 = v99;
            unsigned int v80 = v98;
          }
        }

    sub_1000C8480(a4, v24, v21);
    sub_1000C0EF8(v22);
    goto LABEL_40;
  }

  if ((int)v14 < 1)
  {
LABEL_40:
    if (*a2 >= 1)
    {
      uint16x8_t v52 = 0LL;
      do
      {
        *(void *)(*(void *)(*((void *)a2 + 1) + 8 * v52) + 8 * v52) = 0x3FF0000000000000LL;
        ++v52;
      }

      while (v52 < *a2);
    }

    return 0LL;
  }

  int32x4_t v54 = 0LL;
  int32x4_t v55 = 1LL;
  while (*(double *)(*(void *)(*((void *)a3 + 1) + 8 * v54) + 8 * v54) != 0.0)
  {
    uint64_t v56 = v54 + 1;
    if (v54 + 1 < *a3)
    {
      uint64_t v57 = v55;
      do
      {
        uint64_t v59 = *((void *)a3 + 1);
        uint64_t v60 = *(void *)(v59 + 8 * v57);
        int v61 = *(double *)(v60 + 8 * v54) / *(double *)(*(void *)(v59 + 8 * v54) + 8 * v54);
        if (a3[1] >= 1)
        {
          uint64_t v62 = 0LL;
          do
          {
            *(double *)(*(void *)(*((void *)a3 + 1) + 8 * v57) + 8 * v62) = *(double *)(*(void *)(*((void *)a3 + 1) + 8 * v57)
                                                                                          + 8 * v62)
                                                                              + -v61
            ++v62;
          }

          while (v62 < a3[1]);
          uint64_t v60 = *(void *)(*((void *)a3 + 1) + 8 * v57);
        }

        *(void *)(v60 + 8 * v54) = 0LL;
        uint16x8_t v58 = *(void *)(*((void *)a2 + 1) + 8 * v57++);
        *(double *)(v58 + 8 * v54) = v61;
      }

      while (*a3 > (int)v57);
    }

    ++v55;
    ++v54;
    if (v56 == v14) {
      goto LABEL_40;
    }
  }

  return 1LL;
}

  sub_1000C0EF8(v35);
  *(void *)&int32x4_t v35 = 0LL;
  uint64_t v26 = HIDWORD(v35) - a3;
  if (HIDWORD(v35) - a3 >= a4) {
    uint64_t v26 = a4;
  }
  if (v26 < 1) {
    goto LABEL_54;
  }
  unsigned int v27 = v26 & ~(v26 >> 31);
  uint64_t v28 = (int)v37 + (uint64_t)a3 + (unsigned __int16)v36;
  unsigned int v29 = *(FILE **)(a1 + 32);
  if (v29)
  {
    unsigned int v23 = 0LL;
    if (j__fseek(v29, v28, 0)) {
      goto LABEL_55;
    }
    uint64_t v30 = *(FILE **)(a1 + 32);
    uint64_t v31 = *(unsigned __int16 *)(a1 + 16);
    if (v30)
    {
      unsigned int v23 = j__fread(a5, 1uLL, v27, v30);
      goto LABEL_53;
    }
  }

  else
  {
    if ((v28 & 0x80000000) != 0)
    {
      unsigned int v23 = 0LL;
      goto LABEL_60;
    }

    *(_DWORD *)(a1 + 48) = v28;
    uint64_t v31 = *(unsigned __int16 *)(a1 + 16);
  }

  unint64_t v32 = *(int *)(a1 + 48);
  int v33 = *(_DWORD *)(a1 + 52) - v32;
  else {
    unsigned int v23 = v33;
  }
  memcpy(a5, (const void *)(*(void *)(a1 + 40) + v32), (int)v23);
  *(_DWORD *)(a1 + 48) += v23;
LABEL_53:
  if (v31 == 1) {
    sub_1000BE8C0((uint64_t)a5, (int)v23, (uint64_t)a5);
  }
LABEL_55:
  int32x4_t v34 = *(FILE **)(a1 + 32);
  if (v34)
  {
    j__fseek(v34, v21, 0);
    goto LABEL_32;
  }

void sub_1000080D8(uint64_t a1)
{
  if (*(int *)(a1 + 1084) >= 1)
  {
    int v2 = 0;
    do
      sub_100007B44(a1, (unsigned __int16)v2++);
    while (*(_DWORD *)(a1 + 1084) > (int)(unsigned __int16)v2);
  }

uint64_t sub_100008120(uint64_t result)
{
  *(void *)(result + 32) = *(void *)(result + 40);
  *(void *)(result + 64) = *(void *)(result + 72);
  if (*(_DWORD *)(result + 1044))
  {
    uint64_t v1 = *(void *)(result + 88);
    *(void *)(result + 48) = *(void *)(result + 56);
    *(void *)(result + 80) = v1;
  }

  else
  {
    *(void *)(result + 48) = 0LL;
    *(void *)(result + 80) = 0LL;
  }

  return result;
}

uint64_t sub_100008160(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 1120);
  int v6 = *(_DWORD *)(a1 + 996);
  uint64_t v7 = 1080LL;
  if (!a3) {
    uint64_t v7 = 1072LL;
  }
  uint64_t v8 = 1184LL;
  if (!a3) {
    uint64_t v8 = 1180LL;
  }
  int v9 = *(_DWORD *)(a1 + v8);
  int v10 = *(_DWORD *)(a1 + v7);
  uint64_t v11 = *(void *)(a1 + 168);
  if (*(_DWORD *)(a1 + 1036))
  {
    if (!*(void *)(a1 + 1536))
    {
      uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 1100));
      *(void *)(a1 + 1536) = result;
      if (!result) {
        return result;
      }
    }

    if (!*(void *)(a1 + 1528))
    {
      uint64_t result = sub_1000C1074(*(int *)(a1 + 1100));
      *(void *)(a1 + 1528) = result;
      if (!result) {
        return result;
      }
    }
  }

  if (!*(void *)(a1 + 24) && !*(void *)(a1 + 152) && !v11 && v6)
  {
    int v13 = v9 * v5;
    *(_DWORD *)(a1 + 1084) = v10;
    *(_DWORD *)(a1 + 1088) = v9;
    if (*(_DWORD *)(a1 + 1032))
    {
      size_t v14 = 4LL * (v13 / 4);
      uint64_t result = sub_1000C1074(v14);
      *(void *)(a1 + 152) = result;
      if (!result) {
        return result;
      }
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 136), v14);
        uint64_t result = *(void *)(a1 + 152);
      }

      *(void *)(a1 + 136) = result;
      if (!*(_DWORD *)(a1 + 1032))
      {
LABEL_58:
        *(void *)(a1 + 32) = *(void *)(a1 + 40);
        *(void *)(a1 + 64) = *(void *)(a1 + 72);
        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t v20 = *(void *)(a1 + 56);
          uint64_t v21 = *(void *)(a1 + 88);
        }

        else
        {
          uint64_t v20 = 0LL;
          uint64_t v21 = 0LL;
        }

        *(void *)(a1 + 48) = v20;
        *(void *)(a1 + 80) = v21;
        goto LABEL_11;
      }
    }

    else
    {
      size_t v19 = v13;
      uint64_t result = sub_1000C1074(v13);
      *(void *)(a1 + 24) = result;
      if (!result) {
        return result;
      }
      if (a2)
      {
        memcpy((void *)result, *(const void **)(a1 + 16), v19);
        uint64_t result = *(void *)(a1 + 24);
      }

      *(void *)(a1 + 16) = result;
      if (!*(_DWORD *)(a1 + 1032)) {
        goto LABEL_58;
      }
    }

    if (!*(_DWORD *)(a1 + 1760))
    {
      if (*(_DWORD *)(a1 + 1108)) {
        goto LABEL_57;
      }
      if (!*(void *)(a1 + 40) && !*(void *)(a1 + 56))
      {
        uint64_t result = sub_1000C1074(4LL * v9);
        *(void *)(a1 + 40) = result;
        if (!result) {
          return result;
        }
        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t result = sub_1000C1074(4LL * v9);
          *(void *)(a1 + 56) = result;
          if (!result) {
            return result;
          }
        }

        if (a2)
        {
          memcpy(*(void **)(a1 + 40), *(const void **)(a1 + 32), 4LL * v9);
          if (*(_DWORD *)(a1 + 1044)) {
            memcpy(*(void **)(a1 + 56), *(const void **)(a1 + 48), 4LL * v9);
          }
        }
      }

      if (*(_DWORD *)(a1 + 1108))
      {
LABEL_57:
        if (!*(void *)(a1 + 72) && !*(void *)(a1 + 88))
        {
          uint64_t result = sub_1000C1074(2LL * v9);
          *(void *)(a1 + 72) = result;
          if (!result) {
            return result;
          }
          if (*(_DWORD *)(a1 + 1044))
          {
            uint64_t result = sub_1000C1074(2LL * v9);
            *(void *)(a1 + 88) = result;
            if (!result) {
              return result;
            }
          }

          if (a2)
          {
            memcpy(*(void **)(a1 + 72), *(const void **)(a1 + 64), 2LL * v9);
            if (*(_DWORD *)(a1 + 1044)) {
              memcpy(*(void **)(a1 + 88), *(const void **)(a1 + 80), 2LL * v9);
            }
          }
        }
      }
    }

    goto LABEL_58;
  }

void *sub_1000085A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  uint64_t v11 = (void *)sub_1000CAF58(4LL * *(int *)(a1 + 1100), a2, a3, a4, a5, a6, a7, a8);
  bzero(v11, 4LL * *(int *)(a1 + 1100));
  if (*(_DWORD *)(a1 + 2012) || *(_DWORD *)(a1 + 1072) <= (signed int)v9)
  {
    int v13 = 1;
  }

  else if (*(_DWORD *)(a1 + 1176))
  {
    signed int v12 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * v9);
    int v13 = v12[1] - *v12;
    if (v13 <= 0) {
      goto LABEL_14;
    }
  }

  else
  {
    size_t v18 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * v9);
    int v13 = v18[1] - *v18;
    if (v13 <= 0)
    {
LABEL_14:
      LODWORD(v15) = *(_DWORD *)(a1 + 1100);
      goto LABEL_15;
    }
  }

  int v14 = 0;
  unint64_t v24 = 0LL;
  do
  {
    sub_100004868(a1, v9, v14, &v24);
    LODWORD(v15) = *(_DWORD *)(a1 + 1100);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v24;
      do
      {
        *((_DWORD *)v11 + v16) += *(unsigned __int8 *)(v17 + v16);
        ++v16;
        uint64_t v15 = *(int *)(a1 + 1100);
      }

      while (v16 < v15);
    }

    ++v14;
  }

  while (v14 != v13);
LABEL_15:
  if ((int)v15 <= 0)
  {
    uint64_t v22 = (int)v15;
  }

  else
  {
    uint64_t v19 = 0LL;
    if (v13 >= 0) {
      int v20 = v13;
    }
    else {
      int v20 = v13 + 1;
    }
    int v21 = v20 >> 1;
    do
    {
      *(_BYTE *)(a3 + v19) = (*((_DWORD *)v11 + v19) + v21) / v13;
      ++v19;
      uint64_t v22 = *(int *)(a1 + 1100);
    }

    while (v19 < v22);
  }

  return sub_1000CB038(v11, 4 * v22);
}

int *sub_10000870C(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result >= 1)
    {
      uint64_t v2 = 0LL;
      do
      {
        uint64_t v3 = *((void *)v1 + 3);
        if (v3)
        {
          sub_1000C0EF8(*(void *)(v3 + 8 * v2));
          *(void *)(*((void *)v1 + 3) + 8 * v2) = 0LL;
        }

        uint64_t v4 = *((void *)v1 + 5);
        if (v4)
        {
          sub_1000C0EF8(*(void *)(v4 + 8 * v2));
          *(void *)(*((void *)v1 + 5) + 8 * v2) = 0LL;
        }

        ++v2;
      }

      while (v2 < *v1);
    }

    sub_1000C0EF8(*((void *)v1 + 3));
    sub_1000C0EF8(*((void *)v1 + 5));
    *((void *)v1 + 3) = 0LL;
    *((void *)v1 + 5) = 0LL;
    return (int *)sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

int *sub_1000087B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1800);
  if (v2)
  {
    sub_1000C0EF8(v2);
    *(_OWORD *)(a1 + 1792) = 0u;
    sub_1000C0EF8(*(void *)(a1 + 1832));
    *(void *)(a1 + 1832) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 1152));
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1168));
  *(_OWORD *)(a1 + 1160) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 24));
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 152));
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 40));
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 72));
  *(_OWORD *)(a1 + 64) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 56));
  *(_OWORD *)(a1 + 48) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 88));
  *(_OWORD *)(a1 + 80) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1584));
  *(void *)(a1 + 1584) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1592));
  *(void *)(a1 + 1592) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 168));
  *(_OWORD *)(a1 + 160) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 184));
  *(_OWORD *)(a1 + 176) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 200));
  *(_OWORD *)(a1 + 192) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1264));
  *(void *)(a1 + 1224) = 0LL;
  *(void *)(a1 + 1264) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1248));
  *(void *)(a1 + 1208) = 0LL;
  *(void *)(a1 + 1248) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1256));
  *(void *)(a1 + 1216) = 0LL;
  *(void *)(a1 + 1256) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1272));
  *(void *)(a1 + 1232) = 0LL;
  *(void *)(a1 + 1272) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1280));
  *(void *)(a1 + 1280) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1288));
  *(void *)(a1 + 1240) = 0LL;
  *(void *)(a1 + 1288) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1376));
  *(_OWORD *)(a1 + 1368) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1416));
  *(_OWORD *)(a1 + 1408) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1848));
  *(_OWORD *)(a1 + 1840) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1904));
  *(_OWORD *)(a1 + 1896) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1336));
  *(_OWORD *)(a1 + 1328) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1360));
  *(_OWORD *)(a1 + 1352) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 2040));
  *(_OWORD *)(a1 + 2032) = 0u;
  if (*(_DWORD *)(a1 + 1004) || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3864))
  {
    sub_1000C0EF8(*(void *)(a1 + 528));
    *(void *)(a1 + 528) = 0LL;
    *(void *)(a1 + 520) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 544));
    *(void *)(a1 + 544) = 0LL;
    *(void *)(a1 + 536) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 560));
    *(void *)(a1 + 560) = 0LL;
    *(void *)(a1 + 552) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 608));
    *(void *)(a1 + 608) = 0LL;
    *(void *)(a1 + 600) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 624));
    *(void *)(a1 + 624) = 0LL;
    *(void *)(a1 + 616) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 592));
    *(void *)(a1 + 592) = 0LL;
    *(void *)(a1 + 584) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 648));
    *(void *)(a1 + 648) = 0LL;
    *(void *)(a1 + 640) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 632));
    *(void *)(a1 + 632) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 568));
    *(void *)(a1 + 568) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 504));
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 240));
  *(void *)(a1 + 240) = 0LL;
  sub_100011C6C(a1);
  if (*(_DWORD *)(a1 + 1032))
  {
    if (*(_DWORD *)(a1 + 1760)) {
      uint64_t v3 = 1560LL;
    }
    else {
      uint64_t v3 = 1552LL;
    }
    sub_1000C0EF8(*(void *)(a1 + v3));
    *(void *)(a1 + v3) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 1512));
  *(void *)(a1 + 1512) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1520));
  *(void *)(a1 + 1520) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1528));
  *(void *)(a1 + 1528) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1536));
  *(void *)(a1 + 1536) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1544));
  *(void *)(a1 + 1544) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1552));
  *(void *)(a1 + 1552) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1936));
  *(_OWORD *)(a1 + 1928) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1952));
  *(_OWORD *)(a1 + 1944) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1448));
  *(void *)(a1 + 1448) = 0LL;
  sub_100038820(*(void *)(a1 + 1304));
  *(void *)(a1 + 1304) = 0LL;
  sub_10001D29C(a1);
  uint64_t result = sub_10000870C(*(int **)(a1 + 928));
  *(void *)(a1 + 928) = 0LL;
  return result;
}

uint64_t sub_100008B24(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_10000B1AC(result);
    sub_1000087B0(v1);
    uint64_t v2 = *(void **)(v1 + 744);
    if (v2)
    {
      uint64_t v4 = v2 + 7;
      uint64_t v3 = v2[7];
      int v5 = *(uint64_t **)(v1 + 744);
      if (v3)
      {
        uint64_t v6 = *(unsigned int *)(v1 + 1884);
        if ((int)v6 >= 1)
        {
          uint64_t v7 = 0LL;
          uint64_t v8 = 8 * v6;
          do
          {
            sub_1000C0EF8(*(void *)(v2[7] + v7));
            sub_1000C0EF8(*(void *)(v2[8] + v7));
            v7 += 8LL;
          }

          while (v8 != v7);
          uint64_t v3 = *v4;
        }

        sub_1000C0EF8(v3);
        sub_1000C0EF8(v2[8]);
        *uint64_t v4 = 0LL;
        v2[8] = 0LL;
        int v5 = *(uint64_t **)(v1 + 744);
      }

      int v10 = v5 + 10;
      uint64_t v9 = v5[10];
      if (v9)
      {
        uint64_t v11 = *(unsigned int *)(v1 + 1884);
        if ((int)v11 >= 1)
        {
          uint64_t v12 = 0LL;
          uint64_t v13 = 8 * v11;
          do
          {
            sub_1000C0EF8(*(void *)(v5[10] + v12));
            sub_1000C0EF8(*(void *)(v5[11] + v12));
            v12 += 8LL;
          }

          while (v13 != v12);
          uint64_t v9 = *v10;
        }

        sub_1000C0EF8(v9);
        sub_1000C0EF8(v5[11]);
        *int v10 = 0LL;
        v5[11] = 0LL;
        int v5 = *(uint64_t **)(v1 + 744);
      }

      sub_1000C0EF8(v5[6]);
      v5[6] = 0LL;
      sub_1000C0EF8(v5[1]);
      sub_1000C0EF8(v5[2]);
      sub_1000C0EF8(v5[3]);
      sub_1000C0EF8(v5[4]);
      sub_1000C0EF8(v5[5]);
      v5[5] = 0LL;
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 1) = 0u;
      sub_1000C0EF8(v2[9]);
      sub_1000C0EF8(v2[12]);
      sub_1000C0EF8(v2[13]);
      v2[13] = 0LL;
      sub_1000C0EF8((uint64_t)v2);
      *(void *)(v1 + 744) = 0LL;
    }

    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100008C98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 744);
  if (!v2)
  {
    uint64_t result = sub_1000C1074(112LL);
    uint64_t v2 = (void *)result;
    *(void *)(a1 + 744) = result;
    if (!result) {
      return result;
    }
  }

  uint64_t v4 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (!*(_DWORD *)(qword_1000FDCC0 + 1224)) {
      goto LABEL_176;
    }
    int v5 = *(_DWORD *)(a1 + 1884);
    if (v2[6])
    {
      uint64_t result = sub_1000C1074(2LL * (v5 + 1));
      if (!result) {
        return result;
      }
    }

    else
    {
      uint64_t result = sub_1000C1074(2LL * (v5 + 1));
      v2[6] = result;
      if (!result) {
        return result;
      }
      if ((v5 & 0x80000000) == 0)
      {
        int v10 = 0;
        do
          *(_WORD *)(v2[6] + 2LL * (unsigned __int16)v10++) = *(_DWORD *)(a1 + 1384);
        while (v5 >= (unsigned __int16)v10);
        if (v5 >= 1)
        {
          for (unsigned __int16 i = 0; i < v5; ++i)
          {
            unsigned __int16 v12 = 0;
            do
            {
              unsigned __int16 v13 = 0;
              uint64_t v14 = v12;
              do
              {
                unsigned int v15 = sub_1000057B0(a1, i, v14, v13, v6, v7, v8, v9);
                uint64_t v16 = v2[6];
                ++v13;
              }

              while (v5 > v13);
              unsigned __int16 v12 = v14 + 1;
            }

            while (v5 > (unsigned __int16)(v14 + 1));
          }
        }
      }

      int v5 = *(_DWORD *)(a1 + 1884);
      uint64_t v2 = *(void **)(a1 + 744);
      uint64_t result = sub_1000C1074(2LL * (v5 + 1));
      if (!result) {
        return result;
      }
    }

    unint64_t v17 = (__int16 *)result;
    uint64_t result = sub_1000C1074(8LL * v5);
    v2[7] = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C1074(8LL * v5);
    v2[8] = result;
    if (!result) {
      return result;
    }
    if (v5 >= 1)
    {
      int v18 = 0;
      unsigned __int16 v19 = 0;
      while (1)
      {
        uint64_t v20 = v19;
        int v21 = *(unsigned __int16 *)(v2[6] + 2LL * (v18 + 1)) - *(unsigned __int16 *)(v2[6] + 2LL * v19);
        int v22 = v21 + 7;
        int v23 = v21 + 14;
        if (v22 >= 0) {
          int v23 = v22;
        }
        int v24 = (v23 >> 3) + 2;
        uint64_t v25 = 8 * v20;
        *(void *)(v2[7] + 8 * v20) = sub_1000C1074(v24 * v5);
        if (!*(void *)(v2[7] + 8 * v20)) {
          break;
        }
        *(void *)(v2[8] + 8 * v20) = sub_1000C1074(2LL * v5);
        if (!*(void *)(v2[8] + 8 * v20)) {
          break;
        }
        uint64_t v30 = 0LL;
        unsigned __int16 v31 = 0;
        uint64_t v141 = v24;
        do
        {
          *(_WORD *)(*(void *)(v2[8] + v25) + 2LL * v31) = v30;
          uint64_t v143 = *(void *)(v2[7] + v25);
          int v32 = *(_DWORD *)(a1 + 1884);
          __int16 v33 = sub_1000057B0(a1, v31, v20, 0LL, v26, v27, v28, v29);
          *unint64_t v17 = v33;
          if (v32 < 1)
          {
            int v39 = 1;
          }

          else
          {
            unsigned __int16 v38 = 0;
            int v39 = 1;
            do
            {
              int v40 = sub_1000057B0(a1, v31, v20, v38, v34, v35, v36, v37);
              if (v39 <= 0 || (unsigned __int16)*v17 == v40)
              {
                int v41 = 0;
              }

              else
              {
                unsigned __int16 v42 = 0;
                do
                  int v41 = ++v42;
                while (v39 > v42 && (unsigned __int16)v17[v42] != v40);
              }

              if (v39 == v41) {
                v17[v39++] = v40;
              }
              ++v38;
            }

            while (v32 > v38);
            __int16 v33 = *v17;
          }

          int32x4_t v43 = (_WORD *)(v143 + v30);
          v17[v39] = v33;
          qsort(v17, v39, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100005A7C);
          __int16 v48 = sub_1000057B0(a1, v31, v20, 0LL, v44, v45, v46, v47);
          uint64_t v49 = (unsigned __int16)v39;
          if ((_WORD)v39)
          {
            uint16x8_t v50 = (unsigned __int16 *)v17;
            do
            {
              int v51 = *v50++;
              unint64_t v52 = v51 - *(unsigned __int16 *)(v2[6] + 2 * v20);
              *((_BYTE *)v43 + (v52 >> 3) + 2) |= byte_1000F166C[v52 & 7];
              --v49;
            }

            while (v49);
          }

          *int32x4_t v43 = v48;
          uint64_t v25 = 8 * v20;
          v30 += v141;
          ++v31;
        }

        while (v5 > v31);
        unsigned __int16 v19 = v20 + 1;
        int v18 = (unsigned __int16)(v20 + 1);
        if (v5 <= v18) {
          goto LABEL_51;
        }
      }

      uint64_t v102 = (uint64_t)v17;
      goto LABEL_154;
    }

LABEL_51:
    sub_1000C0EF8((uint64_t)v17);
    uint64_t v4 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
LABEL_176:
      if (!*(_DWORD *)(v4 + 1232)) {
        goto LABEL_175;
      }
      int v53 = *(_DWORD *)(a1 + 1884);
      int32x4_t v54 = *(void **)(a1 + 744);
      if (!v54[6])
      {
        uint64_t result = sub_1000C1074(2LL * (v53 + 1));
        v54[6] = result;
        if (!result) {
          return result;
        }
        if ((v53 & 0x80000000) == 0)
        {
          int v59 = 0;
          do
            *(_WORD *)(v54[6] + 2LL * (unsigned __int16)v59++) = *(_DWORD *)(a1 + 1384);
          while (v53 >= (unsigned __int16)v59);
          if (v53 >= 1)
          {
            for (unsigned __int16 j = 0; j < v53; ++j)
            {
              unsigned __int16 v61 = 0;
              do
              {
                unsigned __int16 v62 = 0;
                uint64_t v63 = v61;
                do
                {
                  unsigned int v64 = sub_1000057B0(a1, j, v63, v62, v55, v56, v57, v58);
                  uint64_t v65 = v54[6];
                  ++v62;
                }

                while (v53 > v62);
                unsigned __int16 v61 = v63 + 1;
              }

              while (v53 > (unsigned __int16)(v63 + 1));
            }
          }
        }

        int v53 = *(_DWORD *)(a1 + 1884);
        int32x4_t v54 = *(void **)(a1 + 744);
      }

      uint64_t result = sub_1000C1074(2LL * (v53 + 1));
      if (!result) {
        return result;
      }
      uint64_t v66 = (__int16 *)result;
      uint64_t result = sub_1000C1074(8LL * v53);
      v54[10] = result;
      if (!result) {
        return result;
      }
      uint64_t result = sub_1000C1074(8LL * v53);
      v54[11] = result;
      if (!result) {
        return result;
      }
      if (v53 >= 1)
      {
        int v67 = 0;
        unsigned __int16 v68 = 0;
        while (1)
        {
          uint64_t v69 = v68;
          int v71 = v70 + 7;
          int v72 = v70 + 14;
          if (v71 >= 0) {
            int v72 = v71;
          }
          int v73 = (v72 >> 3) + 2;
          uint64_t v74 = 8 * v69;
          *(void *)(v54[10] + 8 * v69) = sub_1000C1074(v73 * v53);
          if (!*(void *)(v54[10] + 8 * v69)) {
            break;
          }
          *(void *)(v54[11] + 8 * v69) = sub_1000C1074(2LL * v53);
          if (!*(void *)(v54[11] + 8 * v69)) {
            break;
          }
          uint64_t v79 = 0LL;
          unsigned __int16 v80 = 0;
          uint64_t v142 = v73;
          do
          {
            *(_WORD *)(*(void *)(v54[11] + v74) + 2LL * v80) = v79;
            uint64_t v144 = *(void *)(v54[10] + v74);
            int v81 = *(_DWORD *)(a1 + 1884);
            __int16 v82 = sub_1000057B0(a1, 0LL, v69, v80, v75, v76, v77, v78);
            *uint64_t v66 = v82;
            if (v81 < 1)
            {
              int v88 = 1;
            }

            else
            {
              unsigned __int16 v87 = 0;
              int v88 = 1;
              do
              {
                int v89 = sub_1000057B0(a1, v87, v69, v80, v83, v84, v85, v86);
                if (v88 <= 0 || (unsigned __int16)*v66 == v89)
                {
                  int v90 = 0;
                }

                else
                {
                  unsigned __int16 v91 = 0;
                  do
                    int v90 = ++v91;
                  while (v88 > v91 && (unsigned __int16)v66[v91] != v89);
                }

                if (v88 == v90) {
                  v66[v88++] = v89;
                }
                ++v87;
              }

              while (v81 > v87);
              __int16 v82 = *v66;
            }

            unsigned __int16 v92 = (_WORD *)(v144 + v79);
            v66[v88] = v82;
            qsort(v66, v88, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100005A7C);
            __int16 v97 = sub_1000057B0(a1, 0LL, v69, v80, v93, v94, v95, v96);
            uint64_t v98 = (unsigned __int16)v88;
            if ((_WORD)v88)
            {
              int v99 = (unsigned __int16 *)v66;
              do
              {
                int v100 = *v99++;
                unint64_t v101 = v100 - *(unsigned __int16 *)(v54[6] + 2 * v69);
                *((_BYTE *)v92 + (v101 >> 3) + 2) |= byte_1000F166C[v101 & 7];
                --v98;
              }

              while (v98);
            }

            *unsigned __int16 v92 = v97;
            uint64_t v74 = 8 * v69;
            v79 += v142;
            ++v80;
          }

          while (v53 > v80);
          unsigned __int16 v68 = v69 + 1;
          int v67 = (unsigned __int16)(v69 + 1);
          if (v53 <= v67) {
            goto LABEL_99;
          }
        }

        uint64_t v102 = (uint64_t)v66;
LABEL_154:
        sub_1000C0EF8(v102);
        return 0LL;
      }

          if (v30 < 0) {
            goto LABEL_78;
          }
        }

          uint64_t v34 = ((unint64_t)v31 - v30) >> 2;
          do
          {
            uint64_t v35 = *v31++;
            LODWORD(v34) = v34 + 1;
          }

          while (v35 != -1);
        }

        if ((int)v34 < (int)v18[8])
        {
          uint64_t v36 = (int)v34;
          do
            *(_DWORD *)(*((void *)v18 + 5) + 4 * v36++) = -1;
          while (v36 < (int)v18[8]);
        }

        if (v23) {
          sub_1000CB038(v23, (int)v20);
        }
        if ((int)v18[1] >= 1 && !sub_10004EB2C((_DWORD *)a1, v16, 0LL))
        {
          unsigned __int16 v42 = *((void *)v18 + 5);
          if (v42)
          {
            int32x4_t v43 = 0LL;
            do
              uint64_t v44 = *(_DWORD *)(v42 + 4 * v43++);
            while (v44 != -1);
            uint64_t v45 = v43 - 1;
            sub_10004EE2C(a1, v16, v43 - 1, *((__int128 **)v18 + 5), **((_DWORD **)v18 + 1));
          }

          else
          {
            uint64_t v45 = 0;
          }

          if (*(void *)(a1 + 5488) && *(_DWORD *)(a1 + 756) == 2 && *(void *)(a1 + 104) == *(void *)(a1 + 5512)) {
            sub_10004F858(a1, v16, v45, v42);
          }
        }

        uint64_t v37 = *(_DWORD *)(a1 + 752);
        if (v37 == 7 || v37 == 1)
        {
          int v39 = *(unsigned int *)(a1 + 1296);
          if ((int)v39 < 1)
          {
LABEL_69:
            sub_10004FA00(a1, (uint64_t)v18, v16);
          }

          else
          {
            int v40 = *(int **)(a1 + 1304);
            while (1)
            {
              int v41 = *v40++;
              if (v41 == v16) {
                break;
              }
              if (!--v39) {
                goto LABEL_69;
              }
            }
          }
        }

        goto LABEL_70;
      }

      int v21 = *(_DWORD *)(v19 + 24LL * v46);
      int v22 = sub_1000CAF58(*(unsigned int *)(v19 + 24LL * v46 + 4), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      int v23 = (void *)v22;
      for (unsigned __int16 j = 0LL; j != v20; ++j)
        *(_BYTE *)(v22 + j) = *(_BYTE *)(*(void *)(a1 + 216) + (v21 + (int)j) % *(_DWORD *)(a1 + 236));
    }

    else
    {
      int v23 = 0LL;
      LODWORD(v20) = 0;
    }

    *((void *)v18 + 11) = 0x7FFFFFFF00000000LL;
    uint64_t v25 = *(unsigned int *)(a1 + 1320);
    goto LABEL_28;
  }

  LODWORD(v10) = 0;
  uint64_t result = 0LL;
LABEL_71:
  *a3 = v10;
  return result;
}

  if ((v3 - 5) >= 2)
  {
    uint64_t v46 = *(_DWORD *)(a1 + 320);
  }

  else
  {
    ++*(_DWORD *)(a1 + 512);
    if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
    {
      uint64_t v45 = *(_DWORD *)(a1 + 472);
      uint64_t v46 = *(_DWORD *)(a1 + 320);
      if (v45 + 1 < v46) {
        uint64_t v47 = v45 + 1;
      }
      else {
        uint64_t v47 = 0;
      }
      *(_DWORD *)(a1 + 472) = v47;
    }

    else
    {
      uint16x8_t v50 = *(_DWORD *)(a1 + 468);
      uint64_t v46 = *(_DWORD *)(a1 + 320);
      if (v50 + 1 < v46) {
        int v51 = v50 + 1;
      }
      else {
        int v51 = 0;
      }
      *(_DWORD *)(a1 + 468) = v51;
    }
  }

  __int16 v48 = (*(_DWORD *)(a1 + 464) - *(_DWORD *)(a1 + 468) + v46) % v46 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v48 < 0) {
      goto LABEL_64;
    }
LABEL_63:
    goto LABEL_64;
  }

  v48 -= *(_DWORD *)(a1 + 332);
  if ((v48 & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_64:
  __int16 v48 = 0;
LABEL_65:
  if (v48 > *(_DWORD *)(a1 + 516)) {
    *(_DWORD *)(a1 + 516) = v48;
  }
  return v3;
}

        int v100 = 0;
        uint64_t v133 = 0LL;
        uint64_t v123 = 0LL;
        unint64_t v124 = 0LL;
        v121 = 0LL;
        unsigned __int16 v122 = 0LL;
        uint64_t v119 = 0LL;
        unsigned int v120 = 0LL;
        uint64_t v118 = 0LL;
        uint64_t v115 = 0LL;
        if (*v19) {
          goto LABEL_58;
        }
LABEL_52:
        if (v19[1])
        {
          unint64_t v101 = sub_1000398FC(*(void *)(a1 + 528));
          if (v19[1] && v101) {
            goto LABEL_60;
          }
        }

        else
        {
          unint64_t v101 = 1;
        }

        int v39 = v22;
        if (!v19[2])
        {
LABEL_59:
          if (v101)
          {
LABEL_60:
            sub_1000CB094(v117);
            return 0LL;
          }

          uint64_t v141 = 0LL;
          v142[0] = 0;
          int v139 = 0LL;
          uint64_t v140 = 0;
          if ((int)a2 < 1)
          {
            uint64_t v28 = 0LL;
            v110 = v117;
LABEL_78:
            sub_1000CB094(v110);
            return v28;
          }

          uint64_t v102 = v139;
          int v103 = HIDWORD(v139);
          uint64_t v104 = (int)v139 < v100;
          uint64_t v105 = SHIDWORD(v139) < v132;
          if (SHIDWORD(v139) >= v132)
          {
            uint64_t v107 = a4;
            uint64_t v106 = (uint64_t)a6;
            uint64_t v108 = a12;
            unsigned int v109 = (uint64_t)a3;
            v110 = v117;
            uint64_t v28 = 0LL;
            goto LABEL_78;
          }

          uint64_t v107 = a4;
          uint64_t v106 = (uint64_t)a6;
          uint64_t v108 = a12;
          unsigned int v109 = (uint64_t)a3;
          v110 = v117;
          while (1)
          {
LABEL_67:
            if (v105)
            {
              unsigned int v111 = v135[v103];
              int v112 = a11;
              if (!v104) {
                goto LABEL_69;
              }
            }

            else
            {
              unsigned int v111 = 0x40000000;
              int v112 = a11;
              if (!v104)
              {
LABEL_69:
                if (v111 >= 0x40000000) {
                  goto LABEL_70;
                }
                goto LABEL_73;
              }
            }

            if (v111 >= v133[v102])
            {
LABEL_70:
              uint64_t v113 = sub_1000B230C( a5,  v109,  v107,  v106,  a7,  a8,  a9,  a10,  v112,  v108,  v142,  &v140,  (uint64_t)v133,  v124,  (uint64_t)v123,  v122,  v120,  v119,  v118,  v121,  v115,  (int *)&v141,  (int *)&v139);
              goto LABEL_74;
            }

      __int16 v82 = sub_100039818(v59);
      sub_1000C0EF8(v77);
      sub_1000C0EF8(v68);
      uint64_t v7 = v159;
      sprintf(v6, "ChoiceNAScore[%d]", v159);
      sprintf((char *)v42, "%d", v82);
      sub_1000D8FE8(a2, (unsigned __int8 *)v6, (char *)v42);
      if (*(_DWORD *)(v2 + 1320))
      {
        v165 = 0LL;
        v164 = 0;
        int v90 = (void *)sub_1000CAF58(4LL * v167 + 4, v83, v84, v85, v86, v87, v88, v89);
        v161 = (void *)sub_1000CAF58(8LL * v167, v91, v92, v93, v94, v95, v96, v97);
        v158 = (void *)sub_1000CAF58(4LL * v167, v98, v99, v100, v101, v102, v103, v104);
        uint64_t v119 = (void *)sub_1000CAF58(4LL * v167, v105, v106, v107, v108, v109, v110, v111);
        unsigned int v120 = v167;
        if (v167 < 1)
        {
          unsigned __int16 v122 = 0;
        }

        else
        {
          v121 = 0LL;
          unsigned __int16 v122 = 0;
          do
          {
            while (1)
            {
              uint64_t v123 = *(_DWORD *)(v80 + 4 * v121);
              if (v123 == -2) {
                break;
              }
              *((_DWORD *)v90 + v121 - v122) = v123;
              unsigned int v120 = v167;
              if (++v121 >= v167) {
                goto LABEL_59;
              }
            }

            ++v122;
            ++v121;
          }

          while (v121 < v120);
        }

LABEL_99:
      sub_1000C0EF8((uint64_t)v66);
      uint64_t v4 = qword_1000FDCC0;
      if (qword_1000FDCC0)
      {
LABEL_175:
        if (*(_DWORD *)(v4 + 1120))
        {
          int v103 = *(_DWORD *)(a1 + 1884);
          uint64_t v104 = *(void *)(a1 + 744);
          uint64_t result = sub_1000C1074(8LL * *(int *)(a1 + 1384));
          *(void *)(v104 + 72) = result;
          if (!result) {
            return result;
          }
          if (v103 >= 1)
          {
            for (unsigned __int16 k = 0; k < v103; ++k)
            {
              for (unsigned __int16 m = 0; m < v103; ++m)
              {
                unsigned int v111 = 0;
                int v112 = 0;
                do
                {
                  uint64_t v113 = *(void *)(v104 + 72)
                       + 8LL * sub_1000057B0(a1, k, m, (unsigned __int16)v112, v105, v106, v107, v108);
                  *(_BYTE *)(v113 + ((unint64_t)v111 >> 3)) |= byte_1000F166C[v111 & 7];
                  unsigned int v111 = (unsigned __int16)++v112;
                }

                while (v103 > (unsigned __int16)v112);
              }
            }
          }
        }

        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1124))
        {
          int v114 = *(_DWORD *)(a1 + 1884);
          uint64_t v115 = *(void *)(a1 + 744);
          uint64_t result = sub_1000C1074(8LL * *(int *)(a1 + 1384));
          *(void *)(v115 + 96) = result;
          if (!result) {
            return result;
          }
          if (v114 >= 1)
          {
            unsigned int v120 = 0;
            for (n = 0; n < v114; unsigned int v120 = ++n)
            {
              unsigned __int16 v122 = 0;
              uint64_t v123 = v120 & 7;
              unint64_t v124 = (unint64_t)v120 >> 3;
              do
              {
                int v125 = 0;
                do
                {
                  uint64_t v126 = *(void *)(v115 + 96)
                       + 8LL * sub_1000057B0(a1, n, v122, (unsigned __int16)v125, v116, v117, v118, v119);
                  *(_BYTE *)(v126 + v124) |= byte_1000F166C[v123];
                  ++v125;
                }

                while (v114 > (unsigned __int16)v125);
                ++v122;
              }

              while (v114 > v122);
            }
          }
        }
      }
    }
  }

  uint64_t result = sub_1000C1074(*(int *)(a1 + 1100));
  *(void *)(a1 + 1544) = result;
  if (result)
  {
    uint64_t result = sub_1000C1074(*(int *)(a1 + 1100));
    *(void *)(a1 + 1512) = result;
    if (result)
    {
      uint64_t result = sub_1000C1074(*(int *)(a1 + 1100));
      *(void *)(a1 + 1520) = result;
      if (result)
      {
        if (!*(_DWORD *)(a1 + 1032) && !*(_DWORD *)(a1 + 1036)) {
          goto LABEL_177;
        }
        if (*(void *)(a1 + 1528)
          || (uint64_t result = sub_1000C1074(*(int *)(a1 + 1100)), (*(void *)(a1 + 1528) = result) != 0LL))
        {
          if (*(void *)(a1 + 1536)
            || (uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 1100)), (*(void *)(a1 + 1536) = result) != 0LL))
          {
            int v127 = *(_DWORD *)(a1 + 1760);
            uint64_t result = sub_1000C1074(4LL * *(int *)(a1 + 1128));
            if (v127)
            {
              *(void *)(a1 + 1560) = result;
              if (!result) {
                return result;
              }
            }

            else
            {
              *(void *)(a1 + 1552) = result;
              if (!result) {
                return result;
              }
            }

            if (!*(_DWORD *)(a1 + 724)
              || (uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 576)), (*(void *)(a1 + 568) = result) != 0LL))
            {
LABEL_177:
              if (!*(_DWORD *)(a1 + 1036)
                || (uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 1100)), (*(void *)(a1 + 1584) = result) != 0LL)
                && (uint64_t result = sub_1000C1074(4LL * *(int *)(a1 + 1132)), (*(void *)(a1 + 1592) = result) != 0LL))
              {
                int v128 = *(_DWORD *)(a1 + 1076);
                int v129 = -v128 & 3;
                BOOL v130 = __OFADD__(v129, v128);
                int v131 = v129 + v128;
                if (v131 < 0 != v130) {
                  ++v131;
                }
                int v132 = v131 >> 1;
                *(_DWORD *)(a1 + 1808) = v132;
                uint64_t result = sub_1000C1074(4LL * v132);
                *(void *)(a1 + 1800) = result;
                if (result)
                {
                  *(void *)(a1 + 1792) = result;
                  LODWORD(v133) = *(_DWORD *)(a1 + 1076);
                  if ((int)v133 >= 1)
                  {
                    uint64_t v134 = 0LL;
                    do
                    {
                      *(_WORD *)(*(void *)(a1 + 1792) + 2 * v134++) = 0x4000;
                      uint64_t v133 = *(int *)(a1 + 1076);
                    }

                    while (v134 < v133);
                  }

                  *(_DWORD *)(a1 + 1824) = 0;
                  int v135 = qword_1000FDCC0;
                  if (qword_1000FDCC0) {
                    int v135 = *(_DWORD *)(qword_1000FDCC0 + 440);
                  }
                  *(_DWORD *)(a1 + 1828) = v133;
                  if ((int)v133 < 1
                    || (uint64_t result = sub_1000C1074(2LL * v133), (*(void *)(a1 + 1832) = result) != 0LL))
                  {
                    *(_WORD *)(a1 + 1600) = -1;
                    if (*(_DWORD *)(a1 + 1016))
                    {
                      int v136 = *(_DWORD *)(a1 + 1296);
                      if (v136 == 5)
                      {
                        v137 = sub_1000154C8;
                        goto LABEL_157;
                      }

                      if (v136 == 2)
                      {
                        v137 = sub_100015224;
LABEL_157:
                        *(void *)(a1 + 1616) = v137;
                      }
                    }

                    if (!*(_DWORD *)(a1 + 1964) || (uint64_t result = sub_100011920(a1), (_DWORD)result))
                    {
                      if (qword_1000FDCC0)
                      {
                        if (*(_DWORD *)(qword_1000FDCC0 + 1064))
                        {
                          v138 = *(void (**)(uint64_t, void))(a1 + 1736);
                          if (v138) {
                            v138(a1, 0LL);
                          }
                        }
                      }

                      if (*(_DWORD *)(a1 + 1008))
                      {
                        *(_DWORD *)(a1 + 1080) = 0;
                        *(_DWORD *)(a1 + 1184) = 0;
                      }

                      else
                      {
                        if (*(_DWORD *)(a1 + 2012))
                        {
                          int v139 = *(_DWORD *)(a1 + 1080);
                        }

                        else
                        {
                          uint64_t v140 = *(int *)(a1 + 1080);
                          if (*(_DWORD *)(a1 + 1176)) {
                            int v139 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v140);
                          }
                          else {
                            int v139 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v140);
                          }
                        }

                        *(_DWORD *)(a1 + 1184) = v139;
                      }

                      return 1LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

          if (v223 >= v420) {
            v224 = v420;
          }
          else {
            v224 = v223;
          }
          if (v224 >= 255) {
            v225 = 255;
          }
          else {
            v225 = v224;
          }
          *(_BYTE *)(v165 + v186) = v225;
          if (v224 >= 1)
          {
            v226 = 0LL;
            if (v225 <= 1) {
              v227 = 1;
            }
            else {
              v227 = v225;
            }
            v228 = 8LL * v227;
            v229 = v436;
            do
            {
              *(void *)(*(void *)(v150 + 8 * v186) + v226) = v229;
              *(void *)(v221 + 8 * v186) = 0LL;
              v226 += 8LL;
              v229 = (_WORD *)((char *)v229 + v222);
            }

            while (v228 != v226);
          }

          v230 = v430[v186];
          v231 = *v52;
          if (v230 >> 30 == 1)
          {
            v232 = sub_10001EDF8(v434[1], (unsigned __int16)v430[v186], 0LL);
            v233 = v434[1];
            v150 = v433;
          }

          else
          {
            if (v230 >> 30 != 2) {
              goto LABEL_117;
            }
            v233 = v434[1];
            v232 = (unsigned __int16)v430[v186];
          }

          sub_10001ECA8(v233, v232);
LABEL_117:
          sub_100082D30(v231);
          if (v224 < 1)
          {
            v188 = 0;
            unint64_t v52 = v434;
            uint64_t v84 = v418;
          }

          else
          {
            v234 = v150;
            v235 = 0LL;
            v188 = 0;
            if (v225 <= 1) {
              v236 = 1;
            }
            else {
              v236 = v225;
            }
            v237 = 8LL * v236;
            do
            {
              v238 = *(const void **)(*(void *)(v234 + 8 * v186) + v235);
              v239 = sub_100099EE0((unint64_t)v238);
              v247 = v239 + 1;
              if (v239 >= v188) {
                v188 = v239 + 1;
              }
              v248 = (void *)sub_1000CAF58(2LL * v247, v240, v241, v242, v243, v244, v245, v246);
              j__memmove(v248, v238, 2 * v247);
              *(void *)(*(void *)(v234 + 8 * v186) + v235) = v248;
              v235 += 8LL;
            }

            while (v237 != v235);
            unint64_t v52 = v434;
            uint64_t v84 = v418;
            v150 = v234;
            v165 = v424;
          }

          v189 = v427;
          v187 = v400 != 0;
          goto LABEL_53;
        }

        v189 = v427;
        if (++v186 == v427) {
          goto LABEL_127;
        }
      }

      if (!v52[3]) {
        goto LABEL_259;
      }
      memcpy(__dst, &__src[v417[v186]], 2LL * *(int *)&v84[4 * v186]);
      *((_WORD *)__dst + *(int *)&v84[4 * v186]) = 0;
      v200 = v436;
      v201 = v415;
      v202 = sub_1000942C4( v52[3],  (unint64_t)__dst,  v187,  v436,  v415,  *(void *)(v432 + 8 * v186),  v411,  (uint64_t)v440 + 4);
      v203 = HIDWORD(v440[0]);
      if (SHIDWORD(v440[0]) >= 1)
      {
        v200 = (_WORD *)sub_1000CAF58(2LL * HIDWORD(v440[0]), v179, v180, v181, v182, v183, v184, v185);
        v202 = sub_1000942C4( v52[3],  (unint64_t)__dst,  v187,  v200,  v203,  *(void *)(v432 + 8 * v186),  v411,  (uint64_t)v440 + 4);
        v201 = v203;
      }

      v436 = v200;
      v204 = v202 >= 255 ? 255 : v202;
      *(_BYTE *)(v165 + v186) = v204;
      v415 = v201;
      if (v202 < 1) {
        break;
      }
      v205 = 0;
      v188 = 0;
      v206 = 0;
      do
      {
        while (1)
        {
          v207 = sub_100099EE0((unint64_t)v436);
          v215 = (void *)sub_1000CAF58(2LL * (v207 + 1), v208, v209, v210, v211, v212, v213, v214);
          j__memmove(v215, v436, 2 * (v207 + 1));
          v216 = v207 < v188;
          if (v207 > 254) {
            v216 = 1;
          }
          if (!v216) {
            v188 = v207 + 1;
          }
          v217 = sub_100082D38(*v434);
          __int16 v48 = v207 <= 254;
          v218 = v207 > 254;
          if (!v48 || !v217) {
            break;
          }
          *(void *)(*(void *)(v433 + 8 * v186) + 8LL * v206) = v215;
          v205 |= v218;
          if (++v206 >= v204) {
            goto LABEL_87;
          }
        }

        --v204;
        --*(_BYTE *)(v165 + v186);
        if (v204 > v206)
        {
          v219 = *(void *)(v432 + 8 * v186) + 8LL * v206;
          j__memmove((void *)v219, (const void *)(v219 + 8), 8 * (v204 - v206));
        }

        v205 |= v218;
      }

      while (v206 < v204);
LABEL_87:
      v189 = v427;
      v187 = v400 != 0;
      if (!v204)
      {
        unint64_t v52 = v434;
        uint64_t v84 = v418;
        if (v205)
        {
LABEL_259:
          sub_1000CB094(v403);
          *v408 = 0;
          return 1LL;
        }

uint64_t sub_100009758()
{
  return sub_1000C1074(48LL);
}

uint64_t sub_100009760(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1008))
  {
    int v2 = *(_DWORD *)(a1 + 1072);
    unsigned int v3 = v2 - 1;
    if (v2 < 1)
    {
      signed int v4 = 0;
      goto LABEL_41;
    }

    if (*(_DWORD *)(a1 + 2012))
    {
      if (v2 < 2)
      {
        signed int v4 = 0;
        do
LABEL_20:
          ++v4;
        while (v2 > (unsigned __int16)v4);
        goto LABEL_41;
      }

      signed int v4 = 0;
      if ((_WORD)v2) {
        BOOL v7 = HIWORD(v3) == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        goto LABEL_20;
      }
      signed int v4 = v2 & 0xFFFFFFFE;
      unsigned int v8 = v2 & 0xFFFFFFFE;
      do
        v8 -= 2;
      while (v8);
      if (v2 != v4) {
        goto LABEL_20;
      }
LABEL_41:
      BOOL v1 = v4 > v2 - v4;
      if (!*(_DWORD *)(a1 + 2008)) {
        goto LABEL_42;
      }
      return 1LL;
    }

    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v5 = *(void *)(a1 + 1160);
      if (v2 >= 8)
      {
        signed int v4 = 0;
        if ((_WORD)v2)
        {
          unsigned int v11 = HIWORD(v3);
          unsigned int v6 = 0;
          if (!v11)
          {
            unsigned int v6 = v2 & 0xFFFFFFF8;
            unsigned __int16 v12 = (int32x4_t *)(v5 + 20);
            int32x4_t v13 = 0uLL;
            v14.i64[0] = 0x100000001LL;
            v14.i64[1] = 0x100000001LL;
            unsigned int v15 = v2 & 0xFFFFFFF8;
            int32x4_t v16 = 0uLL;
            do
            {
              int32x4_t v13 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(v12[-1], *(int32x4_t *)((char *)v12 - 20)), v14),  v13);
              int32x4_t v16 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*v12, *(int32x4_t *)((char *)v12 - 4)), v14),  v16);
              v12 += 2;
              v15 -= 8;
            }

            while (v15);
            signed int v4 = vaddvq_s32(vaddq_s32(v16, v13));
            if (v2 == v6) {
              goto LABEL_41;
            }
          }
        }

        else
        {
          unsigned int v6 = 0;
        }
      }

      else
      {
        signed int v4 = 0;
        unsigned int v6 = 0;
      }

      do
      {
        ++v6;
      }

      while (v2 > (unsigned __int16)v6);
      goto LABEL_41;
    }

    uint64_t v9 = *(void *)(a1 + 1144);
    if (v2 >= 0x10)
    {
      signed int v4 = 0;
      if ((_WORD)v2)
      {
        unsigned int v17 = HIWORD(v3);
        unsigned int v10 = 0;
        if (!v17)
        {
          unsigned int v10 = v2 & 0xFFFFFFF0;
          int v18 = (uint16x8_t *)(v9 + 18);
          int32x4_t v19 = 0uLL;
          v20.i64[0] = 0x100000001LL;
          v20.i64[1] = 0x100000001LL;
          unsigned int v21 = v2 & 0xFFFFFFF0;
          int32x4_t v22 = 0uLL;
          int32x4_t v23 = 0uLL;
          int32x4_t v24 = 0uLL;
          do
          {
            uint16x8_t v25 = *(uint16x8_t *)((char *)v18 - 18);
            uint16x8_t v26 = *(uint16x8_t *)((char *)v18 - 2);
            uint16x8_t v27 = v18[-1];
            int32x4_t v22 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(v27, v25), v20), v22);
            int32x4_t v19 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v25.i8), v20),  v19);
            int32x4_t v24 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(*v18, v26), v20), v24);
            int32x4_t v23 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v18->i8, *(uint16x4_t *)v26.i8), v20),  v23);
            v18 += 2;
            v21 -= 16;
          }

          while (v21);
          signed int v4 = vaddvq_s32(vaddq_s32(vaddq_s32(v23, v19), vaddq_s32(v24, v22)));
          if (v2 == v10) {
            goto LABEL_41;
          }
        }
      }

      else
      {
        unsigned int v10 = 0;
      }
    }

    else
    {
      signed int v4 = 0;
      unsigned int v10 = 0;
    }

    do
    {
      ++v10;
    }

    while (v2 > (unsigned __int16)v10);
    goto LABEL_41;
  }

  BOOL v1 = 1;
  if (*(_DWORD *)(a1 + 2008)) {
    return 1LL;
  }
LABEL_42:
  if (*(_DWORD *)(a1 + 2016)) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 1760)
    || !*(_DWORD *)(a1 + 1032)
    || *(_DWORD *)(a1 + 1296) != 5
    || *(_DWORD *)(a1 + 1044)
    || *(_DWORD *)(a1 + 1004))
  {
    return 0LL;
  }

  if (*(_DWORD *)(a1 + 1108))
  {
    *(void *)(a1 + 1624) = sub_10001A93C;
    *(void *)(a1 + 1632) = sub_100015958;
    *(_OWORD *)(a1 + 1664) = 0u;
    return 1LL;
  }

  int v29 = *(_DWORD *)(a1 + 1104);
  if (v29 == 36)
  {
    if (!*(_BYTE *)(a1 + 1041) && !*(_DWORD *)(a1 + 1024))
    {
      *(void *)(a1 + 1624) = sub_100018928;
      *(void *)(a1 + 1632) = sub_100016DBC;
      *(_OWORD *)(a1 + 1664) = 0u;
      return 1LL;
    }

    return 0LL;
  }

  if (v29 != 24) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 1041) || *(_DWORD *)(a1 + 1024))
  {
    uint64_t v30 = sub_100015E54;
    if (!v1) {
      uint64_t v30 = sub_100017100;
    }
    *(void *)(a1 + 1624) = v30;
    *(void *)(a1 + 1632) = sub_100016BA4;
    *(_OWORD *)(a1 + 1664) = 0u;
    return 1LL;
  }

  else
  {
    unsigned __int16 v31 = sub_1000182FC;
    if (!v1) {
      unsigned __int16 v31 = sub_100017A18;
    }
    *(void *)(a1 + 1624) = v31;
    *(void *)(a1 + 1632) = sub_100016CD4;
    *(_OWORD *)(a1 + 1664) = 0u;
    return 1LL;
  }

uint64_t sub_100009AE4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1008);
  if (v1)
  {
    BOOL v2 = 1;
    *(void *)(a1 + 1624) = sub_10001237C;
    *(void *)(a1 + 1664) = 0LL;
    if (*(_DWORD *)(a1 + 1760)) {
      goto LABEL_3;
    }
    goto LABEL_47;
  }

  int v5 = *(_DWORD *)(a1 + 1072);
  unsigned int v6 = v5 - 1;
  if (v5 < 1)
  {
    signed int v7 = 0;
    goto LABEL_46;
  }

  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v9 = *(void *)(a1 + 1160);
      if (v5 >= 8)
      {
        signed int v7 = 0;
        if ((_WORD)v5)
        {
          unsigned int v15 = HIWORD(v6);
          unsigned int v10 = 0;
          if (!v15)
          {
            unsigned int v10 = v5 & 0xFFFFFFF8;
            int32x4_t v16 = (int32x4_t *)(v9 + 20);
            int32x4_t v17 = 0uLL;
            v18.i64[0] = 0x100000001LL;
            v18.i64[1] = 0x100000001LL;
            unsigned int v19 = v5 & 0xFFFFFFF8;
            int32x4_t v20 = 0uLL;
            do
            {
              int32x4_t v17 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(v16[-1], *(int32x4_t *)((char *)v16 - 20)), v18),  v17);
              int32x4_t v20 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*v16, *(int32x4_t *)((char *)v16 - 4)), v18),  v20);
              v16 += 2;
              v19 -= 8;
            }

            while (v19);
            signed int v7 = vaddvq_s32(vaddq_s32(v20, v17));
            if (v5 == v10) {
              goto LABEL_46;
            }
          }
        }

        else
        {
          unsigned int v10 = 0;
        }
      }

      else
      {
        signed int v7 = 0;
        unsigned int v10 = 0;
      }

      do
      {
        ++v10;
      }

      while (v5 > (unsigned __int16)v10);
      goto LABEL_46;
    }

    uint64_t v13 = *(void *)(a1 + 1144);
    if (v5 >= 0x10)
    {
      signed int v7 = 0;
      if ((_WORD)v5)
      {
        unsigned int v21 = HIWORD(v6);
        unsigned int v14 = 0;
        if (!v21)
        {
          unsigned int v14 = v5 & 0xFFFFFFF0;
          int32x4_t v22 = (uint16x8_t *)(v13 + 18);
          int32x4_t v23 = 0uLL;
          v24.i64[0] = 0x100000001LL;
          v24.i64[1] = 0x100000001LL;
          unsigned int v25 = v5 & 0xFFFFFFF0;
          int32x4_t v26 = 0uLL;
          int32x4_t v27 = 0uLL;
          int32x4_t v28 = 0uLL;
          do
          {
            uint16x8_t v29 = *(uint16x8_t *)((char *)v22 - 18);
            uint16x8_t v30 = *(uint16x8_t *)((char *)v22 - 2);
            uint16x8_t v31 = v22[-1];
            int32x4_t v26 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(v31, v29), v24), v26);
            int32x4_t v23 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v29.i8), v24),  v23);
            int32x4_t v28 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vsubl_high_u16(*v22, v30), v24), v28);
            int32x4_t v27 = vaddq_s32( (int32x4_t)vandq_s8((int8x16_t)vsubl_u16(*(uint16x4_t *)v22->i8, *(uint16x4_t *)v30.i8), v24),  v27);
            v22 += 2;
            v25 -= 16;
          }

          while (v25);
          signed int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v28, v26)));
          if (v5 == v14) {
            goto LABEL_46;
          }
        }
      }

      else
      {
        unsigned int v14 = 0;
      }
    }

    else
    {
      signed int v7 = 0;
      unsigned int v14 = 0;
    }

    do
    {
      ++v14;
    }

    while (v5 > (unsigned __int16)v14);
    goto LABEL_46;
  }

  if (v5 < 2)
  {
    signed int v7 = 0;
    do
LABEL_26:
      ++v7;
    while (v5 > (unsigned __int16)v7);
    goto LABEL_46;
  }

  signed int v7 = 0;
  if ((_WORD)v5) {
    BOOL v11 = HIWORD(v6) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    goto LABEL_26;
  }
  signed int v7 = v5 & 0xFFFFFFFE;
  unsigned int v12 = v5 & 0xFFFFFFFE;
  do
    v12 -= 2;
  while (v12);
  if (v5 != v7) {
    goto LABEL_26;
  }
LABEL_46:
  BOOL v2 = v7 > v5 - v7;
  *(void *)(a1 + 1624) = sub_10001237C;
  *(void *)(a1 + 1664) = 0LL;
  if (*(_DWORD *)(a1 + 1760))
  {
LABEL_3:
    int v3 = *(_DWORD *)(a1 + 1296);
    if (*(_DWORD *)(a1 + 1032))
    {
      if (v3 != 5)
      {
        int v8 = 0;
        *(void *)(a1 + 1624) = sub_10001A344;
        *(void *)(a1 + 1664) = 0LL;
        *(void *)(a1 + 1632) = sub_10001A154;
        goto LABEL_100;
      }

      *(void *)(a1 + 1624) = sub_100019E04;
      *(void *)(a1 + 1664) = 0LL;
      signed int v4 = sub_100019CA4;
    }

    else
    {
      if (v3 != 5)
      {
        int v8 = 0;
        *(void *)(a1 + 1632) = sub_100014AD4;
        goto LABEL_100;
      }

      signed int v4 = sub_100015038;
    }

    goto LABEL_99;
  }

LABEL_47:
  int v32 = *(_DWORD *)(a1 + 1296);
  if (v32 == 2)
  {
    if (*(_DWORD *)(a1 + 1108)) {
      goto LABEL_61;
    }
    int v8 = *(_DWORD *)(a1 + 1112);
    if (v8) {
      goto LABEL_61;
    }
    *(void *)(a1 + 1624) = sub_100012A04;
    *(void *)(a1 + 1664) = 0LL;
LABEL_95:
    *(void *)(a1 + 1632) = sub_10001244C;
    goto LABEL_100;
  }

  if (v32 != 4)
  {
    if (v32 == 5)
    {
      if (*(_DWORD *)(a1 + 1032))
      {
        if (*(_DWORD *)(a1 + 1044))
        {
          int v33 = *(_DWORD *)(a1 + 1048);
          BOOL v34 = v33 == 0;
          if (v33) {
            uint64_t v35 = sub_1000196D0;
          }
          else {
            uint64_t v35 = sub_100019410;
          }
          uint64_t v36 = sub_10001B318;
          if (v34) {
            uint64_t v36 = sub_10001B5C4;
          }
          if (!*(_DWORD *)(a1 + 1108))
          {
LABEL_88:
            *(void *)(a1 + 1624) = v35;
            *(void *)(a1 + 1664) = 0LL;
            int v43 = *(_DWORD *)(a1 + 1104);
            switch(v43)
            {
              case 12:
                goto LABEL_91;
              case 36:
                if (!*(_BYTE *)(a1 + 1041) && !*(_DWORD *)(a1 + 1024))
                {
                  signed int v4 = sub_100016DBC;
                  goto LABEL_99;
                }

                break;
              case 24:
LABEL_91:
                if (*(_DWORD *)(a1 + 1044))
                {
                  signed int v4 = sub_100016F94;
                }

                else if (*(_BYTE *)(a1 + 1041) || *(_DWORD *)(a1 + 1024))
                {
                  signed int v4 = sub_100016BA4;
                }

                else if (v43 == 12)
                {
                  signed int v4 = sub_100016EB8;
                }

                else
                {
                  signed int v4 = sub_100016CD4;
                }

                goto LABEL_99;
            }

            goto LABEL_98;
          }
        }

        else
        {
          if (!*(_DWORD *)(a1 + 1108))
          {
            if (*(_BYTE *)(a1 + 1041) || *(_DWORD *)(a1 + 1024))
            {
              uint64_t v35 = sub_100017100;
            }

            else
            {
              int v46 = *(_DWORD *)(a1 + 1104);
              switch(v46)
              {
                case 12:
                  uint64_t v35 = sub_100018D4C;
                  break;
                case 36:
                  uint64_t v35 = sub_100018928;
                  break;
                case 24:
                  if (v2) {
                    uint64_t v35 = sub_1000182FC;
                  }
                  else {
                    uint64_t v35 = sub_100017A18;
                  }
                  break;
                default:
                  uint64_t v35 = sub_100018738;
                  break;
              }
            }

            goto LABEL_88;
          }

          uint64_t v36 = sub_10001A93C;
        }
      }

      else
      {
        if (!*(_DWORD *)(a1 + 1108))
        {
LABEL_98:
          signed int v4 = sub_100014E14;
          goto LABEL_99;
        }

        uint64_t v36 = sub_100019964;
      }

      *(void *)(a1 + 1624) = v36;
      *(void *)(a1 + 1664) = 0LL;
      signed int v4 = sub_100015958;
LABEL_99:
      *(void *)(a1 + 1632) = v4;
      int v8 = 1;
      goto LABEL_100;
    }

    __int16 v97 = (unsigned __int8 *)(v24 + v25);
    uint64_t v98 = (unsigned __int8 *)(a2 + v25);
    int v99 = v21 - v25;
    int v100 = &v22->i32[v25];
    unint64_t v101 = (__int16 *)(v23 + 2 * v25);
    do
    {
      int v103 = *v98++;
      uint64_t v102 = v103;
      uint64_t v104 = *v97++;
      uint64_t v105 = v104 - v102;
      uint64_t v106 = *v101++;
      uint64_t v107 = v106 + v105 * v14;
      *v100++ = v107;
      --v99;
    }

    while (v99);
LABEL_51:
    LOWORD(v27) = v126;
    int32x4_t v28 = v126;
    uint16x8_t v29 = v126 + v14;
    if ((v29 + 0x4000) <= 0x8000 && !v26)
    {
LABEL_61:
      if ((int)v21 >= 1)
      {
        if (v21 >= 0x10
          && (v23 >= (unint64_t)v22 + 4 * v21 || (unint64_t)v22 >= v23 + 2 * v21))
        {
          uint64_t v113 = v21 & 0x7FFFFFF0;
          uint64_t v119 = (int16x8_t *)&v22[2];
          unsigned int v120 = (int16x8_t *)(v23 + 16);
          v121 = v21 & 0xFFFFFFF0;
          do
          {
            uint64_t v123 = v119[-2];
            unsigned __int16 v122 = v119[-1];
            int v125 = *v119;
            unint64_t v124 = v119[1];
            v119 += 4;
            v120[-1] = vuzp1q_s16(v123, v122);
            *unsigned int v120 = vuzp1q_s16(v125, v124);
            v120 += 2;
            v121 -= 16LL;
          }

          while (v121);
          if (v113 == v21) {
            goto LABEL_68;
          }
        }

        else
        {
          uint64_t v113 = 0LL;
        }

        int v114 = (_WORD *)(v23 + 2 * v113);
        uint64_t v115 = v21 - v113;
        uint64_t v116 = &v22->i32[v113];
        do
        {
          uint64_t v117 = *v116++;
          *v114++ = v117;
          --v115;
        }

        while (v115);
      }

  unsigned int v25 = 0x40000000;
}

  int8x16_t v24 = 0x40000000;
}

      if (v48 >= v42) {
        goto LABEL_54;
      }
      uint64_t v49 = *(_DWORD *)v29;
      uint16x8_t v30 = v71;
      while (1)
      {
        uint16x8_t v50 = v49 - *(_DWORD *)v48;
        if (v49 == *(_DWORD *)v48) {
          uint16x8_t v50 = *((_DWORD *)v29 + 6) - *((_DWORD *)v48 + 6);
        }
        if (v50 < 0) {
          break;
        }
        v48 += 1096;
        if (v48 >= v42) {
          goto LABEL_56;
        }
      }

      int v46 = v48;
LABEL_56:
      unsigned int v10 = v70;
LABEL_57:
      int v51 = 125400505 * ((unint64_t)(v42 - v46) >> 3);
      if ((int)v43 < v10)
      {
        uint64_t v9 = (v43 + 1);
        if (v51 < 1)
        {
LABEL_20:
          memcpy(v46, v29, 0x448uLL);
          uint64_t v76 = v9;
          if (v46 <= v38)
          {
            ++v37;
            v38 += 1096;
          }

          goto LABEL_22;
        }

        uint64_t v49 = -1;
        uint16x8_t v50 = v43;
        do
        {
          int v51 = *v50++;
          unint64_t v52 = ++v49;
        }

        while (v51 != -1);
        int v53 = v42 + v52;
        if (v39 <= v52) {
          int32x4_t v54 = v52;
        }
        else {
          int32x4_t v54 = v39;
        }
        ++v41;
        int v39 = v54;
        int v40 = v53;
      }

      while (v41 != (_DWORD)v38);
      if (!*(void *)(a1 + 80))
      {
        unsigned __int16 v91 = v38;
        unsigned __int16 v92 = 1LL;
        uint64_t v93 = 0LL;
        while (1)
        {
          uint64_t v94 = *(void *)(v8 + 40);
          if (v93)
          {
            uint64_t v95 = v93;
            do
            {
              uint64_t v96 = (_DWORD *)v94;
              while (1)
              {
                __int16 v97 = (unint64_t)(v96 + 1);
                if (*v96 == -1) {
                  break;
                }
                ++v96;
                if (v97 >= *(void *)(v8 + 40) + 4LL * *(int *)(v8 + 32))
                {
                  uint64_t v94 = 0LL;
                  goto LABEL_93;
                }
              }

              uint64_t v98 = v96 + 1;
              uint64_t v94 = (uint64_t)v98;
              --v95;
            }

            while (v95);
            uint64_t v94 = (uint64_t)v98;
          }

            *(_WORD *)(a1 + 558) = v30;
            goto LABEL_48;
          }

        uint64_t v83 = ((-7783 * v82 + 999309312) >> 15) * v82 + 0x4000;
LABEL_50:
        v36->i16[0] = (int)((1 << (13 - a1[8])) + 158998 - 11357 * (v79 + v10) + (v83 >> 15)) >> (14 - a1[8]);
        uint64_t v36 = (int16x4_t *)((char *)v36 + 2);
        BOOL v34 = v38;
        if (v38 == v37)
        {
LABEL_51:
          uint64_t v85 = 4LL * *a1 + 4;
          goto LABEL_52;
        }
      }
    }
  }

  uint64_t v85 = 4LL;
LABEL_52:
  sub_1000CB038(v12, v85);
LABEL_53:
  if (a1[11]) {
    sub_1000A2AF0(*((int **)a1 + 6), a4);
  }
}

  unsigned __int16 v92 = sub_10008EBF4( *(void *)(a1 + 848),  a2,  a3,  (unint64_t *)a5,  a4,  (_DWORD *)(a1 + 784),  (_DWORD *)(a1 + 788),  (_DWORD *)(a1 + 796),  (_DWORD *)(a1 + 792),  a6,  a7);
  sub_1000CB094(v14);
  return v92;
}

      uint64_t v126 = 0LL;
      uint64_t v98 = (int)a5;
      if (a10)
      {
LABEL_36:
        int v125 = sub_1000CAF58(v98, v90, v91, v92, v93, v94, v95, v96);
        if (a12)
        {
LABEL_37:
          int v99 = sub_1000CAF58(8LL * (int)a2, v90, v91, v92, v93, v94, v95, v96);
          goto LABEL_50;
        }

double sub_10000A194(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 2008)) {
    sub_100009760(a1);
  }
  *(void *)(a1 + 1752) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(void *)(a1 + 472) = sub_10007C9A4;
  *(void *)(a1 + 232) = sub_10000A46C;
  *(void *)(a1 + 208) = 0LL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  return result;
}

uint64_t sub_10000A1FC(uint64_t a1)
{
  *(void *)(a1 + 1736) = sub_100007200;
  *(void *)(a1 + 1744) = sub_10000A29C;
  *(void *)(a1 + 1752) = sub_1000110FC;
  *(void *)(a1 + 472) = sub_10007C9A4;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = sub_10000A46C;
  *(void *)(a1 + 672) = sub_10001E1C4;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 680) = sub_10001E09C;
  *(void *)(a1 + 688) = sub_10001E048;
  return 1LL;
}

uint64_t sub_10000A29C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1432);
  unsigned int v3 = sub_1000BE540(*(_DWORD *)(v2 + 8), 0xFFFFFFFF);
  unsigned int v4 = sub_1000BE540(*(_DWORD *)(v2 + 36), v3);
  uint64_t v5 = sub_1000BE540(*(_DWORD *)(v2 + 40), v4);
  int v6 = *(_DWORD *)(v2 + 92);
  if (v6 >= 1)
  {
    for (unsigned __int16 i = 0; i < v6; ++i)
    {
      if (*(void *)(*(void *)v2 + 8LL * i))
      {
        unsigned int v8 = sub_100007ACC(a1, i);
        uint64_t v5 = sub_1000BE540(v8, v5);
        int v6 = *(_DWORD *)(v2 + 92);
      }
    }
  }

  return v5;
}

uint64_t sub_10000A340(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1456)) {
    return 1LL;
  }
  uint64_t v2 = *(_DWORD **)(a1 + 1432);
  char v3 = 1;
  uint64_t v4 = sub_100008160(a1, 1, 1);
  if (!(_DWORD)v4) {
    return v4;
  }
  *(_DWORD *)(a1 + 2000) = 1;
  if (!*(_DWORD *)(a1 + 996) || !v2)
  {
    if (!v2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (!v2[2])
  {
LABEL_12:
    if (v2[4]) {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(a1 + 232))(a1);
    if ((_DWORD)v4)
    {
LABEL_14:
      if (!*(_DWORD *)(a1 + 1032)) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }

    return v4;
  }

  uint64_t v4 = (*(uint64_t (**)(uint64_t))(a1 + 472))(a1);
  if (!(_DWORD)v4) {
    return v4;
  }
  if (v2[6])
  {
    char v3 = 0;
    v2[2] = 0;
    goto LABEL_13;
  }

  char v3 = 0;
  if (!*(_DWORD *)(a1 + 1032)) {
    goto LABEL_21;
  }
LABEL_15:
  if (!*(_DWORD *)(a1 + 1760) && *(_DWORD *)(a1 + 996))
  {
    if ((v3 & 1) == 0) {
      sub_1000080D8(a1);
    }
    sub_100008120(a1);
  }

uint64_t sub_10000A46C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD **)(a1 + 1432);
  if (!v8 || v8[4] || v8[2]) {
    return 0LL;
  }
  if (!v8[3] || v8[16] - v8[18] <= v8[11]) {
    goto LABEL_64;
  }
  if (qword_1000FDCC0)
  {
    int v11 = *(_DWORD *)(qword_1000FDCC0 + 720);
    int v12 = *(_DWORD *)(qword_1000FDCC0 + 760);
  }

  else
  {
    int v11 = 0;
    int v12 = 0;
  }

  BOOL v13 = (v11 | v12) != 0;
  if (!*(_DWORD *)(a1 + 996)
    || *(_DWORD *)(a1 + 1004)
    || (uint64_t v14 = *(int *)(a1 + 1100),
        unsigned int v15 = *(unsigned int **)(a1 + 1304),
        uint64_t v16 = sub_1000C1074(56LL),
        (*(void *)(a1 + 1504) = v16) == 0LL))
  {
    sub_1000C0EF8(0LL);
    uint64_t result = 0LL;
    *(void *)(a1 + 1504) = 0LL;
    return result;
  }

  uint64_t v44 = v16;
  if ((*(_DWORD *)(v16 + 44) & 0x80000000) != 0 || (*(_DWORD *)(v16 + 48) & 0x80000000) != 0) {
    goto LABEL_62;
  }
  uint64_t v17 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    *(_DWORD *)(v16 + 44) = *(void *)(qword_1000FDCC0 + 632);
    LODWORD(v17) = *(_DWORD *)(v17 + 648);
  }

  else
  {
    *(_DWORD *)(v16 + 44) = 0;
  }

  *(_DWORD *)(v16 + 48) = v17;
  uint64_t v45 = v14;
  int v18 = 0;
  if ((int)sub_100025C94(v15) >= 2)
  {
    unsigned __int16 v19 = 1;
    do
    {
      if (*(int *)(a1 + 1096) >= 1)
      {
        int v20 = 0;
        do
        {
          int v21 = sub_100038714((uint64_t)v15, v19, v20);
          if (v21 > v18) {
            int v18 = v21;
          }
          ++v20;
        }

        while (v20 < *(_DWORD *)(a1 + 1096));
      }

      ++v19;
    }

    while ((int)sub_100025C94(v15) > v19);
  }

  int v22 = (2 * v18) | 1;
  uint64_t v23 = sub_1000C1074((2 * v22));
  *(void *)uint64_t v44 = v23;
  if (!v23) {
    goto LABEL_62;
  }
  uint64_t v24 = sub_1000C1074((2 * v22));
  *(void *)(v44 + 8) = v24;
  if (!v24) {
    goto LABEL_62;
  }
  uint64_t v25 = sub_1000C1074((2 * v22));
  *(void *)(v44 + 16) = v25;
  if (!v25) {
    goto LABEL_62;
  }
  uint64_t v26 = sub_1000C1074(2LL * v22 * (int)v45);
  *(void *)(v44 + 24) = v26;
  if (!v26) {
    goto LABEL_62;
  }
  if (!(v11 | v12))
  {
    uint16x8_t v30 = (int *)(a1 + 1096);
    goto LABEL_72;
  }

  uint64_t v27 = sub_1000C1074(2 * v45);
  *(void *)(v44 + 32) = v27;
  if (!v27)
  {
LABEL_62:
    int v38 = 0;
    goto LABEL_63;
  }

  *(_DWORD *)(v44 + 40) = 0;
  int v28 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v28 = *(_DWORD *)(qword_1000FDCC0 + 640);
  }
  if (v12) {
    BOOL v29 = v11 == 0;
  }
  else {
    BOOL v29 = 0;
  }
  *(_DWORD *)(v44 + 52) = v28;
  uint16x8_t v30 = (int *)(a1 + 1096);
  if (v29)
  {
    int v31 = 1;
    unsigned __int16 v32 = 1;
    while ((int)sub_100025C94(v15) > v32)
    {
      int v33 = 0;
      while (v33 < *v30)
      {
        if (!qword_1000FDCC0
          || !*(_DWORD *)(qword_1000FDCC0 + 560)
          || sub_100038714((uint64_t)v15, v32, v33))
        {
          sub_10000DBD4(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v32, v33);
          int v31 = sub_10000DD10(a1, v32, v33, v13, 0);
        }

        ++v33;
        if (!v31) {
          goto LABEL_59;
        }
      }

      if (*v30 >= 1)
      {
        int v34 = 0;
        do
        {
          sub_10000DBD4(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v32, v34);
          int v31 = sub_10000DD10(a1, v32, v34, 0, 1);
          if (!v31) {
            break;
          }
          ++v34;
        }

        while (v34 < *v30);
      }

      uint64_t v35 = *(unsigned int *)(a1 + 1100);
      if ((int)v35 >= 1)
      {
        uint64_t v36 = 0LL;
        uint64_t v37 = 2 * v35;
        do
        {
          *(_WORD *)(*(void *)(v44 + 32) + v36) = 0;
          v36 += 2LL;
        }

        while (v37 != v36);
      }

      *(_DWORD *)(v44 + 40) = 0;
LABEL_59:
      int v38 = 0;
      if (!sub_1000CF924())
      {
        ++v32;
        if (v31) {
          continue;
        }
      }

      goto LABEL_63;
    }

    goto LABEL_85;
  }

LABEL_72:
  int v31 = 1;
  unsigned __int16 v40 = 1;
  while ((int)sub_100025C94(v15) > v40)
  {
    int v41 = 0;
    do
    {
      if (v41 >= *v30) {
        break;
      }
      if (!qword_1000FDCC0
        || !*(_DWORD *)(qword_1000FDCC0 + 560)
        || sub_100038714((uint64_t)v15, v40, v41))
      {
        sub_10000DBD4(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v40, v41);
        int v31 = sub_10000DD10(a1, v40, v41, v13, 0);
      }

      ++v41;
    }

    while (v31);
    int v38 = 0;
    if (!sub_1000CF924())
    {
      ++v40;
      if (v31) {
        continue;
      }
    }

    goto LABEL_63;
  }
                }

                uint64_t v56 = 4 * v55;
                uint64_t v57 = 4LL;
                while (*(_DWORD *)(*(void *)(v54 + 280) + v57) != (_DWORD)v51)
                {
                  v57 += 4LL;
                  if (v56 == v57) {
                    goto LABEL_72;
                  }
                }

                uint64_t v47 = *(_DWORD *)(*(void *)(v54 + 272) + v57);
              }

              __int16 v48 = sub_100031858(v72, v47);
            }

            unint64_t *v70 = v48;
            *int v71 = v50;
            memcpy(__dst, v44, v69);
          }

          uint64_t v26 = 1LL;
        }
      }

      while (sub_10002AF0C((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75));
    }

    sub_1000CB038(v44, v69);
    goto LABEL_90;
  }

  uint64_t v26 = 0LL;
  while (!(_DWORD)v76)
  {
LABEL_14:
  }

  BOOL v29 = *((void *)&v75 + 1);
  if (a8) {
    *a8 = (WORD4(v75) & 0x3FF) == 0LL;
  }
  uint16x8_t v30 = (v29 >> 35) & 0x3FFFF;
  int v31 = *((void *)v16 + 44);
  if (v31 || v16[85])
  {
    unsigned __int16 v32 = v16[67];
    if ((int)v32 <= (int)v30 || (LODWORD(v33) = v30, *(_DWORD *)(*((void *)v16 + 34) + 4 * v30) != (_DWORD)v30))
    {
      if ((int)v32 < 1)
      {
        LODWORD(v33) = 0;
        int v34 = SWORD1(v75);
        if (v31) {
          goto LABEL_28;
        }
        goto LABEL_32;
      }

      int v33 = 0LL;
      while (*(_DWORD *)(*((void *)v16 + 34) + 4 * v33) != (_DWORD)v30)
      {
        if (v32 == ++v33)
        {
          LODWORD(v33) = v16[67];
          break;
        }
      }
    }

    int v34 = SWORD1(v75);
    if (v31)
    {
LABEL_28:
      if ((_DWORD)v33 == (_DWORD)v32) {
        uint64_t v35 = -1;
      }
      else {
        uint64_t v35 = v33;
      }
      v34 += *(unsigned __int8 *)(*((void *)v16 + 45) + v35);
    }

    int v71 = ~(_DWORD)v29 + v27;
    do
    {
      int v72 = (char *)&v104 + 2 * v29 + 8;
      int v73 = *((_WORD *)v72 - 36);
      uint64_t v74 = 2LL * v71;
      *((_WORD *)v72 - 36) = *(_WORD *)((char *)&v100 + v74);
      *(_WORD *)((char *)&v100 + v74) = v73;
      LOBYTE(v72) = *((_BYTE *)&v104 + v29 + 8);
      *((_BYTE *)&v104 + v29 + 8) = *((_BYTE *)&v104 + v71 + 8);
      *((_BYTE *)&v104 + v71 + 8) = (_BYTE)v72;
      ++v29;
      --v71;
    }

    while (v28 != v29);
  }

        uint64_t v74 = -1;
        uint64_t v75 = 0;
        uint64_t v76 = v69;
        do
        {
          LODWORD(v77) = v75;
          uint64_t v78 = *v76++;
          uint64_t v79 = v74 + 1;
          ++v75;
          ++v74;
        }

        while (v78 != -1);
        unsigned __int16 v80 = v79;
        if (v79 >= 1)
        {
          uint64_t v77 = v77;
          int v81 = v69;
          __int16 v82 = v66;
          do
          {
            uint64_t v83 = v82;
            uint64_t v84 = v77;
            uint64_t v85 = *v81++;
            *__int16 v82 = sub_1000B3A9C(*(void *)(a1 + 8), v85);
            __int16 v82 = v83 + 1;
            uint64_t v77 = v84 - 1;
          }

          while (v84 != 1);
        }

        if (++v67 == v68) {
          goto LABEL_79;
        }
      }

      sub_1000CB038(v66, v180);
      uint64_t v86 = 0LL;
      goto LABEL_110;
    }

              unsigned int v8 = 1LL;
LABEL_74:
              *(_BYTE *)(a1 + 664) = sub_100062FA4(*(void *)(a1 + 656));
              int v51 = sub_100062F94(*(void *)(a1 + 656));
              unint64_t v52 = *(void *)(a1 + 832);
              *(_DWORD *)(a1 + 532) = 0;
              if (v51 >= 1)
              {
                int v53 = v52 + 11;
                do
                {
                  *(_DWORD *)(v53 - 11) = 0;
                  *(_WORD *)(v53 - 5) = 0;
                  *(_WORD *)(v53 - 1) = 0;
                  ++*(_DWORD *)(a1 + 532);
                  v53 += 12LL;
                  --v51;
                }

                while (v51);
              }

              *(_DWORD *)(a1 + 712) = 1073758208;
              sub_1000D0E08(*(void *)(a1 + 472), a2, a3, a7);
              *(_DWORD *)(a1 + 568) = 0;
              uint64_t v24 = (_WORD *)(a1 + 996);
              uint64_t v9 = 1;
              goto LABEL_27;
            }

      uint64_t v107 = *v104;
      unsigned __int16 v61 = v103;
      uint64_t v108 = v103[v92];
      unsigned int v109 = 1LL;
      v176 = 1;
LABEL_88:
      *((void *)&v168 + 1) = v109;
LABEL_89:
      *(void *)&v168 = __PAIR64__(v108, v107);
      unint64_t v101 = v191;
      uint64_t v102 = v15;
      goto LABEL_90;
    }

    v192 = v83;
    v110 = v18[62];
    if (!v110)
    {
LABEL_77:
      v199 += sub_1000B8998(v16, (uint64_t)v94, v93, 1, v196, v191, v15, v59, a5, 0LL, v58, v195, 0);
      uint64_t v113 = v18[6];
      if (!v113)
      {
LABEL_92:
        uint64_t v84 = v201;
        LODWORD(v83) = v192;
        goto LABEL_93;
      }

      if ((int)sub_1000B3680(v16, v113, 1LL, 1LL, 0LL, 30, (uint64_t)v201) < 1)
      {
        else {
          int v114 = *v201;
        }
        uint64_t v116 = a5;
        v176 = 0;
        HIDWORD(v168) = 0;
        LODWORD(v168) = v114;
        *(void *)((char *)&v168 + 4) = (v61[v92] + 1);
        unint64_t v101 = v191;
        uint64_t v102 = v15;
        uint64_t v115 = v59;
        goto LABEL_91;
      }

      uint64_t v107 = *v201;
      uint64_t v108 = v61[v92] + 1;
      v176 = 1;
      *((void *)&v168 + 1) = 0LL;
      goto LABEL_89;
    }

    unsigned int v111 = *((_DWORD *)v18 + 135);
    int v112 = sub_1000B3680(v16, v110, 1LL, 1LL, 0LL, 30, (uint64_t)v201);
    if (v111)
    {
      if (v112 < 1)
      {
        int v18 = v185;
        else {
          v156 = *v201;
        }
        int v59 = v178;
        uint64_t v58 = a6;
        sub_1000B8938(v191, v15, v178, a5, 0LL, a6, v195, v196, v156, v61[v92], 1, 0, 0);
      }

      else
      {
        sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, *v201, v61[v92], 1, 0, 1);
        int v18 = v185;
      }

      ++v199;
      LODWORD(v83) = v192 + 1;
      goto LABEL_232;
    }

    if (v112 < 1)
    {
      int v18 = v185;
      else {
        v157 = *v201;
      }
      uint64_t v58 = a6;
      sub_1000B8938(v191, v15, v178, a5, 0LL, a6, v195, v196, v157, v61[v92], 1, 0, 0);
      int v59 = v178;
      uint64_t v83 = v92 + 1;
      v154 = v185[6];
      if (v154)
      {
LABEL_207:
        v155 = v83;
        uint64_t v84 = v201;
        if ((int)sub_1000B3680(v16, v154, 1LL, 1LL, 0LL, 30, (uint64_t)v201) < 1)
        {
          else {
            v158 = *v201;
          }
          v175 = v61[(int)v155];
          sub_1000B8938(v191, v15, v178, a5, 0LL, v58, v195, v196, v158, v175, SHIDWORD(v175), 0, 0);
        }

        else
        {
          sub_1000B8938(v191, v15, v178, a5, 0LL, v58, v195, v196, *v201, v61[v155], 0, 0, 1);
        }

        v199 += 2;
        uint64_t v96 = 1;
        v179 = v155;
        LODWORD(v83) = v155;
        int v59 = v178;
LABEL_94:
        if (*(_WORD *)(v17 + 2LL * v61[(int)v83]) == 48)
        {
          if (*(_WORD *)(v17 + 2LL * v61[(int)v83 + 1]) == 48)
          {
            LODWORD(v83) = v83 + 2;
            if (!v96) {
              goto LABEL_56;
            }
LABEL_106:
            uint64_t v119 = v70 - v83;
            if (v70 - (_DWORD)v83 != 3) {
              goto LABEL_107;
            }
            goto LABEL_169;
          }

          __int16 v97 = v59;
          uint64_t v98 = v58;
          int v99 = v15;
          unsigned __int16 v91 = 1LL;
          LODWORD(v83) = v83 + 1;
        }

        else
        {
          __int16 v97 = v59;
          uint64_t v98 = v58;
          int v99 = v15;
          unsigned __int16 v91 = 2LL;
        }

        goto LABEL_100;
      }
    }

    else
    {
      sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, *v201, v61[v92], 1, 0, 1);
      int v18 = v185;
      uint64_t v83 = v92 + 1;
      v154 = v185[6];
      if (v154) {
        goto LABEL_207;
      }
    }

    ++v199;
LABEL_232:
    uint64_t v96 = 1;
    v179 = v83;
    uint64_t v84 = v201;
    goto LABEL_94;
  }

  v183 = 0;
  v160 = v159 + 1LL;
  v187 = -1;
  v161 = 3LL;
  v162 = v191;
  do
  {
    v163 = v161;
    v164 = (v160 - 2);
    sub_1000B33F8((char *)v16, v201[v164], (uint64_t)v33, v198);
    v165 = sub_1000CC52C((unint64_t)v33);
    v161 = v165;
    v166 = v165 - 1;
    if (sub_1000CBA60(*(unsigned __int16 *)(a9 + 2LL * ((int)v165 - 1 + *v200)))
      || sub_1000CB890(*(unsigned __int16 *)(a9 + 2LL * (v166 + *v200)))
      && sub_1000CB890(*(unsigned __int16 *)(a9 + 2LL * (*v200 + (int)v161)))
      || sub_1000CBA3C(*(unsigned __int16 *)(a9 + 2LL * (v166 + *v200)))
      && sub_1000CBA3C(*(unsigned __int16 *)(a9 + 2LL * (*v200 + (int)v161))))
    {
      v161 = v163;
      v162 = v191;
    }

    else
    {
      v167 = sub_1000CD3EC((_WORD *)(a9 + 2LL * *v200), v33, v161);
      v162 = v191;
      if (v187 != -1 && (int)v161 <= (int)v163)
      {
        if ((_DWORD)v161 != (_DWORD)v163) {
          goto LABEL_244;
        }
        if (v183 && v167)
        {
          v183 = 1;
LABEL_244:
          v161 = v163;
          goto LABEL_245;
        }
      }

      v187 = v201[v164];
      v183 = v167 == 0;
    }

      if (a4) {
        *a4 = v13;
      }
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

LABEL_85:
  if (v11)
  {
    unsigned __int16 v42 = 1;
    while ((int)sub_100025C94(v15) > v42)
    {
      if (*v30 >= 1)
      {
        int v43 = 0;
        do
        {
          sub_10000DBD4(*(void *)(a1 + 1304), *(void **)(a1 + 1504), v42, v43);
          int v31 = sub_10000DD10(a1, v42, v43, 0, 1);
          if (!v31) {
            break;
          }
          ++v43;
        }

        while (v43 < *v30);
      }

      int v38 = 0;
      if (!sub_1000CF924())
      {
        ++v42;
        if (v31) {
          continue;
        }
      }

      goto LABEL_63;
    }
  }

  int v38 = v31;
LABEL_63:
  sub_1000C0EF8(*(void *)v44);
  sub_1000C0EF8(*(void *)(v44 + 8));
  sub_1000C0EF8(*(void *)(v44 + 16));
  sub_1000C0EF8(*(void *)(v44 + 24));
  sub_1000C0EF8(*(void *)(v44 + 32));
  sub_1000C0EF8(v44);
  *(void *)(a1 + 1504) = 0LL;
  if (!v38) {
    return 0LL;
  }
LABEL_64:
  if ((int)v8[23] >= 1)
  {
    int v39 = 0;
    do
      sub_10000A9A8((void *)a1, (unsigned __int16)v39++, a3, a4, a5, a6, a7, a8);
    while (v8[23] > (int)(unsigned __int16)v39);
  }

  if (*(_DWORD *)(a1 + 1032)) {
    *(void *)(a1 + 136) = *(void *)(a1 + 152);
  }
  else {
    *(void *)(a1 + 16) = *(void *)(a1 + 24);
  }
  return 1LL;
}

  if (*(_DWORD *)(a1 + 612) >= (*(_DWORD *)(a1 + 608) << 8) - 1) {
    *(_DWORD *)(a1 + 552) = 3;
  }
  if (!*(_DWORD *)(a1 + 8896)) {
    sub_100065AE0(a1);
  }
  *(_DWORD *)(a1 + 9044) = v26;
}

    *a3 = v21;
  }

  else
  {
LABEL_95:
    *(_DWORD *)(v5 + 552) = 3;
  }

  return result;
}

  sub_1000CB038(v112, v100);
  *(_DWORD *)(a1 + 8756) = a5;
  *(void *)(a1 + 8744) = v32;
  LODWORD(a7) = v113;
  a8 = v106;
  unsigned __int16 v32 = sub_10003927C(*(void *)(a1 + 520), a3, v39, a5, (unsigned int **)v32, 3LL, v113, v106, v114);
  if (!(_DWORD)v32)
  {
    sub_1000B2170(a1);
    goto LABEL_116;
  }

  unsigned __int16 v40 = HIDWORD(v114);
  uint64_t v37 = v116;
  if (!*(_DWORD *)(v18 + 12)) {
    goto LABEL_40;
  }
  if (!qword_1000FDCC0)
  {
LABEL_37:
    *(_DWORD *)(v18 + 20) = 0;
LABEL_51:
    *(_DWORD *)(a1 + 8736) = a5;
    j__memmove((void *)(a1 + 544), a4, 8 * (int)a5);
    *(void *)int v18 = 0LL;
    *(_DWORD *)(a1 + 464) = 0;
    sub_1000596B0(*(void *)(a1 + 392));
    return v32;
  }

  uint64_t v86 = *(_DWORD *)(qword_1000FDCC0 + 5244);
  *(_DWORD *)(v18 + 20) = v86 != 0;
  uint64_t v47 = (_DWORD *)(v18 + 20);
  if (!v86) {
    goto LABEL_51;
  }
LABEL_41:
  if ((_DWORD)a5 != v37)
  {
    unsigned int v111 = a5 - v37;
    unsigned int v109 = v47;
    uint64_t v107 = a8;
    *(_DWORD *)(v18 + 16) = 1;
    if ((int)a5 >= 1)
    {
      __int16 v48 = 0;
      uint64_t v49 = 0;
      uint16x8_t v50 = a4;
      int v51 = a5;
      do
      {
        while (1)
        {
          unint64_t v52 = sub_1000267CC(*v50);
          int v53 = *v50;
          if (v52) {
            break;
          }
          *(void *)(a1 + 8LL * v48++ + 16952) = v53;
          ++v50;
          if (!--v51) {
            goto LABEL_49;
          }
        }

        *(void *)(a1 + 8LL * v49++ + 8760) = v53;
        ++v50;
        --v51;
      }

      while (v51);
    }

void *sub_10000A9A8( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v110 = 0LL;
  unsigned int v8 = *(void **)(*(void *)result[179] + 8LL * a2);
  if (v8)
  {
    unsigned int v9 = a2;
    uint64_t v10 = (uint64_t)result;
    uint64_t v11 = *((unsigned int *)result + 275);
    uint64_t v12 = (int)v11;
    unint64_t v13 = sub_1000CAF58((int)v11, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v14 = (int8x16_t *)v13;
    uint64_t v15 = *(unsigned int *)v8;
    if ((int)v15 >= 1)
    {
      if ((int)v11 > 0)
      {
        uint64_t v16 = 0LL;
        unint64_t v17 = v13 + v11;
        BOOL v19 = v13 < v10 + 1772 && v10 + 1770 < v17;
        char v109 = v19;
        while (1)
        {
          sub_100004868(v10, v9, v16, (unint64_t *)&v110);
          signed int v26 = *(__int16 *)(v8[1] + 2 * v16);
          unint64_t v27 = *(void *)(v8[3] + 8 * v16);
          unsigned int v28 = (v26 + ((unsigned __int16)(v26 & 0x8000) >> 15)) << 16 >> 17;
          unint64_t v29 = (unint64_t)v110;
          if (v11 < 8)
          {
            uint64_t v30 = 0LL;
            int v31 = *(__int16 **)(v8[3] + 8 * v16);
            goto LABEL_41;
          }

          uint64_t v30 = 0LL;
          else {
            char v33 = 1;
          }
          BOOL v35 = v14 < (int8x16_t *)&v110->i8[v11] && (unint64_t)v110 < v17;
          if ((v33 & 1) != 0 || v35)
          {
            int v31 = *(__int16 **)(v8[3] + 8 * v16);
            goto LABEL_41;
          }

          int32x4_t v20 = vdupq_n_s32(v26);
          int16x8_t v22 = vdupq_n_s16(v26);
          int32x4_t v21 = vdupq_n_s32(v28);
          if (v11 >= 0x10)
          {
            uint64_t v37 = (const char *)(v10 + 1771);
            uint8x8_t v38 = (uint8x8_t)vld1_dup_s8(v37);
            uint16x8_t v39 = vmovl_u8(v38);
            int32x4_t v23 = (int32x4_t)vmovl_high_u16(v39);
            int32x4_t v24 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8);
            unsigned __int16 v40 = (const char *)(v10 + 1770);
            uint8x8_t v41 = (uint8x8_t)vld1_dup_s8(v40);
            uint16x8_t v42 = vmovl_u8(v41);
            int32x4_t v25 = (int32x4_t)vmovl_high_u16(v42);
            int32x4_t v43 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v42.i8);
            int16x8_t v44 = (int16x8_t)vsubl_u8(v38, v41);
            int32x4_t v45 = vmovl_high_s16(v44);
            int32x4_t v46 = vmovl_s16(*(int16x4_t *)v44.i8);
            int32x4_t v47 = vmull_high_s16(v44, v22);
            int32x4_t v48 = vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v22.i8);
            uint64_t v49 = v11 & 0xFFFFFFF0;
            uint16x8_t v50 = *(int16x8_t **)(v8[3] + 8 * v16);
            int v51 = v14;
            unint64_t v52 = v110;
            do
            {
              int16x8_t v54 = *v50;
              int16x8_t v53 = v50[1];
              v50 += 2;
              int32x4_t v55 = vaddw_high_s16(v21, v54);
              int32x4_t v56 = vaddw_s16(v21, *(int16x4_t *)v53.i8);
              int32x4_t v57 = vaddq_s32(vaddw_high_s16(v21, v53), v47);
              int32x4_t v58 = vaddq_s32(vaddw_s16(v21, *(int16x4_t *)v54.i8), v48);
              int32x4_t v59 = vaddq_s32(v55, v47);
              int32x4_t v60 = vaddq_s32(v56, v48);
              __int32 v61 = v58.i32[3];
              v59.i32[0] /= v20.i32[0];
              int v62 = v58.i32[0] / v20.i32[0];
              v58.i32[0] = v60.i32[0] / v20.i32[0];
              v60.i32[0] = v62;
              v59.i32[1] /= v20.i32[1];
              int v63 = v58.i32[1] / v20.i32[1];
              v58.i32[1] = v60.i32[1] / v20.i32[1];
              v60.i32[1] = v63;
              v59.i32[2] /= v20.i32[2];
              int v64 = v58.i32[2] / v20.i32[2];
              v58.i32[2] = v60.i32[2] / v20.i32[2];
              v60.i32[2] = v64;
              v59.i32[3] /= v20.i32[3];
              v57.i32[0] /= v20.i32[0];
              v57.i32[1] /= v20.i32[1];
              v58.i32[3] = v60.i32[3] / v20.i32[3];
              v57.i32[2] /= v20.i32[2];
              v60.i32[3] = v61 / v20.i32[3];
              v57.i32[3] /= v20.i32[3];
              uint8x16_t v65 = *v52++;
              uint16x8_t v66 = vmovl_u8(*(uint8x8_t *)v65.i8);
              uint16x8_t v67 = vmovl_high_u8(v65);
              int32x4_t v68 = vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v57, v45), v67), v23);
              int32x4_t v69 = vminq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v60, v46), *(uint16x4_t *)v66.i8), v24);
              v112.val[1] = (int8x16_t)vmaxq_s32( vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v59, v45), v66), v23),  v25);
              v112.val[2] = (int8x16_t)vmaxq_s32( vminq_s32( (int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v58, v46), *(uint16x4_t *)v67.i8),  v24),  v43);
              v112.val[0] = (int8x16_t)vmaxq_s32(v69, v43);
              v112.val[3] = (int8x16_t)vmaxq_s32(v68, v25);
              *v51++ = vqtbl4q_s8(v112, (int8x16_t)xmmword_1000F0340);
              v49 -= 16LL;
            }

            while (v49);
            uint64_t v12 = (int)v11;
            if ((v11 & 0xFFFFFFF0) == v11) {
              goto LABEL_11;
            }
            uint64_t v36 = v11 & 0xFFFFFFF0;
            if ((v11 & 8) == 0)
            {
              int v31 = (__int16 *)(v27 + 2LL * (v11 & 0xFFFFFFF0));
              uint64_t v30 = v11 & 0xFFFFFFF0;
LABEL_41:
              uint64_t v93 = (unsigned __int8 *)(v29 + v30);
              uint64_t v94 = &v14->i8[v30];
              uint64_t v95 = v11 - v30;
              do
              {
                int v96 = *(unsigned __int8 *)(v10 + 1771);
                int v97 = *(unsigned __int8 *)(v10 + 1770);
                int v98 = *v31++;
                int v99 = (int)(v28 + v98 + (v96 - v97) * v26) / v26;
                int v100 = *v93++;
                int v101 = v99 - (v96 - v97) + v100;
                if (v101 < v96) {
                  int v96 = v101;
                }
                if (v96 <= v97) {
                  LOBYTE(v96) = *(_BYTE *)(v10 + 1770);
                }
                *v94++ = v96;
                --v95;
              }

              while (v95);
              goto LABEL_11;
            }
          }

          else
          {
            uint64_t v36 = 0LL;
          }

          int v31 = (__int16 *)(v27 + 2LL * (v11 & 0xFFFFFFF8));
          int v70 = (const char *)(v10 + 1771);
          uint8x8_t v71 = (uint8x8_t)vld1_dup_s8(v70);
          uint16x8_t v72 = vmovl_u8(v71);
          int32x4_t v23 = (int32x4_t)vmovl_high_u16(v72);
          int32x4_t v24 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8);
          int v73 = (const char *)(v10 + 1770);
          uint8x8_t v74 = (uint8x8_t)vld1_dup_s8(v73);
          uint16x8_t v75 = vmovl_u8(v74);
          int32x4_t v25 = (int32x4_t)vmovl_high_u16(v75);
          int32x4_t v76 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8);
          int16x8_t v77 = (int16x8_t)vsubl_u8(v71, v74);
          int32x4_t v78 = vmovl_high_s16(v77);
          int32x4_t v79 = vmovl_s16(*(int16x4_t *)v77.i8);
          int32x4_t v80 = vmull_high_s16(v77, v22);
          int16x8_t v22 = (int16x8_t)vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v22.i8);
          int v81 = (uint64_t *)(v29 + v36);
          __int16 v82 = (uint64_t *)((char *)v14->i64 + v36);
          uint64_t v83 = (int16x8_t *)(v27 + 2 * v36);
          uint64_t v84 = v36 - (v11 & 0xFFFFFFF8);
          do
          {
            int16x8_t v85 = *v83++;
            int32x4_t v86 = vaddq_s32(vaddw_high_s16(v21, v85), v80);
            int32x4_t v87 = vaddq_s32(vaddw_s16(v21, *(int16x4_t *)v85.i8), (int32x4_t)v22);
            __int32 v88 = v87.i32[2];
            int v89 = v87.i32[1] / v20.i32[1];
            __int32 v90 = v87.i32[3];
            int v91 = v87.i32[0] / v20.i32[0];
            v87.i32[0] = v86.i32[0] / v20.i32[0];
            v86.i32[0] = v91;
            v87.i32[1] = v86.i32[1] / v20.i32[1];
            v86.i32[1] = v89;
            v87.i32[2] = v86.i32[2] / v20.i32[2];
            v86.i32[2] = v88 / v20.i32[2];
            v87.i32[3] = v86.i32[3] / v20.i32[3];
            v86.i32[3] = v90 / v20.i32[3];
            v85.i64[0] = *v81++;
            uint16x8_t v92 = vmovl_u8(*(uint8x8_t *)v85.i8);
            v111.val[1] = (int8x16_t)vmaxq_s32( vminq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v87, v78), v92), v23),  v25);
            v111.val[0] = (int8x16_t)vmaxq_s32( vminq_s32( (int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v86, v79), *(uint16x4_t *)v92.i8),  v24),  v76);
            *v82++ = vqtbl2q_s8(v111, (int8x16_t)xmmword_1000F0350).u64[0];
            v84 += 8LL;
          }

          while (v84);
          uint64_t v30 = v11 & 0x7FFFFFF8;
          if ((v11 & 0xFFFFFFF8) != v11) {
            goto LABEL_41;
          }
LABEL_11:
          sub_100004CE8( v10,  v9,  v16,  (uint64_t)v14,  *(double *)v20.i64,  *(double *)v21.i64,  (int8x16_t)v22,  (int8x16_t)v23,  (int8x16_t)v24,  (int8x16_t)v25);
LABEL_12:
          if (++v16 == v15) {
            goto LABEL_52;
          }
        }
      }

      for (uint64_t i = 0LL; i != v15; ++i)
      {
        sub_100004868(v10, v9, i, (unint64_t *)&v110);
      }
    }

uint64_t sub_10000AF28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = 0;
  if (a2 <= 5 && ((1 << a2) & 0x34) != 0)
  {
    if (!*(_DWORD *)(a1 + 992) || !*(void *)(a1 + 472)) {
      return 0LL;
    }
    int v9 = 1;
  }

  if ((_DWORD)a3 && (!*(_DWORD *)(a1 + 1312) || *(_BYTE *)(a1 + 1041))) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 1456) = 1;
  if ((_DWORD)a2 == 10)
  {
    uint64_t v11 = sub_10000B4B4;
    uint64_t v12 = sub_10000B474;
    int v13 = *(_DWORD *)(a1 + 1296);
    uint64_t v14 = sub_10000B3F0;
    uint64_t v15 = sub_10000B218;
    if (v13 != 2 && v13 != 4)
    {
      *(_DWORD *)(a1 + 1456) = 0;
      if (*(_DWORD *)(a1 + 996))
      {
        uint64_t v16 = *(void (**)(uint64_t))(a1 + 224);
        if (v16) {
          v16(a1);
        }
      }

      sub_1000C0EF8(*(void *)(a1 + 1464));
      sub_1000C0EF8(*(void *)(a1 + 1472));
      sub_1000C0EF8(*(void *)(a1 + 1480));
      *(void *)(a1 + 1480) = 0LL;
      *(_OWORD *)(a1 + 1464) = 0u;
      sub_1000C0EF8(*(void *)(a1 + 1496));
      *(void *)(a1 + 1496) = 0LL;
      return 1LL;
    }
  }

  else
  {
    uint64_t v11 = sub_10000CD2C;
    uint64_t v12 = sub_10000CCC0;
    uint64_t v14 = (BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000CA28;
    uint64_t v15 = sub_10000C7A8;
  }

  *(void *)(a1 + 208) = v15;
  *(void *)(a1 + 216) = v14;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 232) = v11;
  if (*(_DWORD *)(a1 + 992))
  {
    if (!*(void *)(a1 + 472) || !*(void *)(a1 + 496)) {
      LOBYTE(v9) = 0;
    }
    else {
      uint64_t v17 = a3;
    }
    *(_DWORD *)(a1 + 452) = a2 == 4;
    *(_DWORD *)(a1 + 280) = a2 == 5;
    if ((v9 & 1) == 0) {
      goto LABEL_27;
    }
  }

  else
  {
    else {
      uint64_t v17 = a3;
    }
    if (!v9) {
      goto LABEL_27;
    }
  }

  a3 = v17;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  if (*(_DWORD *)(a1 + 996) && !v14(a1, a2, a3, a4, a5, a6, a7, a8)) {
    goto LABEL_34;
  }
  sub_1000C0EF8(*(void *)(a1 + 1464));
  sub_1000C0EF8(*(void *)(a1 + 1472));
  sub_1000C0EF8(*(void *)(a1 + 1480));
  sub_1000C0EF8(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0LL;
  *(void *)(a1 + 1464) = 0LL;
  *(void *)(a1 + 1480) = 0LL;
  *(void *)(a1 + 1472) = 0LL;
  uint64_t v18 = sub_1000C1074(2LL * *(int *)(a1 + 1092));
  *(void *)(a1 + 1464) = v18;
  if (!v18) {
    goto LABEL_34;
  }
LABEL_27:
  uint64_t v19 = sub_1000C1074(8LL * *(int *)(a1 + 1092));
  *(void *)(a1 + 1472) = v19;
  if (v19 && (uint64_t v20 = sub_1000C1074(4LL * *(int *)(a1 + 1092)), (*(void *)(a1 + 1480) = v20) != 0LL))
  {
    uint64_t v21 = sub_1000C1074(4LL * *(int *)(a1 + 1100));
    *(void *)(a1 + 1496) = v21;
    *(_DWORD *)(a1 + 1488) = 0;
    if (v21) {
      return 1LL;
    }
  }

  else
  {
LABEL_34:
    *(_DWORD *)(a1 + 1488) = 0;
  }

  sub_1000C0EF8(*(void *)(a1 + 1464));
  sub_1000C0EF8(*(void *)(a1 + 1472));
  sub_1000C0EF8(*(void *)(a1 + 1480));
  uint64_t result = 0LL;
  *(void *)(a1 + 1496) = 0LL;
  *(void *)(a1 + 1464) = 0LL;
  *(void *)(a1 + 1480) = 0LL;
  *(void *)(a1 + 1472) = 0LL;
  return result;
}

uint64_t sub_10000B1AC(uint64_t a1)
{
  *(_DWORD *)(a1 + 1456) = 0;
  if (*(_DWORD *)(a1 + 996))
  {
    uint64_t v2 = *(void (**)(uint64_t))(a1 + 224);
    if (v2) {
      v2(a1);
    }
  }

  sub_1000C0EF8(*(void *)(a1 + 1464));
  sub_1000C0EF8(*(void *)(a1 + 1472));
  sub_1000C0EF8(*(void *)(a1 + 1480));
  *(void *)(a1 + 1480) = 0LL;
  *(_OWORD *)(a1 + 1464) = 0u;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0LL;
  return result;
}

uint64_t sub_10000B218(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unint64_t v20 = 0LL;
  uint64_t v10 = *(void *)(a1 + 1440);
  if (*(_DWORD *)(a1 + 1296) == 4)
  {
    if (!qword_1000FDCC0)
    {
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_100004868(a1, a3, a4, &v20);
      uint64_t v14 = sub_100005528(a1, a3, a4);
      if (v12 <= 0)
      {
LABEL_19:
        *(_DWORD *)(v10 + 4) += a5;
        return 1LL;
      }

LABEL_12:
      for (uint64_t i = 0LL; i != v12; ++i)
      {
        int v16 = *(unsigned __int8 *)(v20 + i) - *(unsigned __int8 *)(a2 + i);
        *(_DWORD *)(v13 + 4 * i) += v16 * v16 * a5 * *(unsigned __int16 *)(v14 + 2 * i) / *(_DWORD *)(a1 + 1192);
      }

      goto LABEL_19;
    }

    BOOL v11 = *(_DWORD *)(qword_1000FDCC0 + 5300) == 0;
    if (!*(_DWORD *)(qword_1000FDCC0 + 3360)) {
      goto LABEL_8;
    }
  }

  else
  {
    if (!qword_1000FDCC0)
    {
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_100004868(a1, a3, a4, &v20);
      goto LABEL_16;
    }

    BOOL v11 = 0;
    if (!*(_DWORD *)(qword_1000FDCC0 + 3360))
    {
LABEL_8:
      int v12 = *(_DWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      sub_100004868(a1, a3, a4, &v20);
      if (v11)
      {
        uint64_t v14 = sub_100005528(a1, a3, a4);
        if (v12 <= 0) {
          goto LABEL_19;
        }
        goto LABEL_12;
      }

  uint64_t v10 = *(_DWORD *)(result + 888);
  if (v10 >= 1)
  {
    if ((int)v3 < 1)
    {
LABEL_28:
      int32x4_t v25 = *(_DWORD *)(result + 872);
      if (v25 + 1 < v10) {
        signed int v26 = v25 + 1;
      }
      else {
        signed int v26 = 0;
      }
      *(_DWORD *)(result + 872) = v26;
      goto LABEL_32;
    }

    BOOL v11 = 0LL;
    if (v3 >= 8 && (unint64_t)(v4 - a2) >= 0x20)
    {
      if (v3 < 0x20)
      {
        BOOL v11 = 0LL;
        goto LABEL_22;
      }

      BOOL v11 = v3 & 0x7FFFFFE0;
      int v12 = (__int128 *)(a2 + 16);
      uint64_t v13 = (_OWORD *)(v4 + 16);
      uint64_t v14 = v3 & 0xFFFFFFE0;
      do
      {
        uint64_t v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 32LL;
      }

      while (v14);
      if (v11 == v3) {
        goto LABEL_27;
      }
      if ((v3 & 0x18) != 0)
      {
LABEL_22:
        int v16 = v11;
        BOOL v11 = v3 & 0xFFFFFFF8;
        uint64_t v17 = (uint64_t *)(a2 + v16);
        int v18 = (void *)(v4 + v16);
        uint64_t v19 = v16 - v11;
        do
        {
          unint64_t v20 = *v17++;
          *v18++ = v20;
          v19 += 8LL;
        }

        while (v19);
        if (v11 == v3) {
          goto LABEL_27;
        }
      }
    }

    uint64_t v21 = v3 - v11;
    int16x8_t v22 = (_BYTE *)(v4 + v11);
    int32x4_t v23 = (char *)(a2 + v11);
    do
    {
      int32x4_t v24 = *v23++;
      *v22++ = v24;
      --v21;
    }

    while (v21);
LABEL_27:
    uint64_t v10 = *(_DWORD *)(result + 888);
    goto LABEL_28;
  }
    }
  }

  unint64_t v29 = 0;
  LODWORD(v16) = 0;
  LODWORD(v15) = 0;
  uint64_t v14 = 0;
  return (__int16)(sub_10002B558(a1, v15, v16, v29) + v14);
}

      uint64_t v15 = v13 + 1;
    }
  }

  uint64_t v15 = 0;
LABEL_24:
  else {
LABEL_26:
  }
    int16x8_t v22 = 0LL;
  sub_1000BDB48(v6);
  return v22;
}

  else {
    uint64_t v14 = v9;
  }
  if (v14 + 1 < 2) {
    return 0LL;
  }
  int v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v14 >> 8)) + 8LL * v14);
  if (!a3)
  {
    if (*a4 == -1 && !*(_DWORD *)(v16 + 176))
    {
      int v34 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 156) = v34 + 1;
      *a4 = v34;
    }

    return 1LL;
  }

  uint64_t v17 = (void *)(v16 + 216);
  if (!*(_DWORD *)(v16 + 176))
  {
    BOOL v35 = sub_1000CC52C((unint64_t)a3);
    int32x4_t v43 = v35;
    if (v35 < 1)
    {
      int32x4_t v48 = 0;
      uint64_t v49 = *v17;
      if (*v17) {
        goto LABEL_41;
      }
    }

    else
    {
      int16x8_t v44 = 0;
      int32x4_t v45 = a3;
      int32x4_t v46 = v35;
      do
      {
        int32x4_t v47 = (unsigned __int16)*v45++;
        int16x8_t v44 = v47 + 12345 * v44;
        --v46;
      }

      while (v46);
      int32x4_t v48 = 1234556789 * v44;
      uint64_t v49 = *v17;
      if (*v17)
      {
LABEL_41:
        uint16x8_t v50 = 0x40000000;
        while (sub_1000CCE40(a3, (_WORD *)(v49 + 24)))
        {
          if ((v50 & v48) != 0) {
            int v51 = 8LL;
          }
          else {
            int v51 = 16LL;
          }
          if ((v50 & v48) != 0) {
            unint64_t v52 = (void *)(v49 + 8);
          }
          else {
            unint64_t v52 = (void *)(v49 + 16);
          }
          v50 >>= 1;
          uint64_t v49 = *(void *)(v49 + v51);
          if (!v49) {
            goto LABEL_55;
          }
        }

        uint64_t result = 1LL;
        *a4 = *(_DWORD *)v49;
        return result;
      }
    }

    uint16x8_t v50 = 0x40000000;
    unint64_t v52 = v17;
LABEL_55:
    if (v43 <= 7) {
      int16x8_t v53 = 7;
    }
    else {
      int16x8_t v53 = v43;
    }
    sub_1000C0BFC((2LL * (v53 - 7) + 47) & 0x3FFFFFFF8LL, v36, v37, v38, v39, v40, v41, v42);
    int32x4_t v55 = v54;
    sub_1000CC548((_WORD *)(v54 + 24), a3, v43 + 1);
    *(void *)(v55 + 8) = 0LL;
    *(void *)(v55 + 16) = 0LL;
    *unint64_t v52 = v55;
    if (v50)
    {
      for (uint64_t i = 0; i != v50; ++i)
      {
        int32x4_t v57 = (57737437 * (i ^ v48)) | 0x80000000;
        if (v57 != -1)
        {
          *(_DWORD *)int32x4_t v55 = v57;
          int32x4_t v58 = (_DWORD *)*v17;
          if (*v17 == v55)
          {
LABEL_69:
            uint64_t result = 1LL;
            *a4 = v57;
            return result;
          }

          int32x4_t v59 = 0x40000000;
          while (*v58 != v57)
          {
            if ((v59 & v48) != 0) {
              int32x4_t v60 = 2LL;
            }
            else {
              int32x4_t v60 = 4LL;
            }
            v59 >>= 1;
            int32x4_t v58 = *(_DWORD **)&v58[v60];
            if (v58 == (_DWORD *)v55) {
              goto LABEL_69;
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    *a4 = -1;
    return result;
  }

  int v18 = *a4;
  uint64_t v19 = (_DWORD *)*v17;
  if (*v17)
  {
    unint64_t v20 = 1234556789 * v18;
    while (*v19 != v18)
    {
      if ((v20 & 0x40000000) != 0) {
        uint64_t v21 = 2LL;
      }
      else {
        uint64_t v21 = 4LL;
      }
      if ((v20 & 0x40000000) != 0) {
        uint64_t v17 = v19 + 2;
      }
      else {
        uint64_t v17 = v19 + 4;
      }
      v20 *= 2;
      uint64_t v19 = *(_DWORD **)&v19[v21];
      if (!v19) {
        goto LABEL_29;
      }
    }

    return 1LL;
  }

  if (v20 + 1 < 2) {
    return 0LL;
  }
  signed int v26 = v20 >> 8;
  unint64_t v27 = v20;
  unsigned int v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * v26) + 8LL * v20);
  unint64_t v29 = (_DWORD *)v28;
  if (*(_DWORD *)(a1 + 132) == v20)
  {
    if (a4 > 1024) {
      return 0LL;
    }
    goto LABEL_19;
  }

  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * v26) + 8LL * v20);
  if (*(_DWORD *)(v28 + 16))
  {
LABEL_27:
    uint64_t result = sub_10003293C(v30, a4, a3, a5, a6);
    if ((_DWORD)result)
    {
      uint16x8_t v50 = *(void *)(a1 + 120);
      if (!v50) {
        goto LABEL_59;
      }
LABEL_55:
      if (*(int *)(v50 + 8) >= 1)
      {
        __int32 v61 = 0LL;
        int v62 = 0LL;
        do
        {
          *(_WORD *)(*(void *)v50 + v61) = 0;
          ++v62;
          v61 += 4LL;
        }

        while (v62 < *(int *)(v50 + 8));
      }

      *(_DWORD *)(v50 + 40) = 1;
LABEL_59:
      if (*(void *)(a1 + 72))
      {
        int v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 104) + 8 * v26) + 4 * v27);
        if ((_DWORD)v63) {
          unsigned int v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + ((v63 >> 5) & 0x7FFFFF8))
        }
                          + 8LL * *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v26) + 4 * v27));
        if (!*(_DWORD *)(v28 + 180))
        {
          int v64 = *(_DWORD *)(v28 + 16);
          if (v64 < 1)
          {
            uint8x16_t v65 = 0;
          }

          else
          {
            uint8x16_t v65 = 0;
            uint16x8_t v66 = 0;
            uint16x8_t v67 = *(uint64_t **)a1;
            int32x4_t v68 = -1;
            do
            {
              if (v70 != v68)
              {
                uint8x8_t v71 = sub_1000BB884( (uint64_t)v67,  *(unsigned __int16 *)(*(void *)(*(void *)(v28 + 128)
                v65 += sub_1000B3C5C(v67, v71);
                int v64 = *(_DWORD *)(v28 + 16);
                int32x4_t v68 = v70;
              }

              ++v66;
            }

            while (v66 < v64);
          }

          uint16x8_t v72 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            uint16x8_t v72 = *(void *)(qword_1000FDCC0 + 1272);
          }
          *(_DWORD *)(v28 + 180) = v72 <= v65;
        }
      }

      return 1LL;
    }
  }

  else
  {
    uint64_t result = sub_10003114C(a1, v12, v13, v14, v15, v16, v17, v18);
    if ((_DWORD)result)
    {
      unint64_t v29 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8 * v26) + 8LL * v20);
      if (a4 > 1024) {
        return 0LL;
      }
LABEL_19:
      uint64_t v30 = *(void *)(a1 + 136);
      if (*(_DWORD *)(a1 + 132) == v20)
      {
        if (*(_DWORD *)(v30 + 16) == 0x2000000)
        {
          int v31 = (_DWORD *)sub_1000C1074(224LL);
          if (v31)
          {
            uint8x8_t v38 = v31;
            v31[1] = *(_DWORD *)(*(void *)(a1 + 136) + 4LL);
            *int v31 = **(_DWORD **)(a1 + 136);
            v31[9] = *(_DWORD *)(*(void *)(a1 + 136) + 36LL);
            v31[8] = *(_DWORD *)(*(void *)(a1 + 136) + 32LL);
            v31[38] = *(_DWORD *)(*(void *)(a1 + 136) + 152LL);
            v31[44] = *(_DWORD *)(*(void *)(a1 + 136) + 176LL);
            v31[51] = 1;
            if (sub_100034C60(*(void *)(a1 + 136), (uint64_t)v31, v32, v33, v34, v35, v36, v37))
            {
              sub_10003069C(*(void *)(a1 + 136));
              uint16x8_t v39 = *(_OWORD **)(a1 + 136);
              unsigned __int16 v40 = v38[1];
              *uint16x8_t v39 = *v38;
              v39[1] = v40;
              uint8x8_t v41 = v38[2];
              uint16x8_t v42 = v38[3];
              int32x4_t v43 = v38[5];
              v39[4] = v38[4];
              v39[5] = v43;
              v39[2] = v41;
              v39[3] = v42;
              int16x8_t v44 = v38[6];
              int32x4_t v45 = v38[7];
              int32x4_t v46 = v38[9];
              v39[8] = v38[8];
              v39[9] = v46;
              v39[6] = v44;
              v39[7] = v45;
              int32x4_t v47 = v38[10];
              int32x4_t v48 = v38[11];
              uint64_t v49 = v38[13];
              v39[12] = v38[12];
              v39[13] = v49;
              v39[10] = v47;
              v39[11] = v48;
            }
          }

          if (*(_DWORD *)(v30 + 16) == 0x2000000) {
            goto LABEL_27;
          }
        }
      }

      else
      {
        *(_DWORD *)(a1 + 132) = v20;
        *(_DWORD *)(v30 + 4) = v29[1];
        *(_DWORD *)uint64_t v30 = *v29;
        *(_DWORD *)(v30 + 36) = v29[9];
        *(_DWORD *)(v30 + 32) = v29[8];
        int v51 = v29[38];
        *(_DWORD *)(v30 + 152) = v51;
        *(_DWORD *)(v30 + 176) = v29[44];
        if (!v51)
        {
          unint64_t v52 = *(void *)(v30 + 136);
          if (v52)
          {
            if (*(int *)(v30 + 148) >= 1)
            {
              int16x8_t v53 = 0LL;
              do
                sub_1000C0EF8(*(void *)(*(void *)(v30 + 136) + 8 * v53++));
              while (v53 < *(int *)(v30 + 148));
              unint64_t v52 = *(void *)(v30 + 136);
            }

            sub_1000C0EF8(v52);
            *(void *)(v30 + 136) = 0LL;
          }
        }
      }

      uint8x8_t v74 = v26;
      int16x8_t v54 = *(_DWORD *)(v30 + 48) + a4;
      int32x4_t v55 = *(_DWORD *)(v30 + 16) + 1;
      else {
        int32x4_t v56 = 1;
      }
      if (v56) {
        return 0LL;
      }
      int v73 = v55;
      int32x4_t v57 = v54;
      uint64_t result = sub_1000C1744( (const void **)(v30 + 128),  (int *)(v30 + 40),  (signed int *)(v30 + 44),  *(_DWORD *)(v30 + 32),  2,  v54);
      if ((_DWORD)result)
      {
        if (!*(_DWORD *)(v30 + 16)) {
          ***(_DWORD ***)(v30 + 24) = 0;
        }
        signed int v26 = v74;
        if (*(_DWORD *)(v30 + 152)) {
        if (a4 >= 1)
        }
        {
          int32x4_t v58 = *(_DWORD *)(v30 + 48);
          int32x4_t v59 = a4;
          do
          {
            int32x4_t v60 = *a3++;
            ++v58;
            --v59;
          }

          while (v59);
        }

        *(_DWORD *)(v30 + 16) = v73;
        *(_DWORD *)(v30 + 48) = v57;
        uint16x8_t v50 = *(void *)(a1 + 120);
        if (v50) {
          goto LABEL_55;
        }
        goto LABEL_59;
      }
    }
  }

  return result;
}

    BOOL v11 = *(_DWORD *)(v7 + 228);
    *(_DWORD *)(v7 + 224) = v11;
    *(_DWORD *)(v7 + 240) = 0;
    *(_DWORD *)(v7 + 244) = v11;
    *(void *)(v7 + 248) = -1LL;
    *(_DWORD *)(v7 + 6460) = 0;
    if (!*(_DWORD *)(v7 + 5672)) {
      goto LABEL_24;
    }
LABEL_25:
    *(_DWORD *)(v7 + 5692) = 0;
    *(void *)(v7 + 6248) = 0LL;
    *(void *)(v7 + 336) = 0LL;
    goto LABEL_26;
  }

  *(_DWORD *)(v7 + 320) = 0;
  *(_DWORD *)(v7 + 6452) = 0;
  if (a2 == 2) {
    goto LABEL_12;
  }
  int v9 = (_DWORD *)(v7 + 6452);
  uint64_t v10 = *(_DWORD *)(v7 + 228);
  *(_DWORD *)(v7 + 224) = v10;
  *(_DWORD *)(v7 + 240) = 0;
  *(_DWORD *)(v7 + 244) = v10;
  *(void *)(v7 + 248) = -1LL;
  if (!qword_1000FDCC0)
  {
LABEL_22:
    uint64_t result = sub_1000597C8(*(void *)v7);
LABEL_23:
    *int v9 = 0;
    *(_DWORD *)(v7 + 6460) = 0;
    if (!*(_DWORD *)(v7 + 5672)) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 2024))
  {
    sub_100059758(*(void *)v7);
    uint64_t result = sub_100004604(*(void *)(v7 + 16));
    if ((_DWORD)result) {
      uint64_t result = sub_100004614(*(void *)(v7 + 16), 0);
    }
  }

  else if (*(_DWORD *)(qword_1000FDCC0 + 2212))
  {
    uint64_t result = sub_100059760(*(void *)v7, *(unsigned int *)(qword_1000FDCC0 + 2384));
  }

      sub_100052160((uint64_t *)v10);
      return 0LL;
    }

    BOOL v11 = (void *)sub_1000600A4();
    *(void *)(v10 + 656) = v11;
    sub_1000600C8(v11, a1, a2);
    *(_DWORD *)(v10 + 608) = a4;
  }

  return v10;
}

  sub_1000BCBC8(v9);
  return v10;
}

  uint64_t result = sub_10003941C(a1, *(unsigned int *)(a1 + 428), v2, v3, v4, v5, v6, v7);
  if ((_DWORD)result) {
    return sub_10003991C(a1);
  }
  return result;
}

  sub_1000C0EF8(v3);
  return 0LL;
}

        uint64_t v10 = 0;
        int16x8_t v22 = v19 + 4 * v20;
      }

      else
      {
        int32x4_t v23 = *(_DWORD *)(result + 124);
        uint64_t v13 = 0LL;
        int32x4_t v24 = v23 - 1;
        if (v23 >= 1)
        {
          do
          {
            int32x4_t v25 = (v13 + v24) >> 1;
            if (*(unsigned __int16 *)(*(void *)(*(void *)(result + 88) + 8LL * ((v13 + v24) >> 9))
                                     + 4LL * v25) < a2)
            {
              uint64_t v13 = v25 + 1;
            }

            else
            {
              int32x4_t v24 = v25 - 1;
              uint64_t v13 = v13;
            }
          }

          while ((int)v13 <= v24);
        }

        if ((int)v13 >= v23
          || (signed int v26 = *(void *)(*(void *)(result + 88) + 8LL * (v13 >> 8)),
              *(unsigned __int16 *)(v26 + 4LL * v13) != (_DWORD)a2))
        {
          uint64_t v14 = 0LL;
          goto LABEL_30;
        }

        uint64_t v10 = 0;
        int16x8_t v22 = v26 + 4LL * v13;
      }

      char v33 = *(unsigned __int16 *)(v22 + 2);
      goto LABEL_36;
    }

    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v10 = 0;
    char v33 = *(_DWORD *)(*(void *)(v15 + 8LL * (a2 >> 8)) + 4LL * a2);
    if (v33 != -1) {
      goto LABEL_36;
    }
  }

        uint64_t v4 = *(unsigned __int16 *)(v11 + 4 * v12 + 2);
        uint64_t v5 = *(void *)(a1 + 48);
        if (v5) {
          return *(unsigned __int16 *)(*(void *)(v5 + 8LL * (v4 >> 8)) + 2LL * v4);
        }
      }

      else
      {
        uint64_t v14 = *(_DWORD *)(a1 + 124);
        uint64_t v15 = 0;
        int v16 = v14 - 1;
        if (v14 >= 1)
        {
          do
          {
            uint64_t v17 = (v16 + v15) >> 1;
            if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8LL * ((v16 + v15) >> 9)) {
            else
            }
              uint64_t v15 = v17 + 1;
          }

          while (v15 <= v16);
        }

        if (v15 >= v14) {
          return sub_1000B9044(*(uint64_t **)a1, a2, *(_DWORD **)(a1 + 24));
        }
        int v18 = *(void *)(*(void *)(a1 + 88) + 8LL * (v15 >> 8));
        uint64_t v4 = *(unsigned __int16 *)(v18 + 4LL * v15 + 2);
        uint64_t v5 = *(void *)(a1 + 48);
        if (v5) {
          return *(unsigned __int16 *)(*(void *)(v5 + 8LL * (v4 >> 8)) + 2LL * v4);
        }
      }

      return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 64) + 8LL * (v4 >> 8)) + 2LL * v4);
    }

    uint64_t v4 = *(_DWORD *)(*(void *)(v6 + 8LL * (a2 >> 8)) + 4LL * a2);
    if (v4 != -1)
    {
LABEL_5:
      uint64_t v5 = *(void *)(a1 + 48);
      if (v5) {
        return *(unsigned __int16 *)(*(void *)(v5 + 8LL * (v4 >> 8)) + 2LL * v4);
      }
      return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 64) + 8LL * (v4 >> 8)) + 2LL * v4);
    }
  }

  return sub_1000B9044(*(uint64_t **)a1, a2, *(_DWORD **)(a1 + 24));
}

  int16x8_t v22 = sub_10002BA84((uint64_t)a4, a5);
  sub_100031FD8(v22);
  int32x4_t v23 = sub_10003C63C(a4, a5);
  *(_DWORD *)(v18 + 8) = a10;
  if ((int)a3 < 1)
  {
    int v31 = a9;
    *(_DWORD *)(v18 + 32) = 0;
    unsigned __int16 v32 = 1LL;
    *(_DWORD *)(v18 + 16) = 0;
    uint64_t v116 = v23;
    if (v23) {
      goto LABEL_17;
    }
  }

  else
  {
    *(_WORD *)(v18 + 28) = *(_WORD *)(a2 + 2LL * (a3 - 1));
    int v31 = a9;
    *(_DWORD *)(v18 + 32) = 1;
    unsigned __int16 v32 = 1LL;
    *(_DWORD *)(v18 + 16) = 0;
    uint64_t v116 = v23;
    if (v23) {
      goto LABEL_17;
    }
  }

  *(_DWORD *)(v18 + 16) = 1;
  char v33 = v31;
  int v34 = sub_10003927C(*(void *)(a1 + 528), a3, a2, a5, a4, 3LL, a7, a8, __SPAIR64__(a10, v31));
  int v31 = v33;
  unsigned __int16 v32 = v34;
  if (!(_DWORD)v34)
  {
    sub_10003991C(*(void *)(a1 + 528));
    return v32;
  }

    if (v6 != 2)
    {
      if (v6 == 3) {
        int v9 = a3 & 0xFFFFFF;
      }
      else {
        int v9 = 0xFFFFFF;
      }
      return v8 == v9;
    }

    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = (unsigned __int16)a3;
    return v8 == sub_10001ECA8(v14, v13);
  }

  if (v5 != 2 && v6 != 2) {
    return (unsigned __int16)a3 == (unsigned __int16)a2;
  }
  if (a2 < 0xFFFFFFFB)
  {
    BOOL v11 = -1;
    if (v5 == 1)
    {
      if ((_WORD)a2 != 0xFFFF) {
        BOOL v11 = sub_10001EDF8(*(void *)(a1 + 8), (unsigned __int16)a2, 0LL);
      }
    }

    else if (v5 == 2)
    {
      BOOL v11 = a2;
    }

    else
    {
      BOOL v11 = -1;
    }
  }

  else if (a2 + 5 >= 4)
  {
    BOOL v11 = -1;
  }

  else
  {
    BOOL v11 = a2;
  }

  if (a3 < 0xFFFFFFFB)
  {
    uint64_t v15 = -1;
    if (v6 == 1)
    {
      if ((_WORD)a3 != 0xFFFF) {
        uint64_t v15 = sub_10001EDF8(*(void *)(a1 + 8), (unsigned __int16)a3, 0LL);
      }
    }

    else if (v6 == 2)
    {
      uint64_t v15 = a3;
    }

    else
    {
      uint64_t v15 = -1;
    }
  }

  else if (a3 + 5 >= 4)
  {
    uint64_t v15 = -1;
  }

  else
  {
    uint64_t v15 = a3;
  }

  return v11 == v15;
}

  unsigned int v28 = 0LL;
LABEL_21:
  sub_1000C0EF8(v23);
  return v28;
}

  uint64_t v19 = v12[1];
  int v18 = v12[2];
  v12[1] = v19 + v9;
  unint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 40) + v9;
  *(void *)(a1 + 40) = v21;
  if (v21 > v20) {
    *(void *)(a1 + 48) = v21;
  }
  return v18 + v19;
}

  if (*(_DWORD *)(v13 + 68))
  {
  }

  else
  {
    *int32x4_t v23 = a4;
    v23[1] = v12;
    v23[2] = a5 - *(_WORD *)(v16 + 16 * v17 + 12);
    v23[3] = a7;
  }

  ++*(_DWORD *)(v16 + 16 * v17 + 4);
  ++*(_DWORD *)(v13 + 56);
  return result;
}

    int v18 = (unsigned __int16 *)(v13 + 8 * v14);
    while (2)
    {
      unint64_t v20 = v10;
      uint64_t v21 = *(void *)(v5 + 8LL * (v10 >> 8));
      int16x8_t v22 = v10;
      int32x4_t v23 = *(unsigned __int16 *)(v21 + 8 * v22);
      uint64_t result = v23 - (unsigned __int16)v6;
      if (v23 != (unsigned __int16)v6)
      {
LABEL_14:
        uint64_t v10 = (v20 - 1);
        continue;
      }

      break;
    }

    int32x4_t v24 = v21 + 8 * v22;
    int32x4_t v25 = *(unsigned __int16 *)(v24 + 2);
    if (v25 != WORD1(v6))
    {
      uint64_t result = ((__int16)v25 - v7);
      goto LABEL_14;
    }

    uint64_t result = *(unsigned __int16 *)(v24 + 4);
    if ((_DWORD)result != WORD2(v6))
    {
      uint64_t result = ((__int16)result - (_DWORD)v8);
      goto LABEL_14;
    }

    LODWORD(v10) = v20 - 1;
LABEL_20:
    if ((_DWORD)v9 == (_DWORD)v20)
    {
    }

    else
    {
      signed int v26 = v21 + 8 * v22;
      uint64_t result = v26 + 2;
      unint64_t v27 = (unsigned __int16 *)(v26 + 4);
      do
      {
        unsigned int v28 = *v18;
        if (v28 == v23)
        {
          unint64_t v29 = v18[1];
          uint64_t v30 = *(unsigned __int16 *)result;
          if (v29 != v30 || (unint64_t v29 = v18[2], v30 = *v27, v29 != v30))
          {
            if ((__int16)v29 != (__int16)v30)
            {
LABEL_30:
              int v31 = *(void *)v18;
              *(void *)int v18 = *(void *)(v21 + 8 * v22);
              *(void *)(v21 + 8 * v22) = v31;
              uint64_t v5 = *a1;
              uint64_t v10 = v20;
              goto LABEL_5;
            }
          }
        }

        else if (v28 != v23)
        {
          goto LABEL_30;
        }

        int v9 = (v9 + 1);
        int v18 = (unsigned __int16 *)(*(void *)(v5 + 8LL * (v9 >> 8)) + 8LL * v9);
      }

      while ((_DWORD)v20 != (_DWORD)v9);
      LODWORD(v9) = v20;
      if ((int)v10 > (int)a2) {
LABEL_32:
      }
        uint64_t result = sub_1000D52A0(a1);
    }

    a2 = (v9 + 1);
  }

  return sub_1000D54BC(a1, a2, a3);
}

LABEL_16:
      if (v12 > 0)
      {
        for (uint64_t j = 0LL; j != v12; *(_DWORD *)(v13 + 4 * j++) += v18 * v18 * a5)
          int v18 = *(unsigned __int8 *)(v20 + j) - *(unsigned __int8 *)(a2 + j);
      }

      goto LABEL_19;
    }
  }

  return 1LL;
}

  *(_DWORD *)(a1 + 136) = 0;
  return 1LL;
}

  if ((_DWORD)v13 == (_DWORD)v17) {
    LODWORD(v13) = -1;
  }
  *(_WORD *)(a2 + 120) = a5;
  uint64_t v19 = sub_100033398(*(void *)(a1 + 256));
  *(void *)a2 = sub_1000B31C8(v19);
  *(_DWORD *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a2 + 8) = v16;
  *(_WORD *)(a2 + 28) = a3;
  unint64_t v20 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    unint64_t v20 = *(_DWORD *)(qword_1000FDCC0 + 1288);
  }
  *(_DWORD *)(a2 + 84) = v20;
  uint64_t result = sub_10002E27C(a2, a1);
  if (!(_DWORD)result)
  {
    *(void *)(a2 + 128) = &unk_1000F0454;
    *(_DWORD *)(a2 + 136) = 0;
  }

  return result;
}

  sub_1000C0EF8(v20);
  return 0LL;
}

  else {
    int v16 = v11;
  }
  if (!v17)
  {
LABEL_26:
    a3 = 0xFFFFFFFFLL;
    goto LABEL_34;
  }

  int v18 = 1234556789 * a3;
  while (*v17 != (_DWORD)a3)
  {
    if ((v18 & 0x40000000) != 0) {
      uint64_t v19 = 2LL;
    }
    else {
      uint64_t v19 = 4LL;
    }
    uint64_t v17 = *(_DWORD **)&v17[v19];
    v18 *= 2;
    if (!v17) {
      goto LABEL_26;
    }
  }

  unint64_t v20 = v17 + 6;
  uint64_t v21 = sub_1000CC52C((unint64_t)(v17 + 6));
  a3 = v21;
  else {
    int16x8_t v22 = v21;
  }
  if (v22 >= 1) {
    j__memmove(a5, v20, 2LL * v22);
  }
  if (a4 >= 1)
  {
    a5 += v22;
LABEL_34:
    *a5 = 0;
  }

  return a3;
}

    if (v37 >= v14) {
      goto LABEL_31;
    }
  }

  ++v36;
  BOOL v35 = v35 - v15 + v49;
  if (v36 < 1) {
    goto LABEL_65;
  }
LABEL_32:
  if (v33)
  {
    sub_100031BE8(a1, v31, v36, v35, v20[13], (unsigned int *)&v170 + 1, 0, 0, 0LL, 0);
    sub_100027400(v33, SHIDWORD(v170), (_DWORD *)v171 + 1);
    sub_10002785C(v33, v162, SHIDWORD(v171[0]), 0);
    sub_10002785C(v33, SHIDWORD(v171[0]), 0, 0);
  }

  else
  {
    v165 = 0LL;
  }

  v156 = sub_1000C88E4((unint64_t)v31) + 1;
  v157 = 1;
LABEL_66:
  uint64_t v94 = a8;
  uint64_t v95 = sub_1000C88E4((unint64_t)a8) + 11;
  int v96 = v95;
  v158 = (_BYTE *)sub_1000CAF58(v95, v97, v98, v99, v100, v101, v102, v103);
  v154 = (unint64_t)v94;
  sub_1000C896C(v158, v94, v95);
  if (v14 < 1) {
    goto LABEL_109;
  }
  v110 = 0;
  v161 = v15;
  v155 = v95;
  while (2)
  {
    int8x16x2_t v111 = a2;
    while (2)
    {
      int8x16x4_t v112 = v110 + v16;
      uint64_t v113 = *((void *)v20 + 3);
      int v114 = *v20;
      uint64_t v115 = v20[1] - 1;
      uint64_t v116 = v112 + 1;
      uint64_t v117 = *(_DWORD *)(*(void *)(v113 + 8LL * (int)(v112 >> *v20)) + 4LL * (int)(v115 & v112)) + v15;
      uint64_t v118 = *(_DWORD *)(*(void *)(v113 + 8LL * (int)(v116 >> *v20)) + 4LL * (int)(v115 & v116)) - v117;
      if (v14 - v110 < 2)
      {
LABEL_84:
        if (!v111)
        {
LABEL_70:
          if (++v110 >= v14)
          {
            uint64_t v19 = a11;
            int v96 = v155;
            goto LABEL_109;
          }

          continue;
        }

        if (*(_DWORD *)(a1 + 132) == v168 && !sub_10003114C(a1, v104, v105, v106, v107, v111, v108, v109))
        {
          int v128 = 0;
          int v129 = 0LL;
          BOOL v130 = (__int16 *)sub_1000CAF58(0LL, v104, v105, v106, v107, v111, v108, v109);
          if (v15 < 0)
          {
LABEL_88:
            int v131 = v15
            int v132 = &v130[v161];
            uint64_t v133 = v128 - (uint64_t)v15;
            do
            {
              ++v131;
              --v133;
            }

            while (v133);
          }
        }

        else
        {
          int v127 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8LL * v168);
          int v128 = *(_DWORD *)(*(void *)(*(void *)(v127 + 24) + 8LL * (int)(v116 >> *(_DWORD *)v127))
                           + 4LL * (int)((*(_DWORD *)(v127 + 4) - 1) & v116))
          int v129 = 2LL * v128;
          BOOL v130 = (__int16 *)sub_1000CAF58(v129, v104, v105, v106, v107, v111, v108, v109);
          if (v128 > v15) {
            goto LABEL_88;
          }
        }

        sub_10003293C(v165, v118, &v130[v15], 0, -1);
        sub_1000CB038(v130, v129);
        int v16 = v169;
        int8x16x2_t v111 = a2;
        goto LABEL_70;
      }

      break;
    }

    uint64_t v119 = *((void *)v20 + 16);
    unsigned int v120 = v20[8];
    v121 = v20[9] - 1;
    unsigned __int16 v122 = 1LL;
    while (1)
    {
      uint64_t v123 = v122 + v112;
      unint64_t v124 = *(_DWORD *)(*(void *)(v113 + 8LL * (int)(v123 >> v114)) + 4LL * (int)(v123 & v115)) + v15;
      int8x16_t v105 = v124 & v121;
      double v104 = *(unsigned __int16 *)(*(void *)(v119 + 8LL * (int)(v124 >> v120)) + 2LL * (int)v105);
      int v125 = v123 + 1;
      double v104 = *(void *)(v113 + 8LL * (int)(v125 >> v114));
      uint64_t v126 = *(_DWORD *)(v104 + 4LL * (int)(v125 & v115)) - v124;
      if (v118 < v126) {
        uint64_t v126 = v118;
      }
      uint64_t v118 = 1;
      if (v126 >= 2)
      {
        while (1)
        {
          int8x16_t v107 = *(void *)(v119 + 8LL * (int)((v124 + v118) >> v120));
          int8x16_t v106 = (v124 + v118) & v121;
          int8x16_t v105 = *(unsigned __int16 *)(v107 + 2LL * (int)v106);
          if ((_DWORD)v104 != (_DWORD)v105) {
            break;
          }
          if (v126 == ++v118)
          {
            uint64_t v118 = v126;
            break;
          }
        }
      }

      unsigned __int16 v122 = (v122 + 1);
      if ((_DWORD)v122 == v14 - v110)
      {
        unsigned __int16 v122 = (v14 - v110);
        break;
      }
    }

    if ((_DWORD)v122 == 1)
    {
      int v16 = v169;
      goto LABEL_84;
    }

    uint64_t v134 = sub_1000C88E4(v154);
    sprintf(&v158[v134], "_%d", v157);
    v152 = sub_1000C88E4((unint64_t)v158);
    if (*(_DWORD *)(a1 + 132) == v168 && !sub_10003114C(a1, v135, v136, v137, v138, v139, v140, v141))
    {
      uint64_t v143 = 0;
    }

    else
    {
      uint64_t v142 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8LL * v168);
      uint64_t v143 = *(_DWORD *)(*(void *)(*(void *)(v142 + 24) + 8LL * (int)(v116 >> *(_DWORD *)v142))
                       + 4LL * (int)((*(_DWORD *)(v142 + 4) - 1) & v116))
    }

    v153 = v143;
    v151 = 2LL * v143;
    uint64_t v144 = (__int16 *)sub_1000CAF58(v151, v135, v136, v137, v138, v139, v140, v141);
    if (v143 > v15)
    {
      v145 = v15
      v146 = &v144[v161];
      v147 = v143 - (uint64_t)v15;
      do
      {
        ++v145;
        --v147;
      }

      while (v147);
    }

    uint64_t v19 = a11;
    if (a2)
    {
      v150 = v144;
      sub_100031BE8(a1, v158, 1, v118, v20[13], (unsigned int *)&v170, 0, 0, 0LL, 0);
      v149 = v170;
      sub_10003293C( *(void *)(*(void *)(*(void *)(a1 + 40) + (((unint64_t)v170 >> 5) & 0x7FFFFF8))
                  + 8LL * v170),
        v118,
        &v150[v15],
        0,
        -1);
      sub_100027400(a2, v149, v171);
      sub_10002785C(a2, v162, v171[0], 0);
      sub_1000CB038(v150, v151);
      if (v118 == v153 - v15)
      {
        sub_10002785C(a2, v171[0], 0, 0);
        goto LABEL_103;
      }

  if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 884)) {
    goto LABEL_23;
  }
  int32x4_t v23 = sub_10000A340(*(void *)(a1 + 384));
  if (v23 && qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 4604))
    {
      int32x4_t v23 = sub_10000CD50(*(void *)(a1 + 384));
      goto LABEL_22;
    }

  if (!qword_1000FDCC0) {
    goto LABEL_32;
  }
  uint64_t v14 = *(_DWORD *)(qword_1000FDCC0 + 4596);
  if ((v14 & 0xFFFFFFFE) == 2)
  {
    if (v8 < 1) {
      goto LABEL_32;
    }
  }

  else if (v14 != 5 || v8 <= 0)
  {
    goto LABEL_32;
  }

  int v16 = __base + 28;
  uint64_t v17 = v8;
  do
  {
    int v18 = *((unsigned int *)v16 - 5);
    uint64_t v19 = *(_DWORD *)(a1 + 452);
    if (v19 >= 1) {
      unint64_t v20 = 1LL;
    }
    else {
      unint64_t v20 = v19;
    }
    *((_DWORD *)v16 - 7) -= sub_10003BE3C( *(void *)(a1 + 376),  1LL,  v20,  a1 + 448 + 2LL * (v19 - (int)v20),  *(unsigned int *)(a1 + 460),  a1 + 456,  (uint64_t)v16,  *((unsigned int *)v16 - 5));
    uint64_t v21 = *(_DWORD *)(a1 + 452);
    if (v21 >= 2) {
      int16x8_t v22 = 2LL;
    }
    else {
      int16x8_t v22 = v21;
    }
    *((_DWORD *)v16 - 7) += sub_10003BE3C( *(void *)(a1 + 376),  2LL,  v22,  a1 + 448 + 2LL * (v21 - (int)v22),  *(unsigned int *)(a1 + 460),  a1 + 456,  (uint64_t)v16,  v18);
    v16 += 1096;
    --v17;
  }

  while (v17);
LABEL_32:
  qsort(__base, v8, 0x448uLL, (int (__cdecl *)(const void *, const void *))sub_10002426C);
}

        ;
      }

      while (v26 > 1);
    }
  }

  int v6 = *(void *)(v3 + 808);
  if (v6)
  {
    signed int v7 = *(_DWORD *)(v6 + 4);
    if (v7 >= 1)
    {
      do
      {
        uint16x8_t v39 = v7;
        unsigned __int16 v40 = *(unsigned int **)(v6 + 40);
        if (--v7)
        {
          uint8x8_t v41 = &v40[*(int *)(v6 + 32)];
          uint16x8_t v42 = v7;
          do
          {
            int32x4_t v43 = v40;
            while (1)
            {
              int16x8_t v44 = *v43++;
              if (v44 == -1) {
                break;
              }
              unsigned __int16 v40 = v43;
              if (v43 >= v41)
              {
                unsigned __int16 v40 = 0LL;
                goto LABEL_40;
              }
            }

            ++v40;
            --v42;
          }

          while (v42);
        }

  if (v15)
  {
    --v15;
    ++v7;
    goto LABEL_18;
  }

  uint64_t v30 = *v6++;
  unint64_t v29 = v30;
  if (*(_BYTE *)(v5 + v30) == 2)
  {
    int v31 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v29);
    unsigned __int16 v32 = *v31;
    uint64_t v15 = v31[1] + ~(_DWORD)v32;
    signed int v7 = *(void *)(a1 + 88) + v32 + 1;
    uint64_t v17 = *(_DWORD *)(a1 + 40);
    if (v17 > 0)
    {
LABEL_19:
      if (v15)
      {
        int16x8_t v22 = v15 - 1;
        int32x4_t v23 = (unsigned __int8 *)(v7 + 1);
        if (!v22) {
          goto LABEL_21;
        }
        goto LABEL_32;
      }

        uint64_t v19 = *v4++;
        int v18 = v19;
        if (*(_BYTE *)(v6 + v19) != 2)
        {
          char v3 = 0;
          goto LABEL_20;
        }

        unint64_t v20 = *(void *)(result + 104);
        uint64_t v21 = *(unsigned __int16 *)(v20 + 2 * v18);
        char v3 = *(unsigned __int16 *)(v20 + 2 * v18 + 2) + ~(_DWORD)v21;
        uint64_t v5 = (unsigned __int8 *)(*(void *)(result + 88) + v21);
LABEL_18:
        int16x8_t v22 = *v5++;
        LODWORD(v18) = v22;
LABEL_20:
        LODWORD(v8) = v8 | ((_DWORD)v18 << 8);
        goto LABEL_21;
      }
    }

    uint64_t v5 = (unsigned __int8 *)v8;
    uint64_t v14 = *v4++;
    unsigned int v8 = v14;
    if (*(_BYTE *)(v6 + v14) == 2) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }

  a2[2] = 1;
  int v9 = -1;
LABEL_22:
  int32x4_t v23 = 0;
  a2[3] = v9;
  do
  {
    *a2 = v23;
    if (v3)
    {
      --v3;
      unsigned int v28 = (unint64_t)(v5 + 1);
      LODWORD(v27) = *v5;
      unint64_t v29 = *(_DWORD *)(result + 704);
      if (v29 == 1) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v30 = *v4++;
      unint64_t v27 = v30;
      if (*(_BYTE *)(v6 + v30) != 2)
      {
        unint64_t v29 = *(_DWORD *)(result + 704);
        if (v29 == 1)
        {
          char v3 = 0;
          goto LABEL_24;
        }

        goto LABEL_36;
      }

      int v31 = *(void *)(result + 104);
      unsigned __int16 v32 = *(unsigned __int16 *)(v31 + 2 * v27);
      char v3 = *(unsigned __int16 *)(v31 + 2 * v27 + 2) + ~(_DWORD)v32;
      uint64_t v5 = (unsigned __int8 *)(*(void *)(result + 88) + v32);
      unsigned int v28 = (unint64_t)(v5 + 1);
      LODWORD(v27) = *v5;
      unint64_t v29 = *(_DWORD *)(result + 704);
      if (v29 == 1)
      {
LABEL_23:
        uint64_t v5 = (unsigned __int8 *)v28;
        goto LABEL_24;
      }
    }

    if (v3)
    {
      --v3;
      v5 += 2;
      goto LABEL_38;
    }

    uint64_t v5 = (unsigned __int8 *)v28;
LABEL_36:
    char v33 = *v4++;
    unsigned int v28 = v33;
    if (*(_BYTE *)(v6 + v33) != 2)
    {
      char v3 = 0;
      goto LABEL_40;
    }

    int v34 = *(void *)(result + 104);
    BOOL v35 = *(unsigned __int16 *)(v34 + 2 * v28);
    char v3 = *(unsigned __int16 *)(v34 + 2 * v28 + 2) + ~(_DWORD)v35;
    unsigned int v28 = *(void *)(result + 88) + v35;
    uint64_t v5 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
    LODWORD(v28) = *(unsigned __int8 *)v28;
LABEL_40:
    LODWORD(v27) = v27 | ((_DWORD)v28 << 8);
LABEL_24:
    int32x4_t v24 = *(_DWORD *)(result + 692);
    v23 += v29;
    int32x4_t v25 = __OFSUB__((_DWORD)v27, v24);
    signed int v26 = v27 - v24;
  }

  while (v26 < 0 != v25);
  a2[1] = v26;
  *((_DWORD *)a3 + 4) = v3;
  *a3 = v4;
  a3[1] = v5;
  return result;
}

  *(_DWORD *)(a1 + 304) = 4;
  *(void *)uint64_t v5 = 0x700000007LL;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)dbl_1000F2220;
  *(_OWORD *)(v5 + 8) = xmmword_1000F2210;
  *(_DWORD *)(v5 + 36) = 3584;
  if (sub_1000C8AE4(a3, "ukua"))
  {
LABEL_10:
LABEL_18:
    *(_DWORD *)(a1 + 304) = 4;
    *(void *)uint64_t v5 = 0x700000007LL;
    uint64_t result = dbl_1000F2220[0];
    *(_OWORD *)(v5 + 24) = *(_OWORD *)dbl_1000F2220;
    *(_OWORD *)(v5 + 8) = xmmword_1000F2210;
    *(_DWORD *)(v5 + 36) = 7840;
    return result;
  }

          ++v52;
          LODWORD(v44) = v56 + v44;
          if (v52 == v53) {
            goto LABEL_47;
          }
        }
      }

      int32x4_t v57 = v44;
LABEL_47:
      ++v48;
      int32x4_t v46 = v93;
      if (v98 == v93 || (int)v57 >= a8)
      {
        int16x8_t v44 = v57;
        int v16 = v91;
        uint64_t v49 = v97;
        if (a3) {
          goto LABEL_55;
        }
      }

      else
      {
        int v16 = v91;
        uint64_t v49 = v97;
        if (*(_BYTE *)(a11 + v98) == 1)
        {
          int v81 = (int)v57;
          a10[v81] = v48;
          v102[v81] = 0;
          int16x8_t v44 = (v57 + 1);
          a9[v81] = v91;
          if (a3) {
            goto LABEL_55;
          }
        }

        else
        {
          int16x8_t v44 = v57;
          if (a3)
          {
LABEL_55:
            if (*(_BYTE *)(a11 + v98)) {
              WORD2(v96) = 0;
            }
            else {
              WORD2(v96) = v51[v94];
            }
          }
        }
      }

      int32x4_t v47 = v98 + 1;
      uint16x8_t v50 = v51;
      int32x4_t v43 = v95;
    }

    while (v98 + 1 != v92);
  }

      int v12 = v4 == 45 || v4 == 65293;
      uint64_t v4 = *i;
      if (!*i) {
        return 0LL;
      }
      goto LABEL_23;
    }

BOOL sub_10000B3F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 1440);
  if (v9)
  {
    sub_1000C0EF8(*(void *)(v9 + 8));
    *(void *)(*(void *)(a1 + 1440) + 8LL) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 1440));
    *(void *)(a1 + 1440) = 0LL;
  }

  sub_1000C0BFC(0x10uLL, a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + 1440) = v10;
  *uint64_t v10 = *(_DWORD *)(a1 + 1124);
  *(_DWORD *)(*(void *)(a1 + 1440) + 4LL) = 0;
  *(void *)(*(void *)(a1 + 1440) + 8LL) = sub_1000C1074(4LL * **(int **)(a1 + 1440));
  return *(void *)(*(void *)(a1 + 1440) + 8LL) != 0LL;
}

uint64_t sub_10000B474(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1440);
  if (v1)
  {
    uint64_t v2 = result;
    sub_1000C0EF8(*(void *)(v1 + 8));
    *(void *)(*(void *)(v2 + 1440) + 8LL) = 0LL;
    uint64_t result = sub_1000C0EF8(*(void *)(v2 + 1440));
    *(void *)(v2 + 1440) = 0LL;
  }

  return result;
}

uint64_t sub_10000B4B4( uint64_t a1, double a2, double a3, double a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, int64x2_t _Q6)
{
  uint64_t v9 = *(int **)(a1 + 1440);
  LODWORD(v10) = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    BOOL v11 = (_DWORD *)(a1 + 1296);
    if (*(_DWORD *)(a1 + 1296) == 4)
    {
      BOOL v12 = *(_DWORD *)(qword_1000FDCC0 + 5300) == 0;
      uint64_t v13 = *(void *)(qword_1000FDCC0 + 3368);
      int v14 = *(_DWORD *)(qword_1000FDCC0 + 3388);
      uint64_t v10 = *(void *)(qword_1000FDCC0 + 3376);
      int v15 = v9[1];
      if (v15 < 50) {
        return 1LL;
      }
LABEL_8:
      int v17 = *(_DWORD *)(a1 + 1404) * v10;
      if (v12) {
        int v18 = *(_DWORD *)(a1 + 1188);
      }
      else {
        int v18 = 1;
      }
      int v19 = (v17 & ~(v17 >> 31)) + v15;
      uint64_t v20 = *v9;
      uint64_t v21 = *v9;
      unint64_t v22 = *((void *)v9 + 1);
      int32x4_t v23 = *(_WORD **)(a1 + 1248);
      BOOL v360 = v12;
      uint64_t v358 = v13;
      if (v23) {
        goto LABEL_13;
      }
      uint64_t v24 = *v9;
      int v25 = v18;
      uint64_t v26 = sub_1000C1074(2LL * (int)v21 * v18);
      int v18 = v25;
      uint64_t v20 = v24;
      BOOL v12 = v360;
      int32x4_t v23 = (_WORD *)v26;
      *(void *)(a1 + 1248) = v26;
      if (v26)
      {
LABEL_13:
        int v357 = v14;
        uint64_t v356 = *(void *)(a1 + 1280);
        if (v356)
        {
          v359 = v11;
          unint64_t v27 = 0LL;
          int v28 = 0;
          unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
          if (v12) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }

        unint64_t v40 = v22;
        uint64_t v41 = v20;
        int v355 = v18;
        uint64_t v42 = sub_1000C1074(2LL * (int)v20 * v18);
        *(void *)(a1 + 1280) = v42;
        int32x4_t v23 = *(_WORD **)(a1 + 1248);
        if (v42)
        {
          unint64_t v27 = v42;
          v359 = v11;
          int v28 = 1;
          uint64_t v20 = v41;
          unint64_t v22 = v40;
          int v18 = v355;
          unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
          if (v360)
          {
LABEL_15:
            int v30 = v18;
            uint64_t v31 = v20;
            unint64_t v32 = sub_1000C1074(8 * v20);
            if (!v32)
            {
              uint64_t v16 = 0LL;
              goto LABEL_153;
            }

            int v34 = v30;
            double v35 = (double)v19;
            double v36 = (double)v17;
            if (v21 >= 8)
            {
              uint64_t v38 = v31;
              double v39 = *(double *)&v358;
              if (v32 >= v22 + 4 * v21 || v22 >= v32 + 8 * v21)
              {
                float64x2_t v59 = (float64x2_t)vdupq_lane_s64(v358, 0);
                float64x2_t v60 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
                uint64_t v37 = v21 & 0xFFFFFFF8;
                float64x2_t v61 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
                unint64_t v62 = v22 + 16;
                unint64_t v63 = v32 + 32;
                uint64_t v64 = v37;
                do
                {
                  __int128 v65 = *(_OWORD *)(v62 - 16);
                  v66.i64[0] = (int)v65;
                  v66.i64[1] = SDWORD1(v65);
                  float64x2_t v67 = vcvtq_f64_s64(v66);
                  v66.i64[0] = SDWORD2(v65);
                  v66.i64[1] = SHIDWORD(v65);
                  float64x2_t v68 = vcvtq_f64_s64(v66);
                  v66.i64[0] = (int)*(_OWORD *)v62;
                  v66.i64[1] = (int)HIDWORD(*(void *)v62);
                  float64x2_t v69 = vcvtq_f64_s64(v66);
                  v66.i64[0] = (int)*(void *)(v62 + 8);
                  v66.i64[1] = (int)HIDWORD(*(_OWORD *)v62);
                  *(float64x2_t *)(v63 - 32) = vdivq_f64(v61, vmlaq_f64(v60, v59, v67));
                  *(float64x2_t *)(v63 - 16) = vdivq_f64(v61, vmlaq_f64(v60, v59, v68));
                  int32x4_t v33 = (int32x4_t)vdivq_f64(v61, vmlaq_f64(v60, v59, vcvtq_f64_s64(v66)));
                  *(float64x2_t *)unint64_t v63 = vdivq_f64(v61, vmlaq_f64(v60, v59, v69));
                  *(int32x4_t *)(v63 + 16) = v33;
                  v63 += 64LL;
                  v62 += 32LL;
                  v64 -= 8LL;
                }

                while (v64);
                if (v37 == v21)
                {
LABEL_49:
                  if (v30 >= 1)
                  {
                    uint8x8_t v74 = (const __int16 *)(a1 + 1768);
                    uint64_t v75 = v356;
                    if (v356) {
                      uint64_t v76 = 0LL;
                    }
                    else {
                      uint64_t v76 = v38;
                    }
                    if (v357)
                    {
                      int v77 = 0;
                      uint64_t v78 = 2 * v38;
                      if (v356)
                      {
                        do
                        {
                          for (uint64_t i = 0LL; i != v21; ++i)
                          {
                            unsigned int v80 = v29->u16[i];
                            if (*(_DWORD *)(*(void *)(a1 + 1448) + 4 * i))
                            {
                              double v81 = *(double *)(v32 + 8 * i);
                              double v82 = v81 * (double)v80;
                              double v83 = (double)v80 * v81 + -0.5;
                              double v84 = (double)v80 * v81 + 0.5;
                              if (v82 < 0.0) {
                                double v84 = v83;
                              }
                              unsigned int v80 = (int)v84;
                            }

                            v23[i] = v80;
                          }

                          ++v77;
                          int32x4_t v23 = (_WORD *)((char *)v23 + v78);
                          unint64_t v29 = (uint16x8_t *)((char *)v29 + v78);
                        }

                        while (v77 != v30);
                      }

                      else
                      {
                        do
                        {
                          for (uint64_t j = 0LL; j != v21; ++j)
                          {
                            *(_WORD *)(v27 + 2 * j) = v29->i16[j];
                            unsigned int v171 = v29->u16[j];
                            if (*(_DWORD *)(*(void *)(a1 + 1448) + 4 * j))
                            {
                              double v172 = *(double *)(v32 + 8 * j);
                              double v173 = v172 * (double)v171;
                              double v174 = (double)v171 * v172 + -0.5;
                              double v175 = (double)v171 * v172 + 0.5;
                              if (v173 < 0.0) {
                                double v175 = v174;
                              }
                              unsigned int v171 = (int)v175;
                            }

                            v23[j] = v171;
                          }

                          ++v77;
                          int32x4_t v23 = (_WORD *)((char *)v23 + v78);
                          v27 += 2 * v76;
                          unint64_t v29 = (uint16x8_t *)((char *)v29 + v78);
                        }

                        while (v77 != v30);
                      }

                      goto LABEL_152;
                    }

                    uint64_t v85 = 2 * v21;
                    uint64_t v86 = 2 * v38;
                    unint64_t v87 = a1 + 1770;
                    unint64_t v88 = v32 + 8 * v21;
                    if (v356)
                    {
                      uint64_t v89 = 0LL;
                      __asm
                      {
                        FMOV            V2.2D, #-0.5
                        FMOV            V3.2D, #0.5
                      }

                      uint64_t v95 = v23;
                      v96.i64[0] = 0x100000001LL;
                      v96.i64[1] = 0x100000001LL;
                      unint64_t v97 = (unint64_t)v29;
                      while (v21 >= 8)
                      {
                        uint64_t k = 0LL;
                        uint64_t v104 = v85 + v86 * v89;
                        unint64_t v105 = (unint64_t)v29->u64 + v104;
                        unint64_t v106 = (unint64_t)v23 + v104;
                        _CF = (unint64_t)v95 >= v88 || v32 >= v106;
                        char v108 = !_CF;
                        BOOL v110 = (unint64_t)v95 < v87 && (unint64_t)v74 < v106;
                        if ((v108 & 1) != 0) {
                          goto LABEL_71;
                        }
                        if (v110) {
                          goto LABEL_71;
                        }
                        unint64_t v112 = 0LL;
                        uint16x4_t v113 = (uint16x4_t)vld1_dup_s16(v74);
                        int32x4_t v33 = (int32x4_t)vmovl_u16(v113);
                        int v114 = (float64x2_t *)v32;
                        do
                        {
                          uint16x8_t v115 = *(uint16x8_t *)(v97 + v112);
                          uint32x4_t v116 = vmovl_high_u16(v115);
                          v117.i64[0] = v116.u32[2];
                          v117.i64[1] = v116.u32[3];
                          float64x2_t v118 = vcvtq_f64_u64(v117);
                          v117.i64[0] = v116.u32[0];
                          v117.i64[1] = v116.u32[1];
                          float64x2_t v119 = vcvtq_f64_u64(v117);
                          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v115.i8);
                          v117.i64[0] = v120.u32[2];
                          v117.i64[1] = v120.u32[3];
                          float64x2_t v121 = vcvtq_f64_u64(v117);
                          v117.i64[0] = v120.u32[0];
                          v117.i64[1] = v120.u32[1];
                          float64x2_t v122 = vcvtq_f64_u64(v117);
                          float64x2_t v124 = v114[2];
                          float64x2_t v123 = v114[3];
                          float64x2_t v126 = *v114;
                          float64x2_t v125 = v114[1];
                          v114 += 4;
                          *(int16x8_t *)&v95[v112 / 2] = vuzp1q_s16( (int16x8_t)vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v126, v122)), (int8x16_t)vmlaq_f64(_Q2, v126, v122), (int8x16_t)vmlaq_f64(_Q3, v126, v122))),  (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v125, v121)), (int8x16_t)vmlaq_f64(_Q2, v125, v121), (int8x16_t)vmlaq_f64(_Q3, v125, v121)))),  v96),  v33),  (int16x8_t)vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v124, v119)), (int8x16_t)vmlaq_f64(_Q2, v124, v119), (int8x16_t)vmlaq_f64(_Q3, v124, v119))),  (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v123, v118)), (int8x16_t)vmlaq_f64(_Q2, v123, v118), (int8x16_t)vmlaq_f64(_Q3, v123, v118)))),  v96),  v33));
                          v112 += 16LL;
                        }

                        while ((v85 & 0x1FFFFFFF0LL) != v112);
                        uint64_t k = v21 & 0x7FFFFFF8;
                        if ((v21 & 0xFFFFFFF8) != v21) {
                          goto LABEL_71;
                        }
LABEL_68:
                        v97 += v86;
                        uint64_t v95 = (_WORD *)((char *)v95 + v86);
                        if ((_DWORD)++v89 == v30) {
                          goto LABEL_152;
                        }
                      }

                      for (uint64_t k = 0LL; k != v21; ++k)
                      {
LABEL_71:
                        v33.i16[0] = *(_WORD *)(v97 + 2 * k);
                        double v99 = (double)v33.u64[0];
                        double v100 = *(double *)(v32 + 8 * k);
                        double v101 = v100 * v99;
                        double v102 = v99 * v100 + -0.5;
                        *(double *)v33.i64 = v99 * v100 + 0.5;
                        if (v101 < 0.0) {
                          *(double *)v33.i64 = v102;
                        }
                        int v103 = (int)*(double *)v33.i64;
                        v95[k] = v103;
                      }

                      goto LABEL_68;
                    }

                    uint64_t v262 = 2 * v76;
                    __asm
                    {
                      FMOV            V2.2D, #-0.5
                      FMOV            V3.2D, #0.5
                    }

                    v265.i64[0] = 0x100000001LL;
                    v265.i64[1] = 0x100000001LL;
                    v266 = v23;
                    unint64_t v267 = v27;
                    unint64_t v268 = (unint64_t)v29;
                    while (v21 >= 0x10)
                    {
                      uint64_t m = 0LL;
                      uint64_t v270 = v85 + v86 * v75;
                      unint64_t v271 = (unint64_t)v29->u64 + v270;
                      unint64_t v272 = (unint64_t)v23 + v270;
                      unint64_t v273 = v27 + v270;
                      BOOL v275 = v267 < (unint64_t)v29->u64 + v270 && v268 < v273;
                      BOOL v277 = v267 < v88 && v32 < v273;
                      BOOL v279 = v267 < v87 && (unint64_t)v74 < v273;
                      BOOL v281 = (unint64_t)v266 < v271 && v268 < v272;
                      BOOL v283 = (unint64_t)v266 < v88 && v32 < v272;
                      BOOL v285 = (unint64_t)v266 < v87 && (unint64_t)v74 < v272;
                      if (v275) {
                        goto LABEL_261;
                      }
                      if (v277) {
                        goto LABEL_261;
                      }
                      if (v279) {
                        goto LABEL_261;
                      }
                      if (v281) {
                        goto LABEL_261;
                      }
                      if (v283) {
                        goto LABEL_261;
                      }
                      if (v285) {
                        goto LABEL_261;
                      }
                      unint64_t v287 = 0LL;
                      uint16x4_t v288 = (uint16x4_t)vld1_dup_s16(v74);
                      int32x4_t v33 = (int32x4_t)vmovl_u16(v288);
                      v289 = (float64x2_t *)v32;
                      do
                      {
                        uint16x8_t v290 = *(uint16x8_t *)(v268 + v287);
                        *(uint16x8_t *)(v267 + v287) = v290;
                        uint32x4_t v291 = vmovl_high_u16(v290);
                        v292.i64[0] = v291.u32[2];
                        v292.i64[1] = v291.u32[3];
                        float64x2_t v293 = vcvtq_f64_u64(v292);
                        v292.i64[0] = v291.u32[0];
                        v292.i64[1] = v291.u32[1];
                        float64x2_t v294 = vcvtq_f64_u64(v292);
                        uint32x4_t v295 = vmovl_u16(*(uint16x4_t *)v290.i8);
                        v292.i64[0] = v295.u32[2];
                        v292.i64[1] = v295.u32[3];
                        float64x2_t v296 = vcvtq_f64_u64(v292);
                        v292.i64[0] = v295.u32[0];
                        v292.i64[1] = v295.u32[1];
                        float64x2_t v297 = vcvtq_f64_u64(v292);
                        float64x2_t v299 = v289[2];
                        float64x2_t v298 = v289[3];
                        float64x2_t v301 = *v289;
                        float64x2_t v300 = v289[1];
                        v289 += 4;
                        *(int16x8_t *)&v266[v287 / 2] = vuzp1q_s16( (int16x8_t)vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v301, v297)), (int8x16_t)vmlaq_f64(_Q2, v301, v297), (int8x16_t)vmlaq_f64(_Q3, v301, v297))),  (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v300, v296)), (int8x16_t)vmlaq_f64(_Q2, v300, v296), (int8x16_t)vmlaq_f64(_Q3, v300, v296)))),  v265),  v33),  (int16x8_t)vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v299, v294)), (int8x16_t)vmlaq_f64(_Q2, v299, v294), (int8x16_t)vmlaq_f64(_Q3, v299, v294))),  (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_f64(v298, v293)), (int8x16_t)vmlaq_f64(_Q2, v298, v293), (int8x16_t)vmlaq_f64(_Q3, v298, v293)))),  v265),  v33));
                        v287 += 16LL;
                      }

                      while ((v85 & 0x1FFFFFFF0LL) != v287);
                      uint64_t m = v21 & 0x7FFFFFF8;
                      if ((v21 & 0xFFFFFFF8) != v21) {
                        goto LABEL_261;
                      }
LABEL_208:
                      v268 += v86;
                      v266 = (_WORD *)((char *)v266 + v86);
                      v267 += v262;
                      ++v75;
                      uint64_t v16 = 1LL;
                      if ((_DWORD)v75 == v34) {
                        goto LABEL_153;
                      }
                    }

                    for (uint64_t m = 0LL; m != v21; ++m)
                    {
LABEL_261:
                      *(_WORD *)(v267 + 2 * m) = *(_WORD *)(v268 + 2 * m);
                      int v302 = *(unsigned __int16 *)v74;
                      v33.i16[0] = *(_WORD *)(v268 + 2 * m);
                      double v303 = (double)v33.u64[0];
                      double v304 = *(double *)(v32 + 8 * m);
                      double v305 = v304 * v303;
                      double v306 = v303 * v304 + -0.5;
                      *(double *)v33.i64 = v303 * v304 + 0.5;
                      if (v305 < 0.0) {
                        *(double *)v33.i64 = v306;
                      }
                      int v307 = (int)*(double *)v33.i64;
                      if (v307 < v302) {
                        LOWORD(v302) = v307;
                      }
                      v266[m] = v302;
                    }

                    goto LABEL_208;
                  }

LABEL_152:
                  uint64_t v16 = 1LL;
LABEL_153:
                  BOOL v11 = v359;
                  sub_1000C0EF8(v32);
                  char v176 = v360;
                  if (*v359 != 4) {
                    char v176 = 1;
                  }
                  if ((v176 & 1) != 0) {
                    goto LABEL_310;
                  }
                  goto LABEL_309;
                }
              }

              else
              {
                uint64_t v37 = 0LL;
              }
            }

            else
            {
              uint64_t v37 = 0LL;
              uint64_t v38 = v31;
              double v39 = *(double *)&v358;
            }

            int v70 = (double *)(v32 + 8 * v37);
            uint64_t v71 = v21 - v37;
            uint16x8_t v72 = (int *)(v22 + 4 * v37);
            do
            {
              int v73 = *v72++;
              *v70++ = v35 / (v36 + (double)v73 * v39);
              --v71;
            }

            while (v71);
            goto LABEL_49;
          }

                                      *(void *)(v3 + 8) = sub_100097A40;
                                      *(void *)(v3 + 16) = sub_100097B00;
                                      *(void *)(v3 + 24) = 0LL;
                                      *(void *)(v3 + 32) = 0LL;
                                      return v3;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

LABEL_303:
            if (v49)
            {
              a3 = (double)v49;
              double v45 = (double)v50 / (double)v49;
            }

            goto LABEL_305;
          }

          if (v21 >= 8)
          {
            int v49 = 0;
            uint64_t v127 = 0LL;
            unint64_t v222 = v22 + 4 * v21;
            BOOL v224 = v22 < a1 + 1770 && (unint64_t)v47 < v222;
            _CF = (unint64_t)v29 >= v222;
            int v50 = 0;
            if ((_CF || v22 >= (unint64_t)v29 + 2 * v21) && !v224)
            {
              float64x2_t v226 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
              _Q6 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
              uint16x4_t v227 = (uint16x4_t)vld1_dup_s16(v47);
              int32x4_t v228 = (int32x4_t)vmovl_u16(v227);
              uint64_t v127 = v21 & 0xFFFFFFF8;
              a7 = 0uLL;
              __asm
              {
                FMOV            V16.2D, #0.5
                FMOV            V17.2D, #-0.5
              }

              v231.i64[0] = 0x100000001LL;
              v231.i64[1] = 0x100000001LL;
              uint64_t v232 = v127;
              v233 = (int32x4_t *)v22;
              v234 = v29;
              int32x4_t v235 = 0uLL;
              int32x4_t v236 = 0uLL;
              int32x4_t v237 = 0uLL;
              do
              {
                uint16x8_t v238 = *v234++;
                uint32x4_t v239 = vmovl_u16(*(uint16x4_t *)v238.i8);
                v240.i64[0] = v239.u32[0];
                v240.i64[1] = v239.u32[1];
                float64x2_t v241 = vcvtq_f64_u64(v240);
                v240.i64[0] = v239.u32[2];
                v240.i64[1] = v239.u32[3];
                float64x2_t v242 = vcvtq_f64_u64(v240);
                uint32x4_t v243 = vmovl_high_u16(v238);
                v240.i64[0] = v243.u32[0];
                v240.i64[1] = v243.u32[1];
                float64x2_t v244 = vcvtq_f64_u64(v240);
                v240.i64[0] = v243.u32[2];
                v240.i64[1] = v243.u32[3];
                int32x4_t v245 = vaddq_s32( *v233,  vuzp1q_s32( (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v241), *(double *)a5.i64)),  (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v242), *(double *)a5.i64))));
                int32x4_t v246 = vaddq_s32( v233[1],  vuzp1q_s32( (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, v244), *(double *)a5.i64)),  (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vdivq_f64(v226, vcvtq_f64_u64(v240)), *(double *)a5.i64))));
                int32x4_t *v233 = v245;
                v233[1] = v246;
                v233 += 2;
                v240.i64[0] = v245.i32[2];
                v240.i64[1] = v245.i32[3];
                float64x2_t v247 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v245.i32[0];
                v240.i64[1] = v245.i32[1];
                float64x2_t v248 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v246.i32[2];
                v240.i64[1] = v246.i32[3];
                float64x2_t v249 = vcvtq_f64_s64((int64x2_t)v240);
                v240.i64[0] = v246.i32[0];
                v240.i64[1] = v246.i32[1];
                float64x2_t v250 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v247), a3);
                float64x2_t v251 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v248), a3);
                float64x2_t v252 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, v249), a3);
                float64x2_t v253 = vmulq_n_f64(vdivq_f64((float64x2_t)_Q6, vcvtq_f64_s64((int64x2_t)v240)), a3);
                int32x4_t v237 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v253,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v253),  _Q17,  _Q16))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v252,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v252),  _Q17,  _Q16)))),  v231),  v228),  v237);
                int32x4_t v236 = vaddq_s32( vminq_s32( (int32x4_t)vmaxq_u32( (uint32x4_t)vuzp1q_s32( (int32x4_t)vcvtq_s64_f64( vaddq_f64( v251,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v251),  _Q17,  _Q16))),  (int32x4_t)vcvtq_s64_f64( vaddq_f64( v250,  (float64x2_t)vbslq_s8( (int8x16_t)vcltzq_f64(v250),  _Q17,  _Q16)))),  v231),  v228),  v236);
                int32x4_t v235 = (int32x4_t)vaddw_high_u16((uint32x4_t)v235, v238);
                a7 = (int32x4_t)vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v238.i8);
                v232 -= 8LL;
              }

              while (v232);
              int v50 = vaddvq_s32(vaddq_s32(v236, v237));
              a6 = vaddq_s32(a7, v235);
              a6.i32[0] = vaddvq_s32(a6);
              int v49 = a6.i32[0];
              if (v127 == v21) {
                goto LABEL_303;
              }
            }
          }

          else
          {
            uint64_t v127 = 0LL;
            int v49 = 0;
            int v50 = 0;
          }

          uint64_t v254 = v21 - v127;
          v255 = (int *)(v22 + 4 * v127);
          a6.i64[0] = 0.5;
          a7.i64[0] = -0.5;
          v256 = (unsigned __int16 *)v29 + v127;
          do
          {
            _Q6.i16[0] = *v256;
            int v257 = *v255 + (int)(a3 / (double)_Q6.u64[0] * *(double *)a5.i64);
            *v255++ = v257;
            double v258 = a4 / (double)v257 * a3;
            if (v258 >= 0.0) {
              double v259 = 0.5;
            }
            else {
              double v259 = -0.5;
            }
            *(double *)_Q6.i64 = v258 + v259;
            int v260 = (int)*(double *)_Q6.i64;
            v50 += v260;
            int v261 = *v256++;
            v49 += v261;
            --v254;
          }

          while (v254);
          goto LABEL_303;
        }

        LOBYTE(v12) = v360;
        LODWORD(v20) = v41;
        unint64_t v22 = v40;
      }

      unint64_t v27 = 0LL;
      uint64_t v16 = 0LL;
      if (v12)
      {
        sub_1000C0EF8(0LL);
        char v44 = v360;
        if (*v11 != 4) {
          char v44 = 1;
        }
        if ((v44 & 1) != 0) {
          goto LABEL_310;
        }
LABEL_309:
        *BOOL v11 = 2;
LABEL_310:
        *(void *)(a1 + 1208) = *(void *)(a1 + 1248);
        return v16;
      }

      v359 = v11;
      unint64_t v29 = *(uint16x8_t **)(a1 + 1208);
      int v28 = 0;
      uint64_t v43 = qword_1000FDCC0;
      if (!qword_1000FDCC0) {
        goto LABEL_37;
      }
      goto LABEL_31;
    }

    BOOL v12 = 0;
    uint64_t v13 = *(void *)(qword_1000FDCC0 + 3368);
    int v14 = *(_DWORD *)(qword_1000FDCC0 + 3388);
    uint64_t v10 = *(void *)(qword_1000FDCC0 + 3376);
    int v15 = v9[1];
    if (v15 >= 50) {
      goto LABEL_8;
    }
  }

  else
  {
    int v14 = 0;
    BOOL v11 = (_DWORD *)(a1 + 1296);
    BOOL v12 = *(_DWORD *)(a1 + 1296) == 4;
    uint64_t v13 = 0LL;
    int v15 = v9[1];
    if (v15 >= 50) {
      goto LABEL_8;
    }
  }

  return 1LL;
}

                      int v136 = 0;
LABEL_304:
                      sub_100027400(v12, v163, &v250);
                      if (v241 >= 1) {
                        goto LABEL_305;
                      }
                      goto LABEL_319;
                    }
                  }

uint64_t sub_10000C7A8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 1432);
  unint64_t v31 = 0LL;
  sub_100004868(a1, a3, a4, &v31);
  if (*(_DWORD *)(v10 + 92) <= (signed int)a3 || (int v18 = *(void **)(*(void *)v10 + 8LL * a3)) == 0LL)
  {
    uint64_t result = sub_10000D22C(a1, a3);
    if (!(_DWORD)result) {
      return result;
    }
    int v18 = *(void **)(*(void *)v10 + 8LL * a3);
  }

  if (!*(void *)(v18[3] + 8LL * a4))
  {
    sub_1000C0BFC(2LL * *(int *)(v10 + 32), v11, v12, v13, v14, v15, v16, v17);
    *(void *)(v18[3] + 8LL * a4) = v20;
    int v21 = *(_DWORD *)(v10 + 56);
    int v22 = *(_DWORD *)(v10 + 60);
    *(_DWORD *)(v10 + 56) = v21 + 1;
    if (v21 >= v22) {
      *(_DWORD *)(v10 + 60) = v21 + 1;
    }
  }

  int32x4_t v23 = *(uint16x8_t **)(v18[3] + 8LL * a4);
  *(_DWORD *)(a1 + 1488) = a5;
  uint64_t v24 = *(unsigned int *)(a1 + 1100);
  int v25 = *(__int16 *)(v18[1] + 2LL * a4) + a5;
  if ((v25 + 0x3FFF) <= 0x7FFE)
  {
    uint64_t v26 = 0LL;
    while (1)
    {
      int v27 = v23->i16[v26] + (*(unsigned __int8 *)(a2 + v26) - *(unsigned __int8 *)(v31 + v26)) * a5;
      v23->i16[v26++] = v27;
      if (v24 == v26) {
        goto LABEL_28;
      }
    }

    if ((_DWORD)v26)
    {
      if (v26 >= 8)
      {
        uint64_t v28 = v26 & 0x7FFFFFF8;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFF8LL;
        int v30 = v23;
        do
        {
          *(int16x8_t *)int v30 = vshrq_n_s16((int16x8_t)vsraq_n_u16(*v30, *v30, 0xFuLL), 1uLL);
          ++v30;
          v29 -= 8LL;
        }

        while (v29);
        goto LABEL_24;
      }

      uint64_t v28 = 0LL;
      do
      {
        v23->i16[v28] = (__int16)(v23->i16[v28] + ((unsigned __int16)v23->i16[v28] >> 15)) >> 1;
        ++v28;
LABEL_24:
        ;
      }

      while (v26 != v28);
    }

    v23->i16[v26] = v27 / 2;
    v25 /= 2;
    LODWORD(v26) = v26 + 1;
    goto LABEL_26;
  }

  LODWORD(v26) = 0;
  v25 /= 2;
  if ((int)v24 > 0)
  {
LABEL_26:
    uint64_t v26 = v26;
    do
    {
      v23->i16[v26] = (v23->i16[v26] + (*(unsigned __int8 *)(a2 + v26) - *(unsigned __int8 *)(v31 + v26)) * a5) / 2;
      ++v26;
    }

    while (v24 != v26);
  }

LABEL_28:
  *(_WORD *)(v18[1] + 2LL * a4) = v25;
  return 1LL;
}

      goto LABEL_29;
    }

  *(_DWORD *)(a1 + 880) = v25;
  if (!(_DWORD)v25) {
    return 0LL;
  }
  unint64_t v29 = sub_1000C1074(8LL * (int)v25);
  *(void *)(a1 + 856) = v29;
  if (!v29) {
    return 0LL;
  }
  *(void *)(a1 + 864) = v29 + 8LL * *(int *)(a1 + 880);
LABEL_19:
  uint64_t v26 = sub_100062F94(v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 920))( a1,  a2,  a3,  a4,  a5,  a6,  a10);
}

    if (!v26)
    {
      uint64_t v85 = sub_10007AF1C(*(void *)(a1 + 168), &v95);
      uint64_t result = 0LL;
      uint64_t v86 = &a4[(int)v22];
      *uint64_t v86 = v85;
      v86[1] = 0;
      *a5 = 1;
      *a6 = 1;
      return result;
    }

  unint64_t v40 = sub_1000BE644(0xFFFFFFFF, 4, v38);
  uint64_t v41 = *(void *)(*(void *)(a1 + 144) + 48LL);
  if (v41)
  {
LABEL_14:
    uint64_t v42 = sub_1000BE644(-1431655765 * ((unint64_t)(v41 - *(void *)(a1 + 128)) >> 1), 4, v40);
    uint64_t v43 = *(void *)(*(void *)(a1 + 144) + 56LL);
    if (v43) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  int v34 = &a12[7 * v30];
  double v36 = v34[1];
  double v35 = v34 + 1;
  if (*(unsigned __int16 *)(a2 + 2 * v36) != **(unsigned __int16 **)(v108 + 416))
  {
    uint64_t v43 = &a12[7 * v19 + 2];
    do
    {
      if (*(v43 - 2) == 1)
      {
        char v44 = (_WORD *)sub_1000CAF58(2LL * *v43 + 2, v22, v23, v24, v25, v26, v27, v28);
        sub_1000CC548(v44, (__int16 *)(a2 + 2LL * *(v43 - 1)), *v43 + 1);
        if (v44)
        {
          if ((int)sub_1000B3680(v31, v44, 1LL, 1LL, 0LL, 30, (uint64_t)a9) >= 1)
          {
            sub_1000B8938( a4,  a5,  a6,  a7,  0LL,  v111,  a10,  a3,  *a9,  *(v43 - 1),  *v43,  (int)&_mh_execute_header,  (unint64_t)&_mh_execute_header >> 32);
          }

          else
          {
            else {
              double v45 = *a9;
            }
            sub_1000B8938(a4, a5, a6, a7, 0LL, v111, a10, a3, v45, *(v43 - 1), *v43, 0, 0);
            unint64_t v31 = a1;
          }

          unint64_t v29 = (v29 + 1);
        }

        sub_1000CB038(v44, 2LL * *v43 + 2);
        int32x4_t v33 = a12[4];
      }

      v43 += 7;
      LODWORD(v19) = v19 + 1;
    }

    while (v33 > (int)v19);
LABEL_49:
    int v46 = (int)v19 - 1LL;
    int32x4_t v47 = &a12[7 * v46];
    int v49 = v47[2];
    uint64_t v48 = v47 + 2;
    if (v49 != 1
      || (v50 = &a12[7 * v46], v52 = v50[1], double v51 = v50 + 1, *(_WORD *)(a2 + 2 * v52) != 49)
      || a12[7 * v33 - 7] == 1)
    {
      if (v115 == 36)
      {
        int v53 = *(_WORD **)(v108 + 240);
        int16x8_t v54 = a9;
        if (v53)
        {
          if ((int)sub_1000B3680(v31, v53, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
          {
            int32x4_t v55 = *(_WORD **)(v108 + 240);
LABEL_66:
            else {
              uint64_t v64 = *v54;
            }
            float64x2_t v60 = a11;
            __int128 v65 = a12[7 * v46 + 1];
LABEL_70:
            int64x2_t v66 = *v48 + v65;
LABEL_71:
            sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, v64, v66, 0, 0, 0);
            goto LABEL_72;
          }

        int v53 = v328;
        goto LABEL_29;
      }
    }

    else
    {
      int v77 = 0LL;
      int v77 = v76 & 0x7FFFFFF8;
      uint64_t v78 = v73 + 2;
      int32x4_t v79 = v48 + 2;
      unsigned int v80 = v76 & 0xFFFFFFF8;
      do
      {
        *(void *)&double v81 = __PAIR64__(HIDWORD(*v78), *(_OWORD *)v78) | 0xC0000000C0000000LL;
        DWORD2(v81) = v78[1] | 0xC0000000;
        HIDWORD(v81) = HIDWORD(*(_OWORD *)v78) | 0xC0000000;
        *(v79 - 1) = *((_OWORD *)v78 - 1) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
        *int32x4_t v79 = v81;
        v78 += 4;
        v79 += 2;
        v80 -= 8LL;
      }

      while (v80);
      if (v77 != v76)
      {
LABEL_49:
        double v82 = v76 - v77;
        double v83 = 4 * v77;
        double v84 = (unsigned int *)v48 + v77;
        uint64_t v85 = (int *)((char *)v73 + v83);
        do
        {
          uint64_t v86 = *v85++;
          *v84++ = v86 | 0xC0000000;
          --v82;
        }

        while (v82);
      }
    }

    sub_1000CB038(v73, 4LL * (int)v54);
    goto LABEL_54;
  }

  double v99 = 0LL;
  double v100 = a7;
  double v101 = (int *)a8;
  double v102 = (unint64_t)v318;
  int v103 = v12;
  if (!(_DWORD)v12)
  {
LABEL_200:
    if (v305 && *(_DWORD *)(v100 + 4LL * ((int)v12 - 1)) == -1)
    {
      float64x2_t v218 = (int)v12 - 1;
      float64x2_t v219 = 2LL * (int)(sub_1000CC52C(a2) + 1);
      uint16x4_t v227 = (void *)sub_1000CAF58(v219, v220, v221, v222, v223, v224, v225, v226);
      j__memmove(v227, (const void *)(a2 + 2LL * v101[v218]), 2LL * *(int *)&a9[4 * v218]);
      *((_WORD *)v227 + *(int *)&a9[4 * v218]) = 0;
      int32x4_t v228 = 2LL * (int)(sub_1000CC52C(v102) + 1);
      int32x4_t v236 = (void *)sub_1000CAF58(v228, v229, v230, v231, v232, v233, v234, v235);
      int32x4_t v237 = v102;
      uint16x8_t v238 = v236;
      j__memmove(v236, (const void *)(v237 + 2LL * *(int *)(a10 + 4 * v218)), 2LL * *(int *)(a11 + 4 * v218));
      *((_WORD *)v238 + *(int *)(a11 + 4 * v218)) = 0;
      uint32x4_t v239 = v227;
      do
      {
        uint64x2_t v240 = (unsigned __int16)*v239;
        if (!*v239)
        {
          float64x2_t v242 = -1;
          goto LABEL_208;
        }

        ++v239;
      }

      while (sub_1000CBA60(v240));
      float64x2_t v241 = sub_100082B9C(*a1);
      float64x2_t v242 = v241 | 0xC0000000;
      if (v241 == 0xFFFFFF) {
        float64x2_t v242 = -1;
      }
LABEL_208:
      *(_DWORD *)(a7 + 4 * v218) = v242;
      sub_1000CB038(v238, v228);
      sub_1000CB038(v227, v219);
    }

    return v12;
  }

    uint64_t v24 = 0LL;
    uint64_t v26 = 1;
    goto LABEL_29;
  }

  theArray = 0LL;
  uint64_t v38 = 0LL;
  if (!v8) {
    goto LABEL_28;
  }
LABEL_22:
  CFRetain(v8);
  uint64_t v24 = v8;
LABEL_23:
  if (v38) {
    CFRelease(v38);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  uint64_t v26 = 0;
LABEL_29:
  if (v24) {
    int v27 = v24;
  }
  else {
    int v27 = v8;
  }
  uint64_t v28 = *(const __CFDictionary **)(a4 + 120);
  if (v28 && (unint64_t v29 = (NSString *)CFDictionaryGetValue(v28, a1)) != 0LL)
  {
    int v30 = v29;
    CFRetain(v29);
  }

  else
  {
    int v30 = sub_1000E79CC( a4,  (uint64_t)v9,  (uint64_t)@"VSRecognitionResultValidator",  (uint64_t)&OBJC_PROTOCOL___VSRecognitionResultValidator);
    if (v30)
    {
      Mutable = *(__CFDictionary **)(a4 + 120);
      if (!Mutable)
      {
        unint64_t v32 = CFGetAllocator((CFTypeRef)a4);
        Mutable = CFDictionaryCreateMutable(v32, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(void *)(a4 + 120) = Mutable;
      }

      CFDictionarySetValue(Mutable, a1, v30);
    }
  }

  pthread_mutex_unlock(v36);
  if (v9) {
    CFRelease(v9);
  }
  if (!v30)
  {
    int v25 = 1LL;
    goto LABEL_49;
  }

  if (a3
    && (objc_opt_respondsToSelector(v30, "validRecognitionResultFromRecognitionResult:knownDisambiguationValues:") & 1) != 0)
  {
    int32x4_t v33 = -[NSString validRecognitionResultFromRecognitionResult:knownDisambiguationValues:]( v30,  "validRecognitionResultFromRecognitionResult:knownDisambiguationValues:",  v27,  VSRecognitionDisambiguationContextGetKnownClassValues(a3));
  }

  else
  {
    int32x4_t v33 = -[NSString validRecognitionResultFromRecognitionResult:]( v30,  "validRecognitionResultFromRecognitionResult:",  v27);
  }

  int v27 = v33;
  int v25 = v33 != 0LL;
  CFRelease(v30);
  if (v25)
  {
LABEL_49:
    if (v27 && v27 != v8)
    {
      if ((v26 & 1) == 0) {
        CFRelease(v8);
      }
      CFRetain(v27);
      if (a2) {
        *a2 = v27;
      }
    }
  }

  if (v24) {
    CFRelease(v24);
  }
  return v25;
}

  *(NDR_record_t *)(a2 + 24) = v19;
}

uint64_t sub_10000CA28(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = a2 == 3;
  BOOL v7 = a2 < 0xA;
  if (a2 == 7)
  {
    if (qword_1000FDCC0)
    {
      uint64_t v8 = *(void *)(qword_1000FDCC0 + 920);
      if (v8 == -1)
      {
        uint64_t v8 = *(void *)(qword_1000FDCC0 + 912);
        uint64_t v9 = *(void *)(qword_1000FDCC0 + 952);
        if (v9 != -1)
        {
LABEL_5:
          uint64_t v10 = *(void *)(a1 + 1432);
          if (!v10) {
            goto LABEL_6;
          }
LABEL_17:
          if (*(int *)(v10 + 92) >= 1)
          {
            int v18 = 0;
            do
              sub_10000CDD8(*(void **)(a1 + 1432), (unsigned __int16)v18++);
            while (*(_DWORD *)(v10 + 92) > (int)(unsigned __int16)v18);
          }

          sub_1000C0EF8(*(void *)v10);
          sub_1000C0EF8(v10);
          *(void *)(a1 + 1432) = 0LL;
          return 0LL;
        }
      }

      else
      {
        uint64_t v9 = *(void *)(qword_1000FDCC0 + 952);
        if (v9 != -1) {
          goto LABEL_5;
        }
      }

      goto LABEL_14;
    }
  }

  else if (qword_1000FDCC0)
  {
    LODWORD(v8) = *(_DWORD *)(qword_1000FDCC0 + 912);
LABEL_14:
    uint64_t v9 = *(void *)(qword_1000FDCC0 + 944);
    uint64_t v10 = *(void *)(a1 + 1432);
    if (v10) {
      goto LABEL_17;
    }
    goto LABEL_6;
  }

  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  uint64_t v10 = *(void *)(a1 + 1432);
  if (v10) {
    goto LABEL_17;
  }
LABEL_6:
LABEL_7:
  *(void *)(a1 + 1432) = 0LL;
  uint64_t v11 = sub_1000C1074(96LL);
  uint64_t v12 = v11;
  *(void *)(a1 + 1432) = v11;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a1 + 1100);
  int v13 = *(_DWORD *)(a1 + 1080);
  if (*(_DWORD *)(a1 + 1024)) {
    v13 += *(_DWORD *)(a1 + 776);
  }
  *(_DWORD *)(v11 + 92) = v13;
  uint64_t v14 = sub_1000C1074(8LL * v13);
  *(void *)uint64_t v12 = v14;
  if (v14)
  {
    unsigned int v15 = v7 & (0x23Cu >> a2);
    *(_DWORD *)(v12 + 8) = v15;
    *(_DWORD *)(v12 + 12) = a3;
    uint64_t v16 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v17 = *(_DWORD *)(qword_1000FDCC0 + 664);
    }
    else {
      int v17 = 0;
    }
    unsigned int v21 = a2 & 0xFFFFFFFE;
    *(_DWORD *)(v12 + 44) = v17;
    *(_DWORD *)(v12 + 24) = v6;
    *(_DWORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 16) = a2 == 6;
    if (v15)
    {
      *(_DWORD *)(v12 + 36) = 0;
      else {
        int v22 = 0;
      }
      *(_DWORD *)(v12 + 40) = v22;
      if (v21 == 8) {
        *(_DWORD *)(v12 + 20) = 1;
      }
    }

    else if (v21 == 8)
    {
      if (v16)
      {
        *(_DWORD *)(v12 + 36) = *(void *)(v16 + 960);
        *(_DWORD *)(v12 + 40) = *(void *)(v16 + 928);
        *(_DWORD *)(v12 + 20) = 1;
        *(_DWORD *)(v12 + 12) = *(_DWORD *)(v16 + 5352);
      }

      else
      {
        *(_DWORD *)(v12 + 36) = 0;
        *(_DWORD *)(v12 + 40) = 0;
        *(_DWORD *)(v12 + 20) = 1;
        *(_DWORD *)(v12 + 12) = 0;
      }
    }

    else if (a2 == 6)
    {
      *(_DWORD *)(v12 + 36) = 0;
      *(_DWORD *)(v12 + 40) = 0;
      *(_DWORD *)(v12 + 12) = 1;
    }

    else
    {
      *(_DWORD *)(v12 + 36) = v9;
      *(_DWORD *)(v12 + 40) = v8;
    }

    *(_DWORD *)(v12 + 88) = 0;
    *(void *)(v12 + 56) = 0LL;
    *(void *)(v12 + 64) = 0LL;
    *(void *)(v12 + 48) = 0LL;
    uint64_t result = 1LL;
    *(_DWORD *)(v12 + 72) = 0;
  }

  else
  {
    sub_1000C0EF8(**(void **)(a1 + 1432));
    sub_1000C0EF8(*(void *)(*(void *)(a1 + 1432) + 80LL));
    sub_1000C0EF8(*(void *)(a1 + 1432));
    uint64_t v20 = *(void **)(a1 + 1432);
    if (v20)
    {
      *uint64_t v20 = 0LL;
      *(void *)(*(void *)(a1 + 1432) + 80LL) = 0LL;
      *(_DWORD *)(*(void *)(a1 + 1432) + 92LL) = 0;
    }

    uint64_t result = 0LL;
    *(void *)(a1 + 1432) = 0LL;
  }

  return result;
}

uint64_t sub_10000CCC0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1432);
  if (v1)
  {
    uint64_t v2 = result;
    if (*(int *)(v1 + 92) >= 1)
    {
      int v3 = 0;
      do
        sub_10000CDD8(*(void **)(v2 + 1432), (unsigned __int16)v3++);
      while (*(_DWORD *)(v1 + 92) > (int)(unsigned __int16)v3);
    }

    sub_1000C0EF8(*(void *)v1);
    uint64_t result = sub_1000C0EF8(v1);
    *(void *)(v2 + 1432) = 0LL;
  }

  return result;
}

uint64_t sub_10000CD2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 996) && *(_DWORD *)(a1 + 1000) && *(void *)(a1 + 1432)) {
    return sub_10000A46C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10000CD50(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 1432) + 12LL);
  *(_DWORD *)(a1 + 1456) = 0;
  if (*(_DWORD *)(a1 + 996))
  {
    int v3 = *(void (**)(uint64_t))(a1 + 224);
    if (v3) {
      v3(a1);
    }
  }

  sub_1000C0EF8(*(void *)(a1 + 1464));
  sub_1000C0EF8(*(void *)(a1 + 1472));
  sub_1000C0EF8(*(void *)(a1 + 1480));
  *(void *)(a1 + 1480) = 0LL;
  *(_OWORD *)(a1 + 1464) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 1496));
  *(void *)(a1 + 1496) = 0LL;
  return sub_10000AF28(a1, 1LL, v2, v4, v5, v6, v7, v8);
}

void *sub_10000CDD8(void *result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*result + 8LL * a2);
  if (v2)
  {
    int v3 = result;
    uint64_t v4 = a2;
    int v5 = *(_DWORD *)v2;
    if (*(int *)v2 >= 1)
    {
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(void *)(*(void *)(v2 + 24) + 8 * v6);
        if (v7)
        {
          sub_1000C0EF8(v7);
          *(void *)(*(void *)(v2 + 24) + 8 * v6) = 0LL;
          int v5 = *(_DWORD *)v2;
        }

        ++v6;
      }

      while (v6 < v5);
    }

    sub_1000C0EF8(*(void *)(v2 + 24));
    *(void *)(v2 + 24) = 0LL;
    sub_1000C0EF8(*(void *)(v2 + 8));
    *(void *)(v2 + 8) = 0LL;
    sub_1000C0EF8(*(void *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    uint64_t result = (void *)sub_1000C0EF8(v2);
    *(void *)(*v3 + 8 * v4) = 0LL;
  }

  return result;
}

uint64_t sub_10000CE80(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a1 + 1456)) {
    return 1LL;
  }
  unsigned int v4 = a2;
  uint64_t v6 = sub_10000CF74(a1, a2);
  if (!(_DWORD)v6) {
    return v6;
  }
  uint64_t v7 = *(void *)(a1 + 1432);
  if (v7)
  {
    if (*(unsigned __int16 *)(a1 + 1388) != v4)
    {
      ++*(_DWORD *)(v7 + 64);
      if (!*(_DWORD *)(a1 + 1864)) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }

    ++*(_DWORD *)(v7 + 68);
  }

  if (!*(_DWORD *)(a1 + 1864)) {
    goto LABEL_14;
  }
LABEL_11:
LABEL_14:
  if (!(_DWORD)v6) {
    return v6;
  }
  if (!qword_1000FDCC0) {
    return v6;
  }
  if (!*(_DWORD *)(qword_1000FDCC0 + 1064)) {
    return v6;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
  if (!v9) {
    return v6;
  }
  v9(a1, 1LL);
  return v6;
}

uint64_t sub_10000CF74(uint64_t a1, uint64_t a2)
{
  int v4 = sub_100004634(a1, a2);
  if (*(_BYTE *)(a1 + 1041))
  {
    uint64_t v5 = *(void *)(a1 + 1432);
    if (*(_DWORD *)(v5 + 92) <= (int)a2)
    {
      ++*(_DWORD *)(v5 + 72);
      return 1LL;
    }
  }

  uint64_t v6 = *(void *)(a1 + 1544);
  int v7 = sub_100004688(a1);
  if (v4 < 1)
  {
    int v9 = 0;
    int v11 = 0x4000;
    uint64_t v12 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    int v9 = 0;
    __int16 v10 = 0x4000;
    do
    {
      *(_WORD *)(*(void *)(a1 + 1464) + 2 * v8) = sub_100012374(a1);
      if (*(__int16 *)(*(void *)(a1 + 1464) + 2 * v8) < v10)
      {
        int v9 = v8;
        __int16 v10 = *(_WORD *)(*(void *)(a1 + 1464) + 2 * v8);
      }

      ++v8;
    }

    while (v4 != v8);
    int v11 = v10;
    uint64_t v12 = qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_14:
      if (v4 >= 1)
      {
        uint64_t v15 = 0LL;
        int v13 = 0;
        int v14 = 0;
        do
        {
          int v16 = *(__int16 *)(*(void *)(a1 + 1464) + 2 * v15) - v11;
          if (*(_DWORD *)(a1 + 1424) > v16)
          {
            int v17 = *(__int16 *)(*(void *)(a1 + 1408) + 2LL * v16);
            if (v17 >= 1)
            {
              *(void *)(*(void *)(a1 + 1472) + 8LL * v13) = (unsigned __int16)v17;
              v14 += (unsigned __int16)v17;
              *(_DWORD *)(*(void *)(a1 + 1480) + 4LL * v13++) = v15;
            }
          }

          ++v15;
        }

        while (v4 != v15);
        if (v13 >= 1) {
          goto LABEL_21;
        }
      }

      return 1LL;
    }
  }

  if (!*(_DWORD *)(v12 + 904)) {
    goto LABEL_14;
  }
  int v13 = 1;
  **(void **)(a1 + 1472) = 1LL;
  **(_DWORD **)(a1 + 1480) = v9;
  int v14 = 1;
LABEL_21:
  if (v14 >= 0) {
    int v18 = v14;
  }
  else {
    int v18 = v14 + 1;
  }
  uint64_t v19 = (uint64_t)v18 >> 1;
  uint64_t v20 = v14;
  uint64_t v21 = v13;
  if (v7 == (_DWORD)a2)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = qword_1000FDCC0;
    uint64_t result = 1LL;
    do
    {
      if (v23) {
        double v25 = *(double *)(v23 + 936);
      }
      else {
        double v25 = 0.0;
      }
      int v26 = (int)(v25 * (double)(int)((v19 + *(void *)(*(void *)(a1 + 1472) + 8 * v22) * *(int *)(a1 + 1404)) / v20));
      if (v26 >= 1)
      {
        if (*(_DWORD *)(a1 + 996)
          && (int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 208)) != 0LL)
        {
          uint64_t result = v27(a1, v6, a2, *(unsigned int *)(*(void *)(a1 + 1480) + 4 * v22), (__int16)v26);
          uint64_t v23 = qword_1000FDCC0;
        }

        else
        {
          uint64_t result = 1LL;
        }
      }

      ++v22;
    }

    while (v21 != v22);
  }

  else
  {
    uint64_t v28 = 0LL;
    uint64_t result = 1LL;
    do
    {
      uint64_t v29 = (v19 + *(void *)(*(void *)(a1 + 1472) + 8 * v28) * *(int *)(a1 + 1404)) / v20;
      if ((int)v29 >= 1)
      {
        if (*(_DWORD *)(a1 + 996)
          && (int v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 208)) != 0LL)
        {
          uint64_t result = v30(a1, v6, a2, *(unsigned int *)(*(void *)(a1 + 1480) + 4 * v28), (__int16)v29);
        }

        else
        {
          uint64_t result = 1LL;
        }
      }

      ++v28;
    }

    while (v21 != v28);
  }

  return result;
}

uint64_t sub_10000D22C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 1432);
  if (*(void *)(*(void *)v2 + 8LL * a2)) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v9 = 1;
  }

  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      int v8 = *v6;
      int v7 = v6[1];
    }

    else
    {
      __int16 v10 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      int v8 = *v10;
      int v7 = v10[1];
    }

    int v9 = v7 - v8;
  }

  *(void *)(*(void *)v2 + 8LL * a2) = sub_1000C1074(32LL);
  uint64_t v11 = *(void *)(*(void *)v2 + 8LL * a2);
  if (!v11
    || (*(_DWORD *)uint64_t v11 = v9, v12 = sub_1000C1074(2LL * v9), (*(void *)(v11 + 8) = v12) == 0LL)
    || (uint64_t v13 = sub_1000C1074(2LL * v9), (*(void *)(v11 + 16) = v13) == 0LL)
    || (uint64_t v14 = sub_1000C1074(8LL * v9), (*(void *)(v11 + 24) = v14) == 0LL))
  {
    uint64_t v20 = *(uint64_t **)(*(void *)v2 + 8LL * a2);
    if (v20)
    {
      sub_1000C0EF8(v20[1]);
      v20[1] = 0LL;
      sub_1000C0EF8(v20[2]);
      v20[2] = 0LL;
      sub_1000C0EF8(v20[3]);
      v20[3] = 0LL;
      sub_1000C0EF8(*(void *)(*(void *)v2 + 8LL * a2));
      uint64_t result = 0LL;
      *(void *)(*(void *)v2 + 8LL * a2) = 0LL;
      return result;
    }

    return 0LL;
  }

  uint64_t v15 = 36LL;
  int v16 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(*(void *)(a1 + 1432) + v15);
  if (v16 >= 0x4000) {
    LOWORD(v17) = 0x3FFF;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(*(void *)(a1 + 1432) + v15);
  }
  if (v16 >= -16383) {
    __int16 v18 = v17;
  }
  else {
    __int16 v18 = -16384;
  }
  if (v9 < 1) {
    return 1LL;
  }
  uint64_t v19 = 0LL;
  uint64_t result = 1LL;
  do
  {
    *(_WORD *)(*(void *)(v11 + 8) + v19) = v18;
    *(_WORD *)(*(void *)(v11 + 16) + v19) = v18;
    v19 += 2LL;
  }

  while (2LL * v9 != v19);
  return result;
}

void *sub_10000D438( void *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (void *)result[179];
  uint64_t v127 = 0LL;
  int v9 = *(void **)(*v8 + 8LL * a3);
  if (!v9) {
    return result;
  }
  int v10 = a4;
  unsigned int v11 = a3;
  uint64_t v13 = (uint64_t)result;
  signed int v14 = *(__int16 *)(v9[1] + 2LL * (int)a4);
  uint64_t v15 = (int)a4;
  int v16 = qword_1000FDCC0;
  if (*((unsigned __int16 *)result + 694) == (_DWORD)a3)
  {
    if (!qword_1000FDCC0) {
      goto LABEL_8;
    }
    int v17 = (int *)(qword_1000FDCC0 + 912);
  }

  else
  {
    if (!qword_1000FDCC0) {
      goto LABEL_8;
    }
    int v17 = (int *)(qword_1000FDCC0 + 944);
  }

  int v16 = *v17;
LABEL_8:
  int v18 = *((_DWORD *)result + 351) * v16;
  if (v18 >= 0x4000) {
    __int16 v19 = 0x3FFF;
  }
  else {
    __int16 v19 = v18;
  }
  if (v18 < -16383) {
    __int16 v19 = -16384;
  }
  if (v14 > *(__int16 *)(v9[2] + 2LL * (int)a4))
  {
    __int16 v126 = v19;
    uint64_t v20 = *((int *)result + 275);
    uint64_t v21 = *((unsigned int *)result + 275);
    uint64_t v22 = (uint32x4_t *)sub_1000CAF58(4 * v20, a2, a3, a4, a5, a6, a7, a8);
    sub_100004868(v13, v11, v10, (unint64_t *)&v127);
    unint64_t v23 = *(void *)(v9[3] + 8 * v15);
    if ((int)v20 < 1)
    {
      LOWORD(v27) = v126;
      int v28 = v126;
      int v29 = v126 + v14;
      goto LABEL_60;
    }

    unint64_t v24 = (unint64_t)v127;
    if (v21 < 8)
    {
      uint64_t v25 = 0LL;
      unsigned int v26 = 0;
      goto LABEL_47;
    }

    unsigned int v26 = 0;
    uint64_t v25 = 0LL;
    unint64_t v30 = (unint64_t)v22 + 4 * v21;
    BOOL v32 = v22 < (uint32x4_t *)((char *)v127 + v21) && (unint64_t)v127 < v30;
    BOOL v34 = (unint64_t)v22 < v23 + 2 * v21 && v23 < v30;
    BOOL v35 = v30 <= a2 || (unint64_t)v22 >= a2 + v21;
    if (v35 && !v32 && !v34)
    {
      int32x4_t v36 = vdupq_n_s32(v14);
      if (v21 < 0x20)
      {
        unsigned int v26 = 0;
        uint64_t v25 = 0LL;
LABEL_44:
        uint64_t v78 = v25;
        uint64_t v25 = v21 & 0xFFFFFFF8;
        int32x4_t v79 = vdupq_n_s32(v26);
        unsigned int v80 = (uint8x8_t *)(a2 + v78);
        double v81 = (uint8x8_t *)(v24 + v78);
        double v82 = (int16x8_t *)(v23 + 2 * v78);
        double v83 = (int32x4_t *)((char *)v22 + 4 * v78);
        uint64_t v84 = v78 - v25;
        v85.i64[0] = 0x400000004000LL;
        v85.i64[1] = 0x400000004000LL;
        v86.i64[0] = 0x800000008000LL;
        v86.i64[1] = 0x800000008000LL;
        int32x4_t v87 = v79;
        do
        {
          uint8x8_t v88 = *v80++;
          uint8x8_t v89 = v88;
          uint8x8_t v90 = *v81++;
          int16x8_t v91 = (int16x8_t)vsubl_u8(v90, v89);
          int16x8_t v92 = *v82++;
          int32x4_t v93 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v91.i8), v36), *(int16x4_t *)v92.i8);
          int32x4_t v94 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v91), v36), v92);
          *double v83 = v93;
          v83[1] = v94;
          v83 += 2;
          int32x4_t v95 = (int32x4_t)vcgtq_u32(v86, (uint32x4_t)vaddq_s32(v93, v85));
          int32x4_t v96 = (int32x4_t)vcgtq_u32(v86, (uint32x4_t)vaddq_s32(v94, v85));
          int32x4_t v87 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v96), v96);
          int32x4_t v79 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v79, (int8x16_t)v95), v95);
          v84 += 8LL;
        }

        while (v84);
        unsigned int v26 = vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqzq_s32(v79),  (int16x8_t)vceqzq_s32(v87))))) & 1;
        if (v25 == v21) {
          goto LABEL_51;
        }
        goto LABEL_47;
      }

      int8x16_t v37 = 0uLL;
      uint64_t v25 = v21 & 0xFFFFFFE0;
      uint64_t v38 = (uint8x8_t *)(a2 + 16);
      v39.i64[0] = 0x400000004000LL;
      v39.i64[1] = 0x400000004000LL;
      v40.i64[0] = 0x800000008000LL;
      v40.i64[1] = 0x800000008000LL;
      uint64_t v41 = (int32x4_t *)&v22[4];
      int8x16_t v42 = 0uLL;
      uint64_t v43 = v127 + 2;
      char v44 = (int16x8_t *)(v23 + 32);
      uint64_t v45 = v25;
      int8x16_t v46 = 0uLL;
      int8x16_t v47 = 0uLL;
      int8x16_t v48 = 0uLL;
      int8x16_t v49 = 0uLL;
      int8x16_t v50 = 0uLL;
      int8x16_t v51 = 0uLL;
      do
      {
        uint8x16_t v52 = *(uint8x16_t *)v38[-2].i8;
        uint8x16_t v53 = *(uint8x16_t *)v43[-2].i8;
        int16x8_t v54 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v52.i8);
        int16x8_t v55 = (int16x8_t)vsubl_high_u8(v53, v52);
        int16x8_t v56 = (int16x8_t)vsubl_u8(*v43, *v38);
        int16x8_t v57 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v43->i8, *(uint8x16_t *)v38->i8);
        int16x8_t v58 = v44[-2];
        int16x8_t v59 = v44[-1];
        int16x8_t v60 = *v44;
        int16x8_t v61 = v44[1];
        v44 += 4;
        int32x4_t v62 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v54.i8), v36), *(int16x4_t *)v58.i8);
        int32x4_t v63 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v54), v36), v58);
        int32x4_t v64 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v55.i8), v36), *(int16x4_t *)v59.i8);
        int32x4_t v65 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v55), v36), v59);
        int32x4_t v66 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v56.i8), v36), *(int16x4_t *)v60.i8);
        int32x4_t v67 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v56), v36), v60);
        int32x4_t v68 = vaddw_s16(vmulq_s32(vmovl_s16(*(int16x4_t *)v57.i8), v36), *(int16x4_t *)v61.i8);
        int32x4_t v69 = vaddw_high_s16(vmulq_s32(vmovl_high_s16(v57), v36), v61);
        v41[-2] = v64;
        v41[-1] = v65;
        v41[-4] = v62;
        v41[-3] = v63;
        v41[2] = v68;
        v41[3] = v69;
        *uint64_t v41 = v66;
        v41[1] = v67;
        v41 += 8;
        int32x4_t v70 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v62, v39));
        int32x4_t v71 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v63, v39));
        int32x4_t v72 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v64, v39));
        int32x4_t v73 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v65, v39));
        int32x4_t v74 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v66, v39));
        int32x4_t v75 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v67, v39));
        int32x4_t v76 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v68, v39));
        int32x4_t v77 = (int32x4_t)vcgtq_u32(v40, (uint32x4_t)vaddq_s32(v69, v39));
        int8x16_t v47 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v47, (int8x16_t)v73), v73);
        int8x16_t v46 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v46, (int8x16_t)v72), v72);
        int8x16_t v42 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v42, (int8x16_t)v71), v71);
        int8x16_t v37 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v37, (int8x16_t)v70), v70);
        int8x16_t v51 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v51, (int8x16_t)v77), v77);
        int8x16_t v50 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v50, (int8x16_t)v76), v76);
        int8x16_t v49 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v49, (int8x16_t)v75), v75);
        v38 += 4;
        int8x16_t v48 = (int8x16_t)vsubq_s32((int32x4_t)vbicq_s8(v48, (int8x16_t)v74), v74);
        v43 += 4;
        v45 -= 32LL;
      }

      while (v45);
      unsigned int v26 = vmaxvq_u8((uint8x16_t)vmvnq_s8( vuzp1q_s8( (int8x16_t)vuzp1q_s16( (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v37, v48)),  (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v42, v49))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v46, v50)),  (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v47, v51)))))) & 1;
      if (v25 == v21) {
        goto LABEL_51;
      }
      if ((v21 & 0x18) != 0) {
        goto LABEL_44;
      }
    }

uint64_t sub_10000D9B8( uint64_t result, int a2, int a3, int a4, int *a5, _WORD *a6, _WORD *a7, _WORD *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  if (qword_1000FDCC0)
  {
    int v15 = *(_DWORD *)(result + 1404) * *(_DWORD *)(qword_1000FDCC0 + 3376);
    int v16 = *(_DWORD *)(qword_1000FDCC0 + 3388);
    if (a3 < 1) {
      return result;
    }
  }

  else
  {
    int v15 = 0;
    int v16 = 0;
    if (a3 < 1) {
      return result;
    }
  }

  double v17 = (double)*(int *)(result + 1192);
  double v18 = (double)a4;
  uint64_t v19 = a3;
  if (v15 < 1)
  {
    if (a7)
    {
      if (v16)
      {
        for (uint64_t i = 0LL; i != a3; a7[i++] = v29)
        {
          if (a2) {
            a8[i] = a6[i];
          }
          double v26 = v18 / (double)a5[i] * v17 / a9;
          if (v26 >= 0.0) {
            double v27 = 0.5;
          }
          else {
            double v27 = -0.5;
          }
          int v28 = (int)(v26 + v27);
          if (*(_DWORD *)(*(void *)(result + 1448) + 4 * i)) {
            __int16 v29 = v28;
          }
          else {
            __int16 v29 = a6[i];
          }
        }
      }

      else
      {
        do
        {
          if (a2) {
            *a8 = *a6;
          }
          int v30 = *a5++;
          double v31 = v18 / (double)v30 * v17 / a9;
          if (v31 >= 0.0) {
            double v32 = 0.5;
          }
          else {
            double v32 = -0.5;
          }
          int v33 = (int)(v31 + v32);
          *a7++ = v33;
          ++a6;
          ++a8;
          --v19;
        }

        while (v19);
      }
    }

    else
    {
      do
      {
        if (a2) {
          *a8 = *a6;
        }
        ++a6;
        ++a8;
        --v19;
      }

      while (v19);
    }
  }

  else
  {
    for (uint64_t j = 0LL; j != a3; ++j)
    {
      if (a2) {
        a8[j] = a6[j];
      }
      LOWORD(a15) = a6[j];
      int v21 = a5[j] + (int)(v17 / (double)*(unint64_t *)&a15 * (double)v15);
      a5[j] = v21;
      double v22 = v18 / (double)v21 * v17 / a9;
      if (v22 >= 0.0) {
        double v23 = 0.5;
      }
      else {
        double v23 = -0.5;
      }
      a15 = v22 + v23;
      int v24 = (int)a15;
      if (a7)
      {
        if (v16)
        {
          if (!*(_DWORD *)(*(void *)(result + 1448) + 4 * j)) {
            LOWORD(v24) = a6[j];
          }
        }

        a7[j] = v24;
      }
    }
  }

  return result;
}

uint64_t sub_10000DBD4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t result = sub_100038714(a1, a3, a4);
  if ((_DWORD)result)
  {
    int v9 = result;
    if ((int)result >= 1)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = result;
      while (1)
      {
        int v12 = sub_100038740(a1, a3, a4, v10);
        uint64_t result = sub_1000387B0(a1, a3, a4, v10);
        uint64_t v13 = (_WORD *)*a2;
        if (v12 < 0)
        {
          v13[v10] = v12;
          uint64_t v14 = a2[1];
          if ((result & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_9:
          *(_WORD *)(v14 + 2 * v10++) = result;
          if (v11 == v10) {
            return result;
          }
        }

        else
        {
          v13[v10] = -(__int16)v9;
          *(_WORD *)(*a2 + 2LL * (__int16)v9++) = v12;
          uint64_t v14 = a2[1];
          if ((result & 0x80000000) != 0) {
            goto LABEL_9;
          }
LABEL_4:
          *(_WORD *)(v14 + 2 * v10) = -(__int16)v9;
          *(_WORD *)(*a2 + 2LL * (__int16)v9++) = result;
          if (v11 == ++v10) {
            return result;
          }
        }
      }
    }
  }

  else
  {
    uint64_t result = sub_100038308(a1, 0, a3, 0, a4);
    *(_WORD *)*a2 = result;
  }

  return result;
}

uint64_t sub_10000DD10(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 1504);
  uint64_t v8 = *(unsigned int *)(a1 + 1100);
  unsigned int v135 = sub_100038714(*(void *)(a1 + 1304), a2, a3);
  if ((v135 & 0x80000000) == 0)
  {
    uint64_t v15 = (int)(2 * v135);
    uint64_t v16 = 2 * (int)v8 * v15;
    do
    {
      uint64_t v18 = *(void *)(v7 + 24);
      *(_WORD *)(*(void *)(v7 + 16) + 2LL * v15) = 0;
      sub_10000E568((int32x4_t *)a1, v7, *(__int16 *)(*(void *)v7 + 2LL * v15), v15);
      if (v15 < v135) {
        sub_10000E568((int32x4_t *)a1, v7, *(__int16 *)(*(void *)(v7 + 8) + 2LL * v15), v15);
      }
      v16 -= 2LL * (int)v8;
    }

    while (v15-- > 0);
  }

  if (a4)
  {
    uint64_t v19 = *(unsigned int *)(a1 + 1100);
    int v20 = **(__int16 **)(v7 + 16);
    *(_DWORD *)(a1 + 1488) = v20;
    if ((int)v19 >= 1)
    {
      for (uint64_t i = 0LL; i != v19; ++i)
        *(_DWORD *)(*(void *)(a1 + 1496) + 4 * i) = *(__int16 *)(*(void *)(v7 + 24) + 2 * i);
      LODWORD(v19) = *(_DWORD *)(a1 + 1100);
      int v20 = *(_DWORD *)(a1 + 1488);
    }

    int v22 = *(_DWORD *)(v7 + 40) + v20;
    unsigned int v23 = v22 - 16385;
    if ((int)v19 < 1)
    {
      if (v23 <= 0xFFFF7FFE) {
        v22 /= 2;
      }
      goto LABEL_79;
    }

    int v24 = *(int16x4_t **)(v7 + 32);
    unint64_t v25 = *(void *)(a1 + 1496);
    unsigned int v26 = v23 < 0xFFFF7FFF;
    uint64_t v27 = v19;
    if (v19 >= 0x10
      && (v25 < (unint64_t)v24 + 2 * v19
        ? (BOOL v28 = (unint64_t)v24 >= v25 + 4LL * v19)
        : (BOOL v28 = 1),
          v28))
    {
      uint64_t v29 = v19 & 0x7FFFFFF0;
      int32x4_t v30 = vdupq_n_s32(v26);
      double v31 = v24 + 2;
      double v32 = (int32x4_t *)(v25 + 32);
      v33.i64[0] = 0x400000004000LL;
      v33.i64[1] = 0x400000004000LL;
      uint64_t v34 = v19 & 0xFFFFFFF0;
      v35.i64[0] = 0x800000008000LL;
      v35.i64[1] = 0x800000008000LL;
      int32x4_t v36 = v30;
      int32x4_t v37 = v30;
      int32x4_t v38 = v30;
      int32x4_t v39 = v30;
      do
      {
        int16x8_t v40 = *(int16x8_t *)v31[-2].i8;
        int32x4_t v41 = vaddw_s16(v32[-2], *(int16x4_t *)v40.i8);
        int32x4_t v42 = vaddw_high_s16(v32[-1], v40);
        int32x4_t v43 = vaddw_s16(*v32, *v31);
        int32x4_t v44 = vaddw_high_s16(v32[1], *(int16x8_t *)v31->i8);
        v32[-2] = v41;
        v32[-1] = v42;
        int32x4_t *v32 = v43;
        v32[1] = v44;
        v32 += 4;
        int32x4_t v45 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v41, v33));
        int32x4_t v46 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v42, v33));
        int32x4_t v47 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v43, v33));
        int32x4_t v48 = (int32x4_t)vcgtq_u32(v35, (uint32x4_t)vaddq_s32(v44, v33));
        int32x4_t v37 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v37, (int8x16_t)v46), v46);
        int32x4_t v36 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v36, (int8x16_t)v45), v45);
        int32x4_t v39 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v39, (int8x16_t)v48), v48);
        int32x4_t v38 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v38, (int8x16_t)v47), v47);
        v31 += 4;
        v34 -= 16LL;
      }

      while (v34);
      if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v36, v30),  (int16x8_t)vceqq_s32(v37, v30))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v38, v30),  (int16x8_t)vceqq_s32(v39, v30)))),  (int8x8_t)0x8040201008040201LL)))
      {
        unsigned int v26 = 1;
      }

      if (v29 == v19)
      {
LABEL_47:
        if (!v26)
        {
LABEL_73:
          if (v19 >= 0x10
            && ((unint64_t)v24 >= v25 + 4LL * v19
             || v25 >= (unint64_t)v24 + 2 * v19))
          {
            uint64_t v78 = v19 & 0x7FFFFFF0;
            uint64_t v84 = (int16x8_t *)(v25 + 32);
            int32x4_t v85 = (int16x8_t *)&v24[2];
            uint64_t v86 = v27 & 0xFFFFFFF0;
            do
            {
              int16x8_t v88 = v84[-2];
              int16x8_t v87 = v84[-1];
              int16x8_t v90 = *v84;
              int16x8_t v89 = v84[1];
              v84 += 4;
              v85[-1] = vuzp1q_s16(v88, v87);
              *int32x4_t v85 = vuzp1q_s16(v90, v89);
              v85 += 2;
              v86 -= 16LL;
            }

            while (v86);
            if (v78 == v27) {
              goto LABEL_79;
            }
          }

          else
          {
            uint64_t v78 = 0LL;
          }

          uint64_t v79 = v27 - v78;
          unsigned int v80 = (_WORD *)v24 + v78;
          double v81 = (int *)(v25 + 4 * v78);
          do
          {
            int v82 = *v81++;
            *v80++ = v82;
            --v79;
          }

          while (v79);
LABEL_79:
          *(_DWORD *)(v7 + 40) = (__int16)v22;
          return 1LL;
        }

        if (v19 >= 4)
        {
          uint64_t v59 = v19 & 0x7FFFFFFC;
          uint64_t v74 = v19 & 0xFFFFFFFC;
          int32x4_t v75 = (uint32x4_t *)v25;
          do
          {
            *(int32x4_t *)int32x4_t v75 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v75, *v75, 0x1FuLL), 1uLL);
            ++v75;
            v74 -= 4LL;
          }

          while (v74);
        }

        else
        {
          uint64_t v59 = 0LL;
        }

        uint64_t v76 = v19 - v59;
        int32x4_t v77 = (int *)(v25 + 4 * v59);
        do
        {
          *v77++ /= 2;
          --v76;
        }

        while (v76);
LABEL_72:
        v22 /= 2;
        goto LABEL_73;
      }
    }

    else
    {
      uint64_t v29 = 0LL;
    }

    uint64_t v54 = v19 - v29;
    int16x8_t v55 = (int *)(v25 + 4 * v29);
    int16x8_t v56 = (__int16 *)v24 + v29;
    do
    {
      int v57 = *v56++;
      int v58 = *v55;
      *v55++ += v57;
      --v54;
    }

    while (v54);
    goto LABEL_47;
  }

  int8x16_t v49 = *(_WORD **)(v7 + 16);
  if (!*v49) {
    *int8x16_t v49 = 1;
  }
  if (a5)
  {
    int v50 = *(_DWORD *)(v7 + 40);
    if (v50)
    {
      uint64_t v51 = *(unsigned int *)(a1 + 1100);
      int v52 = *(_DWORD *)(a1 + 1404) * *(_DWORD *)(v7 + 52);
      if (v52 >= 0x3FFF) {
        int v52 = 0x3FFF;
      }
      if (v52 <= -16384) {
        int v52 = -16384;
      }
      if (v52 >= v50) {
        int v52 = *(_DWORD *)(v7 + 40);
      }
      if ((int)v51 >= 1)
      {
        for (uint64_t j = 0LL; j != v51; ++j)
        {
          *(_DWORD *)(*(void *)(a1 + 1496) + 4 * j) = v52 * *(__int16 *)(*(void *)(v7 + 32) + 2 * j) / v50;
          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 740)) {
            *(_WORD *)(*(void *)(v7 + 24) + 2 * j) = 0;
          }
        }
      }

      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 740)) {
        **(_WORD **)(v7 + 16) = 0;
      }
      *(_DWORD *)(a1 + 1488) = v52;
      uint64_t v60 = *(unsigned int *)(a1 + 1100);
      int16x8_t v61 = *(__int16 **)(v7 + 16);
      int v62 = v52 + *v61;
      unsigned int v63 = v62 - 16385;
      if ((int)v60 < 1)
      {
        if (v63 <= 0xFFFF7FFE) {
          v62 /= 2;
        }
        goto LABEL_101;
      }

      unint64_t v64 = *(void *)(v7 + 24);
      unint64_t v65 = *(void *)(a1 + 1496);
      unsigned int v66 = v63 < 0xFFFF7FFF;
      if (v60 >= 0x10 && (v65 >= v64 + 2 * v60 || v64 >= v65 + 4 * v60))
      {
        uint64_t v67 = v60 & 0x7FFFFFF0;
        int32x4_t v108 = vdupq_n_s32(v66);
        uint64_t v109 = (int16x4_t *)(v64 + 16);
        BOOL v110 = (int32x4_t *)(v65 + 32);
        v111.i64[0] = 0x400000004000LL;
        v111.i64[1] = 0x400000004000LL;
        uint64_t v112 = v60 & 0xFFFFFFF0;
        v113.i64[0] = 0x800000008000LL;
        v113.i64[1] = 0x800000008000LL;
        int32x4_t v114 = v108;
        int32x4_t v115 = v108;
        int32x4_t v116 = v108;
        int32x4_t v117 = v108;
        do
        {
          int16x8_t v118 = *(int16x8_t *)v109[-2].i8;
          int32x4_t v119 = vaddw_s16(v110[-2], *(int16x4_t *)v118.i8);
          int32x4_t v120 = vaddw_high_s16(v110[-1], v118);
          int32x4_t v121 = vaddw_s16(*v110, *v109);
          int32x4_t v122 = vaddw_high_s16(v110[1], *(int16x8_t *)v109->i8);
          v110[-2] = v119;
          v110[-1] = v120;
          int32x4_t *v110 = v121;
          v110[1] = v122;
          v110 += 4;
          int32x4_t v123 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v119, v111));
          int32x4_t v124 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v120, v111));
          int32x4_t v125 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v121, v111));
          int32x4_t v126 = (int32x4_t)vcgtq_u32(v113, (uint32x4_t)vaddq_s32(v122, v111));
          int32x4_t v115 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v115, (int8x16_t)v124), v124);
          int32x4_t v114 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v114, (int8x16_t)v123), v123);
          int32x4_t v117 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v117, (int8x16_t)v126), v126);
          int32x4_t v116 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v116, (int8x16_t)v125), v125);
          v109 += 4;
          v112 -= 16LL;
        }

        while (v112);
        if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v114, v108),  (int16x8_t)vceqq_s32(v115, v108))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v116, v108),  (int16x8_t)vceqq_s32(v117, v108)))),  (int8x8_t)0x8040201008040201LL)))
        {
          unsigned int v66 = 1;
        }

        if (v67 == v60)
        {
LABEL_64:
          if (!v66)
          {
LABEL_94:
            if (v60 >= 0x10 && (v64 >= v65 + 4 * v60 || v65 >= v64 + 2 * v60))
            {
              uint64_t v95 = v60 & 0x7FFFFFF0;
              uint64_t v127 = (int16x8_t *)(v65 + 32);
              unint64_t v128 = (int16x8_t *)(v64 + 16);
              uint64_t v129 = v60 & 0xFFFFFFF0;
              do
              {
                int16x8_t v131 = v127[-2];
                int16x8_t v130 = v127[-1];
                int16x8_t v133 = *v127;
                int16x8_t v132 = v127[1];
                v127 += 4;
                v128[-1] = vuzp1q_s16(v131, v130);
                *unint64_t v128 = vuzp1q_s16(v133, v132);
                v128 += 2;
                v129 -= 16LL;
              }

              while (v129);
              if (v95 == v60) {
                goto LABEL_100;
              }
            }

            else
            {
              uint64_t v95 = 0LL;
            }

            uint64_t v96 = v60 - v95;
            unint64_t v97 = (_WORD *)(v64 + 2 * v95);
            int v98 = (int *)(v65 + 4 * v95);
            do
            {
              int v99 = *v98++;
              *v97++ = v99;
              --v96;
            }

            while (v96);
LABEL_100:
            int16x8_t v61 = *(__int16 **)(v7 + 16);
LABEL_101:
            __int16 *v61 = v62;
            goto LABEL_102;
          }

          if (v60 >= 4)
          {
            uint64_t v73 = v60 & 0x7FFFFFFC;
            uint64_t v91 = v60 & 0xFFFFFFFC;
            int16x8_t v92 = (uint32x4_t *)v65;
            do
            {
              *(int32x4_t *)int16x8_t v92 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v92, *v92, 0x1FuLL), 1uLL);
              ++v92;
              v91 -= 4LL;
            }

            while (v91);
            if (v73 == v60) {
              goto LABEL_93;
            }
          }

          else
          {
            uint64_t v73 = 0LL;
          }

          uint64_t v93 = v60 - v73;
          int32x4_t v94 = (int *)(v65 + 4 * v73);
          do
          {
            *v94++ /= 2;
            --v93;
          }

          while (v93);
LABEL_93:
          v62 /= 2;
          goto LABEL_94;
        }
      }

      else
      {
        uint64_t v67 = 0LL;
      }

      uint64_t v68 = v60 - v67;
      int32x4_t v69 = (int *)(v65 + 4 * v67);
      int32x4_t v70 = (__int16 *)(v64 + 2 * v67);
      do
      {
        int v71 = *v70++;
        int v72 = *v69;
        *v69++ += v71;
        --v68;
      }

      while (v68);
      goto LABEL_64;
    }
  }

LABEL_102:
  LODWORD(v100) = (2 * v135) | 1;
  if ((v135 & 0x80000000) != 0)
  {
LABEL_111:
    if (!qword_1000FDCC0) {
      return 1LL;
    }
    uint64_t result = 1LL;
    if (*(_DWORD *)(qword_1000FDCC0 + 624) && (v135 & 0x80000000) == 0)
    {
      unint64_t v103 = 0LL;
      else {
        uint64_t v100 = v100;
      }
      do
      {
        if ((*(__int16 *)(*(void *)v7 + 2 * v103) & 0x80000000) == 0)
        {
          unsigned int v104 = *(unsigned __int16 *)(*(void *)v7 + 2 * v103);
          sub_10000A9A8((void *)a1, *(unsigned __int16 *)(*(void *)v7 + 2 * v103), v9, v10, v11, v12, v13, v14);
          if (qword_1000FDCC0)
          {
            if (*(_DWORD *)(qword_1000FDCC0 + 1064))
            {
              int v105 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
              if (v105) {
                v105(a1, 1LL);
              }
            }
          }

          sub_10000CDD8(*(void **)(a1 + 1432), v104);
        }

        if (v103 < v135 && (*(__int16 *)(*(void *)(v7 + 8) + 2 * v103) & 0x80000000) == 0)
        {
          unsigned int v106 = *(unsigned __int16 *)(*(void *)(v7 + 8) + 2 * v103);
          sub_10000A9A8( (void *)a1,  *(unsigned __int16 *)(*(void *)(v7 + 8) + 2 * v103),  v9,  v10,  v11,  v12,  v13,  v14);
          if (qword_1000FDCC0)
          {
            if (*(_DWORD *)(qword_1000FDCC0 + 1064))
            {
              int v107 = *(void (**)(uint64_t, uint64_t))(a1 + 1744);
              if (v107) {
                v107(a1, 1LL);
              }
            }
          }

          sub_10000CDD8(*(void **)(a1 + 1432), v106);
        }

        ++v103;
      }

      while (v100 != v103);
      return 1LL;
    }
  }

  else
  {
    unint64_t v101 = 0LL;
    else {
      uint64_t v102 = v100;
    }
    while (1)
    {
      uint64_t result = sub_10000EBF4(a1, v7, *(__int16 *)(*(void *)v7 + 2 * v101), v101, v11, v12, v13, v14);
      if (!(_DWORD)result) {
        break;
      }
      if (v101 < v135)
      {
        uint64_t result = sub_10000EBF4( a1,  v7,  *(__int16 *)(*(void *)(v7 + 8) + 2 * v101),  v101,  v11,  v12,  v13,  v14);
        if (!(_DWORD)result) {
          break;
        }
      }

      if (v102 == ++v101) {
        goto LABEL_111;
      }
    }
  }

  return result;
}

            sub_1000CB038(v27, v63);
            return v35;
          }

          LODWORD(v69) = 0;
          double v31 = sub_100095A54(a1, a2, &v27[2 * v67], (int *)&v69);
          if (v29)
          {
            if (v31 && (_DWORD)v30 == (_DWORD)v69)
            {
              int32x4_t v33 = v30;
              uint64_t v34 = v27;
              while (*(unsigned __int16 *)v34 == *(unsigned __int16 *)&v34[2 * (int)v30])
              {
                v34 += 2;
                if (!--v33) {
                  goto LABEL_97;
                }
              }
            }
          }

          uint64_t v67 = v69 + v30;
LABEL_97:
          if (!(v31 | v29)) {
            goto LABEL_38;
          }
          break;
        default:
LABEL_38:
          sub_1000CB038(v27, v66);
          return 0LL;
      }

      LODWORD(v30) = v67;
      goto LABEL_41;
    }
  }

  return 0LL;
}

          *(_DWORD *)(a1 + 548) = 3;
          return result;
        }

              int8x16_t v49 = v11[1];
              goto LABEL_103;
            }

            goto LABEL_87;
          }
        }

        LODWORD(v51) = 0;
        HIDWORD(v51) = *(_DWORD *)(v5 + 33348);
        uint64_t result = sub_10003927C(v42, *(unsigned int *)(v5 + 33372), v5 + 33368, v31, v57, 3LL, 0LL, 1u, v51);
        if ((_DWORD)result) {
          goto LABEL_86;
        }
        return sub_10003991C(v5);
      }

      goto LABEL_24;
    }

int32x4_t *sub_10000E568(int32x4_t *result, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4 = result[68].u32[3];
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = (int)(v4 * a4);
  unint64_t v7 = v5 + 2 * v6;
  if (a3 < 0)
  {
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 628)) {
      return result;
    }
    __int32 v69 = *(__int16 *)(*(void *)(a2 + 16) + 2LL * (__int16)-(__int16)a3);
    result[93].i32[0] = v69;
    if ((int)v4 >= 1)
    {
      for (uint64_t i = 0LL; i != v4; ++i)
        *(_DWORD *)(result[93].i64[1] + 4 * i) = *(__int16 *)(v5 + 2LL * (int)v4 * (__int16)-(__int16)a3 + 2 * i);
      LODWORD(v4) = result[68].i32[3];
      __int32 v69 = result[93].i32[0];
    }

    uint64_t v71 = a4;
    int v72 = v69 + *(__int16 *)(*(void *)(a2 + 16) + 2LL * a4);
    unsigned int v73 = v72 - 16385;
    if ((int)v4 < 1)
    {
      if (v73 <= 0xFFFF7FFE)
      {
        if (v72 >= 0) {
          int v102 = v72;
        }
        else {
          int v102 = v72 + 1;
        }
        *(_WORD *)(*(void *)(a2 + 16) + 2LL * a4) = v102 >> 1;
        return result;
      }

      goto LABEL_100;
    }

    uint64_t v74 = (int32x4_t *)result[93].i64[1];
    unsigned int v75 = v73 < 0xFFFF7FFF;
    uint64_t v76 = v4;
    if (v4 >= 0x10
      && ((unint64_t)v74 < v5 + 2 * (v6 + (unint64_t)v4)
        ? (BOOL v77 = v7 >= (unint64_t)v74 + 4 * v4)
        : (BOOL v77 = 1),
          v77))
    {
      uint64_t result = (int32x4_t *)(v4 & 0x7FFFFFF0);
      int32x4_t v78 = vdupq_n_s32(v75);
      uint64_t v79 = (int16x4_t *)(v5 + 2 * v6 + 16);
      unsigned int v80 = v74 + 2;
      v81.i64[0] = 0x400000004000LL;
      v81.i64[1] = 0x400000004000LL;
      uint64_t v82 = v4 & 0xFFFFFFF0;
      v83.i64[0] = 0x800000008000LL;
      v83.i64[1] = 0x800000008000LL;
      int32x4_t v84 = v78;
      int32x4_t v85 = v78;
      int32x4_t v86 = v78;
      int32x4_t v87 = v78;
      do
      {
        int16x8_t v88 = *(int16x8_t *)v79[-2].i8;
        int32x4_t v89 = vaddw_s16(v80[-2], *(int16x4_t *)v88.i8);
        int32x4_t v90 = vaddw_high_s16(v80[-1], v88);
        int32x4_t v91 = vaddw_s16(*v80, *v79);
        int32x4_t v92 = vaddw_high_s16(v80[1], *(int16x8_t *)v79->i8);
        v80[-2] = v89;
        v80[-1] = v90;
        *unsigned int v80 = v91;
        v80[1] = v92;
        v80 += 4;
        int32x4_t v93 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v89, v81));
        int32x4_t v94 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v90, v81));
        int32x4_t v95 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v91, v81));
        int32x4_t v96 = (int32x4_t)vcgtq_u32(v83, (uint32x4_t)vaddq_s32(v92, v81));
        int32x4_t v85 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v85, (int8x16_t)v94), v94);
        int32x4_t v84 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v84, (int8x16_t)v93), v93);
        int32x4_t v87 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v87, (int8x16_t)v96), v96);
        int32x4_t v86 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v86, (int8x16_t)v95), v95);
        v79 += 4;
        v82 -= 16LL;
      }

      while (v82);
      if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v84, v78),  (int16x8_t)vceqq_s32(v85, v78))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v86, v78),  (int16x8_t)vceqq_s32(v87, v78)))),  (int8x8_t)0x8040201008040201LL)))
      {
        unsigned int v75 = 1;
      }

      if (result == (int32x4_t *)v4)
      {
LABEL_81:
        if (v75)
        {
          v72 /= 2;
          if (v4 >= 4)
          {
            uint64_t v101 = v4 & 0x7FFFFFFC;
            uint64_t v103 = v4 & 0xFFFFFFFC;
            uint64_t result = v74;
            do
            {
              *uint64_t result = vshrq_n_s32((int32x4_t)vsraq_n_u32(*(uint32x4_t *)result, *(uint32x4_t *)result, 0x1FuLL), 1uLL);
              ++result;
              v103 -= 4LL;
            }

            while (v103);
          }

          else
          {
            uint64_t v101 = 0LL;
          }

          unsigned int v104 = &v74->i32[v101];
          uint64_t v105 = v4 - v101;
          do
          {
            uint64_t result = (int32x4_t *)(*v104 / 2);
            *v104++ = (int)result;
            --v105;
          }

          while (v105);
        }

LABEL_94:
        if (v4 >= 0x10
          && (v7 >= (unint64_t)v74 + 4 * v4
           || (unint64_t)v74 >= v5 + 2 * (v6 + (unint64_t)v4)))
        {
          uint64_t v106 = v4 & 0x7FFFFFF0;
          int32x4_t v111 = (int16x8_t *)&v74[2];
          uint64_t v112 = (int16x8_t *)(v5 + 2 * v6 + 16);
          uint64_t v113 = v76 & 0xFFFFFFF0;
          do
          {
            int16x8_t v115 = v111[-2];
            int16x8_t v114 = v111[-1];
            int16x8_t v117 = *v111;
            int16x8_t v116 = v111[1];
            v111 += 4;
            v112[-1] = vuzp1q_s16(v115, v114);
            int16x8_t *v112 = vuzp1q_s16(v117, v116);
            v112 += 2;
            v113 -= 16LL;
          }

          while (v113);
          if (v106 == v76) {
            goto LABEL_100;
          }
        }

        else
        {
          uint64_t v106 = 0LL;
        }

        int v107 = (_WORD *)(v5 + 2 * v106 + 2 * v6);
        int32x4_t v108 = &v74->i32[v106];
        uint64_t v109 = v76 - v106;
        do
        {
          int v110 = *v108++;
          *v107++ = v110;
          --v109;
        }

        while (v109);
LABEL_100:
        *(_WORD *)(*(void *)(a2 + 16) + 2 * v71) = v72;
        return result;
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    unint64_t v97 = &v74->i32[(void)result];
    int v98 = (__int16 *)(v5 + 2LL * (void)result + 2 * v6);
    uint64_t result = (int32x4_t *)(v4 - (void)result);
    do
    {
      int v99 = *v98++;
      __int32 v100 = *v97;
      *v97++ += v99;
      uint64_t result = (int32x4_t *)((char *)result - 1);
    }

    while (result);
    goto LABEL_81;
  }

  uint64_t v8 = *(int **)(*(void *)result[89].i64[1] + 8LL * (unsigned __int16)a3);
  if (v8 && *v8 >= 1)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = a4;
    uint64_t v11 = (int16x4_t *)(v5 + 2 * v6);
    v12.i64[0] = 0x400000004000LL;
    v12.i64[1] = 0x400000004000LL;
    v13.i64[0] = 0x800000008000LL;
    v13.i64[1] = 0x800000008000LL;
    while (1)
    {
      int v17 = *(__int16 *)(*((void *)v8 + 1) + 2 * v9);
      int v18 = *(__int16 *)(*((void *)v8 + 2) + 2 * v9);
      BOOL v19 = __OFSUB__(v17, v18);
      int v20 = v17 - v18;
      result[93].i32[0] = v20;
      if ((v20 < 0) ^ v19 | (v20 == 0))
      {
        if ((int)v4 >= 1)
        {
          uint64_t v23 = 0LL;
          do
          {
            *(_DWORD *)(result[93].i64[1] + v23) = 0;
            v23 += 4LL;
          }

          while (4 * v4 != v23);
        }
      }

      else if ((int)v4 >= 1)
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = *(void *)(*((void *)v8 + 3) + 8 * v9);
        do
        {
          *(_DWORD *)(result[93].i64[1] + 4 * v21) = *(__int16 *)(v22 + 2 * v21);
          ++v21;
        }

        while (v4 != v21);
      }

      uint64_t v24 = result[68].u32[3];
      int v16 = result[93].i32[0] + *(__int16 *)(*(void *)(a2 + 16) + 2 * v10);
      unsigned int v25 = v16 - 16385;
      if ((int)v24 < 1)
      {
        if (v16 >= 0) {
          int v14 = result[93].i32[0] + *(__int16 *)(*(void *)(a2 + 16) + 2 * v10);
        }
        else {
          int v14 = v16 + 1;
        }
        int v15 = v14 >> 1;
        if (v25 <= 0xFFFF7FFE) {
          LOWORD(v16) = v15;
        }
        goto LABEL_10;
      }

      unint64_t v26 = result[93].u64[1];
      unsigned int v27 = v25 < 0xFFFF7FFF;
      uint64_t v29 = v24 & 0x7FFFFFF0;
      int32x4_t v30 = (int32x4_t *)(v26 + 32);
      uint64_t v31 = v24 & 0xFFFFFFF0;
      double v32 = v11 + 2;
      int32x4_t v33 = vdupq_n_s32(v27);
      int32x4_t v34 = v33;
      int32x4_t v35 = v33;
      int32x4_t v36 = v33;
      int32x4_t v37 = v33;
      do
      {
        int16x8_t v38 = *(int16x8_t *)v32[-2].i8;
        int32x4_t v39 = vaddw_s16(v30[-2], *(int16x4_t *)v38.i8);
        int32x4_t v40 = vaddw_high_s16(v30[-1], v38);
        int32x4_t v41 = vaddw_s16(*v30, *v32);
        int32x4_t v42 = vaddw_high_s16(v30[1], *(int16x8_t *)v32->i8);
        v30[-2] = v39;
        v30[-1] = v40;
        *int32x4_t v30 = v41;
        v30[1] = v42;
        v30 += 4;
        int32x4_t v43 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v39, v12));
        int32x4_t v44 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v40, v12));
        int32x4_t v45 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v41, v12));
        int32x4_t v46 = (int32x4_t)vcgtq_u32(v13, (uint32x4_t)vaddq_s32(v42, v12));
        int32x4_t v35 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v35, (int8x16_t)v44), v44);
        int32x4_t v34 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v34, (int8x16_t)v43), v43);
        int32x4_t v37 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v37, (int8x16_t)v46), v46);
        int32x4_t v36 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v36, (int8x16_t)v45), v45);
        v32 += 4;
        v31 -= 16LL;
      }

      while (v31);
      if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v34, v33),  (int16x8_t)vceqq_s32(v35, v33))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v36, v33),  (int16x8_t)vceqq_s32(v37, v33)))),  (int8x8_t)0x8040201008040201LL)))
      {
        unsigned int v27 = 1;
      }

      if (v29 != v24) {
        goto LABEL_33;
      }
LABEL_37:
      if (!v27) {
        goto LABEL_45;
      }
      v16 /= 2;
      if (v24 < 4)
      {
        uint64_t v52 = 0LL;
LABEL_43:
        int16x8_t v55 = (int *)(v26 + 4 * v52);
        uint64_t v56 = v24 - v52;
        do
        {
          *v55++ /= 2;
          --v56;
        }

        while (v56);
        goto LABEL_45;
      }

      uint64_t v52 = v24 & 0x7FFFFFFC;
      uint64_t v53 = v24 & 0xFFFFFFFC;
      uint64_t v54 = (uint32x4_t *)v26;
      do
      {
        *(int32x4_t *)uint64_t v54 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v54, *v54, 0x1FuLL), 1uLL);
        ++v54;
        v53 -= 4LL;
      }

      while (v53);
      if (v52 != v24) {
        goto LABEL_43;
      }
LABEL_45:
      if (v24 >= 0x10 && (v7 >= v26 + 4 * v24 || v26 >= (unint64_t)v11 + 2 * v24))
      {
        uint64_t v57 = v24 & 0x7FFFFFF0;
        int v62 = (int16x8_t *)(v26 + 32);
        uint64_t v63 = v24 & 0xFFFFFFF0;
        unint64_t v64 = (int16x8_t *)&v11[2];
        do
        {
          int16x8_t v66 = v62[-2];
          int16x8_t v65 = v62[-1];
          int16x8_t v68 = *v62;
          int16x8_t v67 = v62[1];
          v62 += 4;
          v64[-1] = vuzp1q_s16(v66, v65);
          *unint64_t v64 = vuzp1q_s16(v68, v67);
          v64 += 2;
          v63 -= 16LL;
        }

        while (v63);
        if (v57 == v24) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v57 = 0LL;
      }

      int v58 = (_WORD *)v11 + v57;
      uint64_t v59 = v24 - v57;
      uint64_t v60 = (int *)(v26 + 4 * v57);
      do
      {
        int v61 = *v60++;
        *v58++ = v61;
        --v59;
      }

      while (v59);
LABEL_10:
      *(_WORD *)(*(void *)(a2 + 16) + 2 * v10) = v16;
      if (++v9 >= *v8) {
        return result;
      }
    }

    uint64_t v29 = 0LL;
LABEL_33:
    int32x4_t v47 = (int *)(v26 + 4 * v29);
    uint64_t v48 = v24 - v29;
    int8x16_t v49 = (__int16 *)v11 + v29;
    do
    {
      int v50 = *v49++;
      int v51 = *v47;
      *v47++ += v50;
      --v48;
    }

    while (v48);
    goto LABEL_37;
  }

  return result;
}

  v13[210] = 1;
  sub_1000BCBC8(v11);
  sub_1000C0BFC(0x220uLL, v29, v30, v31, v32, v33, v34, v35);
  int32x4_t v37 = v36;
  memcpy(v36, off_1000F9AE8, 0x1E0uLL);
  v37[60] = v13;
  v37[61] = v13;
  *((_DWORD *)v37 + 128) = v13[159];
  *((_DWORD *)v37 + 129) = v13[160];
  *((_DWORD *)v37 + 130) = v13[162];
  *((_DWORD *)v37 + 131) = v13[161];
  v37[62] = a3;
  v37[63] = a4;
  v37[66] = sub_10008CD4C( v13[8],  v13[172],  *((unsigned __int16 *)v13 + 350),  *((unsigned __int16 *)v13 + 364),  *((void *)v13 + 89),  v13[208],  v13[194],  (unsigned __int8 *)v13 + 824,  a3,  *((_WORD *)v13 + 376),  v13[193]);
  return v37;
}

uint64_t sub_10000EBF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)(a1 + 1100);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v12 = v10 + 2LL * (int)v9 * (int)a4;
  int v13 = *(_DWORD *)(a1 + 1404);
  int v14 = *(__int16 *)(v11 + 2LL * (int)a4);
  if ((v14 & 0xFFFE) != 0) {
    __int16 v15 = *(_WORD *)(v11 + 2LL * (int)a4);
  }
  else {
    __int16 v15 = 1;
  }
  if ((a3 & 0x80000000) != 0)
  {
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 628)) {
      return 1LL;
    }
    int v21 = *(_DWORD *)(a2 + 44) * v13;
    if (v21 >= 0x4000) {
      __int16 v22 = 0x3FFF;
    }
    else {
      __int16 v22 = v21;
    }
    if (v21 >= -16383) {
      LOWORD(v23) = v22;
    }
    else {
      LOWORD(v23) = -16384;
    }
    uint64_t v24 = (__int16)-(__int16)a3;
    uint64_t v25 = (int)v9 * v24;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 688))
      {
        int v23 = (__int16)v23 * v14 / ((__int16)v23 + v15);
        if (!*(_DWORD *)(qword_1000FDCC0 + 740)) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }

      __int16 v105 = v15;
      if (*(_DWORD *)(qword_1000FDCC0 + 84)) {
        LOWORD(v23) = v105;
      }
      if (*(_DWORD *)(qword_1000FDCC0 + 740)) {
LABEL_26:
      }
        *(_WORD *)(v11 + 2 * v24) = 0;
    }

LABEL_27:
    unint64_t v26 = v10 + 2 * v25;
    int v23 = (__int16)v23;
    *(_DWORD *)(a1 + 1488) = (__int16)v23;
    if ((int)v9 >= 1)
    {
      for (uint64_t i = 0LL; i != v9; ++i)
      {
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 740)) {
          *(_WORD *)(v26 + 2 * i) = 0;
        }
        int v28 = *(__int16 *)(v12 + 2 * i);
        if (v28 < 0) {
          int v29 = -2;
        }
        else {
          int v29 = 2;
        }
        *(_DWORD *)(*(void *)(a1 + 1496) + 4 * i) = (v28 * (__int16)v23 + (__int16)(v15 / v29)) / v15;
      }

      int v23 = *(_DWORD *)(a1 + 1488);
    }

    uint64_t v91 = *(void *)(a2 + 16);
    uint64_t v92 = *(unsigned int *)(a1 + 1100);
    int v93 = v23 + *(__int16 *)(v91 + 2 * v24);
    unsigned int v94 = v93 - 16385;
    if ((int)v92 < 1)
    {
      if (v94 <= 0xFFFF7FFE)
      {
        if (v93 >= 0) {
          int v104 = v23 + *(__int16 *)(v91 + 2 * v24);
        }
        else {
          int v104 = v93 + 1;
        }
        int v93 = v104 >> 1;
      }

      goto LABEL_131;
    }

    unint64_t v95 = *(void *)(a1 + 1496);
    unsigned int v96 = v94 < 0xFFFF7FFF;
    if (v92 >= 0x10 && (v95 >= v10 + 2 * (v25 + v92) || v26 >= v95 + 4 * v92))
    {
      uint64_t v97 = v92 & 0x7FFFFFF0;
      int32x4_t v115 = vdupq_n_s32(v96);
      int16x8_t v116 = (int16x4_t *)(v10 + 2 * v25 + 16);
      int16x8_t v117 = (int32x4_t *)(v95 + 32);
      v118.i64[0] = 0x400000004000LL;
      v118.i64[1] = 0x400000004000LL;
      uint64_t v119 = v92 & 0xFFFFFFF0;
      v120.i64[0] = 0x800000008000LL;
      v120.i64[1] = 0x800000008000LL;
      int32x4_t v121 = v115;
      int32x4_t v122 = v115;
      int32x4_t v123 = v115;
      int32x4_t v124 = v115;
      do
      {
        int16x8_t v125 = *(int16x8_t *)v116[-2].i8;
        int32x4_t v126 = vaddw_s16(v117[-2], *(int16x4_t *)v125.i8);
        int32x4_t v127 = vaddw_high_s16(v117[-1], v125);
        int32x4_t v128 = vaddw_s16(*v117, *v116);
        int32x4_t v129 = vaddw_high_s16(v117[1], *(int16x8_t *)v116->i8);
        v117[-2] = v126;
        v117[-1] = v127;
        *int16x8_t v117 = v128;
        v117[1] = v129;
        v117 += 4;
        int32x4_t v130 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v126, v118));
        int32x4_t v131 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v127, v118));
        int32x4_t v132 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v128, v118));
        int32x4_t v133 = (int32x4_t)vcgtq_u32(v120, (uint32x4_t)vaddq_s32(v129, v118));
        int32x4_t v122 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v122, (int8x16_t)v131), v131);
        int32x4_t v121 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v121, (int8x16_t)v130), v130);
        int32x4_t v124 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v124, (int8x16_t)v133), v133);
        int32x4_t v123 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v123, (int8x16_t)v132), v132);
        v116 += 4;
        v119 -= 16LL;
      }

      while (v119);
      if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v121, v115),  (int16x8_t)vceqq_s32(v122, v115))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v123, v115),  (int16x8_t)vceqq_s32(v124, v115)))),  (int8x8_t)0x8040201008040201LL)))
      {
        unsigned int v96 = 1;
      }

      if (v97 == v92)
      {
LABEL_105:
        if (!v96)
        {
LABEL_125:
          if (v92 >= 0x10 && (v26 >= v95 + 4 * v92 || v95 >= v10 + 2 * (v25 + v92)))
          {
            uint64_t v110 = v92 & 0x7FFFFFF0;
            uint64_t v134 = (int16x8_t *)(v95 + 32);
            unsigned int v135 = (int16x8_t *)(v10 + 2 * v25 + 16);
            uint64_t v136 = v92 & 0xFFFFFFF0;
            do
            {
              int16x8_t v138 = v134[-2];
              int16x8_t v137 = v134[-1];
              int16x8_t v140 = *v134;
              int16x8_t v139 = v134[1];
              v134 += 4;
              v135[-1] = vuzp1q_s16(v138, v137);
              *unsigned int v135 = vuzp1q_s16(v140, v139);
              v135 += 2;
              v136 -= 16LL;
            }

            while (v136);
            if (v110 == v92) {
              goto LABEL_131;
            }
          }

          else
          {
            uint64_t v110 = 0LL;
          }

          uint64_t v111 = v92 - v110;
          uint64_t v112 = (_WORD *)(v10 + 2 * v110 + 2 * v25);
          uint64_t v113 = (int *)(v95 + 4 * v110);
          do
          {
            int v114 = *v113++;
            *v112++ = v114;
            --v111;
          }

          while (v111);
LABEL_131:
          *(_WORD *)(v91 + 2 * v24) = v93;
          return 1LL;
        }

        if (v92 >= 4)
        {
          uint64_t v103 = v92 & 0x7FFFFFFC;
          uint64_t v106 = v92 & 0xFFFFFFFC;
          int v107 = (uint32x4_t *)v95;
          do
          {
            *(int32x4_t *)int v107 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v107, *v107, 0x1FuLL), 1uLL);
            ++v107;
            v106 -= 4LL;
          }

          while (v106);
          if (v103 == v92) {
            goto LABEL_124;
          }
        }

        else
        {
          uint64_t v103 = 0LL;
        }

        uint64_t v108 = v92 - v103;
        uint64_t v109 = (int *)(v95 + 4 * v103);
        do
        {
          *v109++ /= 2;
          --v108;
        }

        while (v108);
LABEL_124:
        v93 /= 2;
        goto LABEL_125;
      }
    }

    else
    {
      uint64_t v97 = 0LL;
    }

    uint64_t v98 = v92 - v97;
    int v99 = (int *)(v95 + 4 * v97);
    __int32 v100 = (__int16 *)(v10 + 2 * v97 + 2 * v25);
    do
    {
      int v101 = *v100++;
      int v102 = *v99;
      *v99++ += v101;
      --v98;
    }

    while (v98);
    goto LABEL_105;
  }

  int v16 = *(_DWORD *)(a2 + 48) * v13;
  if (v16 >= 0x3FFF) {
    int v16 = 0x3FFF;
  }
  if (v16 <= -16384) {
    int v16 = -16384;
  }
  int v17 = v15;
  if (v16 >= v15) {
    int v18 = v15;
  }
  else {
    int v18 = v16;
  }
  uint64_t v141 = *(void *)(a1 + 1432);
  uint64_t v19 = (unsigned __int16)a3;
  int v20 = *(int **)(*(void *)v141 + 8LL * (unsigned __int16)a3);
  if (v20)
  {
    if (*v20 < 1) {
      return 1LL;
    }
    goto LABEL_38;
  }

  uint64_t result = sub_10000D22C(a1, (unsigned __int16)a3);
  if (!(_DWORD)result) {
    return result;
  }
  int v20 = *(int **)(*(void *)v141 + 8 * v19);
  if (*v20 >= 1)
  {
LABEL_38:
    uint64_t v31 = 0LL;
    v32.i64[0] = 0x400000004000LL;
    v32.i64[1] = 0x400000004000LL;
    v33.i64[0] = 0x800000008000LL;
    v33.i64[1] = 0x800000008000LL;
    while (1)
    {
      if (!*(void *)(*((void *)v20 + 3) + 8 * v31))
      {
        int32x4_t v35 = v20;
        sub_1000C0BFC(2LL * *(int *)(v141 + 32), (uint64_t)v20, a3, a4, a5, a6, a7, a8);
        v33.i64[0] = 0x800000008000LL;
        v33.i64[1] = 0x800000008000LL;
        v32.i64[0] = 0x400000004000LL;
        v32.i64[1] = 0x400000004000LL;
        int v20 = v35;
        *(void *)(*((void *)v35 + 3) + 8 * v31) = v36;
        int v37 = *(_DWORD *)(v141 + 56);
        int v38 = *(_DWORD *)(v141 + 60);
        *(_DWORD *)(v141 + 56) = v37 + 1;
        if (v37 >= v38) {
          *(_DWORD *)(v141 + 60) = v37 + 1;
        }
      }

      unint64_t v39 = *(void *)(*((void *)v20 + 3) + 8 * v31);
      *(_DWORD *)(a1 + 1488) = v18;
      int v40 = v18;
      if ((int)v9 >= 1)
      {
        for (uint64_t j = 0LL; j != v9; ++j)
        {
          int v42 = *(__int16 *)(v12 + 2 * j);
          if (v42 < 0) {
            int v43 = -2;
          }
          else {
            int v43 = 2;
          }
          *(_DWORD *)(*(void *)(a1 + 1496) + 4 * j) = (v17 / v43 + v18 * v42) / v17;
        }

        int v40 = *(_DWORD *)(a1 + 1488);
      }

      uint64_t v44 = *(unsigned int *)(a1 + 1100);
      uint64_t v45 = *((void *)v20 + 1);
      int v46 = v40 + *(__int16 *)(v45 + 2 * v31);
      unsigned int v47 = v46 - 16385;
      if (v47 > 0xFFFF7FFE)
      {
        *(_WORD *)(v45 + 2 * v31) = v46;
        goto LABEL_44;
      }

      if (v46 >= 0) {
        unsigned int v34 = v46;
      }
      else {
        unsigned int v34 = v46 + 1;
      }
      *(_WORD *)(v45 + 2 * v31) = v34 >> 1;
LABEL_43:
LABEL_44:
      if (++v31 >= *v20) {
        return 1LL;
      }
    }

    unint64_t v48 = *(void *)(a1 + 1496);
    unsigned int v49 = v47 < 0xFFFF7FFF;
    if (v44 >= 0x10 && (v48 < v39 + 2 * v44 ? (BOOL v50 = v39 >= v48 + 4 * v44) : (BOOL v50 = 1), v50))
    {
      uint64_t v51 = v44 & 0x7FFFFFF0;
      uint64_t v52 = (int16x4_t *)(v39 + 16);
      uint64_t v53 = (int32x4_t *)(v48 + 32);
      uint64_t v54 = v44 & 0xFFFFFFF0;
      int32x4_t v55 = vdupq_n_s32(v49);
      int32x4_t v56 = v55;
      int32x4_t v57 = v55;
      int32x4_t v58 = v55;
      int32x4_t v59 = v55;
      do
      {
        int16x8_t v60 = *(int16x8_t *)v52[-2].i8;
        int32x4_t v61 = vaddw_s16(v53[-2], *(int16x4_t *)v60.i8);
        int32x4_t v62 = vaddw_high_s16(v53[-1], v60);
        int32x4_t v63 = vaddw_s16(*v53, *v52);
        int32x4_t v64 = vaddw_high_s16(v53[1], *(int16x8_t *)v52->i8);
        v53[-2] = v61;
        v53[-1] = v62;
        int32x4_t *v53 = v63;
        v53[1] = v64;
        v53 += 4;
        int32x4_t v65 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v61, v32));
        int32x4_t v66 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v62, v32));
        int32x4_t v67 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v63, v32));
        int32x4_t v68 = (int32x4_t)vcgtq_u32(v33, (uint32x4_t)vaddq_s32(v64, v32));
        int32x4_t v57 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v57, (int8x16_t)v66), v66);
        int32x4_t v56 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v56, (int8x16_t)v65), v65);
        int32x4_t v59 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v59, (int8x16_t)v68), v68);
        int32x4_t v58 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v58, (int8x16_t)v67), v67);
        v52 += 4;
        v54 -= 16LL;
      }

      while (v54);
      if (vaddv_s8( vand_s8( vmovn_s16((int16x8_t)vornq_s8( vmvnq_s8((int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v56, v55),  (int16x8_t)vceqq_s32(v57, v55))),  (int8x16_t)vuzp1q_s16( (int16x8_t)vceqq_s32(v58, v55),  (int16x8_t)vceqq_s32(v59, v55)))),  (int8x8_t)0x8040201008040201LL)))
      {
        unsigned int v49 = 1;
      }

      if (v51 == v44)
      {
LABEL_73:
        if (!v49) {
          goto LABEL_83;
        }
        v46 /= 2;
        if (v44 >= 4)
        {
          uint64_t v74 = v44 & 0x7FFFFFFC;
          uint64_t v75 = v44 & 0xFFFFFFFC;
          uint64_t v76 = (uint32x4_t *)v48;
          do
          {
            *(int32x4_t *)uint64_t v76 = vshrq_n_s32((int32x4_t)vsraq_n_u32(*v76, *v76, 0x1FuLL), 1uLL);
            ++v76;
            v75 -= 4LL;
          }

          while (v75);
          if (v74 == v44)
          {
LABEL_83:
            if (v44 >= 0x10 && (v39 >= v48 + 4 * v44 || v48 >= v39 + 2 * v44))
            {
              uint64_t v79 = v44 & 0x7FFFFFF0;
              int32x4_t v84 = (int16x8_t *)(v48 + 32);
              int32x4_t v85 = (int16x8_t *)(v39 + 16);
              uint64_t v86 = v44 & 0xFFFFFFF0;
              do
              {
                int16x8_t v88 = v84[-2];
                int16x8_t v87 = v84[-1];
                int16x8_t v90 = *v84;
                int16x8_t v89 = v84[1];
                v84 += 4;
                v85[-1] = vuzp1q_s16(v88, v87);
                *int32x4_t v85 = vuzp1q_s16(v90, v89);
                v85 += 2;
                v86 -= 16LL;
              }

              while (v86);
              if (v79 == v44)
              {
LABEL_89:
                *(_WORD *)(*((void *)v20 + 1) + 2 * v31) = v46;
                if (!v49) {
                  goto LABEL_44;
                }
                goto LABEL_43;
              }
            }

            else
            {
              uint64_t v79 = 0LL;
            }

            unsigned int v80 = (_WORD *)(v39 + 2 * v79);
            uint64_t v81 = v44 - v79;
            uint64_t v82 = (int *)(v48 + 4 * v79);
            do
            {
              int v83 = *v82++;
              *v80++ = v83;
              --v81;
            }

            while (v81);
            goto LABEL_89;
          }
        }

        else
        {
          uint64_t v74 = 0LL;
        }

        BOOL v77 = (int *)(v48 + 4 * v74);
        uint64_t v78 = v44 - v74;
        do
        {
          *v77++ /= 2;
          --v78;
        }

        while (v78);
        goto LABEL_83;
      }
    }

    else
    {
      uint64_t v51 = 0LL;
    }

    __int32 v69 = (int *)(v48 + 4 * v51);
    uint64_t v70 = v44 - v51;
    uint64_t v71 = (__int16 *)(v39 + 2 * v51);
    do
    {
      int v72 = *v71++;
      int v73 = *v69;
      *v69++ += v72;
      --v70;
    }

    while (v70);
    goto LABEL_73;
  }

  return 1LL;
}

    *(_DWORD *)(a1 + 68) = v14;
    uint64_t v11 = v14;
    *(_DWORD *)(a1 + 108) = 0;
    *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
    if (v14 == *(_DWORD *)(a1 + 72)) {
      goto LABEL_28;
    }
    goto LABEL_43;
  }

  while (1)
  {
    if (v8 >= v9) {
      goto LABEL_2;
    }
    *a3 = sub_1000200F0(*(void *)a1, *(unsigned __int16 *)(a1 + 76), v8);
    ++*(_DWORD *)(a1 + 108);
    if (!*(_DWORD *)(a1 + 84) || sub_1000BBCE0(v6, *(unsigned __int16 *)(a1 + 28), *a3) || *(void *)(a1 + 160))
    {
      int v38 = *(unsigned __int16 *)(a1 + 120);
      if (v38 == 0xFFFF || v38 == *a3) {
        break;
      }
    }

  if (a3)
  {
    unint64_t v7 = 0LL;
    int v14 = 1LL;
    do
    {
      if (*(_BYTE *)(*(void *)(a1 + 296) + v14))
      {
        *(_DWORD *)(a3 + 4LL * (int)v7) = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v14);
        unint64_t v7 = (v7 + 1);
        LODWORD(v3) = *(_DWORD *)(a1 + 268);
      }

      ++v14;
    }

    while (v14 < (int)v3);
    return v7;
  }

  int v23 = *(void *)(a1 + 296);
  if (v3 < 9)
  {
    LODWORD(v7) = 0;
    uint64_t v24 = 1LL;
    goto LABEL_55;
  }

  uint64_t v25 = v3 - 1;
  if (v3 >= 0x21)
  {
    unsigned int v27 = 0uLL;
    unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFE0LL;
    v28.i64[0] = 0x100000001LL;
    v28.i64[1] = 0x100000001LL;
    int v29 = (int8x16_t *)(v23 + 17);
    int32x4_t v30 = 0uLL;
    uint64_t v31 = v25 & 0xFFFFFFFFFFFFFFE0LL;
    int32x4_t v32 = 0uLL;
    uint32x4_t v33 = 0uLL;
    unsigned int v34 = 0uLL;
    int32x4_t v35 = 0uLL;
    uint64_t v36 = 0uLL;
    int v37 = 0uLL;
    do
    {
      int v38 = (uint8x16_t)vtstq_s8(v29[-1], v29[-1]);
      unint64_t v39 = vmovl_u8(*(uint8x8_t *)v38.i8);
      int v40 = vmovl_high_u8(v38);
      int32x4_t v41 = (uint8x16_t)vtstq_s8(*v29, *v29);
      int v42 = vmovl_u8(*(uint8x8_t *)v41.i8);
      int v43 = vmovl_high_u8(v41);
      uint32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v40), v28));
      int32x4_t v32 = vaddq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8), v28));
      int32x4_t v30 = vaddq_s32(v30, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v39), v28));
      unsigned int v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v39.i8), v28));
      int v37 = vaddq_s32(v37, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v43), v28));
      uint64_t v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8), v28));
      int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v42), v28));
      unsigned int v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v42.i8), v28));
      v29 += 2;
      v31 -= 32LL;
    }

    while (v31);
    unint64_t v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v34, v27), vaddq_s32(v36, v32)),  vaddq_s32(vaddq_s32(v35, v30), vaddq_s32(v37, v33))));
    if (v25 == v26) {
      return v7;
    }
    if ((v25 & 0x18) == 0)
    {
      uint64_t v24 = v26 | 1;
      goto LABEL_55;
    }
  }

  else
  {
    LODWORD(v7) = 0;
    unint64_t v26 = 0LL;
  }

  uint64_t v24 = v25 & 0xFFFFFFFFFFFFFFF8LL | 1;
  uint64_t v44 = 0uLL;
  uint64_t v45 = (int32x4_t)v7;
  int v46 = (int8x8_t *)(v26 + v23 + 1);
  unsigned int v47 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8LL);
  v48.i64[0] = 0x100000001LL;
  v48.i64[1] = 0x100000001LL;
  do
  {
    unsigned int v49 = *v46++;
    BOOL v50 = vmovl_u8((uint8x8_t)vtst_s8(v49, v49));
    uint64_t v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v50), v48));
    uint64_t v45 = vaddq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v50.i8), v48));
    v47 += 8LL;
  }

  while (v47);
  unint64_t v7 = vaddvq_s32(vaddq_s32(v45, v44));
  if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8LL))
  {
LABEL_55:
    uint64_t v51 = (unsigned __int8 *)(v23 + v24);
    uint64_t v52 = v3 - v24;
    do
    {
      if (*v51++) {
        unint64_t v7 = (v7 + 1);
      }
      else {
        unint64_t v7 = v7;
      }
      --v52;
    }

    while (v52);
  }

  return v7;
}

  sub_1000239F8(a3, v5);
}

      __int32 v69 = qword_1000FDCC0;
      if (!qword_1000FDCC0) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }

  unsigned int v27 = a2[1];
  if (v7 < v27)
  {
LABEL_28:
    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_29;
  }

        unint64_t v39 = v33 - v35;
        do
        {
          int32x4_t v41 = *v38++;
          int v40 = v41;
          int v42 = v37->i16[0];
          int v37 = (int16x4_t *)((char *)v37 + 2);
          v36->i16[0] = (int)(v22 + v42 * v40) >> v21;
          uint64_t v36 = (int16x8_t *)((char *)v36 + 2);
          --v39;
        }

        while (v39);
        goto LABEL_29;
      }
    }

    else
    {
      LODWORD(v35) = 0;
    }

    uint64_t v36 = (int16x8_t *)a3;
    int v37 = (int16x4_t *)a2;
    int v38 = (__int16 *)*((void *)a1 + 2);
    goto LABEL_27;
  }

  unint64_t v7 = sub_10007A574(a1);
  *((void *)v3 + 26) = v7;
  if (!v7) {
    goto LABEL_32;
  }
  *((void *)v3 + 25) = v7;
  uint64_t v8 = sub_10007A808(a1);
  *((void *)v3 + 28) = v8;
  if (!v8) {
    goto LABEL_32;
  }
  *((void *)v3 + 27) = v8;
  uint64_t v9 = sub_10007A808(a1);
  *((void *)v3 + 30) = v9;
  if (!v9) {
    goto LABEL_32;
  }
  *((void *)v3 + 29) = v9;
  uint64_t v10 = sub_10007A808(a1);
  *((void *)v3 + 32) = v10;
  if (!v10) {
    goto LABEL_32;
  }
  *((void *)v3 + 31) = v10;
  return v3;
}

  unint64_t v7 = sub_10007A574(a1);
  *((void *)v3 + 26) = v7;
  if (!v7) {
    goto LABEL_34;
  }
  *((void *)v3 + 25) = v7;
  uint64_t v8 = sub_10007A808(a1);
  *((void *)v3 + 28) = v8;
  if (!v8) {
    goto LABEL_34;
  }
  *((void *)v3 + 27) = v8;
  uint64_t v9 = sub_10007A808(a1);
  *((void *)v3 + 30) = v9;
  if (!v9) {
    goto LABEL_34;
  }
  *((void *)v3 + 29) = v9;
  uint64_t v10 = sub_10007A808(a1);
  *((void *)v3 + 32) = v10;
  if (!v10) {
    goto LABEL_34;
  }
  *((void *)v3 + 31) = v10;
  uint64_t v11 = sub_10007A808(a1);
  *((void *)v3 + 34) = v11;
  if (!v11) {
    goto LABEL_34;
  }
  *((void *)v3 + 33) = v11;
  uint64_t v12 = sub_10007A808(a1);
  *((void *)v3 + 36) = v12;
  if (!v12) {
    goto LABEL_34;
  }
  *((void *)v3 + 35) = v12;
  return v3;
}

          ++v43;
          sub_10008BD18(v12, (uint64_t)v88, 0);
          if (v88[0] >= v67) {
            goto LABEL_40;
          }
        }

        sub_1000867DC(v60, (char *)v52, v44, __n_7, *(_DWORD *)(v12 + 776), 0LL);
LABEL_23:
        int v73 = sub_1000C8928(v60, v83, v69, v72);
        uint64_t v10 = v77;
        if (!v73) {
          goto LABEL_26;
        }
        goto LABEL_27;
      }

      while (1)
      {
        sub_10008B8C0(v12, v88, (uint64_t)v52, v60, &__n_7);
        uint64_t v74 = sub_1000C88E4((unint64_t)v52);
        uint64_t v76 = sub_1000C8928(v52, v33, v74, v75);
        if (v76 > 0) {
          break;
        }
        if (v74 >= __n)
        {
          if (v76)
          {
            uint64_t v10 = v77;
          }

          else
          {
            *(_DWORD *)(v80 + 4LL * (int)v61) = v43;
            int32x4_t v61 = (v61 + 1);
            uint64_t v10 = v77;
            if ((int)v61 >= v81)
            {
LABEL_38:
              sub_1000CB038(v60, v44);
              sub_1000CB038(v52, v44);
              sub_1000CB038(v33, v25);
              sub_1000CB038(v83, v25);
              return v61;
            }
          }

          ++v43;
          sub_10008BD18(v12, (uint64_t)v88, 0);
          if (v88[0] >= v67) {
            goto LABEL_40;
          }
        }

        else
        {
          ++v43;
          sub_10008BD18(v12, (uint64_t)v88, 0);
          if (v88[0] >= v67) {
            break;
          }
        }
      }

    uint32x4_t v33 = -1;
    goto LABEL_43;
  }

  int v17 = *(_DWORD *)(a1 + 40);
  if (v17 > 0) {
    goto LABEL_30;
  }
  __int16 v15 = 0;
  uint32x4_t v33 = -1;
LABEL_43:
  *a3 = v33;
  int v43 = *(_DWORD *)(a1 + 704);
  uint64_t v44 = *(_DWORD *)(a1 + 692);
  uint64_t v45 = v6;
  int v46 = (unsigned __int8 *)v7;
  unsigned int v47 = v15;
  if (v43 != 1)
  {
    while (!v47)
    {
      int32x4_t v57 = *v45++;
      unint64_t v48 = v57;
      if (*(_BYTE *)(v5 + v57) == 2)
      {
        int32x4_t v58 = *(void *)(a1 + 104);
        int32x4_t v59 = *(unsigned __int16 *)(v58 + 2 * v48);
        int32x4_t v55 = *(unsigned __int16 *)(v58 + 2 * v48 + 2) + ~(_DWORD)v59;
        int v46 = (unsigned __int8 *)(*(void *)(a1 + 88) + v59);
        int32x4_t v56 = v46 + 1;
        LODWORD(v48) = *v46;
        if (!v55)
        {
LABEL_58:
          int v46 = v56;
          goto LABEL_59;
        }

  int v38 = sub_1000BE644(0xFFFFFFFF, 4, v36);
  unint64_t v39 = *(void *)(*(void *)(a1 + 144) + 40LL);
  if (v39)
  {
LABEL_13:
    int v40 = sub_1000BE644(-1431655765 * ((unint64_t)(v39 - *(void *)(a1 + 128)) >> 1), 4, v38);
    int32x4_t v41 = *(void *)(*(void *)(a1 + 144) + 48LL);
    if (v41) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  int32x4_t v67 = *v62;
LABEL_30:
  sub_1000B8938(v191, v15, v59, a5, 0LL, a6, v195, v196, v67, a10[1], 0, 0, 0);
  uint16x8_t v199 = 1;
LABEL_31:
  int32x4_t v68 = a10[4];
  if (v68 < 1)
  {
    int32x4_t v84 = v201;
    goto LABEL_52;
  }

  __int32 v69 = 0LL;
  uint64_t v70 = 0;
  while (1)
  {
    uint64_t v71 = a10[7 * v69];
    if (v71 != 3)
    {
      if (v71 == 2)
      {
        int v72 = &a10[7 * v69];
        uint64_t v75 = v72[2];
        int v73 = v72 + 2;
        uint64_t v74 = v75;
        if (v75 >= 1)
        {
          uint64_t v76 = 0LL;
          do
          {
            v61[v70 + v76] = v76 + a10[7 * v69 + 1];
            uint64_t v74 = *v73;
            ++v76;
          }

          while ((int)v76 < *v73);
          v70 += v76;
        }

        *a11 = a10[7 * v69 + 1] + v74;
        int32x4_t v68 = a10[4];
      }

      goto LABEL_34;
    }

    BOOL v77 = (int)a10[7 * v69 + 1];
    uint64_t v78 = *(unsigned __int16 *)(a9 + 2 * v77);
LABEL_34:
    if (++v69 >= v68) {
      goto LABEL_45;
    }
  }

  *a11 = v77;
LABEL_45:
  float64x2_t v185 = v18;
  uint16x8_t v200 = v61;
  if (v70 >= 13)
  {
    v189 = v33;
    uint64_t v79 = v70;
    unsigned int v80 = v58;
    uint64_t v81 = v199;
    do
    {
      uint64_t v82 = *v61++;
      v81 += sub_1000B8998(v16, a9 + 2 * v82, v82, 1, v196, v191, v15, v59, a5, 0LL, v80, v195, 0);
      --v79;
    }

    while (v79);
    uint16x8_t v199 = v81;
    LODWORD(v83) = v70;
    int32x4_t v58 = v80;
    uint32x4_t v33 = v189;
    int v18 = v185;
    int32x4_t v61 = v200;
    int v17 = a9;
    signed int v177 = v15;
    uint64_t v178 = v59;
    int32x4_t v84 = v201;
    goto LABEL_49;
  }

  LODWORD(v83) = 0;
  signed int v177 = v15;
  uint64_t v178 = v59;
  int32x4_t v84 = v201;
  if (v70 != 3)
  {
LABEL_49:
    goto LABEL_50;
  }

  uint32x4_t v159 = sub_1000B37CC(v16, (char *)(a9 + 2LL * *v61), 0LL, 0LL, 3LL, 30LL, (uint64_t)v201);
  if (v159 < 1)
  {
    uint64_t v70 = 3;
    LODWORD(v83) = 0;
LABEL_50:
    unint64_t v179 = 0;
    v188 = v70;
    while (1)
    {
      int16x8_t v90 = (v70 + ~(_DWORD)v83) % 3;
      uint64_t v91 = (v90 + 1);
      if (v90 == 2) {
        break;
      }
      uint64_t v97 = v59;
      uint64_t v98 = v58;
      int v99 = v15;
      unsigned int v96 = 0;
LABEL_100:
      v182 = v188 - v83;
      int16x8_t v117 = (int)v91 >= 1 && v188 - (int)v83 <= 2;
      int32x4_t v193 = v83;
      int32x4_t v118 = v198;
      v190 = v91;
      if (!v117)
      {
LABEL_104:
        if ((int)v91 < 1)
        {
          int v18 = v185;
          __int16 v15 = v99;
          int32x4_t v58 = v98;
          int32x4_t v59 = v97;
          uint64_t v70 = v188;
          LODWORD(v83) = v91 + v193;
          if (!v96) {
            goto LABEL_56;
          }
          goto LABEL_106;
        }

      uint64_t v10 = v3;
      return sub_10003991C(v10);
    }
  }

  if (v7 != dword_1000FA138[14 * v5]) {
    return 0LL;
  }
  if (v7 - 1 < 3)
  {
    if (a2 > 0xFF)
    {
      if (!a1
        || ((0x43uLL >> a1) & 1) != 0
        || !(*(unsigned int (**)(uint64_t))&dword_1000FA138[14 * a1 + 12])(a2))
      {
        return 0LL;
      }
    }

    else if (!sub_1000BF0B4(a2))
    {
      return 0LL;
    }

    if (a3 > 0xFF)
    {
      if (!v5
        || ((0x43uLL >> v5) & 1) != 0
        || !(*(unsigned int (**)(uint64_t))&dword_1000FA138[14 * v5 + 12])(a3))
      {
        return 0LL;
      }
    }

    else if (!sub_1000BF0B4(a3))
    {
      return 0LL;
    }

    return 1LL;
  }

  if (v7 == 7) {
    return (_DWORD)a2 == 12483;
  }
  if (v7 == 6) {
    return (_DWORD)a2 == 12387;
  }
  return 0LL;
}

_DWORD *sub_10000F3F8( uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 > 6)
  {
    uint64_t v8 = sub_1000BCAE8(a1, 0LL, a2, a4, a5, a6, a7, a8);
    if (!v8) {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_1000BCAE8(a1, off_1000F8DA8[a3], a2, a4, a5, a6, a7, a8);
    if (!v8) {
      return 0LL;
    }
  }

  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(2048LL);
  uint64_t v11 = (_DWORD *)v10;
  if (!v10)
  {
    sub_1000BCBC8(v9);
    return v11;
  }

  uint64_t v12 = (_DWORD *)(v10 + 2016);
  if (!sub_1000BCCEC(v9, (_DWORD *)(v10 + 2016))) {
    goto LABEL_478;
  }
  if (!*v12)
  {
    if (!sub_1000BCCEC(v9, v11 + 248)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 249)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 250)) {
      goto LABEL_478;
    }
    int v17 = v11 + 251;
    if (!sub_1000BCCEC(v9, v11 + 251)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 252)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 254)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 255)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 256)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 257)) {
      goto LABEL_478;
    }
    int v18 = v11 + 258;
    if (!sub_1000BCCEC(v9, v11 + 258)) {
      goto LABEL_478;
    }
    uint64_t v19 = v11 + 259;
    if (!sub_1000BCCEC(v9, v11 + 259)) {
      goto LABEL_478;
    }
    uint32x4_t v146 = v11 + 261;
    if (!sub_1000BCCEC(v9, v11 + 261)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 262)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 263)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 264)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 265)) {
      goto LABEL_478;
    }
    uint64_t v141 = v11 + 268;
    if (!sub_1000BCD38(v9, v11 + 268)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 269)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 270)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 271)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 272)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 273)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 274)) {
      goto LABEL_478;
    }
    int16x8_t v140 = v11 + 275;
    if (!sub_1000BCD38(v9, v11 + 275)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 276)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 277)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 278)) {
      goto LABEL_478;
    }
    int32x4_t v130 = v11 + 279;
    if (!sub_1000BCCEC(v9, v11 + 279)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 280)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 281)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 282)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 283)) {
      goto LABEL_478;
    }
    v11[285] = 2785280;
    int16x8_t v125 = v11 + 295;
    if (!sub_1000BCD38(v9, v11 + 295)) {
      goto LABEL_478;
    }
    int32x4_t v122 = v11 + 297;
    if (!sub_1000BCD38(v9, v11 + 297)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 298)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 299)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 300)) {
      goto LABEL_478;
    }
    v149[0] = 0;
    if (!sub_1000BCD38(v9, v149)) {
      goto LABEL_478;
    }
    int v121 = v149[0];
    v11[324] = v149[0];
    if (!sub_1000BCCEC(v9, v11 + 328)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 329)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 330)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 336)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 337)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 346)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 348)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 350)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 351)) {
      goto LABEL_478;
    }
    if (!sub_1000BCD38(v9, v11 + 356)) {
      goto LABEL_478;
    }
    if (!sub_1000BCCEC(v9, v11 + 401)) {
      goto LABEL_478;
    }
    uint32x4_t v120 = v11 + 440;
    if (!sub_1000BCCEC(v9, v11 + 440)
      || !sub_1000BCCEC(v9, v11 + 441)
      || !sub_1000BCDD4(v9, (_WORD *)v11 + 884)
      || !sub_1000BCD80(v9, (_BYTE *)v11 + 1770)
      || !sub_1000BCD80(v9, (_BYTE *)v11 + 1771)
      || !sub_1000BCD80(v9, (_BYTE *)v11 + 1772)
      || !sub_1000BCD80(v9, (_BYTE *)v11 + 1773)
      || !sub_1000BCCEC(v9, v11 + 444)
      || !sub_1000BCD80(v9, (_BYTE *)v11 + 1780)
      || !sub_1000BCD38(v9, v11 + 446)
      || !sub_1000BCD38(v9, v11 + 447)
      || !sub_1000BCCEC(v9, v11 + 464)
      || !sub_1000BCCEC(v9, v11 + 465)
      || !sub_1000BCCEC(v9, v11 + 466)
      || !sub_1000BCCEC(v9, v11 + 467)
      || !sub_1000BCCEC(v9, v11 + 468)
      || !sub_1000BCCEC(v9, v11 + 469)
      || !sub_1000BCD38(v9, v11 + 470)
      || !sub_1000BCD38(v9, v11 + 471)
      || !sub_1000BCD38(v9, v11 + 472)
      || !sub_1000BCD38(v9, v11 + 478)
      || !sub_1000BCD38(v9, v11 + 479)
      || !sub_1000BCD38(v9, v11 + 480))
    {
      goto LABEL_478;
    }

    if (v11[467])
    {
      v149[0] = 0;
      int32x4_t v118 = v11 + 484;
      if (*v118)
      {
        if (v149[0] != *v140) {
          goto LABEL_478;
        }
        *((void *)v11 + 241) = *v118;
      }

      v149[0] = 0;
      uint64_t v119 = v11 + 488;
      if (*v119)
      {
        if (v149[0] != *v140) {
          goto LABEL_478;
        }
        *((void *)v11 + 243) = *v119;
      }
    }

    if (!sub_1000BCDD4(v9, (_WORD *)v11 + 980)
      || !sub_1000BCCEC(v9, v11 + 491)
      || !sub_1000BCCEC(v9, v11 + 492)
      || !sub_1000BCDD4(v9, (_WORD *)v11 + 986)
      || !sub_1000BCCEC(v9, v11 + 495)
      || !sub_1000BCCEC(v9, v11 + 498)
      || !sub_1000BCD38(v9, v11 + 499)
      || !sub_1000BCCEC(v9, v11 + 502)
      || !sub_1000BCCEC(v9, v11 + 503)
      || !sub_1000BCD38(v9, v11 + 505)
      || !sub_1000BCCEC(v9, v11 + 506)
      || !sub_1000BCCEC(v9, v11 + 294))
    {
      goto LABEL_478;
    }

    if (!v11[503])
    {
      if (v11[294])
      {
        v149[0] = 0;
        int v114 = v11 + 292;
        if (*v114)
        {
          if (v149[0] != *v141 + 1) {
            goto LABEL_478;
          }
          *((void *)v11 + 145) = *v114;
        }
      }

      else
      {
        v149[0] = 0;
        int32x4_t v115 = v11 + 288;
        if (*v115)
        {
          if (v149[0] != *v141 + 1) {
            goto LABEL_478;
          }
          *((void *)v11 + 143) = *v115;
        }
      }
    }

    if (*v19) {
      goto LABEL_168;
    }
    int v20 = v11[281] * *v122;
    if (*v18)
    {
      int v112 = 0;
      int v116 = 0;
      if (v121 == 5) {
        int v20 = 0;
      }
      int v126 = v20;
      if (*v120) {
        goto LABEL_142;
      }
    }

    else
    {
      if (v121 == 5) {
        int v20 = 0;
      }
      int v126 = v20;
    }

    int v21 = v126;
    if (*v130) {
      int v22 = 0;
    }
    else {
      int v22 = v126;
    }
    int v112 = v22;
    if (!*v130) {
      int v21 = 0;
    }
    int v116 = v21;
    int v126 = 0;
LABEL_142:
    v149[0] = 0;
    uint64_t v111 = (uint64_t *)(v11 + 312);
    uint64_t v23 = *v111;
    if (*v111)
    {
      if (v149[0] != v112) {
        goto LABEL_478;
      }
    }

    if (v23) {
      *((void *)v11 + 151) = v23;
    }
    v149[0] = 0;
    uint64_t v113 = (uint64_t *)(v11 + 314);
    uint64_t v24 = *v113;
    if (*v113)
    {
      if (v149[0] != v116) {
        goto LABEL_478;
      }
    }

    if (v24) {
      *((void *)v11 + 152) = v24;
    }
    v149[0] = 0;
    int16x8_t v117 = (uint64_t *)(v11 + 316);
    uint64_t v25 = *v117;
    if (*v117)
    {
      if (v149[0] != v126) {
        goto LABEL_478;
      }
    }

    if (v25) {
      *((void *)v11 + 153) = v25;
    }
    else {
      uint64_t v25 = *((void *)v11 + 153);
    }
    uint64_t v26 = *((void *)v11 + 151);
    if (v25) {
      int v27 = 2;
    }
    else {
      int v27 = 1;
    }
    if (!v26) {
      int v27 = v25 != 0;
    }
    uint64_t v28 = *((void *)v11 + 152);
    if (v28) {
      ++v27;
    }
    if (v27 != (v121 != 5)) {
      goto LABEL_478;
    }
    if (!*v130)
    {
      if (v121 == 5)
      {
LABEL_173:
        int v131 = 0;
        goto LABEL_174;
      }

      if (!(v25 | v26)) {
        goto LABEL_478;
      }
LABEL_172:
      int v131 = *v122;
LABEL_174:
      v149[0] = 0;
      int32x4_t v127 = (uint64_t *)(v11 + 322);
      uint64_t v29 = *v127;
      if (*v127)
      {
        if (v149[0] != v131) {
          goto LABEL_478;
        }
      }

      if (v29) {
        *((void *)v11 + 155) = v29;
      }
      if (v11[329])
      {
        v149[0] = 0;
        int32x4_t v132 = v11 + 334;
        if (*v132)
        {
          if (v149[0] != v11[330]) {
            goto LABEL_478;
          }
          *((void *)v11 + 166) = *v132;
        }
      }

      if (v11[336])
      {
        v149[0] = 0;
        int32x4_t v133 = v11 + 340;
        if (*v133)
        {
          if (v149[0] != v11[337]) {
            goto LABEL_478;
          }
          *((void *)v11 + 169) = *v133;
        }
      }

      int v134 = v11[346];
      int v128 = v11[274];
      v149[0] = 0;
      int32x4_t v123 = (uint64_t *)(v11 + 344);
      uint64_t v30 = *v123;
      if (*v123)
      {
        if (v149[0] != v128 * v134) {
          goto LABEL_478;
        }
      }

      if (v30) {
        *((void *)v11 + 171) = v30;
      }
      int32x4_t v129 = (int *)sub_1000C1074(48LL);
      if (!v129) {
        goto LABEL_478;
      }
      *((void *)v11 + 116) = v129;
      if (!sub_1000BCD38(v9, v129)) {
        goto LABEL_478;
      }
      uint64_t v31 = sub_1000C1074(8LL * *v129);
      *((void *)v129 + 3) = v31;
      if (!v31) {
        goto LABEL_478;
      }
      *((void *)v129 + 4) = v31;
      if (*v129 >= 1)
      {
        uint64_t v135 = 0LL;
        uint64_t v124 = 0LL;
        do
        {
          v135 += 8LL;
          ++v124;
        }

        while (v124 < *v129);
      }

      v149[0] = 0;
      uint64_t v136 = v11 + 354;
      if (*v136)
      {
        if (v149[0] != v11[356]) {
          goto LABEL_478;
        }
        *((void *)v11 + 176) = *v136;
      }

      if (v11[506])
      {
        v149[0] = 0;
        int16x8_t v137 = v11 + 510;
        if (*v137)
        {
          if (v149[0] != *v125) {
            goto LABEL_478;
          }
          *((void *)v11 + 254) = *v137;
        }
      }

      v149[0] = 0;
      int16x8_t v138 = v11 + 462;
      if (*v138)
      {
        if (v149[0] != *v141) {
          goto LABEL_478;
        }
        *((void *)v11 + 230) = *v138;
      }

      v149[0] = 0;
      uint16x4_t v142 = v11 + 476;
      if (*v142)
      {
        if (v149[0] != v11[472]) {
          goto LABEL_478;
        }
        *((void *)v11 + 237) = *v142;
      }

      int v139 = *v125;
      if (v11[249] && *v18)
      {
        int v32 = *v125;
        if (*v120) {
          int v32 = 0;
        }
        int v143 = v32;
      }

      else
      {
        int v143 = 0;
      }

      int v33 = v11[280] * v139;
      if (*v19)
      {
        int v34 = v11[283];
        int v35 = v33 + (v33 < 0 ? 3 : 0);
        v149[0] = 0;
        uint64_t v36 = v11 + 42;
        if (*v36)
        {
          if (v149[0] != *v125) {
            goto LABEL_478;
          }
          *((void *)v11 + 20) = *v36;
        }

        v149[0] = 0;
        int v37 = (uint64_t *)(v11 + 50);
        uint64_t v38 = *v37;
        if (*v37)
        {
          if (v149[0] != v34 * v139) {
            goto LABEL_478;
          }
        }

        if (v38) {
          *((void *)v11 + 24) = v38;
        }
        v149[0] = 0;
        unint64_t v39 = (uint64_t *)(v11 + 318);
        uint64_t v40 = *v39;
        if (*v39)
        {
          if (v149[0] != v35 >> 2) {
            goto LABEL_478;
          }
        }

        if (v40) {
          *((void *)v11 + 154) = v40;
        }
        goto LABEL_292;
      }

      if (!*v18)
      {
        v149[0] = 0;
        unsigned int v47 = (uint64_t *)(v11 + 6);
        uint64_t v48 = *v47;
        if (*v47)
        {
          if (v149[0] != v33) {
            goto LABEL_478;
          }
        }

        if (v48) {
          *((void *)v11 + 2) = v48;
        }
        goto LABEL_292;
      }

      v149[0] = 0;
      int32x4_t v41 = (uint64_t *)(v11 + 38);
      int v42 = v33 >= 0 ? v33 : v33 + 3;
      uint64_t v43 = *v41;
      if (*v41)
      {
        if (v149[0] != v42 >> 2) {
          goto LABEL_478;
        }
      }

      if (v43) {
        *((void *)v11 + 17) = v43;
      }
      if (v11[277])
      {
        v149[0] = 0;
        uint64_t v44 = (uint64_t *)(v11 + 18);
        uint64_t v45 = *v44;
        if (*v44)
        {
          if (v149[0] != v143) {
            goto LABEL_478;
          }
        }

        if (v45) {
          *((void *)v11 + 8) = v45;
        }
        if (*v146 && !*v120)
        {
          v149[0] = 0;
          uint64_t v52 = (uint64_t *)(v11 + 22);
          uint64_t v46 = *v52;
          if (*v52)
          {
            if (v149[0] != v143) {
              goto LABEL_478;
            }
          }

          if (!v46)
          {
LABEL_279:
            if (!*((void *)v11 + 8))
            {
              if (*((void *)v11 + 10))
              {
LABEL_292:
                uint64_t v54 = (char *)sub_1000C1074(256LL);
                if (!v54) {
                  goto LABEL_478;
                }
                int32x4_t v55 = v54;
                *((void *)v11 + 163) = v54;
                if (!sub_1000BCD38(v9, v54)) {
                  goto LABEL_478;
                }
                if (!sub_1000BCD38(v9, v55)) {
                  goto LABEL_478;
                }
                if (!sub_1000BCD38(v9, v55 + 208)) {
                  goto LABEL_478;
                }
                if (!sub_1000BCD38(v9, v55 + 212)) {
                  goto LABEL_478;
                }
                int32x4_t v56 = v55 + 216;
                if (!sub_1000BCD38(v9, v55 + 216)
                  || !sub_1000BCD38(v9, v55 + 220)
                  || !sub_1000BCD38(v9, v55 + 224)
                  || !sub_1000BCD38(v9, v55 + 228)
                  || !sub_1000BCD38(v9, v55 + 240)
                  || !sub_1000BCD80(v9, v55 + 244)
                  || !sub_1000BCD80(v9, v55 + 245)
                  || !sub_1000BCD80(v9, v55 + 246)
                  || !sub_1000BCCEC(v9, (_DWORD *)v55 + 62)
                  || !sub_1000BCD38(v9, v55 + 252))
                {
                  goto LABEL_478;
                }

                if (v55[246])
                {
                  v149[0] = 0;
                  int32x4_t v57 = v55 + 104;
                  if (*v57)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 12) = *v57;
                  }

                  v149[0] = 0;
                  int32x4_t v58 = v55 + 120;
                  if (*v58)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 14) = *v58;
                  }
                }

                else
                {
                  v149[0] = 0;
                  int32x4_t v59 = v55 + 72;
                  if (*v59)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 8) = *v59;
                  }

                  v149[0] = 0;
                  int16x8_t v60 = v55 + 88;
                  if (*v60)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 10) = *v60;
                  }
                }

                v149[0] = 0;
                int32x4_t v61 = v55 + 136;
                if (sub_1000BCED0(v9, 1, (uint64_t *)v55 + 17, v149))
                {
                  if (*v61)
                  {
                    if (v149[0] != *v56) {
                      goto LABEL_478;
                    }
                    *((void *)v55 + 16) = *v61;
                  }

                  if (*((_DWORD *)v55 + 62))
                  {
                    int v69 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    uint64_t v70 = (uint64_t *)(v55 + 184);
                    uint64_t v71 = *v70;
                    if (*v70)
                    {
                      if (v149[0] != v69) {
                        goto LABEL_478;
                      }
                    }

                    if (v71) {
                      *((void *)v55 + 20) = v71;
                    }
                  }

                  else if (v55[244])
                  {
                    int v72 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    int v73 = (uint64_t *)(v55 + 168);
                    int v74 = v72 + 14;
                    if (v72 >= -7) {
                      int v74 = v72 + 7;
                    }
                    uint64_t v75 = *v73;
                    if (*v73)
                    {
                      if (v149[0] != v74 >> 3) {
                        goto LABEL_478;
                      }
                    }

                    if (v75) {
                      *((void *)v55 + 18) = v75;
                    }
                  }

                  if (v55[245])
                  {
                    int v144 = sub_100025C94((unsigned int *)v55);
                    int v76 = *((_DWORD *)v55 + 54);
                    v149[0] = 0;
                    BOOL v77 = (uint64_t *)(v55 + 176);
                    int v78 = v76 + 14;
                    if (v76 >= -7) {
                      int v78 = v76 + 7;
                    }
                    uint64_t v79 = *v77;
                    if (*v77)
                    {
                      if (v149[0] != v78 >> 3) {
                        goto LABEL_478;
                      }
                    }

                    if (v79) {
                      *((void *)v55 + 19) = v79;
                    }
                    v149[0] = 0;
                    unsigned int v80 = (uint64_t *)(v55 + 200);
                    uint64_t v81 = *v80;
                    if (*v80)
                    {
                      if (v149[0] != v144) {
                        goto LABEL_478;
                      }
                    }

                    if (v81) {
                      *((void *)v55 + 24) = v81;
                    }
                  }

                  sub_1000C0BFC(6LL * *((int *)v55 + 55), v62, v63, v64, v65, v66, v67, v68);
                  *((void *)v55 + 1) = v82;
                  *((void *)v55 + 2) = v82;
                  if (*((int *)v55 + 55) >= 1)
                  {
                    uint64_t v83 = 0LL;
                    uint64_t v84 = 0LL;
                    do
                    {
                      ++v84;
                      v83 += 6LL;
                    }

                    while (v84 < *((int *)v55 + 55));
                  }

                  uint64_t v85 = *((void *)v11 + 163);
                  if (sub_1000BCD38(v9, (void *)(v85 + 40))
                    && sub_1000BCD38(v9, (void *)(v85 + 44))
                    && sub_1000BCD38(v9, (void *)(v85 + 48))
                    && sub_1000BCD38(v9, (void *)(v85 + 52))
                    && sub_1000BCD38(v9, (void *)(v85 + 56)))
                  {
                    v149[0] = 0;
                    uint64_t v86 = (void *)(v85 + 32);
                    if (sub_1000BCED0(v9, 1, (uint64_t *)(v85 + 32), v149))
                    {
                      if (*v86)
                      {
                        if (v149[0] != *(_DWORD *)(v85 + 40)) {
                          goto LABEL_478;
                        }
                        *(void *)(v85 + 24) = *v86;
                      }

                      if (*v17)
                      {
                        v149[0] = 0;
                        if (!sub_1000BCD38(v9, v11 + 144)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCD38(v9, v11 + 145)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCD38(v9, v149)) {
                          goto LABEL_478;
                        }
                        int v147 = v11[144];
                        int v145 = *(unsigned __int16 *)(*((void *)v11 + 143) + 2LL * (int)v11[268]);
                        if (!sub_1000BCCEC(v9, v11 + 164)
                          || !sub_1000BCCEC(v9, v11 + 165)
                          || !sub_1000BCCEC(v9, v11 + 166)
                          || !sub_1000BCD38(v9, v11 + 178)
                          || !sub_1000BCCEC(v9, v11 + 179)
                          || !sub_1000BCCEC(v9, v11 + 180)
                          || !sub_1000BCCEC(v9, v11 + 181)
                          || !sub_1000BCD38(v9, v11 + 182)
                          || !sub_1000BCD38(v9, v11 + 183)
                          || !sub_1000BCD38(v9, v11 + 184))
                        {
                          goto LABEL_478;
                        }

                        if (v11[181])
                        {
                          int v87 = v149[0];
                          int v148 = 0;
                          int16x8_t v88 = (uint64_t *)(v11 + 136);
                          int v89 = v87 >= 0 ? v87 : v87 + 3;
                          uint64_t v90 = *v88;
                          if (*v88)
                          {
                            if (v148 != v89 >> 2) {
                              goto LABEL_478;
                            }
                          }

                          if (v90) {
                            *((void *)v11 + 67) = v90;
                          }
                          int v148 = 0;
                          uint64_t v91 = v11 + 140;
                          if (*v91)
                          {
                            if (v148 != v11[145]) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 69) = *v91;
                          }
                        }

                        else
                        {
                          int v148 = 0;
                          uint64_t v92 = v11 + 132;
                          if (*v92)
                          {
                            if (v148 != v149[0]) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 65) = *v92;
                          }
                        }

                        int v148 = 0;
                        int v93 = v11 + 148;
                        if (*v93)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 73) = *v93;
                        }

                        int v148 = 0;
                        unsigned int v94 = v11 + 152;
                        if (*v94)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 75) = *v94;
                        }

                        int v148 = 0;
                        unint64_t v95 = v11 + 156;
                        if (*v95)
                        {
                          if (v148 != v147 + 1) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 77) = *v95;
                        }

                        int v148 = 0;
                        unsigned int v96 = (uint64_t *)(v11 + 162);
                        uint64_t v97 = *v96;
                        if (*v96)
                        {
                          if (v148 != v147 * v145) {
                            goto LABEL_478;
                          }
                        }

                        if (v97) {
                          *((void *)v11 + 80) = v97;
                        }
                      }

                      if (v11[248])
                      {
                        int v98 = v11[268];
                        if (!sub_1000BCD38(v9, v11 + 62)
                          || !sub_1000BCD38(v9, v11 + 63)
                          || !sub_1000BCD38(v9, v11 + 64)
                          || !sub_1000BCCEC(v9, v11 + 65)
                          || !sub_1000BCCEC(v9, v11 + 66)
                          || !sub_1000BCCEC(v9, v11 + 67))
                        {
                          goto LABEL_478;
                        }

                        int v99 = v11[67] ? 2 : v98;
                        if (!sub_1000BCD38(v9, v11 + 72)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCCEC(v9, v11 + 112)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCCEC(v9, v11 + 113)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCCEC(v9, v11 + 70)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCCEC(v9, v11 + 114)) {
                          goto LABEL_478;
                        }
                        v149[0] = 0;
                        __int32 v100 = (uint64_t *)(v11 + 126);
                        uint64_t v101 = *v100;
                        if (*v100)
                        {
                          if (v149[0] != v99) {
                            goto LABEL_478;
                          }
                        }

                        if (v101) {
                          *((void *)v11 + 62) = v101;
                        }
                        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3864) && !*v17)
                        {
                          if (!sub_1000BCD38(v9, v11 + 144)) {
                            goto LABEL_478;
                          }
                          int v102 = v11[144];
                          v149[0] = 0;
                          uint64_t v103 = v11 + 152;
                          if (*v103)
                          {
                            if (v149[0] != v102 + 1) {
                              goto LABEL_478;
                            }
                            *((void *)v11 + 75) = *v103;
                          }
                        }
                      }

                      if (v11[491])
                      {
                        if (!sub_1000BCD38(v9, v11 + 218)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCD38(v9, v11 + 222)) {
                          goto LABEL_478;
                        }
                        if (!sub_1000BCD38(v9, v11 + 230)) {
                          goto LABEL_478;
                        }
                        v149[0] = 0;
                        if (!sub_1000BCED0(v9, 1, (uint64_t *)v11 + 105, v149)
                          || *((void *)v11 + 105) && v149[0] != *v140)
                        {
                          goto LABEL_478;
                        }

                        v149[0] = 0;
                        int v104 = v11 + 214;
                        if (*v104)
                        {
                          if (v149[0] != *v140) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 106) = *v104;
                        }

                        v149[0] = 0;
                        __int16 v105 = v11 + 226;
                        if (*v105)
                        {
                          if (v149[0] != *v140) {
                            goto LABEL_478;
                          }
                          *((void *)v11 + 112) = *v105;
                        }
                      }

                      if (!v11[256] || sub_1000BCD38(v9, v11 + 188) && sub_1000BCD38(v9, v11 + 194))
                      {
                        if (!v11[254]) {
                          goto LABEL_8;
                        }
                        uint64_t v106 = (char *)sub_1000C1074(120LL);
                        if (v106)
                        {
                          int v107 = v106;
                          *((void *)v11 + 118) = v106;
                          *((void *)v11 + 216) = sub_1000A28FC;
                          *((void *)v11 + 119) = 0LL;
                          if (sub_1000BCD38(v9, v106) && sub_1000BCD38(v9, v107 + 4) && sub_1000BCD38(v9, v107 + 8))
                          {
                            v149[0] = 0;
                            uint64_t v108 = v107 + 24;
                            if (sub_1000BCED0(v9, 1, (uint64_t *)v107 + 3, v149))
                            {
                              if (*v108)
                              {
                                if (v149[0] != *((_DWORD *)v107 + 2) * *((_DWORD *)v107 + 1)) {
                                  goto LABEL_478;
                                }
                                *((void *)v107 + 2) = *v108;
                              }

                              v149[0] = 0;
                              uint64_t v109 = v107 + 40;
                              if (sub_1000BCED0(v9, 1, (uint64_t *)v107 + 5, v149))
                              {
                                if (!*v109) {
                                  goto LABEL_8;
                                }
                                if (v149[0] == *(_DWORD *)v107 * *((_DWORD *)v107 + 1))
                                {
                                  *((void *)v107 + 4) = *v109;
                                  goto LABEL_8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

LABEL_478:
                sub_1000BCBC8(v9);
LABEL_479:
                sub_100008B24((uint64_t)v11);
                return 0LL;
              }

LABEL_291:
              if (v143) {
                goto LABEL_478;
              }
              goto LABEL_292;
            }

            goto LABEL_288;
          }
        }

        else
        {
          uint64_t v46 = 0LL;
        }

        *((void *)v11 + 10) = v46;
        goto LABEL_279;
      }

      v149[0] = 0;
      unsigned int v49 = (uint64_t *)(v11 + 10);
      uint64_t v50 = *v49;
      if (*v49)
      {
        if (v149[0] != v143) {
          goto LABEL_478;
        }
      }

      if (v50) {
        *((void *)v11 + 4) = v50;
      }
      if (*v146 && !*v120)
      {
        v149[0] = 0;
        uint64_t v53 = (uint64_t *)(v11 + 14);
        uint64_t v51 = *v53;
        if (*v53)
        {
          if (v149[0] != v143) {
            goto LABEL_478;
          }
        }

        if (!v51)
        {
LABEL_287:
          if (!*((void *)v11 + 4))
          {
            if (*((void *)v11 + 6)) {
              goto LABEL_292;
            }
            goto LABEL_291;
          }

LABEL_288:
          if (!v143) {
            goto LABEL_478;
          }
          goto LABEL_292;
        }
      }

      else
      {
        uint64_t v51 = 0LL;
      }

      *((void *)v11 + 6) = v51;
      goto LABEL_287;
    }

    if (!v28) {
      goto LABEL_478;
    }
LABEL_168:
    if (v121 == 5) {
      goto LABEL_173;
    }
    goto LABEL_172;
  }

            break;
          }

          if (v349 != -1)
          {
            if ((_DWORD)v339 == 1)
            {
              int v355 = v458;
              if (*v290 == 46)
              {
                double v349 = v432;
                if (*v440)
                {
                  else {
                    double v349 = v424;
                  }
                }
              }
            }

            else
            {
              int v355 = v458;
            }

            uint64_t v356 = v478[0];
            if (v478[0] >= v355 && v455 != 0) {
              uint64_t v356 = 0;
            }
            if (v356 < v355)
            {
              a7[v356] = v349;
              if (v448) {
                v448[v356] = (v437 + v286 + v288) >> 1;
              }
              if (a9) {
                *(_DWORD *)&a9[4 * v356] = v339;
              }
              if (a11) {
                a11[v356] = v453;
              }
            }

            v478[0] = v356 + 1;
            v286 = v286 + 2LL * (int)v339 + v288 - 2;
            uint64_t v178 = (v466 + 1);
            uint64_t v38 = v434;
            continue;
          }

          uint64_t v38 = v434;
          v338 = v453;
          double v340 = (v437 + v286 + v288) >> 1;
          if (!v446)
          {
LABEL_281:
            unint64_t v287 = sub_1000B8998( a1,  v286 + v288 - 2,  v340,  v443,  v455,  v458,  (uint64_t)a7,  (uint64_t)v448,  (uint64_t)a9,  0LL,  (uint64_t)a11,  v478,  1);
LABEL_214:
            uint64_t v178 = (v287 + v466);
            v286 = (uint64_t)v462;
            continue;
          }

uint64_t sub_100011044(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1388);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a1 + 912))( a1,  *(void *)(a1 + 840),  *(void *)(a1 + 1544));
  int v4 = result;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 5296))
  {
    *(_WORD *)(a1 + 1136) = result;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 1792);
    uint64_t result = *(unsigned __int16 *)(v5 + 2 * v2);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(a1, v2);
      uint64_t v5 = *(void *)(a1 + 1792);
    }

    __int16 v6 = result;
    *(_WORD *)(v5 + 2 * v2) = v6;
    uint64_t v7 = *(int *)(a1 + 1824);
    if ((int)v7 < *(_DWORD *)(a1 + 1828))
    {
      uint64_t v8 = *(void *)(a1 + 1832);
      *(_DWORD *)(a1 + 1824) = v7 + 1;
      *(_WORD *)(v8 + 2 * v7) = v2;
    }
  }

  return result;
}

uint64_t sub_1000110FC(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(a1 + 1964)) {
    return 0xFFFFFFFFLL;
  }
  int v4 = *(_DWORD *)(a1 + 1100);
  uint64_t v5 = sub_1000BE770(*(unint64_t **)(a1 + 840), 1, v4, 0xFFFFFFFFLL);
  unsigned int v6 = sub_1000BE770(*(unint64_t **)(a1 + 848), 1, v4, v5);
  unsigned int v7 = sub_1000BE540(*(_DWORD *)(a1 + 888), v6);
  uint64_t v8 = sub_1000BE540(*(_DWORD *)(a1 + 920), v7);
  if (a2)
  {
    uint64_t v9 = sub_1000BE540(*(_DWORD *)(a1 + 872), v8);
    uint64_t v10 = sub_1000BE770(*(unint64_t **)(a1 + 832), 2, v4, v9);
    uint64_t v11 = sub_1000BE770(*(unint64_t **)(a1 + 880), 2, v4, v10);
    return sub_1000BE770(*(unint64_t **)(a1 + 864), 1, *(_DWORD *)(a1 + 888) * v4, v11);
  }

  return v8;
}

uint64_t sub_1000111D4(uint64_t result)
{
  if (!*(_DWORD *)(result + 1964)) {
    return result;
  }
  int v1 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v1 = *(_DWORD *)(qword_1000FDCC0 + 1864);
  }
  *(_DWORD *)(result + 920) = v1;
  uint64_t v2 = *(unsigned int *)(result + 1100);
  uint64_t v3 = *(void *)(result + 848);
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      uint64_t v5 = 2 * i;
      *(_WORD *)(*(void *)(result + 880) + v5) = *(unsigned __int8 *)(v3 + i) - *(unsigned __int8 *)(result + 1770);
      *(_WORD *)(*(void *)(result + 832) + v5) = *(unsigned __int16 *)(*(void *)(result + 880) + 2 * i) << *(_DWORD *)(result + 920);
    }
  }

  if (*(int *)(result + 888) >= 1)
  {
    uint64_t v6 = *(unsigned int *)(result + 1100);
    *(_DWORD *)(result + 872) = 0;
    if ((int)v6 >= 1)
    {
      if (v6 <= 7)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
        do
        {
          uint64_t v9 = *(void *)(result + 864);
          *(_BYTE *)(v9 + v7) = *(_BYTE *)v3;
          if ((_DWORD)v6 != 1)
          {
            *(_BYTE *)(v9 + v7 + 1) = *(_BYTE *)(v3 + 1);
            if ((_DWORD)v6 != 2)
            {
              *(_BYTE *)(v9 + v7 + 2) = *(_BYTE *)(v3 + 2);
              if ((_DWORD)v6 != 3)
              {
                *(_BYTE *)(v9 + v7 + 3) = *(_BYTE *)(v3 + 3);
                if ((_DWORD)v6 != 4)
                {
                  *(_BYTE *)(v9 + v7 + 4) = *(_BYTE *)(v3 + 4);
                  if ((_DWORD)v6 != 5)
                  {
                    uint64_t v10 = v9 + v7;
                    *(_BYTE *)(v10 + 5) = *(_BYTE *)(v3 + 5);
                    if ((_DWORD)v6 != 6) {
                      *(_BYTE *)(v10 + 6) = *(_BYTE *)(v3 + 6);
                    }
                  }
                }
              }
            }
          }

          ++v8;
          v7 += v6;
        }

        while (v8 < *(int *)(result + 888));
        goto LABEL_46;
      }

      uint64_t v11 = v6 & 0x7FFFFFF8;
      if (v6 < 0x20)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        while (1)
        {
          uint64_t v14 = *(void *)(result + 864);
          uint64_t v15 = (void *)(v14 + v13 * v6);
          if ((unint64_t)v15 - v3 > 0x1F)
          {
            *uint64_t v15 = *(void *)v3;
            if (v11 != 8)
            {
              v15[1] = *(void *)(v3 + 8);
              if (v11 != 16) {
                v15[2] = *(void *)(v3 + 16);
              }
            }

            uint64_t v16 = v6 & 0x18;
            if (v11 == v6) {
              goto LABEL_21;
            }
          }

          else
          {
            uint64_t v16 = 0LL;
          }

          uint64_t v17 = v6 - v16;
          int v18 = (_BYTE *)(v14 + v16 + v12);
          uint64_t v19 = (char *)(v3 + v16);
          do
          {
            char v20 = *v19++;
            *v18++ = v20;
            --v17;
          }

          while (v17);
LABEL_21:
          ++v13;
          v12 += v6;
        }
      }

      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v23 = 16LL;
      uint64_t v24 = v6 & 0xFFFFFFE0;
      do
      {
        uint64_t v25 = *(void *)(result + 864);
        if ((unint64_t)(v25 + v22 * v6 - v3) >= 0x20)
        {
          uint64_t v31 = (_OWORD *)(v25 + v23);
          uint64_t v32 = v6 & 0xFFFFFFE0;
          int v33 = (__int128 *)(v3 + 16);
          do
          {
            __int128 v34 = *v33;
            *(v31 - 1) = *(v33 - 1);
            *uint64_t v31 = v34;
            v33 += 2;
            v31 += 2;
            v32 -= 32LL;
          }

          while (v32);
          if ((v6 & 0xFFFFFFE0) == v6) {
            goto LABEL_32;
          }
          uint64_t v26 = v6 & 0x7FFFFFE0;
          if ((v6 & 0x18) != 0)
          {
            int v35 = (void *)(v25 + v24);
            uint64_t v36 = v11 - (v6 & 0xFFFFFFE0);
            int v37 = (uint64_t *)(v3 + (v6 & 0xFFFFFFE0));
            do
            {
              uint64_t v38 = *v37++;
              *v35++ = v38;
              v36 -= 8LL;
            }

            while (v36);
            uint64_t v26 = v6 & 0x7FFFFFF8;
            if (v11 == v6) {
              goto LABEL_32;
            }
          }
        }

        else
        {
          uint64_t v26 = 0LL;
        }

        uint64_t v27 = v6 - v26;
        uint64_t v28 = (_BYTE *)(v25 + v26 + v21);
        uint64_t v29 = (char *)(v3 + v26);
        do
        {
          char v30 = *v29++;
          *v28++ = v30;
          --v27;
        }

        while (v27);
LABEL_32:
        ++v22;
        v23 += v6;
        v24 += v6;
        v21 += v6;
      }

      while (v22 < *(int *)(result + 888));
    }
  }

LABEL_46:
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1064))
  {
    unint64_t v39 = *(uint64_t (**)(void))(result + 1752);
    if (v39) {
      return v39();
    }
  }

  return result;
}

    int v33 = 0x40000000;
  }

  uint64_t v45 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  uint64_t v6 = *v45;
  uint64_t v44 = v45[1] - v6;
  if ((v44 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_5:
  if (v44 < 2) {
    goto LABEL_46;
  }
  uint64_t v7 = *(_DWORD *)(a1 + 1064);
  uint64_t v8 = *(_DWORD *)(a1 + 1068);
  uint64_t v9 = 144LL;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v9 = 136LL;
  }
  uint64_t v10 = 112LL;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v10 = 64LL;
  }
  uint64_t v11 = 128LL;
  if (*(_DWORD *)(a1 + 1080) > a2) {
    uint64_t v11 = 80LL;
  }
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a1 + v9);
  if (*(_DWORD *)(a1 + 2012)) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = v6;
  }
  uint64_t v15 = v13 + 12LL * v14;
  uint64_t v16 = 2LL * v14;
  uint64_t v17 = (__int16 *)(*(void *)(a1 + v10) + v16);
  int v18 = *(void *)(a1 + 1552);
  uint64_t v19 = *(_DWORD *)v18 & 0xF000F;
  char v20 = (*(_DWORD *)v18 >> 4) & 0xF000F;
  uint64_t v21 = (*(_DWORD *)v18 >> 8) & 0xF000F;
  uint64_t v22 = (*(_DWORD *)v18 >> 12) & 0xF000F;
  uint64_t v23 = *(int8x8_t *)(v18 + 4);
  uint64_t v24 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 4uLL);
  uint64_t v25 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 8uLL);
  uint64_t v26 = (int8x8_t)vshr_n_u32((uint32x2_t)v23, 0xCuLL);
  uint64_t v27 = (int32x2_t)vand_s8(v23, (int8x8_t)0xF000F000F000FLL);
  uint64_t v28 = (int32x2_t)vand_s8(v24, (int8x8_t)0xF000F000F000FLL);
  uint64_t v29 = (int32x2_t)vand_s8(v25, (int8x8_t)0xF000F000F000FLL);
  char v30 = (int32x2_t)vand_s8(v26, (int8x8_t)0xF000F000F000FLL);
  uint64_t v31 = (v44 >> 1) + 1;
  uint64_t v32 = (__int16 *)(v16 + v12 + 2);
  int v33 = 0x40000000;
  do
  {
    uint64_t v36 = *v17
        - (((*(_DWORD *)v15 & 0xF000F) * v19
          + ((*(_DWORD *)v15 >> 4) & 0xF000F) * v20
          + ((*(_DWORD *)v15 >> 8) & 0xF000F) * v21
          + ((*(_DWORD *)v15 >> 12) & 0xF000Fu) * v22) >> 15);
    if (v36 <= v7)
    {
      uint64_t v38 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v15 + 4), (int8x8_t)0xF000F000F000FLL), v27),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 4uLL),  (int8x8_t)0xF000F000F000FLL),  v28),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 8uLL),  (int8x8_t)0xF000F000F000FLL),  v29),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 4), 0xCuLL),  (int8x8_t)0xF000F000F000FLL),  v30);
      int v37 = v36
          + *(v32 - 1)
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v38, 0xFuLL), 1), v38, 0xFuLL).u32[0];
    }

    else
    {
      int v37 = v36 + v8;
    }

    if (v37 < v33) {
      int v33 = v37;
    }
    unint64_t v39 = v17[1]
        - (((*(_DWORD *)(v15 + 12) & 0xF000F) * v19
          + ((*(_DWORD *)(v15 + 12) >> 4) & 0xF000F) * v20
          + ((*(_DWORD *)(v15 + 12) >> 8) & 0xF000F) * v21
          + ((*(_DWORD *)(v15 + 12) >> 12) & 0xF000Fu) * v22) >> 15);
    if (v39 <= v7)
    {
      __int128 v34 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v15 + 16), (int8x8_t)0xF000F000F000FLL), v27),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 4uLL),  (int8x8_t)0xF000F000F000FLL),  v28),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 8uLL),  (int8x8_t)0xF000F000F000FLL),  v29),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32(*(uint32x2_t *)(v15 + 16), 0xCuLL),  (int8x8_t)0xF000F000F000FLL),  v30);
      int v35 = v39
          + *v32
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v34, 0xFuLL), 1), v34, 0xFuLL).u32[0];
    }

    else
    {
      int v35 = v39 + v8;
    }

    if (v35 < v33) {
      int v33 = v35;
    }
    --v31;
    v32 += 2;
    v15 += 24LL;
    v17 += 2;
  }

  while (v31 > 1);
}

      if ((int)v19 < 1)
      {
        LODWORD(v22) = 0;
LABEL_52:
        if ((_DWORD)v22 != (_DWORD)v19) {
          goto LABEL_63;
        }
        goto LABEL_55;
      }

      uint64_t v22 = 0LL;
      while (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v22) != v15)
      {
      }

      if ((_DWORD)v22 != (_DWORD)v19) {
        goto LABEL_63;
      }
LABEL_55:
      if ((_DWORD)v19 != *(_DWORD *)(v3 + 264)) {
        goto LABEL_58;
      }
      if (sub_100027558(v3))
      {
        LODWORD(v19) = *(_DWORD *)(v3 + 268);
LABEL_58:
        *(_DWORD *)(*(void *)(v3 + 272) + 4LL * (int)v19) = v15;
        uint64_t v22 = *(int *)(v3 + 268);
        *(_DWORD *)(*(void *)(v3 + 288) + 4LL * ((int)v22 + 1)) = *(_DWORD *)(*(void *)(v3 + 288) + 4 * v22);
        ++*(_DWORD *)(v3 + 268);
        sub_100031AA0(*(void *)(v3 + 256), v15);
        __int128 v34 = 0LL;
        int v33 = 0;
        uint64_t v23 = sub_100033278(*(void *)(v3 + 256), v15);
        if (v23)
        {
          if (*(_DWORD *)(v23 + 340)) {
            goto LABEL_62;
          }
        }

        else
        {
          sub_10003366C(*(void *)(v3 + 256), v15, &v34, &v33);
          if (v34) {
LABEL_62:
          }
            *(_DWORD *)(v3 + 340) = 1;
        }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 88) = -1;
  return result;
}

  else {
    uint64_t v3 = v36;
  }
  sub_1000CB038(v15, 13LL);
  return v3;
}

uint64_t sub_1000114A8(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 1964))
  {
    uint64_t v2 = *(unsigned int *)(result + 1100);
    uint64_t v3 = 848LL;
    if (!a2) {
      uint64_t v3 = 840LL;
    }
    uint64_t v4 = *(void *)(result + v3);
    if ((int)v2 >= 1)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        uint64_t v6 = 2 * i;
        *(_WORD *)(*(void *)(result + 880) + v6) = *(unsigned __int8 *)(v4 + i) - *(unsigned __int8 *)(result + 1770);
        *(_WORD *)(*(void *)(result + 832) + v6) = *(unsigned __int16 *)(*(void *)(result + 880) + 2 * i) << *(_DWORD *)(result + 920);
      }
    }

    if (*(int *)(result + 888) >= 1)
    {
      uint64_t v7 = *(unsigned int *)(result + 1100);
      *(_DWORD *)(result + 872) = 0;
      if ((int)v7 >= 1)
      {
        if (v7 <= 7)
        {
          uint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          do
          {
            uint64_t v10 = *(void *)(result + 864);
            *(_BYTE *)(v10 + v8) = *(_BYTE *)v4;
            if ((_DWORD)v7 != 1)
            {
              *(_BYTE *)(v10 + v8 + 1) = *(_BYTE *)(v4 + 1);
              if ((_DWORD)v7 != 2)
              {
                *(_BYTE *)(v10 + v8 + 2) = *(_BYTE *)(v4 + 2);
                if ((_DWORD)v7 != 3)
                {
                  *(_BYTE *)(v10 + v8 + 3) = *(_BYTE *)(v4 + 3);
                  if ((_DWORD)v7 != 4)
                  {
                    *(_BYTE *)(v10 + v8 + 4) = *(_BYTE *)(v4 + 4);
                    if ((_DWORD)v7 != 5)
                    {
                      uint64_t v11 = v10 + v8;
                      *(_BYTE *)(v11 + 5) = *(_BYTE *)(v4 + 5);
                      if ((_DWORD)v7 != 6) {
                        *(_BYTE *)(v11 + 6) = *(_BYTE *)(v4 + 6);
                      }
                    }
                  }
                }
              }
            }

            ++v9;
            v8 += v7;
          }

          while (v9 < *(int *)(result + 888));
          return result;
        }

        uint64_t v12 = v7 & 0x7FFFFFF8;
        if (v7 < 0x20)
        {
          uint64_t v13 = 0LL;
          uint64_t v14 = 0LL;
          while (1)
          {
            uint64_t v15 = *(void *)(result + 864);
            uint64_t v16 = (void *)(v15 + v14 * v7);
            if ((unint64_t)v16 - v4 > 0x1F)
            {
              *uint64_t v16 = *(void *)v4;
              if (v12 != 8)
              {
                v16[1] = *(void *)(v4 + 8);
                if (v12 != 16) {
                  v16[2] = *(void *)(v4 + 16);
                }
              }

              uint64_t v17 = v7 & 0x18;
              if (v12 == v7) {
                goto LABEL_21;
              }
            }

            else
            {
              uint64_t v17 = 0LL;
            }

            uint64_t v18 = v7 - v17;
            uint64_t v19 = (_BYTE *)(v15 + v17 + v13);
            char v20 = (char *)(v4 + v17);
            do
            {
              char v21 = *v20++;
              *v19++ = v21;
              --v18;
            }

            while (v18);
LABEL_21:
            ++v14;
            v13 += v7;
          }
        }

        uint64_t v22 = 0LL;
        uint64_t v23 = 0LL;
        uint64_t v24 = 16LL;
        uint64_t v25 = v7 & 0xFFFFFFE0;
        do
        {
          uint64_t v26 = *(void *)(result + 864);
          if ((unint64_t)(v26 + v23 * v7 - v4) >= 0x20)
          {
            uint64_t v32 = (_OWORD *)(v26 + v24);
            uint64_t v33 = v7 & 0xFFFFFFE0;
            __int128 v34 = (__int128 *)(v4 + 16);
            do
            {
              __int128 v35 = *v34;
              *(v32 - 1) = *(v34 - 1);
              _OWORD *v32 = v35;
              v34 += 2;
              v32 += 2;
              v33 -= 32LL;
            }

            while (v33);
            if ((v7 & 0xFFFFFFE0) == v7) {
              goto LABEL_32;
            }
            uint64_t v27 = v7 & 0x7FFFFFE0;
            if ((v7 & 0x18) != 0)
            {
              uint64_t v36 = (void *)(v26 + v25);
              uint64_t v37 = v12 - (v7 & 0xFFFFFFE0);
              uint64_t v38 = (uint64_t *)(v4 + (v7 & 0xFFFFFFE0));
              do
              {
                uint64_t v39 = *v38++;
                *v36++ = v39;
                v37 -= 8LL;
              }

              while (v37);
              uint64_t v27 = v7 & 0x7FFFFFF8;
              if (v12 == v7) {
                goto LABEL_32;
              }
            }
          }

          else
          {
            uint64_t v27 = 0LL;
          }

          uint64_t v28 = v7 - v27;
          uint64_t v29 = (_BYTE *)(v26 + v27 + v22);
          char v30 = (char *)(v4 + v27);
          do
          {
            char v31 = *v30++;
            *v29++ = v31;
            --v28;
          }

          while (v28);
LABEL_32:
          ++v23;
          v24 += v7;
          v25 += v7;
          v22 += v7;
        }

        while (v23 < *(int *)(result + 888));
      }
    }
  }

  return result;
}

uint64_t sub_100011754(uint64_t result, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(result + 1964)) {
    return result;
  }
  uint64_t v3 = *(unsigned int *)(result + 1100);
  if (*(_DWORD *)(result + 888))
  {
    uint64_t v4 = *(void *)(result + 864) + *(int *)(result + 872) * (uint64_t)(int)v3;
    uint64_t v5 = v4;
    if (!a3) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = a2;
    if (!a3) {
      goto LABEL_12;
    }
  }

  if ((int)v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      uint64_t v7 = 2 * i;
      *(_WORD *)(*(void *)(result + 832) + v7) = *(unsigned __int8 *)(v5 + i)
                                                 - *(unsigned __int8 *)(result + 1770)
                                                 - *(_WORD *)(*(void *)(result + 880) + 2 * i)
                                                 + *(_WORD *)(*(void *)(result + 832) + 2 * i);
      *(_WORD *)(*(void *)(result + 880) + v7) = *(unsigned __int16 *)(*(void *)(result + 832) + 2 * i) >> *(_DWORD *)(result + 920);
    }

    uint64_t v8 = *(unsigned int *)(result + 1100);
    if ((int)v8 >= 1)
    {
      for (uint64_t j = 0LL; j != v8; ++j)
        *(_BYTE *)(*(void *)(result + 840) + j) = *(_BYTE *)(result + 1770)
                                                  + *(_WORD *)(*(void *)(result + 880) + 2 * j);
    }
  }

LABEL_32:
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1064))
  {
    uint64_t v27 = *(uint64_t (**)(void))(result + 1752);
    if (v27) {
      return v27();
    }
  }

  return result;
}

  uint64_t v28 = 0x40000000;
}

    if (v16[85] && (void)v89)
    {
      uint64_t v36 = sub_10005EA2C(v89, SDWORD2(v89), WORD6(v81));
      LOWORD(v37) = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        uint64_t v37 = *(void *)(qword_1000FDCC0 + 4168);
      }
      __int128 v34 = (__int16)(v34 + v36 - v37);
    }

    if (v34 < *v71)
    {
      uint64_t v38 = (char *)sub_100031858(v72, v30);
      uint64_t v28 = v38;
      if (v73 != a1 && sub_100034540(v38))
      {
        if ((int)a1[67] < 2)
        {
LABEL_10:
          uint64_t v27 = -1;
        }

        else
        {
          uint64_t v39 = 1LL;
          while (1)
          {
            uint64_t v40 = sub_100033278(*((void *)a1 + 32), *(_DWORD *)(*((void *)a1 + 34) + 4 * v39));
            if (v40)
            {
              int32x4_t v41 = *(unsigned int *)(v40 + 268);
            }

  sub_1000BCBC8(v25);
  return v26;
}

        ;
      }

      while (v39 > 1);
    }
  }

  uint64_t v8 = *(_DWORD *)(v3 + 1296);
  if (v8 >= 1)
  {
    for (uint64_t i = 0LL; i < v8; ++i)
    {
      if (*(_DWORD *)(*(void *)(v3 + 1304) + 4 * i) != -1)
      {
        int v10 = *(void *)(v3 + 1312);
        uint64_t v11 = (int *)(v10 + (i << 7));
        if (*v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = v10 + (i << 7);
          uint64_t v14 = v13 + 88;
          __int128 v15 = v13 + 48;
          uint64_t v54 = i;
          int32x4_t v55 = v13;
          uint64_t v16 = v13 + 8;
          do
          {
            uint64_t v17 = sub_1000BB9AC(*(void *)(v3 + 8), *(_DWORD *)(v55 + 4LL * v12 + 88), a2);
            uint64_t v18 = *v11;
            if (v17)
            {
              uint64_t v19 = v12 + 1LL;
              uint64_t v20 = v3;
              uint64_t v21 = a2;
              uint64_t v22 = 4LL * v12;
              uint64_t v23 = 4 * v19;
              char v24 = 4 * (v18 - (int)v19);
              j__memmove((void *)(v14 + v22), (const void *)(v14 + 4 * v19), v24);
              j__memmove((void *)(v15 + v22), (const void *)(v15 + v23), v24);
              int v25 = (void *)(v16 + v22);
              a2 = v21;
              uint64_t v3 = v20;
              j__memmove(v25, (const void *)(v16 + v23), v24);
              uint64_t v18 = *v11 - 1;
              *uint64_t v11 = v18;
              --v12;
            }

            ++v12;
          }

          while (v12 < v18);
          uint64_t v8 = *(_DWORD *)(v3 + 1296);
          uint64_t i = v54;
        }
      }
    }
  }

  if (*(int *)(v3 + 5496) >= 1)
  {
    uint64_t v52 = 0;
    uint64_t v53 = *(void *)(v3 + 5488);
    do
      sub_10004F7DC(v53, v52++);
    while (v52 < *(_DWORD *)(v3 + 5496));
  }

  uint64_t v43 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_47;
  }
LABEL_33:
  *(_WORD *)(a1 + 558) = v28 + *(_WORD *)(v43 + 3040);
  LOWORD(v43) = *(_WORD *)(v43 + 3136);
LABEL_48:
  __int128 v15 = v185;
  *(_WORD *)(a1 + 556) = v43 + v28;
LABEL_49:
  *(void *)(a1 + 872) = 0LL;
  unsigned int v49 = *(unsigned int *)(a1 + 808);
  if ((int)v49 < 1)
  {
    uint64_t v53 = 0x4000;
  }

  else
  {
    uint64_t v50 = *(void *)(a1 + 816);
    if (v49 >= 0x11)
    {
      uint64_t v54 = v49 & 0xF;
      if ((v49 & 0xF) == 0) {
        uint64_t v54 = 16LL;
      }
      uint64_t v51 = v49 - v54;
      int32x4_t v55 = (const __int16 *)(v50 + 34);
      v56.i64[0] = 0x4000400040004000LL;
      v56.i64[1] = 0x4000400040004000LL;
      int32x4_t v57 = v51;
      v58.i64[0] = 0x4000400040004000LL;
      v58.i64[1] = 0x4000400040004000LL;
      do
      {
        int32x4_t v59 = v55 - 16;
        int16x8_t v60 = (unsigned __int128)vld2q_s16(v59);
        int32x4_t v61 = (unsigned __int128)vld2q_s16(v55);
        int32x4_t v56 = vminq_s16((int16x8_t)v60, v56);
        int32x4_t v58 = vminq_s16((int16x8_t)v61, v58);
        v55 += 32;
        v57 -= 16LL;
      }

      while (v57);
      uint64_t v52 = vminvq_s16(vminq_s16(v56, v58));
    }

    else
    {
      uint64_t v51 = 0LL;
      uint64_t v52 = 0x4000;
    }

    uint64_t v62 = v49 - v51;
    uint64_t v63 = (__int16 *)(v50 + 4 * v51 + 2);
    do
    {
      uint64_t v65 = *v63;
      v63 += 2;
      uint64_t v64 = v65;
      if (v65 < v52) {
        uint64_t v52 = v64;
      }
      --v62;
    }

    while (v62);
    uint64_t v53 = v52;
  }

  uint64_t v66 = v53 + *(__int16 *)(a1 + 550);
  if (v66 >= 0x4000) {
    LOWORD(v66) = 0x4000;
  }
  *(_WORD *)(a1 + 992) = sub_1000533D8(a1, (__int16)v66);
  *(_DWORD *)(a1 + 568) += *(__int16 *)(a1 + 544);
  *(_DWORD *)(a1 + 544) = 1073758208;
  *(_WORD *)(a1 + 996) = 0x4000;
  sub_100052E74(a1);
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    uint64_t result = sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  (_DWORD *)(a1 + 436));
    *(_DWORD *)(a1 + 568) = 0x40000000;
    *(_DWORD *)(a1 + 524) = 5;
    uint64_t v14 = *(_WORD *)(a1 + 572);
    goto LABEL_67;
  }

  uint64_t v178 = (_DWORD *)(a1 + 436);
  uint64_t v67 = *(void *)(a1 + 864);
  uint64_t v68 = (_WORD *)(v67 - 8);
  if (v13 < 1) {
    goto LABEL_193;
  }
  int v69 = 0;
  uint64_t v70 = (_WORD *)(v15 + 8 * v16);
  uint64_t v71 = v70 - 4;
  v180 = v13;
  while (2)
  {
    *(void *)(a1 + 1016) = sub_100062FAC(*(void *)(a1 + 656), v69);
    *(void *)(a1 + 1008) = sub_100062FC4(*(void *)(a1 + 656), v69);
    *(void *)(a1 + 680) = sub_100062FB8(*(void *)(a1 + 656), v69);
    *(_DWORD *)(a1 + 668) = v69;
    uint16x4_t v186 = v70;
    if (!sub_100062FD0(*(void *)(a1 + 656)))
    {
      uint64_t v110 = *(__int16 *)(a1 + 992);
      v191 = v68;
      uint64_t v111 = v70 - 4;
      int v112 = *(_WORD **)(a1 + 1016);
      while (1)
      {
        int v114 = *v111;
        int32x4_t v115 = &v112[2 * v114];
        if ((*v115 & 0x80000000) == 0)
        {
          *(_WORD *)(a1 + 722) = v115[1];
          if ((*v115 & 0x7FFF) != 0)
          {
            uint64_t v113 = (__int16)(*(_WORD *)(a1 + 564) + v111[*(int *)(a1 + 528)]);
          }

          else
          {
            uint64_t v113 = (__int16)v111[1];
            if (!*v111)
            {
              uint64_t v113 = (__int16)(*(_WORD *)(a1 + 562) + v113 + *(_WORD *)(a1 + 564));
              if (v113 <= v110 && *(_WORD *)(a1 + 572))
              {
                *(_WORD *)(a1 + 722) = 0;
LABEL_149:
                uint64_t v192 = v111;
                *(_WORD *)(a1 + 716) = v113;
                int v116 = &v112[2 * v114 + 2];
                do
                {
                  int16x8_t v117 = *v116;
                  v116 += 2;
                }

                while (v117 < 0);
                int32x4_t v118 = *(v116 - 1) - 1;
                *(_WORD *)(a1 + 720) = v118;
              }

              else
              {
                int32x4_t v118 = 0;
                *(_WORD *)(a1 + 720) = 0;
                uint64_t v192 = v111;
              }

              uint64_t v119 = v71;
LABEL_153:
              while (1)
              {
                uint32x4_t v120 = *v71;
                if (!*v71)
                {
                  int32x4_t v130 = v191;
                  if (v71[1] <= *(_WORD *)(a1 + 992))
                  {
                    int32x4_t v132 = *(void *)(a1 + 384);
                    int32x4_t v133 = (unsigned __int16 *)sub_100015BAC(v132, *v112 & 0x7FFF);
                    *int32x4_t v130 = 0;
                    int v134 = (__int16)v71[1];
                    if (v134 <= *(__int16 *)(a1 + 992))
                    {
                      int16x8_t v137 = *v133;
                      int16x8_t v138 = *(unsigned __int16 *)(*(void *)(v132 + 1792) + 2 * v137);
                      if (v138 == 0x4000) {
                        LOWORD(v138) = sub_100015BC0(v132, v137);
                      }
                      int v131 = v138 + v134 - *(_WORD *)(a1 + 994);
                    }

                    else
                    {
                      int v131 = 0x4000;
                    }
                  }

                  else
                  {
                    __int128 *v191 = 0;
                    int v131 = 0x4000;
                  }

                  v130[1] = v131;
                  v130[3] = 0;
                  v71 -= 4;
                  uint64_t v68 = v130 - 4;
                  uint64_t v70 = v192;
                  if (*(_DWORD *)(a1 + 524) == 3) {
                    return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
                  }
                  goto LABEL_72;
                }

                if ((__int16)v71[*((unsigned __int8 *)v71 + 6) + 1] <= v110)
                {
                  int32x4_t v129 = v191;
                  sub_100058840(a1, v71, (uint64_t)v191, &v192, v112[2 * v120]);
                  v71 -= 4;
                  v191 = v129 - 4;
                  if (*(_DWORD *)(a1 + 524) == 3) {
                    goto LABEL_176;
                  }
                  goto LABEL_174;
                }

                v71 -= 4;
              }

              int v121 = v192;
              sub_1000586F4(a1, (unint64_t)v71, (unint64_t *)&v191, (uint64_t)v192);
              LODWORD(v122) = *(unsigned __int16 *)(a1 + 720);
              int32x4_t v123 = *(void *)(a1 + 1016);
              for (uint64_t i = v121 - 4; ; i -= 4)
              {
                int v126 = *i;
                int32x4_t v127 = (__int16 *)(v123 + 4 * v126);
                if ((*v127 & 0x80000000) == 0)
                {
                  *(_WORD *)(a1 + 722) = v127[1];
                  if ((*v127 & 0x7FFF) != 0)
                  {
                    int16x8_t v125 = (__int16)(*(_WORD *)(a1 + 564) + i[*(int *)(a1 + 528)]);
                  }

                  else
                  {
                    int16x8_t v125 = (__int16)i[1];
                    if (!*i)
                    {
                      int16x8_t v125 = (__int16)(*(_WORD *)(a1 + 562) + v125 + *(_WORD *)(a1 + 564));
                      if (v125 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
                      {
                        *(_WORD *)(a1 + 722) = 0;
LABEL_168:
                        uint64_t v192 = i;
                        *(_WORD *)(a1 + 716) = v125;
                        int32x4_t v122 = (__int16 *)(v123 + 4 * v126 + 4);
                        do
                        {
                          int v128 = *v122;
                          v122 += 2;
                        }

                        while (v128 < 0);
                        LOWORD(v122) = *(v122 - 1);
LABEL_171:
                        *(_WORD *)(a1 + 720) = (_WORD)v122 - 1;
                        if (*(_DWORD *)(a1 + 524) == 3)
                        {
LABEL_176:
                          uint64_t v71 = v119;
                          uint64_t v70 = v186;
                          if (*(_DWORD *)(a1 + 524) == 3) {
                            return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
                          }
                          goto LABEL_72;
                        }
                      }

                      else
                      {
                        *(_WORD *)(a1 + 720) = 0;
                        uint64_t v192 = i;
                        if (*(_DWORD *)(a1 + 524) == 3) {
                          goto LABEL_176;
                        }
                      }

  if (++v7 != v6)
  {
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 9032);
    goto LABEL_3;
  }

  if (++v6 != v5)
  {
LABEL_8:
    uint64_t v7 = *(void *)(a1 + 9024);
    goto LABEL_3;
  }

    sub_100075BD4((uint64_t *)v3);
    goto LABEL_33;
  }

  sub_1000CB038(v19, v41);
  if (a5 || (int)v6 > (int)v30) {
    return sub_10008D8C4( *(void *)(a1 + 848),  v39,  a3,  ((_DWORD)v6 - (_DWORD)v30) & ~(((int)v6 - (int)v30) >> 31),  a5)
  }
         + v30;
  else {
    return v30;
  }
}

    uint64_t v46 = v13;
    LODWORD(v48) = 0;
    goto LABEL_27;
  }

  if (!a3)
  {
    uint64_t v7 = *(_DWORD *)(v4 + 40);
    if (v7 >= 1)
    {
      uint64_t v8 = v48;
      uint64_t v9 = v46;
      int v10 = v47;
      uint64_t v11 = v4 + 376;
      if (*(__int16 *)(v4 + 752) != -1)
      {
        if ((_DWORD)v48)
        {
          uint64_t v8 = v48 - 1;
        }

        else
        {
          uint64_t v9 = v46 + 1;
          uint64_t v29 = *v46;
          if (*(_BYTE *)(v11 + v29) != 2) {
            goto LABEL_40;
          }
          char v30 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v29);
          char v31 = *v30;
          uint64_t v8 = v30[1] + ~(_DWORD)v31;
          int v10 = (unsigned __int8 *)(*(void *)(v4 + 88) + v31);
        }

        ++v10;
      }

      if (v8)
      {
        uint64_t v32 = v8 - 1;
        if (!v32) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }

      __int128 v15 = v22 - 1;
      uint64_t v28 = (unsigned __int8 *)(v7 + 2);
      LODWORD(v7) = *v23;
      if (v17 != 1) {
        goto LABEL_23;
      }
LABEL_33:
      uint64_t v23 = v28;
      goto LABEL_42;
    }

        uint64_t v17 = 2;
        goto LABEL_33;
      }
    }

    else
    {
      int v26 = (unsigned __int8 *)(*(void *)a2)++;
      uint64_t v27 = *v26;
      if (*(_BYTE *)(v18 + v27) != 2) {
        goto LABEL_24;
      }
      uint64_t v28 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v27);
      uint64_t v29 = *v28;
      char v24 = v28[1] + ~(_DWORD)v29;
      *(_DWORD *)(a2 + 16) = v24;
      *(void *)(a2 + 8) = *(void *)(a1 + 88) + v29 + 1;
      if (!v24) {
        goto LABEL_24;
      }
    }

    char v30 = v24 - 1;
    char v31 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v30;
    *(void *)(a2 + 8) = v31 + 1;
    if (*(_DWORD *)(a1 + 40) == 1) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }

              v43 -= 2 * *(unsigned __int8 *)(*(void *)(a1 + 112) + v63);
LABEL_33:
              uint64_t v9 = v82;
LABEL_34:
              *((_BYTE *)v84 + ((v43 - v9) >> 1)) = 1;
              ++v85;
            }
          }

          uint64_t v48 = 0;
          unsigned int v49 = v36;
LABEL_39:
          uint64_t v50 = v88;
          uint64_t v51 = v87;
          while (1)
          {
            uint64_t v52 = *v50++;
            if (!--v51)
            {
              unsigned int v47 = 0LL;
              --v49;
              if (v48++ == (_DWORD)v45) {
                goto LABEL_46;
              }
              goto LABEL_39;
            }
          }

          unsigned int v47 = (unsigned __int16 *)v49;
LABEL_46:
          if (v36 > v18) {
            goto LABEL_47;
          }
          goto LABEL_52;
        }

        --v40;
      }

      while (v40);
      if (v23 == ++v35) {
        goto LABEL_30;
      }
    }
  }

  bzero(v14, v11);
  unsigned int v80 = v11;
  uint64_t v81 = v8;
  uint64_t v16 = 0;
LABEL_91:
  if ((_DWORD)v11)
  {
    uint64_t v17 = v80;
    BOOL v77 = (uint64_t)&v9[2 * v80 + 2 * v16];
    int v78 = (int)v11 - 1LL;
    uint64_t v8 = v81;
    do
    {
      while (*((_BYTE *)v15 + v78))
      {
        *(_WORD *)(v77 - 2) = *(_WORD *)(a1 + 70);
        *(_WORD *)(v77 - 4) = *(_WORD *)&v9[2 * v78];
        v77 -= 4LL;
        --v78;
        LODWORD(v11) = v11 - 1;
        if (!(_DWORD)v11) {
          goto LABEL_98;
        }
      }

      *(_WORD *)(v77 - 2) = *(_WORD *)&v9[2 * v78];
      v77 -= 2LL;
      --v78;
      LODWORD(v11) = v11 - 1;
    }

    while ((_DWORD)v11);
  }

  else
  {
    uint64_t v8 = v81;
    uint64_t v17 = v80;
  }

  uint64_t v48 = sub_1000BE644(0xFFFFFFFF, 4, v46);
  unsigned int v49 = *(void *)(*(void *)(a1 + 144) + 80LL);
  if (v49)
  {
LABEL_18:
    uint64_t v50 = sub_1000BE644(-1431655765 * ((unint64_t)(v49 - *(void *)(a1 + 128)) >> 1), 4, v48);
    uint64_t v51 = *(void *)(*(void *)(a1 + 144) + 88LL);
    if (v51) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  *(_WORD *)(a1 + 742) = v23;
  *(_WORD *)(a1 + 744) = v23;
LABEL_35:
  *(_WORD *)(a1 + 656) = -1;
  *(_BYTE *)(a1 + 658) = -1;
  *(_WORD *)(a1 + 660) = -1;
  memset_pattern16((void *)(a1 + 662), &unk_1000F03B0, 4uLL);
  *(_WORD *)(a1 + 662) = 0;
  *(void *)(a1 + 672) = 0xFFFFFFFF00000000LL;
  *(_WORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 660) = sub_100004690(*(void *)(a1 + 384));
  *(_WORD *)(a1 + 832) = sub_100004688(*(void *)(a1 + 384));
  int v25 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v26 = *(_DWORD *)(qword_1000FDCC0 + 4552);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = *(_DWORD *)(a1 + 552);
  if (v26) {
    uint64_t v28 = v27 == 0;
  }
  else {
    uint64_t v28 = 1;
  }
  if (!v28) {
    int v26 = 0;
  }
  *(_DWORD *)(a1 + 696) = v26;
  if (v26)
  {
    if (v25)
    {
      uint64_t v29 = *(void *)(v25 + 4040);
      if (v29)
      {
        char v30 = *(void *)(a1 + 704);
        if (v30) {
          sub_100024180(v30);
        }
        else {
          *(void *)(a1 + 704) = sub_1000240DC(*(void *)(a1 + 688), v29);
        }
        *(_DWORD *)(a1 + 648) = 0;
        uint64_t v27 = *(_DWORD *)(a1 + 552);
        goto LABEL_53;
      }
    }

      uint64_t v20 = (uint64_t *)(v35 + 8 * v34);
    }

    *uint64_t v20 = a2;
    ++*(_DWORD *)(v3 + 12);
    return *v20;
  }

  return result;
}

      char v30 = v11 + 16 * v12;
      char v31 = *(_DWORD *)(v30 + 4);
      if (v31 < 1) {
        goto LABEL_10;
      }
      uint64_t v32 = *v13;
      uint64_t v33 = v31 + *v13;
      __int128 v34 = (_DWORD *)(v30 + 12);
      __int128 v35 = v8 - v26;
      uint64_t v36 = qword_1000FDCC0;
      uint64_t v67 = v34;
      int v69 = v8 - v26;
      uint64_t v66 = v33;
      while (1)
      {
        if (v36) {
          uint64_t v39 = *(void *)(v36 + 1216);
        }
        else {
          uint64_t v39 = 0LL;
        }
        uint64_t v40 = *(void *)(*v2 + 8LL * (v32 >> 8)) + 8LL * v32;
        int32x4_t v41 = v35 + *v34 + *(__int16 *)(v40 + 4);
        int v42 = *((_DWORD *)a1 + 3);
        uint64_t v43 = *((_DWORD *)a1 + 4);
        uint64_t v44 = *((_DWORD *)a1 + 2);
        uint64_t v45 = v44 + v42;
        if (v42 <= 0)
        {
          unsigned int v47 = (char *)a1[5];
          uint64_t v48 = *((_DWORD *)a1 + 2);
          uint64_t v50 = &v47[2 * v44];
          if (v42 != v43) {
            goto LABEL_52;
          }
        }

        else
        {
          uint64_t v46 = v45 - 1;
          unsigned int v47 = (char *)a1[5];
          uint64_t v48 = *((_DWORD *)a1 + 2);
          do
          {
            unsigned int v49 = (v46 + v48) >> 1;
            else {
              uint64_t v46 = v49 - 1;
            }
          }

          while (v48 <= v46);
          uint64_t v50 = &v47[2 * v48];
          if (v42 != v43)
          {
LABEL_52:
            uint64_t v51 = *((unsigned __int16 *)a1 + 19);
            uint64_t v38 = a1[3] + 16 * v51;
            *((_WORD *)a1 + 19) = *(_WORD *)v38;
            if (v45 >= v43)
            {
              uint64_t v52 = &v47[2 * v44];
              uint64_t v53 = v2;
              uint64_t v54 = v48 - v44;
              j__memmove(v47, v52, 2 * (v48 - v44));
              int32x4_t v55 = 2LL * v54;
              uint64_t v50 = (char *)(a1[5] + v55);
              int32x4_t v56 = &v52[v55];
              __int128 v34 = v67;
              int32x4_t v57 = *((_DWORD *)a1 + 3) - v54;
              uint64_t v2 = v53;
              j__memmove(v50 + 2, v56, 2 * v57);
              __int128 v35 = v69;
              *((_DWORD *)a1 + 2) = 0;
            }

            else
            {
              j__memmove(v50 + 2, v50, 2 * (v45 - v48));
              __int128 v35 = v69;
            }

            *(_WORD *)uint64_t v50 = v51;
            ++*((_DWORD *)a1 + 3);
            uint64_t v33 = v66;
            goto LABEL_35;
          }
        }

        uint64_t v37 = *(unsigned __int16 *)&v47[2 * v42 - 2];
        uint64_t v38 = a1[3] + 16 * v37;
        j__memmove(v50 + 2, v50, 2 * (v42 + ~v48));
        __int128 v35 = v69;
        *(_WORD *)uint64_t v50 = v37;
        __int128 v34 = v67;
LABEL_35:
        *(_DWORD *)(v38 + 8) = v41;
        *(void *)uint64_t v38 = v40;
        uint64_t v36 = qword_1000FDCC0;
LABEL_36:
      }
    }

    return 0LL;
  }

  int32x4_t v58 = *((_DWORD *)v2 + 35);
  int32x4_t v59 = *((_DWORD *)v2 + 14);
  if ((int)v58 >= v59)
  {
    uint64_t v63 = 0LL;
    if (v58 == v59) {
      return 0LL;
    }
  }

  else
  {
    int16x8_t v60 = *v2;
    do
    {
      int32x4_t v61 = *(void *)(v60 + 8LL * (v58 >> 8));
      uint64_t v62 = v58;
      *((_DWORD *)v2 + 35) = ++v58;
    }

    while ((int)v58 < v59);
    uint64_t v63 = (_WORD *)(v61 + 8 * v62);
    if (v58 == v59) {
      return 0LL;
    }
  }

  *a2 = *v63;
  a2[1] = v63[1];
  ++*((_DWORD *)v2 + 35);
  return 1LL;
}

uint64_t sub_100011920(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 1100);
  sub_1000C0EF8(*(void *)(a1 + 832));
  sub_1000C0EF8(*(void *)(a1 + 840));
  sub_1000C0EF8(*(void *)(a1 + 880));
  uint64_t v3 = sub_1000C1074(2 * v2);
  *(void *)(a1 + 832) = v3;
  if (!v3) {
    return 1LL;
  }
  uint64_t v4 = sub_1000C1074(v2);
  *(void *)(a1 + 840) = v4;
  if (!v4) {
    return 1LL;
  }
  uint64_t v5 = sub_1000C1074(2 * v2);
  *(void *)(a1 + 880) = v5;
  if (!v5) {
    return 1LL;
  }
  sub_100005ED0(a1, *(_DWORD *)(a1 + 1296));
  *(void *)(a1 + 912) = *(void *)(a1 + 1616);
  if ((int)v2 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(a1 + 848);
    uint64_t v8 = *(void *)(a1 + 840);
    if (v2 >= 0x20)
    {
      uint64_t v6 = v2 & 0xFFFFFFE0;
      uint64_t v9 = (__int128 *)(v7 + 16);
      int v10 = (_OWORD *)(v8 + 16);
      uint64_t v11 = v6;
      do
      {
        __int128 v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *int v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 32LL;
      }

      while (v11);
      if ((v2 & 0x18) == 0)
      {
LABEL_16:
        uint64_t v18 = v2 - v6;
        uint64_t v19 = (_BYTE *)(v8 + v6);
        uint64_t v20 = (char *)(v7 + v6);
        do
        {
          char v21 = *v20++;
          *v19++ = v21;
          --v18;
        }

        while (v18);
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    uint64_t v13 = v6;
    uint64_t v6 = v2 & 0xFFFFFFF8;
    uint64_t v14 = (uint64_t *)(v7 + v13);
    __int128 v15 = (void *)(v8 + v13);
    uint64_t v16 = v13 - v6;
    do
    {
      uint64_t v17 = *v14++;
      *v15++ = v17;
      v16 += 8LL;
    }

    while (v16);
  }

LABEL_18:
  if (!qword_1000FDCC0 || *(uint64_t *)(qword_1000FDCC0 + 216) < 1)
  {
    *(_DWORD *)(a1 + 888) = 0;
    *(void *)(a1 + 864) = 0LL;
    return 1LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 864));
  int v22 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v22 = *(_DWORD *)(qword_1000FDCC0 + 216);
  }
  *(_DWORD *)(a1 + 888) = v22;
  uint64_t v23 = sub_1000C1074(v22 * (int)v2);
  *(void *)(a1 + 864) = v23;
  if (v23)
  {
    char v24 = *(_BYTE **)(a1 + 848);
    uint64_t v25 = *(unsigned int *)(a1 + 1100);
    *(_DWORD *)(a1 + 872) = 0;
    if (*(int *)(a1 + 888) >= 1 && (int)v25 >= 1)
    {
      if (v25 < 8)
      {
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
        do
        {
          uint64_t v28 = *(void *)(a1 + 864);
          *(_BYTE *)(v28 + v26) = *v24;
          if ((_DWORD)v25 != 1)
          {
            *(_BYTE *)(v28 + v26 + 1) = v24[1];
            if ((_DWORD)v25 != 2)
            {
              *(_BYTE *)(v28 + v26 + 2) = v24[2];
              if ((_DWORD)v25 != 3)
              {
                *(_BYTE *)(v28 + v26 + 3) = v24[3];
                if ((_DWORD)v25 != 4)
                {
                  *(_BYTE *)(v28 + v26 + 4) = v24[4];
                  if ((_DWORD)v25 != 5)
                  {
                    uint64_t v29 = v28 + v26;
                    *(_BYTE *)(v29 + 5) = v24[5];
                    if ((_DWORD)v25 != 6) {
                      *(_BYTE *)(v29 + 6) = v24[6];
                    }
                  }
                }
              }
            }
          }

          ++v27;
          v26 += v25;
        }

        while (v27 < *(int *)(a1 + 888));
        return 1LL;
      }

      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v33 = 16LL;
      do
      {
        uint64_t v34 = *(void *)(a1 + 864);
        if ((unint64_t)(v34 + v32 * v25 - (void)v24) >= 0x20)
        {
          if (v25 < 0x20)
          {
            uint64_t v36 = 0LL;
LABEL_47:
            int32x4_t v41 = (uint64_t *)&v24[v36];
            int v42 = (void *)(v34 + v36 + v31);
            uint64_t v43 = v36 - (v25 & 0xFFFFFFF8);
            do
            {
              uint64_t v44 = *v41++;
              *v42++ = v44;
              v43 += 8LL;
            }

            while (v43);
            uint64_t v35 = v25 & 0x7FFFFFF8;
            if ((v25 & 0xFFFFFFF8) == v25) {
              goto LABEL_38;
            }
            goto LABEL_50;
          }

          uint64_t v37 = (_OWORD *)(v34 + v33);
          uint64_t v38 = v25 & 0xFFFFFFE0;
          uint64_t v39 = (__int128 *)(v24 + 16);
          do
          {
            __int128 v40 = *v39;
            *(v37 - 1) = *(v39 - 1);
            *uint64_t v37 = v40;
            v39 += 2;
            v37 += 2;
            v38 -= 32LL;
          }

          while (v38);
          if ((v25 & 0xFFFFFFE0) == v25) {
            goto LABEL_38;
          }
          uint64_t v36 = v25 & 0x7FFFFFE0;
          uint64_t v35 = v25 & 0xFFFFFFE0;
          if ((v25 & 0x18) != 0) {
            goto LABEL_47;
          }
        }

        else
        {
          uint64_t v35 = 0LL;
        }

  if ((_DWORD)v19 == (_DWORD)v18) {
    uint64_t v20 = -1;
  }
  else {
    uint64_t v20 = v19;
  }
  *(void *)(a2 + 160) = 0LL;
  if (v15 < v17 - 1)
  {
LABEL_22:
    *(_DWORD *)(a2 + 72) = sub_1000307F4(*(void *)(a2 + 48));
    *(_DWORD *)(a2 + 44) = v16;
    *(_DWORD *)(a2 + 56) = v20;
    *(_DWORD *)(a2 + 116) = 1;
    *(_WORD *)(a2 + 88) = 0;
    char v21 = v15 == v50 - 2 && *(_BYTE *)(*(void *)(a1 + 296) + v20);
    *(_DWORD *)(a2 + 80) = v21;
    uint64_t result = sub_100030F30(*(void *)(a2 + 48), v14, v15 + 1, &v50);
    *(_WORD *)(a2 + 76) = result;
    *(void *)(a2 + 96) = (a4 & 0x7FE0000000000000LL | ((unint64_t)v14 << 10))
    if (*(_DWORD *)(a1 + 340)) {
      uint64_t result = sub_10003366C(*(void *)(a1 + 256), *(_DWORD *)(a2 + 44), (void *)(a2 + 192), (_DWORD *)(a2 + 200));
    }
    *(_DWORD *)(a2 + 112) = 0;
    if (*(void *)(a2 + 160)) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }

  if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(v19 + 40) + 8LL * (v23 >> 8))
                             + 8LL * v23)
                 + 176LL)
    || !sub_10002BAC8(a3, (uint64_t)a4, v23))
  {
    return memcpy(a5, a4, 8LL * a3);
  }

  uint64_t v34 = v20 + v21 + 1;
  uint64_t v35 = v34;
  uint64_t v36 = (unsigned __int8 *)sub_1000CAF58(v34, v27, v28, v29, v30, v31, v32, v33);
  sub_1000C896C(v36, (char *)a2, v34);
  sub_1000C89F8(v36, "Opt", v34);
  uint64_t v37 = 4LL * (*(_DWORD *)(v19 + 24) + ~*(_DWORD *)(v19 + 28));
  uint64_t v45 = sub_1000CAF58(v37, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v46 = (void *)v45;
  unsigned int v47 = *(_DWORD *)(v19 + 32);
  if (v47 >= 1)
  {
    char v48 = 0;
    unsigned int v49 = 0;
    do
    {
      ++v48;
    }

    while (v47 != v48);
  }

  uint64_t v50 = sub_1000C1074(4LL * (v47 + 1));
  *(void *)(v19 + 144) = v50;
  if (!v50)
  {
    sub_1000CB038(v46, v37);
    sub_1000CB038(v36, v34);
    return memcpy(a5, a4, 8LL * a3);
  }

  int32x4_t v55 = sub_1000349D8(v19, v23, v36, &v94, v51, v52, v53, v54);
  int32x4_t v56 = v36;
  if (!v55)
  {
    sub_1000CB038(v46, v37);
    sub_1000CB038(v36, v35);
    sub_1000C0EF8(*(void *)(v19 + 144));
    *(void *)(v19 + 144) = 0LL;
    return memcpy(a5, a4, 8LL * a3);
  }

  int32x4_t v57 = v55;
  int16x8_t v88 = v37;
  int v89 = v56;
  uint64_t v90 = v35;
  uint64_t v92 = sub_10002B680(v55, 0, 0LL);
  int v87 = 4LL * (int)v92;
  uint64_t v65 = (_DWORD *)sub_1000CAF58(v87, v58, v59, v60, v61, v62, v63, v64);
  uint64_t v91 = sub_10002B730(v57, 0, 0LL);
  uint64_t v86 = 4LL * (int)v91;
  int v73 = (void *)sub_1000CAF58(v86, v66, v67, v68, v69, v70, v71, v72);
  int v93 = v65;
  sub_10002B680(v57, 0, v65);
  sub_10002B730(v57, 0, (uint64_t)v73);
  sub_10003440C();
  int v74 = sub_1000C88E4((unint64_t)aAaaaaaaa) + 11;
  uint64_t v85 = v74;
  uint64_t v82 = (unsigned __int8 *)sub_1000CAF58(v74, v75, v76, v77, v78, v79, v80, v81);
  sub_1000C896C(v82, aAaaaaaaa, v74);
  if (a3 >= 1)
  {
    uint64_t v83 = 0LL;
    do
    {
      while (sub_100025C94(*((unsigned int **)a4 + v83)) == 3)
      {
        uint64_t v84 = sub_1000C88E4((unint64_t)aAaaaaaaa);
        sprintf((char *)&v82[v84], "%d", v83);
        *((void *)a5 + v83) = sub_10002BBC0( *((void *)a4 + v83),  v57,  (uint64_t)v93,  v92,  (uint64_t)v73,  v91,  v19,  v23,  v82);
        if (a3 == ++v83) {
          goto LABEL_33;
        }
      }

      *((void *)a5 + v83) = *((void *)a4 + v83);
      ++v83;
    }

    while (a3 != v83);
  }

  uint64_t v18 = *v11;
  uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v18);
  if ((_DWORD)result == 0x4000) {
    uint64_t result = sub_100015BC0(v9, v18);
  }
  *(_WORD *)(a3 + 2) = result + v17 - v8;
LABEL_25:
  *(_BYTE *)(a3 + 6) = v13;
  *(_BYTE *)(a3 + 7) = *((_BYTE *)a2 + 7);
  return result;
}

    sub_1000BCBC8(v9);
    return v10;
  }

  return 0LL;
}

  sub_1000601F4(a4, a5, __base, v13, v16, (uint64_t)v17, &v31);
  *(_DWORD *)(a1 + 20) = 0;
  if (v13 >= 1)
  {
    uint64_t v28 = v18;
    int v22 = 0;
    while (1)
    {
      LODWORD(v23) = qword_1000FDCC0;
      if (qword_1000FDCC0)
      {
        char v24 = *(_DWORD *)(qword_1000FDCC0 + 3688);
        uint64_t v23 = *(void *)(qword_1000FDCC0 + 3680);
      }

      else
      {
        char v24 = 0;
      }

      if (!sub_100060520( a1,  a4,  a5,  v13 - v22,  &__base[v22],  a6,  v16,  v24,  v23,  (uint64_t)v17,  v19,  v10,  v29,  &v32,  a10)) {
        break;
      }
      v22 += v32;
      if (v22 >= v13)
      {
LABEL_25:
        uint64_t v25 = 1LL;
        goto LABEL_27;
      }
    }

  uint64_t v44 = *(unsigned __int8 *)(v19 + 48LL * v20 + 38);
  if (v109 - 1 <= v44)
  {
    if (v109 == v44)
    {
      uint64_t v45 = *(__int16 *)(v19 + 48LL * v20 + 24);
      uint64_t v46 = *(void *)(a1 + 9240);
      if (*(_DWORD *)v46 <= (int)v45)
      {
LABEL_24:
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v45 = *(__int16 *)(v19 + 48LL * v20 + 2LL * *(int *)(a1 + 568) + 22);
      uint64_t v46 = *(void *)(a1 + 9240);
    }

    ++*(_WORD *)(*(void *)(v46 + 8) + 2 * v45);
    ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
    goto LABEL_24;
  }

  if (v8) {
    return 0xFFFFFFLL;
  }
  else {
    return sub_10008D340(a1[66], (__int16 *)a2, v12, a4, a5, a6, a7, a8);
  }
}

    if (a2[1] < (int)v19)
    {
      uint64_t v17 = *a2;
      *(void *)a3 = v25;
      goto LABEL_54;
    }

    *(void *)a3 = v18;
    uint64_t v31 = *v7;
    if (*(_BYTE *)(v15 + v31) == 2)
    {
      uint64_t v32 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v31);
      uint64_t v33 = *v32;
      char v21 = v32[1] + ~(_DWORD)v33;
      uint64_t v34 = (unsigned __int8 *)(*(void *)(a1 + 56) + v33);
      uint64_t v35 = *v34;
      uint64_t v23 = v34 + 1;
      LODWORD(v31) = v35;
      uint64_t v36 = v19;
      uint64_t v37 = *(unsigned __int8 *)(a5 + v19);
LABEL_36:
      if (a2[3]) {
        uint64_t v50 = v31 > 0x1F;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v17 = v50;
      *a2 = v17;
      a2[1] = v19;
      if (v31 >= 0x20)
      {
        do
        {
          while (1)
          {
LABEL_49:
            while (v21)
            {
              --v21;
              uint64_t v51 = *v23++;
              if (v51 <= 0x1F) {
                goto LABEL_54;
              }
            }

            uint64_t v52 = (unsigned __int8 *)(*(void *)a3)++;
            uint64_t v53 = *v52;
            if (*(_BYTE *)(v15 + v53) != 2) {
              break;
            }
            uint64_t v54 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v53);
            int32x4_t v55 = *v54;
            char v21 = v54[1] + ~(_DWORD)v55;
            int32x4_t v56 = (unsigned __int8 *)(*(void *)(a1 + 56) + v55);
            int32x4_t v57 = *v56;
            uint64_t v23 = v56 + 1;
            if (v57 <= 0x1F) {
              goto LABEL_54;
            }
          }

          char v21 = 0;
        }

        while (v53 > 0x1F);
      }

      goto LABEL_54;
    }

    char v21 = 0;
    uint64_t v36 = v19;
    uint64_t v37 = *(unsigned __int8 *)(a5 + v19);
LABEL_29:
    while (1)
    {
      uint64_t v17 = v31 - v37;
      if ((_DWORD)v31 != v37) {
        break;
      }
      if (v21)
      {
        --v21;
        uint64_t v44 = *v23++;
        LODWORD(v31) = v44;
        uint64_t v37 = *(unsigned __int8 *)(v16 + v36++);
        if (!v37) {
          goto LABEL_35;
        }
      }

      else
      {
        uint64_t v45 = v18 + 1;
        *(void *)a3 = v18 + 1;
        uint64_t v31 = *v18;
        if (*(_BYTE *)(v15 + v31) == 2)
        {
          uint64_t v46 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v31);
          unsigned int v47 = *v46;
          char v21 = v46[1] + ~(_DWORD)v47;
          char v48 = (unsigned __int8 *)(*(void *)(a1 + 56) + v47);
          unsigned int v49 = *v48;
          uint64_t v23 = v48 + 1;
          LODWORD(v31) = v49;
          uint64_t v37 = *(unsigned __int8 *)(v16 + v36++);
          uint64_t v18 = v45;
          if (!v37) {
            goto LABEL_35;
          }
        }

        else
        {
          char v21 = 0;
          uint64_t v37 = *(unsigned __int8 *)(v16 + v36++);
          ++v18;
          if (!v37)
          {
LABEL_35:
            LODWORD(v19) = v36;
            goto LABEL_36;
          }
        }
      }
    }

    *a2 = v17;
    a2[1] = v36;
LABEL_54:
    if (!*(_DWORD *)(a1 + 832)) {
      goto LABEL_4;
    }
    if (v21)
    {
      --v21;
      int32x4_t v59 = *v23++;
      LODWORD(v58) = v59;
      if (v17) {
        goto LABEL_80;
      }
    }

    else
    {
      int16x8_t v60 = (unsigned __int8 *)(*(void *)a3)++;
      int32x4_t v58 = *v60;
      if (*(_BYTE *)(v15 + v58) == 2)
      {
        int32x4_t v61 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v58);
        int32x4_t v58 = *v61;
        char v21 = v61[1] + ~(_DWORD)v58;
        uint64_t v62 = (unsigned __int8 *)(*(void *)(a1 + 56) + v58);
        uint64_t v63 = *v62;
        uint64_t v23 = v62 + 1;
        LODWORD(v58) = v63;
        if (v17) {
          goto LABEL_80;
        }
      }

      else
      {
        char v21 = 0;
        if (v17) {
          goto LABEL_80;
        }
      }
    }

    if (!a2[2])
    {
LABEL_80:
      if ((_DWORD)v58 == 16)
      {
        do
        {
          while (1)
          {
            while (v21)
            {
              --v21;
              uint64_t v79 = *v23++;
              if (v79 <= 0x1F) {
                goto LABEL_4;
              }
            }

            unsigned int v80 = (unsigned __int8 *)(*(void *)a3)++;
            uint64_t v81 = *v80;
            if (*(_BYTE *)(v15 + v81) != 2) {
              break;
            }
            uint64_t v82 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v81);
            uint64_t v83 = *v82;
            char v21 = v82[1] + ~(_DWORD)v83;
            uint64_t v84 = (unsigned __int8 *)(*(void *)(a1 + 56) + v83);
            uint64_t v85 = *v84;
            uint64_t v23 = v84 + 1;
            if (v85 <= 0x1F) {
              goto LABEL_4;
            }
          }

          char v21 = 0;
        }

        while (v81 > 0x1F);
      }

      goto LABEL_4;
    }

    if ((_DWORD)v58 == 16)
    {
      uint64_t v64 = a4;
      do
      {
        if (v21)
        {
          --v21;
          uint64_t v66 = *v23++;
          LODWORD(v65) = v66;
          if (v66 < 0x20) {
            goto LABEL_72;
          }
        }

        else
        {
          uint64_t v68 = (unsigned __int8 *)(*(void *)a3)++;
          uint64_t v65 = *v68;
          if (*(_BYTE *)(v15 + v65) == 2)
          {
            int v69 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v65);
            uint64_t v65 = *v69;
            char v21 = v69[1] + ~(_DWORD)v65;
            uint64_t v70 = (unsigned __int8 *)(*(void *)(a1 + 56) + v65);
            uint64_t v71 = *v70;
            uint64_t v23 = v70 + 1;
            LODWORD(v65) = v71;
            if (v71 < 0x20) {
              goto LABEL_72;
            }
          }

          else
          {
            char v21 = 0;
            if (v65 < 0x20)
            {
LABEL_72:
              uint64_t v17 = 0;
              goto LABEL_4;
            }
          }
        }

        uint64_t v67 = *v64++;
      }

      while ((_DWORD)v65 == v67);
      do
      {
        while (1)
        {
          while (v21)
          {
            --v21;
            int v72 = *v23++;
            if (v72 <= 0x1F) {
              goto LABEL_3;
            }
          }

          int v73 = (unsigned __int8 *)(*(void *)a3)++;
          int v74 = *v73;
          if (*(_BYTE *)(v15 + v74) != 2) {
            break;
          }
          uint64_t v75 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v74);
          int v76 = *v75;
          char v21 = v75[1] + ~(_DWORD)v76;
          BOOL v77 = (unsigned __int8 *)(*(void *)(a1 + 56) + v76);
          int v78 = *v77;
          uint64_t v23 = v77 + 1;
          if (v78 <= 0x1F) {
            goto LABEL_3;
          }
        }

        char v21 = 0;
      }

      while (v74 > 0x1F);
LABEL_3:
      uint64_t v17 = -1;
      goto LABEL_4;
    }

    if (a6 == 16) {
      goto LABEL_3;
    }
    uint64_t v17 = (v58 & a6) != 0 ? 0 : -1;
LABEL_4:
    if (v21)
    {
      *(_BYTE *)(a3 + 20) = *v23;
      *(_DWORD *)(a3 + 16) = v21 - 1;
      *(void *)(a3 + 8) = v23 + 1;
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_6;
    }

    uint64_t v38 = (unsigned __int8 *)(*(void *)a3)++;
    uint64_t v39 = *v38;
    if (*(_BYTE *)(v15 + v39) != 2) {
      break;
    }
    __int128 v40 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v39);
    int32x4_t v41 = *v40;
    int v42 = v40[1] + ~(_DWORD)v41;
    uint64_t v43 = (_BYTE *)(*(void *)(a1 + 56) + v41);
    *(_BYTE *)(a3 + 20) = *v43;
    *(_DWORD *)(a3 + 16) = v42;
    *(void *)(a3 + 8) = v43 + 1;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_94;
    }
LABEL_6:
    sub_10008BD18(a1, a3, 0);
    ++v14;
    uint64_t v7 = *(unsigned __int8 **)a3;
    if (*(void *)a3 >= v6) {
      return 0xFFFFFFFFLL;
    }
  }

  *(_BYTE *)(a3 + 20) = v39;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = v23;
  if (v17 < 0) {
    goto LABEL_6;
  }
LABEL_94:
  if (v17) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v14;
  }
}

    uint64_t v33 = v63;
    a5 = v62;
    if (v63 <= a2) {
      goto LABEL_19;
    }
LABEL_32:
    uint64_t result = 0LL;
    goto LABEL_33;
  }

  if (a17 > a2) {
    goto LABEL_32;
  }
LABEL_19:
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = v33;
  *(void *)(a1 + 16) = a18;
  *(void *)(a1 + 24) = a19;
  *(void *)(a1 + 32) = 0LL;
  uint64_t result = sub_1000C1074(2LL * v33);
  *(void *)(a1 + 48) = result;
  if (!result)
  {
LABEL_33:
    *(_DWORD *)a1 = 3;
    return result;
  }

  *(void *)(a1 + 56) = result + 2LL * v33 - 2;
  *(_WORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = a20;
  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 40) = a5;
  uint64_t v36 = (a2 + 7) >> 3;
  *(_DWORD *)(a1 + 148) = a2;
  *(_DWORD *)(a1 + 152) = v36;
  uint64_t v37 = sub_1000C1074(v33 * v36);
  *(void *)(a1 + 80) = v37;
  if (!v37)
  {
    sub_1000C0EF8(*(void *)(a1 + 48));
    goto LABEL_32;
  }

  *(void *)(a1 + 88) = v37;
  **(_WORD **)(a1 + 48) = 0;
  if (v33 >= 2)
  {
    uint64_t v38 = 2LL;
    do
    {
      *(_WORD *)(*(void *)(a1 + 48) + v38) = 0x4000;
      v38 += 2LL;
    }

    while (2LL * v33 != v38);
  }

  *(void *)(a1 + 140) = (a4 / *(_DWORD *)(a1 + 128));
  if (a21) {
    *a21 = v33;
  }
  return 1LL;
}

  *(void *)(v19 + 8 * v18) = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

          uint64_t v43 = v46;
        }

        while ((int)v46 < v47);
      }

      sub_1000C89F8(v42, "", v32 + 1);
      char v48 = sub_1000C88E4((unint64_t)v42);
      if ((int)v48 >= 1)
      {
        unsigned int v49 = v48;
        uint64_t v50 = 2 - v48;
        uint64_t v51 = 1;
        do
        {
          uint64_t v53 = v49 - 1;
          uint64_t v54 = &v42[(v49 - 1)];
          int32x4_t v55 = *v54;
          if (v55 == 13 || v55 == 10)
          {
            uint64_t v52 = (v48 + 1);
            if ((int)v48 < (int)v32)
            {
              int32x4_t v57 = v48;
            }

            else
            {
              uint64_t v51 = 0;
              int32x4_t v57 = v32;
            }

            j__memmove(v54 + 2, v54 + 1, v57 + v50);
            *uint64_t v54 = 92;
            if (v49 <= v33)
            {
              if (v55 == 13) {
                int32x4_t v58 = 114;
              }
              else {
                int32x4_t v58 = 110;
              }
              v42[v49] = v58;
            }
          }

          else
          {
            uint64_t v52 = v48;
          }

          uint64_t v2 = v162;
          ++v50;
          --v49;
          char v48 = v52;
        }

        while ((unint64_t)(v53 + 1) > 1);
        uint64_t v6 = v157;
        if (!v51) {
          v42[v33] = 0;
        }
      }

      sprintf(v6, "ChoiceText[%d]", v159);
      sub_1000D8FE8(a2, (unsigned __int8 *)v6, (char *)v42);
      int32x4_t v59 = *(void *)(v2 + 5512);
      sub_1000C0BFC(4LL * v167, v60, v61, v62, v63, v64, v65, v66);
      uint64_t v68 = v67;
      sub_1000C0BFC(v167, v69, v70, v71, v72, v73, v74, v75);
      BOOL v77 = v76;
      if (v167 < 1)
      {
        unsigned int v80 = v163;
      }

      else
      {
        int v78 = 0LL;
        uint64_t v79 = 0;
        unsigned int v80 = v163;
        do
        {
          while (1)
          {
            uint64_t v81 = *(_DWORD *)(v163 + 4 * v78);
            if (v81 == -2) {
              break;
            }
            *(_DWORD *)(v68 + 4LL * v79++) = v81;
            if (++v78 >= v167) {
              goto LABEL_51;
            }
          }

          *(_BYTE *)(v76 + v79) = 1;
          ++v78;
        }

        while (v78 < v167);
      }

LABEL_50:
        uint64_t v45 = v25 - v35;
        uint64_t v46 = v34 + v35;
        unsigned int v47 = &v24[v35];
        do
        {
          char v48 = *v47++;
          *(_BYTE *)(v46 + v31) = v48;
          ++v46;
          --v45;
        }

        while (v45);
LABEL_38:
        ++v32;
        v33 += v25;
        v31 += v25;
      }

      while (v32 < *(int *)(a1 + 888));
    }
  }

  return 1LL;
}

      if (!*(_DWORD *)(a1 + 1024)) {
        goto LABEL_101;
      }
      uint64_t v39 = *(_DWORD *)(a1 + 776);
      __int128 v40 = *(_DWORD *)(a1 + 1120);
      int32x4_t v41 = v39 >= -7 ? v39 + 7 : v39 + 14;
      int v42 = *(_DWORD *)(a1 + 752);
      uint64_t v44 = v42 + 8;
      uint64_t v43 = v42 < -8;
      uint64_t v45 = v42 + 15;
      uint64_t v46 = v43 ? v45 : v44;
      if (sub_1000BCE28(v13, *(void **)(a1 + 792), *(_DWORD *)(a1 + 1128) * v39, 4)
        && sub_1000BCE28(v13, *(void **)(a1 + 784), v40 * v39, 1)
        && sub_1000BCE28(v13, *(void **)(a1 + 800), *(_DWORD *)(a1 + 776), 4)
        && sub_1000BCE28(v13, *(void **)(a1 + 808), *(_DWORD *)(a1 + 776), 4)
        && sub_1000BCE28(v13, *(void **)(a1 + 816), *(_DWORD *)(a1 + 776), 2)
        && sub_1000BCE28(v13, *(void **)(a1 + 824), *(_DWORD *)(a1 + 776), 2)
        && sub_1000BCE28(v13, *(void **)(a1 + 760), v46 >> 3, 1)
        && sub_1000BCE28(v13, *(void **)(a1 + 768), v41 >> 3, 1))
      {
LABEL_101:
        if (sub_1000BCCEC(v13, (_DWORD *)(a1 + 1992)) && sub_1000BCD38(v13, (void *)(a1 + 1996)))
        {
          __int128 v15 = sub_1000BCD80(v13, (_BYTE *)(a1 + 292)) != 0;
LABEL_96:
          sub_1000BCBC8(v13);
          return v15;
        }
      }

  uint64_t v43 = v40;
LABEL_51:
  uint64_t v39 = *(_DWORD *)(a1 + 32);
LABEL_53:
  int32x4_t v41 = v43 > v39;
LABEL_32:
  sub_1000BDB48(v23);
  return v41;
}

            int v89 = *v54++;
            int16x8_t v88 = v89;
            if (*(_BYTE *)(v44 + v89) == 2)
            {
              uint64_t v90 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v88);
              uint64_t v91 = *v90;
              int32x4_t v56 = v90[1] + ~(_DWORD)v91;
              int32x4_t v55 = (unsigned __int8 *)(*(void *)(v10 + 88) + v91 + 1);
              if (v57 == 1) {
                goto LABEL_56;
              }
LABEL_28:
              uint64_t v62 = v55;
LABEL_30:
              if (v56)
              {
                uint64_t v64 = v56 - 1;
                int32x4_t v55 = v62 + 1;
                LODWORD(v65) = *v62;
                if (v64) {
                  goto LABEL_32;
                }
                goto LABEL_36;
              }

              int v69 = *v54++;
              uint64_t v65 = v69;
              if (*(_BYTE *)(v44 + v69) == 2)
              {
                uint64_t v70 = *(void *)(v10 + 104);
                uint64_t v71 = *(unsigned __int16 *)(v70 + 2 * v65);
                uint64_t v64 = *(unsigned __int16 *)(v70 + 2 * v65 + 2) + ~(_DWORD)v71;
                uint64_t v62 = (unsigned __int8 *)(*(void *)(v10 + 88) + v71);
                int32x4_t v55 = v62 + 1;
                LODWORD(v65) = *v62;
                if (v64)
                {
LABEL_32:
                  int32x4_t v56 = v64 - 1;
                  uint64_t v66 = v62 + 2;
                  uint64_t v67 = *v55;
                  int32x4_t v55 = v66;
                  uint64_t v68 = v65 | (v67 << 8);
                  uint64_t v62 = v66;
                  if (v68 >= v59) {
                    continue;
                  }
                  goto LABEL_30;
                }

          uint64_t v54 = *(int *)(a1 + 172);
          uint64_t v27 = v25;
          if ((_DWORD)v54)
          {
            int32x4_t v55 = 0;
            while (1)
            {
              while (1)
              {
                int32x4_t v56 = v54 - 1;
                if (v54 - 1 < 0) {
                  int32x4_t v56 = v54;
                }
                int32x4_t v57 = v56 >> 1;
                int32x4_t v58 = v55 + v57;
                int32x4_t v59 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v55 + (int)v57));
                if (v59 <= v139) {
                  break;
                }
                uint64_t v54 = (int)v57;
                if (!(_DWORD)v57) {
                  goto LABEL_58;
                }
              }

              if (v59 == v139) {
                break;
              }
              v54 -= (int)v57 + 1;
              int32x4_t v55 = v58 + 1;
              if (!v54)
              {
LABEL_58:
                uint64_t v27 = v25;
                goto LABEL_62;
              }
            }

            uint64_t v27 = v25;
            if (v58 != -1)
            {
              uint64_t v53 = (_WORD *)(*(void *)(a1 + 192) + 2LL * v58);
              goto LABEL_61;
            }
          }
        }

  int32x4_t v59 = 2LL * ((int)v22 + 1);
  int16x8_t v60 = (_WORD *)sub_1000CAF58(v59, v13, v14, v15, v16, v17, v18, v19);
  int32x4_t v61 = v60;
  *int16x8_t v60 = 0;
  if ((int)v22 < 1)
  {
    if (!*(void *)(a1 + 408)) {
      goto LABEL_80;
    }
    goto LABEL_73;
  }

  uint64_t v62 = a5;
  uint64_t v63 = v22;
  uint64_t v64 = v22;
  uint64_t v65 = v60;
  uint64_t v66 = a4;
  do
  {
    uint64_t v67 = *v66++;
    *v65++ = *sub_10007B020(*(void *)(a1 + 168), v67);
    --v64;
  }

  while (v64);
  *((_WORD *)v61 + v22) = 0;
  a5 = v62;
  a3 = v92;
  if (*(void *)(a1 + 408) && v22 < 0x32)
  {
LABEL_73:
LABEL_80:
    *a5 = v22;
    sub_1000CB038(v61, v59);
    return 0LL;
  }

  uint64_t v68 = a4;
  while (1)
  {
    int v69 = *v68++;
    if (!--v63) {
      goto LABEL_80;
    }
  }

                uint64_t v9 = 0;
                int v42 = v93;
                if (v17) {
                  goto LABEL_70;
                }
LABEL_72:
                if (v41 < v92)
                {
                  ++v41;
                  v40 += v32;
                  if (!v9) {
                    continue;
                  }
                }

                goto LABEL_78;
              }

              uint64_t v50 = (os_log_s *)VSGetLogDefault(v43);
              uint64_t v32 = __count;
              if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                goto LABEL_50;
              }
              *(_DWORD *)usedBufLeunsigned __int16 n = 136315138;
              *(void *)&usedBufLen[4] = "_VSElvisConfigureForModel";
              uint64_t v51 = v50;
              uint64_t v52 = "#Pronunciation %s: no pronunciation for last entry - continuing...\n";
              uint64_t v53 = 12;
              goto LABEL_76;
            }

            uint64_t v9 = 0;
LABEL_78:
            uint64_t v19 = v9 == 0;
            if (++idx >= v32) {
              break;
            }
            ++v83;
            uint64_t v11 = v81;
            uint64_t v33 = v89;
            if (v9)
            {
              LODWORD(__count) = v90;
              uint64_t v6 = v78;
              uint64_t v5 = v79;
              goto LABEL_89;
            }
          }

          uint64_t v33 = v89;
          LODWORD(__count) = v90;
          uint64_t v6 = v78;
          uint64_t v5 = v79;
          uint64_t v11 = v81;
LABEL_89:
          if (v17) {
            NSPopAutoreleasePool(v17);
          }
          if (v19)
          {
            uint64_t v64 = *(const void **)(v93 + 568);
            uint64_t v65 = v64 ? (const __CFArray *)CFRetain(v64) : 0LL;
            uint64_t v66 = *v4 ? **v4 : 0LL;
            uint64_t v9 = sub_1000DE0C0(v66, v6, *(void *)(v93 + 544), v65, __count, v86, v96, cf, theDict) == -1;
            if (v65) {
              CFRelease(v65);
            }
          }

          if (v84 >= 1)
          {
            uint64_t v67 = 0LL;
            while (!v9)
            {
              int v69 = (unsigned __int8 *)v33[v67];
              if (v69) {
                goto LABEL_109;
              }
LABEL_110:
              if (v95)
              {
                if ((uint64_t)v95[v67] >= 1)
                {
                  uint64_t v70 = CFArrayGetValueAtIndex(v11, v67);
                  uint64_t v71 = (const __CFArray *)CFDictionaryGetValue(theDict, v70);
                  if (v71)
                  {
                    int v72 = v71;
                    int v73 = CFArrayGetCount(v71);
                    if (v73 >= 1)
                    {
                      int v74 = v73;
                      for (uint64_t i = 0LL; i != v74; ++i)
                      {
                        int v76 = (unsigned __int8 *)CFArrayGetValueAtIndex(v72, i);
                        if (v9)
                        {
                          if (*v4) {
                            BOOL v77 = **v4;
                          }
                          else {
                            BOOL v77 = 0LL;
                          }
                          sub_100044F80(v77, v76, &v98);
                        }

                        if (v76) {
                          free(v76);
                        }
                      }
                    }
                  }
                }
              }

              ++v67;
              uint64_t v33 = v89;
              if (v67 == v84) {
                goto LABEL_124;
              }
            }

            if (*v4) {
              uint64_t v68 = **v4;
            }
            else {
              uint64_t v68 = 0LL;
            }
            int v69 = (unsigned __int8 *)v33[v67];
            sub_100044F80(v68, v69, &v98);
            if (!v69) {
              goto LABEL_110;
            }
LABEL_109:
            free(v69);
            goto LABEL_110;
          }

double sub_100011C6C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1964))
  {
    sub_1000C0EF8(*(void *)(a1 + 832));
    sub_1000C0EF8(*(void *)(a1 + 840));
    sub_1000C0EF8(*(void *)(a1 + 880));
    sub_1000C0EF8(*(void *)(a1 + 856));
    sub_1000C0EF8(*(void *)(a1 + 904));
    sub_1000C0EF8(*(void *)(a1 + 864));
    *(void *)(a1 + 880) = 0LL;
    *(void *)(a1 + 904) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 832) = 0u;
    *(void *)(a1 + 864) = 0LL;
    *(void *)(a1 + 856) = 0LL;
  }

  return result;
}

uint64_t sub_100011CD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1964)) {
    return (2 * *(_DWORD *)(a1 + 1100));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100011CF4(uint64_t a1, char *__dst)
{
  uint64_t result = 0LL;
  if (__dst)
  {
    if (*(_DWORD *)(a1 + 1964))
    {
      size_t v5 = *(int *)(a1 + 1100);
      memcpy(__dst, *(const void **)(a1 + 840), v5);
      memcpy(&__dst[v5], *(const void **)(a1 + 848), v5);
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100011D54(uint64_t a1, int a2, _WORD *a3)
{
  if (*(__int16 *)(a1 + 1600) == a2)
  {
    if (*(_DWORD *)(a1 + 1612))
    {
      uint64_t v3 = *(unsigned __int16 *)(a1 + 1388);
LABEL_5:
      uint64_t result = 1LL;
      *a3 = v3;
      return result;
    }

    int v5 = *(_DWORD *)(a1 + 1076);
    if (v5 >= 1)
    {
      unsigned __int16 v6 = 0;
      LOWORD(v3) = -1;
      __int16 v7 = 0x4000;
      do
      {
        if (*(__int16 *)(*(void *)(a1 + 1792) + 2LL * v6) < v7 && v6 != *(unsigned __int16 *)(a1 + 1960))
        {
          LOWORD(v3) = v6;
          __int16 v7 = *(_WORD *)(*(void *)(a1 + 1792) + 2LL * v6);
        }

        ++v6;
      }

      while (v5 > v6);
      goto LABEL_5;
    }

    uint64_t result = 1LL;
    *a3 = -1;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = -1;
  }

  return result;
}

uint64_t sub_100011E04(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1004))
  {
    BOOL v2 = !*(_DWORD *)(a1 + 656) || qword_1000FDCC0 == 0;
    if (!v2 && *(_DWORD *)(qword_1000FDCC0 + 708)) {
      return sub_10001DD84(a1);
    }
  }

  int v4 = *(_DWORD *)(a1 + 1072);
  if (v4 < 1)
  {
    return 0x4000;
  }

  else
  {
    unsigned __int16 v5 = 0;
    __int16 v6 = 0x4000;
    do
    {
      int v7 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2LL * v5);
      if (v7 == 0x4000)
      {
        LOWORD(v7) = sub_100015BC0(a1, v5);
        int v4 = *(_DWORD *)(a1 + 1072);
      }

      ++v5;
    }

    while (v4 > v5);
  }

  return v6;
}

uint64_t sub_100011ECC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(__int16 *)(a1 + 1974);
  if (v8 >= 0x4000)
  {
    uint64_t v10 = *(unsigned __int16 *)(a1 + 1388);
    if (*(_WORD *)(*(void *)(a1 + 1792) + 2 * v10) == 0x4000) {
      sub_100015BC0(a1, v10);
    }
    if (!qword_1000FDCC0) {
      goto LABEL_81;
    }
    if (*(_DWORD *)(qword_1000FDCC0 + 344))
    {
      if (!*(_DWORD *)(qword_1000FDCC0 + 348))
      {
        if (*(_DWORD *)(a1 + 1004) && *(_DWORD *)(a1 + 656) && *(_DWORD *)(qword_1000FDCC0 + 708))
        {
          sub_10001DD84(a1);
        }

        else
        {
          int v45 = *(_DWORD *)(a1 + 1072);
          if (v45 >= 1)
          {
            for (unsigned __int16 i = 0; i < v45; ++i)
            {
              if (*(_WORD *)(*(void *)(a1 + 1792) + 2LL * i) == 0x4000)
              {
                sub_100015BC0(a1, i);
                int v45 = *(_DWORD *)(a1 + 1072);
              }
            }
          }
        }
      }

      uint64_t v11 = *(unsigned int *)(a1 + 1076);
      double v12 = 0.0;
      double v13 = 0.0;
      double v14 = 0.0;
      __int128 v15 = *(int16x8_t **)(a1 + 1792);
      if (v11 >= 0x10)
      {
        int32x4_t v24 = 0uLL;
        uint64_t v16 = v11 & 0xFFFFFFF0;
        v25.i64[0] = 0x4000400040004000LL;
        v25.i64[1] = 0x4000400040004000LL;
        uint64_t v26 = v15 + 1;
        v27.i64[0] = 0x100000001LL;
        v27.i64[1] = 0x100000001LL;
        uint64_t v28 = v16;
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = 0uLL;
        int32x4_t v32 = 0uLL;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        do
        {
          int16x8_t v36 = v26[-1];
          int8x16_t v37 = (int8x16_t)vcgtq_s16(v25, v36);
          int8x16_t v38 = (int8x16_t)vcgtq_s16(v25, *v26);
          int32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v37), v27));
          int32x4_t v32 = vaddq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8), v27));
          int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v38), v27));
          int32x4_t v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v38.i8), v27));
          int16x8_t v39 = (int16x8_t)vandq_s8((int8x16_t)v36, v37);
          int16x8_t v40 = (int16x8_t)vandq_s8(*(int8x16_t *)v26, v38);
          int32x4_t v29 = vaddw_high_s16(v29, v39);
          int32x4_t v24 = vaddw_s16(v24, *(int16x4_t *)v39.i8);
          int32x4_t v31 = vaddw_high_s16(v31, v40);
          int32x4_t v30 = vaddw_s16(v30, *(int16x4_t *)v40.i8);
          v26 += 2;
          v28 -= 16LL;
        }

        while (v28);
        int v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v34, v32), vaddq_s32(v35, v33)));
        int v17 = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v24), vaddq_s32(v31, v29)));
        if (v16 == v11)
        {
LABEL_31:
          double v14 = (double)v17;
          double v13 = (double)v18;
LABEL_32:
          if (qword_1000FDCC0) {
            double v12 = *(double *)(qword_1000FDCC0 + 328);
          }
          int v23 = (int)(v14 * v12 / v13);
LABEL_77:
          int v62 = *(__int16 *)(a1 + 1972) + (__int16)v23;
          int v8 = v62 & ~(v62 >> 31);
          *(_WORD *)(a1 + 1974) = v8;
          return (__int16)v8;
        }
      }

      else
      {
        uint64_t v16 = 0LL;
        int v17 = 0;
        int v18 = 0;
      }

      uint64_t v41 = v11 - v16;
      int v42 = &v15->i16[v16];
      do
      {
        int v44 = *v42++;
        int v43 = v44;
        if (v44 >= 0x4000) {
          int v43 = 0;
        }
        else {
          ++v18;
        }
        v17 += v43;
        --v41;
      }

      while (v41);
      goto LABEL_31;
    }

    if (!*(_DWORD *)(qword_1000FDCC0 + 712))
    {
LABEL_81:
      if (*(_DWORD *)(a1 + 1856))
      {
        uint64_t v22 = *(unsigned __int16 *)(a1 + 1960);
        int v23 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v22);
        if (v23 == 0x4000) {
          LOWORD(v23) = sub_100015BC0(a1, v22);
        }
      }

      else
      {
        LOWORD(v23) = 0x3FFF;
      }

      goto LABEL_77;
    }

    sub_1000C0BFC(0x194uLL, v10, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = v19;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 348))
    {
      if (*(_DWORD *)(a1 + 1612))
      {
        __int16 v21 = *(_WORD *)(a1 + 1608);
        goto LABEL_60;
      }

      int v50 = *(_DWORD *)(a1 + 1076);
      if (v50 >= 1)
      {
        unsigned __int16 v51 = 0;
        __int16 v21 = 0x4000;
        do
        {
          if (*(__int16 *)(*(void *)(a1 + 1792) + 2LL * v51) < v21
            && *(unsigned __int16 *)(a1 + 1960) != v51
            && *(unsigned __int16 *)(a1 + 1388) != v51)
          {
            __int16 v21 = *(_WORD *)(*(void *)(a1 + 1792) + 2LL * v51);
          }

          ++v51;
        }

        while (v50 > v51);
        goto LABEL_60;
      }
    }

    else
    {
      if (*(_DWORD *)(a1 + 1004) && qword_1000FDCC0 && *(_DWORD *)(a1 + 656) && *(_DWORD *)(qword_1000FDCC0 + 708))
      {
        __int16 v21 = sub_10001DD84(a1);
        goto LABEL_60;
      }

      int v47 = *(_DWORD *)(a1 + 1072);
      if (v47 >= 1)
      {
        unsigned __int16 v48 = 0;
        __int16 v21 = 0x4000;
        do
        {
          int v49 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2LL * v48);
          if (v49 == 0x4000)
          {
            LOWORD(v49) = sub_100015BC0(a1, v48);
            int v47 = *(_DWORD *)(a1 + 1072);
          }

          ++v48;
        }

        while (v47 > v48);
LABEL_60:
        int v52 = *(_DWORD *)(a1 + 1076);
        if (v52 <= 1)
        {
          int v54 = 1;
        }

        else
        {
          uint64_t v53 = 1LL;
          int v54 = 1;
          do
          {
            int v55 = *(__int16 *)(*(void *)(a1 + 1792) + 2 * v53);
            if (v55 < 0x4000)
            {
              int v56 = v55 - v21;
              if (v56 >= 100) {
                int v56 = 100;
              }
              ++*(_DWORD *)(v20 + 4LL * v56);
              ++v54;
              int v52 = *(_DWORD *)(a1 + 1076);
            }

            ++v53;
          }

          while (v53 < v52);
        }

        int v57 = v54;
        if (qword_1000FDCC0) {
          uint64_t v58 = *(void *)(qword_1000FDCC0 + 336);
        }
        else {
          LODWORD(v58) = 0;
        }
        uint64_t v59 = 0LL;
        int v60 = 0;
        int v61 = (int)v58 * v57 / 100;
        while (1)
        {
          v60 += *(_DWORD *)(v20 + 4 * v59);
          if (v60 >= v61) {
            break;
          }
          if (++v59 == 100) {
            goto LABEL_76;
          }
        }

        *(_WORD *)(a1 + 1974) = v21 + v59;
LABEL_76:
        sub_1000C0EF8(v20);
        LOWORD(v23) = *(_WORD *)(a1 + 1974);
        goto LABEL_77;
      }
    }

    __int16 v21 = 0x4000;
    goto LABEL_60;
  }

  return (__int16)v8;
}

uint64_t sub_100012328(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1856))
  {
    uint64_t v1 = *(unsigned __int16 *)(a1 + 1960);
    int v2 = *(unsigned __int16 *)(*(void *)(a1 + 1792) + 2 * v1);
    if (v2 == 0x4000) {
      return sub_100015BC0(a1, v1);
    }
  }

  else
  {
    LOWORD(v2) = 0x3FFF;
  }

  return (__int16)v2;
}

uint64_t sub_100012354(uint64_t a1, unsigned int a2)
{
  else {
    return (*(uint64_t (**)(void))(a1 + 1704))();
  }
}

uint64_t sub_100012374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1720))();
}

uint64_t sub_10001237C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1072) <= (int)a2)
  {
    int v5 = 1;
  }

  else if (*(_DWORD *)(a1 + 1176))
  {
    int v4 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v5 = v4[1] - *v4;
    if (v5 < 1) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v9 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    int v5 = v9[1] - *v9;
    if (v5 < 1)
    {
LABEL_12:
      __int16 v7 = 0x4000;
      goto LABEL_13;
    }
  }

  uint64_t v6 = 0LL;
  __int16 v7 = 0x4000;
  do
  {
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 1720))(a1, a2, v6);
    if (v8 < v7) {
      __int16 v7 = v8;
    }
    uint64_t v6 = (v6 + 1);
  }

  while (v5 != (_DWORD)v6);
LABEL_13:
  unsigned int v10 = *(__int16 *)(a1 + 1136);
  else {
    return v7;
  }
}

uint64_t sub_10001244C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_100004698(a1, a2, a3);
  uint64_t v8 = sub_100005528(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_10000573C(a1, a2, a3);
  uint64_t v10 = *(unsigned int *)(a1 + 1104);
  if ((int)v10 >= 1)
  {
    if (v10 < 8)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }

    if (v10 >= 0x20)
    {
      uint64_t v12 = v10 & 0x7FFFFFE0;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = (int32x4_t)v9;
      uint64_t v15 = v10 - 1;
      uint64_t v16 = v10 & 0xFFFFFFE0;
      int32x4_t v17 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v7 + v15;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v6 + v15;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v8 + 2LL * v15;
        int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
        uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
        int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
        uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
        int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
        uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
        int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
        uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vmovl_high_u16(v41));
        int32x4_t v17 = vmlaq_s32( v17,  vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8));
        int32x4_t v13 = vmlaq_s32(v13, vmull_high_s16(v33, v33), (int32x4_t)vmovl_high_u16(v39));
        int32x4_t v14 = vmlaq_s32( v14,  vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vmovl_high_u16(v45));
        int32x4_t v21 = vmlaq_s32( v21,  vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vmovl_high_u16(v43));
        int32x4_t v19 = vmlaq_s32( v19,  vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8));
        v15 -= 32LL;
        v16 -= 32LL;
      }

      while (v16);
      unsigned int v9 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
      if (v12 == v10) {
      if ((v10 & 0x18) == 0)
      }
      {
        uint64_t v11 = v10 & 0x1F;
LABEL_15:
        unint64_t v53 = v11 + 1;
        do
        {
          uint64_t v54 = (v53 - 2);
          v9 += (*(unsigned __int8 *)(v7 + v54) - *(unsigned __int8 *)(v6 + v54))
          --v53;
        }

        while (v53 > 1);
      }
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v11 = v10 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v9;
    uint64_t v48 = ~v12 + v10;
    uint64_t v49 = v12 - (v10 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v8 - 14 + 2LL * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v52));
      int32x4_t v47 = vmlaq_s32( v47,  vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
      v48 -= 8LL;
      v49 += 8LL;
    }

    while (v49);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v10 & 0x7FFFFFF8) != v10) {
      goto LABEL_15;
    }
  }

uint64_t sub_100012720(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_100004698(a1, a2, a3);
  uint64_t v8 = sub_1000054A4(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_10000573C(a1, a2, a3);
  uint64_t v11 = *(unsigned int *)(a1 + 1104);
  if ((int)v11 >= 1)
  {
    if (v11 < 8)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }

    if (v11 >= 0x20)
    {
      uint64_t v13 = v11 & 0x7FFFFFE0;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = (int32x4_t)v9;
      uint64_t v16 = v11 - 1;
      uint64_t v17 = v11 & 0xFFFFFFE0;
      int32x4_t v10 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v7 + v16;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v6 + v16;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v8 + v16;
        int8x16_t v38 = *(int8x16_t *)(v37 - 15);
        int8x16_t v39 = *(int8x16_t *)(v37 - 31);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F0370));
        int32x4_t v10 = vmlaq_s32( v10,  vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8),  (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F0380));
        int32x4_t v14 = vmlaq_s32(v14, vmull_high_s16(v33, v33), (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F0390));
        int32x4_t v15 = vmlaq_s32( v15,  vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8),  (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1000F03A0));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F0370));
        int32x4_t v21 = vmlaq_s32( v21,  vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8),  (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F0380));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F0390));
        int32x4_t v19 = vmlaq_s32( v19,  vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8),  (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1000F03A0));
        v16 -= 32LL;
        v17 -= 32LL;
      }

      while (v17);
      unsigned int v9 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v15), vaddq_s32(v21, v10)),  vaddq_s32(vaddq_s32(v20, v14), vaddq_s32(v22, v18))));
      if (v13 == v11) {
      if ((v11 & 0x18) == 0)
      }
      {
        uint64_t v12 = v11 & 0x1F;
LABEL_15:
        unint64_t v46 = v12 + 1;
        do
        {
          uint64_t v47 = (v46 - 2);
          v9 += (*(unsigned __int8 *)(v7 + v47) - *(unsigned __int8 *)(v6 + v47))
          --v46;
        }

        while (v46 > 1);
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v12 = v11 & 7;
    int32x4_t v40 = 0uLL;
    int32x4_t v41 = (int32x4_t)v9;
    uint64_t v42 = ~v13 + v11;
    uint64_t v43 = v13 - (v11 & 0xFFFFFFF8);
    do
    {
      int16x8_t v44 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v42)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v42)));
      *(int8x8_t *)v10.i8 = vrev64_s8(*(int8x8_t *)(v8 - 7 + v42));
      int32x4_t v45 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1000F0320);
      int32x4_t v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1000F0330);
      int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v44, v44), v45);
      int32x4_t v41 = vmlaq_s32(v41, vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), v10);
      v42 -= 8LL;
      v43 += 8LL;
    }

    while (v43);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v41, v40));
    if ((v11 & 0x7FFFFFF8) != v11) {
      goto LABEL_15;
    }
  }

uint64_t sub_100012A04(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1296);
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v7 = *v6;
      int v8 = v6[1];
    }

    else
    {
      uint64_t v11 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v7 = *v11;
      int v8 = v11[1];
    }

    int v10 = v8 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v12 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v9 = *(void *)(a1 + 96) + v12;
      if (v2 == 3) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 16) + v12;
      if (v2 == 3)
      {
LABEL_20:
        int v13 = v10 - 1;
        if (v10 >= 1) {
          goto LABEL_21;
        }
LABEL_65:
        int v23 = 0x40000000;
      }
    }
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
    int v10 = 1;
    if (v2 == 3) {
      goto LABEL_20;
    }
  }

  if (v2 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }

  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v13 = v10 - 1;
    if (v10 >= 1) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }

  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v13 = v10 - 1;
  if (v10 < 1) {
    goto LABEL_65;
  }
LABEL_21:
  uint64_t v14 = *(unsigned int *)(a1 + 1104);
  BOOL v15 = v2 == 4;
  BOOL v16 = v2 == 4;
  uint64_t v17 = (int *)(*(void *)(a1 + 1240) + 4LL * (int)a2);
  uint64_t v18 = *(int *)(a1 + 1100);
  if (v15) {
    uint64_t v19 = *(int *)(a1 + 1100);
  }
  else {
    uint64_t v19 = 0LL;
  }
  if ((int)v14 <= 0)
  {
    int v23 = 0x40000000;
    do
    {
      if (*v17 < v23) {
        int v23 = *v17;
      }
      v17 += v16;
      --v10;
    }

    while (v10);
  }

  else
  {
    uint64_t v20 = *(void *)(a1 + 1544);
    uint64_t v21 = *(void *)(a1 + 1208) + 2LL * (int)(*(_DWORD *)(a1 + 1124) * a2);
    if (v14 <= 7)
    {
      uint64_t v22 = v14 + 1;
      int v23 = 0x40000000;
      do
      {
        int v24 = *v17;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = (v25 - 2);
          v24 += (*(unsigned __int8 *)(v9 + v26) - *(unsigned __int8 *)(v20 + v26))
          --v25;
        }

        while (v25 > 1);
        if (v24 < v23) {
          int v23 = v24;
        }
        v9 += v18;
        v17 += v16;
        v21 += 2 * v19;
        BOOL v27 = v13-- <= 0;
      }

      while (!v27);
    }

    if (!((unint64_t)(v14 - 1) >> 32))
    {
      int v23 = 0x40000000;
      while (1)
      {
        int v28 = *v17;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = (int32x4_t)*v17;
        uint64_t v32 = v14 & 0xFFFFFFE0;
        uint64_t v33 = v14 - 1;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        do
        {
          uint64_t v40 = v9 + v33;
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v40 - 15));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          int8x16_t v43 = vrev64q_s8(*(int8x16_t *)(v40 - 31));
          uint8x16_t v44 = (uint8x16_t)vextq_s8(v43, v43, 8uLL);
          uint64_t v45 = v20 + v33;
          int8x16_t v46 = vrev64q_s8(*(int8x16_t *)(v45 - 15));
          uint8x16_t v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
          int8x16_t v48 = vrev64q_s8(*(int8x16_t *)(v45 - 31));
          uint8x16_t v49 = (uint8x16_t)vextq_s8(v48, v48, 8uLL);
          int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8);
          int16x8_t v51 = (int16x8_t)vsubl_high_u8(v42, v47);
          int16x8_t v52 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v49.i8);
          int16x8_t v53 = (int16x8_t)vsubl_high_u8(v44, v49);
          uint64_t v54 = v21 + 2LL * v33;
          int8x16_t v55 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 14));
          uint16x8_t v56 = (uint16x8_t)vextq_s8(v55, v55, 8uLL);
          int8x16_t v57 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 30));
          uint16x8_t v58 = (uint16x8_t)vextq_s8(v57, v57, 8uLL);
          int8x16_t v59 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 46));
          uint16x8_t v60 = (uint16x8_t)vextq_s8(v59, v59, 8uLL);
          int8x16_t v61 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v54 - 62));
          uint16x8_t v62 = (uint16x8_t)vextq_s8(v61, v61, 8uLL);
          int32x4_t v35 = vmlaq_s32(v35, vmull_high_s16(v51, v51), (int32x4_t)vmovl_high_u16(v58));
          int32x4_t v34 = vmlaq_s32( v34,  vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8));
          int32x4_t v30 = vmlaq_s32(v30, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v56));
          int32x4_t v31 = vmlaq_s32( v31,  vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8));
          int32x4_t v39 = vmlaq_s32(v39, vmull_high_s16(v53, v53), (int32x4_t)vmovl_high_u16(v62));
          int32x4_t v38 = vmlaq_s32( v38,  vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
          int32x4_t v37 = vmlaq_s32(v37, vmull_high_s16(v52, v52), (int32x4_t)vmovl_high_u16(v60));
          int32x4_t v36 = vmlaq_s32( v36,  vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8));
          v33 -= 32LL;
          v32 -= 32LL;
        }

        while (v32);
        int v28 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v36, v31), vaddq_s32(v38, v34)),  vaddq_s32(vaddq_s32(v37, v30), vaddq_s32(v39, v35))));
        if ((v14 & 0x7FFFFFE0) == v14) {
          goto LABEL_41;
        }
        uint64_t v29 = v14 & 0x7FFFFFE0;
        uint64_t v63 = v14 & 0x1F;
        if ((v14 & 0x18) != 0) {
          goto LABEL_50;
        }
LABEL_53:
        uint64_t v71 = v63 + 1;
        do
        {
          uint64_t v72 = (v71 - 2);
          v28 += (*(unsigned __int8 *)(v9 + v72) - *(unsigned __int8 *)(v20 + v72))
          --v71;
        }

        while (v71 > 1);
LABEL_41:
        if (v28 < v23) {
          int v23 = v28;
        }
        v9 += v18;
        v17 += v16;
        v21 += 2 * v19;
        BOOL v27 = v13-- <= 0;
        if (v27) {
      }
        }

      uint64_t v29 = 0LL;
LABEL_50:
      int32x4_t v64 = 0uLL;
      int32x4_t v65 = (int32x4_t)v28;
      uint64_t v66 = v14 - 1 - v29;
      uint64_t v67 = v29 - (v14 & 0xFFFFFFF8);
      do
      {
        int16x8_t v68 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v9 - 7 + v66)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v20 - 7 + v66)));
        int8x16_t v69 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v21 - 14 + 2LL * v66));
        uint16x8_t v70 = (uint16x8_t)vextq_s8(v69, v69, 8uLL);
        int32x4_t v64 = vmlaq_s32(v64, vmull_high_s16(v68, v68), (int32x4_t)vmovl_high_u16(v70));
        int32x4_t v65 = vmlaq_s32( v65,  vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v68.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
        v66 -= 8LL;
        v67 += 8LL;
      }

      while (v67);
      int v28 = vaddvq_s32(vaddq_s32(v65, v64));
      uint64_t v63 = v14 & 7;
      if ((v14 & 0xFFFFFFF8) == v14) {
        goto LABEL_41;
      }
      goto LABEL_53;
    }

    uint64_t v73 = v14 + 1;
    int v23 = 0x40000000;
    do
    {
      int v74 = *v17;
      uint64_t v75 = v73;
      do
      {
        uint64_t v76 = (v75 - 2);
        v74 += (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v20 + v76))
        --v75;
      }

      while (v75 > 1);
      if (v74 < v23) {
        int v23 = v74;
      }
      v9 += v18;
      v17 += v16;
      v21 += 2 * v19;
      BOOL v27 = v13-- <= 0;
    }

    while (!v27);
  }

uint64_t sub_100012EDC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v7 = *v6;
      int v8 = v6[1];
    }

    else
    {
      uint64_t v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v7 = *v12;
      int v8 = v12[1];
    }

    int v10 = v8 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v13 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v9 = *(void *)(a1 + 96) + v13;
      int v11 = *(_DWORD *)(a1 + 1296);
      if (v11 == 3) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 16) + v13;
      int v11 = *(_DWORD *)(a1 + 1296);
      if (v11 == 3)
      {
LABEL_20:
        int v14 = v10 - 1;
        if (v10 >= 1) {
          goto LABEL_21;
        }
LABEL_67:
        unsigned int v22 = 0x40000000;
      }
    }
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v5;
    int v10 = 1;
    int v11 = *(_DWORD *)(a1 + 1296);
    if (v11 == 3) {
      goto LABEL_20;
    }
  }

  if (v11 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }

  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v14 = v10 - 1;
    if (v10 >= 1) {
      goto LABEL_21;
    }
    goto LABEL_67;
  }

  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v14 = v10 - 1;
  if (v10 < 1) {
    goto LABEL_67;
  }
LABEL_21:
  uint64_t v15 = *(unsigned int *)(a1 + 1104);
  uint64_t v16 = *(void *)(a1 + 1240);
  uint64_t v17 = (int *)(v16 + 4LL * (int)a2);
  if ((int)v15 <= 0)
  {
    if (v10 >= 8)
    {
      uint64_t v64 = v10;
      uint64_t v65 = v10 & 0xFFFFFFF8;
      v14 -= v65;
      v17 += v65;
      uint64_t v66 = (int32x4_t *)(v16 + 4LL * (int)a2 + 16);
      v67.i64[0] = 0x4000000040000000LL;
      v67.i64[1] = 0x4000000040000000LL;
      uint64_t v68 = v65;
      v69.i64[0] = 0x4000000040000000LL;
      v69.i64[1] = 0x4000000040000000LL;
      do
      {
        int32x4_t v67 = vminq_s32(v66[-1], v67);
        int32x4_t v69 = vminq_s32(*v66, v69);
        v66 += 2;
        v68 -= 8LL;
      }

      while (v68);
      unsigned int v22 = vminvq_s32(vminq_s32(v67, v69));
      if (v65 == v64) {
    }
      }

    else
    {
      unsigned int v22 = 0x40000000;
    }

    int v70 = v14 + 1;
    do
    {
      signed int v72 = *v17++;
      unsigned int v71 = v72;
      --v70;
    }

    while (v70);
  }

  else
  {
    uint64_t v18 = *(void *)(a1 + 1544);
    uint64_t v19 = *(int *)(a1 + 1100);
    uint64_t v20 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
    if (v15 <= 7)
    {
      uint64_t v21 = v15 + 1;
      unsigned int v22 = 0x40000000;
      do
      {
        signed int v23 = *v17;
        uint64_t v24 = v21;
        do
        {
          uint64_t v25 = (v24 - 2);
          v23 += (*(unsigned __int8 *)(v9 + v25) - *(unsigned __int8 *)(v18 + v25))
          --v24;
        }

        while (v24 > 1);
        v9 += v19;
        v20 += v19;
        ++v17;
        BOOL v26 = v14-- <= 0;
      }

      while (!v26);
    }

    if (!((unint64_t)(v15 - 1) >> 32))
    {
      unsigned int v22 = 0x40000000;
      while (1)
      {
        int v27 = *v17;
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = (int32x4_t)*v17;
        uint64_t v31 = v15 & 0xFFFFFFE0;
        uint64_t v32 = v15 - 1;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v2 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        do
        {
          uint64_t v38 = v9 + v32;
          int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
          uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          uint64_t v43 = v18 + v32;
          int8x16_t v44 = vrev64q_s8(*(int8x16_t *)(v43 - 15));
          uint8x16_t v45 = (uint8x16_t)vextq_s8(v44, v44, 8uLL);
          int8x16_t v46 = vrev64q_s8(*(int8x16_t *)(v43 - 31));
          uint8x16_t v47 = (uint8x16_t)vextq_s8(v46, v46, 8uLL);
          int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v45.i8);
          int16x8_t v49 = (int16x8_t)vsubl_high_u8(v40, v45);
          int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8);
          int16x8_t v51 = (int16x8_t)vsubl_high_u8(v42, v47);
          uint64_t v52 = v20 + v32;
          int8x16_t v53 = *(int8x16_t *)(v52 - 15);
          int8x16_t v54 = *(int8x16_t *)(v52 - 31);
          int32x4_t v34 = vmlaq_s32(v34, vmull_high_s16(v49, v49), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0370));
          int32x4_t v33 = vmlaq_s32( v33,  vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v49.i8),  (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0380));
          int32x4_t v29 = vmlaq_s32(v29, vmull_high_s16(v48, v48), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0390));
          int32x4_t v30 = vmlaq_s32( v30,  vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8),  (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F03A0));
          int32x4_t v37 = vmlaq_s32(v37, vmull_high_s16(v51, v51), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F0370));
          int32x4_t v36 = vmlaq_s32( v36,  vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8),  (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F0380));
          int32x4_t v35 = vmlaq_s32(v35, vmull_high_s16(v50, v50), (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F0390));
          int32x4_t v2 = vmlaq_s32( v2,  vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8),  (int32x4_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1000F03A0));
          v32 -= 32LL;
          v31 -= 32LL;
        }

        while (v31);
        int v27 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v2, v30), vaddq_s32(v36, v33)),  vaddq_s32(vaddq_s32(v35, v29), vaddq_s32(v37, v34))));
        if ((v15 & 0x7FFFFFE0) == v15) {
          goto LABEL_35;
        }
        uint64_t v28 = v15 & 0x7FFFFFE0;
        uint64_t v55 = v15 & 0x1F;
        if ((v15 & 0x18) != 0) {
          goto LABEL_44;
        }
LABEL_47:
        uint64_t v62 = v55 + 1;
        do
        {
          uint64_t v63 = (v62 - 2);
          v27 += (*(unsigned __int8 *)(v9 + v63) - *(unsigned __int8 *)(v18 + v63))
          --v62;
        }

        while (v62 > 1);
LABEL_35:
        v9 += v19;
        v20 += v19;
        ++v17;
        BOOL v26 = v14-- <= 0;
        if (v26) {
      }
        }

      uint64_t v28 = 0LL;
LABEL_44:
      int32x4_t v56 = 0uLL;
      int32x4_t v57 = (int32x4_t)v27;
      uint64_t v58 = v15 - 1 - v28;
      uint64_t v59 = v28 - (v15 & 0xFFFFFFF8);
      do
      {
        int16x8_t v60 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v9 - 7 + v58)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v18 - 7 + v58)));
        *(int8x8_t *)v2.i8 = vrev64_s8(*(int8x8_t *)(v20 - 7 + v58));
        int32x4_t v61 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F0320);
        int32x4_t v2 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F0330);
        int32x4_t v56 = vmlaq_s32(v56, vmull_high_s16(v60, v60), v61);
        int32x4_t v57 = vmlaq_s32(v57, vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8), v2);
        v58 -= 8LL;
        v59 += 8LL;
      }

      while (v59);
      int v27 = vaddvq_s32(vaddq_s32(v57, v56));
      uint64_t v55 = v15 & 7;
      if ((v15 & 0xFFFFFFF8) == v15) {
        goto LABEL_35;
      }
      goto LABEL_47;
    }

    uint64_t v73 = v15 + 1;
    unsigned int v22 = 0x40000000;
    do
    {
      signed int v74 = *v17;
      uint64_t v75 = v73;
      do
      {
        uint64_t v76 = (v75 - 2);
        v74 += (*(unsigned __int8 *)(v9 + v76) - *(unsigned __int8 *)(v18 + v76))
        --v75;
      }

      while (v75 > 1);
      v9 += v19;
      v20 += v19;
      ++v17;
      BOOL v26 = v14-- <= 0;
    }

    while (!v26);
  }

uint64_t sub_100013418( uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  int v10 = *(uint8x8_t **)(a1 + 1544);
  int v11 = *(_DWORD *)(a1 + 1072);
  BOOL v12 = __OFSUB__(a2, v11);
  int v13 = a2 - v11;
  if (v13 < 0 == v12)
  {
    uint64_t v17 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v13;
    uint64_t v18 = *(int *)(a1 + 1100);
    uint64_t v19 = 0LL;
    int v20 = *(_DWORD *)(a1 + 1296);
    if (v20 == 3) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v14 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    unsigned int v15 = *v14;
    int v16 = v14[1];
  }

  else
  {
    uint64_t v21 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    unsigned int v15 = *v21;
    int v16 = v21[1];
  }

  int v22 = v16 - v15;
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v15 = a2;
  }
  uint64_t v23 = *(int *)(a1 + 1120) * (uint64_t)(int)v15;
  else {
    uint64_t v24 = *(void *)(a1 + 16);
  }
  uint64_t v17 = v24 + v23;
  uint64_t v18 = *(int *)(a1 + 1100);
  uint64_t v19 = v22 - 1LL;
  int v20 = *(_DWORD *)(a1 + 1296);
  if (v20 != 3)
  {
LABEL_14:
    if (v20 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
        }
        else {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
        }
      }
    }

    else
    {
      a2 = 0;
    }
  }

uint64_t sub_1000136D0(uint64_t a1, unsigned int a2, double a3, double a4, double a5, int16x8_t a6)
{
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v9 = 1;
    int v10 = *(_DWORD *)(a1 + 1296);
    unsigned int v11 = a2;
    if (v10 != 3) {
      goto LABEL_8;
    }
LABEL_14:
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v8 = *v6;
    int v7 = v6[1];
  }

  else
  {
    BOOL v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    int v8 = *v12;
    int v7 = v12[1];
  }

  int v9 = v7 - v8;
  int v10 = *(_DWORD *)(a1 + 1296);
  unsigned int v11 = a2;
  if (v10 == 3) {
    goto LABEL_14;
  }
LABEL_8:
  if (v10 != 4)
  {
    unsigned int v11 = 0;
    goto LABEL_14;
  }

  unsigned int v11 = a2;
  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
  }

  else
  {
    unsigned int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_18;
    }
  }

LABEL_15:
  if (*(_DWORD *)(a1 + 1176)) {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  }
  else {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  }
LABEL_18:
  int v13 = v9 - 1;
  if (v9 < 1)
  {
    unsigned int v24 = 0x40000000;
  }

  uint64_t v14 = *(unsigned int *)(a1 + 1104);
  uint64_t v15 = *(void *)(a1 + 160);
  int v16 = (unsigned int *)(v15 + 4LL * (int)a2);
  if ((int)v14 > 0)
  {
    uint64_t v17 = *(int8x16_t **)(a1 + 1544);
    uint64_t v18 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)v11;
    uint64_t v19 = *(void *)(a1 + 176) + 2LL * (int)(*(_DWORD *)(a1 + 1120) * a2);
    uint64_t v20 = *(int *)(a1 + 1100);
    uint64_t v21 = v14 & 0xFFFFFFE0;
    uint64_t v22 = v14 & 0xFFFFFFF8;
    uint64_t v23 = *(uint16x8_t **)(a1 + 1584);
    unsigned int v24 = 0x40000000;
    while (1)
    {
      unsigned int v26 = *v16;
      if (v14 < 8)
      {
        for (uint64_t i = 0LL; i != v14; ++i)
LABEL_35:
          v26 -= 2 * *(unsigned __int16 *)(v19 + 2 * i) * v17->u8[i];
        goto LABEL_36;
      }

      if (v14 >= 0x20)
      {
        uint64_t v29 = 0LL;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = (int32x4_t)*v16;
        int32x4_t v32 = v17 + 1;
        int32x4_t v33 = 0uLL;
        int32x4_t v34 = 0uLL;
        int32x4_t v35 = 0uLL;
        int32x4_t v36 = 0uLL;
        int32x4_t v37 = 0uLL;
        int32x4_t v38 = 0uLL;
        do
        {
          uint16x8_t v39 = *(uint16x8_t *)(v19 + v29);
          uint16x8_t v40 = *(uint16x8_t *)(v19 + v29 + 16);
          uint16x8_t v41 = *(uint16x8_t *)(v19 + v29 + 32);
          uint16x8_t v42 = *(uint16x8_t *)(v19 + v29 + 48);
          int8x16_t v43 = v32[-1];
          int16x8_t v44 = (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F0300);
          int16x8_t v45 = (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F0310);
          uint16x8_t v46 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_1000F0320));
          int32x4_t v47 = (int32x4_t)vmull_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v46.i8);
          uint16x8_t v48 = (uint16x8_t)vuzp1q_s16(v45, v44);
          int32x4_t v49 = (int32x4_t)vmull_u16(*(uint16x4_t *)v40.i8, *(uint16x4_t *)v48.i8);
          int32x4_t v50 = (int32x4_t)vmull_high_u16(v39, v46);
          int32x4_t v51 = (int32x4_t)vmull_high_u16(v40, v48);
          uint16x8_t v52 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F0320));
          int32x4_t v53 = (int32x4_t)vmull_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v52.i8);
          uint16x8_t v54 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F0310),  (int16x8_t)vqtbl1q_s8(*v32, (int8x16_t)xmmword_1000F0300));
          int32x4_t v55 = (int32x4_t)vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v54.i8);
          int32x4_t v56 = (int32x4_t)vmull_high_u16(v41, v52);
          int32x4_t v57 = (int32x4_t)vmull_high_u16(v42, v54);
          int32x4_t v34 = vsubq_s32(v34, vaddq_s32(v51, v51));
          int32x4_t v30 = vsubq_s32(v30, vaddq_s32(v50, v50));
          int32x4_t v33 = vsubq_s32(v33, vaddq_s32(v49, v49));
          int32x4_t v31 = vsubq_s32(v31, vaddq_s32(v47, v47));
          int32x4_t v38 = vsubq_s32(v38, vaddq_s32(v57, v57));
          int32x4_t v36 = vsubq_s32(v36, vaddq_s32(v56, v56));
          int32x4_t v37 = vsubq_s32(v37, vaddq_s32(v55, v55));
          int32x4_t v35 = vsubq_s32(v35, vaddq_s32(v53, v53));
          v29 += 64LL;
          v32 += 2;
        }

        while (((2 * v14) & 0x1FFFFFFC0LL) != v29);
        a6 = (int16x8_t)vaddq_s32(v38, v34);
        unsigned int v26 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v37, v33)),  vaddq_s32(vaddq_s32(v36, v30), (int32x4_t)a6)));
        if (v21 == v14) {
          goto LABEL_36;
        }
        uint64_t v28 = v14 & 0x7FFFFFE0;
        uint64_t i = v14 & 0xFFFFFFE0;
        if ((v14 & 0x18) == 0) {
          goto LABEL_35;
        }
      }

      else
      {
        uint64_t v28 = 0LL;
      }

      int32x4_t v58 = 0uLL;
      int32x4_t v59 = (int32x4_t)v26;
      uint64_t v60 = 2 * v28;
      int32x4_t v61 = (unint64_t *)((char *)v17->u64 + v28);
      uint64_t v62 = v28 - (v14 & 0xFFFFFFF8);
      do
      {
        uint16x8_t v63 = *(uint16x8_t *)(v19 + v60);
        unint64_t v64 = *v61++;
        a6.i64[0] = v64;
        a6 = vuzp1q_s16( (int16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_1000F0320));
        int32x4_t v65 = (int32x4_t)vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)a6.i8);
        int32x4_t v66 = (int32x4_t)vmull_high_u16(v63, (uint16x8_t)a6);
        int32x4_t v58 = vsubq_s32(v58, vaddq_s32(v66, v66));
        int32x4_t v59 = vsubq_s32(v59, vaddq_s32(v65, v65));
        v60 += 16LL;
        v62 += 8LL;
      }

      while (v62);
      unsigned int v26 = vaddvq_s32(vaddq_s32(v59, v58));
      uint64_t i = v14 & 0xFFFFFFF8;
      if (v22 != v14) {
        goto LABEL_35;
      }
LABEL_36:
      if (v14 >= 8)
      {
        if (v14 < 0x20)
        {
          uint64_t v68 = 0LL;
LABEL_44:
          int32x4_t v89 = 0uLL;
          int32x4_t v90 = (int32x4_t)v26;
          uint64_t v91 = (uint16x8_t *)((char *)v23 + 2 * v68);
          do
          {
            uint16x8_t v92 = *v91++;
            a6 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v18 + v68));
            int32x4_t v89 = (int32x4_t)vmlal_high_u16((uint32x4_t)v89, (uint16x8_t)a6, v92);
            int32x4_t v90 = (int32x4_t)vmlal_u16((uint32x4_t)v90, *(uint16x4_t *)a6.i8, *(uint16x4_t *)v92.i8);
            v68 += 8LL;
          }

          while (v22 != v68);
          unsigned int v26 = vaddvq_s32(vaddq_s32(v90, v89));
          uint64_t v67 = v14 & 0xFFFFFFF8;
          if (v22 == v14) {
            goto LABEL_21;
          }
          goto LABEL_47;
        }

        uint64_t v69 = 0LL;
        int32x4_t v70 = 0uLL;
        int32x4_t v71 = (int32x4_t)v26;
        signed int v72 = v23 + 2;
        int32x4_t v73 = 0uLL;
        int32x4_t v74 = 0uLL;
        int32x4_t v75 = 0uLL;
        int32x4_t v76 = 0uLL;
        int32x4_t v77 = 0uLL;
        int32x4_t v78 = 0uLL;
        do
        {
          uint16x8_t v80 = v72[-2];
          uint16x8_t v79 = v72[-1];
          uint16x8_t v82 = *v72;
          uint16x8_t v81 = v72[1];
          v72 += 4;
          uint8x16_t v83 = *(uint8x16_t *)(v18 + v69);
          uint8x16_t v84 = *(uint8x16_t *)(v18 + v69 + 16);
          uint16x8_t v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
          uint16x8_t v86 = vmovl_high_u8(v83);
          uint16x8_t v87 = vmovl_u8(*(uint8x8_t *)v84.i8);
          uint16x8_t v88 = vmovl_high_u8(v84);
          int32x4_t v74 = (int32x4_t)vmlal_high_u16((uint32x4_t)v74, v86, v79);
          int32x4_t v73 = (int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v86.i8, *(uint16x4_t *)v79.i8);
          int32x4_t v70 = (int32x4_t)vmlal_high_u16((uint32x4_t)v70, v85, v80);
          int32x4_t v71 = (int32x4_t)vmlal_u16((uint32x4_t)v71, *(uint16x4_t *)v85.i8, *(uint16x4_t *)v80.i8);
          int32x4_t v78 = (int32x4_t)vmlal_high_u16((uint32x4_t)v78, v88, v81);
          int32x4_t v77 = (int32x4_t)vmlal_u16((uint32x4_t)v77, *(uint16x4_t *)v88.i8, *(uint16x4_t *)v81.i8);
          int32x4_t v76 = (int32x4_t)vmlal_high_u16((uint32x4_t)v76, v87, v82);
          int32x4_t v75 = (int32x4_t)vmlal_u16((uint32x4_t)v75, *(uint16x4_t *)v87.i8, *(uint16x4_t *)v82.i8);
          v69 += 32LL;
        }

        while (v21 != v69);
        a6 = (int16x8_t)vaddq_s32(v78, v74);
        unsigned int v26 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v75, v71), vaddq_s32(v77, v73)),  vaddq_s32(vaddq_s32(v76, v70), (int32x4_t)a6)));
        if (v21 == v14) {
          goto LABEL_21;
        }
        uint64_t v68 = v14 & 0x7FFFFFE0;
        uint64_t v67 = v14 & 0xFFFFFFE0;
        if ((v14 & 0x18) != 0) {
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v67 = 0LL;
      }

      do
      {
LABEL_47:
        v26 += *(unsigned __int8 *)(v18 + v67) * v23->u16[v67];
        ++v67;
      }

      while (v14 != v67);
LABEL_21:
      ++v16;
      v18 += v20;
      v19 += 2 * v20;
      if (v13-- <= 0) {
    }
      }
  }

  if (v9 >= 8)
  {
    uint64_t v93 = v9;
    uint64_t v94 = v9 & 0xFFFFFFF8;
    v13 -= v94;
    v16 += v94;
    unint64_t v95 = (int32x4_t *)(v15 + 4LL * (int)a2 + 16);
    v96.i64[0] = 0x4000000040000000LL;
    v96.i64[1] = 0x4000000040000000LL;
    uint64_t v97 = v94;
    v98.i64[0] = 0x4000000040000000LL;
    v98.i64[1] = 0x4000000040000000LL;
    do
    {
      int32x4_t v96 = vminq_s32(v95[-1], v96);
      int32x4_t v98 = vminq_s32(*v95, v98);
      v95 += 2;
      v97 -= 8LL;
    }

    while (v97);
    unsigned int v24 = vminvq_s32(vminq_s32(v96, v98));
    if (v94 == v93) {
  }
    }

  else
  {
    unsigned int v24 = 0x40000000;
  }

  int v99 = v13 + 1;
  do
  {
    signed int v101 = *v16++;
    unsigned int v100 = v101;
    --v99;
  }

  while (v99);
}

  if (v9 >= 8)
  {
    v11 -= v9 & 0xFFFFFFF8;
    uint64_t v23 = vdupq_n_s32(v5);
    v24.i64[0] = 0x4000000040000000LL;
    v24.i64[1] = 0x4000000040000000LL;
    uint64_t v25 = v9 & 0xFFFFFFF8;
    v26.i64[0] = 0x4000000040000000LL;
    v26.i64[1] = 0x4000000040000000LL;
    do
    {
      unsigned int v24 = vminq_s32(v23, v24);
      unsigned int v26 = vminq_s32(v23, v26);
      v25 -= 8;
    }

    while (v25);
    uint64_t v14 = vminvq_s32(vminq_s32(v24, v26));
    if (v9 == (v9 & 0x7FFFFFF8)) {
      goto LABEL_43;
    }
  }

  else
  {
    uint64_t v14 = 0x40000000;
  }

  uint64_t v27 = v11 + 1;
  do
  {
    if (v5 < v14) {
      uint64_t v14 = *(_DWORD *)(a1 + 736);
    }
    --v27;
  }

  while (v27);
LABEL_43:
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    int32x4_t v31 = *(__int16 *)(a1 + 1136);
    int32x4_t v32 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v14) >> *(_DWORD *)(a1 + 728));
    else {
      return v31;
    }
  }

  else
  {
    int32x4_t v34 = *(__int16 *)(a1 + 1136);
    int32x4_t v35 = (__int16)(int)((double)v14 * *(double *)(a1 + 512) + 0.5);
    else {
      return v34;
    }
  }

  if (*(_DWORD *)(a2 + 148)) {
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a1 + 148);
  if (!*(_DWORD *)(a2 + 172)) {
    goto LABEL_33;
  }
LABEL_17:
LABEL_18:
  if (v15 == 0x7FFFFFFF
    || !sub_1000C1744((const void **)(a2 + 128), (int *)(a2 + 40), v19, *(_DWORD *)(a2 + 32), 2, v15))
  {
    *(void *)(a2 + 40) = 0LL;
LABEL_35:
    sub_1000CB038(v11, 4LL * *(int *)(a1 + 16));
    return 0LL;
  }

  uint64_t v20 = *(_DWORD *)(a1 + 16);
  if (v20 < 1)
  {
    uint64_t v23 = 0;
    uint64_t v22 = 0;
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    do
    {
      if (*((_DWORD *)v11 + v21) != -1)
      {
        if (*(_DWORD *)(a2 + 152)) {
          *(_BYTE *)(*(void *)(*(void *)(a2 + 136) + 8LL * (int)(v23 >> *(_DWORD *)a2))
        }
                   + ((*(int *)(a2 + 4) - 1LL) & (int)v23)) = *(_BYTE *)(*(void *)(*(void *)(a1 + 136)
                                                                                   + 8LL
        *(_DWORD *)(*(void *)(*(void *)(a2 + 160) + 8LL * (int)(v23 >> *(_DWORD *)a2))
                  + 4LL * (int)((*(_DWORD *)(a2 + 4) - 1) & v23)) = *(_DWORD *)(*(void *)(*(void *)(a1 + 160)
                                                                                          + 8LL
                                                                                          * (int)(*((_DWORD *)v11 + v21) >> *(_DWORD *)a1))
                                                                              + 4LL
                                                                              * ((*(_DWORD *)(a1 + 4) - 1) & *((_DWORD *)v11 + v21)));
        unsigned int v24 = *((_DWORD *)v11 + v21);
        uint64_t v25 = *(void *)(a1 + 24);
        unsigned int v26 = *(_DWORD *)(a1 + 4) - 1;
        uint64_t v27 = *(_DWORD *)(*(void *)(v25 + 8LL * (int)(v24 >> *(_DWORD *)a1)) + 4LL * (int)(v26 & v24));
        uint64_t v28 = *(_DWORD *)(*(void *)(v25 + 8LL * (int)((v24 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v26 & (v24 + 1)));
        if (v28 > (int)v27)
        {
          uint64_t v29 = v22 + v28 - v27;
          do
          {
            *(_WORD *)(*(void *)(*(void *)(a2 + 128) + 8LL * (int)(v22 >> *(_DWORD *)(a2 + 32)))
                     + 2LL * (int)((*(_DWORD *)(a2 + 36) - 1) & v22)) = *(_WORD *)(*(void *)(*(void *)(a1 + 128)
                                                                                             + 8LL
                                                                                             * (int)(v27 >> *(_DWORD *)(a1 + 32)))
                                                                                 + 2LL
                                                                                 * (int)((*(_DWORD *)(a1 + 36) - 1) & v27));
            ++v22;
            ++v27;
          }

          while (v28 != v27);
          uint64_t v22 = v29;
        }

        ++v23;
        uint64_t v20 = *(_DWORD *)(a1 + 16);
      }

      ++v21;
    }

    while (v21 < v20);
  }

  sub_1000CB038(v11, 4LL * *(int *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 48) = v15;
  return 1LL;
}

        if (++v27 == v26) {
          goto LABEL_65;
        }
      }
    }
  }

  else
  {
    uint64_t v23 = a3;
    unsigned int v24 = (int *)(*(void *)(a2 + 8) + 4LL * (int)a3);
    while (1)
    {
      uint64_t v25 = *v24++;
      if (v25 >= a4) {
        break;
      }
      uint64_t v23 = (v23 + 1);
      if (v21 == (_DWORD)v23)
      {
        uint64_t v23 = *(unsigned int *)(a2 + 4);
        break;
      }
    }

    else {
      unsigned int v26 = v23;
    }
    if (v26 >= 1) {
      goto LABEL_13;
    }
  }

  int32x4_t v31 = -1;
LABEL_65:
  int16x8_t v137 = a4;
  int32x4_t v66 = *(void *)(a2 + 48);
  int32x4_t v65 = *(void *)(a2 + 56);
  uint64_t v67 = v23;
  while (1)
  {
    if (v67)
    {
      uint64_t v68 = 0;
      uint64_t v69 = *(int **)(a2 + 40);
      int32x4_t v70 = v67;
      do
      {
        ++v68;
        int32x4_t v71 = v69;
        while (1)
        {
          signed int v72 = *v71++;
          if (v72 == -1) {
            break;
          }
          ++v68;
          uint64_t v69 = v71;
          if ((unint64_t)v71 >= *(void *)(a2 + 40) + 4LL * *(int *)(a2 + 32))
          {
            uint64_t v69 = 0LL;
            goto LABEL_78;
          }
        }

        ++v69;
        --v70;
      }

      while (v70);
      int32x4_t v31 = v68;
    }

    else
    {
      int32x4_t v31 = 0;
      uint64_t v69 = *(int **)(a2 + 40);
    }

    int v13 = v38;
    do
    {
      if (*v9 && sub_1000B3608(*(uint64_t **)(a1 + 8), *v10))
      {
        uint64_t v27 = sub_1000B3A9C(*(void *)(a1 + 8), *v10);
        if (v27 != 0xFFFF)
        {
          uint64_t v28 = v27;
        }

        if (*v9)
        {
          uint16x8_t v40 = 0;
          uint64_t v29 = sub_1000BB674(*(uint64_t **)(a1 + 8), *v10, &v40);
          if (v40)
          {
            int32x4_t v30 = sub_1000BB860(*(uint64_t **)(a1 + 8));
            sub_10001CD48(*(void *)(a1 + 16), v30, v31, v32, v33, v34, v35, v36);
          }

          if (!v29) {
LABEL_16:
          }
            unsigned int v26 = 0;
        }
      }

      ++v10;
      ++v9;
      --v16;
    }

    while (v16);
    int v8 = v39;
  }

  uint64_t v19 = sub_1000BCC0C(v9);
  sub_1000BCBC8(v9);
  if ((v18 & 1) != 0 || !v19)
  {
    uint64_t v20 = *(void *)(v11 + 8);
    if (v20)
    {
      if (*v12 >= 1)
      {
        uint64_t v21 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v11 + 8) + 8 * v21++));
        while (v21 < *(int *)(v11 + 16));
        uint64_t v20 = *(void *)(v11 + 8);
      }

      sub_1000C0EF8(v20);
    }

    *(void *)unsigned int v11 = 0LL;
    *(void *)(v11 + 8) = 0LL;
    *(_DWORD *)(v11 + 24) = 0;
    *(void *)(v11 + 16) = 0LL;
    sub_1000C0EF8(v11);
    return 0LL;
  }

  return v11;
}

          unsigned int v24 = *(unsigned __int16 *)result;
          uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v24);
          if ((_DWORD)result == 0x4000) {
            uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v24);
          }
          uint64_t v21 = v23 - v10 + result;
          goto LABEL_36;
        }
      }
    }
  }

  uint16x8_t v46 = *(_WORD *)(a1 + 994);
  uint64_t result = sub_100015BAC(v11, a5 & 0x7FFF);
  uint64_t v14 = (unsigned __int16 *)result;
  uint64_t v15 = *a2;
  *(_WORD *)a3 = v15;
  int v16 = *(unsigned __int8 *)(*(void *)(a1 + 1008) + v15);
  else {
    uint64_t v17 = (__int16)a2[2];
  }
  if (v17 <= v9)
  {
    uint64_t v25 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v11 + 1792) + 2 * v25);
    if ((_DWORD)result == 0x4000) {
      uint64_t result = sub_100015BC0(v11, v25);
    }
    unsigned int v26 = (__int16)(result + v17 - v46);
    *(_WORD *)(a3 + 4) = result + v17 - v46;
    uint64_t v18 = v26 < 0x4000;
    if (v26 >= 0x4000) {
      uint64_t v19 = 0x4000;
    }
    else {
      uint64_t v19 = result + v17 - v46;
    }
    if (*(unsigned __int16 *)(a1 + 720) != (_DWORD)v15)
    {
LABEL_7:
      uint64_t v20 = a2[1];
      if (v9 < v20) {
        goto LABEL_8;
      }
LABEL_29:
      uint64_t result = *(void *)(a1 + 384);
      uint64_t v27 = *v14;
      uint64_t v28 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v27);
      if (v28 == 0x4000)
      {
        uint64_t result = sub_100015BC0(result, v27);
        LOWORD(v28) = result;
      }

      uint64_t v29 = v28 + v20 - v46;
      *(_WORD *)(a3 + 2) = v29;
      if (v29 < v19) {
        uint64_t v18 = 0;
      }
      goto LABEL_38;
    }
  }

  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
  }

  else {
    uint64_t v20 = a2[1];
  }
  if (*(unsigned __int16 *)(a1 + 722) < v15)
  {
    *(_WORD *)(a1 + 720) = v15 - 1;
    if (v9 < v20) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  int32x4_t v30 = *a4;
  int32x4_t v31 = *(void *)(a1 + 1016);
  while (1)
  {
    do
    {
      int32x4_t v34 = (unsigned __int16)*(v30 - 4);
      v30 -= 4;
      int32x4_t v33 = v34;
      int32x4_t v35 = (__int16 *)(v31 + 4LL * v34);
    }

    while (*v35 < 0);
    *(_WORD *)(a1 + 722) = v35[1];
    if ((*v35 & 0x7FFF) == 0) {
      break;
    }
    int32x4_t v32 = (__int16)(*(_WORD *)(a1 + 564) + v30[*(int *)(a1 + 528)]);
LABEL_41:
  }

  int32x4_t v32 = (__int16)v30[1];
  if (*v30) {
    goto LABEL_41;
  }
  int32x4_t v32 = (__int16)(*(_WORD *)(a1 + 562) + v32 + *(_WORD *)(a1 + 564));
  if (v32 > *(__int16 *)(a1 + 992) || !*(_WORD *)(a1 + 572))
  {
    *(_WORD *)(a1 + 720) = 0;
    *a4 = v30;
    if (v9 < v20) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  *(_WORD *)(a1 + 722) = 0;
LABEL_48:
  *a4 = v30;
  *(_WORD *)(a1 + 716) = v32;
  int32x4_t v36 = (__int16 *)(v31 + 4 * v33 + 4);
  do
  {
    int32x4_t v37 = *v36;
    v36 += 2;
  }

  while (v37 < 0);
  *(_WORD *)(a1 + 720) = *(v36 - 1) - 1;
  if (v9 >= v20) {
    goto LABEL_29;
  }
LABEL_8:
  uint64_t v21 = 0x4000;
LABEL_37:
  *(_WORD *)(a3 + 2) = v21;
LABEL_38:
  *(_BYTE *)(a3 + 6) = v18;
  *(_BYTE *)(a3 + 7) = *((_BYTE *)a2 + 7);
  return result;
}

  if (v19) {
    uint64_t v21 = sub_1000690F8;
  }
  else {
    uint64_t v21 = sub_100069594;
  }
  *(void *)(a1 + 520) = v21;
  uint64_t v22 = a9;
  switch((int)a6)
  {
    case 2:
      break;
    case 3:
    case 5:
    case 11:
      if (!v20
        || *(void *)(v20 + 1272) != 0x7FFFFFFFLL
        && (!*(_DWORD *)(v20 + 4736)
         || !a8
         || a9
         || *(__int16 *)(a1 + 456) != -1
         || !*(void *)(v20 + 1528)
         || !*(_DWORD *)(a1 + 9360)))
      {
        goto LABEL_2;
      }

      break;
    default:
      goto LABEL_2;
  }

  uint64_t result = sub_100025CA4(a4, a5);
  if (!(_DWORD)result) {
    goto LABEL_3;
  }
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1264))
  {
    int v16 = (char *)(a1 + 9384);
    if (!*(void *)(a1 + 9384)) {
      *(void *)(a1 + 9384) = sub_100026B30(*(void *)(a1 + 376), 0);
    }
    uint64_t v15 = 1LL;
  }

  sub_100064994(a1);
  __int16 v105 = (_DWORD *)(a1 + 680);
  __unsigned __int16 n = 8 * (int)v15;
  memcpy((void *)(a1 + 680), v16, __n);
  *(_DWORD *)(a1 + 8872) = v15;
  uint64_t v23 = sub_100028448(v15, (uint64_t)v16);
  *(_DWORD *)(a1 + 8900) = v23;
  if (v23)
  {
    uint64_t v103 = v23;
    uint64_t result = sub_1000C1074(8LL * (int)v15);
    *(void *)(a1 + 9288) = result;
    if (!result) {
      return result;
    }
    memcpy((void *)result, v16, __n);
    unsigned int v24 = sub_1000C1074(8LL * (int)v15);
    *(void *)(a1 + 9296) = v24;
    if (!v24) {
      goto LABEL_130;
    }
    *(_DWORD *)(a1 + 9304) = v15;
    uint64_t v25 = (uint64_t *)(a1 + 680);
    uint64_t v23 = v103;
    if ((int)v15 >= 1)
    {
      unsigned int v26 = 0LL;
      do
      {
        uint64_t result = sub_100027CE0(*(void *)&v16[v26]);
        *(void *)(a1 + 680 + v26) = result;
        if (!result)
        {
          *(void *)(a1 + v26 + 680) = *(void *)&v16[v26];
          return result;
        }

        if (*(void *)(*(void *)(a1 + 9288) + v26) != result) {
          *(void *)(*(void *)(a1 + 9296) + v26) = result;
        }
        v26 += 8LL;
      }

      while (8LL * v15 != v26);
      uint64_t v25 = (uint64_t *)(a1 + 680);
      uint64_t v23 = v103;
      uint64_t v22 = a9;
      uint64_t v27 = qword_1000FDCC0;
      if (!qword_1000FDCC0) {
        goto LABEL_58;
      }
      goto LABEL_45;
    }
  }

  else
  {
    uint64_t v25 = (uint64_t *)v16;
  }

  uint64_t v27 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_58;
  }
LABEL_45:
  if (!*(_DWORD *)(v27 + 5308) || v23 || (int)v15 < 1 || !*(_BYTE *)(v27 + 4220))
  {
LABEL_51:
    uint64_t v29 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
LABEL_52:
      int32x4_t v30 = 0;
      uint64_t v108 = (_DWORD)a7 == 1;
      if ((_DWORD)a7 == 1) {
        int32x4_t v31 = 0LL;
      }
      else {
        int32x4_t v31 = *(unsigned int *)(v29 + 1072);
      }
      *(_DWORD *)(a1 + 544) = a6;
      __na = (_DWORD *)(a1 + 9272);
      *(_DWORD *)(a1 + 9272) = a8;
      int v104 = (_DWORD *)(a1 + 9276);
      *(_DWORD *)(a1 + 9276) = v22;
      *(_DWORD *)(a1 + 8892) = 1;
      int32x4_t v32 = *(void *)(v29 + 1704);
LABEL_59:
      *(_WORD *)(a1 + 9068) = v32;
      if (a3 < 1)
      {
        *(_DWORD *)(a1 + 9204) = 0;
        int32x4_t v33 = -1;
      }

      else
      {
        *(_DWORD *)(a1 + 9204) = 1;
        int32x4_t v33 = *(_WORD *)(a2 + 2LL * (a3 - 1));
      }

      *(_WORD *)(a1 + 9202) = v33;
      int32x4_t v34 = v25;
      if ((_DWORD)a6 == 2)
      {
        if ((v30 & 1) != 0)
        {
          int32x4_t v35 = 0;
          int32x4_t v36 = 0;
        }

        else
        {
          int32x4_t v35 = *(_DWORD *)(v29 + 5348);
          int32x4_t v36 = *(_DWORD *)(v29 + 5372);
        }

        sub_100038FBC(a1, v35, v36);
        int32x4_t v38 = 0;
        *(_DWORD *)(a1 + 8872) = v15;
      }

      else
      {
        if ((v30 & 1) != 0) {
          int32x4_t v37 = 0;
        }
        else {
          int32x4_t v37 = *(_DWORD *)(v29 + 5348);
        }
        if ((int)v15 < 1)
        {
          int32x4_t v37 = 0;
          int32x4_t v38 = 1;
        }

        else
        {
          uint16x8_t v39 = v15;
          uint16x8_t v40 = v25;
          while (*v40 && sub_1000267E4(*v40))
          {
            ++v40;
            if (!--v39)
            {
              int32x4_t v37 = 0;
              int32x4_t v38 = 1;
              goto LABEL_77;
            }
          }

          int32x4_t v38 = 0;
LABEL_77:
          uint64_t v29 = qword_1000FDCC0;
        }

        if (v29) {
          uint16x8_t v41 = *(_DWORD *)(v29 + 5372);
        }
        else {
          uint16x8_t v41 = 0;
        }
        sub_100038FBC(a1, v37, v41);
      }

      if (*(_DWORD *)(a1 + 556))
      {
        uint16x8_t v42 = 1;
        goto LABEL_85;
      }

      uint16x8_t v46 = *(_DWORD *)(a1 + 544);
      if ((v46 | 8) == 0xB)
      {
        if (!v38)
        {
          int8x16_t v43 = (_DWORD *)(a1 + 8888);
          *(_DWORD *)(a1 + 8888) = a10;
          int16x8_t v44 = (_DWORD *)(a1 + 8884);
          *(_DWORD *)(a1 + 8884) = a10;
LABEL_90:
          int16x8_t v45 = 1;
          if ((_DWORD)a6 != 2 && (_DWORD)a6 != 5)
          {
            int32x4_t v47 = sub_100039044( a1,  0LL,  (uint64_t)v34,  v15,  a6,  a7,  (int *)&v110,  (int *)&v110 + 1,  (int *)&v109 + 1,  (int *)&v109);
LABEL_107:
            uint16x8_t v52 = 1;
LABEL_110:
            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4504)) {
              sub_1000267EC(v105, *(_DWORD *)(a1 + 8872), *(void *)(a1 + 9256));
            }
            if (!sub_100064570(a1)
              || !sub_100025FA8((uint64_t)v34, v15, v31, *(void *)(a1 + 9256), v53, v54, v55, v56))
            {
              goto LABEL_249;
            }

            int32x4_t v57 = *(_DWORD *)(a1 + 9040);
            if ((_DWORD)a7)
            {
              int32x4_t v58 = HIDWORD(v110);
              int32x4_t v59 = qword_1000FDCC0;
              uint64_t v60 = v34;
            }

            else
            {
              int32x4_t v59 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                int32x4_t v65 = *(void *)(qword_1000FDCC0 + 1544);
              }
              else {
                LODWORD(v65) = 0;
              }
              uint64_t v60 = v34;
              int32x4_t v58 = HIDWORD(v110) + *(_DWORD *)(a1 + 9080) * v65;
              if (v58 <= 1) {
                int32x4_t v58 = 1;
              }
              HIDWORD(v110) = v58;
            }

            *(_DWORD *)(a1 + 9208) = v58;
            if (v59) {
              int32x4_t v66 = *(void *)(v59 + 1552);
            }
            else {
              LODWORD(v66) = 0;
            }
            *(_DWORD *)(a1 + 9212) = v66;
            if ((v52 & 1) == 0)
            {
              uint64_t v67 = v57 << 8;
              if (v67 >= 65533) {
                uint64_t v67 = 65533;
              }
              *(_DWORD *)(a1 + 9208) = v67;
            }

            *(_DWORD *)(a1 + 8876) = v38;
            if ((_DWORD)a7 == 2)
            {
              if (v59) {
                int32x4_t v59 = *(void *)(v59 + 968);
              }
              goto LABEL_164;
            }

            if ((_DWORD)a7 == 1)
            {
              if (v59) {
                int32x4_t v59 = *(void *)(v59 + 4568);
              }
              goto LABEL_164;
            }

            if ((_DWORD)a7)
            {
              LOWORD(v59) = 0;
LABEL_164:
              *(_WORD *)(a1 + 9060) = v59;
              *(_WORD *)(a1 + 9062) = v59;
              *(_WORD *)(a1 + 8976) = sub_100004690(*(void *)(a1 + 384));
              *(_WORD *)(a1 + 9248) = sub_100004688(*(void *)(a1 + 384));
              int32x4_t v71 = *(_DWORD *)(a1 + 544);
              if (v71 <= 0xB && ((1 << v71) & 0x828) != 0)
              {
                if ((int)v15 <= 1)
                {
                  signed int v72 = sub_100026134(*v34);
                  int32x4_t v71 = *(_DWORD *)(a1 + 544);
                }

                else
                {
                  signed int v72 = 1;
                }

                *(_DWORD *)(a1 + 8904) = v72;
              }

              if (v71 <= 0xB && ((1 << v71) & 0x828) != 0 && sub_10002684C((uint64_t)v34, v15))
              {
                *(_DWORD *)(a1 + 9008) = 0;
                goto LABEL_190;
              }

              int32x4_t v73 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                int32x4_t v74 = *(_DWORD *)(qword_1000FDCC0 + 4552);
              }
              else {
                int32x4_t v74 = 0;
              }
              if (v74) {
                int32x4_t v75 = *(_DWORD *)(a1 + 556) == 0;
              }
              else {
                int32x4_t v75 = 1;
              }
              if (!v75) {
                int32x4_t v74 = 0;
              }
              *(_DWORD *)(a1 + 9008) = v74;
              if (!v74) {
                goto LABEL_190;
              }
              *int16x8_t v44 = 0;
              *int8x16_t v43 = 0;
              if (!v73) {
                goto LABEL_248;
              }
              int32x4_t v76 = *(void *)(v73 + 4040);
              if (!v76) {
                goto LABEL_248;
              }
              int32x4_t v77 = *(void *)(a1 + 9016);
              if (v77)
              {
                sub_100024180(v77);
                goto LABEL_190;
              }

              int32x4_t v78 = sub_1000240DC(*(void *)(a1 + 9000), v76);
              *(void *)(a1 + 9016) = v78;
              if (v78)
              {
LABEL_190:
                uint16x8_t v79 = v108;
                if (v108)
                {
                  LODWORD(v80) = 1000000;
                }

                else
                {
                  if (qword_1000FDCC0) {
                    uint16x8_t v80 = *(void *)(qword_1000FDCC0 + 1592);
                  }
                  else {
                    LODWORD(v80) = 0;
                  }
                  uint16x8_t v79 = v108;
                }

                if (qword_1000FDCC0)
                {
                  uint16x8_t v81 = *(_DWORD *)(qword_1000FDCC0 + 1600);
                  uint16x8_t v82 = *(void *)(qword_1000FDCC0 + 1440);
                }

                else
                {
                  uint16x8_t v81 = 0;
                  LODWORD(v82) = 0;
                }

                sub_1000B2560(a1 + 9084, *(_DWORD *)(a1 + 432), v81, v80, v82, 0);
                if (v79
                  || !qword_1000FDCC0
                  || *(void *)(qword_1000FDCC0 + 1656) >= *(void *)(qword_1000FDCC0 + 1592))
                {
                  *(_DWORD *)(a1 + 9180) = 0;
                  uint16x8_t v86 = qword_1000FDCC0;
                  if (!qword_1000FDCC0) {
                    goto LABEL_207;
                  }
                }

                else
                {
                  *(_DWORD *)(a1 + 9180) = 1;
                  *(_DWORD *)(a1 + 8880) = sub_100025D1C((uint64_t)v34, v15);
                  if (qword_1000FDCC0)
                  {
                    uint8x16_t v83 = *(_DWORD *)(qword_1000FDCC0 + 1600);
                    uint8x16_t v84 = *(_DWORD *)(qword_1000FDCC0 + 1656);
                    uint16x8_t v85 = *(void *)(qword_1000FDCC0 + 1440);
                  }

                  else
                  {
                    uint8x16_t v84 = 0;
                    uint8x16_t v83 = 0;
                    LODWORD(v85) = 0;
                  }

                  sub_1000B2560(a1 + 9132, *(_DWORD *)(a1 + 432), v83, v84, v85, 0);
                  uint16x8_t v86 = qword_1000FDCC0;
                  if (!qword_1000FDCC0) {
                    goto LABEL_207;
                  }
                }

                if (*(_DWORD *)(v86 + 4464)) {
                  sub_10009ABAC(*(void *)(a1 + 9256));
                }
LABEL_207:
                uint16x8_t v87 = *(void *)(a1 + 9264);
                if (v87) {
                  sub_100051628(v87);
                }
                uint16x8_t v88 = sub_1000B3298(*(void *)(a1 + 376));
                *(_DWORD *)(a1 + 620) = v88;
                if (*(_DWORD *)(a1 + 8896))
                {
                  int32x4_t v89 = v88 + *(_DWORD *)(a1 + 9360) + 2;
                  *(_DWORD *)(a1 + 616) = v89;
                  *(_DWORD *)(a1 + 612) = v89;
                }

                int32x4_t v90 = qword_1000FDCC0;
                if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1684))
                {
                  uint64_t v91 = sub_1000B323C(*(void *)(a1 + 376));
                  *(_DWORD *)(a1 + 9280) = v91;
                  int32x4_t v90 = qword_1000FDCC0;
                }

                else
                {
                  uint64_t v91 = 0;
                  *(_DWORD *)(a1 + 9280) = 0;
                  *(_WORD *)(a1 + 456) = -1;
                }

                if (v90) {
                  uint16x8_t v92 = *(_DWORD *)(v90 + 1288);
                }
                else {
                  uint16x8_t v92 = 0;
                }
                *(_DWORD *)(a1 + 9284) = v92;
                switch(*(_DWORD *)(a1 + 544))
                {
                  case 2:
                    uint64_t v94 = sub_1000699A0;
                    unint64_t v95 = sub_1000653C8;
                    if (v90 && *(void *)(v90 + 3616))
                    {
                      unint64_t v95 = sub_1000654A0;
                      uint64_t v94 = sub_100069B24;
                    }

                    *(void *)(a1 + 9392) = v95;
                    *(void *)(a1 + 9400) = v94;
                    if (v91)
                    {
                      if (v90)
                      {
                        if (!*(void *)(a1 + 656))
                        {
                          int32x4_t v96 = *(void *)(v90 + 3616);
                          if (v96 >= 1)
                          {
                            uint64_t v97 = sub_1000C1074(2 * v96);
                            *(void *)(a1 + 656) = v97;
                            if (!v97) {
                              goto LABEL_248;
                            }
                            int32x4_t v98 = qword_1000FDCC0 ? 2LL * *(void *)(qword_1000FDCC0 + 3616) : 0LL;
                            int v102 = sub_1000C1074(v98);
                            *(void *)(a1 + 664) = v102;
                            if (!v102) {
                              goto LABEL_248;
                            }
                          }
                        }
                      }
                    }

                    break;
                  case 3:
                  case 0xB:
                    *(void *)(a1 + 9392) = sub_100065850;
                    if (v91) {
                      uint64_t v93 = sub_100069EA4;
                    }
                    else {
                      uint64_t v93 = sub_10006A080;
                    }
                    *(void *)(a1 + 9400) = v93;
                    break;
                  case 5:
                    *(void *)(a1 + 9392) = sub_100065654;
                    *(void *)(a1 + 9400) = sub_100069CF8;
                    *(_DWORD *)(a1 + 9284) = 0;
                    break;
                  default:
                    break;
                }

                if (*(_DWORD *)(a1 + 8896))
                {
                  if (*(_DWORD *)(a1 + 8904)) {
                    int v99 = sub_1000650E8;
                  }
                  else {
                    int v99 = sub_1000652E8;
                  }
                }

                else
                {
                  int v99 = sub_100064D98;
                }

                *(void *)(a1 + 9408) = v99;
                if (qword_1000FDCC0
                  && *(_DWORD *)(qword_1000FDCC0 + 4736)
                  && (unsigned int v100 = *(_DWORD *)(a1 + 544), v100 <= 0xB)
                  && ((1 << v100) & 0x828) != 0
                  && *__na
                  && !*v104
                  && *(__int16 *)(a1 + 456) == -1)
                {
                  *(void *)(a1 + 528) = sub_10006A210;
                  if (!*(_DWORD *)(a1 + 9280)) {
                    goto LABEL_254;
                  }
                }

                else
                {
                  *(void *)(a1 + 528) = sub_10006AA14;
                  if (!*(_DWORD *)(a1 + 9280)) {
                    goto LABEL_254;
                  }
                }

  if (v19) {
    uint64_t v21 = sub_100070198;
  }
  else {
    uint64_t v21 = sub_100070660;
  }
  *(void *)(a1 + 520) = v21;
  uint64_t v22 = a9;
  switch((int)a6)
  {
    case 2:
      break;
    case 3:
    case 5:
    case 11:
      if (!v20
        || *(void *)(v20 + 1272) != 0x7FFFFFFFLL
        && (!*(_DWORD *)(v20 + 4736)
         || !a8
         || a9
         || *(__int16 *)(a1 + 456) != -1
         || !*(void *)(v20 + 1528)
         || !*(_DWORD *)(a1 + 9360)))
      {
        goto LABEL_2;
      }

      break;
    default:
      goto LABEL_2;
  }

  uint64_t result = sub_100025CA4(a4, a5);
  if (!(_DWORD)result) {
    goto LABEL_3;
  }
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1264))
  {
    int v16 = (char *)(a1 + 9384);
    if (!*(void *)(a1 + 9384)) {
      *(void *)(a1 + 9384) = sub_100026B30(*(void *)(a1 + 376), 0);
    }
    uint64_t v15 = 1LL;
  }

  sub_100064994(a1);
  __int16 v105 = (_DWORD *)(a1 + 680);
  __unsigned __int16 n = 8 * (int)v15;
  memcpy((void *)(a1 + 680), v16, __n);
  *(_DWORD *)(a1 + 8872) = v15;
  uint64_t v23 = sub_100028448(v15, (uint64_t)v16);
  *(_DWORD *)(a1 + 8900) = v23;
  if (v23)
  {
    uint64_t v103 = v23;
    uint64_t result = sub_1000C1074(8LL * (int)v15);
    *(void *)(a1 + 9288) = result;
    if (!result) {
      return result;
    }
    memcpy((void *)result, v16, __n);
    unsigned int v24 = sub_1000C1074(8LL * (int)v15);
    *(void *)(a1 + 9296) = v24;
    if (!v24) {
      goto LABEL_130;
    }
    *(_DWORD *)(a1 + 9304) = v15;
    uint64_t v25 = (uint64_t *)(a1 + 680);
    uint64_t v23 = v103;
    if ((int)v15 >= 1)
    {
      unsigned int v26 = 0LL;
      do
      {
        uint64_t result = sub_100027CE0(*(void *)&v16[v26]);
        *(void *)(a1 + 680 + v26) = result;
        if (!result)
        {
          *(void *)(a1 + v26 + 680) = *(void *)&v16[v26];
          return result;
        }

        if (*(void *)(*(void *)(a1 + 9288) + v26) != result) {
          *(void *)(*(void *)(a1 + 9296) + v26) = result;
        }
        v26 += 8LL;
      }

      while (8LL * v15 != v26);
      uint64_t v25 = (uint64_t *)(a1 + 680);
      uint64_t v23 = v103;
      uint64_t v22 = a9;
      uint64_t v27 = qword_1000FDCC0;
      if (!qword_1000FDCC0) {
        goto LABEL_58;
      }
      goto LABEL_45;
    }
  }

  else
  {
    uint64_t v25 = (uint64_t *)v16;
  }

  uint64_t v27 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_58;
  }
LABEL_45:
  if (!*(_DWORD *)(v27 + 5308) || v23 || (int)v15 < 1 || !*(_BYTE *)(v27 + 4220))
  {
LABEL_51:
    uint64_t v29 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
LABEL_52:
      int32x4_t v30 = 0;
      uint64_t v108 = (_DWORD)a7 == 1;
      if ((_DWORD)a7 == 1) {
        int32x4_t v31 = 0LL;
      }
      else {
        int32x4_t v31 = *(unsigned int *)(v29 + 1072);
      }
      *(_DWORD *)(a1 + 544) = a6;
      __na = (_DWORD *)(a1 + 9272);
      *(_DWORD *)(a1 + 9272) = a8;
      int v104 = (_DWORD *)(a1 + 9276);
      *(_DWORD *)(a1 + 9276) = v22;
      *(_DWORD *)(a1 + 8892) = 1;
      int32x4_t v32 = *(void *)(v29 + 1704);
LABEL_59:
      *(_WORD *)(a1 + 9068) = v32;
      if (a3 < 1)
      {
        *(_DWORD *)(a1 + 9204) = 0;
        int32x4_t v33 = -1;
      }

      else
      {
        *(_DWORD *)(a1 + 9204) = 1;
        int32x4_t v33 = *(_WORD *)(a2 + 2LL * (a3 - 1));
      }

      *(_WORD *)(a1 + 9202) = v33;
      int32x4_t v34 = v25;
      if ((_DWORD)a6 == 2)
      {
        if ((v30 & 1) != 0)
        {
          int32x4_t v35 = 0;
          int32x4_t v36 = 0;
        }

        else
        {
          int32x4_t v35 = *(_DWORD *)(v29 + 5348);
          int32x4_t v36 = *(_DWORD *)(v29 + 5372);
        }

        sub_100038FBC(a1, v35, v36);
        int32x4_t v38 = 0;
        *(_DWORD *)(a1 + 8872) = v15;
      }

      else
      {
        if ((v30 & 1) != 0) {
          int32x4_t v37 = 0;
        }
        else {
          int32x4_t v37 = *(_DWORD *)(v29 + 5348);
        }
        if ((int)v15 < 1)
        {
          int32x4_t v37 = 0;
          int32x4_t v38 = 1;
        }

        else
        {
          uint16x8_t v39 = v15;
          uint16x8_t v40 = v25;
          while (*v40 && sub_1000267E4(*v40))
          {
            ++v40;
            if (!--v39)
            {
              int32x4_t v37 = 0;
              int32x4_t v38 = 1;
              goto LABEL_77;
            }
          }

          int32x4_t v38 = 0;
LABEL_77:
          uint64_t v29 = qword_1000FDCC0;
        }

        if (v29) {
          uint16x8_t v41 = *(_DWORD *)(v29 + 5372);
        }
        else {
          uint16x8_t v41 = 0;
        }
        sub_100038FBC(a1, v37, v41);
      }

      if (*(_DWORD *)(a1 + 556))
      {
        uint16x8_t v42 = 1;
        goto LABEL_85;
      }

      uint16x8_t v46 = *(_DWORD *)(a1 + 544);
      if ((v46 | 8) == 0xB)
      {
        if (!v38)
        {
          int8x16_t v43 = (_DWORD *)(a1 + 8888);
          *(_DWORD *)(a1 + 8888) = a10;
          int16x8_t v44 = (_DWORD *)(a1 + 8884);
          *(_DWORD *)(a1 + 8884) = a10;
LABEL_90:
          int16x8_t v45 = 1;
          if ((_DWORD)a6 != 2 && (_DWORD)a6 != 5)
          {
            int32x4_t v47 = sub_100039044( a1,  0LL,  (uint64_t)v34,  v15,  a6,  a7,  (int *)&v110,  (int *)&v110 + 1,  (int *)&v109 + 1,  (int *)&v109);
LABEL_107:
            uint16x8_t v52 = 1;
LABEL_110:
            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4504)) {
              sub_1000267EC(v105, *(_DWORD *)(a1 + 8872), *(void *)(a1 + 9256));
            }
            if (!sub_100064570(a1)
              || !sub_100025FA8((uint64_t)v34, v15, v31, *(void *)(a1 + 9256), v53, v54, v55, v56))
            {
              goto LABEL_249;
            }

            int32x4_t v57 = *(_DWORD *)(a1 + 9040);
            if ((_DWORD)a7)
            {
              int32x4_t v58 = HIDWORD(v110);
              int32x4_t v59 = qword_1000FDCC0;
              uint64_t v60 = v34;
            }

            else
            {
              int32x4_t v59 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                int32x4_t v65 = *(void *)(qword_1000FDCC0 + 1544);
              }
              else {
                LODWORD(v65) = 0;
              }
              uint64_t v60 = v34;
              int32x4_t v58 = HIDWORD(v110) + *(_DWORD *)(a1 + 9080) * v65;
              if (v58 <= 1) {
                int32x4_t v58 = 1;
              }
              HIDWORD(v110) = v58;
            }

            *(_DWORD *)(a1 + 9208) = v58;
            if (v59) {
              int32x4_t v66 = *(void *)(v59 + 1552);
            }
            else {
              LODWORD(v66) = 0;
            }
            *(_DWORD *)(a1 + 9212) = v66;
            if ((v52 & 1) == 0)
            {
              uint64_t v67 = v57 << 8;
              if (v67 >= 65533) {
                uint64_t v67 = 65533;
              }
              *(_DWORD *)(a1 + 9208) = v67;
            }

            *(_DWORD *)(a1 + 8876) = v38;
            if ((_DWORD)a7 == 2)
            {
              if (v59) {
                int32x4_t v59 = *(void *)(v59 + 968);
              }
              goto LABEL_164;
            }

            if ((_DWORD)a7 == 1)
            {
              if (v59) {
                int32x4_t v59 = *(void *)(v59 + 4568);
              }
              goto LABEL_164;
            }

            if ((_DWORD)a7)
            {
              LOWORD(v59) = 0;
LABEL_164:
              *(_WORD *)(a1 + 9060) = v59;
              *(_WORD *)(a1 + 9062) = v59;
              *(_WORD *)(a1 + 8946) = sub_100004690(*(void *)(a1 + 384));
              *(_WORD *)(a1 + 9248) = sub_100004688(*(void *)(a1 + 384));
              int32x4_t v71 = *(_DWORD *)(a1 + 544);
              if (v71 <= 0xB && ((1 << v71) & 0x828) != 0)
              {
                if ((int)v15 <= 1)
                {
                  signed int v72 = sub_100026134(*v34);
                  int32x4_t v71 = *(_DWORD *)(a1 + 544);
                }

                else
                {
                  signed int v72 = 1;
                }

                *(_DWORD *)(a1 + 8904) = v72;
              }

              if (v71 <= 0xB && ((1 << v71) & 0x828) != 0 && sub_10002684C((uint64_t)v34, v15))
              {
                *(_DWORD *)(a1 + 9008) = 0;
                goto LABEL_190;
              }

              int32x4_t v73 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                int32x4_t v74 = *(_DWORD *)(qword_1000FDCC0 + 4552);
              }
              else {
                int32x4_t v74 = 0;
              }
              if (v74) {
                int32x4_t v75 = *(_DWORD *)(a1 + 556) == 0;
              }
              else {
                int32x4_t v75 = 1;
              }
              if (!v75) {
                int32x4_t v74 = 0;
              }
              *(_DWORD *)(a1 + 9008) = v74;
              if (!v74) {
                goto LABEL_190;
              }
              *int16x8_t v44 = 0;
              *int8x16_t v43 = 0;
              if (!v73) {
                goto LABEL_248;
              }
              int32x4_t v76 = *(void *)(v73 + 4040);
              if (!v76) {
                goto LABEL_248;
              }
              int32x4_t v77 = *(void *)(a1 + 9016);
              if (v77)
              {
                sub_100024180(v77);
                goto LABEL_190;
              }

              int32x4_t v78 = sub_1000240DC(*(void *)(a1 + 9000), v76);
              *(void *)(a1 + 9016) = v78;
              if (v78)
              {
LABEL_190:
                uint16x8_t v79 = v108;
                if (v108)
                {
                  LODWORD(v80) = 1000000;
                }

                else
                {
                  if (qword_1000FDCC0) {
                    uint16x8_t v80 = *(void *)(qword_1000FDCC0 + 1592);
                  }
                  else {
                    LODWORD(v80) = 0;
                  }
                  uint16x8_t v79 = v108;
                }

                if (qword_1000FDCC0)
                {
                  uint16x8_t v81 = *(_DWORD *)(qword_1000FDCC0 + 1600);
                  uint16x8_t v82 = *(void *)(qword_1000FDCC0 + 1440);
                }

                else
                {
                  uint16x8_t v81 = 0;
                  LODWORD(v82) = 0;
                }

                sub_1000B2560(a1 + 9084, *(_DWORD *)(a1 + 432), v81, v80, v82, 0);
                if (v79
                  || !qword_1000FDCC0
                  || *(void *)(qword_1000FDCC0 + 1656) >= *(void *)(qword_1000FDCC0 + 1592))
                {
                  *(_DWORD *)(a1 + 9180) = 0;
                  uint16x8_t v86 = qword_1000FDCC0;
                  if (!qword_1000FDCC0) {
                    goto LABEL_207;
                  }
                }

                else
                {
                  *(_DWORD *)(a1 + 9180) = 1;
                  *(_DWORD *)(a1 + 8880) = sub_100025D1C((uint64_t)v34, v15);
                  if (qword_1000FDCC0)
                  {
                    uint8x16_t v83 = *(_DWORD *)(qword_1000FDCC0 + 1600);
                    uint8x16_t v84 = *(_DWORD *)(qword_1000FDCC0 + 1656);
                    uint16x8_t v85 = *(void *)(qword_1000FDCC0 + 1440);
                  }

                  else
                  {
                    uint8x16_t v84 = 0;
                    uint8x16_t v83 = 0;
                    LODWORD(v85) = 0;
                  }

                  sub_1000B2560(a1 + 9132, *(_DWORD *)(a1 + 432), v83, v84, v85, 0);
                  uint16x8_t v86 = qword_1000FDCC0;
                  if (!qword_1000FDCC0) {
                    goto LABEL_207;
                  }
                }

                if (*(_DWORD *)(v86 + 4464)) {
                  sub_10009ABAC(*(void *)(a1 + 9256));
                }
LABEL_207:
                uint16x8_t v87 = *(void *)(a1 + 9264);
                if (v87) {
                  sub_100051628(v87);
                }
                uint16x8_t v88 = sub_1000B3298(*(void *)(a1 + 376));
                *(_DWORD *)(a1 + 620) = v88;
                if (*(_DWORD *)(a1 + 8896))
                {
                  int32x4_t v89 = v88 + *(_DWORD *)(a1 + 9360) + 2;
                  *(_DWORD *)(a1 + 616) = v89;
                  *(_DWORD *)(a1 + 612) = v89;
                }

                int32x4_t v90 = qword_1000FDCC0;
                if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1684))
                {
                  uint64_t v91 = sub_1000B323C(*(void *)(a1 + 376));
                  *(_DWORD *)(a1 + 9280) = v91;
                  int32x4_t v90 = qword_1000FDCC0;
                }

                else
                {
                  uint64_t v91 = 0;
                  *(_DWORD *)(a1 + 9280) = 0;
                  *(_WORD *)(a1 + 456) = -1;
                }

                if (v90) {
                  uint16x8_t v92 = *(_DWORD *)(v90 + 1288);
                }
                else {
                  uint16x8_t v92 = 0;
                }
                *(_DWORD *)(a1 + 9284) = v92;
                switch(*(_DWORD *)(a1 + 544))
                {
                  case 2:
                    uint64_t v94 = sub_100070AA4;
                    unint64_t v95 = sub_1000653C8;
                    if (v90 && *(void *)(v90 + 3616))
                    {
                      unint64_t v95 = sub_1000654A0;
                      uint64_t v94 = sub_100070C28;
                    }

                    *(void *)(a1 + 9392) = v95;
                    *(void *)(a1 + 9400) = v94;
                    if (v91)
                    {
                      if (v90)
                      {
                        if (!*(void *)(a1 + 656))
                        {
                          int32x4_t v96 = *(void *)(v90 + 3616);
                          if (v96 >= 1)
                          {
                            uint64_t v97 = sub_1000C1074(2 * v96);
                            *(void *)(a1 + 656) = v97;
                            if (!v97) {
                              goto LABEL_248;
                            }
                            int32x4_t v98 = qword_1000FDCC0 ? 2LL * *(void *)(qword_1000FDCC0 + 3616) : 0LL;
                            int v102 = sub_1000C1074(v98);
                            *(void *)(a1 + 664) = v102;
                            if (!v102) {
                              goto LABEL_248;
                            }
                          }
                        }
                      }
                    }

                    break;
                  case 3:
                  case 0xB:
                    *(void *)(a1 + 9392) = sub_100065850;
                    if (v91) {
                      uint64_t v93 = sub_100070FA8;
                    }
                    else {
                      uint64_t v93 = sub_100071184;
                    }
                    *(void *)(a1 + 9400) = v93;
                    break;
                  case 5:
                    *(void *)(a1 + 9392) = sub_100065654;
                    *(void *)(a1 + 9400) = sub_100070DFC;
                    *(_DWORD *)(a1 + 9284) = 0;
                    break;
                  default:
                    break;
                }

                if (*(_DWORD *)(a1 + 8896))
                {
                  if (*(_DWORD *)(a1 + 8904)) {
                    int v99 = sub_1000650E8;
                  }
                  else {
                    int v99 = sub_1000652E8;
                  }
                }

                else
                {
                  int v99 = sub_100064D98;
                }

                *(void *)(a1 + 9408) = v99;
                if (qword_1000FDCC0
                  && *(_DWORD *)(qword_1000FDCC0 + 4736)
                  && (unsigned int v100 = *(_DWORD *)(a1 + 544), v100 <= 0xB)
                  && ((1 << v100) & 0x828) != 0
                  && *__na
                  && !*v104
                  && *(__int16 *)(a1 + 456) == -1)
                {
                  *(void *)(a1 + 528) = sub_100071314;
                  if (!*(_DWORD *)(a1 + 9280)) {
                    goto LABEL_254;
                  }
                }

                else
                {
                  *(void *)(a1 + 528) = sub_100071C1C;
                  if (!*(_DWORD *)(a1 + 9280)) {
                    goto LABEL_254;
                  }
                }

  *(_DWORD *)(a1 + 304) = 4;
  *(void *)int v5 = 0x200000002LL;
  *(_OWORD *)(v5 + 8) = xmmword_1000F2210;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)dbl_1000F2220;
  if (sub_1000C8AE4(a3, "thth"))
  {
LABEL_9:
    goto LABEL_17;
  }

  int32x4_t v90 = 0LL;
  int16x8_t v45 = 0LL;
LABEL_16:
  uint16x8_t v46 = v33;
  int32x4_t v47 = sub_10008D758(a1, v33, v100, v37, v38, v39, v40, v41);
  if (v47 >= *(_DWORD *)(a1 + 72) || v43 < 1)
  {
    unsigned int v24 = 0LL;
    goto LABEL_53;
  }

  int32x4_t v49 = v47;
  unsigned int v24 = 0LL;
  if (!v25)
  {
    do
    {
      uint16x8_t v79 = (unsigned int *)(*(void *)(*(void *)(a1 + 32)
                                       + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56)
                                                                                             + 8LL * (v49 >> 8))
                                                                                 + 2LL * v49) >> 5) & 0x7F8))
                           + 12LL
      uint16x8_t v80 = *v79;
      uint16x8_t v81 = v79[2];
      uint16x8_t v82 = *(void *)(*(void *)(a1 + 96) + ((v80 >> 5) & 0x7FFFFF8));
      *int16x8_t v45 = *(_BYTE *)(v82 + v80);
      if (*(_BYTE *)(v82 + v80))
      {
        uint8x16_t v83 = v80 + 1;
        uint8x16_t v84 = v45 + 1;
        do
        {
          uint16x8_t v85 = *(void *)(*(void *)(a1 + 96) + 8LL * (v83 >> 8));
          *v84++ = *(_BYTE *)(v85 + v83);
          LODWORD(v85) = *(unsigned __int8 *)(v85 + v83++);
        }

        while ((_DWORD)v85);
      }

      uint16x8_t v86 = sub_1000C88E4((unint64_t)v45);
      uint16x8_t v88 = sub_1000C8928(v45, v33, v86, v87);
      if (v88 > 0) {
        break;
      }
      if (!v88)
      {
        *(_DWORD *)(a5 + 4LL * (int)v24) = v81;
        unsigned int v24 = (v24 + 1);
      }
    }

    while ((int)v24 < v43);
    goto LABEL_53;
  }

  uint64_t v94 = v23;
  uint64_t v93 = v42;
  do
  {
    int32x4_t v89 = v24;
    while (1)
    {
      int32x4_t v51 = *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v49 >> 8)) + 2LL
                                                                                             * v49);
      uint16x8_t v52 = (unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8 * v50) + 12 * v51);
      int32x4_t v53 = *v52;
      int v99 = v52[2];
      uint16x8_t v54 = *(void *)(*(void *)(a1 + 96) + ((v53 >> 5) & 0x7FFFFF8));
      *int16x8_t v45 = *(_BYTE *)(v54 + v53);
      if (*(_BYTE *)(v54 + v53))
      {
        int32x4_t v55 = v53 + 1;
        int32x4_t v56 = v45 + 1;
        do
        {
          int32x4_t v57 = *(void *)(*(void *)(a1 + 96) + 8LL * (v55 >> 8));
          *v56++ = *(_BYTE *)(v57 + v55);
          LODWORD(v57) = *(unsigned __int8 *)(v57 + v55++);
        }

        while ((_DWORD)v57);
      }

      int32x4_t v58 = sub_1000C88E4((unint64_t)v45);
      uint64_t v60 = sub_1000C8928(v45, v46, v58, v59);
      if (v60 > 0)
      {
LABEL_52:
        unsigned int v24 = v89;
        goto LABEL_53;
      }

      if (v60)
      {
        unsigned int v24 = v89;
        goto LABEL_49;
      }

      int32x4_t v61 = v42;
      if (v42 != 16) {
        break;
      }
      uint64_t v62 = (int)sub_100086FB0((char *)v45, *(_DWORD *)(a1 + 304), a1 + 312);
      uint16x8_t v63 = v97[v62];
      v97[v62] = 0;
      unint64_t v64 = *(_DWORD *)(a1 + 304);
      if (sub_1000CF11C(v97, 0LL))
      {
        unint64_t v64 = *(_DWORD *)(a1 + 304);
LABEL_36:
        int32x4_t v61 = sub_100086200((uint64_t)v97, v64);
        v97[v62] = v63;
        uint64_t v23 = v94;
        uint16x8_t v46 = v98;
        uint16x8_t v42 = v93;
        break;
      }

      v97[v62] = v63;
      uint64_t v23 = v94;
      uint16x8_t v46 = v98;
      uint16x8_t v42 = v93;
LABEL_26:
    }

    int32x4_t v65 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8 * v50) + v51);
    if ((v65 & v61) == 0) {
      goto LABEL_26;
    }
    if (v65 == 16)
    {
      int32x4_t v66 = sub_1000C88E4((unint64_t)v45);
      uint64_t v67 = v53 + v66 + 1;
      uint64_t v68 = *(void *)(a1 + 96);
      uint64_t v69 = (v53 + v66 + 1);
      int32x4_t v70 = *(unsigned __int8 *)(*(void *)(v68 + 8LL * (v67 >> 8)) + v69);
      if (*(_BYTE *)(*(void *)(v68 + 8LL * (v67 >> 8)) + v69))
      {
        int32x4_t v71 = 0;
        do
        {
          int32x4_t v70 = v71 + 1;
          ++v71;
        }

        while (v72);
      }

      int32x4_t v73 = v67 + v70 + 1;
      int32x4_t v74 = *(void *)(v68 + 8LL * (v73 >> 8));
      *int16x8_t v45 = *(_BYTE *)(v74 + v73);
      int32x4_t v75 = *(unsigned __int8 *)(v74 + v73);
      if ((_DWORD)v75)
      {
        LODWORD(v75) = v66 + v70 + v53 + 3;
        int32x4_t v76 = v45 + 1;
        do
        {
          int32x4_t v77 = *(void *)(*(void *)(a1 + 96) + 8LL * (v75 >> 8));
          *v76++ = *(_BYTE *)(v77 + v75);
          LODWORD(v77) = *(unsigned __int8 *)(v77 + v75);
          int32x4_t v75 = (v75 + 1);
        }

        while ((_DWORD)v77);
      }
    }

    *(_DWORD *)(a5 + 4LL * (int)v89) = v99;
    unsigned int v24 = v89 + 1;
LABEL_49:
    ++v49;
  }

  while ((signed int)v49 < *(_DWORD *)(a1 + 72) && (int)v24 < a6);
LABEL_53:
  sub_1000CB038(v46, v91);
  sub_1000CB038(v23, v92);
  sub_1000C0EF8((uint64_t)v97);
  return v24;
}

      uint64_t result = sub_1000B21BC(v5, v15, (uint64_t)a3);
      goto LABEL_25;
    }

    goto LABEL_23;
  }

  return result;
}

  *a6 = v14;
  return result;
}

  uint64_t v15 = v24;
  uint64_t result = 0LL;
  if (!v21) {
    goto LABEL_18;
  }
  return result;
}

      CFRetain(v10);
      goto LABEL_163;
    }

    if (v12) {
      goto LABEL_15;
    }
  }

  if (!v9)
  {
    int v10 = 0LL;
    goto LABEL_163;
  }

uint64_t sub_100013C2C( uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6, double a7, double a8, int16x8_t a9)
{
  uint64_t v9 = *(unsigned int *)(a1 + 1104);
  int v10 = *(_DWORD *)(a1 + 1296);
  if (v10 == 3) {
    goto LABEL_4;
  }
  if (v10 == 4)
  {
    if (*(_DWORD *)(a1 + 2012))
    {
LABEL_4:
      unsigned int v11 = a2;
      goto LABEL_6;
    }

    if (*(_DWORD *)(a1 + 1176)) {
      unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3;
    }
    else {
      unsigned int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

LABEL_6:
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    a2 = v12 + a3;
  }

  unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 160) + 4LL * (int)a2);
  if ((int)v9 < 1) {
  uint64_t v14 = *(int8x16_t **)(a1 + 1544);
  }
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v16 = (int)(*(_DWORD *)(a1 + 1120) * a2);
  if (v9 >= 8)
  {
    if (v9 >= 0x20)
    {
      uint64_t v17 = v9 & 0x7FFFFFE0;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = (int32x4_t)*(unsigned int *)(*(void *)(a1 + 160) + 4LL * (int)a2);
      uint64_t v20 = (uint16x8_t *)(v15 + 2 * v16 + 32);
      uint64_t v21 = v14 + 1;
      a9.i64[1] = 0xFFFFFF03FFFFFF02LL;
      uint64_t v22 = v9 & 0xFFFFFFE0;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      do
      {
        uint16x8_t v29 = v20[-2];
        uint16x8_t v30 = v20[-1];
        uint16x8_t v31 = *v20;
        uint16x8_t v32 = v20[1];
        v20 += 4;
        int8x16_t v33 = v21[-1];
        int16x8_t v34 = (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F0300);
        int16x8_t v35 = (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F0310);
        uint16x8_t v36 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1000F0320));
        int32x4_t v37 = (int32x4_t)vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v36.i8);
        uint16x8_t v38 = (uint16x8_t)vuzp1q_s16(v35, v34);
        int32x4_t v39 = (int32x4_t)vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v38.i8);
        int32x4_t v40 = (int32x4_t)vmull_high_u16(v29, v36);
        int32x4_t v41 = (int32x4_t)vmull_high_u16(v30, v38);
        uint16x8_t v42 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F0320));
        int32x4_t v43 = (int32x4_t)vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v42.i8);
        uint16x8_t v44 = (uint16x8_t)vuzp1q_s16( (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F0310),  (int16x8_t)vqtbl1q_s8(*v21, (int8x16_t)xmmword_1000F0300));
        int32x4_t v45 = (int32x4_t)vmull_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v44.i8);
        int32x4_t v46 = (int32x4_t)vmull_high_u16(v31, v42);
        int32x4_t v47 = (int32x4_t)vmull_high_u16(v32, v44);
        int32x4_t v24 = vsubq_s32(v24, vaddq_s32(v41, v41));
        int32x4_t v18 = vsubq_s32(v18, vaddq_s32(v40, v40));
        int32x4_t v23 = vsubq_s32(v23, vaddq_s32(v39, v39));
        int32x4_t v19 = vsubq_s32(v19, vaddq_s32(v37, v37));
        int32x4_t v28 = vsubq_s32(v28, vaddq_s32(v47, v47));
        int32x4_t v26 = vsubq_s32(v26, vaddq_s32(v46, v46));
        int32x4_t v27 = vsubq_s32(v27, vaddq_s32(v45, v45));
        int32x4_t v25 = vsubq_s32(v25, vaddq_s32(v43, v43));
        v21 += 2;
        v22 -= 32LL;
      }

      while (v22);
      unsigned int v13 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v25, v19), vaddq_s32(v27, v23)),  vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24))));
      if (v17 == v9) {
        goto LABEL_25;
      }
      if ((v9 & 0x18) == 0) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    uint64_t v48 = v17;
    uint64_t v17 = v9 & 0xFFFFFFF8;
    int32x4_t v49 = 0uLL;
    int32x4_t v50 = (int32x4_t)v13;
    int32x4_t v51 = (uint16x8_t *)(v15 + 2 * v48 + 2 * v16);
    uint16x8_t v52 = (uint64_t *)((char *)v14->i64 + v48);
    uint64_t v53 = v48 - v17;
    do
    {
      uint16x8_t v54 = *v51++;
      uint16x8_t v55 = v54;
      v54.i64[0] = *v52++;
      a9.i64[0] = v54.i64[0];
      a9 = vuzp1q_s16( (int16x8_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0330),  (int16x8_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0320));
      int32x4_t v56 = (int32x4_t)vmull_u16(*(uint16x4_t *)v55.i8, *(uint16x4_t *)a9.i8);
      int32x4_t v57 = (int32x4_t)vmull_high_u16(v55, (uint16x8_t)a9);
      int32x4_t v49 = vsubq_s32(v49, vaddq_s32(v57, v57));
      int32x4_t v50 = vsubq_s32(v50, vaddq_s32(v56, v56));
      v53 += 8LL;
    }

    while (v53);
    unsigned int v13 = vaddvq_s32(vaddq_s32(v50, v49));
    if (v17 == v9) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  uint64_t v17 = 0LL;
LABEL_23:
  int32x4_t v58 = &v14->u8[v17];
  int32x4_t v59 = (unsigned __int16 *)(v15 + 2 * v17 + 2 * v16);
  uint64_t v60 = v9 - v17;
  do
  {
    int v62 = *v59++;
    int v61 = v62;
    int v63 = *v58++;
    v13 -= 2 * v61 * v63;
    --v60;
  }

  while (v60);
LABEL_25:
  uint64_t v64 = *(int *)(a1 + 1124) * (uint64_t)(int)v11;
  uint64_t v65 = *(void *)(a1 + 1216);
  int32x4_t v66 = *(uint16x8_t **)(a1 + 1584);
  if (v9 < 8)
  {
    uint64_t v67 = 0LL;
    goto LABEL_36;
  }

  if (v9 >= 0x20)
  {
    uint64_t v67 = v9 & 0x7FFFFFE0;
    int32x4_t v68 = 0uLL;
    int32x4_t v69 = (int32x4_t)v13;
    int32x4_t v70 = v66 + 2;
    int32x4_t v71 = (uint8x8_t *)(v64 + v65 + 16);
    uint64_t v72 = v9 & 0xFFFFFFE0;
    int32x4_t v73 = 0uLL;
    int32x4_t v74 = 0uLL;
    int32x4_t v75 = 0uLL;
    int32x4_t v76 = 0uLL;
    int32x4_t v77 = 0uLL;
    int32x4_t v78 = 0uLL;
    do
    {
      uint16x8_t v80 = v70[-2];
      uint16x8_t v79 = v70[-1];
      uint16x8_t v82 = *v70;
      uint16x8_t v81 = v70[1];
      v70 += 4;
      uint8x16_t v83 = *(uint8x16_t *)v71[-2].i8;
      uint16x8_t v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
      uint16x8_t v85 = vmovl_high_u8(v83);
      uint16x8_t v86 = vmovl_u8(*v71);
      uint16x8_t v87 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
      int32x4_t v74 = (int32x4_t)vmlal_high_u16((uint32x4_t)v74, v85, v79);
      int32x4_t v73 = (int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v85.i8, *(uint16x4_t *)v79.i8);
      int32x4_t v68 = (int32x4_t)vmlal_high_u16((uint32x4_t)v68, v84, v80);
      int32x4_t v69 = (int32x4_t)vmlal_u16((uint32x4_t)v69, *(uint16x4_t *)v84.i8, *(uint16x4_t *)v80.i8);
      int32x4_t v78 = (int32x4_t)vmlal_high_u16((uint32x4_t)v78, v87, v81);
      int32x4_t v77 = (int32x4_t)vmlal_u16((uint32x4_t)v77, *(uint16x4_t *)v87.i8, *(uint16x4_t *)v81.i8);
      int32x4_t v76 = (int32x4_t)vmlal_high_u16((uint32x4_t)v76, v86, v82);
      int32x4_t v75 = (int32x4_t)vmlal_u16((uint32x4_t)v75, *(uint16x4_t *)v86.i8, *(uint16x4_t *)v82.i8);
      v71 += 4;
      v72 -= 32LL;
    }

    while (v72);
    unsigned int v13 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v75, v69), vaddq_s32(v77, v73)),  vaddq_s32(vaddq_s32(v76, v68), vaddq_s32(v78, v74))));
    if (v67 == v9) {
    if ((v9 & 0x18) == 0)
    }
    {
LABEL_36:
      uint64_t v97 = (unsigned __int8 *)(v65 + v67 + v64);
      int32x4_t v98 = (unsigned __int16 *)v66 + v67;
      uint64_t v99 = v9 - v67;
      do
      {
        int v101 = *v98++;
        int v100 = v101;
        int v102 = *v97++;
        v13 += v102 * v100;
        --v99;
      }

      while (v99);
    }
  }

  else
  {
    uint64_t v67 = 0LL;
  }

  uint64_t v88 = v67;
  uint64_t v67 = v9 & 0xFFFFFFF8;
  int32x4_t v89 = 0uLL;
  int32x4_t v90 = (int32x4_t)v13;
  uint64_t v91 = (uint16x8_t *)((char *)v66 + 2 * v88);
  uint16x8_t v92 = (uint64_t *)(v65 + v88 + v64);
  uint64_t v93 = v88 - v67;
  do
  {
    uint16x8_t v94 = *v91++;
    uint16x8_t v95 = v94;
    v94.i64[0] = *v92++;
    uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    int32x4_t v89 = (int32x4_t)vmlal_high_u16((uint32x4_t)v89, v96, v95);
    int32x4_t v90 = (int32x4_t)vmlal_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8, *(uint16x4_t *)v95.i8);
    v93 += 8LL;
  }

  while (v93);
  unsigned int v13 = vaddvq_s32(vaddq_s32(v90, v89));
  if (v67 != v9) {
    goto LABEL_36;
  }
}

      if (++v3 == a1) {
        return 0LL;
      }
    }
  }

  return 1LL;
}

  sub_1000CB094(v6);
  return v28;
}

  sub_1000CB094(v6);
  return v28;
}

  *a3 = v5;
  return result;
}

        uint64_t v9 = (__int16 *)v5;
      }

uint64_t sub_10001405C(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v5 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v7 = *v5;
      int v6 = v5[1];
    }

    else
    {
      unsigned int v11 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v7 = *v11;
      int v6 = v11[1];
    }

    int v9 = v6 - v7;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v7 = a2;
    }
    uint64_t v12 = *(int *)(a1 + 1120) * (uint64_t)(int)v7;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v8 = (uint8x8_t *)(*(void *)(a1 + 96) + v12);
      int v10 = *(_DWORD *)(a1 + 1296);
      if (v10 == 3) {
        goto LABEL_20;
      }
    }

    else
    {
      int v8 = (uint8x8_t *)(*(void *)(a1 + 16) + v12);
      int v10 = *(_DWORD *)(a1 + 1296);
      if (v10 == 3)
      {
LABEL_20:
        if (v9 >= 1) {
          goto LABEL_21;
        }
        goto LABEL_47;
      }
    }
  }

  else
  {
    int v8 = (uint8x8_t *)(*(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v4);
    int v9 = 1;
    int v10 = *(_DWORD *)(a1 + 1296);
    if (v10 == 3) {
      goto LABEL_20;
    }
  }

  if (v10 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }

  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    if (v9 >= 1)
    {
LABEL_21:
      unsigned int v13 = *(uint8x8_t **)(a1 + 1544);
      uint64_t v14 = (_DWORD *)(*(void *)(a1 + 1240) + 4LL * (int)a2);
      uint64_t v15 = (uint16x8_t *)(*(void *)(a1 + 1208) + 2LL * (int)(*(_DWORD *)(a1 + 1124) * a2));
      BOOL v16 = v10 == 4;
      BOOL v17 = v10 == 4;
      if (v16) {
        uint64_t v18 = *(int *)(a1 + 1100);
      }
      else {
        uint64_t v18 = 0LL;
      }
      uint16x8_t v19 = vmovl_u8(*v13);
      int32x4_t v20 = (int32x4_t)vmovl_high_u16(v19);
      int32x4_t v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8);
      uint64_t v22 = v15 + 3;
      uint64_t v23 = 2 * v18;
      int32x4_t v24 = v13 + 3;
      unsigned int v25 = 0x40000000;
      while (1)
      {
        uint16x8_t v28 = vmovl_u8(*v8);
        int32x4_t v29 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8);
        int32x4_t v30 = vsubq_s32((int32x4_t)vmovl_high_u16(v28), v20);
        int32x4_t v31 = vsubq_s32(v29, v21);
        int v32 = vaddvq_s32( vmlaq_s32( vmulq_s32(vmulq_s32(v30, v30), (int32x4_t)vmovl_high_u16(*v15)),  vmulq_s32(v31, v31),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v15->i8)));
        unsigned int v26 = v32;
        if (v32 > *(_DWORD *)(a1 + 1056))
        {
          unsigned int v26 = *(_DWORD *)(a1 + 1060) + v32;
        }

        else
        {
          uint64_t v33 = *(unsigned int *)(a1 + 1104);
          if ((int)v33 >= 9)
          {
            unint64_t v34 = v33 - 8;
            if ((unint64_t)(v33 - 8) < 8)
            {
              uint64_t v35 = 8LL;
              goto LABEL_44;
            }

            if (v34 >= 0x20)
            {
              unint64_t v37 = 0LL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = (int32x4_t)v32;
              unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFE0LL;
              int32x4_t v40 = v22;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              int32x4_t v44 = 0uLL;
              int32x4_t v45 = 0uLL;
              int32x4_t v46 = 0uLL;
              do
              {
                uint8x16_t v47 = *(uint8x16_t *)v8[v37 / 8 + 1].i8;
                uint8x16_t v48 = *(uint8x16_t *)v8[v37 / 8 + 3].i8;
                uint8x16_t v49 = *(uint8x16_t *)v24[v37 / 8 - 2].i8;
                uint8x16_t v50 = *(uint8x16_t *)v24[v37 / 8].i8;
                int16x8_t v51 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v49.i8);
                int16x8_t v52 = (int16x8_t)vsubl_high_u8(v47, v49);
                int16x8_t v53 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v50.i8);
                int16x8_t v54 = (int16x8_t)vsubl_high_u8(v48, v50);
                uint16x8_t v55 = v40[-2];
                uint16x8_t v56 = v40[-1];
                uint16x8_t v57 = *v40;
                uint16x8_t v58 = v40[1];
                v40 += 4;
                int32x4_t v42 = vmlaq_s32(v42, vmull_high_s16(v52, v52), (int32x4_t)vmovl_high_u16(v56));
                int32x4_t v41 = vmlaq_s32( v41,  vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8));
                int32x4_t v38 = vmlaq_s32(v38, vmull_high_s16(v51, v51), (int32x4_t)vmovl_high_u16(v55));
                int32x4_t v39 = vmlaq_s32( v39,  vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v55.i8));
                int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v54, v54), (int32x4_t)vmovl_high_u16(v58));
                int32x4_t v45 = vmlaq_s32( v45,  vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8));
                int32x4_t v44 = vmlaq_s32(v44, vmull_high_s16(v53, v53), (int32x4_t)vmovl_high_u16(v57));
                int32x4_t v43 = vmlaq_s32( v43,  vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8));
                v37 += 32LL;
              }

              while (v36 != v37);
              unsigned int v26 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v43, v39), vaddq_s32(v45, v41)),  vaddq_s32(vaddq_s32(v44, v38), vaddq_s32(v46, v42))));
              if (v34 == v36) {
                goto LABEL_26;
              }
              if ((v34 & 0x18) == 0)
              {
                uint64_t v35 = v36 | 8;
                do
                {
LABEL_44:
                  int v65 = v8->u8[v35] - v13->u8[v35];
                  v26 += v65 * v65 * v15->u16[v35++];
                }

                while (v33 != v35);
                goto LABEL_26;
              }
            }

            else
            {
              unint64_t v36 = 0LL;
            }

            unint64_t v59 = v34 & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF8LL) + 8;
            int32x4_t v60 = 0uLL;
            int32x4_t v61 = (int32x4_t)v26;
            uint64_t v62 = 2 * v36 + 16;
            do
            {
              int16x8_t v63 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)&v8[1] + v36), *(uint8x8_t *)((char *)v13 + v36 + 8));
              uint16x8_t v64 = *(uint16x8_t *)((char *)v15 + v62);
              int32x4_t v60 = vmlaq_s32(v60, vmull_high_s16(v63, v63), (int32x4_t)vmovl_high_u16(v64));
              int32x4_t v61 = vmlaq_s32( v61,  vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v64.i8));
              v62 += 16LL;
              v36 += 8LL;
            }

            while (v59 != v36);
            unsigned int v26 = vaddvq_s32(vaddq_s32(v61, v60));
            if (v34 == v59) {
              goto LABEL_26;
            }
            goto LABEL_44;
          }
        }

LABEL_26:
        int v8 = (uint8x8_t *)((char *)v8 + *(int *)(a1 + 1100));
        v14 += v17;
        uint64_t v15 = (uint16x8_t *)((char *)v15 + v23);
        uint64_t v22 = (uint16x8_t *)((char *)v22 + v23);
        if (v9-- <= 1) {
      }
        }
    }
  }

  else
  {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    if (v9 >= 1) {
      goto LABEL_21;
    }
  }

        int v10 = (uint8x8_t *)((char *)v10 + *(int *)(a1 + 1100));
        v16 += v19;
        BOOL v17 = (uint64_t *)((char *)v17 + v20);
        if (v11-- <= 1) {
      }
        }
    }
  }

  else
  {
    a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    if (v11 >= 1) {
      goto LABEL_21;
    }
  }

    ++v28;
    uint64_t v22 = v75;
  }

  int32x4_t v40 = 1LL;
  while (sub_100027B84(v19, *(_DWORD *)(*(void *)(v32 + 280) + 4 * v40), &v77))
  {
    ++v40;
    int32x4_t v39 = *(int *)(v32 + 268);
    if (v40 >= v39) {
      goto LABEL_44;
    }
  }

    int32x4_t v29 = 0LL;
    goto LABEL_28;
  }

  int32x4_t v29 = 0LL;
LABEL_29:
  int32x4_t v75 = v26;
  int32x4_t v78 = a5;
  int32x4_t v30 = 0LL;
  int32x4_t v31 = (void *)(v22 + (v23 << 6) + 8);
  int32x4_t v76 = -1;
  uint16x8_t v80 = 0;
  int v32 = 0x40000000;
  do
  {
    uint64_t v33 = v30 + *v83;
    unint64_t v34 = *(void *)(*v31 + 8LL * (v33 >> 10));
    uint64_t v35 = v33 & 0x3FF;
    unint64_t v36 = (unsigned __int16 *)(v34 + 12LL * (v33 & 0x3FF));
    unint64_t v37 = *v36;
    if (v37 == a4) {
      uint16x8_t v80 = *(_WORD *)(v34 + 12LL * (v33 & 0x3FF) + 8);
    }
    if (!a9 || v37 == 65534 || (result = sub_1000BBCE0(v16, v37, v78), uint16x8_t v28 = v82, (_DWORD)result))
    {
      if (v29)
      {
        uint64_t result = *(unsigned __int16 *)(v29 + 2 * v30);
        int32x4_t v38 = *(__int16 *)(v34 + 12LL * v35 + 8) + (__int16)result;
        if (v38 < v32) {
          goto LABEL_30;
        }
      }

      else
      {
        int32x4_t v39 = *v36;
        if (v39 == 65534) {
          int32x4_t v40 = -3;
        }
        else {
          int32x4_t v40 = sub_1000BB868(v16, v39, 0LL);
        }
        uint16x8_t v87 = v40;
        uint64_t result = sub_10005E540(v86, v85, 1LL, &v87, v75);
        uint16x8_t v28 = v82;
        int32x4_t v38 = *(__int16 *)(v34 + 12LL * v35 + 8) + (__int16)result;
        if (v38 < v32)
        {
LABEL_30:
          int32x4_t v76 = *(_DWORD *)(v34 + 12LL * v35 + 4);
          int v32 = v38;
        }
      }
    }

    ++v30;
  }

  while (v28 != v30);
  if (v32 == 0x40000000)
  {
LABEL_46:
    *a8 = 0x4000;
  }

  else
  {
    LOWORD(v41) = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int32x4_t v41 = *(_DWORD *)(qword_1000FDCC0 + 4168);
    }
    *a8 += v32 - (v80 + v41);
    uint64_t *v73 = v76;
  }

  return result;
}

        if (!(_DWORD)a1) {
          goto LABEL_36;
        }
        if ((_DWORD)a1 != 2) {
          goto LABEL_37;
        }
LABEL_28:
        if (*(int *)(v4 + 6320) >= 1)
        {
          uint64_t v15 = 0LL;
          BOOL v16 = 0LL;
          do
          {
            *(_DWORD *)(*(void *)(v4 + 6312) + v15 + 16) = 0x40000000;
            sub_1000A2820(*(void *)(*(void *)(v4 + 6312) + v15 + 8));
            ++v16;
            v15 += 24LL;
          }

          while (v16 < *(int *)(v4 + 6320));
        }

        sub_10003AAF8(*(void *)(v4 + 112));
        BOOL v17 = *(void *)(v4 + 136);
        if (v17) {
          sub_10003AAF8(v17);
        }
        uint64_t v18 = *(void *)(v4 + 144);
        if (v18) {
          sub_10003AAF8(v18);
        }
        LODWORD(a1) = 2;
LABEL_36:
        *(_DWORD *)(v4 + 5688) = 0;
        *(_DWORD *)(v4 + 6448) = 0;
LABEL_37:
        if ((_DWORD)a1 == 2) {
          uint64_t v23 = 12;
        }
        break;
      default:
        goto LABEL_36;
    }
  }

  else
  {
    LODWORD(a1) = 0;
  }

  *a3 = a1;
  return v23;
}

    unint64_t v179 = a2;
    int16x8_t v63 = 100LL;
    uint16x8_t v64 = v28;
    while (1)
    {
      int v65 = 4LL * v63;
      int32x4_t v66 = (_DWORD *)sub_1000CAF58(v65, v39, v40, v41, v42, v43, v44, v45);
      int32x4_t v74 = (_DWORD *)sub_1000CAF58(v65, v67, v68, v69, v70, v71, v72, v73);
      uint16x8_t v82 = (char *)sub_1000CAF58(v65, v75, v76, v77, v78, v79, v80, v81);
      uint8x16_t v83 = sub_1000B5964(*(uint64_t **)(v15 + 8), v64, (unint64_t)v38, 0, 1u, v63, v66, v74, v82, 0LL, 0LL);
      if ((int)v83 <= 0)
      {
        sub_1000CB038(v82, 4LL * v63);
        sub_1000CB038(v74, 4LL * v63);
        sub_1000CB038(v66, 4LL * v63);
        sub_1000CB038(v38, v177);
        int32x4_t v60 = 0LL;
        *char v176 = 0;
        goto LABEL_82;
      }

      uint64_t v91 = v83;
      sub_1000CB038(v82, 4LL * v63);
      sub_1000CB038(v74, 4LL * v63);
      sub_1000CB038(v66, 4LL * v63);
      int16x8_t v63 = v91;
    }

    v187 = v38;
    float64x2_t v166 = 2LL * v63;
    unsigned int v171 = (void *)sub_1000CAF58(v166, v84, v85, v86, v87, v88, v89, v90);
    int32x4_t v98 = 0LL;
    uint64_t v99 = 4LL * v91;
    v188 = v15;
    do
    {
      int32x4_t v194 = -1;
      int v100 = v66[v98 / 4];
      if ((_DWORD)v100 == -1)
      {
        int v101 = v64;
        int v102 = *(_DWORD *)&v82[v98];
        v191 = 2LL * (v102 + 1);
        uint64_t v103 = (_WORD *)sub_1000CAF58(v191, v100, v92, v93, v94, v95, v96, v97);
        sub_1000CC548(v103, &v187[v74[v98 / 4]], v102 + 1);
        if (v101 == 11)
        {
          int v104 = sub_1000B324C(*(uint64_t **)(v188 + 8));
          __int16 v105 = sub_1000B3288(*(uint64_t **)(v188 + 8));
          if (v105 <= v102) {
            uint64_t v113 = v102;
          }
          else {
            uint64_t v113 = v105;
          }
          int v114 = v113 + 1;
          if (v104 <= v102) {
            int32x4_t v115 = v102;
          }
          else {
            int32x4_t v115 = v104;
          }
          int v116 = v115 + 1;
          v182 = 2LL * (v115 + 1);
          int16x8_t v117 = (_WORD *)sub_1000CAF58(v182, v106, v107, v108, v109, v110, v111, v112);
          v180 = 2LL * v114;
          int16x8_t v125 = (_WORD *)sub_1000CAF58(v180, v118, v119, v120, v121, v122, v123, v124);
          BOOL v184 = v103;
          int v126 = v116;
          int32x4_t v127 = v125;
          if (sub_1000D6710((uint64_t)v103, (unint64_t)v117, v126, v125, v114))
          {
            uint64_t v15 = v188;
            int32x4_t v60 = sub_1000507F4(v188, v117, v127, &v194);
            int v128 = v127;
            uint64_t v99 = 4LL * v91;
          }

          else
          {
            int32x4_t v60 = 4LL;
            int v128 = v127;
            uint64_t v99 = 4LL * v91;
            uint64_t v15 = v188;
          }

          sub_1000CB038(v128, v180);
          sub_1000CB038(v117, v182);
          sub_1000CB038(v184, v191);
          v66[v98 / 4] = v194;
          uint16x8_t v64 = v189;
          if ((_DWORD)v60)
          {
LABEL_48:
            sub_1000CB038(v171, v166);
            sub_1000CB038(v82, v65);
            sub_1000CB038(v74, v65);
            sub_1000CB038(v66, v65);
            sub_1000CB038(v187, v177);
            goto LABEL_82;
          }
        }

        else
        {
          int32x4_t v60 = sub_1000507F4(v188, v103, 0LL, &v194);
          uint64_t v99 = 4LL * v91;
          int32x4_t v129 = v103;
          uint64_t v15 = v188;
          sub_1000CB038(v129, v191);
          v66[v98 / 4] = v194;
          uint16x8_t v64 = v189;
          if ((_DWORD)v60) {
            goto LABEL_48;
          }
        }
      }

      else
      {
        int32x4_t v194 = v66[v98 / 4];
        int32x4_t v60 = sub_1000505E8(v15, v100, 0LL);
        if ((_DWORD)v60) {
          goto LABEL_48;
        }
      }

      v98 += 4LL;
    }

    while (v99 != v98);
    int32x4_t v130 = v187;
    if (v174 > 2)
    {
LABEL_55:
      int v134 = 0LL;
      else {
        uint64_t v135 = v91;
      }
      do
      {
        *((_WORD *)v171 + v134) = sub_1000B3A9C(*(void *)(v15 + 8), v66[v134]);
        ++v134;
      }

      while (v135 != v134);
      if (sub_100032044(*(void *)(v15 + 80), v179, v172, v196))
      {
        uint64_t v136 = sub_1000323C8(*(void *)(v15 + 80), v179, (__int16 *)v171, v91, v170, v196[0]);
        int v144 = v136;
        if (v169 && v136)
        {
          int v145 = 20 * (v91 + 1);
          BOOL v181 = 4LL * v145;
          uint32x4_t v146 = (unsigned int *)sub_1000CAF58(v181, v137, v138, v139, v140, v141, v142, v143);
          double v175 = 2LL * ((int)v91 + 1);
          uint16x4_t v186 = (__int16 *)sub_1000CAF58(v175, v147, v148, v149, v150, v151, v152, v153);
          float64x2_t v185 = sub_1000B8D4C(*(void *)(v15 + 8), v189, (unint64_t)v187, v91, v66, (uint64_t)v74, v145, v146);
          if (v185 >= 1)
          {
            uint16x8_t v154 = 0;
            if (v167 >= 255) {
              uint32x4_t v155 = 255;
            }
            else {
              uint32x4_t v155 = v167;
            }
            BOOL v183 = (v155 & ~(v155 >> 31));
            double v173 = v146;
            do
            {
              v190 = v154;
              float64x2_t v157 = 0LL;
              float64x2_t v158 = -1LL;
              uint64_t v192 = v146;
              uint32x4_t v159 = v146;
              do
              {
                float64x2_t v160 = v157;
                int32x4_t v161 = *v159++;
                ++v157;
              }

              while (v161 != -1);
              if ((_DWORD)v158)
              {
                int32x4_t v162 = v192;
                float64x2_t v163 = v186;
                do
                {
                  float64x2_t v164 = *v162++;
                  *v163++ = sub_1000B3A9C(*(void *)(v15 + 8), v164);
                  --v160;
                }

                while (v160);
              }

              uint64x2_t v156 = sub_1000323C8(*(void *)(v15 + 80), v179, v186, v158, v183, v196[0]);
              uint32x4_t v146 = &v192[(v158 + 1)];
              uint16x8_t v154 = v190 + 1;
            }

            while (v190 + 1 != v185);
            int v144 = v156;
            int32x4_t v130 = v187;
            uint32x4_t v146 = v173;
          }

          sub_1000CB038(v186, v175);
          sub_1000CB038(v146, v181);
        }
      }

      else
      {
        int v144 = 0;
      }

      sub_1000CB038(v171, v166);
      sub_1000CB038(v82, v65);
      sub_1000CB038(v74, v65);
      sub_1000CB038(v66, v65);
      sub_1000CB038(v130, v177);
      int32x4_t v60 = 0LL;
      if (v144) {
        *char v176 = 1;
      }
    }

    else
    {
      int v131 = 0LL;
      while (1)
      {
        int32x4_t v132 = sub_1000B8D68(*(uint64_t **)(v15 + 8), v66[v131]);
        v66[v131] = v132;
        int32x4_t v133 = sub_1000505E8(v15, v132, 0LL);
        if ((_DWORD)v133) {
          break;
        }
      }

      int32x4_t v60 = v133;
      sub_1000CB038(v171, v166);
      sub_1000CB038(v82, v65);
      sub_1000CB038(v74, v65);
      sub_1000CB038(v66, v65);
      sub_1000CB038(v187, 2LL * (v168 + 2));
    }

    if (a9) {
      *a9 = v26;
    }
    uint64_t v33 = 0;
    uint64_t result = sub_10004D428(a1, v26, a3, v19, (uint64_t)a5, a10, a11, a12, &v33);
    int32x4_t v30 = 0LL;
    do
      int32x4_t v31 = v25[v30++];
    while (v31 != -1);
    if (!(_DWORD)result)
    {
      *a6 = v33;
      if (a8)
      {
        uint64_t v18 = sub_100039818(*(void *)(a1 + 5512));
        goto LABEL_7;
      }

      return 0LL;
    }
  }

  return result;
}

  if ((int)v8 < *a2)
  {
    int v8 = (int)v8;
    do
      *(_DWORD *)(*((void *)a2 + 1) + 4 * v8++) = 0x40000000;
    while (v8 < *a2);
    LODWORD(v8) = a2[1];
  }

  int32x4_t v27 = v8 - 1;
  if ((int)v8 < 1)
  {
    LODWORD(v32) = 0;
  }

  else
  {
    uint16x8_t v28 = *((void *)a2 + 5);
    if ((_DWORD)v8 == 1)
    {
      int32x4_t v29 = (int *)*((void *)a2 + 5);
    }

    else
    {
      int32x4_t v29 = (int *)*((void *)a2 + 5);
      do
      {
        int32x4_t v30 = v29;
        while (1)
        {
          int32x4_t v31 = *v30++;
          if (v31 == -1) {
            break;
          }
          int32x4_t v29 = v30;
          if ((unint64_t)v30 >= v28 + 4LL * a2[8])
          {
            int32x4_t v29 = 0LL;
            goto LABEL_41;
          }
        }

        ++v29;
        --v27;
      }

      while (v27);
    }

  if (!qword_1000FDCC0
    || *(__int16 *)(a1 + 562) + (__int16)v14 > *(__int16 *)(a1 + 546)
    || *(uint64_t *)(qword_1000FDCC0 + 3256) < 1
    || !sub_1000069E0(*(void *)(a1 + 384)))
  {
    return (__int16)v4;
  }

  uint16x8_t v19 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint16x8_t v19 = *(_WORD *)(qword_1000FDCC0 + 3256);
  }
  int32x4_t v20 = (__int16)(v4 - v19);
  else {
    return (__int16)v20;
  }
}

    int v8 = 0LL;
    int32x4_t v24 = (_WORD *)(a1 + 564);
    int v9 = 4;
LABEL_27:
    *int32x4_t v24 = 0;
    goto LABEL_28;
  }

    unsigned int v25 = 0LL;
LABEL_27:
    uint64_t v18 = v28;
    unsigned int v26 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  unsigned int v25 = 1LL;
  unsigned int v26 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_33;
  }
LABEL_32:
  if (!*(_DWORD *)(v26 + 3664)) {
    goto LABEL_33;
  }
  return v25;
}

  uint8x16_t v47 = v102 + 1;
  {
    uint8x16_t v50 = *((unsigned __int8 *)v14 + 38);
    if (v50 + 1 == *(unsigned __int8 *)(v18 + 38))
    {
      int16x8_t v51 = *((unsigned __int16 *)v14 + 16);
      int16x8_t v52 = v14;
      uint64_t v14 = (__int128 *)v18;
      if (v51 == *(unsigned __int16 *)(v18 + 32))
      {
        while (1)
        {
          uint64_t v14 = (__int128 *)v18;
          if (*(void *)v52 != *(void *)v18) {
            goto LABEL_53;
          }
          int16x8_t v53 = *(int *)(a1 + 568) - 1LL;
          int16x8_t v54 = (char *)v52 + 2 * v53;
          LOWORD(v107) = *((_WORD *)v54 + 12);
          uint16x8_t v55 = (char *)v52 + 4 * v53;
          HIDWORD(v107) = *((_DWORD *)v55 + 4);
          LOWORD(v108) = *((_WORD *)v54 + 14);
          HIDWORD(v108) = *((_DWORD *)v55 + 2);
          uint16x8_t v56 = *(_OWORD *)v18;
          uint16x8_t v57 = *(_OWORD *)(v18 + 32);
          *(_OWORD *)(i + 16) = *(_OWORD *)(v18 + 16);
          *(_OWORD *)(i + 32) = v57;
          *(_OWORD *)uint64_t i = v56;
          if (*(_WORD *)(i + 34))
          {
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9416))(a1, &v107, i);
          }

          else
          {
            uint16x8_t v58 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
            unint64_t v59 = (__int16)v107;
            int32x4_t v60 = *(__int16 *)(i + 24);
            if ((__int16)v107 < v60)
            {
              *(_WORD *)(i + 24) = v107;
              *(_DWORD *)(i + 16) = HIDWORD(v107);
              *(_WORD *)(i + 28) = v108;
              *(_DWORD *)(i + 8) = HIDWORD(v108);
              int32x4_t v60 = v59;
            }

            if (v60 <= (__int16)v8[58])
            {
              int32x4_t v61 = *v58;
              uint64_t v62 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v61);
              if (v62 == 0x4000)
              {
                LOWORD(v62) = sub_100015BC0(*(void *)(a1 + 384), v61);
                LOWORD(v60) = *(_WORD *)(i + 24);
              }

              int16x8_t v63 = v62 - v8[56] + v60;
              *(_WORD *)(i + 24) = v63;
              *(_DWORD *)(i + 8) += (__int16)v62;
              *(_WORD *)(i + 36) = v63;
              if (v63 < (__int16)v8[51])
              {
                v8[51] = v63;
                v8[53] = *(_WORD *)(i + 32);
                v8[119] = *(_WORD *)(i + 34);
              }
            }

            else
            {
              *(_WORD *)(i + 36) = 0x4000;
              *(_WORD *)(i + 24) = 0x4000;
            }
          }

          uint16x8_t v64 = *(unsigned __int8 *)(i + 38);
          if (v109 - 1 <= v64) {
            break;
          }
LABEL_50:
          LODWORD(v10) = v10 + 1;
          uint64_t v67 = *(void *)(a1 + 9024);
          int32x4_t v68 = *(void *)(v67 + 8LL * (v10 >> 8));
          uint64_t v18 = v68 + 48LL * v10;
          ++v47;
          uint64_t i = *(void *)(v67 + 8LL * (v47 >> 8)) + 48LL * v47;
          uint8x16_t v50 = *((unsigned __int8 *)v14 + 38);
          if (v50 + 1 == *(unsigned __int8 *)(v18 + 38))
          {
            int16x8_t v52 = v14;
          }

          goto LABEL_52;
        }

        if (v109 == v64)
        {
          int v65 = *(__int16 *)(i + 24);
          int32x4_t v66 = *(void *)(a1 + 9240);
          if (*(_DWORD *)v66 <= (int)v65)
          {
LABEL_48:
            goto LABEL_50;
          }
        }

        else
        {
          int v65 = *(__int16 *)(i + 2LL * *(int *)(a1 + 568) + 22);
          int32x4_t v66 = *(void *)(a1 + 9240);
        }

        ++*(_WORD *)(*(void *)(v66 + 8) + 2 * v65);
        ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
        goto LABEL_48;
      }
    }

    else
    {
LABEL_52:
      int16x8_t v52 = v14;
      uint64_t v14 = (__int128 *)v18;
    }

              unsigned int v25 = *(_WORD *)(v21 + 2LL * ((int)v24 + ~(_DWORD)v9));
LABEL_27:
              uint64_t v35 = v25;
              sub_10007A674(*(void *)(a1 + 232), &v35, &v32);
              unsigned int v26 = v36 - v32;
              v36 -= v32;
              if (v10)
              {
                int32x4_t v27 = v12 - *(_DWORD *)(a1 + 328) - *(unsigned __int8 *)(*(void *)(a1 + 440) + v35);
                uint16x8_t v28 = v26 - v27;
                if (v26 < v27)
                {
                  uint16x8_t v28 = v27 - v26;
                  if (v27 - v26 >= *(_DWORD *)(a1 + 340)) {
                    goto LABEL_33;
                  }
                  goto LABEL_32;
                }

                unint64_t v36 = v12 - *(_DWORD *)(a1 + 328) - *(unsigned __int8 *)(*(void *)(a1 + 440) + v35);
                unsigned int v26 = v27;
                if (v28 < *(_DWORD *)(a1 + 340)) {
LABEL_32:
                }
                  unint64_t v36 = v26 - *(unsigned __int8 *)(*(void *)(a1 + 344) + v28);
              }

    sub_1000BCBC8(v9);
    return v10;
  }

  return 0LL;
}

        int32x4_t v46 = v13;
        LODWORD(v48) = v17;
        goto LABEL_27;
      }
    }

    if (v17)
    {
      --v17;
      uint16x8_t v19 = (unint64_t)v47;
      int32x4_t v20 = ++v47;
      LODWORD(v19) = *(unsigned __int8 *)v19;
    }

    else
    {
      unsigned int v13 = v46 + 2;
      uint16x8_t v19 = v46[1];
      if (*(_BYTE *)(v12 + v19) != 2)
      {
        goto LABEL_23;
      }

      int32x4_t v21 = *(void *)(v4 + 104);
      uint64_t v22 = *(unsigned __int16 *)(v21 + 2 * v19);
      BOOL v17 = *(unsigned __int16 *)(v21 + 2 * v19 + 2) + ~(_DWORD)v22;
      uint16x8_t v19 = *(void *)(v4 + 88) + v22;
      int32x4_t v20 = (unsigned __int8 *)(v19 + 1);
      uint8x16_t v47 = (unsigned __int8 *)(v19 + 1);
      LODWORD(v19) = *(unsigned __int8 *)v19;
    }

    if (v17)
    {
      --v17;
LABEL_25:
      uint8x16_t v47 = v20 + 1;
      goto LABEL_26;
    }

          if (*(void *)(a1 + 40)) {
            BOOL v17 = *(_DWORD *)(a1 + 48);
          }
          else {
            BOOL v17 = -1;
          }
          goto LABEL_35;
        }
      }

      else if ((v14 & 0x80000000) == 0 && v14 <= *(_DWORD *)(a1 + 52))
      {
        *(_DWORD *)(a1 + 48) = v14;
        goto LABEL_26;
      }
    }

    ++v23;
  }

  while (v23 < v24);
  int32x4_t v45 = v22;
  if (!(_DWORD)v22 || (int32x4_t v46 = v28, (v47 = sub_1000C1074(2LL * v28)) == 0))
  {
LABEL_50:
    int32x4_t v31 = 0LL;
    goto LABEL_460;
  }

  uint8x16_t v48 = (unsigned __int16 *)v47;
  uint8x16_t v49 = v46;
  if (v46 >= 1)
  {
    if (v46 < 0x10)
    {
      uint8x16_t v50 = 0LL;
      goto LABEL_54;
    }

    uint8x16_t v50 = v46 & 0xFFFFFFF0;
    int16x8_t v51 = (int16x8_t)xmmword_1000F03C0;
    int16x8_t v52 = (int16x8_t *)(v47 + 16);
    v53.i64[0] = 0x8000800080008LL;
    v53.i64[1] = 0x8000800080008LL;
    v54.i64[0] = 0x10001000100010LL;
    v54.i64[1] = 0x10001000100010LL;
    uint16x8_t v55 = v50;
    do
    {
      v52[-1] = v51;
      *int16x8_t v52 = vaddq_s16(v51, v53);
      int16x8_t v51 = vaddq_s16(v51, v54);
      v52 += 2;
      v55 -= 16LL;
    }

    while (v55);
    for (; v46 != v50; ++v50)
LABEL_54:
      *(_WORD *)(v47 + 2 * v50) = v50;
  }

  uint16x8_t v56 = a2[1];
  if ((int)v22 > 1)
  {
    if ((_DWORD)v22 == 2)
    {
      uint16x8_t v57 = 1LL;
      goto LABEL_67;
    }

    uint16x8_t v58 = a2[1];
    uint16x8_t v57 = (v22 - 1LL) | 1;
    unint64_t v59 = a2 + 65;
    int32x4_t v60 = (v22 - 1LL) & 0xFFFFFFFFFFFFFFFELL;
    int32x4_t v61 = v58;
    do
    {
      if (*(v59 - 32) < v58) {
        uint16x8_t v58 = *(v59 - 32);
      }
      if (*v59 < v61) {
        int32x4_t v61 = *v59;
      }
      v59 += 64;
      v60 -= 2LL;
    }

    while (v60);
    if (v58 >= v61) {
      uint16x8_t v58 = v61;
    }
    uint16x8_t v56 = v58;
    if (v22 - 1LL != ((v22 - 1LL) & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_67:
      uint64_t v62 = &a2[32 * v57 + 1];
      int16x8_t v63 = v22 - v57;
      do
      {
        int v65 = *v62;
        v62 += 32;
        uint16x8_t v64 = v65;
        if (v65 < v56) {
          uint16x8_t v56 = v64;
        }
        --v63;
      }

      while (v63);
    }
  }

  v371 = v56;
  int32x4_t v66 = v56 != 1 || qword_1000FDCC0 == 0;
  if (!v66 && *(_DWORD *)(qword_1000FDCC0 + 992))
  {
    sub_1000D3890(v395, (uint64_t)a2, v22, v361, v362, v363, v48, 1);
    uint8x16_t v49 = v372;
  }

  BOOL v360 = v49;
  qword_100102A10 = (uint64_t)a2;
  qsort(v48, (int)v22, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000D3E08);
  v394 = (char *)a2 + 14;
  v387 = (uint64_t)v48;
  uint64_t v67 = v395;
  while (2)
  {
    int32x4_t v68 = v371;
    v409 = 0;
    v408 = v45;
    v392 = v371;
    if (!*(_DWORD *)(v67 + 116))
    {
      int v131 = 0;
      v370 = 1;
      v371 = 0x7FFFFFFF;
      int32x4_t v132 = v48;
LABEL_247:
      v180 = v132++;
      v379 = v132;
      __dstb = v180;
      v375 = v131;
      while (1)
      {
        BOOL v181 = *v180;
        BOOL v183 = &a2[32 * v181];
        BOOL v184 = *v183;
        if ((_DWORD)v184 == 0x7FFFFFFF) {
          goto LABEL_246;
        }
        v402 = (__int128 *)&a2[32 * v181];
        v187 = v183[1];
        uint16x4_t v186 = (int *)(v183 + 1);
        float64x2_t v185 = v187;
        if (v187 > v68) {
          goto LABEL_320;
        }
        v188 = *(void *)v67;
        v189 = *(void *)(*(void *)v67 + ((v184 >> 5) & 0x7FFFFF8));
        v190 = (__int16 *)(v189 + 8LL * v184);
        if (*v190 == -2)
        {
          v191 = *(unsigned __int16 *)(v189 + 8LL * v184 + 2);
          if (!v191)
          {
            *(_DWORD *)v402 = 0x7FFFFFFF;
            uint64_t v67 = v395;
            goto LABEL_246;
          }

          if ((__int16)v191 < 1)
          {
LABEL_263:
            __int128 v201 = 0x40000000;
            goto LABEL_277;
          }
        }

        else
        {
          v191 = (unsigned __int16)v190[1];
        }

        uint64_t v192 = *(void *)(v395 + 48);
        int32x4_t v193 = (v191 - 1);
        int32x4_t v194 = (unsigned int *)(v192 + 16LL * v193);
        int32x4_t v195 = v194[1];
        if (v195 < 1) {
          goto LABEL_263;
        }
        int32x4_t v196 = *v194;
        int32x4_t v197 = v195 + v196;
        int32x4_t v198 = *(_DWORD *)(v192 + 16 * v193 + 12);
        else {
          uint16x8_t v199 = v197;
        }
        uint16x8_t v200 = v199 - v196;
        if (v199 - v196 >= 2)
        {
          __int128 v202 = v196 + (v200 & 0xFFFFFFFE);
          __int128 v203 = 0x40000000;
          __int128 v204 = v200 & 0xFFFFFFFE;
          int64x2_t v205 = 0x40000000;
          do
          {
            if (v198
               + *(__int16 *)(*(void *)(v188 + 8LL * ((v196 + 1) >> 8)) + 8LL * (v196 + 1) + 4) < v205)
              int64x2_t v205 = v198
                   + *(__int16 *)(*(void *)(v188 + 8LL * ((v196 + 1) >> 8)) + 8LL * (v196 + 1) + 4);
            v196 += 2;
            v204 -= 2;
          }

          while (v204);
          if (v203 >= v205) {
            __int128 v201 = v205;
          }
          else {
            __int128 v201 = v203;
          }
          if (v200 == (v200 & 0xFFFFFFFE)) {
            goto LABEL_277;
          }
        }

        else
        {
          __int128 v201 = 0x40000000;
          __int128 v202 = v196;
        }

        do
        {
          ++v202;
        }

        while ((int)v202 < v197);
LABEL_277:
        if (v191 == a4)
        {
          uint64_t v67 = v395;
          if (v185)
          {
            uint32x4_t v221 = &a2[32 * v181];
            unint64_t v222 = v221[3] - v201;
            v221[3] = v222;
            *(_DWORD *)v402 = 0x7FFFFFFF;
            v409 = v131;
            if (v131 >= 1)
            {
              do
              {
                --v409;
              }

              while (v409 > 0);
            }

            if (v409 != v131)
            {
              v223 = *__dstb;
              BOOL v224 = &v48[v409];
              j__memmove(v224 + 1, v224, 2 * (v131 - v409));
              uint64_t v67 = v395;
              *BOOL v224 = v223;
              int32x4_t v132 = v379;
            }

            goto LABEL_320;
          }

          int32x4_t v45 = (v45 - 1);
          v408 = v45;
          if ((_DWORD)v45)
          {
            v182 = 2 * ((int)v45 - v131);
            v180 = __dstb;
            goto LABEL_249;
          }

uint64_t sub_100014440(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 1072);
  BOOL v5 = __OFSUB__(a2, v4);
  int v6 = a2 - v4;
  if (v6 < 0 != v5)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      unsigned int v7 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v9 = *v7;
      int v8 = v7[1];
    }

    else
    {
      unsigned int v13 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v9 = *v13;
      int v8 = v13[1];
    }

    int v11 = v8 - v9;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v9 = a2;
    }
    uint64_t v14 = *(int *)(a1 + 1120) * (uint64_t)(int)v9;
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v10 = (uint8x8_t *)(*(void *)(a1 + 96) + v14);
      int v12 = *(_DWORD *)(a1 + 1296);
      if (v12 == 3) {
        goto LABEL_20;
      }
    }

    else
    {
      int v10 = (uint8x8_t *)(*(void *)(a1 + 16) + v14);
      int v12 = *(_DWORD *)(a1 + 1296);
      if (v12 == 3)
      {
LABEL_20:
        if (v11 >= 1) {
          goto LABEL_21;
        }
        goto LABEL_47;
      }
    }
  }

  else
  {
    int v10 = (uint8x8_t *)(*(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v6);
    int v11 = 1;
    int v12 = *(_DWORD *)(a1 + 1296);
    if (v12 == 3) {
      goto LABEL_20;
    }
  }

  if (v12 != 4)
  {
    a2 = 0;
    goto LABEL_20;
  }

  if (*(_DWORD *)(a1 + 2012)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    if (v11 >= 1)
    {
LABEL_21:
      uint64_t v15 = *(uint8x8_t **)(a1 + 1544);
      BOOL v16 = (_DWORD *)(*(void *)(a1 + 1240) + 4LL * (int)a2);
      BOOL v17 = (uint64_t *)(*(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2);
      BOOL v18 = v12 == 4;
      BOOL v19 = v12 == 4;
      if (v18) {
        uint64_t v20 = *(int *)(a1 + 1100);
      }
      else {
        uint64_t v20 = 0LL;
      }
      uint16x8_t v21 = vmovl_u8(*v15);
      int32x4_t v22 = (int32x4_t)vmovl_high_u16(v21);
      int32x4_t v23 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8);
      unsigned int v24 = 0x40000000;
      while (1)
      {
        uint16x8_t v27 = vmovl_u8(*v10);
        int32x4_t v28 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8);
        int32x4_t v29 = vsubq_s32((int32x4_t)vmovl_high_u16(v27), v22);
        int32x4_t v30 = vsubq_s32(v28, v23);
        v2.i64[0] = *v17;
        int32x4_t v31 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F0330);
        int32x4_t v2 = (int32x4_t)vqtbl1q_s8((int8x16_t)v2, (int8x16_t)xmmword_1000F0320);
        v2.i32[0] = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v29, v29), v2), vmulq_s32(v30, v30), v31));
        unsigned int v25 = v2.i32[0];
        if (v2.i32[0] > *(_DWORD *)(a1 + 1056))
        {
          unsigned int v25 = *(_DWORD *)(a1 + 1060) + v2.i32[0];
        }

        else
        {
          uint64_t v32 = *(unsigned int *)(a1 + 1104);
          if ((int)v32 >= 9)
          {
            unint64_t v33 = v32 - 8;
            if ((unint64_t)(v32 - 8) < 8)
            {
              uint64_t v34 = 8LL;
              goto LABEL_44;
            }

            if (v33 >= 0x20)
            {
              unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0LL;
              int32x4_t v36 = 0uLL;
              int32x4_t v37 = (int32x4_t)v2.u32[0];
              uint64_t v38 = 3LL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v3 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              int32x4_t v43 = 0uLL;
              do
              {
                uint8x16_t v44 = *(uint8x16_t *)v10[v38 - 2].i8;
                uint8x16_t v45 = *(uint8x16_t *)v10[v38].i8;
                uint8x16_t v46 = *(uint8x16_t *)v15[v38 - 2].i8;
                uint8x16_t v47 = *(uint8x16_t *)v15[v38].i8;
                int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v46.i8);
                int16x8_t v49 = (int16x8_t)vsubl_high_u8(v44, v46);
                int16x8_t v50 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v47.i8);
                int16x8_t v51 = (int16x8_t)vsubl_high_u8(v45, v47);
                int8x16_t v52 = *(int8x16_t *)&v17[v38 - 2];
                int8x16_t v53 = *(int8x16_t *)&v17[v38];
                int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v49, v49), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F0300));
                int32x4_t v39 = vmlaq_s32( v39,  vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v49.i8),  (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F0310));
                int32x4_t v36 = vmlaq_s32(v36, vmull_high_s16(v48, v48), (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F0320));
                int32x4_t v37 = vmlaq_s32( v37,  vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8),  (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1000F0330));
                int32x4_t v43 = vmlaq_s32(v43, vmull_high_s16(v51, v51), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0300));
                int32x4_t v42 = vmlaq_s32( v42,  vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8),  (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0310));
                int32x4_t v41 = vmlaq_s32(v41, vmull_high_s16(v50, v50), (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0320));
                int32x4_t v3 = vmlaq_s32( v3,  vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8),  (int32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1000F0330));
                v38 += 4LL;
              }

              while (v38 * 8 - (v33 & 0xFFFFFFFFFFFFFFE0LL) != 24);
              int32x4_t v2 = vaddq_s32(v42, v39);
              unsigned int v25 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v3, v37), v2), vaddq_s32(vaddq_s32(v41, v36), vaddq_s32(v43, v40))));
              if (v33 == v35) {
                goto LABEL_26;
              }
              if ((v33 & 0x18) == 0)
              {
                uint64_t v34 = v35 | 8;
                do
                {
LABEL_44:
                  int v60 = v10->u8[v34] - v15->u8[v34];
                  v25 += v60 * v60 * *((unsigned __int8 *)v17 + v34++);
                }

                while (v32 != v34);
                goto LABEL_26;
              }
            }

            else
            {
              unint64_t v35 = 0LL;
            }

            uint64_t v34 = (v33 & 0xFFFFFFFFFFFFFFF8LL) + 8;
            int32x4_t v54 = 0uLL;
            int32x4_t v55 = (int32x4_t)v25;
            unint64_t v56 = v35 + 8;
            do
            {
              int16x8_t v57 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v10 + v56), *(uint8x8_t *)((char *)v15 + v56));
              int32x4_t v58 = vmull_high_s16(v57, v57);
              int32x4_t v2 = vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8);
              v3.i64[0] = *(uint64_t *)((char *)v17 + v56);
              int32x4_t v59 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1000F0320);
              int32x4_t v3 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1000F0330);
              int32x4_t v54 = vmlaq_s32(v54, v58, v59);
              int32x4_t v55 = vmlaq_s32(v55, v2, v3);
              v56 += 8LL;
            }

            while (v56 - (v33 & 0xFFFFFFFFFFFFFFF8LL) != 8);
            unsigned int v25 = vaddvq_s32(vaddq_s32(v55, v54));
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8LL)) {
              goto LABEL_26;
            }
            goto LABEL_44;
          }
        }

uint64_t sub_100014824( uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  int v10 = *(uint8x8_t **)(a1 + 1544);
  int v11 = *(_DWORD *)(a1 + 1072);
  BOOL v12 = __OFSUB__(a2, v11);
  int v13 = a2 - v11;
  if (v13 < 0 != v12)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      uint64_t v14 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      unsigned int v15 = *v14;
      int v16 = v14[1];
    }

    else
    {
      BOOL v19 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      unsigned int v15 = *v19;
      int v16 = v19[1];
    }

    int v18 = v16 - v15;
    if (*(_DWORD *)(a1 + 2012)) {
      unsigned int v15 = a2;
    }
    uint64_t v20 = *(int *)(a1 + 1120) * (uint64_t)(int)v15;
    else {
      uint64_t v21 = *(void *)(a1 + 16);
    }
    uint64_t v17 = v21 + v20;
  }

  else
  {
    uint64_t v17 = *(void *)(a1 + 784) + *(int *)(a1 + 1120) * (uint64_t)v13;
    int v18 = 1;
  }

  int v22 = *(_DWORD *)(a1 + 1056);
  uint64_t v23 = *(int *)(a1 + 1100);
  uint64_t v24 = v18 - 1LL;
  int v25 = *(_DWORD *)(a1 + 1296);
  if (v25 != 3)
  {
    if (v25 == 4)
    {
      if (!*(_DWORD *)(a1 + 2012))
      {
        if (*(_DWORD *)(a1 + 1176)) {
          a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
        }
        else {
          a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
        }
      }
    }

    else
    {
      a2 = 0;
    }
  }

  uint64_t v26 = 0LL;
  uint64_t v27 = v24 * v23;
  uint64_t v28 = *(void *)(a1 + 1216) + *(int *)(a1 + 1124) * (uint64_t)(int)a2;
  int32x4_t v29 = (_DWORD *)(*(void *)(a1 + 1240) + 4LL * (int)a2);
  int v30 = *(_DWORD *)(a1 + 1140);
  uint16x8_t v31 = vmovl_u8(*v10);
  int32x4_t v32 = (int32x4_t)vmovl_high_u16(v31);
  int32x4_t v33 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8);
  while (1)
  {
    uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)(v17 + v26));
    int32x4_t v35 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8);
    int32x4_t v36 = vsubq_s32((int32x4_t)vmovl_high_u16(v34), v32);
    int32x4_t v37 = vsubq_s32(v35, v33);
    a9.i64[0] = *(void *)(v28 + v26);
    int32x4_t v38 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0330);
    a9 = (int32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_1000F0320);
    int v39 = vaddvq_s32(vmlaq_s32(vmulq_s32(vmulq_s32(v36, v36), a9), vmulq_s32(v37, v37), v38));
    if (v39 <= v22)
    {
      int16x8_t v40 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 8), v10[1]);
      uint16x8_t v41 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 8));
      int32x4_t v42 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8);
      a9 = (int32x4_t)vmovl_high_u16(v41);
      int v43 = vaddvq_s32( vmlaq_s32( vmulq_s32(vmull_high_s16(v40, v40), a9),  vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8),  v42))
          + *v29
          + v39;
      if (v43 < v30)
      {
        int16x8_t v44 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 16), v10[2]);
        uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 16));
        int32x4_t v46 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8);
        a9 = (int32x4_t)vmovl_high_u16(v45);
        int v47 = vaddvq_s32( vmlaq_s32( vmulq_s32(vmull_high_s16(v44, v44), a9),  vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8),  v46))
            + v43;
        if (v47 < v30)
        {
          int16x8_t v48 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v17 + v26 + 24), v10[3]);
          int32x4_t v49 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8);
          uint16x8_t v50 = vmovl_u8(*(uint8x8_t *)(v28 + v26 + 24));
          int32x4_t v51 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8);
          int32x4_t v52 = (int32x4_t)vmovl_high_u16(v50);
          int32x4_t v53 = vmulq_s32(vmull_high_s16(v48, v48), v52);
          v52.i32[0] = *(_DWORD *)(v17 + v26 + 32);
          v9.i32[0] = v10[4].i32[0];
          uint16x4_t v54 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
          int32x4_t v55 = (int32x4_t)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v52.i8), v54);
          a9 = vmulq_s32(v55, v55);
          v54.i32[0] = *(_DWORD *)(v28 + v26 + 32);
          int32x4_t v9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v54));
          int v56 = vaddvq_s32(vmlaq_s32(vmlaq_s32(v53, v49, v51), a9, v9)) + v47;
          if (v56 >= v22) {
            int v57 = v22;
          }
          else {
            int v57 = v56;
          }
          if (v56 < v30)
          {
            int v30 = v56;
            int v22 = v57;
          }
        }
      }
    }

    if (v27 == v26) {
      break;
    }
    ++v29;
    v26 += v23;
  }

uint64_t sub_100014AD4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_100004698(a1, a2, a3);
  uint64_t v8 = sub_100005528(a1, a2, a3);
  if (*(_DWORD *)(a1 + 1296) == 5)
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 1104);
  }

  else
  {
    unsigned int v9 = *(_DWORD *)sub_10000573C(a1, a2, a3);
    uint64_t v10 = *(unsigned int *)(a1 + 1104);
  }

  if (v10 < 8)
  {
    uint64_t v11 = v10;
    goto LABEL_18;
  }

  if (v10 < 0x20)
  {
    uint64_t v12 = 0LL;
LABEL_13:
    uint64_t v11 = v10 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v9;
    uint64_t v48 = ~v12 + v10;
    uint64_t v49 = v12 - (v10 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v8 - 14 + 2LL * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v50), (int32x4_t)vmovl_high_u16(v52))), v46);
      int32x4_t v47 = vaddq_s32( vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v50.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8))),  v47);
      v48 -= 8LL;
      v49 += 8LL;
    }

    while (v49);
    unsigned int v9 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v10 & 0x7FFFFFF8) == v10) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    goto LABEL_18;
  }

  uint64_t v12 = v10 & 0x7FFFFFE0;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = (int32x4_t)v9;
  uint64_t v15 = v10 - 1;
  uint64_t v16 = v10 & 0xFFFFFFE0;
  int32x4_t v17 = 0uLL;
  int32x4_t v18 = 0uLL;
  int32x4_t v19 = 0uLL;
  int32x4_t v20 = 0uLL;
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  do
  {
    uint64_t v23 = v7 + v15;
    int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
    int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    uint64_t v28 = v6 + v15;
    int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
    int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
    int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
    int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
    int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
    int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
    uint64_t v37 = v8 + 2LL * v15;
    int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
    int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
    int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
    int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
    int32x4_t v18 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v34), (int32x4_t)vmovl_high_u16(v39))), v18);
    int32x4_t v17 = vaddq_s32( vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v34.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8))),  v17);
    int32x4_t v13 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v33), (int32x4_t)vmovl_high_u16(v41))), v13);
    int32x4_t v14 = vaddq_s32( vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v33.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8))),  v14);
    int32x4_t v22 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v36), (int32x4_t)vmovl_high_u16(v43))), v22);
    int32x4_t v21 = vaddq_s32( vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v36.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8))),  v21);
    int32x4_t v20 = vaddq_s32(vabsq_s32(vmulq_s32(vmovl_high_s16(v35), (int32x4_t)vmovl_high_u16(v45))), v20);
    int32x4_t v19 = vaddq_s32( vabsq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v35.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8))),  v19);
    v15 -= 32LL;
    v16 -= 32LL;
  }

  while (v16);
  unsigned int v9 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
  if (v12 == v10) {
    return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if ((v10 & 0x18) != 0) {
    goto LABEL_13;
  }
  uint64_t v11 = v10 & 0x1F;
LABEL_18:
  unint64_t v53 = v11 + 1;
  do
  {
    if (v54 < 0) {
      int v54 = -v54;
    }
    v9 += v54;
    --v53;
  }

  while (v53 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v9 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100014E14(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  if (*(_DWORD *)(a1 + 1032))
  {
    uint64_t v5 = sub_100004724(a1, a2, a3);
    sub_10000482C(a1, v5, *(void *)(a1 + 1512));
    uint64_t v6 = *(void *)(a1 + 1512);
    uint64_t v7 = *(unsigned int *)(a1 + 1104);
LABEL_6:
    unsigned int v8 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  uint64_t v6 = sub_100004698(a1, a2, a3);
  uint64_t v7 = *(unsigned int *)(a1 + 1104);
LABEL_3:
  if (v7 < 8)
  {
    unsigned int v8 = 0;
    uint64_t v9 = v7;
    goto LABEL_18;
  }

  if (v7 >= 0x20)
  {
    int32x4_t v11 = 0uLL;
    uint64_t v10 = v7 & 0xFFFFFFE0;
    int32x4_t v12 = 0uLL;
    uint64_t v13 = v7 - 1;
    uint64_t v14 = v10;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    int32x4_t v17 = 0uLL;
    int32x4_t v18 = 0uLL;
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
    do
    {
      uint64_t v21 = v6 + v13;
      int8x16_t v22 = vrev64q_s8(*(int8x16_t *)(v21 - 15));
      uint8x16_t v23 = (uint8x16_t)vextq_s8(v22, v22, 8uLL);
      int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v21 - 31));
      uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
      uint64_t v26 = v4 + v13;
      int8x16_t v27 = vrev64q_s8(*(int8x16_t *)(v26 - 15));
      uint8x16_t v28 = (uint8x16_t)vextq_s8(v27, v27, 8uLL);
      int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v26 - 31));
      uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
      int16x8_t v31 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v28.i8);
      int16x8_t v32 = (int16x8_t)vsubl_high_u8(v23, v28);
      int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
      int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
      int32x4_t v16 = vmlal_high_s16(v16, v32, v32);
      int32x4_t v15 = vmlal_s16(v15, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
      int32x4_t v12 = vmlal_high_s16(v12, v31, v31);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
      int32x4_t v20 = vmlal_high_s16(v20, v34, v34);
      int32x4_t v19 = vmlal_s16(v19, *(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8);
      int32x4_t v18 = vmlal_high_s16(v18, v33, v33);
      int32x4_t v17 = vmlal_s16(v17, *(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8);
      v13 -= 32LL;
      v14 -= 32LL;
    }

    while (v14);
    unsigned int v8 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v17, v11), vaddq_s32(v19, v15)),  vaddq_s32(vaddq_s32(v18, v12), vaddq_s32(v20, v16))));
    if (v10 == v7) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    if ((v7 & 0x18) == 0)
    {
      uint64_t v9 = v7 & 0x1F;
LABEL_18:
      unint64_t v40 = v9 + 1;
      do
      {
        int v41 = *(unsigned __int8 *)(v6 + (v40 - 2)) - *(unsigned __int8 *)(v4 + (v40 - 2));
        v8 += v41 * v41;
        --v40;
      }

      while (v40 > 1);
      return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }

  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0LL;
  }

  uint64_t v9 = v7 & 7;
  int32x4_t v35 = (int32x4_t)v8;
  int32x4_t v36 = 0uLL;
  uint64_t v37 = ~v10 + v7;
  uint64_t v38 = v10 - (v7 & 0xFFFFFFF8);
  do
  {
    int16x8_t v39 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v6 - 7 + v37)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v4 - 7 + v37)));
    int32x4_t v36 = vmlal_high_s16(v36, v39, v39);
    int32x4_t v35 = vmlal_s16(v35, *(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
    v37 -= 8LL;
    v38 += 8LL;
  }

  while (v38);
  unsigned int v8 = vaddvq_s32(vaddq_s32(v35, v36));
  if ((v7 & 0x7FFFFFF8) != v7) {
    goto LABEL_18;
  }
  return (__int16)((*(_DWORD *)(a1 + 1052) * v8 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100015038(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  uint64_t v5 = sub_100004698(a1, a2, a3);
  uint64_t v6 = *(unsigned int *)(a1 + 1104);
  if ((int)v6 < 1)
  {
    unsigned int v7 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  if (v6 < 8)
  {
    unsigned int v7 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 1104);
    goto LABEL_16;
  }

  if (v6 < 0x20)
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0LL;
LABEL_11:
    uint64_t v8 = v6 & 7;
    int32x4_t v30 = (int32x4_t)v7;
    int32x4_t v31 = 0uLL;
    uint64_t v32 = ~v9 + v6;
    uint64_t v33 = v9 - (v6 & 0xFFFFFFF8);
    do
    {
      uint16x8_t v34 = vmovl_u8((uint8x8_t)vrev64_s8((int8x8_t)vabd_u8( *(uint8x8_t *)(v5 - 7 + v32),  *(uint8x8_t *)(v4 - 7 + v32))));
      int32x4_t v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v34);
      int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
      v32 -= 8LL;
      v33 += 8LL;
    }

    while (v33);
    unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v31));
    if ((v6 & 0x7FFFFFF8) == v6) {
      return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
    goto LABEL_16;
  }

  int32x4_t v10 = 0uLL;
  uint64_t v9 = v6 & 0xFFFFFFE0;
  int32x4_t v11 = 0uLL;
  uint64_t v12 = v6 - 1;
  uint64_t v13 = v9;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  int32x4_t v16 = 0uLL;
  int32x4_t v17 = 0uLL;
  int32x4_t v18 = 0uLL;
  int32x4_t v19 = 0uLL;
  do
  {
    uint64_t v20 = v5 + v12;
    uint64_t v21 = v4 + v12;
    int8x16_t v22 = vrev64q_s8((int8x16_t)vabdq_u8(*(uint8x16_t *)(v20 - 15), *(uint8x16_t *)(v21 - 15)));
    uint8x16_t v23 = (uint8x16_t)vextq_s8(v22, v22, 8uLL);
    uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)v23.i8);
    uint16x8_t v25 = vmovl_high_u8(v23);
    int8x16_t v26 = vrev64q_s8((int8x16_t)vabdq_u8(*(uint8x16_t *)(v20 - 31), *(uint8x16_t *)(v21 - 31)));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    uint16x8_t v28 = vmovl_u8(*(uint8x8_t *)v27.i8);
    uint16x8_t v29 = vmovl_high_u8(v27);
    int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v25);
    int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
    int32x4_t v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v24);
    int32x4_t v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v24.i8);
    int32x4_t v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v29);
    int32x4_t v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v29.i8);
    int32x4_t v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v28);
    int32x4_t v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v28.i8);
    v12 -= 32LL;
    v13 -= 32LL;
  }

  while (v13);
  unsigned int v7 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v16, v10), vaddq_s32(v18, v14)),  vaddq_s32(vaddq_s32(v17, v11), vaddq_s32(v19, v15))));
  if (v9 == v6) {
    return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }
  if ((v6 & 0x18) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = v6 & 0x1F;
LABEL_16:
  unint64_t v35 = v8 + 1;
  do
  {
    int v36 = *(unsigned __int8 *)(v5 + (v35 - 2)) - *(unsigned __int8 *)(v4 + (v35 - 2));
    if (v36 < 0) {
      int v36 = *(unsigned __int8 *)(v4 + (v35 - 2)) - *(unsigned __int8 *)(v5 + (v35 - 2));
    }
    v7 += v36;
    --v35;
  }

  while (v35 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v7 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100015224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = **(_DWORD **)(a1 + 1240);
  uint64_t v4 = *(unsigned int *)(a1 + 1104);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 1208);
    if (v4 < 8)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 1104);
      goto LABEL_15;
    }

    if (v4 >= 0x20)
    {
      uint64_t v7 = v4 & 0x7FFFFFE0;
      int32x4_t v8 = 0uLL;
      int32x4_t v9 = (int32x4_t)**(unsigned int **)(a1 + 1240);
      uint64_t v10 = v4 - 1;
      uint64_t v11 = v4 & 0xFFFFFFE0;
      int32x4_t v12 = 0uLL;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      int32x4_t v16 = 0uLL;
      int32x4_t v17 = 0uLL;
      do
      {
        uint64_t v18 = v5 + 2LL * v10;
        int8x16_t v19 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 30));
        uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, v19, 8uLL);
        int8x16_t v21 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 14));
        uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, v21, 8uLL);
        int8x16_t v23 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 62));
        uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, v23, 8uLL);
        int8x16_t v25 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 46));
        uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, v25, 8uLL);
        uint64_t v27 = a2 + v10;
        int8x16_t v28 = vrev64q_s8(*(int8x16_t *)(v27 - 15));
        uint8x16_t v29 = (uint8x16_t)vextq_s8(v28, v28, 8uLL);
        int8x16_t v30 = vrev64q_s8(*(int8x16_t *)(v27 - 31));
        uint8x16_t v31 = (uint8x16_t)vextq_s8(v30, v30, 8uLL);
        uint64_t v32 = a3 + v10;
        int8x16_t v33 = vrev64q_s8(*(int8x16_t *)(v32 - 15));
        uint8x16_t v34 = (uint8x16_t)vextq_s8(v33, v33, 8uLL);
        int8x16_t v35 = vrev64q_s8(*(int8x16_t *)(v32 - 31));
        uint8x16_t v36 = (uint8x16_t)vextq_s8(v35, v35, 8uLL);
        int16x8_t v37 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v34.i8);
        int32x4_t v38 = vmovl_s16(*(int16x4_t *)v37.i8);
        int32x4_t v39 = vmovl_high_s16(v37);
        int16x8_t v40 = (int16x8_t)vsubl_high_u8(v29, v34);
        int32x4_t v41 = vmovl_s16(*(int16x4_t *)v40.i8);
        int32x4_t v42 = vmovl_high_s16(v40);
        int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v36.i8);
        int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
        int32x4_t v45 = vmovl_high_s16(v43);
        int16x8_t v46 = (int16x8_t)vsubl_high_u8(v31, v36);
        int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
        int32x4_t v48 = vmovl_high_s16(v46);
        int32x4_t v13 = vmlaq_s32(v13, vmulq_s32(v42, (int32x4_t)vmovl_high_u16(v20)), v42);
        int32x4_t v12 = vmlaq_s32(v12, vmulq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20.i8)), v41);
        int32x4_t v8 = vmlaq_s32(v8, vmulq_s32(v39, (int32x4_t)vmovl_high_u16(v22)), v39);
        int32x4_t v9 = vmlaq_s32(v9, vmulq_s32(v38, (int32x4_t)vmovl_u16(*(uint16x4_t *)v22.i8)), v38);
        int32x4_t v17 = vmlaq_s32(v17, vmulq_s32(v48, (int32x4_t)vmovl_high_u16(v24)), v48);
        int32x4_t v16 = vmlaq_s32(v16, vmulq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v24.i8)), v47);
        int32x4_t v15 = vmlaq_s32(v15, vmulq_s32(v45, (int32x4_t)vmovl_high_u16(v26)), v45);
        int32x4_t v14 = vmlaq_s32(v14, vmulq_s32(v44, (int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8)), v44);
        v10 -= 32LL;
        v11 -= 32LL;
      }

      while (v11);
      unsigned int v3 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v14, v9), vaddq_s32(v16, v12)),  vaddq_s32(vaddq_s32(v15, v8), vaddq_s32(v17, v13))));
      if (v7 == v4) {
      if ((v4 & 0x18) == 0)
      }
      {
        uint64_t v6 = v4 & 0x1F;
LABEL_15:
        unint64_t v58 = v6 + 1;
        do
        {
          uint64_t v59 = (v58 - 2);
          int v60 = *(unsigned __int16 *)(v5 + 2LL * v59);
          LODWORD(v59) = *(unsigned __int8 *)(a2 + v59) - *(unsigned __int8 *)(a3 + v59);
          v3 += v59 * v60 * v59;
          --v58;
        }

        while (v58 > 1);
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    uint64_t v6 = v4 & 7;
    int32x4_t v49 = 0uLL;
    int32x4_t v50 = (int32x4_t)v3;
    uint64_t v51 = ~v7 + v4;
    uint64_t v52 = v7 - (v4 & 0xFFFFFFF8);
    do
    {
      int8x16_t v53 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v5 - 14 + 2LL * v51));
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v53, v53, 8uLL);
      int16x8_t v55 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v51)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v51)));
      int32x4_t v56 = vmovl_s16(*(int16x4_t *)v55.i8);
      int32x4_t v57 = vmovl_high_s16(v55);
      int32x4_t v49 = vmlaq_s32(v49, vmulq_s32(v57, v57), (int32x4_t)vmovl_high_u16(v54));
      int32x4_t v50 = vmlaq_s32(v50, vmulq_s32(v56, v56), (int32x4_t)vmovl_u16(*(uint16x4_t *)v54.i8));
      v51 -= 8LL;
      v52 += 8LL;
    }

    while (v52);
    unsigned int v3 = vaddvq_s32(vaddq_s32(v50, v49));
    if ((v4 & 0x7FFFFFF8) != v4) {
      goto LABEL_15;
    }
  }

uint64_t sub_1000154C8(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[276];
  if ((int)v3 < 1)
  {
    unsigned int v4 = 0;
    return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
  }

  if (v3 < 8)
  {
    unsigned int v4 = 0;
    uint64_t v5 = a1[276];
    goto LABEL_16;
  }

  if (v3 >= 0x20)
  {
    int32x4_t v7 = 0uLL;
    uint64_t v6 = v3 & 0xFFFFFFE0;
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v3 - 1;
    uint64_t v10 = v6;
    int32x4_t v11 = 0uLL;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    int32x4_t v14 = 0uLL;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    do
    {
      uint64_t v17 = a2 + v9;
      int8x16_t v18 = vrev64q_s8(*(int8x16_t *)(v17 - 15));
      uint8x16_t v19 = (uint8x16_t)vextq_s8(v18, v18, 8uLL);
      int8x16_t v20 = vrev64q_s8(*(int8x16_t *)(v17 - 31));
      uint8x16_t v21 = (uint8x16_t)vextq_s8(v20, v20, 8uLL);
      uint64_t v22 = a3 + v9;
      int8x16_t v23 = vrev64q_s8(*(int8x16_t *)(v22 - 15));
      uint8x16_t v24 = (uint8x16_t)vextq_s8(v23, v23, 8uLL);
      int8x16_t v25 = vrev64q_s8(*(int8x16_t *)(v22 - 31));
      uint8x16_t v26 = (uint8x16_t)vextq_s8(v25, v25, 8uLL);
      int16x8_t v27 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v24.i8);
      int16x8_t v28 = (int16x8_t)vsubl_high_u8(v19, v24);
      int16x8_t v29 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v26.i8);
      int16x8_t v30 = (int16x8_t)vsubl_high_u8(v21, v26);
      int32x4_t v12 = vmlal_high_s16(v12, v28, v28);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
      int32x4_t v8 = vmlal_high_s16(v8, v27, v27);
      int32x4_t v7 = vmlal_s16(v7, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
      int32x4_t v16 = vmlal_high_s16(v16, v30, v30);
      int32x4_t v15 = vmlal_s16(v15, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
      int32x4_t v14 = vmlal_high_s16(v14, v29, v29);
      int32x4_t v13 = vmlal_s16(v13, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
      v9 -= 32LL;
      v10 -= 32LL;
    }

    while (v10);
    unsigned int v4 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v13, v7), vaddq_s32(v15, v11)),  vaddq_s32(vaddq_s32(v14, v8), vaddq_s32(v16, v12))));
    if (v6 == v3) {
      return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
    }
    if ((v3 & 0x18) == 0)
    {
      uint64_t v5 = v3 & 0x1F;
LABEL_16:
      unint64_t v36 = v5 + 1;
      do
      {
        int v37 = *(unsigned __int8 *)(a2 + (v36 - 2)) - *(unsigned __int8 *)(a3 + (v36 - 2));
        v4 += v37 * v37;
        --v36;
      }

      while (v36 > 1);
      return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
    }
  }

  else
  {
    unsigned int v4 = 0;
    uint64_t v6 = 0LL;
  }

  uint64_t v5 = v3 & 7;
  int32x4_t v31 = (int32x4_t)v4;
  int32x4_t v32 = 0uLL;
  uint64_t v33 = ~v6 + v3;
  uint64_t v34 = v6 - (v3 & 0xFFFFFFF8);
  do
  {
    int16x8_t v35 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v33)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v33)));
    int32x4_t v32 = vmlal_high_s16(v32, v35, v35);
    int32x4_t v31 = vmlal_s16(v31, *(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8);
    v33 -= 8LL;
    v34 += 8LL;
  }

  while (v34);
  unsigned int v4 = vaddvq_s32(vaddq_s32(v31, v32));
  if ((v3 & 0x7FFFFFF8) != v3) {
    goto LABEL_16;
  }
  return (__int16)((a1[263] * v4 + a1[298] / 2) >> a1[299]);
}

uint64_t sub_100015698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1104);
  if (v3 < 8)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(unsigned int *)(a1 + 1104);
    goto LABEL_18;
  }

  if (v3 < 0x20)
  {
    unsigned int v4 = 0;
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  int32x4_t v8 = 0uLL;
  uint64_t v7 = v3 & 0xFFFFFFE0;
  int32x4_t v9 = 0uLL;
  uint64_t v10 = v3 - 1;
  uint64_t v11 = v7;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  int32x4_t v16 = 0uLL;
  int32x4_t v17 = 0uLL;
  do
  {
    uint64_t v18 = a2 + v10;
    int8x16_t v19 = vrev64q_s8(*(int8x16_t *)(v18 - 15));
    uint8x16_t v20 = (uint8x16_t)vextq_s8(v19, v19, 8uLL);
    int8x16_t v21 = vrev64q_s8(*(int8x16_t *)(v18 - 31));
    uint8x16_t v22 = (uint8x16_t)vextq_s8(v21, v21, 8uLL);
    uint64_t v23 = a3 + v10;
    int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
    int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
    int16x8_t v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v25.i8);
    int16x8_t v29 = (int16x8_t)vsubl_high_u8(v20, v25);
    int16x8_t v30 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v27.i8);
    int16x8_t v31 = (int16x8_t)vsubl_high_u8(v22, v27);
    int32x4_t v13 = vmlal_high_s16(v13, v29, v29);
    int32x4_t v12 = vmlal_s16(v12, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
    int32x4_t v9 = vmlal_high_s16(v9, v28, v28);
    int32x4_t v8 = vmlal_s16(v8, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
    int32x4_t v17 = vmlal_high_s16(v17, v31, v31);
    int32x4_t v16 = vmlal_s16(v16, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
    int32x4_t v15 = vmlal_high_s16(v15, v30, v30);
    int32x4_t v14 = vmlal_s16(v14, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
    v10 -= 32LL;
    v11 -= 32LL;
  }

  while (v11);
  unsigned int v4 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v14, v8), vaddq_s32(v16, v12)),  vaddq_s32(vaddq_s32(v15, v9), vaddq_s32(v17, v13))));
  if (v7 == v3) {
    goto LABEL_14;
  }
  if ((v3 & 0x18) != 0)
  {
LABEL_11:
    uint64_t v5 = v3 & 7;
    int32x4_t v32 = (int32x4_t)v4;
    int32x4_t v33 = 0uLL;
    uint64_t v34 = ~v7 + v3;
    uint64_t v35 = v7 - (v3 & 0xFFFFFFF8);
    do
    {
      int16x8_t v36 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(a2 - 7 + v34)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(a3 - 7 + v34)));
      int32x4_t v33 = vmlal_high_s16(v33, v36, v36);
      int32x4_t v32 = vmlal_s16(v32, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
      v34 -= 8LL;
      v35 += 8LL;
    }

    while (v35);
    unsigned int v4 = vaddvq_s32(vaddq_s32(v32, v33));
    if ((v3 & 0x7FFFFFF8) == v3) {
      goto LABEL_14;
    }
    goto LABEL_18;
  }

  uint64_t v5 = v3 & 0x1F;
LABEL_18:
  unint64_t v37 = v5 + 1;
  do
  {
    int v38 = *(unsigned __int8 *)(a2 + (v37 - 2)) - *(unsigned __int8 *)(a3 + (v37 - 2));
    v4 += v38 * v38;
    --v37;
  }

  while (v37 > 1);
LABEL_14:
  if (v4 >= 0x7FFF) {
    return 0x7FFFLL;
  }
  else {
    return v4;
  }
}

uint64_t sub_10001585C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 1544);
  uint64_t v7 = sub_100004698(a1, a2, a3);
  uint64_t v8 = sub_100005528(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)sub_10000573C(a1, a2, a3);
  int v10 = *(_DWORD *)(a1 + 1104);
  uint64_t v11 = (v10 - 2);
  if (v10 >= 2)
  {
    uint64_t v12 = (v10 - 1);
    LODWORD(v13) = v10 + 1;
    int32x4_t v14 = (unsigned __int8 *)(v6 + v12);
    int32x4_t v15 = (unsigned __int8 *)(v6 + v11);
    do
    {
      unint64_t v13 = (v13 - 2);
      unsigned int v16 = *(unsigned __int8 *)(v7 + (v13 >> 1));
      int v17 = *v14;
      v14 -= 2;
      int v18 = (v16 >> 4) - v17;
      int v19 = *v15;
      v15 -= 2;
    }

    while (v13 > 2);
  }

uint64_t sub_100015958(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 1544);
  if (*(_DWORD *)(a1 + 1032))
  {
    uint64_t v5 = sub_100004724(a1, a2, a3);
    sub_10000482C(a1, v5, *(void *)(a1 + 1512));
    uint64_t v6 = *(void *)(a1 + 1512);
    int v7 = *(_DWORD *)(a1 + 1104);
    if (v7 >= 2) {
      goto LABEL_3;
    }
LABEL_9:
    int v11 = 0;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  uint64_t v6 = sub_100004698(a1, a2, a3);
  int v7 = *(_DWORD *)(a1 + 1104);
  if (v7 < 2) {
    goto LABEL_9;
  }
LABEL_3:
  unsigned int v8 = v7 - 1;
  else {
    int v9 = v7 - 1;
  }
  unsigned int v10 = v7 - v9;
  if (v10 < 2)
  {
    int v11 = 0;
LABEL_13:
    uint64_t v23 = (unsigned __int8 *)(v4 + v8);
    int8x16_t v24 = (unsigned __int8 *)(v4 + v8 - 1);
    do
    {
      unsigned int v25 = *(unsigned __int8 *)(v6 + ((unint64_t)v8 >> 1));
      int v26 = *v23;
      v23 -= 2;
      int v27 = (v25 >> 4) - v26;
      int v28 = *v24;
      v24 -= 2;
      v11 += v27 * v27 + ((v25 & 0xF) - v28) * ((v25 & 0xF) - v28);
      BOOL v29 = v8 >= 2;
      v8 -= 2;
    }

    while (v8 != 0 && v29);
    return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  int v12 = 0;
  int v13 = 0;
  int v14 = (v10 >> 1) + 1;
  v8 -= 2 * (v14 & 0x7FFFFFFE);
  unsigned int v15 = v7 - 4;
  int v16 = v14 & 0x7FFFFFFE;
  do
  {
    unint64_t v17 = v15 + 3;
    unint64_t v18 = v15 + 1;
    unsigned int v19 = *(unsigned __int8 *)(v6 + (v17 >> 1));
    unsigned int v20 = *(unsigned __int8 *)(v6 + (v18 >> 1));
    LODWORD(v17) = (v19 >> 4) - *(unsigned __int8 *)(v4 + v17);
    LODWORD(v18) = (v20 >> 4) - *(unsigned __int8 *)(v4 + v18);
    int v21 = (v19 & 0xF) - *(unsigned __int8 *)(v4 + v15 + 2);
    int v22 = (v20 & 0xF) - *(unsigned __int8 *)(v4 + v15);
    v12 += v17 * v17 + v21 * v21;
    v13 += v18 * v18 + v22 * v22;
    v15 -= 4;
    v16 -= 2;
  }

  while (v16);
  int v11 = v13 + v12;
  if (v14 != (v14 & 0x7FFFFFFE)) {
    goto LABEL_13;
  }
  return (__int16)((*(_DWORD *)(a1 + 1052) * v11 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

void sub_100015AE0(uint64_t a1)
{
  *(void *)(a1 + 1608) = 0x1FFFF4000LL;
  int v1 = *(_DWORD *)(a1 + 1824);
  if (v1 >= *(_DWORD *)(a1 + 1828))
  {
    *(_DWORD *)(a1 + 1824) = 0;
    unsigned int v3 = *(_DWORD *)(a1 + 1808);
    if (v3 >= 2)
    {
      signed int v4 = v3 - 1;
      int v5 = v3 >> 1;
      if (v5 >= 1) {
        int v6 = 1;
      }
      else {
        int v6 = v5;
      }
      memset_pattern16( (void *)(*(void *)(a1 + 1800) - 8LL * (v5 - v6) + 4LL * v4 - 4),  &unk_1000F03B0,  8LL * (v5 - v6) + 8);
    }
  }

  else
  {
    if (v1 >= 1)
    {
      uint64_t v2 = 0LL;
      do
        *(_WORD *)(*(void *)(a1 + 1792) + 2LL * *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * v2++)) = 0x4000;
      while (v2 < *(int *)(a1 + 1824));
    }

    *(_DWORD *)(a1 + 1824) = 0;
  }

uint64_t sub_100015B80(uint64_t a1, int a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 1096);
  uint64_t v4 = *(void *)(a1 + 1368);
  int v5 = v3;
  *a3 = v5;
  return v4 + 2LL * v3 * a2;
}

uint64_t sub_100015BAC(uint64_t a1, int a2)
{
  return *(void *)(a1 + 1368) + 2LL * *(_DWORD *)(a1 + 1096) * a2;
}

uint64_t sub_100015BC0(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 1712))();
  *(_WORD *)(*(void *)(a1 + 1792) + 2LL * a2) = result;
  uint64_t v5 = *(int *)(a1 + 1824);
  if ((int)v5 < *(_DWORD *)(a1 + 1828))
  {
    uint64_t v6 = *(void *)(a1 + 1832);
    *(_DWORD *)(a1 + 1824) = v5 + 1;
    *(_WORD *)(v6 + 2 * v5) = a2;
  }

  int v7 = *(__int16 *)(a1 + 1608);
  if ((int)result <= v7
    && ((int)result < v7 || *(unsigned __int16 *)(a1 + 1610) > a2)
    && *(unsigned __int16 *)(a1 + 1960) != a2
    && *(unsigned __int16 *)(a1 + 1388) != a2)
  {
    *(_WORD *)(a1 + 1608) = result;
    *(_WORD *)(a1 + 1610) = a2;
    *(_DWORD *)(a1 + 1612) = 1;
  }

  return result;
}

uint64_t sub_100015C54(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  unsigned int v3 = a2 - v2;
  if ((int)a2 >= v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 792);
    uint64_t v5 = (uint64_t *)(a1 + 800);
    uint64_t v6 = (uint64_t *)(a1 + 808);
    int v7 = 6 * v3;
  }

  else
  {
    unsigned int v3 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
    }

    int v7 = *(_DWORD *)(a1 + 1128) * v3;
    int v8 = *(_DWORD *)(a1 + 1080);
    BOOL v9 = v8 <= (int)a2;
    uint64_t v4 = (uint64_t *)(a1 + 144);
    if (v8 <= (int)a2)
    {
      uint64_t v5 = (uint64_t *)(a1 + 104);
    }

    else
    {
      uint64_t v4 = (uint64_t *)(a1 + 136);
      uint64_t v5 = (uint64_t *)(a1 + 32);
    }

    if (v9) {
      uint64_t v6 = (uint64_t *)(a1 + 120);
    }
    else {
      uint64_t v6 = (uint64_t *)(a1 + 48);
    }
  }

  uint64_t v10 = *v6;
  uint64_t v11 = *v5;
  uint64_t v12 = *v4;
  uint64_t v13 = 4LL * (int)v3;
  int v14 = (_DWORD *)(v10 + v13);
  if (!v10) {
    int v14 = 0LL;
  }
  uint64_t v15 = *(void *)(a1 + 1552);
  uint32x2_t v16 = *(uint32x2_t *)v15;
  uint32x4_t v17 = *(uint32x4_t *)(v15 + 8);
  if ((int)a2 >= v2)
  {
    int v18 = 1;
  }

  else if (*(_DWORD *)(a1 + 1176))
  {
    int v18 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    if (v18 < 1) {
      goto LABEL_28;
    }
  }

  else
  {
    if (v18 < 1)
    {
LABEL_28:
      int v28 = 0x40000000;
      return (__int16)((*(_DWORD *)(a1 + 1052) * v28 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }
  }

  unsigned int v19 = (int *)(v11 + v13);
  uint32x2_t v20 = vshr_n_u32(v16, 8uLL);
  uint64_t v21 = *(void *)&v16 & 0xFF00FF00FF00FFLL;
  unint64_t v22 = *(void *)&v20 & 0xFFFF00FFFFFF00FFLL;
  uint32x4_t v23 = vshrq_n_u32(v17, 8uLL);
  unsigned __int128 v24 = *(_OWORD *)&v17 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
  unsigned __int128 v25 = *(_OWORD *)&v23 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned int v26 = v18 + 1;
  int v27 = (uint32x4_t *)(v12 + 4LL * v7 + 8);
  int v28 = 0x40000000;
  do
  {
    int v31 = *v19++;
    v32.i16[0] = v27[-1].i64[1];
    v32.i16[1] = BYTE2(v27[-1].i64[1]);
    v32.i16[2] = BYTE4(v27[-1].i64[1]);
    v32.i16[3] = BYTE6(v27[-1].i64[1]);
    uint32x2_t v33 = (uint32x2_t)vmla_s32( vmul_s32(v32, (int32x2_t)v21),  (int32x2_t)(*(void *)&vshr_n_u32((uint32x2_t)v27[-1].u64[1], 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v22);
    signed __int32 v34 = *(_DWORD *)(a1 + 1572)
        + v31
        - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v33, 0xFuLL), 1), v33, 0xFuLL).u32[0];
    if (v34 <= *(_DWORD *)(a1 + 1056))
    {
      v29.i16[0] = v27->u8[0];
      v29.i16[1] = BYTE2(v27->u32[0]);
      v29.i16[2] = BYTE4(v27->i64[0]);
      v29.i16[3] = BYTE6(v27->i64[0]);
      v29.i16[4] = v27->i64[1];
      v29.i16[5] = BYTE2(v27->i64[1]);
      v29.i16[6] = BYTE12(*(unsigned __int128 *)v27);
      v29.i16[7] = BYTE14(*(unsigned __int128 *)v27);
      int v30 = *v14
          + *(_DWORD *)(a1 + 1576)
          + v34
          - vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v29, (int32x4_t)v24),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v27, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v25),  0xFuLL));
    }

    else
    {
      int v30 = *(_DWORD *)(a1 + 1060) + v34;
    }

    ++v14;
    if (v30 < v28) {
      int v28 = v30;
    }
    --v26;
    int v27 = (uint32x4_t *)((char *)v27 + 24);
  }

  while (v26 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v28 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100015E54(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  unsigned int v3 = a2 - v2;
  if ((int)a2 >= v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 792);
    uint64_t v5 = (uint64_t *)(a1 + 800);
    int v6 = 6 * v3;
  }

  else
  {
    unsigned int v3 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
    }

    int v6 = *(_DWORD *)(a1 + 1128) * v3;
    uint64_t v4 = (uint64_t *)(a1 + 136);
    uint64_t v5 = (uint64_t *)(a1 + 32);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      uint64_t v4 = (uint64_t *)(a1 + 144);
      uint64_t v5 = (uint64_t *)(a1 + 104);
    }
  }

  uint64_t v7 = *v5;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(a1 + 1552);
  uint32x4_t v10 = *(uint32x4_t *)v9;
  uint32x2_t v11 = *(uint32x2_t *)(v9 + 16);
  if ((int)a2 >= v2)
  {
    int v12 = 1;
  }

  else if (*(_DWORD *)(a1 + 1176))
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    if (v12 < 1) {
      goto LABEL_25;
    }
  }

  else
  {
    if (v12 < 1)
    {
LABEL_25:
      int v22 = 0x40000000;
    }
  }

  uint64_t v13 = (int32x4_t *)(v8 + 4LL * v6);
  int v14 = (int *)(v7 + 4LL * (int)v3);
  uint32x4_t v15 = vshrq_n_u32(v10, 8uLL);
  unsigned __int128 v16 = *(_OWORD *)&v10 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
  unsigned __int128 v17 = *(_OWORD *)&v15 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  uint32x2_t v18 = vshr_n_u32(v11, 8uLL);
  uint64_t v19 = *(void *)&v11 & 0xFF00FF00FF00FFLL;
  unint64_t v20 = *(void *)&v18 & 0xFFFF00FFFFFF00FFLL;
  uint64_t v21 = (v12 - 1);
  if (v21 >= 7)
  {
    uint64_t v24 = (int)v3;
    uint64_t v25 = v21 + 1;
    v12 -= v25 & 0xFFFFFFF8;
    uint32x4_t v23 = (int32x4_t *)((char *)v13 + 24 * (v25 & 0x1FFFFFFF8LL));
    int32x4_t v88 = vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    int32x4_t v89 = vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    int32x4_t v86 = vdupq_lane_s32(*(int32x2_t *)&v17, 1);
    int32x4_t v87 = vdupq_lane_s32(*(int32x2_t *)&v16, 1);
    int32x4_t v26 = vdupq_laneq_s32((int32x4_t)v16, 2);
    int32x4_t v27 = vdupq_laneq_s32((int32x4_t)v17, 2);
    v14 += v25 & 0x1FFFFFFF8LL;
    uint64_t v84 = v19;
    unsigned __int128 v85 = v16;
    int32x4_t v28 = vdupq_laneq_s32((int32x4_t)v16, 3);
    unint64_t v82 = v20;
    unsigned __int128 v83 = v17;
    int32x4_t v29 = vdupq_laneq_s32((int32x4_t)v17, 3);
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v19, 0);
    int v31 = (int32x4_t *)(v7 + 4 * v24 + 16);
    int32x4_t v32 = vdupq_lane_s32((int32x2_t)v20, 0);
    v33.i64[0] = 0x4000000040000000LL;
    v33.i64[1] = 0x4000000040000000LL;
    int32x4_t v34 = vdupq_lane_s32((int32x2_t)v19, 1);
    uint64_t v35 = v25 & 0x1FFFFFFF8LL;
    int32x4_t v36 = vdupq_lane_s32((int32x2_t)v20, 1);
    v37.i64[0] = 0x4000000040000000LL;
    v37.i64[1] = 0x4000000040000000LL;
    do
    {
      int32x4_t v38 = v13[4];
      int32x4_t v39 = v13[5];
      int32x4_t v41 = v13[2];
      int32x4_t v40 = v13[3];
      int32x4_t v42 = *v13;
      int32x4_t v43 = v13[1];
      int32x4_t v44 = v13[10];
      int32x4_t v45 = v13[11];
      int32x4_t v47 = v13[8];
      int32x4_t v46 = v13[9];
      int32x4_t v48 = v13[6];
      int32x4_t v49 = v13[7];
      v50.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v43, *v13), *(int8x16_t *)v13, 4uLL).u64[0];
      v51.i64[0] = vzip2q_s32(*v13, vuzp1q_s32(*v13, v41)).u64[0];
      v52.i32[1] = HIDWORD(v13[2].i64[0]);
      v52.i32[0] = HIDWORD(*(unsigned __int128 *)v13);
      int32x4_t v53 = vtrn1q_s32(vuzp1q_s32(v40, v40), v38);
      v54.i64[0] = vzip2q_s32(v48, vuzp1q_s32(v48, v47)).u64[0];
      v42.i32[1] = v13[1].i64[1];
      v55.i32[0] = v48.i32[0];
      LODWORD(v56) = v13[3].i64[1];
      HIDWORD(v56) = v39.i32[0];
      v55.i32[1] = v13[7].i64[1];
      LODWORD(v57) = v13[9].i64[1];
      HIDWORD(v57) = v45.i32[0];
      int32x4_t v58 = (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v39, 8uLL);
      v51.i64[1] = v56;
      int32x4_t v59 = vtrn1q_s32(vuzp1q_s32(v38, v38), v39);
      v39.i32[2] = HIDWORD(v13[4].i64[0]);
      v54.i64[1] = v57;
      v38.i32[2] = HIDWORD(v13[3].i64[0]);
      v42.i64[1] = v53.i64[1];
      v52.i64[1] = vzip2q_s32(v40, v58).i64[1];
      v55.i64[1] = vtrn1q_s32(vuzp1q_s32(v46, v46), v44).i64[1];
      v60.i32[1] = HIDWORD(v13[8].i64[0]);
      int32x4_t v61 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v45, 8uLL);
      v60.i32[0] = v48.i32[3];
      int32x4_t v62 = vtrn1q_s32(vuzp1q_s32(v44, v44), v45);
      v45.i32[2] = HIDWORD(v13[10].i64[0]);
      HIDWORD(v57) = v44.i32[3];
      LODWORD(v57) = HIDWORD(v13[9].i64[0]);
      v48.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v49, v48), (int8x16_t)v48, 4uLL).u64[0];
      v60.i64[1] = vzip2q_s32(v46, v61).i64[1];
      v50.i64[1] = v38.i64[1];
      v38.i32[0] = v43.i32[0];
      v38.i32[1] = v13[2].i64[1];
      v38.i64[1] = v59.i64[1];
      v44.i32[0] = v49.i32[0];
      v44.i32[1] = v13[8].i64[1];
      v44.i64[1] = v62.i64[1];
      v48.i64[1] = v57;
      v63.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v41, v43), (int8x16_t)v43, 4uLL).u64[0];
      v63.i64[1] = v39.i64[1];
      v39.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v47, v49), (int8x16_t)v49, 4uLL).u64[0];
      v39.i64[1] = v45.i64[1];
      uint32x4_t v64 = vshrq_n_u32((uint32x4_t)v42, 8uLL);
      v42.i16[0] = v13->u8[0];
      v42.i16[1] = BYTE2(v13->u32[0]);
      v42.i16[2] = v13[1].i64[1];
      v42.i16[3] = BYTE2(v13[1].i64[1]);
      v42.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v65 = (uint32x4_t)vmlaq_s32( vmulq_s32(v42, v89),  (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v88);
      uint32x4_t v66 = vshrq_n_u32(v55, 8uLL);
      v55.i16[0] = *(_OWORD *)&v13[6];
      v55.i16[1] = BYTE2(*(_OWORD *)&v13[6]);
      v55.i16[2] = v13[7].i64[1];
      v55.i16[3] = BYTE2(v13[7].i64[1]);
      v55.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v67 = (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v87),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v48, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v86);
      uint32x4_t v68 = vshrq_n_u32(v52, 8uLL);
      v52.i16[0] = v52.u8[0];
      v52.i16[1] = BYTE14(*(unsigned __int128 *)v13);
      v52.i16[2] = v52.u8[4];
      v52.i16[3] = BYTE6(v13[2].i64[0]);
      v52.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v69 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v52, v28),  (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v29);
      uint32x4_t v70 = vshrq_n_u32((uint32x4_t)v38, 8uLL);
      v38.i16[0] = v43.u8[0];
      v38.i16[1] = v43.u8[2];
      v38.i16[2] = v13[2].i64[1];
      v38.i16[3] = BYTE2(v13[2].i64[1]);
      v38.i64[1] = v59.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v71 = (uint32x4_t)vmlaq_s32( vmulq_s32(v38, v30),  (int32x4_t)(*(_OWORD *)&v70 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v32);
      uint32x4_t v72 = vshrq_n_u32(v60, 8uLL);
      v60.i16[0] = BYTE12(*(_OWORD *)&v13[6]);
      v60.i16[1] = BYTE14(*(_OWORD *)&v13[6]);
      v60.i16[2] = v60.u8[4];
      v60.i16[3] = BYTE6(v13[8].i64[0]);
      v60.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v73 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v60, v28),  (int32x4_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v29);
      uint32x4_t v74 = vshrq_n_u32((uint32x4_t)v44, 8uLL);
      v44.i16[0] = v49.u8[0];
      v44.i16[1] = v49.u8[2];
      v44.i16[2] = v13[8].i64[1];
      v44.i16[3] = BYTE2(v13[8].i64[1]);
      v44.i64[1] = v62.i64[1] & 0xFF00FF00FF00FFLL;
      int32x4_t v33 = vminq_s32( vsubq_s32( v31[-1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32(v65, 0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v50 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v87),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v50, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v86),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v26),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v51, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v27),  0xFuLL),  v69,  0xFuLL),  v71,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v63 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v34),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v63, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v36),  0xFuLL)),  v33);
      int32x4_t v37 = vminq_s32( vsubq_s32( *v31,  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v55, v89),  (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v88),  0xFuLL),  v67,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v26),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v54, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v27),  0xFuLL),  v73,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v44, v30),  (int32x4_t)(*(_OWORD *)&v74 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v32),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v39 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v34),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v39, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v36),  0xFuLL)),  v37);
      v31 += 2;
      v13 += 12;
      v35 -= 8LL;
    }

    while (v35);
    int v22 = vminvq_s32(vminq_s32(v33, v37));
    uint64_t v19 = v84;
    unsigned __int128 v16 = v85;
    unint64_t v20 = v82;
    unsigned __int128 v17 = v83;
    if (v25 == (v25 & 0x1FFFFFFF8LL)) {
  }
    }

  else
  {
    int v22 = 0x40000000;
    uint32x4_t v23 = v13;
  }

  unsigned int v75 = v12 + 1;
  do
  {
    v76.i16[0] = v23->u8[0];
    v76.i16[1] = BYTE2(v23->u32[0]);
    v76.i16[2] = BYTE4(v23->i64[0]);
    v76.i16[3] = BYTE6(v23->i64[0]);
    v76.i16[4] = v23->i64[1];
    v76.i16[5] = BYTE2(v23->i64[1]);
    v76.i16[6] = BYTE12(*(unsigned __int128 *)v23);
    v76.i16[7] = BYTE14(*(unsigned __int128 *)v23);
    v77.i16[0] = v23[1].i64[0];
    v77.i16[1] = BYTE2(v23[1].i64[0]);
    v77.i16[2] = BYTE4(v23[1].i64[0]);
    v77.i16[3] = BYTE6(v23[1].i64[0]);
    uint32x2_t v78 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v77, (int32x2_t)v19),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v23[1].i8, 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v20),  0xFuLL);
    int v79 = *v14++;
    __int32 v80 = v79
        - (vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v76, (int32x4_t)v16),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v23, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v17),  0xFuLL))
         + v78.i32[0])
        - v78.i32[1];
    if (v80 < v22) {
      int v22 = v80;
    }
    --v75;
    uint32x4_t v23 = (int32x4_t *)((char *)v23 + 24);
  }

  while (v75 > 1);
}

uint64_t sub_100016308(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3)
  {
    int v5 = *(_DWORD *)(a1 + 1176);
    BOOL v6 = v5 == 0;
    if (*(_DWORD *)(a1 + 2012))
    {
      unsigned int v7 = a2;
    }

    else if (v5)
    {
      BOOL v6 = 0;
      unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }

    else
    {
      unsigned int v7 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      BOOL v6 = 1;
    }

    uint64_t v14 = 144LL;
    uint64_t v15 = 104LL;
    if (v6)
    {
      if (v13 < 1)
      {
LABEL_14:
        int v16 = 0x40000000;
      }
    }

    else
    {
      int v13 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      if (v13 < 1) {
        goto LABEL_14;
      }
    }

    unsigned __int128 v17 = *(uint32x2_t **)(a1 + 1552);
    uint64_t v8 = *(void *)(a1 + v14) + 4LL * (int)(*(_DWORD *)(a1 + 1128) * v7);
    uint64_t v9 = (int32x4_t *)(*(void *)(a1 + v15) + 4LL * (int)v7);
    unsigned __int32 v12 = v17[1].u32[0];
    uint32x2_t v11 = *v17;
    goto LABEL_17;
  }

  uint64_t v8 = *(void *)(a1 + 792) + 24LL * v4;
  uint64_t v9 = (int32x4_t *)(*(void *)(a1 + 800) + 4LL * v4);
  uint32x4_t v10 = *(uint32x2_t **)(a1 + 1552);
  uint32x2_t v11 = *v10;
  unsigned __int32 v12 = v10[1].u32[0];
  int v13 = 1;
LABEL_17:
  uint32x2_t v18 = vshr_n_u32(v11, 8uLL);
  uint64_t v19 = *(void *)&v11 & 0xFF00FF00FF00FFLL;
  unint64_t v20 = *(void *)&v18 & 0xFFFF00FFFFFF00FFLL;
  unsigned int v21 = v12 & 0xFF00FF;
  unsigned int v22 = (v12 >> 8) & 0xFF00FF;
  uint64_t v23 = (v13 - 1);
  if (v23 >= 8)
  {
    uint64_t v24 = v23 + 1;
    uint64_t v25 = v24 & 7;
    if ((v24 & 7) == 0) {
      uint64_t v25 = 8LL;
    }
    uint64_t v26 = v24 - v25;
    v13 -= v26;
    uint64_t v27 = v8 + 24 * v26;
    int32x4_t v28 = vdupq_lane_s32((int32x2_t)v19, 0);
    int32x4_t v29 = vdupq_lane_s32((int32x2_t)v20, 0);
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v19, 1);
    int32x4_t v31 = vdupq_lane_s32((int32x2_t)v20, 1);
    int32x4_t v32 = vdupq_n_s32(v21);
    int32x4_t v33 = (int32x4_t *)((char *)v9 + 4 * v26);
    int32x4_t v34 = vdupq_n_s32(v22);
    uint64_t v35 = v9 + 1;
    v36.i64[0] = 0x4000000040000000LL;
    v36.i64[1] = 0x4000000040000000LL;
    v37.i64[0] = 0x4000000040000000LL;
    v37.i64[1] = 0x4000000040000000LL;
    do
    {
      int32x4_t v39 = *(int32x4_t *)(v8 + 48);
      int32x4_t v38 = *(int32x4_t *)(v8 + 64);
      int32x4_t v40 = *(int32x4_t *)v8;
      int32x4_t v42 = *(int32x4_t *)(v8 + 144);
      int32x4_t v41 = *(int32x4_t *)(v8 + 160);
      int32x4_t v43 = *(int32x4_t *)(v8 + 96);
      v44.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(*(int32x4_t *)(v8 + 16), *(int32x4_t *)v8), *(int8x16_t *)v8, 4uLL).u64[0];
      v45.i64[0] = vzip2q_s32(*(int32x4_t *)v8, vuzp1q_s32(*(int32x4_t *)v8, *(int32x4_t *)(v8 + 32))).u64[0];
      int32x4_t v46 = vtrn1q_s32(vuzp1q_s32(v39, v39), v38);
      v40.i32[1] = *(void *)(v8 + 24);
      v47.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(*(int32x4_t *)(v8 + 112), v43), (int8x16_t)v43, 4uLL).u64[0];
      v48.i64[0] = vzip2q_s32(v43, vuzp1q_s32(v43, *(int32x4_t *)(v8 + 128))).u64[0];
      v43.i32[1] = *(void *)(v8 + 120);
      int32x4_t v49 = vtrn1q_s32(vuzp1q_s32(v42, v42), v41);
      v38.i32[2] = HIDWORD(*(void *)(v8 + 48));
      v44.i64[1] = v38.i64[1];
      v41.i32[2] = HIDWORD(*(void *)(v8 + 144));
      v47.i64[1] = v41.i64[1];
      v40.i64[1] = v46.i64[1];
      v39.i32[3] = *(_DWORD *)(v8 + 80);
      v45.i64[1] = v39.i64[1];
      v43.i64[1] = v49.i64[1];
      v42.i32[3] = *(_DWORD *)(v8 + 176);
      v48.i64[1] = v42.i64[1];
      uint32x4_t v50 = vshrq_n_u32((uint32x4_t)v40, 8uLL);
      v40.i16[0] = *(_OWORD *)v8;
      v40.i16[1] = BYTE2(*(_OWORD *)v8);
      v40.i16[2] = *(void *)(v8 + 24);
      v40.i16[3] = BYTE2(*(void *)(v8 + 24));
      v40.i64[1] = v46.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v51 = vshrq_n_u32((uint32x4_t)v43, 8uLL);
      v43.i16[0] = *(_OWORD *)(v8 + 96);
      v43.i16[1] = BYTE2(*(_OWORD *)(v8 + 96));
      v43.i16[2] = *(void *)(v8 + 120);
      v43.i16[3] = BYTE2(*(void *)(v8 + 120));
      v43.i64[1] = v49.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v52 = vshrq_n_u32(v47, 8uLL);
      v47.i64[0] &= 0xFF00FF00FF00FFuLL;
      v47.i32[2] = v41.i32[2] & 0xFF00FF;
      v47.i16[6] = BYTE12(*(_OWORD *)(v8 + 160));
      v47.i16[7] = BYTE14(*(_OWORD *)(v8 + 160));
      int32x4_t v36 = vminq_s32( vsubq_s32( v35[-1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v40, v28),  (int32x4_t)(*(_OWORD *)&v50 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v29),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v30),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v31),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v32),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v34),  0xFuLL)),  v36);
      int32x4_t v37 = vminq_s32( vsubq_s32( *v35,  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v43, v28),  (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v29),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v47, v30),  (int32x4_t)(*(_OWORD *)&v52 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v31),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v32),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v48, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v34),  0xFuLL)),  v37);
      v35 += 2;
      v8 += 192LL;
      v26 -= 8LL;
    }

    while (v26);
    int v16 = vminvq_s32(vminq_s32(v36, v37));
    uint64_t v8 = v27;
    uint64_t v9 = v33;
  }

  else
  {
    int v16 = 0x40000000;
  }

  unsigned int v53 = v13 + 1;
  uint32x4_t v54 = (_DWORD *)(v8 + 8);
  do
  {
    __int32 v55 = v9->i32[0];
    uint64_t v9 = (int32x4_t *)((char *)v9 + 4);
    v56.i16[0] = *((void *)v54 - 1);
    v56.i16[1] = BYTE2(*((void *)v54 - 1));
    v56.i16[2] = BYTE4(*((void *)v54 - 1));
    v56.i16[3] = BYTE6(*((void *)v54 - 1));
    uint32x2_t v57 = (uint32x2_t)vmla_s32( vmul_s32(v56, (int32x2_t)v19),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v54 - 2), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v20);
    int v58 = v55
        - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v57, 0xFuLL), 1), v57, 0xFuLL).u32[0]
         + (((*v54 & 0xFF00FF) * v21 + ((*v54 >> 8) & 0xFF00FF) * v22) >> 15));
    if (v58 < v16) {
      int v16 = v58;
    }
    --v53;
    v54 += 6;
  }

  while (v53 > 1);
}

uint64_t sub_100016660(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v5 = 1;
    if (*(_DWORD *)(a1 + 2012)) {
      goto LABEL_10;
    }
  }

  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v2 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      int v4 = *v2;
      int v3 = v2[1];
    }

    else
    {
      BOOL v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      int v4 = *v6;
      int v3 = v6[1];
    }

    int v5 = v3 - v4;
    if (*(_DWORD *)(a1 + 2012))
    {
LABEL_10:
      if (v5 >= 1) {
        goto LABEL_11;
      }
LABEL_17:
      unsigned int v32 = 0x40000000;
    }
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    goto LABEL_10;
  }

  a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  if (v5 < 1) {
    goto LABEL_17;
  }
LABEL_11:
  unsigned int v7 = *(int32x4_t **)(a1 + 1592);
  uint64_t v8 = *(_DWORD **)(a1 + 1552);
  uint64_t v9 = (_DWORD *)(*(void *)(a1 + 1232) + 4LL * (int)(*(_DWORD *)(a1 + 1128) * a2));
  uint32x4_t v10 = (int *)(*(void *)(a1 + 160) + 4LL * (int)a2);
  uint32x2_t v11 = (int32x4_t *)(*(void *)(a1 + 192) + 72LL * (int)a2);
  unsigned int v12 = v8[1];
  unsigned int v13 = v8[2];
  unsigned int v14 = v8[3];
  unsigned int v15 = v8[4];
  unsigned int v16 = v8[5];
  unsigned int v17 = v8[6];
  unsigned int v18 = v8[8];
  v19.i16[0] = v17;
  v19.i16[1] = BYTE2(v17);
  v19.i16[2] = BYTE1(v17);
  v19.i16[3] = v17 >> 8 >> 16;
  v19.i16[4] = v8[7];
  v19.i16[5] = BYTE2(v8[7]);
  v19.i16[6] = BYTE1(v8[7]);
  v19.i16[7] = (v8[7] >> 8 >> 16);
  v20.i16[0] = v15;
  v20.i16[1] = BYTE2(v15);
  v20.i16[2] = BYTE1(v15);
  v20.i16[3] = v15 >> 8 >> 16;
  v20.i16[4] = v16;
  v20.i16[5] = BYTE2(v16);
  v20.i16[6] = BYTE1(v16);
  v21.i16[0] = v13;
  v21.i16[1] = BYTE2(v13);
  v21.i16[2] = BYTE1(v13);
  v21.i16[3] = v13 >> 8 >> 16;
  v21.i16[4] = v14;
  v21.i16[5] = BYTE2(v14);
  v21.i16[6] = BYTE1(v14);
  v22.i16[0] = *v8;
  v22.i16[1] = BYTE2(*v8);
  v22.i16[2] = BYTE1(*v8);
  v22.i16[3] = (*v8 >> 8 >> 16);
  v22.i16[4] = v12;
  v22.i16[5] = BYTE2(v12);
  v22.i16[6] = BYTE1(v12);
  v22.i16[7] = v12 >> 8 >> 16;
  int v23 = v18 & 0xFF00FF;
  int v24 = (v18 >> 8) & 0xFF00FF;
  int32x4_t v26 = v7[2];
  int32x4_t v25 = v7[3];
  int32x4_t v28 = *v7;
  int32x4_t v27 = v7[1];
  __int32 v29 = v7[4].i32[0];
  __int32 v30 = v7[4].i32[1];
  unsigned int v31 = v5 + 1;
  unsigned int v32 = 0x40000000;
  do
  {
    int v33 = *v10++;
    unsigned int v34 = v9[1];
    unsigned int v35 = v9[3];
    unsigned int v36 = v9[5];
    unsigned int v37 = v9[6];
    unsigned int v38 = v9[7];
    v39.i16[0] = *v9;
    v39.i16[1] = BYTE2(*v9);
    v39.i16[2] = BYTE1(*v9);
    v39.i16[3] = (*v9 >> 8 >> 16);
    v39.i16[4] = v34;
    v39.i16[5] = BYTE2(v34);
    v39.i16[6] = BYTE1(v34);
    v39.i16[7] = v34 >> 8 >> 16;
    v40.i16[0] = v9[2];
    v40.i16[1] = BYTE2(v9[2]);
    v40.i16[2] = BYTE1(v9[2]);
    v40.i16[3] = (v9[2] >> 8 >> 16);
    v40.i16[4] = v35;
    v40.i16[5] = BYTE2(v35);
    v40.i16[6] = BYTE1(v35);
    v40.i16[7] = v35 >> 8 >> 16;
    v41.i16[0] = v37;
    v41.i16[1] = BYTE2(v37);
    v41.i16[2] = BYTE1(v37);
    v41.i16[3] = v37 >> 8 >> 16;
    v41.i16[4] = v38;
    v41.i16[5] = BYTE2(v38);
    v41.i16[6] = BYTE1(v38);
    v41.i16[7] = v38 >> 8 >> 16;
    v42.i16[0] = v9[4];
    v42.i16[1] = BYTE2(v9[4]);
    v42.i16[2] = BYTE1(v9[4]);
    v42.i16[3] = (v9[4] >> 8 >> 16);
    v42.i16[4] = v36;
    v42.i16[5] = BYTE2(v36);
    v42.i16[6] = BYTE1(v36);
    v42.i16[7] = v36 >> 8 >> 16;
    v21.i16[7] = v14 >> 8 >> 16;
    v20.i16[7] = v16 >> 8 >> 16;
    signed int v43 = vaddvq_s32( vaddq_s32( (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v39, v28), 0x10uLL),  (uint32x4_t)vmulq_s32(v42, v26),  0x10uLL),  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v40, v27), 0x10uLL),  (uint32x4_t)vmulq_s32(v41, v25),  0x10uLL)))
        + ((v29 * (v9[8] & 0xFF00FFu)) >> 16)
        + v33
        - (vaddvq_s32( vaddq_s32( (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v22, *v11), 0xFuLL),  (uint32x4_t)vmulq_s32(v20, v11[2]),  0xFuLL),  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v21, v11[1]), 0xFuLL),  (uint32x4_t)vmulq_s32(v19, v11[3]),  0xFuLL)))
         + ((v11[4].i32[0] * v23) >> 15)
    --v31;
    uint32x2_t v11 = (int32x4_t *)((char *)v11 + 72);
    v9 += 9;
  }

  while (v31 > 1);
}

uint64_t sub_100016950(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    a2 = v3 + a3;
  }

  int v4 = (int32x4_t *)(*(void *)(a1 + 192) + 72LL * (int)a2);
  int v5 = (_DWORD *)(*(void *)(a1 + 1232) + 4LL * (int)(*(_DWORD *)(a1 + 1128) * a2));
  BOOL v6 = *(int **)(a1 + 1552);
  int v7 = *(_DWORD *)(*(void *)(a1 + 160) + 4LL * (int)a2);
  uint64_t v8 = *(int32x4_t **)(a1 + 1592);
  int v9 = *v6;
  unsigned int v10 = v6[1];
  unsigned int v11 = *v6 >> 8;
  unsigned int v13 = v6[2];
  unsigned int v12 = v6[3];
  unsigned int v14 = v6[4];
  unsigned int v15 = v6[5];
  unsigned int v16 = v6[6];
  unsigned int v17 = v6[7];
  LODWORD(v6) = v6[8];
  v18.i32[0] = v9 & 0xFF00FF;
  v18.i32[1] = v11 & 0xFF00FF;
  v18.i32[2] = v10 & 0xFF00FF;
  v18.i16[6] = BYTE1(v10);
  v18.i16[7] = v10 >> 8 >> 16;
  v19.i32[0] = v13 & 0xFF00FF;
  v19.i16[2] = BYTE1(v13);
  v19.i16[3] = v13 >> 8 >> 16;
  v19.i32[2] = v12 & 0xFF00FF;
  v19.i16[6] = BYTE1(v12);
  v19.i16[7] = v12 >> 8 >> 16;
  v20.i32[0] = v16 & 0xFF00FF;
  v20.i16[2] = BYTE1(v16);
  v20.i16[3] = v16 >> 8 >> 16;
  v20.i32[2] = v17 & 0xFF00FF;
  v20.i16[6] = BYTE1(v17);
  v20.i16[7] = v17 >> 8 >> 16;
  v21.i32[0] = v14 & 0xFF00FF;
  v21.i16[2] = BYTE1(v14);
  v21.i16[3] = v14 >> 8 >> 16;
  v21.i32[2] = v15 & 0xFF00FF;
  v21.i16[6] = BYTE1(v15);
  v21.i16[7] = v15 >> 8 >> 16;
  uint32x4_t v22 = (uint32x4_t)vmulq_s32(v21, v4[2]);
  uint32x4_t v23 = (uint32x4_t)vmulq_s32(v20, v4[3]);
  int32x4_t v24 = vmulq_s32(v19, v4[1]);
  uint32x4_t v25 = vshrq_n_u32((uint32x4_t)vmulq_s32(v18, *v4), 0xFuLL);
  uint32x4_t v26 = vshrq_n_u32((uint32x4_t)v24, 0xFuLL);
  __int32 v27 = v4[4].i32[1];
  LODWORD(v4) = v4[4].i32[0] * (v6 & 0xFF00FF);
  LODWORD(v6) = v27 * ((v6 >> 8) & 0xFF00FF);
  unsigned int v28 = v5[1];
  unsigned int v30 = v5[2];
  unsigned int v29 = v5[3];
  unsigned int v31 = v5[5];
  unsigned int v32 = v5[6];
  unsigned int v33 = v5[7];
  v34.i16[0] = *v5;
  v34.i16[1] = BYTE2(*v5);
  v34.i32[1] = (*v5 >> 8) & 0xFF00FF;
  v34.i16[4] = v28;
  v34.i16[5] = BYTE2(v28);
  v34.i16[6] = BYTE1(v28);
  v34.i16[7] = v28 >> 8 >> 16;
  v35.i32[0] = v30 & 0xFF00FF;
  v35.i16[2] = BYTE1(v30);
  v35.i16[3] = v30 >> 8 >> 16;
  v35.i32[2] = v29 & 0xFF00FF;
  v35.i16[6] = BYTE1(v29);
  v35.i16[7] = v29 >> 8 >> 16;
  v36.i32[0] = v32 & 0xFF00FF;
  v36.i16[2] = BYTE1(v32);
  v36.i16[3] = v32 >> 8 >> 16;
  v36.i32[2] = v33 & 0xFF00FF;
  v36.i16[6] = BYTE1(v33);
  v36.i16[7] = v33 >> 8 >> 16;
  v24.i16[0] = v5[4];
  v24.i16[1] = BYTE2(v5[4]);
  v24.i16[2] = BYTE1(v5[4]);
  v24.i16[3] = (v5[4] >> 8 >> 16);
  v24.i32[2] = v31 & 0xFF00FF;
  v24.i16[6] = BYTE1(v31);
  v24.i16[7] = v31 >> 8 >> 16;
  return (__int16)((((vaddvq_s32( vaddq_s32( (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v34, *v8), 0x10uLL),  (uint32x4_t)vmulq_s32(v24, v8[2]),  0x10uLL),  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)vmulq_s32(v35, v8[1]), 0x10uLL),  (uint32x4_t)vmulq_s32(v36, v8[3]),  0x10uLL)))
                                  + ((v8[4].i32[0] * (v5[8] & 0xFF00FFu)) >> 16)
                                  + v7
                                  - (vaddvq_s32( vaddq_s32( (int32x4_t)vsraq_n_u32(v25, v22, 0xFuLL),  (int32x4_t)vsraq_n_u32(v26, v23, 0xFuLL)))
                                   + (v4 >> 15)
                                   + (v6 >> 15))
                                  + ((v8[4].i32[1] * ((v5[8] >> 8) & 0xFF00FFu)) >> 16)) >> (*(_DWORD *)(a1 + 1196) - 2))
                                * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> (*(_DWORD *)(a1 + 1196) + 2));
}

uint64_t sub_100016BA4(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    int v5 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v6 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v6 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      int v5 = v6 + a3;
    }

    int v9 = *(_DWORD *)(a1 + 1128) * v5;
    int v7 = (void *)(a1 + 136);
    uint64_t v8 = (void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int v7 = (void *)(a1 + 144);
      uint64_t v8 = (void *)(a1 + 104);
    }
  }

  else
  {
    int v7 = (void *)(a1 + 792);
    uint64_t v8 = (void *)(a1 + 800);
    int v9 = 6 * v5;
  }

  uint64_t v10 = *v7 + 4LL * v9;
  uint64_t v11 = *(void *)(a1 + 1552);
  v12.i16[0] = *(_OWORD *)v10;
  v12.i16[1] = BYTE2(*(_OWORD *)v10);
  v12.i16[2] = BYTE4(*(void *)v10);
  v12.i16[3] = BYTE6(*(void *)v10);
  v12.i16[4] = *(void *)(v10 + 8);
  v12.i16[5] = BYTE2(*(void *)(v10 + 8));
  v12.i16[6] = BYTE12(*(_OWORD *)v10);
  v12.i16[7] = BYTE14(*(_OWORD *)v10);
  v13.i16[0] = *(_OWORD *)v11;
  v13.i16[1] = BYTE2(*(_OWORD *)v11);
  v13.i16[2] = BYTE4(*(void *)v11);
  v13.i16[3] = BYTE6(*(void *)v11);
  v13.i16[4] = *(void *)(v11 + 8);
  v13.i16[5] = BYTE2(*(void *)(v11 + 8));
  v13.i16[6] = BYTE12(*(_OWORD *)v11);
  v13.i16[7] = BYTE14(*(_OWORD *)v11);
  int32x4_t v14 = (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v12, v13),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v10, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v11, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL);
  v12.i16[2] = BYTE4(*(void *)(v11 + 16));
  v15.i16[3] = BYTE6(*(void *)(v10 + 16));
  v12.i16[1] = BYTE2(*(void *)(v11 + 16));
  v15.i16[2] = BYTE4(*(void *)(v10 + 16));
  v12.i16[0] = *(void *)(v11 + 16);
  v15.i16[1] = BYTE2(*(void *)(v10 + 16));
  v15.i16[0] = *(void *)(v10 + 16);
  *(uint32x2_t *)v12.i8 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v15, *(int32x2_t *)v12.i8),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v10 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v11 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL)),  0xFuLL);
  v12.i16[3] = BYTE6(*(void *)(v11 + 16));
  return (__int16)(((*(_DWORD *)(*v8 + 4LL * v5)
                                               + *(_DWORD *)(a1 + 1568)
                                               - (vaddvq_s32(v14)
                                                + v12.i32[0])
                                               - v12.i32[1])
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016CD4(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    a2 = v3 + a3;
  }

  uint64_t v4 = *(void *)(a1 + 136) + 24LL * (int)a2;
  uint64_t v5 = *(void *)(a1 + 1552);
  v6.i16[0] = *(_OWORD *)v4;
  v6.i16[1] = BYTE2(*(_OWORD *)v4);
  v6.i16[2] = BYTE4(*(void *)v4);
  v6.i16[3] = BYTE6(*(void *)v4);
  v6.i16[4] = *(void *)(v4 + 8);
  v6.i16[5] = BYTE2(*(void *)(v4 + 8));
  v6.i16[6] = BYTE12(*(_OWORD *)v4);
  v6.i16[7] = BYTE14(*(_OWORD *)v4);
  v7.i16[0] = *(_OWORD *)v5;
  v7.i16[1] = BYTE2(*(_OWORD *)v5);
  v7.i16[2] = BYTE4(*(void *)v5);
  v7.i16[3] = BYTE6(*(void *)v5);
  v7.i16[4] = *(void *)(v5 + 8);
  v7.i16[5] = BYTE2(*(void *)(v5 + 8));
  v7.i16[6] = BYTE12(*(_OWORD *)v5);
  v7.i16[7] = BYTE14(*(_OWORD *)v5);
  int32x4_t v8 = (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v6, v7),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v4, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v5, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL);
  v6.i16[2] = BYTE4(*(void *)(v5 + 16));
  v9.i16[3] = BYTE6(*(void *)(v4 + 16));
  v6.i16[1] = BYTE2(*(void *)(v5 + 16));
  v9.i16[2] = BYTE4(*(void *)(v4 + 16));
  v6.i16[0] = *(void *)(v5 + 16);
  v9.i16[1] = BYTE2(*(void *)(v4 + 16));
  v9.i16[0] = *(void *)(v4 + 16);
  *(uint32x2_t *)v6.i8 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v9, *(int32x2_t *)v6.i8),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v4 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v5 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL)),  0xFuLL);
  v6.i16[3] = BYTE6(*(void *)(v5 + 16));
  return (__int16)(((*(_DWORD *)(*(void *)(a1 + 32) + 4LL * (int)a2)
                                               + *(_DWORD *)(a1 + 1568)
                                               - (vaddvq_s32(v8)
                                                + v6.i32[0])
                                               - v6.i32[1])
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016DBC(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    a2 = v3 + a3;
  }

  uint64_t v4 = (uint32x4_t *)(*(void *)(a1 + 136) + 36LL * (int)a2);
  uint64_t v5 = *(uint32x4_t **)(a1 + 1552);
  v9.i16[7] = BYTE14(*(unsigned __int128 *)v5);
  v8.i16[7] = BYTE14(*(_OWORD *)&v5[1]);
  v7.i16[7] = BYTE14(*(unsigned __int128 *)v4);
  v6.i16[7] = BYTE14(*(_OWORD *)&v4[1]);
  v9.i16[6] = BYTE12(*(unsigned __int128 *)v5);
  v8.i16[6] = BYTE12(*(_OWORD *)&v5[1]);
  v7.i16[6] = BYTE12(*(unsigned __int128 *)v4);
  v6.i16[6] = BYTE12(*(_OWORD *)&v4[1]);
  v9.i16[5] = BYTE2(v5->i64[1]);
  v8.i16[5] = BYTE2(v5[1].i64[1]);
  v7.i16[5] = BYTE2(v4->i64[1]);
  v6.i16[5] = BYTE2(v4[1].i64[1]);
  v9.i16[4] = v5->i64[1];
  v8.i16[4] = v5[1].i64[1];
  v7.i16[4] = v4->i64[1];
  v6.i16[4] = v4[1].i64[1];
  v9.i16[3] = BYTE6(v5->i64[0]);
  v8.i16[3] = BYTE6(v5[1].i64[0]);
  v7.i16[3] = BYTE6(v4->i64[0]);
  v6.i16[3] = BYTE6(v4[1].i64[0]);
  v9.i16[2] = BYTE4(v5->i64[0]);
  v8.i16[2] = BYTE4(v5[1].i64[0]);
  v7.i16[2] = BYTE4(v4->i64[0]);
  v6.i16[2] = BYTE4(v4[1].i64[0]);
  v9.i16[1] = BYTE2(v5->u32[0]);
  v8.i16[1] = BYTE2(*(_OWORD *)&v5[1]);
  v7.i16[1] = BYTE2(v4->u32[0]);
  v6.i16[1] = BYTE2(*(_OWORD *)&v4[1]);
  v9.i16[0] = v5->u8[0];
  v8.i16[0] = *(_OWORD *)&v5[1];
  v7.i16[0] = v4->u8[0];
  v6.i16[0] = *(_OWORD *)&v4[1];
  return (__int16)(((*(_DWORD *)(*(void *)(a1 + 32) + 4LL * (int)a2)
                                 + *(_DWORD *)(a1 + 1568)
                                 - (vaddvq_s32((int32x4_t)vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v7, v9),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v4, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v5, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v6, v8),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32( v4[1],  8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32( v5[1],  8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))),  0xFuLL))
                                  + (((v4[2].i32[0] & 0xFF00FF) * (v5[2].i32[0] & 0xFF00FF)
                                    + (((unsigned __int32)v4[2].i32[0] >> 8) & 0xFF00FF)
                                    * (((unsigned __int32)v5[2].i32[0] >> 8) & 0xFF00FF)) >> 15)))
                                * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016EB8(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (*(_DWORD *)(a1 + 1176)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    }
    else {
      int v3 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    }
    a2 = v3 + a3;
  }

  uint64_t v4 = (uint32x2_t *)(*(void *)(a1 + 136) + 24LL * (int)a2);
  uint64_t v5 = *(uint32x2_t **)(a1 + 1552);
  v7.i16[3] = BYTE6(*(unint64_t *)v5);
  v6.i16[3] = BYTE6(*(unint64_t *)v4);
  v7.i16[2] = BYTE4(*(unint64_t *)v5);
  v6.i16[2] = BYTE4(*(unint64_t *)v4);
  v7.i16[1] = BYTE2(v5->u32[0]);
  v6.i16[1] = BYTE2(v4->u32[0]);
  v7.i16[0] = v5->u8[0];
  v6.i16[0] = v4->u8[0];
  uint32x2_t v8 = (uint32x2_t)vmla_s32( vmul_s32(v6, v7),  (int32x2_t)(*(void *)&vshr_n_u32(*v4, 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32(*v5, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  return (__int16)(((*(_DWORD *)(a1 + 1568)
                                 + *(_DWORD *)(*(void *)(a1 + 32) + 4LL * (int)a2)
                                 - (vsra_n_u32( (uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v8, 0xFuLL), 1),  v8,  0xFuLL).u32[0] + (((v4[1].i32[0] & 0xFF00FF) * (v5[1].i32[0] & 0xFF00FF)
                                    + (((unsigned __int32)v4[1].i32[0] >> 8) & 0xFF00FF)
                                    * (((unsigned __int32)v5[1].i32[0] >> 8) & 0xFF00FF)) >> 15)))
                                * *(_DWORD *)(a1 + 1052)
                                + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100016F94(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 != v4)
  {
    int v5 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v6 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v6 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      int v5 = v6 + a3;
    }

    int v10 = *(_DWORD *)(a1 + 1128) * v5;
    int32x2_t v7 = (uint64_t *)(a1 + 136);
    uint32x2_t v8 = (uint64_t *)(a1 + 32);
    int32x4_t v9 = (void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 1080) <= (signed int)a2)
    {
      int32x2_t v7 = (uint64_t *)(a1 + 144);
      uint32x2_t v8 = (uint64_t *)(a1 + 104);
      int32x4_t v9 = (void *)(a1 + 120);
    }
  }

  else
  {
    int32x2_t v7 = (uint64_t *)(a1 + 792);
    uint32x2_t v8 = (uint64_t *)(a1 + 800);
    int32x4_t v9 = (void *)(a1 + 808);
    int v10 = 6 * v5;
  }

  uint64_t v11 = *v8;
  uint64_t v12 = *v7;
  int32x4_t v13 = *(uint32x2_t **)(a1 + 1552);
  *(uint32x2_t *)v14.i8 = *v13;
  int v15 = *(_DWORD *)(v11 + 4LL * v5);
  if (*(_DWORD *)(a1 + 1044)) {
    v15 += *(_DWORD *)(*v9 + 4LL * v5);
  }
  uint64_t v16 = v12 + 4LL * v10;
  v17.i16[0] = *(_OWORD *)v16;
  v17.i16[1] = BYTE2(*(_OWORD *)v16);
  v17.i16[2] = BYTE4(*(void *)v16);
  v17.i16[3] = BYTE6(*(void *)v16);
  v17.i16[4] = *(void *)(v16 + 8);
  v17.i16[5] = BYTE2(*(void *)(v16 + 8));
  v17.i16[6] = BYTE12(*(_OWORD *)v16);
  v17.i16[7] = BYTE14(*(_OWORD *)v16);
  v14.u64[1] = (unint64_t)v13[1];
  v18.i64[0] = v14.i64[0] & 0xFF00FF00FF00FFLL;
  v18.i16[4] = v13[1].i32[0];
  v18.i16[5] = BYTE2(v13[1].i32[0]);
  v18.i16[6] = v13[1].i32[1];
  v18.i16[7] = BYTE2(v13[1].i32[1]);
  int32x4_t v19 = (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v17, v18),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v16, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v14, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL);
  v17.i16[2] = BYTE4(*(void *)&v13[2]);
  v20.i16[3] = BYTE6(*(void *)(v16 + 16));
  v17.i16[1] = BYTE2(*(void *)&v13[2]);
  v20.i16[2] = BYTE4(*(void *)(v16 + 16));
  v17.i16[0] = *(void *)&v13[2];
  v20.i16[1] = BYTE2(*(void *)(v16 + 16));
  v20.i16[0] = *(void *)(v16 + 16);
  *(uint32x2_t *)v17.i8 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v20, *(int32x2_t *)v17.i8),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v16 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32(v13[2], 8uLL) & 0xFFFF00FFFFFF00FFLL)),  0xFuLL);
  v17.i16[3] = BYTE6(*(void *)&v13[2]);
  return (__int16)(((v15
                                               + *(_DWORD *)(a1 + 1568)
                                               - v17.i32[1]
                                               - (vaddvq_s32(v19)
                                                + v17.i32[0]))
                                              * *(_DWORD *)(a1 + 1052)
                                              + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100017100(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    int v3 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v4 = v3[1] - *v3;
    if ((v4 & 1) == 0) {
      goto LABEL_4;
    }
    return sub_100015E54(a1, a2);
  }

  int32x4_t v21 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v4 = v21[1] - *v21;
  if ((v4 & 1) != 0) {
    return sub_100015E54(a1, a2);
  }
LABEL_4:
  signed int v5 = a2;
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (!v2)
    {
      signed int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      if (v4 >= 2) {
        goto LABEL_8;
      }
LABEL_27:
      int v20 = 0x40000000;
    }

    signed int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  }

  if (v4 < 2) {
    goto LABEL_27;
  }
LABEL_8:
  unsigned int v6 = v4 >> 1;
  uint64_t v7 = *(void *)(a1 + 1552);
  uint64_t v8 = 104LL;
  uint64_t v9 = *(void *)(a1 + v8);
  int v10 = (int *)(v9 + 4LL * v5);
  uint64_t v11 = 144LL;
  uint64_t v12 = *(void *)(a1 + v11);
  int v13 = *(_DWORD *)(a1 + 1128) * v5;
  uint64_t v14 = v12 + 4LL * v13;
  v15.i16[0] = *(_OWORD *)v7;
  v15.i16[1] = BYTE2(*(_OWORD *)v7);
  v15.i16[2] = BYTE4(*(void *)v7);
  v15.i16[3] = BYTE6(*(void *)v7);
  v15.i16[4] = *(void *)(v7 + 8);
  v15.i16[5] = BYTE2(*(void *)(v7 + 8));
  v15.i16[6] = BYTE12(*(_OWORD *)v7);
  v15.i16[7] = BYTE14(*(_OWORD *)v7);
  unsigned __int128 v16 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v7, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v17.i16[0] = *(void *)(v7 + 16);
  v17.i16[1] = BYTE2(*(void *)(v7 + 16));
  v17.i16[2] = BYTE4(*(void *)(v7 + 16));
  v17.i16[3] = BYTE6(*(void *)(v7 + 16));
  unint64_t v18 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v7 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
  uint64_t v19 = v6 - 1;
  if (v19 < 7)
  {
    int v20 = 0x40000000;
    goto LABEL_19;
  }

  uint64_t v23 = v5;
  uint64_t v24 = v13;
  uint64_t v25 = v19 + 1;
  uint64_t v26 = (v19 + 1) & 0x1FFFFFFF8LL;
  v6 -= v26;
  v14 += 48 * v26;
  int32x4_t v143 = vdupq_lane_s32(*(int32x2_t *)v15.i8, 1);
  int32x4_t v130 = vdupq_lane_s32(*(int32x2_t *)&v16, 1);
  int32x4_t v141 = vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
  int32x4_t v142 = vdupq_laneq_s32(v15, 2);
  unsigned __int128 v121 = v16;
  int32x4_t v122 = v15;
  int32x4_t v128 = vdupq_laneq_s32(v15, 3);
  int32x4_t v129 = vdupq_laneq_s32((int32x4_t)v16, 2);
  v10 += 2 * v26;
  int32x4_t v126 = vdupq_lane_s32(v17, 0);
  int32x4_t v127 = vdupq_laneq_s32((int32x4_t)v16, 3);
  __int32 v27 = (const float *)(v9 + 4 * v23 + 32);
  unint64_t v119 = v18;
  int32x2_t v120 = v17;
  int32x4_t v124 = vdupq_lane_s32(v17, 1);
  int32x4_t v125 = vdupq_lane_s32((int32x2_t)v18, 0);
  int32x4_t v123 = vdupq_lane_s32((int32x2_t)v18, 1);
  unsigned int v28 = (__int32 *)(v12 + 4 * v24 + 192);
  v29.i64[0] = 0x4000000040000000LL;
  v29.i64[1] = 0x4000000040000000LL;
  uint64_t v30 = v26;
  v31.i64[0] = 0x4000000040000000LL;
  v31.i64[1] = 0x4000000040000000LL;
  int32x4_t v32 = vdupq_lane_s32(*(int32x2_t *)&v16, 0);
  do
  {
    int32x4_t v138 = v31;
    int32x4_t v140 = v29;
    unsigned int v33 = v27 - 8;
    v34.i32[0] = *v28;
    v35.i32[0] = v28[1];
    float32x4x2_t v144 = vld2q_f32(v33);
    float32x4x2_t v139 = v144;
    v34.i32[1] = v28[12];
    v34.i32[2] = v28[24];
    v144.val[0].i32[0] = *(v28 - 48);
    v144.val[0].i32[1] = *(v28 - 36);
    v35.i32[1] = v28[13];
    v36.i32[0] = *(v28 - 47);
    v36.i32[1] = *(v28 - 35);
    v35.i32[2] = v28[25];
    v34.i32[3] = v28[36];
    v35.i32[3] = v28[37];
    v144.val[0].i32[2] = *(v28 - 24);
    v36.i32[2] = *(v28 - 23);
    v37.i32[0] = *(v28 - 46);
    v37.i32[1] = *(v28 - 34);
    v144.val[0].i32[3] = *(v28 - 12);
    v37.i32[2] = *(v28 - 22);
    v36.i32[3] = *(v28 - 11);
    v144.val[1].i32[0] = v28[2];
    v38.i32[0] = v28[3];
    v37.i32[3] = *(v28 - 10);
    v144.val[1].i32[1] = v28[14];
    v144.val[1].i32[2] = v28[26];
    uint32x4_t v39 = vshrq_n_u32(v34, 8uLL);
    v144.val[1].i32[3] = v28[38];
    v40.i32[0] = *(v28 - 45);
    v34.i16[0] = *v28;
    v34.i16[1] = BYTE2(*v28);
    v34.i16[2] = v34.u8[4];
    v34.i16[3] = BYTE2(v28[12]);
    v34.i16[4] = v34.u8[8];
    v34.i16[5] = BYTE2(v28[24]);
    v34.i16[6] = v34.u8[12];
    v34.i16[7] = BYTE2(v28[36]);
    v40.i32[1] = *(v28 - 33);
    v40.i32[2] = *(v28 - 21);
    uint32x4_t v41 = vshrq_n_u32(v35, 8uLL);
    v35.i16[0] = v35.u8[0];
    v35.i16[1] = BYTE2(v28[1]);
    v35.i16[2] = v35.u8[4];
    v35.i16[3] = BYTE2(v28[13]);
    v35.i16[4] = v35.u8[8];
    v35.i16[5] = BYTE2(v28[25]);
    v35.i16[6] = v35.u8[12];
    v35.i16[7] = BYTE2(v28[37]);
    v40.i32[3] = *(v28 - 9);
    int32x4_t v42 = vmulq_s32((int32x4_t)v34, v141);
    v38.i32[1] = v28[15];
    v38.i32[2] = v28[27];
    int32x4_t v43 = (int32x4_t)vshrq_n_u32((uint32x4_t)v144.val[1], 8uLL);
    v38.i32[3] = v28[39];
    int32x4_t v44 = vmulq_s32((int32x4_t)v35, v143);
    v45.i32[0] = *(v28 - 44);
    v45.i32[1] = *(v28 - 32);
    v144.val[1].i16[0] = v144.val[1].u8[0];
    v144.val[1].i16[1] = BYTE2(v28[2]);
    v144.val[1].i16[2] = v144.val[1].u8[4];
    v144.val[1].i16[3] = BYTE2(v28[14]);
    v144.val[1].i16[4] = v144.val[1].u8[8];
    v144.val[1].i16[5] = BYTE2(v28[26]);
    v144.val[1].i16[6] = v144.val[1].u8[12];
    v144.val[1].i16[7] = BYTE2(v28[38]);
    v45.i32[2] = *(v28 - 20);
    int32x4_t v46 = vmulq_s32((int32x4_t)v144.val[1], v142);
    v45.i32[3] = *(v28 - 8);
    v47.i32[0] = v28[4];
    v48.i32[0] = v28[5];
    v144.val[1] = (float32x4_t)vshrq_n_u32((uint32x4_t)v144.val[0], 8uLL);
    v47.i32[1] = v28[16];
    v47.i32[2] = v28[28];
    v144.val[0].i16[0] = v144.val[0].u8[0];
    v144.val[0].i16[1] = BYTE2(*(v28 - 48));
    v144.val[0].i16[2] = v144.val[0].u8[4];
    v144.val[0].i16[3] = BYTE2(*(v28 - 36));
    v144.val[0].i16[4] = v144.val[0].u8[8];
    v144.val[0].i16[5] = BYTE2(*(v28 - 24));
    v144.val[0].i16[6] = v144.val[0].u8[12];
    v144.val[0].i16[7] = BYTE2(*(v28 - 12));
    v47.i32[3] = v28[40];
    v49.i32[0] = *(v28 - 43);
    uint32x4_t v50 = vshrq_n_u32(v36, 8uLL);
    v49.i32[1] = *(v28 - 31);
    v49.i32[2] = *(v28 - 19);
    v36.i16[0] = v36.u8[0];
    v36.i16[1] = BYTE2(*(v28 - 47));
    v36.i16[2] = v36.u8[4];
    v36.i16[3] = BYTE2(*(v28 - 35));
    v36.i16[4] = v36.u8[8];
    v36.i16[5] = BYTE2(*(v28 - 23));
    v36.i16[6] = v36.u8[12];
    v36.i16[7] = BYTE2(*(v28 - 11));
    v49.i32[3] = *(v28 - 7);
    uint32x4_t v51 = vshrq_n_u32(v37, 8uLL);
    v48.i32[1] = v28[17];
    v48.i32[2] = v28[29];
    v37.i16[0] = v37.u8[0];
    v37.i16[1] = BYTE2(*(v28 - 46));
    v37.i16[2] = v37.u8[4];
    v37.i16[3] = BYTE2(*(v28 - 34));
    v37.i16[4] = v37.u8[8];
    v37.i16[5] = BYTE2(*(v28 - 22));
    v37.i16[6] = v37.u8[12];
    v37.i16[7] = BYTE2(*(v28 - 10));
    v48.i32[3] = v28[41];
    uint32x4_t v52 = vshrq_n_u32(v40, 8uLL);
    uint32x4_t v53 = vshrq_n_u32(v38, 8uLL);
    v40.i16[0] = v40.u8[0];
    v40.i16[1] = BYTE2(*(v28 - 45));
    v40.i16[2] = v40.u8[4];
    v40.i16[3] = BYTE2(*(v28 - 33));
    v40.i16[4] = v40.u8[8];
    v40.i16[5] = BYTE2(*(v28 - 21));
    v40.i16[6] = v40.u8[12];
    v40.i16[7] = BYTE2(*(v28 - 9));
    v38.i16[0] = v38.u8[0];
    v38.i16[1] = BYTE2(v28[3]);
    v38.i16[2] = v38.u8[4];
    v38.i16[3] = BYTE2(v28[15]);
    v38.i16[4] = v38.u8[8];
    v38.i16[5] = BYTE2(v28[27]);
    v38.i16[6] = v38.u8[12];
    v38.i16[7] = BYTE2(v28[39]);
    int32x4_t v54 = vmulq_s32((int32x4_t)v38, v128);
    uint32x4_t v55 = vshrq_n_u32(v45, 8uLL);
    v45.i16[0] = v45.u8[0];
    v45.i16[1] = BYTE2(*(v28 - 44));
    v45.i16[2] = v45.u8[4];
    v45.i16[3] = BYTE2(*(v28 - 32));
    v45.i16[4] = v45.u8[8];
    v45.i16[5] = BYTE2(*(v28 - 20));
    v45.i16[6] = v45.u8[12];
    v45.i16[7] = BYTE2(*(v28 - 8));
    int32x4_t v136 = vmulq_s32((int32x4_t)v144.val[0], v141);
    uint32x4_t v56 = vshrq_n_u32(v47, 8uLL);
    v47.i16[0] = v47.u8[0];
    v47.i16[1] = BYTE2(v28[4]);
    v47.i16[2] = v47.u8[4];
    v47.i16[3] = BYTE2(v28[16]);
    v47.i16[4] = v47.u8[8];
    v47.i16[5] = BYTE2(v28[28]);
    v47.i16[6] = v47.u8[12];
    v47.i16[7] = BYTE2(v28[40]);
    uint32x4_t v133 = v55;
    uint32x4_t v135 = vshrq_n_u32(v49, 8uLL);
    v49.i16[0] = v49.u8[0];
    v49.i16[1] = BYTE2(*(v28 - 43));
    v49.i16[2] = v49.u8[4];
    v49.i16[3] = BYTE2(*(v28 - 31));
    v49.i16[4] = v49.u8[8];
    v49.i16[5] = BYTE2(*(v28 - 19));
    v49.i16[6] = v49.u8[12];
    v49.i16[7] = BYTE2(*(v28 - 7));
    v57.i32[0] = *(v28 - 39);
    uint32x4_t v58 = (uint32x4_t)vmlaq_s32( v42,  (int32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v32);
    v57.i32[1] = *(v28 - 27);
    v57.i32[2] = *(v28 - 15);
    int32x4_t v59 = vmulq_s32((int32x4_t)v36, v143);
    uint32x4_t v60 = vshrq_n_u32(v48, 8uLL);
    v57.i32[3] = *(v28 - 3);
    v36.i32[0] = v28[8];
    v61.i32[0] = v28[9];
    v61.i32[1] = v28[21];
    uint32x4_t v62 = (uint32x4_t)vmlaq_s32( v44,  (int32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v130);
    v61.i32[2] = v28[33];
    v61.i32[3] = v28[45];
    v48.i16[0] = v48.u8[0];
    v48.i16[1] = BYTE2(v28[5]);
    v48.i16[2] = v48.u8[4];
    v48.i16[3] = BYTE2(v28[17]);
    v48.i16[4] = v48.u8[8];
    v48.i16[5] = BYTE2(v28[29]);
    v48.i16[6] = v48.u8[12];
    v48.i16[7] = BYTE2(v28[41]);
    v63.i32[0] = *(v28 - 38);
    v63.i32[1] = *(v28 - 26);
    v63.i32[2] = *(v28 - 14);
    uint32x4_t v64 = (uint32x4_t)vmlaq_s32( v46,  (int32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v129);
    v144.val[0] = (float32x4_t)vmulq_s32((int32x4_t)v48, v124);
    v63.i32[3] = *(v28 - 2);
    int32x4_t v65 = vmulq_s32((int32x4_t)v40, v128);
    v40.i32[0] = v28[10];
    v43.i32[0] = v28[11];
    v40.i32[1] = v28[22];
    v40.i32[2] = v28[34];
    v40.i32[3] = v28[46];
    uint32x4_t v132 = (uint32x4_t)vmlaq_s32( v54,  (int32x4_t)(*(_OWORD *)&v53 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v127);
    v48.i32[0] = *(v28 - 37);
    v48.i32[1] = *(v28 - 25);
    int32x4_t v131 = vmulq_s32((int32x4_t)v45, v126);
    v48.i32[2] = *(v28 - 13);
    v48.i32[3] = *(v28 - 1);
    unsigned __int128 v66 = *(_OWORD *)&v133 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v43.i32[1] = v28[23];
    v43.i32[2] = v28[35];
    v43.i32[3] = v28[47];
    int32x4_t v67 = vmulq_s32((int32x4_t)v49, v124);
    uint32x4_t v134 = (uint32x4_t)vmlaq_s32( (int32x4_t)v144.val[0],  (int32x4_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v123);
    int32x4_t v68 = (int32x4_t)vshrq_n_u32(v57, 8uLL);
    v57.i16[0] = v57.u8[0];
    v57.i16[1] = BYTE2(*(v28 - 39));
    v57.i16[2] = v57.u8[4];
    v57.i16[3] = BYTE2(*(v28 - 27));
    v57.i16[4] = v57.u8[8];
    v57.i16[5] = BYTE2(*(v28 - 15));
    v57.i16[6] = v57.u8[12];
    v57.i16[7] = BYTE2(*(v28 - 3));
    int32x4_t v69 = (int32x4_t)vshrq_n_u32(v61, 8uLL);
    v61.i16[0] = v61.u8[0];
    v61.i16[1] = BYTE2(v28[9]);
    v61.i16[2] = v61.u8[4];
    v61.i16[3] = BYTE2(v28[21]);
    v61.i16[4] = v61.u8[8];
    v61.i16[5] = BYTE2(v28[33]);
    v61.i16[6] = v61.u8[12];
    v61.i16[7] = BYTE2(v28[45]);
    int32x4_t v70 = vmulq_s32((int32x4_t)v57, v128);
    uint32x4_t v71 = (uint32x4_t)vmlaq_s32( v136,  (int32x4_t)(*(_OWORD *)&v144.val[1] & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v32);
    uint32x4_t v137 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v61, v128),  (int32x4_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v127);
    uint32x4_t v72 = vshrq_n_u32(v63, 8uLL);
    v63.i16[0] = v63.u8[0];
    v63.i16[1] = BYTE2(*(v28 - 38));
    v63.i16[2] = v63.u8[4];
    v63.i16[3] = BYTE2(*(v28 - 26));
    v63.i16[4] = v63.u8[8];
    v63.i16[5] = BYTE2(*(v28 - 14));
    v63.i16[6] = v63.u8[12];
    v63.i16[7] = BYTE2(*(v28 - 2));
    uint32x4_t v73 = vshrq_n_u32(v40, 8uLL);
    v40.i16[0] = v40.u8[0];
    v40.i16[1] = BYTE2(v28[10]);
    v40.i16[2] = v40.u8[4];
    v40.i16[3] = BYTE2(v28[22]);
    v40.i16[4] = v40.u8[8];
    v40.i16[5] = BYTE2(v28[34]);
    v40.i16[6] = v40.u8[12];
    v40.i16[7] = BYTE2(v28[46]);
    uint32x4_t v74 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v37, v142),  (int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v129);
    int32x4_t v75 = vmulq_s32((int32x4_t)v63, v126);
    uint32x4_t v76 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v40, v126),  (int32x4_t)(*(_OWORD *)&v73 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v125);
    int32x4_t v77 = (int32x4_t)vshrq_n_u32(v48, 8uLL);
    v48.i16[0] = v48.u8[0];
    v48.i16[1] = BYTE2(*(v28 - 37));
    v48.i16[2] = v48.u8[4];
    v48.i16[3] = BYTE2(*(v28 - 25));
    v48.i16[4] = v48.u8[8];
    v48.i16[5] = BYTE2(*(v28 - 13));
    v48.i16[6] = v48.u8[12];
    v48.i16[7] = BYTE2(*(v28 - 1));
    uint32x4_t v78 = vshrq_n_u32((uint32x4_t)v43, 8uLL);
    v43.i16[0] = v43.u8[0];
    v43.i16[1] = BYTE2(v28[11]);
    v43.i16[2] = v43.u8[4];
    v43.i16[3] = BYTE2(v28[23]);
    v43.i16[4] = v43.u8[8];
    v43.i16[5] = BYTE2(v28[35]);
    v43.i16[6] = v43.u8[12];
    v43.i16[7] = BYTE2(v28[47]);
    int32x4_t v79 = vmulq_s32((int32x4_t)v48, v124);
    v48.i32[0] = *(v28 - 42);
    v48.i32[1] = *(v28 - 30);
    v48.i32[2] = *(v28 - 18);
    v48.i32[3] = *(v28 - 6);
    uint32x4_t v80 = (uint32x4_t)vmlaq_s32( v70,  (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v127);
    v68.i32[0] = v28[6];
    v69.i32[0] = v28[7];
    v68.i32[1] = v28[18];
    uint32x4_t v81 = (uint32x4_t)vmlaq_s32( v75,  (int32x4_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v125);
    v68.i32[2] = v28[30];
    v68.i32[3] = v28[42];
    uint32x4_t v82 = (uint32x4_t)vmlaq_s32( v79,  (int32x4_t)(*(_OWORD *)&v77 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v123);
    uint32x4_t v83 = (uint32x4_t)vmlaq_s32( vmulq_s32(v43, v124),  (int32x4_t)(*(_OWORD *)&v78 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v123);
    v77.i32[0] = *(v28 - 41);
    v77.i32[1] = *(v28 - 29);
    v77.i32[2] = *(v28 - 17);
    v77.i32[3] = *(v28 - 5);
    v69.i32[1] = v28[19];
    v69.i32[2] = v28[31];
    v69.i32[3] = v28[43];
    uint32x4_t v84 = vshrq_n_u32(v48, 8uLL);
    v48.i16[0] = v48.u8[0];
    v48.i16[1] = BYTE2(*(v28 - 42));
    v48.i16[2] = v48.u8[4];
    v48.i16[3] = BYTE2(*(v28 - 30));
    v48.i16[4] = v48.u8[8];
    v48.i16[5] = BYTE2(*(v28 - 18));
    v48.i16[6] = v48.u8[12];
    v48.i16[7] = BYTE2(*(v28 - 6));
    uint32x4_t v85 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v48, v141),  (int32x4_t)(*(_OWORD *)&v84 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v32);
    uint32x4_t v86 = vshrq_n_u32((uint32x4_t)v68, 8uLL);
    v68.i16[0] = v68.u8[0];
    v68.i16[1] = BYTE2(v28[6]);
    v68.i16[2] = v68.u8[4];
    v68.i16[3] = BYTE2(v28[18]);
    v68.i16[4] = v68.u8[8];
    v68.i16[5] = BYTE2(v28[30]);
    v68.i16[6] = v68.u8[12];
    v68.i16[7] = BYTE2(v28[42]);
    uint32x4_t v87 = (uint32x4_t)vmlaq_s32( vmulq_s32(v68, v141),  (int32x4_t)(*(_OWORD *)&v86 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v32);
    uint32x4_t v88 = vshrq_n_u32((uint32x4_t)v77, 8uLL);
    v77.i16[0] = v77.u8[0];
    v77.i16[1] = BYTE2(*(v28 - 41));
    v77.i16[2] = v77.u8[4];
    v77.i16[3] = BYTE2(*(v28 - 29));
    v77.i16[4] = v77.u8[8];
    v77.i16[5] = BYTE2(*(v28 - 17));
    v77.i16[6] = v77.u8[12];
    v77.i16[7] = BYTE2(*(v28 - 5));
    uint32x4_t v89 = (uint32x4_t)vmlaq_s32( vmulq_s32(v77, v143),  (int32x4_t)(*(_OWORD *)&v88 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v130);
    int32x4_t v90 = (int32x4_t)vshrq_n_u32((uint32x4_t)v69, 8uLL);
    v69.i16[0] = v69.u8[0];
    v69.i16[1] = BYTE2(v28[7]);
    v69.i16[2] = v69.u8[4];
    v69.i16[3] = BYTE2(v28[19]);
    v69.i16[4] = v69.u8[8];
    v69.i16[5] = BYTE2(v28[31]);
    v69.i16[6] = v69.u8[12];
    v69.i16[7] = BYTE2(v28[43]);
    uint32x4_t v91 = (uint32x4_t)vmlaq_s32( vmulq_s32(v69, v143),  (int32x4_t)(*(_OWORD *)&v90 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v130);
    v90.i32[0] = *(v28 - 40);
    v90.i32[1] = *(v28 - 28);
    v144.val[0] = (float32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32(v71, 0xFuLL),  (uint32x4_t)vmlaq_s32( v59,  (int32x4_t)(*(_OWORD *)&v50 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v130),  0xFuLL),  v74,  0xFuLL),  (uint32x4_t)vmlaq_s32( v65,  (int32x4_t)(*(_OWORD *)&v52 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v127),  0xFuLL);
    v90.i32[2] = *(v28 - 16);
    v90.i32[3] = *(v28 - 4);
    int32x4_t v92 = (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v58, 0xFuLL), v62, 0xFuLL), v64, 0xFuLL),  v132,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v47, v126),  (int32x4_t)(*(_OWORD *)&v56 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v125),  0xFuLL),  v134,  0xFuLL);
    uint32x4_t v93 = vshrq_n_u32((uint32x4_t)v90, 8uLL);
    v90.i32[0] &= 0xFF00FFu;
    v90.i16[2] = v90.u8[4];
    v90.i16[3] = BYTE2(*(v28 - 28));
    v90.i16[4] = v90.u8[8];
    v90.i16[5] = BYTE2(*(v28 - 16));
    v90.i16[6] = v90.u8[12];
    v90.i16[7] = BYTE2(*(v28 - 4));
    float32x4x2_t v145 = vld2q_f32(v27);
    v36.i32[1] = v28[20];
    v36.i32[2] = v28[32];
    v36.i32[3] = v28[44];
    uint32x4_t v94 = vshrq_n_u32(v36, 8uLL);
    v36.i16[0] = v36.u8[0];
    v36.i16[1] = BYTE2(v28[8]);
    v36.i16[2] = v36.u8[4];
    v36.i16[3] = BYTE2(v28[20]);
    v36.i16[4] = v36.u8[8];
    v36.i16[5] = BYTE2(v28[32]);
    v36.i16[6] = v36.u8[12];
    v36.i16[7] = BYTE2(v28[44]);
    v27 += 16;
    int32x4_t v29 = vminq_s32( vsubq_s32( (int32x4_t)v139.val[1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v80, 0xFuLL), v81, 0xFuLL), v82, 0xFuLL),  v85,  0xFuLL),  v89,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v90, v142),  (int32x4_t)(*(_OWORD *)&v93 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v129),  0xFuLL)),  vminq_s32( vsubq_s32( (int32x4_t)v139.val[0],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( (uint32x4_t)v144.val[0],  (uint32x4_t)vmlaq_s32(v131, (int32x4_t)v66, v125),  0xFuLL),  (uint32x4_t)vmlaq_s32( v67,  (int32x4_t)(*(_OWORD *)&v135 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v123),  0xFuLL)),  v140));
    v28 += 96;
    int32x4_t v31 = vminq_s32( vsubq_s32( (int32x4_t)v145.val[1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v137, 0xFuLL), v76, 0xFuLL), v83, 0xFuLL),  v87,  0xFuLL),  v91,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v36, v142),  (int32x4_t)(*(_OWORD *)&v94 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v129),  0xFuLL)),  vminq_s32(vsubq_s32((int32x4_t)v145.val[0], v92), v138));
    v30 -= 8LL;
  }

  while (v30);
  int v20 = vminvq_s32(vminq_s32(v29, v31));
  unsigned __int128 v16 = v121;
  int32x4_t v15 = v122;
  unint64_t v18 = v119;
  int32x2_t v17 = v120;
  if (v25 != v26)
  {
LABEL_19:
    int32x2_t v95 = vzip1_s32(vdup_laneq_s32(v15, 3), v17);
    int32x2_t v96 = vzip1_s32(vdup_laneq_s32((int32x4_t)v16, 3), (int32x2_t)v18);
    int32x2_t v97 = vzip2_s32((int32x2_t)v18, v17);
    int32x2_t v98 = (int32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL).u64[0];
    int32x2_t v99 = (int32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    unsigned int v100 = v6 + 1;
    do
    {
      v101.i16[0] = *(_OWORD *)v14;
      v101.i16[1] = BYTE2(*(_OWORD *)v14);
      v101.i16[2] = BYTE4(*(void *)v14);
      v101.i16[3] = BYTE6(*(void *)v14);
      v101.i16[4] = *(void *)(v14 + 8);
      v101.i16[5] = BYTE2(*(void *)(v14 + 8));
      v101.i16[6] = BYTE12(*(_OWORD *)v14);
      v101.i16[7] = BYTE14(*(_OWORD *)v14);
      v102.i16[0] = *(void *)(v14 + 16);
      v102.i16[1] = BYTE2(*(void *)(v14 + 16));
      v102.i16[2] = BYTE4(*(void *)(v14 + 16));
      v102.i16[3] = BYTE6(*(void *)(v14 + 16));
      uint32x2_t v103 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v102, v17),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v14 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v18),  0xFuLL);
      __int32 v104 = v103.i32[1];
      int v105 = *v10;
      int v106 = v10[1];
      v10 += 2;
      __int32 v107 = vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v101, v15),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v14, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v16),  0xFuLL))
           + v103.i32[0];
      unsigned int v108 = *(_DWORD *)(v14 + 44);
      v101.i16[0] = *(void *)(v14 + 36);
      v101.i16[1] = BYTE2(*(void *)(v14 + 36));
      v101.i16[2] = BYTE4(*(void *)(v14 + 36));
      v101.i16[3] = BYTE6(*(void *)(v14 + 36));
      uint32x2_t v109 = (uint32x2_t)vmla_s32( vmul_s32(*(int32x2_t *)v101.i8, v95),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v14 + 36), 8uLL) & 0xFFFF00FFFFFF00FFLL),  v96);
      int32x2_t v110 = (int32x2_t)vshr_n_u32(v109, 0xFuLL);
      int v111 = v105 - v107 - v104;
      v112.i16[0] = BYTE1(v108);
      v112.i16[1] = v108 >> 8 >> 16;
      v112.i16[2] = v108;
      v112.i16[3] = BYTE2(v108);
      int32x2_t v113 = vmul_s32(v112, v97);
      uint32x2_t v114 = vshr_n_u32(*(uint32x2_t *)(v14 + 28), 8uLL);
      v115.i16[0] = *(void *)(v14 + 28);
      v115.i16[1] = BYTE2(*(void *)(v14 + 28));
      v115.i16[2] = BYTE4(*(void *)(v14 + 28));
      v115.i16[3] = BYTE6(*(void *)(v14 + 28));
      int32x2_t v116 = vmul_s32(v115, v98);
      if (v111 < v20) {
        int v20 = v111;
      }
      uint32x2_t v117 = vshr_n_u32((uint32x2_t)vmla_s32(v116, (int32x2_t)(*(void *)&v114 & 0xFFFF00FFFFFF00FFLL), v99), 0xFuLL);
      signed __int32 v118 = v106
           - (v117.i32[0]
            + v117.i32[1])
           - (vsra_n_u32((uint32x2_t)vdup_lane_s32(v110, 1), v109, 0xFuLL).u32[0]
            + (vadd_s32(v113, vdup_lane_s32(v113, 1)).u32[0] >> 15)
            + (((*(_DWORD *)(v14 + 24) & 0xFF00FF) * v15.i32[0]
              + ((*(_DWORD *)(v14 + 24) >> 8) & 0xFF00FF) * v16) >> 15));
      if (v118 < v20) {
        int v20 = v118;
      }
      --v100;
      v14 += 48LL;
    }

    while (v100 > 1);
  }

uint64_t sub_100017A18(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    int v3 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v4 = v3[1] - *v3;
    if ((v4 & 1) == 0) {
      goto LABEL_3;
    }
    return sub_1000182FC(a1, a2);
  }

  int32x2_t v17 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v4 = v17[1] - *v17;
  if ((v4 & 1) != 0) {
    return sub_1000182FC(a1, a2);
  }
LABEL_3:
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (!v2)
    {
      a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      if (v4 >= 2) {
        goto LABEL_7;
      }
LABEL_22:
      int v16 = 0x40000000;
    }

    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  }

  if (v4 < 2) {
    goto LABEL_22;
  }
LABEL_7:
  unsigned int v5 = v4 >> 1;
  uint64_t v6 = *(void *)(a1 + 1552);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (int *)(v7 + 4LL * (int)a2);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v10 = v9 + 24LL * (int)a2;
  v11.i16[0] = *(_OWORD *)v6;
  v11.i16[1] = BYTE2(*(_OWORD *)v6);
  v11.i16[2] = BYTE4(*(void *)v6);
  v11.i16[3] = BYTE6(*(void *)v6);
  v11.i16[4] = *(void *)(v6 + 8);
  v11.i16[5] = BYTE2(*(void *)(v6 + 8));
  v11.i16[6] = BYTE12(*(_OWORD *)v6);
  v11.i16[7] = BYTE14(*(_OWORD *)v6);
  unsigned __int128 v12 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v6, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v13.i16[0] = *(void *)(v6 + 16);
  v13.i16[1] = BYTE2(*(void *)(v6 + 16));
  v13.i16[2] = BYTE4(*(void *)(v6 + 16));
  v13.i16[3] = BYTE6(*(void *)(v6 + 16));
  unint64_t v14 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v6 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
  uint64_t v15 = v5 - 1;
  if (v15 < 7)
  {
    int v16 = 0x40000000;
    goto LABEL_14;
  }

  uint64_t v19 = v15 + 1;
  uint64_t v20 = (v15 + 1) & 0x1FFFFFFF8LL;
  v5 -= v20;
  v10 += 48 * v20;
  int32x4_t v137 = vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
  int32x4_t v124 = vdupq_lane_s32(*(int32x2_t *)&v12, 1);
  int32x4_t v135 = vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
  int32x4_t v136 = vdupq_laneq_s32(v11, 2);
  unsigned __int128 v115 = v12;
  int32x4_t v116 = v11;
  int32x4_t v122 = vdupq_laneq_s32(v11, 3);
  int32x4_t v123 = vdupq_laneq_s32((int32x4_t)v12, 2);
  v8 += 2 * v20;
  int32x4_t v120 = vdupq_lane_s32(v13, 0);
  int32x4_t v121 = vdupq_laneq_s32((int32x4_t)v12, 3);
  int32x4_t v21 = (const float *)(v7 + 4LL * (int)a2 + 32);
  unint64_t v113 = v14;
  int32x2_t v114 = v13;
  int32x4_t v118 = vdupq_lane_s32(v13, 1);
  int32x4_t v119 = vdupq_lane_s32((int32x2_t)v14, 0);
  uint32x4_t v22 = (__int32 *)(v9 + 24LL * (int)a2 + 192);
  int32x4_t v117 = vdupq_lane_s32((int32x2_t)v14, 1);
  v23.i64[0] = 0x4000000040000000LL;
  v23.i64[1] = 0x4000000040000000LL;
  uint64_t v24 = v20;
  v25.i64[0] = 0x4000000040000000LL;
  v25.i64[1] = 0x4000000040000000LL;
  int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)&v12, 0);
  do
  {
    int32x4_t v132 = v25;
    int32x4_t v134 = v23;
    __int32 v27 = v21 - 8;
    v28.i32[0] = *v22;
    v29.i32[0] = v22[1];
    float32x4x2_t v138 = vld2q_f32(v27);
    float32x4x2_t v133 = v138;
    v28.i32[1] = v22[12];
    v28.i32[2] = v22[24];
    v138.val[0].i32[0] = *(v22 - 48);
    v138.val[0].i32[1] = *(v22 - 36);
    v29.i32[1] = v22[13];
    v30.i32[0] = *(v22 - 47);
    v30.i32[1] = *(v22 - 35);
    v29.i32[2] = v22[25];
    v28.i32[3] = v22[36];
    v29.i32[3] = v22[37];
    v138.val[0].i32[2] = *(v22 - 24);
    v30.i32[2] = *(v22 - 23);
    v31.i32[0] = *(v22 - 46);
    v31.i32[1] = *(v22 - 34);
    v138.val[0].i32[3] = *(v22 - 12);
    v31.i32[2] = *(v22 - 22);
    v30.i32[3] = *(v22 - 11);
    v138.val[1].i32[0] = v22[2];
    v32.i32[0] = v22[3];
    v31.i32[3] = *(v22 - 10);
    v138.val[1].i32[1] = v22[14];
    v138.val[1].i32[2] = v22[26];
    uint32x4_t v33 = vshrq_n_u32(v28, 8uLL);
    v138.val[1].i32[3] = v22[38];
    v34.i32[0] = *(v22 - 45);
    v28.i16[0] = *v22;
    v28.i16[1] = BYTE2(*v22);
    v28.i16[2] = v28.u8[4];
    v28.i16[3] = BYTE2(v22[12]);
    v28.i16[4] = v28.u8[8];
    v28.i16[5] = BYTE2(v22[24]);
    v28.i16[6] = v28.u8[12];
    v28.i16[7] = BYTE2(v22[36]);
    v34.i32[1] = *(v22 - 33);
    v34.i32[2] = *(v22 - 21);
    uint32x4_t v35 = vshrq_n_u32(v29, 8uLL);
    v29.i16[0] = v29.u8[0];
    v29.i16[1] = BYTE2(v22[1]);
    v29.i16[2] = v29.u8[4];
    v29.i16[3] = BYTE2(v22[13]);
    v29.i16[4] = v29.u8[8];
    v29.i16[5] = BYTE2(v22[25]);
    v29.i16[6] = v29.u8[12];
    v29.i16[7] = BYTE2(v22[37]);
    v34.i32[3] = *(v22 - 9);
    int32x4_t v36 = vmulq_s32((int32x4_t)v28, v135);
    v32.i32[1] = v22[15];
    v32.i32[2] = v22[27];
    int32x4_t v37 = (int32x4_t)vshrq_n_u32((uint32x4_t)v138.val[1], 8uLL);
    v32.i32[3] = v22[39];
    int32x4_t v38 = vmulq_s32((int32x4_t)v29, v137);
    v39.i32[0] = *(v22 - 44);
    v39.i32[1] = *(v22 - 32);
    v138.val[1].i16[0] = v138.val[1].u8[0];
    v138.val[1].i16[1] = BYTE2(v22[2]);
    v138.val[1].i16[2] = v138.val[1].u8[4];
    v138.val[1].i16[3] = BYTE2(v22[14]);
    v138.val[1].i16[4] = v138.val[1].u8[8];
    v138.val[1].i16[5] = BYTE2(v22[26]);
    v138.val[1].i16[6] = v138.val[1].u8[12];
    v138.val[1].i16[7] = BYTE2(v22[38]);
    v39.i32[2] = *(v22 - 20);
    int32x4_t v40 = vmulq_s32((int32x4_t)v138.val[1], v136);
    v39.i32[3] = *(v22 - 8);
    v41.i32[0] = v22[4];
    v42.i32[0] = v22[5];
    v138.val[1] = (float32x4_t)vshrq_n_u32((uint32x4_t)v138.val[0], 8uLL);
    v41.i32[1] = v22[16];
    v41.i32[2] = v22[28];
    v138.val[0].i16[0] = v138.val[0].u8[0];
    v138.val[0].i16[1] = BYTE2(*(v22 - 48));
    v138.val[0].i16[2] = v138.val[0].u8[4];
    v138.val[0].i16[3] = BYTE2(*(v22 - 36));
    v138.val[0].i16[4] = v138.val[0].u8[8];
    v138.val[0].i16[5] = BYTE2(*(v22 - 24));
    v138.val[0].i16[6] = v138.val[0].u8[12];
    v138.val[0].i16[7] = BYTE2(*(v22 - 12));
    v41.i32[3] = v22[40];
    v43.i32[0] = *(v22 - 43);
    uint32x4_t v44 = vshrq_n_u32(v30, 8uLL);
    v43.i32[1] = *(v22 - 31);
    v43.i32[2] = *(v22 - 19);
    v30.i16[0] = v30.u8[0];
    v30.i16[1] = BYTE2(*(v22 - 47));
    v30.i16[2] = v30.u8[4];
    v30.i16[3] = BYTE2(*(v22 - 35));
    v30.i16[4] = v30.u8[8];
    v30.i16[5] = BYTE2(*(v22 - 23));
    v30.i16[6] = v30.u8[12];
    v30.i16[7] = BYTE2(*(v22 - 11));
    v43.i32[3] = *(v22 - 7);
    uint32x4_t v45 = vshrq_n_u32(v31, 8uLL);
    v42.i32[1] = v22[17];
    v42.i32[2] = v22[29];
    v31.i16[0] = v31.u8[0];
    v31.i16[1] = BYTE2(*(v22 - 46));
    v31.i16[2] = v31.u8[4];
    v31.i16[3] = BYTE2(*(v22 - 34));
    v31.i16[4] = v31.u8[8];
    v31.i16[5] = BYTE2(*(v22 - 22));
    v31.i16[6] = v31.u8[12];
    v31.i16[7] = BYTE2(*(v22 - 10));
    v42.i32[3] = v22[41];
    uint32x4_t v46 = vshrq_n_u32(v34, 8uLL);
    uint32x4_t v47 = vshrq_n_u32(v32, 8uLL);
    v34.i16[0] = v34.u8[0];
    v34.i16[1] = BYTE2(*(v22 - 45));
    v34.i16[2] = v34.u8[4];
    v34.i16[3] = BYTE2(*(v22 - 33));
    v34.i16[4] = v34.u8[8];
    v34.i16[5] = BYTE2(*(v22 - 21));
    v34.i16[6] = v34.u8[12];
    v34.i16[7] = BYTE2(*(v22 - 9));
    v32.i16[0] = v32.u8[0];
    v32.i16[1] = BYTE2(v22[3]);
    v32.i16[2] = v32.u8[4];
    v32.i16[3] = BYTE2(v22[15]);
    v32.i16[4] = v32.u8[8];
    v32.i16[5] = BYTE2(v22[27]);
    v32.i16[6] = v32.u8[12];
    v32.i16[7] = BYTE2(v22[39]);
    int32x4_t v48 = vmulq_s32((int32x4_t)v32, v122);
    uint32x4_t v49 = vshrq_n_u32(v39, 8uLL);
    v39.i16[0] = v39.u8[0];
    v39.i16[1] = BYTE2(*(v22 - 44));
    v39.i16[2] = v39.u8[4];
    v39.i16[3] = BYTE2(*(v22 - 32));
    v39.i16[4] = v39.u8[8];
    v39.i16[5] = BYTE2(*(v22 - 20));
    v39.i16[6] = v39.u8[12];
    v39.i16[7] = BYTE2(*(v22 - 8));
    int32x4_t v130 = vmulq_s32((int32x4_t)v138.val[0], v135);
    uint32x4_t v50 = vshrq_n_u32(v41, 8uLL);
    v41.i16[0] = v41.u8[0];
    v41.i16[1] = BYTE2(v22[4]);
    v41.i16[2] = v41.u8[4];
    v41.i16[3] = BYTE2(v22[16]);
    v41.i16[4] = v41.u8[8];
    v41.i16[5] = BYTE2(v22[28]);
    v41.i16[6] = v41.u8[12];
    v41.i16[7] = BYTE2(v22[40]);
    uint32x4_t v127 = v49;
    uint32x4_t v129 = vshrq_n_u32(v43, 8uLL);
    v43.i16[0] = v43.u8[0];
    v43.i16[1] = BYTE2(*(v22 - 43));
    v43.i16[2] = v43.u8[4];
    v43.i16[3] = BYTE2(*(v22 - 31));
    v43.i16[4] = v43.u8[8];
    v43.i16[5] = BYTE2(*(v22 - 19));
    v43.i16[6] = v43.u8[12];
    v43.i16[7] = BYTE2(*(v22 - 7));
    v51.i32[0] = *(v22 - 39);
    uint32x4_t v52 = (uint32x4_t)vmlaq_s32( v36,  (int32x4_t)(*(_OWORD *)&v33 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
    v51.i32[1] = *(v22 - 27);
    v51.i32[2] = *(v22 - 15);
    int32x4_t v53 = vmulq_s32((int32x4_t)v30, v137);
    uint32x4_t v54 = vshrq_n_u32(v42, 8uLL);
    v51.i32[3] = *(v22 - 3);
    v30.i32[0] = v22[8];
    v55.i32[0] = v22[9];
    v55.i32[1] = v22[21];
    uint32x4_t v56 = (uint32x4_t)vmlaq_s32( v38,  (int32x4_t)(*(_OWORD *)&v35 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v124);
    v55.i32[2] = v22[33];
    v55.i32[3] = v22[45];
    v42.i16[0] = v42.u8[0];
    v42.i16[1] = BYTE2(v22[5]);
    v42.i16[2] = v42.u8[4];
    v42.i16[3] = BYTE2(v22[17]);
    v42.i16[4] = v42.u8[8];
    v42.i16[5] = BYTE2(v22[29]);
    v42.i16[6] = v42.u8[12];
    v42.i16[7] = BYTE2(v22[41]);
    v57.i32[0] = *(v22 - 38);
    v57.i32[1] = *(v22 - 26);
    v57.i32[2] = *(v22 - 14);
    uint32x4_t v58 = (uint32x4_t)vmlaq_s32( v40,  (int32x4_t)(*(_OWORD *)&v37 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v123);
    v138.val[0] = (float32x4_t)vmulq_s32((int32x4_t)v42, v118);
    v57.i32[3] = *(v22 - 2);
    int32x4_t v59 = vmulq_s32((int32x4_t)v34, v122);
    v34.i32[0] = v22[10];
    v37.i32[0] = v22[11];
    v34.i32[1] = v22[22];
    v34.i32[2] = v22[34];
    v34.i32[3] = v22[46];
    uint32x4_t v126 = (uint32x4_t)vmlaq_s32( v48,  (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v121);
    v42.i32[0] = *(v22 - 37);
    v42.i32[1] = *(v22 - 25);
    int32x4_t v125 = vmulq_s32((int32x4_t)v39, v120);
    v42.i32[2] = *(v22 - 13);
    v42.i32[3] = *(v22 - 1);
    unsigned __int128 v60 = *(_OWORD *)&v127 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v37.i32[1] = v22[23];
    v37.i32[2] = v22[35];
    v37.i32[3] = v22[47];
    int32x4_t v61 = vmulq_s32((int32x4_t)v43, v118);
    uint32x4_t v128 = (uint32x4_t)vmlaq_s32( (int32x4_t)v138.val[0],  (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v117);
    int32x4_t v62 = (int32x4_t)vshrq_n_u32(v51, 8uLL);
    v51.i16[0] = v51.u8[0];
    v51.i16[1] = BYTE2(*(v22 - 39));
    v51.i16[2] = v51.u8[4];
    v51.i16[3] = BYTE2(*(v22 - 27));
    v51.i16[4] = v51.u8[8];
    v51.i16[5] = BYTE2(*(v22 - 15));
    v51.i16[6] = v51.u8[12];
    v51.i16[7] = BYTE2(*(v22 - 3));
    int32x4_t v63 = (int32x4_t)vshrq_n_u32(v55, 8uLL);
    v55.i16[0] = v55.u8[0];
    v55.i16[1] = BYTE2(v22[9]);
    v55.i16[2] = v55.u8[4];
    v55.i16[3] = BYTE2(v22[21]);
    v55.i16[4] = v55.u8[8];
    v55.i16[5] = BYTE2(v22[33]);
    v55.i16[6] = v55.u8[12];
    v55.i16[7] = BYTE2(v22[45]);
    int32x4_t v64 = vmulq_s32((int32x4_t)v51, v122);
    uint32x4_t v65 = (uint32x4_t)vmlaq_s32( v130,  (int32x4_t)(*(_OWORD *)&v138.val[1] & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
    uint32x4_t v131 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v55, v122),  (int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v121);
    uint32x4_t v66 = vshrq_n_u32(v57, 8uLL);
    v57.i16[0] = v57.u8[0];
    v57.i16[1] = BYTE2(*(v22 - 38));
    v57.i16[2] = v57.u8[4];
    v57.i16[3] = BYTE2(*(v22 - 26));
    v57.i16[4] = v57.u8[8];
    v57.i16[5] = BYTE2(*(v22 - 14));
    v57.i16[6] = v57.u8[12];
    v57.i16[7] = BYTE2(*(v22 - 2));
    uint32x4_t v67 = vshrq_n_u32(v34, 8uLL);
    v34.i16[0] = v34.u8[0];
    v34.i16[1] = BYTE2(v22[10]);
    v34.i16[2] = v34.u8[4];
    v34.i16[3] = BYTE2(v22[22]);
    v34.i16[4] = v34.u8[8];
    v34.i16[5] = BYTE2(v22[34]);
    v34.i16[6] = v34.u8[12];
    v34.i16[7] = BYTE2(v22[46]);
    uint32x4_t v68 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v31, v136),  (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v123);
    int32x4_t v69 = vmulq_s32((int32x4_t)v57, v120);
    uint32x4_t v70 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v34, v120),  (int32x4_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v119);
    int32x4_t v71 = (int32x4_t)vshrq_n_u32(v42, 8uLL);
    v42.i16[0] = v42.u8[0];
    v42.i16[1] = BYTE2(*(v22 - 37));
    v42.i16[2] = v42.u8[4];
    v42.i16[3] = BYTE2(*(v22 - 25));
    v42.i16[4] = v42.u8[8];
    v42.i16[5] = BYTE2(*(v22 - 13));
    v42.i16[6] = v42.u8[12];
    v42.i16[7] = BYTE2(*(v22 - 1));
    uint32x4_t v72 = vshrq_n_u32((uint32x4_t)v37, 8uLL);
    v37.i16[0] = v37.u8[0];
    v37.i16[1] = BYTE2(v22[11]);
    v37.i16[2] = v37.u8[4];
    v37.i16[3] = BYTE2(v22[23]);
    v37.i16[4] = v37.u8[8];
    v37.i16[5] = BYTE2(v22[35]);
    v37.i16[6] = v37.u8[12];
    v37.i16[7] = BYTE2(v22[47]);
    int32x4_t v73 = vmulq_s32((int32x4_t)v42, v118);
    v42.i32[0] = *(v22 - 42);
    v42.i32[1] = *(v22 - 30);
    v42.i32[2] = *(v22 - 18);
    v42.i32[3] = *(v22 - 6);
    uint32x4_t v74 = (uint32x4_t)vmlaq_s32( v64,  (int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v121);
    v62.i32[0] = v22[6];
    v63.i32[0] = v22[7];
    v62.i32[1] = v22[18];
    uint32x4_t v75 = (uint32x4_t)vmlaq_s32( v69,  (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v119);
    v62.i32[2] = v22[30];
    v62.i32[3] = v22[42];
    uint32x4_t v76 = (uint32x4_t)vmlaq_s32( v73,  (int32x4_t)(*(_OWORD *)&v71 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v117);
    uint32x4_t v77 = (uint32x4_t)vmlaq_s32( vmulq_s32(v37, v118),  (int32x4_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v117);
    v71.i32[0] = *(v22 - 41);
    v71.i32[1] = *(v22 - 29);
    v71.i32[2] = *(v22 - 17);
    v71.i32[3] = *(v22 - 5);
    v63.i32[1] = v22[19];
    v63.i32[2] = v22[31];
    v63.i32[3] = v22[43];
    uint32x4_t v78 = vshrq_n_u32(v42, 8uLL);
    v42.i16[0] = v42.u8[0];
    v42.i16[1] = BYTE2(*(v22 - 42));
    v42.i16[2] = v42.u8[4];
    v42.i16[3] = BYTE2(*(v22 - 30));
    v42.i16[4] = v42.u8[8];
    v42.i16[5] = BYTE2(*(v22 - 18));
    v42.i16[6] = v42.u8[12];
    v42.i16[7] = BYTE2(*(v22 - 6));
    uint32x4_t v79 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v42, v135),  (int32x4_t)(*(_OWORD *)&v78 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
    uint32x4_t v80 = vshrq_n_u32((uint32x4_t)v62, 8uLL);
    v62.i16[0] = v62.u8[0];
    v62.i16[1] = BYTE2(v22[6]);
    v62.i16[2] = v62.u8[4];
    v62.i16[3] = BYTE2(v22[18]);
    v62.i16[4] = v62.u8[8];
    v62.i16[5] = BYTE2(v22[30]);
    v62.i16[6] = v62.u8[12];
    v62.i16[7] = BYTE2(v22[42]);
    uint32x4_t v81 = (uint32x4_t)vmlaq_s32( vmulq_s32(v62, v135),  (int32x4_t)(*(_OWORD *)&v80 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
    uint32x4_t v82 = vshrq_n_u32((uint32x4_t)v71, 8uLL);
    v71.i16[0] = v71.u8[0];
    v71.i16[1] = BYTE2(*(v22 - 41));
    v71.i16[2] = v71.u8[4];
    v71.i16[3] = BYTE2(*(v22 - 29));
    v71.i16[4] = v71.u8[8];
    v71.i16[5] = BYTE2(*(v22 - 17));
    v71.i16[6] = v71.u8[12];
    v71.i16[7] = BYTE2(*(v22 - 5));
    uint32x4_t v83 = (uint32x4_t)vmlaq_s32( vmulq_s32(v71, v137),  (int32x4_t)(*(_OWORD *)&v82 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v124);
    int32x4_t v84 = (int32x4_t)vshrq_n_u32((uint32x4_t)v63, 8uLL);
    v63.i16[0] = v63.u8[0];
    v63.i16[1] = BYTE2(v22[7]);
    v63.i16[2] = v63.u8[4];
    v63.i16[3] = BYTE2(v22[19]);
    v63.i16[4] = v63.u8[8];
    v63.i16[5] = BYTE2(v22[31]);
    v63.i16[6] = v63.u8[12];
    v63.i16[7] = BYTE2(v22[43]);
    uint32x4_t v85 = (uint32x4_t)vmlaq_s32( vmulq_s32(v63, v137),  (int32x4_t)(*(_OWORD *)&v84 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v124);
    v84.i32[0] = *(v22 - 40);
    v84.i32[1] = *(v22 - 28);
    v138.val[0] = (float32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32(v65, 0xFuLL),  (uint32x4_t)vmlaq_s32( v53,  (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v124),  0xFuLL),  v68,  0xFuLL),  (uint32x4_t)vmlaq_s32( v59,  (int32x4_t)(*(_OWORD *)&v46 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v121),  0xFuLL);
    v84.i32[2] = *(v22 - 16);
    v84.i32[3] = *(v22 - 4);
    int32x4_t v86 = (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v52, 0xFuLL), v56, 0xFuLL), v58, 0xFuLL),  v126,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v41, v120),  (int32x4_t)(*(_OWORD *)&v50 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v119),  0xFuLL),  v128,  0xFuLL);
    uint32x4_t v87 = vshrq_n_u32((uint32x4_t)v84, 8uLL);
    v84.i32[0] &= 0xFF00FFu;
    v84.i16[2] = v84.u8[4];
    v84.i16[3] = BYTE2(*(v22 - 28));
    v84.i16[4] = v84.u8[8];
    v84.i16[5] = BYTE2(*(v22 - 16));
    v84.i16[6] = v84.u8[12];
    v84.i16[7] = BYTE2(*(v22 - 4));
    float32x4x2_t v139 = vld2q_f32(v21);
    v30.i32[1] = v22[20];
    v30.i32[2] = v22[32];
    v30.i32[3] = v22[44];
    uint32x4_t v88 = vshrq_n_u32(v30, 8uLL);
    v30.i16[0] = v30.u8[0];
    v30.i16[1] = BYTE2(v22[8]);
    v30.i16[2] = v30.u8[4];
    v30.i16[3] = BYTE2(v22[20]);
    v30.i16[4] = v30.u8[8];
    v30.i16[5] = BYTE2(v22[32]);
    v30.i16[6] = v30.u8[12];
    v30.i16[7] = BYTE2(v22[44]);
    v21 += 16;
    int32x4_t v23 = vminq_s32( vsubq_s32( (int32x4_t)v133.val[1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v74, 0xFuLL), v75, 0xFuLL), v76, 0xFuLL),  v79,  0xFuLL),  v83,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v84, v136),  (int32x4_t)(*(_OWORD *)&v87 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v123),  0xFuLL)),  vminq_s32( vsubq_s32( (int32x4_t)v133.val[0],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( (uint32x4_t)v138.val[0],  (uint32x4_t)vmlaq_s32(v125, (int32x4_t)v60, v119),  0xFuLL),  (uint32x4_t)vmlaq_s32( v61,  (int32x4_t)(*(_OWORD *)&v129 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v117),  0xFuLL)),  v134));
    v22 += 96;
    int32x4_t v25 = vminq_s32( vsubq_s32( (int32x4_t)v139.val[1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32(vsraq_n_u32(vshrq_n_u32(v131, 0xFuLL), v70, 0xFuLL), v77, 0xFuLL),  v81,  0xFuLL),  v85,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v30, v136),  (int32x4_t)(*(_OWORD *)&v88 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v123),  0xFuLL)),  vminq_s32(vsubq_s32((int32x4_t)v139.val[0], v86), v132));
    v24 -= 8LL;
  }

  while (v24);
  int v16 = vminvq_s32(vminq_s32(v23, v25));
  unsigned __int128 v12 = v115;
  int32x4_t v11 = v116;
  unint64_t v14 = v113;
  int32x2_t v13 = v114;
  if (v19 != v20)
  {
LABEL_14:
    int32x2_t v89 = vzip1_s32(vdup_laneq_s32(v11, 3), v13);
    int32x2_t v90 = vzip1_s32(vdup_laneq_s32((int32x4_t)v12, 3), (int32x2_t)v14);
    int32x2_t v91 = vzip2_s32((int32x2_t)v14, v13);
    int32x2_t v92 = (int32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
    int32x2_t v93 = (int32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL).u64[0];
    unsigned int v94 = v5 + 1;
    do
    {
      v95.i16[0] = *(_OWORD *)v10;
      v95.i16[1] = BYTE2(*(_OWORD *)v10);
      v95.i16[2] = BYTE4(*(void *)v10);
      v95.i16[3] = BYTE6(*(void *)v10);
      v95.i16[4] = *(void *)(v10 + 8);
      v95.i16[5] = BYTE2(*(void *)(v10 + 8));
      v95.i16[6] = BYTE12(*(_OWORD *)v10);
      v95.i16[7] = BYTE14(*(_OWORD *)v10);
      v96.i16[0] = *(void *)(v10 + 16);
      v96.i16[1] = BYTE2(*(void *)(v10 + 16));
      v96.i16[2] = BYTE4(*(void *)(v10 + 16));
      v96.i16[3] = BYTE6(*(void *)(v10 + 16));
      uint32x2_t v97 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v96, v13),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v10 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v14),  0xFuLL);
      __int32 v98 = v97.i32[1];
      int v99 = *v8;
      int v100 = v8[1];
      v8 += 2;
      __int32 v101 = vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v95, v11),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v10, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v12),  0xFuLL))
           + v97.i32[0];
      unsigned int v102 = *(_DWORD *)(v10 + 44);
      v95.i16[0] = *(void *)(v10 + 36);
      v95.i16[1] = BYTE2(*(void *)(v10 + 36));
      v95.i16[2] = BYTE4(*(void *)(v10 + 36));
      v95.i16[3] = BYTE6(*(void *)(v10 + 36));
      uint32x2_t v103 = (uint32x2_t)vmla_s32( vmul_s32(*(int32x2_t *)v95.i8, v89),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v10 + 36), 8uLL) & 0xFFFF00FFFFFF00FFLL),  v90);
      int32x2_t v104 = (int32x2_t)vshr_n_u32(v103, 0xFuLL);
      int v105 = v99 - v101 - v98;
      v106.i16[0] = BYTE1(v102);
      v106.i16[1] = v102 >> 8 >> 16;
      v106.i16[2] = v102;
      v106.i16[3] = BYTE2(v102);
      int32x2_t v107 = vmul_s32(v106, v91);
      uint32x2_t v108 = vshr_n_u32(*(uint32x2_t *)(v10 + 28), 8uLL);
      v109.i16[0] = *(void *)(v10 + 28);
      v109.i16[1] = BYTE2(*(void *)(v10 + 28));
      v109.i16[2] = BYTE4(*(void *)(v10 + 28));
      v109.i16[3] = BYTE6(*(void *)(v10 + 28));
      int32x2_t v110 = vmul_s32(v109, v92);
      if (v105 < v16) {
        int v16 = v105;
      }
      uint32x2_t v111 = vshr_n_u32((uint32x2_t)vmla_s32(v110, (int32x2_t)(*(void *)&v108 & 0xFFFF00FFFFFF00FFLL), v93), 0xFuLL);
      signed __int32 v112 = v100
           - (v111.i32[0]
            + v111.i32[1])
           - (vsra_n_u32((uint32x2_t)vdup_lane_s32(v104, 1), v103, 0xFuLL).u32[0]
            + (vadd_s32(v107, vdup_lane_s32(v107, 1)).u32[0] >> 15)
            + (((*(_DWORD *)(v10 + 24) & 0xFF00FF) * v11.i32[0]
              + ((*(_DWORD *)(v10 + 24) >> 8) & 0xFF00FF) * v12) >> 15));
      if (v112 < v16) {
        int v16 = v112;
      }
      --v94;
      v10 += 48LL;
    }

    while (v94 > 1);
  }

uint64_t sub_1000182FC(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    int v2 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1) {
      goto LABEL_3;
    }
LABEL_9:
    int v14 = 0x40000000;
  }

  int v16 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  unsigned int v3 = *v16;
  int v4 = v16[1] - v3;
  if (v4 < 1) {
    goto LABEL_9;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = v3;
  }
  uint64_t v6 = *(void *)(a1 + 1552);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (int *)(v7 + 4LL * (int)v5);
  uint64_t v9 = *(void *)(a1 + 136) + 24LL * (int)v5;
  v10.i16[0] = *(_OWORD *)v6;
  v10.i16[1] = BYTE2(*(_OWORD *)v6);
  v10.i16[2] = BYTE4(*(void *)v6);
  v10.i16[3] = BYTE6(*(void *)v6);
  v10.i16[4] = *(void *)(v6 + 8);
  v10.i16[5] = BYTE2(*(void *)(v6 + 8));
  v10.i16[6] = BYTE12(*(_OWORD *)v6);
  v10.i16[7] = BYTE14(*(_OWORD *)v6);
  unsigned __int128 v11 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v6, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v12.i16[0] = *(void *)(v6 + 16);
  v12.i16[1] = BYTE2(*(void *)(v6 + 16));
  v12.i16[2] = BYTE4(*(void *)(v6 + 16));
  v12.i16[3] = BYTE6(*(void *)(v6 + 16));
  unint64_t v13 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v6 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
  if (v4 >= 8)
  {
    uint64_t v17 = (int)v5;
    uint64_t v18 = v4;
    uint64_t v19 = v4 & 0xFFFFFFF8;
    v4 -= v19;
    v8 += v19;
    int32x4_t v85 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    int32x4_t v86 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
    int32x4_t v83 = vdupq_lane_s32(*(int32x2_t *)&v11, 1);
    int32x4_t v84 = vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
    int32x4_t v20 = vdupq_laneq_s32(v10, 2);
    int32x4_t v21 = vdupq_laneq_s32((int32x4_t)v11, 2);
    uint64_t v15 = v9 + 24LL * v19;
    unsigned __int128 v81 = v11;
    int32x4_t v82 = v10;
    int32x4_t v22 = vdupq_laneq_s32(v10, 3);
    int32x4_t v23 = vdupq_laneq_s32((int32x4_t)v11, 3);
    int32x4_t v24 = vdupq_lane_s32(v12, 0);
    int32x4_t v25 = (int32x4_t *)(v7 + 4 * v17 + 16);
    int32x4_t v26 = vdupq_lane_s32((int32x2_t)v13, 0);
    v27.i64[0] = 0x4000000040000000LL;
    v27.i64[1] = 0x4000000040000000LL;
    unint64_t v79 = v13;
    int32x2_t v80 = v12;
    int32x4_t v28 = vdupq_lane_s32(v12, 1);
    uint64_t v29 = v19;
    int32x4_t v30 = vdupq_lane_s32((int32x2_t)v13, 1);
    v31.i64[0] = 0x4000000040000000LL;
    v31.i64[1] = 0x4000000040000000LL;
    do
    {
      int32x4_t v32 = *(int32x4_t *)(v9 + 64);
      int32x4_t v33 = *(int32x4_t *)(v9 + 80);
      int32x4_t v35 = *(int32x4_t *)(v9 + 32);
      int32x4_t v34 = *(int32x4_t *)(v9 + 48);
      int32x4_t v36 = *(int32x4_t *)v9;
      int32x4_t v37 = *(int32x4_t *)(v9 + 16);
      int32x4_t v38 = *(int32x4_t *)(v9 + 160);
      int32x4_t v39 = *(int32x4_t *)(v9 + 176);
      int32x4_t v41 = *(int32x4_t *)(v9 + 128);
      int32x4_t v40 = *(int32x4_t *)(v9 + 144);
      int32x4_t v42 = *(int32x4_t *)(v9 + 96);
      int32x4_t v43 = *(int32x4_t *)(v9 + 112);
      v44.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v37, *(int32x4_t *)v9), *(int8x16_t *)v9, 4uLL).u64[0];
      v45.i64[0] = vzip2q_s32(*(int32x4_t *)v9, vuzp1q_s32(*(int32x4_t *)v9, v35)).u64[0];
      v46.i32[1] = HIDWORD(*(void *)(v9 + 32));
      v46.i32[0] = HIDWORD(*(_OWORD *)v9);
      int32x4_t v47 = vtrn1q_s32(vuzp1q_s32(v34, v34), v32);
      v48.i64[0] = vzip2q_s32(v42, vuzp1q_s32(v42, v41)).u64[0];
      v36.i32[1] = *(void *)(v9 + 24);
      v49.i32[0] = v42.i32[0];
      LODWORD(v50) = *(void *)(v9 + 56);
      HIDWORD(v50) = v33.i32[0];
      v49.i32[1] = *(void *)(v9 + 120);
      LODWORD(v51) = *(void *)(v9 + 152);
      HIDWORD(v51) = v39.i32[0];
      int32x4_t v52 = (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL);
      v45.i64[1] = v50;
      int32x4_t v53 = vtrn1q_s32(vuzp1q_s32(v32, v32), v33);
      v33.i32[2] = HIDWORD(*(void *)(v9 + 64));
      v48.i64[1] = v51;
      v32.i32[2] = HIDWORD(*(void *)(v9 + 48));
      v36.i64[1] = v47.i64[1];
      v46.i64[1] = vzip2q_s32(v34, v52).i64[1];
      v49.i64[1] = vtrn1q_s32(vuzp1q_s32(v40, v40), v38).i64[1];
      v54.i32[1] = HIDWORD(*(void *)(v9 + 128));
      int32x4_t v55 = (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v39, 8uLL);
      v54.i32[0] = v42.i32[3];
      int32x4_t v56 = vtrn1q_s32(vuzp1q_s32(v38, v38), v39);
      v39.i32[2] = HIDWORD(*(void *)(v9 + 160));
      HIDWORD(v51) = v38.i32[3];
      LODWORD(v51) = HIDWORD(*(void *)(v9 + 144));
      v42.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v43, v42), (int8x16_t)v42, 4uLL).u64[0];
      v54.i64[1] = vzip2q_s32(v40, v55).i64[1];
      v44.i64[1] = v32.i64[1];
      v32.i32[0] = v37.i32[0];
      v32.i32[1] = *(void *)(v9 + 40);
      v32.i64[1] = v53.i64[1];
      v38.i32[0] = v43.i32[0];
      v38.i32[1] = *(void *)(v9 + 136);
      v38.i64[1] = v56.i64[1];
      v42.i64[1] = v51;
      v57.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v35, v37), (int8x16_t)v37, 4uLL).u64[0];
      v57.i64[1] = v33.i64[1];
      v33.i64[0] = vextq_s8((int8x16_t)vtrn2q_s32(v41, v43), (int8x16_t)v43, 4uLL).u64[0];
      v33.i64[1] = v39.i64[1];
      uint32x4_t v58 = vshrq_n_u32((uint32x4_t)v36, 8uLL);
      v36.i16[0] = *(_OWORD *)v9;
      v36.i16[1] = BYTE2(*(_OWORD *)v9);
      v36.i16[2] = *(void *)(v9 + 24);
      v36.i16[3] = BYTE2(*(void *)(v9 + 24));
      v36.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v59 = (uint32x4_t)vmlaq_s32( vmulq_s32(v36, v86),  (int32x4_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v85);
      uint32x4_t v60 = vshrq_n_u32(v49, 8uLL);
      v49.i16[0] = *(_OWORD *)(v9 + 96);
      v49.i16[1] = BYTE2(*(_OWORD *)(v9 + 96));
      v49.i16[2] = *(void *)(v9 + 120);
      v49.i16[3] = BYTE2(*(void *)(v9 + 120));
      v49.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v61 = (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v42 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v84),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v42, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v83);
      uint32x4_t v62 = vshrq_n_u32(v46, 8uLL);
      v46.i16[0] = v46.u8[0];
      v46.i16[1] = BYTE14(*(_OWORD *)v9);
      v46.i16[2] = v46.u8[4];
      v46.i16[3] = BYTE6(*(void *)(v9 + 32));
      v46.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v63 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v46, v22),  (int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
      uint32x4_t v64 = vshrq_n_u32((uint32x4_t)v32, 8uLL);
      v32.i16[0] = v37.u8[0];
      v32.i16[1] = v37.u8[2];
      v32.i16[2] = *(void *)(v9 + 40);
      v32.i16[3] = BYTE2(*(void *)(v9 + 40));
      v32.i64[1] = v53.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v65 = (uint32x4_t)vmlaq_s32( vmulq_s32(v32, v24),  (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
      uint32x4_t v66 = vshrq_n_u32(v54, 8uLL);
      v54.i16[0] = BYTE12(*(_OWORD *)(v9 + 96));
      v54.i16[1] = BYTE14(*(_OWORD *)(v9 + 96));
      v54.i16[2] = v54.u8[4];
      v54.i16[3] = BYTE6(*(void *)(v9 + 128));
      v54.i64[1] &= 0xFF00FF00FF00FFuLL;
      uint32x4_t v67 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v54, v22),  (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
      uint32x4_t v68 = vshrq_n_u32((uint32x4_t)v38, 8uLL);
      v38.i16[0] = v43.u8[0];
      v38.i16[1] = v43.u8[2];
      v38.i16[2] = *(void *)(v9 + 136);
      v38.i16[3] = BYTE2(*(void *)(v9 + 136));
      v38.i64[1] = v56.i64[1] & 0xFF00FF00FF00FFLL;
      uint32x4_t v69 = (uint32x4_t)vmlaq_s32( vmulq_s32(v38, v24),  (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
      int32x4_t v70 = vsubq_s32( v25[-1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32(v59, 0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v84),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v83),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v20),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v21),  0xFuLL),  v63,  0xFuLL),  v65,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v57 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v28),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v57, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v30),  0xFuLL));
      int32x4_t v71 = *v25;
      v25 += 2;
      int32x4_t v27 = vminq_s32(v70, v27);
      int32x4_t v31 = vminq_s32( vsubq_s32( v71,  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v49, v86),  (int32x4_t)(*(_OWORD *)&v60 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v85),  0xFuLL),  v61,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v20),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v48, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v21),  0xFuLL),  v67,  0xFuLL),  v69,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v33 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v28),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v30),  0xFuLL)),  v31);
      v9 += 192LL;
      v29 -= 8LL;
    }

    while (v29);
    int v14 = vminvq_s32(vminq_s32(v27, v31));
    unsigned __int128 v11 = v81;
    int32x4_t v10 = v82;
    unint64_t v13 = v79;
    int32x2_t v12 = v80;
    if (v19 == v18) {
  }
    }

  else
  {
    int v14 = 0x40000000;
    uint64_t v15 = *(void *)(a1 + 136) + 24LL * (int)v5;
  }

  unsigned int v72 = v4 + 1;
  do
  {
    v73.i16[0] = *(_OWORD *)v15;
    v73.i16[1] = BYTE2(*(_OWORD *)v15);
    v73.i16[2] = BYTE4(*(void *)v15);
    v73.i16[3] = BYTE6(*(void *)v15);
    v73.i16[4] = *(void *)(v15 + 8);
    v73.i16[5] = BYTE2(*(void *)(v15 + 8));
    v73.i16[6] = BYTE12(*(_OWORD *)v15);
    v73.i16[7] = BYTE14(*(_OWORD *)v15);
    v74.i16[0] = *(void *)(v15 + 16);
    v74.i16[1] = BYTE2(*(void *)(v15 + 16));
    v74.i16[2] = BYTE4(*(void *)(v15 + 16));
    v74.i16[3] = BYTE6(*(void *)(v15 + 16));
    uint32x2_t v75 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v74, v12),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v15 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v13),  0xFuLL);
    int v76 = *v8++;
    __int32 v77 = v76
        - (vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v73, v10),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v15, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v11),  0xFuLL))
         + v75.i32[0])
        - v75.i32[1];
    if (v77 < v14) {
      int v14 = v77;
    }
    --v72;
    v15 += 24LL;
  }

  while (v72 > 1);
}

uint64_t sub_100018738(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    int v2 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1)
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 2012)) {
        unsigned int v5 = a2;
      }
      else {
        unsigned int v5 = v3;
      }
      uint64_t v6 = *(void *)(a1 + 1552);
      uint64_t v7 = (int *)(*(void *)(a1 + 32) + 4LL * (int)v5);
      uint64_t v8 = *(void *)(a1 + 136) + 4LL * (int)(*(_DWORD *)(a1 + 1128) * v5);
      v9.i16[0] = *(_OWORD *)v6;
      v9.i16[1] = BYTE2(*(_OWORD *)v6);
      v9.i16[2] = BYTE4(*(void *)v6);
      v9.i16[3] = BYTE6(*(void *)v6);
      v9.i16[4] = *(void *)(v6 + 8);
      v9.i16[5] = BYTE2(*(void *)(v6 + 8));
      v9.i16[6] = BYTE12(*(_OWORD *)v6);
      v9.i16[7] = BYTE14(*(_OWORD *)v6);
      unsigned __int128 v10 = *(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v6, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
      v11.i16[0] = *(void *)(v6 + 16);
      v11.i16[1] = BYTE2(*(void *)(v6 + 16));
      v11.i16[2] = BYTE4(*(void *)(v6 + 16));
      v11.i16[3] = BYTE6(*(void *)(v6 + 16));
      unint64_t v12 = *(void *)&vshr_n_u32(*(uint32x2_t *)(v6 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL;
      unint64_t v13 = (_DWORD *)(v6 + 24);
      HIDWORD(v15) = *(_DWORD *)(a1 + 1100);
      LODWORD(v15) = HIDWORD(v15) - 24;
      int v14 = v15 >> 2;
      int v16 = (unsigned int *)(v6 + 28);
      int v17 = v4 + 1;
      int v18 = 0x40000000;
      while (1)
      {
        int v27 = *v7++;
        v28.i16[0] = *(_OWORD *)v8;
        v28.i16[1] = BYTE2(*(_OWORD *)v8);
        v28.i16[2] = BYTE4(*(void *)v8);
        v28.i16[3] = BYTE6(*(void *)v8);
        v28.i16[4] = *(void *)(v8 + 8);
        v28.i16[5] = BYTE2(*(void *)(v8 + 8));
        v28.i16[6] = BYTE12(*(_OWORD *)v8);
        v28.i16[7] = BYTE14(*(_OWORD *)v8);
        v29.i16[0] = *(void *)(v8 + 16);
        v29.i16[1] = BYTE2(*(void *)(v8 + 16));
        v29.i16[2] = BYTE4(*(void *)(v8 + 16));
        v29.i16[3] = BYTE6(*(void *)(v8 + 16));
        uint32x2_t v30 = vshr_n_u32( (uint32x2_t)vmla_s32( vmul_s32(v29, v11),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v8 + 16), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v12),  0xFuLL);
        int32x4_t v21 = (unsigned int *)(v8 + 24);
        __int32 v25 = v27
            - (vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v28, v9),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v8, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)v10),  0xFuLL))
             + v30.i32[0])
            - v30.i32[1];
        if (v14 == 1)
        {
          int32x4_t v23 = v13;
        }

        else
        {
          if (v14 == 2)
          {
            uint64_t v19 = v13;
          }

          else
          {
            if (v14 != 3) {
              goto LABEL_10;
            }
            int32x4_t v21 = (unsigned int *)(v8 + 28);
            v25 -= ((*v13 & 0xFF00FF) * (*(_DWORD *)(v8 + 24) & 0xFF00FF)
                  + ((*v13 >> 8) & 0xFF00FF) * ((*(_DWORD *)(v8 + 24) >> 8) & 0xFF00FFu)) >> 15;
            uint64_t v19 = v16;
          }

          unsigned int v22 = *v21++;
          unsigned int v20 = v22;
          unsigned int v24 = *v19;
          int32x4_t v23 = v19 + 1;
          v25 -= ((v24 & 0xFF00FF) * (v20 & 0xFF00FF) + ((v24 >> 8) & 0xFF00FF) * ((v20 >> 8) & 0xFF00FF)) >> 15;
        }

        unsigned int v26 = *v21++;
        v25 -= ((*v23 & 0xFF00FF) * (v26 & 0xFF00FF) + ((*v23 >> 8) & 0xFF00FF) * ((v26 >> 8) & 0xFF00FF)) >> 15;
LABEL_10:
        if (v25 < v18) {
          int v18 = v25;
        }
        --v17;
        uint64_t v8 = (uint64_t)v21;
        if (v17 <= 1) {
      }
        }
    }
  }

  else
  {
    int32x4_t v31 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    unsigned int v3 = *v31;
    int v4 = v31[1] - v3;
    if (v4 >= 1) {
      goto LABEL_3;
    }
  }

  int v18 = 0x40000000;
}

uint64_t sub_100018928(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1176))
  {
    int v2 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    unsigned int v3 = *v2;
    int v4 = v2[1] - *v2;
    if (v4 >= 1) {
      goto LABEL_3;
    }
LABEL_8:
    int v14 = 0x40000000;
  }

  int v17 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  unsigned int v3 = *v17;
  int v4 = v17[1] - v3;
  if (v4 < 1) {
    goto LABEL_8;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v3 = a2;
  }
  unsigned int v5 = *(uint32x4_t **)(a1 + 1552);
  uint64_t v6 = (int32x4_t *)(*(void *)(a1 + 32) + 4LL * (int)v3);
  uint64_t v7 = *(void *)(a1 + 136) + 36LL * (int)v3;
  v8.i16[0] = *(_OWORD *)&v5[1];
  v8.i16[1] = BYTE2(*(_OWORD *)&v5[1]);
  v8.i16[2] = BYTE4(v5[1].i64[0]);
  v8.i16[3] = BYTE6(v5[1].i64[0]);
  v8.i16[4] = v5[1].i64[1];
  v8.i16[5] = BYTE2(v5[1].i64[1]);
  v8.i16[6] = BYTE12(*(_OWORD *)&v5[1]);
  v8.i16[7] = BYTE14(*(_OWORD *)&v5[1]);
  v9.i16[0] = v5->u8[0];
  v9.i16[1] = BYTE2(v5->u32[0]);
  v9.i16[2] = BYTE4(v5->i64[0]);
  v9.i16[3] = BYTE6(v5->i64[0]);
  v9.i16[4] = v5->i64[1];
  v9.i16[5] = BYTE2(v5->i64[1]);
  v9.i16[6] = BYTE12(*(unsigned __int128 *)v5);
  v9.i16[7] = BYTE14(*(unsigned __int128 *)v5);
  unsigned __int128 v10 = *(_OWORD *)&vshrq_n_u32(v5[1], 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned __int128 v11 = *(_OWORD *)&vshrq_n_u32(*v5, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  LODWORD(v5) = v5[2].i32[0];
  unsigned int v12 = v5 & 0xFF00FF;
  unsigned int v13 = (v5 >> 8) & 0xFF00FF;
  if (v4 >= 4)
  {
    int32x4_t v69 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    int32x4_t v70 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
    uint64_t v18 = v4;
    uint64_t v19 = v4 & 0xFFFFFFFC;
    v4 -= v19;
    int32x4_t v67 = vdupq_lane_s32(*(int32x2_t *)&v11, 1);
    int32x4_t v68 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
    unint64_t v15 = (int32x4_t *)((char *)v6 + 4 * v19);
    int32x4_t v66 = vdupq_laneq_s32(v9, 2);
    int32x4_t v20 = vdupq_laneq_s32((int32x4_t)v11, 2);
    int32x4_t v21 = vdupq_laneq_s32(v9, 3);
    int32x4_t v22 = vdupq_laneq_s32((int32x4_t)v11, 3);
    int32x4_t v23 = vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
    int32x4_t v24 = vdupq_lane_s32(*(int32x2_t *)&v10, 0);
    int32x4_t v25 = vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
    int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)&v10, 1);
    int32x4_t v27 = vdupq_laneq_s32(v8, 2);
    int32x4_t v28 = vdupq_laneq_s32((int32x4_t)v10, 2);
    uint64_t v16 = v7 + 36LL * v19;
    int32x4_t v29 = vdupq_laneq_s32(v8, 3);
    int32x4_t v30 = vdupq_laneq_s32((int32x4_t)v10, 3);
    int32x4_t v31 = (__int32 *)(v7 + 72);
    int32x4_t v32 = vdupq_n_s32(v12);
    v33.i64[0] = 0x4000000040000000LL;
    v33.i64[1] = 0x4000000040000000LL;
    uint64_t v34 = v19;
    int32x4_t v35 = vdupq_n_s32(v13);
    do
    {
      v36.i32[0] = *(v31 - 18);
      v36.i32[1] = *(v31 - 9);
      int32x4_t v37 = *v6++;
      v36.i32[2] = *v31;
      v36.i32[3] = v31[9];
      v38.i32[0] = *(v31 - 17);
      v38.i32[1] = *(v31 - 8);
      v39.i32[0] = *(v31 - 16);
      v38.i32[2] = v31[1];
      v39.i32[1] = *(v31 - 7);
      v39.i32[2] = v31[2];
      v39.i32[3] = v31[11];
      v38.i32[3] = v31[10];
      v40.i32[0] = *(v31 - 15);
      uint32x4_t v41 = vshrq_n_u32(v36, 8uLL);
      v36.i16[0] = v36.u8[0];
      v36.i16[1] = BYTE2(*(v31 - 18));
      v36.i16[2] = v36.u8[4];
      v36.i16[3] = BYTE2(*(v31 - 9));
      v36.i16[4] = *v31;
      v36.i16[5] = BYTE2(*v31);
      v36.i16[6] = v36.u8[12];
      v36.i16[7] = BYTE2(v31[9]);
      uint32x4_t v42 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v36, v70),  (int32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v69);
      v40.i32[1] = *(v31 - 6);
      v40.i32[2] = v31[3];
      uint32x4_t v43 = vshrq_n_u32(v39, 8uLL);
      v39.i16[0] = v39.u8[0];
      v39.i16[1] = BYTE2(*(v31 - 16));
      v39.i16[2] = v39.u8[4];
      v39.i16[3] = BYTE2(*(v31 - 7));
      v39.i16[4] = v39.u8[8];
      v39.i16[5] = BYTE2(v31[2]);
      v39.i16[6] = v39.u8[12];
      v39.i16[7] = BYTE2(v31[11]);
      v40.i32[3] = v31[12];
      v44.i32[0] = *(v31 - 14);
      v44.i32[1] = *(v31 - 5);
      v44.i32[2] = v31[4];
      uint32x4_t v45 = vshrq_n_u32(v38, 8uLL);
      v44.i32[3] = v31[13];
      v38.i16[0] = v38.u8[0];
      v38.i16[1] = BYTE2(*(v31 - 17));
      v38.i16[2] = v38.u8[4];
      v38.i16[3] = BYTE2(*(v31 - 8));
      v38.i16[4] = v38.u8[8];
      v38.i16[5] = BYTE2(v31[1]);
      v38.i16[6] = v38.u8[12];
      v38.i16[7] = BYTE2(v31[10]);
      v46.i32[0] = *(v31 - 13);
      v46.i32[1] = *(v31 - 4);
      v46.i32[2] = v31[5];
      v46.i32[3] = v31[14];
      int32x4_t v47 = (int32x4_t)vshrq_n_u32(v40, 8uLL);
      v40.i16[0] = v40.u8[0];
      v40.i16[1] = BYTE2(*(v31 - 15));
      v40.i16[2] = v40.u8[4];
      v40.i16[3] = BYTE2(*(v31 - 6));
      v40.i16[4] = v40.u8[8];
      v40.i16[5] = BYTE2(v31[3]);
      v40.i16[6] = v40.u8[12];
      v40.i16[7] = BYTE2(v31[12]);
      uint32x4_t v48 = vshrq_n_u32(v44, 8uLL);
      v44.i16[0] = v44.u8[0];
      v44.i16[1] = BYTE2(*(v31 - 14));
      v44.i16[2] = v44.u8[4];
      v44.i16[3] = BYTE2(*(v31 - 5));
      v44.i16[4] = v44.u8[8];
      v44.i16[5] = BYTE2(v31[4]);
      v44.i16[6] = v44.u8[12];
      v44.i16[7] = BYTE2(v31[13]);
      uint32x4_t v49 = vshrq_n_u32(v46, 8uLL);
      v46.i16[0] = v46.u8[0];
      v46.i16[1] = BYTE2(*(v31 - 13));
      v46.i16[2] = v46.u8[4];
      v46.i16[3] = BYTE2(*(v31 - 4));
      v46.i16[4] = v46.u8[8];
      v46.i16[5] = BYTE2(v31[5]);
      v46.i16[6] = v46.u8[12];
      v46.i16[7] = BYTE2(v31[14]);
      v50.i32[0] = *(v31 - 12);
      v50.i32[1] = *(v31 - 3);
      v50.i32[2] = v31[6];
      v50.i32[3] = v31[15];
      v51.i32[0] = *(v31 - 11);
      v51.i32[1] = *(v31 - 2);
      v51.i32[2] = v31[7];
      uint32x4_t v52 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v40, v21),  (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v22);
      v51.i32[3] = v31[16];
      v47.i32[0] = *(v31 - 10);
      v47.i32[1] = *(v31 - 1);
      v47.i32[2] = v31[8];
      uint32x4_t v53 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v44, v23),  (int32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v24);
      v47.i32[3] = v31[17];
      uint32x4_t v54 = vshrq_n_u32(v50, 8uLL);
      v50.i16[0] = v50.u8[0];
      v50.i16[1] = BYTE2(*(v31 - 12));
      v50.i16[2] = v50.u8[4];
      v50.i16[3] = BYTE2(*(v31 - 3));
      v50.i16[4] = v50.u8[8];
      v50.i16[5] = BYTE2(v31[6]);
      v50.i16[6] = v50.u8[12];
      v50.i16[7] = BYTE2(v31[15]);
      uint32x4_t v55 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v46, v25),  (int32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v26);
      uint32x4_t v56 = vshrq_n_u32(v51, 8uLL);
      v51.i16[0] = v51.u8[0];
      v51.i16[1] = BYTE2(*(v31 - 11));
      v51.i16[2] = v51.u8[4];
      v51.i16[3] = BYTE2(*(v31 - 2));
      v51.i16[4] = v51.u8[8];
      v51.i16[5] = BYTE2(v31[7]);
      v51.i16[6] = v51.u8[12];
      v51.i16[7] = BYTE2(v31[16]);
      uint32x4_t v57 = (uint32x4_t)vmlaq_s32( vmulq_s32(v27, (int32x4_t)v50),  v28,  (int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)));
      uint32x4_t v58 = vshrq_n_u32((uint32x4_t)v47, 8uLL);
      v47.i16[0] = v47.u8[0];
      v47.i16[1] = BYTE2(*(v31 - 10));
      v47.i16[2] = v47.u8[4];
      v47.i16[3] = BYTE2(*(v31 - 1));
      v47.i16[4] = v47.u8[8];
      v47.i16[5] = BYTE2(v31[8]);
      v47.i16[6] = v47.u8[12];
      v47.i16[7] = BYTE2(v31[17]);
      int32x4_t v33 = vminq_s32( vsubq_s32( v37,  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vsraq_n_u32( vshrq_n_u32(v42, 0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v38, v68),  (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v67),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v39, v66),  (int32x4_t)(*(_OWORD *)&v43 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v20),  0xFuLL),  v52,  0xFuLL),  v53,  0xFuLL),  v55,  0xFuLL),  v57,  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v29, (int32x4_t)v51),  v30,  (int32x4_t)(*(_OWORD *)&v56 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v32, v47),  v35,  (int32x4_t)(*(_OWORD *)&v58 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL)),  v33);
      v31 += 36;
      v34 -= 4LL;
    }

    while (v34);
    int v14 = vminvq_s32(v33);
    if (v19 == v18) {
  }
    }

  else
  {
    int v14 = 0x40000000;
    unint64_t v15 = v6;
    uint64_t v16 = v7;
  }

  unsigned int v59 = v4 + 1;
  uint32x4_t v60 = (_DWORD *)(v16 + 32);
  do
  {
    __int32 v61 = v15->i32[0];
    unint64_t v15 = (int32x4_t *)((char *)v15 + 4);
    v62.i16[0] = *((_OWORD *)v60 - 1);
    v62.i16[1] = BYTE2(*((_OWORD *)v60 - 1));
    v62.i16[2] = BYTE4(*((void *)v60 - 2));
    v62.i16[3] = BYTE6(*((void *)v60 - 2));
    v62.i16[4] = *((void *)v60 - 1);
    v62.i16[5] = BYTE2(*((void *)v60 - 1));
    v62.i16[6] = BYTE12(*((_OWORD *)v60 - 1));
    v62.i16[7] = BYTE14(*((_OWORD *)v60 - 1));
    v63.i16[0] = *((_OWORD *)v60 - 2);
    v63.i16[1] = BYTE2(*((_OWORD *)v60 - 2));
    v63.i16[2] = BYTE4(*((void *)v60 - 4));
    v63.i16[3] = BYTE6(*((void *)v60 - 4));
    v63.i16[4] = *((void *)v60 - 3);
    v63.i16[5] = BYTE2(*((void *)v60 - 3));
    v63.i16[6] = BYTE12(*((_OWORD *)v60 - 2));
    v63.i16[7] = BYTE14(*((_OWORD *)v60 - 2));
    int v64 = v61
        - (vaddvq_s32((int32x4_t)vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v9, v63),  (int32x4_t)v11,  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*((uint32x4_t *)v60 - 2), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v8, v62),  (int32x4_t)v10,  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*((uint32x4_t *)v60 - 1), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))),  0xFuLL))
         + ((v12 * (*v60 & 0xFF00FF) + v13 * ((*v60 >> 8) & 0xFF00FF)) >> 15));
    if (v64 < v14) {
      int v14 = v64;
    }
    --v59;
    v60 += 9;
  }

  while (v59 > 1);
}

uint64_t sub_100018D4C(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    unsigned int v3 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v4 = v3[1] - *v3;
    if ((v4 & 1) == 0) {
      goto LABEL_3;
    }
    return sub_100016308(a1, a2);
  }

  uint64_t v18 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v4 = v18[1] - *v18;
  if ((v4 & 1) != 0) {
    return sub_100016308(a1, a2);
  }
LABEL_3:
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (!v2)
    {
      a2 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      if (v4 >= 2) {
        goto LABEL_7;
      }
LABEL_23:
      int v17 = 0x40000000;
    }

    a2 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  }

  if (v4 < 2) {
    goto LABEL_23;
  }
LABEL_7:
  unsigned int v5 = v4 >> 1;
  uint64_t v6 = *(uint32x2_t **)(a1 + 1552);
  unsigned __int32 v7 = v6[1].u32[0];
  uint64_t v8 = *(void *)(a1 + 32);
  int32x4_t v9 = (int *)(v8 + 4LL * (int)a2);
  uint64_t v10 = *(void *)(a1 + 136);
  uint64_t v11 = v10 + 24LL * (int)a2;
  v12.i16[0] = v6->u8[0];
  v12.i16[1] = BYTE2(v6->u32[0]);
  v12.i16[2] = BYTE4(*(unint64_t *)v6);
  v12.i16[3] = BYTE6(*(unint64_t *)v6);
  unint64_t v13 = *(void *)&vshr_n_u32(*v6, 8uLL) & 0xFFFF00FFFFFF00FFLL;
  unsigned int v14 = v7 & 0xFF00FF;
  unsigned int v15 = (v7 >> 8) & 0xFF00FF;
  uint64_t v16 = v5 - 1;
  if (v16 < 7)
  {
    int v17 = 0x40000000;
    goto LABEL_14;
  }

  uint64_t v20 = v16 + 1;
  uint64_t v21 = (v16 + 1) & 0x1FFFFFFF8LL;
  v5 -= v21;
  v11 += 48 * v21;
  int32x4_t v22 = vdupq_lane_s32(v12, 0);
  int32x4_t v23 = vdupq_lane_s32((int32x2_t)v13, 0);
  int32x4_t v24 = vdupq_lane_s32(v12, 1);
  int32x4_t v25 = vdupq_lane_s32((int32x2_t)v13, 1);
  v9 += 2 * v21;
  int32x4_t v26 = vdupq_n_s32(v14);
  int32x4_t v27 = vdupq_n_s32(v15);
  int32x4_t v28 = (const float *)(v8 + 4LL * (int)a2 + 32);
  int32x4_t v29 = (__int32 *)(v10 + 24LL * (int)a2 + 192);
  v30.i64[0] = 0x4000000040000000LL;
  v30.i64[1] = 0x4000000040000000LL;
  uint64_t v31 = v21;
  v32.i64[0] = 0x4000000040000000LL;
  v32.i64[1] = 0x4000000040000000LL;
  do
  {
    float32x4x2_t v79 = vld2q_f32(v28);
    int32x4_t v33 = v28 - 8;
    float32x4x2_t v80 = vld2q_f32(v33);
    v34.i32[0] = *v29;
    v35.i32[0] = v29[1];
    v34.i32[1] = v29[12];
    v35.i32[1] = v29[13];
    v34.i32[2] = v29[24];
    v36.i32[0] = *(v29 - 48);
    v36.i32[1] = *(v29 - 36);
    v35.i32[2] = v29[25];
    v37.i32[0] = *(v29 - 47);
    v37.i32[1] = *(v29 - 35);
    v34.i32[3] = v29[36];
    v38.i32[0] = *(v29 - 46);
    v38.i32[1] = *(v29 - 34);
    v35.i32[3] = v29[37];
    v36.i32[2] = *(v29 - 24);
    v37.i32[2] = *(v29 - 23);
    v38.i32[2] = *(v29 - 22);
    v39.i32[0] = v29[2];
    v36.i32[3] = *(v29 - 12);
    v39.i32[1] = v29[14];
    v39.i32[2] = v29[26];
    v37.i32[3] = *(v29 - 11);
    v39.i32[3] = v29[38];
    v38.i32[3] = *(v29 - 10);
    int32x4_t v40 = (int32x4_t)vshrq_n_u32(v36, 8uLL);
    v36.i16[0] = v36.u8[0];
    v36.i16[1] = BYTE2(*(v29 - 48));
    v36.i16[2] = v36.u8[4];
    v36.i16[3] = BYTE2(*(v29 - 36));
    v36.i16[4] = v36.u8[8];
    v36.i16[5] = BYTE2(*(v29 - 24));
    v36.i16[6] = v36.u8[12];
    v36.i16[7] = BYTE2(*(v29 - 12));
    v41.i32[0] = *(v29 - 42);
    uint32x4_t v42 = vshrq_n_u32(v34, 8uLL);
    v34.i16[0] = *v29;
    v34.i16[1] = BYTE2(*v29);
    v34.i16[2] = v34.u8[4];
    v34.i16[3] = BYTE2(v29[12]);
    v34.i16[4] = v34.u8[8];
    v34.i16[5] = BYTE2(v29[24]);
    v34.i16[6] = v34.u8[12];
    v34.i16[7] = BYTE2(v29[36]);
    uint32x4_t v43 = vshrq_n_u32(v37, 8uLL);
    v37.i16[0] = v37.u8[0];
    v37.i16[1] = BYTE2(*(v29 - 47));
    v37.i16[2] = v37.u8[4];
    v37.i16[3] = BYTE2(*(v29 - 35));
    v37.i16[4] = v37.u8[8];
    v37.i16[5] = BYTE2(*(v29 - 23));
    v37.i16[6] = v37.u8[12];
    v37.i16[7] = BYTE2(*(v29 - 11));
    uint32x4_t v44 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v34, v22),  (int32x4_t)(*(_OWORD *)&v42 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
    int32x4_t v45 = (int32x4_t)vshrq_n_u32(v35, 8uLL);
    v35.i16[0] = v35.u8[0];
    v35.i16[1] = BYTE2(v29[1]);
    v35.i16[2] = v35.u8[4];
    v35.i16[3] = BYTE2(v29[13]);
    v35.i16[4] = v35.u8[8];
    v35.i16[5] = BYTE2(v29[25]);
    v35.i16[6] = v35.u8[12];
    v35.i16[7] = BYTE2(v29[37]);
    uint32x4_t v46 = vshrq_n_u32(v38, 8uLL);
    v38.i16[0] = v38.u8[0];
    v38.i16[1] = BYTE2(*(v29 - 46));
    v38.i16[2] = v38.u8[4];
    v38.i16[3] = BYTE2(*(v29 - 34));
    v38.i16[4] = v38.u8[8];
    v38.i16[5] = BYTE2(*(v29 - 22));
    v38.i16[6] = v38.u8[12];
    v38.i16[7] = BYTE2(*(v29 - 10));
    int32x4_t v47 = (int32x4_t)vshrq_n_u32(v39, 8uLL);
    v39.i16[0] = v39.u8[0];
    v39.i16[1] = BYTE2(v29[2]);
    v39.i16[2] = v39.u8[4];
    v39.i16[3] = BYTE2(v29[14]);
    v39.i16[4] = v39.u8[8];
    v39.i16[5] = BYTE2(v29[26]);
    v39.i16[6] = v39.u8[12];
    v39.i16[7] = BYTE2(v29[38]);
    v41.i32[1] = *(v29 - 30);
    v41.i32[2] = *(v29 - 18);
    v41.i32[3] = *(v29 - 6);
    uint32x4_t v48 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v35, v24),  (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v25);
    v45.i32[0] = v29[6];
    v49.i32[0] = v29[7];
    v45.i32[1] = v29[18];
    v45.i32[2] = v29[30];
    v45.i32[3] = v29[42];
    uint32x4_t v50 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v39, v26),  (int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v27);
    v47.i32[0] = *(v29 - 41);
    v47.i32[1] = *(v29 - 29);
    v47.i32[2] = *(v29 - 17);
    v47.i32[3] = *(v29 - 5);
    uint32x4_t v51 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v36, v22),  (int32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
    v49.i32[1] = v29[19];
    v49.i32[2] = v29[31];
    v49.i32[3] = v29[43];
    v40.i32[0] = *(v29 - 40);
    v40.i32[1] = *(v29 - 28);
    v40.i32[2] = *(v29 - 16);
    uint32x4_t v52 = vsraq_n_u32(vshrq_n_u32(v44, 0xFuLL), v48, 0xFuLL);
    v40.i32[3] = *(v29 - 4);
    uint32x4_t v53 = vshrq_n_u32(v41, 8uLL);
    v41.i16[0] = v41.u8[0];
    v41.i16[1] = BYTE2(*(v29 - 42));
    v41.i16[2] = v41.u8[4];
    v41.i16[3] = BYTE2(*(v29 - 30));
    v41.i16[4] = v41.u8[8];
    v41.i16[5] = BYTE2(*(v29 - 18));
    v41.i16[6] = v41.u8[12];
    v41.i16[7] = BYTE2(*(v29 - 6));
    int32x4_t v54 = (int32x4_t)vsraq_n_u32(v52, v50, 0xFuLL);
    uint32x4_t v55 = (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v41, v22),  (int32x4_t)(*(_OWORD *)&v53 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
    int32x4_t v56 = (int32x4_t)vshrq_n_u32((uint32x4_t)v45, 8uLL);
    v45.i16[0] = v45.u8[0];
    v45.i16[1] = BYTE2(v29[6]);
    v45.i16[2] = v45.u8[4];
    v45.i16[3] = BYTE2(v29[18]);
    v45.i16[4] = v45.u8[8];
    v45.i16[5] = BYTE2(v29[30]);
    v45.i16[6] = v45.u8[12];
    v45.i16[7] = BYTE2(v29[42]);
    uint32x4_t v57 = (uint32x4_t)vmlaq_s32( vmulq_s32(v45, v22),  (int32x4_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v23);
    v56.i32[0] = v29[8];
    v56.i32[1] = v29[20];
    uint32x4_t v58 = vsraq_n_u32( vshrq_n_u32(v51, 0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v37, v24),  (int32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v25),  0xFuLL);
    v56.i32[2] = v29[32];
    v56.i32[3] = v29[44];
    uint32x4_t v59 = vshrq_n_u32(v55, 0xFuLL);
    int32x4_t v60 = (int32x4_t)vsraq_n_u32( v58,  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v38, v26),  (int32x4_t)(*(_OWORD *)&v46 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v27),  0xFuLL);
    uint32x4_t v61 = vshrq_n_u32(v57, 0xFuLL);
    uint32x4_t v62 = vshrq_n_u32((uint32x4_t)v47, 8uLL);
    v47.i16[0] = v47.u8[0];
    v47.i16[1] = BYTE2(*(v29 - 41));
    v47.i16[2] = v47.u8[4];
    v47.i16[3] = BYTE2(*(v29 - 29));
    v47.i16[4] = v47.u8[8];
    v47.i16[5] = BYTE2(*(v29 - 17));
    v47.i16[6] = v47.u8[12];
    v47.i16[7] = BYTE2(*(v29 - 5));
    uint32x4_t v63 = (uint32x4_t)vmlaq_s32( vmulq_s32(v47, v24),  (int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v25);
    uint32x4_t v64 = vshrq_n_u32(v49, 8uLL);
    v49.i16[0] = v49.u8[0];
    v49.i16[1] = BYTE2(v29[7]);
    v49.i16[2] = v49.u8[4];
    v49.i16[3] = BYTE2(v29[19]);
    v49.i16[4] = v49.u8[8];
    v49.i16[5] = BYTE2(v29[31]);
    v49.i16[6] = v49.u8[12];
    v49.i16[7] = BYTE2(v29[43]);
    int32x4_t v65 = vminq_s32(vsubq_s32((int32x4_t)v79.val[0], v54), v32);
    uint32x4_t v66 = vshrq_n_u32((uint32x4_t)v40, 8uLL);
    v40.i16[0] = v40.u8[0];
    v40.i16[1] = BYTE2(*(v29 - 40));
    v40.i16[2] = v40.u8[4];
    v40.i16[3] = BYTE2(*(v29 - 28));
    v40.i16[4] = v40.u8[8];
    v40.i16[5] = BYTE2(*(v29 - 16));
    v40.i16[6] = v40.u8[12];
    v40.i16[7] = BYTE2(*(v29 - 4));
    uint32x4_t v67 = (uint32x4_t)vmlaq_s32( vmulq_s32(v40, v26),  (int32x4_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v27);
    uint32x4_t v68 = vshrq_n_u32((uint32x4_t)v56, 8uLL);
    v56.i16[0] = v56.u8[0];
    v56.i16[1] = BYTE2(v29[8]);
    v56.i16[2] = v56.u8[4];
    v56.i16[3] = BYTE2(v29[20]);
    v56.i16[4] = v56.u8[8];
    v56.i16[5] = BYTE2(v29[32]);
    v56.i16[6] = v56.u8[12];
    v56.i16[7] = BYTE2(v29[44]);
    v28 += 16;
    int32x4_t v30 = vminq_s32( vsubq_s32((int32x4_t)v80.val[1], (int32x4_t)vsraq_n_u32(vsraq_n_u32(v59, v63, 0xFuLL), v67, 0xFuLL)),  vminq_s32(vsubq_s32((int32x4_t)v80.val[0], v60), v30));
    v29 += 96;
    int32x4_t v32 = vminq_s32( vsubq_s32( (int32x4_t)v79.val[1],  (int32x4_t)vsraq_n_u32( vsraq_n_u32( v61,  (uint32x4_t)vmlaq_s32( vmulq_s32((int32x4_t)v49, v24),  (int32x4_t)(*(_OWORD *)&v64 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v25),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmulq_s32(v56, v26),  (int32x4_t)(*(_OWORD *)&v68 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v27),  0xFuLL)),  v65);
    v31 -= 8LL;
  }

  while (v31);
  int v17 = vminvq_s32(vminq_s32(v30, v32));
  if (v20 != v21)
  {
LABEL_14:
    unsigned int v69 = v5 + 1;
    int32x4_t v70 = (_DWORD *)(v11 + 32);
    do
    {
      v71.i16[0] = *((void *)v70 - 4);
      v71.i16[1] = BYTE2(*((void *)v70 - 4));
      v71.i16[2] = BYTE4(*((void *)v70 - 4));
      v71.i16[3] = BYTE6(*((void *)v70 - 4));
      int32x2_t v72 = vmla_s32( vmul_s32(v71, v12),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v70 - 8), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v13);
      int v73 = *v9;
      int v74 = v9[1];
      v9 += 2;
      unsigned __int32 v75 = vsra_n_u32( (uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32((uint32x2_t)v72, 0xFuLL), 1),  (uint32x2_t)v72,  0xFuLL).u32[0];
      v72.i16[0] = *((void *)v70 - 1);
      v72.i16[1] = BYTE2(*((void *)v70 - 1));
      v72.i16[2] = BYTE4(*((void *)v70 - 1));
      v72.i16[3] = BYTE6(*((void *)v70 - 1));
      uint32x2_t v76 = (uint32x2_t)vmla_s32( vmul_s32(v72, v12),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v70 - 2), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v13);
      int v77 = v73 - (v75 + (((*(v70 - 6) & 0xFF00FF) * v14 + ((*(v70 - 6) >> 8) & 0xFF00FF) * v15) >> 15));
      int v78 = v74
          - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v76, 0xFuLL), 1), v76, 0xFuLL).u32[0]
           + (((*v70 & 0xFF00FF) * v14 + ((*v70 >> 8) & 0xFF00FF) * v15) >> 15));
      if (v77 >= v17) {
        int v77 = v17;
      }
      if (v78 >= v77) {
        int v17 = v77;
      }
      else {
        int v17 = v78;
      }
      --v69;
      v70 += 12;
    }

    while (v69 > 1);
  }

float sub_100019228(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, float *a5, int8x16_t a6, int8x16_t a7)
{
  int v7 = *(_DWORD *)(a1 + 1072);
  BOOL v8 = __OFSUB__(a2, v7);
  int v9 = a2 - v7;
  if (v9 < 0 != v8)
  {
    unsigned int v10 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v11 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v11 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      unsigned int v10 = v11 + a3;
    }

    int v13 = *(_DWORD *)(a1 + 1128) * v10;
    int32x2_t v12 = (void *)(a1 + 136);
  }

  else
  {
    int32x2_t v12 = (void *)(a1 + 792);
    int v13 = 6 * v9;
  }

  uint64_t v14 = *v12 + 4LL * v13;
  *(int8x8_t *)a7.i8 = vorr_s8( (int8x8_t)vshl_n_s32(*(int32x2_t *)v14, 0x10uLL),  (int8x8_t)vshr_n_u32(*(uint32x2_t *)v14, 0x10uLL));
  a6.i16[0] = *(void *)v14;
  a6.i16[1] = BYTE2(*(void *)v14);
  a6.i16[2] = BYTE4(*(void *)v14);
  a6.i16[3] = BYTE6(*(void *)v14);
  uint32x2_t v15 = vshr_n_u32(*(uint32x2_t *)a7.i8, 8uLL);
  a7.i32[0] &= 0xFF00FFu;
  a7.i16[2] = a7.u8[4];
  a7.i16[3] = a7.u8[6];
  *(int32x2_t *)a6.i8 = vmla_s32( vmul_s32(*(int32x2_t *)a7.i8, *(int32x2_t *)a6.i8),  (int32x2_t)(*(void *)&v15 & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v14, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  a7.i32[0] = vsra_n_u32( (uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(*(uint32x2_t *)a6.i8, 0x10uLL), 1),  *(uint32x2_t *)a6.i8,  0x10uLL).u32[0];
  a6.i32[0] = *(_DWORD *)(v14 + 8);
  *a4 = a7.i32[0];
  a7.i64[0] = *(void *)(v14 + 12);
  int32x4_t v16 = (int32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a7, 0xCuLL);
  v16.i32[3] = *(_DWORD *)(v14 + 20);
  uint32x4_t v17 = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v16, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v16, 0x10uLL));
  uint32x4_t v18 = vshrq_n_u32((uint32x4_t)v16, 8uLL);
  v16.i64[0] &= 0xFF00FF00FF00FFuLL;
  v16.i32[2] &= 0xFF00FFu;
  v16.i16[6] = v16.u8[12];
  v16.i16[7] = BYTE2(*(_DWORD *)(v14 + 20));
  float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v17 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v16),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v17, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&v18 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0x10uLL)));
  *a5 = result;
  return result;
}

uint32x2_t sub_10001932C(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *(_DWORD *)(a1 + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 != v6)
  {
    unsigned int v8 = a2;
    if (!*(_DWORD *)(a1 + 2012))
    {
      if (*(_DWORD *)(a1 + 1176)) {
        int v9 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      }
      else {
        int v9 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      }
      unsigned int v8 = v9 + a3;
    }

    int v11 = *(_DWORD *)(a1 + 1128) * v8;
    unsigned int v10 = (void *)(a1 + 136);
  }

  else
  {
    unsigned int v10 = (void *)(a1 + 792);
    int v11 = 6 * v7;
  }

  int32x2_t v12 = (int32x2_t *)(*v10 + 4LL * v11);
  unsigned __int32 v13 = v12[1].u32[0];
  uint32x2_t v14 = (uint32x2_t)vorr_s8((int8x8_t)vshl_n_s32(*v12, 0x10uLL), (int8x8_t)vshr_n_u32((uint32x2_t)*v12, 0x10uLL));
  v15.i16[0] = v12->u8[0];
  v15.i16[1] = BYTE2(v12->u32[0]);
  v15.i16[2] = BYTE4(*(unint64_t *)v12);
  v15.i16[3] = BYTE6(*(unint64_t *)v12);
  uint32x2_t result = (uint32x2_t)vmla_s32( vmul_s32((int32x2_t)(*(void *)&v14 & 0xFF00FF00FF00FFLL), v15),  (int32x2_t)(*(void *)&vshr_n_u32(v14, 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)(*(void *)&vshr_n_u32((uint32x2_t)*v12, 8uLL) & 0xFFFF00FFFFFF00FFLL));
  *a4 = vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(result, 0x10uLL), 1), result, 0x10uLL).u32[0];
  HIDWORD(v17) = v13;
  LODWORD(v17) = v13;
  *a5 = (((v17 >> 16) & 0xFF00FF) * (v13 & 0xFF00FF)
       + (((v17 >> 16) >> 8) & 0xFF00FF) * ((v13 >> 8) & 0xFF00FF)) >> 16;
  return result;
}

uint64_t sub_100019410(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    unsigned int v3 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v4 = v3[1] - *v3;
    if ((v4 & 1) == 0) {
      goto LABEL_4;
    }
    return sub_100015C54(a1, a2);
  }

  int32x4_t v47 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v4 = v47[1] - *v47;
  if ((v4 & 1) != 0) {
    return sub_100015C54(a1, a2);
  }
LABEL_4:
  signed int v5 = a2;
  if (!*(_DWORD *)(a1 + 2012))
  {
    if (!v2)
    {
      signed int v5 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      if (v4 >= 2) {
        goto LABEL_8;
      }
      goto LABEL_32;
    }

    signed int v5 = *(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
  }

  if (v4 >= 2)
  {
LABEL_8:
    signed __int32 v6 = *(_DWORD *)(a1 + 1064);
    int v7 = *(_DWORD *)(a1 + 1068);
    unsigned int v8 = v4 >> 1;
    int v9 = *(uint32x2_t **)(a1 + 1552);
    unsigned __int32 v10 = v9[1].u32[0];
    BOOL v11 = *(_DWORD *)(a1 + 1080) <= (int)a2;
    uint64_t v12 = 120LL;
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = 4LL * v5;
    uint64_t v15 = v13 + v14;
    uint64_t v16 = 104LL;
    if (!v11) {
      uint64_t v16 = 32LL;
    }
    uint64_t v17 = 144LL;
    if (!v11) {
      uint64_t v17 = 136LL;
    }
    BOOL v18 = v13 == 0;
    uint64_t v19 = (_DWORD *)(*(void *)(a1 + v16) + v14);
    if (v18) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = v15;
    }
    uint64_t v21 = *(void *)(a1 + v17) + 4LL * *(_DWORD *)(a1 + 1128) * v5;
    v22.i16[0] = v9->u8[0];
    v22.i16[1] = BYTE2(v9->u32[0]);
    v22.i16[2] = BYTE4(*(unint64_t *)v9);
    v22.i16[3] = BYTE6(*(unint64_t *)v9);
    unint64_t v23 = *(void *)&vshr_n_u32(*v9, 8uLL) & 0xFFFF00FFFFFF00FFLL;
    int v24 = (v10 >> 8) & 0xFF00FF;
    int v25 = v10 & 0xFF00FF;
    int v26 = v8 + 1;
    int32x4_t v27 = (_DWORD *)(v20 + 4);
    int v28 = 0x40000000;
    do
    {
      v35.i16[0] = *(void *)v21;
      v35.i16[1] = BYTE2(*(void *)v21);
      v35.i16[2] = BYTE4(*(void *)v21);
      v35.i16[3] = BYTE6(*(void *)v21);
      uint32x2_t v36 = (uint32x2_t)vmla_s32( vmul_s32(v35, v22),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)v21, 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v23);
      signed __int32 v37 = *v19 - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v36, 0xFuLL), 1), v36, 0xFuLL).u32[0];
      if (v37 <= v6)
      {
        unsigned __int32 v39 = v9[1].u32[1];
        LOWORD(v40) = *(void *)&v9[2];
        WORD1(v40) = BYTE2(*(void *)&v9[2]);
        WORD2(v40) = BYTE4(*(void *)&v9[2]);
        HIWORD(v40) = BYTE6(*(void *)&v9[2]);
        v41.i16[0] = *(_OWORD *)(v21 + 8);
        v41.i16[1] = BYTE2(*(_OWORD *)(v21 + 8));
        v41.i16[2] = BYTE4(*(void *)(v21 + 8));
        v41.i16[3] = BYTE6(*(void *)(v21 + 8));
        v41.i16[4] = *(void *)(v21 + 16);
        v41.i16[5] = BYTE2(*(void *)(v21 + 16));
        v41.i16[6] = BYTE12(*(_OWORD *)(v21 + 8));
        v41.i16[7] = BYTE14(*(_OWORD *)(v21 + 8));
        v42.i32[0] = v25;
        v42.i32[1] = v39 & 0xFF00FF;
        v42.i64[1] = v40;
        int32x4_t v43 = vmulq_s32(v41, v42);
        v41.i32[0] = v24;
        v41.i32[1] = (v39 >> 8) & 0xFF00FF;
        v41.i64[1] = *(void *)&vshr_n_u32(v9[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
        int v38 = *(v27 - 1)
            + v37
            - vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( v43,  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v21 + 8), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v41),  0xFuLL));
      }

      else
      {
        int v38 = v37 + v7;
      }

      if (v38 < v28) {
        int v28 = v38;
      }
      v44.i16[0] = *(void *)(v21 + 24);
      v44.i16[1] = BYTE2(*(void *)(v21 + 24));
      v44.i16[2] = BYTE4(*(void *)(v21 + 24));
      v44.i16[3] = BYTE6(*(void *)(v21 + 24));
      uint32x2_t v45 = (uint32x2_t)vmla_s32( vmul_s32(v44, v22),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)(v21 + 24), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v23);
      signed __int32 v46 = v19[1] - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v45, 0xFuLL), 1), v45, 0xFuLL).u32[0];
      if (v46 <= v6)
      {
        unsigned __int32 v29 = v9[1].u32[1];
        LOWORD(v30) = *(void *)&v9[2];
        WORD1(v30) = BYTE2(*(void *)&v9[2]);
        WORD2(v30) = BYTE4(*(void *)&v9[2]);
        HIWORD(v30) = BYTE6(*(void *)&v9[2]);
        v31.i16[0] = *(_OWORD *)(v21 + 32);
        v31.i16[1] = BYTE2(*(_OWORD *)(v21 + 32));
        v31.i16[2] = BYTE4(*(void *)(v21 + 32));
        v31.i16[3] = BYTE6(*(void *)(v21 + 32));
        v31.i16[4] = *(void *)(v21 + 40);
        v31.i16[5] = BYTE2(*(void *)(v21 + 40));
        v31.i16[6] = BYTE12(*(_OWORD *)(v21 + 32));
        v31.i16[7] = BYTE14(*(_OWORD *)(v21 + 32));
        v32.i32[0] = v25;
        v32.i32[1] = v29 & 0xFF00FF;
        v32.i64[1] = v30;
        int32x4_t v33 = vmulq_s32(v31, v32);
        v31.i32[0] = v24;
        v31.i32[1] = (v29 >> 8) & 0xFF00FF;
        v31.i64[1] = *(void *)&vshr_n_u32(v9[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
        int v34 = *v27
            + v46
            - vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( v33,  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v21 + 32), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v31),  0xFuLL));
      }

      else
      {
        int v34 = v46 + v7;
      }

      if (v34 < v28) {
        int v28 = v34;
      }
      --v26;
      v27 += 2;
      v19 += 2;
      v21 += 48LL;
    }

    while (v26 > 1);
  }

uint64_t sub_1000196D0(uint64_t a1, signed int a2, int8x16_t a3, double a4, double a5, int8x16_t a6)
{
  int v6 = *(_DWORD *)(a1 + 1072);
  int v7 = a2 - v6;
  if (a2 >= v6)
  {
    BOOL v11 = (uint64_t *)(a1 + 792);
    uint64_t v12 = (void *)(a1 + 800);
    uint64_t v13 = (uint64_t *)(a1 + 808);
    int v14 = 6 * v7;
    int v15 = 1;
  }

  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      unsigned int v8 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      int v9 = *v8;
      int v10 = v8[1];
    }

    else
    {
      uint64_t v16 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      int v9 = *v16;
      int v10 = v16[1];
    }

    int v15 = v10 - v9;
    if (*(_DWORD *)(a1 + 2012)) {
      int v7 = a2;
    }
    else {
      int v7 = v9;
    }
    int v14 = *(_DWORD *)(a1 + 1128) * v7;
    BOOL v17 = *(_DWORD *)(a1 + 1080) <= a2;
    BOOL v11 = (uint64_t *)(a1 + 136);
    if (*(_DWORD *)(a1 + 1080) > a2)
    {
      uint64_t v12 = (void *)(a1 + 32);
    }

    else
    {
      BOOL v11 = (uint64_t *)(a1 + 144);
      uint64_t v12 = (void *)(a1 + 104);
    }

    if (v17) {
      uint64_t v13 = (uint64_t *)(a1 + 120);
    }
    else {
      uint64_t v13 = (uint64_t *)(a1 + 48);
    }
  }

  uint64_t v18 = *v13;
  uint64_t v19 = *v11;
  if (v18) {
    uint64_t v20 = v18 + 4LL * v7;
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v21 = *(uint32x2_t **)(a1 + 1552);
  unsigned int v22 = v21[1].u32[0];
  if (v15 < 1)
  {
    int v24 = 0;
    int v31 = 0x40000000;
LABEL_30:
    uint64_t v41 = v19 + 4LL * v14 + 24LL * v24;
    *(uint32x2_t *)a3.i8 = *(uint32x2_t *)((char *)v21 + 12);
    v42.i16[0] = *(_OWORD *)(v41 + 8);
    v42.i16[1] = BYTE2(*(_OWORD *)(v41 + 8));
    v42.i16[2] = BYTE4(*(void *)(v41 + 8));
    v42.i16[3] = BYTE6(*(void *)(v41 + 8));
    v42.i16[4] = *(void *)(v41 + 16);
    v42.i16[5] = BYTE2(*(void *)(v41 + 16));
    v42.i16[6] = BYTE12(*(_OWORD *)(v41 + 8));
    v42.i16[7] = BYTE14(*(_OWORD *)(v41 + 8));
    a6.i32[0] = v21[1].i32[0];
    int32x4_t v43 = (int32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a3, 0xCuLL);
    v43.i32[3] = v21[2].i32[1];
    uint32x4_t v44 = vshrq_n_u32((uint32x4_t)v43, 8uLL);
    v43.i64[0] &= 0xFF00FF00FF00FFuLL;
    v43.i32[2] &= 0xFF00FFu;
    v43.i16[6] = v43.u8[12];
    v43.i16[7] = BYTE2(v21[2].i32[1]);
    int v30 = *(_DWORD *)(v20 + 4LL * v24)
        + v31
        - vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32(v42, v43),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)(v41 + 8), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL))),  0xFuLL));
  }

  uint64_t v23 = 0LL;
  int v24 = 0;
  uint64_t v25 = *v12 + 4LL * v7;
  unint64_t v27 = *(void *)&vshr_n_u32(*v21, 8uLL) & 0xFFFF00FFFFFF00FFLL;
  int v28 = v15;
  unsigned __int32 v29 = (_OWORD *)(v19 + 4LL * v14 + 8);
  int v30 = 0x40000000;
  int v31 = 0x40000000;
  do
  {
    while (1)
    {
      v38.i16[0] = *((void *)v29 - 1);
      v38.i16[1] = BYTE2(*((void *)v29 - 1));
      v38.i16[2] = BYTE4(*((void *)v29 - 1));
      v38.i16[3] = BYTE6(*((void *)v29 - 1));
      v26.i16[3] = BYTE6(*(unint64_t *)v21);
      v26.i16[2] = BYTE4(*(unint64_t *)v21);
      v26.i16[1] = BYTE2(v21->u32[0]);
      v26.i16[0] = v21->u8[0];
      uint32x2_t v39 = (uint32x2_t)vmla_s32( vmul_s32(v38, v26),  (int32x2_t)(*(void *)&vshr_n_u32(*(uint32x2_t *)((char *)v29 - 8), 8uLL) & 0xFFFF00FFFFFF00FFLL),  (int32x2_t)v27);
      signed __int32 v40 = *(_DWORD *)(v25 + 4 * v23)
          - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v39, 0xFuLL), 1), v39, 0xFuLL).u32[0];
      if (v40 <= *(_DWORD *)(a1 + 1064)) {
        break;
      }
      if (v40 < v31)
      {
        int v31 = v40;
        int v24 = v23;
      }

      ++v23;
      unsigned __int32 v29 = (_OWORD *)((char *)v29 + 24);
      if (v28 == (_DWORD)v23) {
        goto LABEL_27;
      }
    }

    unsigned int v32 = v21[1].u32[1];
    LOWORD(v33) = *(void *)&v21[2];
    WORD1(v33) = BYTE2(*(void *)&v21[2]);
    WORD2(v33) = BYTE4(*(void *)&v21[2]);
    HIWORD(v33) = BYTE6(*(void *)&v21[2]);
    uint32x4_t v34 = *(uint32x4_t *)v29;
    unsigned __int32 v29 = (_OWORD *)((char *)v29 + 24);
    v35.i32[0] = v22 & 0xFF00FF;
    v35.i32[1] = v32 & 0xFF00FF;
    v35.i64[1] = v33;
    v36.i32[0] = (v22 >> 8) & 0xFF00FF;
    v36.i32[1] = (v32 >> 8) & 0xFF00FF;
    v36.i64[1] = *(void *)&vshr_n_u32(v21[2], 8uLL) & 0xFFFF00FFFFFF00FFLL;
    int v37 = *(_DWORD *)(v20 + 4 * v23)
        + v40
        - vaddvq_s32((int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v34 & __PAIR128__( 0xFF00FF00FF00FFLL,  0xFF00FF00FF00FFLL)),  v35),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v34, 8uLL) & __PAIR128__( 0xFFFF00FFFFFF00FFLL,  0xFFFF00FFFFFF00FFLL)),  v36),  0xFuLL));
    if (v37 < v30) {
      int v30 = v37;
    }
    ++v23;
  }

  while (v28 != (_DWORD)v23);
LABEL_27:
  if (v30 == 0x40000000) {
    goto LABEL_30;
  }
}

uint64_t sub_100019964(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned __int8 **)(a1 + 1544);
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4)
  {
    int v9 = *(_DWORD *)(a1 + 1120);
    int v10 = (unsigned __int8 *)(*(void *)(a1 + 784) + v9 * v5);
    int v11 = 1;
LABEL_12:
    int v20 = 0x40000000;
    v22.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v22.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    while (1)
    {
      unsigned int v26 = v10[1];
      int v18 = v2[5];
      int v19 = v2[4];
      int v21 = v2[7];
      int v23 = v2[6];
      int v14 = v2[1];
      int v15 = *v2;
      int v16 = v2[3];
      int v17 = v2[2];
      int v24 = ((*v10 & 0xF) - v15) * ((*v10 & 0xF) - v15)
          + ((*v10 >> 4) - v14) * ((*v10 >> 4) - v14)
          + ((v26 >> 4) - v16) * ((v26 >> 4) - v16)
          + ((v26 & 0xF) - v17) * ((v26 & 0xF) - v17)
          + ((v10[2] >> 4) - v18) * ((v10[2] >> 4) - v18)
          + ((v10[2] & 0xF) - v19) * ((v10[2] & 0xF) - v19)
          + ((v10[3] >> 4) - v21) * ((v10[3] >> 4) - v21)
          + ((v10[3] & 0xF) - v23) * ((v10[3] & 0xF) - v23);
      if (v24 > *(_DWORD *)(a1 + 1056))
      {
        v24 += *(_DWORD *)(a1 + 1060);
      }

      else
      {
        unint64_t v27 = *(unsigned int *)(a1 + 1104);
        if ((int)v27 >= 9)
        {
          if (v27 <= 0xA) {
            uint64_t v28 = 10LL;
          }
          else {
            uint64_t v28 = *(unsigned int *)(a1 + 1104);
          }
          unint64_t v29 = v28 - 9;
          if ((unint64_t)(v28 - 9) < 0xE)
          {
            unint64_t v30 = 8LL;
            goto LABEL_34;
          }

          uint64_t v31 = (v29 >> 1) + 1;
          if (v29 >= 0x1E)
          {
            uint64_t v33 = 0LL;
            uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF0LL;
            int32x4_t v34 = 0uLL;
            int32x4_t v35 = (int32x4_t)v24;
            int32x4_t v36 = (const char *)(v2 + 8);
            int32x4_t v37 = 0uLL;
            int32x4_t v38 = 0uLL;
            do
            {
              int8x16_t v39 = *(int8x16_t *)&v10[(v33 & 0x7FFFFFFFFFFFFFF0LL) + 4];
              uint8x16_t v40 = vshrq_n_u8((uint8x16_t)v39, 4uLL);
              int8x16x2_t v59 = vld2q_s8(v36);
              v36 += 32;
              int16x8_t v41 = (int16x8_t)vsubl_high_u8(v40, (uint8x16_t)v59.val[1]);
              int16x8_t v42 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v59.val[1].i8);
              uint8x16_t v43 = (uint8x16_t)vandq_s8(v39, v22);
              int16x8_t v44 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v59.val[0].i8);
              int16x8_t v45 = (int16x8_t)vsubl_high_u8(v43, (uint8x16_t)v59.val[0]);
              int32x4_t v38 = vmlal_high_s16(vmlal_high_s16(v38, v41, v41), v45, v45);
              int32x4_t v37 = vmlal_s16( vmlal_s16(v37, *(int16x4_t *)v41.i8, *(int16x4_t *)v41.i8),  *(int16x4_t *)v45.i8,  *(int16x4_t *)v45.i8);
              int32x4_t v34 = vmlal_high_s16(vmlal_high_s16(v34, v42, v42), v44, v44);
              int32x4_t v35 = vmlal_s16( vmlal_s16(v35, *(int16x4_t *)v42.i8, *(int16x4_t *)v42.i8),  *(int16x4_t *)v44.i8,  *(int16x4_t *)v44.i8);
              v33 += 16LL;
            }

            while (v32 != v33);
            int v24 = vaddvq_s32(vaddq_s32(vaddq_s32(v35, v37), vaddq_s32(v34, v38)));
            if (v31 == v32) {
              goto LABEL_14;
            }
            if ((v31 & 8) == 0)
            {
              unint64_t v30 = (2 * v32) | 8;
LABEL_34:
              unint64_t v53 = v30 >> 1;
              do
              {
                unsigned int v54 = v10[v53];
                int v55 = (v54 >> 4) - v2[v30 | 1];
                int v56 = (v54 & 0xF) - v2[v30];
                v24 += v55 * v55 + v56 * v56;
                v30 += 2LL;
                ++v53;
              }

              while (v30 < v27);
              goto LABEL_14;
            }
          }

          else
          {
            uint64_t v32 = 0LL;
          }

          uint64_t v46 = v31 & 0x7FFFFFFFFFFFFFF8LL;
          unint64_t v30 = (16 * ((v31 & 0x7FFFFFFFFFFFFFF8uLL) >> 3)) | 8;
          int32x4_t v47 = 0uLL;
          int32x4_t v48 = (int32x4_t)v24;
          uint32x4_t v49 = (const char *)&v2[2 * v32 + 8];
          do
          {
            int8x8_t v50 = *(int8x8_t *)&v10[(v32 & 0x7FFFFFFFFFFFFFF8LL) + 4];
            int8x8x2_t v58 = vld2_s8(v49);
            v49 += 16;
            int16x8_t v51 = (int16x8_t)vsubl_u8(vshr_n_u8((uint8x8_t)v50, 4uLL), (uint8x8_t)v58.val[1]);
            int16x8_t v52 = (int16x8_t)vsubl_u8((uint8x8_t)vand_s8(v50, (int8x8_t)0xF0F0F0F0F0F0F0FLL), (uint8x8_t)v58.val[0]);
            int32x4_t v47 = vmlal_high_s16(vmlal_high_s16(v47, v51, v51), v52, v52);
            int32x4_t v48 = vmlal_s16( vmlal_s16(v48, *(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8),  *(int16x4_t *)v52.i8,  *(int16x4_t *)v52.i8);
            v32 += 8LL;
          }

          while (v46 != v32);
          int v24 = vaddvq_s32(vaddq_s32(v48, v47));
          if (v31 == v46) {
            goto LABEL_14;
          }
          goto LABEL_34;
        }
      }

LABEL_14:
      if (v24 < v20) {
        int v20 = v24;
      }
      v10 += v9;
      if (v11-- <= 1) {
        return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
      }
    }
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v6 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    unsigned int v8 = *v6;
    int v7 = v6[1];
  }

  else
  {
    uint64_t v12 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    unsigned int v8 = *v12;
    int v7 = v12[1];
  }

  int v11 = v7 - v8;
  if (*(_DWORD *)(a1 + 2012)) {
    unsigned int v8 = a2;
  }
  uint64_t v13 = 96LL;
  if (v11 >= 1)
  {
    int v9 = *(_DWORD *)(a1 + 1120);
    int v10 = (unsigned __int8 *)(*(void *)(a1 + v13) + (int)(v9 * v8));
    goto LABEL_12;
  }

  int v20 = 0x40000000;
  return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

  int v14 = a2;
  int v15 = (uint64_t *)v13;
  while (1)
  {
    int v16 = *v15;
    int v17 = *(void (**)(void))(*v15 + 184);
    if (v17)
    {
      v17();
      int v16 = *v15;
    }

    ++v15;
    if (!--v14) {
      goto LABEL_19;
    }
  }

  int v18 = 1LL;
  if (v8)
  {
LABEL_22:
    if (a2 >= 1)
    {
      int v19 = 0LL;
      int v20 = 8LL * a2;
      do
      {
        if (*(void *)(a1 + v19) != *(void *)(v13 + v19))
        {
          int v21 = *(void *)(v10 + v19);
          if (v21)
          {
            *(_DWORD *)(v21 + 248) = 0;
            (*(void (**)(void))(v21 + 80))();
          }
        }

        v19 += 8LL;
      }

      while (v20 != v19);
    }

      if (++v14 == v13) {
        goto LABEL_5;
      }
    }
  }

  return v3;
}

  else {
    return v5;
  }
}

  unsigned int v26 = sub_1000304FC(a3, a4, a7, a8, a5, a9, a10);
  if (v26)
  {
    unint64_t v27 = 8LL * (v23 >> 8);
    uint64_t v28 = 8LL * v23;
    *(void *)(*(void *)(*(void *)(a1 + 40) + v27) + v28) = v26;
    *(void *)(*(void *)(*(void *)(a1 + 56) + v27) + v28) = v20;
    unint64_t v29 = 4LL * v23;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + v27) + v29) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + v27) + v29) = 0;
    ++*(_DWORD *)(a1 + 24);
    *a6 = v23;
    return 1LL;
  }

    uint32x2_t result = sub_10003927C(*(void *)(a1 + 528), a3, a2, 0LL, 0LL, a6, a7, a8, a9);
    *(_DWORD *)(a1 + 552) = v13;
    *(_DWORD *)(a1 + 556) = a8;
    *(_DWORD *)(a1 + 560) = a9;
    if (v14 < 1)
    {
      *(_DWORD *)(a1 + 568) = 0;
      if (!(_DWORD)result) {
        goto LABEL_4;
      }
    }

    else
    {
      *(_WORD *)(a1 + 572) = *(_WORD *)(a2 + 2LL * (v14 - 1));
      *(_DWORD *)(a1 + 568) = 1;
      if (!(_DWORD)result) {
        goto LABEL_4;
      }
    }

    *(_DWORD *)(a1 + 520) = 0;
    int v11 = (_DWORD *)(a1 + 616);
    goto LABEL_5;
  }

  sub_1000BCBC8(v10);
  return v11;
}

  int v23 = *(_DWORD *)(a1 + 120);
  if (v23)
  {
    *((_WORD *)v15 + v16) = v23;
    LODWORD(v16) = v16 + 1;
  }

  if ((int)v16 >= 1)
  {
    int v24 = 0LL;
    uint64_t v25 = (unsigned __int16 *)v15 + (int)v16;
    unsigned int v26 = (char *)v15;
    while (1)
    {
      unint64_t v27 = *(int *)(a1 + 124);
      uint64_t v28 = ((char *)v25 - v26) >> 1;
      if (v28 >= v27) {
        unint64_t v27 = v27;
      }
      else {
        unint64_t v27 = v28;
      }
      unint64_t v29 = (int *)(*(void *)(a1 + 104) + 4LL * *(unsigned __int16 *)v26);
      unint64_t v30 = *v29;
      uint64_t v31 = v29[1] - *v29;
      if (v31)
      {
LABEL_24:
        uint64_t v32 = v31;
        uint64_t v33 = v30;
LABEL_27:
        int32x4_t v35 = 0LL;
        int32x4_t v36 = v32 - 1;
        if (v32 < 1) {
          int32x4_t v36 = v32;
        }
        int32x4_t v34 = v36 >> 1;
        int32x4_t v37 = (v36 >> 1) + v33;
        int32x4_t v38 = *(void *)(a1 + 56) + 2LL * *(int *)(*(void *)(a1 + 16) + 4 * v37);
        do
        {
          int8x16_t v39 = *(unsigned __int16 *)&v26[2 * v35] - *(unsigned __int16 *)(v38 + 2 * v35);
          if (v39)
          {
            if (*(_WORD *)(v38 + 2LL * v35) && (v39 & 0x80000000) == 0)
            {
LABEL_25:
              int32x4_t v34 = v32 + ~v34;
              uint64_t v33 = v37 + 1;
            }

            uint64_t v32 = v34;
            if (v34) {
              goto LABEL_27;
            }
            goto LABEL_18;
          }

          ++v35;
        }

        while (v27 != v35);
        uint8x16_t v40 = *(int *)(*(void *)(a1 + 32) + 4 * v37);
        int16x8_t v41 = *(void *)(a1 + 80);
        int16x8_t v42 = *(_WORD *)(v41 + 2 * v40);
        if (!v42)
        {
          int16x8_t v45 = v24;
          if (__dst) {
            goto LABEL_46;
          }
LABEL_53:
          int v24 = v45;
          v26 += 2 * (int)v27;
          goto LABEL_59;
        }

        uint8x16_t v43 = 0LL;
        int16x8_t v45 = (v43 + v24);
        if (!__dst) {
          goto LABEL_53;
        }
LABEL_46:
        if ((int)v45 > v9)
        {
          sub_1000CB038(v15, v14);
          return 0LL;
        }

        if (*(_WORD *)(v41 + 2 * v40))
        {
          uint64_t v46 = &__dst[2 * (int)v24];
          int32x4_t v47 = (unsigned __int16 *)(v41 + 2 * v40 + 2);
          do
          {
            *(_WORD *)uint64_t v46 = v42;
            v46 += 2;
            int32x4_t v48 = *v47++;
            int16x8_t v42 = v48;
            int v24 = (v24 + 1);
          }

          while (v48);
        }

        v26 += 2 * (int)v27;
      }

      else
      {
        do
          LODWORD(v27) = v27 - 1;
        while ((int)v27 >= 1);
LABEL_18:
        v26 += 2;
      }
    }
  }

  int v24 = 0LL;
LABEL_59:
  sub_1000CB038(v15, v14);
  return v24;
}

      sub_1000C0EF8(v2[6]);
      sub_1000C0EF8(v2[3]);
      sub_1000C0EF8((uint64_t)v2);
      return 0LL;
    }
  }

  return v2;
}

      if (v45)
      {
        int16x8_t v51 = v45 - 1;
        if (!v51) {
          goto LABEL_93;
        }
        goto LABEL_91;
      }

        if (*(_DWORD *)(result + 40) != 1) {
          goto LABEL_16;
        }
        int v3 = 0;
        goto LABEL_21;
      }

      uint64_t v12 = *(void *)(result + 104);
      uint64_t v13 = *(unsigned __int16 *)(v12 + 2 * v10);
      int v7 = *(unsigned __int16 *)(v12 + 2 * v10 + 2) + ~(_DWORD)v13;
      int v5 = (unsigned __int8 *)(*(void *)(result + 88) + v13);
      unsigned int v8 = (unint64_t)(v5 + 1);
      a2[2] = *v5;
      if (v7)
      {
LABEL_4:
        int v3 = v7 - 1;
        v5 += 2;
        LODWORD(v8) = *(unsigned __int8 *)v8;
        if (*(_DWORD *)(result + 40) == 1) {
          goto LABEL_21;
        }
LABEL_11:
        if (v3)
        {
          --v3;
          goto LABEL_18;
        }

  *(_DWORD *)(a1 + 304) = 4;
  *(void *)int v5 = 0x700000007LL;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)dbl_1000F2220;
  *(_OWORD *)(v5 + 8) = xmmword_1000F2210;
  *(_DWORD *)(v5 + 36) = 256;
  if (sub_1000C8AE4(a3, "ruru"))
  {
LABEL_8:
    goto LABEL_16;
  }

  unint64_t v27 = sub_1000CC52C((unint64_t)a2);
  int32x4_t v35 = v27 + 1;
  if (v27 >= *a6) {
    *a6 = v35;
  }
  int32x4_t v36 = 4 * v35;
  if (v27 >= *(_DWORD *)(a1 + 140)) {
    *(_DWORD *)(a1 + 140) = v35;
  }
  int32x4_t v37 = (unsigned __int8 *)sub_1000CAF58(v36, v28, v29, v30, v31, v32, v33, v34);
  unsigned int v171 = *(_DWORD *)(a1 + 20);
  v170 = v37;
  int32x4_t v38 = sub_1000C88E4((unint64_t)v37);
  int8x16_t v39 = v38;
  if (v38 > *(_DWORD *)(a1 + 144)) {
    *(_DWORD *)(a1 + 144) = v38;
  }
  if (v171)
  {
    uint8x16_t v40 = sub_100086428((uint64_t)a2);
    if (v40 == 16)
    {
      int32x4_t v48 = sub_1000CAF58(v36, v41, v42, v43, v44, v45, v46, v47);
      if (v172 == 4) {
        uint32x4_t v49 = 3;
      }
      else {
        uint32x4_t v49 = v172;
      }
      double v173 = v39;
      int8x8_t v50 = sub_1000C88E4(v48);
      int16x8_t v51 = v50 + 1;
      float64x2_t v169 = (unsigned __int8 *)v48;
      if (v50 > *(_DWORD *)(a1 + 144)) {
        *(_DWORD *)(a1 + 144) = v50;
      }
      int16x8_t v52 = 16;
    }

    else
    {
      int16x8_t v52 = v40;
      double v173 = v39;
      int16x8_t v51 = 0;
      float64x2_t v169 = 0LL;
    }
  }

  else
  {
    double v173 = v38;
    int16x8_t v51 = 0;
    float64x2_t v169 = 0LL;
    int16x8_t v52 = 128;
  }

  if (a3) {
    unint64_t v53 = a3;
  }
  else {
    unint64_t v53 = (unsigned __int16 *)&unk_1000F250E;
  }
  unsigned int v54 = sub_1000CC52C((unint64_t)v53);
  if (v54 > *a7) {
    *a7 = v54;
  }
  if (v54 > *(_DWORD *)(a1 + 148)) {
    *(_DWORD *)(a1 + 148) = v54;
  }
  uint32x4_t v62 = (unsigned __int8 *)sub_1000CAF58((4 * v54) | 1, v55, v56, v57, v58, v59, v60, v61);
  uint32x4_t v63 = sub_1000C88E4((unint64_t)v62);
  float64x2_t v166 = v62;
  float64x2_t v164 = v63;
  uint32x4_t v64 = v63 + 1;
  float64x2_t v167 = v173 + 1;
  int32x4_t v65 = v51 + v173 + 1 + v64;
  uint32x4_t v66 = (void *)(a1 + 96);
  if (!sub_1000C1744( (const void **)(a1 + 96),  (int *)(a1 + 108),  (signed int *)(a1 + 104),  8,  1,  *(_DWORD *)(a1 + 112) + v65)) {
    goto LABEL_50;
  }
  float64x2_t v165 = v52;
  char v176 = 0LL;
  int v74 = -2;
  if ((_DWORD)a5 == 1)
  {
    unsigned __int32 v75 = (void **)a4;
    if (*(unsigned __int16 *)(a1 + 204) != 0xFFFF)
    {
      uint32x2_t v76 = sub_100099EE0(*a4) + 1;
      char v176 = (void *)sub_1000CAF58(2LL * v76, v77, v78, v79, v80, v81, v82, v83);
      j__memmove(v176, (const void *)*a4, 2 * v76);
      int v74 = sub_100093A24((unsigned __int16 *)v176, *(unsigned __int16 *)(a1 + 204));
      unsigned __int32 v75 = &v176;
    }
  }

  else
  {
    unsigned __int32 v75 = (void **)a4;
  }

  float64x2_t v168 = (unsigned __int16 **)v75;
  if (!*(_DWORD *)a1 && *(void *)(a1 + 8))
  {
    if (a11)
    {
      int32x4_t v161 = v74;
      int32x4_t v162 = v65;
      int32x4_t v84 = 0;
      int32x4_t v85 = 1;
      int32x4_t v86 = *(_DWORD *)(a1 + 52);
      if (v86 > 16777209) {
        goto LABEL_56;
      }
LABEL_49:
      int v20 = (v86 + 1);
      *(_DWORD *)(a1 + 52) = v20;
      uint32x4_t v87 = *(unsigned int *)(a1 + 48);
      uint32x4_t v88 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + ((v87 >> 5) & 0x7FFFFF8))
                     + 12LL * *(_DWORD *)(a1 + 48));
      goto LABEL_69;
    }

    if ((_DWORD)a5 == 1)
    {
      int32x4_t v161 = v74;
      uint32x4_t v159 = (unsigned __int16 *)sub_1000CAF58(512LL, v67, v68, v69, v70, v71, v72, v73);
      if (*v53) {
        float64x2_t v160 = (unint64_t)v53;
      }
      else {
        float64x2_t v160 = (unint64_t)a2;
      }
      if (sub_1000942C4( *(void *)(a1 + 8),  v160,  a10 != 0,  v159,  256LL,  (uint64_t)&v177,  1LL,  (uint64_t)&v178) == 1 && sub_1000939DC(v159, *v168))
      {
        int32x4_t v162 = v65;
        sub_1000CB038(v159, 512LL);
        int32x4_t v84 = 0;
        int32x4_t v85 = 1;
        int32x4_t v86 = *(_DWORD *)(a1 + 52);
        if (v86 > 16777209) {
          goto LABEL_56;
        }
        goto LABEL_49;
      }

      sub_1000CB038(v159, 512LL);
      int v74 = v161;
    }
  }

  int32x4_t v84 = sub_10009397C((uint64_t)v168, a5) + 1;
  if (!sub_1000C1744( (const void **)(a1 + 120),  (int *)(a1 + 132),  (signed int *)(a1 + 128),  8,  1,  *(_DWORD *)(a1 + 136) + v84))
  {
LABEL_50:
    sub_1000CB094(v174);
    return 0xFFFFFFLL;
  }

  int32x4_t v161 = v74;
  int32x4_t v162 = v65;
  int32x4_t v85 = 0;
  int32x4_t v86 = *(_DWORD *)(a1 + 52);
  if (v86 <= 16777209) {
    goto LABEL_49;
  }
LABEL_56:
  int32x2_t v90 = *(_DWORD *)(a1 + 280);
  int32x2_t v91 = *(_DWORD *)(a1 + 48);
  if (v91 < 1)
  {
    LODWORD(v87) = 0;
    int v20 = *(unsigned int *)(a1 + 280);
  }

  else
  {
    LODWORD(v87) = 0;
    while (1)
    {
      int v20 = (v90 + v87);
      if ((_DWORD)v20 != *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v87 >> 8))
                                    + 12LL * v87
                                    + 8))
        break;
      LODWORD(v87) = v87 + 1;
      if (v91 == (_DWORD)v87)
      {
        LODWORD(v87) = *(_DWORD *)(a1 + 48);
        int v20 = (v91 + v90);
        goto LABEL_64;
      }
    }

    if (v91 > (int)v87)
    {
      do
      {
        int32x2_t v92 = v91 - 1;
        int32x2_t v93 = *(void *)(a1 + 32);
        unsigned int v94 = *(void *)(v93 + 8LL * ((v91 - 1) >> 8)) + 12LL * (v91 - 1);
        int32x4_t v95 = *(void *)(v93 + 8LL * (v91 >> 8)) + 12LL * v91;
        int32x2_t v96 = *(void *)v94;
        *(_DWORD *)(v95 + 8) = *(_DWORD *)(v94 + 8);
        *(void *)int32x4_t v95 = v96;
        int32x2_t v91 = v92;
      }

      while (v92 > (int)v87);
    }
  }

  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, _WORD *, uint64_t))(v8 + 16))(v8, a2, 0LL, a4, a5);
  return v9;
}

      uint64_t v32 = *a12;
      if (*a12 >= a6 && a5 != 0) {
        uint64_t v32 = 0;
      }
      if (v32 < a6)
      {
        *(_DWORD *)(a7 + 4LL * v32) = v30;
        if (a8) {
          *(_DWORD *)(a8 + 4LL * v32) = a3;
        }
        if (a9) {
          *(_DWORD *)(a9 + 4LL * v32) = 1;
        }
        if (a10) {
          *(_DWORD *)(a10 + 4LL * v32) = a13;
        }
        if (a11) {
          *(_BYTE *)(a11 + v32) = 1;
        }
      }

      ++a3;
      *a12 = v32 + 1;
      if (++v15 == v16) {
        return a4;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100019CA4(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 1072);
  BOOL v4 = __OFSUB__(a2, v3);
  int v5 = a2 - v3;
  if (v5 < 0 == v4)
  {
    uint64_t v8 = *(void *)(a1 + 792) + 12LL * v5;
    goto LABEL_9;
  }

  if (!*(_DWORD *)(a1 + 1176))
  {
    uint64_t v6 = 3 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3);
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 144);
    goto LABEL_8;
  }

  uint64_t v6 = 3 * (*(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3);
LABEL_5:
  uint64_t v7 = *(void *)(a1 + 136);
LABEL_8:
  uint64_t v8 = v7 + 4 * v6;
LABEL_9:
  uint64_t v9 = *(void *)(a1 + 1560);
  int v10 = *(_DWORD *)v9 - *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= *(_DWORD *)v9) {
    int v10 = *(_DWORD *)v8 - *(_DWORD *)v9;
  }
  unsigned int v11 = ((*(_DWORD *)v8 ^ *(_DWORD *)v9 ^ v10) & 0x11111111)
      - (((*(_DWORD *)v8 ^ *(_DWORD *)v9 ^ v10) & 0x11111111u) >> 4);
  signed int v12 = (16843009 * (((((v11 + v10) ^ v11) >> 4) & 0xF0F0F0F) + (((v11 + v10) ^ v11) & 0xF0F0F0F))) >> 24;
  if (v12 <= *(_DWORD *)(a1 + 1056))
  {
    int8x8_t v14 = *(int8x8_t *)(v8 + 4);
    int8x8_t v15 = *(int8x8_t *)(v9 + 4);
    int32x2_t v16 = (int32x2_t)vand_s8( veor_s8(veor_s8(v15, v14), (int8x8_t)vabd_u32((uint32x2_t)v14, (uint32x2_t)v15)),  (int8x8_t)0x1111111111111111LL);
    int8x8_t v17 = (int8x8_t)vsub_s32(v16, (int32x2_t)vshr_n_u32((uint32x2_t)v16, 4uLL));
    int8x8_t v18 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v17, (uint32x2_t)v14, (uint32x2_t)v15), v17);
    uint32x2_t v19 = vshr_n_u32( (uint32x2_t)vmul_s32( vadd_s32( (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v18, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v18, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  (int32x2_t)0x101010101010101LL),  0x18uLL);
    __int32 v13 = v19.i32[1];
    v12 += v19.i32[0];
  }

  else
  {
    __int32 v13 = *(_DWORD *)(a1 + 1060);
  }

  return (__int16)((*(_DWORD *)(a1 + 1052) * (v13 + v12) + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_100019E04(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v36 = *(void *)(a1 + 792) + 12LL * v4;
    int v37 = 1;
    goto LABEL_29;
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v6 = *v5;
    int v37 = v5[1] - *v5;
    if ((v37 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_25:
    uint64_t v39 = 144LL;
    if (v37 >= 1)
    {
      uint64_t v36 = *(void *)(a1 + v39) + 12LL * v6;
LABEL_29:
      uint8x16_t v40 = *(int **)(a1 + 1560);
      unsigned int v41 = *v40;
      int8x8_t v42 = *(int8x8_t *)(v40 + 1);
      int v43 = v37 + 1;
      int16x8_t v44 = (int8x8_t *)(v36 + 4);
      int v14 = 0x40000000;
      do
      {
        unsigned __int32 v52 = v44[-1].u32[1];
        int v53 = v41 - v52;
        if (v52 >= v41) {
          int v53 = v52 - v41;
        }
        unsigned int v54 = ((v52 ^ v41 ^ v53) & 0x11111111) - (((v52 ^ v41 ^ v53) & 0x11111111) >> 4);
        signed int v50 = (16843009 * (((((v54 + v53) ^ v54) >> 4) & 0xF0F0F0F) + (((v54 + v53) ^ v54) & 0xF0F0F0F))) >> 24;
        if (v50 <= *(_DWORD *)(a1 + 1056))
        {
          int32x2_t v45 = (int32x2_t)vand_s8( veor_s8(veor_s8(*v44, v42), (int8x8_t)vabd_u32((uint32x2_t)*v44, (uint32x2_t)v42)),  (int8x8_t)0x1111111111111111LL);
          int8x8_t v46 = (int8x8_t)vsub_s32(v45, (int32x2_t)vshr_n_u32((uint32x2_t)v45, 4uLL));
          int8x8_t v47 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v46, (uint32x2_t)*v44, (uint32x2_t)v42), v46);
          uint32x2_t v48 = vshr_n_u32( (uint32x2_t)vmul_s32( vadd_s32( (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v47, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v47, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  (int32x2_t)0x101010101010101LL),  0x18uLL);
          __int32 v49 = v48.i32[1];
          v50 += v48.i32[0];
        }

        else
        {
          __int32 v49 = *(_DWORD *)(a1 + 1060);
        }

        int v51 = v49 + v50;
        if (v51 < v14) {
          int v14 = v51;
        }
        --v43;
        int16x8_t v44 = (int8x8_t *)((char *)v44 + 12);
      }

      while (v43 > 1);
      return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
    }

LABEL_38:
    int v14 = 0x40000000;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  int32x4_t v38 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v6 = *v38;
  int v37 = v38[1] - v6;
  if ((v37 & 1) != 0) {
    goto LABEL_25;
  }
LABEL_5:
  if (v37 < 2) {
    goto LABEL_38;
  }
  uint64_t v7 = *(int **)(a1 + 1560);
  unsigned int v8 = *v7;
  int8x8_t v9 = *(int8x8_t *)(v7 + 1);
  uint64_t v10 = 144LL;
  uint64_t v11 = *(void *)(a1 + v10) + 12LL * v6;
  signed int v12 = *(_DWORD *)(a1 + 1056);
  int v13 = (v37 >> 1) + 1;
  int v14 = 0x40000000;
  do
  {
    unsigned int v23 = v8 - *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= v8) {
      unsigned int v23 = *(_DWORD *)v11 - v8;
    }
    unsigned int v24 = ((*(_DWORD *)v11 ^ v8 ^ v23) & 0x11111111) - (((*(_DWORD *)v11 ^ v8 ^ v23) & 0x11111111) >> 4);
    signed int v25 = (16843009 * (((((v24 + v23) ^ v24) >> 4) & 0xF0F0F0F) + (((v24 + v23) ^ v24) & 0xF0F0F0F))) >> 24;
    if (v25 <= v12)
    {
      int8x8_t v27 = *(int8x8_t *)(v11 + 4);
      int32x2_t v28 = (int32x2_t)vand_s8( veor_s8(veor_s8(v27, v9), (int8x8_t)vabd_u32((uint32x2_t)v27, (uint32x2_t)v9)),  (int8x8_t)0x1111111111111111LL);
      int8x8_t v29 = (int8x8_t)vsub_s32(v28, (int32x2_t)vshr_n_u32((uint32x2_t)v28, 4uLL));
      int8x8_t v30 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v29, (uint32x2_t)v27, (uint32x2_t)v9), v29);
      uint32x2_t v31 = vshr_n_u32( (uint32x2_t)vmul_s32( vadd_s32( (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v30, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v30, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  (int32x2_t)0x101010101010101LL),  0x18uLL);
      __int32 v26 = v31.i32[1];
      v25 += v31.i32[0];
    }

    else
    {
      __int32 v26 = *(_DWORD *)(a1 + 1060);
    }

    int v32 = v26 + v25;
    if (v32 < v14) {
      int v14 = v32;
    }
    unsigned int v33 = *(_DWORD *)(v11 + 12);
    unsigned int v34 = v8 - v33;
    if (v33 >= v8) {
      unsigned int v34 = v33 - v8;
    }
    unsigned int v35 = ((v33 ^ v8 ^ v34) & 0x11111111) - (((v33 ^ v8 ^ v34) & 0x11111111) >> 4);
    signed int v21 = (16843009 * (((((v35 + v34) ^ v35) >> 4) & 0xF0F0F0F) + (((v35 + v34) ^ v35) & 0xF0F0F0F))) >> 24;
    if (v21 <= v12)
    {
      int8x8_t v15 = *(int8x8_t *)(v11 + 16);
      int32x2_t v16 = (int32x2_t)vand_s8( veor_s8(veor_s8(v15, v9), (int8x8_t)vabd_u32((uint32x2_t)v15, (uint32x2_t)v9)),  (int8x8_t)0x1111111111111111LL);
      int8x8_t v17 = (int8x8_t)vsub_s32(v16, (int32x2_t)vshr_n_u32((uint32x2_t)v16, 4uLL));
      int8x8_t v18 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v17, (uint32x2_t)v15, (uint32x2_t)v9), v17);
      uint32x2_t v19 = vshr_n_u32( (uint32x2_t)vmul_s32( vadd_s32( (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v18, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v18, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  (int32x2_t)0x101010101010101LL),  0x18uLL);
      __int32 v20 = v19.i32[1];
      v21 += v19.i32[0];
    }

    else
    {
      __int32 v20 = *(_DWORD *)(a1 + 1060);
    }

    int v22 = v20 + v21;
    if (v22 < v14) {
      int v14 = v22;
    }
    --v13;
    v11 += 24LL;
  }

  while (v13 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v14 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

        uint64_t v11 = v25 < 0;
        if (v25 < 0) {
          uint32x2_t v19 = &v18[1096 * (v18 == __dst)];
        }
      }
    }

    while (sub_1000BCD38(v12, (char *)&v43 + 4))
    {
      if (HIDWORD(v43) == v13[8] + 1) {
        break;
      }
      if (!sub_1000BCD38(v12, &v43)) {
        break;
      }
      int v32 = BYTE4(v43);
      unsigned int v33 = *(void *)(*((void *)v13 + 7) + (((unint64_t)HIDWORD(v43) >> 5) & 0x7FFFFF8));
      unsigned int v41 = 0;
      *(void *)(v33 + 8LL * v32) = v42;
      int8x8_t v29 = *(void *)(*((void *)v13 + 5) + (((unint64_t)HIDWORD(v43) >> 5) & 0x7FFFFF8));
      int8x8_t v30 = BYTE4(v43);
      uint32x2_t v31 = sub_1000369C4(v12);
      *(void *)(v29 + 8 * v30) = v31;
      if (!v31) {
        goto LABEL_47;
      }
    }

    unsigned int v34 = sub_1000C1074(8LL * (int)v13[24]);
    *((void *)v13 + 11) = v34;
    if (!v34) {
      goto LABEL_47;
    }
    if (*v16 >= 1)
    {
      unsigned int v35 = 0LL;
      uint64_t v36 = 0LL;
      do
      {
        unsigned int v41 = 0;
        unsigned int v34 = *((void *)v13 + 11);
        if (*(void *)(v34 + v35))
        {
          if (v41 != 256) {
            break;
          }
        }

        ++v36;
        v35 += 8LL;
      }

      while (v36 < *v16);
    }

    if (*v17 >= 1)
    {
      int v37 = 0LL;
      int32x4_t v38 = 0LL;
      uint64_t v39 = *((void *)v13 + 13);
      do
      {
        unsigned int v41 = 0;
        uint64_t v39 = *((void *)v13 + 13);
        if (*(void *)(v39 + v37))
        {
          if (v41 != 256) {
            break;
          }
        }

        ++v38;
        v37 += 8LL;
      }

      while (v38 < *v17);
    }

  if (!*(void *)(v32 + 4128))
  {
    unsigned int v33 = *(_DWORD *)(v32 + 4008);
    goto LABEL_41;
  }

  unsigned int v34 = sub_10009D980( *(void *)(v31 + 536),  v16,  v27,  *(_DWORD *)(v32 + 4008),  v22,  v26,  (uint64_t)v28,  v29,  v30,  0LL,  0);
LABEL_42:
  unsigned int v41 = v34;
  sub_100023688((uint64_t)v27, *(void *)(v16 + 96), (int *)&v41, a10, a11, a12, a13, a14, 0LL);
  if (qword_1000FDCC0) {
    unsigned int v35 = *(void *)(qword_1000FDCC0 + 4008) << 7;
  }
  else {
    unsigned int v35 = 0LL;
  }
  sub_1000CB038(v27, v35);
  return v41;
}

    int8x8_t v17 = v29;
    goto LABEL_14;
  }

  int32x2_t v28 = sub_1000C0BA8(0LL);
  int8x8_t v27 = sub_1000CAEC8(0LL);
  unsigned int v24 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  signed int v25 = sub_1000CF8F8(0LL, 0LL, &v26);
  nullsub_1(v25);
LABEL_8:
  int8x8_t v29 = 1;
LABEL_9:
  sub_1000504B4(v29);
  sub_1000CF8F8(v25, v26, 0LL);
  sub_1000BEAB0(v24);
  sub_1000CAEC8(v27);
  sub_1000C0BA8(v28);
  return v29;
}

        *a2 = 0;
        uint64_t v10 = 0;
        goto LABEL_52;
      }

      sub_100039834(*(void *)(a1 + 5512), v8, (uint64_t)v34);
      uint64_t v10 = 1;
      switch(sub_10003982C(*(void *)(a1 + 5512)))
      {
        case 0u:
        case 2u:
        case 3u:
          goto LABEL_33;
        case 1u:
          sub_1000398CC(*(void *)(a1 + 5512));
          *a2 = 2;
          if (*(_DWORD *)(a1 + 640)
            && qword_1000FDCC0
            && *(_DWORD *)(qword_1000FDCC0 + 2088)
            && (int)sub_1000478D4((_DWORD *)a1) >= *(_DWORD *)(a1 + 644))
          {
            *a2 = 0;
          }

          if (v38 >= 1
            && qword_1000FDCC0
            && *(_DWORD *)(qword_1000FDCC0 + 2096)
            && *(void *)(qword_1000FDCC0 + 2104) <= v37
            && sub_1000B27FC(*(unsigned int **)(a1 + 440), v38, 0) == 2
            && sub_1000398B4(*(void *)(a1 + 5512)) == 2)
          {
            goto LABEL_33;
          }

          break;
        case 6u:
          goto LABEL_40;
        default:
          break;
      }
    }

    else
    {
      if (*(_DWORD *)(a1 + 756) == 6 || !sub_1000398CC(*(void *)(a1 + 5512)))
      {
        *a2 = 3;
        if (!*(_DWORD *)(a1 + 348))
        {
          *a2 = 1;
          uint64_t v10 = 0;
          goto LABEL_52;
        }

        goto LABEL_38;
      }

      sub_100039834(*(void *)(a1 + 5512), 0LL, (uint64_t)v34);
      uint64_t v10 = 1;
      switch(sub_10003982C(*(void *)(a1 + 5512)))
      {
        case 0u:
        case 2u:
        case 3u:
LABEL_33:
          *a2 = 0;
          break;
        case 1u:
          if (sub_1000398CC(*(void *)(a1 + 5512)))
          {
            *a2 = 2;
          }

          else if (*(_DWORD *)(a1 + 348))
          {
            *a2 = 3;
          }

          else
          {
            *a2 = 1;
            uint64_t v10 = 1;
          }

          break;
        case 6u:
LABEL_40:
          *a2 = 2;
          sub_100039820(*(void *)(a1 + 5512), 0LL);
          *(void *)(a1 + 5512) = *(void *)(a1 + 128);
          *(_DWORD *)(a1 + 6476) = 0;
          sub_1000597C0(*(void *)a1);
          break;
        default:
          break;
      }
    }

    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_48;
  }

  uint32x2_t result = sub_100015BAC(*(void *)(a1 + 384), 0);
  unsigned int v24 = (unsigned __int16 *)result;
  signed int v25 = *a2;
  *(_WORD *)a3 = v25;
  if (*(unsigned __int16 *)(a1 + 720) == (_DWORD)v25)
  {
    __int32 v26 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v25));
    int8x8_t v27 = (__int16)a2[1];
    if (v27 >= v26) {
      int32x2_t v28 = *(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v25);
    }
    else {
      int32x2_t v28 = a2[1];
    }
    if (v27 >= v26) {
      int8x8_t v29 = (unsigned __int16 *)(a1 + 718);
    }
    else {
      int8x8_t v29 = a2 + 3;
    }
    int8x8_t v30 = *v29;
    if (*(unsigned __int16 *)(a1 + 722) < v25)
    {
      *(_WORD *)(a1 + 720) = v25 - 1;
      if (v9 >= v28) {
        goto LABEL_45;
      }
LABEL_36:
      __int32 v20 = 0;
      goto LABEL_38;
    }

    uint32x2_t result = sub_10005652C(a1, a4);
    if (v9 < v28) {
      goto LABEL_36;
    }
  }

  else
  {
    int32x2_t v28 = a2[1];
    int8x8_t v30 = a2[3];
    if (v9 < v28) {
      goto LABEL_36;
    }
  }

  if (a4 == 65531)
  {
    LOWORD(v23) = *(_WORD *)(result + 114);
  }

  else if (a4 == 65532 || a4 == 65533)
  {
    LOWORD(v23) = *(_WORD *)(result + 112);
  }

  else
  {
    LOWORD(v23) = 0;
  }

      int v78 = (v51 + (1 << (14 - v47))) >> (15 - v47);
      if ((int)v78 < 1)
      {
        v36->i16[0] = 0;
        uint64_t v36 = (int16x4_t *)((char *)v36 + 2);
        unsigned int v34 = v38;
        if (v38 == v37) {
          goto LABEL_51;
        }
      }

      else
      {
        if (v78 > 0x8000)
        {
          float32x4x2_t v79 = 0;
          do
          {
            --v79;
            float32x4x2_t v80 = v78 >> 1;
            unsigned __int128 v81 = v78 > 0x10001;
            v78 >>= 1;
          }

          while (v81);
          goto LABEL_46;
        }

        float32x4x2_t v79 = v78 >> 14;
        if (!(v78 >> 14))
        {
          float32x4x2_t v80 = (v51 + (1 << (14 - v47))) >> (15 - v47);
          do
          {
            ++v79;
            v80 *= 2;
          }

          while (v80 < 0x4000);
LABEL_46:
          int32x4_t v82 = v80 - 0x4000;
          if (!a1[9]) {
            goto LABEL_49;
          }
          goto LABEL_47;
        }

        float32x4x2_t v79 = 0;
        int32x4_t v82 = v78 - 0x4000;
        if (!a1[9])
        {
LABEL_49:
          int32x4_t v84 = (v82 * v82 + 0x2000) >> 14;
          int32x4_t v83 = 32739 * v82
              - 16055 * v84
              + 9361 * ((int)(v84 * v82 + 0x2000) >> 14)
          goto LABEL_50;
        }

      if (v26 >= 1)
      {
        uint32x2_t v31 = v26;
        if ((int)v12 > 0)
        {
          int v32 = 0LL;
          while (2)
          {
            unsigned int v33 = v116;
            if (v9) {
              unsigned int v33 = *(__int16 *)(*(void *)(v114 + 8) + 2 * v32);
            }
            if (v115 != -1) {
              v33 *= *(unsigned __int16 *)(sub_100005528(a1, v24, v32) + 2LL * v115);
            }
            if (!v33) {
              goto LABEL_42;
            }
            sub_100004868(a1, v24, v32, (unint64_t *)&v117);
            unsigned int v34 = (unint64_t)v117;
            unsigned int v35 = v13 >= (float64x2_t *)&v117->i8[v12] || (unint64_t)v117 >= v112;
            uint64_t v36 = v111;
            if (!v35) {
              uint64_t v36 = 1;
            }
            if ((v36 & 1) != 0)
            {
LABEL_55:
              int v37 = 0LL;
              goto LABEL_56;
            }

            if (v12 >= 0x10)
            {
              uint32x4_t v67 = v12 & 0xFFFFFFF0;
              uint32x4_t v68 = v13;
              unsigned int v69 = (float64x2_t *)a2;
              int32x4_t v70 = v117;
              do
              {
                int32x2_t v71 = *v70++;
                int32x2_t v72 = vextq_s8(v71, v71, 8uLL).u64[0];
                v73.i32[0] = BYTE6(v72);
                v73.i32[1] = HIBYTE(v72);
                int v74 = vand_s8(v73, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v74.u32[0];
                v75.i64[1] = v74.u32[1];
                uint32x2_t v76 = vcvtq_f64_u64(v75);
                v77.i32[0] = BYTE4(v72);
                v77.i32[1] = BYTE5(v72);
                int v78 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v78.u32[0];
                v75.i64[1] = v78.u32[1];
                float32x4x2_t v79 = vcvtq_f64_u64(v75);
                v80.i32[0] = BYTE2(v72);
                v80.i32[1] = BYTE3(v72);
                unsigned __int128 v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v81.u32[0];
                v75.i64[1] = v81.u32[1];
                int32x4_t v82 = vcvtq_f64_u64(v75);
                v83.i32[0] = v72;
                v83.i32[1] = BYTE1(v72);
                int32x4_t v84 = vand_s8(v83, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v84.u32[0];
                v75.i64[1] = v84.u32[1];
                int32x4_t v85 = vcvtq_f64_u64(v75);
                v83.i32[0] = v71.u8[6];
                v83.i32[1] = v71.u8[7];
                int32x4_t v86 = vand_s8(v83, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v86.u32[0];
                v75.i64[1] = v86.u32[1];
                uint32x4_t v87 = vcvtq_f64_u64(v75);
                v88.i32[0] = v71.u8[4];
                v88.i32[1] = v71.u8[5];
                int32x2_t v89 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v89.u32[0];
                v75.i64[1] = v89.u32[1];
                int32x2_t v90 = vcvtq_f64_u64(v75);
                v91.i32[0] = v71.u8[2];
                v91.i32[1] = v71.u8[3];
                int32x2_t v92 = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v92.u32[0];
                v75.i64[1] = v92.u32[1];
                int32x2_t v93 = vcvtq_f64_u64(v75);
                v94.i32[0] = v71.u8[0];
                v94.i32[1] = v71.u8[1];
                int32x4_t v95 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
                v75.i64[0] = v95.u32[0];
                v75.i64[1] = v95.u32[1];
                int32x2_t v96 = vsubq_f64(v85, v69[4]);
                uint32x2_t v97 = vsubq_f64(v82, v69[5]);
                __int32 v98 = vsubq_f64(v79, v69[6]);
                int v99 = vsubq_f64(v76, v69[7]);
                int v100 = vsubq_f64(vcvtq_f64_u64(v75), *v69);
                __int32 v101 = vsubq_f64(v93, v69[1]);
                unsigned int v102 = vsubq_f64(v87, v69[3]);
                v68[2] = vsubq_f64(v90, v69[2]);
                v68[3] = v102;
                *uint32x4_t v68 = v100;
                v68[1] = v101;
                v68[6] = v98;
                v68[7] = v99;
                v68[4] = v96;
                v68[5] = v97;
                v69 += 8;
                v68 += 8;
                v67 -= 16LL;
              }

              while (v67);
              if ((v12 & 0xFFFFFFF0) != v12)
              {
                int v37 = v12 & 0xFFFFFFF0;
                int32x2_t v45 = v37;
                if ((v12 & 8) == 0) {
                  goto LABEL_56;
                }
                goto LABEL_61;
              }
            }

            else
            {
              int32x2_t v45 = 0LL;
LABEL_61:
              int8x8_t v46 = (uint64_t *)(v34 + v45);
              int8x8_t v47 = (float64x2_t *)(a2 + 8 * v45);
              uint32x2_t v48 = (float64x2_t *)((char *)v13 + 8 * v45);
              __int32 v49 = v45 - (v12 & 0xFFFFFFF8);
              do
              {
                signed int v50 = *v46++;
                v51.i32[0] = BYTE6(v50);
                v51.i32[1] = HIBYTE(v50);
                unsigned __int32 v52 = vand_s8(v51, (int8x8_t)0xFF000000FFLL);
                v53.i64[0] = v52.u32[0];
                v53.i64[1] = v52.u32[1];
                unsigned int v54 = vcvtq_f64_u64(v53);
                v55.i32[0] = BYTE4(v50);
                v55.i32[1] = BYTE5(v50);
                int v56 = vand_s8(v55, (int8x8_t)0xFF000000FFLL);
                v53.i64[0] = v56.u32[0];
                v53.i64[1] = v56.u32[1];
                uint32x4_t v57 = vcvtq_f64_u64(v53);
                v58.i32[0] = BYTE2(v50);
                v58.i32[1] = BYTE3(v50);
                int8x16x2_t v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
                v53.i64[0] = v59.u32[0];
                v53.i64[1] = v59.u32[1];
                int32x4_t v60 = vcvtq_f64_u64(v53);
                v61.i32[0] = v50;
                v61.i32[1] = BYTE1(v50);
                uint32x4_t v62 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
                v53.i64[0] = v62.u32[0];
                v53.i64[1] = v62.u32[1];
                uint32x4_t v64 = v47[2];
                uint32x4_t v63 = v47[3];
                uint32x4_t v66 = *v47;
                int32x4_t v65 = v47[1];
                v47 += 4;
                v48[2] = vsubq_f64(v57, v64);
                v48[3] = vsubq_f64(v54, v63);
                *uint32x2_t v48 = vsubq_f64(vcvtq_f64_u64(v53), v66);
                v48[1] = vsubq_f64(v60, v65);
                v48 += 4;
                v49 += 8LL;
              }

              while (v49);
              int v37 = v12 & 0xFFFFFFF8;
              if (v37 != v12)
              {
LABEL_56:
                int32x4_t v38 = (unsigned __int8 *)(v34 + v37);
                uint64_t v39 = (double *)(a2 + 8 * v37);
                uint8x16_t v40 = &v13->f64[v37];
                unsigned int v41 = v12 - v37;
                do
                {
                  int8x8_t v42 = *v38++;
                  int v43 = (double)v42;
                  int16x8_t v44 = *v39++;
                  *v40++ = v43 - v44;
                  --v41;
                }

                while (v41);
              }
            }

            sub_1000BF278((uint64_t)v13, (uint64_t)v13, v14);
            sub_1000BFAB8((uint64_t)a6, v14, (uint64_t)a6, (double)v33);
LABEL_42:
            if (++v32 == v31) {
              goto LABEL_9;
            }
            continue;
          }
        }

        for (uint64_t i = 0LL; i != v31; ++i)
        {
          int32x2_t v106 = v116;
          if (v9) {
            int32x2_t v106 = *(__int16 *)(*(void *)(v114 + 8) + 2 * i);
          }
          if (v115 != -1) {
            v106 *= *(unsigned __int16 *)(sub_100005528(a1, v24, i) + 2LL * v115);
          }
          if (v106)
          {
            sub_100004868(a1, v24, i, (unint64_t *)&v117);
            sub_1000BF278((uint64_t)v13, (uint64_t)v13, v14);
            sub_1000BFAB8((uint64_t)a6, v14, (uint64_t)a6, (double)v106);
          }
        }
      }

  if (v25)
  {
    *((_BYTE *)a2 + 20) = *v12;
    a2[1] = v12 + 1;
    *((_DWORD *)a2 + 4) = v25 - 1;
  }

  else
  {
    uint32x2_t v48 = (*a2)++;
    __int32 v49 = *v48;
    if (*(_BYTE *)(v5 + v49) == 2)
    {
      signed int v50 = (unsigned __int16 *)(*(void *)(result + 72) + 2 * v49);
      int v51 = *v50;
      LODWORD(v50) = v50[1] + ~(_DWORD)v51;
      unsigned __int32 v52 = (_BYTE *)(*(void *)(result + 56) + v51);
      *((_BYTE *)a2 + 20) = *v52;
      a2[1] = v52 + 1;
      *((_DWORD *)a2 + 4) = (_DWORD)v50;
    }

    else
    {
      *((_BYTE *)a2 + 20) = v49;
      a2[1] = v12;
      *((_DWORD *)a2 + 4) = 0;
    }
  }

  return result;
}

  int v5 = 2;
LABEL_39:
  unsigned int v41 = *(unsigned __int8 *)(a2 + 20);
  do
  {
    if (((v41 >> v5) & 1) != 0)
    {
      int8x8_t v42 = *(unsigned __int8 **)a2;
      uint32x2_t result = sub_10008B2E4(v4, v5, *(unsigned __int8 **)a2);
      *(void *)a2 = &v42[(int)result];
    }

    ++v5;
  }

  while (v5 != 7);
  return result;
}

    uint32x4_t v57 = v66;
    goto LABEL_39;
  }

  if (!*(_DWORD *)(a1 + 20))
  {
    int v53 = sub_1000C88E4((unint64_t)v15);
    if (__dst) {
      j__memmove(__dst, v15, (int)v53 + 1);
    }
    goto LABEL_38;
  }

  unsigned int v54 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8 * v65) + v23);
  if (v54 == 16)
  {
    int v55 = *(void *)(*(void *)(a1 + 96) + 8LL * ((v43 + v38) >> 8));
    int v56 = (v43 + v38);
    *int8x8_t v15 = *(_BYTE *)(v55 + v56);
    uint32x4_t v57 = v66;
    if (*(_BYTE *)(v55 + v56))
    {
      int8x8x2_t v58 = v37 + v24 + v43 + 2;
      int8x16x2_t v59 = v15 + 1;
      do
      {
        int32x4_t v60 = *(void *)(*(void *)(a1 + 96) + 8LL * (v58 >> 8));
        *v59++ = *(_BYTE *)(v60 + v58);
        LODWORD(v60) = *(unsigned __int8 *)(v60 + v58++);
      }

      while ((_DWORD)v60);
    }

    uint32x4_t v61 = sub_1000C88E4((unint64_t)v15);
    int v53 = v61;
    if (__dst) {
      j__memmove(__dst, v15, (int)v61 + 1);
    }
  }

  else
  {
    uint32x4_t v63 = *(_DWORD *)(a1 + 304);
    uint32x4_t v57 = v66;
    if (__dst)
    {
      sub_1000867DC(__dst, v15, v64, v54, v63, a1 + 312);
      int v53 = sub_1000C88E4((unint64_t)__dst);
    }

    else
    {
      int v53 = sub_100086FB0(v15, v63, a1 + 312);
    }
  }

  int v51 = *(_DWORD *)(a1 + 48) - 1;
  *(_DWORD *)(a1 + 48) = v51;
  if (v44 && v14 < v51)
  {
    unsigned __int32 v52 = v14;
    do
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * (v52 >> 8)) + v52) = *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * ((v52 + 1) >> 8)) + (v52 + 1));
      ++v52;
    }

    while (v52 < *(_DWORD *)(a1 + 48));
  }

  int v53 = *(_DWORD *)(a1 + 112) - v43;
  *(_DWORD *)(a1 + 112) = v53;
  unsigned int v54 = v53 - v21;
  if (v54 >= 1)
  {
    for (uint64_t i = 0; i < v54; ++i)
      *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL * ((v21 + i) >> 8)) + (v21 + i)) = *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL * ((v43 + v21 + i) >> 8)) + (v43 + v21 + i));
  }

  unsigned __int16 *v38 = 0;
  if ((_DWORD)v22 == -1)
  {
    int32x4_t v65 = 0;
  }

  else
  {
    unsigned int v102 = v39;
    int v56 = v22 >> 8;
    uint32x4_t v57 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 120) + 8 * (v22 >> 8)) + v22);
    int8x8x2_t v58 = v22 + 1;
    uint32x2_t v103 = v22 + 1;
    __int32 v98 = v43;
    for (uint64_t j = 0; v57; --v57)
    {
    }

    *a3 = j;
    int32x4_t v60 = *(void *)(a1 + 120);
    if (*(_BYTE *)(*(void *)(v60 + 8 * v56) + v22))
    {
      uint32x4_t v61 = 0;
      uint64_t v39 = v102;
      int v43 = v98;
      do
      {
        uint32x4_t v62 = *(unsigned __int8 *)(*(void *)(v60 + 8LL * (v58 >> 8)) + v58);
        uint32x4_t v63 = v58 + 1;
        if (*(_BYTE *)(*(void *)(v60 + 8LL * (v58 >> 8)) + v58))
        {
          do
          {
            else {
              uint32x4_t v64 = 2;
            }
            v63 += v64;
            --v62;
          }

          while (v62);
        }

        ++v61;
        int8x8x2_t v58 = v63;
      }

      while (v61 != *(unsigned __int8 *)(*(void *)(v60 + 8 * v56) + v22));
    }

    else
    {
      uint32x4_t v63 = v22 + 1;
      uint64_t v39 = v102;
      int v43 = v98;
    }

    int32x4_t v65 = v63 - v22;
    uint32x4_t v66 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v66 - (v63 - v22);
    if ((int)(v66 - v63) >= 1)
    {
      uint32x4_t v67 = v22;
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * (v67 >> 8)) + v67) = *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * (v63 >> 8)) + v63);
        ++v67;
        ++v63;
      }

      while (v66 != v63);
    }
  }

  uint32x4_t v68 = *(_DWORD *)(a1 + 48);
  if (*(__int16 *)(a1 + 204) != -1 && v14 < v68)
  {
    int32x4_t v70 = v14;
    do
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * (v70 >> 8)) + v70) = *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * ((v70 + 1) >> 8)) + (v70 + 1));
      uint32x4_t v68 = *(_DWORD *)(a1 + 48);
      ++v70;
    }

    while (v70 < v68);
  }

  if (v14 < v68)
  {
    int32x2_t v71 = v14;
    do
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * (v71 >> 8)) + v71) = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * ((v71 + 1) >> 8)) + (v71 + 1));
      uint32x4_t v68 = *(_DWORD *)(a1 + 48);
      ++v71;
    }

    while (v71 < v68);
  }

  if (v14 < v68)
  {
    int32x2_t v72 = v14;
    do
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * (v72 >> 8)) + v72) = *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * ((v72 + 1) >> 8)) + (v72 + 1));
      uint32x4_t v68 = *(_DWORD *)(a1 + 48);
      ++v72;
    }

    while (v72 < v68);
  }

  if (v14 < v68)
  {
    int v73 = v14;
    do
    {
      int v74 = *(void *)(a1 + 32);
      unsigned __int32 v75 = v73 >> 8;
      uint32x2_t v76 = v73;
      int v77 = v73 + 1;
      int v78 = *(void *)(v74 + 8LL * ((v73 + 1) >> 8)) + 12LL * (v73 + 1);
      float32x4x2_t v79 = *(void *)(v74 + 8LL * v75) + 12LL * v76;
      float32x4x2_t v80 = *(void *)v78;
      *(_DWORD *)(v79 + 8) = *(_DWORD *)(v78 + 8);
      *(void *)float32x4x2_t v79 = v80;
      uint32x4_t v68 = *(_DWORD *)(a1 + 48);
      int v73 = v77;
    }

    while (v77 < v68);
  }

  if (v68 >= 1)
  {
    for (uint64_t k = 0; k < v68; ++k)
    {
      int32x4_t v82 = k >> 8;
      int32x4_t v83 = *(void *)(*(void *)(a1 + 32) + 8LL * v82);
      int32x4_t v84 = (int *)(v83 + 12LL * k);
      int32x4_t v85 = *v84;
      if (*v84 <= (int)v21 || v85 == -1)
      {
        uint32x4_t v87 = v83 + 12LL * k;
        int32x2_t v90 = *(_DWORD *)(v87 + 4);
        uint32x4_t v88 = (_DWORD *)(v87 + 4);
        int32x2_t v89 = v90;
        if (v90 <= (int)v22 || v89 == -1)
        {
LABEL_93:
          int32x2_t v92 = *(void *)(*(void *)(a1 + 56) + 8 * v82);
          int32x2_t v93 = *(unsigned __int16 *)(v92 + 2LL * k);
          if (v14 < v93) {
            goto LABEL_100;
          }
          goto LABEL_82;
        }
      }

      else
      {
        *int32x4_t v84 = v85 - v43;
        unsigned int v94 = v83 + 12LL * k;
        int32x4_t v95 = *(_DWORD *)(v94 + 4);
        uint32x4_t v88 = (_DWORD *)(v94 + 4);
        int32x2_t v89 = v95;
      }

      uint64_t *v88 = v89 - v65;
      int32x2_t v92 = *(void *)(*(void *)(a1 + 56) + 8 * v82);
      int32x2_t v93 = *(unsigned __int16 *)(v92 + 2LL * k);
      if (v14 < v93) {
LABEL_100:
      }
        *(_WORD *)(v92 + 2LL * k) = v93 - 1;
LABEL_82:
      uint32x4_t v68 = *(_DWORD *)(a1 + 48);
    }
  }

  if (*(_DWORD *)(a1 + 52) == v9)
  {
    else {
      uint32x2_t v97 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * ((v68 - 1) >> 8))
    }
    *(_DWORD *)(a1 + 52) = v97;
  }

  return 1LL;
}

      if (v46 <= v24)
      {
LABEL_40:
        int8x8_t v47 = *(_DWORD *)(a1 + 72);
        if (v47 >= 1)
        {
          for (uint64_t i = 0; i < v47; ++i)
          {
            __int32 v49 = *(void *)(*(void *)(a1 + 56) + 8LL * (i >> 8));
            signed int v50 = *(unsigned __int16 *)(v49 + 2LL * i);
            if (v24 <= v50)
            {
              *(_WORD *)(v49 + 2LL * i) = v50 + 1;
              int8x8_t v47 = *(_DWORD *)(a1 + 72);
            }
          }
        }

        int32x4_t v193 = v11;
        BOOL v183 = 0;
        uint16x4_t v186 = 0;
        uint64_t v192 = 0;
        v189 = 0LL;
        ++*(_DWORD *)(a1 + 48);
        int v51 = *v45;
        unsigned __int32 v52 = 1;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + ((v51 >> 5) & 0x7FFFFF8)) + v51) = 1;
        int v53 = v51 + 1;
        ++v10;
LABEL_46:
        unsigned int v54 = sub_10009397C((uint64_t)v201, 1LL);
        int v55 = v54;
        uint32x4_t v63 = (char *)sub_1000CAF58(v54, v56, v57, v58, v59, v60, v61, v62);
        sub_1000938B8((unint64_t)v201, v63, 1);
        if (v54 >= 1)
        {
          uint32x4_t v64 = v63;
          do
          {
            int32x4_t v65 = *v64++;
            *(_BYTE *)(*(void *)(*v12 + 8LL * (v53 >> 8)) + v53) = v65;
            ++v53;
            --v54;
          }

          while (v54);
        }

        sub_1000CB038(v63, v55);
        *(_DWORD *)(a1 + 136) += v10;
        if (v192)
        {
          sub_1000CB038(__src, 2LL * v186);
          sub_1000CB038(v189, v183);
        }

        if (v52 <= *(_DWORD *)(a1 + 160))
        {
          uint32x4_t v66 = v52 + a4;
          if (v52 + a4 <= *(_DWORD *)(a1 + 164))
          {
LABEL_55:
            uint32x4_t v67 = sub_100099EE0((unint64_t)v201[0]);
            uint64_t v11 = v193;
            if (v67 > *v195) {
              goto LABEL_56;
            }
            goto LABEL_60;
          }
        }

        else
        {
          *(_DWORD *)(a1 + 160) = v52;
          uint32x4_t v66 = v52 + a4;
          if (v52 + a4 <= *(_DWORD *)(a1 + 164)) {
            goto LABEL_55;
          }
        }

        *(_DWORD *)(a1 + 164) = v66;
        uint32x4_t v67 = sub_100099EE0((unint64_t)v201[0]);
        uint64_t v11 = v193;
        if (v67 > *v195)
        {
LABEL_56:
          *int32x4_t v195 = v67;
          if (v67 <= *(_DWORD *)(a1 + 152)) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }

    sub_1000C0EF8(v5);
    return 0LL;
  }

  signed int v12 = *(FILE **)(a1 + 32);
  if (v12)
  {
    int v13 = j__ftell(v12);
LABEL_36:
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v5 + 32);
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v5 + 12);
    *(_DWORD *)(a1 + 60) = *(unsigned __int16 *)(v5 + 16);
    ++*(_DWORD *)(a1 + 72);
    return v5;
  }

  if (*(void *)(a1 + 40))
  {
    int v13 = *(_DWORD *)(a1 + 48);
    goto LABEL_36;
  }

  int v13 = -1;
LABEL_29:
  sub_1000C0EF8(*(void *)v5);
  *(void *)(v5 + 32) = 0LL;
  *(_OWORD *)int v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_1000C0EF8(v5);
  int8x8_t v18 = *(FILE **)(a1 + 32);
  if (v18)
  {
    j__fseek(v18, v13, 0);
    return 0LL;
  }

  if (v13 < 0 || v13 > *(_DWORD *)(a1 + 52)) {
    return 0LL;
  }
  int v5 = 0LL;
  *(_DWORD *)(a1 + 48) = v13;
  return v5;
}

uint64_t sub_10001A154(uint64_t a1, unsigned int a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 1072);
  BOOL v7 = __OFSUB__(a2, v6);
  int v8 = a2 - v6;
  if (v8 < 0 == v7)
  {
    uint64_t v11 = *(void *)(a1 + 792) + 12LL * v8;
    goto LABEL_9;
  }

  if (!*(_DWORD *)(a1 + 1176))
  {
    uint64_t v9 = 3 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3);
LABEL_7:
    uint64_t v10 = *(void *)(a1 + 144);
    goto LABEL_8;
  }

  uint64_t v9 = 3 * (*(_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2) + a3);
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 136);
LABEL_8:
  uint64_t v11 = v10 + 4 * v9;
LABEL_9:
  uint64_t v12 = sub_1000056D4(a1, a2, a3);
  int v13 = (_DWORD *)sub_10000573C(a1, a2, a3);
  uint64_t v14 = *(void *)(a1 + 1560);
  int v15 = *(_DWORD *)v14 - *(_DWORD *)v11;
  if (*(_DWORD *)v11 >= *(_DWORD *)v14) {
    int v15 = *(_DWORD *)v11 - *(_DWORD *)v14;
  }
  unsigned int v16 = ((*(_DWORD *)v11 ^ *(_DWORD *)v14 ^ v15) & 0x11111111)
      - (((*(_DWORD *)v11 ^ *(_DWORD *)v14 ^ v15) & 0x11111111u) >> 4);
  signed int v17 = ((((((v16 + v15) ^ v16) >> 4) & 0xF0F0F0F) * ((*(_DWORD *)v12 >> 4) & 0xF0F0F0F)) >> 24)
      + (((((v16 + v15) ^ v16) & 0xF0F0F0F) * (*(_DWORD *)v12 & 0xF0F0F0F)) >> 24);
  if (v17 <= *(_DWORD *)(a1 + 1056))
  {
    int8x8_t v19 = *(int8x8_t *)(v12 + 4);
    int8x8_t v20 = *(int8x8_t *)(v11 + 4);
    int8x8_t v21 = *(int8x8_t *)(v14 + 4);
    int32x2_t v22 = (int32x2_t)vand_s8( veor_s8(veor_s8(v21, v20), (int8x8_t)vabd_u32((uint32x2_t)v20, (uint32x2_t)v21)),  (int8x8_t)0x1111111111111111LL);
    int8x8_t v23 = (int8x8_t)vsub_s32(v22, (int32x2_t)vshr_n_u32((uint32x2_t)v22, 4uLL));
    int8x8_t v24 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v23, (uint32x2_t)v20, (uint32x2_t)v21), v23);
    uint32x2_t v25 = vshr_n_u32( (uint32x2_t)vmul_s32( (int32x2_t)vand_s8(v24, (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v19, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  0x18uLL);
    uint32x2_t v26 = vshr_n_u32( (uint32x2_t)vmul_s32( (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  0x18uLL);
    __int32 v18 = v25.i32[1] + v17 + v25.i32[0] + v26.i32[0] + v26.i32[1];
  }

  else
  {
    __int32 v18 = *(_DWORD *)(a1 + 1060) + v17;
  }

  return (__int16)(((*v13 + v18) * *(_DWORD *)(a1 + 1052) + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001A344(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 1296);
  int v5 = *(_DWORD *)(a1 + 1072);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 == v6)
  {
    uint64_t v44 = *(void *)(a1 + 792) + 12LL * v7;
    int v45 = 1;
    goto LABEL_47;
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v8 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v9 = *v8;
    int v45 = v8[1] - *v8;
    if ((v45 & 1) == 0)
    {
LABEL_5:
      uint64_t v10 = 144LL;
      uint64_t v11 = *(void *)(a1 + v10);
      uint64_t v12 = sub_1000056D4(a1, a2, 0);
      int v13 = (int *)sub_10000573C(a1, a2, 0);
      if (v45 < 2) {
        goto LABEL_60;
      }
      uint64_t v14 = *(unsigned int **)(a1 + 1560);
      unsigned int v15 = *v14;
      unsigned int v16 = v14[1];
      unsigned int v17 = v14[2];
      __int32 v18 = (_DWORD *)(v11 + 12LL * v9);
      int v19 = (v45 >> 1) + 1;
      int v20 = 0x40000000;
      int8x8_t v21 = (_DWORD *)v12;
      while (1)
      {
        if (v4 == 2) {
          int32x2_t v22 = (_DWORD *)v12;
        }
        else {
          int32x2_t v22 = v21;
        }
        unsigned int v23 = v18[1];
        unsigned int v24 = v18[2];
        unsigned int v25 = v15 - *v18;
        if (*v18 >= v15) {
          unsigned int v25 = *v18 - v15;
        }
        unsigned int v26 = ((*v18 ^ v15 ^ v25) & 0x11111111) - (((*v18 ^ v15 ^ v25) & 0x11111111) >> 4);
        signed int v70 = (((((v26 + v25) ^ v26) & 0xF0F0F0F) * (*v22 & 0xF0F0F0F)) >> 24)
            + ((((((v26 + v25) ^ v26) >> 4) & 0xF0F0F0F) * ((*v22 >> 4) & 0xF0F0F0F)) >> 24);
        signed int v27 = *(_DWORD *)(a1 + 1056);
        if (v70 <= v27)
        {
          unsigned int v29 = v16 - v23;
          if (v23 >= v16) {
            unsigned int v29 = v23 - v16;
          }
          unsigned int v30 = ((v23 ^ v16 ^ v29) & 0x11111111) - (((v23 ^ v16 ^ v29) & 0x11111111) >> 4);
          unsigned int v73 = v70
              + (((((v30 + v29) ^ v30) & 0xF0F0F0F) * (v22[1] & 0xF0F0F0F)) >> 24)
              + ((((((v30 + v29) ^ v30) >> 4) & 0xF0F0F0F) * ((v22[1] >> 4) & 0xF0F0F0F)) >> 24);
          unsigned int v31 = v17 - v24;
          if (v24 >= v17) {
            unsigned int v31 = v24 - v17;
          }
          unsigned int v32 = ((v24 ^ v17 ^ v31) & 0x11111111) - (((v24 ^ v17 ^ v31) & 0x11111111) >> 4);
          unsigned int v71 = v73
              + (((((v32 + v31) ^ v32) & 0xF0F0F0F) * (v22[2] & 0xF0F0F0F)) >> 24)
              + ((((((v32 + v31) ^ v32) >> 4) & 0xF0F0F0F) * ((v22[2] >> 4) & 0xF0F0F0F)) >> 24);
          if (v4 == 2)
          {
LABEL_25:
            signed int v72 = v71 + *v13;
            if (v72 >= v20) {
              goto LABEL_27;
            }
LABEL_26:
            int v20 = v72;
            goto LABEL_27;
          }
        }

        else
        {
          unsigned int v71 = v70 + *(_DWORD *)(a1 + 1060);
          if (v4 == 2) {
            goto LABEL_25;
          }
        }

        int v28 = *v13++;
        signed int v72 = v71 + v28;
        if (v72 < v20) {
          goto LABEL_26;
        }
LABEL_27:
        unsigned int v33 = v22 + 3;
        if (v4 == 2) {
          unsigned int v33 = (_DWORD *)v12;
        }
        unsigned int v35 = v18[3];
        unsigned int v34 = v18[4];
        unsigned int v36 = v18[5];
        unsigned int v37 = v15 - v35;
        if (v35 >= v15) {
          unsigned int v37 = v35 - v15;
        }
        unsigned int v38 = ((v35 ^ v15 ^ v37) & 0x11111111) - (((v35 ^ v15 ^ v37) & 0x11111111) >> 4);
        signed int v74 = (((((v38 + v37) ^ v38) & 0xF0F0F0F) * (*v33 & 0xF0F0F0F)) >> 24)
            + ((((((v38 + v37) ^ v38) >> 4) & 0xF0F0F0F) * ((*v33 >> 4) & 0xF0F0F0F)) >> 24);
        if (v74 <= v27)
        {
          unsigned int v40 = v16 - v34;
          if (v34 >= v16) {
            unsigned int v40 = v34 - v16;
          }
          unsigned int v41 = ((v34 ^ v16 ^ v40) & 0x11111111) - (((v34 ^ v16 ^ v40) & 0x11111111) >> 4);
          unsigned int v77 = v74
              + (((((v41 + v40) ^ v41) & 0xF0F0F0F) * (v33[1] & 0xF0F0F0F)) >> 24)
              + ((((((v41 + v40) ^ v41) >> 4) & 0xF0F0F0F) * ((v33[1] >> 4) & 0xF0F0F0F)) >> 24);
          unsigned int v42 = v17 - v36;
          if (v36 >= v17) {
            unsigned int v42 = v36 - v17;
          }
          unsigned int v43 = ((v36 ^ v17 ^ v42) & 0x11111111) - (((v36 ^ v17 ^ v42) & 0x11111111) >> 4);
          unsigned int v75 = v77
              + (((((v43 + v42) ^ v43) & 0xF0F0F0F) * (v33[2] & 0xF0F0F0F)) >> 24)
              + ((((((v43 + v42) ^ v43) >> 4) & 0xF0F0F0F) * ((v33[2] >> 4) & 0xF0F0F0F)) >> 24);
          if (v4 != 2)
          {
LABEL_33:
            int v39 = *v13++;
            signed int v76 = v75 + v39;
            if (v76 >= v20) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
        }

        else
        {
          unsigned int v75 = v74 + *(_DWORD *)(a1 + 1060);
          if (v4 != 2) {
            goto LABEL_33;
          }
        }

        signed int v76 = v75 + *v13;
        if (v76 >= v20) {
          goto LABEL_10;
        }
LABEL_9:
        int v20 = v76;
LABEL_10:
        int8x8_t v21 = v33 + 3;
        --v19;
        v18 += 6;
        if (v19 <= 1) {
          return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
        }
      }
    }
  }

  else
  {
    int8x8_t v46 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
    int v9 = *v46;
    int v45 = v46[1] - v9;
    if ((v45 & 1) == 0) {
      goto LABEL_5;
    }
  }

  else {
    uint64_t v47 = *(void *)(a1 + 136);
  }
  uint64_t v44 = v47 + 12LL * v9;
LABEL_47:
  uint64_t v48 = sub_1000056D4(a1, a2, 0);
  __int32 v49 = (_DWORD *)sub_10000573C(a1, a2, 0);
  if (v45 < 1)
  {
LABEL_60:
    int v20 = 0x40000000;
    return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
  }

  signed int v50 = *(int **)(a1 + 1560);
  unsigned int v51 = *v50;
  int8x8_t v52 = *(int8x8_t *)(v50 + 1);
  int v53 = v45 + 1;
  unsigned int v54 = (int8x8_t *)(v44 + 4);
  int v20 = 0x40000000;
  uint64_t v55 = v48;
  do
  {
    if (v4 == 2) {
      uint64_t v64 = v48;
    }
    else {
      uint64_t v64 = v55;
    }
    unsigned __int32 v65 = v54[-1].u32[1];
    uint64_t v55 = v64 + 12;
    int v66 = v51 - v65;
    if (v65 >= v51) {
      int v66 = v65 - v51;
    }
    unsigned int v67 = ((v65 ^ v51 ^ v66) & 0x11111111) - (((v65 ^ v51 ^ v66) & 0x11111111) >> 4);
    signed int v68 = ((((((v67 + v66) ^ v67) >> 4) & 0xF0F0F0F) * ((*(_DWORD *)v64 >> 4) & 0xF0F0F0F)) >> 24)
        + (((((v67 + v66) ^ v67) & 0xF0F0F0F) * (*(_DWORD *)v64 & 0xF0F0F0F)) >> 24);
    if (v68 <= *(_DWORD *)(a1 + 1056))
    {
      int8x8_t v56 = *(int8x8_t *)(v64 + 4);
      int32x2_t v57 = (int32x2_t)vand_s8( veor_s8(veor_s8(*v54, v52), (int8x8_t)vabd_u32((uint32x2_t)*v54, (uint32x2_t)v52)),  (int8x8_t)0x1111111111111111LL);
      int8x8_t v58 = (int8x8_t)vsub_s32(v57, (int32x2_t)vshr_n_u32((uint32x2_t)v57, 4uLL));
      int8x8_t v59 = veor_s8((int8x8_t)vaba_u32((uint32x2_t)v58, (uint32x2_t)*v54, (uint32x2_t)v52), v58);
      uint32x2_t v60 = vshr_n_u32( (uint32x2_t)vmul_s32( (int32x2_t)vand_s8(v59, (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8(v56, (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  0x18uLL);
      uint32x2_t v61 = vshr_n_u32( (uint32x2_t)vmul_s32( (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v59, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v56, 4uLL),  (int8x8_t)0xF0F0F0F0F0F0F0FLL)),  0x18uLL);
      __int32 v62 = v60.i32[1] + v68 + v60.i32[0] + v61.i32[0] + v61.i32[1];
    }

    else
    {
      __int32 v62 = *(_DWORD *)(a1 + 1060) + v68;
    }

    int v63 = *v49 + v62;
    if (v63 < v20) {
      int v20 = v63;
    }
    --v53;
    v49 += v4 != 2;
    unsigned int v54 = (int8x8_t *)((char *)v54 + 12);
  }

  while (v53 > 1);
  return (__int16)((*(_DWORD *)(a1 + 1052) * v20 + *(_DWORD *)(a1 + 1192) / 2) >> *(_DWORD *)(a1 + 1196));
}

uint64_t sub_10001A93C(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v30 = *(void *)(a1 + 792) + 12LL * v4;
    unsigned int v31 = (int16x8_t *)(*(void *)(a1 + 816) + 2LL * v4);
    int v32 = 1;
LABEL_23:
    unsigned int v36 = *(uint32x2_t **)(a1 + 1552);
    unsigned __int32 v37 = v36[1].u32[0];
    int8x8_t v38 = (int8x8_t)*v36;
    int8x8_t v39 = (int8x8_t)vshr_n_u32(*v36, 4uLL);
    int8x8_t v40 = (int8x8_t)vshr_n_u32(*v36, 8uLL);
    int8x8_t v41 = (int8x8_t)vshr_n_u32(*v36, 0xCuLL);
    unsigned int v42 = v37 & 0xF000F;
    int32x2_t v43 = (int32x2_t)vand_s8(v38, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v44 = (int32x2_t)vand_s8(v39, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v45 = (int32x2_t)vand_s8(v40, (int8x8_t)0xF000F000F000FLL);
    int32x2_t v46 = (int32x2_t)vand_s8(v41, (int8x8_t)0xF000F000F000FLL);
    unsigned int v47 = (v37 >> 4) & 0xF000F;
    unsigned int v48 = (v37 >> 8) & 0xF000F;
    unsigned int v49 = (v37 >> 12) & 0xF000F;
    uint64_t v50 = (v32 - 1);
    if (v50 >= 7)
    {
      uint64_t v53 = v50 + 1;
      uint64_t v54 = (v50 + 1) & 0x1FFFFFFF8LL;
      v32 -= v54;
      unsigned int v51 = (int16x8_t *)((char *)v31 + 2 * v54);
      uint64_t v52 = v30 + 12 * v54;
      int32x2_t v136 = v43;
      int32x4_t v138 = vdupq_lane_s32(v43, 0);
      int32x4_t v55 = vdupq_lane_s32(v44, 0);
      int32x4_t v56 = vdupq_lane_s32(v45, 0);
      int32x4_t v57 = vdupq_lane_s32(v46, 0);
      int32x4_t v58 = vdupq_lane_s32(v43, 1);
      int32x2_t v134 = v44;
      int32x4_t v59 = vdupq_lane_s32(v44, 1);
      int32x4_t v60 = vdupq_lane_s32(v45, 1);
      int32x4_t v61 = vdupq_lane_s32(v46, 1);
      v62.i64[0] = 0x4000000040000000LL;
      v62.i64[1] = 0x4000000040000000LL;
      int32x4_t v63 = vdupq_n_s32(v42);
      int32x4_t v64 = vdupq_n_s32(v47);
      v65.i64[0] = 0xF000F000F000FLL;
      v65.i64[1] = 0xF000F000F000FLL;
      uint64_t v66 = v54;
      int32x4_t v67 = vdupq_n_s32(v48);
      v68.i64[0] = 0x4000000040000000LL;
      v68.i64[1] = 0x4000000040000000LL;
      int32x4_t v69 = vdupq_n_s32(v49);
      do
      {
        int16x8_t v70 = *v31++;
        unsigned int v71 = (const float *)v30;
        float32x4x3_t v141 = vld3q_f32(v71);
        v71 += 12;
        float32x4x3_t v142 = vld3q_f32(v71);
        int32x4_t v62 = vminq_s32( vsubq_s32( vmovl_s16(*(int16x4_t *)v70.i8),  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[0], v65), v138),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 4uLL),  v65),  v55),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 8uLL),  v65),  v56),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[0], 0xCuLL),  v65),  v57),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[1], v65), v58),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 4uLL),  v65),  v59),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 8uLL),  v65),  v60),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[1], 0xCuLL),  v65),  v61),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v141.val[2], v65), v63),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 4uLL),  v65),  v64),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 8uLL),
                                                            v65),
                                               v67),
                                             (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v141.val[2], 0xCuLL),  v65),  v69),  0xFuLL)),  v62);
        int32x4_t v68 = vminq_s32( vsubq_s32( vmovl_high_s16(v70),  (int32x4_t)vsraq_n_u32( vsraq_n_u32( vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[0], v65), v138),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 4uLL),  v65),  v55),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 8uLL),  v65),  v56),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[0], 0xCuLL),  v65),  v57),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[1], v65), v58),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 4uLL),  v65),  v59),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 8uLL),  v65),  v60),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[1], 0xCuLL),  v65),  v61),  0xFuLL),  (uint32x4_t)vmlaq_s32( vmlaq_s32( vmlaq_s32( vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v142.val[2], v65), v63),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 4uLL),  v65),  v64),  (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 8uLL),
                                                            v65),
                                               v67),
                                             (int32x4_t)vandq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v142.val[2], 0xCuLL),  v65),  v69),  0xFuLL)),  v68);
        v30 += 96LL;
        v66 -= 8LL;
      }

      while (v66);
      int v27 = vminvq_s32(vminq_s32(v62, v68));
      int32x2_t v44 = v134;
      int32x2_t v43 = v136;
      if (v53 == v54) {
    }
      }

    else
    {
      int v27 = 0x40000000;
      unsigned int v51 = v31;
      uint64_t v52 = v30;
    }

    unsigned int v72 = v32 + 1;
    unsigned int v73 = (unsigned int *)(v52 + 8);
    do
    {
      int v75 = v51->i16[0];
      unsigned int v51 = (int16x8_t *)((char *)v51 + 2);
      int v74 = v75;
      int8x8_t v76 = *(int8x8_t *)(v73 - 2);
      unsigned int v77 = *v73;
      v73 += 3;
      uint32x2_t v78 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(v76, (int8x8_t)0xF000F000F000FLL), v43),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v76, 4uLL),  (int8x8_t)0xF000F000F000FLL),  v44),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v76, 8uLL), (int8x8_t)0xF000F000F000FLL),  v45),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v76, 0xCuLL), (int8x8_t)0xF000F000F000FLL),  v46);
      int v79 = v74
          - (vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v78, 0xFuLL), 1), v78, 0xFuLL).u32[0]
           + (((v77 & 0xF000F) * v42
             + ((v77 >> 4) & 0xF000F) * v47
             + ((v77 >> 8) & 0xF000F) * v48
             + ((v77 >> 12) & 0xF000F) * v49) >> 15));
      if (v79 < v27) {
        int v27 = v79;
      }
      --v72;
    }

    while (v72 > 1);
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v6 = *v5;
    int v32 = v5[1] - *v5;
    if ((v32 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_15:
    if (*(_DWORD *)(a1 + 2012)) {
      int v6 = a2;
    }
    uint64_t v34 = 112LL;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v34 = 64LL;
    }
    uint64_t v35 = 144LL;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v35 = 136LL;
    }
    if (v32 >= 1)
    {
      uint64_t v30 = *(void *)(a1 + v35) + 12LL * v6;
      unsigned int v31 = (int16x8_t *)(*(void *)(a1 + v34) + 2LL * v6);
      goto LABEL_23;
    }

uint64_t sub_10001B318(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  int v3 = a2 - v2;
  if (a2 >= v2)
  {
    uint64_t v7 = *(void *)(a1 + 792) + 12LL * v3;
    uint64_t v8 = 2LL * v3;
    uint64_t v9 = *(void *)(a1 + 816) + v8;
    uint64_t v10 = *(void *)(a1 + 824) + v8;
    unsigned int v11 = *(int **)(a1 + 1552);
    int8x8_t v12 = *(int8x8_t *)(v11 + 1);
    int v13 = 1;
  }

  else
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int v4 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
      int v5 = *v4;
      int v6 = v4[1];
    }

    else
    {
      int8x8_t v14 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
      int v5 = *v14;
      int v6 = v14[1];
    }

    int v13 = v6 - v5;
    if (*(_DWORD *)(a1 + 2012)) {
      int v15 = a2;
    }
    else {
      int v15 = v5;
    }
    int v16 = *(_DWORD *)(a1 + 1080);
    BOOL v17 = v16 <= a2;
    if (v16 <= a2) {
      uint64_t v18 = 128LL;
    }
    else {
      uint64_t v18 = 80LL;
    }
    uint64_t v19 = 64LL;
    if (v16 <= a2) {
      uint64_t v19 = 112LL;
    }
    uint64_t v20 = 144LL;
    if (!v17) {
      uint64_t v20 = 136LL;
    }
    uint64_t v7 = *(void *)(a1 + v20) + 12LL * v15;
    uint64_t v21 = 2LL * v15;
    uint64_t v10 = *(void *)(a1 + v18) + v21;
    unsigned int v11 = *(int **)(a1 + 1552);
    int8x8_t v12 = *(int8x8_t *)(v11 + 1);
    if (v13 < 1)
    {
      int v23 = 0;
      signed int v36 = 0x40000000;
LABEL_29:
      int8x8_t v41 = *(int8x8_t *)(v7 + 12LL * v23 + 4);
      uint32x2_t v42 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32( (int32x2_t)vand_s8(v41, (int8x8_t)0xF000F000F000FLL),  (int32x2_t)vand_s8(v12, (int8x8_t)0xF000F000F000FLL)),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v41, 4uLL),  (int8x8_t)0xF000F000F000FLL),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)v12, 4uLL),  (int8x8_t)0xF000F000F000FLL)),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 8uLL), (int8x8_t)0xF000F000F000FLL),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 8uLL), (int8x8_t)0xF000F000F000FLL)),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 0xCuLL), (int8x8_t)0xF000F000F000FLL),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 0xCuLL), (int8x8_t)0xF000F000F000FLL));
      signed __int32 v35 = v36
    }

    uint64_t v9 = *(void *)(a1 + v19) + v21;
  }

  uint64_t v22 = 0LL;
  int v23 = 0;
  unsigned int v24 = *v11;
  int v25 = *v11 & 0xF000F;
  int v26 = (v24 >> 4) & 0xF000F;
  int v27 = (v24 >> 8) & 0xF000F;
  int v28 = (v24 >> 12) & 0xF000F;
  int32x2_t v29 = (int32x2_t)vand_s8(v12, (int8x8_t)0xF000F000F000FLL);
  int32x2_t v30 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 4uLL), (int8x8_t)0xF000F000F000FLL);
  int32x2_t v31 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 8uLL), (int8x8_t)0xF000F000F000FLL);
  int32x2_t v32 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v12, 0xCuLL), (int8x8_t)0xF000F000F000FLL);
  int v33 = v13;
  uint64_t v34 = (void *)(v7 + 4);
  signed __int32 v35 = 0x40000000;
  signed int v36 = 0x40000000;
  do
  {
    while (1)
    {
      signed int v40 = *(__int16 *)(v9 + 2 * v22)
          - (((*((_DWORD *)v34 - 1) & 0xF000F) * v25
            + ((*((_DWORD *)v34 - 1) >> 4) & 0xF000F) * v26
            + ((*((_DWORD *)v34 - 1) >> 8) & 0xF000F) * v27
            + ((*((_DWORD *)v34 - 1) >> 12) & 0xF000Fu) * v28) >> 15);
      if (v40 <= *(_DWORD *)(a1 + 1064)) {
        break;
      }
      if (v40 < v36)
      {
        signed int v36 = *(__int16 *)(v9 + 2 * v22)
            - (((*((_DWORD *)v34 - 1) & 0xF000F) * v25
              + ((*((_DWORD *)v34 - 1) >> 4) & 0xF000F) * v26
              + ((*((_DWORD *)v34 - 1) >> 8) & 0xF000F) * v27
              + ((*((_DWORD *)v34 - 1) >> 12) & 0xF000Fu) * v28) >> 15);
        int v23 = v22;
      }

      ++v22;
      uint64_t v34 = (void *)((char *)v34 + 12);
      if (v33 == (_DWORD)v22) {
        goto LABEL_26;
      }
    }

    int8x8_t v37 = *(int8x8_t *)v34;
    uint64_t v34 = (void *)((char *)v34 + 12);
    uint32x2_t v38 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(v37, (int8x8_t)0xF000F000F000FLL), v29),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 4uLL), (int8x8_t)0xF000F000F000FLL),  v30),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 8uLL), (int8x8_t)0xF000F000F000FLL),  v31),  (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v37, 0xCuLL), (int8x8_t)0xF000F000F000FLL),  v32);
    signed __int32 v39 = v40
    if (v39 < v35) {
      signed __int32 v35 = v39;
    }
    ++v22;
  }

  while (v33 != (_DWORD)v22);
LABEL_26:
  if (v35 == 0x40000000) {
    goto LABEL_29;
  }
}

uint64_t sub_10001B5C4(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)(a1 + 1072);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 == v3)
  {
    uint64_t v40 = *(void *)(a1 + 792) + 12LL * v4;
    uint64_t v41 = 2LL * v4;
    uint32x2_t v42 = (__int16 *)(*(void *)(a1 + 816) + v41);
    int32x2_t v43 = (__int16 *)(*(void *)(a1 + 824) + v41);
    int v44 = 1;
    goto LABEL_39;
  }

  if (*(_DWORD *)(a1 + 1176))
  {
    int v5 = (int *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v6 = *v5;
    int v44 = v5[1] - *v5;
    if ((v44 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_28:
    if (*(_DWORD *)(a1 + 2012)) {
      int v46 = a2;
    }
    else {
      int v46 = v6;
    }
    uint64_t v47 = 80LL;
    if (*(_DWORD *)(a1 + 1080) <= a2) {
      uint64_t v47 = 128LL;
    }
    uint64_t v48 = 144LL;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v48 = 136LL;
    }
    uint64_t v49 = 112LL;
    if (*(_DWORD *)(a1 + 1080) > a2) {
      uint64_t v49 = 64LL;
    }
    if (v44 >= 1)
    {
      uint64_t v50 = 2LL * v46;
      uint64_t v51 = *(void *)(a1 + v48);
      uint32x2_t v42 = (__int16 *)(*(void *)(a1 + v49) + v50);
      uint64_t v40 = v51 + 12LL * v46;
      int32x2_t v43 = (__int16 *)(*(void *)(a1 + v47) + v50);
LABEL_39:
      uint64_t v52 = *(void *)(a1 + 1552);
      int v53 = *(_DWORD *)v52 & 0xF000F;
      int v54 = (*(_DWORD *)v52 >> 4) & 0xF000F;
      int v55 = (*(_DWORD *)v52 >> 8) & 0xF000F;
      int v56 = (*(_DWORD *)v52 >> 12) & 0xF000F;
      int8x8_t v57 = *(int8x8_t *)(v52 + 4);
      int8x8_t v58 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 4uLL);
      int8x8_t v59 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 8uLL);
      int8x8_t v60 = (int8x8_t)vshr_n_u32((uint32x2_t)v57, 0xCuLL);
      int32x2_t v61 = (int32x2_t)vand_s8(v57, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v62 = (int32x2_t)vand_s8(v58, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v63 = (int32x2_t)vand_s8(v59, (int8x8_t)0xF000F000F000FLL);
      int32x2_t v64 = (int32x2_t)vand_s8(v60, (int8x8_t)0xF000F000F000FLL);
      int v65 = v44 + 1;
      uint64_t v66 = (int8x8_t *)(v40 + 4);
      int v33 = 0x40000000;
      do
      {
        int v69 = *v42++;
        int v70 = v69
            - (((v66[-1].i32[1] & 0xF000F) * v53
              + (((unsigned __int32)v66[-1].i32[1] >> 4) & 0xF000F) * v54
              + (((unsigned __int32)v66[-1].i32[1] >> 8) & 0xF000F) * v55
              + (((unsigned __int32)v66[-1].i32[1] >> 12) & 0xF000F) * v56) >> 15);
        if (v70 <= *(_DWORD *)(a1 + 1064))
        {
          uint32x2_t v67 = (uint32x2_t)vmla_s32( vmla_s32( vmla_s32( vmul_s32((int32x2_t)vand_s8(*v66, (int8x8_t)0xF000F000F000FLL), v61),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)*v66, 4uLL),  (int8x8_t)0xF000F000F000FLL),  v62),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)*v66, 8uLL),  (int8x8_t)0xF000F000F000FLL),  v63),  (int32x2_t)vand_s8( (int8x8_t)vshr_n_u32((uint32x2_t)*v66, 0xCuLL),  (int8x8_t)0xF000F000F000FLL),  v64);
          signed __int32 v68 = v70
              + *v43
              - vsra_n_u32((uint32x2_t)vdup_lane_s32((int32x2_t)vshr_n_u32(v67, 0xFuLL), 1), v67, 0xFuLL).u32[0];
        }

        else
        {
          signed __int32 v68 = v70 + *(_DWORD *)(a1 + 1068);
        }

        ++v43;
        if (v68 < v33) {
          int v33 = v68;
        }
        --v65;
        uint64_t v66 = (int8x8_t *)((char *)v66 + 12);
      }

      while (v65 > 1);
    }

uint64_t sub_10001B9CC(uint64_t result, uint8x8_t a2)
{
  unint64_t v2 = *(void *)(result + 632);
  BOOL v3 = *(uint32x4_t **)(result + 536);
  unint64_t v4 = *(void *)(result + 552);
  int v5 = *(__int32 **)(result + 1544);
  a2.i32[0] = *v5;
  uint16x4_t v6 = (uint16x4_t)vmovl_u8(a2).u64[0];
  int32x4_t v7 = (int32x4_t)vmull_u16(v6, v6);
  **(_WORD **)(result + 568) = vaddvq_s32(v7);
  v7.i32[0] = v5[1];
  v7.i64[0] = vmovl_u8(*(uint8x8_t *)v7.i8).u64[0];
  int32x4_t v8 = (int32x4_t)vmull_u16(*(uint16x4_t *)v7.i8, *(uint16x4_t *)v7.i8);
  *(_WORD *)(*(void *)(result + 568) + 2LL) = vaddvq_s32(v8);
  v8.i32[0] = v5[2];
  v8.i64[0] = vmovl_u8(*(uint8x8_t *)v8.i8).u64[0];
  int32x4_t v9 = (int32x4_t)vmull_u16(*(uint16x4_t *)v8.i8, *(uint16x4_t *)v8.i8);
  *(_WORD *)(*(void *)(result + 568) + 4LL) = vaddvq_s32(v9);
  v9.i32[0] = v5[3];
  v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
  int32x4_t v10 = (int32x4_t)vmull_u16(*(uint16x4_t *)v9.i8, *(uint16x4_t *)v9.i8);
  *(_WORD *)(*(void *)(result + 568) + 6LL) = vaddvq_s32(v10);
  v10.i32[0] = v5[4];
  v10.i64[0] = vmovl_u8(*(uint8x8_t *)v10.i8).u64[0];
  int32x4_t v11 = (int32x4_t)vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v10.i8);
  *(_WORD *)(*(void *)(result + 568) + 8LL) = vaddvq_s32(v11);
  v11.i32[0] = v5[5];
  v11.i64[0] = vmovl_u8(*(uint8x8_t *)v11.i8).u64[0];
  *(_WORD *)(*(void *)(result + 568) + 10LL) = vaddvq_s32((int32x4_t)vmull_u16( *(uint16x4_t *)v11.i8,  *(uint16x4_t *)v11.i8));
  uint64_t v12 = *(_DWORD **)(result + 1552);
  unsigned int v13 = **(unsigned __int16 **)(result + 568);
  unsigned int v14 = *v12 & 0xFF00FF;
  unsigned int v15 = (*v12 >> 8) & 0xFF00FF;
  unint64_t v16 = v2 + 512;
  unint64_t v17 = (unint64_t)&v3[64];
  unint64_t v18 = v4 + 512;
  BOOL v20 = v2 < v4 + 512 && v4 < v16;
  BOOL v21 = (unint64_t)v3 >= v16 || v2 >= v17;
  if (!v21 || v20)
  {
    uint64_t v28 = 0LL;
    do
    {
      unsigned __int32 v29 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v2 + v28) = *(_WORD *)(v4 + v28)
                           + v13
                           - (((v29 & 0xFF00FF) * v14 + ((v29 >> 8) & 0xFF00FF) * v15) >> 15);
      v28 += 2LL;
    }

    while ((_DWORD)v28 != 512);
    unint64_t v18 = v4 + v28;
    unint64_t v16 = v2 + v28;
  }

  else
  {
    uint64_t v22 = 0LL;
    uint32x4_t v23 = (uint32x4_t)vdupq_n_s32(v13);
    int32x4_t v24 = vdupq_n_s32(v14);
    int32x4_t v25 = vdupq_n_s32(v15);
    do
    {
      uint32x4_t v26 = *v3;
      uint32x4_t v27 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v2 + v22) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v23, *(uint16x4_t *)(v4 + v22)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v26 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v24),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32( v26,  8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v25),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v23, *(uint16x8_t *)(v4 + v22)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v27 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v24),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32( v27,  8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v25),  0xFuLL)));
      v22 += 16LL;
    }

    while (v22 != 512);
    BOOL v3 = (uint32x4_t *)v17;
  }

  unsigned int v30 = v12[1];
  unsigned int v31 = *(unsigned __int16 *)(*(void *)(result + 568) + 2LL);
  unsigned int v32 = v30 & 0xFF00FF;
  unsigned int v33 = (v30 >> 8) & 0xFF00FF;
  unint64_t v34 = v16 + 512;
  unint64_t v35 = (unint64_t)&v3[64];
  unint64_t v36 = v18 + 512;
  BOOL v38 = v16 < v18 + 512 && v18 < v34;
  BOOL v39 = (unint64_t)v3 >= v34 || v16 >= v35;
  if (!v39 || v38)
  {
    uint64_t v46 = 0LL;
    do
    {
      unsigned __int32 v47 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v16 + v46) = *(_WORD *)(v18 + v46)
                            + v31
                            - (((v47 & 0xFF00FF) * v32 + ((v47 >> 8) & 0xFF00FF) * v33) >> 15);
      v46 += 2LL;
    }

    while ((_DWORD)v46 != 512);
    unint64_t v36 = v18 + v46;
    unint64_t v34 = v16 + v46;
  }

  else
  {
    uint64_t v40 = 0LL;
    uint32x4_t v41 = (uint32x4_t)vdupq_n_s32(v31);
    int32x4_t v42 = vdupq_n_s32(v32);
    int32x4_t v43 = vdupq_n_s32(v33);
    do
    {
      uint32x4_t v44 = *v3;
      uint32x4_t v45 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v16 + v40) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v41, *(uint16x4_t *)(v18 + v40)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v42),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v43),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v41, *(uint16x8_t *)(v18 + v40)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v42),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v43),  0xFuLL)));
      v40 += 16LL;
    }

    while (v40 != 512);
    BOOL v3 = (uint32x4_t *)v35;
  }

  unsigned int v48 = v12[2];
  unsigned int v49 = *(unsigned __int16 *)(*(void *)(result + 568) + 4LL);
  unsigned int v50 = v48 & 0xFF00FF;
  unsigned int v51 = (v48 >> 8) & 0xFF00FF;
  unint64_t v52 = v34 + 512;
  unint64_t v53 = (unint64_t)&v3[64];
  unint64_t v54 = v36 + 512;
  BOOL v56 = v34 < v36 + 512 && v36 < v52;
  BOOL v57 = (unint64_t)v3 >= v52 || v34 >= v53;
  if (!v57 || v56)
  {
    uint64_t v64 = 0LL;
    do
    {
      unsigned __int32 v65 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v34 + v64) = *(_WORD *)(v36 + v64)
                            + v49
                            - (((v65 & 0xFF00FF) * v50 + ((v65 >> 8) & 0xFF00FF) * v51) >> 15);
      v64 += 2LL;
    }

    while ((_DWORD)v64 != 512);
    unint64_t v54 = v36 + v64;
    unint64_t v52 = v34 + v64;
  }

  else
  {
    uint64_t v58 = 0LL;
    uint32x4_t v59 = (uint32x4_t)vdupq_n_s32(v49);
    int32x4_t v60 = vdupq_n_s32(v50);
    int32x4_t v61 = vdupq_n_s32(v51);
    do
    {
      uint32x4_t v62 = *v3;
      uint32x4_t v63 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v34 + v58) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v59, *(uint16x4_t *)(v36 + v58)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v62 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v60),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v62, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v61),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v59, *(uint16x8_t *)(v36 + v58)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v60),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v63, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v61),  0xFuLL)));
      v58 += 16LL;
    }

    while (v58 != 512);
    BOOL v3 = (uint32x4_t *)v53;
  }

  unsigned int v66 = v12[3];
  unsigned int v67 = *(unsigned __int16 *)(*(void *)(result + 568) + 6LL);
  unsigned int v68 = v66 & 0xFF00FF;
  unsigned int v69 = (v66 >> 8) & 0xFF00FF;
  unint64_t v70 = v52 + 512;
  unint64_t v71 = (unint64_t)&v3[64];
  unint64_t v72 = v54 + 512;
  BOOL v74 = v52 < v54 + 512 && v54 < v70;
  BOOL v75 = (unint64_t)v3 >= v70 || v52 >= v71;
  if (!v75 || v74)
  {
    uint64_t v82 = 0LL;
    do
    {
      unsigned __int32 v83 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v52 + v82) = *(_WORD *)(v54 + v82)
                            + v67
                            - (((v83 & 0xFF00FF) * v68 + ((v83 >> 8) & 0xFF00FF) * v69) >> 15);
      v82 += 2LL;
    }

    while ((_DWORD)v82 != 512);
    unint64_t v72 = v54 + v82;
    unint64_t v70 = v52 + v82;
  }

  else
  {
    uint64_t v76 = 0LL;
    uint32x4_t v77 = (uint32x4_t)vdupq_n_s32(v67);
    int32x4_t v78 = vdupq_n_s32(v68);
    int32x4_t v79 = vdupq_n_s32(v69);
    do
    {
      uint32x4_t v80 = *v3;
      uint32x4_t v81 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v52 + v76) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v77, *(uint16x4_t *)(v54 + v76)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v80 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v78),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v80, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v79),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v77, *(uint16x8_t *)(v54 + v76)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v81 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v78),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v81, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v79),  0xFuLL)));
      v76 += 16LL;
    }

    while (v76 != 512);
    BOOL v3 = (uint32x4_t *)v71;
  }

  unsigned int v84 = v12[4];
  unsigned int v85 = *(unsigned __int16 *)(*(void *)(result + 568) + 8LL);
  unsigned int v86 = v84 & 0xFF00FF;
  unsigned int v87 = (v84 >> 8) & 0xFF00FF;
  unint64_t v88 = v70 + 512;
  unint64_t v89 = (unint64_t)&v3[64];
  unint64_t v90 = v72 + 512;
  BOOL v92 = v70 < v72 + 512 && v72 < v88;
  BOOL v93 = (unint64_t)v3 >= v88 || v70 >= v89;
  if (!v93 || v92)
  {
    uint64_t v100 = 0LL;
    do
    {
      unsigned __int32 v101 = v3->i32[0];
      BOOL v3 = (uint32x4_t *)((char *)v3 + 4);
      *(_WORD *)(v70 + v100) = *(_WORD *)(v72 + v100)
                             + v85
                             - (((v101 & 0xFF00FF) * v86 + ((v101 >> 8) & 0xFF00FF) * v87) >> 15);
      v100 += 2LL;
    }

    while ((_DWORD)v100 != 512);
    unint64_t v90 = v72 + v100;
    unint64_t v88 = v70 + v100;
  }

  else
  {
    uint64_t v94 = 0LL;
    uint32x4_t v95 = (uint32x4_t)vdupq_n_s32(v85);
    int32x4_t v96 = vdupq_n_s32(v86);
    int32x4_t v97 = vdupq_n_s32(v87);
    do
    {
      uint32x4_t v98 = *v3;
      uint32x4_t v99 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v70 + v94) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v95, *(uint16x4_t *)(v72 + v94)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v98 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v96),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v98, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v97),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v95, *(uint16x8_t *)(v72 + v94)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v99 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v96),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v99, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v97),  0xFuLL)));
      v94 += 16LL;
    }

    while (v94 != 512);
    BOOL v3 = (uint32x4_t *)v89;
  }

  unsigned int v102 = v12[5];
  unsigned int v103 = *(unsigned __int16 *)(*(void *)(result + 568) + 10LL);
  unsigned int v104 = v102 & 0xFF00FF;
  unsigned int v105 = (v102 >> 8) & 0xFF00FF;
  unint64_t v106 = v88 + 512;
  BOOL v108 = v88 < v90 + 512 && v90 < v106;
  BOOL v109 = (unint64_t)v3 >= v106 || v88 >= (unint64_t)&v3[64];
  if (!v109 || v108)
  {
    uint64_t v116 = 0LL;
    do
    {
      uint32x2_t result = *(unsigned __int16 *)(v90 + 2 * v116) + v103;
      *(_WORD *)(v88 + 2 * v116) = *(_WORD *)(v90 + 2 * v116)
                                 + v103
                                 - (((v3->i32[v116] & 0xFF00FF) * v104
                                   + (((unsigned __int32)v3->i32[v116] >> 8) & 0xFF00FF) * v105) >> 15);
      ++v116;
    }

    while ((_DWORD)v116 != 256);
  }

  else
  {
    uint64_t v110 = 0LL;
    uint32x4_t v111 = (uint32x4_t)vdupq_n_s32(v103);
    int32x4_t v112 = vdupq_n_s32(v104);
    int32x4_t v113 = vdupq_n_s32(v105);
    do
    {
      uint32x4_t v114 = *v3;
      uint32x4_t v115 = v3[1];
      v3 += 2;
      *(int16x8_t *)(v88 + v110) = vuzp1q_s16( (int16x8_t)vsubq_s32( (int32x4_t)vaddw_u16(v111, *(uint16x4_t *)(v90 + v110)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v114 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v112),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v114, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v113),  0xFuLL)),  (int16x8_t)vsubq_s32( (int32x4_t)vaddw_high_u16(v111, *(uint16x8_t *)(v90 + v110)),  (int32x4_t)vshrq_n_u32( (uint32x4_t)vmlaq_s32( vmulq_s32( (int32x4_t)(*(_OWORD *)&v115 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)),  v112),  (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v115, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)),  v113),  0xFuLL)));
      v110 += 16LL;
    }

    while (v110 != 512);
  }

  return result;
}

uint64_t sub_10001C014(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 616);
  uint64_t v3 = *(int *)(a1 + 576);
  uint64_t v4 = *(void *)(a1 + 632);
  signed int v5 = *(_DWORD *)(a1 + 736);
  uint16x4_t v6 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  int v7 = *v6;
  if (*(_DWORD *)(a1 + 1072) > (signed int)a2)
  {
    if (*(_DWORD *)(a1 + 1176))
    {
      int32x4_t v8 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
      int v9 = v8[1] - *v8;
      if (v9 >= 1) {
        goto LABEL_4;
      }
    }

    else
    {
      int v9 = v6[1] - v7;
      if (v9 >= 1)
      {
LABEL_4:
        uint64_t v10 = *(unsigned int *)(a1 + 576);
        int v11 = v9 - 1;
        goto LABEL_15;
      }
    }

    int v14 = 0x40000000;
    goto LABEL_43;
  }

  int v9 = 1;
  uint64_t v10 = *(unsigned int *)(a1 + 576);
  int v11 = 0;
  if ((int)v3 > 0)
  {
LABEL_5:
    uint64_t v12 = *(void *)(a1 + 640) + (int)v3 * (uint64_t)v7;
    if ((_DWORD)v3 == 1)
    {
      uint64_t v13 = v10 + 1;
      int v14 = 0x40000000;
      do
      {
        uint64_t v15 = v13;
        int v16 = *(_DWORD *)(a1 + 736);
        do
        {
          v16 += *(unsigned __int16 *)(v4
                                     + 2LL
          --v15;
        }

        while (v15 > 1);
        if (v16 < v14) {
          int v14 = v16;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }

      while (!v17);
    }

    else if ((unint64_t)(v10 - 1) >> 32)
    {
      uint64_t v28 = v10 + 1;
      int v14 = 0x40000000;
      do
      {
        uint64_t v29 = v28;
        int v30 = *(_DWORD *)(a1 + 736);
        do
        {
          v30 += *(unsigned __int16 *)(v4
                                     + 2LL
          --v29;
        }

        while (v29 > 1);
        if (v30 < v14) {
          int v14 = v30;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }

      while (!v17);
    }

    else
    {
      int v14 = 0x40000000;
      do
      {
        int v18 = 0;
        uint64_t v19 = v10 + 4294967294LL;
        uint64_t v20 = v10 & 0xFFFFFFFE;
        int v21 = *(_DWORD *)(a1 + 736);
        do
        {
          v21 += *(unsigned __int16 *)(v4
                                     + 2LL
          v18 += *(unsigned __int16 *)(v4
                                     + 2LL
          v19 -= 2LL;
          v20 -= 2LL;
        }

        while (v20);
        int v22 = v18 + v21;
        if ((v10 & 0xFFFFFFFE) != v10) {
          v22 += *(unsigned __int16 *)(v4
        }
                                     + 2LL
        if (v22 < v14) {
          int v14 = v22;
        }
        v12 += v3;
        BOOL v17 = v11-- <= 0;
      }

      while (!v17);
    }

    goto LABEL_43;
  }

uint64_t sub_10001C2D8(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2);
  unsigned int v4 = *v3;
  if (*(_DWORD *)(a1 + 1072) <= (signed int)a2)
  {
    int v6 = 1;
  }

  else if (*(_DWORD *)(a1 + 1176))
  {
    signed int v5 = (_DWORD *)(*(void *)(a1 + 1160) + 4LL * a2);
    int v6 = v5[1] - *v5;
    if (v6 < 1) {
      goto LABEL_12;
    }
  }

  else
  {
    int v6 = v3[1] - v4;
    if (v6 < 1)
    {
LABEL_12:
      int v9 = 0x40000000;
      goto LABEL_13;
    }
  }

  int v7 = (unsigned __int8 *)(*(void *)(a1 + 640) + 6LL * v4);
  unsigned int v8 = v6 + 1;
  int v9 = 0x40000000;
  do
  {
    uint64_t v2 = *(void *)(a1 + 632);
    if (*(unsigned __int16 *)(v2 + 512 + 2LL * v7[1])
       + *(unsigned __int16 *)(v2 + 2LL * *v7)
       + *(unsigned __int16 *)(v2 + 1024 + 2LL * v7[2])
       + *(unsigned __int16 *)(v2 + 1536 + 2LL * v7[3])
       + *(unsigned __int16 *)(v2 + 2048 + 2LL * v7[4])
       + *(unsigned __int16 *)(v2 + 2560 + 2LL * v7[5]) < v9)
      int v9 = *(unsigned __int16 *)(v2 + 512 + 2LL * v7[1])
         + *(unsigned __int16 *)(v2 + 2LL * *v7)
         + *(unsigned __int16 *)(v2 + 1024 + 2LL * v7[2])
         + *(unsigned __int16 *)(v2 + 1536 + 2LL * v7[3])
    --v8;
    v7 += 6;
  }

  while (v8 > 1);
LABEL_13:
  unsigned int v10 = (__int16)((unint64_t)(*(int *)(a1 + 732) + (*(int *)(a1 + 736) + (uint64_t)v9) * *(int *)(a1 + 1052)) >> *(_DWORD *)(a1 + 728));
  unsigned int v11 = *(__int16 *)(a1 + 1136);
  else {
    return v11;
  }
}

BOOL sub_10001C3EC(uint64_t a1, uint64_t a2, char *a3, int a4, int a5)
{
  int v7 = "bamp2";
  if (!a5) {
    int v7 = "bamp0";
  }
  if (a4) {
    unsigned int v8 = "bamp1";
  }
  else {
    unsigned int v8 = (char *)v7;
  }
  uint64_t v9 = sub_1000BDA88(a2, v8, a3);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)(a1 + 984);
    if ((!v12 || !*(void *)(v12 + 168))
      && !*(_DWORD *)(a1 + 2008)
      && (!*(_DWORD *)(a1 + 1004) || !*(void *)(a1 + 528)))
    {
      if (!sub_1000BDB78(v9, *(_DWORD *)(a1 + 2000), v10)) {
        goto LABEL_100;
      }
      if (*(_DWORD *)(a1 + 2000))
      {
        int v16 = *(_DWORD *)(a1 + 1120) * *(_DWORD *)(a1 + 1184);
        int v17 = *(_DWORD *)(a1 + 1032);
        if (*(_DWORD *)(a1 + 996))
        {
          if (v17)
          {
            if (*(_DWORD *)(a1 + 1760)) {
              int v18 = 0;
            }
            else {
              int v18 = *(_DWORD *)(a1 + 1184);
            }
            goto LABEL_23;
          }
        }

        else if (v17)
        {
          int v18 = 0;
LABEL_23:
          int v19 = v16 / 4;
          sub_1000C11AC(*(void *)(a1 + 152));
          int v21 = *(void **)(a1 + 152);
          if (v21) {
            unsigned int v22 = v19;
          }
          else {
            unsigned int v22 = 0;
          }
          sub_1000C11AC(*(void *)(a1 + 72));
          int32x4_t v24 = *(void **)(a1 + 72);
          unsigned int v25 = v24 ? v18 : 0;
          sub_1000C11AC(*(void *)(a1 + 88));
          int v27 = *(void **)(a1 + 88);
          unsigned int v28 = v27 ? v18 : 0;
          sub_1000C11AC(*(void *)(a1 + 40));
          int v30 = *(void **)(a1 + 40);
          unsigned int v31 = v30 ? v18 : 0;
          sub_1000C11AC(*(void *)(a1 + 56));
          unsigned int v33 = *(void **)(a1 + 56);
          unsigned int v34 = v33 ? v18 : 0;
          goto LABEL_58;
        }

        if (*(_DWORD *)(a1 + 1036))
        {
          int v35 = *(_DWORD *)(a1 + 1180);
          int v36 = *(_DWORD *)(a1 + 1132);
          sub_1000C11AC(*(void *)(a1 + 168));
          BOOL v38 = *(void **)(a1 + 168);
          if (v38) {
            unsigned int v39 = *(_DWORD *)(a1 + 1180);
          }
          else {
            unsigned int v39 = 0;
          }
          int v43 = v36 * v35;
          sub_1000C11AC(*(void *)(a1 + 200));
          uint32x4_t v45 = *(void **)(a1 + 200);
          unsigned int v46 = v45 ? v43 : 0;
        }

        else
        {
          sub_1000C11AC(*(void *)(a1 + 24));
          uint32x4_t v41 = *(void **)(a1 + 24);
          if (v41) {
            unsigned int v42 = v16;
          }
          else {
            unsigned int v42 = 0;
          }
        }
      }

LABEL_58:
      if (!*(_DWORD *)(a1 + 1024)) {
        goto LABEL_104;
      }
      int v47 = *(_DWORD *)(a1 + 776);
      int v48 = *(_DWORD *)(a1 + 1120);
      int v49 = *(_DWORD *)(a1 + 1128) * v47;
      int v50 = v47 >= -7 ? v47 + 7 : v47 + 14;
      int v51 = *(_DWORD *)(a1 + 752);
      int v53 = v51 + 8;
      BOOL v52 = v51 < -8;
      int v54 = v51 + 15;
      int v55 = v52 ? v54 : v53;
      sub_1000C11AC(*(void *)(a1 + 792));
      BOOL v57 = *(void **)(a1 + 792);
      unsigned int v58 = v57 ? v49 : 0;
      if (sub_1000BDBCC(v11, v57, v58, 4, v56))
      {
        int v59 = v48 * v47;
        sub_1000C11AC(*(void *)(a1 + 784));
        int32x4_t v61 = *(void **)(a1 + 784);
        unsigned int v62 = v61 ? v59 : 0;
        if (sub_1000BDBCC(v11, v61, v62, 1, v60))
        {
          sub_1000C11AC(*(void *)(a1 + 800));
          uint64_t v64 = *(void **)(a1 + 800);
          unsigned int v65 = v64 ? *(_DWORD *)(a1 + 776) : 0;
          if (sub_1000BDBCC(v11, v64, v65, 4, v63))
          {
            sub_1000C11AC(*(void *)(a1 + 808));
            unsigned int v67 = *(void **)(a1 + 808);
            unsigned int v68 = v67 ? *(_DWORD *)(a1 + 776) : 0;
            if (sub_1000BDBCC(v11, v67, v68, 4, v66))
            {
              sub_1000C11AC(*(void *)(a1 + 816));
              unint64_t v70 = *(void **)(a1 + 816);
              unsigned int v71 = v70 ? *(_DWORD *)(a1 + 776) : 0;
              if (sub_1000BDBCC(v11, v70, v71, 2, v69))
              {
                sub_1000C11AC(*(void *)(a1 + 824));
                unsigned int v73 = *(void **)(a1 + 824);
                unsigned int v74 = v73 ? *(_DWORD *)(a1 + 776) : 0;
                if (sub_1000BDBCC(v11, v73, v74, 2, v72))
                {
                  int v75 = v55 >> 3;
                  sub_1000C11AC(*(void *)(a1 + 760));
                  uint32x4_t v77 = *(void **)(a1 + 760);
                  unsigned int v78 = v77 ? v75 : 0;
                  if (sub_1000BDBCC(v11, v77, v78, 1, v76))
                  {
                    int v79 = v50 >> 3;
                    sub_1000C11AC(*(void *)(a1 + 768));
                    uint32x4_t v81 = *(void **)(a1 + 768);
                    unsigned int v82 = v81 ? v79 : 0;
                    if (sub_1000BDBCC(v11, v81, v82, 1, v80))
                    {
LABEL_104:
                      if (sub_1000BDB78(v11, *(_DWORD *)(a1 + 1992), v15)
                        && sub_1000BDB78(v11, *(_DWORD *)(a1 + 1996), v83))
                      {
                        BOOL v13 = sub_1000BDB78(v11, *(char *)(a1 + 292), v84);
LABEL_101:
                        sub_1000BDB48(v11);
                        return v13;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

  unsigned int v74 = v58 - 1LL;
  int v75 = *(&v103 + v74);
  *(_DWORD *)(a1 + 468) = 0;
  uint8x8_t v76 = *(void (**)(uint64_t, uint64_t))(a1 + 280);
  if (v76)
  {
    v76(a1, v75);
    int v75 = *(&v103 + v74);
  }

  sub_10002613C(v75);
  if (v58 >= 2)
  {
    uint32x4_t v77 = v58 - 2LL;
    unsigned int v78 = *(&v103 + v77);
    *(_DWORD *)(a1 + 468) = 0;
    int v79 = *(void (**)(uint64_t, uint64_t))(a1 + 280);
    if (v79)
    {
      v79(a1, v78);
      unsigned int v78 = *(&v103 + v77);
    }

    uint8x8_t v80 = v78;
    goto LABEL_64;
  }

  return v57;
}

    uint8x8_t v29 = 0LL;
    unsigned int v31 = 0LL;
    LOWORD(v32) = 0;
    BOOL v108 = (_DWORD)a7 == 1;
    *(_DWORD *)(a1 + 544) = a6;
    __na = (_DWORD *)(a1 + 9272);
    *(_DWORD *)(a1 + 9272) = a8;
    *(_DWORD *)(a1 + 9276) = v22;
    int v30 = 1;
    *(_DWORD *)(a1 + 8892) = 1;
    unsigned int v104 = (_DWORD *)(a1 + 9276);
    goto LABEL_59;
  }

  unsigned int v28 = v25;
  if (sub_100025E24(v25, v15))
  {
    unsigned int v25 = v28;
    goto LABEL_51;
  }

  uint32x2_t result = sub_1000C1074(8LL * v15);
  *(void *)(a1 + 9288) = result;
  if (result)
  {
    memcpy((void *)result, v28, __n);
    int32x4_t v61 = sub_1000C1074(8LL * v15);
    *(void *)(a1 + 9296) = v61;
    if (v61)
    {
      if (qword_1000FDCC0) {
        unsigned int v62 = (unsigned __int8 *)(qword_1000FDCC0 + 4220);
      }
      else {
        unsigned int v62 = 0LL;
      }
      sub_1000345B8(0LL, v62, v15, v28, v105);
      uint8x8_t v63 = 0LL;
      *(_DWORD *)(a1 + 9304) = v15;
      do
      {
        *(void *)(*(void *)(a1 + 9296) + v63) = 0LL;
        uint64_t v64 = *(void *)(a1 + 680 + v63);
        if (*(void *)(*(void *)(a1 + 9288) + v63) != v64) {
          *(void *)(*(void *)(a1 + 9296) + v63) = v64;
        }
        v63 += 8LL;
      }

      while (8LL * v15 != v63);
      unsigned int v25 = (uint64_t *)(a1 + 680);
      uint8x8_t v29 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        goto LABEL_52;
      }
      goto LABEL_58;
    }

    uint8x8_t v29 = 0LL;
    unsigned int v31 = 0LL;
    LOWORD(v32) = 0;
    BOOL v108 = (_DWORD)a7 == 1;
    *(_DWORD *)(a1 + 544) = a6;
    __na = (_DWORD *)(a1 + 9272);
    *(_DWORD *)(a1 + 9272) = a8;
    *(_DWORD *)(a1 + 9276) = v22;
    int v30 = 1;
    *(_DWORD *)(a1 + 8892) = 1;
    unsigned int v104 = (_DWORD *)(a1 + 9276);
    goto LABEL_59;
  }

  unsigned int v28 = v25;
  if (sub_100025E24(v25, v15))
  {
    unsigned int v25 = v28;
    goto LABEL_51;
  }

  uint32x2_t result = sub_1000C1074(8LL * v15);
  *(void *)(a1 + 9288) = result;
  if (result)
  {
    memcpy((void *)result, v28, __n);
    int32x4_t v61 = sub_1000C1074(8LL * v15);
    *(void *)(a1 + 9296) = v61;
    if (v61)
    {
      if (qword_1000FDCC0) {
        unsigned int v62 = (unsigned __int8 *)(qword_1000FDCC0 + 4220);
      }
      else {
        unsigned int v62 = 0LL;
      }
      sub_1000345B8(0LL, v62, v15, v28, v105);
      uint8x8_t v63 = 0LL;
      *(_DWORD *)(a1 + 9304) = v15;
      do
      {
        *(void *)(*(void *)(a1 + 9296) + v63) = 0LL;
        uint64_t v64 = *(void *)(a1 + 680 + v63);
        if (*(void *)(*(void *)(a1 + 9288) + v63) != v64) {
          *(void *)(*(void *)(a1 + 9296) + v63) = v64;
        }
        v63 += 8LL;
      }

      while (8LL * v15 != v63);
      unsigned int v25 = (uint64_t *)(a1 + 680);
      uint8x8_t v29 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        goto LABEL_52;
      }
      goto LABEL_58;
    }

  if (!v86)
  {
LABEL_61:
    sub_1000CB038(v40, v84);
    sub_1000CB038(v87, v85);
    sub_1000CB038(v88, v85);
    *a12 = v44;
    return 1LL;
  }

  if ((int)v44 < a8)
  {
    unsigned int v82 = (int)v44;
    a9[v82] = v16;
    a10[v82] = -1;
    v102[v82] = 0;
    LODWORD(v44) = v44 + 1;
    goto LABEL_61;
  }

  return 0LL;
}

          int32x2_t v136 = qword_1000FDCC0;
          if (!qword_1000FDCC0) {
            continue;
          }
          if (*(_DWORD *)(qword_1000FDCC0 + 5200)
            && ((int32x4_t v152 = v458[*((int *)v110 + 7 * v135 + 1)], v152 == 8217) || v152 == 39)
            && (int32x4_t v137 = j + 2LL, v147 = (unsigned int *)v110 + 7 * v137, v138 = v147[2], (_DWORD)v138 == 1)
            && (int32x4_t v137 = v458[*((int *)v110 + 7 * v137 + 1)], (_DWORD)v137 == 115))
          {
            int32x4_t v153 = (char *)v110 + 28 * j;
            int32x4_t v135 = *((unsigned int *)v153 + 2);
            *float32x4x3_t v142 = 1;
            *((_DWORD *)v153 + 2) = v135 + 2;
            *((_DWORD *)v153 + 3) = 1;
            *float32x4x2_t v144 = 4;
          }

          else
          {
            if (!*(_DWORD *)(qword_1000FDCC0 + 5204)) {
              continue;
            }
            uint16x8_t v154 = v458[*((int *)v110 + 7 * v135 + 1)];
            if (v154 != 39 && v154 != 8217) {
              continue;
            }
            uint64x2_t v156 = j + 2LL;
            int v147 = (unsigned int *)v110 + 7 * v156;
            *float32x4x2_t v144 = 4;
          }

          goto LABEL_33;
        }

        uint32x4_t v146 = v458[*((int *)v110 + 7 * v135 + 1)];
        if (v146 != 64 && v146 != 33) {
          goto LABEL_51;
        }
        int32x2_t v136 = j + 2LL;
        int v147 = (unsigned int *)v110 + 7 * v136;
        int32x4_t v137 = *v147;
        if ((_DWORD)v137 != 1) {
          goto LABEL_58;
        }
        *((_DWORD *)v110 + 7 * j + 2) += *((_DWORD *)v110 + 7 * v136 + 2) + *((_DWORD *)v110 + 7 * v135 + 2);
        *float32x4x2_t v144 = 4;
        j += 2;
      }

          BOOL v57 = *v54;
          unsigned int v58 = a12[7 * v46 + 1];
LABEL_59:
          int v59 = *v48 + v58;
LABEL_60:
          sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, v57, v59, 0, 0, 1);
          uint8x8_t v60 = a11;
LABEL_72:
          uint8x8_t v29 = (v29 + 1);
          goto LABEL_137;
        }
      }

      else
      {
        uint8x8_t v56 = *(_WORD **)(v108 + 304);
        int v54 = a9;
        if (v56)
        {
          if ((int)sub_1000B3680(v31, v56, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
          {
            int v55 = *(_WORD **)(v108 + 304);
            goto LABEL_66;
          }

          goto LABEL_58;
        }
      }

        unsigned __int32 v101 = sub_1000398FC(*v39);
        goto LABEL_59;
      }

                    unsigned int v71 = 0LL;
                    uint8x8_t v72 = v67;
                  }

                  else
                  {
                    while (1)
                    {
                      uint8x8_t v69 = (char *)sub_1000C0F68(28LL * v67);
                      if (v69) {
                        break;
                      }
                      unint64_t v70 = v68 >> 1;
                      unsigned int v67 = (v68 >> 1) + v156;
                      unsigned int v28 = v68 > 1;
                      v68 >>= 1;
                      if (!v28)
                      {
                        if (!v70) {
                          goto LABEL_142;
                        }
                        goto LABEL_58;
                      }
                    }

                    unsigned int v71 = v69;
                    uint8x8_t v72 = v67;
                  }

                  j__memmove(v71, v54, 28 * v156);
                  sub_1000C0EF8((uint64_t)v54);
                  uint8x8_t v37 = (uint64_t)&v71[28 * v156];
                  v149 = &v71[28 * v72];
                  uint64x2_t v156 = v67;
                  int v54 = v71;
                  unsigned int v62 = &v71[28 * v61 + 28 * v138];
                }

                *(_WORD *)uint8x8_t v37 = v150;
                unsigned int v73 = *((__int16 *)v62 + 8);
                unsigned int v74 = v73 == a2;
                int v75 = v73 - v74;
                *(_WORD *)(v37 + 16) = v73 - v74 + 1;
                j__memmove((void *)(v37 + 18), &v62[2 * (v73 == a2) + 18], 2 * (v73 - v74));
                *(_WORD *)(v37 + 18 + 2LL * v75) = v154;
                *(_WORD *)(v37 + 2) = *v148;
                uint64_t v64 = v146;
                *(_WORD *)(v37 + 4) = *v145;
                *(_DWORD *)(v37 + 8) = *((_DWORD *)v62 + 2);
                *(_DWORD *)(v37 + 12) = v66;
                if (v151 > v66)
                {
                  LODWORD(v76) = qword_1000FDCC0;
                  if (qword_1000FDCC0) {
                    uint8x8_t v76 = *(void *)(qword_1000FDCC0 + 5568);
                  }
                  float64x2_t v157 = v66 + v76;
                  int32x4_t v151 = v66;
                }

                v37 += 28LL;
                ++v153;
              }
            }

            ++v61;
            v62 += 28;
          }

          while (v61 != v58);
        }

        unsigned int v39 = v153;
        if (v153 <= v140) {
          goto LABEL_106;
        }
        goto LABEL_75;
      }
    }

    unsigned int v39 = 0;
    int v7 = 0LL;
    int v36 = (_DWORD *)v37;
    goto LABEL_149;
  }

LABEL_100:
      BOOL v13 = 0LL;
      goto LABEL_101;
    }
  }

  return 0LL;
}

        *uint8x8_t v72 = v9;
        void *v73 = v10;
        return result;
      }

              if (v4)
              {
                int v49 = v11[1] + 1;
                v11[1] = v49;
LABEL_103:
                *(_DWORD *)(v5 + 464) = v11[2] < v49;
                return result;
              }

BOOL sub_10001C7F4( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v10 = "bamp2";
  if (!(_DWORD)a5) {
    uint8x8_t v10 = "bamp0";
  }
  if ((_DWORD)a4) {
    uint64_t v11 = "bamp1";
  }
  else {
    uint64_t v11 = (char *)v10;
  }
  uint64_t v12 = sub_1000BCAE8(a2, v11, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    uint64_t v14 = *(void *)(a1 + 984);
    if ((!v14 || !*(void *)(v14 + 168))
      && !*(_DWORD *)(a1 + 2008)
      && (!*(_DWORD *)(a1 + 1004) || !*(void *)(a1 + 528)))
    {
      if (*(_DWORD *)(a1 + 2000))
      {
        int v17 = *(_DWORD *)(a1 + 1120) * *(_DWORD *)(a1 + 1184);
        int v18 = *(_DWORD *)(a1 + 1032);
        if (*(_DWORD *)(a1 + 996))
        {
          if (v18)
          {
            if (*(_DWORD *)(a1 + 1760)) {
              int v19 = 0;
            }
            else {
              int v19 = *(_DWORD *)(a1 + 1184);
            }
LABEL_23:
            int v20 = v17 / 4;
            unsigned int v22 = (void **)(a1 + 152);
            uint64_t v21 = *(void *)(a1 + 152);
            if (v21)
            {
              sub_1000C11AC(v21);
              if (!sub_1000BCE28(v13, *v22, v20, 4)) {
                goto LABEL_95;
              }
            }

            else
            {
              int v52 = 0;
              int v36 = *v22;
              if (*v22)
              {
                if (v52 != v20) {
                  goto LABEL_95;
                }
              }

              if (v36) {
                *(void *)(a1 + 136) = v36;
              }
            }

            int32x4_t v24 = (void **)(a1 + 72);
            uint64_t v23 = *(void *)(a1 + 72);
            if (v23)
            {
              sub_1000C11AC(v23);
              if (!sub_1000BCE28(v13, *v24, v19, 2)) {
                goto LABEL_95;
              }
            }

            else
            {
              int v52 = 0;
              int v47 = *v24;
              if (*v24)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }

              if (v47) {
                *(void *)(a1 + 64) = v47;
              }
            }

            uint8x8_t v26 = (void **)(a1 + 88);
            uint64_t v25 = *(void *)(a1 + 88);
            if (v25)
            {
              sub_1000C11AC(v25);
              if (!sub_1000BCE28(v13, *v26, v19, 2)) {
                goto LABEL_95;
              }
            }

            else
            {
              int v52 = 0;
              int v48 = *v26;
              if (*v26)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }

              if (v48) {
                *(void *)(a1 + 80) = v48;
              }
            }

            unsigned int v28 = (void **)(a1 + 40);
            uint64_t v27 = *(void *)(a1 + 40);
            if (v27)
            {
              sub_1000C11AC(v27);
              if (!sub_1000BCE28(v13, *v28, v19, 4)) {
                goto LABEL_95;
              }
            }

            else
            {
              int v52 = 0;
              int v51 = *v28;
              if (*v28)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }

              if (v51) {
                *(void *)(a1 + 32) = v51;
              }
            }

            int v30 = (void **)(a1 + 56);
            uint64_t v29 = *(void *)(a1 + 56);
            if (!v29)
            {
              int v52 = 0;
              unsigned int v31 = *v30;
              if (*v30)
              {
                if (v52 != v19) {
                  goto LABEL_95;
                }
              }

              if (v31) {
                *(void *)(a1 + 48) = v31;
              }
              goto LABEL_50;
            }

LABEL_41:
            sub_1000C11AC(v29);
            if (!sub_1000BCE28(v13, *v30, v19, 4)) {
              goto LABEL_95;
            }
            goto LABEL_50;
          }
        }

        else if (v18)
        {
          int v19 = 0;
          goto LABEL_23;
        }

        if (!*(_DWORD *)(a1 + 1036))
        {
          BOOL v38 = (void **)(a1 + 24);
          uint64_t v37 = *(void *)(a1 + 24);
          if (v37)
          {
            sub_1000C11AC(v37);
            if (!sub_1000BCE28(v13, *v38, v17, 1)) {
              goto LABEL_95;
            }
          }

          else
          {
            int v52 = 0;
            int v49 = *v38;
            if (*v38)
            {
              if (v52 != v17) {
                goto LABEL_95;
              }
            }

            if (v49) {
              *(void *)(a1 + 16) = v49;
            }
          }

          goto LABEL_50;
        }

        unsigned int v33 = (void *)(a1 + 168);
        uint64_t v32 = *(void *)(a1 + 168);
        int v34 = *(_DWORD *)(a1 + 1180);
        int v35 = *(_DWORD *)(a1 + 1132);
        if (v32)
        {
          sub_1000C11AC(v32);
        }

        else
        {
          int v52 = 0;
          if (*v33)
          {
            if (v52 != *(_DWORD *)(a1 + 1180)) {
              goto LABEL_95;
            }
            *(void *)(a1 + 160) = *v33;
          }
        }

        int v19 = v35 * v34;
        int v30 = (void **)(a1 + 200);
        uint64_t v29 = *(void *)(a1 + 200);
        if (v29) {
          goto LABEL_41;
        }
        int v52 = 0;
        int v50 = *v30;
        if (*v30)
        {
          if (v52 != v19) {
            goto LABEL_95;
          }
        }

        if (v50) {
          *(void *)(a1 + 192) = v50;
        }
      }

  if (*a5 >= *(_DWORD *)v18) {
    return 0LL;
  }
  if (v18 == __dst)
  {
    BOOL v43 = 0LL;
    *(_DWORD *)__dst = *a5;
    return v43;
  }

  v10 -= 1096;
  j__memmove(v18, v18 + 1096, v10 - v18);
  __dst = v18;
  --v9;
  if (!v11)
  {
LABEL_47:
    if (__dst >= v10) {
      goto LABEL_79;
    }
    uint64_t v29 = *a5;
    if (qword_1000FDCC0)
    {
      while (1)
      {
        int v30 = v29 - *(_DWORD *)__dst;
        if (v29 != *(_DWORD *)__dst) {
          goto LABEL_51;
        }
        unsigned int v31 = a5[2];
        uint64_t v32 = *((_DWORD *)__dst + 2);
        if ((_DWORD)v31 != v32) {
          break;
        }
        if ((int)v31 >= 1)
        {
          unsigned int v33 = 0LL;
          while (1)
          {
            int v30 = *(unsigned __int16 *)((char *)a5 + v33 + 28) - *(unsigned __int16 *)&__dst[v33 + 28];
            if (v30) {
              break;
            }
            v33 += 2LL;
            if (2 * v31 == v33)
            {
              if (!*(_DWORD *)(qword_1000FDCC0 + 4776)) {
                goto LABEL_52;
              }
              int v34 = 0LL;
              int v35 = 4 * v31;
              while (1)
              {
                int v30 = a5[v34 / 4 + 96] - *(_DWORD *)&__dst[v34 + 384];
                if (v30) {
                  goto LABEL_51;
                }
                v34 += 4LL;
                if (v35 == v34)
                {
                  int v36 = 0LL;
                  while (1)
                  {
                    int v30 = a5[v36 / 4 + 155] - *(_DWORD *)&__dst[v36 + 620];
                    if (v30) {
                      goto LABEL_51;
                    }
                    v36 += 4LL;
                    if (v35 == v36) {
                      goto LABEL_52;
                    }
                  }
                }
              }
            }
          }

    uint64_t v32 = ((unint64_t)v29 - v28) >> 2;
    do
    {
      unsigned int v33 = *v29++;
      LODWORD(v32) = v32 + 1;
    }

    while (v33 != -1);
  }

  if ((int)v32 < a2[8])
  {
    int v34 = (int)v32;
    do
      *(_DWORD *)(*((void *)a2 + 5) + 4 * v34++) = -1;
    while (v34 < a2[8]);
  }

  return result;
}

    int v40 = 0;
    goto LABEL_42;
  }

  if (a6)
  {
    BOOL v38 = 0;
    if (!a7)
    {
      int v41 = a3;
      while (1)
      {
        if (*v37 == -1)
        {
          int v40 = 0;
          goto LABEL_43;
        }

        sub_1000B33F8(*(char **)(a1 + 8), *v37, (uint64_t)v24, v33);
        if (sub_1000CCE40(v24, L"<s>") && sub_1000CCE40(v24, L"<e>"))
        {
          if (v38 >= v57)
          {
            int v40 = 10;
            goto LABEL_43;
          }

          int v49 = v38;
          *(_BYTE *)(a6 + v38) = *(_BYTE *)(*(void *)(v35 + 64) + v12);
          if (a8) {
            *(_DWORD *)(a8 + 4LL * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
          }
          ++v38;
          *(_DWORD *)(a5 + 4 * v49) = *v37;
        }

        int v40 = 0;
        ++v37;
        ++v12;
      }
    }

    while (*v37 != -1)
    {
      sub_1000B33F8(*(char **)(a1 + 8), *v37, (uint64_t)v24, v33);
      if (sub_1000CCE40(v24, L"<s>") && sub_1000CCE40(v24, L"<e>"))
      {
        if (v38 >= v57)
        {
LABEL_75:
          int v40 = 10;
          goto LABEL_42;
        }

        int v42 = v38;
        *(_BYTE *)(a6 + v38) = *(_BYTE *)(*(void *)(v35 + 64) + v12);
        *(_DWORD *)(a7 + 4LL * v38) = *(_DWORD *)(*(void *)(v35 + 48) + 4 * v12);
        if (a8) {
          *(_DWORD *)(a8 + 4LL * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
        }
        ++v38;
        *(_DWORD *)(a5 + 4 * v42) = *v37;
      }

      ++v37;
      ++v12;
    }

    goto LABEL_41;
  }

  int v50 = 4LL * (int)v12;
  while (1)
  {
    int v52 = *(_DWORD *)(v36 + v50);
    if (v52 == -1)
    {
      int v40 = 0;
      uint64_t v37 = (unsigned int *)(v36 + v50);
      goto LABEL_80;
    }

    sub_1000B33F8(*(char **)(a1 + 8), v52, (uint64_t)v24, v33);
    if (sub_1000CCE40(v24, L"<s>"))
    {
    }

  uint32x2_t result = 15LL;
  int v20 = *(_WORD **)(a1 + 5520);
  if (v20) {
LABEL_42:
  }
    *int v20 = 0;
LABEL_43:
  *(_DWORD *)(a1 + 5532) = 0;
  return result;
}

      if (v41 >= 1)
      {
        BOOL v43 = v41;
        if ((int)v148 >= 1)
        {
          int v44 = 0LL;
          while (1)
          {
            int v45 = *(__int16 *)(*(void *)(v40 + 8) + 2 * v44);
            if (v151 == -1)
            {
              int v46 = 0;
              if (!*(_WORD *)(*(void *)(v40 + 8) + 2 * v44)) {
                goto LABEL_45;
              }
            }

            else
            {
              int v46 = *(unsigned __int16 *)(sub_100005528(a1, v38, v44) + 2LL * v151);
              if (!v45) {
                goto LABEL_45;
              }
            }

            sub_100004868(a1, v38, v44, v152);
            int v48 = *(void *)(*(void *)(v40 + 24) + 8 * v44);
            int v49 = (double)v45;
            int v50 = -(double)v45;
            int v51 = (double)v46;
            if (v151 == -1) {
              int v51 = 1.0;
            }
            int v52 = v152[0];
            int v53 = v152[0] + v148;
            int v54 = (unint64_t)v20 >= v48 + v145 || v48 >= v147;
            int v55 = v144;
            if (!v54) {
              int v55 = 1;
            }
            BOOL v57 = v55 | v143;
            unsigned int v58 = (unint64_t)v12 >= v48 + v145 || v48 >= v146;
            int v59 = v58 ? v57 : 1;
            if (((v59 | v142) & 1) != 0)
            {
LABEL_75:
              int32x4_t v61 = 0LL;
            }

            else
            {
              unsigned int v74 = vdupq_n_s32(v45);
              if (v148 < 0x10)
              {
                int v75 = 0LL;
LABEL_85:
                int32x4_t v107 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50, 0);
                BOOL v108 = (uint64_t *)(v52 + v75);
                BOOL v109 = (int16x8_t *)(v48 + 2 * v75);
                uint64_t v110 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0);
                uint32x4_t v111 = (float64x2_t *)(a2 + 8 * v75);
                int32x4_t v112 = (float64x2_t *)((char *)v20 + 8 * v75);
                int32x4_t v113 = (int8x16_t *)&v12->f64[v75];
                uint32x4_t v114 = v75 - v140;
                do
                {
                  uint32x4_t v115 = *v108++;
                  v47.i64[0] = v115;
                  uint64_t v116 = *v109++;
                  signed __int32 v117 = vaddw_s16( vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1000F0330)),  *(int16x4_t *)v116.i8);
                  uint32x2_t v118 = vaddw_high_s16(vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1000F0320)), v116);
                  v119.i64[0] = v118.i32[2];
                  v119.i64[1] = v118.i32[3];
                  int32x4_t v120 = vcvtq_f64_s64(v119);
                  v119.i64[0] = v117.i32[2];
                  v119.i64[1] = v117.i32[3];
                  int32x2_t v121 = vcvtq_f64_s64(v119);
                  v119.i64[0] = v118.i32[0];
                  v119.i64[1] = v118.i32[1];
                  int32x2_t v122 = vcvtq_f64_s64(v119);
                  v119.i64[0] = v117.i32[0];
                  v119.i64[1] = v117.i32[1];
                  int32x2_t v124 = v111[2];
                  int32x2_t v123 = v111[3];
                  int32x4_t v126 = *v111;
                  int32x4_t v125 = v111[1];
                  v111 += 4;
                  int32x4_t v127 = vmlaq_f64(vcvtq_f64_s64(v119), v126, v107);
                  int32x4_t v128 = vmlaq_f64(v122, v124, v107);
                  int32x4_t v129 = vmlaq_f64(v121, v125, v107);
                  int32x4_t v130 = vmlaq_f64(v120, v123, v107);
                  v112[2] = v128;
                  v112[3] = v130;
                  int8x8_t *v112 = v127;
                  v112[1] = v129;
                  v112 += 4;
                  int v47 = (int8x16_t)vmulq_n_f64(vdivq_f64(v128, v110), v51);
                  v113[2] = v47;
                  v113[3] = (int8x16_t)vmulq_n_f64(vdivq_f64(v130, v110), v51);
                  *(float64x2_t *)int32x4_t v113 = vmulq_n_f64(vdivq_f64(v127, v110), v51);
                  v113[1] = (int8x16_t)vmulq_n_f64(vdivq_f64(v129, v110), v51);
                  v113 += 4;
                  v114 += 8LL;
                }

                while (v114);
                int32x4_t v61 = v140;
                if (v140 == v148) {
                  goto LABEL_44;
                }
                goto LABEL_76;
              }

              uint8x8_t v76 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50, 0);
              uint32x4_t v77 = v141;
              unsigned int v78 = v12;
              int v79 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0);
              uint8x8_t v80 = v20;
              uint32x4_t v81 = (float64x2_t *)a2;
              unsigned int v82 = (int8x16_t *)v152[0];
              uint8x8_t v83 = *(int16x8_t **)(*(void *)(v40 + 24) + 8 * v44);
              do
              {
                uint8x8_t v84 = *v82++;
                unsigned int v85 = *v83;
                unsigned int v86 = v83[1];
                v83 += 2;
                unsigned int v87 = vaddw_high_s16(vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v84, (int8x16_t)xmmword_1000F0300)), v86);
                unint64_t v88 = vaddw_s16( vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v84, (int8x16_t)xmmword_1000F0330)),  *(int16x4_t *)v85.i8);
                unint64_t v89 = vaddw_high_s16(vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v84, (int8x16_t)xmmword_1000F0320)), v85);
                unint64_t v90 = vaddw_s16( vmulq_s32(v74, (int32x4_t)vqtbl1q_s8(v84, (int8x16_t)xmmword_1000F0310)),  *(int16x4_t *)v86.i8);
                v91.i64[0] = v90.i32[2];
                v91.i64[1] = v90.i32[3];
                BOOL v92 = v91;
                v91.i64[0] = v89.i32[2];
                v91.i64[1] = v89.i32[3];
                BOOL v93 = vcvtq_f64_s64(v91);
                v91.i64[0] = v88.i32[2];
                v91.i64[1] = v88.i32[3];
                uint64_t v94 = vcvtq_f64_s64(v91);
                v91.i64[0] = v87.i32[2];
                v91.i64[1] = v87.i32[3];
                uint32x4_t v95 = v91;
                v91.i64[0] = v90.i32[0];
                v91.i64[1] = v90.i32[1];
                int32x4_t v96 = vcvtq_f64_s64(v91);
                v91.i64[0] = v89.i32[0];
                v91.i64[1] = v89.i32[1];
                int32x4_t v97 = vcvtq_f64_s64(v91);
                v91.i64[0] = v88.i32[0];
                v91.i64[1] = v88.i32[1];
                uint32x4_t v98 = v91;
                v91.i64[0] = v87.i32[0];
                v91.i64[1] = v87.i32[1];
                uint32x4_t v99 = vmlaq_f64(vcvtq_f64_s64(v91), v81[6], v76);
                uint64_t v100 = vmlaq_f64(vcvtq_f64_s64(v98), *v81, v76);
                unsigned __int32 v101 = vmlaq_f64(v97, v81[2], v76);
                unsigned int v102 = vmlaq_f64(v96, v81[4], v76);
                unsigned int v103 = vmlaq_f64(vcvtq_f64_s64(v95), v81[7], v76);
                unsigned int v104 = vmlaq_f64(v94, v81[1], v76);
                unsigned int v105 = vmlaq_f64(v93, v81[3], v76);
                unint64_t v106 = vmlaq_f64(vcvtq_f64_s64(v92), v81[5], v76);
                v80[4] = v102;
                v80[5] = v106;
                v80[2] = v101;
                v80[3] = v105;
                *uint8x8_t v80 = v100;
                v80[1] = v104;
                v80[6] = v99;
                v80[7] = v103;
                v78[4] = vmulq_n_f64(vdivq_f64(v102, v79), v51);
                v78[5] = vmulq_n_f64(vdivq_f64(v106, v79), v51);
                v78[2] = vmulq_n_f64(vdivq_f64(v101, v79), v51);
                v78[3] = vmulq_n_f64(vdivq_f64(v105, v79), v51);
                int v47 = (int8x16_t)vmulq_n_f64(vdivq_f64(v104, v79), v51);
                *unsigned int v78 = vmulq_n_f64(vdivq_f64(v100, v79), v51);
                v78[1] = (float64x2_t)v47;
                v78[6] = vmulq_n_f64(vdivq_f64(v99, v79), v51);
                v78[7] = vmulq_n_f64(vdivq_f64(v103, v79), v51);
                v81 += 8;
                v80 += 8;
                v78 += 8;
                v77 -= 16LL;
              }

              while (v77);
              if (v141 == v148) {
                goto LABEL_44;
              }
              int32x4_t v61 = v141;
              int v75 = v141;
              if ((v148 & 8) != 0) {
                goto LABEL_85;
              }
            }

          int v34 = *v5++;
          unsigned int v33 = v34;
          if (*(_BYTE *)(v4 + v34) == 2)
          {
            int v35 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v33);
            int v36 = *v35;
            uint64_t v13 = v35[1] + ~(_DWORD)v36;
            uint8x8_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v36);
            goto LABEL_43;
          }

          uint64_t v13 = 0;
          do
          {
LABEL_47:
            if (v13)
            {
              --v13;
              BOOL v38 = (unint64_t)(v10 + 1);
              LODWORD(v37) = *v10;
              if (*(_DWORD *)(a1 + 704) == 1) {
                goto LABEL_45;
              }
            }

            else
            {
              int v39 = *v5++;
              uint64_t v37 = v39;
              if (*(_BYTE *)(v4 + v39) != 2)
              {
                if (*(_DWORD *)(a1 + 704) == 1)
                {
                  uint64_t v13 = 0;
                  continue;
                }

                goto LABEL_57;
              }

              int v40 = *(void *)(a1 + 104);
              int v41 = *(unsigned __int16 *)(v40 + 2 * v37);
              uint64_t v13 = *(unsigned __int16 *)(v40 + 2 * v37 + 2) + ~(_DWORD)v41;
              uint8x8_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v41);
              BOOL v38 = (unint64_t)(v10 + 1);
              LODWORD(v37) = *v10;
              if (*(_DWORD *)(a1 + 704) == 1)
              {
LABEL_45:
                uint8x8_t v10 = (unsigned __int8 *)v38;
                continue;
              }
            }

            if (v13)
            {
              --v13;
              v10 += 2;
              goto LABEL_59;
            }

            uint8x8_t v10 = (unsigned __int8 *)v38;
LABEL_57:
            int v42 = *v5++;
            BOOL v38 = v42;
            if (*(_BYTE *)(v4 + v42) != 2)
            {
              uint64_t v13 = 0;
              goto LABEL_61;
            }

            BOOL v43 = *(void *)(a1 + 104);
            int v44 = *(unsigned __int16 *)(v43 + 2 * v38);
            uint64_t v13 = *(unsigned __int16 *)(v43 + 2 * v38 + 2) + ~(_DWORD)v44;
            BOOL v38 = *(void *)(a1 + 88) + v44;
            uint8x8_t v10 = (unsigned __int8 *)(v38 + 1);
LABEL_59:
            LODWORD(v38) = *(unsigned __int8 *)v38;
LABEL_61:
            LODWORD(v37) = v37 | ((_DWORD)v38 << 8);
          }

          while ((int)v37 < *(_DWORD *)(a1 + 692));
          ++v22;
        }

        while (v22 != (_DWORD)v14);
      }

      return ((_DWORD)v5 - (_DWORD)a3);
    case 2:
    case 4:
      return 1LL;
    case 3:
      return *(unsigned int *)(a1 + 36);
    case 5:
      return *(unsigned int *)(a1 + 44);
    case 6:
      return *(unsigned int *)(a1 + 48);
    default:
      return 0LL;
  }

  if (a3 == 4)
  {
    uint64_t v37 = *(int *)(a1 + 208);
    if ((_DWORD)v37)
    {
      BOOL v38 = 0;
      while (1)
      {
        while (1)
        {
          int v39 = v37 - 1;
          if (v37 - 1 < 0) {
            int v39 = v37;
          }
          int v40 = v39 >> 1;
          int v41 = *(unsigned __int16 *)(*(void *)(a1 + 216) + 2LL * (v38 + (int)v40));
          if (v41 <= v64) {
            break;
          }
          uint64_t v37 = (int)v40;
          if (!(_DWORD)v40) {
            goto LABEL_53;
          }
        }

        int v42 = v38 + (int)v40;
        if (v41 == v64) {
          break;
        }
        v37 -= (int)v40 + 1;
        BOOL v38 = v42 + 1;
        if (!v37) {
          goto LABEL_53;
        }
      }

      if ((_DWORD)v42 != -1)
      {
        BOOL v43 = *(void *)(a1 + 232);
        goto LABEL_69;
      }
    }
  }

  *a5 = v10;
  return result;
}

          uint32x2_t v118 = 0LL;
          if (a12) {
            goto LABEL_28;
          }
          goto LABEL_42;
        }

      a2 = *v74;
    }
  }

  CFRelease(theString);
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

LABEL_95:
      BOOL v15 = 0LL;
      goto LABEL_96;
    }
  }

  return 0LL;
}

void *sub_10001CD48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (*(_DWORD *)(a1 + 752) - *(_DWORD *)(a1 + 1884));
  uint64_t v11 = sub_1000CAFC0(*(int *)(a1 + 1100), a2, a3, a4, a5, a6, a7, a8);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0LL; i != v10; ++i)
    {
      int v19 = *(_DWORD *)(a1 + 1884);
      uint64_t v20 = *(void *)(a1 + 760);
      uint64_t v21 = (unsigned __int16)(v19 + i) >> 3;
      int v22 = *(unsigned __int8 *)(v20 + v21);
      int v23 = byte_1000F166C[(v19 + (int)i) & 7LL];
      if (*(unsigned __int8 *)(a2 + i) == 255 && (v23 & v22) != 0)
      {
        int v25 = *(_DWORD *)(a1 + 1096);
        if (v25 >= 1)
        {
          int v26 = 0;
          __int16 v27 = v19 + i;
          do
          {
            sub_10001CE7C( a1,  (unsigned __int16)(v26++ + *(_DWORD *)(a1 + 1072) + v25 * (v27 - *(_WORD *)(a1 + 1884))),  0,  (uint64_t)v11,  v12,  v13,  v14,  v15,  v16,  v17);
            int v25 = *(_DWORD *)(a1 + 1096);
          }

          while (v26 < v25);
          uint64_t v20 = *(void *)(a1 + 760);
          LOBYTE(v22) = *(_BYTE *)(v20 + v21);
        }

        *(_BYTE *)(v20 + v21) = v22 & ~(_BYTE)v23;
      }
    }
  }

  return sub_1000CB038(v11, *(int *)(a1 + 1100));
}

uint64_t sub_10001CE5C(uint64_t a1, __int16 a2, __int16 a3)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 1072) + a3 + *(_DWORD *)(a1 + 1096) * (a2 - *(_WORD *)(a1 + 1884)));
}

uint64_t sub_10001CE7C( uint64_t a1, unsigned int a2, int a3, uint64_t a4, double a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10)
{
  *(_BYTE *)(*(void *)(a1 + 768) + ((unint64_t)(a2 - *(_DWORD *)(a1 + 1072)) >> 3)) |= byte_1000F166C[(a2 - *(_DWORD *)(a1 + 1072)) & 7LL];
  uint64_t result = sub_100004CE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if (*(_DWORD *)(a1 + 1032))
  {
    int v46 = 0LL;
    sub_100004868(a1, a2, a3, (unint64_t *)&v46);
    int v14 = *v46 * *v46
        + v46[1] * v46[1]
        + v46[2] * v46[2]
        + v46[3] * v46[3]
        + v46[4] * v46[4]
        + v46[5] * v46[5]
        + v46[6] * v46[6]
        + v46[7] * v46[7];
    uint64_t v15 = *(unsigned int *)(a1 + 1100);
    if ((int)v15 < 9)
    {
      unsigned int v17 = 0;
LABEL_19:
      if (*(_DWORD *)(a1 + 1108))
      {
        int v44 = 0LL;
        int v45 = 0LL;
        uint64_t result = sub_100005648(a1, a2, a3, &v45, &v44);
        if (*(_DWORD *)(a1 + 1044))
        {
          *int v45 = v14;
          *int v44 = v17;
        }

        else
        {
          *int v45 = v17 + v14;
        }
      }

      else
      {
        int v44 = 0LL;
        int v45 = 0LL;
        uint64_t result = sub_1000055BC(a1, a2, a3, &v45, &v44);
        if (*(_DWORD *)(a1 + 1044))
        {
          *(_DWORD *)int v45 = v14;
          *(_DWORD *)int v44 = v17;
        }

        else
        {
          *(_DWORD *)int v45 = v17 + v14;
        }
      }

      return result;
    }

    unint64_t v16 = v15 - 8;
    if ((unint64_t)(v15 - 8) < 8)
    {
      unsigned int v17 = 0;
      uint64_t v18 = 8LL;
      goto LABEL_17;
    }

    if (v16 >= 0x20)
    {
      int32x4_t v20 = 0uLL;
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFE0LL;
      int32x4_t v21 = 0uLL;
      int v22 = (uint8x8_t *)(v46 + 24);
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0LL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      int32x4_t v29 = 0uLL;
      do
      {
        uint8x16_t v30 = *(uint8x16_t *)v22[-2].i8;
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
        uint16x8_t v32 = vmovl_high_u8(v30);
        uint16x8_t v33 = vmovl_u8(*v22);
        uint16x8_t v34 = vmovl_high_u8(*(uint8x16_t *)v22->i8);
        int32x4_t v25 = (int32x4_t)vmlal_high_u16((uint32x4_t)v25, v32, v32);
        int32x4_t v24 = (int32x4_t)vmlal_u16((uint32x4_t)v24, *(uint16x4_t *)v32.i8, *(uint16x4_t *)v32.i8);
        int32x4_t v21 = (int32x4_t)vmlal_high_u16((uint32x4_t)v21, v31, v31);
        int32x4_t v20 = (int32x4_t)vmlal_u16((uint32x4_t)v20, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
        int32x4_t v29 = (int32x4_t)vmlal_high_u16((uint32x4_t)v29, v34, v34);
        int32x4_t v28 = (int32x4_t)vmlal_u16((uint32x4_t)v28, *(uint16x4_t *)v34.i8, *(uint16x4_t *)v34.i8);
        int32x4_t v27 = (int32x4_t)vmlal_high_u16((uint32x4_t)v27, v33, v33);
        int32x4_t v26 = (int32x4_t)vmlal_u16((uint32x4_t)v26, *(uint16x4_t *)v33.i8, *(uint16x4_t *)v33.i8);
        v22 += 4;
        v23 -= 32LL;
      }

      while (v23);
      unsigned int v17 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v26, v20), vaddq_s32(v28, v24)),  vaddq_s32(vaddq_s32(v27, v21), vaddq_s32(v29, v25))));
      if (v16 == v19) {
        goto LABEL_19;
      }
      if ((v16 & 0x18) == 0)
      {
        uint64_t v18 = v19 | 8;
LABEL_17:
        int v41 = &v46[v18];
        uint64_t v42 = v15 - v18;
        do
        {
          int v43 = *v41++;
          v17 += v43 * v43;
          --v42;
        }

        while (v42);
        goto LABEL_19;
      }
    }

    else
    {
      unsigned int v17 = 0;
      unint64_t v19 = 0LL;
    }

    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    int32x4_t v35 = 0uLL;
    int32x4_t v36 = (int32x4_t)v17;
    unint64_t v37 = v19 - (v16 & 0xFFFFFFFFFFFFFFF8LL);
    BOOL v38 = (uint8x8_t *)&v46[v19 + 8];
    do
    {
      uint8x8_t v39 = *v38++;
      uint16x8_t v40 = vmovl_u8(v39);
      int32x4_t v35 = (int32x4_t)vmlal_high_u16((uint32x4_t)v35, v40, v40);
      int32x4_t v36 = (int32x4_t)vmlal_u16((uint32x4_t)v36, *(uint16x4_t *)v40.i8, *(uint16x4_t *)v40.i8);
      v37 += 8LL;
    }

    while (v37);
    unsigned int v17 = vaddvq_s32(vaddq_s32(v36, v35));
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8LL)) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }

  return result;
}

uint64_t sub_10001D168(uint64_t a1)
{
  if (*(void *)(a1 + 784) || *(void *)(a1 + 792)) {
    return 1LL;
  }
  int v3 = *(_DWORD *)(a1 + 752);
  int v4 = *(_DWORD *)(a1 + 1884);
  int v5 = *(_DWORD *)(a1 + 1096);
  int v6 = v3 + 8;
  if (v3 < -8) {
    int v6 = v3 + 15;
  }
  uint64_t result = sub_1000C1074((uint64_t)v6 >> 3);
  *(void *)(a1 + 760) = result;
  if (result)
  {
    uint64_t v7 = v5 * (uint64_t)(v3 - v4 + 1);
    int v8 = v7 + 7;
    uint64_t result = sub_1000C1074((uint64_t)v8 >> 3);
    *(void *)(a1 + 768) = result;
    if (result)
    {
      *(_DWORD *)(a1 + 776) = v7;
      *(_OWORD *)(a1 + 800) = 0u;
      *(_OWORD *)(a1 + 816) = 0u;
      if (*(_DWORD *)(a1 + 1032))
      {
        uint64_t result = sub_1000C1074(4LL * *(_DWORD *)(a1 + 1128) * (int)v7);
        *(void *)(a1 + 792) = result;
        if (!result) {
          return result;
        }
        uint64_t v9 = (int)v7;
        if (*(_DWORD *)(a1 + 1108))
        {
          uint64_t v10 = 2LL * (int)v7;
          uint64_t result = sub_1000C1074(2 * v9);
          *(void *)(a1 + 816) = result;
          if (!result) {
            return result;
          }
          uint64_t v11 = (uint64_t *)(a1 + 824);
        }

        else
        {
          uint64_t v10 = 4LL * (int)v7;
          uint64_t result = sub_1000C1074(4 * v9);
          *(void *)(a1 + 800) = result;
          if (!result) {
            return result;
          }
          uint64_t v11 = (uint64_t *)(a1 + 808);
        }

        if (*(_DWORD *)(a1 + 1044))
        {
          uint64_t result = sub_1000C1074(v10);
          *uint64_t v11 = result;
          if (!result) {
            return result;
          }
        }

        else
        {
          *uint64_t v11 = 0LL;
        }
      }

      else
      {
        uint64_t result = sub_1000C1074(*(int *)(a1 + 1120) * v7);
        *(void *)(a1 + 784) = result;
        if (!result) {
          return result;
        }
      }

      return 1LL;
    }
  }

  return result;
}

double sub_10001D29C(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 800);
  sub_1000C0EF8(*(void *)(a1 + 800));
  sub_1000C0EF8(*(void *)(a1 + 816));
  if (*(_DWORD *)(a1 + 1044))
  {
    sub_1000C0EF8(*(void *)(a1 + 808));
    sub_1000C0EF8(*(void *)(a1 + 824));
  }

  sub_1000C0EF8(*(void *)(a1 + 784));
  sub_1000C0EF8(*(void *)(a1 + 792));
  sub_1000C0EF8(*(void *)(a1 + 768));
  sub_1000C0EF8(*(void *)(a1 + 760));
  *(void *)(a1 + 784) = 0LL;
  *(void *)(a1 + 768) = 0LL;
  *(void *)(a1 + 760) = 0LL;
  double result = 0.0;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  return result;
}

uint64_t sub_10001D318(uint64_t result, uint64_t a2)
{
  if (qword_1000FDCC0)
  {
    int v2 = *(_DWORD *)(qword_1000FDCC0 + 592);
    uint64_t v3 = *(void *)(result + 1984);
  }

  else
  {
    int v2 = 0;
    uint64_t v3 = *(void *)(result + 1984);
  }

  uint64_t v4 = *(int *)(v3 + 12);
  int v5 = v4 - v2;
  else {
    int v6 = v4 + 1;
  }
  int v7 = v6 >> 1;
  if ((int)v4 <= v2)
  {
    uint64_t v17 = 0LL;
    int v18 = v7 / v5;
    do
    {
      int v19 = *(unsigned __int8 *)(result + 1771);
      if (v18 < v19) {
        int v19 = v18;
      }
      *(_BYTE *)(*(void *)(v3 + 48) + v17++) = v19;
    }

    while (v17 < *(int *)(v3 + 8));
  }

  else
  {
    uint64_t v8 = v2;
    unint64_t v9 = v4 - v2;
    if (v9 > 1)
    {
      unint64_t v20 = v9 & 0xFFFFFFFFFFFFFFFELL;
      int64_t v21 = v9 - (v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFELL))
      {
        uint64_t v22 = a2 + 8 * v8 + 8;
        do
        {
          int v23 = 0;
          int v24 = 0;
          int32x4_t v25 = (void *)v22;
          unint64_t v26 = v20;
          do
          {
            v23 += *(unsigned __int8 *)(*(v25 - 1) + v21);
            v24 += *(unsigned __int8 *)(*v25 + v21);
            v25 += 2;
            v26 -= 2LL;
          }

          while (v26);
          int v27 = (v24 + v23 + v7) / v5;
          *(_BYTE *)(*(void *)(v3 + 48) + v21++) = v27;
        }

        while (v21 < *(int *)(v3 + 8));
      }

      else
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = a2 + 8 * v8;
        uint8x16_t v30 = (void *)(v29 + 8);
        uint16x8_t v31 = (uint64_t *)(v29 + 16 * (v9 >> 1));
        do
        {
          int v32 = 0;
          int v33 = 0;
          uint16x8_t v34 = v30;
          unint64_t v35 = v20;
          do
          {
            v32 += *(unsigned __int8 *)(*(v34 - 1) + v28);
            v33 += *(unsigned __int8 *)(*v34 + v28);
            v34 += 2;
            v35 -= 2LL;
          }

          while (v35);
          int v36 = v33 + v32;
          int64_t v37 = v21;
          BOOL v38 = v31;
          do
          {
            uint64_t v39 = *v38++;
            v36 += *(unsigned __int8 *)(v39 + v28);
            --v37;
          }

          while (v37);
          int v40 = (v36 + v7) / v5;
          *(_BYTE *)(*(void *)(v3 + 48) + v28++) = v40;
        }

        while (v28 < *(int *)(v3 + 8));
      }
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = (uint64_t *)(a2 + 8 * v8);
      do
      {
        int v12 = 0;
        double v13 = v11;
        unint64_t v14 = v9;
        do
        {
          uint64_t v15 = *v13++;
          v12 += *(unsigned __int8 *)(v15 + v10);
          --v14;
        }

        while (v14);
        int v16 = (v12 + v7) / v5;
        *(_BYTE *)(*(void *)(v3 + 48) + v10++) = v16;
      }

      while (v10 < *(int *)(v3 + 8));
    }
  }

  return result;
}

uint64_t sub_10001D544(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 1984);
  int v3 = *(__int16 *)(*(void *)(v2 + 32) + 2LL * a2);
  if (v3 == -1) {
    return 1LL;
  }
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (*(_DWORD *)(v2 + 40)) {
    int v5 = 0;
  }
  else {
    int v5 = *(__int16 *)(*(void *)(v2 + 32) + 2LL * a2);
  }
  unsigned int v6 = *(_DWORD *)(*(void *)(v2 + 72) + 4LL * v5);
  if ((int)v4 >= 1)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(v2 + 56) + (int)v4 * v3;
    uint64_t v9 = *(void *)(v2 + 64) + 2LL * (int)v4 * v5;
    if (v4 < 8)
    {
      uint64_t v10 = *(unsigned int *)(v2 + 8);
      goto LABEL_20;
    }

    if (v4 >= 0x20)
    {
      uint64_t v12 = v4 & 0x7FFFFFE0;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = (int32x4_t)v6;
      uint64_t v15 = v4 - 1;
      uint64_t v16 = v4 & 0xFFFFFFE0;
      int32x4_t v17 = 0uLL;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      do
      {
        uint64_t v23 = v8 + v15;
        int8x16_t v24 = vrev64q_s8(*(int8x16_t *)(v23 - 15));
        uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v24, 8uLL);
        int8x16_t v26 = vrev64q_s8(*(int8x16_t *)(v23 - 31));
        uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v26, 8uLL);
        uint64_t v28 = v7 + v15;
        int8x16_t v29 = vrev64q_s8(*(int8x16_t *)(v28 - 15));
        uint8x16_t v30 = (uint8x16_t)vextq_s8(v29, v29, 8uLL);
        int8x16_t v31 = vrev64q_s8(*(int8x16_t *)(v28 - 31));
        uint8x16_t v32 = (uint8x16_t)vextq_s8(v31, v31, 8uLL);
        int16x8_t v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v30.i8);
        int16x8_t v34 = (int16x8_t)vsubl_high_u8(v25, v30);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v32.i8);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(v27, v32);
        uint64_t v37 = v9 + 2LL * v15;
        int8x16_t v38 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 14));
        uint16x8_t v39 = (uint16x8_t)vextq_s8(v38, v38, 8uLL);
        int8x16_t v40 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 30));
        uint16x8_t v41 = (uint16x8_t)vextq_s8(v40, v40, 8uLL);
        int8x16_t v42 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 46));
        uint16x8_t v43 = (uint16x8_t)vextq_s8(v42, v42, 8uLL);
        int8x16_t v44 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v37 - 62));
        uint16x8_t v45 = (uint16x8_t)vextq_s8(v44, v44, 8uLL);
        int32x4_t v18 = vmlaq_s32(v18, vmull_high_s16(v34, v34), (int32x4_t)vmovl_high_u16(v41));
        int32x4_t v17 = vmlaq_s32( v17,  vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v41.i8));
        int32x4_t v13 = vmlaq_s32(v13, vmull_high_s16(v33, v33), (int32x4_t)vmovl_high_u16(v39));
        int32x4_t v14 = vmlaq_s32( v14,  vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8));
        int32x4_t v22 = vmlaq_s32(v22, vmull_high_s16(v36, v36), (int32x4_t)vmovl_high_u16(v45));
        int32x4_t v21 = vmlaq_s32( v21,  vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        int32x4_t v20 = vmlaq_s32(v20, vmull_high_s16(v35, v35), (int32x4_t)vmovl_high_u16(v43));
        int32x4_t v19 = vmlaq_s32( v19,  vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8));
        v15 -= 32LL;
        v16 -= 32LL;
      }

      while (v16);
      unsigned int v6 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)),  vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
      if (v12 == v4) {
        goto LABEL_22;
      }
      if ((v4 & 0x18) == 0)
      {
        uint64_t v10 = v4 & 0x1F;
LABEL_20:
        unint64_t v53 = v10 + 1;
        do
        {
          uint64_t v54 = (v53 - 2);
          v6 += (*(unsigned __int8 *)(v8 + v54) - *(unsigned __int8 *)(v7 + v54))
          --v53;
        }

        while (v53 > 1);
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v10 = v4 & 7;
    int32x4_t v46 = 0uLL;
    int32x4_t v47 = (int32x4_t)v6;
    uint64_t v48 = ~v12 + v4;
    uint64_t v49 = v12 - (v4 & 0xFFFFFFF8);
    do
    {
      int16x8_t v50 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v8 - 7 + v48)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v7 - 7 + v48)));
      int8x16_t v51 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v9 - 14 + 2LL * v48));
      uint16x8_t v52 = (uint16x8_t)vextq_s8(v51, v51, 8uLL);
      int32x4_t v46 = vmlaq_s32(v46, vmull_high_s16(v50, v50), (int32x4_t)vmovl_high_u16(v52));
      int32x4_t v47 = vmlaq_s32( v47,  vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
      v48 -= 8LL;
      v49 += 8LL;
    }

    while (v49);
    unsigned int v6 = vaddvq_s32(vaddq_s32(v47, v46));
    if ((v4 & 0x7FFFFFF8) != v4) {
      goto LABEL_20;
    }
  }

LABEL_22:
  int v55 = (int)((double)(int)v6 * *(double *)v2 + 0.5);
  return (__int16)v55;
}

    v38 += 1096;
  }

  if (v37) {
    goto LABEL_10;
  }
  *a5 = v10;
LABEL_66:
  if ((int)v9 >= 1)
  {
    uint16x8_t v52 = 0LL;
    unsigned int v74 = *(void *)(a3 + 16);
    unsigned int v78 = 0;
    unint64_t v53 = a4;
    do
    {
      uint64_t v54 = &a4[1096 * v52];
      int v55 = sub_10009CEDC( v74,  *((_DWORD *)v54 + 6),  (uint64_t)(v54 + 28),  (uint64_t)(v54 + 384),  (uint64_t)(v54 + 323),  (uint64_t)(v54 + 856),  (__int16 *)v54 + 73,  (uint64_t)(v54 + 264),  59,  &v78);
      *((_DWORD *)v54 + 2) = v55;
      int32x4_t v61 = (int *)(v54 + 8);
      if (v55 >= 1)
      {
        unsigned int v62 = 0LL;
        do
        {
          *(_DWORD *)&v53[4 * v62 + 620] = sub_1000315D4( a2,  *(unsigned int *)&v53[4 * v62 + 384],  *(unsigned int *)&v53[4 * v62 + 856],  v56,  v57,  v58,  v59,  v60);
          ++v62;
        }

        while (v62 < *v61);
      }

      *(void *)&a4[1096 * v52++ + 16] = *(void *)(a7 + 8LL * v78);
      v53 += 1096;
    }

    while (v52 != v9);
  }

  qsort(a4, (int)v9, 0x448uLL, (int (__cdecl *)(const void *, const void *))sub_10002426C);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1180)) {
    sub_100024B74(v65, (uint64_t)a4, &v76, a7, a8, a9, v63, v64);
  }
  sub_100024DB8(v65, (unint64_t)a4, &v76);
  double result = (uint64_t)sub_1000CB038(v29, 1096LL);
  *a5 = v76;
  return result;
}

  int32x4_t v21 = (uint64_t *)(a1 + 24);
  int32x4_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      int32x4_t v22 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(a1 + 24) + 8 * v22++));
      while (v22 < *(int *)(a1 + 36));
      int32x4_t v20 = *v21;
    }

    sub_1000C0EF8(v20);
  }

  int8x16_t v24 = 0;
  if (sub_1000BD6CC(v12, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 32), 256, 4, &v24)
    && (!*v21 || v24 == *(_DWORD *)(a1 + 36)))
  {
    uint64_t v15 = v16 == *(_DWORD *)(a1 + 20) + 1;
  }

  else
  {
LABEL_32:
    uint64_t v15 = 0LL;
  }

  sub_1000BCBC8(v12);
  return v15;
}

  if (v23) {
    goto LABEL_23;
  }
  return 4LL;
}

  uint64_t v28 = *v19;
  int8x16_t v29 = *v11;
  double result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v29);
  if ((_DWORD)result == 0x4000) {
    double result = sub_100015BC0(v9, v29);
  }
  *(_WORD *)(a3 + 2) = result + v27 - v8;
  *(_WORD *)(a3 + 6) = v28;
LABEL_29:
  *(_BYTE *)(a3 + 10) = v17;
  *(_BYTE *)(a3 + 11) = *((_BYTE *)a2 + 11);
  return result;
}

  int8x16_t v38 = v4 & 0xFFFFFFFC;
  uint16x8_t v39 = a1[1];
  if (v39 >= 3 && v38)
  {
    int8x16_t v40 = v39 - 2;
    uint16x8_t v41 = (int)v2 / 8;
    int8x16_t v42 = -(v4 & 0xFFFFFFFC);
    uint16x8_t v43 = 4;
    do
    {
      int8x16_t v44 = 0LL;
      uint16x8_t v45 = 4 * v43;
      if (v43 <= 1) {
        int32x4_t v46 = 1LL;
      }
      else {
        int32x4_t v46 = v43;
      }
      v43 *= 2;
      int32x4_t v47 = (__int16 *)*((void *)a1 + 3);
      uint64_t v48 = (int)v43;
      uint64_t v49 = 2LL * v45;
      int16x8_t v50 = a2;
      do
      {
        int8x16_t v51 = v42;
        uint16x8_t v52 = v50;
        do
        {
          unint64_t v53 = &v52[v48];
          uint64_t v54 = v52[v43];
          int v55 = v47[1];
          uint8x8_t v56 = v52[v48 + 1];
          BOOL v57 = *v47;
          unsigned int v58 = v55 * v54 + v57 * v56;
          int v59 = v57 * v54 - v56 * v55;
          uint8x8_t v60 = (*v52 << 15) + 0x8000;
          uint64_t *v53 = (v60 - v59) >> 16;
          *uint16x8_t v52 = (v60 + v59) >> 16;
          int32x4_t v61 = (v52[1] << 15) + 0x8000;
          v53[1] = (v61 - v58) >> 16;
          v52[1] = (v61 + v58) >> 16;
          uint16x8_t v52 = (__int16 *)((char *)v52 + v49);
          v51 += v43;
        }

        while (v51);
        v47 += v41;
        ++v44;
        v50 += 2;
      }

      while (v44 != v46);
      if (v41 >= 0) {
        unsigned int v62 = v41;
      }
      else {
        unsigned int v62 = v41 + 1;
      }
      uint16x8_t v41 = v62 >> 1;
      uint8x8_t v63 = __OFSUB__(v40--, 1);
    }

    while (!((v40 < 0) ^ v63 | (v40 == 0)));
  }

  a2[v2] = *a2 - a2[1];
  a2[(int)v2 + 1] = 0;
  *a2 += a2[1];
  a2[1] = 0;
  uint64_t v64 = v2 - 2;
  unsigned int v65 = 1 - (v38 >> 1);
  uint8x8_t v66 = a2 + 3;
  unsigned int v67 = (__int16 *)(*((void *)a1 + 1) + 6LL);
  unsigned int v68 = &a2[v64 + 1];
  do
  {
    uint8x8_t v69 = *v68 + *v66;
    unint64_t v70 = *v67;
    unsigned int v71 = *(v67 - 1);
    uint8x8_t v72 = *(v66 - 1);
    unsigned int v73 = *(v68 - 1);
    unsigned int v74 = v69 * v70 - (v72 - v73) * v71;
    int v75 = 0x4000 - (v69 * v71 + (v72 - v73) * v70);
    uint8x8_t v76 = ((v73 + v72) << 14) + 0x4000;
    *(v66 - 1) = (v76 + v74) >> 15;
    *(v68 - 1) = (v76 - v74) >> 15;
    uint32x4_t v77 = (*v66 - *v68) << 14;
    *uint8x8_t v66 = (v77 + v75) >> 15;
    v66 += 2;
    *unsigned int v68 = (v75 - v77) >> 15;
    v68 -= 2;
    v67 += 2;
  }

  while (!__CFADD__(v65++, 1));
  return a1[1];
}

    sub_1000C0EF8(*(void *)(v3 + 80));
    sub_1000C0EF8(*(void *)(v3 + 56));
    sub_1000C0EF8(*(void *)(v3 + 40));
    sub_1000C0EF8(*(void *)(v3 + 24));
    sub_1000C0EF8(v3);
    return 0LL;
  }

        if (v10[11])
        {
          int32x4_t v13 = (uint64_t *)*((void *)v10 + 6);
          if (v13) {
            sub_1000A4274(v13);
          }
        }

        sub_1000C0EF8(*((void *)v10 + 8));
        *((void *)v10 + 7) = 0LL;
        *((void *)v10 + 8) = 0LL;
        sub_1000C0EF8(*((void *)v10 + 10));
        *((void *)v10 + 9) = 0LL;
        *((void *)v10 + 10) = 0LL;
        sub_1000C0EF8((uint64_t)v10);
        uint64_t v10 = 0LL;
      }
    }

  if (v4[5])
  {
    sub_100039820(*v6, a2);
    double result = sub_1000398FC(*v6);
    if ((_DWORD)result)
    {
      v4[5] = 0;
      if (!v4[4]) {
        goto LABEL_27;
      }
    }
  }

  if (!v4[3]) {
    return result;
  }
  sub_10003991C(*(void *)(v3 + 520));
  sub_10003991C(*(void *)(v3 + 528));
  uint64_t v10 = *(void *)(v3 + 536);
  return sub_10003991C(v10);
}

  if (((0xFE3uLL >> v3) & 1) != 0) {
    return 0LL;
  }
}

  double result = sub_1000C1744((const void **)v13, (int *)(v13 + 12), (signed int *)(v13 + 8), 8, 8, v19);
  if (!(_DWORD)result) {
    goto LABEL_25;
  }
  if (*(_DWORD *)(v13 + 124))
  {
    double result = sub_1000C1744((const void **)(v13 + 16), (int *)(v13 + 28), (signed int *)(v13 + 24), 8, 12, v19);
    if (!(_DWORD)result) {
      goto LABEL_25;
    }
  }

uint64_t sub_10001D7F4(uint64_t result)
{
  if (*(int *)(result + 576) >= 1)
  {
    uint64_t v1 = 0LL;
    uint64_t v2 = *(void *)(result + 1544);
    uint64_t v3 = *(void *)(result + 1208);
    uint64_t v4 = *(uint8x8_t **)(result + 520);
    uint64_t v5 = *(void *)(result + 616);
    do
    {
      uint64_t v6 = 4 * v1++;
      uint64_t v7 = *(int *)(v5 + v6);
      if ((int)v7 < *(_DWORD *)(v5 + 4 * v1))
      {
        uint64_t v8 = *(void *)(result + 600);
        uint64_t v9 = *(int *)(v8 + v6);
        uint64_t v10 = *(int *)(v8 + 4 * v1);
        if ((int)v9 >= (int)v10)
        {
          do
          {
            *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = 0;
            uint64_t v5 = *(void *)(result + 616);
          }

          while (v7 < *(int *)(v5 + 4 * v1));
        }

        else
        {
          unint64_t v11 = v10 - v9;
          if (v11 >= 0x20)
          {
            unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0LL;
            uint64_t v24 = (v11 & 0xFFFFFFFFFFFFFFE0LL) + v9;
            uint64_t v25 = 2 * v9;
            uint64_t v26 = v3 + 32 + 2 * v9;
            uint8x16_t v27 = (uint8x8_t *)(v2 + 16 + v9);
            uint64_t v28 = (unsigned __int8 *)(v2 + v24);
            int8x16_t v29 = (unsigned __int16 *)(v3 + v25 + (v11 >> 5 << 6));
            do
            {
              int32x4_t v31 = 0uLL;
              int32x4_t v32 = 0uLL;
              int16x8_t v33 = v4 + 2;
              uint64_t v4 = (uint8x8_t *)((char *)v4 + v23);
              int16x8_t v34 = v27;
              unint64_t v35 = v11 & 0xFFFFFFFFFFFFFFE0LL;
              int16x8_t v36 = (uint16x8_t *)v26;
              int32x4_t v37 = 0uLL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              int32x4_t v40 = 0uLL;
              int32x4_t v41 = 0uLL;
              int32x4_t v42 = 0uLL;
              do
              {
                uint8x16_t v43 = *(uint8x16_t *)v33[-2].i8;
                uint8x16_t v44 = *(uint8x16_t *)v34[-2].i8;
                int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8);
                int16x8_t v46 = (int16x8_t)vsubl_high_u8(v43, v44);
                int16x8_t v47 = (int16x8_t)vsubl_u8(*v33, *v34);
                int16x8_t v48 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
                uint16x8_t v49 = v36[-2];
                uint16x8_t v50 = v36[-1];
                uint16x8_t v51 = *v36;
                uint16x8_t v52 = v36[1];
                v36 += 4;
                int32x4_t v38 = vmlaq_s32(v38, vmull_high_s16(v46, v46), (int32x4_t)vmovl_high_u16(v50));
                int32x4_t v37 = vmlaq_s32( v37,  vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8));
                int32x4_t v32 = vmlaq_s32(v32, vmull_high_s16(v45, v45), (int32x4_t)vmovl_high_u16(v49));
                int32x4_t v31 = vmlaq_s32( v31,  vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8));
                int32x4_t v42 = vmlaq_s32(v42, vmull_high_s16(v48, v48), (int32x4_t)vmovl_high_u16(v52));
                int32x4_t v41 = vmlaq_s32( v41,  vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
                int32x4_t v40 = vmlaq_s32(v40, vmull_high_s16(v47, v47), (int32x4_t)vmovl_high_u16(v51));
                int32x4_t v39 = vmlaq_s32( v39,  vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
                v33 += 4;
                v34 += 4;
                v35 -= 32LL;
              }

              while (v35);
              unsigned int v30 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v39, v31), vaddq_s32(v41, v37)),  vaddq_s32(vaddq_s32(v40, v32), vaddq_s32(v42, v38))));
              if (v11 != v23)
              {
                unint64_t v53 = v11 - (v11 & 0xFFFFFFFFFFFFFFE0LL);
                uint64_t v54 = v29;
                int v55 = v28;
                do
                {
                  int v57 = v4->u8[0];
                  uint64_t v4 = (uint8x8_t *)((char *)v4 + 1);
                  int v56 = v57;
                  int v58 = *v55++;
                  int v59 = (v56 - v58) * (v56 - v58);
                  int v60 = *v54++;
                  v30 += v59 * v60;
                  --v53;
                }

                while (v53);
              }

              if (v30 >= 0xFFFF) {
                LOWORD(v30) = -1;
              }
              *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = v30;
              uint64_t v5 = *(void *)(result + 616);
            }

            while (v7 < *(int *)(v5 + 4 * v1));
          }

          else
          {
            uint64_t v12 = (unsigned __int16 *)(v3 + 2 * v9);
            int32x4_t v13 = (unsigned __int8 *)(v2 + v9);
            do
            {
              unsigned int v14 = 0;
              uint64_t v15 = v13;
              uint64_t v16 = v12;
              unint64_t v17 = v11;
              do
              {
                int v19 = v4->u8[0];
                uint64_t v4 = (uint8x8_t *)((char *)v4 + 1);
                int v18 = v19;
                int v20 = *v15++;
                int v21 = (v18 - v20) * (v18 - v20);
                int v22 = *v16++;
                v14 += v21 * v22;
                --v17;
              }

              while (v17);
              if (v14 >= 0xFFFF) {
                LOWORD(v14) = -1;
              }
              *(_WORD *)(*(void *)(result + 632) + 2 * v7++) = v14;
              uint64_t v5 = *(void *)(result + 616);
            }

            while (v7 < *(int *)(v5 + 4 * v1));
          }
        }
      }
    }

    while (v1 < *(int *)(result + 576));
  }

  return result;
}

void sub_10001DA70(uint64_t a1)
{
  if (*(int *)(a1 + 576) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v56 = *(void *)(a1 + 1544);
    int v3 = **(_DWORD **)(a1 + 600);
    int v4 = **(_DWORD **)(a1 + 616);
    uint64_t v5 = *(void *)(a1 + 520);
    do
    {
      ++v2;
      int v6 = *(_DWORD *)(*(void *)(a1 + 600) + 4 * v2);
      int v7 = *(_DWORD *)(*(void *)(a1 + 616) + 4 * v2);
      uint64_t v8 = (v7 + ~v4);
      if (v7 + ~v4 >= 0)
      {
        uint64_t v9 = v3;
        uint64_t v10 = (v6 - v3);
        unint64_t v11 = (_WORD *)(*(void *)(a1 + 632) + 2LL * v4);
        uint64_t v12 = (int)v10;
        if ((int)v10 > 0)
        {
          uint64_t v13 = v56 + v3;
          uint64_t v14 = (v6 + ~v3);
          if (v14 < 7)
          {
            do
            {
              unsigned int v15 = 0;
              uint64_t v16 = -1LL;
              do
              {
                v15 += (*(unsigned __int8 *)(v5 + (v10 + v16))
                      - *(unsigned __int8 *)(v13 + (v10 + v16)))
                --v16;
              }

              while ((int)v10 + (int)v16 + 2 > 1);
              if (v15 >= 0xFFFF) {
                LOWORD(v15) = -1;
              }
              *v11++ = v15;
              v5 += (int)v10;
              BOOL v17 = (int)v8 <= 0;
              LODWORD(v8) = v8 - 1;
            }

            while (!v17);
            goto LABEL_4;
          }

          uint64_t v18 = v14 + 1;
          uint64_t v19 = (v14 + 1) & 0x1FFFFFFF8LL;
          uint64_t v20 = v10 - 1;
          while (2)
          {
            if (v14 >= 0x1F)
            {
              int32x4_t v23 = 0uLL;
              uint64_t v24 = (v14 + 1) & 0x1FFFFFFE0LL;
              int32x4_t v25 = 0uLL;
              uint64_t v26 = v20;
              int32x4_t v27 = 0uLL;
              int32x4_t v28 = 0uLL;
              int32x4_t v29 = 0uLL;
              int32x4_t v30 = 0uLL;
              int32x4_t v31 = 0uLL;
              int32x4_t v32 = 0uLL;
              do
              {
                uint64_t v33 = v5 + v26;
                int8x16_t v34 = vrev64q_s8(*(int8x16_t *)(v33 - 15));
                uint8x16_t v35 = (uint8x16_t)vextq_s8(v34, v34, 8uLL);
                int8x16_t v36 = vrev64q_s8(*(int8x16_t *)(v33 - 31));
                uint8x16_t v37 = (uint8x16_t)vextq_s8(v36, v36, 8uLL);
                uint64_t v38 = v13 + v26;
                int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
                uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
                int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
                uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
                int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v40.i8);
                int16x8_t v44 = (int16x8_t)vsubl_high_u8(v35, v40);
                int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v42.i8);
                int16x8_t v46 = (int16x8_t)vsubl_high_u8(v37, v42);
                int32x4_t v28 = vmlal_high_s16(v28, v44, v44);
                int32x4_t v27 = vmlal_s16(v27, *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
                int32x4_t v25 = vmlal_high_s16(v25, v43, v43);
                int32x4_t v23 = vmlal_s16(v23, *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8);
                int32x4_t v32 = vmlal_high_s16(v32, v46, v46);
                int32x4_t v31 = vmlal_s16(v31, *(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8);
                int32x4_t v30 = vmlal_high_s16(v30, v45, v45);
                int32x4_t v29 = vmlal_s16(v29, *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
                v26 -= 32LL;
                v24 -= 32LL;
              }

              while (v24);
              unsigned int v21 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v29, v23), vaddq_s32(v31, v27)),  vaddq_s32(vaddq_s32(v30, v25), vaddq_s32(v32, v28))));
              if (v18 != ((v14 + 1) & 0x1FFFFFFE0LL))
              {
                uint64_t v22 = (v14 + 1) & 0x1FFFFFFE0LL;
                uint64_t v47 = v22;
                if (((v14 + 1) & 0x18) != 0) {
                  goto LABEL_25;
                }
                goto LABEL_28;
              }
            }

            else
            {
              unsigned int v21 = 0;
              uint64_t v22 = 0LL;
LABEL_25:
              int32x4_t v48 = 0uLL;
              int32x4_t v49 = (int32x4_t)v21;
              uint64_t v50 = v20 - v22;
              uint64_t v51 = v22 - v19;
              do
              {
                int16x8_t v52 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v5 - 7 + v50)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(v13 - 7 + v50)));
                int32x4_t v48 = vmlal_high_s16(v48, v52, v52);
                int32x4_t v49 = vmlal_s16(v49, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8);
                v50 -= 8LL;
                v51 += 8LL;
              }

              while (v51);
              unsigned int v21 = vaddvq_s32(vaddq_s32(v49, v48));
              uint64_t v47 = (v14 + 1) & 0x1FFFFFFF8LL;
              if (v18 != v19)
              {
LABEL_28:
                int v53 = v6 - v9 + 1 - v47;
                uint64_t v54 = v20 - v47;
                do
                {
                  int v55 = *(unsigned __int8 *)(v5 + v54) - *(unsigned __int8 *)(v13 + v54);
                  v21 += v55 * v55;
                  --v53;
                  --v54;
                }

                while (v53 > 1);
              }
            }

            if (v21 >= 0xFFFF) {
              LOWORD(v21) = -1;
            }
            *v11++ = v21;
            v5 += v12;
            BOOL v17 = (int)v8 <= 0;
            LODWORD(v8) = v8 - 1;
            if (v17) {
              goto LABEL_4;
            }
            continue;
          }
        }

        bzero(v11, 2LL * (v7 - v4));
        v5 += v6 + v12 * v8 - v9;
      }

uint64_t sub_10001DD84(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 576);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0LL;
    int v3 = 0;
    int v4 = *(int **)(a1 + 616);
    int v5 = *v4;
    uint64_t v6 = *(void *)(a1 + 632);
    int v7 = *v4;
    while (1)
    {
      int v9 = v7;
      int v7 = v5;
      int v5 = v4[++v2];
      uint64_t v10 = (v5 + ~v7);
      if (v5 + ~v7 < 0)
      {
        int v8 = 0x40000000;
      }

      else
      {
        uint64_t v11 = (v5 - v7);
        if (v11 < 0x10)
        {
          int v8 = 0x40000000;
          uint64_t v12 = (v5 + ~v7);
LABEL_11:
          int v23 = v12 + 1;
          uint64_t v24 = (unsigned __int16 *)(v6 + 2 * v12 + 2LL * v9);
          do
          {
            int v26 = *v24--;
            int v25 = v26;
            if (v8 >= v26) {
              int v8 = v25;
            }
            --v23;
          }

          while (v23 > 0);
          goto LABEL_4;
        }

        uint64_t v12 = v10 - (v11 & 0xFFFFFFF0);
        uint64_t v13 = (int16x8_t *)(v6 - 14 + 2LL * v9 + 2 * v10);
        v14.i64[0] = 0x4000000040000000LL;
        v14.i64[1] = 0x4000000040000000LL;
        uint64_t v15 = v11 & 0xFFFFFFF0;
        v16.i64[0] = 0x4000000040000000LL;
        v16.i64[1] = 0x4000000040000000LL;
        v17.i64[0] = 0x4000000040000000LL;
        v17.i64[1] = 0x4000000040000000LL;
        v18.i64[0] = 0x4000000040000000LL;
        v18.i64[1] = 0x4000000040000000LL;
        do
        {
          int8x16_t v19 = (int8x16_t)vrev64q_s16(*v13);
          uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, v19, 8uLL);
          int8x16_t v21 = (int8x16_t)vrev64q_s16(v13[-1]);
          uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, v21, 8uLL);
          int32x4_t v16 = vminq_s32(v16, (int32x4_t)vmovl_high_u16(v20));
          int32x4_t v14 = vminq_s32(v14, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20.i8));
          int32x4_t v18 = vminq_s32(v18, (int32x4_t)vmovl_high_u16(v22));
          int32x4_t v17 = vminq_s32(v17, (int32x4_t)vmovl_u16(*(uint16x4_t *)v22.i8));
          v13 -= 2;
          v15 -= 16LL;
        }

        while (v15);
        int v8 = vminvq_s32(vminq_s32(vminq_s32(v14, v17), vminq_s32(v16, v18)));
        if ((v11 & 0xFFFFFFF0) != v11) {
          goto LABEL_11;
        }
      }

uint64_t sub_10001DF08(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 576);
  int v4 = *(_DWORD *)(a1 + 1296);
  if (v4 == 5)
  {
    int v5 = 0;
  }

  else
  {
    int v5 = **(_DWORD **)(a1 + 1240);
  }

  uint64_t v6 = *(void *)(a1 + 632);
  int v7 = *(int **)(a1 + 616);
  uint64_t v8 = *(void *)(a1 + 640);
  uint64_t v9 = (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a2) + a3) * (int)v3;
  uint64_t v10 = (unsigned __int8 *)(v8 + v9);
  if ((_DWORD)v3 == 1)
  {
    int v11 = 1;
  }

  else
  {
    int v12 = 0;
    int v11 = v3 - (v3 & 0xFFFFFFFE);
    v10 += v3 & 0xFFFFFFFE;
    uint64_t v13 = (unsigned __int8 *)(v9 + v8 + 1);
    int32x4_t v14 = v7 + 1;
    uint64_t v15 = v3 & 0xFFFFFFFE;
    v7 += v15;
    do
    {
      int v16 = *(v13 - 1);
      int v17 = *v13;
      v13 += 2;
      v5 += *(unsigned __int16 *)(v6 + 2LL * (*(v14 - 1) + v16));
      v12 += *(unsigned __int16 *)(v6 + 2LL * (*v14 + v17));
      v14 += 2;
      v15 -= 2LL;
    }

    while (v15);
    v5 += v12;
    if ((v3 & 0xFFFFFFFE) == v3) {
      goto LABEL_12;
    }
  }

  unsigned int v18 = v11 + 1;
  do
  {
    int v20 = *v7++;
    int v19 = v20;
    int v21 = *v10++;
    v5 += *(unsigned __int16 *)(v6 + 2LL * (v19 + v21));
    --v18;
  }

  while (v18 > 1);
LABEL_12:
  if (v4 == 5)
  {
    unsigned int v22 = *(__int16 *)(a1 + 1136);
    unsigned int v23 = (__int16)((unint64_t)(*(int *)(a1 + 732) + *(int *)(a1 + 1052) * (uint64_t)v5) >> *(_DWORD *)(a1 + 728));
    else {
      return v22;
    }
  }

  else
  {
    unsigned int v25 = *(__int16 *)(a1 + 1136);
    unsigned int v26 = (__int16)(int)((double)v5 * *(double *)(a1 + 8) + 0.5);
    else {
      return v25;
    }
  }

uint64_t sub_10001E048(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 704);
  if (v1)
  {
    uint64_t v2 = result;
    sub_1000C0EF8(*v1);
    sub_1000C0EF8(*(void *)(*(void *)(v2 + 704) + 8LL));
    **(void **)(v2 + 704) = 0LL;
    *(void *)(*(void *)(v2 + 704) + 8LL) = 0LL;
    double result = sub_1000C0EF8(*(void *)(v2 + 704));
    *(void *)(v2 + 704) = 0LL;
  }

  return result;
}

uint64_t sub_10001E09C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = 0;
  if (!a3 && qword_1000FDCC0) {
    int v4 = *(_DWORD *)(qword_1000FDCC0 + 944);
  }
  int v5 = *(uint64_t **)(a1 + 704);
  if (v5)
  {
    sub_1000C0EF8(*v5);
    sub_1000C0EF8(*(void *)(*(void *)(a1 + 704) + 8LL));
    **(void **)(a1 + 704) = 0LL;
    *(void *)(*(void *)(a1 + 704) + 8LL) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 704));
    *(void *)(a1 + 704) = 0LL;
  }

  uint64_t v6 = 4LL * *(int *)(a1 + 576);
  uint64_t v7 = *(int *)(*(void *)(a1 + 616) + v6);
  uint64_t v8 = *(int *)(*(void *)(a1 + 584) + v6);
  uint64_t result = sub_1000C1074(16LL);
  *(void *)(a1 + 704) = result;
  if (result)
  {
    *(void *)(*(void *)(a1 + 704) + 8LL) = sub_1000C1074(2 * v8);
    if (*(void *)(*(void *)(a1 + 704) + 8LL) && (**(void **)(a1 + 704) = sub_1000C1074(2 * v7)) != 0LL)
    {
      *(_DWORD *)(a1 + 712) = v4;
      if ((int)v7 >= 1)
      {
        uint64_t v10 = 0LL;
        int v11 = *(_DWORD *)(a1 + 1404) * v4;
        do
        {
          *(_WORD *)(**(void **)(a1 + 704) + v10) = v11;
          v10 += 2LL;
        }

        while (2LL * v7 != v10);
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10001E1C4(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4, __int16 a5)
{
  int v5 = *(_DWORD *)(a1 + 576);
  if (v5 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(uint64_t **)(a1 + 704);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(a1 + 640) + v5 * (*(unsigned __int16 *)(*(void *)(a1 + 1144) + 2LL * a3) + a4);
    do
    {
      uint64_t v11 = *(void *)(a1 + 600);
      uint64_t v12 = 4 * v6;
      uint64_t v13 = *(unsigned __int8 *)(v10 + v6++);
      int v14 = *(_DWORD *)(v11 + 4 * v6);
      int v15 = *(_DWORD *)(v11 + v12);
      uint64_t v16 = *(int *)(*(void *)(a1 + 616) + v12) + v13;
      int v17 = *(_DWORD *)(*(void *)(a1 + 584) + v12);
      uint64_t v18 = 2 * v16;
      int v19 = v14 - v15;
      __int16 v20 = *(_WORD *)(v8 + 2 * v16) + a5;
      *(_WORD *)(v8 + 2 * v16) = v20;
      unsigned __int16 v21 = v20 - 16385;
      if (v14 - v15 < 1)
      {
        if (v21 <= 0x7FFEu) {
          *(_WORD *)(v8 + 2 * v16) = (__int16)(v20 + ((unsigned __int16)(v20 & 0x8000) >> 15)) >> 1;
        }
        continue;
      }

      BOOL v22 = v21 < 0x7FFFu;
      uint64_t v23 = v17 + v19 * (int)v13;
      uint64_t v24 = v23;
      do
      {
        __int16 v25 = *a2++;
        __int16 v26 = *(_WORD *)(v9 + 2 * v24) + (v25 - *(unsigned __int8 *)(*(void *)(a1 + 520) + v24)) * a5;
        *(_WORD *)(v9 + 2 * v24) = v26;
        ++v24;
        --v19;
      }

      while (v19);
      if (v22)
      {
        *(_WORD *)(v8 + v18) = (__int16)(*(_WORD *)(v8 + v18) + (*(_WORD *)(v8 + v18) >> 15)) >> 1;
        uint64_t v27 = (v14 + ~v15);
        if (v27 >= 7)
        {
          uint64_t v30 = v27 + 1;
          uint64_t v28 = (v27 + 1) & 0x1FFFFFFF8LL;
          uint64_t v29 = v28 + v23;
          unsigned int v31 = (uint16x8_t *)(v9 + 2 * v23);
          uint64_t v32 = v28;
          do
          {
            *(int16x8_t *)unsigned int v31 = vshrq_n_s16((int16x8_t)vsraq_n_u16(*v31, *v31, 0xFuLL), 1uLL);
            ++v31;
            v32 -= 8LL;
          }

          while (v32);
          if (v30 == v28) {
            continue;
          }
        }

        else
        {
          LODWORD(v28) = 0;
          uint64_t v29 = v23;
        }

        uint64_t v33 = (_WORD *)(v9 + 2 * v29);
        int v34 = v28 + v15 - v14;
        do
        {
          *uint64_t v33 = (__int16)(*v33 + (*v33 >> 15)) >> 1;
          ++v33;
        }

        while (!__CFADD__(v34++, 1));
      }
    }

    while (v6 < *(int *)(a1 + 576));
  }

  return 1LL;
}

uint64_t sub_10001E36C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 984) + 312LL);
  uint64_t v2 = *(unsigned __int16 **)(v1 + 40);
  int v3 = *v2;
  if (v3 != 0xFFFF) {
    goto LABEL_2;
  }
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(unsigned int *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 80);
  if ((int)v6 > 0)
  {
    LOWORD(v8) = 0;
    uint64_t v9 = *(void *)(result + 1544);
    uint64_t v11 = *(void *)(v1 + 64);
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v12 = v6 - 1;
    uint64_t result = v9 - 7;
    uint64_t v13 = v6 & 0xFFFFFFE0;
    uint64_t v14 = v6 & 0xFFFFFFF8;
    else {
      BOOL v15 = v6 >= 8;
    }
    char v16 = !v15;
    while (1)
    {
      uint64_t v17 = 2LL * (__int16)v8;
      uint64_t v8 = *(__int16 *)(v4 + v17);
      uint64_t v18 = v10 + 2LL * (int)v6 * (int)v8;
      uint64_t v19 = v11 + (int)v6 * (int)v8;
      int v20 = *(_DWORD *)(v7 + 4 * v8);
      if ((v16 & 1) != 0)
      {
        uint64_t v21 = *(unsigned int *)(v1 + 16);
LABEL_24:
        unint64_t v63 = v21 + 1;
        do
        {
          uint64_t v64 = (v63 - 2);
          v20 += (*(unsigned __int8 *)(v19 + v64) - *(unsigned __int8 *)(v9 + v64))
          --v63;
        }

        while (v63 > 1);
        goto LABEL_26;
      }

      if (v6 >= 0x20)
      {
        int32x4_t v23 = 0uLL;
        int32x4_t v24 = (int32x4_t)*(unsigned int *)(v7 + 4 * v8);
        uint64_t v25 = v6 & 0xFFFFFFE0;
        uint64_t v26 = v6 - 1;
        int32x4_t v27 = 0uLL;
        int32x4_t v28 = 0uLL;
        int32x4_t v29 = 0uLL;
        int32x4_t v30 = 0uLL;
        int32x4_t v31 = 0uLL;
        int32x4_t v32 = 0uLL;
        do
        {
          uint64_t v33 = v19 + v26;
          int8x16_t v34 = vrev64q_s8(*(int8x16_t *)(v33 - 15));
          uint8x16_t v35 = (uint8x16_t)vextq_s8(v34, v34, 8uLL);
          int8x16_t v36 = vrev64q_s8(*(int8x16_t *)(v33 - 31));
          uint8x16_t v37 = (uint8x16_t)vextq_s8(v36, v36, 8uLL);
          uint64_t v38 = v9 + v26;
          int8x16_t v39 = vrev64q_s8(*(int8x16_t *)(v38 - 15));
          uint8x16_t v40 = (uint8x16_t)vextq_s8(v39, v39, 8uLL);
          int8x16_t v41 = vrev64q_s8(*(int8x16_t *)(v38 - 31));
          uint8x16_t v42 = (uint8x16_t)vextq_s8(v41, v41, 8uLL);
          int16x8_t v43 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v40.i8);
          int16x8_t v44 = (int16x8_t)vsubl_high_u8(v35, v40);
          int16x8_t v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v42.i8);
          int16x8_t v46 = (int16x8_t)vsubl_high_u8(v37, v42);
          uint64_t v47 = v18 + 2LL * v26;
          int8x16_t v48 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 14));
          uint16x8_t v49 = (uint16x8_t)vextq_s8(v48, v48, 8uLL);
          int8x16_t v50 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 30));
          uint16x8_t v51 = (uint16x8_t)vextq_s8(v50, v50, 8uLL);
          int8x16_t v52 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 46));
          uint16x8_t v53 = (uint16x8_t)vextq_s8(v52, v52, 8uLL);
          int8x16_t v54 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v47 - 62));
          uint16x8_t v55 = (uint16x8_t)vextq_s8(v54, v54, 8uLL);
          int32x4_t v28 = vmlaq_s32(v28, vmull_high_s16(v44, v44), (int32x4_t)vmovl_high_u16(v51));
          int32x4_t v27 = vmlaq_s32( v27,  vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
          int32x4_t v23 = vmlaq_s32(v23, vmull_high_s16(v43, v43), (int32x4_t)vmovl_high_u16(v49));
          int32x4_t v24 = vmlaq_s32( v24,  vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8));
          int32x4_t v32 = vmlaq_s32(v32, vmull_high_s16(v46, v46), (int32x4_t)vmovl_high_u16(v55));
          int32x4_t v31 = vmlaq_s32( v31,  vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v55.i8));
          int32x4_t v30 = vmlaq_s32(v30, vmull_high_s16(v45, v45), (int32x4_t)vmovl_high_u16(v53));
          int32x4_t v29 = vmlaq_s32( v29,  vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8));
          v26 -= 32LL;
          v25 -= 32LL;
        }

        while (v25);
        int v20 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v29, v24), vaddq_s32(v31, v27)),  vaddq_s32(vaddq_s32(v30, v23), vaddq_s32(v32, v28))));
        if (v13 == v6) {
          goto LABEL_26;
        }
        uint64_t v22 = v6 & 0x7FFFFFE0;
        uint64_t v21 = v6 & 0x1F;
        if ((v6 & 0x18) == 0) {
          goto LABEL_24;
        }
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      int32x4_t v56 = 0uLL;
      int32x4_t v57 = (int32x4_t)v20;
      uint64_t v58 = v12 - v22;
      uint64_t v59 = v22 - v14;
      do
      {
        int16x8_t v60 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v19 - 7 + v58)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(result + v58)));
        int8x16_t v61 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v18 - 14 + 2LL * v58));
        uint16x8_t v62 = (uint16x8_t)vextq_s8(v61, v61, 8uLL);
        int32x4_t v56 = vmlaq_s32(v56, vmull_high_s16(v60, v60), (int32x4_t)vmovl_high_u16(v62));
        int32x4_t v57 = vmlaq_s32( v57,  vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
        v58 -= 8LL;
        v59 += 8LL;
      }

      while (v59);
      int v20 = vaddvq_s32(vaddq_s32(v57, v56));
      uint64_t v21 = v6 & 7;
      if (v14 != v6) {
        goto LABEL_24;
      }
LABEL_26:
      int v65 = *(__int16 *)(v5 + v17);
      uint64_t v66 = v10 + 2LL * (int)v6 * v65;
      uint64_t v67 = v11 + (int)v6 * v65;
      int v68 = *(_DWORD *)(v7 + 4LL * v65);
      if ((v16 & 1) != 0)
      {
        uint64_t v69 = *(unsigned int *)(v1 + 16);
      }

      else
      {
        if (v6 < 0x20)
        {
          uint64_t v70 = 0LL;
LABEL_34:
          int32x4_t v104 = 0uLL;
          int32x4_t v105 = (int32x4_t)v68;
          uint64_t v106 = v12 - v70;
          uint64_t v107 = v70 - v14;
          do
          {
            int16x8_t v108 = (int16x8_t)vsubl_u8( (uint8x8_t)vrev64_s8(*(int8x8_t *)(v67 - 7 + v106)),  (uint8x8_t)vrev64_s8(*(int8x8_t *)(result + v106)));
            int8x16_t v109 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v66 - 14 + 2LL * v106));
            uint16x8_t v110 = (uint16x8_t)vextq_s8(v109, v109, 8uLL);
            int32x4_t v104 = vmlaq_s32(v104, vmull_high_s16(v108, v108), (int32x4_t)vmovl_high_u16(v110));
            int32x4_t v105 = vmlaq_s32( v105,  vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v108.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v110.i8));
            v106 -= 8LL;
            v107 += 8LL;
          }

          while (v107);
          int v68 = vaddvq_s32(vaddq_s32(v105, v104));
          uint64_t v69 = v6 & 7;
          if (v14 == v6) {
            goto LABEL_10;
          }
          goto LABEL_37;
        }

        int32x4_t v71 = 0uLL;
        int32x4_t v72 = (int32x4_t)*(unsigned int *)(v7 + 4LL * v65);
        uint64_t v73 = v6 & 0xFFFFFFE0;
        uint64_t v74 = v6 - 1;
        int32x4_t v75 = 0uLL;
        int32x4_t v76 = 0uLL;
        int32x4_t v77 = 0uLL;
        int32x4_t v78 = 0uLL;
        int32x4_t v79 = 0uLL;
        int32x4_t v80 = 0uLL;
        do
        {
          uint64_t v81 = v67 + v74;
          int8x16_t v82 = vrev64q_s8(*(int8x16_t *)(v81 - 15));
          uint8x16_t v83 = (uint8x16_t)vextq_s8(v82, v82, 8uLL);
          int8x16_t v84 = vrev64q_s8(*(int8x16_t *)(v81 - 31));
          uint8x16_t v85 = (uint8x16_t)vextq_s8(v84, v84, 8uLL);
          uint64_t v86 = v9 + v74;
          int8x16_t v87 = vrev64q_s8(*(int8x16_t *)(v86 - 15));
          uint8x16_t v88 = (uint8x16_t)vextq_s8(v87, v87, 8uLL);
          int8x16_t v89 = vrev64q_s8(*(int8x16_t *)(v86 - 31));
          uint8x16_t v90 = (uint8x16_t)vextq_s8(v89, v89, 8uLL);
          int16x8_t v91 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v83.i8, *(uint8x8_t *)v88.i8);
          int16x8_t v92 = (int16x8_t)vsubl_high_u8(v83, v88);
          int16x8_t v93 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v90.i8);
          int16x8_t v94 = (int16x8_t)vsubl_high_u8(v85, v90);
          uint64_t v95 = v66 + 2LL * v74;
          int8x16_t v96 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 14));
          uint16x8_t v97 = (uint16x8_t)vextq_s8(v96, v96, 8uLL);
          int8x16_t v98 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 30));
          uint16x8_t v99 = (uint16x8_t)vextq_s8(v98, v98, 8uLL);
          int8x16_t v100 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 46));
          uint16x8_t v101 = (uint16x8_t)vextq_s8(v100, v100, 8uLL);
          int8x16_t v102 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v95 - 62));
          uint16x8_t v103 = (uint16x8_t)vextq_s8(v102, v102, 8uLL);
          int32x4_t v76 = vmlaq_s32(v76, vmull_high_s16(v92, v92), (int32x4_t)vmovl_high_u16(v99));
          int32x4_t v75 = vmlaq_s32( v75,  vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v92.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8));
          int32x4_t v71 = vmlaq_s32(v71, vmull_high_s16(v91, v91), (int32x4_t)vmovl_high_u16(v97));
          int32x4_t v72 = vmlaq_s32( v72,  vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v91.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8));
          int32x4_t v80 = vmlaq_s32(v80, vmull_high_s16(v94, v94), (int32x4_t)vmovl_high_u16(v103));
          int32x4_t v79 = vmlaq_s32( v79,  vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8));
          int32x4_t v78 = vmlaq_s32(v78, vmull_high_s16(v93, v93), (int32x4_t)vmovl_high_u16(v101));
          int32x4_t v77 = vmlaq_s32( v77,  vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8),  (int32x4_t)vmovl_u16(*(uint16x4_t *)v101.i8));
          v74 -= 32LL;
          v73 -= 32LL;
        }

        while (v73);
        int v68 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v77, v72), vaddq_s32(v79, v75)),  vaddq_s32(vaddq_s32(v78, v71), vaddq_s32(v80, v76))));
        if (v13 == v6) {
          goto LABEL_10;
        }
        uint64_t v70 = v6 & 0x7FFFFFE0;
        uint64_t v69 = v6 & 0x1F;
        if ((v6 & 0x18) != 0) {
          goto LABEL_34;
        }
      }

LABEL_37:
      unint64_t v111 = v69 + 1;
      do
      {
        uint64_t v112 = (v111 - 2);
        v68 += (*(unsigned __int8 *)(v67 + v112) - *(unsigned __int8 *)(v9 + v112))
        --v111;
      }

      while (v111 > 1);
LABEL_10:
      if (v20 > v68) {
        LOWORD(v8) = v65;
      }
      int v3 = v2[(__int16)v8];
      if (v3 != 0xFFFF) {
        goto LABEL_2;
      }
    }
  }

  LOWORD(v113) = 0;
  do
  {
    uint64_t v114 = 2LL * (__int16)v113;
    uint64_t v115 = *(__int16 *)(v4 + v114);
    uint64_t v113 = *(__int16 *)(v5 + v114);
    if (*(_DWORD *)(v7 + 4 * v115) <= *(_DWORD *)(v7 + 4 * v113)) {
      LODWORD(v113) = v115;
    }
    int v3 = v2[(int)v113];
  }

  while (v3 == 0xFFFF);
LABEL_2:
  *(_DWORD *)(v1 + 32) = (__int16)v3;
  return result;
}

  if (!sub_1000BCD38(v25, a3) || !sub_1000BCD38(v25, a4) || !sub_1000BCD38(v25, a5) || !sub_1000BCD38(v25, a6)) {
    goto LABEL_49;
  }
  if (v37 == 2)
  {
    memset(v35, 0, 28);
    sub_100042450(v25, (uint64_t)v35);
    *(int32x2_t *)v30.i8 = vrev64_s32(v35[0]);
    v30.u64[1] = *(unint64_t *)((char *)&v35[1] + 4);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v30, (int32x4_t)xmmword_1000F04C0)))) & 1) != 0
      || *(void *)((char *)&v35[2] + 4) != 0x200000004LL)
    {
      return 0LL;
    }
  }

  v35[0].i32[0] = 0;
  if (!sub_1000BCD38(v25, v35)
    || (int32x4_t v28 = v35[0].i32[0], v35[0].i8[4] = 0, v35[0].i32[0] = 0, !sub_1000BCE28(v25, v35, 4, 1)))
  {
LABEL_49:
    if (sub_1000BCC0C(v25)) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0LL;
    }
    goto LABEL_32;
  }

  sub_1000C896C(v32, (char *)v35, a14);
  if (v28 > 5) {
    return 0LL;
  }
LABEL_8:
  int32x4_t v29 = dword_1000F04D0[v28];
  *a2 = v28;
  v35[0].i32[0] = 0;
  int8x16_t v36 = 0;
  uint64_t v33 = 0LL;
  int8x16_t v34 = 0LL;
  if (!sub_1000BCD38(v25, v35)
    || !sub_1000BCD38(v25, &v36)
    || !sub_1000BCD38(v25, (char *)&v34 + 4)
    || !sub_1000BCD38(v25, &v34)
    || !sub_1000BCD38(v25, (char *)&v33 + 4)
    || !sub_1000BCD38(v25, &v33))
  {
    goto LABEL_25;
  }

  *a7 = v35[0].i32[0];
  *a8 = v36;
  *a9 = HIDWORD(v34);
  if (a11) {
    *a11 = v34;
  }
  if (a12) {
    *a12 = HIDWORD(v33);
  }
  if (a13) {
    *a13 = v33;
  }
  if (!sub_1000BCE28(v25, a17, a16, 1) || (v35[0].i32[0] = 0, !sub_1000BCD38(v25, v35)))
  {
LABEL_25:
    if (sub_1000BCC0C(v25)) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0LL;
    }
    if (!v29) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }

  *a10 = v35[0].i32[0];
  uint64_t v26 = sub_1000BCC0C(v25);
  if (v29)
  {
LABEL_29:
    if (*a5 == *a4) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0LL;
    }
  }

  v233 = 0;
  uint8x16_t v85 = v38;
  uint64_t v86 = 0LL;
  float64x2_t v217 = 0;
  float64x2_t v218 = 0;
  LODWORD(v87) = 0;
  uint8x16_t v88 = 0;
  __unsigned __int16 n = 4 * v85;
  int64x2_t v205 = v73 + 5;
  float64x2_t v213 = v73 + 1;
  int8x16_t v89 = 2;
  v90.i64[0] = 0x100000001LL;
  v90.i64[1] = 0x100000001LL;
  __dst = v223;
  BOOL v224 = a4;
  while (1)
  {
    int16x8_t v91 = v83;
    int16x8_t v92 = v87;
    if (a7)
    {
      if (v86 == v226)
      {
        LODWORD(v83) = 0;
        LODWORD(v87) = 0;
        __dst = v84;
        int8x16_t v84 = v82;
        int8x16_t v82 = 0LL;
        goto LABEL_70;
      }

      int8x16_t v87 = *(void *)(a10 + 8LL * a5[v86 + 1]);
      int16x8_t v93 = sub_100099EFC(v87);
      LODWORD(v83) = v93;
      if (v91 >= v93) {
        int16x8_t v94 = v93;
      }
      else {
        int16x8_t v94 = v91;
      }
      if (!v87)
      {
        __dst = v84;
        int8x16_t v84 = v82;
        int8x16_t v82 = 0LL;
        v90.i64[0] = 0x100000001LL;
        v90.i64[1] = 0x100000001LL;
        goto LABEL_70;
      }

      __dst = v84;
      int8x16_t v84 = v82;
      int8x16_t v82 = (unsigned __int16 *)v87;
      v90.i64[0] = 0x100000001LL;
      v90.i64[1] = 0x100000001LL;
      if (v94 < 2) {
        goto LABEL_51;
      }
    }

    else
    {
      if (v86) {
        memcpy(__dst, v84, 2 * v88 + 2);
      }
      memcpy(v84, v82, 2 * (int)v83 + 2);
      if (v86 == v226)
      {
        LODWORD(v83) = 0;
      }

      else
      {
        uint64_t v95 = a5[v86 + 1];
        if (a15)
        {
          sub_10009B1B8(a15, v95, 0LL, &v235, v236);
          memcpy(v82, v235, 2LL * v236[0]);
          LODWORD(v83) = v236[0];
          if (a12)
          {
            v82[v236[0]] = 0;
            LODWORD(v83) = ++v236[0];
          }
        }

        else
        {
          if (v206)
          {
            uint8x16_t v83 = (uint64_t)v203;
            int8x16_t v96 = sub_1000B9044(v206, v95, v203);
            LODWORD(v99) = v96;
            v236[0] = v96;
            if (a12)
            {
              v203[v96] = 0;
              uint16x8_t v99 = v96 + 1LL;
              v236[0] = v96 + 1;
              v203[v99] = -1;
            }
          }

          else
          {
            uint8x16_t v83 = *(void *)(v204 + 8 * v95);
            LODWORD(v99) = sub_100099EE0(v83);
            v236[0] = v99;
          }

          sub_1000059CC(a3, (unsigned __int16 *)v83, v99, v82, 0LL, 0LL, v97, v98);
          LODWORD(v83) = v236[0];
        }
      }

      v90.i64[0] = 0x100000001LL;
      v90.i64[1] = 0x100000001LL;
      v82[(int)v83] = 0x7FFF;
      else {
        int16x8_t v94 = v91;
      }
      if (v94 < 2)
      {
LABEL_51:
        LODWORD(v87) = 0;
        goto LABEL_70;
      }
    }

    int8x16_t v100 = 0LL;
    int8x16_t v87 = (v94 - 1);
    while (v84[v100] == v82[v100])
    {
      if (v87 == ++v100) {
        goto LABEL_70;
      }
    }

    LODWORD(v87) = v100;
LABEL_70:
    else {
      uint16x8_t v101 = v92;
    }
    if (v91 >= v230) {
      int8x16_t v102 = v230;
    }
    else {
      int8x16_t v102 = v91;
    }
    if (v101 + 1 >= v230) {
      uint16x8_t v103 = v101 + 1;
    }
    else {
      uint16x8_t v103 = v102;
    }
    if (v92 >= v231) {
      int32x4_t v104 = v231;
    }
    else {
      int32x4_t v104 = v92;
    }
    if (v103 <= v231)
    {
      int32x4_t v105 = v103;
    }

    else
    {
      int16x8_t v92 = v104;
      int32x4_t v105 = v231 + 1;
    }

    uint64_t v106 = v233;
    if (v105 < v91) {
      uint64_t v106 = 1;
    }
    v233 = v106;
    if (v105 + v89 - v92 > v228) {
      break;
    }
    if (v86 && !v92)
    {
      memcpy(v220, v221, __n);
      v90.i64[0] = 0x100000001LL;
      v90.i64[1] = 0x100000001LL;
      float64x2_t v218 = v89;
      float64x2_t v217 = v86;
    }

    if (v92 < v105)
    {
      uint64_t v107 = v105 - (uint64_t)v92;
      int16x8_t v108 = v92;
      if (v107 < 8) {
        goto LABEL_96;
      }
      int16x8_t v108 = (v107 & 0xFFFFFFFFFFFFFFF8LL) + v92;
      int8x16_t v109 = (int32x4_t *)&v205[v92];
      uint16x8_t v110 = v107 & 0xFFFFFFFFFFFFFFF8LL;
      do
      {
        unint64_t v111 = vaddq_s32(*v109, v90);
        v109[-1] = vaddq_s32(v109[-1], v90);
        *int8x16_t v109 = v111;
        v109 += 2;
        v110 -= 8LL;
      }

      while (v110);
      if (v107 != (v107 & 0xFFFFFFFFFFFFFFF8LL))
      {
LABEL_96:
        uint64_t v112 = v105 - v108;
        uint64_t v113 = &v213[v108];
        do
        {
          ++*v113++;
          --v112;
        }

        while (v112);
      }
    }

    int8x16_t v89 = v89 - v92 + v105;
    ++v86;
    uint8x16_t v88 = v91;
    if (v86 == v224) {
      goto LABEL_120;
    }
  }

  uint64_t v115 = v218;
  if (v218)
  {
    memcpy(v221, v220, __n);
    uint64_t v116 = v211;
    signed __int32 v117 = v208;
    uint32x2_t v118 = a5;
    signed __int32 v119 = v214;
    int32x4_t v120 = a11;
    LODWORD(v86) = v217;
    sub_1000CB038(v220, v215);
    if (a13) {
      goto LABEL_107;
    }
LABEL_113:
    int32x2_t v121 = v86;
    goto LABEL_121;
  }

  uint64_t v115 = v89;
  uint64_t v116 = v211;
  signed __int32 v117 = v208;
  uint32x2_t v118 = a5;
  signed __int32 v119 = v214;
  int32x4_t v120 = a11;
  sub_1000CB038(v220, v215);
  if (!a13) {
    goto LABEL_113;
  }
LABEL_107:
  int32x2_t v121 = v86;
  if ((_DWORD)v86 != v116) {
    goto LABEL_202;
  }
LABEL_121:
  if (v120)
  {
    if (v115 > v120) {
      goto LABEL_202;
    }
    if (a13)
    {
      int32x4_t v126 = *(_DWORD *)(v117 + 32);
      int32x4_t v127 = v204;
      goto LABEL_129;
    }

    int32x4_t v127 = v204;
    v189 = sub_1000C1074(4LL * v120);
    int32x4_t v130 = v117 + 8 * v119;
    *(void *)(v130 + 616) = v189;
    if (!v189)
    {
LABEL_202:
      sub_1000CB094(v210);
      return 0LL;
    }

    if (++v12 == v11) {
      goto LABEL_43;
    }
    uint64_t v13 = *(void *)(v9 + 9024);
    uint64_t v14 = *(void *)(v13 + 8LL * (v12 >> 8)) + 48LL * v12;
  }

  while (v15 != v12)
  {
    int v20 = *(void *)(v13 + 8LL * (++v12 >> 8));
    uint64_t i = *(unsigned __int16 *)(v20 + 48LL * v12 + 32);
    if (i != 0xFFFF)
    {
      uint64_t v14 = v20 + 48LL * v12;
      goto LABEL_3;
    }
  }

  uint64_t v58 = sub_1000BE644(0xFFFFFFFF, 4, v56);
  uint64_t v59 = *(void *)(*(void *)(a1 + 144) + 120LL);
  if (!v59) {
    goto LABEL_38;
  }
LABEL_23:
  int16x8_t v60 = sub_1000BE644(-1431655765 * ((unint64_t)(v59 - *(void *)(a1 + 128)) >> 1), 4, v58);
  int8x16_t v61 = *(void *)(*(void *)(a1 + 144) + 128LL);
  if (v61)
  {
LABEL_24:
    uint16x8_t v62 = -1431655765 * ((unint64_t)(v61 - *(void *)(a1 + 128)) >> 1);
    goto LABEL_40;
  }

    if (!(_DWORD)v19 && a7 && v17)
    {
      uint64_t v19 = 0LL;
      *a7 = 1;
    }
  }

      CFRelease(v11);
LABEL_38:
      CFReadStreamClose(v9);
      CFRelease(v9);
    }
  }

uint64_t sub_10001E8D8(uint64_t a1, int a2)
{
  return *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 984) + 312LL) + 88LL)
                                  + 2LL
                                  * (*(_DWORD *)(*(void *)(*(void *)(a1 + 984) + 312LL) + 32LL)
                                   + **(_DWORD **)(*(void *)(a1 + 984) + 312LL) * a2));
}

uint64_t sub_10001E8F8(uint64_t a1)
{
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  uint64_t v1 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    unint64_t v2 = (unint64_t)(*(void *)(qword_1000FDCC0 + 5464) + 255LL) >> 8;
  }
  else {
    LODWORD(v2) = 0;
  }
  *(_DWORD *)(a1 + 168) = v2;
  *(_DWORD *)(a1 + 192) = v2;
  *(void *)(a1 + 228) = 0LL;
  *(void *)(a1 + 172) = 0LL;
  *(void *)(a1 + 196) = 0xFFFFFFFF00000000LL;
  *(void *)(a1 + 208) = 0LL;
  if (v1)
  {
    double v3 = *(double *)(v1 + 5472) * (double)*(unint64_t *)(v1 + 5464);
    int v4 = (int)v3 + 510;
    int v5 = v4 >> 8;
  }

  else
  {
    int v5 = 0;
  }

  *(_DWORD *)(a1 + 216) = v5;
  *(_DWORD *)(a1 + 248) = v5;
  *(_DWORD *)(a1 + 280) = v5;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 292) = -1;
  uint64_t v6 = *(int *)(a1 + 88);
  *(_DWORD *)(a1 + 288) = v6 - 1;
  if (v1)
  {
    *(_DWORD *)(a1 + 268) = (unint64_t)(v6 + *(void *)(v1 + 5464) + 255) >> 8;
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(v1 + 808);
  }

  else
  {
    *(_DWORD *)(a1 + 268) = (unint64_t)(v6 + 255) >> 8;
    *(_DWORD *)(a1 + 204) = 0;
  }

  return sub_10001EB98(a1, v6);
}

uint64_t sub_10001E9D0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 172) >= 1)
    {
      uint64_t v2 = 0LL;
      do
      {
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 160) + 8 * v2));
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 184) + 8 * v2++));
      }

      while (v2 < *(int *)(v1 + 172));
    }

    sub_1000C0EF8(*(void *)(v1 + 160));
    sub_1000C0EF8(*(void *)(v1 + 184));
    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v3 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 208) + 8 * v3++));
      while (v3 < *(int *)(v1 + 220));
    }

    sub_1000C0EF8(*(void *)(v1 + 208));
    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v4 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 240) + 8 * v4++));
      while (v4 < *(int *)(v1 + 220));
    }

    sub_1000C0EF8(*(void *)(v1 + 240));
    if (*(_DWORD *)(v1 + 204))
    {
      if (*(int *)(v1 + 264) >= 1)
      {
        uint64_t v5 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 256) + 8 * v5++));
        while (v5 < *(int *)(v1 + 264));
      }

      sub_1000C0EF8(*(void *)(v1 + 256));
    }

    if (*(int *)(v1 + 220) >= 1)
    {
      uint64_t v6 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 272) + 8 * v6++));
      while (v6 < *(int *)(v1 + 220));
    }

    return sub_1000C0EF8(*(void *)(v1 + 272));
  }

  return result;
}

uint64_t sub_10001EB1C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_10001E9D0(result);
    sub_1000C0EF8(v1[10]);
    sub_1000C0EF8(v1[3]);
    sub_1000C0EF8(v1[6]);
    sub_1000C0EF8(v1[13]);
    sub_1000C0EF8(v1[39]);
    sub_1000C0EF8(v1[40]);
    sub_1000C0EF8(v1[17]);
    sub_1000C0EF8(v1[19]);
    sub_1000C0EF8(v1[15]);
    sub_1000C1FE8(v1[38]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_10001EB98(uint64_t a1, int a2)
{
  uint64_t result = 1LL;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 204))
    {
      int v4 = *(_DWORD *)(a1 + 264);
      uint64_t result = sub_1000C1744((const void **)(a1 + 256), (int *)(a1 + 268), (signed int *)(a1 + 264), 8, 2, a2);
      if ((_DWORD)result)
      {
        int v5 = *(_DWORD *)(a1 + 264);
        if (v4 < v5)
        {
          if (*(_DWORD *)(a1 + 204))
          {
            int v6 = v5 << 8;
            if (v6 >= 1)
            {
              for (unsigned int i = 0; i != v6; ++i)
              {
                int v9 = *(_DWORD *)(a1 + 224);
                int v10 = v9 - 1;
                if (v9 < 1)
                {
                  LOWORD(v8) = 0;
                }

                else
                {
                  signed int v8 = 0;
                  do
                  {
                    int v11 = v8 + v10;
                    if (v8 + v10 < 0 != __OFADD__(v8, v10)) {
                      ++v11;
                    }
                    unsigned int v12 = v11 >> 1;
                    if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                                         + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v12 >> 8)) + 2LL * v12) >> 5) & 0x7F8))
                    }
                                             + 2LL
                                             * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                                     + 8LL * (v12 >> 8))
                    else {
                      signed int v8 = v12 + 1;
                    }
                  }

                  while (v8 <= v10);
                }

                *(_WORD *)(*(void *)(*(void *)(a1 + 256) + 8LL * (i >> 8)) + 2LL * i) = v8;
              }
            }
          }
        }

        return 1LL;
      }
    }
  }

  return result;
}

uint64_t sub_10001ECA8(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 0xFFFFFFLL;
  }
  signed int v4 = *(_DWORD *)(a1 + 88);
  if (v4 <= (int)a2)
  {
    unsigned int v5 = (unsigned __int16)(a2 - v4);
    return 0xFFFFFFLL;
  }

  if (*(_DWORD *)a1) {
    return *(_DWORD *)(a1 + 8) + a2;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6)
  {
    int v7 = *(_DWORD *)(a1 + 56);
    int v8 = 0;
    int v9 = v7 - 1;
    if (v7 <= 1)
    {
      uint64_t v10 = *(void *)(a1 + 40);
    }

    else
    {
      uint64_t v10 = *(void *)(a1 + 40);
      do
      {
        if (v8 + v9 + 1 >= 0) {
          int v11 = v8 + v9 + 1;
        }
        else {
          int v11 = v8 + v9 + 2;
        }
        int v12 = v11 >> 1;
        else {
          int v8 = v12;
        }
      }

      while (v8 < v9);
    }

    int v13 = *(unsigned __int16 *)(v10 + 2LL * v8);
    uint64_t result = (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 60) * v8);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = v8 << (*(_DWORD *)(a1 + 64) - 3);
    int v16 = *(unsigned __int8 *)(v14 + v15);
    unsigned int v17 = byte_1000F1674[*(unsigned __int8 *)(v14 + v15)] + v13;
    if (v17 <= a2)
    {
      uint64_t v18 = (unsigned __int8 *)(v15 + v14 + 1);
      do
      {
        LOWORD(v13) = v17;
        uint64_t result = (result + 8);
        int v19 = *v18++;
        int v16 = v19;
        unsigned int v17 = byte_1000F1674[v19] + (unsigned __int16)v17;
      }

      while (v17 <= a2);
    }

    int v20 = byte_1000F166C;
    while (1)
    {
      int v21 = *v20++;
      if ((v21 & v16) != 0)
      {
        LOWORD(v13) = v13 + 1;
      }

      uint64_t result = (result + 1);
    }
  }

  return *(unsigned int *)(v6 + 4LL * a2);
}

uint64_t sub_10001EDF8(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if (a2 >= 0xFFFE)
  {
    if (a2 == 65534) {
      LOWORD(v3) = -2;
    }
    else {
      LOWORD(v3) = -1;
    }
    return (unsigned __int16)v3;
  }

  int v5 = a2 - *(_DWORD *)(a1 + 92);
  if (v5 < 0)
  {
    uint64_t v6 = *(void *)(a1 + 96);
    int v3 = *(unsigned __int16 *)(v6 + 2LL * a2);
    if (!a3) {
      return (unsigned __int16)v3;
    }
    uint64_t v7 = a2;
    while (v7-- >= 1)
    {
      if (v3 != *(unsigned __int16 *)(v6 + 2LL * v7))
      {
        *a3 = a2 - (v7 + 1);
        return (unsigned __int16)v3;
      }
    }

    *a3 = a2;
    return (unsigned __int16)v3;
  }

  else if (v5 <= *(_DWORD *)(a1 + 292))
  {
    uint64_t v9 = v5 >> 8;
    uint64_t v10 = (a2 - *(_BYTE *)(a1 + 92));
    if (a3) {
      *a3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 272) + 8LL * v9) + v10);
    }
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + 8 * v9) + 2 * v10);
  }

  else
  {
    return 0xFFFFLL;
  }

uint64_t sub_10001EECC(uint64_t a1, int a2)
{
  if (a2 == 0xFFFFFF) {
    return 0xFFFFLL;
  }
  if (*(_DWORD *)a1)
  {
    int v2 = *(_DWORD *)(a1 + 8);
    LOWORD(v3) = a2 - v2;
    if (a2 < v2 || *(_DWORD *)(a1 + 88) + v2 <= a2) {
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 88);
      uint64_t v3 = 0LL;
      while (*(_DWORD *)(v5 + 4 * v3) != a2)
      {
        if (v6 == ++v3) {
          goto LABEL_24;
        }
      }
    }

    else
    {
      int v7 = *(_DWORD *)(a1 + 8);
      unsigned int v8 = a2 - v7;
      if (a2 < v7) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 + 12) < a2) {
        goto LABEL_24;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      if ((byte_1000F166C[((_BYTE)a2 - (_BYTE)v7) & 7] & *(_BYTE *)(v9 {
      int v10 = *(_DWORD *)(a1 + 64);
      }
      unsigned int v11 = v8 >> v10;
      __int16 v12 = *(_WORD *)(*(void *)(a1 + 40) + 2LL * (int)(v8 >> v10)) - 1;
      int v13 = v7 + *(_DWORD *)(a1 + 60) * v11;
      char v14 = v13 - 1;
      uint64_t v15 = (int)(v11 << (v10 - 3));
      int v16 = (unsigned __int8 *)(v9 + v15);
      int v17 = v13 + 7;
      if (v13 + 7 < a2)
      {
        int v18 = v13 + 15;
        if (a2 > v13 + 15) {
          int v18 = a2;
        }
        unsigned int v19 = v18 - v13 - 8;
        if (v19 < 8) {
          goto LABEL_39;
        }
        __int16 v20 = 0;
        uint64_t v21 = (v19 >> 3) + 1;
        int v22 = 8 * (v21 & 0x3FFFFFFE);
        v17 += v22;
        v16 += v21 & 0x3FFFFFFE;
        int32x4_t v23 = (unsigned __int8 *)(v15 + v9 + 1);
        uint64_t v24 = v21 & 0x3FFFFFFE;
        do
        {
          uint64_t v25 = *(v23 - 1);
          int v26 = *v23;
          v23 += 2;
          v12 += byte_1000F1674[v25];
          v20 += byte_1000F1674[v26];
          v24 -= 2LL;
        }

        while (v24);
        v12 += v20;
        if ((v21 & 0x3FFFFFFE) == v21)
        {
          v14 += v22;
        }

        else
        {
LABEL_39:
          do
          {
            int v32 = *v16++;
            v12 += byte_1000F1674[v32];
            v17 += 8;
          }

          while (v17 < a2);
          char v14 = v17 - 8;
        }
      }

      LOWORD(v3) = v12 + byte_1000F1674[*v16 & (unint64_t)~(255 << (a2 - v14))];
    }
  }

  if ((_WORD)v3 != 0xFFFF) {
    return (unsigned __int16)v3;
  }
LABEL_24:
  int v27 = *(_DWORD *)(a1 + 176);
  int v28 = v27 - 1;
  if (v27 >= 1)
  {
    int v29 = 0;
    do
    {
      unsigned int v30 = (v28 + v29) >> 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) {
                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 184)
      }
                                                                                       + 8LL
                                                                                       * ((v28 + v29) >> 9))
                                                                           + 2LL * v30) >> 5) & 0x7F8))
                     + 4LL
                     * *(_WORD *)(*(void *)(*(void *)(a1 + 184)
                                                             + 8LL * ((v28 + v29) >> 9))
      else {
        int v29 = v30 + 1;
      }
    }

    while (v29 <= v28);
    if (v29 < v27)
    {
    }
  }

  return 0xFFFFLL;
}

uint64_t sub_10001F130(uint64_t a1, int a2)
{
  int v2 = (int *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 176);
  if (v3 == *(_DWORD *)(a1 + 168) << 8) {
    goto LABEL_2;
  }
  int v7 = (signed int *)(a1 + 172);
  int v8 = *(_DWORD *)(a1 + 172) << 8;
  int v9 = *(_DWORD *)(a1 + 200);
  if (v9 == v3 - 1) {
    unsigned int v10 = *(_DWORD *)(a1 + 176);
  }
  else {
    unsigned int v10 = 0;
  }
  if ((int)v10 < v8)
  {
    while (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * (v10 >> 8)) + 4LL * v10) != 0xFFFFFF)
    {
      if (v8 == ++v10)
      {
        unsigned int v10 = *(_DWORD *)(a1 + 172) << 8;
        break;
      }
    }
  }

  int v4 = *(_DWORD *)(a1 + 88) + v10;
  if (v4 > 65530)
  {
    LOWORD(v4) = 0;
    return (unsigned __int16)v4;
  }

  int v11 = (unsigned __int16)(*(_WORD *)(a1 + 88) + v10);
  if (v11 >= *(_DWORD *)(a1 + 288))
  {
    if (!sub_10001EB98(a1, v11 + 1))
    {
LABEL_2:
      LOWORD(v4) = -1;
      return (unsigned __int16)v4;
    }

    *(_DWORD *)(a1 + 288) = v11;
    int v9 = *(_DWORD *)(a1 + 200);
  }

  if ((int)v10 > v9)
  {
    uint64_t v12 = *(int *)(a1 + 172);
    if ((int)v12 < *v7)
    {
      do
        memset_pattern16(*(void **)(*(void *)(a1 + 160) + 8 * v12++), &unk_1000F03D0, 0x400uLL);
      while (v12 < *v7);
    }

    if (!sub_1000C1744( (const void **)(a1 + 184),  (int *)(a1 + 192),  (signed int *)(a1 + 196),  8,  2,  v10 + 1)) {
      goto LABEL_2;
    }
    *(_DWORD *)(a1 + 200) = v10;
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * (v10 >> 8)) + 4LL * v10) = a2;
  uint64_t v13 = *(unsigned int *)(a1 + 176);
  int v14 = 0;
  int v15 = v13 - 1;
  if ((int)v13 >= 1)
  {
    do
    {
      unsigned int v16 = (v15 + v14) >> 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) {
                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 184)
      }
                                                                                       + 8LL
                                                                                       * ((v15 + v14) >> 9))
                                                                           + 2LL * v16) >> 5) & 0x7F8))
                     + 4LL
                     * *(_WORD *)(*(void *)(*(void *)(a1 + 184)
                                                             + 8LL * ((v15 + v14) >> 9))
      else {
        int v14 = v16 + 1;
      }
    }

    while (v14 <= v15);
  }

  *(_WORD *)(*(void *)(*(void *)(a1 + 184) + 8LL * (v14 >> 8)) + 2LL * v14) = v10;
  ++*(_DWORD *)(a1 + 176);
  return (unsigned __int16)v4;
}

uint64_t sub_10001F368(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 224);
  if (*(_DWORD *)(a1 + 92) + v2 > 65532)
  {
    LOWORD(v3) = -1;
    return (unsigned __int16)v3;
  }

  if (*(_DWORD *)(a1 + 288) <= (signed int)a2)
  {
    *(_DWORD *)(a1 + 288) = a2;
    int v2 = *(_DWORD *)(a1 + 224);
  }

  int v7 = v2 + 1;
  int v8 = (int *)(a1 + 220);
  uint64_t v9 = *(int *)(a1 + 220);
  if (sub_1000C1744((const void **)(a1 + 208), (int *)(a1 + 216), (signed int *)(a1 + 220), 8, 2, v2 + 1))
  {
    if ((int)v9 < *v8)
    {
      *(void *)&__int128 v10 = -1LL;
      *((void *)&v10 + 1) = -1LL;
      do
      {
        int v11 = *(_OWORD **)(*(void *)(a1 + 208) + 8 * v9);
        v11[30] = v10;
        v11[31] = v10;
        v11[28] = v10;
        v11[29] = v10;
        v11[26] = v10;
        v11[27] = v10;
        v11[24] = v10;
        v11[25] = v10;
        v11[22] = v10;
        v11[23] = v10;
        v11[20] = v10;
        v11[21] = v10;
        v11[18] = v10;
        v11[19] = v10;
        v11[16] = v10;
        v11[17] = v10;
        v11[14] = v10;
        v11[15] = v10;
        v11[12] = v10;
        v11[13] = v10;
        v11[10] = v10;
        v11[11] = v10;
        v11[8] = v10;
        v11[9] = v10;
        v11[6] = v10;
        v11[7] = v10;
        v11[4] = v10;
        v11[5] = v10;
        v11[2] = v10;
        v11[3] = v10;
        *int v11 = v10;
        v11[1] = v10;
        ++v9;
      }

      while (v9 < *v8);
    }

    if (sub_1000C1744((const void **)(a1 + 272), (int *)(a1 + 280), (signed int *)(a1 + 284), 8, 1, v7))
    {
      uint64_t v12 = (void *)(a1 + 240);
      if (sub_1000C1744((const void **)(a1 + 240), (int *)(a1 + 248), (signed int *)(a1 + 252), 8, 2, v7))
      {
        if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
        {
          char v13 = 0;
          if (!*(_DWORD *)(a1 + 204))
          {
LABEL_16:
            int v14 = *(_DWORD *)(a1 + 224);
            uint64_t v15 = *(void *)(a1 + 208);
            int v16 = 0;
            int v17 = v14 - 1;
            if (v14 >= 1)
            {
              do
              {
                int v18 = v16 + v17;
                if (v16 + v17 < 0 != __OFADD__(v16, v17)) {
                  ++v18;
                }
                unsigned int v19 = v18 >> 1;
                if (*(unsigned __int16 *)(*(void *)(v15 {
                                                     + (((unint64_t)*(unsigned __int16 *)(*(void *)(*v12 + 8LL * (v19 >> 8))
                }
                                                                                               + 2LL
                                                                                               * v19) >> 5) & 0x7F8))
                                         + 2LL
                                         * *(_WORD *)(*(void *)(*v12 + 8LL * (v19 >> 8))
                else {
                  int v16 = v19 + 1;
                }
              }

              while (v16 <= v17);
            }

            goto LABEL_27;
          }
        }

        else if (*(void *)(a1 + 144))
        {
          char v13 = *(_BYTE *)(*(void *)(a1 + 128) + a2);
          if (!*(_DWORD *)(a1 + 204)) {
            goto LABEL_16;
          }
        }

        else
        {
          uint64_t v29 = *(int *)(a1 + 92);
          uint64_t v30 = *(void *)(a1 + 96);
          if ((int)v29 < 1)
          {
            int v31 = 0;
          }

          else
          {
            int v31 = 0;
            int v32 = v29 - 1;
            do
            {
              int v33 = v32 + v31;
              if (v32 + v31 < 0 != __OFADD__(v32, v31)) {
                ++v33;
              }
              int v34 = v33 >> 1;
              else {
                int v32 = v34 - 1;
              }
            }

            while (v31 <= v32);
          }

          else {
            char v35 = *(_DWORD *)(a1 + 92);
          }
          uint64_t v36 = v31 + 1LL;
          char v37 = v31;
          while (v36 < v29)
          {
            int v38 = *(unsigned __int16 *)(v30 + 2 * v36);
            ++v37;
            ++v36;
            if (v38 != a2) {
              goto LABEL_64;
            }
          }

          char v37 = v35;
LABEL_64:
          char v13 = v37 - v31;
          if (!*(_DWORD *)(a1 + 204)) {
            goto LABEL_16;
          }
        }

        int v16 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8LL * (a2 >> 8)) + 2LL * a2);
        int v14 = *(_DWORD *)(a1 + 224);
        uint64_t v15 = *(void *)(a1 + 208);
LABEL_27:
        if (v16 < v14)
        {
          char v20 = v13 + v14 - v16;
          while (*(unsigned __int16 *)(*(void *)(v15
                                                  + (((unint64_t)*(unsigned __int16 *)(*(void *)(*v12 + 8LL * (v16 >> 8))
                                                                                            + 2LL * v16) >> 5) & 0x7F8))
                                      + 2LL
                                      * *(_WORD *)(*(void *)(*v12 + 8LL * (v16 >> 8))
                                                                  + 2LL * v16)) == a2)
          {
            ++v13;
            if (v14 == ++v16)
            {
              char v13 = v20;
              int v16 = v14;
              break;
            }
          }
        }

        int v21 = *(_DWORD *)(a1 + 292);
        if (v21 < 0)
        {
          unsigned int v22 = 0;
        }

        else
        {
          unsigned int v22 = 0;
          unsigned int v23 = v21 + 1;
          while (*(__int16 *)(*(void *)(v15 + 8LL * (v22 >> 8)) + 2LL * v22) != -1)
          {
            if (v23 == ++v22)
            {
              unsigned int v22 = v23;
              break;
            }
          }
        }

        uint64_t v24 = 8LL * (v22 >> 8);
        *(_WORD *)(*(void *)(v15 + v24) + 2LL * v22) = a2;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 272) + v24) + v22) = v13;
        for (int i = *(_DWORD *)(a1 + 224); i > v16; --i)
          *(_WORD *)(*(void *)(*v12 + 8LL * (i >> 8)) + 2LL * i) = *(_WORD *)(*(void *)(*v12 + 8LL * ((i - 1) >> 8)) + 2LL * (i - 1));
        *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v16 >> 8)) + 2LL * v16) = v22;
        ++*(_DWORD *)(a1 + 224);
        unsigned int v3 = *(_DWORD *)(a1 + 92) + v22;
        if (*(_DWORD *)(a1 + 204))
        {
          signed int v26 = *(_DWORD *)(a1 + 264) << 8;
          unsigned int v27 = a2 + 1;
          if ((int)(a2 + 1) < v26)
          {
            do
            {
              uint64_t v28 = *(void *)(*(void *)(a1 + 256) + 8LL * (v27 >> 8));
              ++*(_WORD *)(v28 + 2LL * v27++);
            }

            while (v26 != v27);
          }
        }

        return (unsigned __int16)v3;
      }
    }
  }

  return 0xFFFFLL;
}

BOOL sub_10001F794(uint64_t a1, unsigned int a2)
{
  return a2 <= 0xFFFD && *(_DWORD *)(a1 + 88) <= (int)a2;
}

uint64_t sub_10001F7B8(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xFFFD) {
    return 0LL;
  }
  signed int v6 = *(_DWORD *)(a1 + 88);
  unsigned int v7 = a2 - v6;
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(v8 + 8LL * (v7 >> 8));
  uint64_t v10 = v7;
  int v11 = *(_DWORD *)(v9 + 4LL * v7);
  if (v11 != 0xFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 176);
    if ((int)v13 <= 0)
    {
      int v14 = 0;
      int v16 = *(void **)(a1 + 184);
    }

    else
    {
      int v14 = 0;
      int v15 = v13 - 1;
      int v16 = *(void **)(a1 + 184);
      do
      {
        unsigned int v17 = (v15 + v14) >> 1;
        if (v11 <= *(_DWORD *)(*(void *)(v8 {
                                          + (((unint64_t)*(unsigned __int16 *)(v16[(v15 + v14) >> 9]
        }
                                                                                    + 2LL * v17) >> 5) & 0x7F8))
                              + 4LL
                              * *(_WORD *)(v16[(v15 + v14) >> 9]
        else {
          int v14 = v17 + 1;
        }
      }

      while (v14 <= v15);
    }

    sub_1000C1CCC(v16, v13, 256, 2, v14 + 1, v13 + ~v14, v14);
    *(_DWORD *)(v9 + 4 * v10) = 0xFFFFFF;
    --*(_DWORD *)(a1 + 176);
    if (a3)
    {
      if (*(_DWORD *)(a1 + 204))
      {
        int v18 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8LL * (a2 >> 8)) + 2LL * a2);
        int v19 = *(_DWORD *)(a1 + 224);
      }

      else
      {
        int v19 = *(_DWORD *)(a1 + 224);
        int v18 = 0;
        int v23 = v19 - 1;
        if (v19 >= 1)
        {
          do
          {
            int v24 = v18 + v23;
            if (v18 + v23 < 0 != __OFADD__(v18, v23)) {
              ++v24;
            }
            unsigned int v25 = v24 >> 1;
            if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                                 + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v25 >> 8))
            }
                                                                                           + 2LL * v25) >> 5) & 0x7F8))
                                     + 2LL
                                     * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v25 >> 8))
            else {
              int v18 = v25 + 1;
            }
          }

          while (v18 <= v23);
        }
      }
    }

    else
    {
      int v19 = *(_DWORD *)(a1 + 224);
      int v18 = 0;
      int v20 = v19 - 1;
      if (v19 >= 1)
      {
        do
        {
          int v21 = v18 + v20;
          if (v18 + v20 < 0 != __OFADD__(v18, v20)) {
            ++v21;
          }
          unsigned int v22 = v21 >> 1;
          if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                               + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v22 >> 8))
          }
                                                                                         + 2LL * v22) >> 5) & 0x7F8))
                                   + 2LL
                                   * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v22 >> 8))
          else {
            int v18 = v22 + 1;
          }
        }

        while (v18 <= v20);
      }
    }

    if (v18 >= v19)
    {
      int v26 = 0;
    }

    else
    {
      int v26 = 0;
      do
      {
        unint64_t v27 = (unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
        uint64_t v28 = *(void *)(*(void *)(a1 + 208) + 8 * v27);
        *(_WORD *)(v28 + 2 * v29) = -1;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 272) + 8 * v27) + v29) = 0;
        int v30 = *(_DWORD *)(a1 + 224) - 1;
        *(_DWORD *)(a1 + 224) = v30;
        ++v26;
      }

      while (v18 < v30);
    }

    while (v18 < *(_DWORD *)(a1 + 224))
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v18 >> 8)) + 2LL * v18) = *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * ((v26 + v18) >> 8)) + 2LL * (v26 + v18));
      ++v18;
    }

    if (a3)
    {
      if (*(_DWORD *)(a1 + 204))
      {
        int v31 = *(_DWORD *)(a1 + 264) << 8;
        if (v31 >= 1)
        {
          for (unsigned int i = 0; i != v31; ++i)
          {
            int v34 = *(_DWORD *)(a1 + 224);
            int v35 = v34 - 1;
            if (v34 < 1)
            {
              LOWORD(v33) = 0;
            }

            else
            {
              signed int v33 = 0;
              do
              {
                int v36 = v33 + v35;
                if (v33 + v35 < 0 != __OFADD__(v33, v35)) {
                  ++v36;
                }
                unsigned int v37 = v36 >> 1;
                if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                                     + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v37 >> 8))
                }
                                                                                               + 2LL
                                                                                               * v37) >> 5) & 0x7F8))
                                         + 2LL
                                         * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                                 + 8LL * (v37 >> 8))
                else {
                  signed int v33 = v37 + 1;
                }
              }

              while (v33 <= v35);
            }

            *(_WORD *)(*(void *)(*(void *)(a1 + 256) + 8LL * (i >> 8)) + 2LL * i) = v33;
          }
        }
      }
    }

    int v38 = *(_DWORD *)(a1 + 200);
    if ((v38 & 0x80000000) == 0)
    {
      while (*(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * (v38 >> 8))
                        + 4LL * v38) == 0xFFFFFF)
      {
        BOOL v39 = v38-- <= 0;
        if (v39)
        {
          int v38 = -1;
          break;
        }
      }
    }

    *(_DWORD *)(a1 + 200) = v38;
    int v40 = *(_DWORD *)(a1 + 292);
    if ((v40 & 0x80000000) == 0)
    {
      while (*(__int16 *)(*(void *)(*(void *)(a1 + 208) + 8LL * (v40 >> 8))
                         + 2LL * v40) == -1)
      {
        BOOL v39 = v40-- <= 0;
        if (v39)
        {
          int v40 = -1;
          break;
        }
      }
    }

    *(_DWORD *)(a1 + 292) = v40;
  }

  return 1LL;
}

uint64_t sub_10001FBA0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 200) + *(_DWORD *)(a1 + 88);
  if (v1 <= 1) {
    LOWORD(v1) = 1;
  }
  return (unsigned __int16)v1;
}

uint64_t sub_10001FBBC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 292) + *(_DWORD *)(a1 + 92));
}

uint64_t sub_10001FBCC(uint64_t a1, unsigned int a2, int16x8_t *a3, int a4)
{
  uint64_t v4 = 0LL;
  if (!a3 || !a4) {
    return v4;
  }
  if (a2 != 65534)
  {
    if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
    {
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v6 = *(void *)(a1 + 144);
      if (v6)
      {
        int v7 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
        signed int v8 = *(unsigned __int16 *)(v6 + 2LL * a2);
        uint64_t v4 = 0LL;
        BOOL v9 = __OFSUB__(v7, 1);
        int v10 = v7 - 1;
        if (v10 < 0 != v9) {
          goto LABEL_43;
        }
      }

      else
      {
        uint64_t v11 = *(int *)(a1 + 92);
        uint64_t v12 = *(void *)(a1 + 96);
        if ((int)v11 < 1)
        {
          signed int v8 = 0;
        }

        else
        {
          signed int v8 = 0;
          signed int v13 = v11 - 1;
          do
          {
            int v14 = v13 + v8;
            if (v13 + v8 < 0 != __OFADD__(v13, v8)) {
              ++v14;
            }
            int v15 = v14 >> 1;
            else {
              signed int v13 = v15 - 1;
            }
          }

          while (v8 <= v13);
        }

        else {
          int v16 = *(_DWORD *)(a1 + 92);
        }
        uint64_t v17 = v8 + 1LL;
        signed int v18 = v8;
        while (v17 < v11)
        {
          int v19 = *(unsigned __int16 *)(v12 + 2 * v17);
          ++v18;
          ++v17;
          if (v19 != a2) {
            goto LABEL_32;
          }
        }

        signed int v18 = v16;
LABEL_32:
        uint64_t v4 = 0LL;
        int v10 = v18 - v8 - 1;
        if (v18 - v8 < 1) {
          goto LABEL_43;
        }
      }

      if (a4 >= 1)
      {
        uint64_t v20 = (v10 + 1);
        uint64_t v4 = v20;
        if (v10 >= 0xF)
        {
          uint64_t v21 = v20 & 0xFFFFFFF0;
          signed int v22 = v8 + (v20 & 0xFFFFFFF0);
          int16x8_t v23 = vaddq_s16(vdupq_n_s16(v8), (int16x8_t)xmmword_1000F03C0);
          int v24 = a3 + 1;
          v25.i64[0] = 0x8000800080008LL;
          v25.i64[1] = 0x8000800080008LL;
          v26.i64[0] = 0x10001000100010LL;
          v26.i64[1] = 0x10001000100010LL;
          uint64_t v27 = v21;
          do
          {
            v24[-1] = v23;
            *int v24 = vaddq_s16(v23, v25);
            int16x8_t v23 = vaddq_s16(v23, v26);
            v24 += 2;
            v27 -= 16LL;
          }

          while (v27);
          if (v21 == v20) {
            goto LABEL_43;
          }
        }

        else
        {
          uint64_t v21 = 0LL;
          signed int v22 = v8;
        }

        uint64_t v28 = &a3->i16[v21];
        uint64_t v29 = v20 - v21;
        do
        {
          *v28++ = v22++;
          --v29;
        }

        while (v29);
      }
    }

LABEL_43:
    if (*(_DWORD *)(a1 + 204))
    {
      int v30 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8LL * (a2 >> 8)) + 2LL * a2);
      int v31 = *(_DWORD *)(a1 + 224);
    }

    else
    {
      int v31 = *(_DWORD *)(a1 + 224);
      int v30 = 0;
      int v32 = v31 - 1;
      if (v31 >= 1)
      {
        do
        {
          int v33 = v30 + v32;
          if (v30 + v32 < 0 != __OFADD__(v30, v32)) {
            ++v33;
          }
          unsigned int v34 = v33 >> 1;
          if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                               + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v34 >> 8))
          }
                                                                                         + 2LL * v34) >> 5) & 0x7F8))
                                   + 2LL
                                   * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v34 >> 8))
          else {
            int v30 = v34 + 1;
          }
        }

        while (v30 <= v32);
      }
    }

    if (v30 < v31 && (int)v4 < a4)
    {
      uint64_t v4 = v4;
      do
      {
        if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + ((v36 >> 5) & 0x7F8)) {
                                 + 2LL
        }
                                 * *(_WORD *)(*(void *)(*(void *)(a1 + 240)
                                                                         + 8LL * (v30 >> 8))
        a3->i16[v4++] = v36 + *(_WORD *)(a1 + 92);
        if (++v30 >= *(_DWORD *)(a1 + 224)) {
          break;
        }
      }

      while (v4 < a4);
    }

    return v4;
  }

  if (a4 >= 1) {
    a3->i16[0] = -2;
  }
  return 1LL;
}

      int16x8_t v25 = sub_100030F30(*(void *)(a1 + 48), v11, 0, &v45);
      *(_WORD *)(a1 + 76) = v25;
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1172))
      {
        *(_DWORD *)(a1 + 112) = v45 == 1;
        if (!*(_DWORD *)(a2 + 340))
        {
LABEL_49:
          *(_DWORD *)(a1 + 104) = sub_10001FE60(*(void *)a1, v25);
          if (v45 == 1)
          {
LABEL_50:
            int16x8_t v26 = *(_BYTE *)(*(void *)(a2 + 296) + *(int *)(a1 + 56)) != 0;
LABEL_64:
            *(_DWORD *)(a1 + 80) = v26;
            *(void *)(a1 + 96) = ((unint64_t)*(unsigned int *)(a1 + 44) << 35)
            goto LABEL_74;
          }

  sub_1000CB038(v19, v41);
  return (__int16)v39;
}

  else {
    sub_100024DB8(*(void *)(a1 + 376), (unint64_t)v9, (int *)&v50);
  }
  return v50;
}

  else {
    sub_100024DB8(*(void *)(v9 + 376), (unint64_t)v8, (int *)&v55);
  }
  return v55;
}

      sub_1000CB038(v40, v56);
      sub_1000CB038(v25, v9);
      sub_1000CB038(v17, v9);
      if (v58 || (_DWORD)v41 != 0xFFFFFF) {
        return v41;
      }
    }

    return sub_10008D340(*(void *)(a1 + 848), a2, v7, v26, v27, v28, v29, v30);
  }

  sub_1000CB038(v25, v9);
  sub_1000CB038(v17, v9);
  if (a4) {
    return 0xFFFFFFLL;
  }
  return sub_10008D340(*(void *)(a1 + 848), a2, v7, v26, v27, v28, v29, v30);
}

        uint64_t v115 = v71[v82];
        if (v85) {
          int8x16_t v84 = v84 - *(void *)&v85[2 * v115];
        }
        uint64_t v116 = v115 + 1;
        v71[v82] = v116;
        signed __int32 v117 = &v71[v82];
        if (*v117 == a3[v82])
        {
          do
          {
            *signed __int32 v117 = 0;
            if (v85) {
              int8x16_t v84 = (v84 + *v85);
            }
            uint32x2_t v118 = v82;
            signed __int32 v119 = (int)(v82 - 1) + 1LL;
            do
            {
              int8x16_t v82 = v118 - 1;
              int32x4_t v120 = a3[v118 - 1];
              --v119;
              --v118;
            }

            while (!v120);
            uint8x16_t v85 = *(_DWORD **)(v145 + 8LL * v82);
            int32x2_t v121 = v71[v82];
            if (v85) {
              int8x16_t v84 = v84 - *(void *)&v85[2 * v121];
            }
            uint64_t v116 = v121 + 1;
            v71[v82] = v116;
            signed __int32 v117 = &v71[v119];
          }

          while (v71[v119] == a3[v119]);
        }

        if ((v82 & 0x80000000) != 0)
        {
LABEL_58:
          int32x2_t v123 = sub_1000CAF58(12LL, v72, v73, v74, v75, v76, v77, v78);
          *(void *)int32x2_t v123 = 0LL;
          *(_DWORD *)(v123 + 8) = 0;
          if ((int)v143 < 1)
          {
            int32x2_t v122 = 0LL;
            int v10 = v141;
            goto LABEL_89;
          }

          int32x2_t v124 = (int *)v123;
          int32x2_t v122 = 0LL;
          int v10 = v141;
          while (2)
          {
            int32x4_t v125 = *v124;
            if ((int)v125 >= *(_DWORD *)v18)
            {
              int32x4_t v126 = 0x40000000;
              int32x4_t v127 = v124[1];
              int32x4_t v128 = *(_DWORD *)(v18 + 4);
              if (v127 >= v128) {
                goto LABEL_70;
              }
            }

            else
            {
              else {
                int32x4_t v126 = *(_DWORD *)(*v26 + 16 * v125);
              }
              int32x4_t v127 = v124[1];
              int32x4_t v128 = *(_DWORD *)(v18 + 4);
              if (v127 >= v128) {
                goto LABEL_70;
              }
            }

            if (*(_DWORD *)(v26[1] + 16LL * v127) < v126) {
              int32x4_t v126 = *(_DWORD *)(v26[1] + 16LL * v127);
            }
LABEL_70:
            int32x4_t v129 = v124[2];
            if ((int)v129 >= *(_DWORD *)(v18 + 8))
            {
              if (v126 == 0x40000000) {
                goto LABEL_89;
              }
            }

            else
            {
              int32x4_t v130 = *(_DWORD *)(v26[2] + 16 * v129);
              if (v130 < v126) {
                int32x4_t v126 = v130;
              }
              if (v126 == 0x40000000) {
                goto LABEL_89;
              }
            }

            if ((int)v125 < *(_DWORD *)v18 && (int32x4_t v131 = *v26, *(_DWORD *)(*v26 + 16 * v125) == v126))
            {
              int32x4_t v132 = a2 + 16LL * (int)v122;
              *(_DWORD *)int32x4_t v132 = v126;
              memcpy(*(void **)(v132 + 8), *(const void **)(v131 + 16 * v125 + 8), v28);
              ++*v124;
              int32x2_t v122 = (v122 + 1);
              if ((_DWORD)v122 == (_DWORD)v143) {
                goto LABEL_87;
              }
              int32x4_t v127 = v124[1];
              if (v127 >= *(_DWORD *)(v18 + 4)) {
                goto LABEL_84;
              }
            }

            else if (v127 >= v128)
            {
LABEL_84:
              int32x4_t v135 = v124[2];
              if ((int)v135 < *(_DWORD *)(v18 + 8))
              {
                int32x2_t v136 = v26[2];
                if (*(_DWORD *)(v136 + 16 * v135) == v126)
                {
                  int32x4_t v137 = a2 + 16LL * (int)v122;
                  *(_DWORD *)int32x4_t v137 = v126;
                  memcpy(*(void **)(v137 + 8), *(const void **)(v136 + 16 * v135 + 8), v28);
                  ++v124[2];
                  int32x2_t v122 = (v122 + 1);
                  if ((_DWORD)v122 == (_DWORD)v143) {
                    goto LABEL_87;
                  }
                }
              }

              continue;
            }

            break;
          }

          int32x4_t v133 = v26[1];
          if (*(_DWORD *)(v133 + 16LL * v127) == v126)
          {
            int32x2_t v134 = a2 + 16LL * (int)v122;
            *(_DWORD *)int32x2_t v134 = v126;
            memcpy(*(void **)(v134 + 8), *(const void **)(v133 + 16LL * v127 + 8), v28);
            ++v124[1];
            int32x2_t v122 = (v122 + 1);
            if ((_DWORD)v122 == (_DWORD)v143)
            {
LABEL_87:
              int32x2_t v122 = v143;
              goto LABEL_89;
            }
          }

          goto LABEL_84;
        }

        if (v85) {
          int8x16_t v84 = v84 + *(void *)&v85[2 * v116];
        }
      }
    }
  }

  int32x2_t v122 = 0LL;
LABEL_89:
  sub_1000CB094(v10);
  return v122;
}

uint64_t sub_10001FE60(uint64_t a1, unsigned int a2)
{
  if (a2 == 0xFFFF) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
  {
    uint64_t v2 = 0LL;
    if (!*(_DWORD *)(a1 + 204)) {
      goto LABEL_26;
    }
LABEL_8:
    int v3 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8LL * (a2 >> 8)) + 2LL * a2);
    int v4 = *(_DWORD *)(a1 + 224);
    goto LABEL_33;
  }

  if (!*(void *)(a1 + 144))
  {
    uint64_t v5 = *(int *)(a1 + 92);
    uint64_t v6 = *(void *)(a1 + 96);
    if ((int)v5 < 1)
    {
      int v7 = 0;
    }

    else
    {
      int v7 = 0;
      int v8 = v5 - 1;
      do
      {
        int v9 = v8 + v7;
        if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
          ++v9;
        }
        int v10 = v9 >> 1;
        else {
          int v8 = v10 - 1;
        }
      }

      while (v7 <= v8);
    }

    else {
      int v11 = *(_DWORD *)(a1 + 92);
    }
    uint64_t v12 = v7 + 1LL;
    int v13 = v7;
    while (v12 < v5)
    {
      int v14 = *(unsigned __int16 *)(v6 + 2 * v12);
      ++v13;
      ++v12;
      if (v14 != a2)
      {
        uint64_t v2 = (v13 - v7);
        if (*(_DWORD *)(a1 + 204)) {
          goto LABEL_8;
        }
        goto LABEL_26;
      }
    }

    uint64_t v2 = (v11 - v7);
    if (*(_DWORD *)(a1 + 204)) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t v2 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  if (*(_DWORD *)(a1 + 204)) {
    goto LABEL_8;
  }
LABEL_26:
  int v4 = *(_DWORD *)(a1 + 224);
  int v3 = 0;
  int v15 = v4 - 1;
  if (v4 >= 1)
  {
    do
    {
      int v16 = v3 + v15;
      if (v3 + v15 < 0 != __OFADD__(v3, v15)) {
        ++v16;
      }
      unsigned int v17 = v16 >> 1;
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                           + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240)
      }
                                                                                                 + 8LL * (v17 >> 8))
                                                                                     + 2LL * v17) >> 5) & 0x7F8))
                               + 2LL
                               * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v17 >> 8))
      else {
        int v3 = v17 + 1;
      }
    }

    while (v3 <= v15);
  }

BOOL sub_100020024(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 1LL;
  }
  int v2 = *(_DWORD *)(a1 + 88);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3) {
    return 1LL;
  }
  if (v4 <= *(_DWORD *)(a1 + 200)) {
    return *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * (v4 >> 8)) + 4LL * v4) != 0xFFFFFF;
  }
  return 0LL;
}

uint64_t sub_10002007C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFFFD) {
    return 1LL;
  }
  int v3 = a2 - *(_DWORD *)(a1 + 92);
  if (v3 < 0) {
    return *(__int16 *)(*(void *)(a1 + 96) + 2LL * a2) != -1;
  }
  if (v3 >= *(_DWORD *)(a1 + 220) << 8) {
    return 0LL;
  }
}

uint64_t sub_1000200F0(uint64_t a1, unsigned int a2, int a3)
{
  if (*(_DWORD *)(a1 + 88) <= (signed int)a2)
  {
    LOWORD(v3) = -1;
    int v6 = a3;
    if (a3 >= 0) {
      goto LABEL_24;
    }
    return (unsigned __int16)(v3 + a3);
  }

  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3)
  {
    uint64_t v8 = *(int *)(a1 + 92);
    uint64_t v9 = *(void *)(a1 + 96);
    if ((int)v8 < 1)
    {
      LODWORD(v3) = 0;
    }

    else
    {
      LODWORD(v3) = 0;
      int v10 = v8 - 1;
      do
      {
        int v11 = v10 + v3;
        int v12 = v11 >> 1;
        else {
          int v10 = v12 - 1;
        }
      }

      while ((int)v3 <= v10);
    }

    else {
      int v13 = *(_DWORD *)(a1 + 92);
    }
    uint64_t v14 = (int)v3 + 1LL;
    int v15 = v3;
    while (v14 < v8)
    {
      int v16 = *(unsigned __int16 *)(v9 + 2 * v14);
      ++v15;
      ++v14;
      if (v16 != a2)
      {
        int v6 = a3 - (v15 - v3);
        goto LABEL_24;
      }
    }

    int v6 = a3 - (v13 - v3);
    goto LABEL_24;
  }

  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  LOWORD(v3) = *(_WORD *)(v3 + 2LL * a2);
  BOOL v5 = __OFSUB__(a3, v4);
  int v6 = a3 - v4;
  if (v6 < 0 != v5) {
    return (unsigned __int16)(v3 + a3);
  }
LABEL_24:
  if (*(_DWORD *)(a1 + 204))
  {
    int v17 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 256) + 8LL * (a2 >> 8)) + 2LL * a2);
    int v18 = *(_DWORD *)(a1 + 224);
  }

  else
  {
    int v18 = *(_DWORD *)(a1 + 224);
    int v17 = 0;
    int v19 = v18 - 1;
    if (v18 >= 1)
    {
      do
      {
        int v20 = v17 + v19;
        if (v17 + v19 < 0 != __OFADD__(v17, v19)) {
          ++v20;
        }
        unsigned int v21 = v20 >> 1;
        if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) {
                                             + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v21 >> 8))
        }
                                                                                       + 2LL * v21) >> 5) & 0x7F8))
                                 + 2LL
                                 * *(_WORD *)(*(void *)(*(void *)(a1 + 240) + 8LL * (v21 >> 8))
        else {
          int v17 = v21 + 1;
        }
      }

      while (v17 <= v19);
    }
  }

  if (v17 < v18)
  {
    uint64_t v22 = *(void *)(a1 + 240);
    do
    {
      unint64_t v23 = *(unsigned __int16 *)(*(void *)(v22 + 8LL * (v17 >> 8)) + 2LL * v17);
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 208) + ((v23 >> 5) & 0x7F8)) {
                               + 2LL
      }
                               * *(_WORD *)(*(void *)(v22 + 8LL * (v17 >> 8))
      if (!v6) {
        return (unsigned __int16)(v23 + *(_WORD *)(a1 + 92));
      }
      ++v17;
      --v6;
    }

    while (v18 != v17);
  }

  return 0xFFFFLL;
}

uint64_t sub_1000202C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_1000202CC(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(result + 292);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = 0;
    unsigned int v5 = 0;
    do
    {
      if (*(__int16 *)(*(void *)(*(void *)(result + 208) + 8LL * (v5 >> 8)) + 2LL * v5) != -1)
      {
        if (v4 >= a3) {
          return result;
        }
        *(_WORD *)(a2 + 2LL * v4++) = v5 + *(_DWORD *)(result + 92);
        int v3 = *(_DWORD *)(result + 292);
      }
    }

    while ((int)v5++ < v3);
  }

  return result;
}

BOOL sub_10002032C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a1 + 92);
  uint64_t v4 = *(void *)(a1 + 112);
  if (!v4) {
    return 1LL;
  }
  int v5 = *(unsigned __int8 *)(v4 + a2);
  int v8 = *(unsigned __int8 *)(v4 + a3);
  if (v5) {
    return v8 != 0;
  }
  else {
    return v8 != 1;
  }
}

uint64_t sub_100020378(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)a1, 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, v2);
  uint64_t v4 = sub_1000BE644(*(_DWORD *)(a1 + 12), 4, v3);
  int v5 = *(unint64_t **)(a1 + 16);
  if (v5) {
    LODWORD(v4) = sub_1000BE770(v5, 1, *(_DWORD *)(a1 + 32), v4);
  }
  uint64_t v6 = sub_1000BE644(*(_DWORD *)(a1 + 32), 4, v4);
  int v7 = *(unint64_t **)(a1 + 40);
  if (v7) {
    LODWORD(v6) = sub_1000BE770(v7, 2, *(_DWORD *)(a1 + 56), v6);
  }
  unsigned int v8 = sub_1000BE644(*(_DWORD *)(a1 + 56), 4, v6);
  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 60), 4, v8);
  uint64_t v10 = sub_1000BE644(*(_DWORD *)(a1 + 64), 4, v9);
  int v11 = *(unint64_t **)(a1 + 72);
  if (v11) {
    LODWORD(v10) = sub_1000BE770(v11, 4, *(_DWORD *)(a1 + 88), v10);
  }
  unsigned int v12 = sub_1000BE644(*(_DWORD *)(a1 + 88), 4, v10);
  uint64_t v13 = sub_1000BE644(*(_DWORD *)(a1 + 92), 4, v12);
  uint64_t v14 = *(unint64_t **)(a1 + 96);
  if (v14) {
    uint64_t v13 = sub_1000BE770(v14, 2, *(_DWORD *)(a1 + 92), v13);
  }
  int v15 = *(unint64_t **)(a1 + 128);
  if (v15) {
    uint64_t v13 = sub_1000BE770(v15, 1, *(_DWORD *)(a1 + 88), v13);
  }
  int v16 = *(unint64_t **)(a1 + 144);
  if (v16) {
    return sub_1000BE770(v16, 2, *(_DWORD *)(a1 + 88), v13);
  }
  else {
    return v13;
  }
}

uint64_t sub_1000204CC(uint64_t a1)
{
  uint64_t v2 = sub_100020378(a1);
  if (*(void *)(a1 + 160) && *(int *)(a1 + 172) >= 1)
  {
    uint64_t v3 = 0LL;
    do
      uint64_t v2 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 160) + 8 * v3++), 4, 256, v2);
    while (v3 < *(int *)(a1 + 172));
  }

  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 168), 4, v2);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 172), 4, v4);
  unsigned int v6 = sub_1000BE644(*(_DWORD *)(a1 + 176), 4, v5);
  uint64_t v7 = sub_1000BE644(*(_DWORD *)(a1 + 200), 4, v6);
  if (*(void *)(a1 + 208) && *(int *)(a1 + 220) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      uint64_t v7 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 208) + 8 * v8++), 2, 256, v7);
    while (v8 < *(int *)(a1 + 220));
  }

  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 216), 4, v7);
  unsigned int v10 = sub_1000BE644(*(_DWORD *)(a1 + 220), 4, v9);
  uint64_t v11 = sub_1000BE644(*(_DWORD *)(a1 + 224), 4, v10);
  if (*(int *)(a1 + 252) >= 1)
  {
    uint64_t v12 = 0LL;
    do
      uint64_t v11 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 240) + 8 * v12++), 2, 256, v11);
    while (v12 < *(int *)(a1 + 252));
  }

  LODWORD(v13) = *(_DWORD *)(a1 + 264);
  if (*(void *)(a1 + 256)) {
    BOOL v14 = (int)v13 < 1;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = 0LL;
    do
    {
      uint64_t v11 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 256) + 8 * v15++), 2, 256, v11);
      uint64_t v13 = *(int *)(a1 + 264);
    }

    while (v15 < v13);
  }

  unsigned int v16 = sub_1000BE644(v13, 4, v11);
  uint64_t v17 = sub_1000BE644(*(_DWORD *)(a1 + 268), 4, v16);
  if (*(void *)(a1 + 272) && *(int *)(a1 + 284) >= 1)
  {
    uint64_t v18 = 0LL;
    do
      uint64_t v17 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 272) + 8 * v18++), 1, 256, v17);
    while (v18 < *(int *)(a1 + 284));
  }

  unsigned int v19 = sub_1000BE644(*(_DWORD *)(a1 + 288), 4, v17);
  return sub_1000BE644(*(_DWORD *)(a1 + 292), 4, v19);
}

uint64_t sub_1000206DC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "bacm0", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  if (sub_1000BDB78(v4, *(_DWORD *)(a1 + 204), v5)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 168), v7)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 172), v8)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 192), v9)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 196), v10)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 176), v11)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 200), v12)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 216), v13)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 220), v14)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 248), v15)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 252), v16)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 280), v17)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 284), v18)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 224), v19)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 228), v20)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 232), v21)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 268), v22)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 264), v23)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 288), v24)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 292), v25)
    && sub_1000BDB78(v6, *(_DWORD *)(a1 + 296), v26)
    && sub_1000BDE0C(v6, *(void ***)(a1 + 160), *(_DWORD *)(a1 + 172), 0x100u, 4, v27)
    && sub_1000BDE0C(v6, *(void ***)(a1 + 184), *(_DWORD *)(a1 + 196), 0x100u, 2, v28)
    && sub_1000BDE0C(v6, *(void ***)(a1 + 208), *(_DWORD *)(a1 + 220), 0x100u, 2, v29)
    && sub_1000BDE0C(v6, *(void ***)(a1 + 240), *(_DWORD *)(a1 + 252), 0x100u, 2, v30)
    && sub_1000BDE0C(v6, *(void ***)(a1 + 272), *(_DWORD *)(a1 + 284), 0x100u, 1, v31)
    && (!*(_DWORD *)(a1 + 204)
     || sub_1000BDE0C(v6, *(void ***)(a1 + 256), *(_DWORD *)(a1 + 264), 0x100u, 2, v32)))
  {
    sub_1000BDB48(v6);
    return 1LL;
  }

  else
  {
    sub_1000BDB48(v6);
    return 0LL;
  }

uint64_t sub_100020950( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BCAE8(a2, "bacm0", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  int v35 = 0;
  int v34 = 0;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  int v11 = *(_DWORD *)(a1 + 264);
  uint64_t v12 = *(unsigned int *)(a1 + 268);
  int v24 = 0;
  if (!sub_1000BCD38(v10, &v35)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v34)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v33)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v32)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v31)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v30)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v29)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v28)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v27)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v26)) {
    goto LABEL_52;
  }
  if (!sub_1000BCD38(v10, &v24)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 160)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 184)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 208)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 240)) {
    goto LABEL_52;
  }
  if (*(void *)(a1 + 272)) {
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 204) != (_DWORD)v25) {
    goto LABEL_52;
  }
  int v13 = v24;
  int v14 = v25;
  int v15 = v35;
  int v16 = v34;
  *(_DWORD *)(a1 + 168) = v35;
  *(_DWORD *)(a1 + 172) = v16;
  int v17 = v33;
  *(_DWORD *)(a1 + 192) = HIDWORD(v33);
  *(_DWORD *)(a1 + 196) = v17;
  *(_DWORD *)(a1 + 176) = HIDWORD(v32);
  *(_DWORD *)(a1 + 200) = v32;
  *(_DWORD *)(a1 + 204) = v14;
  int v18 = v31;
  *(_DWORD *)(a1 + 216) = HIDWORD(v31);
  *(_DWORD *)(a1 + 220) = v18;
  int v19 = v30;
  *(_DWORD *)(a1 + 248) = HIDWORD(v30);
  *(_DWORD *)(a1 + 252) = v19;
  *(_DWORD *)(a1 + 280) = HIDWORD(v29);
  *(_DWORD *)(a1 + 284) = v29;
  int v20 = v28;
  *(_DWORD *)(a1 + 224) = HIDWORD(v28);
  *(_DWORD *)(a1 + 228) = v20;
  *(_DWORD *)(a1 + 232) = HIDWORD(v27);
  *(_DWORD *)(a1 + 268) = v27;
  *(_DWORD *)(a1 + 264) = HIDWORD(v26);
  *(_DWORD *)(a1 + 288) = v26;
  *(_DWORD *)(a1 + 292) = HIDWORD(v25);
  *(_DWORD *)(a1 + 296) = v24;
  int v23 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)(a1 + 160), v15, 256, 4, &v23)
    || *(void *)(a1 + 160) && v23 != *(_DWORD *)(a1 + 172))
  {
    goto LABEL_52;
  }

  int v23 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)(a1 + 184), *(_DWORD *)(a1 + 192), 256, 2, &v23)
    || *(void *)(a1 + 184) && v23 != *(_DWORD *)(a1 + 196))
  {
    goto LABEL_52;
  }

  int v23 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)(a1 + 208), *(_DWORD *)(a1 + 216), 256, 2, &v23)
    || *(void *)(a1 + 208) && v23 != *(_DWORD *)(a1 + 220))
  {
    goto LABEL_52;
  }

  int v23 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 248), 256, 2, &v23)
    || *(void *)(a1 + 240) && v23 != *(_DWORD *)(a1 + 252))
  {
    goto LABEL_52;
  }

  int v23 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)(a1 + 272), *(_DWORD *)(a1 + 280), 256, 1, &v23)
    || *(void *)(a1 + 272) && v23 != *(_DWORD *)(a1 + 284))
  {
    goto LABEL_52;
  }

  if (!*(_DWORD *)(a1 + 204)) {
    goto LABEL_51;
  }
  if (v11 >= 1)
  {
    sub_1000C1BC8(*(void *)(a1 + 256), v12, v11);
    *(void *)(a1 + 256) = 0LL;
  }

  int v23 = 0;
  if (sub_1000BD6CC(v10, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 268), 256, 2, &v23)
    && (!*(void *)(a1 + 256) || v23 == *(_DWORD *)(a1 + 264)))
  {
LABEL_51:
    uint64_t v21 = 1LL;
  }

  else
  {
LABEL_52:
    uint64_t v21 = 0LL;
  }

  sub_1000BCBC8(v10);
  return v21;
}

uint64_t sub_100020DB0( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BCAE8(a1, "bacm0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(328LL);
  if (!v10)
  {
    sub_1000BCBC8(v9);
    return v10;
  }

  if (!sub_1000BCCEC(v9, (_DWORD *)v10)) {
    goto LABEL_48;
  }
  if (!sub_1000BCCEC(v9, (_DWORD *)(v10 + 4))) {
    goto LABEL_48;
  }
  int v11 = (_DWORD *)(v10 + 88);
  uint64_t v12 = (_DWORD *)(v10 + 92);
  int v22 = 0;
  int v13 = (void *)(v10 + 24);
  if (*v13)
  {
    if (v22 != *(_DWORD *)(v10 + 32)) {
      goto LABEL_48;
    }
    *(void *)(v10 + 16) = *v13;
  }

  int v22 = 0;
  int v14 = (void *)(v10 + 48);
  if (*v14)
  {
    if (v22 != *(_DWORD *)(v10 + 56)) {
      goto LABEL_48;
    }
    *(void *)(v10 + 40) = *v14;
  }

  int v22 = 0;
  int v15 = (void *)(v10 + 80);
  if (*v15)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 72) = *v15;
  }

  int v22 = 0;
  int v16 = (void *)(v10 + 104);
  if (*v16)
  {
    if (v22 != *v12) {
      goto LABEL_48;
    }
    *(void *)(v10 + 96) = *v16;
  }

  int v22 = 0;
  int v17 = (void *)(v10 + 136);
  if (*v17)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 128) = *v17;
  }

  int v22 = 0;
  int v18 = (void *)(v10 + 152);
  if (*v18)
  {
    if (v22 != *v11) {
      goto LABEL_48;
    }
    *(void *)(v10 + 144) = *v18;
  }

  int v22 = 0;
  int v19 = (void *)(v10 + 120);
  if (!*v19) {
    goto LABEL_46;
  }
  if (v22 != *v12)
  {
LABEL_48:
    sub_1000BCBC8(v9);
    goto LABEL_49;
  }

  *(void *)(v10 + 112) = *v19;
LABEL_46:
  int v20 = sub_10001E8F8(v10);
  sub_1000BCBC8(v9);
  if (!v20)
  {
LABEL_49:
    sub_10001EB1C(v10);
    return 0LL;
  }

  *(_DWORD *)(v10 + 296) = sub_100020378(v10);
  return v10;
}

uint64_t sub_100021100(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 32));
    sub_1000C0EF8(*(void *)(v1 + 48));
    sub_1000C0EF8(*(void *)(v1 + 56));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100021140(int *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10 = a1[1];
  uint64_t v11 = *a1;
  uint64_t v12 = (int)v10;
  int v199 = a1[2];
  uint64_t v13 = *a1;
  signed int v198 = a5;
  if (!a1[4])
  {
    uint64_t v33 = (int32x4_t *)*((void *)a1 + 7);
    if (a6 || (int)v11 <= a5)
    {
      if (v199 >= 2 * (int)v10)
      {
        else {
          int v110 = v13 + 1;
        }
        int v36 = v110 >> 1;
        goto LABEL_111;
      }

      int v35 = 10;
    }

    else
    {
      else {
        int v34 = v13 + 1;
      }
      int v35 = 10;
      if (a1[3])
      {
        int v36 = v34 >> 1;
        if (v34 >> 1 <= a5 && v199 >= 2 * (int)v10)
        {
LABEL_111:
          int v197 = *a1;
          int v196 = a3;
          int v111 = (a4 & ((a3 - v36) >> 31)) + a3 - v36;
          int v112 = *a1;
          bzero(v33, 4LL * (int)v10);
          LODWORD(v11) = v112;
          if (v112 <= 1)
          {
            int v35 = 10;
            LODWORD(v13) = v197;
            a5 = v198;
LABEL_113:
            if ((int)v10 >= 1)
            {
              uint64_t v113 = (_WORD *)(*(void *)(a2 + 8LL * v111) + 2LL * (int)v10);
              uint64_t v114 = v10;
              uint64_t v115 = v33;
              do
              {
                __int32 v116 = v115->i32[0];
                uint64_t v115 = (int32x4_t *)((char *)v115 + 4);
                *v113++ = v116 / v35;
                --v114;
              }

              while (v114);
            }

            a3 = v196;
            goto LABEL_117;
          }

          LODWORD(v13) = v197;
          a5 = v198;
          int32x2_t v124 = (int16x4_t *)((char *)v33 + 4 * v10);
          uint64_t v125 = 2 * v10;
          uint64_t v126 = 2LL * (v10 & 0xFFFFFFF0);
          unsigned int v127 = 1;
          int v35 = 10;
          while (1)
          {
            int v128 = v127 + v111;
            int v129 = a1[3];
            if (a6 && v129 && v128 >= (v198 - 1) % a4) {
              int v128 = (v198 - 1) % a4;
            }
            else {
              int v132 = v111 - v127;
            }
            int32x4_t v133 = *(int16x4_t **)(a2 + 8LL * ((a4 & (v132 >> 31)) + v132));
            if (v128 >= a4) {
              int v134 = a4;
            }
            else {
              int v134 = 0;
            }
            int32x4_t v135 = *(int16x4_t **)(a2 + 8LL * (v128 - v134));
            if (v10 >= 0x10)
            {
              uint64_t v136 = 0LL;
              BOOL v143 = v33 < (int32x4_t *)((char *)v133 + v125) && v133 < v124;
              if ((v135 >= v124 || v33 >= (int32x4_t *)((char *)v135 + v125)) && !v143)
              {
                float32x4x2_t v145 = (__int16 *)((char *)v133 + v126);
                uint32x4_t v146 = (__int16 *)((char *)v135 + v126);
                int32x4_t v147 = vdupq_n_s32(v127);
                int v148 = v135 + 2;
                v149 = v133 + 2;
                uint64_t v150 = v10 & 0xFFFFFFF0;
                int32x4_t v151 = v33 + 2;
                do
                {
                  int16x8_t v152 = *(int16x8_t *)v148[-2].i8;
                  int16x8_t v153 = *(int16x8_t *)v149[-2].i8;
                  int32x4_t v154 = vmlaq_s32(v151[-1], vsubl_high_s16(v152, v153), v147);
                  int32x4_t v155 = vmlaq_s32(*v151, vsubl_s16(*v148, *v149), v147);
                  int32x4_t v156 = vmlaq_s32(v151[1], vsubl_high_s16(*(int16x8_t *)v148->i8, *(int16x8_t *)v149->i8), v147);
                  v151[-2] = vmlaq_s32(v151[-2], vsubl_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v153.i8), v147);
                  v151[-1] = v154;
                  *int32x4_t v151 = v155;
                  v151[1] = v156;
                  v151 += 4;
                  v148 += 4;
                  v149 += 4;
                  v150 -= 16LL;
                }

                while (v150);
                uint64_t v136 = v10 & 0x7FFFFFF0;
                int32x4_t v133 = (int16x4_t *)v145;
                int32x4_t v135 = (int16x4_t *)v146;
                if ((v10 & 0xFFFFFFF0) == v10) {
                  goto LABEL_129;
                }
              }
            }

            else
            {
              uint64_t v136 = 0LL;
            }

            int32x4_t v137 = &v33->i32[v136];
            uint64_t v138 = v10 - v136;
            do
            {
              int v140 = v135->i16[0];
              int32x4_t v135 = (int16x4_t *)((char *)v135 + 2);
              int v139 = v140;
              int v141 = v133->i16[0];
              int32x4_t v133 = (int16x4_t *)((char *)v133 + 2);
              *v137++ += (v139 - v141) * v127;
              --v138;
            }

            while (v138);
LABEL_129:
            if (v127 == 1) {
              int v35 = 2;
            }
            else {
              v35 += 2 * v127 * v127;
            }
            BOOL v48 = v127++ == v36;
            if (v48) {
              goto LABEL_113;
            }
          }
        }
      }
    }

LABEL_117:
    if (!a6 && 2 * (int)v11 > a5)
    {
      uint64_t result = 0LL;
    }

    int v117 = a3 - v13;
    int v118 = v13;
    int v119 = v11;
    bzero(v33, 4LL * (int)v10);
    int v120 = v118;
    int v121 = (a4 & (v117 >> 31)) + v117;
    if (v119 <= 1)
    {
LABEL_123:
      if ((int)v10 >= 1)
      {
        int32x2_t v122 = (_WORD *)(*(void *)(a2 + 8LL * v121) + 4 * v10);
        do
        {
          __int32 v123 = v33->i32[0];
          uint64_t v33 = (int32x4_t *)((char *)v33 + 4);
          *v122++ = v123 / v35;
          --v10;
        }

        while (v10);
      }

      return 1LL;
    }

    float64x2_t v157 = &v33->i16[2 * v10];
    uint64_t v158 = 2 * ((int)v10 + v10);
    uint64_t v159 = 2LL * (v10 & 0xFFFFFFF0);
    uint64_t v160 = 2LL * (int)v10;
    uint64_t v161 = v160 + 16;
    unsigned int v162 = 1;
    while (1)
    {
      int v163 = v162 + v121;
      int v164 = a1[3];
      if (a6)
      {
        signed int v165 = v198;
        if (v164 && v163 >= (v198 - 1) % a4) {
          int v163 = (v198 - 1) % a4;
        }
      }

      else
      {
        signed int v165 = v198;
      }

      else {
        int v168 = v117 - v162;
      }
      uint64_t v169 = *(void *)(a2 + 8LL * ((a4 & (v168 >> 31)) + v168));
      v170 = (__int16 *)(v169 + v160);
      if (v163 >= a4) {
        int v171 = a4;
      }
      else {
        int v171 = 0;
      }
      uint64_t v172 = *(void *)(a2 + 8LL * (v163 - v171));
      double v173 = (__int16 *)(v172 + v160);
      if (v10 >= 0x10)
      {
        uint64_t v174 = 0LL;
        BOOL v181 = (unint64_t)v33 < v169 + v158 && v170 < v157;
        if ((v173 >= v157 || (unint64_t)v33 >= v172 + v158) && !v181)
        {
          v170 = (__int16 *)((char *)v170 + v159);
          double v173 = (__int16 *)((char *)v173 + v159);
          int32x4_t v183 = vdupq_n_s32(v162);
          BOOL v184 = (int16x4_t *)(v169 + v161);
          float64x2_t v185 = (int16x4_t *)(v172 + v161);
          uint16x4_t v186 = v33 + 2;
          uint64_t v187 = v10 & 0xFFFFFFF0;
          do
          {
            int16x8_t v188 = *(int16x8_t *)v185[-2].i8;
            int16x8_t v189 = *(int16x8_t *)v184[-2].i8;
            int32x4_t v190 = vmlaq_s32(v186[-1], vsubl_high_s16(v188, v189), v183);
            int32x4_t v191 = vmlaq_s32(*v186, vsubl_s16(*v185, *v184), v183);
            int32x4_t v192 = vmlaq_s32(v186[1], vsubl_high_s16(*(int16x8_t *)v185->i8, *(int16x8_t *)v184->i8), v183);
            v186[-2] = vmlaq_s32(v186[-2], vsubl_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v189.i8), v183);
            v186[-1] = v190;
            *uint16x4_t v186 = v191;
            v186[1] = v192;
            v186 += 4;
            v184 += 4;
            v185 += 4;
            v187 -= 16LL;
          }

          while (v187);
          uint64_t v174 = v10 & 0x7FFFFFF0;
          if ((v10 & 0xFFFFFFF0) == v10) {
            goto LABEL_172;
          }
        }
      }

      else
      {
        uint64_t v174 = 0LL;
      }

      double v175 = &v33->i32[v174];
      uint64_t v176 = v10 - v174;
      do
      {
        int v178 = *v173++;
        int v177 = v178;
        int v179 = *v170++;
        *v175++ += (v177 - v179) * v162;
        --v176;
      }

      while (v176);
LABEL_172:
      BOOL v48 = v162++ == v119 >> 1;
      if (v48) {
        goto LABEL_123;
      }
    }
  }

  if (a6 || 2 * (int)v11 <= a5 || (uint64_t result = 0LL, a1[3]) && (int)v13 <= a5)
  {
    int v15 = (a4 & ((a3 - (int)v13) >> 31)) + a3 - v13;
    uint64_t v16 = 2LL * (int)v10;
    if (v199 >= 2 * (int)v10 && (int)v10 >= 1)
    {
      int v17 = *(__int16 **)(a2 + 8LL * v15);
      int v18 = *(__int16 *)(*((void *)a1 + 3) + 2 * v11);
      uint64_t v19 = v10;
      int v20 = v10;
      do
      {
        v17[v19++] = (*v17 * v18 + 0x2000) >> 14;
        --v20;
      }

      while (v20);
    }

    BOOL v21 = v199 < 3 * (int)v10 || (int)v10 < 1;
    char v22 = v21;
    if (!v21)
    {
      LODWORD(v23) = 0;
      int v24 = *(int16x8_t **)(a2 + 8LL * v15);
      uint64_t v25 = &v24->i16[2 * (int)v10];
      unsigned int v26 = *(__int16 *)(*((void *)a1 + 5) + 2 * v11);
      if (v10 >= 0x10 && (v16 & 0x7FFFFFFFFFFFFFF0LL) != 0)
      {
        uint64_t v23 = v10 & 0xFFFFFFF0;
        v25 += v23;
        uint64_t v27 = &v24->i16[v23];
        int16x8_t v28 = vdupq_n_s16(v26);
        uint64_t v29 = v23;
        do
        {
          uint64_t v30 = (int16x8_t *)((char *)v24 + 4 * (int)v10);
          int16x8_t v31 = *v24;
          int16x8_t v32 = v24[1];
          v24 += 2;
          *uint64_t v30 = vrshrn_high_n_s32( vrshrn_n_s32(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v31.i8), 0xEuLL),  vmull_high_s16(v28, v31),  0xEuLL);
          v30[1] = vrshrn_high_n_s32( vrshrn_n_s32(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v32.i8), 0xEuLL),  vmull_high_s16(v28, v32),  0xEuLL);
          v29 -= 16LL;
        }

        while (v29);
        if (v23 == v10) {
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v27 = *(__int16 **)(a2 + 8LL * v15);
      }

      int v38 = v10 - v23;
      do
      {
        int v39 = *v27++;
        *v25++ = (v39 * v26 + 0x2000) >> 14;
        --v38;
      }

      while (v38);
    }

LABEL_40:
    if ((int)v11 >= 1)
    {
      uint64_t v40 = v11;
      uint64_t v41 = a5;
      uint64_t v42 = v13 + 1;
      uint64_t v43 = (v10 - 1);
      uint64_t v195 = 2 * ((int)v16 + v43) + 2;
      uint64_t v44 = 2 * v43 + 2;
      uint64_t v193 = 2 * ((int)v10 + v43) + 2;
      uint64_t v45 = v10 & 0xFFFFFFF8;
      uint64_t v194 = v45;
      uint64_t v46 = 1LL;
      while (1)
      {
        int v47 = a1[3];
        BOOL v48 = v47 == 0;
        if (v47) {
          BOOL v49 = v46 > v41;
        }
        else {
          BOOL v49 = 0;
        }
        BOOL v50 = v48 || a6 != 0;
        if (a6 != 0 && v49) {
          int v51 = a5;
        }
        else {
          int v51 = v46;
        }
        int v52 = v51 + v15;
        if (v52 >= a4) {
          int v53 = a4;
        }
        else {
          int v53 = 0;
        }
        int v54 = v52 - v53;
        uint64_t v55 = v46 + v40;
        if (v46 + v40 <= v41 || v50) {
          int v57 = v15 - v46;
        }
        else {
          int v57 = 0;
        }
        int v58 = (a4 & (v57 >> 31)) + v57;
        if (v199 >= (int)v16)
        {
          uint64_t v59 = *(void *)(a2 + 8LL * v15);
          uint64_t v60 = *((void *)a1 + 3);
          unsigned int v61 = *(__int16 *)(v60 + 2 * (v40 - v46));
          unsigned int v62 = *(__int16 *)(v60 + 2 * v55);
          uint64_t v63 = v12;
          uint64_t v64 = (int16x8_t *)(v59 + 2 * v12);
          int v65 = *(int16x8_t **)(a2 + 8LL * v58);
          uint64_t v66 = *(int16x8_t **)(a2 + 8LL * v54);
          if (v10 < 8)
          {
            int v67 = 0;
LABEL_81:
            int32x4_t v72 = v64;
            uint64_t v73 = *(__int16 **)(a2 + 8LL * v58);
            uint64_t v74 = *(__int16 **)(a2 + 8LL * v54);
            uint64_t v12 = v63;
            a5 = v198;
LABEL_82:
            int v81 = v10 - v67;
            do
            {
              int v82 = *v74++;
              int v83 = v82 * v62;
              int v84 = *v73++;
              v72->i16[0] += (4 * (v83 + v84 * v61) + 0x8000) >> 16;
              int32x4_t v72 = (int16x8_t *)((char *)v72 + 2);
              --v81;
            }

            while (v81);
            goto LABEL_84;
          }

          int v67 = 0;
          unint64_t v68 = v59 + v193;
          BOOL v70 = v64 < (int16x8_t *)&v65->i8[v44] && (unint64_t)v65 < v68;
          BOOL v71 = (unint64_t)v66 >= v68 || v64 >= (int16x8_t *)&v66->i8[v44];
          if (!v71 || v70) {
            goto LABEL_81;
          }
          int32x4_t v72 = (int16x8_t *)((char *)v64 + v194 * 2);
          uint64_t v73 = &v65->i16[v194];
          uint64_t v74 = &v66->i16[v194];
          uint64_t v75 = v10 & 0xFFFFFFF8;
          do
          {
            int16x8_t v76 = *v66++;
            int16x8_t v77 = v76;
            int16x8_t v78 = vdupq_n_s16(v62);
            int16x8_t v79 = *v65++;
            int16x8_t v80 = vdupq_n_s16(v61);
            *uint64_t v64 = vaddq_s16( *v64,  vraddhn_high_s32( vraddhn_s32( vshlq_n_s32( vmlal_s16( vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v79.i8),  *(int16x4_t *)v78.i8,  *(int16x4_t *)v77.i8),  2uLL),  (int32x4_t)0LL),  vshlq_n_s32(vmlal_high_s16(vmull_high_s16(v80, v79), v78, v77), 2uLL),  (int32x4_t)0LL));
            ++v64;
            v75 -= 8LL;
          }

          while (v75);
          int v67 = v10 & 0x7FFFFFF8;
          uint64_t v12 = v63;
          a5 = v198;
          if (v45 != v10) {
            goto LABEL_82;
          }
        }

        uint64_t v45 = 0;
        uint64_t v46 = -1;
        int v47 = v40;
        do
        {
          BOOL v48 = v45;
          BOOL v49 = *v47++;
          ++v46;
          ++v45;
        }

        while (v49 != -1);
        if (v46 >= 1)
        {
          BOOL v50 = v48;
          while (1)
          {
            int v51 = *v40++;
            if (sub_1000BB9AC(*(void *)(v3 + 8), v51, a2)) {
              break;
            }
            if (!--v50) {
              goto LABEL_32;
            }
          }

          sub_10004CC6C(v3, (int *)v6, v7, 0);
        }

  sub_1000CB038(v60, v44);
  sub_1000CB038(v52, v44);
  sub_1000CB038(v33, v25);
  sub_1000CB038(v83, v25);
  if (!v82 && v81 > (int)v61) {
  return v61;
  }
}

      int v34 = *v9++;
      uint64_t v33 = v34;
      if (*(_BYTE *)(v11 + v34) != 2
        || (int v35 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v33),
            int v36 = *v35,
            int16x8_t v32 = v35[1] + ~(_DWORD)v36,
            uint64_t v10 = (unsigned __int8 *)(*(void *)(v4 + 88) + v36),
            !v32))
      {
LABEL_44:
        int v39 = *v9++;
        uint64_t v10 = (unsigned __int8 *)v39;
        if (*(_BYTE *)(v11 + v39) == 2)
        {
          uint64_t v40 = *(void *)(v4 + 104);
          uint64_t v41 = *(unsigned __int16 *)(v40 + 2LL * (void)v10);
          unsigned int v37 = *(unsigned __int16 *)(v40 + 2LL * (void)v10 + 2) + ~(_DWORD)v41;
          uint64_t v42 = (unsigned __int8 *)(*(void *)(v4 + 88) + v41);
          int v38 = v42 + 1;
          LODWORD(v10) = *v42;
          if (v7 != 1) {
            goto LABEL_46;
          }
        }

        else if (v7 != 1)
        {
LABEL_49:
          uint64_t v43 = *v9;
          if (*(_BYTE *)(v11 + v43) != 2)
          {
LABEL_52:
            LODWORD(v10) = v10 | ((_DWORD)v43 << 8);
            goto LABEL_53;
          }

          int v38 = (unsigned __int8 *)(*(void *)(v4 + 88) + *(unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v43));
LABEL_51:
          LODWORD(v43) = *v38;
          goto LABEL_52;
        }

        goto LABEL_53;
      }

    uint64_t v66 = *(unsigned __int16 *)(a1 + 204);
    if (v66 == 0xFFFF || (_DWORD)result != 1) {
      return result;
    }
    sub_100093AE4((char *)*v9, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 208) + 8 * v17) + v19), v66);
    return 1LL;
  }

  uint64_t result = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 120) + ((v20 >> 5) & 0x7FFFFF8)) + v20);
  else {
    char v22 = result;
  }
  if ((int)v22 >= 1)
  {
    int v67 = result;
    unint64_t v68 = v17;
    uint64_t v69 = a4;
    uint64_t v23 = 0LL;
    int v24 = v20 + 1;
    do
    {
      uint64_t v25 = v9;
      unsigned int v26 = *(void *)(a1 + 120);
      uint64_t v27 = v24 >> 8;
      int16x8_t v28 = v24;
      uint64_t v29 = *(unsigned __int8 *)(*(void *)(v26 + 8LL * v27) + v24);
      uint64_t v30 = v24 + 1;
      int16x8_t v31 = v24 + 1;
      if (*(_BYTE *)(*(void *)(v26 + 8LL * v27) + v24))
      {
        int16x8_t v31 = v24 + 1;
        do
        {
          else {
            int16x8_t v32 = 2;
          }
          v31 += v32;
          --v29;
        }

        while (v29);
      }

      uint64_t v33 = (int)(v31 - v24);
      int v34 = (char *)sub_1000CAF58(v33, a2, a3, a4, a5, a6, a7, a8);
      int v35 = v34;
      int v36 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 120) + 8 * v27) + v28);
      *int v34 = v36;
      if (v36)
      {
        unsigned int v37 = v34 + 1;
        uint64_t v9 = v25;
        do
        {
          while (1)
          {
            int v38 = *(void *)(*(void *)(a1 + 120) + 8LL * (v30 >> 8));
            *unsigned int v37 = *(_BYTE *)(v38 + v30);
            v37[1] = *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * ((v30 + 1) >> 8)) + (v30 + 1));
            v37 += 2;
            v30 += 2;
            if (!--v36) {
              goto LABEL_17;
            }
          }

          ++v30;
          ++v37;
          --v36;
        }

        while (v36);
      }

      else
      {
        uint64_t v9 = v25;
      }

          int v119 = 0LL;
          if (a10)
          {
LABEL_27:
            int v118 = sub_1000CAF58((int)a5, v61, v62, v63, v64, v65, v66, v67);
            if (a12)
            {
LABEL_28:
              unint64_t v68 = sub_1000CAF58(8LL * (int)a2, v61, v62, v63, v64, v65, v66, v67);
              goto LABEL_43;
            }

      *uint64_t v43 = v47;
      uint64_t v9 = a3;
LABEL_41:
      ++a7;
      if (++v39 == v9) {
        return result;
      }
    }
  }

  uint64_t v11 = a2;
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int16x8_t v79 = 0;
    int v65 = a2 + 16;
    do
    {
      int v15 = *a7;
      uint64_t v16 = (unsigned int *)(v11 + (v15 << 7));
      int v17 = v16[2];
      uint64_t v19 = (int *)(v16 + 1);
      int v18 = v16[1];
      if (v17 > v18 || v18 == 0) {
        goto LABEL_7;
      }
      if (v17)
      {
        if (v18 >= a8) {
          BOOL v21 = a8;
        }
        else {
          BOOL v21 = v16[1];
        }
        char v22 = v21 - v17;
        if (v21 <= v17) {
          goto LABEL_17;
        }
      }

      else
      {
        uint64_t v25 = v11 + (v15 << 7);
        unsigned int v26 = *a7;
        uint64_t v27 = sub_1000BB868(v10, *(unsigned __int16 *)(v25 + 16), 0LL);
        uint64_t result = sub_1000BBBB0(v10, a4, a5, v27);
        int v15 = v26;
        uint64_t v11 = a2;
        *(_DWORD *)(v25 + 12) += result;
        int v17 = 1;
        uint64_t v12 = 1;
        if (*v19 >= a8) {
          BOOL v21 = a8;
        }
        else {
          BOOL v21 = *v19;
        }
        char v22 = v21 - 1;
        if (v21 <= 1)
        {
LABEL_17:
          uint64_t v23 = *v16;
          if ((_DWORD)v23 == 0x7FFFFFFF) {
            goto LABEL_18;
          }
          goto LABEL_29;
        }
      }

      BOOL v70 = v21;
      int32x4_t v72 = v15;
      int16x8_t v28 = (_DWORD *)(v11 + (v15 << 7) + 12);
      uint64_t v29 = (unsigned __int16 *)(v65 + (v15 << 7) + 2LL * v17);
      do
      {
        uint64_t v30 = sub_1000BB868(v10, *v29, 0LL);
        int16x8_t v79 = sub_1000BB868(v10, *(v29 - 1), 0LL);
        uint64_t result = sub_1000BBBB0(v10, (uint64_t)&v79, 1u, v30);
        LODWORD(v31) = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          int16x8_t v31 = *(void *)(qword_1000FDCC0 + 1704);
        }
        ++v29;
        *v28 += v31 + result;
        --v22;
      }

      while (v22);
      uint64_t v12 = 1;
      BOOL v21 = v70;
      int v17 = v70;
      uint64_t v9 = a3;
      uint64_t v11 = a2;
      int v15 = v72;
      uint64_t v23 = *v16;
      if ((_DWORD)v23 == 0x7FFFFFFF)
      {
LABEL_18:
        int v24 = *v19;
        if (v21 >= *v19) {
          goto LABEL_34;
        }
        goto LABEL_4;
      }

        int32x4_t v154 = v20;
        CFArrayAppendValue(Mutable, v149);
        CFRelease(v149);
        uint64_t v41 = v144 + 1;
        uint64_t v150 = v19;
        if (v23 < 1)
        {
          BOOL v50 = v144 + 1;
          int v15 = a9;
        }

        else
        {
          uint64_t v42 = 0LL;
          int v15 = a9;
          uint64_t v43 = v163;
          cfa = v22;
          uint64_t v159 = v23;
          do
          {
            if (v15
              && (uint64_t v44 = CFArrayGetValueAtIndex(v22[2], v42),
                  (uint64_t v45 = (const __CFArray *)CFDictionaryGetValue(v15, v44)) != 0LL)
              && (uint64_t v46 = v45, v47 = CFArrayGetCount(v45), v47 >= 1))
            {
              BOOL v48 = v47;
              BOOL v49 = 0LL;
              float64x2_t v167 = v41 - v43;
              BOOL v50 = v41;
              do
              {
                *(void *)newValues = CFArrayGetValueAtIndex(v46, v49);
                if (v41 > v43)
                {
                  int v51 = v50;
                  int v52 = v43;
                  do
                  {
                    int v53 = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v52);
                    int v54 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v53);
                    v176.locatiounsigned __int16 n = v42;
                    v176.length = 1LL;
                    CFArrayReplaceValues(v54, v176, (const void **)newValues, 1LL);
                    CFArrayAppendValue(Mutable, v54);
                    CFRelease(v54);
                    ++v52;
                  }

                  while (v41 != v52);
                  uint64_t v43 = v163;
                  BOOL v50 = v167 + v51;
                }

                ++v49;
              }

              while (v49 != v48);
            }

            else
            {
              BOOL v50 = v41;
            }

            ++v42;
            uint64_t v41 = v50;
            int v15 = a9;
            char v22 = cfa;
          }

          while (v42 != v159);
        }

        float32x4x2_t v144 = v50;
        CFRelease(v22);
        int v20 = v154;
        if (!v154) {
          break;
        }
        uint64_t v19 = v150;
        uint64_t v16 = kCFAllocatorDefault;
        if (CFArrayGetCount(v154) < 1) {
          goto LABEL_60;
        }
        char v22 = (CFArrayRef *)CFArrayGetValueAtIndex(v154, 0LL);
        uint64_t v23 = CFArrayGetCount(v22[2]);
        CFRetain(v22);
        CFArrayRemoveValueAtIndex(v154, 0LL);
      }

      uint64_t v19 = v150;
      uint64_t v16 = kCFAllocatorDefault;
LABEL_60:
      BOOL v21 = v139 + 1;
      if (v139 + 1 != v138) {
        continue;
      }
      break;
    }

LABEL_84:
        if ((v22 & 1) == 0)
        {
          uint64_t v85 = *(void *)(a2 + 8LL * v15);
          uint64_t v86 = *((void *)a1 + 5);
          unsigned int v87 = *(__int16 *)(v86 + 2 * (v40 - v46));
          unsigned int v88 = *(__int16 *)(v86 + 2 * v55);
          int8x16_t v89 = (int16x8_t *)(v85 + 2LL * (int)v16);
          uint8x16_t v90 = *(int16x8_t **)(a2 + 8LL * v58);
          int16x8_t v91 = *(int16x8_t **)(a2 + 8LL * v54);
          if (v10 < 8)
          {
            int v92 = 0;
            goto LABEL_103;
          }

          int v92 = 0;
          unint64_t v93 = v85 + v195;
          BOOL v95 = v89 < (int16x8_t *)&v90->i8[v44] && (unint64_t)v90 < v93;
          BOOL v96 = (unint64_t)v91 >= v93 || v89 >= (int16x8_t *)&v91->i8[v44];
          if (!v96 || v95)
          {
LABEL_103:
            uint16x8_t v97 = (__int16 *)(v85 + 2LL * (int)v16);
            int8x16_t v98 = v90;
            uint16x8_t v99 = v91;
          }

          else
          {
            uint16x8_t v97 = &v89->i16[v194];
            int8x16_t v98 = (int16x8_t *)((char *)v90 + v194 * 2);
            uint16x8_t v99 = (int16x8_t *)((char *)v91 + v194 * 2);
            uint64_t v100 = v10 & 0xFFFFFFF8;
            do
            {
              int16x8_t v101 = *v91++;
              int16x8_t v102 = v101;
              int16x8_t v103 = vdupq_n_s16(v88);
              int16x8_t v104 = *v90++;
              int16x8_t v105 = vdupq_n_s16(v87);
              *int8x16_t v89 = vaddq_s16( *v89,  vraddhn_high_s32( vraddhn_s32( vshlq_n_s32( vmlal_s16( vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8),  *(int16x4_t *)v103.i8,  *(int16x4_t *)v102.i8),  2uLL),  (int32x4_t)0LL),  vshlq_n_s32(vmlal_high_s16(vmull_high_s16(v105, v104), v103, v102), 2uLL),  (int32x4_t)0LL));
              ++v89;
              v100 -= 8LL;
            }

            while (v100);
            int v92 = v10 & 0xFFFFFFF8;
            if (v45 == v10) {
              goto LABEL_42;
            }
          }

          int v106 = v10 - v92;
          do
          {
            int v107 = v99->i16[0];
            uint16x8_t v99 = (int16x8_t *)((char *)v99 + 2);
            int v108 = v107 * v88;
            int v109 = v98->i16[0];
            int8x16_t v98 = (int16x8_t *)((char *)v98 + 2);
            *v97++ += (4 * (v108 + v109 * v87) + 0x8000) >> 16;
            --v106;
          }

          while (v106);
        }

  if (*(_DWORD *)(a1 + 612) >= (*(_DWORD *)(a1 + 608) << 8) - 1) {
    *(_DWORD *)(a1 + 552) = 3;
  }
  if (!*(_DWORD *)(a1 + 8896)) {
    sub_100065AE0(a1);
  }
  *(_DWORD *)(a1 + 9044) = v25;
}

        __int32 v116 = *v100++;
        int16x8_t v101 = v116;
        if (*(_BYTE *)(v99 + v116) != 2)
        {
          int16x8_t v104 = 0;
          goto LABEL_115;
        }

        int v117 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v101);
        int v118 = *v117;
        int16x8_t v104 = v117[1] + ~(_DWORD)v118;
        int v107 = (unsigned __int8 *)(*(void *)(v10 + 88) + v118);
        goto LABEL_86;
      }
    }

    LODWORD(v101) = 0;
    goto LABEL_115;
  }

  return result;
}

LABEL_42:
        if (++v46 == v42) {
          return 1LL;
        }
      }
    }

    return 1LL;
  }

  return result;
}
          }

          uint64_t v42 = 4 * v41;
          uint64_t v43 = 4LL;
          while (*(_DWORD *)(*(void *)(v40 + 280) + v43) != (_DWORD)v30)
          {
            v43 += 4LL;
            if (v42 == v43) {
              goto LABEL_42;
            }
          }

          uint64_t v27 = *(_DWORD *)(*(void *)(v40 + 272) + v43);
        }

        int16x8_t v28 = sub_100031858(v72, v27);
      }

      *a6 = v28;
      *BOOL v71 = v34;
    }

    unsigned int v26 = 1LL;
    goto LABEL_14;
  }

  int v58 = (char *)sub_100031858(v72, v30);
  uint64_t v59 = v58;
  if (v73 != a1 && sub_100034540(v58))
  {
    uint64_t v60 = sub_1000277AC((uint64_t)a1, v30);
    uint64_t v59 = sub_100031858(v72, v60);
  }

  *a6 = v59;
  *BOOL v71 = 0;
  unsigned int v26 = 1LL;
LABEL_90:
  if (v73 != a1) {
    sub_1000271B0((uint64_t)v73);
  }
  return v26;
}

        BOOL v48 = *(unsigned __int16 *)sub_100015BAC(v17, 0);
        BOOL v49 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v48);
        uint64_t v13 = v209;
        uint64_t v16 = v214;
        int v15 = v216;
        if (v49 == 0x4000) {
          LOWORD(v49) = sub_100015BC0(v17, v48);
        }
        uint64_t v19 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          goto LABEL_35;
        }
        goto LABEL_47;
      }
    }
  }

    int v24 = (_WORD *)(result + 2 * v18 + 176);
    uint64_t v25 = v17 - v18;
    do
    {
      *v24++ = v11;
      --v25;
    }

    while (v25);
  }

  uint8x8_t v5 = 7LL;
  char v22 = result + 176;
  if (a4 < 0xFFFB)
  {
LABEL_45:
    unsigned int v26 = *(int *)(result + 148);
    if (a4 >= v26)
    {
      uint64_t v23 = a4 - v26 + *(_DWORD *)(result + 152) + 1;
    }

    else
    {
      uint64_t v27 = *(void *)(result + 128);
      if (v27) {
        LOWORD(v23) = *(_WORD *)(v27 + 2LL * a4);
      }
      else {
        LOWORD(v23) = *(_WORD *)(result + 144) + a4;
      }
    }

    goto LABEL_52;
  }

      if ((int)v22 >= 1)
      {
        if (!v18) {
          goto LABEL_51;
        }
        uint64_t v30 = *(int16x8_t **)(v18 + 8);
        if (a3)
        {
          int16x8_t v31 = v22;
          if (v12)
          {
            if (v22 < 0x10)
            {
              int16x8_t v32 = 0LL;
LABEL_57:
              uint64_t v43 = &v30->i16[v32];
              uint64_t v44 = v31 - v32;
              do
              {
                int v14 = 0;
                uint64_t v45 = *v43++;
                v8 += v45;
                --v44;
              }

              while (v44);
              goto LABEL_4;
            }

            int16x8_t v32 = v22 & 0x7FFFFFF0;
            int v36 = 0uLL;
            unsigned int v37 = (int32x4_t)v8;
            int v38 = v30 + 1;
            int v39 = v31 & 0xFFFFFFF0;
            uint64_t v40 = 0uLL;
            uint64_t v41 = 0uLL;
            do
            {
              uint64_t v42 = v38[-1];
              int v36 = vaddw_high_s16(v36, v42);
              unsigned int v37 = vaddw_s16(v37, *(int16x4_t *)v42.i8);
              uint64_t v41 = vaddw_high_s16(v41, *v38);
              uint64_t v40 = vaddw_s16(v40, *(int16x4_t *)v38->i8);
              v38 += 2;
              v39 -= 16LL;
            }

            while (v39);
            uint8x8_t v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v40, v37), vaddq_s32(v41, v36)));
            if (v32 != v31) {
              goto LABEL_57;
            }
          }

          else
          {
            if (v22 < 0x10)
            {
              int v35 = 0LL;
LABEL_71:
              uint64_t v64 = &v30->i16[v35];
              int v65 = v31 - v35;
              do
              {
                int v14 = 0;
                uint64_t v66 = *v64++;
                v8 += v66;
                --v65;
              }

              while (v65);
              goto LABEL_4;
            }

            int v35 = v22 & 0x7FFFFFF0;
            int v57 = 0uLL;
            int v58 = (int32x4_t)v8;
            uint64_t v59 = v30 + 1;
            uint64_t v60 = v31 & 0xFFFFFFF0;
            unsigned int v61 = 0uLL;
            unsigned int v62 = 0uLL;
            do
            {
              uint64_t v63 = v59[-1];
              int v57 = vaddw_high_s16(v57, v63);
              int v58 = vaddw_s16(v58, *(int16x4_t *)v63.i8);
              unsigned int v62 = vaddw_high_s16(v62, *v59);
              unsigned int v61 = vaddw_s16(v61, *(int16x4_t *)v59->i8);
              v59 += 2;
              v60 -= 16LL;
            }

            while (v60);
            uint8x8_t v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v61, v58), vaddq_s32(v62, v57)));
            if (v35 != v31) {
              goto LABEL_71;
            }
          }
        }

        else
        {
          if (!v12)
          {
LABEL_51:
            int v14 = 0;
            v8 += v22;
            goto LABEL_4;
          }

          uint64_t v33 = v22;
          if (v22 < 0x10)
          {
            int v34 = 0LL;
LABEL_63:
            int v54 = (unsigned __int16 *)v30 + v34;
            uint64_t v55 = v33 - v34;
            do
            {
              int v14 = 0;
              if (*v54++) {
                ++v8;
              }
              --v55;
            }

            while (v55);
            goto LABEL_4;
          }

          int v34 = v22 & 0x7FFFFFF0;
          uint64_t v46 = 0uLL;
          int v47 = (int32x4_t)v8;
          BOOL v48 = v30 + 1;
          BOOL v49 = v33 & 0xFFFFFFF0;
          BOOL v50 = 0uLL;
          int v51 = 0uLL;
          do
          {
            int v52 = (uint16x8_t)vtstq_s16(v48[-1], v48[-1]);
            int v53 = (uint16x8_t)vtstq_s16(*v48, *v48);
            uint64_t v46 = vaddq_s32(v46, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v52), v13));
            int v47 = vaddq_s32(v47, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8), v13));
            int v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v53), v13));
            BOOL v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8), v13));
            v48 += 2;
            v49 -= 16LL;
          }

          while (v49);
          uint8x8_t v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v50, v47), vaddq_s32(v51, v46)));
          if (v34 != v33) {
            goto LABEL_63;
          }
        }
      }

      int v14 = 0;
LABEL_4:
      uint64_t v9 = v16 + 1;
      uint8x8_t v7 = (unsigned __int16)(v16 + 1);
      uint64_t v6 = *(_DWORD *)(a1 + 1072);
      if (v6 <= v7) {
        goto LABEL_75;
      }
    }
  }

  uint8x8_t v8 = 0;
  int v14 = 1;
LABEL_75:
  uint64_t result = (double)(int)v8;
  if (a3) {
    uint64_t result = result / (double)*(int *)(a1 + 1404);
  }
  if (v14) {
    unint64_t v68 = a3 == 0;
  }
  else {
    unint64_t v68 = 0;
  }
  if (v68) {
    return -1.0;
  }
  return result;
}

      unsigned int v37 = v32 - 1;
      int v38 = v10 + 2;
      LODWORD(v10) = v10[1];
      if (v7 != 1)
      {
LABEL_46:
        if (v37) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }

    sub_1000C0EF8(*(void *)(v3 + 296));
    sub_1000C0EF8(*(void *)(v3 + 280));
    sub_1000C0EF8(*(void *)(v3 + 264));
    sub_1000C0EF8(*(void *)(v3 + 240));
    sub_1000C0EF8(*(void *)(v3 + 224));
    sub_1000C0EF8(*(void *)(v3 + 200));
    sub_1000C0EF8(*(void *)(v3 + 184));
    sub_10009460C((uint64_t *)v3);
    goto LABEL_43;
  }

  return v3;
}

            unint64_t v68 = 0LL;
LABEL_43:
            uint64_t v115 = v68;
            uint64_t v100 = sub_10003967C(v23, a13, a14, a2, v133, v124, a5, v123, v122, v120, v119, v118, v121, v68, 0LL);
            int v39 = v114;
            if (*v19) {
              goto LABEL_58;
            }
            goto LABEL_52;
          }

  sub_1000CB038(v49, 4LL * v47);
  sub_1000CB038(v35, v9);
  int v18 = v76;
LABEL_43:
  sub_1000CB038(v26, v18);
  sub_1000CB038(v17, v9);
  return a2;
}

uint64_t sub_100021A70( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BCAE8(a1, "bdf0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(64LL);
  if (!v10) {
    goto LABEL_20;
  }
  if (sub_1000BCD38(v9, (void *)v10)
    && sub_1000BCD38(v9, (void *)(v10 + 4))
    && sub_1000BCD38(v9, (void *)(v10 + 8))
    && sub_1000BCCEC(v9, (_DWORD *)(v10 + 12))
    && sub_1000BCCEC(v9, (_DWORD *)(v10 + 16)))
  {
    if (*(_DWORD *)(v10 + 16))
    {
      uint64_t v11 = (uint64_t *)(v10 + 32);
      int v12 = *(_DWORD *)v10;
      int v20 = 0;
      if (sub_1000BCED0(v9, 2, (uint64_t *)(v10 + 32), &v20))
      {
        int v13 = (2 * v12) | 1;
        uint64_t v14 = *v11;
        if (!*v11 || v20 == v13)
        {
          if (v14) {
            *(void *)(v10 + 24) = v14;
          }
          int v19 = 0;
          int v15 = (uint64_t *)(v10 + 48);
          if (sub_1000BCED0(v9, 2, (uint64_t *)(v10 + 48), &v19))
          {
            uint64_t v16 = *v15;
            if (!*v15 || v19 == v13)
            {
              if (v16) {
                *(void *)(v10 + 40) = v16;
              }
              goto LABEL_20;
            }
          }
        }
      }

      goto LABEL_21;
    }

    uint64_t v17 = sub_1000C1074(4LL * *(int *)(v10 + 4));
    *(void *)(v10 + 56) = v17;
    if (v17)
    {
LABEL_20:
      sub_1000BCBC8(v9);
      return v10;
    }
  }

uint64_t sub_100021C00(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100021C0C( uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v17 = sub_1000597F8(a1);
  uint64_t result = sub_100059830(a1);
  if (a4 >= 0)
  {
    if (a2[5] + (((a2[5] << 14) + 0x8000) >> 16) < 0)
    {
      *((_WORD *)a2 + 12) = 0;
      *((void *)a2 + 1) = 0LL;
      a2[4] = 0;
      a2[5] = 0;
      return result;
    }

    int v19 = a2[3];
    unsigned int v20 = v19 >= 0 ? a2[3] : -v19;
    if (!(v20 >> 15))
    {
      int v21 = a2[4];
      if (v21 <= 1073741822)
      {
        int v22 = a2[2];
        if (v22 != 0x7FFFFFFF)
        {
          int v23 = a2[1];
          if (v23 >= 1)
          {
            int v24 = 0;
            int v25 = 0;
            int v26 = 0;
            int v27 = 0;
            int v28 = *a2;
            uint64_t result = (*a2 - 1);
            int v29 = result + 2 * *a2;
            int v30 = -1;
            while (1)
            {
              if (v17 < 1)
              {
                int v35 = result + 2 * v28;
                int v36 = v29 % v28;
                uint64_t v37 = a3 + 2LL * v29;
                if (v29 % v28 >= 1) {
                  goto LABEL_28;
                }
              }

              else
              {
                uint64_t v34 = 0LL;
                int v35 = result + 2 * v28;
                do
                {
                  if (*(_DWORD *)(a7 + 4 * v34) > v30 && *(_DWORD *)(a7 + 4 * v34) < v35)
                  {
                    int v35 = *(_DWORD *)(a7 + 4 * v34);
                    int v24 = v34;
                  }

                  ++v34;
                }

                while (v17 != v34);
                int v36 = v35 % v28;
                uint64_t v37 = a3 + 2LL * v35;
                if (v35 % v28 >= 1)
                {
LABEL_28:
                  if (v36 >= 6) {
                    int v38 = 6;
                  }
                  else {
                    int v38 = v36;
                  }
                  int v39 = (v38 - 1) * *(__int16 *)(v37 - 2);
LABEL_35:
                  if (v36 >= 4) {
                    int v40 = 4;
                  }
                  else {
                    int v40 = v36;
                  }
                  v39 += *(__int16 *)(v37 + 2) * ~v40;
                  goto LABEL_12;
                }
              }

              int v39 = 0;
LABEL_12:
              if (v39 >= 0x7FFF) {
                int v31 = 0x7FFF;
              }
              else {
                int v31 = v39;
              }
              if (v31 <= -32768) {
                int v31 = -32768;
              }
              int v32 = v31 * *(__int16 *)(a5 + 2LL * v35);
              int v33 = (v32 + (((v32 >> 31) | 1) << (a6 - 1))) >> a6;
              if (v33 >= 0x7FFF) {
                int v33 = 0x7FFF;
              }
              if (v33 <= -32768) {
                int v33 = -32768;
              }
              v26 += (*(unsigned __int8 *)(a9 + v24) - *(unsigned __int8 *)(a8 + v24)) * v33;
              v25 += v33 * v33;
              ++v27;
              int v30 = v35;
              if (v27 == v23)
              {
                unsigned int v41 = (v25 + 16) >> 5;
                if (v26 < 0) {
                  int v42 = -16;
                }
                else {
                  int v42 = 16;
                }
                int v43 = (v42 + v26) >> 5;
                int v22 = a2[2];
                goto LABEL_44;
              }
            }
          }

          unsigned int v41 = 0;
          int v43 = 0;
LABEL_44:
          int v44 = v43 + v19;
          a2[3] = v44;
          if (v44 >= 0) {
            unsigned int v45 = v44;
          }
          else {
            unsigned int v45 = -v44;
          }
          if (!(v45 >> 15))
          {
            int v46 = v41 + v21;
            a2[4] = v46;
            a2[2] = v22 + 1;
            if (v22 < 7 || v46 < 1)
            {
              *((_WORD *)a2 + 12) = 0;
            }

            else
            {
              int v47 = (v44 << 15) / v46;
              if (v47 >= 0x7FFF) {
                int v47 = 0x7FFF;
              }
              if (v47 <= -32768) {
                LOWORD(v47) = 0x8000;
              }
              *((_WORD *)a2 + 12) = v47;
            }
          }
        }
      }
    }
  }

  return result;
}

void *sub_100021EF8( void *result, int *a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_WORD *)a2 + 12))
  {
    uint64_t v9 = (int *)a3;
    uint64_t v11 = (uint64_t)result;
    unint64_t v12 = sub_1000CAF58(6LL * *a2, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    int v13 = (char *)v12;
    if (*a2 >= 1)
    {
      uint64_t v14 = 0LL;
      do
      {
        *(_WORD *)(v12 + 2 * v14) = a4[v14];
        ++v14;
      }

      while (v14 < 3LL * *a2);
    }

    int v15 = sub_1000597F8(v11);
    if (v15 >= 1)
    {
      uint64_t v16 = v15;
      while (1)
      {
        uint64_t v20 = *v9++;
        uint64_t v19 = v20;
        int v21 = *a2;
        int v22 = (int)v20 % *a2;
        if (v22 >= 1) {
          break;
        }
        int v25 = 0;
        if (v22 < v21 - 1) {
          goto LABEL_23;
        }
LABEL_7:
        uint64_t v17 = 2 * v19;
        int v18 = *(__int16 *)&v13[v17] + (v25 >> 15);
        if (v18 >= 0x7FFF) {
          int v18 = 0x7FFF;
        }
        if (v18 <= -32768) {
          LOWORD(v18) = 0x8000;
        }
        *(_WORD *)&v13[v17] = v18;
        if (!--v16) {
          goto LABEL_30;
        }
      }

      if (v22 >= 6) {
        int v23 = 6;
      }
      else {
        int v23 = v22;
      }
      int v24 = (v23 - 1) * *((__int16 *)a2 + 12);
      if (v24 >= 0x7FFF) {
        int v24 = 0x7FFF;
      }
      if (v24 <= -32768) {
        int v24 = -32768;
      }
      int v25 = v24 * a4[(int)v19 - 1];
      if (v22 >= v21 - 1) {
        goto LABEL_7;
      }
LABEL_23:
      if (v22 >= 4) {
        int v22 = 4;
      }
      int v26 = *((__int16 *)a2 + 12) + *((__int16 *)a2 + 12) * v22;
      if (v26 >= 0x7FFF) {
        int v26 = 0x7FFF;
      }
      if (v26 <= -32768) {
        int v26 = -32768;
      }
      v25 -= v26 * a4[(int)v19 + 1];
      goto LABEL_7;
    }

LABEL_30:
    j__memmove(a4, v13, 6LL * *a2);
    return sub_1000CB038(v13, 6LL * *a2);
  }

  return result;
}

        sub_1000271B0(v11);
        return 0LL;
      }
    }
  }

  return 0LL;
}

  int v29 = 0;
LABEL_31:
  if (*(_DWORD *)(a1 + 640))
  {
  }

  return v29;
}

    else {
      int v31 = v13;
    }
    if (v13 >= 0) {
      LOWORD(v16) = v31;
    }
    else {
      LOWORD(v16) = 0;
    }
    return (__int16)v16;
  }

  LOWORD(v16) = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v16 = *(void *)(qword_1000FDCC0 + 3624);
    if ((v16 & 0x80000000) != 0)
    {
      LOWORD(v16) = 0;
    }

    else if (v16 >> 15)
    {
      LOWORD(v16) = 0x7FFF;
    }
  }

  return (__int16)v16;
}

        sub_1000C0EF8(v3[14]);
        sub_1000C0EF8(v3[11]);
        sub_1000C0EF8(v3[8]);
        sub_1000C0EF8(v3[5]);
        sub_1000C0EF8(v3[3]);
        sub_1000C0EF8((uint64_t)v3);
        return 0LL;
      }
    }
  }

  return v3;
}

      if (v30 >= 1)
      {
        int16x8_t v80 = v30;
        if ((int)v13 > 0)
        {
          int v33 = 0LL;
          while (2)
          {
            uint64_t v34 = *(void *)(v29 + 8);
            int v35 = *(__int16 *)(v34 + 2 * v33);
            if (!*(_WORD *)(v34 + 2 * v33)) {
              goto LABEL_34;
            }
            int v36 = v12;
            uint64_t v37 = v29;
            sub_100004868(v36, v27, v33, &v82);
            int v39 = 0LL;
            int v40 = *(void *)(*(void *)(v37 + 24) + 8 * v33);
            unsigned int v41 = v82;
            do
            {
              LOBYTE(v38) = *(_BYTE *)(v41 + v39);
              *(double *)&v14[v39] = (double)*(unint64_t *)&v38 - *(double *)(a2 + 8 * v39);
              int v42 = *(__int16 *)(v40 + 2 * v39);
              if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3740)) {
                v42 += *(unsigned __int8 *)(v41 + v39) * v35;
              }
              int v38 = (double)v42 + -(double)v35 * *(double *)(a3 + 8 * v39);
              *(double *)&v22[v39++] = v38;
            }

            while (v13 != v39);
            int v43 = v27;
            int v44 = *(_DWORD *)(v81 + 280);
            if (v44) {
              unsigned int v45 = (unint64_t)v14;
            }
            else {
              unsigned int v45 = (unint64_t)v22;
            }
            if (v44) {
              int v46 = (uint64_t)v22;
            }
            else {
              int v46 = (uint64_t)v14;
            }
            if (v77 != -1)
            {
              int v47 = sub_100005528(v81, v43, v33);
              if (v13 < 8 || v45 < v47 + 2LL * v13 && v47 < v45 + 8LL * v13)
              {
                BOOL v48 = 0LL;
                goto LABEL_53;
              }

              int v53 = v13 & 0xFFFFFFF8;
              int v54 = (float64x2_t *)v45;
              uint64_t v55 = (uint16x8_t *)v47;
              do
              {
                int32x4_t v56 = *v55++;
                int v57 = vmovl_high_u16(v56);
                v58.i64[0] = v57.u32[2];
                v58.i64[1] = v57.u32[3];
                uint64_t v59 = vcvtq_f64_u64(v58);
                v58.i64[0] = v57.u32[0];
                v58.i64[1] = v57.u32[1];
                uint64_t v60 = vcvtq_f64_u64(v58);
                unsigned int v61 = vmovl_u16(*(uint16x4_t *)v56.i8);
                v58.i64[0] = v61.u32[2];
                v58.i64[1] = v61.u32[3];
                unsigned int v62 = vcvtq_f64_u64(v58);
                v58.i64[0] = v61.u32[0];
                v58.i64[1] = v61.u32[1];
                uint64_t v63 = v54[1];
                uint64_t v64 = vmulq_f64(*v54, vcvtq_f64_u64(v58));
                int v65 = vmulq_f64(v54[3], v59);
                v54[2] = vmulq_f64(v54[2], v60);
                v54[3] = v65;
                *int v54 = v64;
                v54[1] = vmulq_f64(v63, v62);
                v54 += 4;
                v53 -= 8LL;
              }

              while (v53);
              BOOL v48 = v13 & 0xFFFFFFF8;
              if (v48 != v13)
              {
LABEL_53:
                BOOL v49 = (unsigned __int16 *)(v47 + 2 * v48);
                BOOL v50 = v13 - v48;
                int v51 = (double *)(v45 + 8 * v48);
                do
                {
                  int v52 = *v49++;
                  *int v51 = *v51 * (double)v52;
                  ++v51;
                  --v50;
                }

                while (v50);
              }
            }

            sub_1000BF278(v45, v46, v76);
            sub_1000BFA34(v78, v76, v78);
            int v27 = v43;
            unint64_t v12 = v81;
            int v29 = v79;
LABEL_34:
            if (++v33 == v80) {
              goto LABEL_3;
            }
            continue;
          }
        }

        for (unsigned int i = 0LL; i != v80; ++i)
        {
          if (*(_WORD *)(*(void *)(v29 + 8) + 2 * i))
          {
            sub_100004868(v12, v27, i, &v82);
            int v67 = *(_DWORD *)(v12 + 280);
            if (v67) {
              unint64_t v68 = (uint64_t)v14;
            }
            else {
              unint64_t v68 = (uint64_t)v22;
            }
            uint64_t v69 = v27;
            if (v67) {
              BOOL v70 = (uint64_t)v22;
            }
            else {
              BOOL v70 = (uint64_t)v14;
            }
            if (v77 != -1) {
              sub_100005528(v81, v69, i);
            }
            sub_1000BF278(v68, v70, v76);
            sub_1000BFA34(v78, v76, v78);
            int v27 = v69;
            unint64_t v12 = v81;
            int v29 = v79;
          }
        }
      }

  sub_1000CB038(v20, v30);
  if (a5 || (int)v6 > (int)v26) {
    return sub_10008D8C4( a1[66],  a2,  a3,  ((_DWORD)v6 - (_DWORD)v26) & ~(((int)v6 - (int)v26) >> 31),  a5)
  }
         + v26;
  else {
    return v26;
  }
}

      int v35 = *v6++;
      uint64_t v34 = v35;
      if (*(_BYTE *)(v5 + v35) != 2)
      {
        int v23 = (unsigned __int8 *)v7;
        int v38 = *v6++;
        uint8x8_t v7 = v38;
        if (*(_BYTE *)(v5 + v38) == 2)
        {
LABEL_22:
          int v25 = *(void *)(a1 + 104);
          int v26 = *(unsigned __int16 *)(v25 + 2 * v7);
          int v15 = *(unsigned __int16 *)(v25 + 2 * v7 + 2) + ~(_DWORD)v26;
          int v27 = (unsigned __int8 *)(*(void *)(a1 + 88) + v26);
          int v28 = v27 + 1;
          LODWORD(v7) = *v27;
          if (v17 != 1)
          {
LABEL_23:
            if (v15)
            {
              --v15;
              goto LABEL_39;
            }

            int v23 = v28;
LABEL_37:
            int v40 = *v6++;
            int v39 = v40;
            if (*(_BYTE *)(v5 + v40) != 2)
            {
              int v15 = 0;
              goto LABEL_41;
            }

            unsigned int v41 = *(void *)(a1 + 104);
            int v42 = *(unsigned __int16 *)(v41 + 2 * v39);
            int v15 = *(unsigned __int16 *)(v41 + 2 * v39 + 2) + ~(_DWORD)v42;
            int v28 = (unsigned __int8 *)(*(void *)(a1 + 88) + v42);
LABEL_39:
            LODWORD(v39) = *v28;
            int v23 = v28 + 1;
LABEL_41:
            LODWORD(v7) = v7 | ((_DWORD)v39 << 8);
            goto LABEL_42;
          }

          goto LABEL_33;
        }

  unsigned int v45 = *v37;
  if ((int)v45 >= 1)
  {
    int v46 = sub_1000C1074(v45);
    *(void *)(v20 + 272) = v46;
    if (!v46) {
      goto LABEL_37;
    }
    if (*v37 >= 1)
    {
      int v47 = 0LL;
      do
        *(_BYTE *)(*(void *)(v20 + 272) + v47++) = -1;
      while (v47 < *(int *)(v20 + 224));
      if (!*(void *)(v20 + 272)) {
        goto LABEL_37;
      }
    }
  }

  *(_DWORD *)(v20 + 24) = a11;
  return v20;
}

  int v44 = sub_1000BE644(0xFFFFFFFF, 4, v42);
  unsigned int v45 = *(void *)(*(void *)(a1 + 144) + 64LL);
  if (v45)
  {
LABEL_16:
    int v46 = sub_1000BE644(-1431655765 * ((unint64_t)(v45 - *(void *)(a1 + 128)) >> 1), 4, v44);
    int v47 = *(void *)(*(void *)(a1 + 144) + 72LL);
    if (v47) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }

  uint64_t result = sub_1000B9044(*(uint64_t **)result, a2, *(_DWORD **)(result + 24));
  uint64_t v10 = result;
  if ((int)result < 256)
  {
    uint64_t result = sub_10009B490(v9, a2, v13, v14, *(void *)(v9 + 24), 0LL, result, (uint64_t)&v33);
LABEL_36:
    if (a3)
    {
      uint64_t v10 = *v30;
      *a3 = v30 + 1;
    }

    if (a4)
    {
      int v32 = *v31;
      uint64_t v11 = v31 + 1;
      uint64_t v10 = v32;
      goto LABEL_40;
    }

    goto LABEL_41;
  }

  if (a3) {
    *a3 = *(void *)(v9 + 24);
  }
  if (a4)
  {
    uint64_t result = sub_1000059CC( *(void *)(v9 + 8),  *(unsigned __int16 **)(v9 + 24),  result,  *(_WORD **)(v9 + 40),  0LL,  0LL,  v28,  v29);
    uint64_t v11 = *(unsigned __int16 **)(v9 + 40);
    goto LABEL_40;
  }

  if (*(_DWORD *)(v21 + 4448)) {
    int v25 = v8;
  }
  else {
    int v25 = 0;
  }
  *(_DWORD *)(v7 + 616) = v25;
  if (v25 != 1) {
    return v7;
  }
  int v26 = sub_1000B3298(*(void *)(v7 + 376));
  if (!sub_1000C1744( (const void **)(v7 + 624),  (int *)(v7 + 636),  (signed int *)(v7 + 632),  8,  2,  v26 + 1)) {
    goto LABEL_39;
  }
  int v27 = 2LL * (int)(sub_1000B32A0(*(uint64_t **)(v7 + 376)) + 1);
  int v35 = (_DWORD *)sub_1000CAF58(v27, v28, v29, v30, v31, v32, v33, v34);
  if ((v26 & 0x80000000) == 0)
  {
    int v36 = 0;
    uint64_t v37 = v26 + 1;
    do
    {
      *(_WORD *)(*(void *)(*(void *)(v7 + 624) + 8LL * (v36 >> 8)) + 2LL * v36) = *((_WORD *)v35 + (int)(sub_1000B9044(*(uint64_t **)(v7 + 376), (unsigned __int16)v36, v35) - 1));
      ++v36;
    }

    while (v37 != v36);
  }

  sub_1000CB038(v35, v27);
  return v7;
}

    sub_1000CB038(v59, 4LL * v47);
  }

  if (v61 >= v47) {
    goto LABEL_10;
  }
  if (v61 != 1)
  {
    a2 = *(unsigned int *)v49;
    if (v61 >= 1)
    {
      uint64_t v73 = v61;
      uint64_t v74 = (unsigned int *)v49;
      while (1)
      {
        sub_1000B33F8((char *)a1, *v74, (uint64_t)v17, v26);
        ++v74;
        if (!--v73) {
          goto LABEL_42;
        }
      }

  sub_1000CB094(v437);
  BOOL v50 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    int v51 = *(_DWORD *)(qword_1000FDCC0 + 5496);
    BOOL v50 = *(void *)(qword_1000FDCC0 + 5488);
  }

  else
  {
    int v51 = 0;
  }

  int v52 = v434;
  v410 = v50;
  v420 = v51;
  v403 = sub_1000CB0B0();
  v435 = sub_100082DD8(*v434);
  v396 = sub_1000CC52C((unint64_t)__src);
  __dst = (void *)sub_1000CAF58(2LL * (v396 + 1), v53, v54, v55, v56, v57, v58, v59);
  uint64_t v60 = 4 * v412;
  unint64_t v68 = (_DWORD *)sub_1000CAF58(4 * v412, v61, v62, v63, v64, v65, v66, v67);
  int16x8_t v76 = (int *)sub_1000CAF58(4LL * ((int)v404 + 1), v69, v70, v71, v72, v73, v74, v75);
  int v84 = (char *)sub_1000CAF58(4 * v412, v77, v78, v79, v80, v81, v82, v83);
  int v92 = (char *)sub_1000CAF58(v412, v85, v86, v87, v88, v89, v90, v91);
  v425 = (_BYTE *)sub_1000CAF58(v412, v93, v94, v95, v96, v97, v98, v99);
  v438 = v92;
  v430 = v68;
  uint64_t v100 = sub_1000B5964(v434, 1, (unint64_t)__src, 0, 0, v404, v68, v76, v84, v92, v425);
  if (!(_DWORD)v100)
  {
    *v408 = 0;
    goto LABEL_195;
  }

  int v108 = v100;
  v413 = v100;
  if ((int)v100 <= (int)v404)
  {
    int v109 = (int)v100;
    uint64_t v125 = v76;
  }

  else
  {
    sub_1000CB038(v425, v412);
    sub_1000CB038(v92, v412);
    sub_1000CB038(v84, v60);
    sub_1000CB038(v76, 4LL * ((int)v404 + 1));
    sub_1000CB038(v68, v60);
    int v109 = (int)v413;
    int v117 = (_DWORD *)sub_1000CAF58(4LL * (int)v413, v110, v111, v112, v113, v114, v115, v116);
    uint64_t v125 = (int *)sub_1000CAF58(4LL * ((int)v413 + 1), v118, v119, v120, v121, v122, v123, v124);
    int v108 = v413;
    int v84 = (char *)sub_1000CAF58(4LL * (int)v413, v126, v127, v128, v129, v130, v131, v132);
    int v140 = (char *)sub_1000CAF58((int)v413, v133, v134, v135, v136, v137, v138, v139);
    v425 = (_BYTE *)sub_1000CAF58((int)v413, v141, v142, v143, v144, v145, v146, v147);
    v438 = v140;
    v430 = v117;
    sub_1000B5964(v434, 1, (unint64_t)__src, 0, 0, v413, v117, v125, v84, v140, v425);
  }

  v417 = v125;
  v125[v109] = *(_DWORD *)&v84[4 * (v108 - 1)] + v125[v108 - 1];
  int v148 = 8 * v109;
  v149 = v109;
  uint64_t v150 = sub_1000CAF58(8 * v109, v101, v102, v103, v104, v105, v106, v107);
  v432 = sub_1000CAF58(v148, v151, v152, v153, v154, v155, v156, v157);
  v409 = v149;
  signed int v165 = sub_1000CAF58(v149, v158, v159, v160, v161, v162, v163, v164);
  float64x2_t v166 = sub_100082D10(*v434);
  v397 = v148;
  if (qword_1000FDCC0) {
    v411 = *(_DWORD *)(qword_1000FDCC0 + 5496);
  }
  else {
    v411 = 0;
  }
  uint64_t v174 = v108;
  double v175 = v108;
  v394 = v166 + 1;
  if (v166 + 1 <= 51) {
    uint64_t v176 = 51;
  }
  else {
    uint64_t v176 = v166 + 1;
  }
  if (v420 <= 4) {
    int v177 = 4;
  }
  else {
    int v177 = v420;
  }
  int v178 = v176 * v177;
  v436 = (_WORD *)sub_1000CAF58(2 * v176 * v177, v167, v168, v169, v170, v171, v172, v173);
  v418 = v84;
  v433 = v150;
  v424 = v165;
  v427 = v174;
  if (v175 >= 1)
  {
    v415 = v178;
    uint16x4_t v186 = 0LL;
    v428 = 0;
    HIDWORD(v440[0]) = 0;
    v422 = 8LL * v420;
    uint64_t v187 = v400 != 0;
    v405 = 2LL * v176;
    v401 = 1;
    while (1)
    {
      while (1)
      {
        *(void *)(v150 + 8 * v186) = sub_1000CAF58(v422, v179, v180, v181, v182, v183, v184, v185);
        *(void *)(v432 + 8 * v186) = sub_1000CAF58(v422, v192, v193, v194, v195, v196, v197, v198);
        int v199 = v430[v186];
        if (v199 == -1) {
          break;
        }
        if (!v425[v186])
        {
          float64x2_t v220 = v199 >> 30;
          if (v199 >> 30 == 1)
          {
            uint32x4_t v221 = v432;
            unint64_t v222 = v405;
            if ((_WORD)v199 == 0xFFFF
              || sub_10001EDF8(v52[1], (unsigned __int16)v430[v186], 0LL) == 0xFFFF)
            {
              goto LABEL_97;
            }

            v223 = 1;
          }

          else
          {
            uint32x4_t v221 = v432;
            unint64_t v222 = v405;
            if (v220 == 2)
            {
              v223 = sub_10001FE60(v52[1], (unsigned __int16)v430[v186]);
            }

            else
            {
              if (v220 == 3)
              {
                v223 = sub_100082D28(*v52);
                goto LABEL_99;
              }

              v54.locatiounsigned __int16 n = 0LL;
              v54.length = v28;
              CFArrayAppendArray(theArray, v29, v54);
              v55.locatiounsigned __int16 n = 0LL;
              v55.length = v28;
              CFArrayAppendArray(Mutable, otherArray, v55);
              uint64_t v20 = v20 + v28 - 1;
              int v21 = 1;
              uint8x8_t v7 = v44;
            }

            else
            {
              int v21 = 1;
            }

            KnownClassValues = v48;
          }

          else
          {
            int v26 = Value;
            if (Value)
            {
              CFArrayAppendValue(theArray, v23);
              CFArrayAppendValue(Mutable, v26);
            }
          }

          CFRelease(v23);
          ++v20;
        }

        while (v20 < v19);
      }

      if (CFArrayGetCount(theArray) == v19 && CFArrayGetCount(Mutable) == v19)
      {
        int v13 = v43;
        if (cf) {
          CFRelease(cf);
        }
        int v35 = v41;
        if (!v41)
        {
          int v35 = *(const void **)(*v40 + 16LL);
          if (v35) {
            CFRetain(*(CFTypeRef *)(*v40 + 16LL));
          }
        }

        unsigned int v41 = v35;
        uint64_t v14 = (const void *)VSRecognitionResultCreate(allocator, v35);
        int v53 = v14;
        int v15 = v19;
      }

      else
      {
        int v13 = v43;
        int v15 = v46;
        uint64_t v14 = cf;
      }

      CFRelease(theArray);
      CFRelease(Mutable);
    }

    ++v16;
  }

  while (v16 != v13);
  if (!v14)
  {
    uint8x8_t v5 = 1LL;
    uint64_t v37 = v41;
    goto LABEL_53;
  }

  int v36 = *(uint64_t (**)(void, CFTypeRef *, void, void))(*v40 + 600LL);
  if (!v36)
  {
    uint8x8_t v5 = 1LL;
    uint64_t v37 = v41;
    goto LABEL_64;
  }

  uint8x8_t v5 = v36(*v40, &v53, v40[1], *(void *)(*v40 + 656LL));
  uint64_t v37 = v41;
  if ((_DWORD)v5)
  {
LABEL_64:
    CFRelease(v7);
    *int v39 = v53;
    goto LABEL_53;
  }

  CFRelease(v53);
LABEL_53:
  if (v52) {
    CFRelease(v52);
  }
  if (otherArray) {
    CFRelease(otherArray);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v5;
}

uint64_t sub_1000220A0(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _WORD *a6)
{
  if (result)
  {
    *a2 = *(_DWORD *)(result + 8);
    *a3 = *(_DWORD *)(result + 12);
    *a4 = *(_DWORD *)(result + 16);
    *a5 = *(_DWORD *)(result + 20);
    *a6 = *(_WORD *)(result + 24);
  }

  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
  }

  return result;
}

uint64_t sub_1000220E8(uint64_t result, int a2, int a3, int a4, int a5, __int16 a6)
{
  if (result)
  {
    *(_DWORD *)(result + 8) = a2;
    *(_DWORD *)(result + 12) = a3;
    *(_DWORD *)(result + 16) = a4;
    *(_DWORD *)(result + 20) = a5;
    *(_WORD *)(result + 24) = a6;
  }

  return result;
}

uint64_t sub_1000220FC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t sub_100022108( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8 = sub_1000BCAE8(a1, "bcw0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = sub_1000C1074(28LL);
    if (!v10)
    {
      sub_1000BCBC8(v9);
      return 0LL;
    }

    if (sub_1000BCD38(v9, (void *)v10))
    {
      BOOL v11 = sub_1000BCD38(v9, (void *)(v10 + 4));
      sub_1000BCBC8(v9);
      if (v11)
      {
        *(void *)(v10 + 8) = 0LL;
        *(void *)(v10 + 16) = 0LL;
        *(_WORD *)(v10 + 24) = 0;
        return v10;
      }
    }

    else
    {
      sub_1000BCBC8(v9);
    }

    sub_1000C0EF8(v10);
  }

  return 0LL;
}

uint64_t sub_1000221CC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 80));
    sub_1000C0EF8(v1[9]);
    sub_1000C0EF8(v1[3]);
    sub_1000C0EF8(v1[7]);
    sub_1000C0EF8(v1[8]);
    sub_1000C0EF8(v1[1]);
    sub_1000C0EF8(v1[5]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

void *sub_10002222C(uint64_t a1)
{
  uint64_t result = memcpy(*(void **)a1, *(const void **)(a1 + 32), 2LL * *(int *)(a1 + 104));
  *(_DWORD *)(a1 + 120) = 0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 2448))
    {
      if (!*(_DWORD *)(qword_1000FDCC0 + 2908))
      {
        *(_DWORD *)(a1 + 120) = 1;
        uint64_t result = memcpy(*(void **)(a1 + 16), *(const void **)(a1 + 48), 2LL * *(int *)(a1 + 104));
        if (*(int *)(a1 + 104) >= 1)
        {
          uint64_t v3 = 0LL;
          do
          {
            int v4 = *(__int16 *)(*(void *)a1 + 2 * v3);
            *(_DWORD *)(*(void *)(a1 + 72) + 4 * v3) = v4 * v4
            ++v3;
          }

          while (v3 < *(int *)(a1 + 104));
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000222E0(uint64_t result)
{
  int v1 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v1 = *(_DWORD *)(qword_1000FDCC0 + 2448);
  }
  *(_DWORD *)(result + 120) = v1;
  return result;
}

void sub_1000222FC(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(a1 + 132) = 0x100000001LL;
    bzero(*(void **)(a1 + 64), 4LL * *(int *)(a1 + 104));
    *(_DWORD *)(a1 + 112) = 0;
    if (*(_DWORD *)(a1 + 120))
    {
      bzero(*(void **)(a1 + 72), 4LL * *(int *)(a1 + 104));
      bzero(*(void **)(a1 + 80), 2LL * *(int *)(a1 + 104));
    }

    *(_DWORD *)(a1 + 140) = 0;
  }

  else
  {
    *(_DWORD *)(a1 + 132) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 140) = 0;
  }

uint64_t sub_100022378(uint64_t result, uint64_t a2, char a3)
{
  if (*(_DWORD *)(result + 136) && ((a3 & 1) != 0 || *(_DWORD *)(result + 124)))
  {
    if (*(int *)(result + 104) >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        *(_DWORD *)(*(void *)(result + 64) + 4 * v3) += *(__int16 *)(a2 + 2 * v3);
        if (*(_DWORD *)(result + 120))
        {
          uint64_t v4 = *(void *)(result + 72);
          unsigned int v5 = *(_DWORD *)(v4 + 4 * v3);
          if (v5 >> 30)
          {
            *(_DWORD *)(v4 + 4 * v3) = v5 >> 2;
            *(_WORD *)(*(void *)(result + 80) + 2 * v3) += 2;
          }
        }

        ++v3;
      }

      while (v3 < *(int *)(result + 104));
    }

    ++*(_DWORD *)(result + 112);
  }

  return result;
}

uint64_t sub_100022430(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 136)) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 112) <= *(_DWORD *)(a1 + 108))
  {
    if (*(_DWORD *)(a1 + 120) && *(int *)(a1 + 104) >= 1)
    {
      uint64_t v8 = 0LL;
      do
      {
        int v9 = *(__int16 *)(*(void *)a1 + 2 * v8);
        *(_DWORD *)(*(void *)(a1 + 72) + 4 * v8) = v9 * v9
        ++v8;
      }

      while (v8 < *(int *)(a1 + 104));
    }
  }

  else if (*(int *)(a1 + 104) >= 1)
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * v2);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      *(_WORD *)(*(void *)a1 + 2 * v2) = -(__int16)(-v3 / *(_DWORD *)(a1 + 112));
      if (*(_DWORD *)(a1 + 120)) {
        goto LABEL_10;
      }
LABEL_5:
    }

    *(_WORD *)(*(void *)a1 + 2 * v2) = v3 / *(_DWORD *)(a1 + 112);
    if (!*(_DWORD *)(a1 + 120)) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 4 * v2;
    *(_DWORD *)(*(void *)(a1 + 72) + v4) = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) / *(_DWORD *)(a1 + 112);
    *(_DWORD *)(*(void *)(a1 + 72) + v4) = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) << *(_WORD *)(*(void *)(a1 + 80) + 2 * v2);
    int v5 = *(__int16 *)(*(void *)a1 + 2 * v2);
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) - v5 * v5;
    *(_WORD *)(*(void *)(a1 + 16) + 2 * v2) = sub_10007BD9C(v6);
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v2) = v6;
    goto LABEL_5;
  }

uint64_t sub_1000225A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1000225B0(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 136)) {
    return 0LL;
  }
  int v8 = *(_DWORD *)(a1 + 88);
  if (!*(_DWORD *)(a1 + 116) || (*a3 & 9) != 1)
  {
    if (*(_DWORD *)(a1 + 128))
    {
      LODWORD(v29) = *(_DWORD *)(a1 + 100);
      if ((int)v29 >= 1)
      {
        uint64_t v30 = 0LL;
        do
        {
          __int16 v31 = *(_WORD *)(a2 + 2 * v30) - *(_WORD *)(*(void *)a1 + 2 * v30);
          *(_WORD *)(a4 + 2 * v30) = v31;
          if (*(_DWORD *)(a1 + 120))
          {
            unsigned int v32 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v30);
            if (v31 < 0) {
              int v33 = -(int)(((v32 >> 1) - (v31 << v8)) / v32);
            }
            else {
              LOWORD(v33) = ((v32 >> 1) + (v31 << v8)) / v32;
            }
            *(_WORD *)(a4 + 2 * v30) = v33;
          }

          ++v30;
        }

        while (v30 < *(int *)(a1 + 100));
        LODWORD(v29) = *(_DWORD *)(a1 + 100);
      }

      if ((int)v29 < *(_DWORD *)(a1 + 104))
      {
        uint64_t v29 = (int)v29;
        do
        {
          __int16 v34 = *(_WORD *)(a2 + 2 * v29) - *(_WORD *)(*(void *)a1 + 2 * v29);
          *(_WORD *)(a4 + 2 * v29) = v34;
          if (*(_DWORD *)(a1 + 120))
          {
            unsigned int v35 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v29);
            if (v34 < 0) {
              int v36 = -(int)(((v35 >> 1) - (v34 << v8)) / v35);
            }
            else {
              LOWORD(v36) = ((v35 >> 1) + (v34 << v8)) / v35;
            }
            *(_WORD *)(a4 + 2 * v29) = v36;
          }

          ++v29;
        }

        while (v29 < *(int *)(a1 + 104));
      }
    }

    else if (*(int *)(a1 + 104) >= 1)
    {
      uint64_t v37 = 0LL;
      do
      {
        __int16 v38 = *(_WORD *)(a2 + 2 * v37) - *(_WORD *)(*(void *)a1 + 2 * v37);
        *(_WORD *)(a4 + 2 * v37) = v38;
        if (*(_DWORD *)(a1 + 120))
        {
          unsigned int v39 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v37);
          if (v38 < 0) {
            int v40 = -(int)(((v39 >> 1) - (v38 << v8)) / v39);
          }
          else {
            LOWORD(v40) = ((v39 >> 1) + (v38 << v8)) / v39;
          }
          *(_WORD *)(a4 + 2 * v37) = v40;
        }

        ++v37;
      }

      while (v37 < *(int *)(a1 + 104));
    }

    return 1LL;
  }

  if (*(_DWORD *)(a1 + 128))
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 100);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0LL;
      do
      {
        int v11 = *(unsigned __int16 *)(*(void *)a1 + 2 * v10);
        int v12 = *(__int16 *)(a2 + 2 * v10) - *(__int16 *)(*(void *)a1 + 2 * v10);
        char v13 = *(_DWORD *)(a1 + 92);
        int v14 = 1 << (v13 - 1);
        int v15 = v11 + ((v14 + v12) >> v13);
        int v16 = v11 - ((v14 - v12) >> v13);
        if (v12 < 0) {
          __int16 v17 = v16;
        }
        else {
          __int16 v17 = v15;
        }
        *(_WORD *)(*(void *)a1 + 2 * v10) = v17;
        __int16 v18 = *(_WORD *)(a2 + 2 * v10) - *(_WORD *)(*(void *)a1 + 2 * v10);
        *(_WORD *)(a4 + 2 * v10) = v18;
        if (*(_DWORD *)(a1 + 120))
        {
          uint64_t v19 = *(void *)(a1 + 72);
          int v20 = *(_DWORD *)(v19 + 4 * v10);
          int v21 = v18 * v18 - v20;
          char v22 = *(_DWORD *)(a1 + 96);
          int v23 = 1 << (v22 - 1);
          unsigned int v24 = ((v23 + v21) >> v22) + v20;
          unsigned int v25 = v20 - ((v23 - v21) >> v22);
          if (v21 < 0) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = v24;
          }
          *(_DWORD *)(v19 + 4 * v10) = v26;
          *(_WORD *)(*(void *)(a1 + 16) + 2 * v10) = sub_10007BD9C(v26);
          int v27 = *(__int16 *)(a4 + 2 * v10);
          unsigned int v28 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v10);
          if (v27 < 0) {
            int v27 = -(int)(((v28 >> 1) - (v27 << v8)) / v28);
          }
          else {
            LOWORD(v27) = ((v28 >> 1) + (v27 << v8)) / v28;
          }
          *(_WORD *)(a4 + 2 * v10) = v27;
        }

        ++v10;
        uint64_t v9 = *(int *)(a1 + 100);
      }

      while (v10 < v9);
    }

    uint64_t v4 = 1LL;
    if ((int)v9 < *(_DWORD *)(a1 + 104))
    {
      uint64_t v41 = (int)v9;
      do
      {
        int v42 = *(unsigned __int16 *)(*(void *)a1 + 2 * v41);
        int v43 = *(__int16 *)(a2 + 2 * v41) - *(__int16 *)(*(void *)a1 + 2 * v41);
        char v44 = *(_DWORD *)(a1 + 92);
        int v45 = 1 << (v44 - 1);
        int v46 = v42 + ((v45 + v43) >> v44);
        int v47 = v42 - ((v45 - v43) >> v44);
        if (v43 < 0) {
          __int16 v48 = v47;
        }
        else {
          __int16 v48 = v46;
        }
        *(_WORD *)(*(void *)a1 + 2 * v41) = v48;
        int v49 = *(__int16 *)(a2 + 2 * v41);
        *(_WORD *)(a4 + 2 * v41) = *(_WORD *)(a2 + 2 * v41);
        if (*(_DWORD *)(a1 + 120))
        {
          uint64_t v50 = *(void *)(a1 + 72);
          int v51 = *(_DWORD *)(v50 + 4 * v41);
          int v52 = v49 * v49 - v51;
          char v53 = *(_DWORD *)(a1 + 96);
          int v54 = 1 << (v53 - 1);
          unsigned int v55 = ((v54 + v52) >> v53) + v51;
          unsigned int v56 = v51 - ((v54 - v52) >> v53);
          if (v52 < 0) {
            unsigned int v57 = v56;
          }
          else {
            unsigned int v57 = v55;
          }
          *(_DWORD *)(v50 + 4 * v41) = v57;
          *(_WORD *)(*(void *)(a1 + 16) + 2 * v41) = sub_10007BD9C(v57);
          int v58 = *(__int16 *)(a4 + 2 * v41);
          unsigned int v59 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v41);
          if (v58 < 0) {
            int v58 = -(int)(((v59 >> 1) - (v58 << v8)) / v59);
          }
          else {
            LOWORD(v58) = ((v59 >> 1) + (v58 << v8)) / v59;
          }
          *(_WORD *)(a4 + 2 * v41) = v58;
        }

        ++v41;
      }

      while (v41 < *(int *)(a1 + 104));
      return 1LL;
    }
  }

  else
  {
    uint64_t v60 = 0LL;
    do
    {
      int v61 = *(unsigned __int16 *)(*(void *)a1 + 2 * v60);
      int v62 = *(__int16 *)(a2 + 2 * v60) - *(__int16 *)(*(void *)a1 + 2 * v60);
      char v63 = *(_DWORD *)(a1 + 92);
      int v64 = 1 << (v63 - 1);
      int v65 = v61 + ((v64 + v62) >> v63);
      int v66 = v61 - ((v64 - v62) >> v63);
      if (v62 < 0) {
        __int16 v67 = v66;
      }
      else {
        __int16 v67 = v65;
      }
      *(_WORD *)(*(void *)a1 + 2 * v60) = v67;
      __int16 v68 = *(_WORD *)(a2 + 2 * v60) - *(_WORD *)(*(void *)a1 + 2 * v60);
      *(_WORD *)(a4 + 2 * v60) = v68;
      if (*(_DWORD *)(a1 + 120))
      {
        uint64_t v69 = *(void *)(a1 + 72);
        int v70 = *(_DWORD *)(v69 + 4 * v60);
        int v71 = v68 * v68 - v70;
        char v72 = *(_DWORD *)(a1 + 96);
        int v73 = 1 << (v72 - 1);
        unsigned int v74 = ((v73 + v71) >> v72) + v70;
        unsigned int v75 = v70 - ((v73 - v71) >> v72);
        if (v71 < 0) {
          unsigned int v76 = v75;
        }
        else {
          unsigned int v76 = v74;
        }
        *(_DWORD *)(v69 + 4 * v60) = v76;
        *(_WORD *)(*(void *)(a1 + 16) + 2 * v60) = sub_10007BD9C(v76);
        int v77 = *(__int16 *)(a4 + 2 * v60);
        unsigned int v78 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v60);
        if (v77 < 0) {
          int v77 = -(int)(((v78 >> 1) - (v77 << v8)) / v78);
        }
        else {
          LOWORD(v77) = ((v78 >> 1) + (v77 << v8)) / v78;
        }
        *(_WORD *)(a4 + 2 * v60) = v77;
      }

      ++v60;
      uint64_t v4 = 1LL;
    }

    while (v60 < *(int *)(a1 + 104));
  }

  return v4;
}

uint64_t sub_100022AC4(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      *(_WORD *)(a2 + 2 * v2) = *(_WORD *)(*(void *)result + 2 * v2);
      ++v2;
    }

    while (v2 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022AF8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 104);
  if (*(_DWORD *)(result + 120))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        *(_WORD *)(a2 + 2 * v3) = *(_WORD *)(*(void *)(result + 16) + 2 * v3);
        ++v3;
      }

      while (v3 < *(int *)(result + 104));
    }
  }

  else if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    do
      *(_WORD *)(a2 + 2 * v4++) = 1 << *(_DWORD *)(result + 88);
    while (v4 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022B60(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 104);
  if (*(_DWORD *)(result + 120))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(*(void *)(result + 72) + 4 * v3);
        ++v3;
      }

      while (v3 < *(int *)(result + 104));
    }
  }

  else if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    do
      *(_DWORD *)(a2 + 4 * v4++) = 1 << (2 * *(_BYTE *)(result + 88));
    while (v4 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022BCC(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      *(_WORD *)(*(void *)result + 2 * v2) = *(_WORD *)(a2 + 2 * v2);
      ++v2;
    }

    while (v2 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022C00(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 120) && *(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      *(_WORD *)(*(void *)(result + 16) + 2 * v2) = *(_WORD *)(a2 + 2 * v2);
      ++v2;
    }

    while (v2 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022C3C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 120) && *(int *)(result + 104) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      *(_DWORD *)(*(void *)(result + 72) + 4 * v2) = *(_DWORD *)(a2 + 4 * v2);
      ++v2;
    }

    while (v2 < *(int *)(result + 104));
  }

  return result;
}

uint64_t sub_100022C78( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BCAE8(a1, "bch0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(144LL);
  uint64_t v11 = v10;
  if (v10)
  {
    if (!sub_1000BCCEC(v9, (_DWORD *)(v11 + 116))) {
      goto LABEL_38;
    }
    if (!sub_1000BCCEC(v9, (_DWORD *)(v11 + 120))) {
      goto LABEL_38;
    }
    if (!sub_1000BCCEC(v9, (_DWORD *)(v11 + 124))) {
      goto LABEL_38;
    }
    if (!sub_1000BCCEC(v9, (_DWORD *)(v11 + 128))) {
      goto LABEL_38;
    }
    uint64_t v12 = *(int *)(v11 + 104);
    int v25 = 0;
    char v13 = (uint64_t *)(v11 + 8);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (v25 != (_DWORD)v12) {
        goto LABEL_38;
      }
    }

    if (v14) {
      *(void *)uint64_t v11 = v14;
    }
    int v25 = 0;
    int v15 = (uint64_t *)(v11 + 24);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (v25 != (_DWORD)v12) {
        goto LABEL_38;
      }
    }

    if (v16) {
      *(void *)(v11 + 16) = v16;
    }
    int v25 = 0;
    __int16 v17 = (uint64_t *)(v11 + 40);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (v25 != (_DWORD)v12) {
        goto LABEL_38;
      }
    }

    if (v18) {
      *(void *)(v11 + 32) = v18;
    }
    int v25 = 0;
    uint64_t v19 = (uint64_t *)(v11 + 56);
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (v25 != (_DWORD)v12) {
        goto LABEL_38;
      }
    }

    if (v20) {
      *(void *)(v11 + 48) = v20;
    }
    uint64_t v21 = sub_1000C1074(4 * v12);
    *(void *)(v11 + 64) = v21;
    if (v21
      && (!*(_DWORD *)(v11 + 120)
       || (uint64_t v22 = sub_1000C1074(4 * v12), (*(void *)(v11 + 72) = v22) != 0LL)
       && (uint64_t v23 = sub_1000C1074(2 * v12), (*(void *)(v11 + 80) = v23) != 0LL)))
    {
      sub_10002222C(v11);
    }

    else
    {
LABEL_38:
      sub_1000221CC(v11);
      uint64_t v11 = 0LL;
    }
  }

  sub_1000BCBC8(v9);
  return v11;
}

uint64_t sub_100022ED0(int *a1)
{
  uint64_t result = sub_1000C1074(2LL * *a1);
  *((void *)a1 + 8) = result;
  if (result)
  {
    a1[4] = 0;
    uint64_t result = 1LL;
    a1[20] = 1;
    __int16 v3 = *((_WORD *)a1 + 36);
    *((_WORD *)a1 + 42) = v3;
    *((_WORD *)a1 + 43) = v3;
  }

  return result;
}

uint64_t sub_100022F18(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    sub_1000C0EF8(*(void *)(result + 40));
    v1[4] = 0LL;
    v1[5] = 0LL;
    sub_1000C0EF8(v1[7]);
    v1[6] = 0LL;
    v1[7] = 0LL;
    sub_1000C0EF8(v1[8]);
    v1[8] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

void sub_100022F64(int *a1, int a2)
{
  if (a2)
  {
    int v3 = *((__int16 *)a1 + 41);
    int v4 = *((__int16 *)a1 + 40);
    unint64_t v5 = 1374389535LL * (v3 - v4 + 100) * *((__int16 *)a1 + 39);
    LOWORD(v5) = (v5 >> 38) + (v5 >> 63);
    *((_WORD *)a1 + 40) = v4 + v5;
    *((_WORD *)a1 + 41) = v3 - v5;
  }

  else
  {
    a1[4] = 0;
    bzero(*((void **)a1 + 8), 2LL * *a1);
    a1[20] = 1;
    __int16 v6 = *((_WORD *)a1 + 36);
    *((_WORD *)a1 + 42) = v6;
    *((_WORD *)a1 + 43) = v6;
  }

uint64_t sub_100022FF8(uint64_t result, _WORD *a2, _WORD *a3)
{
  *a2 = *(_WORD *)(result + 80);
  *a3 = *(_WORD *)(result + 82);
  return result;
}

uint64_t sub_10002300C(uint64_t result, int a2)
{
  int v2 = *(__int16 *)(result + 82);
  int v3 = *(__int16 *)(result + 80);
  if (v2 < v3)
  {
    *(_WORD *)(result + 80) = a2;
LABEL_6:
    *(_WORD *)(result + 82) = a2;
    return result;
  }

  if (v3 > a2)
  {
    *(_WORD *)(result + 80) = a2;
    return result;
  }

  if (v2 < a2) {
    goto LABEL_6;
  }
  return result;
}

int *sub_100023044(int *result, __int16 *a2, uint64_t a3)
{
  int v3 = *((__int16 *)result + 41);
  int v4 = *((__int16 *)result + 40);
  int v5 = *a2;
  if (v3 < v4)
  {
    *((_WORD *)result + 40) = v5;
    LOWORD(v5) = *a2;
LABEL_6:
    *((_WORD *)result + 41) = v5;
    goto LABEL_7;
  }

  if (v5 < v4)
  {
    *((_WORD *)result + 40) = v5;
    goto LABEL_7;
  }

  if (v5 > v3) {
    goto LABEL_6;
  }
LABEL_7:
  int v6 = result[4];
  int v7 = *result;
  if (v6 >= result[3])
  {
    if (v7 >= 1)
    {
      uint64_t v14 = 0LL;
      do
      {
        uint64_t v15 = *((void *)result + 8);
        int v16 = *(unsigned __int16 *)(v15 + 2 * v14);
        int v17 = a2[v14] - *(__int16 *)(v15 + 2 * v14);
        char v18 = result[5];
        int v19 = 1 << (v18 - 1);
        int v20 = v16 + ((v19 + v17) >> v18);
        int v21 = v16 - ((v19 - v17) >> v18);
        if (v17 < 0) {
          __int16 v22 = v21;
        }
        else {
          __int16 v22 = v20;
        }
        *(_WORD *)(v15 + 2 * v14++) = v22;
      }

      while (v14 < *result);
    }
  }

  else
  {
    if (v7 >= 1)
    {
      uint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = *((void *)result + 8);
        int v10 = result[4];
        int v11 = a2[v8] + v10 * *(__int16 *)(v9 + 2 * v8);
        int v12 = v10 + 1;
        if (v11 >= 0) {
          int v13 = 2;
        }
        else {
          int v13 = -2;
        }
        *(_WORD *)(v9 + 2 * v8++) = (v11 + v12 / v13) / v12;
      }

      while (v8 < *result);
      int v6 = result[4];
    }

    result[4] = v6 + 1;
  }

  int v23 = *((__int16 *)result + 40);
  int v24 = (__int16)(*((_WORD *)result + 41) - *((_WORD *)result + 40));
  *((_WORD *)result + 43) += (v24 - *((__int16 *)result + 43) + 32) >> 6;
  *((_WORD *)result + 42) = v24;
  if (v25 >= 0x7FFF) {
    int v25 = 0x7FFF;
  }
  if (v25 <= -32768) {
    LOWORD(v25) = 0x8000;
  }
  **(_WORD **)a3 = v25;
  LODWORD(v26) = *result;
  if (*result > 1)
  {
    uint64_t v27 = 1LL;
    do
    {
      *(_WORD *)(*(void *)a3 + 2 * v27) = *(_WORD *)(*((void *)result + 8) + 2 * v27);
      ++v27;
    }

    while (v27 < *result);
    LODWORD(v26) = *result;
  }

  LODWORD(v28) = *(_DWORD *)(a3 + 104);
  if ((int)v26 < (int)v28)
  {
    uint64_t v26 = (int)v26;
    do
    {
      *(_WORD *)(*(void *)a3 + 2 * v26++) = 0;
      uint64_t v28 = *(int *)(a3 + 104);
    }

    while (v26 < v28);
  }

  if (*(_DWORD *)(a3 + 120)) {
    BOOL v29 = (int)v28 < 1;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29)
  {
    uint64_t v30 = 0LL;
    do
    {
      signed int v31 = ((1 << (result[2] - 1))
      if (v31 >= 0x7FFF) {
        signed int v31 = 0x7FFF;
      }
      if (v31 <= 1) {
        signed int v31 = 1;
      }
      *(_WORD *)(*(void *)(a3 + 16) + 2 * v30) = v31;
      if (*(_DWORD *)(a3 + 116)) {
        *(_DWORD *)(*(void *)(a3 + 72) + 4 * v30) = v31 * v31;
      }
      ++v30;
    }

    while (v30 < *(int *)(a3 + 104));
  }

  return result;
}

BOOL sub_1000232FC(__int16 *a1)
{
  int v1 = a1[43] * a1[44] + 4096;
  int v2 = (__int16)(v1 >> 13);
  else {
    int v3 = v2;
  }
  return v3 < a1[42];
}

void sub_100023338(uint64_t a1, int a2, char *a3, _WORD *a4, _WORD *a5, _WORD *a6, _DWORD *a7)
{
  if (a1)
  {
    *a7 = *(_DWORD *)(a1 + 16);
    if (a2 >= 1)
    {
      uint64_t v10 = 0LL;
      do
      {
        *(_WORD *)&a3[v10] = *(_WORD *)(*(void *)(a1 + 64) + v10);
        v10 += 2LL;
      }

      while (2LL * a2 != v10);
    }

    *a4 = *(_WORD *)(a1 + 80);
    *a5 = *(_WORD *)(a1 + 82);
    *a6 = *(_WORD *)(a1 + 86);
  }

  else
  {
    *a7 = 0;
    bzero(a3, 2LL * a2);
    *a4 = 1;
    *a5 = 0;
    *a6 = 0;
  }

int *sub_1000233E4(int *result, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, int a6)
{
  if (result)
  {
    result[4] = a6;
    if (*result >= 1)
    {
      uint64_t v6 = 0LL;
      do
      {
        *(_WORD *)(*((void *)result + 8) + 2 * v6) = *(_WORD *)(a2 + 2 * v6);
        ++v6;
      }

      while (v6 < *result);
    }

    *((_WORD *)result + 40) = a3;
    *((_WORD *)result + 41) = a4;
    *((_WORD *)result + 43) = a5;
  }

  return result;
}

uint64_t sub_10002342C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BCAE8(a1, "bcp0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(96LL);
  if (v10)
  {
    int v11 = (_DWORD *)(v10 + 4);
    int v16 = 0;
    int v12 = (void *)(v10 + 40);
    if (*v12)
    {
      if (v16 != *v11) {
        goto LABEL_24;
      }
      *(void *)(v10 + 32) = *v12;
    }

    int v15 = 0;
    int v13 = (void *)(v10 + 56);
    if (sub_1000BCED0(v9, 2, (uint64_t *)(v10 + 56), &v15))
    {
      if (!*v13) {
        goto LABEL_22;
      }
      if (v15 == *v11)
      {
        *(void *)(v10 + 48) = *v13;
LABEL_22:
        sub_1000BCBC8(v9);
        goto LABEL_25;
      }
    }

LABEL_24:
    sub_1000BCBC8(v9);
LABEL_25:
    sub_1000C0EF8(*(void *)(v10 + 40));
    *(void *)(v10 + 32) = 0LL;
    *(void *)(v10 + 40) = 0LL;
    sub_1000C0EF8(*(void *)(v10 + 56));
    *(void *)(v10 + 48) = 0LL;
    *(void *)(v10 + 56) = 0LL;
    sub_1000C0EF8(*(void *)(v10 + 64));
    *(void *)(v10 + 64) = 0LL;
    sub_1000C0EF8(v10);
    return 0LL;
  }

  sub_1000BCBC8(v9);
  return 0LL;
}

          memcpy((void *)(v24 + 2LL * v26), __src, 2LL * v28);
          v26 += v28;
          ++v25;
        }

        while (a2 != v25);
      }

      *(_DWORD *)(v12 + 288) = v51;
      if (!v51) {
        goto LABEL_47;
      }
      BOOL v29 = sub_1000C1074(4LL * (a2 + 1));
      *(void *)(v12 + 296) = v29;
      if (v29)
      {
        uint64_t v30 = sub_1000C1074(v50);
        *(void *)(v12 + 304) = v30;
        if (v30)
        {
          **(_DWORD **)(v12 + 296) = 0;
          signed int v31 = 2LL * (int)(sub_1000B32A0(a4) + 1);
          unsigned int v39 = (_DWORD *)sub_1000CAF58(v31, v32, v33, v34, v35, v36, v37, v38);
          if (a2 >= 1)
          {
            int v40 = 0LL;
            uint64_t v41 = 0;
            do
            {
              int v42 = *(void *)(v12 + 272);
              int v43 = *(int *)(v42 + 4 * v40);
              char v44 = v40 + 1;
              if ((int)v43 < *(_DWORD *)(v42 + 4 * (v40 + 1)))
              {
                do
                {
                  sub_1000B9044(a4, *(unsigned __int16 *)(v24 + 2 * v43), v39);
                  int v45 = v41;
                  int v46 = v41;
                  while (v46 > *(int *)(*(void *)(v12 + 296) + 4 * v40))
                  {
                    int v47 = *(void *)(v12 + 304) + 2 * v46--;
                  }

                  ++v41;
                  *(_WORD *)(*(void *)(v12 + 304) + 2 * v45) = *(_WORD *)v39;
LABEL_40:
                  ++v43;
                }

                while (v43 < *(int *)(*(void *)(v12 + 272) + 4 * v44));
              }

              *(_DWORD *)(*(void *)(v12 + 296) + 4 * v44) = v41;
              ++v40;
            }

            while (v44 != v16);
          }

          sub_1000CB038(v39, v31);
LABEL_47:
          *(_DWORD *)(v12 + 248) = 1;
          return v12;
        }

        sub_1000C0EF8(*(void *)(v12 + 272));
        sub_1000C0EF8(*(void *)(v12 + 280));
        __int16 v48 = *(void *)(v12 + 296);
      }

      else
      {
        sub_1000C0EF8(*(void *)(v12 + 272));
        __int16 v48 = *(void *)(v12 + 280);
      }
    }

    else
    {
      __int16 v48 = *(void *)(v12 + 272);
    }

    sub_1000C0EF8(v48);
LABEL_51:
    sub_1000C0EF8(v12);
    return 0LL;
  }

  return v12;
}

  sub_1000CB038(v45, v58);
  sub_1000CB038(v60, v59);
  sub_1000CB038(v61, v59);
  return v42;
}

      unsigned int v74 = 0LL;
      unsigned int v75 = 0xFFFFFFFF00000000LL;
      do
      {
        unsigned int v76 = v70[v74];
        v75 += (uint64_t)&_mh_execute_header;
        ++v74;
      }

      while (v76 != -1);
      int v77 = *(_DWORD *)(*(void *)(v10 + 8) + 4LL * v59);
      if (!v59) {
        goto LABEL_73;
      }
      unsigned int v78 = v59 - 1;
      if (v59 == 1)
      {
        int v83 = 0LL;
        int16x8_t v80 = *(unsigned int **)(v10 + 40);
      }

      else
      {
        int16x8_t v79 = 0;
        int16x8_t v80 = *(unsigned int **)(v10 + 40);
        do
        {
          ++v79;
          int v81 = v80;
          while (1)
          {
            int v82 = *v81++;
            if (v82 == -1) {
              break;
            }
            ++v79;
            int16x8_t v80 = v81;
            if (v81 >= &v68[v69])
            {
              int16x8_t v80 = 0LL;
              int v83 = -1LL;
              goto LABEL_36;
            }
          }

          ++v80;
          --v78;
        }

        while (v78);
        int v83 = v79;
      }

        unsigned int v32 = 0;
        int v33 = -1;
        __int16 v34 = v27;
        do
        {
          unsigned int v35 = v32;
          int v36 = *v34++;
          ++v33;
          ++v32;
        }

        while (v36 != -1);
        if (v33 >= 1)
        {
          uint64_t v37 = v35;
          while (1)
          {
            __int16 v38 = *v27++;
            if (sub_1000BB9AC(*(void *)(v3 + 8), v38, a2)) {
              break;
            }
            if (!--v37) {
              goto LABEL_16;
            }
          }

          sub_10004CC6C(v3, (int *)v4, v5, 0);
        }

    LOBYTE(v18) = 1;
    int v24 = *a3;
    if (*((_DWORD *)v5 + 227)) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }

  *((_DWORD *)v5 + 151) = 1;
  if (*(_DWORD *)(v7 + 3224) && *(_DWORD *)(v7 + 3024)) {
    ++*((_WORD *)v5 + 286);
  }
  return result;
}
    }

    if (v44 < a6) {
      *(_DWORD *)(v77 + 4 * v44) = v46;
    }
    ++v44;
    if ((_DWORD)v45 && (int)v44 >= a6)
    {
      int v52 = v44;
      goto LABEL_98;
    }

    LODWORD(v39) = v46 + 1;
    int v52 = v44;
    __int16 v34 = v45;
    break;
  }

      sub_10007A9E8( *(void *)(a1 + 224),  (unsigned __int16)(*(_WORD *)(a1 + 250) + (unsigned __int16)(v24 + 21504) % 0x24Cu / 0x1C),  &v94,  &v93);
      unsigned int v39 = v93;
      if (v93 < 1)
      {
        a5 = v88;
        goto LABEL_45;
      }

      int v40 = v94;
      __int16 v22 = (int)v22;
      if (v93 >= 0x10)
      {
        int v42 = (int)v22;
        a5 = v88;
        if ((unint64_t)((char *)&a4[v42] - (char *)v94) >= 0x20)
        {
          uint64_t v41 = v93 & 0xFFFFFFF0;
          __int16 v22 = v41 + (int)v22;
          int v47 = (__int128 *)(v94 + 8);
          __int16 v48 = &v87[v42];
          int v49 = v41;
          do
          {
            uint64_t v50 = *v47;
            *(v48 - 1) = *(v47 - 1);
            *__int16 v48 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 16LL;
          }

          while (v49);
          if (v41 == v39)
          {
LABEL_45:
            sub_10007A9E8( *(void *)(a1 + 224),  (unsigned __int16)(*(_WORD *)(a1 + 252) + (unsigned __int16)(v24 + 21504) % 0x1Cu),  &v94,  &v93);
            uint64_t v26 = *v94;
            if (v93 > 1)
            {
              unsigned int v55 = &a4[(int)v22];
              unsigned int v56 = v94 + 1;
              unsigned int v57 = v93 - 1LL;
              do
              {
                *v55++ = v26;
                int v58 = *v56++;
                uint64_t v26 = v58;
                LODWORD(v22) = v22 + 1;
                --v57;
              }

              while (v57);
            }

            goto LABEL_28;
          }
        }

        else
        {
          uint64_t v41 = 0LL;
        }
      }

      else
      {
        uint64_t v41 = 0LL;
        a5 = v88;
      }

      int v51 = &v40[v41];
      int v52 = v39 - v41;
      char v53 = v22;
      do
      {
        int v54 = *v51++;
        LODWORD(v22) = v53 + 1;
        a4[v53++] = v54;
        --v52;
      }

      while (v52);
      goto LABEL_45;
    }

    int16x8_t v94 = 0LL;
    unint64_t v93 = 0;
    sub_10007A9E8(*(void *)(a1 + 224), v25, &v94, &v93);
    if (!v93) {
      goto LABEL_27;
    }
    uint64_t v26 = *v94;
    if (v93 >= 2)
    {
      uint64_t v27 = &a4[(int)v22];
      uint64_t v28 = v94 + 1;
      BOOL v29 = v93 - 1LL;
      do
      {
        *v27++ = v26;
        uint64_t v30 = *v28++;
        uint64_t v26 = v30;
        LODWORD(v22) = v22 + 1;
        --v29;
      }

      while (v29);
    }

  int v19 = v77;
  a5 = v75;
  a6 = v76;
  a8 = v74;
  a4 = a4;
  int v20 = v28;
  int v21 = a14;
  if (v27 != -1)
  {
    sub_1000B8938(a4, v75, v76, a7, 0LL, v74, a10, v77, v27, a14[1], v33, 0, v73);
    if (v33 <= a14[2]) {
      return 1LL;
    }
    if (a14[7])
    {
      uint64_t v37 = a14 + 8;
      __int16 v38 = 1;
      unsigned int v39 = a14 + 8;
      do
      {
        int v40 = *v39;
        v39 += 7;
        if (v40 >= a14[1] + v33) {
          break;
        }
        ++v38;
        uint64_t v41 = v37[6];
        uint64_t v37 = v39;
      }

      while (v41);
      int v42 = v38 - 1;
      int v43 = 1LL;
    }

    else
    {
      int v42 = 0;
      int v43 = 1LL;
    }

    goto LABEL_53;
  }

uint64_t sub_10002361C(unsigned __int8 *a1)
{
  uint64_t result = sub_1000C8AE4(a1, "zhcn");
  if ((_DWORD)result)
  {
    uint64_t result = sub_1000C8AE4(a1, "zhhk");
    if ((_DWORD)result)
    {
      uint64_t result = sub_1000C8AE4(a1, "zhtw");
      if ((_DWORD)result) {
        return sub_1000C8AE4(a1, "zhct") != 0;
      }
    }
  }

  return result;
}

void *sub_100023688( uint64_t a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v25 = a4;
  if (a8)
  {
    uint64_t v13 = 0LL;
    int v14 = 0;
    while (v13 < *a3)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 4);
      int v16 = v14 + 1;
      if ((int)v15 >= 1)
      {
        for (uint64_t i = 0LL; i != v15; ++i)
        {
          *(_DWORD *)(a7 + 4LL * v14 + 4 * i) = sub_1000BB870(a2, *(unsigned __int16 *)(a1 + 2 * i + 16));
          *(_BYTE *)(a8 + v14 + i) = *(_BYTE *)(a1 + i + 88);
        }

        v14 += i;
        int v16 = v14 + 1;
      }

      *(_DWORD *)(a7 + 4LL * v14) = -1;
      *(_DWORD *)(a5 + 4 * v13++) = *(_DWORD *)(a1 + 12);
      a1 += 128LL;
      int v14 = v16;
      if (v13 == v25)
      {
        int v14 = v16;
        int v18 = a4;
        uint64_t result = a9;
        if (a9) {
          goto LABEL_23;
        }
        goto LABEL_25;
      }
    }
  }

  else
  {
    int v18 = a4;
    uint64_t v13 = 0LL;
    int v14 = 0;
    while (v13 < *a3)
    {
      uint64_t v19 = *(unsigned int *)(a1 + 4);
      int v20 = v14 + 1;
      if ((int)v19 >= 1)
      {
        for (uint64_t j = 0LL; j != v19; ++j)
          *(_DWORD *)(a7 + 4LL * v14 + 4 * j) = sub_1000BB870(a2, *(unsigned __int16 *)(a1 + 2 * j + 16));
        v14 += j;
        int v20 = v14 + 1;
      }

      *(_DWORD *)(a7 + 4LL * v14) = -1;
      *(_DWORD *)(a5 + 4 * v13++) = *(_DWORD *)(a1 + 12);
      a1 += 128LL;
      int v14 = v20;
      if (v13 == v25)
      {
        int v14 = v20;
        uint64_t result = a9;
        if (!a9) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
    }
  }

  int v18 = v13;
  uint64_t result = a9;
  if (a9)
  {
LABEL_23:
    if (v14 >= 1) {
      uint64_t result = memset(result, 255, 2LL * v14);
    }
  }

LABEL_25:
  *a3 = v18;
  return result;
}

      if ((int)v19 < 1)
      {
        LODWORD(v20) = 0;
LABEL_31:
        if ((_DWORD)v20 != (_DWORD)v19) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }

      int v20 = 0LL;
      while (*(_DWORD *)(*(void *)(v3 + 272) + 4 * v20) != v12)
      {
        if (v19 == ++v20) {
          goto LABEL_35;
        }
      }

      if ((_DWORD)v20 != (_DWORD)v19)
      {
LABEL_32:
        if (v15 < 0) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }

    __int16 v22 = 1LL;
    while (1)
    {
      int v23 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v22);
      ++v22;
      int v12 = *(int *)(a1 + 268);
      if (v22 >= v12) {
        goto LABEL_31;
      }
    }

    *a2 = v23;
    a2[1] = -1;
    LODWORD(v12) = *(_DWORD *)(a1 + 268);
LABEL_31:
    LODWORD(v19) = v22;
    goto LABEL_32;
  }

  uint64_t v13 = 1LL;
  while (1)
  {
    int v14 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v13));
    ++v13;
    int v12 = *(int *)(a1 + 268);
    if (v13 >= v12)
    {
      uint64_t v15 = 1LL;
      while (1)
      {
        int v16 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v15));
        ++v15;
        int v12 = *(int *)(a1 + 268);
        if (v15 >= v12) {
          goto LABEL_9;
        }
      }
    }
  }

        uint64_t v37 = a7 + 1;
        __int16 v38 = v33;
        do
        {
          unsigned int v39 = *v38++;
          --v37;
        }

        while (v39 != -1);
        int v40 = 4LL * v31;
        uint64_t v41 = (int *)(v28 + v40);
        if (!v28) {
          uint64_t v41 = 0LL;
        }
        int v42 = (int *)(v29 + v40);
        if (!v29) {
          int v42 = 0LL;
        }
        if (!v37)
        {
          int v43 = a8;
          char v44 = a7;
          if (a7 < 1) {
            return 0xFFFFFFFFLL;
          }
          do
          {
            int v46 = *v33++;
            int v45 = v46;
            int v47 = *v43++;
            if (v45 != v47) {
              goto LABEL_15;
            }
            --v44;
          }

          while (v44);
          __int16 v48 = 0;
          if (v42)
          {
            int v49 = a10;
            uint64_t v50 = a7 - 1LL;
            do
            {
              int v52 = *v42++;
              int v51 = v52;
              char v53 = *v49++;
              int v54 = v51 == v53;
              unsigned int v55 = v51 < v53;
              if (v51 != v53) {
                __int16 v48 = 1;
              }
              if (v55) {
                __int16 v48 = -1;
              }
            }

            while (v54 && v50-- != 0);
          }

          if (v41)
          {
            unsigned int v57 = a11;
            int v58 = a7 - 1LL;
            do
            {
              uint64_t v60 = *v41++;
              unsigned int v59 = v60;
              int v61 = *v57++;
              int v62 = v59 == v61;
              char v63 = v59 < v61;
              if (v59 != v61) {
                __int16 v48 = 1;
              }
              if (v63) {
                __int16 v48 = -1;
              }
            }

            while (v62 && v58-- != 0);
          }

          if (!v48) {
            return 0xFFFFFFFFLL;
          }
        }

  int16x8_t v80 = sub_1000BE540(*(_DWORD *)(a1 + 880), v65);
  int v81 = sub_1000BE540(-1431655765 * ((*(void *)(a1 + 848) - *(void *)(a1 + 832)) >> 2), v80);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1068))
  {
    int v82 = sub_1000BE514(*(unsigned __int16 *)(a1 + 992), v81);
    int v83 = sub_1000BE514(*(unsigned __int16 *)(a1 + 994), v82);
    int v81 = sub_1000BE514(*(unsigned __int16 *)(a1 + 996), v83);
  }

  int v84 = sub_1000D0260(*(void *)(a1 + 472));
  return sub_1000BE540(v84, v81);
}

  uint64_t v8 = 0LL;
  uint64_t v9 = 4;
LABEL_28:
  *(_DWORD *)(a1 + 524) = v9;
  return v8;
}

  uint64_t v85 = sub_1000BE540(*(_DWORD *)(a1 + 880), v71);
  uint64_t result = sub_1000BE540((*(void *)(a1 + 872) - *(void *)(a1 + 856)) >> 3, v85);
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1068))
    {
      unsigned int v87 = sub_1000BE514(*(unsigned __int16 *)(a1 + 992), result);
      unsigned int v88 = sub_1000BE514(*(unsigned __int16 *)(a1 + 994), v87);
      return sub_1000BE514(*(unsigned __int16 *)(a1 + 996), v88);
    }
  }

  return result;
}

      ++v42;
    }

    while (v42 != a3);
  }

  int v47 = sub_1000B3298((uint64_t)v57);
  __int16 v48 = sub_1000C1074(8LL * (v47 + 1));
  if (!v48)
  {
    sub_1000C0EF8((uint64_t)v26);
    sub_1000C0EF8(v35);
    sub_1000C0EF8(v37);
    sub_1000C0EF8(v54);
    int v46 = v53;
    goto LABEL_40;
  }

  int v49 = v48;
  uint64_t v50 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    int v51 = *(_DWORD *)(qword_1000FDCC0 + 3688);
    uint64_t v50 = *(_DWORD *)(qword_1000FDCC0 + 3680);
  }

  else
  {
    int v51 = 0;
  }

  uint64_t v30 = sub_100060520(a1, v57, v58, v41, v26, 0LL, 0, v51, v50, v48, v55, v56, 1, &v60, v17);
  if (v17) {
    sub_10009ACA8(v17);
  }
  sub_1000C0EF8(v49);
  sub_1000C0EF8(v53);
  sub_1000C0EF8(v54);
  sub_1000C0EF8(v37);
  sub_1000C0EF8(v35);
  sub_1000C0EF8((uint64_t)v26);
  return v30;
}

  int v36 = v84 + 1;
  {
    unsigned int v39 = *((unsigned __int8 *)v12 + 26);
    if (v39 + 1 == *(unsigned __int8 *)(v16 + 26))
    {
      int v40 = *((unsigned __int16 *)v12 + 9);
      uint64_t v41 = v12;
      int v12 = (__int128 *)v16;
      if (v40 == *(unsigned __int16 *)(v16 + 18))
      {
        while (1)
        {
          int v12 = (__int128 *)v16;
          if (*(void *)v41 != *(void *)v16) {
            goto LABEL_52;
          }
          int v42 = *(int *)(a1 + 568) - 1LL;
          LOWORD(v88) = *((_WORD *)v41 + v42 + 10);
          HIDWORD(v88) = *((_DWORD *)v41 + v42 + 2);
          int v43 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)uint64_t i = *(_OWORD *)v16;
          *(_OWORD *)(i + 16) = v43;
          if (*(_WORD *)(i + 16))
          {
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9424))(a1, &v88, i);
          }

          else
          {
            char v44 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
            int v45 = (__int16)v88;
            int v46 = *(__int16 *)(i + 20);
            if ((__int16)v88 < v46)
            {
              *(_WORD *)(i + 20) = v88;
              *(_DWORD *)(i + 8) = HIDWORD(v88);
              int v46 = v45;
            }

            if (v46 <= (__int16)v18[43])
            {
              int v47 = *v44;
              __int16 v48 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v47);
              if (v48 == 0x4000)
              {
                LOWORD(v48) = sub_100015BC0(*(void *)(a1 + 384), v47);
                LOWORD(v46) = *(_WORD *)(i + 20);
              }

              int v49 = v48 - v18[41] + v46;
              *(_WORD *)(i + 20) = v49;
              *(_WORD *)(i + 24) = v49;
              if (v49 < (__int16)v18[36])
              {
                v18[36] = v49;
                v18[38] = *(_WORD *)(i + 18);
                v18[104] = *(_WORD *)(i + 16);
              }
            }

            else
            {
              *(_WORD *)(i + 24) = 0x4000;
              *(_WORD *)(i + 20) = 0x4000;
            }
          }

          uint64_t v50 = *(unsigned __int8 *)(i + 26);
          if (v89 - 1 <= v50) {
            break;
          }
LABEL_49:
          LODWORD(v9) = v9 + 1;
          char v53 = *(void *)(a1 + 9032);
          int v16 = *(void *)(v53 + 8LL * (v9 >> 8)) + 32LL * v9;
          ++v36;
          uint64_t i = *(void *)(v53 + 8LL * (v36 >> 8)) + 32LL * v36;
          unsigned int v39 = *((unsigned __int8 *)v12 + 26);
          if (v39 + 1 == *(unsigned __int8 *)(v16 + 26))
          {
            uint64_t v41 = v12;
          }

          goto LABEL_51;
        }

        if (v89 == v50)
        {
          int v51 = *(__int16 *)(i + 20);
          int v52 = *(void *)(a1 + 9240);
          if (*(_DWORD *)v52 <= (int)v51)
          {
LABEL_47:
            goto LABEL_49;
          }
        }

        else
        {
          int v51 = *(__int16 *)(i + 2LL * *(int *)(a1 + 568) + 18);
          int v52 = *(void *)(a1 + 9240);
        }

        ++*(_WORD *)(*(void *)(v52 + 8) + 2 * v51);
        ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
        goto LABEL_47;
      }
    }

    else
    {
LABEL_51:
      uint64_t v41 = v12;
      int v12 = (__int128 *)v16;
    }

            __int16 v34 = sub_10007A528(v20, v23);
            int v24 = (unsigned __int16)*v5;
            if (v24 <= v9) {
              goto LABEL_23;
            }
            goto LABEL_26;
          }

          int v33 = *(_WORD *)(v21 + 2LL * ((int)v22 + ~(_DWORD)v9));
        }

        int v23 = *(unsigned __int16 *)(a2 + 2LL * a4 - 2);
        if (v23 > v9) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
    }

    else
    {
      int v17 = (unsigned __int16)*v5 + ~(_DWORD)v9;
      int v18 = *(__int16 *)(*(void *)(a1 + 408) + 2LL * v17);
      int v36 = v18;
      if (v10)
      {
        uint64_t v19 = *(void *)(a1 + 448);
        int v36 = *(__int16 *)(a1 + 320) + v18;
        int v12 = *(_DWORD *)(a1 + 324) + *(__int16 *)(a1 + 322) + *(unsigned __int8 *)(v19 + v17);
        if (a4) {
          goto LABEL_18;
        }
        goto LABEL_5;
      }
    }

    int v12 = 0;
    if (a4) {
      goto LABEL_18;
    }
LABEL_5:
    uint64_t v13 = v36;
    if (v10)
    {
      int v14 = *(_DWORD *)(a1 + 428) + v12;
      uint64_t v15 = v36 - v14;
      if (v36 >= v14)
      {
        int v36 = *(_DWORD *)(a1 + 428) + v12;
        uint64_t v13 = v14;
        if (v15 < *(_DWORD *)(a1 + 340)) {
LABEL_48:
        }
          v13 -= *(unsigned __int8 *)(*(void *)(a1 + 344) + v15);
      }

      else
      {
        uint64_t v15 = v14 - v36;
        if (v14 - v36 < *(_DWORD *)(a1 + 340)) {
          goto LABEL_48;
        }
      }
    }

      sub_100074AC8((uint64_t)v3);
      return 0LL;
    }
  }

  return v3;
}

  sub_1000CB094(v21);
  *a6 = v33;
  return v34;
}

  sub_1000CB038(v30, v46);
  sub_1000CB038(v22, v46);
  if (a7) {
    int v43 = a6 <= (int)v35;
  }
  else {
    int v43 = 0;
  }
  char v44 = v43;
  if (!v36 && (v44 & 1) == 0)
  {
    if (a5) {
      int v45 = a5 + 4LL * (int)v35;
    }
    else {
      int v45 = 0LL;
    }
    return sub_1000919D8(*(void *)(a1 + 528), v52, a3, a4, v45, a6 - (int)v35, a7) + v35;
  }

  return v35;
}

  sub_1000CB038(v39, v52);
  sub_1000CB038(v28, v27);
  sub_1000CB038(v20, v52);
  return v40;
}

  if (v10)
  {
    uint64_t result = (uint64_t)sub_100079848(a2);
    *(void *)(a1 + 160) = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + 152) = result;
  }

  return 1LL;
}

  uint64_t v28 = *(void *)(a1 + 176);
  if (v28)
  {
    BOOL v29 = *(int *)(a1 + 172);
    uint64_t v30 = (_WORD *)a4;
    if ((_DWORD)v29)
    {
      signed int v31 = 0;
      while (1)
      {
        while (1)
        {
          unsigned int v32 = v29 - 1;
          if (v29 - 1 < 0) {
            unsigned int v32 = v29;
          }
          int v33 = v32 >> 1;
          __int16 v34 = *(unsigned __int16 *)(v28 + 2LL * (v31 + (int)v33));
          if (v34 <= v63) {
            break;
          }
          BOOL v29 = (int)v33;
          if (!(_DWORD)v33) {
            goto LABEL_34;
          }
        }

        uint64_t v25 = v31 + (int)v33;
        if (v34 == v63) {
          break;
        }
        v29 -= (int)v33 + 1;
        signed int v31 = v25 + 1;
        if (!v29)
        {
LABEL_34:
          uint64_t v30 = (_WORD *)a4;
          goto LABEL_41;
        }
      }

      uint64_t v30 = (_WORD *)a4;
      if ((_DWORD)v25 != -1)
      {
        uint64_t v27 = *(void *)(a1 + 192);
LABEL_40:
        *(_WORD *)a4 = *(_WORD *)(v27 + 2 * v25);
        uint64_t v30 = (_WORD *)(a4 + 2);
      }
    }
  }

  else
  {
    unsigned int v35 = *(unsigned __int16 *)(a1 + 168);
    uint64_t v30 = (_WORD *)a4;
    if (v63 >= v35)
    {
      uint64_t v30 = (_WORD *)a4;
      if (v63 <= *(unsigned __int16 *)(a1 + 170))
      {
        int v36 = *(unsigned __int16 *)(*(void *)(a1 + 192) + 2 * (v63 - v35));
        *(_WORD *)a4 = v36;
        uint64_t v30 = (_WORD *)(a4 + 2LL * (v36 != 0));
      }
    }
  }

  sub_1000C0EF8(v5[6]);
  sub_1000C0EF8(v5[5]);
  sub_1000C0EF8(v5[4]);
  sub_1000C0EF8(v5[3]);
  sub_1000C0EF8((uint64_t)v5);
  return 0LL;
}

    if (v24 >= v22) {
      break;
    }
    ++v24;
  }

  while (!v12);
  uint64_t v15 = v25;
  if (v23) {
    NSPopAutoreleasePool(v23);
  }
LABEL_33:
  CFRelease(v17);
LABEL_34:
  CFRelease(v15);
LABEL_35:
  if (v10 && v10 != v30) {
    free(v10);
  }
  CFRelease(v6);
  if (v28) {
    CFRelease(v28);
  }
  if (v12 > 0xB) {
    return 4294963295LL;
  }
  else {
    return dword_1000F28F8[v12];
  }
}

uint64_t sub_100023890(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12));
  if ((_DWORD)v2) {
    return v2;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if ((_DWORD)v3 != v4) {
    return (v3 - v4);
  }
  if ((int)v3 >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = a1 + 88;
    uint64_t v7 = a2 + 88;
    while (1)
    {
      uint64_t v2 = *(unsigned __int16 *)(v6 + 2 * v5 - 72) - *(unsigned __int16 *)(v7 + 2 * v5 - 72);
      if ((_DWORD)v2) {
        return v2;
      }
      int v8 = *(unsigned __int8 *)(v6 + v5);
      int v9 = *(unsigned __int8 *)(v7 + v5);
      if (v8 != v9) {
        return ((char)v8 - (char)v9);
      }
      if (v3 == ++v5)
      {
        int v10 = *(unsigned __int8 *)(a1 + v3 + 88);
        int v11 = *(unsigned __int8 *)(a2 + v3 + 88);
        if (v10 != v11) {
          return ((char)v10 - (char)v11);
        }
        goto LABEL_9;
      }
    }
  }

  int v10 = *(unsigned __int8 *)(a1 + 88);
  int v11 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == v11)
  {
LABEL_9:
    if (*(_DWORD *)a1 >= *(_DWORD *)a2) {
      LODWORD(v2) = 0;
    }
    else {
      LODWORD(v2) = -1;
    }
    if (*(_DWORD *)a1 <= *(_DWORD *)a2) {
      return v2;
    }
    else {
      return 1LL;
    }
  }

  return ((char)v10 - (char)v11);
}

BOOL sub_100023978(int *a1, _DWORD *a2, int a3)
{
  size_t v3 = a1[1];
  return (_DWORD)v3 == a2[1] && !memcmp(a1 + 4, a2 + 4, 2 * v3) && (!a3 || !memcmp(a1 + 22, a2 + 22, v3));
}

void sub_1000239F8(void *a1, int a2)
{
}

uint64_t sub_100023A0C(uint64_t a1, __int128 *a2, _OWORD *__src, int *a4, int a5)
{
  if (!a2) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v7 = *a4;
  if (!(_DWORD)v7)
  {
    uint64_t v9 = 0LL;
    *a4 = 1;
    __int128 v26 = *a2;
    __int128 v27 = a2[1];
    __int128 v28 = a2[3];
    __src[2] = a2[2];
    __src[3] = v28;
    *__src = v26;
    __src[1] = v27;
    __int128 v29 = a2[4];
    __int128 v30 = a2[5];
    __int128 v31 = a2[7];
    __src[6] = a2[6];
    __src[7] = v31;
    __src[4] = v29;
    __src[5] = v30;
    return v9;
  }

  if ((int)v7 < 1)
  {
LABEL_23:
    int v23 = *((_DWORD *)a2 + 3) - *((_DWORD *)__src + 3) + 10;
    uint64_t v25 = a4;
    int v24 = *a4;
    if (*a4 >= a5) {
      goto LABEL_24;
    }
LABEL_20:
    *uint64_t v25 = v24 + 1;
LABEL_25:
    uint64_t v9 = 0x7FFFFFFFLL;
LABEL_26:
    if (v24 >= 1) {
      j__memmove(__src + 8, __src, (unint64_t)v24 << 7);
    }
    goto LABEL_29;
  }

  uint64_t v9 = 0LL;
  int v10 = (char *)(__src + 1);
  int v11 = a2 + 1;
  while (1)
  {
    uint64_t v12 = *((unsigned int *)a2 + 1);
    if ((_DWORD)v12 != DWORD1(__src[8 * v9])) {
      goto LABEL_5;
    }
    if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1760)) {
      break;
    }
    uint64_t v13 = (unsigned __int16 *)(a2 + 1);
    int v14 = (unsigned __int16 *)v10;
    while (1)
    {
      int v16 = *v13++;
      int v15 = v16;
      int v17 = *v14++;
      if (v15 != v17) {
        break;
      }
      if (!--v12) {
        goto LABEL_17;
      }
    }

LABEL_5:
    ++v9;
    v10 += 128;
    if (v9 == v7) {
      goto LABEL_23;
    }
  }

  if ((int)v12 >= 1)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = 2 * v12;
    do
    {
      unsigned int v20 = sub_1000BB868(a1, *(unsigned __int16 *)((char *)v11 + v18), 0LL);
      int v21 = sub_1000BB884(a1, v20);
      unsigned int v22 = sub_1000BB868(a1, *(unsigned __int16 *)&v10[v18], 0LL);
      v18 += 2LL;
    }

    while (v19 != v18);
  }

    a4[(int)v22] = v26;
    LODWORD(v22) = v22 + 1;
    a3 = v92;
    if (++v21 == v23) {
      goto LABEL_49;
    }
  }

  LODWORD(v94) = v22;
  --*a6;
  a3 = v92;
  a4[(int)v22] = 0;
  if ((_DWORD)v22 == 1)
  {
LABEL_94:
    uint64_t result = 0LL;
    *a5 = 1;
    return result;
  }

      uint64_t v18 = v17++;
      if (v17 >= *(_DWORD *)(v14 + 16)) {
        goto LABEL_112;
      }
    }
  }

  int16x8_t v91 = 0;
  uint64_t v18 = -1;
LABEL_112:
  *a13 = v18;
  return v91;
}

  uint64_t v7 = a1[4];
  if (v7)
  {
    int v8 = sub_100099F8C(v7);
    int v4 = sub_1000BE644(v8, 4, v4);
  }

  uint64_t v9 = a1[1];
  if (v9)
  {
    int v10 = sub_1000204CC(v9);
    int v4 = sub_1000BE644(v10, 4, v4);
  }

  int v11 = a1[2];
  if (v11)
  {
    uint64_t v12 = sub_100075360(v11);
    int v4 = sub_1000BE644(v12, 4, v4);
  }

  uint64_t v13 = a1[6];
  if (v13)
  {
    int v14 = sub_1000639B8(v13);
    int v4 = sub_1000BE644(v14, 4, v4);
  }

  int v15 = a1[5];
  if (v15)
  {
    int v16 = sub_100023E78(v15);
    int v4 = sub_1000BE644(v16, 4, v4);
  }

  int v17 = a1[7];
  if (v17)
  {
    uint64_t v18 = sub_1000ADD14(v17);
    int v4 = sub_1000BE644(v18, 4, v4);
  }

  uint64_t v19 = (unsigned int *)a1[8];
  if (v19)
  {
    unsigned int v20 = sub_100051924(v19);
    return sub_1000BE644(v20, 4, v4);
  }

  return v4;
}

    uint64_t v9 = *i;
    int v4 = v9;
  }

  if (v4 == 65279) {
    goto LABEL_5;
  }
  if (v4 == 65291 || v4 == 65293) {
    goto LABEL_16;
  }
  --i;
LABEL_28:
  if (v4 > 0x80u || (v4 & 0x80) != 0)
  {
    if (v4 == 65279) {
      return 0LL;
    }
  }

  else if ((byte_1000F1D84[v4] & 0x10) != 0)
  {
    return 0LL;
  }

  uint64_t result = sub_1000CBA3C(v4);
  if ((_DWORD)result)
  {
    if (v4 >> 4 <= 0xFF0u) {
      uint64_t v13 = v4 - 48;
    }
    else {
      uint64_t v13 = v4 - 65296;
    }
    if (a3 - v13 >= -9)
    {
      int v14 = i[1];
      if (v14)
      {
        int v15 = i + 2;
        do
        {
          int v16 = v14;
          int v17 = v14 & 0x80;
          if (v16 <= 0x80 && v17 == 0)
          {
            if ((byte_1000F1D84[v16] & 0x10) != 0) {
              break;
            }
          }

          else if (v16 == 65279)
          {
            break;
          }

          uint64_t result = sub_1000CBA3C(v16);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v19 = (int)(v16 - 48);
          if (v16 >> 4 > 0xFF0) {
            uint64_t v19 = v16 - 65296;
          }
          if ((a3 - v19) / 10 < v13) {
            return 0LL;
          }
          uint64_t v13 = v19 + 10 * v13;
          unsigned int v20 = *v15++;
          int v14 = v20;
        }

        while (v20);
      }

  int v17 = &v16[32 * (uint64_t)a2];
  *a5 = v17[3];
  uint64_t result = v17[1];
  else {
    uint64_t v19 = v17[1];
  }
  if (v19 >= 1)
  {
    unsigned int v20 = (int)result >= a4 ? a4 : result;
    int v21 = (int)v20;
    if (v20 < 0x20) {
      goto LABEL_26;
    }
    unsigned int v22 = result - v20;
    int v23 = (int)result - 1 >= v22 && (unint64_t)(v21 - 1) >> 32 == 0;
    if (!v23) {
      goto LABEL_26;
    }
    int v24 = (unint64_t)&v16[32 * (uint64_t)a2 + 4] + 2 * v22;
    if (v24 + 2 * v21 > a3 && v24 < a3 + 2 * v21) {
      goto LABEL_26;
    }
    __int128 v26 = (int8x16_t *)(a3 + 2 * v21 - 16);
    __int128 v27 = v21 & 0xFFFFFFFFFFFFFFF0LL;
    do
    {
      __int128 v28 = (int16x8_t *)((char *)&v16[32 * (uint64_t)a2] + 2 * v22);
      __int128 v29 = (int8x16_t)vrev64q_s16(v28[1]);
      __int128 v30 = vextq_s8(v29, v29, 8uLL);
      __int128 v31 = (int8x16_t)vrev64q_s16(v28[2]);
      v26[-1] = vextq_s8(v31, v31, 8uLL);
      *__int128 v26 = v30;
      v26 -= 2;
      v22 += 16;
      v27 -= 16LL;
    }

    while (v27);
    int v23 = (v21 & 0xFFFFFFFFFFFFFFF0LL) == v21;
    v21 &= 0xFu;
    if (!v23)
    {
LABEL_26:
      __int128 v32 = result - v21;
      do
        *(_WORD *)(a3 - 2 + 2 * v21) = *((_WORD *)&v16[32 * (uint64_t)a2 + 4] + v32++);
      while (v21-- > 1);
    }
  }

  return result;
}

uint64_t sub_100023CAC(int a1)
{
  uint64_t v2 = sub_1000C1074(32LL);
  uint64_t v3 = v2;
  sub_1000C0EF8(v3);
  return 0LL;
}

uint64_t *sub_100023D0C(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    sub_1000BE1FC(result);
    return (uint64_t *)sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100023D38(uint64_t a1, uint64_t a2, char *a3)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v4 = sub_1000BDA88(a2, "bcld0", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  BOOL v7 = sub_1000BE278(a1, v4, v5);
  sub_1000BDB48(v6);
  return v7;
}

BOOL sub_100023DBC( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1000BCAE8(a2, "bcld0", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  BOOL v11 = sub_1000BE314(a1, (uint64_t)v9) != 0;
  sub_1000BCBC8(v10);
  return v11;
}

void *sub_100023E28(void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (!*result)
    {
      sub_1000C0EF8(result[8]);
      sub_1000C0EF8(*(void *)(v1 + 48));
      sub_1000C0EF8(*(void *)(v1 + 32));
      return (void *)sub_1000C0EF8(v1);
    }
  }

  return result;
}

uint64_t sub_100023E78(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 12), 4, v2);
  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 16), 4, v3);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 20), 4, v4);
  unsigned int v6 = sub_1000BE770(*(unint64_t **)(a1 + 24), 4, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  unsigned int v7 = sub_1000BE644(v6, 4, v5);
  unsigned int v8 = sub_1000BE770(*(unint64_t **)(a1 + 40), 4, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  unsigned int v9 = sub_1000BE644(v8, 4, v7);
  unsigned int v10 = sub_1000BE770(*(unint64_t **)(a1 + 56), 2, *(_DWORD *)(a1 + 20), 0xFFFFFFFFLL);
  return sub_1000BE644(v10, 4, v9);
}

void *sub_100023F3C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = sub_1000BCAE8(a1, "bcl0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(72LL);
  BOOL v11 = (void *)v10;
  if (!v10) {
    goto LABEL_19;
  }
  if (sub_1000BCD38(v9, (void *)(v10 + 8)) && sub_1000BCD38(v9, (char *)v11 + 12) && sub_1000BCD38(v9, v11 + 2))
  {
    uint64_t v12 = (_DWORD *)v11 + 5;
    if (sub_1000BCD38(v9, (char *)v11 + 20))
    {
      int v19 = 0;
      uint64_t v13 = v11 + 4;
      if (sub_1000BCED0(v9, 4, v11 + 4, &v19))
      {
        if (*v13)
        {
          if (v19 != *v12) {
            goto LABEL_20;
          }
          v11[3] = *v13;
        }

        int v18 = 0;
        int v14 = v11 + 6;
        if (sub_1000BCED0(v9, 4, v11 + 6, &v18))
        {
          if (*v14)
          {
            if (v18 != *v12) {
              goto LABEL_20;
            }
            v11[5] = *v14;
          }

          int v17 = 0;
          int v15 = v11 + 8;
          if (sub_1000BCED0(v9, 2, v11 + 8, &v17))
          {
            if (*v15)
            {
              if (v17 == *v12)
              {
                v11[7] = *v15;
                goto LABEL_19;
              }

              goto LABEL_20;
            }

LABEL_20:
  sub_1000BCBC8(v9);
  if (!*v11)
  {
    sub_1000C0EF8(v11[8]);
    sub_1000C0EF8(v11[6]);
    sub_1000C0EF8(v11[4]);
    sub_1000C0EF8((uint64_t)v11);
  }

  return 0LL;
}

    if (!v21) {
      goto LABEL_41;
    }
    if (v11)
    {
      BOOL v11 = 1;
    }

    else
    {
      uint64_t v25 = *a5 - *(_DWORD *)v18;
      if (*a5 != *(_DWORD *)v18) {
        goto LABEL_38;
      }
      uint64_t v25 = v12 - v20;
      if ((_DWORD)v12 != v20) {
        goto LABEL_38;
      }
      if ((int)v12 >= 1)
      {
        __int128 v26 = 0LL;
        do
        {
          uint64_t v25 = *(unsigned __int16 *)((char *)v14 + v26) - *(unsigned __int16 *)&v18[v26 + 28];
          if (v25) {
            goto LABEL_38;
          }
          v26 += 2LL;
        }

        while (v13 != v26);
      }

      BOOL v11 = 0;
      if (qword_1000FDCC0 && (int)v12 >= 1 && *(_DWORD *)(qword_1000FDCC0 + 4776))
      {
        __int128 v27 = 0LL;
        while (1)
        {
          uint64_t v25 = v16[v27 / 4] - *(_DWORD *)&v18[v27 + 384];
          if (v25) {
            break;
          }
          v27 += 4LL;
          if (v15 == v27)
          {
            __int128 v28 = 0LL;
            while (1)
            {
              uint64_t v25 = v17[v28 / 4] - *(_DWORD *)&v18[v28 + 620];
              if (v25) {
                goto LABEL_38;
              }
              v28 += 4LL;
              if (v15 == v28)
              {
                BOOL v11 = 0;
                goto LABEL_4;
              }
            }
          }
        }

      sub_1000C0EF8(v11);
      return 0LL;
    }
  }

  return v11;
}

          if (*(void *)(a1 + 72))
          {
            if (v14 < 1)
            {
              int v24 = 0;
            }

            else
            {
              int v24 = 0;
              uint64_t v25 = 0;
              __int128 v26 = *(uint64_t **)a1;
              __int128 v27 = -1;
              do
              {
                __int128 v29 = *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
                if (v29 != v27)
                {
                  __int128 v30 = sub_1000BB884( (uint64_t)v26,  *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
                  v24 += sub_1000B3C5C(v26, v30);
                  int v14 = *(_DWORD *)(v13 + 16);
                  __int128 v27 = v29;
                }

                ++v25;
              }

              while (v25 < v14);
            }

            __int128 v31 = qword_1000FDCC0;
            if (qword_1000FDCC0) {
              __int128 v31 = *(void *)(qword_1000FDCC0 + 1272);
            }
            *(_DWORD *)(v13 + 180) = v31 <= v24;
            if (v31 > v24)
            {
              __int128 v32 = *(void *)(*(void *)(a1 + 72) + 8 * v12);
              __int128 v33 = *(_DWORD **)(v32 + 8LL * v10);
              if (v33)
              {
                sub_1000600D0(v33);
                *(void *)(v32 + 8LL * v10) = 0LL;
              }
            }
          }
        }
      }
    }

    while (v10++ < *(_DWORD *)(a1 + 32));
  }

  return 1LL;
}

  *a6 = v27;
  *a5 = v33;
  return result;
}

  int v19 = *(void *)(v12 + 1144);
  unsigned int v20 = v19 < 2;
  LODWORD(v19) = (__int16)v19;
  if (v20) {
    LODWORD(v19) = 1;
  }
LABEL_22:
  int v21 = v19 + v18;
  if (v21 >= 0x4000) {
    unsigned int v22 = 0x4000;
  }
  else {
    unsigned int v22 = v21;
  }
  int v23 = *(unsigned int *)(a1 + 808);
  int v24 = 4 * v23 - 2;
  uint64_t v25 = *(_DWORD *)(a1 + 808);
  while (1)
  {
    __int128 v26 = __OFSUB__(v25--, 1);
    if (v25 < 0 != v26) {
      break;
    }
    __int128 v27 = *(__int16 *)((char *)v10 + v24);
    v24 -= 4LL;
    if (v22 > v27)
    {
      LODWORD(v23) = v25 + 1;
      *(_DWORD *)(a1 + 808) = v25 + 1;
      break;
    }
  }

  *(_DWORD *)(a1 + 824) = 1;
  BOOL v11 = v23;
LABEL_30:
  __int128 v28 = 0LL;
  *a5 = 0x40000000;
  if ((a2 & 0x80000000) == 0 && v11 > a2)
  {
    __int128 v29 = &v10[2 * a2];
    *a5 = *(_DWORD *)(a1 + 568) + (__int16)v29[1];
    *a3 = *v29;
    return 1LL;
  }

  return v28;
}

  if (v9 != v5)
  {
    if (v9 > *(_DWORD *)(a1 + 608))
    {
      int v15 = v9;
      do
      {
        sub_1000C0EF8(v7[v15 - 1]);
        if (*(_DWORD *)(a1 + 556)) {
          sub_1000C0EF8(v8[v15 - 1]);
        }
        --v15;
      }

      while (v15 > *(int *)(a1 + 608));
    }

    sub_1000C0EF8((uint64_t)v7);
    int v16 = (uint64_t)v8;
    goto LABEL_33;
  }

  if (a2) {
    sub_100006F08( *(void *)(v11 + 384),  (uint64_t)a2,  (__int16 *)&v85,  *(void *)(v11 + 408),  v12[132],  *(_DWORD *)(v11 + 628),  a4,  a5,  a6,  a7,  a8,  a9);
  }
  sub_10009C660(*(void *)(v11 + 9000));
  if (v12[66] < 0 || v12[67] < 0) {
    sub_100064C24(v11);
  }
  int v17 = v12[56];
  v12[61] = v17;
  *(_DWORD *)(v11 + 9076) += v17;
  *((_DWORD *)v12 + 28) = 1073758208;
  v12[58] = -1;
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 4544)
    && !sub_100026070((uint64_t *)(v11 + 680), *(_DWORD *)(v11 + 8872), 0LL, 0, v12[132]))
  {
    *(_DWORD *)(v11 + 552) = 3;
    sub_10005DDC8(*(int **)(v11 + 9240));
    if (v12[61] == 0x4000) {
      goto LABEL_29;
    }
  }

  else
  {
    sub_10005DDC8(*(int **)(v11 + 9240));
    if (v12[61] == 0x4000)
    {
LABEL_29:
      uint64_t result = sub_1000070E0(*(void *)(v11 + 384), v12[132], (_DWORD *)(v11 + 436));
      *(_DWORD *)(v11 + 9076) = 0x40000000;
      *(_DWORD *)(v11 + 552) = 5;
      int v16 = v12[132];
      goto LABEL_30;
    }
  }

  (*(void (**)(uint64_t))(v11 + 520))(v11);
  if (*(_DWORD *)(v11 + 552) == 3)
  {
    uint64_t result = sub_1000070E0(*(void *)(v11 + 384), v12[132], (_DWORD *)(v11 + 436));
    goto LABEL_139;
  }

  int v18 = sub_10003C6A4((_DWORD **)(v11 + 680), *(_DWORD *)(v11 + 8872));
  int v19 = *(_DWORD *)(v11 + 9044);
  unsigned int v20 = *(_DWORD *)(v11 + 9208);
  if (v18)
  {
    if (v19 > v20)
    {
      int v21 = *(int **)(v11 + 9232);
      unsigned int v22 = (char *)*((void *)v21 + 1);
      int v23 = *v21;
      bzero(v22, 2 * v23);
      int v24 = *(_DWORD *)(v11 + 9044);
      if (v24 >= 2)
      {
        uint64_t v25 = 0;
        do
        {
          __int128 v26 = *(__int16 *)(*(void *)(*(void *)(v11 + 9024) + 8LL * (v25 >> 8))
                           + 48LL * v25
                           + 36);
          if ((int)v23 > v26)
          {
            __int128 v27 = 2LL * ((__int16)v26 & ~((__int16)v26 >> 31));
            ++*(_WORD *)&v22[v27];
            int v24 = *(_DWORD *)(v11 + 9044);
          }

          ++v25;
        }

        while (v25 < v24 - 1);
      }
    }
  }

  else if (v19 > v20)
  {
    __int128 v28 = *(int **)(v11 + 9232);
    __int128 v29 = (void *)*((void *)v28 + 1);
    __int128 v30 = *v28;
    bzero(v29, 2 * v30);
    __int128 v31 = *(_DWORD *)(v11 + 9044);
    if (v31 >= 2)
    {
      __int128 v32 = 0;
      do
      {
        __int128 v33 = *(__int16 *)(*(void *)(*(void *)(v11 + 9024) + 8LL * (v32 >> 8))
                         + 48LL * v32
                         + 36);
        if ((int)v30 > v33)
        {
          ++*((_WORD *)v29 + v33);
          __int128 v31 = *(_DWORD *)(v11 + 9044);
        }

        ++v32;
      }

      while (v32 < v31 - 1);
    }
  }

  (*(void (**)(uint64_t))(v11 + 528))(v11);
  if (v12[28] == -1 && *v12 == 0x4000) {
    v12[28] = v12[132];
  }
  if (*(_BYTE *)(v11 + 424)) {
    sub_100039B9C(v11, v34, v35, v36, v37, v38, v39, v40);
  }
  sub_1000070E0(*(void *)(v11 + 384), v12[132], (_DWORD *)(v11 + 436));
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 1492)
    && sub_100025C94((unsigned int *)(v11 + 9084)) == 3)
  {
    uint64_t v41 = 0;
    int v42 = *(_DWORD *)(v11 + 9040) << 8;
    uint64_t v43 = v42 - *(_DWORD *)(v11 + 9044);
    char v44 = *(void *)(v11 + 9024);
    int v45 = *(void *)(v44 + 8LL * (v43 >> 8)) + 48LL * -*(_BYTE *)(v11 + 9044);
    int v83 = *v12;
    int v84 = 0x4000;
    int v46 = -1;
    int v47 = *(unsigned __int16 *)(v45 + 32);
    if (v47 == 0xFFFF) {
      goto LABEL_67;
    }
    while (1)
    {
      if (v47 != v46)
      {
LABEL_61:
        uint64_t v41 = sub_10009B978(*(void *)(v11 + 9256), v47);
        int v46 = v47;
      }

      sub_1000C0EF8(*(void *)(v2 + 88));
      sub_1000C0EF8(*(void *)(v2 + 72));
      sub_1000C0EF8(*(void *)(v2 + 56));
      sub_1000C0EF8(v2);
      return 0LL;
    }
  }

  return v2;
}

  ++*v5;
  return result;
}

    __int128 v28 = 2LL;
    goto LABEL_21;
  }

    *(void *)(v3 + 16) = v21;
    *(_DWORD *)(v3 + 24) = v19;
    *(_DWORD *)(v3 + 28) = v19;
  }

  if (*((void *)a1 + 4))
  {
    uint64_t v25 = *((_DWORD *)a1 + 14) + 255;
    __int128 v26 = v25 >> 8;
    __int128 v27 = sub_1000C0F68(8 * (v25 >> 8));
    if (!v27) {
      goto LABEL_44;
    }
    __int128 v28 = v27;
    if (v25 >= 0x100)
    {
      __int128 v29 = 0LL;
      if (v26 <= 1) {
        __int128 v30 = 1LL;
      }
      else {
        __int128 v30 = v26;
      }
      while (1)
      {
        __int128 v31 = sub_1000C0F68(0x200uLL);
        *(void *)&v28[2 * v29] = v31;
        if (!v31) {
          break;
        }
        j__memmove(v31, *(const void **)(*((void *)a1 + 4) + 8 * v29++), 0x200uLL);
        if (v30 == v29) {
          goto LABEL_29;
        }
      }

      if (v29)
      {
        uint64_t v38 = v29 + 1;
        do
          sub_1000C0EF8(*(void *)&v28[2 * (v38-- - 2)]);
        while (v38 > 1);
      }

      goto LABEL_44;
    }

void *sub_1000240DC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = sub_1000C1074(24LL);
    unsigned int v5 = (void *)v4;
    if (!v4) {
      return v5;
    }
    *(_DWORD *)(v4 + 8) = a2;
    *(_DWORD *)(v4 + 12) = 0;
    *(void *)(v4 + 16) = a1;
    uint64_t v6 = sub_1000C1074(12LL * a2);
    *unsigned int v5 = v6;
    if (v6) {
      return v5;
    }
    sub_1000C0EF8((uint64_t)v5);
  }

  return 0LL;
}

uint64_t sub_100024158(uint64_t *a1)
{
  return sub_1000C0EF8((uint64_t)a1);
}

uint64_t sub_100024180(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t *sub_100024188(uint64_t *result, int a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v5 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1208)) {
      a5 = a4;
    }
    uint64_t v5 = *(void *)(qword_1000FDCC0 + 1200);
  }

  if (v5 >= a5)
  {
    uint64_t v6 = *result;
    int v7 = *((_DWORD *)result + 3);
    if (v7 < 1)
    {
      __int16 v11 = -16384;
      int v10 = -1;
LABEL_16:
      if (v7 >= *((_DWORD *)result + 2))
      {
        if (a5 >= v11) {
          return result;
        }
      }

      else
      {
        *((_DWORD *)result + 3) = v7 + 1;
        int v10 = v7;
      }

      uint64_t v14 = v6 + 12LL * v10;
      *(_DWORD *)uint64_t v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 8) = a4;
      *(_WORD *)(v14 + 10) = a5;
    }

    else
    {
      int v8 = 0;
      uint64_t v9 = (__int16 *)(v6 + 10);
      int v10 = -1;
      __int16 v11 = -16384;
      while (*(_DWORD *)(v9 - 5) != a2 || *(_DWORD *)(v9 - 3) != a3)
      {
        int v13 = *v9;
        v9 += 6;
        __int16 v12 = v13;
        if (v13 > v11)
        {
          int v10 = v8;
          __int16 v11 = v12;
        }

        if (v7 == ++v8) {
          goto LABEL_16;
        }
      }

      if (*v9 > a5)
      {
        *uint64_t v9 = a5;
        *(v9 - 1) = a4;
      }
    }
  }

  return result;
}

uint64_t sub_10002426C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (*a1 - *a2);
  if (*a1 == *a2)
  {
    uint64_t v3 = a1[2];
    int v4 = a2[2];
    if ((_DWORD)v3 != v4) {
      return (v3 - v4);
    }
    if ((int)v3 < 1)
    {
LABEL_7:
      uint64_t v2 = qword_1000FDCC0;
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 4776)) {
          BOOL v11 = (int)v3 < 1;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11) {
          return 0LL;
        }
        int v13 = a1 + 96;
        uint64_t v14 = a2 + 96;
        uint64_t v15 = a1[2];
        while (1)
        {
          int v17 = *v13++;
          int v16 = v17;
          int v18 = *v14++;
          uint64_t v2 = (v16 - v18);
          if ((_DWORD)v2) {
            break;
          }
          if (!--v15)
          {
            int v19 = a1 + 155;
            unsigned int v20 = a2 + 155;
            do
            {
              int v22 = *v19++;
              int v21 = v22;
              int v23 = *v20++;
              uint64_t v2 = (v21 - v23);
              if ((_DWORD)v2) {
                break;
              }
              --v3;
            }

            while (v3);
            return v2;
          }
        }
      }
    }

    else
    {
      uint64_t v5 = (unsigned __int16 *)(a1 + 7);
      uint64_t v6 = (unsigned __int16 *)(a2 + 7);
      uint64_t v7 = a1[2];
      while (1)
      {
        int v9 = *v5++;
        int v8 = v9;
        int v10 = *v6++;
        uint64_t v2 = (v8 - v10);
        if ((_DWORD)v2) {
          break;
        }
        if (!--v7) {
          goto LABEL_7;
        }
      }
    }
  }

  return v2;
}

uint64_t sub_100024334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  int v3 = *(_DWORD *)(a2 + 8);
  if ((_DWORD)v2 != v3) {
    return (v2 - v3);
  }
  if ((int)v2 < 1)
  {
LABEL_6:
    uint64_t v10 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 4776)) {
        BOOL v11 = (int)v2 < 1;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        return 0LL;
      }
      int v13 = (int *)(a1 + 384);
      uint64_t v14 = (int *)(a2 + 384);
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      while (1)
      {
        int v17 = *v13++;
        int v16 = v17;
        int v18 = *v14++;
        uint64_t v10 = (v16 - v18);
        if ((_DWORD)v10) {
          break;
        }
        if (!--v15)
        {
          int v19 = (int *)(a1 + 620);
          unsigned int v20 = (int *)(a2 + 620);
          do
          {
            int v22 = *v19++;
            int v21 = v22;
            int v23 = *v20++;
            uint64_t v10 = (v21 - v23);
            if ((_DWORD)v10) {
              break;
            }
            --v2;
          }

          while (v2);
          return v10;
        }
      }
    }
  }

  else
  {
    int v4 = (unsigned __int16 *)(a1 + 28);
    uint64_t v5 = (unsigned __int16 *)(a2 + 28);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    while (1)
    {
      int v8 = *v4++;
      int v7 = v8;
      int v9 = *v5++;
      uint64_t v10 = (v7 - v9);
      if ((_DWORD)v10) {
        break;
      }
      if (!--v6) {
        goto LABEL_6;
      }
    }
  }

  return v10;
}

uint64_t sub_1000243EC(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  uint64_t result = (*a1 - *a2);
  if (v3 == *a2) {
    return (a1[6] - a2[6]);
  }
  return result;
}

uint64_t sub_100024410(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0LL;
    int v21 = 0;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      uint64_t v11 = a4 + 1096 * v8;
      uint64_t result = sub_10009CEDC( v7,  *(_DWORD *)(v11 + 24),  v11 + 28,  v11 + 384,  v11 + 323,  v11 + 856,  (__int16 *)(v11 + 146),  v11 + 264,  59,  &v21);
      *(_DWORD *)(v11 + 8) = result;
      int v17 = (int *)(v11 + 8);
      if ((int)result >= 1)
      {
        uint64_t v18 = 0LL;
        do
        {
          int v19 = (unsigned int *)(v9 + 4 * v18);
          uint64_t result = sub_1000315D4(a2, v19[96], v19[214], v12, v13, v14, v15, v16);
          v19[155] = result;
          ++v18;
        }

        while (v18 < *v17);
      }

      *(void *)(a4 + 1096 * v8++ + 16) = *(void *)(a3 + 8LL * v21);
      v9 += 1096LL;
    }

    while (v8 != v10);
  }

  return result;
}

uint64_t sub_100024518( uint64_t result, uint64_t a2, uint64_t a3, char *a4, int *a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9 = *a5;
  int v76 = v9;
  if (!(_DWORD)v9) {
    return result;
  }
  int v10 = a6;
  int v13 = a6 - 1;
  if (a6 == 1)
  {
    *a5 = 1;
    uint64_t v14 = *(void *)(a3 + 16);
    int v77 = 0;
    uint64_t result = sub_10009CEDC( v14,  *((_DWORD *)a4 + 6),  (uint64_t)(a4 + 28),  (uint64_t)(a4 + 384),  (uint64_t)(a4 + 323),  (uint64_t)(a4 + 856),  (__int16 *)a4 + 73,  (uint64_t)(a4 + 264),  59,  &v77);
    *((_DWORD *)a4 + 2) = result;
    if ((int)result >= 1)
    {
      uint64_t v20 = 0LL;
      do
      {
        int v21 = (unsigned int *)&a4[4 * v20];
        uint64_t result = sub_1000315D4(a2, v21[96], v21[214], v15, v16, v17, v18, v19);
        v21[155] = result;
        ++v20;
      }

      while (v20 < *((int *)a4 + 2));
    }

    *((void *)a4 + 2) = *(void *)(a7 + 8LL * v77);
    return result;
  }

  uint64_t v65 = result;
  qsort(*(void **)a3, *(int *)(a3 + 12), 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_100024AF8);
  __int128 v29 = (char *)sub_1000CAF58(1096LL, v22, v23, v24, v25, v26, v27, v28);
  __int128 v30 = *(unsigned int **)a3;
  *(_OWORD *)(v29 + 264) = 0u;
  *(_OWORD *)(v29 + 280) = 0u;
  *(_OWORD *)(v29 + 296) = 0u;
  *(_OWORD *)(v29 + 307) = 0u;
  *((_WORD *)v29 + 2) = 0;
  *((_DWORD *)v29 + 3) = 1;
  int v31 = 0;
  uint64_t v69 = &a4[1096 * v13];
  int v70 = v10;
  while (1)
  {
    int v68 = v31;
LABEL_10:
    v30 += 3;
    int v31 = v68 + 1;
    if (v68 + 1 >= *(_DWORD *)(a3 + 12)) {
      goto LABEL_66;
    }
  }

  if ((_DWORD)v9 == 1)
  {
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v32 = v9 & 0xFFFFFFFE;
    uint64_t v33 = v32;
    __int128 v34 = a4;
    do
    {
      *((_DWORD *)v34 + 3) = 0;
      *((_DWORD *)v34 + 277) = 0;
      v34 += 2192;
      v33 -= 2LL;
    }

    while (v33);
  }

  __int128 v35 = &a4[1096 * v32 + 12];
  uint64_t v36 = v9 - v32;
  do
  {
    *(_DWORD *)__int128 v35 = 0;
    v35 += 1096;
    --v36;
  }

  while (v36);
LABEL_19:
  int v37 = 0;
  uint64_t v38 = a4;
  int v71 = v30;
  while (1)
  {
    if (*((_DWORD *)v38 + 3)) {
      goto LABEL_22;
    }
    LODWORD(v39) = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      unint64_t v40 = (unint64_t)(*(void *)(qword_1000FDCC0 + 1184) * *((__int16 *)v30 + 5) + 16LL) >> 5;
      uint64_t v39 = *(void *)(qword_1000FDCC0 + 1192);
    }

    else
    {
      LODWORD(v40) = 0;
    }

    int v41 = *(_DWORD *)v38 + *((__int16 *)v30 + 4) + (((v40 & 0x7FFFFFF) + v39) & ~((int)((v40 & 0x7FFFFFF) + v39) >> 31));
    *(_DWORD *)__int128 v29 = v41;
    if ((_DWORD)v9 == v10 && v41 > *(_DWORD *)v69) {
      break;
    }
    if (sub_10009CAEC(*(void *)(a3 + 16), (uint64_t)v29, (uint64_t)v38, v30))
    {
      int v42 = &a4[1096 * (int)v9];
      uint64_t v43 = (v9 - 1);
      if ((int)v9 < 1)
      {
        __int16 v48 = a4;
        uint64_t v43 = v9;
        int v46 = &a4[1096 * (int)v9];
      }

      else
      {
        uint64_t v44 = 0LL;
        BOOL v45 = 0;
        int v46 = &a4[1096 * (int)v9];
        while (1)
        {
          __int16 v48 = &a4[v44];
          int v47 = *((_DWORD *)v29 + 6) - *(_DWORD *)&a4[v44 + 24];
          if (!v47) {
            break;
          }
          if (v45)
          {
            BOOL v45 = 1;
            v44 += 1096LL;
            __int16 v48 = &a4[v44];
            if (&a4[v44] >= v42) {
              goto LABEL_40;
            }
          }

          else
          {
            if (*(_DWORD *)v29 != *(_DWORD *)v48) {
              int v47 = *(_DWORD *)v29 - *(_DWORD *)v48;
            }
            BOOL v45 = v47 < 0;
            if (v47 < 0) {
              int v46 = &a4[1096 * (v44 == 0) + v44];
            }
            v44 += 1096LL;
            __int16 v48 = &a4[v44];
            if (&a4[v44] >= v42)
            {
LABEL_40:
              uint64_t v43 = v9;
              if (!v45) {
                goto LABEL_47;
              }
LABEL_54:
              int v10 = v70;
              __int128 v30 = v71;
              goto LABEL_57;
            }
          }
        }

        if (*(_DWORD *)v29 >= *(_DWORD *)v48) {
          goto LABEL_64;
        }
        if (!v44)
        {
          *(_DWORD *)a4 = *(_DWORD *)v29;
LABEL_64:
          int v10 = v70;
          __int128 v30 = v71;
          goto LABEL_22;
        }

        j__memmove(v48, &a4[v44 + 1096], 1096LL * (int)v9 - v44 - 1096);
        v42 -= 1096;
        if (v45) {
          goto LABEL_54;
        }
        int v46 = v42;
      }

uint64_t sub_100024AF8(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v2 = *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8);
  }
  if ((_DWORD)v2) {
    return v2;
  }
  uint64_t v2 = *(__int16 *)(a1 + 10) < *(__int16 *)(a2 + 10)
     ? 0xFFFFFFFFLL
     : *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10);
  if ((_DWORD)v2) {
    return v2;
  }
  uint64_t v2 = *(_DWORD *)a1 < *(_DWORD *)a2 ? 0xFFFFFFFFLL : *(_DWORD *)a1 != *(_DWORD *)a2;
  if ((_DWORD)v2) {
    return v2;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a2 + 4);
  BOOL v6 = v4 < v5;
  LODWORD(v7) = v4 != v5;
  if (v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

void *sub_100024B74( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  uint64_t v11 = *a3;
  __dst = (void *)sub_1000CAF58(1096LL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  int v12 = v11 - 1;
  if ((int)v11 < 1)
  {
    int v15 = v11;
  }

  else
  {
    uint64_t v28 = a1;
    __int128 v29 = v8;
    int v13 = 0;
    uint64_t v14 = v9 + 1096LL * v11 + 1096;
    int v15 = v11;
    unint64_t v30 = v9;
    do
    {
      uint64_t v16 = (int *)(v9 + 1096LL * (v11 - 1));
      int v17 = *v16;
      int v18 = sub_10003B330( (uint64_t)(v16 + 7),  (uint64_t)(v16 + 96),  (uint64_t)v16 + 323,  (uint64_t)v16 + 146,  0LL,  v16 + 2,  v16);
      int v19 = *v16;
      if (*v16 == 0x40000000)
      {
        if (v11 < v15) {
          j__memmove(v16, (const void *)(v9 + 1096 * v11), 1096 * (v15 - (int)v11));
        }
        --v15;
      }

      else
      {
        if (v18 > v13) {
          int v13 = v18;
        }
        BOOL v20 = v17 < v19 && v11 < v15;
        if (v20)
        {
          int v21 = (_DWORD *)(v9 + 1096 * v11);
          if (v19 > *v21)
          {
            uint64_t v22 = 0LL;
            int v23 = v15 - 1;
            uint64_t v24 = (int *)v14;
            while (v11 + v22 + 1 < v15)
            {
              int v25 = *v24;
              ++v22;
              v24 += 274;
              if (v19 <= v25)
              {
                int v23 = v12 + v22;
                break;
              }
            }

            memcpy(__dst, v16, 0x448uLL);
            j__memmove(v16, v21, 1096 * (v23 - ((int)v11 - 1)));
            uint64_t v26 = (void *)(v30 + 1096LL * v23);
            unint64_t v9 = v30;
            memcpy(v26, __dst, 0x448uLL);
          }
        }
      }

      --v12;
      v14 -= 1096LL;
      BOOL v20 = v11-- <= 1;
    }

    while (!v20);
    int v32 = v15;
    if (v13 < 1)
    {
      uint64_t v8 = v29;
    }

    else
    {
      uint64_t v8 = v29;
      if (v15 >= 2)
      {
        sub_100024DB8(v28, v9, &v32);
        int v15 = v32;
      }
    }
  }

  *uint64_t v8 = v15;
  return sub_1000CB038(__dst, 1096LL);
}

uint64_t sub_100024DB8(uint64_t result, unint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 >= 2)
  {
    uint64_t v4 = result;
    int v24 = v3 - 1;
    int v25 = (_DWORD *)(a2 + 1096LL * (v3 - 1));
    int v5 = v25 - 179;
    do
    {
      uint64_t v8 = v25;
      v25 -= 274;
      if ((unint64_t)v25 >= a2)
      {
        unint64_t v9 = v5;
        int v10 = v8;
        uint64_t v11 = v25;
        while (1)
        {
          uint64_t v12 = *(v10 - 272);
          if ((_DWORD)v12 == v8[2]) {
            break;
          }
LABEL_7:
          v11 -= 274;
          v10 -= 274;
          v9 -= 274;
        }

        uint64_t v13 = qword_1000FDCC0;
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1760))
        {
          uint64_t v14 = *(v10 - 272);
          while ((int)v14 >= 1)
          {
            uint64_t v15 = 2 * v14--;
          }
        }

        else
        {
          uint64_t v16 = *(v10 - 272);
          while ((int)v16 >= 1)
          {
            uint64_t v17 = v16 - 1;
            uint64_t v18 = 2 * v16;
            int v19 = sub_1000BB868(v4, *((unsigned __int16 *)v10 + v16 - 535), 0LL);
            uint64_t result = sub_1000BB868(v4, *(unsigned __int16 *)((char *)v8 + v18 + 26), 0LL);
            uint64_t v16 = v17;
            if (v19 != (_DWORD)result) {
              goto LABEL_7;
            }
          }

          uint64_t v13 = qword_1000FDCC0;
        }

        if (v13 && *(_DWORD *)(v13 + 4776))
        {
          BOOL v20 = &v9[v12];
          while ((int)v12 >= 1)
          {
            int v21 = &v8[v12];
            if (*v20 == v21[95])
            {
              int v22 = v20[59];
              --v20;
              --v12;
              if (v22 == v21[154]) {
                continue;
              }
            }

            goto LABEL_7;
          }
        }

        uint64_t v6 = *a3 - 1LL;
        *a3 = v6;
        uint64_t result = (uint64_t)j__memmove(v8, v8 + 274, 1096 * (v6 - v24));
      }

void *sub_100024FB4( void *result, uint64_t a2, int *a3, char *a4, int *a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  int v9 = *a5;
  int v92 = v9;
  if (!v9) {
    return result;
  }
  int v10 = a6;
  int v11 = 1;
  int v12 = a6 - 1;
  if (a6 == 1) {
    goto LABEL_78;
  }
  uint64_t v13 = a3;
  uint64_t v75 = (uint64_t)result;
  int v76 = a5;
  int v91 = 0;
  qsort(*(void **)a3, a3[3], 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_100024AF8);
  unint64_t v22 = sub_1000CAF58(1096LL, v15, v16, v17, v18, v19, v20, v21);
  unint64_t v25 = v22;
  uint64_t v26 = *(void *)v13;
  *(_OWORD *)(v22 + 264) = 0u;
  *(_OWORD *)(v22 + 280) = 0u;
  *(_OWORD *)(v22 + 296) = 0u;
  *(_OWORD *)(v22 + 307) = 0u;
  *(_DWORD *)(v22 + 12) = 1;
  if (v13[3] < 1) {
    goto LABEL_74;
  }
  int v27 = 0;
  unsigned int v88 = &a4[1096 * v12];
  int v77 = (unsigned __int16 *)(v22 + 28);
  int v87 = v10;
  int16x8_t v79 = (uint64_t *)v13;
  while (1)
  {
    int v89 = sub_10009CEDC( *((void *)v13 + 2),  *(_DWORD *)v26,  (uint64_t)__src,  (uint64_t)v100,  (uint64_t)v94,  (uint64_t)v96,  v102,  0LL,  59,  &v91);
    unsigned int v28 = sub_10009CEDC( *((void *)v13 + 2),  *(_DWORD *)(v26 + 4),  (uint64_t)v103,  (uint64_t)v99,  (uint64_t)v93,  (uint64_t)v95,  v101,  0LL,  59,  &v91);
    int v84 = v27;
    if (v9 >= 1) {
      break;
    }
LABEL_6:
    v26 += 12LL;
    int v27 = v84 + 1;
    uint64_t v13 = (int *)v79;
    if (v84 + 1 >= *((_DWORD *)v79 + 3)) {
      goto LABEL_74;
    }
  }

  int v32 = v28;
  if (v9 == 1)
  {
    uint64_t v33 = 0LL;
    int v34 = v89;
  }

  else
  {
    uint64_t v33 = v9 & 0xFFFFFFFE;
    uint64_t v35 = v33;
    uint64_t v36 = a4;
    int v34 = v89;
    do
    {
      *((_DWORD *)v36 + 3) = 0;
      *((_DWORD *)v36 + 277) = 0;
      v36 += 2192;
      v35 -= 2LL;
    }

    while (v35);
    if (v33 == v9) {
      goto LABEL_15;
    }
  }

  int v37 = &a4[1096 * v33 + 12];
  uint64_t v38 = v9 - v33;
  do
  {
    *(_DWORD *)int v37 = 0;
    v37 += 1096;
    --v38;
  }

  while (v38);
LABEL_15:
  int v39 = 0;
  uint64_t v82 = 4 * v34;
  uint64_t v83 = v28;
  uint64_t v40 = 2LL * v28;
  unint64_t v41 = (unint64_t)a4;
  uint64_t v80 = 2LL * v34;
  uint64_t v81 = v34;
  int v90 = v28;
  while (*(_DWORD *)(v41 + 12))
  {
LABEL_20:
    v41 += 1096LL;
    ++v39;
    int v9 = v92;
    if (v39 >= v92) {
      goto LABEL_6;
    }
  }

  LODWORD(v42) = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    unint64_t v43 = (unint64_t)(*(void *)(qword_1000FDCC0 + 1184) * *(__int16 *)(v26 + 10) + 16LL) >> 5;
    uint64_t v42 = *(void *)(qword_1000FDCC0 + 1192);
  }

  else
  {
    LODWORD(v43) = 0;
  }

  int v44 = *(_DWORD *)v41 + *(__int16 *)(v26 + 8) + (((v43 & 0x7FFFFFF) + v42) & ~((int)((v43 & 0x7FFFFFF) + v42) >> 31));
  *(_DWORD *)unint64_t v25 = v44;
  *(void *)(v25 + 16) = *(void *)(v41 + 16);
  if (v9 != v10 || v44 <= *(_DWORD *)v88)
  {
    if (*(_DWORD *)(v41 + 8) >= v32)
    {
      if (v32 < 1)
      {
LABEL_32:
        if (a2)
        {
          if (v34 >= 1)
          {
            int v46 = v98;
            int v47 = (unsigned int *)v96;
            __int16 v48 = (unsigned int *)v100;
            uint64_t v49 = v81;
            do
            {
              unsigned int v51 = *v48++;
              uint64_t v50 = v51;
              unsigned int v52 = *v47++;
              *v46++ = sub_1000315D4(a2, v50, v52, v29, v30, v31, v23, v24);
              --v49;
            }

            while (v49);
          }

          if (v90 >= 1)
          {
            char v53 = v97;
            int v54 = (unsigned int *)v95;
            int v55 = (unsigned int *)v99;
            uint64_t v56 = v83;
            do
            {
              unsigned int v58 = *v55++;
              uint64_t v57 = v58;
              unsigned int v59 = *v54++;
              *v53++ = sub_1000315D4(a2, v57, v59, v29, v30, v31, v23, v24);
              --v56;
            }

            while (v56);
          }
        }

        else
        {
          __memset_chk(v98, 0LL, v82, 236LL);
          __memset_chk(v97, 0LL, v82, 236LL);
        }

        int v34 = v89;
        int v32 = v90;
        sub_100025604((char *)v25, v41, __src, v100, v94, v98, v102, v89, v90);
        uint64_t v29 = *(unsigned int *)(v25 + 8);
        if ((int)v29 < 1)
        {
          int v10 = v87;
        }

        else
        {
          int v10 = v87;
          if ((!a8
             || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1264)
             || sub_100026308(a7, a8, v77, v29))
            && sub_1000257B4(a4, v41, v87, &v92, (_DWORD *)v25))
          {
            ++v39;
            v41 += 1096LL;
          }
        }
      }

      else
      {
        uint64_t v45 = 0LL;
        while (*(unsigned __int16 *)(v41 + v45 + 28) == *(unsigned __int16 *)&v103[v45])
        {
          v45 += 2LL;
          if (v40 == v45) {
            goto LABEL_32;
          }
        }
      }
    }

    if (*(_WORD *)(v26 + 8) || *(_DWORD *)(v41 + 8) < v34) {
      goto LABEL_20;
    }
    if (v34 < 1)
    {
      if (!a2)
      {
LABEL_62:
        __memset_chk(v98, 0LL, v82, 236LL);
        __memset_chk(v97, 0LL, v82, 236LL);
LABEL_63:
        int v34 = v89;
        int v32 = v90;
        sub_100025604((char *)v25, v41, v103, v99, v93, v97, v101, v90, v89);
        uint64_t v29 = *(unsigned int *)(v25 + 8);
        if ((int)v29 < 1)
        {
          int v10 = v87;
        }

        else
        {
          int v10 = v87;
          if ((!a8
             || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1264)
             || sub_100026308(a7, a8, v77, v29))
            && sub_1000257B4(a4, v41, v87, &v92, (_DWORD *)v25))
          {
            ++v39;
            v41 += 1096LL;
          }
        }

        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v60 = 0LL;
      do
      {
        if (*(unsigned __int16 *)(v41 + v60 + 28) != *(unsigned __int16 *)&__src[v60])
        {
          int v32 = v90;
          goto LABEL_20;
        }

        v60 += 2LL;
      }

      while (v80 != v60);
      if (!a2) {
        goto LABEL_62;
      }
      int v61 = v98;
      uint64_t v62 = (unsigned int *)v96;
      uint64_t v63 = (unsigned int *)v100;
      uint64_t v64 = v81;
      do
      {
        unsigned int v66 = *v63++;
        uint64_t v65 = v66;
        unsigned int v67 = *v62++;
        *v61++ = sub_1000315D4(a2, v65, v67, v29, v30, v31, v23, v24);
        --v64;
      }

      while (v64);
    }

    if (v90 >= 1)
    {
      int v68 = v97;
      uint64_t v69 = (unsigned int *)v95;
      int v70 = (unsigned int *)v99;
      uint64_t v71 = v83;
      do
      {
        unsigned int v73 = *v70++;
        uint64_t v72 = v73;
        unsigned int v74 = *v69++;
        *v68++ = sub_1000315D4(a2, v72, v74, v29, v30, v31, v23, v24);
        --v71;
      }

      while (v71);
    }

    goto LABEL_63;
  }

  int v9 = v10;
  if (v39) {
    goto LABEL_6;
  }
  int *v76 = v10;
LABEL_74:
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1180)) {
      sub_100024B74(v75, (uint64_t)a4, &v92, a7, a8, a9, v23, v24);
    }
  }

  sub_100024DB8(v75, (unint64_t)a4, &v92);
  uint64_t result = sub_1000CB038((void *)v25, 1096LL);
  int v11 = v92;
  a5 = v76;
LABEL_78:
  *a5 = v11;
  return result;
}

char *sub_100025604( char *result, uint64_t a2, void *__src, const void *a4, const void *a5, const void *a6, const void *a7, int a8, int a9)
{
  uint64_t v10 = (uint64_t)result;
  int v11 = a9;
  int v12 = result + 28;
  uint64_t v13 = result + 384;
  uint64_t v14 = result + 323;
  uint64_t v15 = result + 620;
  uint64_t v30 = result + 146;
  if (a8 >= 1)
  {
    uint64_t v28 = a2;
    memcpy(result + 28, __src, (2 * a8));
    memcpy(v13, a4, 4 * a8);
    memcpy(v14, a5, a8);
    memcpy(v15, a6, 4 * a8);
    uint64_t result = (char *)memcpy(v30, a7, (2 * a8));
    int v11 = a9;
    a2 = v28;
  }

  size_t v18 = (*(_DWORD *)(a2 + 8) - v11);
  *(_DWORD *)(v10 + 8) = v18 + a8;
  if ((int)v18 + a8 < 60)
  {
    if ((int)v18 >= 1)
    {
      uint64_t v19 = v15;
      uint64_t v29 = 2LL * a8;
      uint64_t v20 = &v12[v29];
      uint64_t v21 = a2;
      uint64_t v27 = a2 + 2LL * v11;
      int v22 = v11;
      memcpy(v20, (const void *)(v27 + 28), (2 * v18));
      uint64_t v23 = 4LL * a8;
      uint64_t v24 = v21 + 4LL * v22;
      memcpy(&v13[v23], (const void *)(v24 + 384), 4 * (int)v18);
      memcpy(&v14[a8], (const void *)(v21 + v22 + 323), v18);
      memcpy(&v19[v23], (const void *)(v24 + 620), 4 * (int)v18);
      return (char *)memcpy(&v30[v29], (const void *)(v27 + 146), (2 * v18));
    }
  }

  else
  {
    *(_DWORD *)(v10 + 8) = 0;
  }

  return result;
}

BOOL sub_1000257B4(char *__dst, unint64_t a2, int a3, int *a4, _DWORD *a5)
{
  int v9 = *a4;
  uint64_t v10 = &__dst[1096 * *a4];
  BOOL v11 = 0;
  if (*a4 < 1)
  {
    uint64_t v19 = &__dst[1096 * v9];
    goto LABEL_47;
  }

  uint64_t v12 = a5[2];
  uint64_t v13 = 2 * v12;
  uint64_t v14 = a5 + 7;
  uint64_t v15 = 4 * v12;
  uint64_t v16 = a5 + 96;
  uint64_t v17 = a5 + 155;
  size_t v18 = __dst;
  uint64_t v19 = &__dst[1096 * v9];
  while (1)
  {
    int v20 = *((_DWORD *)v18 + 2);
    int v21 = v12 - v20;
    if ((_DWORD)v12 != v20) {
      goto LABEL_20;
    }
    uint64_t v22 = 0LL;
    while (1)
    {
      int v21 = *(unsigned __int16 *)((char *)v14 + v22) - *(unsigned __int16 *)&v18[v22 + 28];
      if (v21) {
        break;
      }
      v22 += 2LL;
      if (v13 == v22) {
        goto LABEL_10;
      }
    }

LABEL_70:
      __dst += 1096;
    }

    while (__dst < v10);
  }

            if (!v15) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
        }

        else
        {
          int v42 = v41;
          uint64_t v43 = 0LL;
          int v44 = 0;
          uint64_t v45 = *(_DWORD *)(a1 + 1048);
          while (1)
          {
            while (1)
            {
              int v46 = sub_10001FBCC( v42,  *(unsigned __int16 *)(*(void *)(a1 + 1024) + 2LL * v44),  (int16x8_t *)(*(void *)(a1 + 1040) + 2LL * (int)v43),  v45 - (int)v43);
              uint64_t v45 = *(_DWORD *)(a1 + 1048);
              uint64_t v43 = (v46 + v43);
            }

            int v47 = v37;
            v45 += 2 * (v37 - v44);
            __int16 v48 = (void *)sub_1000C1074(2LL * v45);
            if (!v48) {
              break;
            }
            uint64_t v49 = v48;
            j__memmove(v48, *(const void **)(a1 + 1040), 2 * (int)v43);
            sub_1000C0EF8(*(void *)(a1 + 1040));
            *(void *)(a1 + 1040) = v49;
            *(_DWORD *)(a1 + 1048) = v45;
            int v37 = v47;
          }
        }

        return 0LL;
      }
    }

        if (!v38)
        {
          uint64_t v38 = v87 - v60;
          if (v87 == v60) {
            goto LABEL_23;
          }
        }

        goto LABEL_53;
      }

      sub_10009B1B8(v14, v39, 0LL, &v91, (int *)&v92 + 1);
      memcpy(v33, v91, 2LL * SHIDWORD(v92));
      v33[SHIDWORD(v92)] = 0x7FFF;
      uint64_t v40 = 0;
      uint64_t v41 = v36 - 1;
      if (v36 >= 1)
      {
        while (1)
        {
          int v42 = v41 + v40;
          if (v41 + v40 < 0 != __OFADD__(v41, v40)) {
            ++v42;
          }
          uint64_t v43 = v42 >> 1;
          int v44 = v23[v42 >> 1];
          sub_10009B1B8(v14, v23[v42 >> 1], 0LL, &v91, (int *)&v92);
          memcpy(v35, v91, 2LL * (int)v92);
          v35[(int)v92] = 0x7FFF;
          uint64_t v45 = sub_100099EFC((unint64_t)v33);
          int v46 = sub_100099EFC((unint64_t)v35);
          int v47 = v45 >= v46 ? v46 : v45;
LABEL_44:
          uint64_t v38 = v45 != v46;
          if (v45 >= v46) {
            goto LABEL_45;
          }
          uint64_t v38 = -1;
LABEL_28:
          if (v38 < 0) {
            uint64_t v41 = v43 - 1;
          }
          else {
            uint64_t v40 = v43 + 1;
          }
          if (v40 > v41) {
            goto LABEL_49;
          }
        }

        __int16 v48 = v33;
        uint64_t v49 = v35;
        while (1)
        {
          unsigned int v51 = *v48++;
          uint64_t v50 = v51;
          unsigned int v52 = *v49++;
          char v53 = v50 >= v52;
          int v54 = v50 != v52;
          uint64_t v38 = v53 ? v54 : -1;
          if (v38) {
            break;
          }
          if (!--v47) {
            goto LABEL_44;
          }
        }

  if (sub_10009D1D4(*(void *)(a1 + 9000)))
  {
    *(_DWORD *)(a1 + 552) = 3;
  }

  else
  {
    if (*(_DWORD *)(a1 + 612) >= (*(_DWORD *)(a1 + 608) << 8) - 1) {
      *(_DWORD *)(a1 + 552) = 3;
    }
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    *(_DWORD *)(a1 + 9044) = v33;
  }

LABEL_79:
  int v42 = 125400505 * ((unint64_t)(v10 - v19) >> 3);
  if (v9 < a3)
  {
    ++v9;
    if (v42 >= 1) {
      goto LABEL_81;
    }
    goto LABEL_82;
  }

  if (v19 == v10) {
    return 0LL;
  }
  if (--v42 >= 1) {
LABEL_81:
  }
    j__memmove(v19 + 1096, v19, 1096 * v42);
LABEL_82:
  memcpy(v19, a5, 0x448uLL);
  *a4 = v9;
  return (unint64_t)v19 <= a2;
}

  *(_DWORD *)(a2 + 60) = v23;
  BOOL v11 = v46;
  a4 = v47;
  int v20 = v45;
  if (*(void *)(a2 + 160))
  {
LABEL_29:
    *(_DWORD *)(a2 + 104) = 1;
    goto LABEL_83;
  }

    sub_1000CB038(v66, v180);
    uint64_t v86 = sub_100026E48("\x01SCO", *v181, 1, 1, 0);
    if (v86)
    {
      int v87 = v86;
      unsigned int v88 = sub_100031764(*v181, "\x01SCL");
      if (v88 != -1)
      {
        int v89 = v88;
        if (sub_100027AB4(v87, 0, v88, 0))
        {
          if (sub_100027AB4(v87, v89, 0, 0))
          {
            *int16x8_t v188 = (unsigned int *)v87;
            int v90 = 1LL;
            goto LABEL_102;
          }
        }
      }

      uint64_t v86 = v87;
    }

        if (sub_10009D1D4(*(void *)(a1 + 9000)))
        {
          *(_DWORD *)(a1 + 552) = 3;
          return;
        }

        if (!v18) {
          goto LABEL_84;
        }
        --v18;
LABEL_39:
        int v32 = *(void *)(a1 + 9032);
        int v20 = *(void *)(v32 + 8LL * (v18 >> 8)) + 32LL * v18;
        --v21;
        uint64_t v22 = (_OWORD *)(*(void *)(v32 + 8LL * (v21 >> 8)) + 32LL * v21);
        uint64_t v26 = v2[41];
      }

      if ((__int16)(v2[34] + v2[44] + v63) <= v2[41])
      {
        uint64_t v56 = v47;
        (*(void (**)(uint64_t))(a1 + 9400))(a1);
        int v47 = v56;
      }

      if (v63 && v69) {
        sub_10009CAD8(*(void *)(a1 + 9000), v50, v62);
      }
      goto LABEL_82;
    }
  }

    sub_1000BCBC8(v11);
    sub_100083710(v13);
    return 0LL;
  }

  sub_1000BCBC8(v11);
  return v13;
}

          sub_1000CB038(v112, v100);
          goto LABEL_115;
        }
      }

  int16x8_t v104 = v99 - 1;
  uint64_t v12 = v99;
  v311 = (unsigned int *)(v100 + 4LL * ((int)v99 - 1));
  int32x4_t v313 = v103;
  double v304 = v104;
  int16x8_t v105 = 4LL * v104;
  v308 = &v101[(unint64_t)v105 / 4];
  int v302 = v105;
  double v306 = (_DWORD *)(a10 + v105);
  float64x2_t v297 = *(int *)(a10 + v105);
  float64x2_t v298 = v101[(unint64_t)v105 / 4];
  int v106 = (char *)(v102 + 2 * v297);
  __src = (void *)(a2 + 2 * v298);
  float64x2_t v319 = sub_1000CC52C((unint64_t)__src);
  float64x2_t v322 = sub_1000CC52C((unint64_t)v106);
  int v107 = sub_1000C88E4((unint64_t)"<START_DOCUMENT>");
  int v108 = sub_100082BA4(*a1);
  if (v108 <= v107) {
    int v109 = v107;
  }
  else {
    int v109 = v108;
  }
  int v110 = sub_10003982C(*a1);
  if (qword_1000FDCC0) {
    v337 = *(_DWORD *)(qword_1000FDCC0 + 5508);
  }
  else {
    v337 = 0;
  }
  int v120 = (v319 + 1);
  float64x2_t v299 = (v322 + 1);
  int v121 = sub_1000C13F8(4LL, v120, v299);
  if (!v121)
  {
    float64x2_t v206 = 0;
    int64x2_t v207 = v304;
    return (v207 + v206);
  }

  int v129 = v121;
  float64x2_t v296 = 2LL * (int)v120;
  float64x2_t v325 = (char *)sub_1000CAF58(v296, v122, v123, v124, v125, v126, v127, v128);
  j__memmove(v325, __src, 2 * (int)v120);
  uint32x4_t v295 = 2LL * (v109 + 1);
  int32x4_t v137 = (void *)sub_1000CAF58(v295, v130, v131, v132, v133, v134, v135, v136);
  float64x2_t v294 = 2LL * (v110 + 1);
  int16x8_t v152 = (_WORD *)sub_1000CAF58(v294, v138, v139, v140, v141, v142, v143, v144);
  if ((v319 & 0x80000000) == 0 && (v322 & 0x80000000) == 0)
  {
    int16x8_t v153 = 0LL;
    do
    {
      int32x4_t v154 = 0LL;
      do
      {
        *(_DWORD *)(*(void *)(v129 + 8 * v153) + v154) = -1;
        v154 += 4LL;
      }

      while (4LL * v299 != v154);
      ++v153;
    }

    while (v153 != v120);
  }

  uint64_t v310 = v14;
  __int128 v317 = &a9[v302];
  int32x4_t v315 = (int *)(a11 + v302);
  int32x4_t v155 = v313 + 1;
  *(_DWORD *)(*(void *)(v129 + 8LL * v319) + 4LL * v322) = 0;
  int32x4_t v156 = sub_1000CAF58(120LL, v145, v146, v147, v148, v149, v150, v151);
  float64x2_t v157 = v319;
  double v340 = v129;
  uint64_t v343 = (void *)v156;
  if (v319 < 1)
  {
LABEL_219:
    float64x2_t v247 = 0;
    float64x2_t v244 = 0;
    uint64_t v159 = 30;
    uint32x4_t v243 = v157;
    goto LABEL_222;
  }

  uint64_t v158 = v319;
  if (!v325)
  {
    float64x2_t v248 = v319 & 0xFFFFFFFFFFFFFFF0LL;
    do
      v248 -= 16LL;
    while (v248);
    uint64_t v158 = v319 & 0xFLL;
    float64x2_t v157 = v319;
    if ((v319 & 0xFFFFFFFFFFFFFFF0LL) != v319)
    {
LABEL_218:
      do
        uint16x8_t v97 = v158-- <= 1;
      while (!v97);
    }

    goto LABEL_219;
  }

  uint64_t v159 = 30;
  int v330 = v322;
  int v333 = v319;
  do
  {
    if (v158 <= 1) {
      uint64_t v160 = 1LL;
    }
    else {
      uint64_t v160 = v158;
    }
    float64x2_t v324 = v160;
    *(_WORD *)&v325[2 * v158] = 0;
    uint64_t v161 = 1LL;
    do
    {
      uint64_t v327 = v161;
      unsigned int v162 = &v325[2 * (v158 - v161)];
      while (1)
      {
        int v163 = v162;
        do
        {
          int v164 = *(unsigned __int16 *)v163;
          if (!*(_WORD *)v163)
          {
            double v173 = 0;
            goto LABEL_149;
          }

          v163 += 2;
        }

        while (sub_1000CBA60(v164));
        uint64_t v172 = v159 < 1
             ? 0LL
             : (void *)sub_1000CAF58(4LL * v159, v165, v166, v167, v168, v169, v170, v171);
        uint64_t v174 = sub_100082CF0(*a1);
        double v173 = v174;
        double v175 = v174 >= v159 ? v159 : v174;
        if ((int)v175 < 1)
        {
          if (!v172) {
            goto LABEL_149;
          }
        }

        else
        {
          uint64_t v176 = 0LL;
          uint64_t v176 = v175 & 0x7FFFFFF8;
          int v177 = v172 + 2;
          int v178 = v343 + 2;
          int v179 = v175 & 0xFFFFFFF8;
          do
          {
            *(void *)&v180 = __PAIR64__(HIDWORD(*v177), *(_OWORD *)v177) | 0xC0000000C0000000LL;
            DWORD2(v180) = v177[1] | 0xC0000000;
            HIDWORD(v180) = HIDWORD(*(_OWORD *)v177) | 0xC0000000;
            *(v178 - 1) = *((_OWORD *)v177 - 1) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
            *int v178 = v180;
            v177 += 4;
            v178 += 2;
            v179 -= 8LL;
          }

          while (v179);
          if (v176 != v175)
          {
LABEL_144:
            BOOL v181 = v175 - v176;
            v182 = 4 * v176;
            int32x4_t v183 = (unsigned int *)v343 + v176;
            BOOL v184 = (int *)((char *)v172 + v182);
            do
            {
              float64x2_t v185 = *v184++;
              *v183++ = v185 | 0xC0000000;
              --v181;
            }

            while (v181);
          }
        }

        sub_1000CB038(v172, 4LL * v159);
LABEL_149:
        if (v173 < v159) {
          break;
        }
        sub_1000CB038(v343, 4LL * v159);
        v159 *= 2;
        uint64_t v343 = (void *)sub_1000CAF58(4LL * v159, v186, v187, v188, v189, v190, v191, v192);
      }

      if (v322 >= 1 && v173 >= 1)
      {
        v329 = v173;
        uint64_t v193 = v322;
        uint64_t v194 = v340;
        do
        {
          if (*(_DWORD *)(*(void *)(v194 + 8 * v158) + 4 * v193) != -1)
          {
            uint64_t v195 = (unsigned int *)v343;
            int v196 = v329;
            do
            {
              sub_1000B33F8((char *)a1, *v195, (uint64_t)v137, v152);
              signed int v198 = sub_1000CC52C((unint64_t)v152);
              if (v198)
              {
                int v199 = (v193 - v198);
                if ((v199 & 0x80000000) == 0 && !memcmp(&v106[2 * v199], v152, v198))
                {
                  uint16x8_t v200 = v158 - sub_1000CC52C((unint64_t)v137);
                  if ((!(_DWORD)v199 || v200) && ((_DWORD)v199 || v200 <= 0))
                  {
                    int v197 = *(void *)(v340 + 8LL * v200);
                    if (*(_DWORD *)(v197 + 4 * v199) == -1)
                    {
                      *(_DWORD *)(v197 + 4 * v199) = *v195;
                      __int128 v201 = v330;
                      __int128 v202 = v333;
                      __int128 v204 = v200 < v333;
                      if (v200 < v333) {
                        __int128 v202 = v200;
                      }
                      int v333 = v202;
                      if (v204) {
                        int64x2_t v205 = v199;
                      }
                      else {
                        int64x2_t v205 = v201;
                      }
                      int v330 = v205;
                    }
                  }
                }
              }

              ++v195;
              --v196;
            }

            while (v196);
          }

          uint16x8_t v97 = v193-- <= 1;
          uint64_t v194 = v340;
        }

        while (!v97);
      }

      uint64_t v161 = v327 + 1;
    }

    while (v327 != v324);
    uint16x8_t v97 = v158-- <= 1;
  }

  while (!v97);
  uint32x4_t v243 = v333;
  if (v333 >= v319)
  {
    float64x2_t v247 = 0;
    float64x2_t v244 = 0;
    float64x2_t v322 = v330;
  }

  else
  {
    float64x2_t v244 = 0;
    int32x4_t v245 = v330;
    int32x4_t v246 = v333;
    do
    {
      sub_1000B33F8((char *)a1, *(_DWORD *)(*(void *)(v340 + 8LL * v246) + 4LL * v245), (uint64_t)v137, v152);
      v246 += sub_1000CC52C((unint64_t)v137);
      v245 += sub_1000CC52C((unint64_t)v152);
      ++v244;
    }

    while (v246 < v319);
    float64x2_t v247 = 1;
    float64x2_t v322 = v330;
    uint32x4_t v243 = v333;
  }

  int32x4_t v155 = v313 + 1;
LABEL_222:
  if (v243) {
    float64x2_t v249 = v244 + 1;
  }
  else {
    float64x2_t v249 = v244;
  }
  float64x2_t v250 = (int)v249 <= v155 || v310 == 0;
  float64x2_t v251 = v243;
  if (v250) {
    float64x2_t v252 = 0;
  }
  else {
    float64x2_t v252 = v249 - v155;
  }
  v335 = v249;
  if (v243)
  {
    if (v252 < 1)
    {
      *v308 = 0;
      *(_DWORD *)__int128 v317 = v243;
      *double v306 = 0;
      *int32x4_t v315 = v322;
      if (v337)
      {
        v338 = v247;
        v255 = v325;
        j__memmove(v325, __src, 2 * v243);
        *(_WORD *)&v325[2 * v243] = 0;
        v263 = (void *)sub_1000CAF58(2LL * (int)v299, v256, v257, v258, v259, v260, v261, v262);
        j__memmove(v263, v106, 2 * v322);
        *((_WORD *)v263 + v322) = 0;
        uint64_t v254 = v313;
        do
        {
          v264 = (unsigned __int16)*v255;
          if (!*v255)
          {
            v266 = -1;
            goto LABEL_244;
          }

          ++v255;
        }

        while (sub_1000CBA60(v264));
        uint32x4_t v265 = sub_100082B9C(*a1);
        if (v265 == 0xFFFFFF) {
          v266 = -1;
        }
        else {
          v266 = v265 | 0xC0000000;
        }
LABEL_244:
        sub_1000CB038(v263, 2LL * (int)v299);
        float64x2_t v251 = v243;
        float64x2_t v247 = v338;
      }

      else
      {
        v266 = -1;
        uint64_t v254 = v313;
      }

      uint16x8_t *v311 = v266;
      float64x2_t v253 = 1;
    }

    else
    {
      float64x2_t v253 = 0;
      --v252;
      uint64_t v254 = v313;
    }
  }

  else
  {
    float64x2_t v253 = 0;
    uint64_t v254 = v313;
  }

  unint64_t v267 = v247 ^ 1;
  if (v253 > v254) {
    unint64_t v267 = 1;
  }
  unint64_t v268 = v322;
  if ((v267 & 1) == 0)
  {
    do
    {
      v269 = *(_DWORD *)(*(void *)(v340 + 8LL * v251) + 4LL * v268);
      uint64_t v270 = v251;
      sub_1000B33F8((char *)a1, v269, (uint64_t)v137, v152);
      unint64_t v271 = sub_1000CC52C((unint64_t)v137);
      unint64_t v272 = sub_1000CC52C((unint64_t)v152);
      if (v252 < 1)
      {
        v276 = v253;
        v308[v276] = v270;
        *(_DWORD *)&v317[v276 * 4] = v271;
        unint64_t v273 = v268;
        v306[v276] = v268;
        v315[v276] = v272;
        ++v253;
        v311[v276] = v269;
        v274 = v271 + v270;
        BOOL v275 = v313;
        if (v274 >= v319) {
          break;
        }
      }

      else
      {
        unint64_t v273 = v268;
        --v252;
        v274 = v271 + v270;
        BOOL v275 = v313;
        if (v274 >= v319) {
          break;
        }
      }

      float64x2_t v251 = v274;
      unint64_t v268 = v272 + v273;
    }

    while (v253 <= v275);
  }

  sub_1000CB038(v343, 4LL * v159);
  sub_1000CB038(v152, v294);
  sub_1000CB038(v137, v295);
  sub_1000CB038(v325, v296);
  sub_1000C133C(v340);
  float64x2_t v206 = v335;
  if ((int)v335 < 1)
  {
    int64x2_t v207 = v304;
  }

  else
  {
    int64x2_t v207 = v304;
    if (v335 < 8)
    {
      BOOL v277 = 0LL;
      v278 = v314;
      BOOL v279 = a10;
      goto LABEL_261;
    }

    v278 = v314;
    v280 = 4 * (v304 + v335);
    BOOL v279 = a10;
    if ((unint64_t)&v314[v302] >= a10 + v280 || a10 + v302 >= (unint64_t)&v314[v280])
    {
      BOOL v277 = v335 & 0x7FFFFFF8;
      v282 = v297;
      BOOL v281 = v298;
      unint64_t v287 = vdupq_n_s32(v298);
      uint16x4_t v288 = vdupq_n_s32(v297);
      v289 = (int32x4_t *)(a10 + v302 + 16);
      uint16x8_t v290 = (int32x4_t *)&v314[v302 + 16];
      uint32x4_t v291 = v335 & 0xFFFFFFF8;
      do
      {
        uint64x2_t v292 = vaddq_s32(*v290, v287);
        v290[-1] = vaddq_s32(v290[-1], v287);
        *uint16x8_t v290 = v292;
        float64x2_t v293 = vaddq_s32(*v289, v288);
        v289[-1] = vaddq_s32(v289[-1], v288);
        float64x2_t *v289 = v293;
        v289 += 2;
        v290 += 2;
        v291 -= 8LL;
      }

      while (v291);
      if (v277 != v335) {
        goto LABEL_262;
      }
    }

    else
    {
      BOOL v277 = 0LL;
LABEL_261:
      v282 = v297;
      BOOL v281 = v298;
LABEL_262:
      BOOL v283 = 4 * (v277 + v304);
      v284 = &v278[v283];
      BOOL v285 = (_DWORD *)(v279 + v283);
      v286 = v335 - v277;
      do
      {
        *(_DWORD *)v284 += v281;
        v284 += 4;
        *v285++ += v282;
        --v286;
      }

      while (v286);
    }
  }

  return (v207 + v206);
}

char *sub_100025BF0(char *result, int *a2)
{
  int v2 = *a2;
  if (*a2 >= 2)
  {
    uint64_t v4 = result;
    int v5 = v2 - 1;
    uint64_t v6 = &result[1096 * (v2 - 1)];
    uint64_t v7 = v6 - 1096;
    do
    {
      int v9 = v7;
      while (v9 >= v4)
      {
        int v10 = *((_DWORD *)v9 + 6);
        v9 -= 1096;
        if (v10 == *((_DWORD *)v6 + 6))
        {
          uint64_t v11 = *a2 - 1LL;
          *a2 = v11;
          uint64_t result = (char *)j__memmove(v6, v6 + 1096, 1096 * (v11 - v5));
          break;
        }
      }

      v6 -= 1096;
      v7 -= 1096;
      BOOL v8 = __OFSUB__(v5--, 1);
    }

    while (!((v5 < 0) ^ v8 | (v5 == 0)));
  }

  return result;
}

uint64_t sub_100025C94(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_100025C9C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_100025CA4(uint64_t a1, int a2)
{
  if (a2 > 1024) {
    return 0LL;
  }
  if (a2 < 1) {
    return 1LL;
  }
  uint64_t v4 = a2;
  while (1)
  {
    if (*(void *)a1)
    {
      int v5 = *(uint64_t (**)(void))(*(void *)a1 + 232LL);
      if (v5)
      {
        uint64_t result = v5();
        if (!(_DWORD)result) {
          break;
        }
      }
    }

    a1 += 8LL;
    if (!--v4) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100025D1C(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v3 = a2;
  do
  {
    if (*(void *)a1)
    {
      uint64_t v4 = *(unsigned int (**)(void))(*(void *)a1 + 200LL);
      if (!v4 || v4()) {
        return 1LL;
      }
    }

    a1 += 8LL;
    --v3;
  }

  while (v3);
  return 0LL;
}

uint64_t sub_100025D88(void *a1, int a2)
{
  if (a2 > 1024) {
    return 0LL;
  }
  if (a2 < 1) {
    return 1LL;
  }
  uint64_t v4 = a2;
  uint64_t result = 1LL;
  do
  {
    if (*a1)
    {
      int v5 = *(uint64_t (**)(void))(*a1 + 152LL);
      if (v5)
      {
        uint64_t result = v5(*a1);
        if (!(_DWORD)result) {
          break;
        }
      }
    }

    ++a1;
    --v4;
  }

  while (v4);
  return result;
}

uint64_t sub_100025DF8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 8 * ((a3 >> 53) & 0x3FF)) + 168LL);
  if (v3) {
    return v3();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100025E24(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v3 = a2;
  do
  {
    ++a1;
    --v3;
  }

  while (v3);
  return 0LL;
}

uint64_t sub_100025E90(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002848C(a2, a1, a3, a4);
}

uint64_t sub_100025EA0(uint64_t *a1, int a2, unsigned __int16 *a3)
{
  if (a2 < 1)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v5 = a2;
    LODWORD(v6) = 0;
    if (a3)
    {
      do
      {
        uint64_t v7 = *a1++;
        uint64_t v6 = sub_100028B9C(v7, (uint64_t)&a3[(int)v6]) + v6;
        --v5;
      }

      while (v5);
    }

    else
    {
      do
      {
        uint64_t v8 = *a1++;
        uint64_t v6 = sub_100028B9C(v8, 0LL) + v6;
        --v5;
      }

      while (v5);
    }
  }

  if (a3)
  {
    qsort(a3, (int)v6, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100025F98);
    if ((int)v6 < 2)
    {
      return 1LL;
    }

    else
    {
      int v9 = a3 + 1;
      uint64_t v10 = v6 - 1LL;
      uint64_t v6 = 1LL;
      do
      {
        int v12 = *v9++;
        unsigned __int16 v11 = v12;
        if (v12 != a3[(int)v6 - 1])
        {
          a3[(int)v6] = v11;
          uint64_t v6 = (v6 + 1);
        }

        --v10;
      }

      while (v10);
    }
  }

  return v6;
}

uint64_t sub_100025F98(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 - *a2;
}

uint64_t sub_100025FA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = 4LL * ((int)a2 + 1);
  unsigned __int16 v11 = (void *)sub_1000CAF58(v10, a2, a3, a4, a5, a6, a7, a8);
  sub_10002A574(a2, a1);
  *(_DWORD *)unsigned __int16 v11 = -1;
  if ((int)a2 < 1)
  {
    uint64_t v13 = 1LL;
  }

  else
  {
    uint64_t v12 = a2;
    uint64_t v13 = 1LL;
    do
    {
      if (*(void *)a1)
      {
        uint64_t v14 = *(uint64_t (**)(void))(*(void *)a1 + 176LL);
        if (v14)
        {
          uint64_t v13 = v14();
          if (!(_DWORD)v13) {
            break;
          }
        }
      }

      a1 += 8LL;
      --v12;
    }

    while (v12);
  }

  sub_1000CB038(v11, v10);
  return v13;
}

uint64_t sub_100026070(uint64_t *a1, int a2, uint64_t a3, int a4, unsigned __int16 a5)
{
  if (a2 < 1) {
    return 1LL;
  }
  uint64_t v9 = a2;
  while (1)
  {
    uint64_t result = sub_10002A604(*a1, a3, a4, a5);
    if (!(_DWORD)result) {
      break;
    }
    ++a1;
    if (!--v9) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000260E4(uint64_t result, unsigned int a2)
{
  if (a2 - 1 <= 0x3FF)
  {
    int v2 = (uint64_t *)result;
    uint64_t v3 = a2;
    do
    {
      uint64_t result = *v2;
      uint64_t v4 = *(uint64_t (**)(void))(*v2 + 160);
      if (v4) {
        uint64_t result = v4();
      }
      ++v2;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_100026134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_10002613C(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 248) = 0;
    return (*(uint64_t (**)(void))(result + 80))();
  }

  return result;
}

uint64_t sub_100026150(uint64_t a1, uint64_t a2)
{
  return a2 << 53;
}

uint64_t sub_100026158(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v3 = a2;
  while (!(*(unsigned int (**)(void))(*(void *)a1 + 128LL))())
  {
    a1 += 8LL;
    if (!--v3) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_1000261D4(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  memset(v16, 0, sizeof(v16));
  __int128 v14 = 0u;
  sub_100028C70((_DWORD *)a1, (uint64_t)v16);
  uint64_t v10 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(a1 + 120);
  if (!v10) {
    uint64_t v10 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(a1 + 104);
  }
  v10(a1, v16, a4, a5, *a2);
  uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(a1 + 112))(v16, a1, &v14);
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      while (!(_DWORD)v15)
      {
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(a1 + 112))(v16, a1, &v14);
        if (!(_DWORD)result) {
          return result;
        }
      }
    }

    else
    {
      uint64_t v12 = a2 + 1;
      uint64_t v13 = (a3 - 1);
      while (!sub_1000261D4(a1, v12, v13, (unsigned __int16)v14, *((void *)&v14 + 1)))
      {
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(a1 + 112))(v16, a1, &v14);
        if (!(_DWORD)result) {
          return result;
        }
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_100026308(uint64_t a1, int a2, unsigned __int16 *a3, int a4)
{
  int v4 = a4;
  uint64_t v5 = a3;
  if (a4 >= 1)
  {
    if ((__int16)*a3 != -2 || (v5 = a3 + 1, int v4 = a4 - 1, a4 != 1))
    {
    }
  }

  int v8 = sub_100028448(a2, a1);
  if (v8)
  {
    uint64_t v9 = sub_1000C1074(8LL * a2);
    if (!v9) {
      return 0LL;
    }
    uint64_t v10 = v9;
    if (a2 >= 1)
    {
      uint64_t v11 = 0LL;
      while (1)
      {
        uint64_t v12 = sub_100027CE0(*(void *)(a1 + 8 * v11));
        *(void *)(v10 + 8 * v11) = v12;
        if (!v12) {
          break;
        }
        if (a2 == ++v11)
        {
          uint64_t v13 = v10;
          goto LABEL_14;
        }
      }

      if (v11)
      {
        for (uint64_t i = 0LL; i != v11; ++i)
        {
          uint64_t v23 = *(void *)(v10 + 8 * i);
          if (v23)
          {
            *(_DWORD *)(v23 + 248) = 0;
            (*(void (**)(void))(v23 + 80))();
          }
        }
      }

      sub_1000C0EF8(v10);
      return 0LL;
    }

    uint64_t v18 = 0LL;
    goto LABEL_29;
  }

  uint64_t v10 = 0LL;
  uint64_t v13 = a1;
  if (a2 < 1)
  {
LABEL_19:
    uint64_t v18 = 0LL;
    if (!v8) {
      return v18;
    }
    goto LABEL_22;
  }

LABEL_29:
    sub_1000C0EF8(v10);
  }

  return v18;
}

  uint64_t v22 = sub_1000CC52C((unint64_t)a3);
  int v30 = v22;
  if (v22 <= 7) {
    uint64_t v31 = 7;
  }
  else {
    uint64_t v31 = v22;
  }
  sub_1000C0BFC((2LL * (v31 - 7) + 47) & 0x3FFFFFFF8LL, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v33 = v32;
  *(_DWORD *)int v32 = v18;
  sub_1000CC548((_WORD *)(v32 + 24), a3, v30 + 1);
  *(void *)(v33 + 8) = 0LL;
  *(void *)(v33 + 16) = 0LL;
  uint64_t result = 1LL;
  *uint64_t v17 = v33;
  return result;
}

  sub_1000CB038(v15, v13);
  *int v8 = v26;
  return v17;
}

  uint64_t v14 = *(void *)(a1 + 384);
  if ((*(_BYTE *)(v14 + v8) & 1) != 0)
  {
    ++*(_DWORD *)(a1 + 480);
    __int128 v15 = v8 - *(_DWORD *)(a1 + 324);
    if (v15 >= 0)
    {
LABEL_31:
      if (*(_DWORD *)(a1 + 304) == a3) {
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }

  else
  {
    __int128 v15 = v8 - *(_DWORD *)(a1 + 324);
    if (v15 >= 0) {
      goto LABEL_31;
    }
  }

  v15 += *(_DWORD *)(a1 + 320);
  if (*(_DWORD *)(a1 + 304) == a3)
  {
LABEL_32:
    *(_DWORD *)(a1 + 496) = 1;
    if (*(_DWORD *)(a1 + 476) == 1) {
      *(_DWORD *)(a1 + 468) = 0;
    }
    if ((*(_BYTE *)(v14 + v8) & 2) != 0) {
      uint64_t v16 = 5LL;
    }
    else {
      uint64_t v16 = 6LL;
    }
    *(_BYTE *)(v14 + v8) |= 4u;
    if (*(_DWORD *)(a1 + 488)) {
      sub_100022378( *(void *)(a1 + 424),  *(void *)(*(void *)(a1 + 368) + 8LL * v8),  *(_BYTE *)(*(void *)(a1 + 384) + v8));
    }
    if (!*(_DWORD *)(a1 + 340)) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_67;
    }
    uint64_t v17 = *(_DWORD *)(a1 + 332);
    if (*(_DWORD *)(a1 + 476) < v17) {
      goto LABEL_67;
    }
LABEL_56:
    uint64_t v21 = v15 - v17;
    if (v21 < 0) {
      v21 += *(_DWORD *)(a1 + 320);
    }
    *(_BYTE *)(*(void *)(a1 + 384) + v21) |= 0x10u;
    if (*(_DWORD *)(a1 + 336))
    {
      uint64_t v22 = *(_DWORD *)(a1 + 332);
      if (v22 >= 2)
      {
        *(_DWORD *)(a1 + 332) = v22 - 1;
        uint64_t v23 = *(_DWORD *)(a1 + 320);
        if (v21 < v23) {
          uint64_t v23 = 0;
        }
        *(_BYTE *)(*(void *)(a1 + 384) + v21 - v23 + 1) |= 0x10u;
      }
    }

    goto LABEL_67;
  }

        sub_10007A674(v24, &v34, &v33);
        uint64_t v13 = v36 + v33;
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v17 = (unsigned __int16)*v5 + ~(_DWORD)v9;
      uint64_t v18 = *(__int16 *)(*(void *)(a1 + 376) + 2LL * v17);
      unint64_t v36 = v18;
      if (v10)
      {
        uint64_t v19 = *(void *)(a1 + 416);
        unint64_t v36 = *(__int16 *)(a1 + 288) + v18;
        uint64_t v12 = *(_DWORD *)(a1 + 292) + *(__int16 *)(a1 + 290) + *(unsigned __int8 *)(v19 + v17);
        if (a4) {
          goto LABEL_18;
        }
        goto LABEL_5;
      }
    }

    uint64_t v12 = 0;
    if (a4) {
      goto LABEL_18;
    }
LABEL_5:
    uint64_t v13 = v36;
    if (v10)
    {
      uint64_t v14 = *(_DWORD *)(a1 + 396) + v12;
      __int128 v15 = v36 - v14;
      if (v36 >= v14)
      {
        unint64_t v36 = *(_DWORD *)(a1 + 396) + v12;
        uint64_t v13 = v14;
        if (v15 < *(_DWORD *)(a1 + 308)) {
LABEL_39:
        }
          v13 -= *(unsigned __int8 *)(*(void *)(a1 + 312) + v15);
      }

      else
      {
        __int128 v15 = v14 - v36;
        if (v14 - v36 < *(_DWORD *)(a1 + 308)) {
          goto LABEL_39;
        }
      }
    }

  *a3 = v7 & 0x7FF;
  *a4 = 0;
  return 1LL;
}

        int v39 = (unsigned __int8 *)(*(void *)a2)++;
        uint64_t v40 = *v39;
        if (*(_BYTE *)(v18 + v40) == 2)
        {
          uint64_t v41 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v40);
          int v42 = *v41;
          *(_DWORD *)(a2 + 16) = v41[1] + ~(_DWORD)v42;
          int v37 = *(void *)(a1 + 88) + v42;
          uint64_t v38 = (void *)(a2 + 8);
          goto LABEL_31;
        }

      uint64_t v10 = v5 - (void)v9;
      if ((__int16 *)v5 == v9)
      {
LABEL_33:
        uint64_t v5 = (unint64_t)(v9 + 1);
        LOWORD(v49) = v8;
        int v4 = v8;
        __int16 v48 = 0;
LABEL_5:
        int v8 = 0;
        goto LABEL_6;
      }

      break;
    }

    sub_1000CC548(v50, v9, (v10 >> 1) + 1);
    if (sub_10007AF1C(*(void *)(a1 + 472), v50) == 0xFFFF)
    {
      v5 -= 2LL;
      LOWORD(v48) = v4;
      goto LABEL_13;
    }

    sub_1000CC548(v50, v6, ((unint64_t)((char *)v9 - (char *)v6) >> 1) + 1);
    if (v47)
    {
      if (v50[0]) {
        uint64_t v20 = v46;
      }
      else {
        uint64_t v20 = 1;
      }
      if (!v50[0]) {
        goto LABEL_51;
      }
      int v44 = v20;
      uint64_t v21 = sub_1000CC52C((unint64_t)v50);
      if (v21 < 2) {
        goto LABEL_51;
      }
      uint64_t v22 = 0LL;
      uint64_t v45 = 2LL * v21 - 2;
      while (1)
      {
        uint64_t v23 = &v50[v22 / 2 + 1];
        unint64_t v24 = *v23;
        *uint64_t v23 = 0;
        int v25 = sub_10007AF1C(*(void *)(a1 + 424), v50);
        *uint64_t v23 = v24;
        if (v25 != 0xFFFF)
        {
          uint64_t v26 = v50[v22 / 2];
          v50[v22 / 2] = 0;
          unint64_t v27 = sub_10007AF1C(*(void *)(a1 + 440), &v50[v22 / 2 + 1]);
          v50[v22 / 2] = v26;
          if (v27 != 0xFFFF) {
            break;
          }
        }

        v22 += 2LL;
        int v46 = 1;
        if (v45 == v22) {
          goto LABEL_52;
        }
      }

      int v46 = v44;
LABEL_52:
      ++v47;
      __int16 v48 = 0;
      LOWORD(v49) = v4;
      uint64_t v6 = (__int16 *)v5;
      if (v5 >= v7) {
        goto LABEL_5;
      }
      continue;
    }

    break;
  }

  if ((int)sub_1000CC52C((unint64_t)v50) <= v43)
  {
LABEL_51:
    int v46 = 1;
    goto LABEL_52;
  }

  return 0LL;
}

  int v42 = sub_1000BE644(0xFFFFFFFF, 4, v40);
  uint64_t v43 = *(void *)(*(void *)(a1 + 144) + 56LL);
  if (v43)
  {
LABEL_15:
    int v44 = sub_1000BE644(-1431655765 * ((unint64_t)(v43 - *(void *)(a1 + 128)) >> 1), 4, v42);
    uint64_t v45 = *(void *)(*(void *)(a1 + 144) + 64LL);
    if (v45) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }

        sub_1000C8134((uint64_t)v43, a2, 8LL, v38, v39, v40, v41, v42);
        sub_1000C80FC(v43);
        sub_1000C0EF8(*(void *)(v8 + 8));
        sub_1000C0EF8(*(void *)(v8 + 16));
        sub_1000C0EF8(v8);
        sub_1000C0EF8(*((void *)v7 + 1));
        sub_1000C0EF8(*((void *)v7 + 2));
        sub_1000C0EF8((uint64_t)v7);
        return v26;
      }
    }

    else
    {
      int v37 = 0LL;
    }

    do
    {
      v35->i32[v37] = v37;
      ++v37;
    }

    while (v6 != v37);
    goto LABEL_26;
  }

  return v26;
}

    *(void *)(v3 + 32) = v28;
    *(_DWORD *)(v3 + 40) = v26;
    *(_DWORD *)(v3 + 44) = v26;
  }

  int v32 = *(__int16 *)(v3 + 84) + 1LL;
  uint64_t v33 = (void *)sub_1000C1074(16 * v32);
  if (v33)
  {
    unint64_t v34 = v33;
    j__memmove(v33, *((const void **)a1 + 6), 16 * (int)v32);
    *(void *)(v3 + 48) = v34;
    *(_DWORD *)(v3 + 80) = v32;
    *(void *)(v3 + 128) = 0LL;
    return v3;
  }

      int v32 = *(void *)(*v69 + ((v23 >> 5) & 0x7FFFFF8));
      if (*(__int16 *)(v32 + 8LL * v23) == -2)
      {
        uint64_t v33 = *(unsigned __int16 *)(v32 + 8LL * v23 + 2) == 0;
        unint64_t v24 = *v19;
        if (v21 >= *v19 && v33)
        {
LABEL_34:
          if (a6 != 0xFFFF)
          {
            uint64_t v35 = v11 + (v15 << 7);
            unint64_t v36 = v15;
            int16x8_t v79 = sub_1000BB868(v10, *(unsigned __int16 *)(v35 + 2LL * (v24 - 1) + 16), 0LL);
            uint64_t result = sub_1000BBBB0(v10, (uint64_t)&v79, 1u, a6);
            __int128 v15 = v36;
            uint64_t v11 = a2;
            *(_DWORD *)(v35 + 12) += result;
          }

          ++v17;
          uint64_t v12 = 1;
LABEL_5:
          uint64_t v14 = v11 + (v15 << 7);
          *(_DWORD *)(v14 + 12) -= *(__int16 *)(v14 + 124);
          *(_WORD *)(v14 + 124) = 0;
          goto LABEL_6;
        }
      }

    return a5;
  }

  if ((a4 & 1) == 0) {
    goto LABEL_12;
  }
  CountOfValue = CFBagGetCountOfValue(activityBag, (const void *)1);
  if (CountOfValue)
  {
    uint64_t v10 = CountOfValue;
    CFBagRemoveValue(self->_activityBag, (const void *)1);
    if (v10 == 1) {
      a5 &= ~1uLL;
    }
LABEL_12:
    if ((a4 & 2) == 0) {
      return a5;
    }
LABEL_13:
    uint64_t v11 = CFBagGetCountOfValue(self->_activityBag, (const void *)2);
    if (v11)
    {
      uint64_t v12 = v11;
      CFBagRemoveValue(self->_activityBag, (const void *)2);
      if (v12 == 1) {
        return a5 & 0xFFFFFFFFFFFFFFFDLL;
      }
      return a5;
    }

    uint64_t v19 = VSGetLogDefault(0LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      __int128 v15 = "#AudioSession active count went negative for output!\n";
      uint64_t v16 = buf;
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  uint64_t v17 = VSGetLogDefault(0LL);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v23 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "#AudioSession active count went negative for input!\n",  v23,  2u);
  }

  if ((a4 & 2) != 0) {
    goto LABEL_13;
  }
  return a5;
}

uint64_t sub_1000264E0(uint64_t a1, int a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 1;
  if (a4 >= 1)
  {
    if (a4 < 0x10)
    {
      uint64_t v5 = 0LL;
LABEL_7:
      int v12 = ~(_DWORD)v5 + a4;
      uint64_t v13 = (unsigned __int16 *)a3 + v5;
      uint64_t v14 = a4 - v5;
      do
      {
        unsigned __int16 v15 = *v13++;
        v17[v12--] = v15;
        --v14;
      }

      while (v14);
      return sub_100026308(a1, a2, v17, a4);
    }

    uint64_t v5 = a4 & 0x7FFFFFF0;
    uint64_t v6 = a3 + 1;
    uint64_t v7 = a4 & 0xFFFFFFF0;
    do
    {
      int16x8_t v8 = *v6;
      uint64_t v9 = &v17[v4];
      int8x16_t v10 = (int8x16_t)vrev64q_s16(v6[-1]);
      *(int8x16_t *)(v9 - 7) = vextq_s8(v10, v10, 8uLL);
      int8x16_t v11 = (int8x16_t)vrev64q_s16(v8);
      *(int8x16_t *)(v9 - 15) = vextq_s8(v11, v11, 8uLL);
      v6 += 2;
      v4 -= 16;
      v7 -= 16LL;
    }

    while (v7);
    if (v5 != a4) {
      goto LABEL_7;
    }
  }

  return sub_100026308(a1, a2, v17, a4);
}

uint64_t sub_1000265B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 192))();
}

uint64_t sub_1000265C0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, _DWORD *a7, uint64_t a8)
{
  LODWORD(v12) = a2;
  int v37 = 0;
  *a7 = 0x40000000;
  uint64_t v14 = (int)a3;
  uint64_t v15 = 8LL * (int)a3;
  uint64_t v23 = (void *)sub_1000CAF58(v15, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  size_t v34 = v14;
  uint64_t v35 = (void *)a8;
  if (!a8)
  {
    if ((int)v12 <= 0)
    {
      uint64_t v25 = 0LL;
      goto LABEL_26;
    }

    uint64_t v25 = 0LL;
    uint64_t v12 = v12;
    while (1)
    {
      int v29 = (_DWORD *)*a1;
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, void *, int *, void))(*a1 + 136LL))( *a1,  a3,  a4,  v23,  &v37,  0LL))
      {
        int v30 = v37;
        if (v37 >= *a7)
        {
          uint64_t v25 = 1LL;
        }

        else
        {
          *a7 = v37;
          *a5 = v29;
          if (*v29 == 3) {
            memcpy(a6, v23, v15);
          }
          uint64_t v25 = 1LL;
          if (!v30) {
            goto LABEL_26;
          }
        }
      }

      ++a1;
      if (!--v12) {
        goto LABEL_26;
      }
    }
  }

  unint64_t v24 = (void *)sub_1000CAF58(v14, v16, v17, v18, v19, v20, v21, v22);
  if ((int)v12 < 1)
  {
    uint64_t v25 = 0LL;
    goto LABEL_25;
  }

  size_t v32 = v15;
  uint64_t v25 = 0LL;
  uint64_t v26 = v12;
  while (1)
  {
    unint64_t v27 = (_DWORD *)*a1;
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void *, int *, void *))(*a1 + 136LL))( *a1,  a3,  a4,  v23,  &v37,  v24)) {
      goto LABEL_5;
    }
    int v28 = v37;
    if (v37 < *a7) {
      break;
    }
    uint64_t v25 = 1LL;
LABEL_5:
    ++a1;
    if (!--v26) {
      goto LABEL_11;
    }
  }

  *a7 = v37;
  *a5 = v27;
  if (*v27 == 3) {
    memcpy(a6, v23, v32);
  }
  memcpy(v35, v24, v34);
  uint64_t v25 = 1LL;
  if (v28) {
    goto LABEL_5;
  }
LABEL_11:
  uint64_t v15 = v32;
  if (!v35) {
    goto LABEL_26;
  }
LABEL_25:
  sub_1000CB038(v24, v34);
LABEL_26:
  sub_1000CB038(v23, v15);
  return v25;
}

uint64_t sub_1000267CC(_DWORD *a1)
{
  if (*a1 == 3) {
    return sub_10002A328((uint64_t)a1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000267E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

_DWORD *sub_1000267EC(_DWORD *result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    int v4 = (_DWORD **)result;
    uint64_t v5 = a2;
    do
    {
      uint64_t result = *v4;
      if (**v4 == 3) {
        uint64_t result = sub_1000285A8(result, a3);
      }
      ++v4;
      --v5;
    }

    while (v5);
  }

  return result;
}

uint64_t sub_10002684C(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 1LL;
  }
  uint64_t v3 = a2;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 88LL))();
    if (!(_DWORD)result) {
      break;
    }
    a1 += 8LL;
    if (!--v3) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_10002689C(uint64_t a1, int a2, _DWORD *a3)
{
  *a3 = 0;
  if (a2 < 1)
  {
    int v7 = 0;
LABEL_14:
    *a3 = v7;
    return 1LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    int v7 = 0;
    int v18 = 0;
    uint64_t v8 = a2;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8 * v6);
      if (*(_DWORD *)v9 != 3) {
        return 0LL;
      }
      uint64_t result = sub_10002BA84(a1, a2);
      if (!result) {
        return result;
      }
LABEL_3:
      if (++v6 == v8) {
        goto LABEL_14;
      }
    }

    uint64_t v16 = result;
    uint64_t v17 = 1LL;
    while (1)
    {
      uint64_t result = sub_1000333A0(v16, *(unsigned int *)(*(void *)(v9 + 272) + 4 * v17), &v18, v11, v12, v13, v14, v15);
      if (!(_DWORD)result) {
        break;
      }
      if (v18 > v7) {
        int v7 = v18;
      }
    }
  }

  return result;
}

uint64_t sub_100026994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 224))();
}

uint64_t sub_10002699C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 3) {
    return sub_10002A068(a1, a4);
  }
  if (a2 == 2) {
    return sub_1000269C4(a1, a3);
  }
  return 0LL;
}

uint64_t sub_1000269C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C1074(272LL);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  *(_OWORD *)(v4 + 4) = 0u;
  uint64_t v6 = (_OWORD *)(v4 + 4);
  *(void *)(v4 + 256) = a2;
  *(_OWORD *)(v4 + 20) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *(_OWORD *)(v4 + 52) = 0u;
  if (sub_1000BCE28(a1, (void *)(v4 + 4), 64, 1))
  {
    int v8 = sub_1000C8928((unsigned __int8 *)(v5 + 4), (unsigned __int8 *)(v5 + 4), 64, v7);
    *(_DWORD *)uint64_t v5 = 2;
    if (v8)
    {
      *(_OWORD *)(v5 + 36) = 0u;
      *(_OWORD *)(v5 + 52) = 0u;
      _OWORD *v6 = 0u;
      *(_OWORD *)(v5 + 20) = 0u;
      sub_1000C896C((_BYTE *)(v5 + 4), (char *)(v5 + 4), 64);
    }

    *(_DWORD *)(v5 + 68) = 0;
    *(_DWORD *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = sub_100026C44;
    *(void *)(v5 + 88) = sub_100026C54;
    *(void *)(v5 + 96) = sub_100026C5C;
    *(void *)(v5 + 104) = sub_100026C64;
    *(void *)(v5 + 112) = sub_100026C78;
    *(void *)(v5 + 120) = 0LL;
    *(void *)(v5 + 128) = sub_100026D94;
    *(void *)(v5 + 136) = sub_100026D9C;
    *(void *)(v5 + 144) = nullsub_2;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(void *)(v5 + 200) = sub_100026DF8;
    *(void *)(v5 + 208) = 0LL;
    *(void *)(v5 + 216) = 0LL;
    *(void *)(v5 + 224) = sub_100026E00;
    *(void *)(v5 + 232) = 0LL;
    *(void *)(v5 + 240) = 0LL;
    if (sub_1000BCD38(a1, (void *)(v5 + 264)))
    {
      *(_DWORD *)(v5 + 248) = 1;
      return v5;
    }
  }

  return 0LL;
}

uint64_t sub_100026B1C(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(a1 + 240))();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100026B30(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1000C1074(272LL);
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v7 = (_OWORD *)(v4 + 4);
    int v8 = sub_1000C8928("XWV", (unsigned __int8 *)(v4 + 4), 64, v5);
    *(_DWORD *)uint64_t v6 = 2;
    if (v8)
    {
      *(_OWORD *)(v6 + 36) = 0u;
      *(_OWORD *)(v6 + 52) = 0u;
      *uint64_t v7 = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      sub_1000C896C((_BYTE *)(v6 + 4), "XWV", 64);
    }

    *(_DWORD *)(v6 + 68) = 0;
    *(_DWORD *)(v6 + 72) = 0;
    *(void *)(v6 + 80) = sub_100026C44;
    *(void *)(v6 + 88) = sub_100026C54;
    *(void *)(v6 + 96) = sub_100026C5C;
    *(void *)(v6 + 104) = sub_100026C64;
    *(void *)(v6 + 112) = sub_100026C78;
    *(void *)(v6 + 120) = 0LL;
    *(void *)(v6 + 128) = sub_100026D94;
    *(void *)(v6 + 136) = sub_100026D9C;
    *(void *)(v6 + 144) = nullsub_2;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(void *)(v6 + 200) = sub_100026DF8;
    *(void *)(v6 + 208) = 0LL;
    *(void *)(v6 + 216) = 0LL;
    *(void *)(v6 + 224) = sub_100026E00;
    *(void *)(v6 + 232) = 0LL;
    *(void *)(v6 + 240) = 0LL;
    *(void *)(v6 + 256) = a1;
    *(_DWORD *)(v6 + 264) = a2;
    *(_DWORD *)(v6 + 248) = 1;
  }

  return v6;
}

uint64_t sub_100026C44(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 248) = 0;
    return sub_1000C0EF8(result);
  }

  return result;
}

uint64_t sub_100026C54()
{
  return 0LL;
}

uint64_t sub_100026C5C()
{
  return 1LL;
}

void sub_100026C64(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, __int16 a5)
{
  *(_WORD *)(a2 + 8) = a3;
  *(void *)a2 = (a4 >> 53) & 0x3FF;
  *(_WORD *)(a2 + 10) = a5;
}

BOOL sub_100026C78(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = ((unint64_t)*a1 << 53) | 1;
  *(_DWORD *)(a3 + 16) = 1;
  *(_WORD *)(a3 + 2) = 0;
  *(void *)(a3 + 24) = 0LL;
  unsigned int v6 = *((unsigned __int16 *)a1 + 5);
  uint64_t v7 = *(void *)(a2 + 256);
  if (v6 == 0xFFFF)
  {
    signed int v9 = sub_1000B3298(v7);
    signed int v12 = a1[1];
    uint64_t v11 = (signed int *)(a1 + 1);
    signed int v10 = v12;
    if (v12 > v9)
    {
LABEL_11:
      if (v10 <= v9) {
        goto LABEL_16;
      }
    }

    else
    {
      while (1)
      {
        BOOL v13 = sub_1000B3D00(*(void *)(a2 + 256), (unsigned __int16)v10);
        signed int v14 = *v11;
        if (v13) {
          break;
        }
        signed int v10 = v14 + 1;
        *uint64_t v11 = v14 + 1;
        if (v14 >= v9) {
          goto LABEL_11;
        }
      }

      signed int v10 = *v11;
      if (v14 <= v9) {
        goto LABEL_16;
      }
    }

    return 0LL;
  }

  BOOL result = sub_1000B3D00(v7, v6);
  if (!result) {
    return result;
  }
  if (!a1[1])
  {
    LOWORD(v10) = *((_WORD *)a1 + 5);
    uint64_t v11 = (signed int *)(a1 + 1);
LABEL_16:
    *(_WORD *)a3 = v10;
    ++*v11;
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_100026D94()
{
  return 1LL;
}

uint64_t sub_100026D9C(int a1, int a2, int a3, void *a4, _DWORD *a5, _BYTE *a6)
{
  if (a6)
  {
    bzero(a6, a2);
    *a6 = 1;
  }

  *a5 = 0;
  return 1LL;
}

uint64_t sub_100026DF8()
{
  return 1LL;
}

BOOL sub_100026E00(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  return sub_1000BDB78(a2, *(_DWORD *)(a1 + 264), v5);
}

uint64_t sub_100026E48(unsigned __int8 *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10 = sub_1000C1074(448LL);
  uint64_t v11 = v10;
  if (v10)
  {
    if (a3) {
      int v12 = a3 + 1;
    }
    else {
      int v12 = 0;
    }
    *(_DWORD *)(v10 + 264) = v12;
    *(void *)(v10 + 256) = a2;
    if (!sub_100027030(v10, a1)) {
      goto LABEL_20;
    }
    if (v12)
    {
      if (a4 > 0)
      {
        *(_DWORD *)(v11 + 376) = 1;
        uint64_t v13 = sub_1000C1074(4LL * v12);
        *(void *)(v11 + 272) = v13;
        if (v13)
        {
          signed int v14 = (uint64_t *)(v11 + 272);
          if (v12 >= 1)
          {
            uint64_t v15 = 0LL;
            do
            {
              *(_DWORD *)(*v14 + v15) = -1;
              v15 += 4LL;
            }

            while (4LL * v12 != v15);
          }

          *(_DWORD *)(v11 + 268) = 1;
          uint64_t v16 = sub_1000C1074(4LL * (v12 + 1));
          *(void *)(v11 + 288) = v16;
          if (v16)
          {
            uint64_t v17 = v12;
            int v18 = (uint64_t *)(v11 + 288);
            uint64_t v19 = sub_1000C1074(v17);
            *(void *)(v11 + 296) = v19;
            if (v19)
            {
              uint64_t v20 = v11 + 296;
              uint64_t v21 = sub_1000C1074(4LL * a4);
              *(void *)(v11 + 304) = v21;
              if (v21)
              {
                *(_DWORD *)(v11 + 368) = a4;
                *(_DWORD *)(v11 + 372) = 0;
                *(_DWORD *)(v11 + 336) = a5;
                if (!a5)
                {
LABEL_19:
                  **(_DWORD **)(v11 + 272) = 0;
                  **(_DWORD **)(v11 + 288) = 0;
                  *(_DWORD *)(*(void *)(v11 + 288) + 4LL) = 0;
                  **(_BYTE **)(v11 + 296) = 0;
                  *(_DWORD *)(v11 + 248) = 1;
                  return v11;
                }

                uint64_t v22 = a4;
                uint64_t v23 = v11 + 304;
                uint64_t v24 = sub_1000C1074(v22);
                *(void *)(v11 + 352) = v24;
                if (v24)
                {
                  uint64_t v25 = sub_1000C1074(v17);
                  *(void *)(v11 + 360) = v25;
                  if (v25) {
                    goto LABEL_19;
                  }
                  sub_1000C0EF8(*v14);
                  signed int v14 = (uint64_t *)(v11 + 288);
                  int v18 = (uint64_t *)(v11 + 296);
                  uint64_t v20 = v11 + 304;
                  uint64_t v23 = v11 + 352;
                }

                sub_1000C0EF8(*v14);
                signed int v14 = v18;
                int v18 = (uint64_t *)v20;
                uint64_t v20 = v23;
              }

              sub_1000C0EF8(*v14);
              signed int v14 = v18;
              int v18 = (uint64_t *)v20;
            }

            sub_1000C0EF8(*v14);
            signed int v14 = v18;
          }

          sub_1000C0EF8(*v14);
        }

        sub_1000271B0(v11);
        return 0LL;
      }

BOOL sub_100027030(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v4 = *(unsigned int *)(qword_1000FDCC0 + 1072);
    if ((_DWORD)v4)
    {
      BOOL result = sub_100033D94(*(void *)(a1 + 256));
      if (!result) {
        return result;
      }
      unsigned int v6 = sub_10002D21C;
      uint64_t v7 = sub_10002D060;
      if (!a2) {
        goto LABEL_5;
      }
LABEL_7:
      int v8 = sub_1000C8928(a2, (unsigned __int8 *)(a1 + 4), 64, v4);
      *(_DWORD *)a1 = 3;
      if (v8)
      {
        *(_OWORD *)(a1 + 36) = 0u;
        *(_OWORD *)(a1 + 52) = 0u;
        *(_OWORD *)(a1 + 4) = 0u;
        *(_OWORD *)(a1 + 20) = 0u;
        sub_1000C896C((_BYTE *)(a1 + 4), (char *)a2, 64);
      }

      goto LABEL_9;
    }
  }

  unsigned int v6 = sub_10002AF0C;
  uint64_t v7 = sub_10002D354;
  if (a2) {
    goto LABEL_7;
  }
LABEL_5:
  *(_DWORD *)a1 = 3;
LABEL_9:
  *(void *)(a1 + 68) = 1LL;
  *(void *)(a1 + 80) = sub_1000271B0;
  *(void *)(a1 + 88) = sub_10002D360;
  *(void *)(a1 + 96) = sub_10002D384;
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = sub_10002AF04;
  *(void *)(a1 + 128) = sub_10002D38C;
  *(void *)(a1 + 136) = sub_10002D638;
  *(void *)(a1 + 144) = nullsub_3;
  *(void *)(a1 + 152) = sub_10002D718;
  *(void *)(a1 + 160) = sub_10002D8F8;
  *(void *)(a1 + 168) = sub_10002B558;
  *(void *)(a1 + 176) = sub_10002D920;
  *(void *)(a1 + 184) = sub_10002DD90;
  *(void *)(a1 + 192) = sub_10002DDA8;
  *(void *)(a1 + 200) = sub_10002DE9C;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = sub_10002DF80;
  *(void *)(a1 + 232) = sub_10002E154;
  BOOL result = 1LL;
  *(void *)(a1 + 240) = 0LL;
  return result;
}

uint64_t sub_1000271B0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    *(_DWORD *)(result + 248) = 0;
    if (*(_DWORD *)(result + 376))
    {
      uint64_t v2 = *(void *)(result + 272);
      if (v2)
      {
        int v3 = *(_DWORD *)(result + 268);
        if (v3 > 2)
        {
          qsort( (void *)(v2 + 4),  (v3 - 1),  4uLL,  (int (__cdecl *)(const void *, const void *))sub_10002D050);
          int v3 = *(_DWORD *)(v1 + 268);
        }

        if (v3 >= 2)
        {
          unint64_t v4 = v3 + 1LL;
          do
          {
            uint64_t v5 = (v4 - 2);
            sub_100032FD8(*(uint64_t **)(v1 + 256), *(_DWORD *)(*(void *)(v1 + 272) + 4LL * v5));
            uint64_t v6 = *(void *)(v1 + 280);
            if (v6) {
              sub_100032FD8(*(uint64_t **)(v1 + 256), *(_DWORD *)(v6 + 4 * v5));
            }
            --v4;
          }

          while (v4 > 2);
        }

        uint64_t v7 = *(void *)(v1 + 328);
        if (v7)
        {
          uint64_t v8 = *(unsigned int *)(v1 + 268);
          if ((int)v8 >= 2)
          {
            do
            {
              uint64_t v10 = *(void *)(v1 + 328);
              uint64_t v11 = (v8 - 1);
              uint64_t v12 = v10 + (v11 << 6);
              sub_1000C0EF8(*(void *)v12);
              signed int v14 = (uint64_t *)(v12 + 8);
              uint64_t v13 = *(void *)(v12 + 8);
              if (v13)
              {
                if (*(int *)(v12 + 20) >= 1)
                {
                  uint64_t v15 = 0LL;
                  do
                    sub_1000C0EF8(*(void *)(*v14 + 8 * v15++));
                  while (v15 < *(int *)(v12 + 20));
                  uint64_t v13 = *v14;
                }

                sub_1000C0EF8(v13);
              }

              uint64_t v18 = *(void *)(v12 + 24);
              uint64_t v17 = (uint64_t *)(v12 + 24);
              uint64_t v16 = v18;
              if (v18)
              {
                uint64_t v19 = qword_1000FDCC0;
                if (qword_1000FDCC0)
                {
                  uint64_t v20 = 0LL;
                  while (1)
                  {
                    uint64_t v16 = *v17;
                    if (*(void *)(v19 + 4136) <= v20) {
                      break;
                    }
                    sub_1000C0EF8(*(void *)(v16 + 8 * v20++));
                    uint64_t v19 = qword_1000FDCC0;
                    if (!qword_1000FDCC0)
                    {
                      uint64_t v16 = *v17;
                      break;
                    }
                  }
                }

                sub_1000C0EF8(v16);
              }

              uint64_t v21 = v10 + (v11 << 6);
              sub_1000C0EF8(*(void *)(v21 + 32));
              uint64_t v23 = (uint64_t *)(v21 + 40);
              uint64_t v22 = *(void *)(v21 + 40);
              if (v22)
              {
                int v25 = *(_DWORD *)(v21 + 52);
                uint64_t v24 = (int *)(v21 + 52);
                if (v25 >= 1)
                {
                  uint64_t v26 = 0LL;
                  do
                    sub_1000C0EF8(*(void *)(*v23 + 8 * v26++));
                  while (v26 < *v24);
                  uint64_t v22 = *v23;
                }

                sub_1000C0EF8(v22);
              }
            }

            while (v8-- > 2);
            uint64_t v7 = *(void *)(v1 + 328);
          }

          sub_1000C0EF8(v7);
        }
      }

      sub_1000C0EF8(*(void *)(v1 + 352));
      sub_1000C0EF8(*(void *)(v1 + 360));
      sub_1000C0EF8(*(void *)(v1 + 304));
      sub_1000C0EF8(*(void *)(v1 + 296));
      sub_1000C0EF8(*(void *)(v1 + 288));
      sub_1000C0EF8(*(void *)(v1 + 272));
      sub_1000C0EF8(*(void *)(v1 + 280));
      sub_1000C0EF8(*(void *)(v1 + 400));
      sub_1000C0EF8(*(void *)(v1 + 408));
      sub_1000C0EF8(*(void *)(v1 + 416));
      sub_1000C0EF8(*(void *)(v1 + 432));
      sub_1000C0EF8(*(void *)(v1 + 320));
    }

    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100027400(uint64_t a1, signed int a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 256);
  if (*(_DWORD *)(v6 + 152) <= a2)
  {
    uint64_t v9 = *(int *)(v6 + 32) + 1LL;
    uint64_t v10 = (void *)sub_1000C1074(4 * v9);
    j__memmove(v10, *(const void **)(v6 + 144), 4LL * *(int *)(v6 + 152));
    sub_1000C0EF8(*(void *)(v6 + 144));
    *(void *)(v6 + 144) = v10;
    *(_DWORD *)(v6 + 152) = v9;
    int v7 = *((_DWORD *)v10 + a2);
    *a3 = v7;
    uint64_t result = 1LL;
    if (!a2) {
      return result;
    }
  }

  else
  {
    int v7 = *(_DWORD *)(*(void *)(v6 + 144) + 4LL * a2);
    *a3 = v7;
    uint64_t result = 1LL;
    if (!a2) {
      return result;
    }
  }

  if (!v7)
  {
    int v11 = *(_DWORD *)(a1 + 268);
    if (v11 == *(_DWORD *)(a1 + 264))
    {
      uint64_t result = sub_100027558(a1);
      if (!(_DWORD)result) {
        return result;
      }
      int v11 = *(_DWORD *)(a1 + 268);
    }

    *(_DWORD *)(*(void *)(a1 + 272) + 4LL * v11) = a2;
    int v12 = *(_DWORD *)(a1 + 268);
    *a3 = v12;
    *(_DWORD *)(*(void *)(v6 + 144) + 4LL * a2) = v12;
    uint64_t v13 = (_DWORD *)(*(void *)(a1 + 288) + 4LL * *(int *)(a1 + 268));
    v13[1] = *v13;
    ++*(_DWORD *)(a1 + 268);
    sub_100031AA0(v6, a2);
    uint64_t v15 = 0LL;
    int v14 = 0;
    sub_10003366C(*(void *)(a1 + 256), a2, &v15, &v14);
    if (v15) {
      *(_DWORD *)(a1 + 340) = 1;
    }
    return 1LL;
  }

  return result;
}

uint64_t sub_100027558(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 376)) {
    return 0LL;
  }
  uint64_t v2 = *(int *)(a1 + 264);
  uint64_t v3 = 8 * v2;
  uint64_t result = sub_1000C1074(8 * v2);
  if (result)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = 2 * v2;
    uint64_t v7 = sub_1000C1074(4LL * (int)(v6 | 1));
    if (!v7)
    {
      uint64_t v12 = (uint64_t)v5;
      goto LABEL_20;
    }

    uint64_t v8 = (void *)v7;
    uint64_t v9 = sub_1000C1074(v6);
    if (!v9)
    {
      sub_1000C0EF8((uint64_t)v5);
      uint64_t v12 = (uint64_t)v8;
      goto LABEL_20;
    }

    uint64_t v10 = (void *)v9;
    if (*(void *)(a1 + 280))
    {
      int v11 = (void *)sub_1000C1074(v3);
      if (!v11)
      {
        sub_1000C0EF8((uint64_t)v5);
        sub_1000C0EF8((uint64_t)v8);
        uint64_t v12 = (uint64_t)v10;
LABEL_20:
        sub_1000C0EF8(v12);
        return 0LL;
      }
    }

    else
    {
      int v11 = 0LL;
    }

    if (*(void *)(a1 + 328))
    {
      uint64_t v13 = (void *)sub_1000C1074(v6 << 6);
      if (!v13)
      {
        sub_1000C0EF8((uint64_t)v5);
        sub_1000C0EF8((uint64_t)v8);
        sub_1000C0EF8((uint64_t)v10);
        uint64_t v12 = (uint64_t)v11;
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    if (*(void *)(a1 + 360))
    {
      int v14 = (void *)sub_1000C1074(v6);
      if (!v14)
      {
        sub_1000C0EF8((uint64_t)v5);
        sub_1000C0EF8((uint64_t)v8);
        sub_1000C0EF8((uint64_t)v10);
        sub_1000C0EF8((uint64_t)v11);
        uint64_t v12 = (uint64_t)v13;
        goto LABEL_20;
      }
    }

    else
    {
      int v14 = 0LL;
    }

    j__memmove(v5, *(const void **)(a1 + 272), 4LL * *(int *)(a1 + 268));
    sub_1000C0EF8(*(void *)(a1 + 272));
    *(void *)(a1 + 272) = v5;
    j__memmove(v8, *(const void **)(a1 + 288), 4 * *(_DWORD *)(a1 + 268) + 4);
    sub_1000C0EF8(*(void *)(a1 + 288));
    *(void *)(a1 + 288) = v8;
    j__memmove(v10, *(const void **)(a1 + 296), *(int *)(a1 + 268));
    sub_1000C0EF8(*(void *)(a1 + 296));
    *(void *)(a1 + 296) = v10;
    uint64_t v15 = *(const void **)(a1 + 280);
    if (v15)
    {
      j__memmove(v11, v15, 4LL * *(int *)(a1 + 268));
      sub_1000C0EF8(*(void *)(a1 + 280));
      *(void *)(a1 + 280) = v11;
    }

    uint64_t v16 = *(const void **)(a1 + 328);
    if (v16)
    {
      j__memmove(v13, v16, (uint64_t)*(int *)(a1 + 268) << 6);
      sub_1000C0EF8(*(void *)(a1 + 328));
      *(void *)(a1 + 328) = v13;
    }

    uint64_t v17 = *(const void **)(a1 + 360);
    if (v17)
    {
      j__memmove(v14, v17, *(int *)(a1 + 268));
      sub_1000C0EF8(*(void *)(a1 + 360));
      *(void *)(a1 + 360) = v14;
    }

    *(_DWORD *)(a1 + 264) = v6;
    return 1LL;
  }

  return result;
}

uint64_t sub_1000277AC(uint64_t a1, int a2)
{
  uint64_t v4 = 1LL;
  while (1)
  {
    uint64_t v5 = sub_100033278(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v4));
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 268);
    }

LABEL_3:
  }

  uint64_t v7 = 4 * v6;
  uint64_t v8 = 4LL;
  while (*(_DWORD *)(*(void *)(v5 + 280) + v8) != a2)
  {
    v8 += 4LL;
    if (v7 == v8) {
      goto LABEL_3;
    }
  }

  return *(unsigned int *)(*(void *)(v5 + 272) + v8);
}

  sub_10003991C(*(void *)(a1 + 536));
  uint64_t result = 0LL;
LABEL_4:
  int v11 = (_DWORD *)(a1 + 520);
LABEL_5:
  *int v11 = 1;
  return result;
}

    sub_1000CB038((void *)v24, 1096LL);
    uint64_t v9 = v46;
    uint64_t v8 = v45;
    uint64_t v12 = v42;
    uint64_t v17 = v47;
LABEL_4:
    if (++v13 == v12) {
      goto LABEL_43;
    }
    int v14 = *(void *)(a1 + 9032);
LABEL_6:
    uint64_t v15 = *(void *)(v14 + 8LL * (v13 >> 8)) + 32LL * v13;
  }

  if (v16 != v13)
  {
    ++v13;
    goto LABEL_6;
  }

      sub_1000CF924();
      uint64_t v9 = v74;
LABEL_4:
      int v25 = v27 + 1;
      uint64_t v24 = (unsigned __int16)(v27 + 1);
      uint64_t v23 = *(_DWORD *)(v12 + 1072);
    }

    while (v23 > v24);
  }

  sub_1000BF344(v78, 1.0 / (double)v72);
  sub_1000CB038(0LL, v73);
  sub_1000CB038(v22, v73);
  return sub_1000CB038(v14, v73);
}

      *uint64_t v4 = -1;
    }
  }

  return result;
}

      ++v5;
      a2 = v9;
    }

    while (v5 != v6);
  }

  return result;
}

      uint64_t v21 = 0LL;
      LODWORD(v22) = 0;
      int v87 = a4 + 8;
      unsigned int v88 = a5;
      int v91 = -1;
      uint64_t v23 = v20;
      break;
    default:
      uint64_t result = 0LL;
      *a5 = 0;
      *a6 = 0;
      return result;
  }

  while (1)
  {
    while (1)
    {
      uint64_t v24 = *(unsigned __int16 *)(a2 + 2 * v21);
      BOOL v95 = 0;
      ++*a6;
      LOWORD(v95) = v24;
      if (a3 != 6 || v24 != 94) {
        break;
      }
      int v91 = v22;
      if (++v21 == v23)
      {
LABEL_49:
        LODWORD(v94) = v22;
        a4[(int)v22] = 0;
        if ((_DWORD)v22 != 1) {
          goto LABEL_50;
        }
        goto LABEL_94;
      }
    }

    int v25 = sub_10007AF1C(*(void *)(a1 + 208), &v95);
    if (v25 == 0xFFFF)
    {
      if (!*(_DWORD *)(a1 + 244) || sub_1000CB108(v24, 0) != 9)
      {
LABEL_27:
        uint64_t v26 = 0;
        goto LABEL_28;
      }

      int16x8_t v94 = 0LL;
      unint64_t v93 = 0;
      sub_10007A9E8( *(void *)(a1 + 224),  (unsigned __int16)(*(_WORD *)(a1 + 248) + (unsigned __int16)(v24 + 21504) / 0x24Cu),  &v94,  &v93);
      uint64_t v31 = v93;
      if (v93 >= 1)
      {
        size_t v32 = v94;
        uint64_t v22 = (int)v22;
        if (v93 < 0x10 || (uint64_t v33 = (int)v22, (unint64_t)((char *)&a4[v33] - (char *)v94) < 0x20))
        {
          size_t v34 = 0LL;
LABEL_22:
          uint64_t v35 = &v32[v34];
          unint64_t v36 = v31 - v34;
          int v37 = v22;
          do
          {
            uint64_t v38 = *v35++;
            LODWORD(v22) = v37 + 1;
            a4[v37++] = v38;
            --v36;
          }

          while (v36);
          goto LABEL_24;
        }

        size_t v34 = v93 & 0xFFFFFFF0;
        uint64_t v22 = v34 + (int)v22;
        uint64_t v43 = (__int128 *)(v94 + 8);
        int v44 = &v87[v33];
        uint64_t v45 = v34;
        do
        {
          int v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *int v44 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 16LL;
        }

        while (v45);
        if (v34 != v31) {
          goto LABEL_22;
        }
      }

uint64_t sub_10002785C(uint64_t a1, int a2, int a3, int a4)
{
  if (!*(_DWORD *)(a1 + 376)) {
    return 0LL;
  }
  if (!a3)
  {
    if (!a2) {
      return 0LL;
    }
    uint64_t v20 = *(void *)(a1 + 296);
    if (*(_BYTE *)(v20 + a2))
    {
      if (!*(_DWORD *)(a1 + 336)) {
        return 1LL;
      }
    }

    else
    {
      uint64_t result = 1LL;
      *(_BYTE *)(v20 + a2) = 1;
      if (!*(_DWORD *)(a1 + 336)) {
        return result;
      }
    }

    *(_BYTE *)(*(void *)(a1 + 360) + a2) = a4;
    return 1LL;
  }

  uint64_t v8 = (_DWORD *)(*(void *)(a1 + 288) + 4LL * a2);
  LODWORD(v10) = *v8;
  int v9 = v8[1];
  int v11 = v10;
  int v12 = v9 - v10;
  if (v9 > (int)v10)
  {
    uint64_t v10 = (int)v10;
    while (*(_DWORD *)(*(void *)(a1 + 304) + 4 * v10) != a3)
    {
      ++v10;
      if (!--v12)
      {
        int v11 = v9;
        goto LABEL_9;
      }
    }

    return !*(_DWORD *)(a1 + 336) || *(unsigned __int8 *)(*(void *)(a1 + 352) + v10) == a4;
  }

LABEL_9:
  int v13 = *(_DWORD *)(a1 + 372);
  if (v13 != *(_DWORD *)(a1 + 368))
  {
    uint64_t v16 = *(char **)(a1 + 304);
    goto LABEL_23;
  }

  uint64_t v14 = v13;
  uint64_t result = sub_1000C1074(8LL * v13);
  if (result)
  {
    uint64_t v16 = (char *)result;
    uint64_t v17 = 2 * v14;
    if (!*(void *)(a1 + 352))
    {
LABEL_14:
      j__memmove(v16, *(const void **)(a1 + 304), 4LL * *(int *)(a1 + 372));
      sub_1000C0EF8(*(void *)(a1 + 304));
      *(void *)(a1 + 304) = v16;
      *(_DWORD *)(a1 + 368) = v17;
      int v13 = *(_DWORD *)(a1 + 372);
LABEL_23:
      j__memmove(&v16[4 * v11 + 4], &v16[4 * v11], 4LL * (v13 - v11));
      *(_DWORD *)(*(void *)(a1 + 304) + 4LL * v11) = a3;
      if (*(_DWORD *)(a1 + 336))
      {
        j__memmove( (void *)(*(void *)(a1 + 352) + v11 + 1LL),  (const void *)(*(void *)(a1 + 352) + v11),  *(int *)(a1 + 372) - (uint64_t)v11);
        *(_BYTE *)(*(void *)(a1 + 352) + v11) = a4;
      }

      ++*(_DWORD *)(a1 + 372);
      if (*(_DWORD *)(a1 + 268) > a2)
      {
        uint64_t v21 = a2;
        do
          ++*(_DWORD *)(*(void *)(a1 + 288) + 4 * v21++ + 4);
        while (v21 < *(int *)(a1 + 268));
      }

      return 1LL;
    }

    uint64_t v18 = (void *)sub_1000C1074(v17);
    if (v18)
    {
      uint64_t v19 = v18;
      j__memmove(v18, *(const void **)(a1 + 352), *(int *)(a1 + 372));
      sub_1000C0EF8(*(void *)(a1 + 352));
      *(void *)(a1 + 352) = v19;
      goto LABEL_14;
    }

    sub_1000C0EF8((uint64_t)v16);
    return 0LL;
  }

  return result;
}

    if ((_DWORD)v4 == (_DWORD)v3) {
      uint64_t v5 = -1;
    }
    else {
      uint64_t v5 = v4;
    }
    if (a2) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  if ((_DWORD)v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (a2)
  {
LABEL_13:
    if ((int)v3 >= 1)
    {
      if (a3)
      {
        uint64_t v6 = 0LL;
        uint64_t v7 = 0LL;
        do
        {
          uint64_t v8 = *(void *)(a1 + 288);
          int v9 = *(int *)(v8 + 4 * v6);
          uint64_t v10 = v6 + 1;
          int v11 = (*(_DWORD *)(v8 + 4 * (v6 + 1)) - v9);
          if ((int)v11 >= 1)
          {
            int v12 = (int *)(*(void *)(a1 + 304) + 4 * v9);
            while (1)
            {
              int v13 = *v12++;
              if (v13 == v5) {
                break;
              }
              if (!--v11) {
                goto LABEL_17;
              }
            }

            *(_DWORD *)(a3 + 4LL * (int)v7) = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v6);
            uint64_t v7 = (v7 + 1);
            LODWORD(v3) = *(_DWORD *)(a1 + 268);
          }

  int v28 = sub_10003BE3C( *(void *)(a1 + 376),  a4,  a2,  (uint64_t)v14,  *(unsigned int *)(a1 + 460),  a1 + 456,  (uint64_t)v24,  a5);
  sub_1000CB038(v24, v23);
  sub_1000CB038(v14, 2LL * (int)a2);
  return v28;
}

  int v46 = 0;
  uint64_t v17 = (2 * v9) | 1;
  uint64_t v18 = v17;
  int v44 = 4LL * v17;
  uint64_t v19 = (unsigned int *)sub_1000CAF58(v44, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  unint64_t v27 = (_BYTE *)sub_1000CAF58(v17, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v43 = 2LL * v17;
  uint64_t v35 = (int16x8_t *)sub_1000CAF58(v43, v28, v29, v30, v31, v32, v33, v34);
  if (v9 != 1)
  {
    unint64_t v36 = v19;
    int v39 = sub_10003A264(a1, v9, v17, (uint64_t)a2, v19, v35, (uint64_t)v27, a4, &v46);
    goto LABEL_16;
  }

  unint64_t v36 = v19;
  if (sub_1000B3C5C(*(uint64_t **)(a1 + 376), *a2) != 1)
  {
    int v39 = sub_10003A264(a1, 1, v17, (uint64_t)a2, v19, v35, (uint64_t)v27, a4, &v46);
LABEL_16:
    uint64_t v40 = v39;
    int v37 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (!v40) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  sub_1000B39A4(*(void *)(a1 + 376), *a2, v35, 1);
  *unint64_t v27 = 0;
  int v46 = 1;
  int v37 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
LABEL_17:
  else {
    uint64_t v40 = 0;
  }
LABEL_20:
  sub_1000A2820(*(void *)(a1 + 496));
  sub_1000A2820(*(void *)(a1 + 504));
  sub_1000B2C9C(a4);
  if (v40)
  {
    uint64_t v41 = sub_100004624(*(void *)(a1 + 384))
       && qword_1000FDCC0
       && *(_DWORD *)(qword_1000FDCC0 + 1480) != 0;
    int v37 = sub_10003A940(a1, v46, (unsigned __int16 *)v35, v27, a4, v41, &v45);
    if (v37 != 3) {
      sub_1000A2800(*(void *)(a1 + 504), *(void *)(a1 + 496));
    }
  }

  sub_1000CB038(v35, v43);
  sub_1000CB038(v27, v18);
  sub_1000CB038(v36, v44);
  if (v37 != 3 && v40) {
    return *(_DWORD *)(*(void *)(a1 + 504) + 68LL) != 0x40000000;
  }
  return 0LL;
}

          int v9 = v11 + 1;
        }
      }
    }

    uint64_t v16 = result[v9 >> 8] + 24LL * v9;
LABEL_23:
    int v30 = *(unsigned int *)(a1 + 608);
    if (v4 != ((_DWORD)v30 << 8) - 1)
    {
      if (v4 > v9)
      {
        sub_1000C1CCC(result, v30, 256, 24, v9, v4 - v9, v9 + 1);
        uint64_t result = *(uint64_t **)(a1 + 600);
        if (result) {
          uint64_t result = sub_1000C1CCC(result, *(unsigned int *)(a1 + 608), 256, 1, v9, v4 - v9, v9 + 1);
        }
        uint64_t v16 = *(void *)(*(void *)(a1 + 592) + 8LL * (v9 >> 8)) + 24LL * v9;
      }

      uint64_t v31 = *a2;
      *(void *)(v16 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v16 = v31;
      *(_DWORD *)(a1 + 612) = v4 + 1;
    }

    return result;
  }

  if (v4 >= 1)
  {
    do
    {
      uint64_t v17 = v9 + v6;
      if (v9 + v6 < 0 != __OFADD__(v9, v6)) {
        ++v17;
      }
      uint64_t v18 = v17 >> 1;
      else {
        uint64_t v6 = v18 - 1;
      }
    }

    while (v9 <= v6);
  }

  uint64_t v19 = result[v9 >> 8];
  uint64_t v16 = v19 + 24LL * v9;
  uint64_t v20 = v19 + 24LL * v9;
  uint64_t v23 = *(__int16 *)(v20 + 16);
  uint64_t v22 = (_WORD *)(v20 + 16);
  uint64_t v21 = v23;
  uint64_t v24 = *((_WORD *)a2 + 8);
  int v25 = v23 - v24;
  if (v25 < 1)
  {
    int v25 = -v25;
    uint64_t v26 = v24 - *(_WORD *)(a1 + 9048);
    unint64_t v27 = *(_DWORD *)(v19 + 24LL * v9 + 8);
    int v29 = *((_DWORD *)a2 + 2);
    if (v29 == v27) {
      return result;
    }
  }

  else
  {
    uint64_t v26 = v21 - *(_WORD *)(a1 + 9048);
    unint64_t v27 = *((_DWORD *)a2 + 2);
    int v28 = v19 + 24LL * v9;
    int v29 = *(_DWORD *)(v28 + 8);
    *uint64_t v22 = v24;
    *(_DWORD *)(v28 + 8) = *((_DWORD *)a2 + 2);
    if (v29 == v27) {
      return result;
    }
  }

  if (*(_DWORD *)(a1 + 9008))
  {
    uint64_t v40 = *(uint64_t **)(a1 + 9016);
    uint64_t v41 = v25;
    int v42 = v26;
    return sub_100024188(v40, v29, v27, v41, v42);
  }

  return result;
}

  uint64_t v24 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
  int v25 = (__int16)v88;
  int v28 = *(__int16 *)(v19 + 20);
  unint64_t v27 = (signed __int16 *)(v19 + 20);
  uint64_t v26 = v28;
  if ((__int16)v88 < v28)
  {
    *unint64_t v27 = v88;
    *(_DWORD *)(v17 + 32 * v13 + 8) = HIDWORD(v88);
    uint64_t v26 = v25;
  }

  if (v26 <= (__int16)v18[43])
  {
    int v29 = *v24;
    int v30 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v29);
    if (v30 == 0x4000)
    {
      LOWORD(v30) = sub_100015BC0(*(void *)(a1 + 384), v29);
      LOWORD(v26) = *v27;
    }

    uint64_t v31 = v30 - v18[41] + v26;
    *unint64_t v27 = v31;
    size_t v32 = v17 + 32 * v13;
    *(_WORD *)(v32 + 24) = v31;
    if (v31 < (__int16)v18[36])
    {
      v18[36] = v31;
      v18[38] = *(_WORD *)(v32 + 18);
      v18[104] = *v20;
    }
  }

  else
  {
    *(_WORD *)(v17 + 32 * v13 + 24) = 0x4000;
    *unint64_t v27 = 0x4000;
  }

  uint64_t v7 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  LODWORD(v24) = 0;
  HIDWORD(v24) = v7;
  uint64_t v8 = *(void *)(a1 + 592);
  int v9 = -1;
  do
  {
    uint64_t v10 = *(void *)(v8 + 8LL * (++v9 >> 8));
    int v11 = v10 + 24LL * v9;
    uint64_t v22 = v11;
  }

  while (*(_WORD *)(v11 + 16) == 0x4000);
  uint64_t v23 = v9;
  int v12 = *(void *)(a1 + 9024);
  int v13 = *(void *)(v12 + 8LL * (v7 >> 8)) + 48LL * v7;
  uint64_t v14 = *(unsigned __int16 *)(v10 + 24LL * v9 + 14);
  uint64_t v15 = *(_DWORD *)(a1 + 620);
  uint64_t v16 = *(unsigned __int16 *)(v13 + 32);
  if (v15 >= v14 || v15 >= v16)
  {
    do
    {
      if ((unsigned __int16)v14 < (unsigned __int16)v16
        || (unsigned __int16)v14 == (unsigned __int16)v16
        && (*(void *)v11 & 0x7FFFFFFFFFFFFFFFuLL) < (*(void *)v13 & 0x7FFFFFFFFFFFFFFFuLL))
      {
        uint64_t result = sub_100072588(a1, (unsigned __int16)v14, v11, v9, v7, &v24);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, void, uint64_t))(a1 + 536))( a1,  (char *)&v24 + 4,  &v24,  (unsigned __int16)v14,  v11);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
        if (!(_DWORD)result) {
          goto LABEL_21;
        }
      }

      uint64_t v18 = *(void *)(a1 + 592);
      do
      {
        ++v9;
        int v11 = *(void *)(v18 + 8LL * (v9 >> 8)) + 24LL * v9;
        uint64_t v22 = v11;
      }

      while (*(_WORD *)(v11 + 16) == 0x4000);
LABEL_21:
      uint64_t v7 = HIDWORD(v24);
      int v12 = *(void *)(a1 + 9024);
      int v13 = *(void *)(v12 + (((unint64_t)HIDWORD(v24) >> 5) & 0x7FFFFF8)) + 48LL * BYTE4(v24);
      uint64_t v14 = *(unsigned __int16 *)(v11 + 14);
      uint64_t v19 = *(_DWORD *)(a1 + 620);
      uint64_t v16 = *(unsigned __int16 *)(v13 + 32);
    }

    while (v19 >= v14 || v19 >= v16);
  }

  uint64_t v23 = v9;
  if ((_WORD)v14 != 0xFFFF) {
    goto LABEL_32;
  }
LABEL_31:
  if (*(__int16 *)(v13 + 32) == -1)
  {
    uint64_t v21 = *(void *)(v12 + (((unint64_t)v24 >> 5) & 0x7FFFFF8)) + 48LL * v24;
    *(_WORD *)(v21 + 32) = -1;
    *(void *)uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a1 + 9044) = v24 + 1;
  }

  else
  {
LABEL_32:
    while (1)
    {
      uint64_t result = sub_100072790(a1, (_DWORD *)&v24 + 1, (unsigned int *)&v24, &v22, (int *)&v23);
      if (*(_DWORD *)(a1 + 552) == 3) {
        break;
      }
      int v12 = *(void *)(a1 + 9024);
      int v13 = *(void *)(v12 + (((unint64_t)HIDWORD(v24) >> 5) & 0x7FFFFF8)) + 48LL * BYTE4(v24);
      if (*(_WORD *)(v22 + 14) == 0xFFFF) {
        goto LABEL_31;
      }
    }
  }

  return result;
}

      sub_1000CF924();
      uint64_t v15 = v110;
      uint64_t v19 = v109;
LABEL_10:
      uint64_t v18 = v24 + 1;
      uint64_t v17 = (unsigned __int16)(v24 + 1);
      uint64_t v16 = *(_DWORD *)(a1 + 1072);
    }

    while (v16 > v17);
  }

  sub_1000BF344((uint64_t)a6, 1.0 / (double)v116);
  sub_1000CB038(0LL, v108);
  return sub_1000CB038(v13, v108);
}

    unsigned int v162 = v15;
    if ((v166 & 0x200000000LL) == 0)
    {
      HIDWORD(v171) = 1;
      if (v39 < 1)
      {
LABEL_125:
        sub_1000CB038(v38, *(int *)(v163 + 512) + 1LL);
        sub_1000CB038(v161, (4LL * *(int *)(v163 + 516)) | 1);
        sub_1000CB038(v23, *(int *)(v163 + 516) + 1LL);
        sub_1000CB038(v162, *(int *)(v163 + 512) + 1LL);
        return HIDWORD(v171);
      }

      uint64_t v45 = v166;
      int v46 = v164;
      int v47 = (unint64_t)v165;
      __int16 v48 = v10 + 376;
      if (*(__int16 *)(v10 + 752) == -1)
      {
        LODWORD(v49) = 0;
        uint64_t v50 = *(_DWORD *)(v10 + 40);
        if (v50 <= 0) {
          goto LABEL_74;
        }
      }

      else
      {
        if ((_DWORD)v166)
        {
          uint64_t v45 = v166 - 1;
          int v47 = (unint64_t)(v165 + 1);
          LODWORD(v49) = *v165;
          uint64_t v50 = *(_DWORD *)(v10 + 40);
          if (v50 > 0) {
            goto LABEL_14;
          }
LABEL_74:
          uint64_t v158 = v49;
          int v108 = a5;
          if (a5)
          {
            int v109 = -1;
LABEL_104:
            *int v108 = v109;
          }

  uint64_t v22 = *(_DWORD *)(a1 + 48);
  uint64_t v23 = v22 - 1;
  uint64_t v194 = a6;
  uint64_t v195 = a5;
  uint64_t v24 = 0;
  if (v22 >= 1)
  {
    do
    {
      int v25 = v24 + v23;
      if (v24 + v23 < 0 != __OFADD__(v24, v23)) {
        ++v25;
      }
      uint64_t v26 = v25 >> 1;
      else {
        uint64_t v24 = v26 + 1;
      }
    }

    while (v24 <= v23);
  }

  if (v24 >= v22
    || (unint64_t v27 = v24 >> 8,
        int v28 = *(void *)(*(void *)(a1 + 32) + 8LL * v27),
        *(_DWORD *)(v28 + 12LL * v24 + 8) != (_DWORD)a2))
  {
    int v37 = *(_DWORD *)(a1 + 48);
    if (v37 > v24)
    {
      do
      {
        uint64_t v38 = v37 - 1;
        int v39 = *(void *)(a1 + 32);
        uint64_t v40 = *(void *)(v39 + 8LL * ((v37 - 1) >> 8)) + 12LL * (v37 - 1);
        uint64_t v41 = *(void *)(v39 + 8LL * (v37 >> 8)) + 12LL * v37;
        int v42 = *(void *)v40;
        *(_DWORD *)(v41 + 8) = *(_DWORD *)(v40 + 8);
        *(void *)uint64_t v41 = v42;
        int v37 = v38;
      }

      while (v38 > v24);
    }

    uint64_t v43 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v24 >> 8)) + 12LL * v24);
    v43[2] = a2;
    int v44 = *(_DWORD *)(a1 + 136);
    *uint64_t v43 = -1;
    v43[1] = v44;
    uint64_t v45 = v43 + 1;
    int v46 = *(_DWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 20) && v46 > v24)
    {
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * (v46 >> 8)) + v46) = *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * ((v46 - 1) >> 8)) + (v46 - 1));
        --v46;
      }

      while (v46 > v24);
      int v46 = *(_DWORD *)(a1 + 48);
      if (!*(void *)(a1 + 208)) {
        goto LABEL_34;
      }
    }

    else if (!*(void *)(a1 + 208))
    {
      goto LABEL_34;
    }

    if (v46 > v24)
    {
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * (v46 >> 8)) + v46) = *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * ((v46 - 1) >> 8)) + (v46 - 1));
        --v46;
      }

      while (v46 > v24);
      int v46 = *(_DWORD *)(a1 + 48);
      if (v46 > v24)
      {
        do
        {
LABEL_35:
          *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * (v46 >> 8)) + v46) = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * ((v46 - 1) >> 8)) + (v46 - 1));
          --v46;
        }

        while (v46 > v24);
        int v46 = *(_DWORD *)(a1 + 48);
        if (v46 <= v24) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }

    uint64_t v18 = off_1000F9ED0[++v17];
  }

  while (v17 != 8);
  if ((int)a2 >= 1)
  {
    v149 = (char *)sub_1000CAFC0(4LL * a2, v20, v21, v22, v23, v24, v25, v26);
    int v141 = 4LL * a2;
    __int16 v48 = (char *)sub_1000CAFC0(v141, v34, v35, v36, v37, v38, v39, v40);
    if (a5 >= 1) {
      memset(a6, 255, 4LL * a5);
    }
    float32x4x3_t v142 = a5;
    int v140 = (v13 - 1);
    if (v13 >= 1)
    {
      uint64_t v49 = v13;
      uint64_t v50 = 0LL;
      unsigned int v51 = 0;
      float32x4x2_t v144 = 0;
      unsigned int v52 = 0;
      char v53 = 0;
      int v54 = 0;
      int v55 = v49;
      uint64_t v56 = 0xFFFFFFFFLL;
      uint64_t v57 = v149;
      unsigned int v58 = a2;
      unsigned int v59 = a2;
      uint32x4_t v146 = v49;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v54 < v58)
            {
              uint64_t v63 = v52 > 29 || (int)v56 < 0;
              uint64_t v64 = v54;
              if (v63)
              {
                uint64_t v65 = (int *)(a4 + 4LL * v54);
                unsigned int v66 = (unsigned int *)&v57[4 * v54];
                unsigned int v67 = &v48[4 * v54];
                int v68 = v59 - v54;
                while (1)
                {
                  uint64_t v69 = *v65++;
                  if (v50 < v69) {
                    break;
                  }
                  *v66++ = v53;
                  *(_DWORD *)unsigned int v67 = -1;
                  v67 += 4;
                  ++v54;
                  if (!--v68)
                  {
LABEL_77:
                    int v54 = v59;
                    break;
                  }
                }
              }

              else
              {
                while (v50 >= *(int *)(a4 + 4 * v64))
                {
                  int v70 = 4 * v64;
                  *(_DWORD *)&v57[v70] = v53;
                  *(_DWORD *)&v48[v70] = v52;
                  if (v59 == ++v64) {
                    goto LABEL_77;
                  }
                }

                int v54 = v64;
              }
            }

            if ((v56 & 0x80000000) != 0) {
              break;
            }
            if (v54 <= v51) {
              uint64_t v60 = v52;
            }
            else {
              uint64_t v60 = v52 + 1;
            }
            if (asc_1000F4564[v56] == *(_WORD *)(a1 + 2 * v50))
            {
              unsigned int v52 = v60;
              uint64_t v56 = 0xFFFFFFFFLL;
            }

            if (++v50 == v55) {
              goto LABEL_81;
            }
          }

          int32x4_t v147 = v56;
          int v148 = v51;
          int v61 = sub_1000CC7E0((unsigned __int16 *)"(", *(unsigned __int16 *)(a1 + 2 * v50));
          uint64_t v62 = *(unsigned __int16 *)(a1 + 2 * v50);
          if (!v61) {
            break;
          }
          uint64_t v56 = ((unint64_t)((char *)sub_1000CC7E0((unsigned __int16 *)"(", v62) - "(") >> 1);
          unsigned int v51 = v54;
          uint64_t v57 = v149;
          unsigned int v58 = a2;
LABEL_53:
          unsigned int v59 = a2;
          int v55 = v146;
          if (++v50 == v146) {
            goto LABEL_81;
          }
        }

        if (sub_1000CC7E0(L"/\\?:", v62))
        {
          uint64_t v57 = v149;
          unsigned int v58 = a2;
          unsigned int v59 = a2;
          if (v54 > v144) {
            goto LABEL_57;
          }
        }

        else
        {
          uint64_t v57 = v149;
          unsigned int v58 = a2;
          unsigned int v59 = a2;
          if (v50 && *(_WORD *)(a1 + 2 * v50) == 45 && v50 < v140)
          {
            if (!sub_1000CC7E0(asc_1000F24E0, *(unsigned __int16 *)(a1 + 2 * v50 + 2))
              || !sub_1000CC7E0(asc_1000F24E0, *(unsigned __int16 *)(a1 + 2LL * (v50 - 1))))
            {
              uint64_t v57 = v149;
              unsigned int v51 = v148;
              uint64_t v56 = v147;
              goto LABEL_53;
            }

            unsigned int v59 = a2;
            uint64_t v57 = v149;
            if (v54 > v144)
            {
LABEL_57:
              ++v53;
              float32x4x2_t v144 = v54;
            }
          }
        }

        unsigned int v51 = v148;
        int v55 = v146;
        uint64_t v56 = v147;
        if (++v50 == v146) {
          goto LABEL_81;
        }
      }
    }

    int v54 = 0;
    char v53 = 0;
    unsigned int v52 = 0;
    float32x4x2_t v144 = 0;
    unsigned int v51 = 0;
    LODWORD(v56) = -1;
    uint64_t v57 = v149;
    unsigned int v58 = a2;
LABEL_81:
    if (v54 >= v58)
    {
      unsigned int v74 = a6;
    }

    else
    {
      uint64_t v72 = v54;
      unsigned int v73 = v58 - (uint64_t)v54;
      unsigned int v74 = a6;
      if ((v56 & 0x80000000) != 0 || v52 > 29)
      {
        if (v73 < 0xC) {
          goto LABEL_98;
        }
        uint64_t v85 = 4LL * v54;
        uint64_t v86 = vdupq_n_s32(v53);
        uint64_t v72 = (v73 & 0xFFFFFFFFFFFFFFF8LL) + v54;
        int v87 = v85 + 16;
        unsigned int v88 = (int32x4_t *)&v57[v85 + 16];
        int v89 = &v48[v87];
        *(void *)&int v90 = -1LL;
        *((void *)&v90 + 1) = -1LL;
        int v91 = v73 & 0xFFFFFFFFFFFFFFF8LL;
        do
        {
          v88[-1] = v86;
          char *v88 = v86;
          v88 += 2;
          *((_OWORD *)v89 - 1) = v90;
          *(_OWORD *)int v89 = v90;
          v89 += 32;
          v91 -= 8LL;
        }

        while (v91);
        if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8LL))
        {
LABEL_98:
          int v92 = (unsigned int *)&v57[4 * v72];
          unint64_t v93 = &v48[4 * v72];
          int16x8_t v94 = v58 - v72;
          do
          {
            *v92++ = v53;
            *(_DWORD *)unint64_t v93 = -1;
            v93 += 4;
            --v94;
          }

          while (v94);
        }
      }

      else
      {
        if (v73 < 0xC) {
          goto LABEL_89;
        }
        uint64_t v75 = 4LL * v54;
        uint64_t v72 = (v73 & 0xFFFFFFFFFFFFFFF8LL) + v54;
        int v76 = vdupq_n_s32(v53);
        int v77 = vdupq_n_s32(v52);
        int v78 = v75 + 16;
        int16x8_t v79 = (int32x4_t *)&v57[v75 + 16];
        uint64_t v80 = (int32x4_t *)&v48[v78];
        uint64_t v81 = v73 & 0xFFFFFFFFFFFFFFF8LL;
        do
        {
          v79[-1] = v76;
          *int16x8_t v79 = v76;
          v79 += 2;
          v80[-1] = v77;
          *uint64_t v80 = v77;
          v80 += 2;
          v81 -= 8LL;
        }

        while (v81);
        if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8LL))
        {
LABEL_89:
          uint64_t v82 = (unsigned int *)&v57[4 * v72];
          uint64_t v83 = (signed int *)&v48[4 * v72];
          int v84 = v58 - v72;
          do
          {
            *v82++ = v53;
            *v83++ = v52;
            --v84;
          }

          while (v84);
        }
      }

      int v54 = v58;
    }

    BOOL v95 = (int)v56 < 0 || v54 <= v51;
    if (v95) {
      BOOL v96 = v52;
    }
    else {
      BOOL v96 = v52 + 1;
    }
    if (v54 <= v144) {
      uint16x8_t v97 = v53;
    }
    else {
      uint16x8_t v97 = v53 + 1;
    }
    if (v96 >= 30) {
      int8x16_t v98 = 30;
    }
    else {
      int8x16_t v98 = v96;
    }
    uint16x8_t v99 = 4LL * ((int)v97 + 1);
    uint64_t v100 = sub_1000CAFC0(v99, v41, v42, v43, v44, v45, v46, v47);
    int v108 = sub_1000CAFC0(v99, v101, v102, v103, v104, v105, v106, v107);
    int v109 = 0LL;
    int v110 = 0;
    *(_DWORD *)uint64_t v100 = 0;
    *(_DWORD *)int v108 = 0;
    int v111 = -1;
    do
    {
      uint64_t v114 = *(unsigned int *)&v149[4 * v109];
      if ((int)v114 > v110)
      {
        uint64_t v115 = 4 * v114;
        *(_DWORD *)((char *)v100 + v115) = v111 + 1;
        *(_DWORD *)((char *)v108 + v115) = v109;
        int v110 = v114;
      }

      int v112 = *(_DWORD *)&v48[4 * v109];
      if (v112 > v111 && v112 > -1) {
        int v111 = *(_DWORD *)&v48[4 * v109];
      }
      ++v109;
    }

    while (a2 != v109);
    __int32 v116 = 4LL * (int)v97;
    *(_DWORD *)((char *)v100 + v116) = v98;
    *(_DWORD *)((char *)v108 + v116) = a2;
    int v117 = v145 == 0;
    if (1 << v98 <= v117)
    {
      uint64_t v71 = 0LL;
      int v128 = v74;
LABEL_143:
    }

    else
    {
      uint64_t v71 = 0LL;
      int v118 = v74;
      while ((uint64_t)(v142 - (unint64_t)a2) >= v118 - v74)
      {
        int v119 = 0;
        int v120 = a2;
        int v121 = v48;
        int32x2_t v122 = a3;
        __int32 v123 = (int *)v149;
        int32x2_t v124 = v118;
        do
        {
          uint64_t v126 = *(_DWORD *)v121;
          v121 += 4;
          uint64_t v125 = v126;
          if (v126 < 0 || ((v117 >> (v98 + ~v125)) & 1) == 0)
          {
            *v124++ = *v122;
            if (*v123 != v110) {
              ++v119;
            }
            int v110 = *v123;
          }

          ++v123;
          ++v122;
          --v120;
        }

        while (v120);
        else {
          int v128 = v118;
        }
        if (v128 > v118)
        {
          *v128++ = -1;
          uint64_t v71 = (v71 + 1);
        }

        ++v117;
        int v118 = v128;
        if (v117 == 1 << v98) {
          goto LABEL_143;
        }
      }

      int v128 = v118;
    }

    int v129 = 0LL;
    do
    {
      int32x4_t v130 = v129;
      int32x4_t v131 = *((_DWORD *)v100 + v129++);
      int v132 = *((_DWORD *)v100 + v129);
      int32x4_t v133 = v132 - v131;
      if (v132 - v131 != 31)
      {
        int v134 = 0;
        int32x4_t v135 = 1 << v133;
        if (v135 <= 1) {
          int32x4_t v135 = 1;
        }
        do
        {
          uint64_t v136 = *((int *)v108 + v130);
          if ((int)v136 < *((_DWORD *)v108 + v129))
          {
            int32x4_t v137 = v128;
            do
            {
              uint64_t v138 = *(_DWORD *)&v48[4 * v136];
              if (v138 < 0 || ((v134 >> (v132 + ~(_BYTE)v138)) & 1) == 0) {
                *v137++ = a3[v136];
              }
              ++v136;
            }

            while (v136 < *((int *)v108 + v129));
            if (v137 > v128)
            {
              *v137++ = -1;
              uint64_t v71 = (v71 + 1);
            }

            int v128 = v137;
          }

          ++v134;
        }

        while (v134 != v135);
      }
    }

    while (v129 != v97);
LABEL_163:
    sub_1000CB038(v108, v99);
    sub_1000CB038(v100, v99);
    sub_1000CB038(v48, v141);
    sub_1000CB038(v149, v141);
    return v71;
  }

  return 0LL;
}

  if (v3 + 1 == a1[6]) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  *a1 = v8;
  return v5;
}

    uint64_t v17 = dword_1000FA138[14 * v18];
    goto LABEL_10;
  }

  if (result >> 8 >= 0x31)
  {
    if (result >> 6 < 0x27F)
    {
      uint64_t v18 = 10;
    }

    else
    {
      if (v19 < 0xD7B)
      {
        uint64_t v18 = 11;
      }

      else
      {
        uint64_t v18 = 12;
      }
    }

    goto LABEL_9;
  }

  uint64_t v18 = 9;
  if ((_DWORD)result != 12540 || a2 != 6) {
    goto LABEL_9;
  }
  uint64_t v17 = 6;
LABEL_10:
  *a5 = v17;
  if (a6)
  {
    if (result > 0xFF)
    {
      if (v18 < 1 || ((0xFE3uLL >> v18) & 1) != 0) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t))&dword_1000FA138[14 * v18 + 4])(result);
      }
    }

    else
    {
      uint64_t result = sub_1000BF004(result);
    }

    *a6 = result;
  }

  if (a7)
  {
    if (v16 > 0xFF)
    {
      if (v18 < 1 || ((0xFE3uLL >> v18) & 1) != 0) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t))&dword_1000FA138[14 * v18 + 6])(v16);
      }
    }

    else
    {
      uint64_t result = sub_1000BF028(v16);
    }

    *a7 = result;
  }

  if (a8)
  {
    else {
      uint64_t result = sub_1000BF0FC(v16);
    }
    *a8 = result;
  }

  if (a9)
  {
    if (v16 > 0xFF)
    {
      if (v18 < 1 || ((0x43uLL >> v18) & 1) != 0) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t))&dword_1000FA138[14 * v18 + 12])(v16);
      }
    }

    else
    {
      uint64_t result = sub_1000BF0B4(v16);
    }

    *a9 = result;
  }

  if (a10)
  {
    uint64_t result = sub_1000CBC08(v18, v16, a3);
    *a10 = result;
  }

  if (a11)
  {
    uint64_t result = sub_1000CBF28(v18, v16, a4);
    *a11 = result;
  }

  return result;
}

  pthread_once(&stru_1000FD870, (void (*)(void))sub_1000E2A98);
  uint64_t v8 = (const __CFDictionary *)pthread_getspecific(qword_100102A80);
  if (!v8) {
    goto LABEL_16;
  }
  int v9 = v8;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v8, v7);
  if (!Value)
  {
    int v13 = kCFAllocatorDefault;
    Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v9, v7, Mutable);
    CFRelease(Mutable);
    goto LABEL_14;
  }

  Mutable = Value;
  int v12 = (void *)CFDictionaryGetValue(Value, v6);
  if (!v12)
  {
    int v13 = kCFAllocatorDefault;
LABEL_14:
    int v12 = CFDictionaryCreateMutable(v13, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(Mutable, v6, v12);
    CFRelease(v12);
  }

  CFDictionarySetValue((CFMutableDictionaryRef)v12, a3, a4);
LABEL_16:
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t sub_100027AB4(uint64_t a1, int a2, unsigned int a3, int a4)
{
  int v12 = 0;
  uint64_t result = sub_100027B84(a1, a2, &v12);
  if ((_DWORD)result)
  {
    int v11 = 0;
    uint64_t result = sub_100027B84(a1, a3, &v11);
    if ((_DWORD)result)
    {
      int v8 = v11;
      uint64_t result = sub_10002785C(a1, v12, v11, a4);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 340) == 1 && (uint64_t v10 = 0LL, v9 = 0, sub_10003366C(*(void *)(a1 + 256), a3, &v10, &v9), v10)) {
          return sub_10002785C(a1, v8, v8, 0);
        }
        else {
          return 1LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_100027B84(uint64_t a1, int a2, int *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v6 <= a2 || (LODWORD(v7) = a2, *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) != a2))
  {
    if ((int)v6 < 1)
    {
      LODWORD(v7) = 0;
    }

    else
    {
      uint64_t v7 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v7) != a2)
      {
        if (v6 == ++v7)
        {
          *a3 = -1;
          goto LABEL_15;
        }
      }
    }
  }

  BOOL v8 = (_DWORD)v7 == (_DWORD)v6;
  if ((_DWORD)v7 == (_DWORD)v6) {
    int v9 = -1;
  }
  else {
    int v9 = v7;
  }
  *a3 = v9;
  if (!v8) {
    return 1LL;
  }
LABEL_15:
  int v10 = *(_DWORD *)(a1 + 268);
  if (v10 == *(_DWORD *)(a1 + 264))
  {
    uint64_t result = sub_100027558(a1);
    if (!(_DWORD)result) {
      return result;
    }
    int v10 = *(_DWORD *)(a1 + 268);
  }

  *(_DWORD *)(*(void *)(a1 + 272) + 4LL * v10) = a2;
  *a3 = *(_DWORD *)(a1 + 268);
  int v12 = (_DWORD *)(*(void *)(a1 + 288) + 4LL * *(int *)(a1 + 268));
  v12[1] = *v12;
  ++*(_DWORD *)(a1 + 268);
  sub_100031AA0(*(void *)(a1 + 256), a2);
  uint64_t v15 = 0LL;
  int v14 = 0;
  uint64_t v13 = sub_100033278(*(void *)(a1 + 256), a2);
  if (!v13)
  {
    sub_10003366C(*(void *)(a1 + 256), a2, &v15, &v14);
    if (!v15) {
      return 1LL;
    }
    goto LABEL_22;
  }

  if (*(_DWORD *)(v13 + 340)) {
LABEL_22:
  }
    *(_DWORD *)(a1 + 340) = 1;
  return 1LL;
}

uint64_t sub_100027CE0(uint64_t a1)
{
  __int128 v82 = xmmword_1000F0410;
  __int128 v83 = unk_1000F0420;
  __int128 v84 = xmmword_1000F0430;
  __int128 v85 = unk_1000F0440;
  strcpy(__s, "00__ExpandedName");
  __s[17] = 0;
  __int16 v79 = 0;
  int v80 = 0;
  uint64_t v81 = 0LL;
  int v86 = 0;
  int v2 = strlen(__s);
  if (*(_DWORD *)a1 != 3 || !*(_DWORD *)(a1 + 348)) {
    return a1;
  }
  int v3 = v2;
  int v4 = *(_DWORD *)(a1 + 268);
  int v5 = *(_DWORD *)(a1 + 368);
  if (v4 >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = sub_100033278(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v6));
      if (v7)
      {
        v4 += *(_DWORD *)(v7 + 268);
        v5 += *(_DWORD *)(v7 + 372);
      }

      uint64_t v8 = *(void *)(a1 + 288);
      unint64_t v9 = *(unsigned int *)(v8 + 4 * v6++);
      if (v9 < *(_DWORD *)(v8 + 4 * v6))
      {
        do
        {
          uint64_t v10 = sub_100033278( *(void *)(a1 + 256),  *(_DWORD *)(*(void *)(a1 + 272) + 4LL * *(int *)(*(void *)(a1 + 304) + 4 * v9)));
          if (v10)
          {
            v4 += *(_DWORD *)(v10 + 268);
            v5 += *(_DWORD *)(v10 + 372);
          }

          ++v9;
        }

        while (v9 < *(unsigned int *)(*(void *)(a1 + 288) + 4 * v6));
      }
    }

    while (v6 < *(int *)(a1 + 268));
  }

  sprintf(&__s[v3], "%d", dword_1000FDCD8);
  ++dword_1000FDCD8;
  uint64_t v11 = sub_100026E48((unsigned __int8 *)__s, *(void *)(a1 + 256), v4, v5, *(_DWORD *)(a1 + 336));
  if (!v11) {
    return 0LL;
  }
  uint64_t v19 = v11;
  uint64_t v20 = sub_1000CAFC0(*(int *)(a1 + 268), v12, v13, v14, v15, v16, v17, v18);
  LODWORD(v21) = *(_DWORD *)(a1 + 268);
  if ((int)v21 < 1)
  {
LABEL_80:
    uint64_t v62 = (int)v21;
    goto LABEL_98;
  }

  uint64_t v22 = 0LL;
  while (1)
  {
    int v76 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v22);
    uint64_t v23 = sub_100033278(*(void *)(a1 + 256), v76);
    uint64_t v24 = v23;
    if (!v23) {
      goto LABEL_23;
    }
    LODWORD(v25) = *(_DWORD *)(v24 + 268);
    if ((int)v25 >= 2)
    {
      uint64_t v26 = 1LL;
      do
      {
        ++v26;
        uint64_t v25 = *(int *)(v24 + 268);
      }

      while (v26 < v25);
    }

    if (*((_BYTE *)v20 + v22))
    {
LABEL_23:
      uint64_t v27 = *(void *)(a1 + 288);
      unint64_t v28 = *(unsigned int *)(v27 + 4 * v22++);
      goto LABEL_76;
    }

    if ((int)v25 >= 2)
    {
      uint64_t v53 = *(void *)(v24 + 280);
      uint64_t v52 = *(void *)(v24 + 288);
      uint64_t v54 = 1LL;
      do
      {
        uint64_t v55 = 4 * v54;
        unint64_t v56 = *(unsigned int *)(v52 + 4 * v54++);
        if (v56 < *(_DWORD *)(v52 + 4 * v54))
        {
          int v57 = *(_DWORD *)(v53 + v55);
          do
          {
            uint64_t v58 = *(void *)(v24 + 352);
            if (v58) {
              int v59 = *(unsigned __int8 *)(v58 + v56);
            }
            else {
              int v59 = 0;
            }
            if (!sub_100027AB4( v19,  v57,  *(_DWORD *)(v53 + 4LL * *(int *)(*(void *)(v24 + 304) + 4 * v56)),  v59)) {
              goto LABEL_97;
            }
            ++v56;
            uint64_t v52 = *(void *)(v24 + 288);
          }

          while (v56 < *(unsigned int *)(v52 + 4 * v54));
          LODWORD(v25) = *(_DWORD *)(v24 + 268);
        }
      }

      while (v54 < (int)v25);
    }

    *((_BYTE *)v20 + v22) = 1;
    uint64_t v60 = *(void *)(a1 + 288);
    unint64_t v28 = *(unsigned int *)(v60 + 4 * v22++);
LABEL_76:
    uint64_t v21 = *(int *)(a1 + 268);
    if (v22 >= v21)
    {
      if ((int)v21 > 1)
      {
        uint64_t v61 = 1LL;
        do
        {
          if (*(_BYTE *)(*(void *)(a1 + 296) + v61))
          {
            int v63 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v61);
            uint64_t v64 = sub_100033278(*(void *)(a1 + 256), v63);
            uint64_t v65 = v64;
            uint64_t v66 = *(void *)(a1 + 360);
            if (v66) {
              int v67 = *(unsigned __int8 *)(v66 + v61);
            }
            else {
              int v67 = 0;
            }
            if (v64)
            {
              int v68 = *(_DWORD *)(v64 + 268);
              if (v68 >= 2)
              {
                uint64_t v69 = *(void *)(v64 + 280);
                for (uint64_t i = 1LL; i < v68; ++i)
                {
                  if (*(_BYTE *)(*(void *)(v65 + 296) + i))
                  {
                    uint64_t v71 = *(void *)(v65 + 360);
                    if (v71) {
                      LOBYTE(v71) = *(_BYTE *)(v71 + i);
                    }
                    int v68 = *(_DWORD *)(v65 + 268);
                  }
                }
              }
            }

            else if (!sub_100027AB4(v19, v63, 0, v67))
            {
              goto LABEL_97;
            }
          }

          ++v61;
          uint64_t v62 = *(int *)(a1 + 268);
        }

        while (v61 < v62);
        goto LABEL_98;
      }

      goto LABEL_80;
    }
  }

  uint64_t v75 = v22;
  while (1)
  {
    uint64_t v29 = *(int *)(*(void *)(a1 + 304) + 4 * v28);
    unsigned int v30 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v29);
    uint64_t v31 = sub_100033278(*(void *)(a1 + 256), v30);
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)(a1 + 352);
    if (v33)
    {
      int v34 = *(unsigned __int8 *)(v33 + v28);
      if (v24) {
        goto LABEL_29;
      }
    }

    else
    {
      int v34 = 0;
      if (v24)
      {
LABEL_29:
        int v35 = *(_DWORD *)(v24 + 268);
        if (v35 >= 2)
        {
          uint64_t v36 = *(void *)(v24 + 280);
          uint64_t v37 = 1LL;
          while (1)
          {
            if (*(_BYTE *)(*(void *)(v24 + 296) + v37))
            {
              uint64_t v38 = *(void *)(v24 + 360);
              if (v38) {
                LOBYTE(v38) = *(_BYTE *)(v38 + v37);
              }
              int v35 = *(_DWORD *)(v24 + 268);
            }

            if (++v37 >= v35) {
              goto LABEL_26;
            }
          }
        }

        goto LABEL_26;
      }
    }

    if (!v31)
    {
      goto LABEL_26;
    }

    LODWORD(v39) = *(_DWORD *)(v32 + 268);
LABEL_44:
    if (!*((_BYTE *)v20 + v29))
    {
      unsigned int v73 = v20;
      if ((int)v39 >= 2)
      {
        uint64_t v74 = *(void *)(v32 + 280);
        uint64_t v41 = *(void *)(v32 + 288);
        uint64_t v42 = 1LL;
        while (1)
        {
          uint64_t v43 = 4 * v42;
          unint64_t v44 = *(unsigned int *)(v41 + 4 * v42++);
LABEL_47:
        }

        int v45 = *(_DWORD *)(v74 + v43);
        while (1)
        {
          uint64_t v46 = *(void *)(v32 + 352);
          int v47 = v46 ? *(unsigned __int8 *)(v46 + v44) : 0;
          if (!sub_100027AB4( v19,  v45,  *(_DWORD *)(v74 + 4LL * *(int *)(*(void *)(v32 + 304) + 4 * v44)),  v47)) {
            break;
          }
          ++v44;
          uint64_t v41 = *(void *)(v32 + 288);
          if (v44 >= *(unsigned int *)(v41 + 4 * v42))
          {
            LODWORD(v39) = *(_DWORD *)(v32 + 268);
            goto LABEL_47;
          }
        }

        sub_1000271B0(v19);
        uint64_t v19 = 0LL;
        uint64_t v62 = *(int *)(a1 + 268);
        uint64_t v20 = v73;
        goto LABEL_98;
      }

LABEL_56:
      uint64_t v20 = v73;
      *((_BYTE *)v73 + v29) = 1;
    }

    __int16 v48 = *(unsigned int **)(v32 + 288);
    uint64_t v49 = *v48;
    if (v49 < v48[1])
    {
      uint64_t v50 = *(void *)(v32 + 280);
      do
      {
        uint64_t v51 = *(void *)(v32 + 352);
        if (v51) {
          LOBYTE(v51) = *(_BYTE *)(v51 + v49);
        }
        if (!sub_100027AB4( v19,  v76,  *(_DWORD *)(v50 + 4LL * *(int *)(*(void *)(v32 + 304) + 4 * v49)),  (v51 + v34))) {
          goto LABEL_97;
        }
      }

      while (++v49 < (unint64_t)*(unsigned int *)(*(void *)(v32 + 288) + 4LL));
    }

  uint64_t v39 = 0;
LABEL_59:
  *(_DWORD *)(a2 + 80) = v39;
  uint64_t v41 = *(unsigned int *)(a2 + 44);
  *(void *)(a2 + 96) = (v34 & 0x7FE0000000000000LL) + ((uint64_t)(int)v14 << 10) + (v41 << 35);
  *(void *)(a2 + 160) = 0LL;
  uint64_t result = sub_10003366C(*(void *)(a1 + 256), v41, v38, (_DWORD *)(a2 + 200));
  if (*(_DWORD *)(a2 + 168))
  {
    uint64_t result = sub_1000336A8(*(void *)(a1 + 256), *(_DWORD *)(a2 + 44));
    *(void *)(a2 + 160) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 80) = *(char *)(*(void *)(a1 + 296) + v28);
      *(_DWORD *)(a2 + 60) = v23;
      *(_WORD *)(a2 + 88) = v24;
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 4544) && *(_DWORD *)(a1 + 340) && *v38) {
          uint64_t result = sub_10002E9F4(a1, a2);
        }
      }
    }
  }

  uint64_t v49 = 0x7FFF;
  if (*(_DWORD *)(a1 + 340) && !*(void *)(a2 + 160))
  {
    uint64_t v42 = *v38;
    if (*v38)
    {
      uint64_t v43 = *(_DWORD *)(a2 + 200);
      if (*(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 44)) {
        sub_10005E814(v42, v43, *(unsigned __int16 *)(a2 + 172), 1, v35, &v49);
      }
      else {
        sub_10005E9F4(v42, v43, 1, v35, &v49);
      }
    }

    else if (*v13)
    {
      uint64_t result = sub_10005EA2C(*v13, *(_DWORD *)(a2 + 184), *(unsigned __int16 *)(a2 + 172));
      uint64_t v49 = result;
      goto LABEL_75;
    }

    uint64_t result = v49;
LABEL_75:
    if ((unsigned __int16)result != 0x7FFF)
    {
      LOWORD(v44) = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        unint64_t v44 = *(void *)(qword_1000FDCC0 + 4168);
      }
      *(_WORD *)(a2 + 88) = *(_WORD *)(a2 + 88) + result - v44;
    }
  }

    (*(void (**)(uint64_t))(a1 + 96))(a1);
LABEL_57:
    int v57 = 0LL;
  }

              uint64_t v55 = 0;
              unint64_t v56 = 0;
              int v57 = qword_1000FDCC0;
              if (qword_1000FDCC0)
              {
LABEL_57:
                if (*(_DWORD *)(v57 + 3740))
                {
                  uint64_t v21 = v263;
                  goto LABEL_59;
                }
              }

  sub_1000BCBC8(v9);
  return v10;
}

LABEL_97:
  sub_1000271B0(v19);
  uint64_t v19 = 0LL;
  uint64_t v62 = *(int *)(a1 + 268);
LABEL_98:
  sub_1000CB038(v20, v62);
  return v19;
}

              v223 = 0;
            }
          }

uint64_t sub_100028310(uint64_t a1)
{
  if (*(void *)(a1 + 280)) {
    return 1LL;
  }
  uint64_t result = sub_1000C1074(4LL * *(int *)(a1 + 264));
  *(void *)(a1 + 280) = result;
  if (result)
  {
    uint64_t v3 = 1LL;
    while (1)
    {
      int v4 = sub_10003440C();
      __sprintf_chk(v8, 0, 0x64uLL, "%s__CLCopyName", v4);
      *(_DWORD *)(*(void *)(a1 + 280) + 4 * v3) = sub_1000318E0( *(void *)(a1 + 256),  v8,  *(_DWORD *)(*(void *)(a1 + 272) + 4 * v3));
      uint64_t v5 = *(void *)(a1 + 280);
      unsigned int v6 = *(_DWORD *)(v5 + 4 * v3);
      if (v6 == -1) {
        break;
      }
      sub_100031AA0(*(void *)(a1 + 256), v6);
    }

    if ((v3 & 0xFFFFFFFE) != 0)
    {
      uint64_t v7 = v3 + 1;
      do
        sub_100032FD8(*(uint64_t **)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 280) + 4LL * (v7-- - 2)));
      while (v7 > 2);
      uint64_t v5 = *(void *)(a1 + 280);
    }

    sub_1000C0EF8(v5);
    uint64_t result = 0LL;
    *(void *)(a1 + 280) = 0LL;
  }

  return result;
}

uint64_t sub_100028448(int a1, uint64_t a2)
{
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v2 = a1;
  while (**(_DWORD **)a2 != 3 || !*(_DWORD *)(*(void *)a2 + 348LL))
  {
    a2 += 8LL;
    if (!--v2) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_10002848C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 1)
  {
    v15[11] = v4;
    v15[12] = v5;
    uint64_t v8 = result;
    uint64_t v9 = 0LL;
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = (_DWORD *)(a3 + 4 * v9);
      *uint64_t v11 = 0;
      uint64_t v12 = (_DWORD *)(a4 + 4 * v9);
      _DWORD *v12 = 0;
      uint64_t v13 = *(void *)(v8 + 8 * v9);
      if (*(_DWORD *)v13 == 3 && *(int *)(v13 + 268) >= 2)
      {
        for (uint64_t i = 1LL; i < *(int *)(v13 + 268); ++i)
        {
          v15[0] = sub_100033278(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
          if (v15[0])
          {
            uint64_t result = sub_10002848C(v15, 1LL, a3 + 4 * v9, a4 + 4 * v9);
            if (*v11) {
              break;
            }
          }

          else
          {
            uint64_t result = sub_1000318A8(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
            if ((_DWORD)result)
            {
              *uint64_t v11 = 1;
              uint64_t result = sub_1000318C4(*(void *)(v13 + 256), *(_DWORD *)(*(void *)(v13 + 272) + 4 * i));
              _DWORD *v12 = result;
              break;
            }
          }
        }
      }

      ++v9;
    }

    while (v9 != v10);
  }

  return result;
}

_DWORD *sub_1000285A8(_DWORD *result, uint64_t a2)
{
  if (*result == 3)
  {
    uint64_t v2 = result;
    if ((int)result[67] >= 2)
    {
      uint64_t v4 = 1LL;
      do
        uint64_t result = sub_100035038(*((void *)v2 + 32), a2, *(_DWORD *)(*((void *)v2 + 34) + 4 * v4++));
      while (v4 < (int)v2[67]);
    }
  }

  return result;
}

uint64_t sub_100028610(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)a1 != 3) {
    return 0LL;
  }
  uint64_t v31 = *(void *)(a1 + 256);
  uint64_t v3 = sub_100026E48(a2, v31, *(_DWORD *)(a1 + 264), *(_DWORD *)(a1 + 368), *(_DWORD *)(a1 + 336));
  if (v3 && *(int *)(a1 + 268) >= 1)
  {
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 288);
      uint64_t v7 = 4 * v4;
      uint64_t v32 = *(int *)(v6 + 4 * v4);
      uint64_t v8 = v4 + 1;
      int v9 = *(_DWORD *)(v6 + 4 * v8);
      unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 272) + v7);
      uint64_t v30 = v8;
      if (!v10)
      {
        int v12 = 0;
        uint64_t v13 = (v9 - v32);
        goto LABEL_5;
      }

      unsigned int v11 = sub_100032FB0(v31, v10);
      int v12 = v11 ? v11 : v10;
      uint64_t v13 = (v9 - v32);
LABEL_5:
      uint64_t v5 = *(int *)(a1 + 268);
      uint64_t v4 = v30;
      if (v30 >= v5)
      {
        if ((int)v5 >= 2)
        {
          uint64_t v25 = 1LL;
          do
          {
            if (*(_BYTE *)(*(void *)(a1 + 296) + v25))
            {
              unsigned int v27 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v25);
              int v28 = sub_100032FB0(v31, v27);
              if (v28) {
                int v29 = v28;
              }
              else {
                int v29 = v27;
              }
              if (*(void *)(a1 + 352)) {
                int v26 = *(unsigned __int8 *)(*(void *)(a1 + 360) + v25);
              }
              else {
                int v26 = 0;
              }
              sub_100027AB4(v3, v29, 0, v26);
              LODWORD(v5) = *(_DWORD *)(a1 + 268);
            }

            ++v25;
          }

          while (v25 < (int)v5);
        }

        return v3;
      }
    }

    uint64_t v14 = 0LL;
    while (1)
    {
      int v15 = *(_DWORD *)(*(void *)(a1 + 272) + 4LL * *(int *)(*(void *)(a1 + 304) + 4 * (v14 + v32)));
      int v16 = sub_100032FB0(v31, v15);
      if (v16) {
        int v15 = v16;
      }
      if (v12 != v10 && v12 == v15) {
        goto LABEL_14;
      }
      uint64_t v17 = *(void *)(a1 + 352);
      if (v17)
      {
        int v18 = *(unsigned __int8 *)(v17 + v14 + v32);
        uint64_t v19 = *(unsigned int *)(v3 + 268);
        if (v12 < 0) {
          goto LABEL_25;
        }
      }

      else
      {
        int v18 = 0;
        uint64_t v19 = *(unsigned int *)(v3 + 268);
        if (v12 < 0) {
          goto LABEL_25;
        }
      }

      if ((int)v19 > v12)
      {
        LODWORD(v20) = v12;
      }

LABEL_35:
      if ((_DWORD)v19 == *(_DWORD *)(v3 + 264))
      {
        LODWORD(v19) = *(_DWORD *)(v3 + 268);
      }

      *(_DWORD *)(*(void *)(v3 + 272) + 4LL * (int)v19) = v12;
      uint64_t v20 = *(int *)(v3 + 268);
      *(_DWORD *)(*(void *)(v3 + 288) + 4LL * ((int)v20 + 1)) = *(_DWORD *)(*(void *)(v3 + 288) + 4 * v20);
      ++*(_DWORD *)(v3 + 268);
      sub_100031AA0(*(void *)(v3 + 256), v12);
      uint64_t v34 = 0LL;
      int v33 = 0;
      uint64_t v21 = sub_100033278(*(void *)(v3 + 256), v12);
      if (v21)
      {
        if (!*(_DWORD *)(v21 + 340)) {
          goto LABEL_43;
        }
LABEL_42:
        *(_DWORD *)(v3 + 340) = 1;
        goto LABEL_43;
      }

      sub_10003366C(*(void *)(v3 + 256), v12, &v34, &v33);
      if (v34) {
        goto LABEL_42;
      }
LABEL_43:
      LODWORD(v19) = *(_DWORD *)(v3 + 268);
      if (v15 < 0) {
        goto LABEL_46;
      }
LABEL_44:
      if ((int)v19 > v15)
      {
        LODWORD(v22) = v15;
      }

        if (v17 != 1) {
          goto LABEL_37;
        }
        int v15 = 0;
LABEL_42:
        int v33 = *(_DWORD *)(a1 + 668) + v7;
        uint64_t v7 = (uint64_t)v23;
        goto LABEL_43;
      }

      uint64_t v36 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v34);
      uint64_t v37 = *v36;
      uint64_t v22 = v36[1] + ~(_DWORD)v37;
      uint64_t v7 = *(void *)(a1 + 88) + v37;
      uint64_t v23 = (unsigned __int8 *)(v7 + 1);
      if (!v22)
      {
LABEL_21:
        uint64_t v24 = *v6++;
        uint64_t v7 = v24;
        if (*(_BYTE *)(v5 + v24) == 2) {
          goto LABEL_22;
        }
        goto LABEL_35;
      }

  uint64_t v37 = (unsigned __int8 *)(*(void *)a2)++;
  uint64_t v38 = *v37;
  if (*(_BYTE *)(v16 + v38) == 2)
  {
    uint64_t v39 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v38);
    uint64_t v40 = *v39;
    *(_DWORD *)(a2 + 16) = v39[1] + ~(_DWORD)v40;
    int v35 = *(void *)(v4 + 88) + v40;
    uint64_t v36 = (void *)(a2 + 8);
    goto LABEL_37;
  }

  uint64_t v54 = sub_1000BE644(0xFFFFFFFF, 4, v52);
  uint64_t v55 = *(void *)(*(void *)(a1 + 144) + 104LL);
  if (v55)
  {
LABEL_21:
    unint64_t v56 = sub_1000BE644(-1431655765 * ((unint64_t)(v55 - *(void *)(a1 + 128)) >> 1), 4, v54);
    int v57 = *(void *)(*(void *)(a1 + 144) + 112LL);
    if (v57) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }

          int v15 = (v15 + 1);
          uint64_t v54 = 8LL * (v15 >> 8);
          uint64_t v30 = (unsigned __int16 *)(*(void *)(v5 + v54) + 8LL * v15);
          uint64_t result = *(void *)(v8 + v54) + 12LL * v15;
          if ((_DWORD)v32 == (_DWORD)v15)
          {
            LODWORD(v15) = v32;
            goto LABEL_38;
          }
        }

        uint64_t v51 = v50 - v38;
LABEL_34:
        if (v51)
        {
LABEL_2:
          int v16 = *(void *)v30;
          *(void *)uint64_t v30 = *(void *)(v34 + 8 * v35);
          *(void *)(v34 + 8 * v35) = v16;
          uint64_t v17 = *(void *)result;
          int v18 = *(_DWORD *)(result + 8);
          uint64_t v19 = v37[2];
          *(void *)uint64_t result = *(void *)v37;
          *(_DWORD *)(result + 8) = v19;
          *(void *)uint64_t v37 = v17;
          v37[2] = v18;
          uint64_t v5 = *v4;
          uint64_t v8 = v4[2];
          a3 = v32;
          continue;
        }

        goto LABEL_35;
      }

      break;
    }

    if ((int)v15 - 1 > (int)a2) {
LABEL_37:
    }
      uint64_t result = sub_1000D54BC(v4);
LABEL_38:
    a2 = (v15 + 1);
    if ((int)a2 < (int)v3)
    {
      a1 = v4;
      a3 = v3;
      continue;
    }

    return result;
  }

LABEL_63:
        if (sub_10002785C(v3, v20, v22, v18))
        {
          if (*(_DWORD *)(v3 + 340) == 1)
          {
            uint64_t v34 = 0LL;
            int v33 = 0;
            sub_10003366C(*(void *)(v3 + 256), v15, &v34, &v33);
            if (v34) {
              sub_10002785C(v3, v22, v22, 0);
            }
          }
        }
      }

          int v26 = 0;
          goto LABEL_64;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 112) = 1;
        if (!*(_DWORD *)(a2 + 340)) {
          goto LABEL_49;
        }
      }

      if (*(void *)(a1 + 160)) {
        goto LABEL_49;
      }
      uint64_t v42 = 0x7FFF;
      unsigned int v27 = *v7;
      if (*v7)
      {
        int v28 = *(_DWORD *)(a1 + 200);
        if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 44)) {
          sub_10005E814(v27, v28, *(unsigned __int16 *)(a1 + 172), 1, (unsigned __int16 *)(a1 + 76), &v42);
        }
        else {
          sub_10005E9F4(v27, v28, 1, (unsigned __int16 *)(a1 + 76), &v42);
        }
      }

      else
      {
        int v29 = *(void *)(a1 + 176);
        if (v29)
        {
          uint64_t v30 = sub_10005EA2C(v29, *(_DWORD *)(a1 + 184), *(unsigned __int16 *)(a1 + 172));
          goto LABEL_58;
        }
      }

      uint64_t v30 = v42;
LABEL_58:
      if (v30 != 0x7FFF)
      {
        LOWORD(v31) = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          uint64_t v31 = *(void *)(qword_1000FDCC0 + 4168);
        }
        *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 88) + v30 - v31;
      }

      *(_DWORD *)(a1 + 104) = sub_10001FE60(*(void *)a1, *(unsigned __int16 *)(a1 + 76));
      if (v45 == 1) {
        goto LABEL_50;
      }
      goto LABEL_63;
    }

    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1172))
    {
      int v45 = sub_100030E38(*(void *)(a1 + 48), v10);
      if (v45 <= 1)
      {
        unsigned int v11 = *(_DWORD *)(a1 + 68);
        uint64_t v14 = *(_DWORD *)(a1 + 72);
        if (v11 < v14) {
          goto LABEL_17;
        }
        goto LABEL_27;
      }

      unsigned int v11 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 68) = v11;
    }

    uint64_t v14 = *(_DWORD *)(a1 + 72);
    if (v11 < v14)
    {
LABEL_17:
      if (*(unsigned __int16 *)(a1 + 76) == sub_100030F30(*(void *)(a1 + 48), v11, 0, &v45))
      {
        *(_DWORD *)(a1 + 108) = 0;
        *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
        unsigned int v11 = *(_DWORD *)(a1 + 68);
        if (v11 == *(_DWORD *)(a1 + 72)) {
          goto LABEL_28;
        }
        goto LABEL_43;
      }

      uint64_t v14 = *(_DWORD *)(a1 + 72);
    }

    if (theSet) {
      CFRelease(theSet);
    }
    if (v148) {
      CFRelease(v148);
    }
    if (v20) {
      CFRelease(v20);
    }
    uint64_t v55 = v146;
    if (Mutable) {
      goto LABEL_70;
    }
  }

  uint64_t v61 = 0;
  if (v19)
  {
LABEL_214:
    uint64_t v136 = v55;
    CFRelease(v19);
    uint64_t v55 = v136;
  }

uint64_t sub_100028A88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (qword_1000FDCC0) {
    uint64_t v3 = (unsigned __int8 *)(qword_1000FDCC0 + 4220);
  }
  else {
    uint64_t v3 = 0LL;
  }
  int v4 = sub_100031764(v2, v3);
  uint64_t v5 = *(unsigned int *)(a1 + 268);
  if (v4 < 0 || (int)v5 <= v4 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * v4) != v4)
  {
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v6) != v4)
      {
        if (v5 == ++v6) {
          return 0LL;
        }
      }

      int v4 = v6;
      BOOL v10 = (_DWORD)v6 == (_DWORD)v5;
      if ((_DWORD)v6 == (_DWORD)v5) {
        int v9 = -1;
      }
      else {
        int v9 = v6;
      }
      if (!v10) {
        goto LABEL_23;
      }
      return 0LL;
    }

    int v4 = 0;
  }

  BOOL v8 = v4 == (_DWORD)v5;
  if (v4 == (_DWORD)v5) {
    int v9 = -1;
  }
  else {
    int v9 = v4;
  }
  if (v8) {
    return 0LL;
  }
LABEL_23:
  unsigned int v11 = (int *)(*(void *)(a1 + 288) + 4LL * v4);
  int v12 = v11[1];
  uint64_t v13 = *v11;
  uint64_t v14 = (int *)(*(void *)(a1 + 304) + 4 * v13);
  int v15 = v12 - v13;
  while (1)
  {
    int v16 = *v14++;
    if (v16 == v9) {
      break;
    }
    if (!--v15) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_100028B9C(uint64_t a1, uint64_t a2)
{
  LODWORD(v4) = 0;
  if (a2)
  {
    uint64_t v5 = 1LL;
    do
    {
      uint64_t v6 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v5));
      uint64_t v4 = sub_100030E70(v6, a2 + 2LL * (int)v4) + v4;
      ++v5;
    }

    while (v5 < *(int *)(a1 + 268));
  }

  else
  {
    uint64_t v8 = 1LL;
    do
    {
      uint64_t v9 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v8));
      uint64_t v4 = sub_100030E70(v9, 0LL) + v4;
      ++v8;
    }

    while (v8 < *(int *)(a1 + 268));
  }

  return v4;
}

_DWORD *sub_100028C70(_DWORD *result, uint64_t a2)
{
  if (*result == 3)
  {
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)(a2 + 212) = 0x4000;
  }

  return result;
}

uint64_t sub_100028C90( uint64_t a1, int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v10 = a1;
  v163[0] = 0LL;
  uint64_t v160 = 0xFFFFFFFFLL;
  int v159 = 0;
  unsigned int v11 = (uint64_t *)sub_100033398(*(void *)(a1 + 256));
  uint64_t v151 = sub_1000B31C8((uint64_t)v11);
  uint64_t v162 = 0LL;
  uint64_t v146 = v10;
  if (a2 == 65534)
  {
    HIDWORD(v163[0]) = 1;
    uint64_t v12 = *(unsigned int *)(v10 + 268);
    if ((int)v12 < 1)
    {
      LODWORD(v14) = 0;
    }

    else
    {
      uint64_t v13 = *(_DWORD **)(v10 + 272);
      LODWORD(v14) = *v13;
      if (*v13)
      {
        uint64_t v14 = 0LL;
        while (v13[v14])
        {
          if (v12 == ++v14)
          {
            LODWORD(v14) = *(_DWORD *)(v10 + 268);
            break;
          }
        }
      }
    }

    LODWORD(v137) = 0;
    if ((_DWORD)v14 == (_DWORD)v12) {
      int v24 = -1;
    }
    else {
      int v24 = v14;
    }
    goto LABEL_61;
  }

  uint64_t v15 = (a4 >> 10) & 0x1FFFFFF;
  uint64_t v137 = (a4 >> 35) & 0x3FFFF;
  uint64_t v16 = sub_100031134(*(void *)(v10 + 256), (a4 >> 35) & 0x3FFFF);
  int v21 = sub_1000307F4(v16);
  if (*(_DWORD *)(v10 + 340)) {
    sub_100031070(v16, &v162, &v160);
  }
  sub_1000334EC(*(void *)(v10 + 256), v137, (a4 >> 10) & 0x1FFFFFF, (_DWORD *)v163 + 1, v17, v18, v19, v20);
  uint64_t v22 = *(unsigned int *)(v10 + 268);
  if ((int)v22 <= (int)v137
    || (LODWORD(v23) = (a4 >> 35) & 0x3FFFF, *(_DWORD *)(*(void *)(v10 + 272) + 4 * v137) != (_DWORD)v137))
  {
    if ((int)v22 < 1)
    {
      LODWORD(v23) = 0;
    }

    else
    {
      uint64_t v23 = 0LL;
      while (*(_DWORD *)(*(void *)(v10 + 272) + 4 * v23) != (_DWORD)v137)
      {
        if (v22 == ++v23)
        {
          LODWORD(v23) = *(_DWORD *)(v10 + 268);
          break;
        }
      }
    }
  }

  int v25 = a4 & 0x3FF;
  if ((_DWORD)v23 == (_DWORD)v22) {
    int v24 = -1;
  }
  else {
    int v24 = v23;
  }
  if (qword_1000FDCC0)
  {
    BOOL v27 = (a4 & 0x3FF) == 0 && *(_DWORD *)(qword_1000FDCC0 + 1172) != 0;
    if (v25 < HIDWORD(v163[0]) - 1)
    {
LABEL_33:
      unsigned int v143 = v25 + 1;
      unsigned int v152 = sub_100030F30(v16, (a4 >> 10) & 0x1FFFFFF, v25 + 1, (_DWORD *)v163 + 1);
      if (qword_1000FDCC0 && *(void *)(qword_1000FDCC0 + 1280) <= v21 && *(_DWORD *)(qword_1000FDCC0 + 5324))
      {
        if (a5 < 1) {
          return 0LL;
        }
        uint64_t v28 = 0LL;
        uint64_t v29 = 0LL;
        uint64_t v147 = v24;
        uint64_t v144 = (a4 & 0x7FFFFFFFFFFFFC00LL) + v143;
        uint64_t v140 = (a4 & 0x7FFFFFF800000000LL | (((a4 >> 10) & 0x1FFFFFF) << 10)) + 1025;
        while (1)
        {
          int v30 = sub_10001EDF8(v151, *(unsigned __int16 *)(a6 + 2 * v28), 0LL);
          HIWORD(v159) = v30;
          if (v152 != v30) {
            goto LABEL_48;
          }
          if (v25 == HIDWORD(v163[0]) - 2)
          {
            LODWORD(v163[0]) = *(_BYTE *)(*(void *)(v10 + 296) + v147) != 0;
            if (!v27) {
              goto LABEL_42;
            }
          }

          else
          {
            LODWORD(v163[0]) = 0;
            if (!v27)
            {
LABEL_42:
              __int16 v31 = 0;
LABEL_46:
              unint64_t v32 = a8 + 24LL * (int)v29;
              *(_WORD *)unint64_t v32 = *(_WORD *)(a6 + 2 * v28);
              *(_WORD *)(v32 + 2) = v31;
              *(void *)(v32 + 8) = v144;
              *(_DWORD *)(v32 + 16) = v163[0];
              goto LABEL_47;
            }
          }

          __int16 v31 = sub_100030EF8(v16, v15);
LABEL_47:
          uint64_t v29 = (v29 + 1);
LABEL_48:
          if (v27)
          {
            uint64_t v33 = sub_1000307F4(v16) - 1;
            if ((int)v15 < (int)v33)
            {
              uint64_t v34 = v140;
              uint64_t v35 = v15;
              do
              {
                if (!sub_100030FA8(v16, v35, &v159, v163)
                  || (unsigned __int16)v159 > HIWORD(v159))
                {
                  break;
                }

                if ((unsigned __int16)v159 == HIWORD(v159))
                {
                  if ((int)v29 < a7)
                  {
                    LODWORD(v163[0]) &= *(char *)(*(void *)(v146 + 296) + v147);
                    __int16 v36 = sub_100030EF8(v16, (int)v35 + 1);
                    unint64_t v37 = a8 + 24LL * (int)v29;
                    *(_WORD *)unint64_t v37 = *(_WORD *)(a6 + 2 * v28);
                    *(_WORD *)(v37 + 2) = v36;
                    *(void *)(v37 + 8) = v34;
                    *(_DWORD *)(v37 + 16) = v163[0];
                  }

                  uint64_t v29 = (v29 + 1);
                }

                ++v35;
                v34 += 1024LL;
              }

              while (v33 != v35);
            }
          }

          ++v28;
          uint64_t v10 = v146;
          if (v28 == a5) {
            return v29;
          }
        }
      }

      BOOL v38 = v25 == HIDWORD(v163[0]) - 2 && *(_BYTE *)(*(void *)(v10 + 296) + v24) != 0;
      LODWORD(v163[0]) = v38;
      int v107 = sub_1000B32A8(v11);
      uint64_t v115 = (int16x8_t *)sub_1000CAF58(2LL * v107, v108, v109, v110, v111, v112, v113, v114);
      uint64_t v29 = sub_10001FBCC(v151, v152, v115, v107);
      if (v27)
      {
        __int16 v116 = sub_100030EF8(v16, (a4 >> 10) & 0x1FFFFFF);
        uint64_t v150 = 2LL * v107;
        if ((int)v29 < 1)
        {
LABEL_145:
          uint64_t v29 = 0LL;
LABEL_146:
          if (v27)
          {
            uint64_t v117 = (v21 - 1);
            if ((int)v15 < (int)v117)
            {
              uint64_t v156 = a4 & 0x7FFFFFF800000000LL;
              do
              {
                uint64_t v118 = v15 + 1;
                int v119 = sub_10001FBCC(v151, (unsigned __int16)v159, v115, v107);
                __int16 v120 = sub_100030EF8(v16, v15);
                if (v119 >= 1)
                {
                  int v121 = v163[0];
                  uint64_t v122 = (int)v29;
                  uint64_t v123 = v119;
                  uint64_t v124 = a8 + 8 + 24LL * (int)v29;
                  uint64_t v125 = v115;
                  do
                  {
                    if (v122 < a7)
                    {
                      *(_WORD *)(v124 - 8) = v125->i16[0];
                      *(_WORD *)(v124 - 6) = v120;
                      *(void *)uint64_t v124 = (v156 + (v118 << 10)) | 1;
                      *(_DWORD *)(v124 + 8) = v121;
                    }

                    ++v122;
                    uint64_t v125 = (int16x8_t *)((char *)v125 + 2);
                    v124 += 24LL;
                    --v123;
                  }

                  while (v123);
                  uint64_t v29 = v122;
                }

                ++v15;
              }

              while (v118 != v117);
            }
          }

          sub_1000CB038(v115, v150);
          return v29;
        }
      }

      else
      {
        __int16 v116 = 0;
        uint64_t v150 = 2LL * v107;
      }

      uint64_t v126 = 0LL;
      int v127 = v163[0];
      unint64_t v128 = a8 + 8;
      do
      {
        if (v126 < a7)
        {
          *(_WORD *)(v128 - 8) = v115->i16[v126];
          *(_WORD *)(v128 - 6) = v116;
          *(void *)unint64_t v128 = (a4 & 0x7FFFFFFFFFFFFC00LL) + v143;
          *(_DWORD *)(v128 + 8) = v127;
        }

        ++v126;
        v128 += 24LL;
      }

      while (v29 != v126);
      goto LABEL_146;
    }
  }

  else
  {
    BOOL v27 = 0;
    if (v25 < HIDWORD(v163[0]) - 1) {
      goto LABEL_33;
    }
  }

LABEL_69:
    ++v42;
  }

  while (v42 != v138);
  if (!v141)
  {
    unint64_t v68 = sub_1000CAF58(32LL * (int)v138, v49, v50, v51, v52, v53, v54, v55);
    uint64_t v69 = 0LL;
    uint64_t v70 = 4 * v40;
    do
    {
      uint64_t v71 = *(int *)(*(void *)(v10 + 304) + v70);
      unsigned int v72 = *(_DWORD *)(*(void *)(v10 + 272) + 4 * v71);
      uint64_t v73 = sub_100031134(*(void *)(v10 + 256), v72);
      int v74 = sub_1000307F4(v73);
      int v75 = *(char *)(*(void *)(v10 + 296) + v71);
      uint64_t v76 = v68 + v69;
      *(_DWORD *)uint64_t v76 = v72;
      *(void *)(v76 + 8) = v73;
      *(_DWORD *)(v76 + 16) = v74;
      *(_DWORD *)(v76 + 20) = v75;
      *(void *)(v76 + 24) = sub_100030EF0(v73);
      v70 += 4LL;
      v69 += 32LL;
    }

    while (32 * v138 != v69);
    uint64_t v77 = 0LL;
    int v78 = a5;
    uint64_t v79 = a5;
    int32x4_t v131 = (void *)v68;
    while (1)
    {
      int v80 = (unsigned int *)(v68 + 32 * v77);
      uint64_t v134 = v77;
      if (*(_DWORD *)(*((void *)v80 + 3) + 16LL) == -1 && v78 >= 1) {
        break;
      }
LABEL_101:
      uint64_t v77 = v134 + 1;
      int v78 = a5;
      unint64_t v68 = (unint64_t)v131;
      if (v134 + 1 == v138)
      {
        sub_1000CB038(v131, 32LL * (int)v138);
        return v29;
      }
    }

    unint64_t v81 = v68;
    uint64_t v82 = 0LL;
    uint64_t v83 = *((void *)v80 + 1);
    uint64_t v136 = v77 + v130;
    unint64_t v84 = v81 + 32 * v77;
    int32x4_t v154 = (_DWORD *)(v84 + 20);
    __int128 v85 = (_DWORD *)(v84 + 16);
    float32x4x3_t v142 = v80;
    while (1)
    {
      unsigned int v86 = sub_10001EDF8(v151, *(unsigned __int16 *)(a6 + 2 * v82), 0LL);
      HIWORD(v159) = v86;
      int v87 = sub_100030CA0(v83, v86, (_DWORD *)v163 + 1);
      if (v87 != 0xFFFF) {
        break;
      }
LABEL_106:
      if (++v82 == v79) {
        goto LABEL_101;
      }
    }

    int v88 = v87;
    if (*(_DWORD *)(v10 + 336))
    {
      int v89 = v29;
      int v90 = *(unsigned __int8 *)(*(void *)(v10 + 352) + v136);
      uint64_t v91 = *v80;
      if (!*(_DWORD *)(v10 + 340)) {
        goto LABEL_119;
      }
    }

    else
    {
      int v89 = v29;
      int v90 = 0;
      uint64_t v91 = *v80;
      if (!*(_DWORD *)(v10 + 340)) {
        goto LABEL_119;
      }
    }

    __int16 v158 = 0;
    sub_100031070(v83, &v161, (_DWORD *)&v160 + 1);
    if (v161)
    {
      if ((_DWORD)v137 == (_DWORD)v91) {
        sub_10005E814(v161, SHIDWORD(v160), a3, 1, (unsigned __int16 *)&v159 + 1, &v158);
      }
      else {
        sub_10005E9F4(v161, SHIDWORD(v160), 1, (unsigned __int16 *)&v159 + 1, &v158);
      }
      LOWORD(v90) = v90 - v135 + v158;
    }

    else if (v162)
    {
      int v90 = v90 - v135 + sub_10005EA2C(v162, v160, a3);
    }

            sub_10004A428(a1, v96, a5, 7, (uint64_t)v101);
          }

          if (*(_DWORD *)(a1 + 436) == a2 && *(void *)(a1 + 784))
          {
            uint64_t v33 = *(_DWORD *)(a1 + 776);
            if (v33 >= 7) {
              uint64_t v34 = 7;
            }
            else {
              uint64_t v34 = *(_DWORD *)(a1 + 776);
            }
            if (v33 >= 1)
            {
              uint64_t v35 = v33 - v34;
              __int16 v36 = v34 <= 1 ? 1 : v34;
              **(_DWORD **)(a1 + 784) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35);
              if (v34 >= 2)
              {
                *(_DWORD *)(*(void *)(a1 + 784) + 4LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 4);
                if (v36 != 2)
                {
                  *(_DWORD *)(*(void *)(a1 + 784) + 8LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 8);
                  if (v36 != 3)
                  {
                    *(_DWORD *)(*(void *)(a1 + 784) + 12LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 12);
                    if (v36 != 4)
                    {
                      *(_DWORD *)(*(void *)(a1 + 784) + 16LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 16);
                      if (v36 != 5)
                      {
                        *(_DWORD *)(*(void *)(a1 + 784) + 20LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 20);
                        if (v36 != 6) {
                          *(_DWORD *)(*(void *)(a1 + 784) + 24LL) = *(_DWORD *)(*(void *)(a1 + 768) + 4LL * v35 + 24);
                        }
                      }
                    }
                  }
                }
              }
            }

            *(_DWORD *)(a1 + 792) = v34;
          }

          if (*(_DWORD *)(a1 + 756) == 6) {
            goto LABEL_59;
          }
          int v89 = 8 * ((2LL * v95) | 1);
          unint64_t v37 = (uint64_t *)sub_1000CAF58(v89, v27, v14, v15, v16, v17, v18, v19);
          if (v95 >= 1)
          {
            BOOL v38 = 0LL;
            do
            {
              uint64_t v39 = v38;
              uint64_t v40 = 4 * v38;
              uint64_t v41 = *(_DWORD *)(a7 + 4 * v38);
              v37[v38] = sub_10002F660(*(void *)(a1 + 72), v41);
              *(_DWORD *)(a1 + 1324 + v40) = v41;
              ++*(_DWORD *)(a1 + 1320);
              BOOL v38 = v39 + 1;
            }

            while (v39 + 1 < v95);
          }

          if (v99 == 3 || v99 == 5)
          {
            uint64_t v42 = sub_10003C63C((_DWORD **)v37, v95);
            unint64_t v43 = qword_1000FDCC0;
            uint64_t v44 = qword_1000FDCC0;
            if (v99 == 3)
            {
              uint64_t v45 = v42 < 1 || qword_1000FDCC0 == 0;
              if (!v45 && *(_DWORD *)(qword_1000FDCC0 + 4728))
              {
                uint64_t v99 = 5;
                *(_DWORD *)(a1 + 756) = 10;
                *(_DWORD *)(a1 + 752) = v99;
              }
            }

            uint64_t v48 = v42 < 1 || v43 == 0;
            if (!v48 && *(_DWORD *)(v44 + 2132))
            {
              sub_100042F8C(a1);
              uint64_t v49 = sub_1000430D0(a1, v37, v95);
              v95 += v49;
            }
          }

          *(_DWORD *)(a1 + 5448) = v95;
          if (qword_1000FDCC0 && (*(_DWORD *)(qword_1000FDCC0 + 816) || *(void *)(qword_1000FDCC0 + 2320)))
          {
            sub_1000C0EF8(*(void *)(a1 + 5424));
            sub_1000C0EF8(*(void *)(a1 + 5432));
            sub_1000C0BFC(4LL * *(int *)(a1 + 5448) + 4, v50, v51, v52, v53, v54, v55, v56);
            *(void *)(a1 + 5424) = v57;
            sub_1000C0BFC(4LL * *(int *)(a1 + 5448) + 4, v58, v59, v60, v61, v62, v63, v64);
            *(void *)(a1 + 5432) = v65;
            sub_100025E90(v95, (uint64_t)v37, *(void *)(a1 + 5424), v65);
          }

          if (*(_DWORD *)(a1 + 756) != 2)
          {
            uint64_t v67 = v95 > 0;
            if (v95 < 1)
            {
LABEL_133:
              __int16 v66 = v67;
LABEL_134:
              if (v95 > 1 && qword_1000FDCC0 != 0)
              {
                if (*(_DWORD *)(qword_1000FDCC0 + 1876))
                {
                  uint64_t v70 = sub_10002AA98(v37, v95);
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    if (sub_10002F298(*(void *)(a1 + 72), v70, -1) == -1)
                    {
                      sub_1000CB038(v37, v89);
                      *(void *)(a1 + 5512) = 0LL;
                      uint64_t v13 = 1;
                      goto LABEL_108;
                    }

                    *(void *)(a1 + 5456) = v71;
                  }
                }
              }

              unsigned int v72 = *(unsigned int *)(a1 + 756);
              switch((_DWORD)v72)
              {
                case 0xB:
                  uint64_t v73 = *(void *)(a1 + 120);
                  if (!v73) {
                    goto LABEL_178;
                  }
                  break;
                case 5:
                  if (!v95) {
                    goto LABEL_178;
                  }
                  uint64_t v73 = *(void *)(a1 + 104);
                  if (!v73) {
                    goto LABEL_178;
                  }
                  break;
                case 3:
                  if (!v95) {
                    goto LABEL_178;
                  }
                  uint64_t v73 = *(void *)(a1 + 144);
                  if (!v73)
                  {
                    int v74 = *(void *)(a1 + 112);
                    *(void *)(a1 + 5512) = v74;
                    goto LABEL_154;
                  }

                  break;
                default:
                  int v74 = *(void *)(a1 + 5512);
LABEL_154:
                  int v75 = v74;
                  if (!v74)
                  {
                    sub_1000CB038(v37, v89);
                    uint64_t v13 = 4;
                    goto LABEL_108;
                  }

          if (!v13) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }
      }

      else
      {
        uint64_t v41 = v40;
        uint64_t v42 = 0;
        unint64_t v43 = 0LL;
        uint64_t v44 = *(_DWORD *)(a1 + 1048);
        while (1)
        {
          while (1)
          {
            uint64_t v45 = sub_10001FBCC( v41,  *(unsigned __int16 *)(*(void *)(a1 + 1024) + 2LL * v42),  (int16x8_t *)(*(void *)(a1 + 1040) + 2LL * (int)v43),  v44 - (int)v43);
            uint64_t v44 = *(_DWORD *)(a1 + 1048);
            unint64_t v43 = (v45 + v43);
            if (++v42 >= v36) {
              goto LABEL_55;
            }
          }

          v44 += 2 * (v36 - v42);
          uint64_t v46 = (void *)sub_1000C1074(2LL * v44);
          if (!v46) {
            break;
          }
          uint64_t v47 = v46;
          j__memmove(v46, *(const void **)(a1 + 1040), 2 * (int)v43);
          sub_1000C0EF8(*(void *)(a1 + 1040));
          *(void *)(a1 + 1040) = v47;
          *(_DWORD *)(a1 + 1048) = v44;
          if (v42 >= v36) {
            goto LABEL_55;
          }
        }
      }

      return 0LL;
    }
  }

  char *v88 = *(_DWORD *)(a1 + 112);
  if ((v85 & 1) != 0) {
    BOOL v101 = -1;
  }
  else {
    BOOL v101 = *(_DWORD *)(a1 + 136);
  }
  v88[1] = v101;
  v88[2] = v20;
  __int16 v102 = sub_10008D758(a1, v170, v167, v69, v70, v71, v72, v73);
  *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v102 >> 8)) + 2LL * v102) = v87;
  ++*(_DWORD *)(a1 + 72);
  int v163 = v87 >> 8;
  if (v171)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * v163) + v87) = v165;
  }

  int v105 = *(unsigned int *)(a1 + 112);
  int v106 = *v170;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + ((v105 >> 5) & 0x7FFFFF8)) + *(_DWORD *)(a1 + 112)) = v106;
  if (v106)
  {
    int v107 = v105 + 1;
    uint64_t v108 = v170 + 1;
    do
    {
      uint64_t v109 = *v108++;
      *(_BYTE *)(*(void *)(*v66 + 8LL * (v107 >> 8)) + v107) = v109;
      ++v107;
    }

    while (v109);
  }

  uint64_t v110 = *v166;
  *(_BYTE *)(*(void *)(*v66 + 8LL * ((v105 + v167) >> 8)) + (v105 + v167)) = v110;
  if (v110)
  {
    uint64_t v111 = v173 + v105 + 2;
    uint64_t v112 = v166 + 1;
    do
    {
      uint64_t v113 = *v112++;
      *(_BYTE *)(*(void *)(*v66 + 8LL * (v111 >> 8)) + v111) = v113;
      ++v111;
    }

    while (v113);
  }

  if (v171)
  {
    if (v165 == 16)
    {
      uint64_t v114 = *v169;
      if (v114)
      {
        uint64_t v115 = v173 + v164 + v105 + 3;
        __int16 v116 = v169 + 1;
        do
        {
          uint64_t v117 = *v116++;
          *(_BYTE *)(*(void *)(*v66 + 8LL * (v115 >> 8)) + v115) = v117;
          ++v115;
        }

        while (v117);
      }
    }
  }

  if ((v85 & 1) == 0)
  {
    uint64_t v118 = *(unsigned int *)(a1 + 136);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + ((v118 >> 5) & 0x7FFFFF8)) + *(_DWORD *)(a1 + 136)) = a5;
    int v119 = sub_10009397C((uint64_t)v168, a5);
    int v127 = (char *)sub_1000CAF58(v119, v120, v121, v122, v123, v124, v125, v126);
    sub_1000938B8((unint64_t)v168, v127, a5);
    if (v119 >= 1)
    {
      unint64_t v128 = v118 + 1;
      do
      {
        int v129 = *v127++;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * (v128 >> 8)) + v128) = v129;
        ++v128;
        --v119;
      }

      while (v119);
    }
  }

  if ((int)a5 >= 1)
  {
    uint64_t v130 = a5;
    int32x4_t v131 = v168;
    do
    {
      int v132 = sub_100099EE0(*a4);
      if (v132 > *v175) {
        *double v175 = v132;
      }
      if (v132 > *(_DWORD *)(a1 + 152)) {
        *(_DWORD *)(a1 + 152) = v132;
      }
      int32x4_t v133 = sub_1000935F4( *(void *)(a1 + 296),  *(_DWORD *)(a1 + 288),  *(void *)(a1 + 232),  *(void *)(a1 + 240),  *v131);
      if (v133 <= *a9)
      {
        if (v133 > *(_DWORD *)(a1 + 156)) {
LABEL_104:
        }
          *(_DWORD *)(a1 + 156) = v133;
      }

      else
      {
        *a9 = v133;
        if (v133 > *(_DWORD *)(a1 + 156)) {
          goto LABEL_104;
        }
      }

      ++v131;
      ++a4;
      --v130;
    }

    while (v130);
  }

  if (*(_DWORD *)(a1 + 160) >= (int)a5)
  {
    uint64_t v134 = v174;
    int v135 = v162;
    uint64_t v136 = v168;
    if (*(_DWORD *)(a1 + 164) >= (int)a5)
    {
LABEL_107:
      uint64_t v137 = v84;
LABEL_111:
      uint64_t v138 = 0LL;
      do
      {
        for (uint64_t m = v136[v138]; ; ++m)
        {
          uint64_t v140 = *m;
          if (v140 == 0xFFFF) {
            break;
          }
          int v141 = *(_DWORD *)(a1 + 288);
          float32x4x3_t v142 = __OFSUB__(v140, v141);
          unsigned int v143 = v140 - v141;
          if (!((v143 < 0) ^ v142 | (v143 == 0)))
          {
            uint64_t v144 = v143 - 1LL;
            uint64_t v145 = *(void *)(a1 + 272);
            uint64_t v146 = *(unsigned __int8 *)(v145 + v144);
            if (v146 <= 0xFD) {
              *(_BYTE *)(v145 + v144) = v146 + 1;
            }
            uint64_t v147 = *(void *)(a1 + 232);
            uint64_t v148 = *(unsigned __int16 *)(*(void *)(a1 + 240) + 2LL * v143);
            int v149 = *(unsigned __int16 *)(v147 + 2 * v148);
            if (v149 != 0xFFFF)
            {
              uint64_t v150 = (unsigned __int16 *)(v147 + 2 * v148 + 2);
              do
              {
                unsigned int v152 = ~*(_DWORD *)(a1 + 284) + v149;
                uint64_t v153 = *(void *)(a1 + 264);
                int32x4_t v154 = *(unsigned __int8 *)(v153 + v152);
                if (v154 <= 0xFD) {
                  *(_BYTE *)(v153 + v152) = v154 + 1;
                }
                uint64_t v151 = *v150++;
                int v149 = v151;
              }

              while (v151 != 0xFFFF);
            }
          }
        }

        ++v138;
      }

      while (v138 != a5);
      goto LABEL_124;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 160) = a5;
    uint64_t v134 = v174;
    int v135 = v162;
    uint64_t v136 = v168;
  }

  *(_DWORD *)(a1 + 164) = a5;
  uint64_t v137 = v84;
LABEL_124:
  int32x4_t v155 = *(_DWORD *)(a1 + 48);
  if ((int)v87 < v155)
  {
    do
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * (v155 >> 8)) + v155) = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * ((v155 - 1) >> 8)) + (v155 - 1));
      --v155;
    }

    while (v155 > (int)v87);
    if (*(void *)(a1 + 208))
    {
    }
  }

  __int16 v158 = 8LL * (v87 >> 8);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + v158) + v87) = a10;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + v158) + v87) = *(_DWORD *)(a1 + 200);
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 112) += v135;
  *(_DWORD *)(a1 + 136) += v137;
  sub_1000CB094(v134);
  return v20;
}

  uint64_t v57 = *(_DWORD *)(a1 + 604);
  if (v57 >= *(_DWORD *)(a1 + 600) - 1) {
    *(_DWORD *)(a1 + 548) = 3;
  }
  __int16 v58 = *(void *)(a1 + 592);
  if (v57 < 1)
  {
    unint64_t v62 = *(void *)(a1 + 592);
  }

  else
  {
    uint64_t v59 = 0;
    uint64_t v60 = (__int16 *)(v58 + 8);
    do
    {
      if (*v60 < 0x4000)
      {
        uint64_t v61 = *((void *)v60 - 1);
        *(_DWORD *)(v58 + 8) = *(_DWORD *)v60;
        *(void *)__int16 v58 = v61;
        v58 += 12LL;
        uint64_t v57 = *(_DWORD *)(a1 + 604);
      }

      ++v59;
      v60 += 6;
    }

    while (v59 < v57);
    unint64_t v62 = *(void *)(a1 + 592);
  }

  *(_DWORD *)(a1 + 604) = -1431655765 * ((unint64_t)(v58 - v62) >> 2);
  *(_DWORD *)(v58 + 6) = 0xFFFF;
  *(_DWORD *)(a1 + 732) = v26;
}

LABEL_119:
    uint64_t v92 = 0LL;
    uint64_t v93 = v89;
    uint64_t v94 = v145 + (v91 << 35);
    int v149 = v89;
    uint64_t v95 = a8 + 8 + 24LL * v89;
    uint64_t v96 = v94 + ((uint64_t)v88 << 10);
    while (2)
    {
      uint64_t v97 = v92;
      if (v93 + v92 < a7)
      {
        if (HIDWORD(v163[0]) == 1)
        {
          int v98 = *v154 != 0;
          LODWORD(v163[0]) = v98;
          uint64_t v99 = qword_1000FDCC0;
          if (!qword_1000FDCC0) {
            goto LABEL_130;
          }
        }

        else
        {
          int v98 = 0;
          LODWORD(v163[0]) = 0;
          uint64_t v99 = qword_1000FDCC0;
          if (!qword_1000FDCC0) {
            goto LABEL_130;
          }
        }

        int v100 = *(_DWORD *)(v99 + 1172);
        BOOL v101 = HIDWORD(v163[0]) == 1 || v100 == 0;
        __int16 v102 = v90;
        if (v101)
        {
LABEL_130:
          __int16 v102 = v90 + sub_100030EF8(v83, v88 + (int)v97);
          int v98 = v163[0];
        }

        *(_WORD *)(v95 - 8) = *(_WORD *)(a6 + 2 * v82);
        *(_WORD *)(v95 - 6) = v102;
        *(void *)uint64_t v95 = v96;
        *(_DWORD *)(v95 + 8) = v98;
      }

      if (v161
        || qword_1000FDCC0
        && (*(_DWORD *)(qword_1000FDCC0 + 1172) ? (BOOL v103 = SHIDWORD(v163[0]) <= 1) : (BOOL v103 = 1), !v103)
        || (unsigned int v104 = v88 + v97 + 1, v104 == *v85)
        || (int v105 = HIWORD(v159),
            int v106 = sub_100030F30(v83, v104, 0, (_DWORD *)v163 + 1),
            uint64_t v92 = v97 + 1,
            v96 += 1024LL,
            v95 += 24LL,
            v105 != v106))
      {
        uint64_t v29 = (v149 + v97 + 1);
        uint64_t v10 = v146;
        uint64_t v79 = a5;
        int v80 = v142;
        goto LABEL_106;
      }

      continue;
    }
  }

  return v29;
}

uint64_t sub_1000298B0(uint64_t result, int a2, __int16 a3)
{
  *(_WORD *)(result + 212) = a3;
  *(_DWORD *)(result + 208) = a2;
  return result;
}

uint64_t sub_1000298BC( uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, int a6, int *a7, _WORD *a8, int a9)
{
  int v85 = 0;
  unsigned __int16 v87 = 0;
  uint64_t v86 = 0LL;
  uint64_t v16 = sub_100033398(*(void *)(a1 + 256));
  uint64_t result = sub_10003366C(*(void *)(a1 + 256), a3, &v86, &v85);
  if (!v86) {
    return result;
  }
  unsigned int v18 = sub_1000BB868(v16, a5, 0LL);
  if (a2 != a3)
  {
    if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4548))
    {
      unsigned __int16 v87 = -3;
      uint64_t result = sub_10005E540(v86, v85, 1LL, &v87, v18);
      *a8 += result;
      return result;
    }

    a4 = 65534;
  }

  uint64_t v19 = *(unsigned int *)(a1 + 268);
  uint64_t v73 = a7;
  if ((a3 & 0x80000000) != 0 || (int)v19 <= (int)a3 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a3) != a3)
  {
    if ((int)v19 < 1)
    {
      a3 = 0;
    }

    else
    {
      uint64_t v20 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v20) != a3)
      {
        if (v19 == ++v20)
        {
          a3 = *(_DWORD *)(a1 + 268);
          goto LABEL_17;
        }
      }

      a3 = v20;
    }
  }

uint64_t sub_100029F28(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v3 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) != a2)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v4 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
      {
        if (v3 == ++v4) {
          return 0LL;
        }
      }

      if ((_DWORD)v4 == (_DWORD)v3) {
        return 0LL;
      }
      goto LABEL_16;
    }

    a2 = 0;
  }

  if (a2 == (_DWORD)v3) {
    LODWORD(v4) = -1;
  }
  else {
    LODWORD(v4) = a2;
  }
  if (a2 == (_DWORD)v3) {
    return 0LL;
  }
LABEL_16:
  if (a3 < 0 || (int)v3 <= a3 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a3) != a3)
  {
    if ((int)v3 >= 1)
    {
      uint64_t v5 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v5) != a3)
      {
        if (v3 == ++v5) {
          return 0LL;
        }
      }

      a3 = v5;
      BOOL v8 = (_DWORD)v5 == (_DWORD)v3;
      if ((_DWORD)v5 == (_DWORD)v3) {
        int v7 = -1;
      }
      else {
        int v7 = v5;
      }
      if (v8) {
        return 0LL;
      }
      goto LABEL_34;
    }

    a3 = 0;
  }

  BOOL v6 = a3 == (_DWORD)v3;
  if (a3 == (_DWORD)v3) {
    int v7 = -1;
  }
  else {
    int v7 = a3;
  }
  if (v6) {
    return 0LL;
  }
LABEL_34:
  if (!a3) {
    return *(char *)(*(void *)(a1 + 296) + (int)v4);
  }
  uint64_t v9 = (int *)(*(void *)(a1 + 288) + 4LL * (int)v4);
  int v10 = v9[1];
  uint64_t v11 = *v9;
  uint64_t v12 = (int *)(*(void *)(a1 + 304) + 4 * v11);
  int v13 = v10 - v11;
  while (1)
  {
    int v14 = *v12++;
    if (v14 == v7) {
      break;
    }
    uint64_t result = 0LL;
    if (!--v13) {
      return result;
    }
  }

  return 1LL;
}

uint64_t sub_10002A068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C1074(448LL);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 4) = 0u;
    *(_DWORD *)(v4 + 376) = 1;
    *(void *)(v4 + 256) = a2;
    *(_OWORD *)(v4 + 20) = 0u;
    *(_OWORD *)(v4 + 36) = 0u;
    *(_OWORD *)(v4 + 52) = 0u;
    if (sub_1000BCE28(a1, (void *)(v4 + 4), 64, 1) && sub_100027030(v5, (unsigned __int8 *)(v5 + 4)))
    {
      if (sub_1000BCD38(a1, (void *)(v5 + 76)))
      {
        BOOL v6 = (_DWORD *)(v5 + 264);
        if (sub_1000BCD38(a1, (void *)(v5 + 264)) && sub_1000BCD38(a1, (void *)(v5 + 268)))
        {
          int v7 = (_DWORD *)(v5 + 368);
          if (sub_1000BCD38(a1, (void *)(v5 + 368))
            && sub_1000BCD38(a1, (void *)(v5 + 372))
            && sub_1000BCD38(a1, (void *)(v5 + 336))
            && sub_1000BCD38(a1, (void *)(v5 + 340))
            && sub_1000BCD38(a1, (void *)(v5 + 348)))
          {
            int v10 = 0;
            if (sub_1000BCD38(a1, &v10))
            {
              int v9 = 0;
              if (sub_1000BCED0(a1, 4, (uint64_t *)(v5 + 272), &v9))
              {
                if (!*(void *)(v5 + 272) || v9 == *v6)
                {
                  int v9 = 0;
                  if (sub_1000BCED0(a1, 4, (uint64_t *)(v5 + 288), &v9)
                    && (!*(void *)(v5 + 288) || v9 == *v6 + 1))
                  {
                    int v9 = 0;
                    if (sub_1000BCED0(a1, 1, (uint64_t *)(v5 + 296), &v9)
                      && (!*(void *)(v5 + 296) || v9 == *v6))
                    {
                      int v9 = 0;
                      if (sub_1000BCED0(a1, 4, (uint64_t *)(v5 + 304), &v9)
                        && (!*(void *)(v5 + 304) || v9 == *v7))
                      {
                        if (!*(_DWORD *)(v5 + 336)
                          || (int v9 = 0, sub_1000BCED0(a1, 1, (uint64_t *)(v5 + 352), &v9))
                          && (!*(void *)(v5 + 352) || v9 == *v7)
                          && (int v9 = 0, sub_1000BCED0(a1, 1, (uint64_t *)(v5 + 360), &v9))
                          && (!*(void *)(v5 + 360) || v9 == *v6))
                        {
                          if (v10)
                          {
                            int v9 = 0;
                            sub_1000BCED0(a1, 4, (uint64_t *)(v5 + 280), &v9);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      *(_DWORD *)(v5 + 248) = 1;
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_10002A328(uint64_t a1)
{
  return *(unsigned int *)(a1 + 340);
}

uint64_t sub_10002A330( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[38];
  uint64_t result = sub_10003114C(a1[32], a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    uint64_t result = 0LL;
    uint64_t v18 = 0LL;
    int v17 = 0;
    uint64_t v11 = (unsigned int *)a1[36];
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (v12 < v13)
    {
      int v14 = (int *)(v9 + 4 * v12);
      uint64_t v15 = v13 - v12;
      while (1)
      {
        uint64_t v16 = *v14++;
        sub_10003366C(a1[32], *(_DWORD *)(a1[34] + 4 * v16), &v18, &v17);
        if (v18) {
          break;
        }
        if (!--v15) {
          return 0LL;
        }
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t sub_10002A3D8( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1[38];
  uint64_t v16 = 0LL;
  if (sub_10003114C(a1[32], a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t v27 = 0LL;
    int v17 = (unsigned int *)a1[36];
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (v18 < v19)
    {
      LODWORD(v16) = 0;
      if (a2)
      {
        do
        {
          uint64_t v24 = *(unsigned int *)(a1[34] + 4LL * *(int *)(v10 + 4 * v18));
          sub_1000333A0(a1[32], v24, (_DWORD *)&v27 + 1, v11, v12, v13, v14, v15);
          int v25 = HIDWORD(v27);
          if (SHIDWORD(v27) >= 1)
          {
            uint64_t v26 = 0LL;
            do
            {
              *(_WORD *)(a2 + 2LL * (int)v16 + 2 * v26) = sub_100033588(a1[32], v24, v26, 0LL, &v27, v13, v14, v15);
              ++v26;
              int v25 = HIDWORD(v27);
            }

            while (v26 < SHIDWORD(v27));
          }

          uint64_t v16 = (v25 + v16);
          ++v18;
        }

        while (v18 != v19);
      }

      else
      {
        uint64_t v20 = (int *)(v10 + 4 * v18);
        uint64_t v21 = v19 - v18;
        do
        {
          uint64_t v22 = *v20++;
          sub_1000333A0(a1[32], *(unsigned int *)(a1[34] + 4 * v22), (_DWORD *)&v27 + 1, v11, v12, v13, v14, v15);
          uint64_t v16 = (HIDWORD(v27) + v16);
          --v21;
        }

        while (v21);
      }
    }
  }

  return v16;
}

BOOL sub_10002A4F4(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v2 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) != a2)
  {
    if ((int)v2 < 1)
    {
      a2 = 0;
    }

    else
    {
      uint64_t v3 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v3) != a2)
      {
        if (v2 == ++v3)
        {
          a2 = *(_DWORD *)(a1 + 268);
          goto LABEL_11;
        }
      }

      a2 = v3;
    }
  }

uint64_t sub_10002A574(uint64_t result, uint64_t a2)
{
  if ((int)result >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v5 == 3 && *(int *)(v5 + 268) >= 2)
      {
        uint64_t v6 = 1LL;
        do
          uint64_t result = sub_100031EA0(*(void *)(v5 + 256), *(_DWORD *)(*(void *)(v5 + 272) + 4 * v6++));
        while (v6 < *(int *)(v5 + 268));
      }

      ++v3;
    }

    while (v3 != v4);
  }

  return result;
}

uint64_t sub_10002A604(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  BOOL v8 = (uint64_t *)sub_100033398(*(void *)(a1 + 256));
  uint64_t v9 = qword_1000FDCC0;
  if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4452))
  {
    LODWORD(v14) = *(_DWORD *)(a1 + 268);
    if ((int)v14 >= 2)
    {
      uint64_t v15 = 1LL;
      do
      {
        uint64_t v16 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v15));
        sub_10003080C(v16);
        ++v15;
        uint64_t v14 = *(int *)(a1 + 268);
      }

      while (v15 < v14);
      uint64_t v9 = qword_1000FDCC0;
    }

    if (v9 && *(_DWORD *)(v9 + 4544) && *(_DWORD *)(a1 + 340))
    {
      uint64_t v17 = *(int *)(a1 + 312);
      if (*(void *)(v9 + 4136) - 1LL <= v17) {
        return 0LL;
      }
      uint64_t result = 1LL;
      *(_DWORD *)(a1 + 312) = v17 + 1;
      if ((_DWORD)v17 != -1 && (int)v14 >= 2)
      {
        uint64_t v18 = 1LL;
        do
        {
          uint64_t v20 = *(void *)(a1 + 328);
          uint64_t v21 = (unint64_t *)(v20 + (v18 << 6));
          unint64_t v19 = *v21;
          if (*v21)
          {
            uint64_t v22 = 2LL * *(int *)(a1 + 312);
            uint64_t v24 = (unsigned __int16 *)(v22 + v19 - 2);
            int v23 = *v24;
            LODWORD(v19) = *(unsigned __int16 *)(v22 + v19);
            if ((int)v19 - v23 >= 2)
            {
              sub_10002A898((uint64_t)v21, v23, (v19 - 1));
              unint64_t v19 = *v24;
              unsigned int v25 = v19 + 1;
              unsigned int v26 = v24[1];
              if ((int)v19 + 1 < v26)
              {
                uint64_t v27 = v20 + (v18 << 6);
                uint64_t v29 = *(void *)(v27 + 8);
                uint64_t v28 = (void *)(v27 + 8);
                uint64_t v30 = (unsigned __int16 *)(*(void *)(v29 + ((v19 >> 7) & 0x1F8)) + 12 * (v19 & 0x3FF));
                do
                {
                  __int16 v31 = (unsigned __int16 *)(*(void *)(*v28 + 8LL * (v25 >> 10)) + 12LL * (v25 & 0x3FF));
                  if (*v31 != *v30)
                  {
                    LODWORD(v19) = v19 + 1;
                    uint64_t v30 = (unsigned __int16 *)(*(void *)(*v28 + 8LL * (v19 >> 10)) + 12 * (v19 & 0x3FF));
                    uint64_t v32 = *(void *)v31;
                    *((_DWORD *)v30 + 2) = *((_DWORD *)v31 + 2);
                    *(void *)uint64_t v30 = v32;
                    unsigned int v26 = v24[1];
                  }

                  ++v25;
                }

                while (v25 < v26);
              }

              LOWORD(v19) = v19 + 1;
              v24[1] = v19;
            }

            v24[2] = v19;
          }

          ++v18;
          uint64_t result = 1LL;
        }

        while (v18 < *(int *)(a1 + 268));
      }

      return result;
    }

    return 1LL;
  }

  if (*(_DWORD *)(a1 + 340) && *(_DWORD *)(a1 + 440) < a3)
  {
    uint64_t result = sub_1000C1074(2LL * a3);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    sub_1000C0EF8(*(void *)(a1 + 432));
    *(void *)(a1 + 432) = v11;
    *(_DWORD *)(a1 + 440) = a3;
  }

  if (*(int *)(a1 + 268) < 2)
  {
LABEL_12:
    ++*(_DWORD *)(a1 + 312);
    return 1LL;
  }

  else
  {
    uint64_t v12 = 1LL;
    while (1)
    {
      uint64_t v13 = sub_100031134(*(void *)(a1 + 256), *(_DWORD *)(*(void *)(a1 + 272) + 4 * v12));
      uint64_t result = sub_100030818(v13, a3, a2, a4, v8);
      if (!(_DWORD)result) {
        break;
      }
    }
  }

  return result;
}

uint64_t sub_10002A898(uint64_t a1, int a2, uint64_t a3)
{
  while (1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a1;
    uint64_t v5 = *(void *)(a1 + 8);
    int v7 = *v6;
    int v8 = *((_DWORD *)v6 + 1);
    int v9 = (__int16)v6[4];
    unsigned int v10 = a3;
    unsigned int v11 = a2;
LABEL_2:
    unsigned int v12 = v11 + 1;
    unsigned int v13 = v10 - v11;
    do
    {
      unsigned int v14 = v11;
      unsigned int v15 = v12;
      unsigned int v16 = v13;
      uint64_t v17 = *(void *)(v5 + 8LL * (v11 >> 10));
      uint64_t v18 = (unsigned __int16 *)(v17 + 12LL * (v11 & 0x3FF));
      int v19 = *v18 - v7;
      if (!v19)
      {
        int v19 = *(__int16 *)(v17 + 12LL * (v11 & 0x3FF) + 8) - v9;
        if (!v19) {
          int v19 = *(_DWORD *)(v17 + 12LL * (v11 & 0x3FF) + 4) - v8;
        }
      }

      ++v11;
      unsigned int v12 = v15 + 1;
      --v13;
    }

    while (v19 < 0);
    ++v10;
    do
    {
      unsigned int v20 = v16;
      uint64_t v21 = *(void *)(v5 + 8LL * (--v10 >> 10));
      uint64_t v22 = (unsigned __int16 *)(v21 + 12LL * (v10 & 0x3FF));
      uint64_t result = *v22;
      int v24 = result - v7;
      if ((_DWORD)result == v7)
      {
        int v25 = *(__int16 *)(v21 + 12LL * (v10 & 0x3FF) + 8);
        int v24 = v25 - v9;
        if (v25 == v9) {
          int v24 = *(_DWORD *)(v21 + 12LL * (v10 & 0x3FF) + 4) - v8;
        }
      }

      unsigned int v16 = v20 - 1;
    }

    while (v24 > 0);
    if (v14 == v10)
    {
      unsigned int v10 = v11 - 1;
    }

    else
    {
      uint64_t v26 = v21 + 12LL * (v10 & 0x3FF);
      uint64_t v27 = (__int16 *)(v26 + 8);
      uint64_t v28 = (_DWORD *)(v26 + 4);
      do
      {
        int v29 = *v18 - (_DWORD)result;
        if (!v29)
        {
          int v29 = (__int16)v18[4] - *v27;
          if (!v29) {
            int v29 = *((_DWORD *)v18 + 1) - *v28;
          }
        }

        if (v29)
        {
          uint64_t v30 = *(void *)v18;
          int v32 = *((_DWORD *)v18 + 2);
          int v31 = *((_DWORD *)v22 + 2);
          *(void *)uint64_t v18 = *(void *)v22;
          *((_DWORD *)v18 + 2) = v31;
          *(void *)uint64_t v22 = v30;
          *((_DWORD *)v22 + 2) = v32;
          uint64_t v5 = *(void *)(v4 + 8);
          unsigned int v11 = v15 - 1;
          goto LABEL_2;
        }

        uint64_t v18 = (unsigned __int16 *)(*(void *)(v5 + 8LL * (v15 >> 10)) + 12LL * (v15 & 0x3FF));
        ++v15;
        --v20;
      }

      while (v20);
      if ((int)(v10 - 1) > a2) {
LABEL_22:
      }
        uint64_t result = sub_10002A898(v4);
    }

    a2 = v10 + 1;
    a1 = v4;
    a3 = v3;
  }

uint64_t sub_10002AA98(void *a1, int a2)
{
  if (a2 >= 1)
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = a2;
    int v8 = a1;
    while (1)
    {
      int v9 = (_DWORD *)*v8;
      if (*(_DWORD *)*v8 != 3) {
        break;
      }
      uint64_t v10 = *((void *)v9 + 32);
      if (v10 != *(void *)(*a1 + 256LL)) {
        break;
      }
      v4 += v9[93];
      int v5 = v5 + v9[67] - 1;
      if (v9[84]) {
        int v3 = 1;
      }
      ++v8;
      if (!--v7)
      {
        uint64_t v11 = sub_100026E48(0LL, v10, v5, v4, v3);
        if (!v11) {
          return v11;
        }
        uint64_t v12 = 0LL;
        while (1)
        {
          uint64_t v13 = a1[v12];
LABEL_28:
          if (++v12 == v6) {
            return v11;
          }
        }

        uint64_t v14 = 0LL;
        while (sub_100027B84(v11, *(_DWORD *)(*(void *)(v13 + 272) + 4 * v14), &v24))
        {
          ++v14;
          uint64_t v15 = *(int *)(v13 + 268);
          if (v14 >= v15)
          {
            uint64_t v16 = 0LL;
            while (1)
            {
              int v17 = *(_DWORD *)(*(void *)(v13 + 272) + 4 * v16);
              uint64_t v18 = *(void *)(v13 + 288);
              uint64_t v19 = *(int *)(v18 + 4 * v16);
              uint64_t v20 = v16 + 1;
              uint64_t v21 = *(int *)(v18 + 4 * (v16 + 1));
LABEL_22:
              if (*(_BYTE *)(*(void *)(v13 + 296) + v16))
              {
                if (*(_DWORD *)(v13 + 336))
                {
                }

                else if (!sub_100027AB4(v11, v17, 0, 0))
                {
                  goto LABEL_30;
                }
              }

              ++v16;
            }

            while (1)
            {
              int v22 = *(_DWORD *)(v13 + 336) ? *(unsigned __int8 *)(*(void *)(v13 + 352) + v19) : 0;
              if (!sub_100027AB4( v11,  v17,  *(_DWORD *)(*(void *)(v13 + 272) + 4LL * *(int *)(*(void *)(v13 + 304) + 4 * v19)),  v22)) {
                goto LABEL_30;
              }
              if (v21 == ++v19) {
                goto LABEL_22;
              }
            }
          }
        }

uint64_t sub_10002AC8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v49[0] = 0;
  uint64_t v48 = 0LL;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v41 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v11 = sub_100026150(a1, 0LL);
  if (a2 >= 1)
  {
    unint64_t v12 = v11;
    uint64_t v13 = 0LL;
    __int16 v14 = 0;
    LODWORD(v15) = 0;
    LODWORD(v16) = 0;
    int v29 = 0;
    unsigned __int16 v17 = -2;
    uint64_t v18 = a2;
    while (1)
    {
      if (*(_DWORD *)a1 == 3)
      {
        *(void *)&__int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
        WORD2(v48) = 0x4000;
      }

      unsigned int v20 = *(unsigned __int16 *)(a3 + 2 * v13);
      DWORD2(v45) = 0;
      sub_10002E394(a1, (uint64_t)&v35, v17, v12, v20);
      DWORD1(v40) = a7;
LABEL_6:
      v14 += WORD1(v34[0]);
      unsigned __int16 v17 = *(_WORD *)(a3 + 2 * v13);
      unint64_t v12 = *((void *)&v34[0] + 1);
      if (++v13 == v18) {
        return (__int16)(sub_10002B558(a1, v15, v16, v29) + v14);
      }
    }

    int v25 = (v12 & 0x3FF) + 1;
    while (1)
    {
      uint64_t v26 = *((void *)&v34[0] + 1);
      uint64_t v15 = (*((void *)&v34[0] + 1) >> 35) & 0x3FFFFLL;
      if ((_DWORD)v15 != *(_DWORD *)(a4 + 4 * v13)) {
        goto LABEL_12;
      }
      uint64_t v16 = (*((void *)&v34[0] + 1) >> 10) & 0x1FFFFFFLL;
      if ((_DWORD)v16 == *(_DWORD *)(a5 + 4 * v13))
      {
        int v27 = WORD4(v34[0]) & 0x3FF;
        int v29 = v27;
        if (*(_BYTE *)(a6 + v13)) {
          goto LABEL_20;
        }
      }

      else
      {
        if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1172))
        {
          sub_1000334EC( *(void *)(a1 + 256),  (*((void *)&v34[0] + 1) >> 35) & 0x3FFFFLL,  (*((void *)&v34[0] + 1) >> 10) & 0x1FFFFFFLL,  v49,  v21,  v22,  v23,  v24);
          if (v49[0] >= 2 && !sub_1000336A8(*(void *)(a1 + 256), v15)) {
            goto LABEL_12;
          }
        }

        *((void *)&v34[0] + 1) = ((v26 & 0x7FFFFFF800000000LL)
                                  + ((unint64_t)*(unsigned int *)(a5 + 4 * v13) << 10)) & 0xFFFFFFFFFFFFFC00LL | v26 & 0x3FF;
        int v27 = WORD4(v34[0]) & 0x3FF;
        int v29 = v27;
        if (*(_BYTE *)(a6 + v13))
        {
LABEL_20:
          if (!v27) {
            goto LABEL_5;
          }
          goto LABEL_12;
        }
      }

      if (v27 == v25)
      {
        int v29 = v25;
        goto LABEL_6;
      }

      if (!v27)
      {
        uint64_t v33 = 0LL;
        int v32 = 0;
        sub_10003366C(*(void *)(a1 + 256), *(_DWORD *)(a4 + 4 * v13), &v33, &v32);
        if (v33)
        {
LABEL_5:
          int v29 = 0;
          goto LABEL_6;
        }
      }

uint64_t sub_10002AF04(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a2 + 168) = 0;
  return sub_10002E394(a1, a2, a3, a4, a5);
}

uint64_t sub_10002AF0C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = sub_100033398(*(void *)(a2 + 256));
  uint64_t v7 = (uint64_t *)(a1 + 192);
  int v9 = *(_DWORD *)(a1 + 104);
  int v8 = *(_DWORD *)(a1 + 108);
LABEL_2:
  if (v8 == v9)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 68);
    signed int v11 = v10 + 1;
    *(_DWORD *)(a1 + 68) = v10 + 1;
    if (!v9) {
      return 0LL;
    }
    int v45 = 0;
    unsigned __int16 v44 = 0;
    int v43 = 0;
    if (*(_DWORD *)(a1 + 116))
    {
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 1172))
        {
          if (!*(_DWORD *)(a1 + 36))
          {
            signed int v12 = *(_DWORD *)(a1 + 40);
            if (v12 < *(_DWORD *)(a1 + 72) - 1)
            {
              if (sub_100030FA8(*(void *)(a1 + 48), v12, &v44, &v43))
              {
                ++*(_DWORD *)(a1 + 40);
                unsigned int v13 = v44;
                *(_WORD *)(a1 + 76) = v44;
                *(_DWORD *)(a1 + 80) = v43 & *(char *)(*(void *)(a2 + 296) + *(int *)(a1 + 56));
                *(_DWORD *)(a1 + 104) = sub_10001FE60(*(void *)a1, v13);
                *(void *)(a1 + 96) = (((unint64_t)*(unsigned int *)(a1 + 44) << 35)
                *(void *)(a1 + 160) = 0LL;
                *(void *)(a1 + 108) = &_mh_execute_header;
                goto LABEL_74;
              }
            }
          }
        }
      }

      return 0LL;
    }

    if (*(__int16 *)(a1 + 120) == -1)
    {
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1172))
      {
        signed int v11 = *(_DWORD *)(a1 + 68) + sub_100031084(*(void *)(a1 + 48), v10);
        *(_DWORD *)(a1 + 68) = v11;
      }

      *(_DWORD *)(a1 + 108) = 0;
      *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 90);
      if (v11 == *(_DWORD *)(a1 + 72))
      {
LABEL_28:
        while (1)
        {
          int v15 = *(_DWORD *)(a1 + 64);
          int v16 = *(_DWORD *)(a1 + 60) + 1;
          *(_DWORD *)(a1 + 60) = v16;
          if (v16 >= v15) {
            break;
          }
          int v17 = *(_DWORD *)(*(void *)(a2 + 288) + 4LL * *(int *)(a1 + 32)) + v16;
          uint64_t v18 = *(int *)(*(void *)(a2 + 304) + 4LL * v17);
          *(_DWORD *)(a1 + 56) = v18;
          unsigned int v19 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v18);
          *(_DWORD *)(a1 + 44) = v19;
          if (*(_DWORD *)(a2 + 340))
          {
            sub_10003366C(*(void *)(a2 + 256), v19, (void *)(a1 + 192), (_DWORD *)(a1 + 200));
            unsigned int v19 = *(_DWORD *)(a1 + 44);
          }

          uint64_t v20 = sub_100031134(*(void *)(a2 + 256), v19);
          *(void *)(a1 + 48) = v20;
          int v21 = *(_DWORD *)(a2 + 336);
          if (v21) {
            LOWORD(v21) = *(unsigned __int8 *)(*(void *)(a2 + 352) + v17);
          }
          *(_WORD *)(a1 + 88) = v21;
          *(_WORD *)(a1 + 90) = v21;
          int v22 = sub_1000307F4(v20);
          *(_DWORD *)(a1 + 72) = v22;
          if (v22 >= 1)
          {
            *(void *)(a1 + 160) = 0LL;
            if (*(_DWORD *)(a1 + 168))
            {
              uint64_t v23 = sub_1000336A8(*(void *)(a2 + 256), *(_DWORD *)(a1 + 44));
              *(void *)(a1 + 160) = v23;
              if (v23)
              {
                *(_DWORD *)(a1 + 104) = 1;
                uint64_t v32 = *(int *)(a1 + 56);
                *(_DWORD *)(a1 + 80) = *(char *)(*(void *)(a2 + 296) + v32);
                if (qword_1000FDCC0)
                {
                  if (*(_DWORD *)(qword_1000FDCC0 + 4544))
                  {
                    if (*(_DWORD *)(a2 + 340))
                    {
                      if (*v7)
                      {
                        uint64_t v33 = (uint64_t *)(*(void *)(a2 + 328) + (v32 << 6));
                        __int128 v40 = v33 + 1;
                        __int128 v41 = (const void *)*v33;
                        unint64_t v34 = *(unsigned __int16 *)(*v33 + 2LL * *(int *)(a2 + 312) + 2);
                        if (sub_1000C1744( (const void **)v33 + 1,  (int *)v33 + 4,  (signed int *)v33 + 5,  10,  12,  (int)v34 + 1))
                        {
                          if (*(void *)(a1 + 176) == *(void *)(a1 + 192)) {
                            __int16 v35 = *(_WORD *)(a1 + 28);
                          }
                          else {
                            __int16 v35 = -2;
                          }
                          uint64_t v36 = *(void *)(*v40 + ((v34 >> 7) & 0x1F8)) + 12 * (v34 & 0x3FF);
                          *(_WORD *)uint64_t v36 = v35;
                          *(_DWORD *)(v36 + 4) = *(_DWORD *)(a1 + 208);
                          *(_WORD *)(v36 + 8) = *(_WORD *)(a1 + 212);
                          uint64_t v37 = (uint64_t)v41 + 2 * *(int *)(a2 + 312);
                          ++*(_WORD *)(v37 + 2);
                        }
                      }
                    }
                  }
                }

                goto LABEL_74;
              }
            }

            if (*(__int16 *)(a1 + 120) == -1)
            {
              int v24 = 0;
LABEL_40:
              *(_DWORD *)(a1 + 68) = v24;
              int v16 = *(_DWORD *)(a1 + 60);
              int v15 = *(_DWORD *)(a1 + 64);
              break;
            }

            int v24 = sub_100030CA0(*(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 76), &v45);
            if (v24 != 0xFFFF) {
              goto LABEL_40;
            }
          }
        }

        if (v16 == v15) {
          return 0LL;
        }
        signed int v11 = *(_DWORD *)(a1 + 68);
      }

LABEL_74:
    int v9 = *(_DWORD *)(a1 + 104);
    int v8 = *(_DWORD *)(a1 + 108);
  }

  *((_DWORD *)a3 + 4) = *(_DWORD *)(a1 + 80);
  *((void *)a3 + 1) = *(void *)(a1 + 96);
  *((void *)a3 + 3) = *(void *)(a1 + 160);
  a3[1] = *(_WORD *)(a1 + 88);
  if (*(void *)(a1 + 160))
  {
    *(void *)(a1 + 104) = 0x100000001LL;
    *(void *)(a1 + 68) = &_mh_execute_header;
  }

  else if (*(_DWORD *)(a1 + 112))
  {
    a3[1] += sub_100030EF8(*(void *)(a1 + 48), *(_DWORD *)(a1 + 68));
  }

  return 1LL;
}

  uint64_t v96 = (int *)&v99;
  unsigned int v75 = v27 - 1;
  j__memmove((char *)&v104 + 8, (char *)&v104 + 9, v27 - 1);
  *((_BYTE *)&v104 + v75 + 8) = 0;
LABEL_75:
  int v76 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v76 = *(void *)(qword_1000FDCC0 + 4008);
  }
  uint64_t result = sub_1000C1074((uint64_t)(int)v76 << 7);
  if (!result) {
    goto LABEL_3;
  }
  uint64_t v77 = (_DWORD *)result;
  unsigned int v78 = *(void *)(*(void *)(a1 + 536) + 472LL);
  if (!v78) {
    unsigned int v78 = *(void *)(a1 + 472);
  }
  if ((int)a2 > 1 || !v24)
  {
    if (!qword_1000FDCC0)
    {
      int v85 = 0;
LABEL_90:
      uint64_t v86 = sub_1000D11F8(v78, (_DWORD *)result, v85, *(unsigned __int16 *)(a1 + 456), 0LL, 0);
      unsigned __int16 v87 = 0;
      int v98 = v86;
      int v88 = (__int128 *)v96;
      if (v96 && v86)
      {
        uint64_t v89 = sub_100023978(v96, v77, *(_DWORD *)(a1 + 564));
        int v88 = (__int128 *)v96;
        unsigned __int16 v87 = v89;
      }

      int v90 = qword_1000FDCC0;
      if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1712))
      {
        sub_100023A0C(*(void *)(v78 + 96), v88, v77, (int *)&v98, a2);
        int v90 = qword_1000FDCC0;
      }

      uint64_t v91 = *(void *)(a1 + 544);
      if (v91)
      {
        if (v90)
        {
          uint64_t v92 = *(_WORD *)(v90 + 1496);
          uint64_t v93 = *(_WORD *)(v90 + 1704);
          LODWORD(v90) = *(_DWORD *)(v90 + 4600);
        }

        else
        {
          uint64_t v93 = 0;
          uint64_t v92 = 0;
        }

        sub_100052200(v91, &v98, (uint64_t)v77, *(void *)(a1 + 480), *(_DWORD *)(a1 + 568), a1 + 572, v92, v93, v90);
        int v90 = qword_1000FDCC0;
      }

      if (v90 && *(_DWORD *)(v90 + 4596) && (!*(_DWORD *)(v90 + 4216) || !v87))
      {
        uint64_t v95 = *(void *)(v90 + 4104);
        sub_10003B194(a1, 0LL, v77, (int *)&v98);
      }

      goto LABEL_110;
    }

      if (v60 && v66) {
        sub_10009CAD8(*(void *)(a1 + 9000), v47, v59);
      }
      goto LABEL_79;
    }
  }

  sub_1000CB038(v61, v59);
  if (a3 != 6 || v91 == -1)
  {
    if (a3 != 6 && *(void *)(a1 + 312))
    {
      sub_100099B6C(a1, (uint64_t)a4, (int *)&v94, v77, v78, v79, v80, v81);
      LODWORD(v22) = (_DWORD)v94;
    }
  }

  else
  {
    if ((int)v22 > v91)
    {
      uint64_t v82 = (int)v22;
      do
      {
        a4[v82] = a4[v82 - 1];
        --v82;
      }

      while (v82 > v91);
    }

    a4[v91] = *(_WORD *)(a1 + 184);
    LODWORD(v22) = v22 + 1;
  }

  *a5 = v22;
  return 1LL;
}

    int v49 = v171;
    if ((int)v171 >= 1025)
    {
      int v49 = 1024;
      LODWORD(v171) = 1024;
    }

    if (v47 || v49 < 1) {
      goto LABEL_204;
    }
    if (key[0] == -1)
    {
      __int128 v47 = 0;
      goto LABEL_204;
    }

    Value = CFDictionaryGetValue(a8, (const void *)key[0]);
    if (!Value)
    {
      __int128 v47 = 0;
      goto LABEL_203;
    }

    int v164 = Value;
    unsigned int v51 = (const __CFString *)*((void *)Value + 2);
    float64x2_t v157 = v51;
    if (v51)
    {
      CFRetain(v51);
      uint64_t v162 = CFStringGetLength(v51) + 1;
    }

    else
    {
      uint64_t v162 = 0LL;
    }

    cf1 = 0LL;
    uint64_t v174 = 0LL;
    if ((int)v171 < 1)
    {
      __int128 v47 = 0;
      goto LABEL_197;
    }

    uint64_t v161 = v41;
    uint64_t v52 = 0LL;
    uint64_t v53 = 0;
    while (1)
    {
      unint64_t v54 = v188[v52];
      if ((_DWORD)v54 == -1) {
        goto LABEL_93;
      }
      if (*v19) {
        uint64_t v55 = **v19;
      }
      else {
        uint64_t v55 = 0LL;
      }
      int v56 = (unsigned __int8 *)*(&v181 + v52);
      uint64_t v57 = sub_100045198(v55, v56, v54, 1024, v199);
      if ((_DWORD)v57)
      {
        uint64_t v58 = v57;
        unsigned int v59 = (os_log_s *)VSGetLogDefault(v57);
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          goto LABEL_93;
        }
        int32x4_t v191 = 67109890;
        int32x4_t v192 = v58;
        uint64_t v193 = 2080;
        uint64_t v194 = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
        uint64_t v195 = 1024;
        int v196 = 1985;
        int v197 = 2080;
        signed int v198 = "converting phrase id to text\n";
        uint64_t v93 = v59;
        uint64_t v94 = "Error %d at %s:%d (%s)\n";
        uint64_t v95 = 34;
LABEL_141:
        _os_log_error_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, v94, (uint8_t *)&v191, v95);
        goto LABEL_93;
      }

      if (!*(_WORD *)v199)
      {
        uint64_t v92 = (os_log_s *)VSGetLogDefault(v57);
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_93;
        }
        LOWORD(v191) = 0;
        uint64_t v93 = v92;
        uint64_t v94 = "word has zero length!\n";
        uint64_t v95 = 2;
        goto LABEL_141;
      }

      unsigned int v62 = 1LL;
      do
        unsigned int v63 = v62;
      while (*(unsigned __int16 *)&v199[2 * v62++]);
      unsigned __int16 v65 = CFStringCreateWithCharacters(kCFAllocatorDefault, (const UniChar *)v199, v63);
      if (v65)
      {
        Mutable = (CFMutableStringRef)v65;
        sub_1000DCC50((uint64_t)v164, (char *)v56, v162, (CFMutableArrayRef *)&v174, (CFMutableArrayRef *)&cf1, v65);
        uint64_t v67 = v52 + 1;
LABEL_134:
        CFRelease(Mutable);
        goto LABEL_136;
      }

  if (v38)
  {
    char *v38 = v10;
  }

  else if (v10)
  {
    CFRelease(v10);
  }

  return cf;
}

uint64_t sub_10002B558(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v8 = *(unsigned int *)(a1 + 268);
    if ((a2 & 0x80000000) != 0
      || (int)v8 <= (int)a2
      || (LODWORD(v9) = a2, *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) != a2))
    {
      if ((int)v8 < 1)
      {
        LODWORD(v9) = 0;
      }

      else
      {
        uint64_t v9 = 0LL;
        while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v9) != a2)
        {
          if (v8 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(a1 + 268);
            break;
          }
        }
      }
    }

    if ((_DWORD)v9 == (_DWORD)v8) {
      int v11 = -1;
    }
    else {
      int v11 = v9;
    }
    __int16 v10 = *(unsigned __int8 *)(*(void *)(a1 + 360) + v11);
  }

  else
  {
    __int16 v10 = 0;
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  sub_10003366C(*(void *)(a1 + 256), a2, &v18, (_DWORD *)&v17 + 1);
  if (v18)
  {
    uint64_t v12 = sub_100031134(*(void *)(a1 + 256), a2);
    unsigned int v13 = sub_100030F30(v12, a3, a4, &v17);
    __int16 v14 = sub_10005EA2C(v18, SHIDWORD(v17), v13) + v10;
    LOWORD(v15) = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v15 = *(void *)(qword_1000FDCC0 + 4168);
    }
    return (__int16)(v14 - v15);
  }

  return v10;
}

uint64_t sub_10002B680(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if (a2 < 0 || (int)v3 <= a2 || *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) != a2)
  {
    if ((int)v3 < 1)
    {
      a2 = 0;
    }

    else
    {
      uint64_t v4 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
      {
        if (v3 == ++v4)
        {
          a2 = *(_DWORD *)(a1 + 268);
          goto LABEL_11;
        }
      }

      a2 = v4;
    }
  }

uint64_t sub_10002B730(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 268);
  if ((a2 & 0x80000000) == 0 && (int)v3 > a2)
  {
    LODWORD(v4) = a2;
  }

  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v4) != a2)
    {
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 268);
        break;
      }
    }

uint64_t sub_10002BA64(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)a1 == 3) {
    return sub_1000318A8(*(void *)(a1 + 256), (a2 >> 35) & 0x3FFFF);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002BA84(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = a2;
  do
  {
    if (**(_DWORD **)a1 == 3) {
      uint64_t v2 = *(void *)(*(void *)a1 + 256LL);
    }
    a1 += 8LL;
    --v3;
  }

  while (v3);
  return v2;
}

uint64_t sub_10002BAC8(int a1, uint64_t a2, int a3)
{
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a3 < 0)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 8 * v3);
      if (*(_DWORD *)v9 == 3)
      {
        uint64_t v10 = *(unsigned int *)(v9 + 268);
        if ((int)v10 < 1)
        {
          LODWORD(v8) = 0;
        }

        else
        {
          uint64_t v8 = 0LL;
          uint64_t v11 = *(void *)(v9 + 272);
          while (*(_DWORD *)(v11 + 4 * v8) != a3)
          {
            if (v10 == ++v8) {
              goto LABEL_17;
            }
          }
        }

        if ((_DWORD)v8 != (_DWORD)v10) {
          break;
        }
      }

uint64_t sub_10002BBC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  int v10 = a6;
  int v246 = a4;
  uint64_t v12 = a1;
  uint64_t v250 = 0LL;
  uint64_t v13 = *(unsigned int *)(a1 + 268);
  BOOL v15 = (int)a8 >= 0 && (int)v13 > (int)a8;
  if (v15 && *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a8) == (_DWORD)a8)
  {
    if ((_DWORD)v13 == (_DWORD)a8) {
      LODWORD(v16) = -1;
    }
    else {
      LODWORD(v16) = a8;
    }
    if ((_DWORD)a8 == (_DWORD)v13) {
      LODWORD(v17) = -1;
    }
    else {
      LODWORD(v17) = a8;
    }
    uint64_t v249 = a1;
    if (!(_DWORD)a8) {
      goto LABEL_16;
    }
LABEL_44:
    if ((int)v13 >= 1)
    {
      uint64_t v24 = 0LL;
      int v19 = 0;
      uint64_t v25 = *(int **)(a1 + 288);
      int v26 = *v25;
      do
      {
        int v27 = v25[++v24];
        uint64_t v28 = (v27 - v26);
        if (v27 - v26 > 0)
        {
          uint64_t v29 = (int *)(*(void *)(v12 + 304) + 4LL * v26);
          while (1)
          {
            int v30 = *v29++;
            if (v30 == (_DWORD)v17) {
              break;
            }
            if (!--v28) {
              goto LABEL_47;
            }
          }

          ++v19;
LABEL_47:
          uint64_t v12 = v249;
        }

        int v26 = v25[v24];
      }

      while (v24 != v13);
LABEL_75:
      if (!v15 || (LODWORD(i) = a8, *(_DWORD *)(*(void *)(v12 + 272) + 4LL * a8) != (_DWORD)a8))
      {
        if ((int)v13 < 1)
        {
          LODWORD(i) = 0;
        }

        else
        {
          for (uint64_t i = 0LL; i != v13; ++i)
          {
            if (*(_DWORD *)(*(void *)(v12 + 272) + 4 * i) == (_DWORD)a8) {
              goto LABEL_83;
            }
          }

          LODWORD(i) = *(_DWORD *)(a1 + 268);
        }
      }

LABEL_83:
      if ((_DWORD)i == (_DWORD)v13) {
        int v61 = -1;
      }
      else {
        int v61 = i;
      }
      unsigned int v62 = (int *)(*(void *)(v12 + 288) + 4LL * v61);
      int v63 = *v62;
      int v64 = v62[1];
      uint64_t v247 = (v64 - *v62);
      int v239 = v16;
      unsigned int v248 = a8;
      int32x4_t v245 = (void *)sub_1000CAF58(4LL * v19, a2, a3, a4, a5, a6, a7, a8);
      sub_10002B730(v12, v248, (uint64_t)v245);
      if (v64 == v63)
      {
        uint32x4_t v243 = 0LL;
        uint64_t v72 = v249;
        uint64_t v73 = *(unsigned int *)(v249 + 268);
        int v74 = v248;
        if ((v248 & 0x80000000) != 0)
        {
LABEL_95:
          if ((int)v73 < 1)
          {
            LODWORD(j) = 0;
          }

          else
          {
            for (uint64_t j = 0LL; j != v73; ++j)
            {
              if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * j) == v74) {
                goto LABEL_101;
              }
            }

            LODWORD(j) = v73;
          }

  *(_DWORD *)(a2 + 32) = v20;
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = (a4 >> 53) & 0x3FF;
  *(_DWORD *)(a2 + 68) = v14;
  *(_DWORD *)(a2 + 108) = 0;
  *(_WORD *)(a2 + 90) = *(_WORD *)(a2 + 88);
  return result;
}

    sub_10009D5C8(*(void *)(v3 + 536), v34, *(void *)(v3 + 584), *(void *)(v3 + 592));
    sub_10009D5D8(*(void *)(v3 + 536), v29, v86, !v23);
    a2 = v84;
    if (sub_1000398FC(*(void *)(v3 + 536))) {
      break;
    }
    uint64_t v25 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 1464)) {
        uint64_t v23 = !v23;
      }
      if (*(_DWORD *)(qword_1000FDCC0 + 1780)) {
        uint64_t v77 = -2;
      }
      else {
        uint64_t v77 = -1;
      }
      v7 += v77;
      LOWORD(v6) = v6 - 1;
      uint64_t v24 = 1;
      BOOL v22 = v27;
      if ((v6 & 0x8000) != 0) {
        break;
      }
    }

    else
    {
      v7 += 0xFFFF;
      LOWORD(v6) = v6 - 1;
      uint64_t v24 = 1;
      BOOL v22 = v27;
      if ((v6 & 0x8000) != 0) {
        break;
      }
    }
  }

  if (v82)
  {
    sub_1000CB038(v81, 4LL * *(int *)(v3 + 576));
    sub_1000CB038(v82, 2LL * *(int *)(v3 + 576));
  }

  uint64_t result = sub_100039820(*(void *)(v3 + 536), 0LL);
LABEL_11:
  *(_DWORD *)(v3 + 520) = 1;
  return result;
}

    *a3 = v22;
  }

  else
  {
LABEL_93:
    *(_DWORD *)(v5 + 552) = 3;
  }

  return result;
}

          if (!v59) {
            goto LABEL_62;
          }
          v32 += v59;
          sub_100004868(a1, v43, v58, v285);
          uint64_t v77 = v285[0];
          uint64_t v78 = 2 * v59;
          v79.i64[0] = 0x1000000010LL;
          v79.i64[1] = 0x1000000010LL;
          if (v281)
          {
            if (v280 < 8) {
              goto LABEL_99;
            }
            __int16 v80 = (unint64_t)v281 >= v285[0] + v280 || v285[0] >= v273;
            uint64_t v81 = v272;
            if (!v80) {
              uint64_t v81 = 1;
            }
            uint64_t v82 = (unint64_t)v282 >= v285[0] + v280 || v285[0] >= v278;
            int v83 = v82 ? v81 : 1;
            if (((v83 | v276) & 1) != 0)
            {
LABEL_99:
              int v84 = 0LL;
LABEL_100:
              int v85 = v280 - v84;
              BOOL v86 = &v282->i32[v84];
              uint64_t v87 = (unsigned __int8 *)(v77 + v84);
              uint64_t v88 = &v281->i32[v84];
              int v89 = (unsigned __int16 *)v283 + v84;
              do
              {
                BOOL v90 = v78 * *v89;
                uint64_t v91 = v90 + 16;
                uint64_t v52 = v90 < -16;
                int v92 = v90 + 47;
                if (!v52) {
                  int v92 = v91;
                }
                *v88++ += v92 >> 5;
                uint64_t v94 = *v89++;
                uint64_t v93 = v94;
                uint64_t v95 = *v87++;
                uint64_t v96 = v78 * v93 * v95;
                int v97 = v96 + 16;
                uint64_t v52 = v96 < -16;
                uint64_t v98 = v96 + 47;
                if (!v52) {
                  uint64_t v98 = v97;
                }
                *v86++ += v98 >> 5;
                --v85;
              }

              while (v85);
              goto LABEL_62;
            }

            signed int v112 = vdupq_n_s32(v78);
            if (v280 >= 0x10)
            {
              uint64_t v130 = v280 & 0xFFFFFFF0;
              int v132 = v281;
              BOOL v131 = v282;
              int32x4_t v133 = (int8x16_t *)v285[0];
              int v134 = (uint16x8_t *)v283;
              do
              {
                unsigned __int8 v136 = *v134;
                uint64_t v135 = v134[1];
                v134 += 2;
                uint64_t v137 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v136.i8);
                uint64_t v138 = (int32x4_t)vmovl_high_u16(v135);
                int v139 = vmulq_s32(v112, (int32x4_t)vmovl_high_u16(v136));
                uint64_t v140 = vmulq_s32(v112, (int32x4_t)vmovl_u16(*(uint16x4_t *)v135.i8));
                uint64_t v141 = vmulq_s32(v112, v138);
                float32x4x3_t v142 = vmulq_s32(v112, v137);
                unsigned int v143 = vaddq_s32(v142, v79);
                int v144 = vaddq_s32(v141, v79);
                uint64_t v145 = vaddq_s32(v140, v79);
                uint64_t v146 = vaddq_s32(v139, v79);
                uint64_t v147 = vsraq_n_s32( *v132,  (int32x4_t)vsraq_n_u32((uint32x4_t)v143, (uint32x4_t)vcltzq_s32(v143), 0x1BuLL),  5uLL);
                uint64_t v148 = vsraq_n_s32( v132[3],  (int32x4_t)vsraq_n_u32((uint32x4_t)v144, (uint32x4_t)vcltzq_s32(v144), 0x1BuLL),  5uLL);
                int v149 = vsraq_n_s32( v132[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v146, (uint32x4_t)vcltzq_s32(v146), 0x1BuLL),  5uLL);
                v132[2] = vsraq_n_s32( v132[2],  (int32x4_t)vsraq_n_u32((uint32x4_t)v145, (uint32x4_t)vcltzq_s32(v145), 0x1BuLL),  5uLL);
                v132[3] = v148;
                *int v132 = v147;
                v132[1] = v149;
                v132 += 4;
                int v150 = *v133++;
                v151.i64[0] = 0x1000000010LL;
                v151.i64[1] = 0x1000000010LL;
                unsigned int v152 = vmlaq_s32(v151, v142, (int32x4_t)vqtbl1q_s8(v150, (int8x16_t)xmmword_1000F0330));
                v142.i64[0] = 0x1000000010LL;
                v142.i64[1] = 0x1000000010LL;
                signed int v153 = vmlaq_s32(v142, v141, (int32x4_t)vqtbl1q_s8(v150, (int8x16_t)xmmword_1000F0300));
                v141.i64[0] = 0x1000000010LL;
                v141.i64[1] = 0x1000000010LL;
                signed int v154 = vmlaq_s32(v141, v140, (int32x4_t)vqtbl1q_s8(v150, (int8x16_t)xmmword_1000F0310));
                v140.i64[0] = 0x1000000010LL;
                v140.i64[1] = 0x1000000010LL;
                uint64_t v155 = vmlaq_s32(v140, v139, (int32x4_t)vqtbl1q_s8(v150, (int8x16_t)xmmword_1000F0320));
                uint64_t v156 = vsraq_n_s32( *v131,  (int32x4_t)vsraq_n_u32((uint32x4_t)v152, (uint32x4_t)vcltzq_s32(v152), 0x1BuLL),  5uLL);
                uint64_t v157 = vsraq_n_s32( v131[3],  (int32x4_t)vsraq_n_u32((uint32x4_t)v153, (uint32x4_t)vcltzq_s32(v153), 0x1BuLL),  5uLL);
                __int16 v158 = vsraq_n_s32( v131[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v155, (uint32x4_t)vcltzq_s32(v155), 0x1BuLL),  5uLL);
                v131[2] = vsraq_n_s32( v131[2],  (int32x4_t)vsraq_n_u32((uint32x4_t)v154, (uint32x4_t)vcltzq_s32(v154), 0x1BuLL),  5uLL);
                v131[3] = v157;
                *BOOL v131 = v156;
                v131[1] = v158;
                v131 += 4;
                v130 -= 16LL;
              }

              while (v130);
              int v84 = v280 & 0xFFFFFFF0;
              if (v275 == v280) {
                goto LABEL_62;
              }
              uint64_t v113 = v280 & 0xFFFFFFF0;
              if ((v280 & 8) == 0) {
                goto LABEL_100;
              }
            }

            else
            {
              uint64_t v113 = 0LL;
            }

            int v159 = (uint16x8_t *)((char *)v283 + 2 * v113);
            uint64_t v160 = (int32x4_t *)((char *)v281 + 4 * v113);
            int v161 = (uint64_t *)(v77 + v113);
            uint64_t v162 = (int32x4_t *)((char *)v282 + 4 * v113);
            uint64_t v163 = v113 - (v280 & 0xFFFFFFF8);
            do
            {
              uint64_t v164 = *v159++;
              signed int v165 = vmulq_s32(v112, (int32x4_t)vmovl_high_u16(v164));
              float64x2_t v166 = vmulq_s32(v112, (int32x4_t)vmovl_u16(*(uint16x4_t *)v164.i8));
              int v167 = vaddq_s32(v166, v79);
              int v168 = vaddq_s32(v165, v79);
              uint64_t v169 = (int32x4_t)vsraq_n_u32((uint32x4_t)v167, (uint32x4_t)vcltzq_s32(v167), 0x1BuLL);
              uint64_t v170 = vsraq_n_s32( v160[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v168, (uint32x4_t)vcltzq_s32(v168), 0x1BuLL),  5uLL);
              *uint64_t v160 = vsraq_n_s32(*v160, v169, 5uLL);
              v160[1] = v170;
              v160 += 2;
              v164.i64[0] = *v161++;
              v169.i64[0] = v164.i64[0];
              v170.i64[0] = 0x1000000010LL;
              v170.i64[1] = 0x1000000010LL;
              int v171 = vmlaq_s32(v170, v166, (int32x4_t)vqtbl1q_s8((int8x16_t)v169, (int8x16_t)xmmword_1000F0330));
              v166.i64[0] = 0x1000000010LL;
              v166.i64[1] = 0x1000000010LL;
              int v172 = vmlaq_s32(v166, v165, (int32x4_t)vqtbl1q_s8((int8x16_t)v169, (int8x16_t)xmmword_1000F0320));
              int v173 = vsraq_n_s32( v162[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v172, (uint32x4_t)vcltzq_s32(v172), 0x1BuLL),  5uLL);
              *uint64_t v162 = vsraq_n_s32( *v162,  (int32x4_t)vsraq_n_u32((uint32x4_t)v171, (uint32x4_t)vcltzq_s32(v171), 0x1BuLL),  5uLL);
              v162[1] = v173;
              v162 += 2;
              v163 += 8LL;
            }

            while (v163);
            int v84 = v280 & 0xFFFFFFF8;
            if (v270 != v280) {
              goto LABEL_100;
            }
          }

          else
          {
            if (v280 < 8) {
              goto LABEL_114;
            }
            uint64_t v99 = (unint64_t)v282 >= v285[0] + v280 || v285[0] >= v278;
            uint64_t v100 = v276;
            if (!v99) {
              uint64_t v100 = 1;
            }
            if ((v100 & 1) != 0)
            {
LABEL_114:
              int v101 = 0LL;
LABEL_115:
              uint64_t v102 = v280 - v101;
              unsigned __int8 v103 = &v282->i32[v101];
              unsigned int v104 = (unsigned __int8 *)(v77 + v101);
              uint64_t v105 = (unsigned __int16 *)v283 + v101;
              do
              {
                uint64_t v107 = *v105++;
                signed int v106 = v107;
                uint64_t v108 = *v104++;
                uint64_t v109 = v78 * v106 * v108;
                uint64_t v110 = v109 + 16;
                uint64_t v52 = v109 < -16;
                int v111 = v109 + 47;
                if (!v52) {
                  int v111 = v110;
                }
                *v103++ += v111 >> 5;
                --v102;
              }

              while (v102);
              goto LABEL_62;
            }

            if (v280 >= 0x10)
            {
              uint64_t v174 = vdupq_n_s32(v78);
              double v175 = v280 & 0xFFFFFFF0;
              signed int v176 = v282;
              signed int v177 = v283;
              uint64_t v178 = (int8x16_t *)v285[0];
              do
              {
                uint64_t v180 = *v177;
                uint64_t v179 = v177[1];
                v177 += 2;
                BOOL v181 = (int32x4_t)vmovl_high_u16((uint16x8_t)v180);
                int v182 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v179.i8);
                int32x4_t v183 = *v178++;
                v184.i64[0] = 0x1000000010LL;
                v184.i64[1] = 0x1000000010LL;
                float64x2_t v185 = vmlaq_s32( v184,  vmulq_s32(v174, (int32x4_t)vmovl_u16(*(uint16x4_t *)v180.i8)),  (int32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_1000F0330));
                v180.i64[0] = 0x1000000010LL;
                v180.i64[1] = 0x1000000010LL;
                int v186 = vmlaq_s32( v180,  vmulq_s32(v174, (int32x4_t)vmovl_high_u16((uint16x8_t)v179)),  (int32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_1000F0300));
                v179.i64[0] = 0x1000000010LL;
                v179.i64[1] = 0x1000000010LL;
                uint64_t v187 = vmlaq_s32(v179, vmulq_s32(v174, v182), (int32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_1000F0310));
                v182.i64[0] = 0x1000000010LL;
                v182.i64[1] = 0x1000000010LL;
                int16x8_t v188 = vmlaq_s32(v182, vmulq_s32(v174, v181), (int32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_1000F0320));
                signed int v189 = v176[1];
                uint64_t v190 = vsraq_n_s32( *v176,  (int32x4_t)vsraq_n_u32((uint32x4_t)v185, (uint32x4_t)vcltzq_s32(v185), 0x1BuLL),  5uLL);
                int32x4_t v191 = vsraq_n_s32( v176[3],  (int32x4_t)vsraq_n_u32((uint32x4_t)v186, (uint32x4_t)vcltzq_s32(v186), 0x1BuLL),  5uLL);
                int v76 = (int8x16_t)vsraq_n_s32( v176[2],  (int32x4_t)vsraq_n_u32((uint32x4_t)v187, (uint32x4_t)vcltzq_s32(v187), 0x1BuLL),  5uLL);
                v176[2] = (int32x4_t)v76;
                v176[3] = v191;
                *signed int v176 = v190;
                v176[1] = vsraq_n_s32( v189,  (int32x4_t)vsraq_n_u32((uint32x4_t)v188, (uint32x4_t)vcltzq_s32(v188), 0x1BuLL),  5uLL);
                v176 += 4;
                v175 -= 16LL;
              }

              while (v175);
              int v101 = v280 & 0xFFFFFFF0;
              if (v275 == v280) {
                goto LABEL_62;
              }
              signed int v117 = v280 & 0xFFFFFFF0;
              if ((v280 & 8) == 0) {
                goto LABEL_115;
              }
            }

            else
            {
              signed int v117 = 0LL;
            }

            uint64_t v118 = vdupq_n_s32(v78);
            uint64_t v119 = (uint16x8_t *)((char *)v283 + 2 * v117);
            uint64_t v120 = (uint64_t *)(v77 + v117);
            uint64_t v121 = v117 - (v280 & 0xFFFFFFF8);
            uint64_t v122 = (int32x4_t *)((char *)v282 + 4 * v117);
            do
            {
              int v123 = *v119++;
              uint64_t v124 = (int32x4_t)vmovl_high_u16(v123);
              signed int v125 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v123.i8);
              v123.i64[0] = *v120++;
              v76.i64[0] = v123.i64[0];
              v126.i64[0] = 0x1000000010LL;
              v126.i64[1] = 0x1000000010LL;
              uint64_t v127 = vmlaq_s32(v126, vmulq_s32(v118, v125), (int32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1000F0330));
              v125.i64[0] = 0x1000000010LL;
              v125.i64[1] = 0x1000000010LL;
              BOOL v128 = vmlaq_s32(v125, vmulq_s32(v118, v124), (int32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1000F0320));
              int v76 = (int8x16_t)vsraq_n_s32( *v122,  (int32x4_t)vsraq_n_u32((uint32x4_t)v127, (uint32x4_t)vcltzq_s32(v127), 0x1BuLL),  5uLL);
              uint64_t v129 = vsraq_n_s32( v122[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v128, (uint32x4_t)vcltzq_s32(v128), 0x1BuLL),  5uLL);
              *uint64_t v122 = (int32x4_t)v76;
              v122[1] = v129;
              v122 += 2;
              v121 += 8LL;
            }

            while (v121);
            int v101 = v280 & 0xFFFFFFF8;
            if (v270 != v280) {
              goto LABEL_115;
            }
          }

LABEL_101:
          if ((_DWORD)j == (_DWORD)v73) {
            LODWORD(j) = -1;
          }
          if (v243)
          {
            int v76 = (int *)(*(void *)(v72 + 288) + 4LL * (int)j);
            uint64_t v77 = *v76;
            uint64_t v78 = (v76[1] - v77);
            if ((int)v78 >= 1)
            {
              unsigned int v79 = (int *)(*(void *)(v72 + 304) + 4 * v77);
              __int16 v80 = v243;
              do
              {
                uint64_t v81 = *v79++;
                *v80++ = *(_DWORD *)(*(void *)(v72 + 272) + 4 * v81);
                --v78;
              }

              while (v78);
              LODWORD(v73) = *(_DWORD *)(v72 + 268);
            }
          }

          uint64_t v82 = v73;
          int v83 = *(_DWORD *)(a2 + 268) + v73;
          int v84 = v19 * v246 + v247 * v10 + *(_DWORD *)(v72 + 372) + *(_DWORD *)(a2 + 372);
          BOOL v86 = v74 >= 0 && (int)v73 > v74;
          if (v86 && *(_DWORD *)(*(void *)(v72 + 272) + 4LL * v74) == v74)
          {
            if ((_DWORD)v73 == v74) {
              LODWORD(v87) = -1;
            }
            else {
              LODWORD(v87) = v74;
            }
            LODWORD(v88) = v74;
            goto LABEL_147;
          }

          if ((int)v73 < 1)
          {
            if ((_DWORD)v73) {
              LODWORD(v87) = 0;
            }
            else {
              LODWORD(v87) = -1;
            }
            if (v86) {
              goto LABEL_128;
            }
          }

          else
          {
            uint64_t v87 = 0LL;
            do
            {
              if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * v87) == v74) {
                goto LABEL_125;
              }
              ++v87;
            }

            while (v82 != v87);
            LODWORD(v87) = v82;
LABEL_125:
            if ((_DWORD)v87 == (_DWORD)v82) {
              LODWORD(v87) = -1;
            }
            if (v86)
            {
LABEL_128:
              int v89 = *(_DWORD *)(*(void *)(v72 + 272) + 4LL * v74);
              BOOL v90 = v89 == v74;
              if (v89 == v74) {
                LODWORD(v88) = v74;
              }
              else {
                LODWORD(v88) = 0;
              }
              goto LABEL_142;
            }
          }

          if ((int)v82 < 1)
          {
            LODWORD(v88) = 0;
LABEL_147:
            if ((_DWORD)v88 == (_DWORD)v82) {
              int v92 = -1;
            }
            else {
              int v92 = v88;
            }
            uint64_t v93 = (int *)(*(void *)(v72 + 288) + 4LL * (int)v87);
            uint64_t v94 = *v93;
            uint64_t v95 = (v93[1] - v94);
            int v241 = v10;
            if ((int)v95 < 1)
            {
LABEL_154:
              uint64_t v98 = v72;
              uint64_t v99 = sub_100026E48(a9, a7, v83, v84, *(_DWORD *)(v72 + 336));
              if (!v99) {
                goto LABEL_183;
              }
            }

            else
            {
              uint64_t v96 = (int *)(*(void *)(v72 + 304) + 4 * v94);
              while (1)
              {
                int v97 = *v96++;
                if (v97 == v92) {
                  break;
                }
                if (!--v95) {
                  goto LABEL_154;
                }
              }

              uint64_t v98 = v72;
              uint64_t v99 = sub_100026E48(a9, a7, v83, (v10 - 1) * v246 - v10 + v84, *(_DWORD *)(v72 + 336));
              if (!v99)
              {
LABEL_183:
                if (v243) {
                  sub_1000CB038(v243, 4LL * (int)v247);
                }
                sub_1000CB038(v245, 4LL * v19);
                return v249;
              }
            }

            uint64_t v12 = v99;
            uint64_t v238 = 4LL * v19;
            bzero(*(void **)(a7 + 144), 4LL * *(int *)(a7 + 152));
            int v240 = v19;
            if (*(int *)(v98 + 268) >= 1)
            {
              uint64_t v100 = v98;
              int v101 = 0;
              uint64_t v102 = 0LL;
              unsigned __int8 v103 = 0;
              unsigned int v104 = v248;
              while (1)
              {
                signed int v106 = *(_DWORD *)(*(void *)(v100 + 272) + 4 * v102);
                if (v106 == v104)
                {
                  uint64_t v105 = v102 + 1;
                }

                else
                {
                  uint64_t v107 = *(void *)(v100 + 288);
                  uint64_t v108 = *(int *)(v107 + 4 * v102);
                  uint64_t v105 = v102 + 1;
                  uint64_t v109 = (*(_DWORD *)(v107 + 4 * (v102 + 1)) - v108);
                  uint64_t v110 = *(void *)(v100 + 304);
                  sub_100027400(v12, v106, (_DWORD *)&v250 + 1);
                  if ((int)v109 < 1)
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                  }

                  else
                  {
                    int v111 = HIDWORD(v250);
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                    do
                    {
                      signed int v112 = *(_DWORD *)(*(void *)(v100 + 272) + 4LL * *(int *)(v110 + 4 * v108));
                      if (v112 != v104)
                      {
                        sub_100027400(v12, v112, &v250);
                        if (*(_DWORD *)(v249 + 336)) {
                          unsigned __int8 v103 = *(_BYTE *)(*(void *)(v249 + 352) + v108);
                        }
                        int v101 = v250;
                        sub_10002785C(v12, v111, v250, v103);
                        uint64_t v100 = v249;
                        unsigned int v104 = v248;
                      }

                      ++v108;
                      --v109;
                    }

                    while (v109);
                  }

                  if (!*(_BYTE *)(*(void *)(v100 + 296) + v102)) {
                    goto LABEL_158;
                  }
                  if (*(_DWORD *)(v100 + 336)) {
                    unsigned __int8 v103 = *(_BYTE *)(*(void *)(v100 + 360) + v102);
                  }
                  uint64_t v113 = SHIDWORD(v250);
                  if (sub_100025C94((unsigned int *)v12) == 3 && *(_DWORD *)(v12 + 376))
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                    if ((_DWORD)v113)
                    {
                      uint64_t v114 = *(void *)(v12 + 296);
                      if (*(_BYTE *)(v114 + v113))
                      {
                        if (!*(_DWORD *)(v12 + 336)) {
                          goto LABEL_158;
                        }
                        uint64_t v115 = *(void *)(v12 + 360);
                        goto LABEL_181;
                      }

                      *(_BYTE *)(v114 + v113) = 1;
                      if (*(_DWORD *)(v12 + 336))
                      {
                        uint64_t v115 = *(void *)(v12 + 360);
LABEL_181:
                        *(_BYTE *)(v115 + v113) = v103;
                      }
                    }
                  }

                  else
                  {
                    uint64_t v100 = v249;
                    unsigned int v104 = v248;
                  }
                }

LABEL_158:
                uint64_t v102 = v105;
              }
            }

            int v101 = 0;
LABEL_187:
            if (*(int *)(a2 + 268) > 1)
            {
              uint64_t v116 = 1LL;
              while (1)
              {
                signed int v117 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v116);
                uint64_t v118 = *(void *)(a2 + 288);
                uint64_t v119 = *(int *)(v118 + 4 * v116++);
                uint64_t v120 = (*(_DWORD *)(v118 + 4 * v116) - v119);
                uint64_t v121 = *(void *)(a2 + 304);
                sub_100027400(v12, v117, (_DWORD *)&v250 + 1);
LABEL_189:
              }

              uint64_t v122 = (int *)(v121 + 4 * v119);
              int v123 = HIDWORD(v250);
              while (1)
              {
                uint64_t v124 = *v122++;
                signed int v125 = *(_DWORD *)(*(void *)(a2 + 272) + 4 * v124);
                uint64_t v126 = *(void *)(v12 + 256);
                if (*(_DWORD *)(v126 + 152) <= v125)
                {
                  uint64_t v129 = *(int *)(v126 + 32) + 1LL;
                  uint64_t v130 = (void *)sub_1000C1074(4 * v129);
                  j__memmove(v130, *(const void **)(v126 + 144), 4LL * *(int *)(v126 + 152));
                  sub_1000C0EF8(*(void *)(v126 + 144));
                  *(void *)(v126 + 144) = v130;
                  *(_DWORD *)(v126 + 152) = v129;
                  uint64_t v127 = v125;
                  int v101 = *((_DWORD *)v130 + v125);
                  if (v125) {
                    BOOL v131 = v101 == 0;
                  }
                  else {
                    BOOL v131 = 0;
                  }
                  if (!v131) {
                    goto LABEL_193;
                  }
                }

                else
                {
                  uint64_t v127 = v125;
                  int v101 = *(_DWORD *)(*(void *)(v126 + 144) + 4LL * v125);
                  if (v125) {
                    BOOL v128 = v101 == 0;
                  }
                  else {
                    BOOL v128 = 0;
                  }
                  if (!v128) {
                    goto LABEL_193;
                  }
                }

                int v132 = *(_DWORD *)(v12 + 268);
                if (v132 != *(_DWORD *)(v12 + 264)) {
                  goto LABEL_209;
                }
                if (sub_100027558(v12))
                {
                  int v132 = *(_DWORD *)(v12 + 268);
LABEL_209:
                  *(_DWORD *)(*(void *)(v12 + 272) + 4LL * v132) = v125;
                  int v101 = *(_DWORD *)(v12 + 268);
                  *(_DWORD *)(*(void *)(v126 + 144) + 4 * v127) = v101;
                  int32x4_t v133 = (_DWORD *)(*(void *)(v12 + 288) + 4LL * *(int *)(v12 + 268));
                  v133[1] = *v133;
                  ++*(_DWORD *)(v12 + 268);
                  sub_100031AA0(v126, v125);
                  uint64_t v252 = 0LL;
                  int v251 = 0;
                  sub_10003366C(*(void *)(v12 + 256), v125, &v252, &v251);
                  if (v252) {
                    *(_DWORD *)(v12 + 340) = 1;
                  }
                  goto LABEL_193;
                }

                int v101 = 0;
LABEL_193:
                sub_10002785C(v12, v123, v101, 0);
                if (!--v120) {
                  goto LABEL_189;
                }
              }
            }

LABEL_211:
            int v134 = v248;
            if (v240 >= 1)
            {
              uint64_t v135 = 0LL;
              unsigned __int8 v136 = 0;
              uint64_t v137 = v240;
              uint64_t v138 = v249;
              int v139 = v243;
              while (1)
              {
                uint64_t v140 = *((unsigned int *)v245 + v135);
                if ((_DWORD)v140 != v134) {
                  break;
                }
LABEL_214:
                if (++v135 == v137) {
                  goto LABEL_266;
                }
              }

              if (!*(_DWORD *)(v138 + 336)) {
                goto LABEL_249;
              }
              uint64_t v141 = *(unsigned int *)(v138 + 268);
              if ((v140 & 0x80000000) != 0
                || (int)v141 <= (int)v140
                || (LODWORD(m) = *((_DWORD *)v245 + v135),
                    *(_DWORD *)(*(void *)(v138 + 272) + 4 * v140) != (_DWORD)v140))
              {
                if ((int)v141 < 1)
                {
                  if ((_DWORD)v141) {
                    LODWORD(m) = 0;
                  }
                  else {
                    LODWORD(m) = -1;
                  }
                  if (v134 < 0) {
                    goto LABEL_235;
                  }
LABEL_233:
                  if ((int)v141 > v134)
                  {
                    LODWORD(k) = v134;
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4LL * v248) == v134)
                    {
LABEL_241:
                      if ((_DWORD)k == (_DWORD)v141) {
                        int v144 = -1;
                      }
                      else {
                        int v144 = k;
                      }
                      uint64_t v145 = (int *)(*(void *)(v138 + 288) + 4LL * (int)m);
                      uint64_t v146 = *v145;
                      uint64_t v147 = (v145[1] - v146);
                      if ((int)v147 >= 1)
                      {
                        uint64_t v148 = (int *)(*(void *)(v138 + 304) + 4 * v146);
                        while (1)
                        {
                          int v149 = *v148++;
                          if (v149 == v144) {
                            break;
                          }
                          LODWORD(v146) = v146 + 1;
                          if (!--v147) {
                            goto LABEL_248;
                          }
                        }

                        unsigned __int8 v136 = *(_BYTE *)(*(void *)(v138 + 352) + (int)v146);
                        sub_100027400(v12, v140, (_DWORD *)&v250 + 1);
                        if (v246 < 1)
                        {
LABEL_264:
                          uint64_t v138 = v249;
                          int v134 = v248;
                          goto LABEL_214;
                        }

LABEL_250:
                        int v150 = HIDWORD(v250);
                        uint64_t v151 = v246;
                        unsigned int v152 = (signed int *)a3;
                        while (1)
                        {
                          signed int v154 = *v152++;
                          signed int v153 = v154;
                          uint64_t v155 = *(void *)(v12 + 256);
                          if (*(_DWORD *)(v155 + 152) <= v154)
                          {
                            uint64_t v157 = *(int *)(v155 + 32) + 1LL;
                            __int16 v158 = (void *)sub_1000C1074(4 * v157);
                            j__memmove(v158, *(const void **)(v155 + 144), 4LL * *(int *)(v155 + 152));
                            sub_1000C0EF8(*(void *)(v155 + 144));
                            *(void *)(v155 + 144) = v158;
                            *(_DWORD *)(v155 + 152) = v157;
                            uint64_t v156 = v153;
                            int v101 = *((_DWORD *)v158 + v153);
                            if (!v153) {
                              goto LABEL_252;
                            }
                          }

                          else
                          {
                            uint64_t v156 = v153;
                            int v101 = *(_DWORD *)(*(void *)(v155 + 144) + 4LL * v153);
                            if (!v153) {
                              goto LABEL_252;
                            }
                          }

                          if (!v101)
                          {
                            int v159 = *(_DWORD *)(v12 + 268);
                            if (v159 != *(_DWORD *)(v12 + 264)) {
                              goto LABEL_261;
                            }
                            if (sub_100027558(v12))
                            {
                              int v159 = *(_DWORD *)(v12 + 268);
LABEL_261:
                              *(_DWORD *)(*(void *)(v12 + 272) + 4LL * v159) = v153;
                              int v101 = *(_DWORD *)(v12 + 268);
                              *(_DWORD *)(*(void *)(v155 + 144) + 4 * v156) = v101;
                              uint64_t v160 = (_DWORD *)(*(void *)(v12 + 288) + 4LL * *(int *)(v12 + 268));
                              v160[1] = *v160;
                              ++*(_DWORD *)(v12 + 268);
                              sub_100031AA0(v155, v153);
                              uint64_t v252 = 0LL;
                              int v251 = 0;
                              sub_10003366C(*(void *)(v12 + 256), v153, &v252, &v251);
                              if (v252) {
                                *(_DWORD *)(v12 + 340) = 1;
                              }
                              goto LABEL_252;
                            }

                            int v101 = 0;
                          }

LABEL_252:
                          sub_10002785C(v12, v150, v101, v136);
                          if (!--v151)
                          {
                            uint64_t v138 = v249;
                            int v134 = v248;
                            int v139 = v243;
                            uint64_t v137 = v240;
                            goto LABEL_214;
                          }
                        }
                      }

LABEL_248:
                      unsigned __int8 v136 = 0;
LABEL_249:
                      sub_100027400(v12, v140, (_DWORD *)&v250 + 1);
                      if (v246 >= 1) {
                        goto LABEL_250;
                      }
                      goto LABEL_264;
                    }
                  }

              *(_DWORD *)(a1 + 552) = 3;
LABEL_249:
              sub_100064994(a1);
              return 0LL;
            }

            uint64_t v68 = sub_10003C6A4((_DWORD **)v60, v15);
            LODWORD(v59) = qword_1000FDCC0;
            if (v68)
            {
              if (qword_1000FDCC0)
              {
                uint64_t v69 = (int *)(qword_1000FDCC0 + 4920);
LABEL_160:
                uint64_t v70 = *v69;
                unsigned int v59 = *(void *)(qword_1000FDCC0 + 1640);
                goto LABEL_162;
              }
            }

            else if (qword_1000FDCC0)
            {
              uint64_t v69 = (int *)(qword_1000FDCC0 + 1632);
              goto LABEL_160;
            }

            uint64_t v70 = 0;
LABEL_162:
            LODWORD(v59) = v70 + *(_DWORD *)(a1 + 9080) * v59;
            goto LABEL_164;
          }

              *(_DWORD *)(a1 + 552) = 3;
LABEL_249:
              sub_100064994(a1);
              return 0LL;
            }

            uint64_t v68 = sub_10003C6A4((_DWORD **)v60, v15);
            LODWORD(v59) = qword_1000FDCC0;
            if (v68)
            {
              if (qword_1000FDCC0)
              {
                uint64_t v69 = (int *)(qword_1000FDCC0 + 4920);
LABEL_160:
                uint64_t v70 = *v69;
                unsigned int v59 = *(void *)(qword_1000FDCC0 + 1640);
                goto LABEL_162;
              }
            }

            else if (qword_1000FDCC0)
            {
              uint64_t v69 = (int *)(qword_1000FDCC0 + 1632);
              goto LABEL_160;
            }

            uint64_t v70 = 0;
LABEL_162:
            LODWORD(v59) = v70 + *(_DWORD *)(a1 + 9080) * v59;
            goto LABEL_164;
          }

LABEL_235:
                  if ((int)v141 < 1)
                  {
                    LODWORD(k) = 0;
                  }

                  else
                  {
                    for (uint64_t k = 0LL; k != v141; ++k)
                    {
                      if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * k) == v134) {
                        goto LABEL_241;
                      }
                    }

                    LODWORD(k) = *(_DWORD *)(v138 + 268);
                  }

                  goto LABEL_241;
                }

                for (uint64_t m = 0LL; m != v141; ++m)
                {
                  if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * m) == (_DWORD)v140) {
                    goto LABEL_225;
                  }
                }

                LODWORD(m) = *(_DWORD *)(v138 + 268);
              }

LABEL_225:
              if ((_DWORD)m == (_DWORD)v141) {
                LODWORD(m) = -1;
              }
              if (v134 < 0) {
                goto LABEL_235;
              }
              goto LABEL_233;
            }

            unsigned __int8 v136 = 0;
            uint64_t v138 = v249;
            int v139 = v243;
LABEL_266:
            LODWORD(v250) = v101;
            int v161 = HIDWORD(v250);
            if ((int)v247 >= 1)
            {
              uint64_t v162 = 0LL;
              while (1)
              {
                uint64_t v163 = *((unsigned int *)v139 + v162);
                if ((_DWORD)v163 != v134) {
                  break;
                }
LABEL_269:
                if (++v162 == v247) {
                  goto LABEL_320;
                }
              }

              if (!*(_DWORD *)(v138 + 336)) {
                goto LABEL_304;
              }
              uint64_t v164 = *(unsigned int *)(v138 + 268);
              if (v134 < 0
                || (int)v164 <= v134
                || (LODWORD(ii) = v134, *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v248) != v134))
              {
                if ((int)v164 < 1)
                {
                  if ((_DWORD)v164) {
                    LODWORD(ii) = 0;
                  }
                  else {
                    LODWORD(ii) = -1;
                  }
                  if ((v163 & 0x80000000) != 0) {
                    goto LABEL_290;
                  }
LABEL_288:
                  if ((int)v164 > (int)v163)
                  {
                    LODWORD(n) = *((_DWORD *)v139 + v162);
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v163) == (_DWORD)v163)
                    {
LABEL_296:
                      if ((_DWORD)n == (_DWORD)v164) {
                        int v167 = -1;
                      }
                      else {
                        int v167 = n;
                      }
                      int v168 = (int *)(*(void *)(v138 + 288) + 4LL * (int)ii);
                      uint64_t v169 = *v168;
                      uint64_t v170 = (v168[1] - v169);
                      if ((int)v170 >= 1)
                      {
                        int v171 = (int *)(*(void *)(v138 + 304) + 4 * v169);
                        while (1)
                        {
                          int v172 = *v171++;
                          if (v172 == v167) {
                            break;
                          }
                          LODWORD(v169) = v169 + 1;
                          if (!--v170) {
                            goto LABEL_303;
                          }
                        }

                        unsigned __int8 v136 = *(_BYTE *)(*(void *)(v138 + 352) + (int)v169);
                        sub_100027400(v12, v163, &v250);
                        if (v241 < 1)
                        {
LABEL_319:
                          uint64_t v138 = v249;
                          int v134 = v248;
                          goto LABEL_269;
                        }

LABEL_305:
                        int v173 = v250;
                        uint64_t v174 = v241;
                        double v175 = (signed int *)a5;
                        while (1)
                        {
                          signed int v177 = *v175++;
                          signed int v176 = v177;
                          uint64_t v178 = *(void *)(v12 + 256);
                          if (*(_DWORD *)(v178 + 152) <= v177)
                          {
                            uint64_t v180 = *(int *)(v178 + 32) + 1LL;
                            BOOL v181 = (void *)sub_1000C1074(4 * v180);
                            j__memmove(v181, *(const void **)(v178 + 144), 4LL * *(int *)(v178 + 152));
                            sub_1000C0EF8(*(void *)(v178 + 144));
                            *(void *)(v178 + 144) = v181;
                            *(_DWORD *)(v178 + 152) = v180;
                            uint64_t v179 = v176;
                            int v161 = *((_DWORD *)v181 + v176);
                            if (!v176) {
                              goto LABEL_307;
                            }
                          }

                          else
                          {
                            uint64_t v179 = v176;
                            int v161 = *(_DWORD *)(*(void *)(v178 + 144) + 4LL * v176);
                            if (!v176) {
                              goto LABEL_307;
                            }
                          }

                          if (!v161)
                          {
                            int v182 = *(_DWORD *)(v12 + 268);
                            if (v182 != *(_DWORD *)(v12 + 264)) {
                              goto LABEL_316;
                            }
                            if (sub_100027558(v12))
                            {
                              int v182 = *(_DWORD *)(v12 + 268);
LABEL_316:
                              *(_DWORD *)(*(void *)(v12 + 272) + 4LL * v182) = v176;
                              int v161 = *(_DWORD *)(v12 + 268);
                              *(_DWORD *)(*(void *)(v178 + 144) + 4 * v179) = v161;
                              int32x4_t v183 = (_DWORD *)(*(void *)(v12 + 288) + 4LL * *(int *)(v12 + 268));
                              v183[1] = *v183;
                              ++*(_DWORD *)(v12 + 268);
                              sub_100031AA0(v178, v176);
                              uint64_t v252 = 0LL;
                              int v251 = 0;
                              sub_10003366C(*(void *)(v12 + 256), v176, &v252, &v251);
                              if (v252) {
                                *(_DWORD *)(v12 + 340) = 1;
                              }
                              goto LABEL_307;
                            }

                            int v161 = 0;
                          }

LABEL_307:
                          sub_10002785C(v12, v161, v173, v136);
                          if (!--v174)
                          {
                            uint64_t v138 = v249;
                            int v134 = v248;
                            int v139 = v243;
                            goto LABEL_269;
                          }
                        }
                      }

LABEL_290:
                  if ((int)v164 < 1)
                  {
                    LODWORD(n) = 0;
                  }

                  else
                  {
                    for (uint64_t n = 0LL; n != v164; ++n)
                    {
                      if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * n) == (_DWORD)v163) {
                        goto LABEL_296;
                      }
                    }

                    LODWORD(n) = *(_DWORD *)(v138 + 268);
                  }

                  goto LABEL_296;
                }

                for (iuint64_t i = 0LL; ii != v164; ++ii)
                {
                  if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * ii) == v134) {
                    goto LABEL_280;
                  }
                }

                LODWORD(ii) = *(_DWORD *)(v138 + 268);
              }

LABEL_280:
              if ((_DWORD)ii == (_DWORD)v164) {
                LODWORD(ii) = -1;
              }
              if ((v163 & 0x80000000) != 0) {
                goto LABEL_290;
              }
              goto LABEL_288;
            }

LABEL_320:
            HIDWORD(v250) = v161;
            if (!*(_BYTE *)(*(void *)(v138 + 296) + v239)) {
              goto LABEL_351;
            }
            if (*(_DWORD *)(v138 + 336))
            {
              uint64_t v184 = *(unsigned int *)(v138 + 268);
              if (v134 < 0
                || (int)v184 <= v134
                || (LODWORD(jj) = v134, *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v134) != v134))
              {
                if ((int)v184 < 1)
                {
                  LODWORD(jj) = 0;
                }

                else
                {
                  for (juint64_t j = 0LL; jj != v184; ++jj)
                  {
                    if (*(_DWORD *)(*(void *)(v138 + 272) + 4 * jj) == v134) {
                      goto LABEL_331;
                    }
                  }

                  LODWORD(jj) = *(_DWORD *)(v138 + 268);
                }
              }

              ++v260;
              int v257 = *v262;
              if (v260 >= v257)
              {
                v337 = v389;
                goto LABEL_464;
              }
            }
          }

          v337 = 0;
LABEL_464:
          LODWORD(v400) = v257 - 1;
          uint64_t v115 = v337 + v392;
          goto LABEL_78;
        default:
          goto LABEL_79;
      }

      while (1)
      {
        __int128 v202 = &v116[7 * v199];
        int v203 = *v202;
        if (*v202 != 4)
        {
          if (v203 == 2)
          {
            uint64_t v204 = &v116[7 * v199];
            uint64_t v207 = v204[1];
            int v206 = v204 + 1;
            int64x2_t v205 = v207;
            uint64_t v208 = v206[1];
            if (v201 || v208 != 2) {
              goto LABEL_218;
            }
            if (v390[v205] != 48 || v390[(int)v205 + 1] != 48)
            {
              uint64_t v208 = 2;
LABEL_218:
              sub_1000CC548(v401, &v390[v205], v208 + 1);
              int v222 = LOWORD(v401[0]) != 49 || v208 != 1 || v201 == 0;
              uint64_t v223 = v388;
              if (!v222) {
                uint64_t v223 = 1;
              }
              v388 = v223;
              BOOL v201 = 0;
              v200 += sub_1000AF7E0( a1,  v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  (unint64_t)v401,  *v206);
              goto LABEL_192;
            }

            float64x2_t v209 = *(unsigned __int16 **)(v367 + 128);
            if (v209)
            {
              if (sub_1000CC7E0(v209, 32))
              {
                v403[0] = 0LL;
                sub_1000CC548(v401, *(__int16 **)(v367 + 128), 32);
                int v210 = sub_1000CC804((char *)v401, L" ", v403);
                if (v210)
                {
                  uint64_t v211 = v210;
                  do
                  {
                    if ((int)sub_1000B3680(a1, v211, 1LL, 1LL, 0LL, 30, (uint64_t)v384) >= 1)
                    {
                      sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  *v384,  *v206,  0,  0,  1);
                    }

                    else
                    {
                      else {
                        uint64_t v220 = *v384;
                      }
                      sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v220,  *v206,  0,  0,  0);
                    }

                    ++v200;
                    uint64_t v211 = sub_1000CC804(0LL, L" ", v403);
                  }

                  while (v211);
                }
              }

              else
              {
                unsigned int v59 = *(void *)(v367 + 128);
                if (v59)
                {
                  if ((int)sub_1000B3680(a1, (_WORD *)v59, 1LL, 1LL, 0LL, 30, (uint64_t)v384) < 1)
                  {
                    else {
                      float64x2_t v244 = *v384;
                    }
                    sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v244,  *v206,  2,  0,  0);
                  }

                  else
                  {
                    sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  *v384,  *v206,  2,  0,  1);
                  }

                  BOOL v201 = 0;
                  goto LABEL_294;
                }
              }

              BOOL v201 = 0;
            }

            else
            {
              BOOL v201 = 0;
            }
          }

          else
          {
            int v212 = &v116[7 * v199];
            int v214 = v212[2];
            BOOL v213 = v212 + 2;
            if (v214 == 1)
            {
              float64x2_t v215 = *(unsigned __int16 **)(v367 + 176);
              if (v215)
              {
                uint64_t v216 = &v116[7 * v199];
                float64x2_t v218 = v216[1];
                int v217 = v216 + 1;
                if (sub_1000CC7E0(v215, (unsigned __int16)v390[v218]))
                {
                  if (v388)
                  {
                    uint64_t v219 = *(_WORD **)(v367 + 144);
                    if (v219)
                    {
                      if ((int)sub_1000B3680(a1, v219, 1LL, 1LL, 0LL, 30, (uint64_t)v384) < 1)
                      {
                        else {
                          int v240 = *v384;
                        }
                        sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v240,  *v217,  0,  0,  0);
                      }

                      else
                      {
                        sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  *v384,  *v217,  0,  0,  1);
                      }

                      ++v200;
                      v388 = 1;
                      goto LABEL_192;
                    }
                  }

                  int v224 = *(_WORD **)(v367 + 160);
                  if (v224)
                  {
                    if ((int)sub_1000B3680(a1, v224, 1LL, 1LL, 0LL, 30, (uint64_t)v384) < 1)
                    {
                      else {
                        int v241 = *v384;
                      }
                      sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v241,  *v217,  0,  0,  0);
                    }

                    else
                    {
                      sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  *v384,  *v217,  0,  0,  1);
                    }

                    goto LABEL_294;
                  }

                  unsigned int v59 = *(void *)(v367 + 368);
                  if (!v59 || v390[*v217 + 1] == 48 && v390[*v217 + 2] == 48) {
                    goto LABEL_192;
                  }
                  signed int v229 = v384;
                  signed int v230 = a1;
                  uint64_t v231 = *(_WORD **)(v367 + 368);
LABEL_283:
                  else {
                    float64x2_t v242 = *v229;
                  }
                  uint32x4_t v243 = *v217;
LABEL_293:
                  sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v242,  v243,  1,  0,  0);
                  goto LABEL_294;
                }

                int v203 = *v202;
              }
            }

            if (v203 == 3)
            {
              uint64_t v232 = &v116[7 * v199];
              v234 = v232[1];
              uint64_t v233 = v232 + 1;
              if (v390[v234] != 46) {
                goto LABEL_192;
              }
              if (v199 >= *v397 - 1LL) {
                goto LABEL_192;
              }
              if (v116[7 * v199 + 7] != 2) {
                goto LABEL_192;
              }
              unsigned int v59 = *(void *)(v367 + 64);
              if (!v59) {
                goto LABEL_192;
              }
              if ((int)sub_1000B3680(a1, (_WORD *)v59, 1LL, 1LL, 0LL, 30, (uint64_t)v384) >= 1)
              {
                int v235 = *v384;
                int32x4_t v236 = *v233;
                goto LABEL_267;
              }

              else {
                float64x2_t v242 = *v384;
              }
              uint32x4_t v243 = *v233;
              goto LABEL_293;
            }

            if (v203 == 1)
            {
              int v225 = *v213;
              if (*v213 == 1 && (v226 = &v116[7 * v199], v227 = v226[1], int v217 = v226 + 1, v390[v227] == 104))
              {
                if (v388)
                {
                  int v228 = *(_WORD **)(v367 + 144);
                  if (v228)
                  {
                    signed int v229 = v384;
                    signed int v230 = a1;
                    if ((int)sub_1000B3680(a1, v228, 1LL, 1LL, 0LL, 30, (uint64_t)v384) < 1)
                    {
                      uint64_t v231 = *(_WORD **)(v367 + 144);
                      goto LABEL_283;
                    }

          if (*(_DWORD *)v402 != 0x7FFFFFFF)
          {
            uint64_t v231 = v371;
            if (*v186 < v371) {
              uint64_t v231 = *v186;
            }
            v370 = 0;
            v371 = v231;
          }

LABEL_331:
              if ((_DWORD)jj == (_DWORD)v184) {
                int v186 = -1;
              }
              else {
                int v186 = jj;
              }
              unsigned __int8 v136 = *(_BYTE *)(*(void *)(v138 + 360) + v186);
            }

            if (v241 < 1) {
              goto LABEL_351;
            }
            uint64_t v187 = v241;
            int16x8_t v188 = (signed int *)a5;
            while (1)
            {
              signed int v189 = *v188++;
              sub_100027400(v12, v189, (_DWORD *)&v250 + 1);
              uint64_t v190 = SHIDWORD(v250);
              if (!*(_DWORD *)(v12 + 376) || (_DWORD)v190 == 0) {
                goto LABEL_338;
              }
              uint64_t v192 = *(void *)(v12 + 296);
              if (*(_BYTE *)(v192 + v190))
              {
                if (!*(_DWORD *)(v12 + 336)) {
                  goto LABEL_338;
                }
                uint64_t v193 = *(void *)(v12 + 360);
              }

              else
              {
                *(_BYTE *)(v192 + v190) = 1;
                if (!*(_DWORD *)(v12 + 336)) {
                  goto LABEL_338;
                }
                uint64_t v193 = *(void *)(v12 + 360);
              }

              *(_BYTE *)(v193 + v190) = v136;
LABEL_338:
              if (!--v187)
              {
                uint64_t v138 = v249;
                int v134 = v248;
LABEL_351:
                uint64_t v194 = *(unsigned int *)(v138 + 268);
                BOOL v196 = v134 >= 0 && (int)v194 > v134;
                if (v196 && *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v134) == v134)
                {
                  if ((_DWORD)v194 == v134) {
                    int v197 = -1;
                  }
                  else {
                    int v197 = v134;
                  }
                  LODWORD(v198) = v134;
                  goto LABEL_391;
                }

                if ((int)v194 < 1)
                {
                  if ((_DWORD)v194) {
                    int v197 = 0;
                  }
                  else {
                    int v197 = -1;
                  }
                  if (v196) {
                    goto LABEL_372;
                  }
                }

                else
                {
                  uint64_t v199 = 0LL;
                  while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v199) != v134)
                  {
                    if (v194 == ++v199)
                    {
                      LODWORD(v199) = *(_DWORD *)(v138 + 268);
                      break;
                    }
                  }

                  if ((_DWORD)v199 == (_DWORD)v194) {
                    int v197 = -1;
                  }
                  else {
                    int v197 = v199;
                  }
                  if (v196)
                  {
LABEL_372:
                    int v200 = *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v134);
                    BOOL v201 = v200 == v134;
                    if (v200 == v134) {
                      LODWORD(v198) = v134;
                    }
                    else {
                      LODWORD(v198) = 0;
                    }
                    goto LABEL_391;
                  }
                }

                if ((int)v194 < 1)
                {
                  LODWORD(v198) = 0;
                  goto LABEL_391;
                }

LABEL_386:
                uint64_t v198 = 0LL;
                while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v198) != v134)
                {
                  if (v194 == ++v198)
                  {
                    LODWORD(v198) = *(_DWORD *)(v138 + 268);
                    break;
                  }
                }

LABEL_391:
                if ((_DWORD)v198 == (_DWORD)v194) {
                  int v203 = -1;
                }
                else {
                  int v203 = v198;
                }
                uint64_t v204 = *(void *)(v138 + 288);
                int64x2_t v205 = (int *)(v204 + 4LL * v197);
                int v206 = *v205;
                uint64_t v207 = (v205[1] - *v205);
                if ((int)v207 >= 1)
                {
                  uint64_t v208 = *(void *)(v138 + 304);
                  float64x2_t v209 = (int *)(v208 + 4LL * v206);
                  while (1)
                  {
                    int v210 = *v209++;
                    if (v210 == v203) {
                      break;
                    }
                    if (!--v207) {
                      goto LABEL_456;
                    }
                  }

                  if (*(_DWORD *)(v138 + 336))
                  {
                    if (v196 && *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v134) == v134)
                    {
                      if ((_DWORD)v194 == v134) {
                        LODWORD(v211) = -1;
                      }
                      else {
                        LODWORD(v211) = v134;
                      }
                    }

                    else
                    {
                      if ((int)v194 < 1)
                      {
                        LODWORD(v211) = 0;
                      }

                      else
                      {
                        uint64_t v211 = 0LL;
                        while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v211) != v134)
                        {
                          if (v194 == ++v211)
                          {
                            LODWORD(v211) = *(_DWORD *)(v138 + 268);
                            break;
                          }
                        }
                      }

                      if ((_DWORD)v211 == (_DWORD)v194) {
                        LODWORD(v211) = -1;
                      }
                      if (v196)
                      {
                        int v212 = *(_DWORD *)(*(void *)(v138 + 272) + 4LL * v134);
                        BOOL v213 = v212 == v134;
                        if (v212 == v134) {
                          int v214 = v134;
                        }
                        else {
                          int v214 = 0;
                        }
                        if (v213 || (int)v194 < 1)
                        {
                          int v134 = v214;
                          goto LABEL_430;
                        }
                      }

                      else if ((int)v194 < 1)
                      {
                        int v134 = 0;
                        goto LABEL_430;
                      }

                      uint64_t v216 = 0LL;
                      while (*(_DWORD *)(*(void *)(v138 + 272) + 4 * v216) != v134)
                      {
                        if (v194 == ++v216)
                        {
                          int v134 = *(_DWORD *)(v138 + 268);
                          goto LABEL_430;
                        }
                      }

                      int v134 = v216;
                    }

        v471 = v476 + 1;
        v469 = (unsigned __int16)(v476 + 1);
        v472 = v930;
        v468 = *(_DWORD *)(v930 + 1072);
        if (v468 > v469) {
          continue;
        }
        break;
      }

      v482 = (double)v470;
      if (v473) {
        v482 = -1.0;
      }
      uint64_t v1 = v930;
      v467 = v919;
      int32x4_t v43 = v920;
LABEL_413:
      v466 = (double)*(int *)(v1 + 248) / (v482 * (double)*(int *)(v1 + 252));
      v483 = 8 * v467;
      v484 = sub_1000CAFC0(8 * v467, v166, v167, v168, v169, v170, v171, v172);
      sub_100080118(v1, v43, 0LL, 0LL, 0LL, 0xFFFFFFFFLL, (unint64_t)v484, v485);
      v465 = (uint64_t)v933;
      sub_1000825A4(v1, (unint64_t)v484, v43, 0LL, 0xFFFFFFFFLL, v933, v486, v487);
      sub_1000CB038(v484, v483);
      v464 = v902;
LABEL_414:
      sub_1000BFAB8((uint64_t)v942, v465, (uint64_t)v942, v466);
      sub_1000BFAB8((uint64_t)v937, v465, (uint64_t)v937, v466);
LABEL_415:
      if (qword_1000FDCC0)
      {
        v488 = *v4;
        if (*(_DWORD *)(qword_1000FDCC0 + 3864))
        {
          v489 = *(_DWORD *)(v1 + 576);
          if (v488 >= 1 && v489 >= 1)
          {
            v490 = 0LL;
            do
            {
              v491 = *(void *)(v930 + 600);
              v492 = *(_DWORD *)(v491 + 4 * v490++);
              v493 = *(_DWORD *)(v491 + 4 * v490);
              v494 = v492;
              if (v492 < v493)
              {
                do
                {
                  for (uint64_t n = 0; n != v488; ++n)
                  {
                    if (n < v492 || n >= v493) {
                      sub_1000BF2FC((uint64_t)v942, v494, n, 0.0);
                    }
                  }

                  ++v494;
                }

                while (v494 != v493);
                v489 = *(_DWORD *)(v930 + 576);
              }
            }

            while (v490 < v489);
            v488 = *v4;
            uint64_t v1 = v930;
            v464 = v902;
          }

          if (v489 >= 1 && v488 >= 1)
          {
            v497 = 0LL;
            do
            {
              v498 = *(void *)(v930 + 600);
              v499 = *(_DWORD *)(v498 + 4 * v497++);
              v500 = *(_DWORD *)(v498 + 4 * v497);
              v501 = v499;
              if (v499 < v500)
              {
                do
                {
                  for (iuint64_t i = 0; ii != v488; ++ii)
                  {
                    if (ii < v499 || ii >= v500) {
                      sub_1000BF2FC((uint64_t)v937, v501, ii, 0.0);
                    }
                  }

                  ++v501;
                }

                while (v501 != v500);
                v489 = *(_DWORD *)(v930 + 576);
              }
            }

            while (v497 < v489);
            v488 = *v4;
            uint64_t v1 = v930;
            v464 = v902;
          }
        }

        v496 = *(int **)(v1 + 320);
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3880))
        {
          if (sub_10007C82C( v1,  (unsigned int *)v942,  *(void *)(v1 + 320),  v168,  v169,  v170,  v171,  v172)) {
            goto LABEL_451;
          }
LABEL_455:
          int32x4_t v42 = 0;
          int32x4_t v40 = v883;
          goto LABEL_41;
        }
      }

      else
      {
        v496 = *(int **)(v1 + 320);
        v488 = *(_DWORD *)(v1 + 1100);
      }

LABEL_430:
                    if (v134 == (_DWORD)v194) {
                      int v217 = -1;
                    }
                    else {
                      int v217 = v134;
                    }
                    float64x2_t v218 = (int *)(v204 + 4LL * (int)v211);
                    uint64_t v219 = *v218;
                    uint64_t v220 = (v218[1] - v219);
                    if ((int)v220 < 1)
                    {
LABEL_437:
                      unsigned __int8 v136 = 0;
                    }

                    else
                    {
                      uint32x4_t v221 = (int *)(v208 + 4 * v219);
                      while (1)
                      {
                        int v222 = *v221++;
                        if (v222 == v217) {
                          break;
                        }
                        LODWORD(v219) = v219 + 1;
                        if (!--v220) {
                          goto LABEL_437;
                        }
                      }

                      unsigned __int8 v136 = *(_BYTE *)(*(void *)(v138 + 352) + (int)v219);
                    }
                  }

                  if (v241 >= 1)
                  {
                    uint64_t v223 = 0LL;
                    int v224 = v136;
                    while (1)
                    {
                      sub_100027400(v12, *(_DWORD *)(a5 + 4 * v223), (_DWORD *)&v250 + 1);
                      if (v246 >= 1) {
                        break;
                      }
LABEL_441:
                      if (++v223 == v241) {
                        goto LABEL_456;
                      }
                    }

                    int v225 = HIDWORD(v250);
                    uint64_t v226 = v246;
                    uint16x4_t v227 = (signed int *)a3;
                    while (2)
                    {
                      signed int v230 = *v227++;
                      signed int v229 = v230;
                      uint64_t v231 = *(void *)(v12 + 256);
                      if (*(_DWORD *)(v231 + 152) <= v230)
                      {
                        uint64_t v233 = *(int *)(v231 + 32) + 1LL;
                        v234 = (void *)sub_1000C1074(4 * v233);
                        j__memmove(v234, *(const void **)(v231 + 144), 4LL * *(int *)(v231 + 152));
                        sub_1000C0EF8(*(void *)(v231 + 144));
                        *(void *)(v231 + 144) = v234;
                        *(_DWORD *)(v231 + 152) = v233;
                        uint64_t v232 = v229;
                        int v228 = *((_DWORD *)v234 + v229);
                        if (!v229) {
                          goto LABEL_445;
                        }
                      }

                      else
                      {
                        uint64_t v232 = v229;
                        int v228 = *(_DWORD *)(*(void *)(v231 + 144) + 4LL * v229);
                        if (!v229) {
                          goto LABEL_445;
                        }
                      }

                      if (!v228)
                      {
                        int v235 = *(_DWORD *)(v12 + 268);
                        if (v235 == *(_DWORD *)(v12 + 264))
                        {
                          if (!sub_100027558(v12))
                          {
                            int v228 = 0;
                            goto LABEL_445;
                          }

                          int v235 = *(_DWORD *)(v12 + 268);
                        }

                        *(_DWORD *)(*(void *)(v12 + 272) + 4LL * v235) = v229;
                        int v228 = *(_DWORD *)(v12 + 268);
                        *(_DWORD *)(*(void *)(v231 + 144) + 4 * v232) = v228;
                        int32x4_t v236 = (_DWORD *)(*(void *)(v12 + 288) + 4LL * *(int *)(v12 + 268));
                        v236[1] = *v236;
                        ++*(_DWORD *)(v12 + 268);
                        sub_100031AA0(v231, v229);
                        uint64_t v252 = 0LL;
                        int v251 = 0;
                        sub_10003366C(*(void *)(v12 + 256), v229, &v252, &v251);
                        if (v252) {
                          *(_DWORD *)(v12 + 340) = 1;
                        }
                      }

LABEL_445:
                      sub_10002785C(v12, v225, v228, v224);
                      if (!--v226) {
                        goto LABEL_441;
                      }
                      continue;
                    }
                  }
                }

LABEL_456:
                if (v243) {
                  sub_1000CB038(v243, 4LL * (int)v247);
                }
                sub_1000CB038(v245, v238);
                return v12;
              }
            }
          }

LABEL_142:
          uint64_t v88 = 0LL;
          do
          {
            if (*(_DWORD *)(*(void *)(v72 + 272) + 4 * v88) == v74) {
              goto LABEL_147;
            }
            ++v88;
          }

          while (v82 != v88);
          LODWORD(v88) = v82;
          goto LABEL_147;
        }
      }

      else
      {
        uint32x4_t v243 = (void *)sub_1000CAF58(4LL * (int)v247, v65, v66, v67, v68, v69, v70, v71);
        uint64_t v72 = v249;
        uint64_t v73 = *(unsigned int *)(v249 + 268);
        int v74 = v248;
        if ((v248 & 0x80000000) != 0) {
          goto LABEL_95;
        }
      }

      if ((int)v73 > v74)
      {
        LODWORD(j) = v74;
      }

      goto LABEL_95;
    }

    goto LABEL_54;
  }

  if ((int)v13 < 1)
  {
    LODWORD(v16) = 0;
  }

  else
  {
    uint64_t v16 = 0LL;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v16) != (_DWORD)a8)
    {
      if (v13 == ++v16) {
        return v12;
      }
    }
  }

  if ((_DWORD)v16 != (_DWORD)v13)
  {
    if (v15)
    {
      int v21 = *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a8);
      BOOL v22 = v21 == (_DWORD)a8;
      if (v21 == (_DWORD)a8) {
        LODWORD(v17) = a8;
      }
      else {
        LODWORD(v17) = 0;
      }
    }

    else if ((int)v13 < 1)
    {
      if ((_DWORD)v13) {
        LODWORD(v17) = 0;
      }
      else {
        LODWORD(v17) = -1;
      }
      uint64_t v249 = a1;
      if ((_DWORD)a8) {
        goto LABEL_44;
      }
      goto LABEL_16;
    }

    uint64_t v17 = 0LL;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v17) == (_DWORD)a8) {
        goto LABEL_41;
      }
      ++v17;
    }

    while (v13 != v17);
    LODWORD(v17) = *(_DWORD *)(a1 + 268);
LABEL_41:
    if ((_DWORD)v17 == (_DWORD)v13) {
      LODWORD(v17) = -1;
    }
    uint64_t v249 = a1;
    if ((_DWORD)a8) {
      goto LABEL_44;
    }
LABEL_16:
    if ((int)v13 >= 2)
    {
      uint64_t v18 = *(void *)(a1 + 296);
      if (v13 < 9)
      {
        int v19 = 0;
        unint64_t v20 = 1LL;
        goto LABEL_71;
      }

      uint64_t v31 = v13 - 1;
      if (v13 >= 0x21)
      {
        int32x4_t v33 = 0uLL;
        unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFE0LL;
        v34.i64[0] = 0x100000001LL;
        v34.i64[1] = 0x100000001LL;
        int32x4_t v35 = (int8x16_t *)(v18 + 17);
        int32x4_t v36 = 0uLL;
        unint64_t v37 = v31 & 0xFFFFFFFFFFFFFFE0LL;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        int32x4_t v42 = 0uLL;
        int32x4_t v43 = 0uLL;
        do
        {
          uint8x16_t v44 = (uint8x16_t)vtstq_s8(v35[-1], v35[-1]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)v44.i8);
          uint16x8_t v46 = vmovl_high_u8(v44);
          uint8x16_t v47 = (uint8x16_t)vtstq_s8(*v35, *v35);
          uint16x8_t v48 = vmovl_u8(*(uint8x8_t *)v47.i8);
          uint16x8_t v49 = vmovl_high_u8(v47);
          int32x4_t v39 = vaddq_s32(v39, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v46), v34));
          int32x4_t v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v46.i8), v34));
          int32x4_t v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v45), v34));
          int32x4_t v33 = vaddq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8), v34));
          int32x4_t v43 = vaddq_s32(v43, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v49), v34));
          int32x4_t v42 = vaddq_s32(v42, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v49.i8), v34));
          int32x4_t v41 = vaddq_s32(v41, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v48), v34));
          int32x4_t v40 = vaddq_s32(v40, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v48.i8), v34));
          v35 += 2;
          v37 -= 32LL;
        }

        while (v37);
        int v19 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v40, v33), vaddq_s32(v42, v38)),  vaddq_s32(vaddq_s32(v41, v36), vaddq_s32(v43, v39))));
        if (v31 == v32) {
          goto LABEL_75;
        }
        if ((v31 & 0x18) == 0)
        {
          unint64_t v20 = v32 | 1;
LABEL_71:
          uint64_t v57 = v13 - v20;
          uint64_t v58 = (unsigned __int8 *)(v18 + v20);
          do
          {
            if (*v58++) {
              ++v19;
            }
            --v57;
          }

          while (v57);
          goto LABEL_75;
        }
      }

      else
      {
        int v19 = 0;
        unint64_t v32 = 0LL;
      }

      unint64_t v20 = v31 & 0xFFFFFFFFFFFFFFF8LL | 1;
      int32x4_t v50 = 0uLL;
      int32x4_t v51 = (int32x4_t)v19;
      uint64_t v52 = (int8x8_t *)(v32 + v18 + 1);
      unint64_t v53 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8LL);
      v54.i64[0] = 0x100000001LL;
      v54.i64[1] = 0x100000001LL;
      do
      {
        int8x8_t v55 = *v52++;
        uint16x8_t v56 = vmovl_u8((uint8x8_t)vtst_s8(v55, v55));
        int32x4_t v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v56), v54));
        int32x4_t v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8), v54));
        v53 += 8LL;
      }

      while (v53);
      int v19 = vaddvq_s32(vaddq_s32(v51, v50));
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8LL)) {
        goto LABEL_75;
      }
      goto LABEL_71;
    }

              unsigned __int8 v103 = *(int *)(a1 + 172);
              if ((_DWORD)v103)
              {
                unsigned int v104 = 0;
                while (1)
                {
                  while (1)
                  {
                    uint64_t v105 = v103 - 1;
                    if (v103 - 1 < 0) {
                      uint64_t v105 = v103;
                    }
                    signed int v106 = v105 >> 1;
                    uint64_t v107 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v104 + (int)v106));
                    if (v107 <= v139) {
                      break;
                    }
                    unsigned __int8 v103 = (int)v106;
                    if (!(_DWORD)v106) {
                      goto LABEL_150;
                    }
                  }

                  uint64_t v102 = v104 + (int)v106;
                  if (v107 == v139) {
                    goto LABEL_190;
                  }
                  v103 -= (int)v106 + 1;
                  unsigned int v104 = v102 + 1;
                  if (!v103) {
                    goto LABEL_150;
                  }
                }
              }

              goto LABEL_150;
            }

            int v61 = *(_WORD *)(*(void *)(a1 + 192) + 2LL * v88);
          }
        }

        *(_WORD *)int v27 = v61;
        v27 += 2;
        goto LABEL_116;
      }

      int32x4_t v36 = &v13[2 * (int)sub_1000CDC84(v13, &v139)];
      int v27 = v25;
      if (v139 != 12293)
      {
        unint64_t v37 = *(void *)(a1 + 216);
        if (v37)
        {
          int32x4_t v38 = *(int *)(a1 + 208);
          if ((_DWORD)v38)
          {
            int32x4_t v39 = 0;
            while (1)
            {
              while (1)
              {
                int32x4_t v40 = v38 - 1;
                if (v38 - 1 < 0) {
                  int32x4_t v40 = v38;
                }
                int32x4_t v41 = v40 >> 1;
                int32x4_t v42 = v39 + v41;
                int32x4_t v43 = *(unsigned __int16 *)(v37 + 2LL * (v39 + (int)v41));
                if (v43 <= v139) {
                  break;
                }
                int32x4_t v38 = (int)v41;
                if (!(_DWORD)v41) {
                  goto LABEL_78;
                }
              }

              if (v43 == v139) {
                break;
              }
              v38 -= (int)v41 + 1;
              int32x4_t v39 = v42 + 1;
              if (!v38) {
                goto LABEL_78;
              }
            }

            if (v42 != -1)
            {
              uint64_t v69 = (_WORD *)(*(void *)(a1 + 232) + 2LL * v42);
LABEL_89:
              *(_WORD *)uint64_t v25 = *v69;
              int v27 = v25 + 2;
              goto LABEL_90;
            }
          }
        }

LABEL_54:
    int v19 = 0;
    goto LABEL_75;
  }

  return v12;
}

  if (sub_10009D1D4(*(void *)(a1 + 9000)))
  {
    *(_DWORD *)(a1 + 552) = 3;
  }

  else
  {
    if (*(_DWORD *)(a1 + 612) >= (*(_DWORD *)(a1 + 608) << 8) - 1) {
      *(_DWORD *)(a1 + 552) = 3;
    }
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    *(_DWORD *)(a1 + 9044) = v32;
  }

uint64_t sub_10002D050(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t sub_10002D060(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(void *)(a2 + 144) = sub_100033E78(*(void *)(a1 + 256));
  *(void *)(a2 + 152) = sub_100033E84(*(void *)(a1 + 256));
  if (a3 == 65534)
  {
    *(_DWORD *)(a2 + 168) = 1;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    int v12 = 65534;
LABEL_5:
    uint64_t result = sub_10002E394(v10, v11, v12, a4, a5);
    *(void *)(a2 + 128) = 0LL;
    return result;
  }

  uint64_t v13 = (a4 >> 35) & 0x3FFFF;
  uint64_t v14 = sub_100031134(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF);
  if ((unsigned __int16)(a4 & 0x3FF) < (int)(sub_100030E38(v14, (a4 >> 10) & 0x1FFFFFF) - 1))
  {
    *(_DWORD *)(a2 + 168) = 1;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    int v12 = a3;
    goto LABEL_5;
  }

  uint64_t v16 = (a4 >> 53) & 0x3FF;
  uint64_t v17 = *(unsigned int *)(a1 + 268);
  if ((int)v17 <= (int)v13 || *(_DWORD *)(*(void *)(a1 + 272) + 4 * v13) != (_DWORD)v13)
  {
    if ((int)v17 < 1)
    {
      LODWORD(v13) = 0;
    }

    else
    {
      uint64_t v18 = 0LL;
      while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v18) != (_DWORD)v13)
      {
        if (v17 == ++v18)
        {
          LODWORD(v13) = *(_DWORD *)(a1 + 268);
          goto LABEL_16;
        }
      }

      LODWORD(v13) = v18;
    }
  }

uint64_t sub_10002D21C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6 = sub_100033398(*(void *)(a2 + 256));
  uint64_t v7 = *(unsigned __int16 **)(a1 + 128);
  if (!v7) {
    return sub_10002AF0C(a1, a2, a3);
  }
  uint64_t v8 = v6;
  while (1)
  {
    int v9 = *(_DWORD *)(a1 + 136);
    if (v9 == v7[1])
    {
      uint64_t result = sub_10002E27C(a1, a2);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v7 = *(unsigned __int16 **)(a1 + 128);
      int v9 = *(_DWORD *)(a1 + 136);
    }

    int v11 = v9 + *v7;
    *(_DWORD *)(a1 + 136) = v9 + 1;
    unsigned int v12 = *(unsigned __int16 *)(*(void *)(a1 + 144) + 2LL * v11);
    *a3 = v12;
    if (!*(_DWORD *)(a1 + 84) || sub_1000BBCE0(v8, *(unsigned __int16 *)(a1 + 28), v12))
    {
      int v13 = *(unsigned __int16 *)(a1 + 120);
      if (v13 == 0xFFFF || v13 == *a3) {
        break;
      }
    }
  }

  __int16 v14 = *(_WORD *)(*(void *)(a1 + 152) + 2LL * v11);
  else {
    BOOL v15 = 0;
  }
  int v16 = v15;
  *((_DWORD *)a3 + 4) = v16;
  *((void *)a3 + 1) = *(void *)(a1 + 96) + ((unint64_t)(v14 & 0x7FFF) << 10);
  a3[1] = *(_WORD *)(a1 + 88);
  *((void *)a3 + 3) = 0LL;
  return 1LL;
}

uint64_t sub_10002D354(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a2 + 168) = 1;
  return sub_10002E394(a1, a2, a3, a4, a5);
}

BOOL sub_10002D360(uint64_t a1)
{
  return *(_DWORD *)(a1 + 268) == 2 && *(_DWORD *)(a1 + 372) == 1;
}

uint64_t sub_10002D384( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000336E8(*(void *)(a1 + 256), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10002D38C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v10 = sub_100033398(*(void *)(a1 + 256));
  uint64_t v11 = *(void *)(a1 + 400);
  if (*(_DWORD *)(a1 + 424) >= a3)
  {
    __int16 v14 = *(unsigned __int16 **)(a1 + 408);
    unsigned int v34 = 0;
    if (a3 < 1) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v16 = a3;
    uint64_t v17 = (_WORD *)v11;
    uint64_t v18 = v14;
    do
    {
      unsigned int v19 = *(unsigned __int16 *)(a2 + 2LL * (int)--v16);
      *v17++ = v19;
      *v18++ = sub_1000BB868(v10, v19, &v34);
    }

    while (v16);
LABEL_10:
    for (uint64_t i = 0LL; ; i += 8)
    {
      uint64_t v35 = 0LL;
      unsigned int v21 = *v14;
      if (!i) {
        break;
      }
      if (*i != v21) {
        return 0LL;
      }
LABEL_30:
      while (1)
      {
        uint64_t v29 = *(unsigned int *)(*(void *)(a1 + 272) + 4LL * *((int *)i + 1));
        sub_1000334EC(*(void *)(a1 + 256), v29, *((unsigned int *)i + 2), (_DWORD *)&v35 + 1, v6, v7, v8, v9);
        int v30 = *((_DWORD *)i + 3);
        uint64_t v31 = (HIDWORD(v35) - v30);
        if (a3 >= (int)v31)
        {
          uint64_t v32 = 1LL;
          if ((int)v31 >= 2)
          {
            while (sub_100033588( *(void *)(a1 + 256),  v29,  *((unsigned int *)i + 2),  (v30 + v32),  &v35,  v7,  v8,  v9) == v14[v32])
            {
              if (v31 == ++v32) {
                goto LABEL_34;
              }
            }
          }

          if ((_DWORD)v32 == (_DWORD)v31) {
            break;
          }
        }

        int v28 = i[8];
        i += 8;
        if (v28 != *v14) {
          return 0LL;
        }
      }

uint64_t sub_10002D638(uint64_t a1, int a2, unsigned int *a3, const char **a4, _DWORD *a5, BOOL *a6)
{
  uint64_t v11 = sub_100033398(*(void *)(a1 + 256));
  unint64_t v19 = sub_1000CAF58(2LL * a2, v12, v13, v14, v15, v16, v17, v18);
  int v20 = (unsigned __int16 *)v19;
  if (a2 >= 1)
  {
    uint64_t v21 = a2;
    int v22 = (int16x8_t *)v19;
    do
    {
      unsigned int v23 = *a3++;
      sub_1000B39A4(v11, v23, v22, 1);
      int v22 = (int16x8_t *)((char *)v22 + 2);
      --v21;
    }

    while (v21);
  }

  uint64_t v24 = sub_10002EAD8((_DWORD *)a1, v20, a2, 65534, 0LL, a4, a5, a6);
  sub_1000CB038(v20, 2LL * a2);
  return v24;
}

uint64_t sub_10002D718( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = 0;
  uint64_t v25 = 0LL;
  int v24 = 0;
  if (*(int *)(a1 + 268) >= 2)
  {
    int v9 = 0;
    uint64_t v10 = 1LL;
    do
    {
      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v10);
      sub_1000333A0(*(void *)(a1 + 256), v11, (_DWORD *)&v25 + 1, a4, a5, a6, a7, a8);
      if (SHIDWORD(v25) >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          sub_1000334EC(*(void *)(a1 + 256), v11, v12, &v25, a5, a6, a7, a8);
          v9 += v25;
          uint64_t v12 = (v12 + 1);
        }

        while ((int)v12 < SHIDWORD(v25));
      }

      ++v10;
    }

    while (v10 < *(int *)(a1 + 268));
  }

  uint64_t result = sub_1000C1074(16LL * (v9 + 1));
  if (result)
  {
    unint64_t v19 = (_DWORD *)result;
    *(void *)(a1 + 384) = result;
    *(_DWORD *)(a1 + 392) = v9;
    if (*(int *)(a1 + 268) >= 2)
    {
      uint64_t v20 = 1LL;
      do
      {
        uint64_t v21 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v20);
        sub_1000333A0(*(void *)(a1 + 256), v21, (_DWORD *)&v25 + 1, v14, v15, v16, v17, v18);
        if (SHIDWORD(v25) >= 1)
        {
          uint64_t v22 = 0LL;
          do
          {
            sub_1000334EC(*(void *)(a1 + 256), v21, v22, &v25, v15, v16, v17, v18);
            if ((int)v25 >= 1)
            {
              uint64_t v23 = 0LL;
              do
              {
                *(_WORD *)unint64_t v19 = sub_100033588(*(void *)(a1 + 256), v21, v22, v23, &v24, v16, v17, v18);
                v19[1] = (unsigned __int16)v20;
                v19[2] = (unsigned __int16)v22;
                v19[3] = (unsigned __int16)v23;
                v19 += 4;
                uint64_t v23 = (v23 + 1);
              }

              while ((int)v23 < (int)v25);
            }

            uint64_t v22 = (v22 + 1);
          }

          while ((int)v22 < SHIDWORD(v25));
        }

        *(_WORD *)unint64_t v19 = -1;
        ++v20;
      }

      while (v20 < *(int *)(a1 + 268));
      unint64_t v19 = *(_DWORD **)(a1 + 384);
    }

    qsort(v19, v9, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_10002F058);
    return 1LL;
  }

  return result;
}

uint64_t sub_10002D8F8(uint64_t a1)
{
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 384));
  *(void *)(a1 + 384) = 0LL;
  return result;
}

uint64_t sub_10002D920( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  *(_DWORD *)(a1 + 312) = -1;
  *(void *)(a1 + 104) = sub_10002D354;
  *(void *)(a1 + 112) = sub_10002AF0C;
  LODWORD(v12) = *(_DWORD *)(a1 + 268);
  if ((int)v12 < 2)
  {
LABEL_9:
    *(_DWORD *)(a1 + 344) = v9;
    if (!v9) {
      goto LABEL_34;
    }
    if ((int)v12 < 2)
    {
      uint64_t v20 = 0LL;
      LODWORD(v19) = 1;
LABEL_23:
      if ((_DWORD)v19 != (_DWORD)v12) {
        goto LABEL_32;
      }
    }

    else
    {
      unsigned int v17 = *a2;
      if (*a2 == -1) {
        goto LABEL_25;
      }
      uint64_t v18 = *(void *)(a1 + 272);
      uint64_t v19 = 1LL;
LABEL_14:
      uint64_t v20 = a2;
      do
      {
        if (v17 == *(_DWORD *)(v18 + 4 * v19))
        {
          *(void *)(a1 + 104) = sub_10002D354;
          *(void *)(a1 + 112) = sub_10002AF0C;
          if (*v20 == -1) {
            break;
          }
          goto LABEL_23;
        }

        unsigned int v21 = v20[1];
        ++v20;
        unsigned int v17 = v21;
      }

      while (v21 != -1);
      while (++v19 != v12)
      {
        unsigned int v17 = *a2;
        uint64_t v20 = a2;
        if (*a2 != -1) {
          goto LABEL_14;
        }
      }
    }

    a2 = v20;
    if ((int)v12 < 2)
    {
      LODWORD(v19) = 1;
LABEL_32:
      if ((_DWORD)v19 == (_DWORD)v12)
      {
        *(void *)(a1 + 104) = sub_10002D060;
        *(void *)(a1 + 112) = sub_10002D21C;
      }

      goto LABEL_34;
    }

uint64_t sub_10002DD90(uint64_t result)
{
  *(void *)(result + 104) = sub_10002D354;
  *(void *)(result + 112) = sub_10002AF0C;
  return result;
}

uint64_t sub_10002DDA8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, int *a5, BOOL *a6)
{
  uint64_t result = sub_100033BD8(*(uint64_t **)(a1 + 256), a2, a3, a4, a5, a6);
  uint64_t v10 = *(unsigned int *)(a1 + 268);
  if ((a2 & 0x80000000) == 0 && (int)v10 > (int)a2 && *(_DWORD *)(*(void *)(a1 + 272) + 4LL * a2) == a2)
  {
    if (a2 == (_DWORD)v10) {
      int v11 = -1;
    }
    else {
      int v11 = a2;
    }
    if (*(_BYTE *)(*(void *)(a1 + 296) + v11)) {
      return result;
    }
    goto LABEL_24;
  }

  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0LL;
    while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v12) != a2)
    {
      if (v10 == ++v12)
      {
        if (*(_BYTE *)(*(void *)(a1 + 296) - 1LL)) {
          return result;
        }
        goto LABEL_24;
      }
    }

    if ((_DWORD)v12 == (_DWORD)v10) {
      int v14 = -1;
    }
    else {
      int v14 = v12;
    }
    if (*(_BYTE *)(*(void *)(a1 + 296) + v14)) {
      return result;
    }
    goto LABEL_24;
  }

  if ((_DWORD)v10) {
    int v13 = 0;
  }
  else {
    int v13 = -1;
  }
  if (!*(_BYTE *)(*(void *)(a1 + 296) + v13)) {
LABEL_24:
  }
    *a6 = 0;
  return result;
}

uint64_t sub_10002DE9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0LL;
  uint64_t v9 = 1LL;
  while (*(_DWORD *)(*(void *)(a1 + 288) + 4 * v9 + 4) - *(_DWORD *)(*(void *)(a1 + 288) + 4 * v9) <= 0)
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v9);
    sub_1000333A0(*(void *)(a1 + 256), v10, (_DWORD *)&v13 + 1, a4, a5, a6, a7, a8);
    if (SHIDWORD(v13) >= 1)
    {
      uint64_t v11 = 0LL;
      do
      {
        sub_1000334EC(*(void *)(a1 + 256), v10, v11, &v13, a5, a6, a7, a8);
        uint64_t v11 = (v11 + 1);
      }

      while ((int)v11 < SHIDWORD(v13));
    }
  }

  return 1LL;
}

int8x8_t *sub_10002DF80(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 76), v5);
  if ((_DWORD)result)
  {
    uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 264), v7);
    if ((_DWORD)result)
    {
      uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 268), v8);
      if ((_DWORD)result)
      {
        uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 368), v9);
        if ((_DWORD)result)
        {
          uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 372), v10);
          if ((_DWORD)result)
          {
            uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 336), v11);
            if ((_DWORD)result)
            {
              uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 340), v12);
              if ((_DWORD)result)
              {
                uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 348), v13);
                if ((_DWORD)result)
                {
                  uint64_t v15 = *(void *)(a1 + 280);
                  uint64_t result = (int8x8_t *)sub_1000BDB78(a2, v15 != 0, v14);
                  if ((_DWORD)result)
                  {
                    unsigned int v17 = *(void **)(a1 + 272);
                    unsigned int v18 = v17 ? *(_DWORD *)(a1 + 264) : 0;
                    uint64_t result = sub_1000BDBCC(a2, v17, v18, 4, v16);
                    if ((_DWORD)result)
                    {
                      uint64_t v20 = *(void **)(a1 + 288);
                      unsigned int v21 = v20 ? *(_DWORD *)(a1 + 264) + 1 : 0;
                      uint64_t result = sub_1000BDBCC(a2, v20, v21, 4, v19);
                      if ((_DWORD)result)
                      {
                        unsigned int v23 = *(void **)(a1 + 296);
                        unsigned int v24 = v23 ? *(_DWORD *)(a1 + 264) : 0;
                        uint64_t result = sub_1000BDBCC(a2, v23, v24, 1, v22);
                        if ((_DWORD)result)
                        {
                          uint64_t v26 = *(void **)(a1 + 304);
                          unsigned int v27 = v26 ? *(_DWORD *)(a1 + 368) : 0;
                          uint64_t result = sub_1000BDBCC(a2, v26, v27, 4, v25);
                          if ((_DWORD)result)
                          {
                            uint64_t v29 = *(void **)(a1 + 352);
                            if (!v29
                              || (uint64_t result = sub_1000BDBCC(a2, v29, *(_DWORD *)(a1 + 368), 1, v28), (_DWORD)result)
                              && ((uint64_t v31 = *(void **)(a1 + 360)) == 0LL ? (v32 = 0) : (v32 = *(_DWORD *)(a1 + 264)),
                                  uint64_t result = sub_1000BDBCC(a2, v31, v32, 1, v30),
                                  (_DWORD)result))
                            {
                              if (!v15) {
                                return (int8x8_t *)1;
                              }
                              uint64_t v33 = *(void **)(a1 + 280);
                              unsigned int v34 = v33 ? *(_DWORD *)(a1 + 264) : 0;
                              uint64_t result = sub_1000BDBCC(a2, v33, v34, 4, v28);
                              if ((_DWORD)result) {
                                return (int8x8_t *)1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10002E154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_10003114C(*(void *)(a1 + 256), a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    int v10 = *(_DWORD *)(a1 + 268);
    if (v10 <= 0x40000)
    {
      if (v10 < 2)
      {
        return 1LL;
      }

      else
      {
        uint64_t v24 = 0LL;
        uint64_t v11 = 1LL;
        while (1)
        {
          uint64_t v12 = *(void *)(a1 + 272);
          uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
          if (!sub_100033278(*(void *)(a1 + 256), *(_DWORD *)(v12 + 4 * v11)))
          {
            sub_1000333A0(*(void *)(a1 + 256), v13, (_DWORD *)&v24 + 1, v14, v15, v16, v17, v18);
            if (SHIDWORD(v24) > 0x2000000) {
              return 0LL;
            }
            if (SHIDWORD(v24) >= 1) {
              break;
            }
          }

LABEL_7:
          ++v11;
          uint64_t result = 1LL;
        }

        uint64_t v23 = 0LL;
        while (1)
        {
          sub_1000334EC(*(void *)(a1 + 256), v13, v23, &v24, v19, v20, v21, v22);
          uint64_t v23 = (v23 + 1);
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

    LODWORD(v14) = *(_DWORD *)(v14 + 1560);
    goto LABEL_8;
  }

  if (!*(_DWORD *)(qword_1000FDCC0 + 1160))
  {
    *a8 = *(_DWORD *)(qword_1000FDCC0 + 1536);
    uint64_t v14 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (a2)
  {
    uint64_t result = sub_100033408(a2, (int *)&v24, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)a8);
    if (!(_DWORD)result) {
      return result;
    }
LABEL_16:
    uint64_t v17 = (_BYTE *)sub_1000B31D0(*(uint64_t **)(a1 + 376));
    if (sub_1000C8AB4(v17, "enus"))
    {
      if ((int)v24 >= 1)
      {
        if (v24 >= 0x208)
        {
          uint64_t v18 = 20000;
          if (v24 < 0x44C)
          {
            uint64_t v19 = 3000;
            uint64_t v20 = 6000;
            uint64_t v21 = 2500;
LABEL_52:
            *a9 = v21;
            *a10 = v18;
            *a7 = v20;
            uint64_t result = 1LL;
            *a8 = v19;
            return result;
          }

          uint64_t v22 = v24 >= 0xC1C;
          if (v24 >= 0xC1C) {
            uint64_t v21 = 7000;
          }
          else {
            uint64_t v21 = 5000;
          }
          if (v24 >= 0xC1C) {
            uint64_t v20 = 30000;
          }
          else {
            uint64_t v20 = 20000;
          }
          if (v24 >= 0xC1C) {
            uint64_t v18 = 60000;
          }
          else {
            uint64_t v18 = 40000;
          }
          uint64_t v23 = 8000;
LABEL_49:
          if (v22) {
            uint64_t v19 = 12000;
          }
          else {
            uint64_t v19 = v23;
          }
          goto LABEL_52;
        }

        goto LABEL_23;
      }
    }

    else if ((int)v24 >= 1)
    {
      if (v24 >= 0x208)
      {
        if (v24 < 0x44C)
        {
          uint64_t v19 = 1000;
          uint64_t v20 = 6000;
          uint64_t v18 = 20000;
          uint64_t v21 = 2500;
          goto LABEL_52;
        }

        uint64_t v18 = 40000;
        uint64_t v21 = 5000;
        if (v24 < 0x834)
        {
          uint64_t v19 = 1500;
          uint64_t v20 = 6000;
          goto LABEL_52;
        }

        uint64_t v22 = v24 >= 0xC1C;
        if (v24 >= 0xC1C) {
          uint64_t v21 = 7000;
        }
        else {
          uint64_t v21 = 5000;
        }
        if (v24 >= 0xC1C) {
          uint64_t v18 = 60000;
        }
        else {
          uint64_t v18 = 40000;
        }
        if (v24 >= 0xC1C) {
          uint64_t v20 = 30000;
        }
        else {
          uint64_t v20 = 10000;
        }
        uint64_t v23 = 2500;
        goto LABEL_49;
      }

    int32x4_t v51 = sub_1000B3A9C(*(void *)(a1 + 376), v55);
    unint64_t v53 = *v50++;
    uint64_t v52 = v53;
    int8x16_t v54 = v51 == 0xFFFF || v52 == -1;
    if (v54) {
      uint16x8_t v49 = 0;
    }
    ++v31;
    --v48;
  }

  while (v48);
  unsigned int v59 = v49 == 0;
  a5 = v93;
  a6 = v88;
LABEL_27:
  uint64_t v60 = memcmp(__s1, __s2, 4LL * a2);
  uint64_t v57 = 0LL;
  uint64_t v58 = 1LL;
  uint64_t v19 = v92;
  if (v60 && !v59)
  {
    if (qword_1000FDCC0) {
      int v61 = *(_DWORD *)(qword_1000FDCC0 + 4928);
    }
    else {
      int v61 = 0;
    }
    uint64_t v57 = (unsigned int *)sub_10002FF9C((uint64_t)__s2, v94, *(uint64_t **)(a1 + 376), v61);
    unsigned int v104 = v57;
    if (v57)
    {
      uint64_t v58 = 2LL;
      goto LABEL_34;
    }

    sub_1000CB038(v47, v89);
    sub_1000CB038(v39, v90);
    sub_1000CB038(__s2, v91);
    __int16 v80 = (uint64_t)v92;
LABEL_64:
    sub_10002613C(v80);
    return v57;
  }

  uint64_t v17 = sub_10009AA7C(1, 0, 0, 1, 0, *(uint64_t **)(v13 + 376), *(void *)(v13 + 384));
  if (!sub_10009AE4C(v17, 4 * (int)v9 * v11[1], ((int)v9 * v11[1]) << 6))
  {
    sub_10003991C(v13);
    uint64_t result = sub_10009ACA8(v17);
    if (!v14) {
      return result;
    }
    goto LABEL_54;
  }

  *(void *)(v13 + 656) = sub_100061748(*(void *)(v13 + 384), v16, v86, v17);
  sub_10009ACA8(v17);
  if (!*(void *)(v13 + 656))
  {
    uint64_t result = sub_10003991C(v13);
    if (!v14) {
      return result;
    }
LABEL_54:
    sub_1000C0EF8(v86);
    sub_1000C0EF8(v85);
    return sub_1000C0EF8(v84);
  }

  if (!sub_1000527CC(v13, 0LL, 0LL, 0LL, 0LL, 1LL, v18, v19, v74, 1u))
  {
    sub_10003991C(v13);
    uint64_t result = sub_100060174(*(void *)(v13 + 656));
    *(void *)(v13 + 656) = 0LL;
    if (!v14) {
      return result;
    }
    goto LABEL_54;
  }

  uint64_t v20 = v11;
  uint64_t v21 = sub_10009D1D4(a4);
  uint64_t v22 = v21 - 1;
  if (v21 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = (const void *)sub_1000B2DB4(a4, v23, &v87);
      if (!v24) {
        break;
      }
      sub_100052A3C((uint64_t *)v13, v24, v87);
      if (sub_1000398FC(v13)) {
        break;
      }
    }

    while (v22 != v23++);
  }

  (*(void (**)(uint64_t, uint64_t))(v13 + 928))(v13, a4);
  unsigned int v32 = *(_DWORD *)(v13 + 524);
  if (v32 != 5)
  {
    if (v32 == 1) {
      *(_DWORD *)(v13 + 524) = 0;
    }
  }

  if ((_DWORD)v9 == 1)
  {
    int8x8_t v55 = 0LL;
  }

  else
  {
    int8x8_t v55 = v9 & 0xFFFFFFFE;
    uint16x8_t v56 = v20 + 35;
    uint64_t v57 = v55;
    do
    {
      *(v56 - 32) = 0x40000000;
      *uint16x8_t v56 = 0x40000000;
      v56 += 64;
      v57 -= 2LL;
    }

    while (v57);
    if (v55 == v9) {
      goto LABEL_59;
    }
  }

  uint64_t v58 = &v20[32 * v55 + 3];
  unsigned int v59 = v9 - v55;
  do
  {
    *uint64_t v58 = 0x40000000;
    v58 += 32;
    --v59;
  }

  while (v59);
LABEL_59:
  if (*(int *)(v13 + 808) >= 1)
  {
    for (uint64_t j = 0LL; j < *(int *)(v13 + 808); ++j)
    {
      int v61 = *(void *)(v13 + 816);
      unsigned int v62 = *(unsigned __int16 *)(v61 + 4 * j);
      if (v14) {
        int v63 = (char *)&v20[32 * (uint64_t)*(int *)(v85 + 4 * v62)];
      }
      else {
        int v63 = (char *)(v86 + (v62 << 7));
      }
      int v64 = *(__int16 *)(v61 + 4 * j + 2);
      uint64_t v65 = *(_DWORD *)(v13 + 568);
      uint64_t v66 = sub_10003BE3C( *(void *)(v13 + 376),  1LL,  a5,  a6,  0LL,  0LL,  (uint64_t)(v63 + 16),  *((unsigned int *)v63 + 1));
      uint64_t v67 = *((_DWORD *)v63 + 1);
      uint64_t v68 = v64 + a7 + v65 + v66 - *(_DWORD *)(v13 + 896) + (v67 - 1) * a8;
      if (v14)
      {
        if (v68 >= *((_DWORD *)v63 + 3)) {
          continue;
        }
        if (v67 >= 1)
        {
          uint64_t v69 = *(_DWORD *)(v84 + 4LL * *(unsigned __int16 *)(*(void *)(v13 + 816) + 4 * j));
          uint64_t v70 = v63 + 88;
          do
          {
            *v70++ = v69 & 1;
            v69 >>= 1;
            --v67;
          }

          while (v67);
        }
      }

      *((_DWORD *)v63 + 3) = v68;
    }
  }

  qsort(v20, (int)v9, 0x80uLL, (int (__cdecl *)(const void *, const void *))sub_100052D84);
  if (v14)
  {
    if ((int)v9 < 1)
    {
      LODWORD(v71) = 0;
    }

    else
    {
      uint64_t v71 = 0LL;
      uint64_t v72 = v20 + 3;
      while (1)
      {
        uint64_t v73 = *v72;
        v72 += 32;
        if (v73 == 0x40000000) {
          break;
        }
        if (v9 == ++v71)
        {
          LODWORD(v71) = v9;
          break;
        }
      }
    }

    int *v12 = v71;
    sub_1000C0EF8(v86);
    sub_1000C0EF8(v85);
    sub_1000C0EF8(v84);
  }

  else
  {
    int *v12 = *(_DWORD *)(v13 + 808);
  }

  uint64_t result = sub_100060174(*(void *)(v13 + 656));
  *(void *)(v13 + 656) = 0LL;
  return result;
}

    if (*(_DWORD *)(v10 + 3224) && *(_DWORD *)(v10 + 3024)) {
      ++v9;
    }
    goto LABEL_10;
  }

  return result;
}

  uint64_t v38 = 2LL * (int)v13;
  *(_WORD *)((char *)v14 + v38) = -1;
  *(_WORD *)((char *)v30 + v38) = -1;
  uint64_t v39 = (void *)sub_1000CAF58(4LL * (int)v13, v23, v24, v25, v26, v27, v28, v29);
  LODWORD(v40) = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  *(_DWORD *)uint64_t v39 = v13;
  for (LODWORD(v43) = v13; ; LODWORD(v43) = *((_DWORD *)v39 + v40))
  {
    uint8x16_t v44 = v41;
    uint16x8_t v45 = v41 + 1;
    while ((int)v43 - (int)v44 > 1)
    {
      uint16x8_t v46 = (int)v40;
      uint8x16_t v47 = v44 + v43;
      uint16x8_t v48 = v47 >> 1;
      uint16x8_t v49 = 2 * v44;
      int32x4_t v50 = *((_WORD *)v14 + v44);
      int32x4_t v43 = 2LL * v48;
      *(_WORD *)((char *)v14 + v49) = *(_WORD *)((char *)v14 + v43);
      *(_WORD *)((char *)v14 + v43) = v50;
      int32x4_t v51 = *((_WORD *)v30 + v44);
      *(_WORD *)((char *)v30 + v49) = *(_WORD *)((char *)v30 + v43);
      *(_WORD *)((char *)v30 + v43) = v51;
      LODWORD(v43) = *((_DWORD *)v39 + (int)v40) - 1;
      LODWORD(v52) = v45;
      do
      {
        uint64_t v52 = (int)v52;
        unint64_t v53 = (int)v43;
        else {
          int8x16_t v54 = (int)v52;
        }
        while (v54 != v52)
        {
          int8x8_t v55 = *((unsigned __int16 *)v30 + v44) - *((unsigned __int16 *)v30 + v52);
          if (!v55) {
            int8x8_t v55 = *((unsigned __int16 *)v14 + v44) - *((unsigned __int16 *)v14 + v52);
          }
          uint16x8_t v56 = (v55 | v42) == 0;
          if (!(v55 | v42)) {
            uint64_t v42 = 1;
          }
          ++v52;
          if (v55 < 0 || v56)
          {
            LODWORD(v54) = v52 - 1;
            break;
          }
        }

        LODWORD(v52) = v54;
        uint64_t v57 = (int)v54;
        int32x4_t v43 = (int)v54 - 1LL;
        if (v43 >= v53) {
          LODWORD(v43) = v53;
        }
        while (v53 >= v57)
        {
          uint64_t v58 = *((unsigned __int16 *)v30 + v44) - *((unsigned __int16 *)v30 + v53);
          if (!v58) {
            uint64_t v58 = *((unsigned __int16 *)v14 + v44) - *((unsigned __int16 *)v14 + v53);
          }
          if (!(v58 | v42)) {
            uint64_t v42 = 1;
          }
          --v53;
          if (v58 >= 1)
          {
            LODWORD(v43) = v53 + 1;
            break;
          }
        }

        if ((int)v52 < (int)v43)
        {
          unsigned int v59 = 2 * v57;
          uint64_t v60 = *((_WORD *)v14 + v57);
          int v61 = 2LL * (int)v43;
          *(_WORD *)((char *)v14 + v59) = *(_WORD *)((char *)v14 + v61);
          *(_WORD *)((char *)v14 + v61) = v60;
          unsigned int v62 = *(_WORD *)((char *)v30 + v59);
          *(_WORD *)((char *)v30 + v59) = *(_WORD *)((char *)v30 + v61);
          *(_WORD *)((char *)v30 + v61) = v62;
          LODWORD(v52) = v52 + 1;
          LODWORD(v43) = v43 - 1;
        }
      }

      while ((int)v52 <= (int)v43);
      if ((_DWORD)v44 != (_DWORD)v43)
      {
        int v63 = *((_WORD *)v14 + v44);
        int v64 = 2LL * (int)v43;
        *((_WORD *)v14 + v44) = *(_WORD *)((char *)v14 + v64);
        *(_WORD *)((char *)v14 + v64) = v63;
        uint64_t v65 = *((_WORD *)v30 + v44);
        *((_WORD *)v30 + v44) = *(_WORD *)((char *)v30 + v64);
        *(_WORD *)((char *)v30 + v64) = v65;
      }

      LODWORD(v40) = v46 + 1;
      *((_DWORD *)v39 + v46 + 1) = v43;
    }

    if (!(_DWORD)v40) {
      break;
    }
    int v41 = v43 + 1;
    uint64_t v40 = (int)v40 - 1LL;
  }

  sub_1000CB038(v39, 4LL * (int)v13);
  uint64_t v66 = *(void *)(a1 + 336);
  uint64_t v67 = *(_DWORD *)(a1 + 328);
  uint64_t v68 = *(void *)(a1 + 360);
  uint64_t v69 = *(int *)(a1 + 352);
  uint64_t v70 = *(uint8x16_t **)(a1 + 400);
  uint64_t v71 = *(uint8x16_t **)(a1 + 416);
  if ((int)v13 > 0)
  {
    uint64_t v72 = *(void *)(a1 + 312);
    uint64_t v73 = *(_DWORD *)(a1 + 308);
    int v74 = v67 - 1;
    unsigned int v75 = v69 - 1;
    int v76 = (v13 + 1);
    uint64_t v77 = *(unsigned __int16 *)v14;
    uint64_t v78 = 1LL;
    unsigned int v79 = 1;
    while (1)
    {
      while (*((unsigned __int16 *)v14 + v78) == v77)
      {
        ++v79;
        if (++v78 == v76) {
          goto LABEL_67;
        }
      }

      if (v79 < v74) {
        goto LABEL_52;
      }
      __int16 v80 = 0;
      uint64_t v81 = v79;
      do
      {
        ++v80;
        v81 >>= 1;
      }

      while (v81 >= v74);
      if (v80)
      {
        uint64_t v82 = *(unsigned __int8 *)(v66 + (((1 << (v80 - 1)) + v79) >> v80));
      }

      else
      {
LABEL_52:
        __int16 v80 = 0;
        uint64_t v82 = *(unsigned __int8 *)(v66 + v79);
        if ((_DWORD)v69) {
          goto LABEL_54;
        }
      }

      do
      {
        v82 -= *(unsigned __int8 *)(v68 + v75);
        v80 -= v75;
      }

      while (v80 >= v69);
LABEL_54:
      int v83 = v82 - *(unsigned __int8 *)(v68 + v80);
      if (v77 <= v12) {
        int v84 = &v70->i8[v77];
      }
      else {
        int v84 = &v71->i8[v77 + ~(_DWORD)v12];
      }
      int v85 = *(_DWORD *)(a1 + 292);
      BOOL v86 = v85 + *v84;
      uint64_t v88 = v83 - v86;
      uint64_t v87 = v83 - v86 < 0;
      if (v83 >= v86) {
        int v83 = v85 + *v84;
      }
      if (v87) {
        int v89 = -v88;
      }
      else {
        int v89 = v88;
      }
      if (v89 < v73) {
        v83 -= *(unsigned __int8 *)(v72 + v89);
      }
      BOOL v90 = v83 - v85;
      if (v90 >= 255) {
        BOOL v90 = 255;
      }
      *int v84 = v90 & ~(v90 >> 31);
      uint64_t v77 = *((unsigned __int16 *)v14 + v78);
      unsigned int v79 = 1;
      if (++v78 == v76)
      {
LABEL_67:
        uint64_t v91 = *(uint8x16_t **)(a1 + 408);
        int v92 = *(unsigned __int16 *)v30;
        uint64_t v93 = 1LL;
        uint64_t v94 = 1;
        while (1)
        {
          while (*((unsigned __int16 *)v30 + v93) == v92)
          {
            ++v94;
            if (++v93 == v76) {
              goto LABEL_91;
            }
          }

          if (v94 < v74) {
            goto LABEL_80;
          }
          uint64_t v96 = 0;
          int v97 = v94;
          do
          {
            ++v96;
            v97 >>= 1;
          }

          while (v97 >= v74);
          if (v96)
          {
            uint64_t v98 = *(unsigned __int8 *)(v66 + (((1 << (v96 - 1)) + v94) >> v96));
          }

          else
          {
LABEL_80:
            uint64_t v96 = 0;
            uint64_t v98 = *(unsigned __int8 *)(v66 + v94);
            if (!(_DWORD)v69)
            {
              do
              {
LABEL_81:
                v98 -= *(unsigned __int8 *)(v68 + v75);
                v96 -= v75;
              }

              while (v96 >= v69);
            }
          }

          uint64_t v99 = v98 - *(unsigned __int8 *)(v68 + v96);
          uint64_t v100 = *(_DWORD *)(a1 + 296);
          int v101 = v100 + v91->u8[v92];
          unsigned __int8 v103 = v99 - v101;
          uint64_t v102 = v99 - v101 < 0;
          if (v99 >= v101) {
            uint64_t v99 = v100 + v91->u8[v92];
          }
          if (v102) {
            unsigned int v104 = -v103;
          }
          else {
            unsigned int v104 = v103;
          }
          if (v104 < v73) {
            v99 -= *(unsigned __int8 *)(v72 + v104);
          }
          uint64_t v95 = v99 - v100;
          if (v95 >= 255) {
            uint64_t v95 = 255;
          }
          v91->i8[v92] = v95 & ~(v95 >> 31);
          int v92 = *((unsigned __int16 *)v30 + v93);
          uint64_t v94 = 1;
          if (++v93 == v76) {
            goto LABEL_91;
          }
        }
      }
    }
  }

  uint64_t v91 = *(uint8x16_t **)(a1 + 408);
  int v74 = v67 - 1;
LABEL_91:
  signed int v106 = *(_DWORD *)(a1 + 300);
  uint64_t v107 = (1 << v106) + v13;
  if (v107 < v74) {
    goto LABEL_97;
  }
  uint64_t v108 = 0;
  uint64_t v109 = (1 << v106) + v13;
  do
  {
    ++v108;
    v109 >>= 1;
  }

  while (v109 >= v74);
  if (v108)
  {
    uint64_t v110 = *(_DWORD *)(a1 + 392);
    int v111 = *(unsigned __int8 *)(v66 + (((1 << (v108 - 1)) + v107) >> v108));
  }

  else
  {
LABEL_97:
    uint64_t v108 = 0;
    uint64_t v110 = *(_DWORD *)(a1 + 392);
    int v111 = *(unsigned __int8 *)(v66 + v107);
    if ((_DWORD)v69) {
      goto LABEL_99;
    }
  }

  do
  {
    v111 -= *(unsigned __int8 *)(v68 + v69 - 1);
    v108 -= v69 - 1;
  }

  while (v108 >= v69);
LABEL_99:
  signed int v112 = *(unsigned __int8 *)(v68 + v108);
  uint64_t v113 = *(_DWORD *)(a1 + 104);
  uint64_t v114 = 1 << (v106 - 1);
  uint64_t v115 = (v114 + v113 * v110) >> v106;
  uint64_t v116 = v110 + v13;
  signed int v117 = *(_DWORD *)(a1 + 396)
       + v112
       - v115
       - (v111
  *(_DWORD *)(a1 + 396) = v117;
  *(_DWORD *)(a1 + 392) = v116;
  if (v116 > *(_DWORD *)(a1 + 304))
  {
    uint64_t v118 = *(unsigned int *)(a1 + 192);
    uint64_t v119 = *(unsigned int *)(a1 + 160);
    if ((v193 & 0x80000000) != 0) {
      goto LABEL_120;
    }
    uint64_t v120 = v193 + 1;
    if (v193 < 7)
    {
      uint64_t v121 = 0LL;
      goto LABEL_112;
    }

    uint64_t v122 = (uint32x4_t)vdupq_n_s32(v117);
    if (v12 >= 0xF)
    {
      uint64_t v121 = v120 & 0xFFFFFFF0;
      v123.i64[0] = 0xFF000000FFLL;
      v123.i64[1] = 0xFF000000FFLL;
      uint64_t v124 = v121;
      signed int v125 = v70;
      do
      {
        uint64_t v126 = vmovl_high_u8(*v125);
        uint64_t v127 = vmovl_u8(*(uint8x8_t *)v125->i8);
        BOOL v128 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v127.i8);
        uint64_t v129 = (int32x4_t)vaddw_high_u16(v122, v127);
        uint64_t v130 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v126.i8);
        BOOL v131 = (int32x4_t)vaddw_high_u16(v122, v126);
        v199.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v131, v123);
        v199.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v130, v123);
        v199.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v129, v123);
        v199.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v128, v123);
        *(int8x16_t *)v125++ = vbicq_s8( vqtbl4q_s8(v199, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v128), (int16x8_t)vcltzq_s32(v129)),  (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v130), (int16x8_t)vcltzq_s32(v131))));
        v124 -= 16LL;
      }

      while (v124);
      if (v121 == v120) {
        goto LABEL_120;
      }
      if ((v120 & 8) == 0)
      {
LABEL_112:
        int v139 = &v70->i8[v121];
        uint64_t v140 = v120 - v121;
        do
        {
          uint64_t v141 = v117 + *v139;
          else {
            float32x4x3_t v142 = v117 + *v139;
          }
          if (v141 >= 0) {
            unsigned int v143 = v142;
          }
          else {
            unsigned int v143 = 0;
          }
          *v139++ = v143;
          --v140;
        }

        while (v140);
LABEL_120:
        if ((v118 & 0x80000000) != 0) {
          goto LABEL_140;
        }
        int v144 = v118 + 1;
        if (v118 < 7)
        {
          uint64_t v145 = 0LL;
          goto LABEL_132;
        }

        if (v118 >= 0xF)
        {
          uint64_t v146 = (uint32x4_t)vdupq_n_s32(v117);
          uint64_t v145 = v144 & 0xFFFFFFF0;
          v147.i64[0] = 0xFF000000FFLL;
          v147.i64[1] = 0xFF000000FFLL;
          uint64_t v148 = v145;
          int v149 = v91;
          do
          {
            int v150 = vmovl_high_u8(*v149);
            uint64_t v151 = vmovl_u8(*(uint8x8_t *)v149->i8);
            unsigned int v152 = (int32x4_t)vaddw_u16(v146, *(uint16x4_t *)v151.i8);
            signed int v153 = (int32x4_t)vaddw_high_u16(v146, v151);
            signed int v154 = (int32x4_t)vaddw_u16(v146, *(uint16x4_t *)v150.i8);
            uint64_t v155 = (int32x4_t)vaddw_high_u16(v146, v150);
            v200.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v155, v147);
            v200.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v154, v147);
            v200.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v153, v147);
            v200.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v152, v147);
            *(int8x16_t *)v149++ = vbicq_s8( vqtbl4q_s8(v200, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v152), (int16x8_t)vcltzq_s32(v153)),  (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v154), (int16x8_t)vcltzq_s32(v155))));
            v148 -= 16LL;
          }

          while (v148);
          if (v145 == v144) {
            goto LABEL_140;
          }
          if ((v144 & 8) == 0)
          {
LABEL_132:
            uint64_t v164 = &v91->i8[v145];
            signed int v165 = v144 - v145;
            do
            {
              float64x2_t v166 = v117 + *v164;
              else {
                int v167 = v117 + *v164;
              }
              if (v166 >= 0) {
                int v168 = v167;
              }
              else {
                int v168 = 0;
              }
              *v164++ = v168;
              --v165;
            }

            while (v165);
LABEL_140:
            if ((int)v119 >= 1)
            {
              if (v119 < 8)
              {
                uint64_t v169 = 0LL;
                goto LABEL_152;
              }

              if (v119 >= 0x10)
              {
                uint64_t v170 = (uint32x4_t)vdupq_n_s32(v117);
                uint64_t v169 = v119 & 0xFFFFFFF0;
                v171.i64[0] = 0xFF000000FFLL;
                v171.i64[1] = 0xFF000000FFLL;
                int v172 = v169;
                int v173 = v71;
                do
                {
                  uint64_t v174 = vmovl_high_u8(*v173);
                  double v175 = vmovl_u8(*(uint8x8_t *)v173->i8);
                  signed int v176 = (int32x4_t)vaddw_u16(v170, *(uint16x4_t *)v175.i8);
                  signed int v177 = (int32x4_t)vaddw_high_u16(v170, v175);
                  uint64_t v178 = (int32x4_t)vaddw_u16(v170, *(uint16x4_t *)v174.i8);
                  uint64_t v179 = (int32x4_t)vaddw_high_u16(v170, v174);
                  v201.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v179, v171);
                  v201.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v178, v171);
                  v201.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v177, v171);
                  v201.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v176, v171);
                  *(int8x16_t *)v173++ = vbicq_s8( vqtbl4q_s8(v201, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16( (int16x8_t)vcltzq_s32(v176),  (int16x8_t)vcltzq_s32(v177)),  (int8x16_t)vuzp1q_s16( (int16x8_t)vcltzq_s32(v178),  (int16x8_t)vcltzq_s32(v179))));
                  v172 -= 16LL;
                }

                while (v172);
                if (v169 == v119) {
                  goto LABEL_160;
                }
                if ((v119 & 8) == 0) {
                  goto LABEL_152;
                }
              }

              else
              {
                uint64_t v169 = 0LL;
              }

              uint64_t v180 = v169;
              BOOL v181 = (uint32x4_t)vdupq_n_s32(v117);
              uint64_t v169 = v119 & 0xFFFFFFF8;
              int v182 = (uint8x8_t *)&v71->i8[v180];
              int32x4_t v183 = v180 - v169;
              v184.i64[0] = 0xFF000000FFLL;
              v184.i64[1] = 0xFF000000FFLL;
              do
              {
                float64x2_t v185 = vmovl_u8(*v182);
                int v186 = (int32x4_t)vaddw_u16(v181, *(uint16x4_t *)v185.i8);
                uint64_t v187 = (int32x4_t)vaddw_high_u16(v181, v185);
                v198.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v187, v184);
                v198.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v186, v184);
                *v182++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v198, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v186), (int16x8_t)vcltzq_s32(v187))));
                v183 += 8LL;
              }

              while (v183);
              if (v169 != v119)
              {
LABEL_152:
                int16x8_t v188 = &v71->i8[v169];
                signed int v189 = v119 - v169;
                do
                {
                  uint64_t v190 = v117 + *v188;
                  else {
                    int32x4_t v191 = v117 + *v188;
                  }
                  if (v190 >= 0) {
                    uint64_t v192 = v191;
                  }
                  else {
                    uint64_t v192 = 0;
                  }
                  *v188++ = v192;
                  --v189;
                }

                while (v189);
              }
            }

  uint64_t v38 = 2LL * (int)v13;
  *(_WORD *)((char *)v14 + v38) = -1;
  *(_WORD *)((char *)v30 + v38) = -1;
  uint64_t v39 = (void *)sub_1000CAF58(4LL * (int)v13, v23, v24, v25, v26, v27, v28, v29);
  LODWORD(v40) = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  *(_DWORD *)uint64_t v39 = v13;
  for (LODWORD(v43) = v13; ; LODWORD(v43) = *((_DWORD *)v39 + v40))
  {
    uint8x16_t v44 = v41;
    uint16x8_t v45 = v41 + 1;
    while ((int)v43 - (int)v44 > 1)
    {
      uint16x8_t v46 = (int)v40;
      uint8x16_t v47 = v44 + v43;
      uint16x8_t v48 = v47 >> 1;
      uint16x8_t v49 = 2 * v44;
      int32x4_t v50 = *((_WORD *)v14 + v44);
      int32x4_t v43 = 2LL * v48;
      *(_WORD *)((char *)v14 + v49) = *(_WORD *)((char *)v14 + v43);
      *(_WORD *)((char *)v14 + v43) = v50;
      int32x4_t v51 = *((_WORD *)v30 + v44);
      *(_WORD *)((char *)v30 + v49) = *(_WORD *)((char *)v30 + v43);
      *(_WORD *)((char *)v30 + v43) = v51;
      LODWORD(v43) = *((_DWORD *)v39 + (int)v40) - 1;
      LODWORD(v52) = v45;
      do
      {
        uint64_t v52 = (int)v52;
        unint64_t v53 = (int)v43;
        else {
          int8x16_t v54 = (int)v52;
        }
        while (v54 != v52)
        {
          int8x8_t v55 = *((unsigned __int16 *)v30 + v44) - *((unsigned __int16 *)v30 + v52);
          if (!v55) {
            int8x8_t v55 = *((unsigned __int16 *)v14 + v44) - *((unsigned __int16 *)v14 + v52);
          }
          uint16x8_t v56 = (v55 | v42) == 0;
          if (!(v55 | v42)) {
            uint64_t v42 = 1;
          }
          ++v52;
          if (v55 < 0 || v56)
          {
            LODWORD(v54) = v52 - 1;
            break;
          }
        }

        LODWORD(v52) = v54;
        uint64_t v57 = (int)v54;
        int32x4_t v43 = (int)v54 - 1LL;
        if (v43 >= v53) {
          LODWORD(v43) = v53;
        }
        while (v53 >= v57)
        {
          uint64_t v58 = *((unsigned __int16 *)v30 + v44) - *((unsigned __int16 *)v30 + v53);
          if (!v58) {
            uint64_t v58 = *((unsigned __int16 *)v14 + v44) - *((unsigned __int16 *)v14 + v53);
          }
          if (!(v58 | v42)) {
            uint64_t v42 = 1;
          }
          --v53;
          if (v58 >= 1)
          {
            LODWORD(v43) = v53 + 1;
            break;
          }
        }

        if ((int)v52 < (int)v43)
        {
          unsigned int v59 = 2 * v57;
          uint64_t v60 = *((_WORD *)v14 + v57);
          int v61 = 2LL * (int)v43;
          *(_WORD *)((char *)v14 + v59) = *(_WORD *)((char *)v14 + v61);
          *(_WORD *)((char *)v14 + v61) = v60;
          unsigned int v62 = *(_WORD *)((char *)v30 + v59);
          *(_WORD *)((char *)v30 + v59) = *(_WORD *)((char *)v30 + v61);
          *(_WORD *)((char *)v30 + v61) = v62;
          LODWORD(v52) = v52 + 1;
          LODWORD(v43) = v43 - 1;
        }
      }

      while ((int)v52 <= (int)v43);
      if ((_DWORD)v44 != (_DWORD)v43)
      {
        int v63 = *((_WORD *)v14 + v44);
        int v64 = 2LL * (int)v43;
        *((_WORD *)v14 + v44) = *(_WORD *)((char *)v14 + v64);
        *(_WORD *)((char *)v14 + v64) = v63;
        uint64_t v65 = *((_WORD *)v30 + v44);
        *((_WORD *)v30 + v44) = *(_WORD *)((char *)v30 + v64);
        *(_WORD *)((char *)v30 + v64) = v65;
      }

      LODWORD(v40) = v46 + 1;
      *((_DWORD *)v39 + v46 + 1) = v43;
    }

    if (!(_DWORD)v40) {
      break;
    }
    int v41 = v43 + 1;
    uint64_t v40 = (int)v40 - 1LL;
  }

  sub_1000CB038(v39, 4LL * (int)v13);
  uint64_t v66 = *(void *)(a1 + 368);
  uint64_t v67 = *(_DWORD *)(a1 + 360);
  uint64_t v68 = *(void *)(a1 + 392);
  uint64_t v69 = *(int *)(a1 + 384);
  uint64_t v70 = *(uint8x16_t **)(a1 + 432);
  uint64_t v71 = *(uint8x16_t **)(a1 + 448);
  if ((int)v13 > 0)
  {
    uint64_t v72 = *(void *)(a1 + 344);
    uint64_t v73 = *(_DWORD *)(a1 + 340);
    int v74 = v67 - 1;
    unsigned int v75 = v69 - 1;
    int v76 = (v13 + 1);
    uint64_t v77 = *(unsigned __int16 *)v14;
    uint64_t v78 = 1LL;
    unsigned int v79 = 1;
    while (1)
    {
      while (*((unsigned __int16 *)v14 + v78) == v77)
      {
        ++v79;
        if (++v78 == v76) {
          goto LABEL_67;
        }
      }

      if (v79 < v74) {
        goto LABEL_52;
      }
      __int16 v80 = 0;
      uint64_t v81 = v79;
      do
      {
        ++v80;
        v81 >>= 1;
      }

      while (v81 >= v74);
      if (v80)
      {
        uint64_t v82 = *(unsigned __int8 *)(v66 + (((1 << (v80 - 1)) + v79) >> v80));
      }

      else
      {
LABEL_52:
        __int16 v80 = 0;
        uint64_t v82 = *(unsigned __int8 *)(v66 + v79);
        if ((_DWORD)v69) {
          goto LABEL_54;
        }
      }

      do
      {
        v82 -= *(unsigned __int8 *)(v68 + v75);
        v80 -= v75;
      }

      while (v80 >= v69);
LABEL_54:
      int v83 = v82 - *(unsigned __int8 *)(v68 + v80);
      if (v77 <= v12) {
        int v84 = &v70->i8[v77];
      }
      else {
        int v84 = &v71->i8[v77 + ~(_DWORD)v12];
      }
      int v85 = *(_DWORD *)(a1 + 324);
      BOOL v86 = v85 + *v84;
      uint64_t v88 = v83 - v86;
      uint64_t v87 = v83 - v86 < 0;
      if (v83 >= v86) {
        int v83 = v85 + *v84;
      }
      if (v87) {
        int v89 = -v88;
      }
      else {
        int v89 = v88;
      }
      if (v89 < v73) {
        v83 -= *(unsigned __int8 *)(v72 + v89);
      }
      BOOL v90 = v83 - v85;
      if (v90 >= 255) {
        BOOL v90 = 255;
      }
      *int v84 = v90 & ~(v90 >> 31);
      uint64_t v77 = *((unsigned __int16 *)v14 + v78);
      unsigned int v79 = 1;
      if (++v78 == v76)
      {
LABEL_67:
        uint64_t v91 = *(uint8x16_t **)(a1 + 440);
        int v92 = *(unsigned __int16 *)v30;
        uint64_t v93 = 1LL;
        uint64_t v94 = 1;
        while (1)
        {
          while (*((unsigned __int16 *)v30 + v93) == v92)
          {
            ++v94;
            if (++v93 == v76) {
              goto LABEL_91;
            }
          }

          if (v94 < v74) {
            goto LABEL_80;
          }
          uint64_t v96 = 0;
          int v97 = v94;
          do
          {
            ++v96;
            v97 >>= 1;
          }

          while (v97 >= v74);
          if (v96)
          {
            uint64_t v98 = *(unsigned __int8 *)(v66 + (((1 << (v96 - 1)) + v94) >> v96));
          }

          else
          {
LABEL_80:
            uint64_t v96 = 0;
            uint64_t v98 = *(unsigned __int8 *)(v66 + v94);
            if (!(_DWORD)v69)
            {
              do
              {
LABEL_81:
                v98 -= *(unsigned __int8 *)(v68 + v75);
                v96 -= v75;
              }

              while (v96 >= v69);
            }
          }

          uint64_t v99 = v98 - *(unsigned __int8 *)(v68 + v96);
          uint64_t v100 = *(_DWORD *)(a1 + 328);
          int v101 = v100 + v91->u8[v92];
          unsigned __int8 v103 = v99 - v101;
          uint64_t v102 = v99 - v101 < 0;
          if (v99 >= v101) {
            uint64_t v99 = v100 + v91->u8[v92];
          }
          if (v102) {
            unsigned int v104 = -v103;
          }
          else {
            unsigned int v104 = v103;
          }
          if (v104 < v73) {
            v99 -= *(unsigned __int8 *)(v72 + v104);
          }
          uint64_t v95 = v99 - v100;
          if (v95 >= 255) {
            uint64_t v95 = 255;
          }
          v91->i8[v92] = v95 & ~(v95 >> 31);
          int v92 = *((unsigned __int16 *)v30 + v93);
          uint64_t v94 = 1;
          if (++v93 == v76) {
            goto LABEL_91;
          }
        }
      }
    }
  }

  uint64_t v91 = *(uint8x16_t **)(a1 + 440);
  int v74 = v67 - 1;
LABEL_91:
  signed int v106 = *(_DWORD *)(a1 + 332);
  uint64_t v107 = (1 << v106) + v13;
  if (v107 < v74) {
    goto LABEL_97;
  }
  uint64_t v108 = 0;
  uint64_t v109 = (1 << v106) + v13;
  do
  {
    ++v108;
    v109 >>= 1;
  }

  while (v109 >= v74);
  if (v108)
  {
    uint64_t v110 = *(_DWORD *)(a1 + 424);
    int v111 = *(unsigned __int8 *)(v66 + (((1 << (v108 - 1)) + v107) >> v108));
  }

  else
  {
LABEL_97:
    uint64_t v108 = 0;
    uint64_t v110 = *(_DWORD *)(a1 + 424);
    int v111 = *(unsigned __int8 *)(v66 + v107);
    if ((_DWORD)v69) {
      goto LABEL_99;
    }
  }

  do
  {
    v111 -= *(unsigned __int8 *)(v68 + v69 - 1);
    v108 -= v69 - 1;
  }

  while (v108 >= v69);
LABEL_99:
  signed int v112 = *(unsigned __int8 *)(v68 + v108);
  uint64_t v113 = *(_DWORD *)(a1 + 104);
  uint64_t v114 = 1 << (v106 - 1);
  uint64_t v115 = (v114 + v113 * v110) >> v106;
  uint64_t v116 = v110 + v13;
  signed int v117 = *(_DWORD *)(a1 + 428)
       + v112
       - v115
       - (v111
  *(_DWORD *)(a1 + 428) = v117;
  *(_DWORD *)(a1 + 424) = v116;
  if (v116 > *(_DWORD *)(a1 + 336))
  {
    uint64_t v118 = *(unsigned int *)(a1 + 192);
    uint64_t v119 = *(unsigned int *)(a1 + 160);
    if ((v193 & 0x80000000) != 0) {
      goto LABEL_120;
    }
    uint64_t v120 = v193 + 1;
    if (v193 < 7)
    {
      uint64_t v121 = 0LL;
      goto LABEL_112;
    }

    uint64_t v122 = (uint32x4_t)vdupq_n_s32(v117);
    if (v12 >= 0xF)
    {
      uint64_t v121 = v120 & 0xFFFFFFF0;
      v123.i64[0] = 0xFF000000FFLL;
      v123.i64[1] = 0xFF000000FFLL;
      uint64_t v124 = v121;
      signed int v125 = v70;
      do
      {
        uint64_t v126 = vmovl_high_u8(*v125);
        uint64_t v127 = vmovl_u8(*(uint8x8_t *)v125->i8);
        BOOL v128 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v127.i8);
        uint64_t v129 = (int32x4_t)vaddw_high_u16(v122, v127);
        uint64_t v130 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v126.i8);
        BOOL v131 = (int32x4_t)vaddw_high_u16(v122, v126);
        v199.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v131, v123);
        v199.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v130, v123);
        v199.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v129, v123);
        v199.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v128, v123);
        *(int8x16_t *)v125++ = vbicq_s8( vqtbl4q_s8(v199, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v128), (int16x8_t)vcltzq_s32(v129)),  (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v130), (int16x8_t)vcltzq_s32(v131))));
        v124 -= 16LL;
      }

      while (v124);
      if (v121 == v120) {
        goto LABEL_120;
      }
      if ((v120 & 8) == 0)
      {
LABEL_112:
        int v139 = &v70->i8[v121];
        uint64_t v140 = v120 - v121;
        do
        {
          uint64_t v141 = v117 + *v139;
          else {
            float32x4x3_t v142 = v117 + *v139;
          }
          if (v141 >= 0) {
            unsigned int v143 = v142;
          }
          else {
            unsigned int v143 = 0;
          }
          *v139++ = v143;
          --v140;
        }

        while (v140);
LABEL_120:
        if ((v118 & 0x80000000) != 0) {
          goto LABEL_140;
        }
        int v144 = v118 + 1;
        if (v118 < 7)
        {
          uint64_t v145 = 0LL;
          goto LABEL_132;
        }

        if (v118 >= 0xF)
        {
          uint64_t v146 = (uint32x4_t)vdupq_n_s32(v117);
          uint64_t v145 = v144 & 0xFFFFFFF0;
          v147.i64[0] = 0xFF000000FFLL;
          v147.i64[1] = 0xFF000000FFLL;
          uint64_t v148 = v145;
          int v149 = v91;
          do
          {
            int v150 = vmovl_high_u8(*v149);
            uint64_t v151 = vmovl_u8(*(uint8x8_t *)v149->i8);
            unsigned int v152 = (int32x4_t)vaddw_u16(v146, *(uint16x4_t *)v151.i8);
            signed int v153 = (int32x4_t)vaddw_high_u16(v146, v151);
            signed int v154 = (int32x4_t)vaddw_u16(v146, *(uint16x4_t *)v150.i8);
            uint64_t v155 = (int32x4_t)vaddw_high_u16(v146, v150);
            v200.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v155, v147);
            v200.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v154, v147);
            v200.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v153, v147);
            v200.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v152, v147);
            *(int8x16_t *)v149++ = vbicq_s8( vqtbl4q_s8(v200, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v152), (int16x8_t)vcltzq_s32(v153)),  (int8x16_t)vuzp1q_s16((int16x8_t)vcltzq_s32(v154), (int16x8_t)vcltzq_s32(v155))));
            v148 -= 16LL;
          }

          while (v148);
          if (v145 == v144) {
            goto LABEL_140;
          }
          if ((v144 & 8) == 0)
          {
LABEL_132:
            uint64_t v164 = &v91->i8[v145];
            signed int v165 = v144 - v145;
            do
            {
              float64x2_t v166 = v117 + *v164;
              else {
                int v167 = v117 + *v164;
              }
              if (v166 >= 0) {
                int v168 = v167;
              }
              else {
                int v168 = 0;
              }
              *v164++ = v168;
              --v165;
            }

            while (v165);
LABEL_140:
            if ((int)v119 >= 1)
            {
              if (v119 < 8)
              {
                uint64_t v169 = 0LL;
                goto LABEL_152;
              }

              if (v119 >= 0x10)
              {
                uint64_t v170 = (uint32x4_t)vdupq_n_s32(v117);
                uint64_t v169 = v119 & 0xFFFFFFF0;
                v171.i64[0] = 0xFF000000FFLL;
                v171.i64[1] = 0xFF000000FFLL;
                int v172 = v169;
                int v173 = v71;
                do
                {
                  uint64_t v174 = vmovl_high_u8(*v173);
                  double v175 = vmovl_u8(*(uint8x8_t *)v173->i8);
                  signed int v176 = (int32x4_t)vaddw_u16(v170, *(uint16x4_t *)v175.i8);
                  signed int v177 = (int32x4_t)vaddw_high_u16(v170, v175);
                  uint64_t v178 = (int32x4_t)vaddw_u16(v170, *(uint16x4_t *)v174.i8);
                  uint64_t v179 = (int32x4_t)vaddw_high_u16(v170, v174);
                  v201.val[3] = (int8x16_t)vminq_u32((uint32x4_t)v179, v171);
                  v201.val[2] = (int8x16_t)vminq_u32((uint32x4_t)v178, v171);
                  v201.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v177, v171);
                  v201.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v176, v171);
                  *(int8x16_t *)v173++ = vbicq_s8( vqtbl4q_s8(v201, (int8x16_t)xmmword_1000F0340),  vuzp1q_s8( (int8x16_t)vuzp1q_s16( (int16x8_t)vcltzq_s32(v176),  (int16x8_t)vcltzq_s32(v177)),  (int8x16_t)vuzp1q_s16( (int16x8_t)vcltzq_s32(v178),  (int16x8_t)vcltzq_s32(v179))));
                  v172 -= 16LL;
                }

                while (v172);
                if (v169 == v119) {
                  goto LABEL_160;
                }
                if ((v119 & 8) == 0) {
                  goto LABEL_152;
                }
              }

              else
              {
                uint64_t v169 = 0LL;
              }

              uint64_t v180 = v169;
              BOOL v181 = (uint32x4_t)vdupq_n_s32(v117);
              uint64_t v169 = v119 & 0xFFFFFFF8;
              int v182 = (uint8x8_t *)&v71->i8[v180];
              int32x4_t v183 = v180 - v169;
              v184.i64[0] = 0xFF000000FFLL;
              v184.i64[1] = 0xFF000000FFLL;
              do
              {
                float64x2_t v185 = vmovl_u8(*v182);
                int v186 = (int32x4_t)vaddw_u16(v181, *(uint16x4_t *)v185.i8);
                uint64_t v187 = (int32x4_t)vaddw_high_u16(v181, v185);
                v198.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v187, v184);
                v198.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v186, v184);
                *v182++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v198, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v186), (int16x8_t)vcltzq_s32(v187))));
                v183 += 8LL;
              }

              while (v183);
              if (v169 != v119)
              {
LABEL_152:
                int16x8_t v188 = &v71->i8[v169];
                signed int v189 = v119 - v169;
                do
                {
                  uint64_t v190 = v117 + *v188;
                  else {
                    int32x4_t v191 = v117 + *v188;
                  }
                  if (v190 >= 0) {
                    uint64_t v192 = v191;
                  }
                  else {
                    uint64_t v192 = 0;
                  }
                  *v188++ = v192;
                  --v189;
                }

                while (v189);
              }
            }

      if (v9 == (__int16 *)v7)
      {
        if (!v47) {
          return 0LL;
        }
        sub_1000CC548(v50, v6, ((v7 - (unint64_t)v6) >> 1) + 1);
        if (v50[0] && sub_10007AF1C(*(void *)(a1 + 456), v50) == 0xFFFF)
        {
        }

        else if (!v46)
        {
          return 1LL;
        }

        return (int)sub_1000CC52C(a2) > SHIDWORD(v42);
      }

      uint8x8_t v5 = v7;
      if (v7 <= (unint64_t)v9)
      {
LABEL_9:
        uint64_t v4 = 0;
        int v10 = v5 - (void)v9;
        goto LABEL_33;
      }

    uint64_t v15 = v13 + 8;
    *(_DWORD *)(a1 + 32) = v15;
    uint64_t v14 = sub_1000C0C24(*(void *)(a1 + 24), 24 * v15);
    *(void *)(a1 + 24) = v14;
    goto LABEL_8;
  }

    uint64_t v4 = j__fclose(v3) != 0;
    goto LABEL_14;
  }

  return result;
}

      ++v7;
    }

    while (v7 < v4[1]);
  }

  sub_100006EFC((uint64_t)v6);
  sub_1000D911C(a2, "RejectionScore", v4[34]);
  return sub_1000D911C(a2, "Confidence", v4[35]);
}

  if (!qword_100102A90)
  {
    sub_1000E4E18(v2, v3);
    if (!qword_100102A90)
    {
      qword_100102A90 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, 0LL, 0LL, 0LL, 0LL, 0LL);
      qword_100102A98 = (uint64_t)CFRetain((CFTypeRef)qword_100102A90);
    }
  }

  CFRelease(v2);
  if (v3) {
    CFRelease(v3);
  }
  return qword_100102A90;
}

uint64_t sub_10002E27C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 60);
  if (v2 == *(_DWORD *)(a1 + 64)) {
    return 0LL;
  }
  for (uint64_t i = v2 + *(_DWORD *)(*(void *)(a2 + 288) + 4LL * *(int *)(a1 + 32)); ; ++i)
  {
    *(_DWORD *)(a1 + 60) = v2 + 1;
    uint64_t v7 = *(int *)(*(void *)(a2 + 304) + 4 * i);
    *(_DWORD *)(a1 + 56) = v7;
    uint64_t v8 = *(void *)(a2 + 272);
    uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
    uint64_t v15 = (_WORD *)sub_100033E90(*(void *)(a2 + 256), *(_DWORD *)(v8 + 4 * v7));
    if (!*v15) {
      sub_100033EA0(*(void *)(a2 + 256), *(void *)a1, v9, v10, v11, v12, v13, v14);
    }
    if (v15[1]) {
      break;
    }
    int v2 = *(_DWORD *)(a1 + 60);
    if (v2 == *(_DWORD *)(a1 + 64)) {
      return 0LL;
    }
  }

  uint64_t v16 = *(unsigned int *)(*(void *)(a2 + 272) + 4 * v7);
  *(_DWORD *)(a1 + 44) = v16;
  int v17 = *(_DWORD *)(a2 + 336);
  if (v17) {
    LOWORD(v17) = *(unsigned __int8 *)(*(void *)(a2 + 352) + i);
  }
  *(_WORD *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = ((unint64_t)*(unsigned int *)(a1 + 8) << 53) + (v16 << 35);
  *(void *)(a1 + 128) = v15;
  *(_DWORD *)(a1 + 136) = 0;
  return 1LL;
}

uint64_t sub_10002E394(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unsigned int a5)
{
  uint64_t v48 = sub_100033398(*(void *)(a1 + 256));
  uint64_t result = sub_1000B31C8(v48);
  uint64_t v11 = result;
  int v12 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v12 = *(_DWORD *)(qword_1000FDCC0 + 1288);
  }
  int v50 = 0;
  unsigned __int16 v49 = 0;
  *(void *)(a2 + 176) = 0LL;
  uint64_t v13 = (uint64_t *)(a2 + 176);
  *(_DWORD *)(a2 + 84) = v12;
  *(_WORD *)(a2 + 120) = a5;
  *(void *)(a2 + 192) = 0LL;
  *(_WORD *)(a2 + 28) = a3;
  if (a3 == 65534)
  {
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = 0LL;
    int v17 = 1;
    int v50 = 1;
    *(void *)(a2 + 36) = -1LL;
    *(void *)(a2 + 16) = a4;
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 268);
LABEL_12:
    LODWORD(v19) = v16;
    goto LABEL_13;
  }

  int v15 = a4 & 0x3FF;
  uint64_t v14 = (a4 >> 10) & 0x1FFFFFF;
  uint64_t v16 = (a4 >> 35) & 0x3FFFF;
  uint64_t result = sub_100031134(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF);
  *(void *)(a2 + 48) = result;
  if (*(_DWORD *)(a1 + 340)) {
    uint64_t result = sub_10003366C(*(void *)(a1 + 256), (a4 >> 35) & 0x3FFFF, (void *)(a2 + 176), (_DWORD *)(a2 + 184));
  }
  if (*(void *)(a2 + 16) == a4)
  {
    int v17 = *(_DWORD *)(a2 + 204);
    int v50 = v17;
    *(_DWORD *)(a2 + 40) = v14;
    uint64_t v18 = *(unsigned int *)(a1 + 268);
    goto LABEL_12;
  }

  *(_DWORD *)(a2 + 36) = v15;
  uint64_t result = sub_100030F30(*(void *)(a2 + 48), (a4 >> 10) & 0x1FFFFFF, a4 & 0x3FF, &v50);
  *(_WORD *)(a2 + 172) = result;
  *(void *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 24) = v16;
  int v17 = v50;
  *(_DWORD *)(a2 + 204) = v50;
  *(_DWORD *)(a2 + 40) = v14;
  uint64_t v18 = *(unsigned int *)(a1 + 268);
LABEL_13:
  if ((int)v18 < 1)
  {
    if ((_DWORD)v18) {
      int v20 = 0;
    }
    else {
      int v20 = -1;
    }
    *(void *)(a2 + 160) = 0LL;
    if (v15 < v17 - 1) {
      goto LABEL_22;
    }
    goto LABEL_34;
  }

  uint64_t v19 = 0LL;
  while (*(_DWORD *)(*(void *)(a1 + 272) + 4 * v19) != (_DWORD)v16)
  {
    if (v18 == ++v19)
    {
      LODWORD(v19) = v18;
      break;
    }
  }

LABEL_80:
  if (*(_DWORD *)(a2 + 116) || *(_DWORD *)(a2 + 60) < *(_DWORD *)(a2 + 64))
  {
    uint64_t result = sub_10001FE60(v11, *(unsigned __int16 *)(a2 + 76));
    *(_DWORD *)(a2 + 104) = result;
  }

  else
  {
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 72) = 0;
  }

      if (*v9 != v18 || !*((_BYTE *)v9 + 2))
      {
        uint64_t result = sub_100005A94(*(void *)(a1 + 384), word_1000FDD20, *v76, v76[1], (uint64_t)v13, v14, v15, v16);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v60 = 0LL;
          int v61 = (int)result;
          unsigned int v75 = (unsigned __int16)word_1000FDD20[(int)result];
          unsigned int v62 = (result + 1);
          do
          {
            if (v60 >= v61 || (unsigned __int16)word_1000FDD20[v60] != v75)
            {
              *(_DWORD *)(v10 + 6) = 1073758208;
              *(_WORD *)(v10 + 4) = word_1000FDD20[v60];
              *(_WORD *)uint64_t v10 = v18;
              *(_BYTE *)(v10 + 2) = 1;
              uint64_t result = sub_1000A0EA0(a1, v24, v25, v26, v10);
              v10 += 28LL;
            }

            ++v60;
          }

          while (v62 != v60);
        }

        if (*v9 != v18) {
          goto LABEL_100;
        }
        unsigned int v25 = -1;
        __int16 v26 = -1;
        __int16 v24 = 0x4000;
        int v63 = *(_OWORD *)(v9 + 6);
        int v64 = *(_OWORD *)v9;
        v9 += 14;
        *(_OWORD *)uint64_t v10 = v64;
        *(_OWORD *)(v10 + 12) = v63;
        if (!*(_BYTE *)(v10 + 2)) {
          goto LABEL_103;
        }
LABEL_99:
        uint64_t result = sub_1000A0EA0(a1, v24, v25, v26, v10);
        goto LABEL_107;
      }

      int8x8_t v55 = 0LL;
      do
      {
        uint16x8_t v56 = &v9[v55];
        uint64_t v57 = (_OWORD *)(v10 + v55 * 2);
        uint64_t v58 = *(_OWORD *)&v9[v55];
        *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v9[v55 + 6];
        *uint64_t v57 = v58;
        uint64_t result = sub_1000A0EA0(a1, v24, v25, v26, v10 + v55 * 2);
        unsigned int v59 = v9[v55 + 14];
        if (v59 != v18) {
          break;
        }
        v55 += 14LL;
      }

      while (*((_BYTE *)v56 + 30) == 1);
      __int16 v24 = v56[3];
      unsigned int v25 = v56[5];
      uint64_t v9 = v56 + 14;
      uint64_t v10 = (unint64_t)v57 + 28;
      __int16 v26 = *((_DWORD *)v56 + 4);
      if (v59 != v18)
      {
LABEL_86:
        if (v24 != 0x4000)
        {
          if ((unint64_t)(v9 - 28) > v10)
          {
            *(_WORD *)uint64_t v10 = v18;
            *(_BYTE *)(v10 + 2) = 0;
            *(_WORD *)(v10 + 4) = *(_WORD *)(a1 + 660);
            *(_WORD *)(v10 + 6) = 0x4000;
LABEL_103:
            unsigned int v79 = 0;
            uint64_t result = sub_100015B80(*(void *)(a1 + 384), *(unsigned __int16 *)(v10 + 4), &v79);
            uint64_t v65 = *(__int16 *)(v10 + 6);
            if (v65 >= v24)
            {
              *(_WORD *)(v10 + 6) = v24;
              *(_WORD *)(v10 + 10) = v25;
              LOWORD(v65) = v24;
              *(_DWORD *)(v10 + 16) = v26;
            }

            if (*(__int16 *)(a1 + 744) >= (__int16)v65)
            {
              uint64_t v68 = *(unsigned __int16 *)result;
              uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v68);
              uint64_t v67 = v72;
              uint64_t v66 = v73;
              if ((_DWORD)result == 0x4000)
              {
                uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v68);
                LOWORD(v65) = *(_WORD *)(v10 + 6);
              }

              uint64_t v69 = result - *(_WORD *)(a1 + 740) + v65;
              *(_WORD *)(v10 + 6) = v69;
              *(_WORD *)(v10 + 24) = v69;
              if (v69 < *(__int16 *)(a1 + 736))
              {
                *(_WORD *)(a1 + 736) = v69;
                *(_WORD *)(a1 + 808) = *(_WORD *)(v10 + 4);
                uint64_t v69 = *(_WORD *)(v10 + 24);
              }

              uint64_t v70 = *(void *)(a1 + 824);
              if (*(_DWORD *)v70 > v69) {
                ++*(_WORD *)(*(void *)(v70 + 8) + 2LL * v69);
              }
              goto LABEL_108;
            }

            *(_WORD *)(v10 + 24) = 0x4000;
            *(_WORD *)(v10 + 6) = 0x4000;
LABEL_107:
            uint64_t v67 = v72;
            uint64_t v66 = v73;
LABEL_108:
            *uint64_t v67 = v9;
            *uint64_t v66 = v10 + 28;
            return result;
          }

uint64_t sub_10002E9F4(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 340))
  {
    if (*(void *)(a2 + 192))
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(result + 328) + ((uint64_t)*(int *)(a2 + 56) << 6);
      uint8x8_t v5 = (void *)(v4 + 8);
      uint64_t v6 = *(void *)v4;
      unint64_t v7 = *(unsigned __int16 *)(*(void *)v4 + 2LL * *(int *)(result + 312) + 2);
      uint64_t result = sub_1000C1744((const void **)(v4 + 8), (int *)(v4 + 16), (signed int *)(v4 + 20), 10, 12, (int)v7 + 1);
      if ((_DWORD)result)
      {
        uint64_t v8 = *(void *)(*v5 + ((v7 >> 7) & 0x1F8));
        if (*(void *)(a2 + 176) == *(void *)(a2 + 192)) {
          __int16 v9 = *(_WORD *)(a2 + 28);
        }
        else {
          __int16 v9 = -2;
        }
        *(_WORD *)(v8 + 12 * (v7 & 0x3FF)) = v9;
        uint64_t v10 = v8 + 12 * (v7 & 0x3FF);
        *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 + 208);
        *(_WORD *)(v10 + 8) = *(_WORD *)(a2 + 212);
        uint64_t v11 = v6 + 2LL * *(int *)(v3 + 312);
        ++*(_WORD *)(v11 + 2);
      }
    }
  }

  return result;
}

uint64_t sub_10002EAD8( _DWORD *a1, unsigned __int16 *a2, int a3, int a4, unint64_t a5, const char **a6, _DWORD *a7, BOOL *a8)
{
  uint64_t v72 = *((void *)a1 + 32);
  uint64_t v73 = a1;
  uint64_t v16 = a1;
  if (a1[87])
  {
    uint64_t v16 = (_DWORD *)sub_100027CE0(a1);
    uint64_t v73 = v16;
    if (!v16) {
      return 0LL;
    }
  }

  uint64_t v90 = 0LL;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v77 = 0u;
  uint64_t v70 = a6;
  uint64_t v71 = a7;
  *a7 = 0x40000000;
  if (*v73 == 3)
  {
    *(void *)&__int128 v78 = 0x7FFFFFFFFFFFFFFFLL;
    WORD2(v90) = 0x4000;
  }

  __int128 v75 = 0u;
  __int128 v76 = 0u;
  unsigned int v17 = *a2;
  DWORD2(v87) = 0;
  sub_10002E394((uint64_t)v73, (uint64_t)&v77, a4, a5, v17);
  uint64_t v25 = (a3 - 1);
  if (a3 != 1)
  {
    uint64_t v69 = 8LL * (int)v25;
    uint64_t v44 = (void *)sub_1000CAF58(v69, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v26 = 0LL;
    if (sub_10002AF0C((uint64_t)&v77, (uint64_t)v73, (unsigned __int16 *)&v75))
    {
      int v74 = 0;
      if (a8) {
        int v45 = a8 + 1;
      }
      else {
        int v45 = 0LL;
      }
      uint64_t v46 = a2 + 1;
      __dst = a6 + 1;
      do
      {
        unint64_t v49 = *((void *)&v75 + 1);
        if (sub_10002EAD8(v73, v46, v25, (unsigned __int16)v75, *((void *)&v75 + 1), v44, &v74, v45))
        {
          if (a8) {
            *a8 = (v49 & 0x3FF) == 0;
          }
          if (!*((void *)v16 + 44) && !v16[85])
          {
            uint64_t v61 = (v49 >> 35) & 0x3FFFF;
            unsigned int v62 = (char *)sub_100031858(v72, (v49 >> 35) & 0x3FFFF);
            int v63 = v62;
            if (v73 == a1)
            {
              uint64_t v65 = v70;
              int v64 = v71;
            }

            else
            {
              uint64_t v65 = v70;
              int v64 = v71;
              if (sub_100034540(v62))
              {
                unsigned int v66 = sub_1000277AC((uint64_t)a1, v61);
                int v63 = sub_100031858(v72, v66);
              }
            }

            *uint64_t v65 = v63;
            *int v64 = 0;
            memcpy(__dst, v44, v69);
            uint64_t v26 = 1LL;
            break;
          }

          int v50 = v74 + SWORD1(v75);
          int v74 = v50;
          if (v50 < *v71)
          {
            uint64_t v51 = (v49 >> 35) & 0x3FFFF;
            uint64_t v52 = (char *)sub_100031858(v72, (v49 >> 35) & 0x3FFFF);
            uint64_t v48 = v52;
            if (v73 != a1 && sub_100034540(v52))
            {
              if ((int)a1[67] < 2)
              {
LABEL_57:
                unsigned int v47 = -1;
              }

              else
              {
                uint64_t v53 = 1LL;
                while (1)
                {
                  uint64_t v54 = sub_100033278(*((void *)a1 + 32), *(_DWORD *)(*((void *)a1 + 34) + 4 * v53));
                  if (v54)
                  {
                    uint64_t v55 = *(unsigned int *)(v54 + 268);
                  }

uint64_t sub_10002F058(_DWORD *a1, _DWORD *a2)
{
  int v3 = *(unsigned __int16 *)a1;
  int v4 = *(unsigned __int16 *)a2;
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    int v6 = a1[1];
    int v7 = a2[1];
    uint64_t result = (v6 - v7);
    if (v6 == v7)
    {
      int v8 = a1[2];
      int v9 = a2[2];
      uint64_t result = (v8 - v9);
      if (v8 == v9) {
        return (a1[3] - a2[3]);
      }
    }
  }

  return result;
}

_DWORD *sub_10002F09C(int a1)
{
  uint64_t result = (_DWORD *)sub_1000C1074(40LL);
  if (result)
  {
    result[2] = 0;
    result[3] = (a1 + 255) >> 8;
    result[5] = -1;
  }

  return result;
}

uint64_t sub_10002F0D8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 8);
    int v3 = (_DWORD)v2 << 8;
    if ((int)((_DWORD)v2 << 8) >= 1)
    {
      unsigned int v4 = 0;
      do
      {
        uint64_t v6 = v4 >> 8;
        if (*(void *)(*(void *)(*(void *)v1 + 8LL * v6) + 8LL * v4))
        {
          uint64_t v7 = *(void *)(*(void *)(v1 + 24) + 8 * v6);
          int v8 = *(_DWORD *)(v7 + 4LL * v4);
          if ((v8 & 0x40000000) != 0)
          {
            unsigned int v9 = v8 & 0xBFFFFFFF;
            *(_DWORD *)(v7 + 4LL * v4) = v9;
            if (!v9)
            {
              uint64_t v10 = *(void *)(*(void *)v1 + 8 * v6);
              uint64_t v11 = 8LL * v4;
              uint64_t v12 = *(void *)(v10 + v11);
              *(void *)(v10 + v11) = 0LL;
              LODWORD(v11) = *(_DWORD *)(v1 + 20);
              --*(_DWORD *)(v1 + 16);
              if ((_DWORD)v11 == v4)
              {
                int v5 = v4;
                while (1)
                {
                  BOOL v13 = __OFSUB__(v5--, 1);
                  if (v5 < 0 != v13) {
                    break;
                  }
                  if (*(void *)(*(void *)(*(void *)v1 + 8LL * (v5 >> 8)) + 8LL {
                }
                  }

                int v5 = -1;
LABEL_6:
                *(_DWORD *)(v1 + 20) = v5;
              }

              sub_10002613C(v12);
            }
          }
        }

        ++v4;
      }

      while (v4 != v3);
      uint64_t v2 = *(unsigned int *)(v1 + 8);
    }

    sub_1000C1BC8(*(void *)v1, v2, v2);
    *(void *)uint64_t v1 = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 24), *(unsigned int *)(v1 + 36), *(_DWORD *)(v1 + 36));
    *(void *)(v1 + 24) = 0LL;
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10002F1E4(uint64_t a1, int a2)
{
  uint64_t v2 = a2 >> 8;
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8LL * v2);
  int v4 = *(_DWORD *)(v3 + 4LL * a2);
  if ((v4 & 0x40000000) == 0) {
    return 0LL;
  }
  unsigned int v6 = v4 & 0xBFFFFFFF;
  *(_DWORD *)(v3 + 4LL * a2) = v6;
  if (v6) {
    return 1LL;
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 8 * v2);
  uint64_t v8 = 8LL * a2;
  uint64_t v9 = *(void *)(v7 + v8);
  *(void *)(v7 + v8) = 0LL;
  LODWORD(v7) = *(_DWORD *)(a1 + 20);
  --*(_DWORD *)(a1 + 16);
  if ((_DWORD)v7 == a2)
  {
    int v10 = (a2 & (a2 >> 31)) - 1;
    while (1)
    {
      BOOL v11 = __OFSUB__(a2--, 1);
      if (a2 < 0 != v11) {
        break;
      }
    }

    a2 = v10;
LABEL_11:
    *(_DWORD *)(a1 + 20) = a2;
  }

  sub_10002613C(v9);
  return 1LL;
}

uint64_t sub_10002F298(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (*(_DWORD *)(a1 + 8) << 8);
  int v7 = *(_DWORD *)(a1 + 20);
  if (v7 < (int)v6 - 1)
  {
    uint64_t v8 = (v7 + 1);
    uint64_t result = v8;
LABEL_3:
    *(_DWORD *)(a1 + 20) = v8;
LABEL_13:
    ++*(_DWORD *)(a1 + 16);
    uint64_t v10 = 8LL * (result >> 8);
    *(void *)(*(void *)(*(void *)a1 + v10) + 8LL * result) = a2;
    *(_DWORD *)(a2 + 76) = a3;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + v10) + 4LL * result) = 0x40000000;
    return result;
  }

  if (*(_DWORD *)(a1 + 16) != (_DWORD)v6)
  {
    if ((int)v6 < 1)
    {
LABEL_12:
      uint64_t result = 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t result = 0LL;
      while (*(void *)(*(void *)(*(void *)a1 + 8LL * (result >> 8)) + 8LL * result))
      {
        uint64_t result = (result + 1);
        if ((_DWORD)v6 == (_DWORD)result) {
          goto LABEL_12;
        }
      }
    }

    goto LABEL_13;
  }

  if (sub_1000C1744( (const void **)a1,  (int *)(a1 + 12),  (signed int *)(a1 + 8),  8,  8,  v6 | 1)
    && sub_1000C1744( (const void **)(a1 + 24),  (int *)(a1 + 32),  (signed int *)(a1 + 36),  8,  4,  v6 | 1))
  {
    LODWORD(v8) = *(_DWORD *)(a1 + 20) + 1;
    uint64_t result = v6;
    goto LABEL_3;
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002F3D8(uint64_t a1, int a2)
{
  uint64_t result = sub_1000C1744((const void **)a1, (int *)(a1 + 12), (signed int *)(a1 + 8), 8, 8, a2);
  if ((_DWORD)result) {
    return sub_1000C1744((const void **)(a1 + 24), (int *)(a1 + 32), (signed int *)(a1 + 36), 8, 4, a2);
  }
  return result;
}

uint64_t sub_10002F438(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 2) << 8;
  if (v2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0LL;
  uint64_t v5 = *a1;
  while (*(void *)(*(void *)(v5 + 8LL * (result >> 8)) + 8LL * result) != a2)
  {
    uint64_t result = (result + 1);
    if (v2 == (_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_10002F480(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8) << 8;
  if (v2 < 1) {
    return 0LL;
  }
  int v3 = 0;
  while (1)
  {
    uint64_t v4 = v3 >> 8;
    if (v2 == ++v3) {
      return 0LL;
    }
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8 * v4);
  int v6 = *(_DWORD *)(v5 + 4LL * v3);
  if ((v6 & 0x40000000) == 0) {
    return 0LL;
  }
  unsigned int v8 = v6 & 0xBFFFFFFF;
  *(_DWORD *)(v5 + 4LL * v3) = v8;
  if (v8) {
    return 1LL;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 8 * v4);
  uint64_t v10 = 8LL * v3;
  uint64_t v11 = *(void *)(v9 + v10);
  *(void *)(v9 + v10) = 0LL;
  LODWORD(v10) = *(_DWORD *)(a1 + 20);
  --*(_DWORD *)(a1 + 16);
  if ((_DWORD)v10 == v3)
  {
    while (1)
    {
      BOOL v12 = __OFSUB__(v3--, 1);
      if (v3 < 0 != v12) {
        break;
      }
    }

    int v3 = -1;
LABEL_15:
    *(_DWORD *)(a1 + 20) = v3;
  }

  sub_10002613C(v11);
  return 1LL;
}

uint64_t sub_10002F564(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 24) + 8LL * (a2 >> 8));
  ++*(_DWORD *)(v2 + 4LL * a2);
  return result;
}

uint64_t sub_10002F588(uint64_t result, int a2)
{
  uint64_t v2 = a2 >> 8;
  uint64_t v3 = *(void *)(*(void *)(result + 24) + 8LL * v2);
  uint64_t v4 = 4LL * a2;
  int v5 = *(_DWORD *)(v3 + v4) - 1;
  *(_DWORD *)(v3 + v4) = v5;
  if (!v5)
  {
    uint64_t v6 = *(void *)(*(void *)result + 8 * v2);
    uint64_t v7 = 8LL * a2;
    uint64_t v8 = *(void *)(v6 + v7);
    *(void *)(v6 + v7) = 0LL;
    LODWORD(v6) = *(_DWORD *)(result + 20);
    --*(_DWORD *)(result + 16);
    if ((_DWORD)v6 == a2)
    {
      int v9 = (a2 & (a2 >> 31)) - 1;
      while (1)
      {
        BOOL v10 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v10) {
          break;
        }
      }

      a2 = v9;
LABEL_8:
      *(_DWORD *)(result + 20) = a2;
    }

    return sub_10002613C(v8);
  }

  return result;
}

BOOL sub_10002F614(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v2 = a2 >> 8;
}

uint64_t sub_10002F660(uint64_t a1, unsigned int a2)
{
  else {
    return *(void *)(*(void *)(*(void *)a1 + 8LL * (a2 >> 8)) + 8LL * a2);
  }
}

uint64_t sub_10002F690(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t sub_10002F69C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 8LL * (v5 >> 8)) + 8LL * v5);
      if (v7)
      {
        uint64_t v8 = (_BYTE *)sub_100025C9C(v7);
        int v2 = *(_DWORD *)(a1 + 20);
      }

      BOOL v6 = (int)v5 < v2;
      uint64_t v5 = (v5 + 1);
    }

    while (v6);
  }

  return 0xFFFFFFFFLL;
}

BOOL sub_10002F72C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "bcm0", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  if (!sub_1000BDB78(v4, *(_DWORD *)(a1 + 12), v5)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 8), v7)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 16), v8)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 20), v9)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 32), v10)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 36), v11))
  {
    goto LABEL_26;
  }

  if ((*(_DWORD *)(a1 + 20) & 0x80000000) == 0)
  {
    unsigned int v13 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)a1 + 8LL * (v13 >> 8));
      uint64_t v18 = *(unsigned int **)(v17 + 8LL * v13);
      if (!v18)
      {
        if (!sub_1000BDB78(v6, 0, v12)) {
          goto LABEL_22;
        }
        goto LABEL_12;
      }

      if (sub_100025C94(*(unsigned int **)(v17 + 8LL * v13)) == 3)
      {
        if (!sub_1000BDB78(v6, 1, v19)) {
          goto LABEL_22;
        }
      }

      else
      {
        int v20 = sub_100025C94(v18);
        if (!sub_1000BDB78(v6, v20 == 2, v21)) {
          goto LABEL_22;
        }
        if (v20 != 2) {
          goto LABEL_12;
        }
      }

      if (!sub_1000BDB78(v6, *v18, v12) || !sub_100026994((uint64_t)v18))
      {
LABEL_22:
        unsigned int v15 = v13;
        goto LABEL_24;
      }

BOOL sub_10002F8F0( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v11 = sub_1000BCAE8(a2, "bcm0", a3, a4, a5, a6, a7, a8);
  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  if (!sub_1000BCD38((uint64_t)v11, (char *)&v28 + 4)
    || !sub_1000BCD38(v12, &v28)
    || !sub_1000BCD38(v12, (char *)&v26 + 4)
    || !sub_1000BCD38(v12, &v27)
    || !sub_1000BCD38(v12, &v26)
    || !sub_1000BCD38(v12, (char *)&v25 + 4)
    || !sub_1000C1A34((const void **)a1, (int *)(a1 + 12), SHIDWORD(v28))
    || (int)v28 >= 1 && !sub_10002F3D8(a1, (_DWORD)v28 << 8))
  {
    goto LABEL_32;
  }

  int v13 = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(_DWORD *)(a1 + 20) = v13;
  if (v13 < 0)
  {
    int v16 = 0;
  }

  else
  {
    int v14 = 0;
    while (sub_1000BCD38(v12, &v25))
    {
      if ((_DWORD)v25)
      {
        uint64_t v18 = *(void *)(*(void *)a1 + 8LL * (v14 >> 8));
        uint64_t v19 = sub_10002699C(v12, SHIDWORD(v27), a4, a5);
        *(void *)(v18 + 8LL * v14) = v19;
        if (!v19) {
          break;
        }
      }

      int v16 = v14 + 1;
    }

    int v16 = v14;
  }

uint64_t sub_10002FB14(uint64_t a1, int a2, int a3, uint64_t *a4, int a5)
{
  uint64_t v10 = sub_1000C1074(312LL);
  uint64_t v12 = v10;
  if (v10)
  {
    int v13 = (_OWORD *)(v10 + 4);
    int v14 = sub_1000C8928(" XTR ", (unsigned __int8 *)(v10 + 4), 64, v11);
    *(_DWORD *)uint64_t v12 = 1;
    if (v14)
    {
      *(_OWORD *)(v12 + 36) = 0u;
      *(_OWORD *)(v12 + 52) = 0u;
      *int v13 = 0u;
      *(_OWORD *)(v12 + 20) = 0u;
      sub_1000C896C((_BYTE *)(v12 + 4), " XTR ", 64);
    }

    *(void *)(v12 + 68) = 0x100000001LL;
    *(void *)(v12 + 80) = sub_10002FFAC;
    *(void *)(v12 + 88) = sub_100030004;
    *(void *)(v12 + 96) = sub_10003000C;
    *(void *)(v12 + 104) = sub_100030110;
    *(void *)(v12 + 112) = sub_10003012C;
    *(void *)(v12 + 120) = 0LL;
    *(void *)(v12 + 128) = sub_1000302AC;
    *(void *)(v12 + 136) = sub_100030344;
    *(void *)(v12 + 144) = nullsub_4;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(void *)(v12 + 200) = sub_1000304B0;
    *(void *)(v12 + 208) = sub_1000304B8;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(void *)(v12 + 256) = a4;
    *(_DWORD *)(v12 + 264) = a2;
    BOOL v15 = (_DWORD *)sub_1000C1074(4LL * (a2 + 1));
    *(void *)(v12 + 272) = v15;
    if (!v15) {
      goto LABEL_51;
    }
    uint64_t v16 = a2;
    *BOOL v15 = 0;
    int v51 = a5;
    if (a2 >= 1)
    {
      if (a3 == 2)
      {
        uint64_t v19 = 0LL;
        int v18 = 0;
        do
        {
          v18 += sub_1000B39A4((uint64_t)a4, *(_DWORD *)(a1 + v19), __src, 200);
          *(_DWORD *)(*(void *)(v12 + 272) + v19 + 4) = v18;
          v19 += 4LL;
        }

        while (4LL * a2 != v19);
        goto LABEL_19;
      }

      if (a3 == 1)
      {
        uint64_t v20 = 0LL;
        int v18 = 0;
        do
        {
          unsigned int v21 = sub_1000BB884((uint64_t)a4, *(unsigned __int16 *)(a1 + 2 * v20));
          v18 += sub_1000B39A4((uint64_t)a4, v21, __src, 200);
          *(_DWORD *)(*(void *)(v12 + 272) + 4 * v20++ + 4) = v18;
        }

        while (a2 != v20);
        goto LABEL_19;
      }

      uint64_t v17 = 0LL;
      if (!a3)
      {
        do
        {
          __src[0].i16[0] = *(_WORD *)(a1 + 2 * v17);
          *(_DWORD *)(*(void *)(v12 + 272) + 4 * v17 + 4) = v17 + 1;
          ++v17;
        }

        while (a2 != v17);
        int v18 = a2;
        goto LABEL_19;
      }

      do
      {
        *(_DWORD *)(*(void *)(v12 + 272) + v17 + 4) = 0;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

    int v18 = 0;
LABEL_19:
    uint64_t v22 = 2LL * v18;
    uint64_t v23 = sub_1000C1074(v22);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v50 = v22;
      *(void *)(v12 + 280) = v23;
      if (a2 >= 1)
      {
        uint64_t v25 = 0LL;
        int v26 = 0;
        do
        {
          if (a3)
          {
            if (a3 == 1)
            {
              unsigned int v27 = sub_1000BB884((uint64_t)a4, *(unsigned __int16 *)(a1 + 2 * v25));
            }

            else
            {
              if (a3 != 2)
              {
                int v28 = 0;
                goto LABEL_24;
              }

              unsigned int v27 = *(_DWORD *)(a1 + 4 * v25);
            }

            int v28 = sub_1000B39A4((uint64_t)a4, v27, __src, 200);
          }

          else
          {
            __src[0].i16[0] = *(_WORD *)(a1 + 2 * v25);
            int v28 = 1;
          }

uint64_t sub_10002FF9C(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return sub_10002FB14(a1, a2, 2, a3, a4);
}

uint64_t sub_10002FFAC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 280));
    v1[35] = 0LL;
    sub_1000C0EF8(v1[34]);
    v1[34] = 0LL;
    sub_1000C0EF8(v1[37]);
    v1[37] = 0LL;
    sub_1000C0EF8(v1[38]);
    v1[38] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_100030004()
{
  return 1LL;
}

uint64_t sub_10003000C(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = sub_1000BB884(*(void *)(a1 + 256), a2);
  int v4 = sub_1000B39A4(*(void *)(a1 + 256), v3, 0LL, 0);
  if (!v4) {
    return 1LL;
  }
  int v12 = v4;
  int v13 = (int16x8_t *)sub_1000CAF58(2LL * v4, v5, v6, v7, v8, v9, v10, v11);
  int v14 = sub_1000B39A4(*(void *)(a1 + 256), v3, v13, v12);
  uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 272) + 4LL * *(int *)(a1 + 264));
  if ((int)v15 < 1 || v14 < 1)
  {
    uint64_t v17 = 1LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 1LL;
    while (2)
    {
      uint64_t v18 = v14;
      uint64_t v19 = v13;
      do
      {
        int v20 = v19->u16[0];
        uint64_t v19 = (int16x8_t *)((char *)v19 + 2);
        if (*(unsigned __int16 *)(*(void *)(a1 + 280) + 2 * v16) == v20)
        {
          uint64_t v17 = 0LL;
          *(_DWORD *)(a1 + 264) = -1;
          goto LABEL_13;
        }

        --v18;
      }

      while (v18);
      if (++v16 != v15) {
        continue;
      }
      break;
    }
  }

void sub_100030110(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, __int16 a5)
{
  *(_WORD *)(a2 + 8) = a3;
  *(void *)(a2 + 16) = a4 & 0x1FFFFFFFFFFFFFLL;
  *(void *)a2 = (a4 >> 53) & 0x3FF;
  *(_WORD *)(a2 + 24) = a5;
}

BOOL sub_10003012C(char *__s1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *((void *)__s1 + 2);
  uint64_t v4 = v3 + 1;
  *((void *)a3 + 1) = v3 + 1 + ((unint64_t)*(unsigned int *)__s1 << 53);
  uint64_t v5 = *(int *)(a2 + 264);
  if (v3 >= v5) {
    return 0LL;
  }
  *((_DWORD *)a3 + 4) = v4 == v5;
  a3[1] = 0;
  *((void *)a3 + 3) = 0LL;
  uint64_t v9 = *(void *)(a2 + 272);
  uint64_t v10 = *(int *)(v9 + 4 * v3);
  uint64_t v11 = (char *)(*(void *)(a2 + 280) + 2 * v10);
  int v12 = *(_DWORD *)(v9 + 4 * v4) - v10;
  int v13 = __s1 + 24;
  if (*((__int16 *)__s1 + 12) == -1)
  {
    while (1)
    {
      uint64_t v15 = *((int *)__s1 + 1);
      *a3 = *(_WORD *)&v11[2 * v15];
      ++*((_DWORD *)__s1 + 1);
      if (!qword_1000FDCC0
        || !*(_DWORD *)(qword_1000FDCC0 + 1288)
        || sub_1000BBCE0(*(void *)(a2 + 256), *((unsigned __int16 *)__s1 + 4), *a3))
      {
        return 1LL;
      }
    }

    return 0LL;
  }

  if (!qword_1000FDCC0
    || !*(_DWORD *)(qword_1000FDCC0 + 1288)
    || (BOOL result = sub_1000BBCE0(*(void *)(a2 + 256), *((unsigned __int16 *)__s1 + 4), *a3)))
  {
    if (*((_DWORD *)__s1 + 1)) {
      return 0LL;
    }
    if (sub_1000C8874(v13, 2, v11, v12) != -1)
    {
      *a3 = *((_WORD *)__s1 + 12);
      BOOL result = 1LL;
      *((_DWORD *)__s1 + 1) = 1;
      return result;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1000302AC(uint64_t a1, char *__s1, int a3)
{
  uint64_t v3 = *(int *)(a1 + 264);
  if (a3 >= 1)
  {
    uint64_t v7 = 4 * v3;
    uint64_t v8 = a3;
    while (sub_1000C8874( __s1,  2,  (char *)(*(void *)(a1 + 280) + 2LL * *(int *)(*(void *)(a1 + 272) + v7 - 4)),  *(_DWORD *)(*(void *)(a1 + 272) + v7) - *(_DWORD *)(*(void *)(a1 + 272) + v7 - 4)) != -1)
    {
      __s1 += 2;
      v7 -= 4LL;
      if (!--v8) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_100030344(uint64_t a1, int a2, uint64_t a3, void *a4, _DWORD *a5, _BYTE *a6)
{
  if (*(_DWORD *)(a1 + 264) != a2) {
    return 0LL;
  }
  uint64_t v35 = *(uint64_t **)(a1 + 256);
  int v9 = sub_1000B32A8(v35);
  uint64_t v34 = 2LL * v9;
  uint64_t v17 = (int16x8_t *)sub_1000CAF58(v34, v10, v11, v12, v13, v14, v15, v16);
  if (a2 >= 1)
  {
    uint64_t v18 = 0LL;
    while (1)
    {
      uint64_t v19 = 4 * v18++;
      uint64_t v20 = *(void *)(a1 + 272);
      uint64_t v21 = *(void *)(a1 + 280);
      int v22 = *(_DWORD *)(v20 + 4 * v18);
      uint64_t v23 = *(int *)(v20 + v19);
      uint64_t v24 = a3;
      int v25 = sub_1000B39A4((uint64_t)v35, *(_DWORD *)(a3 + v19), v17, v9);
      if (v25 < 1) {
        break;
      }
      int v26 = v22 - v23;
      unsigned int v27 = (char *)(v21 + 2 * v23);
      int v28 = v17;
      uint64_t v29 = v25;
      while (sub_1000C8874(v28, 2, v27, v26) == -1)
      {
        int v28 = (int16x8_t *)((char *)v28 + 2);
        if (!--v29) {
          goto LABEL_13;
        }
      }

      a3 = v24;
      if (v18 == a2) {
        goto LABEL_10;
      }
    }

uint64_t sub_1000304B0()
{
  return 0LL;
}

uint64_t sub_1000304B8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(_DWORD *)(a1 + 288)) {
    return 0xFFFFLL;
  }
  if (*(_DWORD *)(a1 + 264) == a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 304);
  uint64_t v5 = (int *)(*(void *)(a1 + 296) + 4 * a2);
  uint64_t result = (v5[1] - *v5);
  *a3 = v4 + 2LL * *v5;
  return result;
}

uint64_t sub_1000304FC(int a1, unsigned int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t result = 0LL;
  if (a1 <= 0x2000000 && ((a2 | a1) & 0x80000000) == 0)
  {
    if (a1 || !a2)
    {
      if (!a1 || a2)
      {
        uint64_t result = sub_1000C1074(224LL);
        if (result)
        {
          *(void *)(result + 204) = 0x100000001LL;
          if (a1)
          {
            unsigned int v15 = 0;
            unsigned int v16 = a1 + 1;
            do
            {
              ++v15;
              BOOL v17 = v16 > 1;
              v16 >>= 1;
            }

            while (v17);
            if (v15 >= 8) {
              unsigned int v15 = 8;
            }
          }

          else
          {
            unsigned int v15 = 8;
          }

          *(_DWORD *)uint64_t result = v15;
          *(_DWORD *)(result + 4) = 1 << v15;
          *(void *)(result + 24) = 0LL;
          *(_DWORD *)(result + 12) = 0;
          *(_DWORD *)(result + 16) = 0;
          int v18 = (a1 + (1 << v15) - 1) / (1 << v15);
          *(_DWORD *)(result + 8) = v18;
          if (a2)
          {
            unsigned int v19 = 0;
            unsigned int v20 = a2;
            do
            {
              ++v19;
              BOOL v17 = v20 > 1;
              v20 >>= 1;
            }

            while (v17);
            if (v19 >= 8) {
              unsigned int v19 = 8;
            }
          }

          else
          {
            unsigned int v19 = 8;
          }

          *(_DWORD *)(result + 32) = v19;
          int v21 = 1 << v19;
          *(_DWORD *)(result + 36) = v21;
          *(void *)(result + 40) = ((int)(a2 + v21 - 1) / v21);
          *(_DWORD *)(result + 48) = 0;
          *(_DWORD *)(result + 52) = a5;
          *(_DWORD *)(result + 148) = 0;
          *(_DWORD *)(result + 152) = a3;
          *(_DWORD *)(result + 172) = 0;
          *(_DWORD *)(result + 176) = a4;
          *(void *)(result + 128) = 0LL;
          *(void *)(result + 136) = 0LL;
          *(_DWORD *)(result + 144) = v18;
          *(void *)(result + 160) = 0LL;
          *(_DWORD *)(result + 168) = v18;
          *(void *)(result + 56) = a6;
          if (a6) {
            int v22 = a7;
          }
          else {
            int v22 = -1;
          }
          *(_DWORD *)(result + 64) = v22;
          *(_DWORD *)(result + 200) = 0;
          *(void *)(result + 216) = 0LL;
        }
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003069C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 204))
    {
      if (*(int *)(result + 12) >= 1)
      {
        uint64_t v2 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 24) + 8 * v2++));
        while (v2 < *(int *)(v1 + 12));
      }

      sub_1000C0EF8(*(void *)(v1 + 24));
      if (*(int *)(v1 + 44) >= 1)
      {
        uint64_t v3 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 128) + 8 * v3++));
        while (v3 < *(int *)(v1 + 44));
      }

      sub_1000C0EF8(*(void *)(v1 + 128));
      if (*(_DWORD *)(v1 + 152))
      {
        if (*(int *)(v1 + 148) >= 1)
        {
          uint64_t v4 = 0LL;
          do
            sub_1000C0EF8(*(void *)(*(void *)(v1 + 136) + 8 * v4++));
          while (v4 < *(int *)(v1 + 148));
        }

        sub_1000C0EF8(*(void *)(v1 + 136));
      }

      if (*(int *)(v1 + 172) >= 1)
      {
        uint64_t v5 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 160) + 8 * v5++));
        while (v5 < *(int *)(v1 + 172));
      }

      sub_1000C0EF8(*(void *)(v1 + 160));
      uint64_t v6 = *(void *)(v1 + 104);
      if (v6)
      {
        if (*(int *)(v1 + 116) >= 1)
        {
          uint64_t v7 = 0LL;
          do
            sub_1000C0EF8(*(void *)(*(void *)(v1 + 104) + 8 * v7++));
          while (v7 < *(int *)(v1 + 116));
          uint64_t v6 = *(void *)(v1 + 104);
        }

        sub_1000C0EF8(v6);
      }

      sub_1000C0EF8(*(void *)(v1 + 72));
      sub_1000C0EF8(*(void *)(v1 + 80));
      uint64_t result = sub_100036DCC(*(void *)(v1 + 216));
      *(void *)(v1 + 216) = 0LL;
    }
  }

  return result;
}

uint64_t sub_1000307F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1000307FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t sub_100030804(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_10003080C(uint64_t result)
{
  *(_DWORD *)(result + 88) = -1;
  return result;
}

uint64_t sub_100030818(uint64_t a1, int a2, uint64_t a3, unsigned __int16 a4, uint64_t *a5)
{
  uint64_t v10 = sub_1000B31C8((uint64_t)a5);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v12 = *(void *)(qword_1000FDCC0 + 1280);
  }
  if (v12 <= v11)
  {
    if (*(_DWORD *)(a1 + 188))
    {
      if (*(unsigned __int16 *)(a1 + 96) != a4)
      {
        if (*(_DWORD *)(a1 + 92) < a2)
        {
          uint64_t v19 = sub_1000C1074(8LL * a2);
          if (!v19) {
            goto LABEL_46;
          }
          uint64_t v20 = v19;
          uint64_t v21 = sub_1000C1074(2LL * a2);
          if (!v21)
          {
            uint64_t v62 = v20;
LABEL_45:
            sub_1000C0EF8(v62);
            goto LABEL_46;
          }

          uint64_t v22 = v21;
          sub_1000C0EF8(*(void *)(a1 + 72));
          sub_1000C0EF8(*(void *)(a1 + 80));
          *(void *)(a1 + 72) = v20;
          *(void *)(a1 + 80) = v22;
          *(_DWORD *)(a1 + 92) = a2;
        }

        if (a2 < 1)
        {
          int v24 = 0;
        }

        else
        {
          uint64_t v23 = 0LL;
          int v24 = 0;
          do
          {
            unsigned int v25 = sub_10001EDF8(v10, *(unsigned __int16 *)(a3 + 2 * v23), 0LL);
            unsigned int v26 = sub_100030CA0(a1, v25, &v65);
            if (v26 != 0xFFFF)
            {
              uint64_t v28 = v24;
              uint64_t v29 = 8LL * v24;
              int v30 = v24 + 1;
              int v31 = v26 << 10;
              unsigned int v32 = v26 + 1;
              do
              {
                *(_WORD *)(*(void *)(a1 + 72) + v29) = *(_WORD *)(a3 + 2 * v23);
                *(_WORD *)(*(void *)(a1 + 80) + 2 * v28) = v25;
                int v24 = v30;
                *(_WORD *)(*(void *)(a1 + 72) + v29 + 2) = *v33 == *v27 + 1;
                *(_DWORD *)(*(void *)(a1 + 72) + v29 + 4) = v31;
                int v34 = *(_DWORD *)(a1 + 16);
                if (v32 == v34) {
                  break;
                }
                if (v34 == *(_DWORD *)(a1 + 48)) {
                  break;
                }
                v29 += 8LL;
                int v30 = v24 + 1;
                v31 += 1024;
                ++v32;
                ++v28;
                unsigned int v27 = v33;
              }

              while (v25 == *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
            }

            ++v23;
          }

          while (v23 != a2);
        }

        *(_DWORD *)(a1 + 88) = v24;
        *(_WORD *)(a1 + 96) = a4;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 88) = -1;
    }

    return 1LL;
  }

  if (v11 < 1)
  {
    int v13 = 0;
  }

  else
  {
    int v13 = 0;
    int v14 = 0;
    unsigned __int16 v15 = -1;
    do
    {
      if (v17 != v15)
      {
        unsigned int v18 = sub_1000BB884( (uint64_t)a5,  *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8LL * (int)(v16 >> *(_DWORD *)(a1 + 32)))
                                    + 2LL * (int)((*(_DWORD *)(a1 + 36) - 1) & v16)));
        v13 += sub_1000B3C5C(a5, v18);
        int v11 = *(_DWORD *)(a1 + 16);
        unsigned __int16 v15 = v17;
      }

      ++v14;
    }

    while (v14 < v11);
  }

  if (v13 <= *(_DWORD *)(a1 + 92)) {
    goto LABEL_29;
  }
  uint64_t v35 = sub_1000C1074(8LL * v13);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = sub_1000C1074(2LL * v13);
    if (v37)
    {
      uint64_t v38 = v37;
      sub_1000C0EF8(*(void *)(a1 + 72));
      sub_1000C0EF8(*(void *)(a1 + 80));
      *(void *)(a1 + 72) = v36;
      *(void *)(a1 + 80) = v38;
      *(_DWORD *)(a1 + 92) = v13;
LABEL_29:
      int v39 = sub_1000B32A8(a5);
      uint64_t v47 = (int16x8_t *)sub_1000CAF58(2LL * v39, v40, v41, v42, v43, v44, v45, v46);
      unsigned __int16 v64 = a4;
      int v48 = 0;
      if (*(int *)(a1 + 16) >= 1)
      {
        unsigned int v49 = 0;
        unsigned __int16 v50 = -1;
        do
        {
          uint64_t v51 = *(void *)(a1 + 24);
          int v52 = *(_DWORD *)(a1 + 4) - 1;
          unsigned int v53 = *(_DWORD *)(*(void *)(v51 + 8LL * (v49 >> *(_DWORD *)a1)) + 4LL * (v52 & v49));
          unsigned int v54 = v49 + 1;
          if (v55 != v50)
          {
            int v56 = *(_DWORD *)(*(void *)(v51 + 8LL * (v54 >> *(_DWORD *)a1)) + 4LL * (v52 & v54));
            int v57 = sub_10001FBCC( v10,  *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8LL * (int)(v53 >> *(_DWORD *)(a1 + 32)))
                                        + 2LL * (int)((*(_DWORD *)(a1 + 36) - 1) & v53)),
                    v47,
                    v39);
            if (v57 >= 1)
            {
              uint64_t v58 = 0LL;
              uint64_t v59 = 8LL * v48;
              uint64_t v60 = 2LL * v48;
              v48 += v57;
              uint64_t v61 = v59;
              do
              {
                *(_WORD *)(*(void *)(a1 + 72) + v61) = v47->i16[v58];
                *(_WORD *)(*(void *)(a1 + 80) + v60 + v58 * 2) = v55;
                *(_WORD *)(*(void *)(a1 + 72) + v61 + 2) = v56 == v53 + 1;
                *(_DWORD *)(*(void *)(a1 + 72) + v59 + 2 * v58++ + 4) = v49 << 10;
                v61 += 8LL;
              }

              while (v57 != v58);
            }

            unsigned __int16 v50 = v55;
          }

          ++v49;
        }

        while ((signed int)v54 < *(_DWORD *)(a1 + 16));
      }

      sub_1000CB038(v47, 2LL * v39);
      *(_DWORD *)(a1 + 88) = v48;
      *(_WORD *)(a1 + 96) = v64;
      return 1LL;
    }

    uint64_t v62 = v36;
    goto LABEL_45;
  }

uint64_t sub_100030CA0(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (*(void *)(a1 + 104))
  {
    *a3 = 1;
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 104) + 8LL * (a2 >> 8)) + 2LL * a2);
  }

  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == *(_DWORD *)(a1 + 48))
  {
    uint64_t result = 0LL;
    int v6 = v5 - 1;
    if (v5 >= 1)
    {
      do
      {
        unsigned int v7 = (v6 + result) >> 1;
        if (v8 < a2) {
          uint64_t result = v7 + 1;
        }
        else {
          uint64_t result = result;
        }
        if (v8 >= a2) {
          int v6 = v7 - 1;
        }
      }

      while ((int)result <= v6);
    }

    if ((int)result < v5
      && *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
                                         + 8LL * (int)(result >> *(_DWORD *)(a1 + 32)))
                             + 2LL * (int)((*(_DWORD *)(a1 + 36) - 1) & result)) == a2)
    {
      *a3 = 1;
      return result;
    }
  }

  else
  {
    uint64_t result = 0LL;
    int v9 = v5 - 1;
    if (v5 >= 1)
    {
      do
      {
        unsigned int v10 = (result + v9) >> 1;
        unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8LL * (v10 >> *(_DWORD *)a1))
                        + 4LL * (v10 & (*(_DWORD *)(a1 + 4) + 0x7FFFFFFF)));
        if (v12 < a2) {
          uint64_t result = v10 + 1;
        }
        else {
          uint64_t result = result;
        }
        if (v12 >= a2) {
          int v9 = v10 - 1;
        }
      }

      while ((int)result <= v9);
    }

    if ((int)result < v5)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      int v14 = *(_DWORD *)(a1 + 4) - 1;
      unsigned int v15 = *(_DWORD *)(*(void *)(v13 + 8LL * (int)(result >> *(_DWORD *)a1)) + 4LL
                                                                                              * (int)(v14 & result));
      if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8LL * (int)(v15 >> *(_DWORD *)(a1 + 32)))
                               + 2LL * (int)((*(_DWORD *)(a1 + 36) - 1) & v15)) == a2)
      {
        *a3 = *(_DWORD *)(*(void *)(v13 + 8LL * (int)((result + 1) >> *(_DWORD *)a1))
        return result;
      }
    }
  }

  return 0xFFFFLL;
}

uint64_t sub_100030E38(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8LL * (int)((a2 + 1) >> *(_DWORD *)a1))
                                  + 4LL * (int)((*(_DWORD *)(a1 + 4) - 1) & (a2 + 1)))
}

uint64_t sub_100030E70(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    if (v3 >= 1)
    {
      uint64_t v5 = 0LL;
      int v6 = 0;
      do
      {
        if (v3 >= *(_DWORD *)(a1 + 36)) {
          int v7 = *(_DWORD *)(a1 + 36);
        }
        else {
          int v7 = v3;
        }
        j__memmove((void *)(a2 + 2LL * v6), *(const void **)(*(void *)(a1 + 128) + v5), 2 * v7);
        v6 += v7;
        v5 += 8LL;
        BOOL v8 = __OFSUB__(v3, v7);
        v3 -= v7;
      }

      while (!((v3 < 0) ^ v8 | (v3 == 0)));
    }
  }

  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_100030EF0(uint64_t a1)
{
  return a1 + 72;
}

uint64_t sub_100030EF8(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 152)) {
  else
  }
    return 0LL;
}

uint64_t sub_100030F30(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(v4 + 8LL * (int)(a2 >> *(_DWORD *)a1));
  uint64_t v6 = *(int *)(a1 + 4) - 1LL;
  int v7 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v6 & (a2 + 1)));
  uint64_t v8 = v6 & (int)a2;
  int v9 = v7 - *(_DWORD *)(v5 + 4 * v8);
  *a4 = v9;
  if (v9 <= a3) {
    return 0xFFFFLL;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
  }
                                           + 8LL
}

uint64_t sub_100030FA8(uint64_t a1, unsigned int a2, _WORD *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(int *)(a1 + 4) - 1LL;
  uint64_t v6 = *(void *)(a1 + 128);
  unsigned int v7 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)(a2 >> *(_DWORD *)a1)) + 4LL * (int)(v5 & a2));
  int v8 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(v6 + 8LL * (int)(v7 >> v8));
  int v10 = *(_DWORD *)(a1 + 36) - 1;
  int v11 = v10 & v7;
  uint64_t v12 = (int)a2 + 1LL;
  uint64_t v13 = *(void *)(v4 + 8LL * (int)(v12 >> *(_DWORD *)a1));
  uint64_t v14 = v5 & v12;
  unsigned int v15 = *(_DWORD *)(v13 + 4 * v14);
  if (*(unsigned __int16 *)(v9 + 2LL * v11) != *(unsigned __int16 *)(*(void *)(v6 + 8LL * (int)(v15 >> v8)) {
  *a4 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a2 + 2) >> *(_DWORD *)a1)) + 4LL * (int)(v5 & (a2 + 2))) - v15 == 2;
  }
  *a3 = *(_WORD *)(*(void *)(*(void *)(a1 + 128)
  return 1LL;
}

uint64_t sub_100031070(uint64_t result, void *a2, _DWORD *a3)
{
  *a2 = *(void *)(result + 56);
  *a3 = *(_DWORD *)(result + 64);
  return result;
}

uint64_t sub_100031084(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 4) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(v2 + 8LL * (int)(a2 >> *(_DWORD *)a1)) + 4LL * (int)(v3 & a2));
  unsigned int v5 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 16);
  if ((int)v5 < v7)
  {
    uint64_t v8 = *(void *)(a1 + 128);
    int v9 = *(_DWORD *)(a1 + 32);
    int v10 = *(_DWORD *)(a1 + 36) - 1;
    int v11 = *(unsigned __int16 *)(*(void *)(v8 + 8LL * (int)(v4 >> v9)) + 2LL * (int)(v10 & v4));
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 8LL * (int)(v5 >> *(_DWORD *)a1)) + 4LL * (int)(v5 & v3));
      if (v7 == ++v5)
      {
        unsigned int v5 = *(_DWORD *)(a1 + 16);
        return v5 + ~a2;
      }
    }
  }

  return v5 + ~a2;
}

uint64_t sub_100031134(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (a2 >> 8)) + 8LL * a2);
}

uint64_t sub_10003114C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(unsigned int *)(a1 + 132);
  if (!(_DWORD)v8) {
    return 1LL;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + ((v8 >> 5) & 0x7FFFFF8))
                  + 8LL * *(_DWORD *)(a1 + 132));
  uint64_t v11 = sub_100034C60(*(void *)(a1 + 136), v10, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v11)
  {
    uint64_t v12 = *(void *)(a1 + 136);
    *(_DWORD *)(a1 + 132) = 0;
    sub_1000C1B20(*(void *)(v12 + 24), *(unsigned int *)(v12 + 12), *(_DWORD *)(v12 + 12));
    *(_DWORD *)(v12 + 12) = 0;
    sub_1000C1B20(*(void *)(v12 + 128), *(unsigned int *)(v12 + 44), *(_DWORD *)(v12 + 44));
    *(_DWORD *)(v12 + 44) = 0;
    sub_1000C1B20(*(void *)(v12 + 136), *(unsigned int *)(v12 + 148), *(_DWORD *)(v12 + 148));
    *(_DWORD *)(v12 + 148) = 0;
    sub_1000C1B20(*(void *)(v12 + 160), *(unsigned int *)(v12 + 172), *(_DWORD *)(v12 + 172));
    *(_DWORD *)(v12 + 172) = 0;
    *(_DWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 48) = 0;
    if (*(void *)(a1 + 72))
    {
      if (!*(_DWORD *)(v10 + 180))
      {
        int v13 = *(_DWORD *)(v10 + 16);
        if (v13 < 1)
        {
          int v14 = 0;
        }

        else
        {
          int v14 = 0;
          int v15 = 0;
          unsigned int v16 = *(uint64_t **)a1;
          unsigned __int16 v17 = -1;
          do
          {
            if (v19 != v17)
            {
              unsigned int v20 = sub_1000BB884( (uint64_t)v16,  *(unsigned __int16 *)(*(void *)(*(void *)(v10 + 128)
              v14 += sub_1000B3C5C(v16, v20);
              int v13 = *(_DWORD *)(v10 + 16);
              unsigned __int16 v17 = v19;
            }

            ++v15;
          }

          while (v15 < v13);
        }

        uint64_t v22 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          uint64_t v22 = *(void *)(qword_1000FDCC0 + 1272);
        }
        *(_DWORD *)(v10 + 180) = v22 <= v14;
      }
    }
  }

  return v11;
}

uint64_t sub_1000312F0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 32) >= 1)
    {
      int v2 = 0;
      do
      {
        uint64_t v3 = ++v2 >> 8;
        uint64_t v4 = *(void *)(*(void *)(*(void *)(v1 + 56) + 8LL * v3) + 8LL * v2);
        if (v4)
        {
          sub_1000C0EF8(v4);
          if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 104) + 8 * v3) + 4LL * v2))
          {
            uint64_t v5 = *(void *)(*(void *)(*(void *)(v1 + 40) + 8 * v3) + 8LL * v2);
            if (*(_DWORD *)(v5 + 204))
            {
              sub_10003069C(v5);
              sub_1000C0EF8(v5);
            }
          }
        }
      }

      while (v2 < *(_DWORD *)(v1 + 32));
    }

    uint64_t v6 = *(void *)(v1 + 40);
    if (v6)
    {
      if (*(int *)(v1 + 52) >= 1)
      {
        uint64_t v7 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 40) + 8 * v7++));
        while (v7 < *(int *)(v1 + 52));
        uint64_t v6 = *(void *)(v1 + 40);
      }

      sub_1000C0EF8(v6);
    }

    uint64_t v8 = *(void *)(v1 + 56);
    if (v8)
    {
      if (*(int *)(v1 + 68) >= 1)
      {
        uint64_t v9 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 56) + 8 * v9++));
        while (v9 < *(int *)(v1 + 68));
        uint64_t v8 = *(void *)(v1 + 56);
      }

      sub_1000C0EF8(v8);
    }

    uint64_t v10 = *(void *)(v1 + 88);
    if (v10)
    {
      if (*(int *)(v1 + 100) >= 1)
      {
        uint64_t v11 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 88) + 8 * v11++));
        while (v11 < *(int *)(v1 + 100));
        uint64_t v10 = *(void *)(v1 + 88);
      }

      sub_1000C0EF8(v10);
    }

    uint64_t v12 = *(void *)(v1 + 104);
    if (v12)
    {
      if (*(int *)(v1 + 116) >= 1)
      {
        uint64_t v13 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 104) + 8 * v13++));
        while (v13 < *(int *)(v1 + 116));
        uint64_t v12 = *(void *)(v1 + 104);
      }

      sub_1000C0EF8(v12);
    }

    if (*(void *)(v1 + 72))
    {
      int v14 = *(_DWORD *)(v1 + 32);
      if (v14 >= 1)
      {
        int v15 = 0;
        do
        {
          ++v15;
          if (v16)
          {
            sub_1000600D0(v16);
            int v14 = *(_DWORD *)(v1 + 32);
          }
        }

        while (v15 < v14);
      }

      if (*(int *)(v1 + 84) >= 1)
      {
        uint64_t v17 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 72) + 8 * v17++));
        while (v17 < *(int *)(v1 + 84));
      }

      sub_1000C0EF8(*(void *)(v1 + 72));
    }

    uint64_t v18 = *(void *)(v1 + 136);
    sub_10003069C(v18);
    sub_1000C0EF8(v18);
    int v19 = *(uint64_t **)(v1 + 120);
    if (v19)
    {
      sub_1000C0EF8(*v19);
      sub_1000C0EF8(v19[2]);
      sub_1000C0EF8(v19[4]);
      sub_1000C0EF8((uint64_t)v19);
    }

    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100031544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v9 >> 8)) + 8LL * v9);
  if (*(_DWORD *)(v11 + 152)) {
  else
  }
    return 0LL;
}

uint64_t sub_1000315D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v9 >> 8)) + 8LL * v9);
}

uint64_t sub_100031640(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = 0;
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 1LL;
  while (1)
  {
    uint64_t v9 = v7 >> 8;
    uint64_t v10 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v9) + 8LL * v7);
    if (!v10) {
      goto LABEL_6;
    }
    int v6 = *(_DWORD *)(a1 + 32);
LABEL_6:
    BOOL v8 = (int)v7 < v6;
    uint64_t v7 = (v7 + 1);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 104) + 8 * v9);
  *a3 = 1;
  return *(unsigned int *)(v12 + 4LL * v7);
}

uint64_t sub_100031764(uint64_t a1, unsigned __int8 *a2)
{
  if (sub_1000C8AB4(a2, "<s>") && sub_1000C8AB4(a2, "<e>"))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    if (v4 >= 1)
    {
      unsigned int v5 = 1;
      do
      {
        uint64_t v7 = v5 >> 8;
        BOOL v8 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v7) + 8LL * v5);
        if (v8)
        {
          if (!sub_1000C8AB4(v8, a2))
          {
            if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v7) + 8LL * v5))
            {
              char v9 = 0;
            }

            else
            {
              unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v7) + 4LL * v5);
              char v9 = 1;
            }

            goto LABEL_14;
          }

          int v4 = *(_DWORD *)(a1 + 32);
        }
      }

      while ((int)v5++ < v4);
    }

    char v9 = 0;
    unsigned int v5 = -1;
  }

  else
  {
    char v9 = 0;
    unsigned int v5 = 0;
  }

const char *sub_100031858(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return "<s>";
  }
  if ((a2 & 0x40000000) == 0) {
    return *(const char **)(*(void *)(*(void *)(a1 + 56) + 8LL * (a2 >> 8)) + 8LL * a2);
  }
  uint64_t v3 = sub_10002F660(*(void *)(a1 + 16), a2 & 0x3FFFFFFF);
  return (const char *)sub_100025C9C(v3);
}

uint64_t sub_1000318A8(uint64_t a1, unsigned int a2)
{
}

uint64_t sub_1000318C4(uint64_t a1, unsigned int a2)
{
}

uint64_t sub_1000318E0(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v5 = 8LL * (a3 >> 8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + v5);
  uint64_t v7 = a3;
  else {
    unsigned int v8 = a3;
  }
  size_t v9 = (int)(sub_1000C88E4((unint64_t)a2) + 1);
  uint64_t v10 = (void *)sub_1000C1074(v9);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  j__memmove(v10, a2, v9);
  int v12 = *(_DWORD *)(a1 + 32);
  if (v12 == *(_DWORD *)(a1 + 24) - 1)
  {
    if (sub_100036E04(a1, v12 + 2))
    {
      int v13 = *(_DWORD *)(a1 + 32);
      uint64_t v14 = (v13 + 1);
      *(_DWORD *)(a1 + 32) = v14;
      if (v13 == -2) {
        return v14;
      }
      goto LABEL_17;
    }

    return 0xFFFFFFFFLL;
  }

  if (v12 < 1)
  {
    uint64_t v14 = 1LL;
LABEL_17:
    uint64_t v16 = 8LL * (v14 >> 8);
    uint64_t v17 = 8LL * v14;
    *(void *)(*(void *)(*(void *)(a1 + 40) + v16) + v17) = *(void *)(v6 + 8 * v7);
    *(void *)(*(void *)(*(void *)(a1 + 56) + v16) + v17) = v11;
    uint64_t v18 = 4LL * v14;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + v16) + v18) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + v16) + v18) = v8;
    uint64_t v19 = *(void *)(a1 + 72);
    if (v19) {
      *(void *)(*(void *)(v19 + 8LL * (v14 >> 8)) + 8LL * v14) = 0LL;
    }
    ++*(_DWORD *)(a1 + 24);
    if ((v8 & 0x40000000) != 0)
    {
      sub_10002F564(*(void *)(a1 + 16), v8 & 0x3FFFFFFF);
    }

    else
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 88) + 8LL * (v8 >> 8));
      ++*(_DWORD *)(v20 + 4LL * v8);
    }

    return v14;
  }

  LODWORD(v15) = 0;
  uint64_t v14 = (v12 + 1);
  while (1)
  {
    uint64_t v15 = (v15 + 1);
    if (v12 == (_DWORD)v15) {
      goto LABEL_17;
    }
  }

  uint64_t v14 = v15;
  if ((_DWORD)v15 != -1) {
    goto LABEL_17;
  }
  return v14;
}

uint64_t sub_100031AA0(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return sub_10002F564(*(void *)(result + 16), a2 & 0x3FFFFFFF);
  }
  uint64_t v2 = *(void *)(*(void *)(result + 88) + 8LL * (a2 >> 8));
  ++*(_DWORD *)(v2 + 4LL * a2);
  return result;
}

uint64_t sub_100031AD4(uint64_t a1, _BYTE *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t result = sub_1000C8AB4(a2, "<s>");
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000C8AB4(a2, "<e>");
  if (!(_DWORD)result) {
    return result;
  }
  int v15 = *(_DWORD *)(a1 + 32);
  if (v15 < 1) {
    return sub_100031BE8(a1, a2, a3, a4, a5, &v19, a6, a7, 0LL, 0);
  }
  int v16 = 0;
  while (1)
  {
    uint64_t v17 = ++v16 >> 8;
    uint64_t v18 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v17) + 8LL * v16);
    if (v18) {
      break;
    }
LABEL_5:
    if (v16 >= v15) {
      return sub_100031BE8(a1, a2, a3, a4, a5, &v19, a6, a7, 0LL, 0);
    }
  }

  if (sub_1000C8AB4(v18, a2))
  {
    int v15 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }

  return sub_100031BE8(a1, a2, a3, a4, a5, &v19, a6, a7, 0LL, 0);
}

uint64_t sub_100031BE8( uint64_t a1, const void *a2, int a3, unsigned int a4, int a5, unsigned int *a6, int a7, int a8, uint64_t a9, int a10)
{
  size_t v18 = (int)(sub_1000C88E4((unint64_t)a2) + 1);
  unsigned int v19 = (void *)sub_1000C1074(v18);
  if (!v19) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = (uint64_t)v19;
  j__memmove(v19, a2, v18);
  int v21 = *(_DWORD *)(a1 + 32);
  if (v21 == *(_DWORD *)(a1 + 24) - 1)
  {
    int v22 = *(_DWORD *)(a1 + 32);
    unsigned int v23 = v22 + 1;
    *(_DWORD *)(a1 + 32) = v22 + 1;
    if (v22 == -2) {
      goto LABEL_16;
    }
  }

  else if (v21 < 1)
  {
    unsigned int v23 = 1;
  }

  else
  {
    unsigned int v25 = 0;
    unsigned int v23 = v21 + 1;
    while (1)
    {
      ++v25;
      if (v21 == v25) {
        goto LABEL_14;
      }
    }

    unsigned int v23 = v25;
    if (v25 == -1) {
      goto LABEL_16;
    }
  }

uint64_t sub_100031D90(uint64_t a1, _BYTE *a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  uint64_t result = sub_1000C8AB4(a2, "<s>");
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000C8AB4(a2, "<e>");
  if (!(_DWORD)result) {
    return result;
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if (v13 < 1) {
    return sub_100031BE8(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
  }
  int v14 = 0;
  while (1)
  {
    uint64_t v15 = ++v14 >> 8;
    int v16 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v15) + 8LL * v14);
    if (v16) {
      break;
    }
LABEL_5:
    if (v14 >= v13) {
      return sub_100031BE8(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
    }
  }

  if (sub_1000C8AB4(v16, a2))
  {
    int v13 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }

  return sub_100031BE8(a1, a2, a3, a3, a4, &v17, 0, 0, a5, a6);
}

uint64_t sub_100031EA0(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 40) + 8LL * (a2 >> 8)) + 8LL * a2) + 120LL) = 0;
  return result;
}

uint64_t *sub_100031EBC(uint64_t *result, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result[5] + 8LL * (a2 >> 8)) + 8LL * a2);
  if (*(void *)(v2 + 56) && !*(_DWORD *)(v2 + 120))
  {
    uint64_t result = (uint64_t *)sub_1000B3290(*result);
    int v3 = (int)result;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1228)) {
      uint64_t result = (uint64_t *)sub_1000C1744( (const void **)(v2 + 104),  (int *)(v2 + 112),  (signed int *)(v2 + 116),  8,  2,  (int)result + 1);
    }
    uint64_t v4 = 0LL;
    do
    {
      for (uint64_t i = 0LL; i != 512; i += 2LL)
        *(_WORD *)(*(void *)(*(void *)(v2 + 104) + 8 * v4) + i) = -1;
      ++v4;
    }

    while (v4 != (v3 + 256) >> 8);
    int v6 = *(_DWORD *)(v2 + 16);
    if (v6 >= 1)
    {
      unsigned int v7 = v6 + 1;
      do
      {
        unsigned int v8 = v7 - 2;
        *(_WORD *)(*(void *)(*(void *)(v2 + 104)
                             + (((unint64_t)*(unsigned __int16 *)(*(void *)(*(void *)(v2 + 128)
                                                                                   + 8LL * (v8 >> *(_DWORD *)(v2 + 32)))
                                                                       + 2LL * ((*(_DWORD *)(v2 + 36) - 1) & v8)) >> 5) & 0x7F8))
                 + 2LL
      }

      while (v7 > 1);
    }

    *(_DWORD *)(v2 + 120) = 1;
  }

  return result;
}

uint64_t sub_100031FD8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  if (v1 >= 1)
  {
    int v2 = 0;
    do
    {
      ++v2;
      uint64_t v3 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL * (v2 >> 8)) + 8LL * v2);
      if (v3)
      {
        *(_DWORD *)(v3 + 188) = 1;
        int v1 = *(_DWORD *)(result + 32);
      }
    }

    while (v2 < v1);
  }

  return result;
}

uint64_t sub_100032024(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 40) + 8LL * (a2 >> 8)) + 8LL * a2) + 188LL) = 1;
  return result;
}

uint64_t sub_100032044(uint64_t a1, unsigned __int8 *a2, __int16 *a3, unsigned int *a4)
{
  if (sub_1000C8AB4(a2, "<s>") && sub_1000C8AB4(a2, "<e>"))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 >= 1)
    {
      int v9 = 1;
      do
      {
        uint64_t v11 = v9 >> 8;
        int v12 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v11) + 8LL * v9);
        if (v12)
        {
          if (!sub_1000C8AB4(v12, a2))
          {
            if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v11) + 8LL * v9))
            {
              char v13 = 0;
            }

            else
            {
              int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v11) + 4LL * v9);
              char v13 = 1;
            }

            goto LABEL_12;
          }

          int v8 = *(_DWORD *)(a1 + 32);
        }
      }

      while (v9++ < v8);
    }

    char v13 = 0;
    int v9 = -1;
  }

  else
  {
    char v13 = 0;
    int v9 = 0;
  }

uint64_t sub_1000323C8(uint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, unsigned int a5, int a6)
{
  if (!sub_1000C8AB4(a2, "<s>") || !sub_1000C8AB4(a2, "<e>"))
  {
    char v24 = 0;
    unsigned int v20 = 0;
    goto LABEL_12;
  }

  int v19 = *(_DWORD *)(a1 + 32);
  if (v19 < 1)
  {
LABEL_11:
    char v24 = 0;
    unsigned int v20 = -1;
    goto LABEL_12;
  }

  unsigned int v20 = 1;
  while (1)
  {
    uint64_t v22 = v20 >> 8;
    uint64_t v23 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v22) + 8LL * v20);
    if (v23) {
      break;
    }
LABEL_5:
  }

  if (sub_1000C8AB4(v23, a2))
  {
    int v19 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v22) + 8LL * v20))
  {
    char v24 = 0;
  }

  else
  {
    unsigned int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v22) + 4LL * v20);
    char v24 = 1;
  }

uint64_t sub_10003293C(uint64_t a1, int a2, __int16 *a3, unsigned int a4, int a5)
{
  if (a2 > 1024) {
    return 0LL;
  }
  char v7 = a4;
  int v8 = a3;
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = 0;
  int v13 = v11 - 1;
  if (v11 >= 1)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    int v15 = *(_DWORD *)a1;
    int v16 = *(_DWORD *)(a1 + 4) - 1;
    do
    {
      int v19 = v13 + v12;
      if (v13 + v12 < 0 != __OFADD__(v13, v12)) {
        ++v19;
      }
      unsigned int v20 = v19 >> 1;
      unsigned int v21 = *(_DWORD *)(*(void *)(v14 + 8LL * (int)(v20 >> v15)) + 4LL * (int)(v16 & v20));
      unsigned int v22 = v20 + 1;
      int v23 = *(_DWORD *)(*(void *)(v14 + 8LL * (int)(v22 >> v15)) + 4LL * (int)(v16 & v22)) - v21;
      if (v23 >= a2) {
        uint64_t v24 = a2;
      }
      else {
        uint64_t v24 = v23;
      }
      if ((int)v24 < 1)
      {
LABEL_5:
        int v17 = a2 - v23;
        if (a2 == v23)
        {
          if (*(_DWORD *)(a1 + 176)) {
            int v17 = a5
          }
                - *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * (int)(v20 >> v15)) + 4LL * (int)(v16 & v20));
          else {
            int v17 = 0;
          }
        }
      }

      else
      {
        uint64_t v25 = (unsigned __int16 *)a3;
        while (1)
        {
          int v26 = *v25++;
          int v17 = v26
          if (v17) {
            break;
          }
          ++v21;
          if (!--v24) {
            goto LABEL_5;
          }
        }
      }

      unsigned int v18 = v20 - 1;
      if (v17 < 1) {
        int v13 = v18;
      }
      else {
        int v12 = v22;
      }
    }

    while (v12 <= v13);
  }

  if (v12 < v11)
  {
    uint64_t v27 = *(void *)(a1 + 24);
    signed int v28 = v12 >> *(_DWORD *)a1;
    uint64_t v29 = *(int *)(a1 + 4) - 1LL;
    uint64_t v30 = v29 & v12;
    unsigned int v31 = *(_DWORD *)(*(void *)(v27 + 8LL * v28) + 4 * v30);
    int v32 = *(_DWORD *)(*(void *)(v27 + 8LL * (int)((v12 + 1) >> *(_DWORD *)a1))
    if (v32 >= a2) {
      uint64_t v33 = a2;
    }
    else {
      uint64_t v33 = v32;
    }
    if ((int)v33 < 1)
    {
LABEL_31:
      if (v32 == a2
        && (!*(_DWORD *)(a1 + 176) || *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8LL * v28) + 4 * v30) == a5))
      {
        if (*(_DWORD *)(a1 + 152))
        {
          uint64_t v36 = *(void *)(*(void *)(a1 + 136) + 8LL * v28);
        }

        return 1LL;
      }
    }

    else
    {
      uint64_t v34 = (unsigned __int16 *)a3;
      while (1)
      {
        int v35 = *v34++;
        if (v35 != *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8LL * (int)(v31 >> *(_DWORD *)(a1 + 32))) {
        ++v31;
        }
        if (!--v33) {
          goto LABEL_31;
        }
      }
    }
  }

  if (v11 == 0x2000000) {
    return 0LL;
  }
  uint64_t result = sub_100036EF4(a1, v11 + 1);
  if (!(_DWORD)result) {
    return result;
  }
  int v37 = *(_DWORD *)(a1 + 48) + a2;
  if (v37 == 0x7FFFFFFF) {
    return 0LL;
  }
  uint64_t result = sub_1000C1744( (const void **)(a1 + 128),  (int *)(a1 + 40),  (signed int *)(a1 + 44),  *(_DWORD *)(a1 + 32),  2,  *(_DWORD *)(a1 + 48) + a2);
  if ((_DWORD)result)
  {
    sub_1000C1CCC( *(void **)(a1 + 24),  *(unsigned int *)(a1 + 12),  *(_DWORD *)(a1 + 4),  4,  v12,  *(_DWORD *)(a1 + 16) - v12 + 1,  v12 + 1);
    sub_1000C1CCC( *(void **)(a1 + 128),  *(unsigned int *)(a1 + 44),  *(_DWORD *)(a1 + 36),  2,  v38,  *(_DWORD *)(a1 + 48) - v38,  v38 + a2);
    if (a2 >= 1)
    {
      uint64_t v39 = a2;
      do
      {
        __int16 v40 = *v8++;
        ++v38;
        --v39;
      }

      while (v39);
    }

    if (*(_DWORD *)(a1 + 152))
    {
      sub_1000C1CCC( *(void **)(a1 + 136),  *(unsigned int *)(a1 + 148),  *(_DWORD *)(a1 + 4),  1,  v12,  *(_DWORD *)(a1 + 16) - v12,  v12 + 1);
    }

    sub_1000C1CCC( *(void **)(a1 + 160),  *(unsigned int *)(a1 + 172),  *(_DWORD *)(a1 + 4),  4,  v12,  *(_DWORD *)(a1 + 16) - v12,  v12 + 1);
    for (int i = *(_DWORD *)(a1 + 16); v12 <= i; int i = *(_DWORD *)(a1 + 16))
    {
      uint64_t v42 = *(void *)(*(void *)(a1 + 24) + 8LL * (int)(++v12 >> *(_DWORD *)a1));
      uint64_t v43 = 4LL * ((*(_DWORD *)(a1 + 4) - 1) & v12);
      *(_DWORD *)(v42 + v43) += (unsigned __int16)a2;
    }

    *(_DWORD *)(a1 + 16) = i + 1;
    *(_DWORD *)(a1 + 48) = v37;
    uint64_t result = 1LL;
    *(_DWORD *)(a1 + 184) = 1;
  }

  return result;
}

uint64_t sub_100032D44(uint64_t a1, unsigned __int8 *a2)
{
  if (!sub_1000C8AB4(a2, "<s>") || !sub_1000C8AB4(a2, "<e>"))
  {
    unsigned int v5 = 0;
    return sub_100032E20(a1, v5);
  }

  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 < 1) {
    return 0LL;
  }
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v7 = v5 >> 8;
    int v8 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v7) + 8LL * v5);
    if (v8) {
      break;
    }
LABEL_5:
  }

  if (sub_1000C8AB4(v8, a2))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    goto LABEL_5;
  }

  return 0LL;
}

uint64_t sub_100032E20(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a2 >> 8;
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * v4) + 8LL * a2);
  uint64_t v7 = *(void *)(v6 + 56);
  if (!v7
    || (uint64_t result = sub_10005DFB0( v7,  *(unsigned __int8 **)(*(void *)(*(void *)(a1 + 56) + 8 * v4) + 8LL * a2)),  (_DWORD)result)
    && (!*(_DWORD *)(v6 + 200) || (uint64_t result = sub_100032E20(a1), (_DWORD)result)))
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v4) + 4 * v5);
      if (!v10) {
        unsigned int v10 = a2;
      }
      uint64_t v11 = *(void *)(v9 + 8LL * (v10 >> 8));
      uint64_t v12 = v10;
      int v13 = *(_DWORD **)(v11 + 8LL * v10);
      if (v13)
      {
        sub_1000600D0(v13);
        *(void *)(v11 + 8 * v12) = 0LL;
        --*(_DWORD *)(a1 + 128);
      }
    }

    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 180) = 0;
    if (*(_DWORD *)(a1 + 132) == a2)
    {
      uint64_t v14 = *(void *)(a1 + 136);
      *(_DWORD *)(a1 + 132) = 0;
      sub_1000C1B20(*(void *)(v14 + 24), *(unsigned int *)(v14 + 12), *(_DWORD *)(v14 + 12));
      *(_DWORD *)(v14 + 12) = 0;
      sub_1000C1B20(*(void *)(v14 + 128), *(unsigned int *)(v14 + 44), *(_DWORD *)(v14 + 44));
      *(_DWORD *)(v14 + 44) = 0;
      sub_1000C1B20(*(void *)(v14 + 136), *(unsigned int *)(v14 + 148), *(_DWORD *)(v14 + 148));
      *(_DWORD *)(v14 + 148) = 0;
      sub_1000C1B20(*(void *)(v14 + 160), *(unsigned int *)(v14 + 172), *(_DWORD *)(v14 + 172));
      *(_DWORD *)(v14 + 172) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 48) = 0;
    }

    uint64_t v15 = *(void *)(a1 + 120);
    if (v15)
    {
      if (*(int *)(v15 + 8) >= 1)
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = 0LL;
        do
        {
          *(_WORD *)(*(void *)v15 + v16) = 0;
          ++v17;
          v16 += 4LL;
        }

        while (v17 < *(int *)(v15 + 8));
      }

      uint64_t result = 1LL;
      *(_DWORD *)(v15 + 40) = 1;
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100032FA8(unsigned int a1)
{
  return (a1 >> 30) & 1;
}

uint64_t sub_100032FB0(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return 0LL;
  }
  else {
}
  }

uint64_t *sub_100032FD8(uint64_t *result, unsigned int a2)
{
  uint64_t v3 = (uint64_t)result;
  if ((a2 & 0x40000000) != 0) {
    return (uint64_t *)sub_10002F588(result[2], a2 & 0x3FFFFFFF);
  }
  uint64_t v4 = a2 >> 8;
  uint64_t v5 = *(void *)(result[11] + 8LL * v4);
  uint64_t v6 = a2;
  int v7 = *(_DWORD *)(v5 + 4 * v6) - 1;
  *(_DWORD *)(v5 + 4 * v6) = v7;
  if (!v7)
  {
    uint64_t v8 = *(void *)(*(void *)(result[5] + 8 * v4) + 8 * v6);
    if (*(void *)(v8 + 56) && *(_DWORD *)(v8 + 200)) {
      sub_100032FD8(result);
    }
    if (*(_DWORD *)(*(void *)(*(void *)(v3 + 104) + 8 * v4) + 4 * v6)) {
      sub_100032FD8(v3);
    }
    return (uint64_t *)sub_100033094(v3, a2);
  }

  return result;
}

uint64_t sub_100033094(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2 >> 8;
  uint64_t v4 = *(void *)(*(void *)(result + 40) + 8 * v3);
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(v4 + 8LL * a2);
  uint64_t v7 = *(void *)(*(void *)(result + 56) + 8 * v3);
  uint64_t v8 = *(void *)(*(void *)(result + 104) + 8 * v3);
  if (*(_DWORD *)(v8 + 4LL * a2))
  {
    if (!v6) {
      --*(_DWORD *)(result + 28);
    }
    *(_DWORD *)(v8 + 4LL * a2) = 0;
    uint64_t result = sub_1000C0EF8(*(void *)(v7 + 8LL * a2));
    *(void *)(v7 + 8 * v5) = 0LL;
    *(void *)(v4 + 8 * v5) = 0LL;
    --*(_DWORD *)(v2 + 24);
  }

  else
  {
    if (v6)
    {
      if (!*(_DWORD *)(v6 + 208)) {
        return result;
      }
      uint64_t v10 = *(void *)(v6 + 56);
      if (v10)
      {
        sub_10005E1C4(v10, *(unsigned __int8 **)(v7 + 8LL * a2));
        *(void *)(v6 + 56) = 0LL;
        *(_DWORD *)(v6 + 64) = -1;
      }
    }

    sub_1000C0EF8(*(void *)(v7 + 8 * v5));
    *(void *)(v7 + 8 * v5) = 0LL;
    sub_10003069C(v6);
    uint64_t result = sub_1000C0EF8(v6);
    *(void *)(v4 + 8 * v5) = 0LL;
    --*(_DWORD *)(v2 + 24);
    uint64_t v11 = *(void *)(v2 + 120);
    if (v11 && *(_WORD *)(*(void *)v11 + 4LL * (int)a2))
    {
      if (*(int *)(v11 + 8) >= 1)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        do
        {
          *(_WORD *)(*(void *)v11 + v12) = 0;
          ++v13;
          v12 += 4LL;
        }

        while (v13 < *(int *)(v11 + 8));
      }

      *(_DWORD *)(v11 + 40) = 1;
    }

    uint64_t v14 = *(void *)(v2 + 72);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8 * v3);
      uint64_t result = *(void *)(v15 + 8 * v5);
      if (result)
      {
        uint64_t result = sub_1000600D0((_DWORD *)result);
        *(void *)(v15 + 8 * v5) = 0LL;
      }
    }

    if (*(_DWORD *)(v2 + 132) == a2)
    {
      uint64_t v16 = *(void *)(v2 + 136);
      *(_DWORD *)(v2 + 132) = 0;
      sub_1000C1B20(*(void *)(v16 + 24), *(unsigned int *)(v16 + 12), *(_DWORD *)(v16 + 12));
      *(_DWORD *)(v16 + 12) = 0;
      sub_1000C1B20(*(void *)(v16 + 128), *(unsigned int *)(v16 + 44), *(_DWORD *)(v16 + 44));
      *(_DWORD *)(v16 + 44) = 0;
      sub_1000C1B20(*(void *)(v16 + 136), *(unsigned int *)(v16 + 148), *(_DWORD *)(v16 + 148));
      *(_DWORD *)(v16 + 148) = 0;
      uint64_t result = sub_1000C1B20(*(void *)(v16 + 160), *(unsigned int *)(v16 + 172), *(_DWORD *)(v16 + 172));
      *(_DWORD *)(v16 + 172) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 48) = 0;
    }
  }

  return result;
}

uint64_t sub_100033278(uint64_t a1, int a2)
{
  if ((a2 & 0x40000000) != 0) {
    return sub_10002F660(*(void *)(a1 + 16), a2 & 0x3FFFFFFF);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100033290(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 >= 1)
  {
    signed int v3 = 0;
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v5 = ++v3 >> 8;
      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL * v5) + 8LL * v3)
        || *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8 * v5) + 4LL * v3))
      {
        goto LABEL_7;
      }

      unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v5) + 4LL * v3);
      if ((v6 & 0x40000000) == 0)
      {
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v5) + 8LL * v3);
        if (*(void *)(v7 + 56))
        {
          unsigned int v8 = *(_DWORD *)(v7 + 200);
          if (v8)
          {
            LODWORD(v4) = v4 + 1;
            sub_100032FD8((uint64_t *)a1, v8);
            unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v5) + 4LL * v3);
          }
        }

        if (!v6) {
          goto LABEL_6;
        }
      }

      sub_100032FD8((uint64_t *)a1, v6);
LABEL_6:
      uint64_t v4 = (v4 + 1);
      sub_100033094(a1, v3);
      int v1 = *(_DWORD *)(a1 + 32);
LABEL_7:
      if (v3 >= v1) {
        return v4;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100033398(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1000333A0( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  if (*(_DWORD *)(a1 + 132) != (_DWORD)a2
    || (uint64_t result = sub_10003114C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8), (_DWORD)result))
  {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v9 >> 8)) + 8LL * v9);
    if (v12) {
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
    }
    *a3 = v12;
    return 1LL;
  }

  return result;
}

uint64_t sub_100033408( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_10003114C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    if (*(int *)(a1 + 32) < 1)
    {
      int v19 = 0;
LABEL_12:
      *a2 = v19;
      return 1LL;
    }

    else
    {
      int v18 = 0;
      int v19 = 0;
      while (1)
      {
        if (v18 + 1 == *(_DWORD *)(a1 + 132))
        {
          uint64_t result = sub_10003114C(a1, v11, v12, v13, v14, v15, v16, v17);
          if (!(_DWORD)result) {
            break;
          }
        }

        if (v20) {
          LODWORD(v20) = *(_DWORD *)(v20 + 16);
        }
        if (++v18 >= *(_DWORD *)(a1 + 32)) {
          goto LABEL_12;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000334B8(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (a2 >> 8)) + 8LL * a2);
  if (v3)
  {
    uint64_t result = 1LL;
    *a3 = *(_DWORD *)(v3 + 52);
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 0;
  }

  return result;
}

uint64_t sub_1000334EC( uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a3;
  unsigned int v10 = a2;
  *a4 = 0;
  if (*(_DWORD *)(a1 + 132) != (_DWORD)a2
    || (uint64_t result = sub_10003114C(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8), (_DWORD)result))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v10 >> 8)) + 8LL * v10);
    *a4 = *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8LL * (int)((v9 + 1) >> *(_DWORD *)v13))
                    + 4LL * (int)((*(_DWORD *)(v13 + 4) - 1) & (v9 + 1)))
    return 1LL;
  }

  return result;
}

uint64_t sub_100033588( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  unsigned int v10 = a3;
  unsigned int v11 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v11 >> 8)) + 8LL * v11);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void *)(v14 + 8LL * (int)(v10 >> *(_DWORD *)v13));
  uint64_t v16 = *(int *)(v13 + 4) - 1LL;
  int v17 = *(_DWORD *)(*(void *)(v14 + 8LL * (int)((v10 + 1) >> *(_DWORD *)v13)) + 4LL * (int)(v16 & (v10 + 1)));
  uint64_t v18 = v16 & (int)v10;
  int v19 = v17 - *(_DWORD *)(v15 + 4 * v18);
  *a5 = v19;
  if (v19 <= v9) {
    return 0xFFFFLL;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
  }
                                           + 8LL
}

uint64_t sub_10003366C(uint64_t result, unsigned int a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL * (a2 >> 8)) + 8LL * a2);
  if (v4)
  {
    *a3 = *(void *)(v4 + 56);
    *a4 = *(_DWORD *)(v4 + 64);
  }

  else
  {
    *a3 = 0LL;
    *a4 = -1;
  }

  return result;
}

uint64_t sub_1000336A8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8LL * (a2 >> 8)) + 4LL * a2);
  if (!v3) {
    unsigned int v3 = a2;
  }
  return *(void *)(*(void *)(v2 + 8LL * (v3 >> 8)) + 8LL * v3);
}

uint64_t sub_1000336E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(int *)(a1 + 32) >= 1)
  {
    int v10 = 1;
    do
    {
      uint64_t v12 = v10 >> 8;
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8LL * v12) + 4LL * v10))
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v12) + 8LL * v10);
        if (v13)
        {
          int v14 = *(_DWORD *)(v13 + 16);
          if (v14 >= 1)
          {
            int v15 = 0;
            do
            {
              while (1)
              {
                uint64_t v16 = *(void **)(v13 + 24);
                int v17 = *(_DWORD *)(v13 + 4);
                unsigned int v18 = *(_DWORD *)(v16[v15 >> *(_DWORD *)v13] + 4LL * ((v17 - 1) & v15));
                int v19 = v15 + 1;
                int v20 = *(_DWORD *)(v16[v19 >> *(_DWORD *)v13] + 4LL * ((v17 - 1) & v19));
                unsigned int v21 = v20 - v18;
LABEL_11:
                ++v15;
                if (v19 >= v14) {
                  goto LABEL_20;
                }
              }

              while (*(unsigned __int16 *)(*(void *)(*(void *)(v13 + 128)
                                                      + 8LL * (int)(v18 >> *(_DWORD *)(v13 + 32)))
                                          + 2LL * (int)(v18 & (*(_DWORD *)(v13 + 36) - 1))) != v8)
              {
                if (v20 == ++v18) {
                  goto LABEL_11;
                }
              }

              sub_1000C1CCC(v16, *(unsigned int *)(v13 + 12), v17, 4, v19, v14 - v15, v15);
              int v22 = *(_DWORD *)(v13 + 16);
              if (v15 < v22)
              {
                int v23 = v15;
                do
                {
                  *(_DWORD *)(*(void *)(*(void *)(v13 + 24) + 8LL * (int)(v23 >> *(_DWORD *)v13))
                            + 4LL * ((*(_DWORD *)(v13 + 4) - 1) & v23)) = *(_DWORD *)(*(void *)(*(void *)(v13 + 24)
                                                                                                + 8LL
                                                                                                * (int)((v23 + 1) >> *(_DWORD *)v13))
                                                                                    + 4LL
                                                                                    * ((*(_DWORD *)(v13 + 4) - 1) & (v23 + 1)))
                                                                        - v21;
                  int v22 = *(_DWORD *)(v13 + 16);
                  ++v23;
                }

                while (v23 < v22);
              }

              *(_DWORD *)(v13 + 16) = v22 - 1;
              sub_1000C1CCC( *(void **)(v13 + 128),  *(unsigned int *)(v13 + 44),  *(_DWORD *)(v13 + 36),  2,  v21 + v20,  *(_DWORD *)(v13 + 48) - v20,  v20);
              *(_DWORD *)(v13 + 48) -= v21;
              int v14 = *(_DWORD *)(v13 + 16);
            }

            while (v15 < v14);
          }

uint64_t sub_1000339A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 132))
  {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(a1 + 132)) {
      sub_10003114C(a1, v10, v11, a4, a5, a6, a7, a8);
    }
  }

  int v12 = *(_DWORD *)(a1 + 32);
  if (v12 < 1) {
    goto LABEL_17;
  }
  LODWORD(v13) = 0;
  do
  {
    uint64_t v13 = (v13 + 1);
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v13 >> 8)) + 8LL * v13);
    if (v14 && *(_DWORD *)(v14 + 180))
    {
      sub_100035154(a1, v13, a2, a4, a5, a6, a7, a8);
      int v12 = *(_DWORD *)(a1 + 32);
    }
  }

  while ((int)v13 < v12);
  if (v12 < 1)
  {
LABEL_17:
    uint64_t v19 = *(void *)(a1 + 120);
    if (!v19) {
      return 1LL;
    }
    if (*(_DWORD *)(v19 + 8) <= v12)
    {
      uint64_t result = sub_1000C1074(4LL * (v12 + 1));
      if (!result) {
        return result;
      }
      uint64_t v20 = result;
      j__memmove((void *)result, *(const void **)v19, 4LL * *(int *)(v19 + 8));
      uint64_t v21 = *(int *)(v19 + 8);
      if (v12 >= (int)v21)
      {
        uint64_t v22 = *(int *)(v19 + 8);
        if (v12 == (_DWORD)v21) {
          goto LABEL_25;
        }
        uint64_t v23 = (v12 - v21) + 1LL;
        uint64_t v22 = (v23 & 0x1FFFFFFFELL) + v21;
        int v24 = (_WORD *)(v20 + 4 * v21 + 4);
        uint64_t v25 = v23 & 0x1FFFFFFFELL;
        do
        {
          *(v24 - 2) = 0;
          *int v24 = 0;
          v24 += 4;
          v25 -= 2LL;
        }

        while (v25);
        if (v23 != (v23 & 0x1FFFFFFFELL))
        {
LABEL_25:
          int v26 = v12 - v22 + 1;
          unsigned __int16 v27 = (_WORD *)(v20 + 4 * v22);
          do
          {
            *unsigned __int16 v27 = 0;
            v27 += 2;
            --v26;
          }

          while (v26);
        }
      }

      sub_1000C0EF8(*(void *)v19);
      *(void *)uint64_t v19 = v20;
      *(_DWORD *)(v19 + 8) = v12 + 1;
      uint64_t v19 = *(void *)(a1 + 120);
    }

    BOOL v28 = !v19 || qword_1000FDCC0 == 0;
    if (v28 || !*(_DWORD *)(qword_1000FDCC0 + 4608)) {
      return 1LL;
    }
    if (*(int *)(v19 + 8) >= 1)
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      do
      {
        *(_WORD *)(*(void *)v19 + v29) = 0;
        ++v30;
        v29 += 4LL;
      }

      while (v30 < *(int *)(v19 + 8));
    }

    uint64_t result = 1LL;
    *(_DWORD *)(v19 + 40) = 1;
  }

  else
  {
    int v15 = 0;
    while (1)
    {
      ++v15;
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v15 >> 8)) + 8LL * v15);
      if (v16)
      {
        *(_WORD *)(v16 + 96) = -1;
        uint64_t v17 = *(void *)(v16 + 56);
        if (v17)
        {
          uint64_t result = sub_10005E2A0(v17, *(_DWORD *)(v16 + 64));
          if (!(_DWORD)result) {
            break;
          }
        }
      }

      int v12 = *(_DWORD *)(a1 + 32);
      if (v15 >= v12) {
        goto LABEL_17;
      }
    }
  }

  return result;
}

uint64_t sub_100033BD8(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int *a4, int *a5, BOOL *a6)
{
  unsigned int v36 = 0;
  uint64_t result = sub_1000BB868(*a1, a3, &v36);
  int v12 = *(int **)(*(void *)(a1[5] + 8LL * (a2 >> 8)) + 8LL * a2);
  int v13 = v12[4];
  if (v13 <= 0)
  {
    unsigned int v14 = 0;
    uint64_t v16 = *((void *)v12 + 3);
    int v17 = *v12;
    int v18 = v12[1] - 1;
  }

  else
  {
    unsigned int v14 = 0;
    int v15 = v13 - 1;
    uint64_t v16 = *((void *)v12 + 3);
    int v17 = *v12;
    int v18 = v12[1] - 1;
    do
    {
      int v19 = v14 + v15;
      unsigned int v20 = v19 >> 1;
      unsigned int v21 = *(_DWORD *)(*(void *)(v16 + 8LL * (int)(v20 >> v17)) + 4LL * (int)(v20 & v18));
      if (*(unsigned __int16 *)(*(void *)(*((void *)v12 + 16) + 8LL * (int)(v21 >> v12[8])) {
      else
      }
        unsigned int v14 = v20 + 1;
    }

    while ((int)v14 <= v15);
  }

  int v22 = *(_DWORD *)(*(void *)(v16 + 8LL * (int)(v14 >> v17)) + 4LL * (int)(v14 & v18));
  *a4 = v14;
  uint64_t v23 = *((void *)v12 + 3);
  int v24 = *v12;
  int v25 = v12[1] - 1;
  unsigned int v26 = *(_DWORD *)(*(void *)(v23 + 8LL * (int)((v14 + 1) >> *v12)) + 4LL * (int)(v25 & (v14 + 1)));
  BOOL v27 = v26 - v22 == 1;
  signed int v28 = v12[4];
  if ((int)(v14 + 1) >= v28)
  {
    int v33 = 1;
  }

  else
  {
    int v29 = 0;
    uint64_t v30 = *((void *)v12 + 16);
    int v31 = v12[8];
    int v32 = v12[9] - 1;
    int v33 = v28 - v14;
    unsigned int v34 = v14 + 2;
    while (*(unsigned __int16 *)(*(void *)(v30 + 8LL * (int)(v26 >> v31)) + 2LL * (int)(v26 & v32)) == (_DWORD)result)
    {
      unsigned int v35 = *(_DWORD *)(*(void *)(v23 + 8LL * (int)((v34 + v29) >> v24)) + 4LL * (int)((v34 + v29) & v25));
      if (v35 - v26 == 1) {
        BOOL v27 = 1;
      }
      ++v29;
      unsigned int v26 = v35;
      if (v33 - 1 == v29) {
        goto LABEL_20;
      }
    }

    int v33 = v29 + 1;
  }

BOOL sub_100033D94(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    return 1LL;
  }
  if (!qword_1000FDCC0) {
    return 1LL;
  }
  uint64_t v2 = *(void *)(qword_1000FDCC0 + 4032);
  if (v2 < 1) {
    return 1LL;
  }
  uint64_t v4 = *(int *)(a1 + 32);
  uint64_t v5 = sub_1000C1074(48LL);
  if (v5)
  {
    uint64_t v6 = v5;
    *(_DWORD *)(v5 + 8) = v4 + 1;
    uint64_t v7 = sub_1000C1074(4 * (v4 + 1));
    *(void *)uint64_t v6 = v7;
    if (v7)
    {
      uint64_t v8 = sub_1000C1074(2LL * (int)v2);
      *(void *)(v6 + 16) = v8;
      if (v8)
      {
        *(_DWORD *)(v6 + 24) = v2;
        uint64_t v9 = sub_1000C1074(2LL * (int)v2);
        *(void *)(v6 + 32) = v9;
        if (v9)
        {
          *(_DWORD *)(v6 + 40) = 1;
          *(void *)(a1 + 120) = v6;
          return *(void *)(a1 + 120) != 0LL;
        }

        sub_1000C0EF8(*(void *)(v6 + 16));
      }

      sub_1000C0EF8(*(void *)v6);
    }

    sub_1000C0EF8(v6);
  }

  return *(void *)(a1 + 120) != 0LL;
}

uint64_t sub_100033E78(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 120) + 16LL);
}

uint64_t sub_100033E84(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 120) + 32LL);
}

uint64_t sub_100033E90(uint64_t a1, int a2)
{
  return **(void **)(a1 + 120) + 4LL * a2;
}

uint64_t sub_100033EA0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  uint64_t v52 = a3 >> 8;
  int v54 = a3;
  uint64_t v51 = a3;
  while (1)
  {
    uint64_t v10 = *(void *)(v9 + 120);
    int v11 = *(_DWORD *)(v9 + 132);
    if (v11)
    {
      uint64_t result = sub_10003114C(v9, a2, a3, a4, a5, a6, a7, a8);
      int v11 = *(_DWORD *)(v9 + 132);
    }

    uint64_t v12 = *(int *)(v10 + 40);
    uint64_t v55 = *(void *)(v10 + 16) + 2 * v12;
    uint64_t v13 = *(void *)(v10 + 32);
    int v14 = *(_DWORD *)(v10 + 24);
    uint64_t v53 = v10;
    if (v11 == v54 && (uint64_t result = sub_10003114C(v9, a2, a3, a4, a5, a6, a7, a8), !(_DWORD)result)
      || (uint64_t v15 = *(void *)(*(void *)(*(void *)(v9 + 40) + 8 * v52) + 8 * v51)) == 0)
    {
      unsigned int v20 = (int16x8_t *)v55;
      goto LABEL_46;
    }

    int v16 = *(_DWORD *)(v15 + 16);
    if (v16 >= 1) {
      break;
    }
    unsigned int v22 = 0;
    unsigned int v20 = (int16x8_t *)v55;
LABEL_38:
    if (v22 == v16) {
      goto LABEL_46;
    }
LABEL_41:
    uint64_t v46 = *(void *)(v9 + 120);
    if (*(int *)(v46 + 8) >= 1)
    {
      uint64_t v47 = 0LL;
      uint64_t v48 = 0LL;
      do
      {
        *(_WORD *)(*(void *)v46 + v47) = 0;
        ++v48;
        v47 += 4LL;
      }

      while (v48 < *(int *)(v46 + 8));
    }

    *(_DWORD *)(v46 + 40) = 1;
  }

  unsigned int v17 = 0;
  int v18 = (int16x8_t *)(v13 + 2 * v12);
  int v19 = v14 - v12;
  unsigned int v20 = (int16x8_t *)v55;
  while (1)
  {
    uint64_t v24 = *(void *)(v15 + 24);
    int v25 = *(_DWORD *)(v15 + 4) - 1;
    unsigned int v22 = v17 + 1;
    int v26 = *(_DWORD *)(*(void *)(v24 + 8LL * (int)(v22 >> *(_DWORD *)v15)) + 4LL * (int)(v25 & v22));
    unsigned int v27 = *(_DWORD *)(*(void *)(v24 + 8LL * (int)(v17 >> *(_DWORD *)v15)) + 4LL * (int)(v25 & v17));
    int v28 = v26 - v27;
    uint64_t result = sub_10001FBCC( a2,  *(unsigned __int16 *)(*(void *)(*(void *)(v15 + 128) + 8LL * (int)(v27 >> *(_DWORD *)(v15 + 32)))
                                   + 2LL * (int)((*(_DWORD *)(v15 + 36) - 1) & v27)),
               v20,
               v19);
    BOOL v29 = __OFSUB__(v19, (_DWORD)result);
    v19 -= result;
    if (v19 < 0 != v29) {
      goto LABEL_40;
    }
LABEL_18:
    unsigned int v30 = v17 | 0x8000;
    if (v28 != 1) {
      unsigned int v30 = v17;
    }
    if (result >= 0x10)
    {
      uint64_t v31 = result & 0x7FFFFFF0;
      int16x8_t v32 = vdupq_n_s16(v30);
      int v33 = v18 + 1;
      uint64_t v34 = result & 0xFFFFFFF0;
      do
      {
        v33[-1] = v32;
        *int v33 = v32;
        v33 += 2;
        v34 -= 16LL;
      }

      while (v34);
    }

    else
    {
      uint64_t v31 = 0LL;
    }

    unsigned int v35 = &v18->i16[v31];
    uint64_t v36 = result - v31;
    do
    {
      *v35++ = v30;
      --v36;
    }

    while (v36);
LABEL_28:
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1172))
    {
      uint64_t v37 = *(void *)(v15 + 24);
      int v38 = *(_DWORD *)(v15 + 4) - 1;
      unsigned int v39 = *(_DWORD *)(*(void *)(v37 + 8LL * (int)(v17 >> *(_DWORD *)v15)) + 4LL * (int)(v38 & v17));
      if ((int)(*(_DWORD *)(*(void *)(v37 + 8LL * (int)(v22 >> *(_DWORD *)v15)) + 4LL * (int)(v38 & v22)) - v39) >= 2)
      {
        signed int v40 = *(_DWORD *)(v15 + 16);
        if ((int)v22 < v40)
        {
          uint64_t v41 = *(void *)(v15 + 128);
          int v42 = *(_DWORD *)(v15 + 32);
          int v43 = *(_DWORD *)(v15 + 36) - 1;
          int v44 = *(unsigned __int16 *)(*(void *)(v41 + 8LL * (int)(v39 >> v42)) + 2LL * (int)(v43 & v39));
          while (1)
          {
            unsigned int v45 = *(_DWORD *)(*(void *)(v37 + 8LL * (int)(v22 >> *(_DWORD *)v15)) + 4LL * (int)(v22 & v38));
            if (v40 == ++v22)
            {
              unsigned int v22 = *(_DWORD *)(v15 + 16);
              break;
            }
          }
        }

        unsigned int v21 = v22 + ~v17;
      }

      else
      {
        unsigned int v21 = 0;
      }

      unsigned int v22 = v21 + v17 + 1;
    }

    uint64_t v23 = 2LL * (int)result;
    unsigned int v20 = (int16x8_t *)((char *)v20 + v23);
    int v18 = (int16x8_t *)((char *)v18 + v23);
    unsigned int v17 = v22;
  }

  uint64_t result = sub_10001FBCC(a2, 0xFFFFu, v20, v19);
  BOOL v29 = __OFSUB__(v19, (_DWORD)result);
  v19 -= result;
  if (v19 < 0 == v29) {
    goto LABEL_18;
  }
LABEL_40:
  if (v17 != v16) {
    goto LABEL_41;
  }
LABEL_46:
  __int128 v49 = (_WORD *)(*(void *)v53 + 4LL * v54);
  *__int128 v49 = *(_DWORD *)(v53 + 40);
  unint64_t v50 = ((unint64_t)v20 - v55) >> 1;
  v49[1] = v50;
  *(_DWORD *)(v53 + 40) = (unsigned __int16)(*(_DWORD *)(v53 + 40) + v50);
  return result;
}

uint64_t sub_1000341FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  int v10 = *(_DWORD *)(a1 + 132);
  if (v10)
  {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8);
    int v10 = *(_DWORD *)(a1 + 132);
  }

  uint64_t v11 = *(void *)(a1 + 120);
  if (v10 != v8 || (uint64_t result = sub_10003114C(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)result))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v8 >> 8)) + 8LL * v8);
    if (v13 && (int v14 = *(_DWORD *)(v13 + 16), v14 >= 1))
    {
      int v15 = 0;
      unsigned int v16 = 0;
      unsigned int v17 = *(uint64_t **)a1;
      while (1)
      {
        uint64_t v20 = *(void *)(v13 + 24);
        int v21 = *(_DWORD *)(v13 + 4) - 1;
        unsigned int v19 = v16 + 1;
        int v22 = *(_DWORD *)(*(void *)(v20 + 8LL * (int)(v19 >> *(_DWORD *)v13)) + 4LL * (int)(v21 & v19));
        unsigned int v23 = *(_DWORD *)(*(void *)(v20 + 8LL * (int)(v16 >> *(_DWORD *)v13)) + 4LL * (int)(v21 & v16));
        unsigned int v24 = v22 <= (int)v23
            ? 0xFFFF
        unsigned int v25 = sub_1000BB884((uint64_t)v17, v24);
        v15 += sub_1000B3C5C(v17, v25);
        if (v15 >= *(_DWORD *)(v11 + 24)) {
          return 0LL;
        }
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1172))
        {
          uint64_t v26 = *(void *)(v13 + 24);
          int v27 = *(_DWORD *)(v13 + 4) - 1;
          unsigned int v28 = *(_DWORD *)(*(void *)(v26 + 8LL * (int)(v16 >> *(_DWORD *)v13)) + 4LL * (int)(v27 & v16));
          if ((int)(*(_DWORD *)(*(void *)(v26 + 8LL * (int)(v19 >> *(_DWORD *)v13)) + 4LL * (int)(v27 & v19)) - v28) >= 2)
          {
            signed int v29 = *(_DWORD *)(v13 + 16);
            if ((int)v19 < v29)
            {
              uint64_t v30 = *(void *)(v13 + 128);
              int v31 = *(_DWORD *)(v13 + 32);
              int v32 = *(_DWORD *)(v13 + 36) - 1;
              int v33 = *(unsigned __int16 *)(*(void *)(v30 + 8LL * (int)(v28 >> v31)) + 2LL * (int)(v32 & v28));
              while (1)
              {
                unsigned int v34 = *(_DWORD *)(*(void *)(v26 + 8LL * (int)(v19 >> *(_DWORD *)v13)) + 4LL * (int)(v19 & v27));
                if (v29 == ++v19)
                {
                  unsigned int v19 = *(_DWORD *)(v13 + 16);
                  break;
                }
              }
            }

            unsigned int v18 = v19 + ~v16;
          }

          else
          {
            unsigned int v18 = 0;
          }

          unsigned int v19 = v18 + v16 + 1;
        }

        unsigned int v16 = v19;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

char *sub_10003440C()
{
  if (++aAaaaaaaa[8] >= 123)
  {
    aAaaaaaaa[8] = 97;
    if (++aAaaaaaaa[7] >= 123)
    {
      aAaaaaaaa[7] = 97;
      if (++aAaaaaaaa[6] >= 123)
      {
        aAaaaaaaa[6] = 97;
        if (++aAaaaaaaa[5] >= 123)
        {
          aAaaaaaaa[5] = 97;
          if (++aAaaaaaaa[4] >= 123)
          {
            aAaaaaaaa[4] = 97;
            if (++aAaaaaaaa[3] >= 123)
            {
              aAaaaaaaa[3] = 97;
              if (++aAaaaaaaa[2] >= 123)
              {
                aAaaaaaaa[2] = 97;
                else {
                  char v0 = 97;
                }
                aAaaaaaaa[1] = v0;
              }
            }
          }
        }
      }
    }
  }

  return aAaaaaaaa;
}

BOOL sub_100034540(_BYTE *a1)
{
  return *a1 == 32
      && (char)a1[1] <= 122
      && (char)a1[2] <= 122
      && (char)a1[3] <= 122
      && (char)a1[4] <= 122
      && (char)a1[5] <= 122
      && (char)a1[6] <= 122
      && (char)a1[7] <= 122
      && (char)a1[8] < 123;
}

void *sub_1000345B8(void *result, unsigned __int8 *a2, int a3, const void *a4, void *a5)
{
  if (!a3) {
    return result;
  }
  uint64_t v9 = (uint64_t)result;
  uint64_t v10 = sub_10002BA84((uint64_t)a4, a3);
  if (v9) {
    uint64_t v18 = v9;
  }
  else {
    uint64_t v18 = v10;
  }
  if (!v18) {
    return memcpy(a5, a4, 8LL * a3);
  }
  uint64_t v19 = v10;
  if (v18 != v10) {
    return memcpy(a5, a4, 8LL * a3);
  }
  uint64_t result = (void *)sub_10003114C(v10, v11, v12, v13, v14, v15, v16, v17);
  if (!(_DWORD)result) {
    return result;
  }
  int v20 = sub_1000C88E4((unint64_t)a2);
  int v21 = sub_1000C88E4((unint64_t)"Opt");
  if (!sub_1000C8AB4(a2, "<s>") || !sub_1000C8AB4(a2, "<e>"))
  {
    uint64_t v23 = 0LL;
    goto LABEL_18;
  }

  int v22 = *(_DWORD *)(v19 + 32);
  if (v22 < 1) {
    return memcpy(a5, a4, 8LL * a3);
  }
  uint64_t v23 = 1LL;
  while (1)
  {
    uint64_t v25 = v23 >> 8;
    uint64_t v26 = *(_BYTE **)(*(void *)(*(void *)(v19 + 56) + 8LL * v25) + 8LL * v23);
    if (v26) {
      break;
    }
LABEL_12:
    BOOL v24 = (int)v23 < v22;
    uint64_t v23 = (v23 + 1);
    if (!v24) {
      return memcpy(a5, a4, 8LL * a3);
    }
  }

  if (sub_1000C8AB4(v26, a2))
  {
    int v22 = *(_DWORD *)(v19 + 32);
    goto LABEL_12;
  }

uint64_t sub_1000349D8( uint64_t a1, uint64_t a2, unsigned __int8 *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = 0LL;
  int v12 = *(_DWORD *)(a1 + 132);
  if (v12)
  {
    sub_10003114C(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    int v12 = *(_DWORD *)(a1 + 132);
  }

  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (a2 >> 8)) + 8LL * a2);
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v14) {
    return 0LL;
  }
  if (++aAaaaaaaa[8] >= 123)
  {
    aAaaaaaaa[8] = 97;
    if (++aAaaaaaaa[7] >= 123)
    {
      aAaaaaaaa[7] = 97;
      if (++aAaaaaaaa[6] >= 123)
      {
        aAaaaaaaa[6] = 97;
        if (++aAaaaaaaa[5] >= 123)
        {
          aAaaaaaaa[5] = 97;
          if (++aAaaaaaaa[4] >= 123)
          {
            aAaaaaaaa[4] = 97;
            if (++aAaaaaaaa[3] >= 123)
            {
              aAaaaaaaa[3] = 97;
              if (++aAaaaaaaa[2] >= 123)
              {
                aAaaaaaaa[2] = 97;
                else {
                  char v15 = 97;
                }
                aAaaaaaaa[1] = v15;
              }
            }
          }
        }
      }
    }
  }

  sub_100036FB8( a1,  0LL,  0LL,  a2,  0LL,  0LL,  v14,  aAaaaaaaa,  (_DWORD *)&v21 + 1,  (_DWORD *)&v20 + 1,  (int *)&v19 + 1,  0,  0);
  int v16 = HIDWORD(v21);
  uint64_t v17 = 0LL;
  if (sub_100036E04(a1, HIDWORD(v21) + *(_DWORD *)(a1 + 24)) && v16 && HIDWORD(v20))
  {
    uint64_t v17 = sub_100026E48(a3, a1, v16, SHIDWORD(v20), 0);
    sub_100036FB8(a1, v17, 0LL, a2, 0LL, 0LL, v14, aAaaaaaaa, &v21, &v20, (int *)&v19, 0, 0);
    *a4 = v16;
  }

  return v17;
}

uint64_t sub_100034C60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1000CAF58(4LL * *(int *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = v10;
  int64_t v12 = *(int *)(a1 + 16);
  if ((int)v12 >= 1)
  {
    for (int64_t i = 0LL; i < v12; ++i)
    {
      *((_DWORD *)v10 + i) = i;
      int64_t v12 = *(int *)(a1 + 16);
    }
  }

  qword_1000FDCE0 = a1;
  qsort(v10, v12, 4uLL, (int (__cdecl *)(const void *, const void *))sub_100037C10);
  int v14 = *(_DWORD *)(a1 + 16);
  int v15 = *(_DWORD *)(a1 + 48);
  if (v14 > 1)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 16);
    do
    {
      uint64_t v17 = v16 - 1;
      unsigned int v18 = *((_DWORD *)v11 + (v16 - 1));
      if (!sub_100037C30(a1, v18, *((_DWORD *)v11 + (v16 - 2)), 0))
      {
        --v14;
        int v15 = v15
            - *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 8LL * (int)((v18 + 1) >> *(_DWORD *)a1))
                        + 4LL * (int)((*(_DWORD *)(a1 + 4) - 1) & (v18 + 1)))
        *((_DWORD *)v11 + v17) = -1;
      }

      uint64_t v16 = v17;
    }

    while ((unint64_t)(v17 + 1) > 2);
  }

  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v19 = (signed int *)(a2 + 44);
    if (*(_DWORD *)(a2 + 44)) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 44);
    if (!*(_DWORD *)(a2 + 152)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 12);
  uint64_t v19 = (signed int *)(a2 + 44);
  if (!*(_DWORD *)(a2 + 44)) {
    goto LABEL_14;
  }
LABEL_11:
  if (!*(_DWORD *)(a2 + 152))
  {
LABEL_16:
    if (*(_DWORD *)(a2 + 172)) {
      goto LABEL_17;
    }
LABEL_33:
    *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 172);
LABEL_34:
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 144) = 0LL;
    *(void *)(a2 + 168) = 0LL;
    goto LABEL_35;
  }

void *sub_100035038(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (a3 >> 8)) + 8LL * a3);
  uint64_t v5 = *(uint64_t **)a1;
  int v24 = 0;
  uint64_t v6 = sub_1000B31C8((uint64_t)v5);
  int v7 = sub_1000B32A8(v5);
  uint64_t v23 = 2LL * v7;
  int v15 = (int16x8_t *)sub_1000CAF58(v23, v8, v9, v10, v11, v12, v13, v14);
  int v16 = *(_DWORD *)(v4 + 48);
  if (v16 >= 1)
  {
    for (unsigned int i = 0; i != v16; ++i)
    {
      int v18 = sub_10001FBCC( v6,  *(unsigned __int16 *)(*(void *)(*(void *)(v4 + 128) + 8LL * (i >> *(_DWORD *)(v4 + 32)))
                                  + 2LL * ((*(_DWORD *)(v4 + 36) + 0x7FFFFFFF) & i)),
              v15,
              v7);
      if (v18 >= 1)
      {
        uint64_t v19 = v18;
        int v20 = v15;
        do
        {
          unsigned int v21 = v20->u16[0];
          int v20 = (int16x8_t *)((char *)v20 + 2);
          sub_10009B1B8(a2, v21, 0LL, 0LL, &v24);
          --v19;
        }

        while (v19);
      }
    }
  }

  uint64_t result = sub_1000CB038(v15, v23);
  *(_DWORD *)(v4 + 184) = 0;
  return result;
}

uint64_t sub_100035154( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  unsigned int v9 = a2;
  uint64_t v10 = result;
  if (*(_DWORD *)(result + 132)) {
    uint64_t result = sub_10003114C(result, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = v9 >> 8;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v10 + 40) + 8LL * v11) + 8LL * v9);
  *(_DWORD *)(v12 + 180) = 0;
  uint64_t v13 = *(void *)(v10 + 72);
  if (v13)
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(*(void *)(v10 + 104) + 8 * v11) + 4LL * v9);
    if (!v14) {
      unsigned int v14 = v9;
    }
    uint64_t v15 = *(void *)(v13 + 8LL * (v14 >> 8));
    uint64_t v16 = v14;
    if (*(void *)(v15 + 8LL * v14))
    {
      uint64_t v39 = *(_DWORD **)(v15 + 8LL * v14);
      int v17 = *(_DWORD *)(v12 + 16);
      if (v17 >= 1) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }

    uint64_t v25 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v25 = *(void *)(qword_1000FDCC0 + 1528);
    }
    if (v25 > *(int *)(v10 + 128))
    {
      uint64_t result = sub_1000600A4();
      if (result)
      {
        *(void *)(v15 + 8 * v16) = result;
        ++*(_DWORD *)(v10 + 128);
        uint64_t v39 = *(_DWORD **)(v15 + 8 * v16);
        int v17 = *(_DWORD *)(v12 + 16);
        if (v17 >= 1)
        {
LABEL_8:
          uint64_t v18 = 0LL;
          int v19 = 0;
          int v20 = *(uint64_t **)v10;
          unsigned __int16 v21 = -1;
          do
          {
            if (v23 != v21)
            {
              unsigned int v24 = sub_1000BB884( (uint64_t)v20,  *(unsigned __int16 *)(*(void *)(*(void *)(v12 + 128)
              uint64_t v18 = sub_1000B3C5C(v20, v24) + v18;
              int v17 = *(_DWORD *)(v12 + 16);
              unsigned __int16 v21 = v23;
            }

            ++v19;
          }

          while (v19 < v17);
          goto LABEL_18;
        }

uint64_t sub_100035418( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v10 = result;
  if (*(_DWORD *)(result + 132)) {
    uint64_t result = sub_10003114C(result, a2, a3, a4, a5, a6, a7, a8);
  }
  int v11 = *(_DWORD *)(v10 + 32);
  if (v11 >= 1)
  {
    if (v8)
    {
      unsigned int v12 = 0;
      do
      {
        ++v12;
        if (*(void *)(*(void *)(*(void *)(v10 + 40) + 8LL * (v12 >> 8)) + 8LL * v12))
        {
          uint64_t result = (uint64_t)sub_100035038(v10, a2, v12);
          int v11 = *(_DWORD *)(v10 + 32);
        }
      }

      while ((int)v12 < v11);
    }

    else
    {
      do
      {
        ++v8;
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v10 + 40) + 8LL * (v8 >> 8)) + 8LL * v8);
        if (v13 && *(_DWORD *)(v13 + 184))
        {
          uint64_t result = (uint64_t)sub_100035038(v10, a2, v8);
          int v11 = *(_DWORD *)(v10 + 32);
        }
      }

      while ((int)v8 < v11);
    }
  }

  return result;
}

BOOL sub_1000354EC( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, v11, v12, v13, v14, v15, v16, v17);
  }
  int v18 = *(_DWORD *)(a1 + 32);
  if (v18 >= 1)
  {
    LODWORD(v19) = 0;
    do
    {
      uint64_t v19 = (v19 + 1);
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v19 >> 8)) + 8LL * v19);
      if (v20 && *(_DWORD *)(v20 + 180))
      {
        sub_100035154(a1, v19, 0LL, v13, v14, v15, v16, v17);
        int v18 = *(_DWORD *)(a1 + 32);
      }
    }

    while ((int)v19 < v18);
  }

  uint64_t v21 = sub_1000BDA88(a2, "bcm1", a3);
  if (!v21 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 64)) {
    return 0LL;
  }
  uint64_t v23 = v21;
  if (!sub_1000BDB78(v21, *(_DWORD *)(a1 + 24), v22)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 28), v24)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 32), v25)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 48), v26)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 52), v27)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 80), v28)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 84), v29)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 96), v30)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 100), v31)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 112), v32)
    || !sub_1000BDB78(v23, *(_DWORD *)(a1 + 116), v33)
    || (uint64_t v35 = *(void *)(a1 + 72), !sub_1000BDB78(v23, v35 != 0, v34))
    || !sub_1000BDE0C(v23, *(void ***)(a1 + 88), *(_DWORD *)(a1 + 100), 0x100u, 4, v36)
    || !sub_1000BDE0C(v23, *(void ***)(a1 + 104), *(_DWORD *)(a1 + 116), 0x100u, 4, v37))
  {
    BOOL v41 = 0LL;
    goto LABEL_32;
  }

  int v39 = *(_DWORD *)(a1 + 32);
  if (v39 < 1)
  {
    int v43 = 1;
    goto LABEL_53;
  }

  unsigned int v40 = 1;
  while (1)
  {
    uint64_t v45 = v40 >> 8;
    uint64_t v46 = *(void *)(*(void *)(a1 + 56) + 8 * v45);
    uint64_t v47 = v40;
    unint64_t v48 = *(void *)(v46 + 8 * v47);
    if (v48)
    {
      uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * (v40 >> 8)) + 8LL * v40);
      if (!v49 || *(_DWORD *)(v49 + 208)) {
        break;
      }
    }

    if (!sub_1000BDB78(v23, 0, v38)) {
      goto LABEL_50;
    }
LABEL_34:
    int v43 = v40 + 1;
  }

  __int32 v50 = sub_1000C88E4(v48) + 1;
  if (sub_1000BDB78(v23, v50, v51))
  {
    uint64_t v53 = *(void **)(v46 + 8 * v47);
    unsigned int v54 = v53 ? v50 : 0;
    if (sub_1000BDBCC(v23, v53, v54, 1, v52)
      && (*(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v45) + 4 * v47)
       || sub_100035808(v49, v23, v38)))
    {
      if (!v35) {
        goto LABEL_34;
      }
      uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8 * v45) + 8 * v47);
    }
  }

uint64_t sub_100035808(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (sub_1000BDB78(a2, *(_DWORD *)a1, a3)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 4), v5)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 8), v6)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 12), v7)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 16), v8)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 32), v9)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 36), v10)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 40), v11)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 44), v12)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 48), v13)
    && (sub_1000BDB78(a2, *(_DWORD *)(a1 + 52), v14), sub_1000BDB78(a2, *(_DWORD *)(a1 + 144), v15))
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 148), v16)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 152), v17)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 168), v18)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 172), v19)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 176), v20)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 64), v21)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 200), v22)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 192), v23)
    && sub_1000BDB78(a2, *(_DWORD *)(a1 + 196), v24)
    && sub_1000BDE0C(a2, *(void ***)(a1 + 24), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 4), 4, v25)
    && sub_1000BDE0C(a2, *(void ***)(a1 + 128), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 36), 2, v26)
    && (!*(_DWORD *)(a1 + 152)
     || sub_1000BDE0C(a2, *(void ***)(a1 + 136), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 4), 1, v27))
    && sub_1000BDE0C(a2, *(void ***)(a1 + 160), *(_DWORD *)(a1 + 172), *(_DWORD *)(a1 + 4), 4, v27))
  {
    return sub_100037D5C(*(void *)(a1 + 216), a2, v28);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100035A04( _DWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint8x8_t v11 = sub_1000BCAE8(a2, "bcm1", a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    uint64_t v78 = 0LL;
    uint64_t v79 = 0LL;
    int v77 = 0;
    uint64_t v76 = 0LL;
    int v75 = 0;
    uint64_t v13 = a1[25];
    uint64_t v14 = a1[29];
    if (!sub_1000BCD38((uint64_t)v11, a1 + 6)
      || !sub_1000BCD38(v12, a1 + 7)
      || !sub_1000BCD38(v12, a1 + 8)
      || !sub_1000BCD38(v12, (char *)&v79 + 4)
      || !sub_1000BCD38(v12, &v79)
      || !sub_1000BCD38(v12, &v78)
      || !sub_1000BCD38(v12, &v77)
      || !sub_1000BCD38(v12, a1 + 24)
      || !sub_1000BCD38(v12, a1 + 25)
      || !sub_1000BCD38(v12, a1 + 28)
      || !sub_1000BCD38(v12, a1 + 29)
      || !sub_1000BCD38(v12, &v75))
    {
      goto LABEL_140;
    }

    unsigned int v73 = a1 + 8;
    if (v75 && !*((void *)a1 + 9))
    {
      uint64_t v20 = sub_1000C1074(8LL * (int)a1[20]);
      *((void *)a1 + 9) = v20;
      if (!v20) {
        goto LABEL_140;
      }
      if ((int)a1[21] >= 1)
      {
        uint64_t v21 = 0LL;
        do
          *(void *)(*((void *)a1 + 9) + 8 * v21++) = sub_1000C1074(2048LL);
        while (v21 < (int)a1[21]);
      }
    }

    else if ((_DWORD)v78 != a1[20])
    {
      uint64_t v15 = sub_1000C1074(8LL * (int)v78);
      if (!v15) {
        goto LABEL_140;
      }
      uint8x8_t v16 = (void *)v15;
      int v17 = v78;
      if ((int)v78 < a1[21])
      {
        uint64_t v18 = (int)v78;
        do
          sub_1000C0EF8(*(void *)(*((void *)a1 + 9) + 8 * v18++));
        while (v18 < (int)a1[21]);
        int v17 = v78;
      }

      if (v17 >= a1[20]) {
        int v17 = a1[20];
      }
      j__memmove(v16, *((const void **)a1 + 9), 8 * v17);
      sub_1000C0EF8(*((void *)a1 + 9));
      *((void *)a1 + 9) = v16;
    }

    int v22 = v77;
    LODWORD(v23) = a1[21];
    if (v77 < (int)v23)
    {
      uint64_t v24 = v77;
      do
      {
        sub_1000C0EF8(*(void *)(*((void *)a1 + 9) + 8 * v24));
        *(void *)(*((void *)a1 + 9) + 8 * v24++) = 0LL;
      }

      while (v24 < (int)a1[21]);
      int v22 = v77;
      LODWORD(v23) = a1[21];
    }

    if ((int)v23 < v22)
    {
      uint64_t v23 = (int)v23;
      do
      {
        *(void *)(*((void *)a1 + 9) + 8 * v23) = sub_1000C1074(2048LL);
        int v22 = v77;
        if (!*(void *)(*((void *)a1 + 9) + 8 * v23)) {
          break;
        }
        ++v23;
      }

      while (v23 < v77);
    }

    if ((_DWORD)v23 != v22) {
      goto LABEL_140;
    }
    uint8x8_t v26 = (uint64_t *)(a1 + 22);
    uint64_t v25 = *((void *)a1 + 11);
    a1[20] = v78;
    a1[21] = v22;
    if (v25)
    {
      if ((int)v13 >= 1)
      {
        uint64_t v27 = 0LL;
        uint64_t v28 = 8 * v13;
        do
        {
          sub_1000C0EF8(*(void *)(*v26 + v27));
          v27 += 8LL;
        }

        while (v28 != v27);
        uint64_t v25 = *v26;
      }

      sub_1000C0EF8(v25);
    }

    uint8x8_t v30 = (uint64_t *)(a1 + 26);
    uint64_t v29 = *((void *)a1 + 13);
    if (v29)
    {
      if ((int)v14 >= 1)
      {
        uint64_t v31 = 0LL;
        uint64_t v32 = 8 * v14;
        do
        {
          sub_1000C0EF8(*(void *)(*v30 + v31));
          v31 += 8LL;
        }

        while (v32 != v31);
        uint64_t v29 = *v30;
      }

      sub_1000C0EF8(v29);
    }

    int v33 = v79;
    if (*((void *)a1 + 5)) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = (int)v79 < 1;
    }
    if (v34)
    {
      if (HIDWORD(v79) != a1[12])
      {
        uint64_t v35 = sub_1000C1074(8LL * SHIDWORD(v79));
        if (!v35) {
          goto LABEL_140;
        }
        uint8x8_t v36 = (void *)v35;
        int v37 = HIDWORD(v79);
        if (SHIDWORD(v79) < a1[13])
        {
          uint64_t v38 = SHIDWORD(v79);
          do
            sub_1000C0EF8(*(void *)(*((void *)a1 + 7) + 8 * v38++));
          while (v38 < (int)a1[13]);
          int v37 = HIDWORD(v79);
        }

        if (v37 >= a1[12]) {
          int v37 = a1[12];
        }
        j__memmove(v36, *((const void **)a1 + 7), 8 * v37);
        sub_1000C0EF8(*((void *)a1 + 7));
        *((void *)a1 + 7) = v36;
        uint64_t v39 = sub_1000C1074(8LL * SHIDWORD(v79));
        if (!v39) {
          goto LABEL_140;
        }
        unsigned int v40 = (void *)v39;
        int v41 = HIDWORD(v79);
        if (SHIDWORD(v79) < a1[13])
        {
          uint64_t v42 = SHIDWORD(v79);
          do
            sub_1000C0EF8(*(void *)(*((void *)a1 + 5) + 8 * v42++));
          while (v42 < (int)a1[13]);
          int v41 = HIDWORD(v79);
        }

        if (v41 >= a1[12]) {
          int v41 = a1[12];
        }
        j__memmove(v40, *((const void **)a1 + 5), 8 * v41);
        sub_1000C0EF8(*((void *)a1 + 5));
        *((void *)a1 + 5) = v40;
        int v33 = v79;
      }
    }

    else
    {
      uint64_t v43 = sub_1000C1074(8LL * SHIDWORD(v79));
      if (!v43) {
        goto LABEL_140;
      }
      uint64_t v44 = v43;
      int v45 = v79;
      if ((int)v79 < 1)
      {
        LODWORD(v46) = 0;
      }

      else
      {
        uint64_t v46 = 0LL;
        do
        {
          uint64_t v47 = sub_1000C1074(2048LL);
          *(void *)(v44 + 8 * v46) = v47;
          int v45 = v79;
          if (!v47) {
            break;
          }
          ++v46;
        }

        while (v46 < (int)v79);
      }

      if ((_DWORD)v46 != v45) {
        goto LABEL_140;
      }
      uint64_t v48 = sub_1000C1074(8LL * SHIDWORD(v79));
      if (!v48) {
        goto LABEL_140;
      }
      uint64_t v49 = v48;
      int v33 = v79;
      if ((int)v79 < 1)
      {
        LODWORD(v50) = 0;
      }

      else
      {
        uint64_t v50 = 0LL;
        do
        {
          uint64_t v51 = sub_1000C1074(2048LL);
          *(void *)(v49 + 8 * v50) = v51;
          int v33 = v79;
          if (!v51) {
            break;
          }
          ++v50;
        }

        while (v50 < (int)v79);
      }

      if ((_DWORD)v50 != v33) {
        goto LABEL_140;
      }
      a1[17] = v33;
      *((void *)a1 + 7) = v44;
      a1[13] = v33;
      *((void *)a1 + 5) = v49;
      uint8x8_t v30 = (uint64_t *)(a1 + 26);
      uint8x8_t v26 = (uint64_t *)(a1 + 22);
    }

    LODWORD(v52) = a1[13];
    if (v33 >= (int)v52)
    {
    }

    else
    {
      uint64_t v53 = v33;
      do
      {
        sub_1000C0EF8(*(void *)(*((void *)a1 + 7) + 8 * v53));
        *(void *)(*((void *)a1 + 7) + 8 * v53) = 0LL;
        sub_1000C0EF8(*(void *)(*((void *)a1 + 5) + 8 * v53));
        *(void *)(*((void *)a1 + 5) + 8 * v53++) = 0LL;
        uint64_t v54 = (int)a1[13];
      }

      while (v53 < v54);
      int v33 = v79;
      LODWORD(v52) = a1[13];
      if ((int)v54 >= (int)v79)
      {
LABEL_93:
        if ((_DWORD)v52 != v33) {
          goto LABEL_140;
        }
        goto LABEL_103;
      }
    }

    uint64_t v52 = (int)v52;
    while (1)
    {
      *(void *)(*((void *)a1 + 7) + 8 * v52) = sub_1000C1074(2048LL);
      if (!*(void *)(*((void *)a1 + 7) + 8 * v52)) {
        break;
      }
      *(void *)(*((void *)a1 + 5) + 8 * v52) = sub_1000C1074(2048LL);
      int v33 = v79;
      if (*(void *)(*((void *)a1 + 5) + 8 * v52))
      {
      }

      if ((_DWORD)v52 == (_DWORD)v79) {
        goto LABEL_103;
      }
      goto LABEL_140;
    }

    int v33 = v79;
    if ((_DWORD)v52 != (_DWORD)v79) {
      goto LABEL_140;
    }
LABEL_103:
    int v55 = HIDWORD(v79);
    a1[16] = HIDWORD(v79);
    a1[17] = v33;
    a1[12] = v55;
    a1[13] = v33;
    int v74 = 0;
    if (sub_1000BD6CC(v12, v26, a1[24], 256, 4, &v74) && (!*v26 || v74 == a1[25]))
    {
      int v74 = 0;
      if (sub_1000BD6CC(v12, v30, a1[28], 256, 4, &v74))
      {
        if (!*v30 || v74 == a1[29])
        {
          BOOL v56 = v30;
          int v57 = *v73;
          if (*v73 < 1)
          {
            int v59 = 1;
          }

          else
          {
            int v58 = 1;
            do
            {
              int v59 = v58;
              if (!sub_1000BCD38(v12, (char *)&v78 + 4))
              {
LABEL_134:
                int v57 = *v73;
                goto LABEL_137;
              }

              if (HIDWORD(v78))
              {
                uint64_t v60 = v59 >> 8;
                uint64_t v61 = *(void *)(*((void *)a1 + 5) + 8LL * v60);
                uint64_t v62 = *(void *)(*((void *)a1 + 7) + 8 * v60);
                int v74 = 0;
                *(void *)(v62 + 8LL * v59) = v76;
                if (*(_DWORD *)(*(void *)(*v56 + 8 * v60) + 4LL * v59))
                {
                  uint64_t v63 = 0LL;
                }

                else
                {
                  uint64_t v64 = sub_1000362A8(v12);
                  if (!v64) {
                    goto LABEL_134;
                  }
                  uint64_t v63 = v64;
                  if (*((_DWORD *)v64 + 16) != -1) {
                    v64[7] = a4;
                  }
                  *(void *)(v61 + 8LL * v59) = v64;
                  *(uint64_t *)((char *)v64 + 204) = 0x100000001LL;
                  *((_DWORD *)v64 + 46) = 1;
                }

                if (v75)
                {
                  int v74 = 0;
                  if (!sub_1000BCD38(v12, &v74)) {
                    goto LABEL_134;
                  }
                  if (v74)
                  {
                    uint64_t v65 = sub_1000600A4();
                    if (!v65) {
                      goto LABEL_134;
                    }
                    uint64_t v66 = (_DWORD *)v65;
                    if (v8)
                    {
                      int v67 = 0;
                      *(void *)(*(void *)(*((void *)a1 + 9) + 8 * v60) + 8LL * v59) = v66;
                    }

                    else
                    {
                      sub_1000600D0(v66);
                      int v67 = 1;
                    }

                    if (v63) {
                      *((_DWORD *)v63 + 45) = v67;
                    }
                  }
                }
              }

              int v58 = v59 + 1;
              int v57 = *v73;
            }

            while (v59 < *v73);
            ++v59;
          }

LABEL_137:
          if (v59 == v57 + 1)
          {
            if (v57 < 1)
            {
              uint64_t v19 = 1LL;
            }

            else
            {
              int v68 = 0;
              uint64_t v19 = 1LL;
              do
              {
                uint64_t v70 = ++v68 >> 8;
                if (*(void *)(*(void *)(*((void *)a1 + 7) + 8LL * v70) + 8LL * v68))
                {
                  unint64_t v71 = *(unsigned int *)(*(void *)(*v56 + 8 * v70) + 4LL * v68);
                  if ((_DWORD)v71) {
                    BOOL v72 = (v71 & 0x40000000) == 0;
                  }
                  else {
                    BOOL v72 = 0;
                  }
                  if (v72)
                  {
                    *(void *)(*(void *)(*((void *)a1 + 5) + 8 * v70) + 8LL * v68) = *(void *)(*(void *)(*((void *)a1 + 5) + ((v71 >> 5) & 0x7FFFFF8)) + 8LL * v71);
                    int v57 = a1[8];
                  }
                }
              }

              while (v68 < v57);
            }

            goto LABEL_141;
          }
        }
      }
    }

  *(_DWORD *)(a1 + 732) = v122;
  return result;
}

LABEL_140:
    uint64_t v19 = 0LL;
LABEL_141:
    sub_1000BCBC8(v12);
    return v19;
  }

  return 0LL;
}

  uint64_t v80 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1464)) {
      *(_DWORD *)(v11 + 628) = *(_DWORD *)(v11 + 628) == 0;
    }
    if (*(_DWORD *)(v80 + 1648))
    {
      uint64_t v15 = *(_DWORD *)(v11 + 632) == 0;
LABEL_145:
      *(_DWORD *)(v11 + 632) = v15;
    }
  }

  return result;
}

uint64_t *sub_1000362A8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_1000C1074(224LL);
  if (v2)
  {
    if (!sub_1000BCD38(a1, v2)
      || !sub_1000BCD38(a1, (char *)v2 + 4)
      || !sub_1000BCD38(a1, v2 + 1)
      || !sub_1000BCD38(a1, (char *)v2 + 12)
      || !sub_1000BCD38(a1, v2 + 2)
      || !sub_1000BCD38(a1, v2 + 4)
      || !sub_1000BCD38(a1, (char *)v2 + 36)
      || !sub_1000BCD38(a1, v2 + 5)
      || !sub_1000BCD38(a1, (char *)v2 + 44)
      || !sub_1000BCD38(a1, v2 + 6)
      || (int v4 = 0, !sub_1000BCD38(a1, &v4))
      || (*((_DWORD *)v2 + 13) = v4, !sub_1000BCD38(a1, v2 + 18))
      || !sub_1000BCD38(a1, (char *)v2 + 148)
      || !sub_1000BCD38(a1, v2 + 19)
      || !sub_1000BCD38(a1, v2 + 21)
      || !sub_1000BCD38(a1, (char *)v2 + 172)
      || !sub_1000BCD38(a1, v2 + 22)
      || !sub_1000BCD38(a1, v2 + 8)
      || !sub_1000BCD38(a1, v2 + 25)
      || !sub_1000BCD38(a1, v2 + 24)
      || !sub_1000BCD38(a1, (char *)v2 + 196)
      || (int v4 = 0, !sub_1000BD6CC(a1, v2 + 3, *((_DWORD *)v2 + 2), *((_DWORD *)v2 + 1), 4, &v4))
      || v2[3] && v4 != *((_DWORD *)v2 + 3)
      || (int v4 = 0, !sub_1000BD6CC(a1, v2 + 16, *((_DWORD *)v2 + 10), *((_DWORD *)v2 + 9), 2, &v4))
      || v2[16] && v4 != *((_DWORD *)v2 + 11)
      || *((_DWORD *)v2 + 38)
      && ((int v4 = 0, !sub_1000BD6CC(a1, v2 + 17, *((_DWORD *)v2 + 36), *((_DWORD *)v2 + 1), 1, &v4))
       || v2[17] && v4 != *((_DWORD *)v2 + 37))
      || (int v4 = 0, !sub_1000BD6CC(a1, v2 + 20, *((_DWORD *)v2 + 42), *((_DWORD *)v2 + 1), 4, &v4))
      || v2[20] && v4 != *((_DWORD *)v2 + 43)
      || !sub_100037E30(v2 + 27, a1))
    {
      sub_1000C0EF8((uint64_t)v2);
      return 0LL;
    }
  }

  return v2;
}

_DWORD *sub_100036584( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v11 = sub_1000BCAE8(a1, "bcm1", a2, a4, a5, a6, a7, a8);
  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = (_DWORD *)sub_1000C1074(160LL);
  if (!v13) {
    goto LABEL_59;
  }
  uint64_t v14 = sub_1000C1074(224LL);
  *((void *)v13 + 17) = v14;
  if (v14)
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    *(void *)uint64_t v13 = a3;
    *((void *)v13 + 1) = a4;
    *((void *)v13 + 2) = a5;
    *(_DWORD *)(v14 + 204) = 1;
    if (!sub_1000BCD38(v12, v13 + 6)) {
      goto LABEL_47;
    }
    if (!sub_1000BCD38(v12, v13 + 8)) {
      goto LABEL_47;
    }
    uint64_t v15 = v13 + 13;
    if (!sub_1000BCD38(v12, v13 + 13)) {
      goto LABEL_47;
    }
    if (!sub_1000BCD38(v12, v13 + 12)) {
      goto LABEL_47;
    }
    uint8x8_t v16 = v13 + 25;
    if (!sub_1000BCD38(v12, v13 + 25)) {
      goto LABEL_47;
    }
    if (!sub_1000BCD38(v12, v13 + 24)) {
      goto LABEL_47;
    }
    int v17 = v13 + 29;
    if (!sub_1000BCD38(v12, v13 + 29)
      || !sub_1000BCD38(v12, v13 + 28)
      || !sub_1000BCD38(v12, v13 + 20)
      || !sub_1000BCD38(v12, v13 + 39))
    {
      goto LABEL_47;
    }

    uint64_t v18 = v13[12];
    uint64_t v19 = sub_1000C1074(8 * v18);
    *((void *)v13 + 5) = v19;
    if (!v19) {
      goto LABEL_47;
    }
    if (*v15 >= 1)
    {
      uint64_t v20 = 0LL;
      do
      {
        *(void *)(*((void *)v13 + 5) + 8 * v20) = sub_1000C1074(2048LL);
        if (!*(void *)(*((void *)v13 + 5) + 8 * v20)) {
          break;
        }
        ++v20;
      }

      while (v20 < *v15);
    }

    uint64_t v21 = sub_1000C1074(8LL * (int)v13[12]);
    *((void *)v13 + 7) = v21;
    if (!v21)
    {
LABEL_47:
      sub_1000BCBC8(v12);
      sub_1000312F0((uint64_t)v13);
      return 0LL;
    }

    int v22 = *v15;
    if (*v15 >= 1)
    {
      uint64_t v23 = 0LL;
      do
      {
        *(void *)(*((void *)v13 + 7) + 8 * v23) = sub_1000C1074(2048LL);
        uint64_t v24 = *(void *)(*((void *)v13 + 7) + 8 * v23);
        int v22 = v13[13];
        ++v23;
        if (v24) {
          BOOL v25 = v23 < v22;
        }
        else {
          BOOL v25 = 0;
        }
      }

      while (v25);
    }

    v13[16] = v13[12];
    v13[17] = v22;
    if (qword_1000FDCC0)
    {
      if (*(uint64_t *)(qword_1000FDCC0 + 1528) >= 1)
      {
        uint64_t v26 = v13[20];
        if ((int)v26 >= 1)
        {
          uint64_t v27 = sub_1000C1074(8 * v26);
          *((void *)v13 + 9) = v27;
          if (v27)
          {
            if ((int)v13[21] >= 1)
            {
              uint64_t v28 = 0LL;
              do
              {
                *(void *)(*((void *)v13 + 9) + 8 * v28) = sub_1000C1074(2048LL);
                if (!*(void *)(*((void *)v13 + 9) + 8 * v28)) {
                  break;
                }
                ++v28;
              }

              while (v28 < (int)v13[21]);
            }

            goto LABEL_38;
          }

          goto LABEL_47;
        }
      }
    }

_DWORD *sub_1000369C4(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)sub_1000C1074(224LL);
  if (!v2) {
    return v2;
  }
  if (!sub_1000BCD38(a1, v2)
    || !sub_1000BCD38(a1, v2 + 1)
    || !sub_1000BCD38(a1, v2 + 2)
    || (unsigned int v3 = v2 + 3, !sub_1000BCD38(a1, v2 + 3))
    || !sub_1000BCD38(a1, v2 + 4)
    || !sub_1000BCD38(a1, v2 + 8)
    || !sub_1000BCD38(a1, v2 + 9)
    || !sub_1000BCD38(a1, v2 + 10)
    || (int v4 = v2 + 11, !sub_1000BCD38(a1, v2 + 11))
    || !sub_1000BCD38(a1, v2 + 12)
    || (int v14 = 0, !sub_1000BCD38(a1, &v14))
    || (v2[13] = v14, !sub_1000BCD38(a1, v2 + 50))
    || (uint64_t v5 = sub_1000C1074(8LL * (int)v2[2]), (*((void *)v2 + 3) = v5) == 0LL))
  {
    sub_1000C0EF8((uint64_t)v2);
    return 0LL;
  }

  if (*v3 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    do
    {
      int v13 = 0;
      uint64_t v5 = *((void *)v2 + 3);
      if (*(void *)(v5 + v6))
      {
        if (v13 != v2[1]) {
          break;
        }
      }

      ++v7;
      v6 += 8LL;
    }

    while (v7 < *v3);
  }

  uint64_t v9 = sub_1000C1074(8LL * (int)v2[10]);
  *((void *)v2 + 16) = v9;
  if (!v9) {
    return 0LL;
  }
  if (*v4 >= 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    do
    {
      int v12 = 0;
      uint64_t v9 = *((void *)v2 + 16);
      if (*(void *)(v9 + v10))
      {
        if (v12 != v2[9]) {
          break;
        }
      }

      ++v11;
      v10 += 8LL;
    }

    while (v11 < *v4);
  }

  *(void *)(v2 + 51) = 1LL;
  v2[46] = 1;
  return v2;
}

uint64_t sub_100036C04(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _WORD *a5)
{
  if (!sub_1000C8AB4(a2, "<s>") || !sub_1000C8AB4(a2, "<e>"))
  {
    char v15 = 0;
    int v11 = 0;
    if ((_DWORD)a3 == -1) {
      return a3;
    }
    goto LABEL_16;
  }

  int v10 = *(_DWORD *)(a1 + 32);
  if (v10 < 1)
  {
LABEL_15:
    char v15 = 0;
    int v11 = -1;
    if ((_DWORD)a3 != -1) {
      goto LABEL_16;
    }
    return a3;
  }

  int v11 = 1;
  while (1)
  {
    uint64_t v13 = v11 >> 8;
    int v14 = *(_BYTE **)(*(void *)(*(void *)(a1 + 56) + 8LL * v13) + 8LL * v11);
    if (!v14) {
      goto LABEL_6;
    }
    int v10 = *(_DWORD *)(a1 + 32);
LABEL_6:
    if (v11++ >= v10) {
      goto LABEL_15;
    }
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v13) + 8LL * v11))
  {
    char v15 = 0;
    if ((_DWORD)a3 == -1) {
      return a3;
    }
  }

  else
  {
    int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v13) + 4LL * v11);
    char v15 = 1;
    if ((_DWORD)a3 == -1) {
      return a3;
    }
  }

uint64_t sub_100036DCC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_100036DCC(*(void *)(result + 8));
    sub_100036DCC(*(void *)(v1 + 16));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100036E04(uint64_t a1, int a2)
{
  if (a2 > 0x40000) {
    return 0LL;
  }
  uint64_t result = sub_1000C1744((const void **)(a1 + 40), (int *)(a1 + 48), (signed int *)(a1 + 52), 8, 8, a2);
  if ((_DWORD)result)
  {
    if (!qword_1000FDCC0
      || *(uint64_t *)(qword_1000FDCC0 + 1528) < 1
      || (uint64_t result = sub_1000C1744((const void **)(a1 + 72), (int *)(a1 + 80), (signed int *)(a1 + 84), 8, 8, a2),
          (_DWORD)result))
    {
      uint64_t result = sub_1000C1744((const void **)(a1 + 56), (int *)(a1 + 64), (signed int *)(a1 + 68), 8, 8, a2);
      if ((_DWORD)result)
      {
        uint64_t result = sub_1000C1744((const void **)(a1 + 88), (int *)(a1 + 96), (signed int *)(a1 + 100), 8, 4, a2);
        if ((_DWORD)result) {
          return sub_1000C1744( (const void **)(a1 + 104),  (int *)(a1 + 112),  (signed int *)(a1 + 116),  8,  4,  a2) != 0;
        }
      }
    }
  }

  return result;
}

uint64_t sub_100036EF4(uint64_t a1, int a2)
{
  uint64_t result = sub_1000C1744((const void **)(a1 + 24), (int *)(a1 + 8), (signed int *)(a1 + 12), *(_DWORD *)a1, 4, a2 + 1);
  if ((_DWORD)result)
  {
    if (!*(_DWORD *)(a1 + 152)
      || (uint64_t result = sub_1000C1744( (const void **)(a1 + 136),  (int *)(a1 + 144),  (signed int *)(a1 + 148),  *(_DWORD *)a1,  1,  a2),  (_DWORD)result))
    {
      int v5 = *(_DWORD *)(a1 + 16);
      uint64_t result = sub_1000C1744( (const void **)(a1 + 160),  (int *)(a1 + 168),  (signed int *)(a1 + 172),  *(_DWORD *)a1,  4,  a2);
      if (v5 < a2)
      {
        do
        {
          ++v5;
        }

        while (a2 != v5);
      }
    }
  }

  return result;
}

unint64_t sub_100036FB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, _DWORD *a9, _DWORD *a10, int *a11, int a12, int a13)
{
  int v14 = a7;
  int v15 = a6;
  int v162 = a5;
  unsigned int v168 = a4;
  unsigned int v16 = a3;
  int v18 = a10;
  uint64_t v19 = a11;
  uint64_t v170 = 0LL;
  if (*(_DWORD *)(a1 + 132)) {
    sub_10003114C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  uint64_t v167 = v168 >> 8;
  uint64_t v20 = *(int **)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8LL * v168);
  v171[0] = 0xFFFFFFFFLL;
  int v21 = sub_1000C88E4((unint64_t)a8) + 11;
  uint64_t v163 = v21;
  uint64_t v29 = (char *)sub_1000CAF58(v21, v22, v23, v24, v25, v26, v27, v28);
  int v30 = v21;
  uint64_t v31 = v29;
  sub_1000C896C(v29, a8, v30);
  int v32 = sub_1000C88E4((unint64_t)a8);
  sprintf(&v31[v32], "_%d", 0);
  unsigned int v169 = v16;
  if (qword_1000FDCC0)
  {
    uint64_t v33 = a2;
    if (*(void *)(qword_1000FDCC0 + 4264) <= a12) {
      goto LABEL_11;
    }
    int v34 = a13;
    if (*(void *)(qword_1000FDCC0 + 4256) <= a13) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v33 = a2;
    if ((a12 & 0x80000000) == 0 || (int v34 = a13, a13 >= 0LL))
    {
LABEL_11:
      if (!v33) {
        goto LABEL_61;
      }
      if (v14 < 1)
      {
        unsigned int v47 = 0;
        uint64_t v54 = 0LL;
LABEL_49:
        uint64_t v160 = v31;
        sub_100031BE8(a1, v31, v14, v47, v20[13], (unsigned int *)&v170 + 1, 0, 0, 0LL, 0);
        sub_100027400(a2, SHIDWORD(v170), (_DWORD *)v171 + 1);
        sub_10002785C(a2, v162, SHIDWORD(v171[0]), 0);
        sub_10002785C(a2, SHIDWORD(v171[0]), 0, 0);
        __int128 v82 = (__int16 *)sub_1000CAF58(v54, v68, v69, v70, v71, v72, v73, v74);
        if (v14 >= 1)
        {
          for (int i = 0; i != v14; ++i)
          {
            unsigned int v84 = i + v16;
            if (*(_DWORD *)(a1 + 132) == v168 && !sub_10003114C(a1, v75, v76, v77, v78, v79, v80, v81))
            {
              int v86 = 0;
              int v87 = -v15;
              if (v15 < 0)
              {
LABEL_55:
                unsigned int v88 = v15
                uint64_t v89 = v86 - (uint64_t)v15;
                uint64_t v90 = &v82[v15];
                do
                {
                  ++v88;
                  --v89;
                }

                while (v89);
              }
            }

            else
            {
              uint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v167) + 8LL * v168);
              int v86 = *(_DWORD *)(*(void *)(*(void *)(v85 + 24) + 8LL * (int)((v84 + 1) >> *(_DWORD *)v85))
                              + 4LL * (int)((*(_DWORD *)(v85 + 4) - 1) & (v84 + 1)))
              int v87 = v86 - v15;
              if (v86 > v15) {
                goto LABEL_55;
              }
            }

            sub_10003293C(v67, v87, &v82[v15], 0, -1);
          }
        }

        sub_1000CB038(v82, v54);
        uint64_t v19 = a11;
        uint64_t v31 = v160;
        int v18 = a10;
LABEL_61:
        sub_1000CB038(v31, v163);
        ++*a9;
        ++*v18;
        unint64_t result = sub_1000C88E4((unint64_t)v31);
        int v92 = result + 1;
        int v93 = *v19;
        goto LABEL_110;
      }

      uint64_t v41 = *((void *)v20 + 3);
      int v42 = *v20;
      int v43 = v20[1] - 1;
      int v44 = *(_DWORD *)(*(void *)(v41 + 8LL * (int)(v16 >> *v20)) + 4LL * (int)(v43 & v16));
      if (v14 == 1)
      {
        signed int v45 = 0;
        unsigned int v46 = 0;
        unsigned int v47 = 0;
      }

      else
      {
        signed int v45 = 0;
        int v55 = 0;
        int v56 = 0;
        int v57 = 0;
        unsigned int v46 = v14 & 0xFFFFFFFE;
        unsigned int v58 = v16 + 2;
        unsigned int v59 = v14 & 0xFFFFFFFE;
        do
        {
          int v60 = *(_DWORD *)(*(void *)(v41 + 8LL * (int)((v58 - 1) >> v42)) + 4LL * (int)((v58 - 1) & v43));
          int v61 = v60 - v44;
          int v44 = *(_DWORD *)(*(void *)(v41 + 8LL * (int)(v58 >> v42)) + 4LL * (int)(v58 & v43));
          int v62 = v44 - v60;
          if (v61 > v45) {
            signed int v45 = v61;
          }
          if (v62 > v55) {
            int v55 = v62;
          }
          v56 += v61;
          v57 += v62;
          v58 += 2;
          v59 -= 2;
        }

        while (v59);
        unsigned int v47 = v57 + v56;
        if (v45 <= v55) {
          signed int v45 = v55;
        }
        if (v46 == v14) {
          goto LABEL_48;
        }
      }

      unsigned int v63 = v14 - v46;
      unsigned int v64 = v46 + v16 + 1;
      do
      {
        int v65 = *(_DWORD *)(*(void *)(v41 + 8LL * (int)(v64 >> v42)) + 4LL * (int)(v64 & v43));
        int v66 = v65 - v44;
        if (v66 > v45) {
          signed int v45 = v66;
        }
        v47 += v66;
        ++v64;
        int v44 = v65;
        --v63;
      }

      while (v63);
LABEL_48:
      uint64_t v54 = 2LL * v45;
      goto LABEL_49;
    }
  }

  int v164 = v34;
  int v159 = v31;
  if (v14 < 1)
  {
LABEL_65:
    int v157 = 0;
    int v156 = 0;
    uint64_t v165 = 0LL;
    goto LABEL_66;
  }

  unsigned int v35 = 0;
  int v36 = 0;
  int v37 = 0;
  uint64_t v38 = *((void *)v20 + 3);
  int v39 = *v20;
  int v40 = v20[1] - 1;
  while (1)
  {
    int v48 = *(_DWORD *)(*(void *)(v38 + 8LL * (int)((v37 + v16) >> v39)) + 4LL * (int)((v37 + v16) & v40));
    int v49 = *(_DWORD *)(*(void *)(v38 + 8LL * (int)((v37 + v16 + 1) >> v39)) + 4LL * (int)((v37 + v16 + 1) & v40)) - v48;
    int v50 = v49 <= v15
        ? 0xFFFF
    int v51 = v37 + 1;
    if (v37 + 1 == v14) {
      break;
    }
    int v52 = *(_DWORD *)(*(void *)(v38 + 8LL * (int)((v51 + v16) >> v39)) + 4LL * (int)((v51 + v16) & v40));
    if (*(_DWORD *)(*(void *)(v38 + 8LL * (int)((v51 + v16 + 1) >> v39)) + 4LL * (int)((v51 + v16 + 1) & v40)) - v52 <= v15)
    {
      if (v50 != 0xFFFF)
      {
LABEL_15:
        ++v36;
        unsigned int v35 = v35 - v15 + v49;
        ++v37;
        goto LABEL_16;
      }
    }

    else if (v50 != *(unsigned __int16 *)(*(void *)(*((void *)v20 + 16) {
                                                     + 8LL * (int)((v52 + v15) >> v20[8]))
    }
                                         + 2LL * ((v20[9] - 1) & (v52 + v15))))
    {
      goto LABEL_15;
    }

    v37 += 2;
    if (v37 < v14)
    {
      do
      {
        int v53 = *(_DWORD *)(*(void *)(v38 + 8LL * (int)((v16 + v37) >> v39)) + 4LL * (int)((v16 + v37) & v40));
        if (*(_DWORD *)(*(void *)(v38 + 8LL * (int)((v16 + v37 + 1) >> v39)) + 4LL * (int)((v16 + v37 + 1) & v40))
           - v53 <= v15)
        {
          if (v50 != 0xFFFF) {
            goto LABEL_16;
          }
        }

        else if (v50 != *(unsigned __int16 *)(*(void *)(*((void *)v20 + 16) {
                                                         + 8LL * (int)((v53 + v15) >> v20[8]))
        }
                                             + 2LL * ((v20[9] - 1) & (v53 + v15))))
        {
          goto LABEL_16;
        }

        ++v37;
      }

      while (v14 != v37);
LABEL_31:
      if (v36 < 1) {
        goto LABEL_65;
      }
      goto LABEL_32;
    }

LABEL_104:
      unsigned int v16 = v169;
    }

    else
    {
      sub_1000CB038(v144, v151);
      if (v118 != v153 - v15) {
        goto LABEL_104;
      }
LABEL_103:
      uint64_t v112 = ++v110 + v169;
      uint64_t v122 = (v122 - 1);
      unsigned int v16 = v169;
    }

    v156 += v152 + 1;
    ++v157;
    LODWORD(v148) = v118 + a12;
    HIDWORD(v148) = v164 + 1;
    sub_100036FB8(a1, a2, v112, v168, LODWORD(v171[0]), (v118 + v15), v122, v158, a9, a10, a11, v148);
    v110 += v122;
    uint64_t v96 = v155;
    if (v110 < v14) {
      continue;
    }
    break;
  }

          uint64_t v73 = *(_WORD *)(a1 + 736);
          uint64_t v74 = *(_WORD *)(a1 + 748);
          unsigned int v116 = v25[2];
          uint64_t v112 = *(void *)(a1 + 376);
          unint64_t result = sub_1000BB868(v112, v29, 0LL);
          int v110 = result;
          uint64_t v75 = 0LL;
          v131[0] = 0;
          uint64_t v119 = v73 + v74 + v40;
          uint64_t v130 = 0;
          uint64_t v129 = 0LL;
          uint64_t v105 = v69;
          uint64_t v106 = v71;
LABEL_108:
          uint64_t v77 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v75);
          uint64_t v78 = *(void *)(*(void *)(a1 + 624) + ((v77 >> 5) & 0x7F8));
          uint64_t v79 = *(_WORD *)(*(void *)(a1 + 568) + 2 * v75);
          uint64_t v80 = *(unsigned __int16 *)(v78 + 2 * v79);
          if ((_DWORD)v71)
          {
            unint64_t result = sub_100005C2C(*(void *)(a1 + 384), *(unsigned __int16 *)(v78 + 2 * v79), v71, v69, v116);
            if (!(_DWORD)result) {
              goto LABEL_107;
            }
          }

          LOWORD(v81) = v119;
          if (*(_DWORD *)(a1 + 856))
          {
            uint64_t v130 = sub_1000BB868(v112, v77, 0LL);
            unint64_t result = sub_1000BBBB0(v112, (uint64_t)&v130, 1u, v110);
            uint64_t v81 = (__int16)(result + v119);
          }

          sub_10009B1B8(*(void *)(a1 + 840), v77, &v129, 0LL, v131);
          int v86 = *(void *)(a1 + 384);
          if (v131[0] < 2)
          {
            uint64_t v76 = sub_100005A94(v86, word_1000FDD20, v80, v71, v82, v83, v84, v85);
            unint64_t result = sub_1000A0B5C(a1, v77, (__int16)v81, v68, v76, (unsigned __int16)word_1000FDD20[v76]);
            if ((_DWORD)result) {
              goto LABEL_107;
            }
            goto LABEL_68;
          }

          unint64_t result = sub_1000057B0(v86, v129[v131[0] - 2], v80, v71, v82, v83, v84, v85);
          int v87 = result;
          unsigned int v88 = *(_DWORD *)(a1 + 604);
          uint64_t v89 = *(void *)(a1 + 592);
          uint64_t v90 = 0;
          uint64_t v91 = v88 - 1;
          if (v88 >= 1)
          {
            while (1)
            {
              int v92 = (uint64_t)(v90 + v91 + (v90 + v91 < 0)) >> 1;
              int v93 = *(unsigned __int16 *)(v89 + 12LL * ((v90 + v91) / 2) + 6);
              int v94 = *(unsigned __int16 *)(v89 + 12LL * ((v90 + v91) / 2) + 4);
              if (v94 > result)
              {
LABEL_115:
                uint64_t v91 = (v90 + v91) / 2 - 1;
              }

              else
              {
                if (v94 >= result)
                {
                  uint64_t v96 = (__int16 *)(v89 + 12LL * ((v90 + v91) / 2));
                  uint64_t v98 = v96[4];
                  uint64_t v99 = *(_DWORD *)(a1 + 696);
                  uint64_t v68 = v117;
                  uint64_t v71 = v106;
LABEL_125:
                  if (v99)
                  {
                    uint64_t v100 = *(_DWORD *)v96;
                    if (v98 != 0x4000 && v100 != v68) {
                      unint64_t result = (unint64_t)sub_100024188( *(uint64_t **)(a1 + 704),  v100,  v68,  (unsigned __int16)v98 - (unsigned __int16)v81,  (unsigned __int16)v98 - *(_WORD *)(a1 + 736));
                    }
                  }

                  v96[4] = v81;
                  *(_DWORD *)uint64_t v96 = v68;
LABEL_107:
                  goto LABEL_108;
                }

LABEL_109:
  sub_1000CB038(v158, v96);
  unint64_t result = (unint64_t)sub_1000CB038(v159, v163);
  *a9 += v157;
  *a10 += v157;
  int v92 = *v19;
  int v93 = v156;
LABEL_110:
  *uint64_t v19 = v92 + v93;
  return result;
}

    if (!v24) {
      goto LABEL_111;
    }
    goto LABEL_110;
  }

  uint64_t v79 = (uint64_t (*)(void *, CFURLRef))a3[13];
  int v50 = v155;
  if (v79)
  {
    uint64_t v70 = (const __CFArray *)v79(a3, url);
    uint64_t v80 = (int)v70;
    if (!v67) {
      goto LABEL_122;
    }
  }

  else
  {
    uint64_t v80 = 0;
    if (!v67) {
      goto LABEL_122;
    }
  }

  uint64_t v70 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, url, @"KeywordIndex.plist", 0);
  if (v70)
  {
    uint64_t v83 = v70;
    unsigned int v84 = VSKeywordIndexSaveToURL(v67, v70);
    if ((_DWORD)v84)
    {
      LODWORD(v67) = 1;
    }

    else
    {
      uint64_t v85 = (os_log_s *)VSGetLogDefault(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)context = 136315138;
        *(void *)&context[4] = "_SaveEngineToCache";
        _os_log_error_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "%s: couldn't write keyword index for cache\n",  context,  0xCu);
      }

      LODWORD(v67) = 0;
    }

    CFRelease(v83);
    if (v80) {
      goto LABEL_154;
    }
    goto LABEL_128;
  }

  LODWORD(v67) = 0;
LABEL_122:
  if (v80) {
    goto LABEL_154;
  }
LABEL_128:
  uint64_t v141 = (int)v67;
  int v86 = *a4;
  int v87 = url;
  if (*a4)
  {
    unsigned int v88 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, *a4, @"Manifest.sqlitedb", 0);
    uint64_t v89 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, v86, @"Manifest.sqlitedb", 0);
    uint64_t v90 = v89;
    if (v88 && v89)
    {
      if (CFURLGetFileSystemRepresentation(v88, 1u, context, 1024LL))
      {
        if (CFURLGetFileSystemRepresentation(v90, 1u, buffer, 1024LL))
        {
          uint64_t v91 = copyfile(context, (const char *)buffer, 0LL, 0);
          if ((_DWORD)v91)
          {
            int v92 = (os_log_s *)VSGetLogDefault(v91);
            if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
            {
              int v93 = *__error();
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v93;
              _os_log_error_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_ERROR,  "err %d copying manifest\n",  buf,  8u);
            }
          }
        }
      }
    }

    else if (!v88)
    {
      goto LABEL_143;
    }

    CFRelease(v88);
LABEL_143:
    int v50 = v155;
    if (v90) {
      CFRelease(v90);
    }
  }

  uint64_t v97 = (void *)sub_1000E98D4(kCFAllocatorDefault, v87);
  if (v97)
  {
    uint64_t v98 = (uint64_t)v97;
    if (v24) {
      CFDictionaryApplyFunction(v24, (CFDictionaryApplierFunction)sub_1000E454C, v97);
    }
    int v150 = a3;
    uint64_t v99 = CFGetAllocator((CFTypeRef)v98);
    MutableCopy = CFStringCreateMutableCopy(v99, 0LL, @"DELETE FROM ValueTranslation");
    pthread_mutex_lock((pthread_mutex_t *)(v98 + 16));
    if (theString)
    {
      uint64_t v101 = CFStringGetLength(theString);
      uint64_t v102 = v101 != 0;
      if (v101) {
        uint64_t v103 = @" model_id = ?";
      }
      else {
        uint64_t v103 = 0LL;
      }
    }

    else
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0LL;
    }

    unint64_t v154 = v24;
    if (v156)
    {
      uint64_t v106 = CFStringGetLength(v156);
      uint64_t v107 = v106 != 0;
      if (v106) {
        uint64_t v108 = @" class_id = ?";
      }
      else {
        uint64_t v108 = 0LL;
      }
    }

    else
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0LL;
    }

    if (v102 || v107) {
      CFStringAppend(MutableCopy, @" WHERE");
    }
    valuea = v68;
    if (v102)
    {
      CFStringAppend(MutableCopy, v103);
      if (v107)
      {
        CFStringAppend(MutableCopy, @" AND");
LABEL_167:
        CFStringAppend(MutableCopy, v108);
      }
    }

    else if (v107)
    {
      goto LABEL_167;
    }

    uint64_t v109 = *(void *)(v98 + 80);
    int v50 = v155;
    if (v109)
    {
      int v110 = CPRecordStoreGetDatabase(v109);
      if (v110)
      {
        uint64_t v111 = CPSqliteDatabaseStatementForWriting(v110, MutableCopy);
        if (v111)
        {
          uint64_t v112 = v111;
          int v143 = v51;
          if (v102)
          {
            uint64_t v113 = CFStringGetLength(theString);
            int v114 = CFStringGetMaximumSizeForEncoding(v113, 0x8000100u);
            int v115 = v114;
            *(void *)buffer = v114;
            if (v114 < 256) {
              unsigned int v116 = context;
            }
            else {
              unsigned int v116 = (UInt8 *)malloc(v114 + 1);
            }
            v175.locatiouint64_t n = 0LL;
            v175.length = v113;
            CFStringGetBytes(theString, v175, 0x8000100u, 0, 0, v116, v115, (CFIndex *)buffer);
            v116[*(void *)buffer] = 0;
            sqlite3_bind_text(*(sqlite3_stmt **)(v112 + 8), 1, (const char *)v116, -1, 0LL);
            int v118 = 2;
            int v50 = v155;
          }

          else
          {
            unsigned int v116 = 0LL;
            int v118 = 1;
          }

          if (v107)
          {
            theStringa = v118;
            int v120 = CFStringGetLength(v156);
            int v121 = CFStringGetMaximumSizeForEncoding(v120, 0x8000100u);
            uint64_t v122 = v121;
            *(void *)buf = v121;
            if (v121 < 256) {
              unsigned int v123 = buffer;
            }
            else {
              unsigned int v123 = (UInt8 *)malloc(v121 + 1);
            }
            v176.locatiouint64_t n = 0LL;
            v176.length = v120;
            CFStringGetBytes(v156, v176, 0x8000100u, 0, 0, v123, v122, (CFIndex *)buf);
            v123[*(void *)buf] = 0;
            sqlite3_bind_text(*(sqlite3_stmt **)(v112 + 8), theStringa, (const char *)v123, -1, 0LL);
            int v50 = v155;
          }

          else
          {
            unsigned int v123 = 0LL;
          }

          CPSqliteStatementPerform(v112);
          CPSqliteStatementReset(v112);
          if (v102 && v116 && v116 != context) {
            free(v116);
          }
          int v51 = v143;
          if (v107 && v123 && v123 != buffer) {
            free(v123);
          }
        }
      }
    }

    CPRecordStoreInvalidateCachedInstancesOfClass(*(void *)(v98 + 80), &off_1000FA7F0, 0LL, 0LL);
    CFRelease(MutableCopy);
    pthread_mutex_unlock((pthread_mutex_t *)(v98 + 16));
    if (v51) {
      CFDictionaryApplyFunction(v51, (CFDictionaryApplierFunction)sub_1000E4810, (void *)v98);
    }
    sub_1000E9A1C(v98);
    CFRelease((CFTypeRef)v98);
    unsigned int v124 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v124, @"VSLocaleIdentifier", valuea);
    CFDictionarySetValue(v124, @"VSEngineIdentifier", (const void *)v150[3]);
    unsigned int v125 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, v150 + 5);
    CFDictionarySetValue(v124, @"VSVersion", v125);
    CFRelease(v125);
    int v126 = (const void *)sub_1000E64E0();
    uint64_t v24 = v154;
    if (v126)
    {
      uint64_t v127 = v126;
      CFDictionarySetValue(v124, @"VSPluginVersions", v126);
      CFRelease(v127);
    }

    *(void *)buffer = 0LL;
    int v128 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, url, @"Info.plist", 0);
    if (!v128) {
      goto LABEL_223;
    }
    uint64_t v129 = v128;
    uint64_t v130 = CFWriteStreamCreateWithFile(kCFAllocatorDefault, v128);
    if (v130)
    {
      unsigned int v131 = v130;
      if (CFWriteStreamOpen(v130))
      {
        int v132 = CFPropertyListWrite(v124, v131, kCFPropertyListBinaryFormat_v1_0, 0LL, (CFErrorRef *)buffer);
        uint64_t v133 = v132;
        if (v132 <= 0)
        {
          int v134 = (os_log_s *)VSGetLogDefault(v132);
          uint64_t v135 = os_log_type_enabled(v134, OS_LOG_TYPE_ERROR);
          if (v135)
          {
            *(_WORD *)context = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_ERROR,  "error writing model configuration cache Info.plist:\n",  context,  2u);
          }

          if (*(void *)buffer)
          {
            uint64_t v136 = (os_log_s *)VSGetLogDefault(v135);
            if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)context = 138412290;
              *(void *)&context[4] = *(void *)buffer;
              _os_log_error_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "%@\n", context, 0xCu);
            }
          }
        }

        CFWriteStreamClose(v131);
        if (*(void *)buffer) {
          CFRelease(*(CFTypeRef *)buffer);
        }
        CFRelease(v131);
        CFRelease(v129);
        int v50 = v155;
        if (v133 >= 1)
        {
          uint64_t v105 = sub_1000E29EC(v150[3]);
          if (!v105
            || !CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024LL)
            || !CFURLGetFileSystemRepresentation(v105, 1u, context, 1024LL))
          {
LABEL_217:
            CFRelease(v124);
            if (v141)
            {
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterPostNotification( DarwinNotifyCenter,  kVSKeywordIndexDidChangeNotification,  0LL,  0LL,  1u);
            }

            uint64_t v138 = (void (*)(void *, const __CFURL *))v150[14];
            if (v138) {
              v138(v150, v105);
            }
            goto LABEL_230;
          }

          VSCFURLDeleteDirectoryContents(v105);
          if (!rename((const char *)buffer, context))
          {
            if (*a4) {
              CFRelease(*a4);
            }
            *a4 = v105;
            CFRetain(v105);
            goto LABEL_217;
          }

          goto LABEL_226;
        }

uint64_t sub_100037C10(unsigned int *a1, unsigned int *a2)
{
  return sub_100037C30(qword_1000FDCE0, *a1, *a2, 1);
}

uint64_t sub_100037C30(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = a2 >> *(_DWORD *)a1;
  uint64_t v6 = *(int *)(a1 + 4) - 1LL;
  uint64_t v7 = v6 & (int)a2;
  unsigned int v8 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)v5) + 4 * v7);
  unsigned int v9 = a3 >> *(_DWORD *)a1;
  int v10 = v6 & a3;
  unsigned int v11 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)v9) + 4LL * (int)(v6 & a3));
  int v12 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v6 & (a2 + 1))) - v8;
  int v13 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a3 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v6 & (a3 + 1))) - v11;
  if (v12 >= v13) {
    int v14 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a3 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v6 & (a3 + 1))) - v11;
  }
  else {
    int v14 = *(_DWORD *)(*(void *)(v4 + 8LL * (int)((a2 + 1) >> *(_DWORD *)a1)) + 4LL * (int)(v6 & (a2 + 1))) - v8;
  }
  if (v14 >= 1)
  {
    do
    {
      uint64_t v15 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128) + 8LL * (int)(v8 >> *(_DWORD *)(a1 + 32)))
                                + 2LL * (int)((*(_DWORD *)(a1 + 36) - 1) & v8))
          - *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 128)
      if ((_DWORD)v15) {
        return v15;
      }
      ++v11;
      ++v8;
    }

    while (--v14);
  }

  uint64_t v15 = (v12 - v13);
  if (v12 != v13) {
    return v15;
  }
  if (*(_DWORD *)(a1 + 176))
  {
    if ((_DWORD)v15) {
      return v15;
    }
  }

  if (a4)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v15) {
    return v15;
    }
  }

  return 0LL;
}

uint64_t sub_100037D5C(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (a1)
  {
    unsigned int v5 = (void *)(a1 + 24);
    __int32 v6 = sub_1000CC52C(a1 + 24);
    if (sub_1000BDB78(a2, v6, v7) && sub_1000BDB78(a2, *(_DWORD *)a1, v8))
    {
      int v9 = sub_1000CC52C((unint64_t)v5);
      if (sub_1000BDBCC(a2, v5, v9 + 1, 2, v10))
      {
        if (sub_100037D5C(*(void *)(a1 + 8), a2)
          && sub_100037D5C(*(void *)(a1 + 16), a2))
        {
          return 1LL;
        }
      }
    }
  }

  else if (sub_1000BDB78(a2, -1, a3))
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_100037E30(void *a1, uint64_t a2)
{
  int v15 = 0;
  uint64_t result = sub_1000BCD38(a2, &v15);
  if (!(_DWORD)result) {
    return result;
  }
  int v12 = v15;
  if (v15 == -1)
  {
    int v14 = 0LL;
LABEL_11:
    *a1 = v14;
    return 1LL;
  }

  if (v15 <= 7) {
    int v12 = 7;
  }
  sub_1000C0BFC((2LL * (v12 - 7) + 47) & 0x3FFFFFFF8LL, v5, v6, v7, v8, v9, v10, v11);
  int v14 = v13;
  uint64_t result = sub_1000BCD38(a2, v13);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1000BD194(a2, v15 + 1, v14 + 24);
    if ((_DWORD)result)
    {
      uint64_t result = sub_100037E30(v14 + 8, a2);
      if ((_DWORD)result)
      {
        uint64_t result = sub_100037E30(v14 + 16, a2);
        if ((_DWORD)result) {
          goto LABEL_11;
        }
      }
    }
  }

  return result;
}

uint64_t sub_100037F0C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C133C(*(void *)(result + 32));
    *(void *)(v1 + 24) = 0LL;
    *(void *)(v1 + 32) = 0LL;
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100037F40(uint64_t result, int16x8_t *a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)result;
  uint64_t v3 = *(unsigned int *)(result + 4);
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if ((int)v4 < 1)
  {
    int v8 = 0;
    goto LABEL_10;
  }

  if (v4 < 0x10)
  {
    uint64_t v7 = 0LL;
    int v8 = 0;
LABEL_8:
    unsigned int v16 = &a2->i16[v7];
    uint64_t v17 = v4 - v7;
    do
    {
      int v18 = *v16++;
      v8 += v18;
      --v17;
    }

    while (v17);
    goto LABEL_10;
  }

  uint64_t v7 = v4 & 0x7FFFFFF0;
  uint64_t v9 = a2 + 1;
  int32x4_t v10 = 0uLL;
  uint64_t v11 = v4 & 0xFFFFFFF0;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  do
  {
    int16x8_t v15 = v9[-1];
    int32x4_t v12 = vaddw_high_s16(v12, v15);
    int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v15.i8);
    int32x4_t v14 = vaddw_high_s16(v14, *v9);
    int32x4_t v13 = vaddw_s16(v13, *(int16x4_t *)v9->i8);
    v9 += 2;
    v11 -= 16LL;
  }

  while (v11);
  int v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v13, v10), vaddq_s32(v14, v12)));
  if (v7 != v4) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v19 = *(int16x8_t ***)(result + 24);
  if (*(_DWORD *)(result + 20)) {
    v8 /= (int)v4;
  }
  int v20 = v8 << (v5 - v6);
  int v21 = (v8 + (1 << (v6 - v5 - 1))) >> (v6 - v5);
  BOOL v22 = __OFSUB__(v6, v5);
  int v23 = v6 - v5;
  if ((v23 < 0) ^ v22 | (v23 == 0)) {
    int v24 = v20;
  }
  else {
    int v24 = v21;
  }
  if (v24 >= 0x7FFF) {
    LOWORD(v24) = 0x7FFF;
  }
  *a3 = v24;
  if ((int)v3 >= 2)
  {
    uint64_t v25 = (_DWORD *)(result + 16);
    if ((int)v4 > 0)
    {
      uint64_t result = 4294934528LL;
      uint64_t v26 = 1LL;
      while (1)
      {
        uint64_t v28 = *v19;
        if (v4 >= 0x10)
        {
          uint64_t v31 = &v28->i16[v4 & 0xFFFFFFF0];
          int v32 = v28 + 1;
          int32x4_t v33 = 0uLL;
          uint64_t v34 = v4 & 0xFFFFFFF0;
          unsigned int v35 = a2 + 1;
          int32x4_t v36 = 0uLL;
          int32x4_t v37 = 0uLL;
          int32x4_t v38 = 0uLL;
          do
          {
            int16x8_t v39 = v35[-1];
            int16x8_t v40 = v32[-1];
            int32x4_t v36 = vmlal_high_s16(v36, v40, v39);
            int32x4_t v33 = vmlal_s16(v33, *(int16x4_t *)v40.i8, *(int16x4_t *)v39.i8);
            int32x4_t v38 = vmlal_high_s16(v38, *v32, *v35);
            int32x4_t v37 = vmlal_s16(v37, *(int16x4_t *)v32->i8, *(int16x4_t *)v35->i8);
            v35 += 2;
            v32 += 2;
            v34 -= 16LL;
          }

          while (v34);
          int v30 = vaddvq_s32(vaddq_s32(vaddq_s32(v37, v33), vaddq_s32(v38, v36)));
          uint64_t v29 = v4 & 0xFFFFFFF0;
          if ((v4 & 0x7FFFFFF0) == v4) {
            goto LABEL_20;
          }
        }

        else
        {
          uint64_t v29 = 0LL;
          int v30 = 0;
          uint64_t v31 = (__int16 *)*v19;
        }

        uint64_t v41 = &a2->i16[v29];
        uint64_t v42 = v4 - v29;
        do
        {
          int v44 = *v41++;
          int v43 = v44;
          int v45 = *v31++;
          v30 += v45 * v43;
          --v42;
        }

        while (v42);
LABEL_20:
        ++v19;
        int v27 = ((1 << (*v25 + v23 - 1)) + v30) >> (*v25 + v23);
        if (v27 >= 0x7FFF) {
          int v27 = 0x7FFF;
        }
        if (v27 <= -32768) {
          LOWORD(v27) = 0x8000;
        }
        a3[v26++] = v27;
        if (v26 == v3) {
          return result;
        }
      }
    }

    if (v3 >= 0x11 && ((unint64_t)(a3 + 1) >= result + 20 || v25 >= (_DWORD *)&a3[v3]))
    {
      unint64_t v50 = (v3 - 1) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v46 = v50 | 1;
      int32x4_t v51 = vdupq_n_s32(*v25 + v23);
      v52.i64[0] = -1LL;
      v52.i64[1] = -1LL;
      v53.i64[0] = 0x100000001LL;
      v53.i64[1] = 0x100000001LL;
      int32x4_t v54 = vshlq_s32((int32x4_t)vshlq_u32(v53, (uint32x4_t)vaddq_s32(v51, v52)), vnegq_s32(v51));
      int16x8_t v55 = vqmovn_high_s32(vqmovn_s32(v54), v54);
      int v56 = (int16x8_t *)(a3 + 9);
      unint64_t v57 = v50;
      do
      {
        v56[-1] = v55;
        *int v56 = v55;
        v56 += 2;
        v57 -= 16LL;
      }

      while (v57);
      if (v3 - 1 == v50) {
        return result;
      }
    }

    else
    {
      uint64_t v46 = 1LL;
    }

    uint64_t v47 = v3 - v46;
    int v48 = &a3[v46];
    do
    {
      int v49 = 1 << (*v25 + v23 - 1) >> (*v25 + v23);
      if (v49 >= 0x7FFF) {
        int v49 = 0x7FFF;
      }
      if (v49 <= -32768) {
        LOWORD(v49) = 0x8000;
      }
      *v48++ = v49;
      --v47;
    }

    while (v47);
  }

  return result;
}

void *sub_100038210( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BCAE8(a1, "bdc0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  int32x4_t v10 = (void *)sub_1000C1074(40LL);
  if (v10)
  {
    if (!sub_1000BCD38(v9, v10)
      || !sub_1000BCD38(v9, (char *)v10 + 4)
      || !sub_1000BCD38(v9, v10 + 1)
      || !sub_1000BCD38(v9, (char *)v10 + 12)
      || !sub_1000BCD38(v9, v10 + 2)
      || (uint64_t v11 = (void **)sub_1000C13F8(2LL, (*((_DWORD *)v10 + 1) - 1), *(unsigned int *)v10),
          v10[3] = v11,
          v10[4] = v11,
          !sub_1000BD3B4(v9, v11, *((_DWORD *)v10 + 1) - 1, *(_DWORD *)v10, 2)))
    {
      sub_1000C133C(v10[4]);
      v10[3] = 0LL;
      v10[4] = 0LL;
      sub_1000C0EF8((uint64_t)v10);
      int32x4_t v10 = 0LL;
    }
  }

  sub_1000BCBC8(v9);
  return v10;
}

uint64_t sub_100038308(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5)
{
  if (*(_BYTE *)(a1 + 244))
  {
    if (*(_BYTE *)(a1 + 245))
    {
      uint64_t v9 = (BOOL (*)(uint64_t, int, int, uint64_t, unsigned int))sub_100038664;
LABEL_5:
      int v10 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * a3);
      goto LABEL_6;
    }

    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = a5 + *(_DWORD *)(a1 + 240) * (int)a3;
    if (!*(_WORD *)(v12 + 6 * v13 + 2)) {
      goto LABEL_34;
    }
    BOOL v22 = (__int16 *)(v12 + 6LL * (int)v13);
    int v25 = *v22;
    int v23 = v22 + 2;
    int v24 = v25;
    uint64_t v26 = *(void *)(a1 + 144);
    uint64_t v27 = *(void *)(a1 + 128);
    int v28 = *(_DWORD *)(a1 + 52);
    uint64_t v29 = *(void *)(a1 + 24);
    if (*(_BYTE *)(a1 + 246))
    {
      int v30 = 0;
      while (1)
      {
        int v31 = v24 - v30;
        unint64_t v32 = (byte_1000F166C[((_BYTE)v24 - (_BYTE)v30) & 7] & *(_BYTE *)(v26
                                                                                         + ((unint64_t)(v24 - v30) >> 3))) != 0
            ? a2
            : a4;
        if ((byte_1000F166C[v32 & 7] & *(_BYTE *)(v29
                                                                  + v28
                                                                  * (unint64_t)*(unsigned __int8 *)(v27 + v31)
                                                                  + (v32 >> 3))) != 0)
          break;
        int v19 = *(__int16 *)(*(void *)(a1 + 96) + 2LL * v31);
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_33;
        }
LABEL_25:
        int v30 = (__int16)v19;
        if ((v19 & 0x8000) == 0) {
          return (unsigned __int16)v19;
        }
      }

      int v19 = *(__int16 *)(*(void *)(a1 + 112) + 2LL * v31);
      if (v19 < 0) {
        goto LABEL_25;
      }
LABEL_33:
      LOWORD(v19) = *v23 + v19;
      goto LABEL_25;
    }

    int v34 = 0;
    while (1)
    {
      int v35 = v24 - v34;
      unint64_t v36 = (byte_1000F166C[((_BYTE)v24 - (_BYTE)v34) & 7] & *(_BYTE *)(v26
                                                                                       + ((unint64_t)(v24 - v34) >> 3))) != 0
          ? a2
          : a4;
      if ((byte_1000F166C[v36 & 7] & *(_BYTE *)(v29
                                                                + v28
                                                                * (unint64_t)*(unsigned __int8 *)(v27 + v35)
                                                                + (v36 >> 3))) != 0)
        break;
      int v19 = *(char *)(*(void *)(a1 + 64) + v35);
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_46;
      }
LABEL_38:
      int v34 = (__int16)v19;
      if (v19 << 16 >= -65535) {
        return (unsigned __int16)v19;
      }
    }

    int v19 = *(char *)(*(void *)(a1 + 80) + v35);
    if (v19 < 0) {
      goto LABEL_38;
    }
LABEL_46:
    v19 += (unsigned __int16)*v23;
    goto LABEL_38;
  }

  uint64_t v9 = sub_1000385D8;
  if (*(_BYTE *)(a1 + 245)) {
    goto LABEL_5;
  }
  int v10 = a3;
LABEL_6:
  int v11 = a5 + *(_DWORD *)(a1 + 240) * v10;
  uint64_t v12 = *(void *)(a1 + 8);
  LODWORD(v13) = v11;
  int32x4_t v14 = (__int16 *)(v12 + 6LL * v11);
  if (v14[1])
  {
    int16x8_t v15 = (_WORD *)(v12 + 6LL * v11 + 4);
    int v16 = 0;
    if (!*(_BYTE *)(a1 + 246))
    {
      while (1)
      {
        uint64_t v17 = *v14;
        uint64_t v18 = v17 + v16;
        if (v9(a1, v17 + v16, a2, a3, a4)) {
          break;
        }
        int v19 = *(char *)(*(void *)(a1 + 64) + v18);
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_10;
        }
LABEL_11:
        if (v19 << 16 >= -65535) {
          return (unsigned __int16)v19;
        }
        int v16 = -(__int16)v19;
      }

      int v19 = *(char *)(*(void *)(a1 + 80) + v18);
      if (v19 < 0) {
        goto LABEL_11;
      }
LABEL_10:
      v19 += (unsigned __int16)*v15;
      goto LABEL_11;
    }

    while (1)
    {
      int v20 = v16 + *v14;
      if (v9(a1, v20, a2, a3, a4))
      {
        int v19 = *(__int16 *)(*(void *)(a1 + 112) + 2LL * v20);
        if (v19 < 0) {
          goto LABEL_15;
        }
      }

      else
      {
        int v19 = *(__int16 *)(*(void *)(a1 + 96) + 2LL * v20);
        if (v19 < 0) {
          goto LABEL_15;
        }
      }

      __int16 v21 = *v15 + v19;
      int v19 = v21;
      if ((v21 & 0x8000) == 0) {
        return (unsigned __int16)v19;
      }
LABEL_15:
      int v16 = -v19;
    }
  }

BOOL sub_1000385D8(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5 = *(void *)(a1 + 24) + *(int *)(a1 + 52) * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 128) + a2);
  if (a3 != 0xFFFF
    && (byte_1000F166C[(a3 + *(_DWORD *)(a1 + 56) / 2) & 7LL] & *(_BYTE *)(v5
                                                                                          + ((unint64_t)(a3 + *(_DWORD *)(a1 + 56) / 2) >> 3))) != 0)
  {
    return 1LL;
  }

  return a5 != 0xFFFF && (byte_1000F166C[a5 & 7] & *(_BYTE *)(v5 + ((unint64_t)a5 >> 3))) != 0;
}

BOOL sub_100038664(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5 = (unint64_t)a2 >> 3;
  int v6 = byte_1000F166C[a2 & 7];
  int v7 = (v6 & *(_BYTE *)(*(void *)(a1 + 144) + v5));
  if (!*(_BYTE *)(a1 + 245))
  {
    BOOL v9 = v7 == 0;
LABEL_9:
    if (v9) {
      unint64_t v10 = a5;
    }
    else {
      unint64_t v10 = a3;
    }
    if ((_DWORD)v10 != 0xFFFF) {
      return (byte_1000F166C[v10 & 7] & *(_BYTE *)(*(void *)(a1 + 24)
    }
                                                                  + *(int *)(a1 + 52)
    return 0LL;
  }

  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 152) + v5);
  BOOL v9 = v7 == 0;
  if ((v8 & v6) == 0) {
    goto LABEL_9;
  }
  if (v7) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = a4;
  }
  if ((_DWORD)v10 != 0xFFFF) {
    return (byte_1000F166C[v10 & 7] & *(_BYTE *)(*(void *)(a1 + 24)
  }
                                                                + *(int *)(a1 + 52)
  return 0LL;
}

uint64_t sub_100038714(uint64_t a1, unsigned int a2, int a3)
{
  if (*(_BYTE *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * a2);
  }
  return *(__int16 *)(*(void *)(a1 + 8) + 6LL * (int)(a3 + *(_DWORD *)(a1 + 240) * a2) + 2);
}

uint64_t sub_100038740(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (*(_BYTE *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * a2);
  }
  int v4 = a3 + *(_DWORD *)(a1 + 240) * a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(__int16 *)(v5 + 6LL * v4) + (uint64_t)a4;
  if (!*(_BYTE *)(a1 + 246))
  {
    LODWORD(v6) = *(char *)(*(void *)(a1 + 64) + v6);
    if ((v6 & 0x80000000) != 0) {
      return (__int16)v6;
    }
    goto LABEL_5;
  }

  LOWORD(v6) = *(_WORD *)(*(void *)(a1 + 96) + 2 * v6);
  if (((__int16)v6 & 0x80000000) == 0) {
LABEL_5:
  }
    LOWORD(v6) = v6 + *(_WORD *)(v5 + 6LL * v4 + 4);
  return (__int16)v6;
}

uint64_t sub_1000387B0(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (*(_BYTE *)(a1 + 245)) {
    a2 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * a2);
  }
  int v4 = a3 + *(_DWORD *)(a1 + 240) * a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(__int16 *)(v5 + 6LL * v4) + (uint64_t)a4;
  if (!*(_BYTE *)(a1 + 246))
  {
    LODWORD(v6) = *(char *)(*(void *)(a1 + 80) + v6);
    if ((v6 & 0x80000000) != 0) {
      return (__int16)v6;
    }
    goto LABEL_5;
  }

  LOWORD(v6) = *(_WORD *)(*(void *)(a1 + 112) + 2 * v6);
  if (((__int16)v6 & 0x80000000) == 0) {
LABEL_5:
  }
    LOWORD(v6) = v6 + *(_WORD *)(v5 + 6LL * v4 + 4);
  return (__int16)v6;
}

uint64_t sub_100038820(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000C0EF8(*(void *)(result + 16));
    v1[1] = 0LL;
    v1[2] = 0LL;
    sub_1000C0EF8(v1[9]);
    v1[8] = 0LL;
    v1[9] = 0LL;
    sub_1000C0EF8(v1[11]);
    v1[10] = 0LL;
    v1[11] = 0LL;
    sub_1000C0EF8(v1[13]);
    v1[12] = 0LL;
    v1[13] = 0LL;
    sub_1000C0EF8(v1[15]);
    v1[14] = 0LL;
    v1[15] = 0LL;
    sub_1000C0EF8(v1[17]);
    v1[16] = 0LL;
    v1[17] = 0LL;
    sub_1000C0EF8(v1[21]);
    v1[18] = 0LL;
    v1[21] = 0LL;
    sub_1000C0EF8(v1[22]);
    v1[19] = 0LL;
    v1[22] = 0LL;
    sub_1000C0EF8(v1[23]);
    v1[20] = 0LL;
    v1[23] = 0LL;
    sub_1000C0EF8(v1[25]);
    v1[24] = 0LL;
    v1[25] = 0LL;
    sub_1000C0EF8(v1[4]);
    v1[3] = 0LL;
    v1[4] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_1000388D8(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)(a1 + 216);
  if (*(int *)a1 >= 1)
  {
    int v4 = 0;
    unsigned __int16 v5 = 0;
    LODWORD(v6) = -1;
    while (v5)
    {
      signed int v7 = *(_DWORD *)(a1 + 240);
      uint64_t v6 = sub_1000BE540(v7, v6);
      if (v7 >= 1) {
        goto LABEL_8;
      }
LABEL_3:
      int v4 = ++v5;
      if (v2 <= v5) {
        goto LABEL_17;
      }
    }

    signed int v7 = 1;
    LODWORD(v6) = sub_1000BE540(1u, v6);
LABEL_8:
    uint64_t v8 = 0LL;
    do
    {
      int v9 = v4;
      if (*(_BYTE *)(a1 + 245)) {
        int v9 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * v5);
      }
      unsigned int v10 = sub_1000BE540(*(__int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v9) + 2), v6);
      int v11 = v4;
      if (*(_BYTE *)(a1 + 245)) {
        int v11 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * v5);
      }
      unsigned int v12 = sub_1000BE540( *(unsigned __int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v11) + 4),  v10);
      int v13 = v4;
      if (*(_BYTE *)(a1 + 245)) {
        int v13 = *(__int16 *)(*(void *)(a1 + 192) + 2LL * v5);
      }
      uint64_t v6 = sub_1000BE540(*(__int16 *)(*(void *)(a1 + 8) + 6 * (v8 + *(int *)(a1 + 240) * (uint64_t)v13)), v12);
      ++v8;
    }

    while (v7 != (_DWORD)v8);
    goto LABEL_3;
  }

  uint64_t v6 = 0xFFFFFFFFLL;
LABEL_17:
  if (*(_BYTE *)(a1 + 246))
  {
    uint64_t v14 = sub_1000BE770(*(unint64_t **)(a1 + 96), 2, v3, v6);
    int16x8_t v15 = *(unint64_t **)(a1 + 112);
    int v16 = 2;
  }

  else
  {
    uint64_t v14 = sub_1000BE770(*(unint64_t **)(a1 + 64), 1, v3, v6);
    int16x8_t v15 = *(unint64_t **)(a1 + 80);
    int v16 = 1;
  }

  uint64_t v17 = sub_1000BE770(v15, v16, v3, v14);
  uint64_t v18 = sub_1000BE770(*(unint64_t **)(a1 + 128), 1, v3, v17);
  uint64_t v19 = sub_1000BE770(*(unint64_t **)(a1 + 24), 1, *(_DWORD *)(a1 + 40), v18);
  if (*(_BYTE *)(a1 + 244) && !*(_DWORD *)(a1 + 248))
  {
    int v24 = v3 + 7;
    if (v3 < -7) {
      int v24 = v3 + 14;
    }
    uint64_t v19 = sub_1000BE770(*(unint64_t **)(a1 + 144), 1, v24 >> 3, v19);
    if (*(_BYTE *)(a1 + 245)) {
      goto LABEL_23;
    }
    return v19;
  }

  if (!*(_BYTE *)(a1 + 245)) {
    return v19;
  }
LABEL_23:
  int v20 = *(_DWORD *)a1;
  int v21 = v3 + 7;
  if (v3 < -7) {
    int v21 = v3 + 14;
  }
  uint64_t v22 = sub_1000BE770(*(unint64_t **)(a1 + 152), 1, v21 >> 3, v19);
  return sub_1000BE770(*(unint64_t **)(a1 + 192), 2, v20, v22);
}

uint64_t sub_100038B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = 0LL;
  switch(a6)
  {
    case 1:
      uint64_t v14 = sub_100051C50(a1, a2, a5, 0);
      goto LABEL_20;
    case 3:
    case 7:
    case 9:
      if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1164)) {
        return 0LL;
      }
      uint64_t v14 = sub_10006633C(a1, a2, a5, a6 == 7, a6 == 9);
      goto LABEL_20;
    case 4:
      uint64_t v14 = sub_10009D9C0(a1, a2, a5);
      goto LABEL_20;
    case 5:
      uint64_t v14 = sub_10003E154(a1, a2, a3, a4, a5);
      goto LABEL_20;
    case 6:
      uint64_t v14 = (uint64_t)sub_10003C700(a1, a2, a3, a4, a5);
      goto LABEL_20;
    case 8:
      uint64_t v15 = sub_1000C1074(520LL);
      uint64_t v12 = v15;
      if (v15)
      {
        *(_DWORD *)(v15 + 368) = 8;
        *(void *)uint64_t v15 = sub_10003B32C;
      }

      return v12;
    case 10:
      uint64_t v14 = sub_100051C50(a1, a2, a5, 1);
      goto LABEL_20;
    case 11:
      uint64_t v14 = sub_1000AFBD8(a1, a2, a3, a5);
LABEL_20:
      uint64_t v12 = v14;
      if (a6 != 8)
      {
        if (v14)
        {
          int v16 = *(void (**)(uint64_t, void, uint64_t))(v14 + 48);
          if (v16) {
            v16(v14, 0LL, 0x4000LL);
          }
        }
      }

      break;
    default:
      return v12;
  }

  return v12;
}

uint64_t sub_100038D14(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 48);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100038D28(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    sub_1000A266C(*(void *)(result + 504));
    *(void *)(v3 + 504) = 0LL;
    sub_1000A266C(*(void *)(v3 + 496));
    *(void *)(v3 + 496) = 0LL;
    sub_1000A1874(*(void *)(v3 + 488));
    *(void *)(v3 + 488) = 0LL;
    uint64_t v4 = *(void *)(v3 + 392);
    if (v4)
    {
      if (*(_DWORD *)(v3 + 400)) {
        sub_100059670(v4);
      }
    }

    *(void *)(v3 + 392) = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t))v3)(v3, a2);
  }

  return result;
}

uint64_t sub_100038D98(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 8);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100038DA8(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 372), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 416), 4, v2);
  unsigned int v4 = sub_1000BE644(*(char *)(a1 + 424), 1, v3);
  if (*(_BYTE *)(a1 + 424))
  {
    unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 428), 4, v4);
    LODWORD(v6) = *(_DWORD *)(a1 + 452);
  }

  else
  {
    unsigned int v5 = sub_1000BE644(0x4000u, 2, v4);
    LODWORD(v6) = *(_DWORD *)(a1 + 452);
  }

  uint64_t v7 = 0LL;
  do
  {
    unsigned int v5 = sub_1000BE644(*(unsigned __int16 *)(a1 + 448 + 2 * v7++), 2, v5);
    uint64_t v6 = *(int *)(a1 + 452);
  }

  while (v7 < v6);
LABEL_7:
  unsigned int v8 = sub_1000BE644(v6, 4, v5);
  if (*(int *)(a1 + 460) >= 1)
  {
    uint64_t v9 = 0LL;
    do
      unsigned int v8 = sub_1000BE644(*(unsigned __int16 *)(a1 + 456 + 2 * v9++), 2, v8);
    while (v9 < *(int *)(a1 + 460));
  }

  return sub_1000BE644(*(_DWORD *)(a1 + 512), 4, v8);
}

uint64_t sub_100038EB4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 272);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100038EC8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 16);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100038EDC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 24);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100038EF0(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 264);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100038F00(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    *(_BYTE *)(a1 + 424) = 0;
    *(_DWORD *)(a1 + 428) = 0x4000;
    *(_DWORD *)(a1 + 416) = 0x40000000;
    return 1LL;
  }

  uint64_t v5 = qword_1000FDCC0;
  if (qword_1000FDCC0 && (*(_DWORD *)(qword_1000FDCC0 + 5356) || *(_DWORD *)(qword_1000FDCC0 + 5292)))
  {
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 424) = 1;
    *(_DWORD *)(a1 + 428) = a3;
    *(_DWORD *)(a1 + 416) = 0;
  }

  else
  {
    uint64_t result = sub_10000460C(*(void *)(a1 + 384));
    uint64_t v5 = qword_1000FDCC0;
    *(_BYTE *)(a1 + 424) = 1;
    *(_DWORD *)(a1 + 428) = a3;
    *(_DWORD *)(a1 + 416) = 0;
    if (!v5) {
      return result;
    }
  }

  if (*(_DWORD *)(v5 + 5268))
  {
    if (*(_DWORD *)(v5 + 5316)) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100038FBC(uint64_t a1, int a2, int a3)
{
  return sub_100006E54(*(void *)(a1 + 384), *(void *)(a1 + 408), a2, a3);
}

uint64_t sub_100038FD4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 184);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100038FE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

uint64_t sub_100038FF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 208))();
}

uint64_t sub_100038FF8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 224);
  if (v1) {
    return v1();
  }
  else {
    return 0x40000000LL;
  }
}

uint64_t sub_10003900C(uint64_t result)
{
  if (*(void *)(result + 224)) {
    return (*(uint64_t (**)(void))(result + 248))();
  }
  return result;
}

uint64_t sub_100039020(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 256);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039030(uint64_t result)
{
  *(_DWORD *)(result + 468) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(result + 280);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8, int *a9, int *a10)
{
  unsigned int v24 = 0;
  *a7 = 0;
  *a8 = 0;
  if (!qword_1000FDCC0)
  {
    *a8 = 0;
    uint64_t v14 = qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_8:
      *a7 = v14;
      int v15 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        int v15 = *(_DWORD *)(qword_1000FDCC0 + 4488);
      }
      *a9 = v15;
      int v16 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        int v16 = *(_DWORD *)(qword_1000FDCC0 + 4496);
      }
      *a10 = v16;
      return 1LL;
    }

LABEL_23:
      int v19 = 1000;
      int v20 = 3000;
      int v18 = 10000;
      int v21 = 1500;
      goto LABEL_52;
    }

    int v19 = 200;
    int v18 = 4000;
    int v21 = 500;
    int v20 = 500;
    goto LABEL_52;
  }

  uint64_t result = sub_10002689C(a3, a4, &v24);
  if ((_DWORD)result) {
    goto LABEL_16;
  }
  return result;
}

    uint64_t result = 0LL;
    ++*(_DWORD *)(a1 + 512);
    return result;
  }

    uint64_t v76 = 0LL;
    if (sub_1000A2908(0, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
    {
      *(_DWORD *)(a1 + 680) = 0;
      *(_DWORD *)(a1 + 684) = HIDWORD(v76);
      *(_DWORD *)(a1 + 688) = v76;
      *(_DWORD *)(a1 + 692) = sub_1000597F0(*(void *)a1);
      *(void *)(a1 + 696) = 0x100000001LL;
    }

    goto LABEL_27;
  }

  return result;
}

  *(_WORD *)(a1 + 564) = 0;
  int v23 = *(_DWORD *)(a1 + 896);
  if (v23 >= *(_DWORD *)(a1 + 900)) {
    goto LABEL_25;
  }
  uint64_t v7 = 0LL;
  *(_WORD *)(a1 + 562) = v23;
LABEL_26:
  unsigned int v8 = 4;
LABEL_27:
  *(_DWORD *)(a1 + 524) = v8;
  return v7;
}

  uint64_t v17 = a2[1];
  if (v7 < v17)
  {
LABEL_24:
    *(_WORD *)(a3 + 2) = 0x4000;
    goto LABEL_25;
  }

    int v34 = v45 + 1;
    unint64_t v32 = (unsigned __int16)(v45 + 1);
    int v31 = *(_DWORD *)(a1 + 1072);
  }

  while (v31 > v32);
  int v13 = v244;
  if (v33 >= 1 && (int)v262 >= 1)
  {
    if (!v9)
    {
      uint64_t v211 = (double)v33;
      if (v262 >= 8 && (v260 <= a6 || (unint64_t)v21 >= a6 + 8LL * v262))
      {
        int v235 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v211, 0);
        int32x4_t v236 = v21 + 1;
        int32x4_t v237 = (float64x2_t *)(a6 + 32);
        uint64_t v238 = v262 & 0xFFFFFFF8;
        do
        {
          int v239 = v236[-1];
          v240.i64[0] = v239.i32[2];
          v240.i64[1] = v239.i32[3];
          int v241 = vcvtq_f64_s64(v240);
          v240.i64[0] = v239.i32[0];
          v240.i64[1] = v239.i32[1];
          float64x2_t v242 = vcvtq_f64_s64(v240);
          v240.i64[0] = (int)v236->i64[1];
          v240.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v236);
          uint32x4_t v243 = vcvtq_f64_s64(v240);
          v240.i64[0] = v236->i32[0];
          v240.i64[1] = (int)HIDWORD(v236->i64[0]);
          v237[-2] = vdivq_f64(v242, v235);
          v237[-1] = vdivq_f64(v241, v235);
          *int32x4_t v237 = vdivq_f64(vcvtq_f64_s64(v240), v235);
          v237[1] = vdivq_f64(v243, v235);
          v237 += 4;
          v236 += 2;
          v238 -= 8LL;
        }

        while (v238);
        if (v256 == v262) {
          goto LABEL_191;
        }
      }

      else
      {
        v256 = 0LL;
      }

      int v212 = &v21->i32[v256];
      BOOL v213 = v262 - v256;
      int v214 = (double *)(a6 + 8 * v256);
      do
      {
        float64x2_t v215 = *v212++;
        *v214++ = (double)v215 / v211;
        --v213;
      }

      while (v213);
      goto LABEL_191;
    }

    if (v262 < 8)
    {
      int v203 = 0LL;
LABEL_182:
      uint64_t v204 = (double *)(a6 + 8 * v203);
      int64x2_t v205 = &v21->i32[v203];
      int v206 = &v261->i32[v203];
      uint64_t v207 = v262 - v203;
      do
      {
        float64x2_t v209 = *v206++;
        uint64_t v208 = v209;
        int v210 = *v205++;
        *v204++ = (double)v210 / (double)v208;
        --v207;
      }

      while (v207);
      goto LABEL_191;
    }

    int v203 = 0LL;
    int v217 = a6 + 8LL * v262;
    uint64_t v219 = v260 > a6 && (unint64_t)v21 < v217;
    if (v219) {
      goto LABEL_182;
    }
    uint32x4_t v221 = v261 + 1;
    int v222 = v21 + 1;
    uint64_t v223 = (float64x2_t *)(a6 + 32);
    int v224 = v262 & 0xFFFFFFF8;
    do
    {
      int v225 = v221[-1];
      uint64_t v226 = v222[-1];
      v227.i64[0] = v226.i32[2];
      v227.i64[1] = v226.i32[3];
      int v228 = vcvtq_f64_s64(v227);
      v227.i64[0] = v226.i32[0];
      v227.i64[1] = v226.i32[1];
      signed int v229 = vcvtq_f64_s64(v227);
      v227.i64[0] = (int)v222->i64[1];
      v227.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v222);
      signed int v230 = vcvtq_f64_s64(v227);
      v227.i64[0] = v222->i32[0];
      v227.i64[1] = (int)HIDWORD(v222->i64[0]);
      uint64_t v231 = vcvtq_f64_s64(v227);
      v227.i64[0] = v225.i32[2];
      v227.i64[1] = v225.i32[3];
      uint64_t v232 = vcvtq_f64_s64(v227);
      v227.i64[0] = v225.i32[0];
      v227.i64[1] = v225.i32[1];
      uint64_t v233 = vcvtq_f64_s64(v227);
      v227.i64[0] = (int)v221->i64[1];
      v227.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v221);
      v234 = vcvtq_f64_s64(v227);
      v227.i64[0] = v221->i32[0];
      v227.i64[1] = (int)HIDWORD(v221->i64[0]);
      v223[-2] = vdivq_f64(v229, v233);
      v223[-1] = vdivq_f64(v228, v232);
      *uint64_t v223 = vdivq_f64(v231, vcvtq_f64_s64(v227));
      v223[1] = vdivq_f64(v230, v234);
      v223 += 4;
      v221 += 2;
      v222 += 2;
      v224 -= 8LL;
    }

    while (v224);
    int v203 = v262 & 0xFFFFFFF8;
    if (v256 != v262) {
      goto LABEL_182;
    }
  }

    unsigned int v24 = *v13++;
    int v23 = v24;
    if (*(_BYTE *)(v12 + v24) == 2)
    {
      int v25 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v23);
      uint64_t v26 = *v25;
      uint64_t v17 = v25[1] + ~(_DWORD)v26;
      int v20 = (unsigned __int8 *)(*(void *)(v4 + 88) + v26);
      goto LABEL_25;
    }

  *int v21 = 0;
  if (*(_DWORD *)(result + 832))
  {
    if (v25)
    {
      --v25;
      int v34 = *v12++;
      *a5 = v34;
      if (v34 == 16) {
        goto LABEL_33;
      }
    }

    else
    {
      int v35 = (*a2)++;
      unint64_t v36 = *v35;
      if (*(_BYTE *)(v5 + v36) == 2)
      {
        int32x4_t v37 = (unsigned __int16 *)(*(void *)(result + 72) + 2 * v36);
        int32x4_t v38 = *v37;
        int v25 = v37[1] + ~(_DWORD)v38;
        int16x8_t v39 = (unsigned __int8 *)(*(void *)(result + 56) + v38);
        int16x8_t v40 = *v39;
        uint64_t v12 = v39 + 1;
        *a5 = v40;
        if (v40 == 16) {
          goto LABEL_33;
        }
      }

      else
      {
        int v25 = 0;
        *a5 = v36;
        if ((_DWORD)v36 == 16)
        {
          do
          {
            while (1)
            {
LABEL_33:
              while (v25)
              {
                --v25;
                uint64_t v41 = *v12++;
                *a4++ = v41;
                if (v41 <= 0x1F) {
                  goto LABEL_38;
                }
              }

              uint64_t v42 = (*a2)++;
              int v43 = *v42;
              if (*(_BYTE *)(v5 + v43) != 2) {
                break;
              }
              int v44 = *(void *)(result + 72);
              int v45 = *(unsigned __int16 *)(v44 + 2 * v43);
              int v25 = *(unsigned __int16 *)(v44 + 2 * v43 + 2) + ~(_DWORD)v45;
              uint64_t v46 = (unsigned __int8 *)(*(void *)(result + 56) + v45);
              uint64_t v47 = *v46;
              uint64_t v12 = v46 + 1;
              *a4++ = v47;
              if (v47 <= 0x1F) {
                goto LABEL_38;
              }
            }

            int v25 = 0;
            *a4++ = v43;
          }

          while (v43 > 0x1F);
        }
      }
    }
  }

      uint64_t v199 = 0;
      int v61 = v56;
      goto LABEL_31;
    }

    int v66 = v18[10];
    unsigned int v59 = a4;
    if (!v66) {
      goto LABEL_23;
    }
    int v61 = v56;
    if ((int)sub_1000B3680(v16, v66, 1LL, 1LL, 0LL, 30, (uint64_t)v201) >= 1)
    {
LABEL_21:
      unsigned int v63 = *v201;
      goto LABEL_22;
    }

    int v65 = v18[10];
  }

  int v62 = v201;
  if ((int)sub_1000B3680(v16, v65, 0LL, 1LL, 0LL, 30, (uint64_t)v201) < 1)
  {
LABEL_29:
    uint64_t v67 = -1;
    goto LABEL_30;
  }

      if ((a2 & 0xFFFFFF) == 0xFFFFFF) {
        goto LABEL_31;
      }
      return (char *)sub_100082BAC(*v7);
    }

    if ((~a2 & 0xFFFE) != 0)
    {
      uint64_t result = (char *)sub_10002007C(*((void *)result + 1), (unsigned __int16)a2);
      if ((_DWORD)result) {
        goto LABEL_21;
      }
    }
  }
      }
    }

    return 0LL;
  }

  if (v16 >= 1) {
  else
  }
    uint64_t v6 = v16;
  if ((int)v6 >= 1)
  {
    int v19 = v6;
    do
    {
      *a2++ = *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v17 >> 8)) + 2LL * v17);
      ++v17;
      --v19;
    }

    while (v19);
  }

  bzero(a3, 4 * (int)v6);
  return v6;
}

        int v19 = v17;
        uint64_t v17 = v18;
        a3[v19] = v15;
        int v13 = v18;
        if (!--v14) {
          goto LABEL_26;
        }
      }
    }

    a3[v13] = 94;
    int v18 = v13 + 2;
    if (v13 + 2 >= a4) {
      goto LABEL_43;
    }
    goto LABEL_23;
  }

  return result;
}

  CFRelease(v5);
  if (!MutableCopy) {
    goto LABEL_24;
  }
  return MutableCopy;
}

    if (v14 != a3) {
      free(v14);
    }
    goto LABEL_25;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136315138;
    unsigned int v24 = "_VSElvisGetConstraintsFromModels";
    _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s: couldn't convert any models to constraints\n",  buf,  0xCu);
  }

  if (v14 != a3) {
    free(v14);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (a5) {
    *a5 = 0LL;
  }
  return 4294963295LL;
}

uint64_t sub_10003927C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  *(void *)(a1 + 480) = 0LL;
  *(_DWORD *)(a1 + 452) = a2;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 464) = 0LL;
  if (a6 <= 0xA && ((1 << a6) & 0x438) != 0)
  {
    if (!(_DWORD)a4) {
      return 0LL;
    }
    int v16 = sub_100025C94(*a5);
    if ((int)a4 > 1)
    {
      int v17 = v16;
      int v18 = a5 + 1;
      uint64_t v19 = a4 - 1LL;
      while (sub_100025C94(*v18) == v17)
      {
        ++v18;
        if (!--v19) {
          goto LABEL_8;
        }
      }

      return 0LL;
    }
  }

uint64_t sub_1000393F8(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 40);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039408(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 216);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_10003941C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  int v44 = 0;
  uint64_t v10 = *(int *)(a1 + 420);
  uint64_t v11 = *(unsigned int *)(a1 + 452);
  unint64_t v12 = sub_1000CAF58(4LL * ((int)v11 + 1), a2, a3, a4, a5, a6, a7, a8);
  unsigned int v20 = (void *)v12;
  if ((int)v11 >= 1)
  {
    unsigned int v21 = (unsigned __int16 *)(a1 + 448);
    uint64_t v22 = v11;
    int v23 = (_DWORD *)v12;
    do
    {
      unsigned int v24 = *v21++;
      *v23++ = sub_1000BB884(*(void *)(a1 + 376), v24);
      --v22;
    }

    while (v22);
  }

  __int16 v43 = 0;
  if (!*(_BYTE *)(a1 + 424))
  {
    int v25 = 0LL;
    int32x4_t v33 = 0LL;
    BOOL v34 = 0LL;
    goto LABEL_18;
  }

  int v25 = (void *)sub_1000CAF58(512LL, v13, v14, v15, v16, v17, v18, v19);
  int32x4_t v33 = (void *)sub_1000CAF58(128LL, v26, v27, v28, v29, v30, v31, v32);
  if (*(_DWORD *)(a1 + 468) && (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 4)
  {
    if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
    {
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, uint64_t, void *, void *, void, void, void, void, void, _DWORD, void))(a1 + 104))( a1,  1LL,  &v44,  &v43,  128LL,  v25,  v33,  0LL,  0LL,  0LL,  0LL,  0LL,  0,  0LL);
      if (v35)
      {
        if (v35 >= 1)
        {
          uint64_t v36 = 0LL;
          do
            int v37 = *((_DWORD *)v25 + v36++);
          while (v37 != -1);
          if (*(_BYTE *)(a1 + 424)) {
            int v38 = *(_DWORD *)(a1 + 416);
          }
          else {
            int v38 = 0x40000000;
          }
          int v40 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void, uint64_t, void *, void *))(a1 + 112))( a1,  v11,  v20,  (v11 + v36 - 1),  v36 - 1,  v25,  v33);
          if (qword_1000FDCC0)
          {
            if (*(_DWORD *)(qword_1000FDCC0 + 5268))
            {
              int v41 = (v44 - v40) * (306 - v8) / 256 - v38;
LABEL_27:
              BOOL v34 = v41 > 0;
              goto LABEL_18;
            }

            LODWORD(v42) = v44 - v38 - v40;
            if (*(_DWORD *)(qword_1000FDCC0 + 5316)) {
              uint64_t v42 = *(void *)(qword_1000FDCC0 + 4560) * (int)v42 / v10;
            }
          }

          else
          {
            LODWORD(v42) = v44 - v38 - v40;
          }

          int v41 = v42 - v8;
          goto LABEL_27;
        }
      }

      else
      {
        (*(void (**)(uint64_t))(a1 + 96))(a1);
      }
    }

    BOOL v34 = 1LL;
    goto LABEL_18;
  }

  *(_DWORD *)int v25 = -1;
  int v44 = 0x40000000;
  BOOL v34 = 1LL;
LABEL_18:
  sub_1000CB038(v33, 128LL);
  sub_1000CB038(v25, 512LL);
  sub_1000CB038(v20, 4LL * ((int)v11 + 1));
  return v34;
}

uint64_t sub_10003967C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a15) {
    *a15 = 0;
  }
  if (!*(_DWORD *)(a1 + 468) || (*(unsigned int (**)(uint64_t))(a1 + 64))(a1) == 4)
  {
    uint64_t result = 0LL;
    *a8 = -1;
    *a5 = 0x40000000;
    return result;
  }

  if ((*(unsigned int (**)(uint64_t))(a1 + 64))(a1) != 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(a1 + 104))( a1,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a2,  a3);
    if ((_DWORD)result) {
      goto LABEL_11;
    }
    (*(void (**)(uint64_t))(a1 + 96))(a1);
  }

  uint64_t result = 0LL;
LABEL_11:
  if (a15)
  {
    if ((int)result <= 0)
    {
      *a15 = 0;
    }

    else if ((_DWORD)result == 1)
    {
      *a15 = 100;
    }

    else
    {
      int v24 = a5[1] - *a5;
      if (v24 >= 6400) {
        int v24 = 6400;
      }
      uint64_t v25 = qword_1000FDCC0;
      if (qword_1000FDCC0 && (uint64_t v25 = *(void *)(qword_1000FDCC0 + 1240), v25 * v24 > 3231)) {
        LODWORD(v26) = 100;
      }
      else {
        unint64_t v26 = (v25 * v24 + (v25 * v24 < 0 ? 0x1FuLL : 0)) >> 5;
      }
      *a15 = v26;
    }
  }

  return result;
}

uint64_t sub_100039800(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 424)) {
    return *(unsigned int *)(a1 + 416);
  }
  else {
    return 0x40000000LL;
  }
}

uint64_t sub_100039818(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t sub_100039820(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 480) = a2;
  return (*(uint64_t (**)(void))(a1 + 160))();
}

uint64_t sub_10003982C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 64))();
}

uint64_t sub_100039834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 64))();
  return result;
}

uint64_t sub_1000398A4(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 72);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1000398B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

uint64_t sub_1000398BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 80))();
}

uint64_t sub_1000398C4(uint64_t a1)
{
  return *(void *)(a1 + 408);
}

uint64_t sub_1000398CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 464);
}

uint64_t sub_1000398D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 232);
  if (v1) {
    return v1();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000398E8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 240);
  if (v1) {
    return v1();
  }
  else {
    return 0LL;
  }
}

BOOL sub_1000398FC(uint64_t a1)
{
  return (*(unsigned int (**)(void))(a1 + 64))() == 3;
}

uint64_t sub_10003991C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 96))();
}

unint64_t sub_100039924(uint64_t a1, int a2, int a3)
{
  int v3 = a3 - a2;
  if (a3 - a2 >= 6400) {
    int v3 = 6400;
  }
  uint64_t v4 = qword_1000FDCC0;
  if (qword_1000FDCC0 && (uint64_t v4 = *(void *)(qword_1000FDCC0 + 1240), v4 * v3 > 3231)) {
    return 100LL;
  }
  else {
    return (v4 * v3 + (v4 * v3 < 0 ? 0x1FuLL : 0)) >> 5;
  }
}

uint64_t sub_100039978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a4 && *(_DWORD *)(a4 + 44) <= a8) {
    return 0LL;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 144);
  if (!v8) {
    return 0LL;
  }
  else {
    return v8(a1, a2);
  }
}

uint64_t sub_1000399BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 136))();
}

uint64_t sub_1000399C4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 128);
  if (v1) {
    return v1();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000399D8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 152);
  if (v1) {
    return v1();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100039A14(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 288);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100039A28(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 296);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100039A3C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 304);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100039A50(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 312);
  if (v1) {
    return v1();
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100039A64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (unsigned int *)a6;
  if ((int)a2 < 1)
  {
    uint64_t v14 = 0LL;
    uint64_t v23 = 2LL * (int)a5;
    int v24 = (void *)sub_1000CAF58(v23, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }

  uint64_t v14 = (void *)sub_1000CAF58(2LL * a2, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = 0LL;
  do
  {
    *((_WORD *)v14 + v15) = sub_1000B3A9C(*(void *)(a1 + 376), *(_DWORD *)(a3 + 4 * v15));
    ++v15;
  }

  while (a2 != v15);
  uint64_t v23 = 2LL * (int)a5;
  int v24 = (void *)sub_1000CAF58(v23, v16, v17, v18, v19, v20, v21, v22);
  if ((int)a5 >= 1)
  {
LABEL_7:
    uint64_t v25 = a5;
    unint64_t v26 = v24;
    do
    {
      unsigned int v27 = *v8++;
      *v26++ = sub_1000B3B28(*(void *)(a1 + 376), v27, 0);
      --v25;
    }

    while (v25);
  }

uint64_t sub_100039B8C(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 120);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100039B9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10 = 0;
  uint64_t result = sub_10000711C(*(void *)(a1 + 384), &v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 416) += result;
  if (v10) {
    ++*(_DWORD *)(a1 + 420);
  }
  return result;
}

uint64_t sub_100039BF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, int *a10)
{
  uint64_t v24 = 0LL;
  while (1)
  {
    uint64_t v17 = sub_1000B2CAC(a10, &v24);
    if (!v17) {
      break;
    }
    uint64_t v18 = v17;
    uint64_t v19 = v24;
    unsigned int v20 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
    if (v20 <= 6 && ((1 << v20) & 0x66) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, v18, v19);
    }
    if (sub_1000CF924())
    {
      (*(void (**)(uint64_t))(a1 + 96))(a1);
      break;
    }
  }

  *(void *)(a1 + 480) = a10;
  (*(void (**)(uint64_t, int *))(a1 + 160))(a1, a10);
  return (*(uint64_t (**)(uint64_t))(a1 + 64))(a1);
}

uint64_t sub_100039D3C(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v44 = sub_100004688(*(void *)(a1 + 384));
  int32x4_t v51 = a3;
  sub_1000B2C9C(a3);
  if (*(_BYTE *)(a1 + 424)) {
    *(_DWORD *)(a1 + 416) = 0;
  }
  int16x8_t v55 = 0LL;
  sub_100005EFC(*(void *)(a1 + 384), v10, v11, v12, v13, v14, v15);
  if (*(int *)(a2 + 36) < 1)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v16 = 0LL;
    signed __int16 v17 = 0;
    uint64_t v18 = 0LL;
    BOOL v19 = a5 != 0;
    if (a6) {
      BOOL v20 = a5 != 0;
    }
    else {
      BOOL v20 = 0;
    }
    __int16 v49 = 0;
    BOOL v50 = v20;
    if (!a6) {
      BOOL v19 = 1;
    }
    BOOL v46 = v19;
    do
    {
      if (*(__int16 *)(*(void *)(a2 + 8) + 2 * v16) < 1)
      {
        int v21 = 0;
        int v53 = 0;
      }

      else
      {
        int v21 = 0;
        int v22 = 0;
        if (a4) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = *(unsigned __int16 *)(*(void *)a2 + 2 * v16) == v44;
        }
        int v24 = v23;
        int v52 = v24;
        int v53 = 0;
        do
        {
          uint64_t v25 = sub_1000B2CAC(v51, &v55);
          sub_100006F08(*(void *)(a1 + 384), v25, v55, *(void *)(a1 + 408), v17, 0, v26, v27, v28, v29, v30, v31);
          int v32 = sub_100012354(*(void *)(a1 + 384), *(unsigned __int16 *)(*(void *)a2 + 2 * v16));
          int v39 = v32;
          if (v52) {
            int v40 = 0;
          }
          else {
            int v40 = v32;
          }
          if (*(_BYTE *)(a1 + 424))
          {
            __int16 v41 = a7;
            if (a7)
            {
              BOOL v56 = 0;
              int v42 = sub_10000711C(*(void *)(a1 + 384), &v56, v33, v34, v35, v36, v37, v38);
              *(_DWORD *)(a1 + 416) += v42;
              if (v56) {
                ++*(_DWORD *)(a1 + 420);
              }
              __int16 v41 = v39 - v42;
            }

            __int16 v49 = v41;
            v53 += v41;
          }

          sub_1000070E0(*(void *)(a1 + 384), v17, (_DWORD *)(a1 + 436));
          if (a7 && a5 && *(_BYTE *)(a1 + 424)) {
            *(_DWORD *)(a7 + 4LL * v17) = v49;
          }
          if (v50) {
            *(_DWORD *)(a6 + 4LL * v17) = v39;
          }
          uint64_t v18 = (v40 + v18);
          v21 += v40;
          ++v17;
          ++v22;
        }

        while (v22 < *(__int16 *)(*(void *)(a2 + 8) + 2 * v16));
      }

      if (a7 && !a5 && *(_BYTE *)(a1 + 424)) {
        *(_DWORD *)(a7 + 4 * v16) = v53;
      }
      if (!v46) {
        *(_DWORD *)(a6 + 4 * v16) = v21;
      }
      ++v16;
    }

    while (v16 < *(int *)(a2 + 36));
  }

  sub_1000B2CAC(v51, 0LL);
  return v18;
}

BOOL sub_100039FC8( uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!(_DWORD)a3) {
    return 0LL;
  }
  int v9 = a3;
  if ((int)a3 >= 1)
  {
    uint64_t v12 = a3;
    int32x4_t v13 = a2;
    while (1)
    {
      int v14 = sub_1000B3A9C(*(void *)(a1 + 376), *v13);
      unsigned int v15 = *v13++;
      if (v15 == -1 || v14 == 0xFFFF) {
        break;
      }
      if (!--v12) {
        goto LABEL_9;
      }
    }

    (*(void (**)(uint64_t))(a1 + 96))(a1);
    return 0LL;
  }

unsigned int *sub_10003A264( uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, int16x8_t *a6, uint64_t a7, int *a8, _DWORD *a9)
{
  uint64_t v16 = a9;
  *a9 = 0;
  int v17 = *(uint64_t **)(a1 + 376);
  if (qword_1000FDCC0)
  {
    uint64_t v18 = sub_10002FF9C(a4, a2, v17, *(_DWORD *)(qword_1000FDCC0 + 4928));
    uint64_t v103 = v18;
    if (v18) {
      goto LABEL_3;
    }
    return 0LL;
  }

  uint64_t v18 = sub_10002FF9C(a4, a2, v17, 0);
  uint64_t v103 = v18;
  if (!v18) {
    return 0LL;
  }
LABEL_3:
  BOOL v19 = (unsigned int *)v18;
  uint64_t v104 = 0LL;
  int v102 = 0;
  __int16 v101 = 0;
  uint64_t v100 = 0LL;
  uint64_t v97 = a3;
  if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3320))
  {
    unint64_t v57 = 0LL;
    uint64_t v58 = 1LL;
    goto LABEL_35;
  }

  __s1 = (unsigned int *)a4;
  int v92 = (unsigned int *)v18;
  int v93 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = *(uint64_t **)(a1 + 376);
  int v22 = sub_1000B324C(v21) + 1;
  int v23 = sub_1000B3288(v21) + 1;
  uint64_t v91 = 4LL * (int)a3;
  uint64_t v31 = (_DWORD *)sub_1000CAF58(v91, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v90 = 2LL * v22;
  unsigned int v39 = (_WORD *)sub_1000CAF58(v90, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v89 = 2LL * v23;
  uint64_t v47 = (unsigned __int16 *)sub_1000CAF58(v89, v40, v41, v42, v43, v44, v45, v46);
  int v94 = a2;
  __s2 = v31;
  if (a2 < 1)
  {
    BOOL v59 = 0;
    a6 = v20;
    a5 = v93;
    goto LABEL_27;
  }

  unsigned int v88 = v20;
  uint64_t v48 = a2;
  int v49 = 1;
  BOOL v50 = __s1;
  do
  {
    sub_1000B33F8((char *)v21, *v50, (uint64_t)v39, v47);
    unsigned int v55 = *v50;
    *uint64_t v31 = *v50;
    if (!v47) {
      goto LABEL_7;
    }
    int v56 = *v47;
    if (v56 == 109)
    {
      unsigned int v55 = sub_1000B32B0(v21, v39);
      *uint64_t v31 = v55;
      int v56 = *v47;
      if (v56 == 109)
      {
        if (v47[1] != 122) {
          goto LABEL_7;
        }
        unsigned int v55 = sub_1000B32B0(v21, v39);
        *uint64_t v31 = v55;
        int v56 = *v47;
      }
    }

    if (v56 == 102)
    {
      unsigned int v55 = sub_1000B32B0(v21, v39);
      *uint64_t v31 = v55;
      if (*v47 == 102 && v47[1] == 122)
      {
        unsigned int v55 = sub_1000B32B0(v21, v39);
        *uint64_t v31 = v55;
      }
    }

uint64_t sub_10003A890(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 488))
  {
    uint64_t result = sub_1000A1830(*(void *)(a1 + 384), *(void *)(a1 + 376), *(_DWORD *)(a1 + 432));
    *(void *)(a1 + 488) = result;
    if (!result) {
      return result;
    }
  }

  uint64_t v5 = *(void *)(a1 + 504);
  if (v5 && *(_DWORD *)(v5 + 40) < a2)
  {
    sub_1000A266C(v5);
    uint64_t v5 = 0LL;
    *(void *)(a1 + 504) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 496);
  if (!v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(v6 + 40) < a2)
  {
    sub_1000A266C(*(void *)(a1 + 496));
    *(void *)(a1 + 496) = 0LL;
LABEL_9:
    uint64_t result = sub_1000A26D0(*(uint64_t **)(a1 + 376), a2);
    *(void *)(a1 + 496) = result;
    if (!result) {
      return result;
    }
    uint64_t v5 = *(void *)(a1 + 504);
  }

  if (v5) {
    return 1LL;
  }
  uint64_t result = sub_1000A26D0(*(uint64_t **)(a1 + 376), a2);
  *(void *)(a1 + 504) = result;
  if (result) {
    return 1LL;
  }
  return result;
}

uint64_t sub_10003A940(uint64_t a1, int a2, unsigned __int16 *a3, const void *a4, int *a5, int a6, _DWORD *a7)
{
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(a1 + 496);
  sub_1000A2820(*(void *)(a1 + 496));
  int v15 = sub_10009D1D4((uint64_t)a5);
  if (v15 <= 0) {
    goto LABEL_13;
  }
  uint64_t v33 = 0LL;
  int v22 = sub_1000A1CDC( *(void *)(a1 + 488),  v15,  a6,  0x7FFFFFFF,  1,  0,  a2,  a3,  v16,  v17,  v18,  v19,  v20,  v21,  0,  *(unsigned __int16 **)(v14 + 24),  *(_DWORD *)(v14 + 32),  *(_WORD **)v14,  *(_WORD **)(v14 + 16),  *(void *)(v14 + 8),  (int *)(v14 + 36),  (uint64_t)a4);
  *(void *)(v14 + 72) = *(int *)(a1 + 432);
  if (!v22) {
    goto LABEL_13;
  }
  memcpy(*(void **)(v14 + 48), a3, 2LL * a2);
  memcpy(*(void **)(v14 + 56), a4, a2);
  *(_DWORD *)(v14 + 44) = a2;
  *(_DWORD *)(v14 + 64) = 0;
  sub_1000B2C9C(a5);
  int v23 = qword_1000FDCC0 ? *(_DWORD *)(qword_1000FDCC0 + 5372) : 0;
  sub_100006E54(*(void *)(a1 + 384), *(void *)(a1 + 408), 0, v23);
  do
  {
    uint64_t v24 = sub_1000B2CAC(a5, &v33);
    if (!v24) {
      break;
    }
    int v31 = sub_1000A227C(*(void *)(a1 + 488), v24, v33, *(void *)(a1 + 408), v25, v26, v27, v28, v29, v30);
    ++*(_DWORD *)(v14 + 64);
  }

  while ((v31 & 0xFFFFFFFE) != 2);
  uint64_t result = sub_1000A20A0(*(void *)(a1 + 488), 0, (int *)(v14 + 68));
  *a7 = *(_DWORD *)(v14 + 68);
  if ((_DWORD)result == 3)
  {
LABEL_13:
    (*(void (**)(uint64_t))(a1 + 96))(a1);
    return 3LL;
  }

  return result;
}

void sub_10003AAF8(uint64_t a1)
{
}

BOOL sub_10003AB20( uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, _DWORD *a5, void *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0x40000000;
  BOOL result = sub_100039FC8(a1, a3, a2, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if (result)
  {
    *a5 = *(_DWORD *)(*(void *)(a1 + 504) + 68LL);
    uint64_t v12 = *(void *)(a1 + 504);
    BOOL result = 1LL;
    if (!a6) {
      return result;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    if (!a6) {
      return result;
    }
  }

  *a6 = v12;
  return result;
}

uint64_t sub_10003AB90(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (qword_1000FDCC0) {
    int v14 = *(_DWORD *)(qword_1000FDCC0 + 5372);
  }
  else {
    int v14 = 0;
  }
  sub_100006E54(*(void *)(a1 + 384), *(void *)(a1 + 408), 0, v14);
  return sub_100039D3C(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10003AC24( uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1000FDCC0)
  {
    int v10 = *(_DWORD *)(qword_1000FDCC0 + 48);
    if (!*(void *)(a1 + 488)) {
      return 3LL;
    }
  }

  else
  {
    int v10 = 0;
    if (!*(void *)(a1 + 488)) {
      return 3LL;
    }
  }

  if ((_DWORD)a2 && *(void *)(a1 + 496) && sub_100039FC8(a1, a3, a2, a4, a5, a6, a7, a8)) {
    return sub_10003ACC4(a1, a4, 0LL, v10);
  }
  return 3LL;
}

uint64_t sub_10003ACC4(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 68) == 0x40000000) {
      return 3LL;
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 504);
    if (*(_DWORD *)(v5 + 68) == 0x40000000) {
      return 3LL;
    }
  }

  if (!*(_DWORD *)(v5 + 64)) {
    return 3LL;
  }
  if (!a4) {
    goto LABEL_23;
  }
  uint64_t v24 = 0LL;
  uint64_t v8 = *(void *)(a1 + 384);
  sub_1000B2C9C(a2);
  int v9 = *(_DWORD *)(v5 + 36);
  if (v9 > 0)
  {
    signed __int16 v10 = 0;
    uint64_t v11 = 0LL;
    uint64_t v12 = *(void *)(v5 + 8);
    while (*(__int16 *)(v12 + 2 * v11) < 1)
    {
LABEL_10:
      if (++v11 >= v9) {
        goto LABEL_16;
      }
    }

    int v14 = 0;
    while (1)
    {
      uint64_t v15 = sub_1000B2CAC(a2, &v24);
      sub_100006F08(v8, v15, v24, *(void *)(a1 + 408), v10, 0, v16, v17, v18, v19, v20, v21);
      int v22 = sub_10000CE80(v8, *(unsigned __int16 *)(*(void *)v5 + 2 * v11), a4);
      sub_1000070E0(v8, v10, (_DWORD *)(a1 + 436));
      if (!v22) {
        return 4LL;
      }
      ++v14;
      ++v10;
      uint64_t v12 = *(void *)(v5 + 8);
      if (v14 >= *(__int16 *)(v12 + 2 * v11))
      {
        int v9 = *(_DWORD *)(v5 + 36);
        goto LABEL_10;
      }
    }
  }

uint64_t sub_10003AE88(uint64_t a1)
{
  return 4 * (sub_10000A340(*(void *)(a1 + 384)) == 0);
}

uint64_t sub_10003AEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v11 = sub_10000AF28(*(void *)(a1 + 384), a2, a3, v6, v7, v8, v9, v10) == 0;
  *(_DWORD *)(a1 + 512) = 0;
  return (4 * v11);
}

uint64_t sub_10003AF00(uint64_t *a1)
{
  a1[63] = 0LL;
  sub_1000A266C(a1[62]);
  a1[62] = 0LL;
  sub_1000A1874(a1[61]);
  a1[61] = 0LL;
  return sub_10000B1AC(a1[48]);
}

uint64_t sub_10003AF44(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 320);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_10003AF54(uint64_t a1)
{
  uint64_t result = sub_100009758();
  *(void *)(a1 + 408) = result;
  return result;
}

uint64_t sub_10003AF78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v21 = 0;
  v22[0] = 0;
  if (a2) {
    sub_1000C896C(v22, a2, 256);
  }
  sub_1000C89F8(v22, "bd0", 256);
  uint64_t result = (uint64_t)sub_1000BCAE8(a1, "bd0", a2, v12, v13, v14, v15, v16);
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  *(_DWORD *)int v22 = 0;
  if (!sub_1000BCD38(result, v22))
  {
    sub_1000BCBC8(v18);
    return 0LL;
  }

  uint64_t v19 = *(unsigned int *)v22;
  BOOL v20 = sub_1000BCD38(v18, &v21);
  sub_1000BCBC8(v18);
  if (!v20) {
    return 0LL;
  }
  switch((int)v19)
  {
    case 1:
      uint64_t result = sub_100052D94(a1, a2, a3, a4, v21);
      break;
    case 5:
      uint64_t result = sub_10003E468(a1, a2, a3, a4, a5, a6, v21);
      break;
    case 6:
      uint64_t result = (uint64_t)sub_10003C928(a1, a2, a3, a4, a5, a6, v21);
      break;
    case 11:
      uint64_t result = sub_1000AFDF4(a1, a2, a3, a4, a5, v21);
      break;
    default:
      uint64_t result = sub_100038B44(a3, a4, a5, 0LL, v21, v19);
      break;
  }

  return result;
}

void sub_10003B194(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v5 = *a4;
  if (!qword_1000FDCC0) {
    goto LABEL_27;
  }
  int v9 = *(_DWORD *)(qword_1000FDCC0 + 4596);
  if ((v9 - 4) >= 2)
  {
    if (v9 == 2) {
      goto LABEL_17;
    }
    int v10 = 0;
    if (!*(_DWORD *)(qword_1000FDCC0 + 1764)) {
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v11 = *(void *)(a1 + 480);
    if (v11 && sub_10009D1D4(v11))
    {
      int v5 = *a4;
      if (*a4 >= 1)
      {
        int v12 = 0;
        do
        {
          uint64_t v13 = (char *)&a3[32 * (uint64_t)v12];
          sub_10003C0D4( a1,  a2,  (_DWORD *)v13 + 3,  (unsigned __int16 *)v13 + 8,  (uint64_t)(v13 + 88),  *((_DWORD *)v13 + 1),  v10);
          if (*((_DWORD *)v13 + 3) == 0x40000000)
          {
            if (--v5 > v12) {
              j__memmove(&a3[32 * (uint64_t)v12], &a3[32 * (uint64_t)v12 + 32], (v5 - v12) << 7);
            }
            --v12;
          }

          ++v12;
        }

        while (v12 < v5);
      }

      *a4 = v5;
    }

    goto LABEL_17;
  }

  int v10 = 1;
  if (*(_DWORD *)(qword_1000FDCC0 + 1764)) {
    goto LABEL_7;
  }
LABEL_17:
  if (!qword_1000FDCC0) {
    goto LABEL_27;
  }
  int v14 = *(_DWORD *)(qword_1000FDCC0 + 4596);
  if ((v14 & 0xFFFFFFFE) == 2)
  {
    if (v5 < 1) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }

  if (v14 == 5 && v5 > 0)
  {
LABEL_25:
    uint64_t v16 = v5;
    double v17 = a3 + 3;
    do
    {
      sub_10003C368(a1, v17, (uint64_t)(v17 + 1), *(v17 - 2), 1LL, 2LL);
      v17 += 32;
      --v16;
    }

    while (v16);
  }

uint64_t sub_10003B330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  *a7 = 0x40000000;
  uint64_t result = *a6;
  *a6 = 0;
  return result;
}

void sub_10003B344( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a2;
  if ((int)v14 < 1)
  {
    LODWORD(v14) = 0;
    goto LABEL_74;
  }

  uint64_t v15 = a8;
  uint64_t v16 = a7;
  uint64_t v17 = a5;
  uint64_t v19 = a13;
  uint64_t v20 = a11;
  uint64_t v21 = a9;
  if (a14)
  {
    uint64_t v83 = a2;
    uint64_t v22 = 0LL;
    int v23 = 0;
    uint64_t v86 = *a2;
    while (1)
    {
      int v24 = *(_DWORD *)(a1 + 8);
      if (v24 + v23 >= a6)
      {
        LODWORD(v14) = v22;
        goto LABEL_73;
      }

      int v90 = v23;
      uint64_t v91 = v22;
      int v26 = v24 + 7;
      BOOL v25 = v24 < -7;
      int v27 = v24 + 14;
      if (!v25) {
        int v27 = v26;
      }
      uint64_t v28 = v23;
      int8x16_t v29 = (void *)(v15 + v23);
      bzero(v29, (uint64_t)v27 >> 3);
      if (*(int *)(a1 + 8) < 1)
      {
        uint64_t v40 = v15;
        int v39 = v90;
        uint64_t v38 = v91;
        *(_DWORD *)(a4 + 4 * v91) = *(_DWORD *)a1;
        if (!v17) {
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v30 = 0LL;
        uint64_t v31 = v20;
        uint64_t v92 = v20 + v28;
        uint64_t v32 = v16 + 4 * v28;
        uint64_t v33 = v21 + 4 * v28;
        uint64_t v34 = a10 + 4 * v28;
        uint64_t v35 = 146LL;
        uint64_t v36 = 384LL;
        uint64_t v37 = a12 + 2 * v28;
        do
        {
          *(_DWORD *)(v32 + 4 * v30) = sub_1000BB870(a14, *(unsigned __int16 *)(a1 + v35 - 118));
          if (a12) {
            *(_WORD *)(v37 + 2 * v30) = *(_WORD *)(a1 + v35);
          }
          if (a9) {
            *(_DWORD *)(v33 + 4 * v30) = *(_DWORD *)(a1 + v36);
          }
          if (a10) {
            *(_DWORD *)(v34 + 4 * v30) = *(_DWORD *)(a1 + v36 + 236);
          }
          if (v31) {
            *(_BYTE *)(v92 + v30) = *(_BYTE *)(a1 + v30 + 323);
          }
          *((_BYTE *)v29 + v30) = *(_BYTE *)(a1 + v30 + 264);
          ++v30;
          v36 += 4LL;
          v35 += 2LL;
        }

        while (v30 < *(int *)(a1 + 8));
        uint64_t v38 = v91;
        int v39 = v90 + v30;
        uint64_t v40 = a8;
        uint64_t v14 = v86;
        uint64_t v16 = a7;
        uint64_t v17 = a5;
        uint64_t v19 = a13;
        uint64_t v21 = a9;
        uint64_t v20 = v31;
        *(_DWORD *)(a4 + 4 * v91) = *(_DWORD *)a1;
        if (!a5) {
          goto LABEL_21;
        }
      }

      *(_WORD *)(v17 + 2 * v38) = *(_WORD *)(a1 + 4);
LABEL_21:
      *(_DWORD *)(v16 + 4LL * v39) = -1;
      uint64_t v15 = v40;
      if (v19) {
        *(void *)(v19 + 8 * v38) = *(void *)(a1 + 16);
      }
      int v23 = v39 + 1;
      a1 += 1096LL;
      uint64_t v22 = v38 + 1;
      if (v22 == v14) {
        goto LABEL_73;
      }
    }
  }

  if (!a11)
  {
    unsigned int v52 = a2;
    if (!a12)
    {
      uint64_t v69 = 0LL;
      int v70 = 0;
      do
      {
        int v71 = *(_DWORD *)(a1 + 8);
        if (v71 + v70 >= a6)
        {
          LODWORD(v14) = v69;
          a2 = v52;
          goto LABEL_74;
        }

        int v72 = v71 + 7;
        BOOL v25 = v71 < -7;
        int v73 = v71 + 14;
        if (!v25) {
          int v73 = v72;
        }
        bzero((void *)(v15 + v70), (uint64_t)v73 >> 3);
        if (*(int *)(a1 + 8) > 0)
        {
          if (a9)
          {
            uint64_t v74 = 4LL * v70;
            if (a10)
            {
              uint64_t v75 = 0LL;
              uint64_t v76 = a10 + v74;
              uint64_t v77 = a9 + v74;
              uint64_t v78 = v16 + v74;
              uint64_t v79 = 384LL;
              do
              {
                uint64_t v80 = 4 * v75;
                *(_DWORD *)(v78 + v80) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
                *(_DWORD *)(v77 + v80) = *(_DWORD *)(a1 + v79);
                *(_DWORD *)(v76 + v80) = *(_DWORD *)(a1 + v79 + 236);
                *(_BYTE *)(v15 + v70 + v75) = *(_BYTE *)(a1 + v75 + 264);
                ++v75;
                v79 += 4LL;
              }

              while (v75 < *(int *)(a1 + 8));
            }

            else
            {
              uint64_t v75 = 0LL;
              do
              {
                uint64_t v82 = 4 * v75;
                *(_DWORD *)(v16 + v74 + v82) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
                *(_DWORD *)(a9 + v74 + v82) = *(_DWORD *)(a1 + 4 * v75 + 384);
                *(_BYTE *)(v15 + v70 + v75) = *(_BYTE *)(a1 + v75 + 264);
                ++v75;
              }

              while (v75 < *(int *)(a1 + 8));
            }
          }

          else if (a10)
          {
            uint64_t v75 = 0LL;
            do
            {
              uint64_t v81 = 4 * v75;
              *(_DWORD *)(v16 + 4LL * v70 + v81) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
              *(_DWORD *)(a10 + 4LL * v70 + v81) = *(_DWORD *)(a1 + 4 * v75 + 620);
              *(_BYTE *)(v15 + v70 + v75) = *(_BYTE *)(a1 + v75 + 264);
              ++v75;
            }

            while (v75 < *(int *)(a1 + 8));
          }

          else
          {
            uint64_t v75 = 0LL;
            do
            {
              *(_DWORD *)(v16 + 4LL * v70 + 4 * v75) = *(unsigned __int16 *)(a1 + 2 * v75 + 28);
              *(_BYTE *)(v15 + v70 + v75) = *(_BYTE *)(a1 + v75 + 264);
              ++v75;
            }

            while (v75 < *(int *)(a1 + 8));
          }

          v70 += v75;
        }

        *(_DWORD *)(a4 + 4 * v69) = *(_DWORD *)a1;
        if (v17) {
          *(_WORD *)(v17 + 2 * v69) = *(_WORD *)(a1 + 4);
        }
        *(_DWORD *)(v16 + 4LL * v70) = -1;
        if (a13) {
          *(void *)(a13 + 8 * v69) = *(void *)(a1 + 16);
        }
        ++v70;
        a1 += 1096LL;
        ++v69;
      }

      while (v69 != v14);
      goto LABEL_101;
    }

    uint64_t v54 = 0LL;
    int v55 = 0;
    while (1)
    {
      int v56 = *(_DWORD *)(a1 + 8);
      if (v56 + v55 >= a6)
      {
        LODWORD(v14) = v54;
LABEL_101:
        a2 = v52;
        goto LABEL_74;
      }

      int v57 = v56 + 7;
      BOOL v25 = v56 < -7;
      int v58 = v56 + 14;
      if (!v25) {
        int v58 = v57;
      }
      bzero((void *)(v15 + v55), (uint64_t)v58 >> 3);
      if (*(int *)(a1 + 8) > 0)
      {
        if (a9)
        {
          uint64_t v59 = 0LL;
          uint64_t v60 = 146LL;
          uint64_t v61 = 384LL;
          do
          {
            uint64_t v62 = 4 * v59;
            *(_DWORD *)(a7 + 4LL * v55 + v62) = *(unsigned __int16 *)(a1 + v60 - 118);
            *(_WORD *)(a12 + 2LL * v55 + 2 * v59) = *(_WORD *)(a1 + v60);
            *(_DWORD *)(a9 + 4LL * v55 + v62) = *(_DWORD *)(a1 + v61);
            if (a10) {
              *(_DWORD *)(a10 + 4LL * v55 + 4 * v59) = *(_DWORD *)(a1 + v61 + 236);
            }
            *(_BYTE *)(v15 + v55 + v59) = *(_BYTE *)(a1 + v59 + 264);
            ++v59;
            v60 += 2LL;
            v61 += 4LL;
          }

          while (v59 < *(int *)(a1 + 8));
        }

        else
        {
          if (!a10)
          {
            uint64_t v65 = 0LL;
            uint64_t v66 = 264LL;
            uint64_t v67 = (_DWORD *)(a7 + 4LL * v55);
            do
            {
              *v67++ = *(unsigned __int16 *)(a1 + v65 + 28);
              *(_WORD *)(a12 + 2LL * v55 + v65) = *(_WORD *)(a1 + v65 + 146);
              *(_BYTE *)(v15 + v55 + v66 - 264) = *(_BYTE *)(a1 + v66);
              uint64_t v68 = v66 - 263;
              ++v66;
              v65 += 2LL;
            }

            while (v68 < *(int *)(a1 + 8));
            int v55 = v55 + v66 - 264;
            *(_DWORD *)(a4 + 4 * v54) = *(_DWORD *)a1;
            if (!v17) {
              goto LABEL_66;
            }
LABEL_65:
            *(_WORD *)(v17 + 2 * v54) = *(_WORD *)(a1 + 4);
            goto LABEL_66;
          }

          uint64_t v59 = 0LL;
          uint64_t v63 = 146LL;
          do
          {
            uint64_t v64 = 4 * v59;
            *(_DWORD *)(a7 + 4LL * v55 + v64) = *(unsigned __int16 *)(a1 + v63 - 118);
            *(_WORD *)(a12 + 2LL * v55 + 2 * v59) = *(_WORD *)(a1 + v63);
            *(_DWORD *)(a10 + 4LL * v55 + v64) = *(_DWORD *)(a1 + 4 * v59 + 620);
            *(_BYTE *)(v15 + v55 + v59) = *(_BYTE *)(a1 + v59 + 264);
            ++v59;
            v63 += 2LL;
          }

          while (v59 < *(int *)(a1 + 8));
        }

        v55 += v59;
      }

      *(_DWORD *)(a4 + 4 * v54) = *(_DWORD *)a1;
      if (v17) {
        goto LABEL_65;
      }
LABEL_66:
      *(_DWORD *)(a7 + 4LL * v55) = -1;
      if (a13) {
        *(void *)(a13 + 8 * v54) = *(void *)(a1 + 16);
      }
      ++v55;
      a1 += 1096LL;
      if (++v54 == v14) {
        goto LABEL_101;
      }
    }
  }

  uint64_t v83 = a2;
  uint64_t v42 = 0LL;
  int v43 = 0;
  while (1)
  {
    int v44 = *(_DWORD *)(a1 + 8);
    if (v44 + v43 >= a6) {
      break;
    }
    int v45 = v44 + 7;
    BOOL v25 = v44 < -7;
    int v46 = v44 + 14;
    if (!v25) {
      int v46 = v45;
    }
    bzero((void *)(a8 + v43), (uint64_t)v46 >> 3);
    if (*(int *)(a1 + 8) < 1)
    {
      uint64_t v50 = a13;
      *(_DWORD *)(a4 + 4 * v42) = *(_DWORD *)a1;
      uint64_t v51 = a5;
      if (!a5) {
        goto LABEL_43;
      }
    }

    else
    {
      uint64_t v47 = 0LL;
      uint64_t v48 = 146LL;
      uint64_t v49 = 384LL;
      uint64_t v50 = a13;
      do
      {
        *(_DWORD *)(v16 + 4LL * v43 + 4 * v47) = *(unsigned __int16 *)(a1 + v48 - 118);
        if (a12) {
          *(_WORD *)(a12 + 2LL * v43 + 2 * v47) = *(_WORD *)(a1 + v48);
        }
        if (a9) {
          *(_DWORD *)(a9 + 4LL * v43 + 4 * v47) = *(_DWORD *)(a1 + v49);
        }
        if (a10) {
          *(_DWORD *)(a10 + 4LL * v43 + 4 * v47) = *(_DWORD *)(a1 + v49 + 236);
        }
        *(_BYTE *)(a11 + v43 + v47) = *(_BYTE *)(a1 + v47 + 323);
        *(_BYTE *)(a8 + v43 + v47) = *(_BYTE *)(a1 + v47 + 264);
        ++v47;
        v49 += 4LL;
        v48 += 2LL;
      }

      while (v47 < *(int *)(a1 + 8));
      v43 += v47;
      *(_DWORD *)(a4 + 4 * v42) = *(_DWORD *)a1;
      uint64_t v51 = a5;
      if (!a5) {
        goto LABEL_43;
      }
    }

    *(_WORD *)(v51 + 2 * v42) = *(_WORD *)(a1 + 4);
LABEL_43:
    *(_DWORD *)(v16 + 4LL * v43) = -1;
    if (v50) {
      *(void *)(v50 + 8 * v42) = *(void *)(a1 + 16);
    }
    ++v43;
    a1 += 1096LL;
    if (++v42 == v14) {
      goto LABEL_73;
    }
  }

  LODWORD(v14) = v42;
LABEL_73:
  a2 = v83;
LABEL_74:
  *a2 = v14;
}

uint64_t sub_10003BAE8(uint64_t result, int a2, _DWORD **a3, uint64_t a4, int a5)
{
  if (a2 >= 1 && **a3 == 3)
  {
    int v7 = a2;
    uint64_t v8 = result;
    do
    {
      if (**a3 == 3)
      {
        uint64_t result = sub_10002AC8C(*(void *)(v8 + 16), *(_DWORD *)(v8 + 8), v8 + 28, v8 + 384, v8 + 856, v8 + 323, a5);
        *(_WORD *)(v8 + 4) += result;
      }

      v8 += 1096LL;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_10003BB80(unsigned __int16 *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, int a6)
{
  int v67 = 0;
  int v11 = sub_1000B32A0(a4);
  uint64_t v19 = (unsigned __int16 *)sub_1000CAFC0(2LL * (v11 + 1), v12, v13, v14, v15, v16, v17, v18);
  uint64_t v60 = (unsigned __int16 *)sub_1000CAFC0(2LL * (v11 + 1), v20, v21, v22, v23, v24, v25, v26);
  uint64_t v63 = a4;
  uint64_t v64 = sub_1000CAFC0(2LL * v11, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v61 = v19;
  uint64_t v62 = a1;
  int v34 = sub_1000B9044(a4, *a1, v19);
  unint64_t v37 = (a3 - 1);
  uint64_t v58 = 2LL * v11;
  uint64_t v59 = 2LL * (v11 + 1);
  if (a3 < 1)
  {
    uint64_t v42 = 2LL;
    int v45 = v64;
  }

  else
  {
    LODWORD(v38) = v34;
    uint64_t v65 = a3;
    unint64_t v39 = 0LL;
    if (a6)
    {
      unsigned __int16 v40 = 0;
      int v41 = -1;
      uint64_t v42 = 2LL;
      int v43 = v60;
      int v44 = v61;
      int v45 = v64;
      while (1)
      {
        int v46 = v43;
        if (v39 == v37)
        {
          if (v39 >= v37) {
            goto LABEL_15;
          }
        }

        else
        {
          int v41 = sub_1000B9044(v63, v62[v39 + 1], v43);
          if (v39 >= v37) {
            goto LABEL_15;
          }
        }

        if (*(_BYTE *)(a2 + v39))
        {
LABEL_15:
          uint64_t v47 = 0LL;
          goto LABEL_16;
        }

        uint64_t v47 = *v46;
LABEL_16:
        sub_1000059CC(a5, v44, v38, v45, v40, v47, v35, v36);
        int v48 = v38 - 1;
        if ((int)v38 >= 1)
        {
          uint64_t v38 = v38;
          do
          {
            int v49 = (unsigned __int16)*v45++;
            sub_100015B80(a5, v49, &v67);
            uint64_t v42 = (v67 + v42);
            --v38;
          }

          while (v38);
        }

        if (v39 == v37)
        {
          int v45 = v64;
          if (!*(_BYTE *)(a2 + v37)) {
            goto LABEL_21;
          }
        }

        else
        {
          if (*(_BYTE *)(a2 + v39) == 1) {
            uint64_t v42 = (v42 + 1);
          }
          else {
            uint64_t v42 = v42;
          }
          int v45 = v64;
          if (!*(_BYTE *)(a2 + v39))
          {
LABEL_21:
            unsigned __int16 v40 = v44[v48];
            goto LABEL_9;
          }
        }

        unsigned __int16 v40 = 0;
LABEL_9:
        ++v39;
        int v43 = v44;
        int v44 = v46;
        LODWORD(v38) = v41;
        if (v39 == v65) {
          goto LABEL_24;
        }
      }
    }

    int v51 = -1;
    uint64_t v42 = 2LL;
    unsigned int v52 = v60;
    unsigned int v53 = v61;
    int v45 = v64;
    do
    {
      uint64_t v54 = v52;
      if (v39 != v37) {
        int v51 = sub_1000B9044(v63, v62[v39 + 1], v52);
      }
      sub_1000059CC(a5, v53, v38, v64, 0LL, 0LL, v35, v36);
      if ((int)v38 >= 1)
      {
        uint64_t v55 = v38;
        int v56 = v64;
        do
        {
          int v57 = *v56++;
          sub_100015B80(a5, v57, &v67);
          uint64_t v42 = (v67 + v42);
          --v55;
        }

        while (v55);
      }

      if (v39 != v37)
      {
        if (*(_BYTE *)(a2 + v39) == 1) {
          uint64_t v42 = (v42 + 1);
        }
        else {
          uint64_t v42 = v42;
        }
      }

      ++v39;
      unsigned int v52 = v53;
      unsigned int v53 = v54;
      LODWORD(v38) = v51;
    }

    while (v39 != v65);
  }

uint64_t sub_10003BE3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v8) = a8;
  int v9 = (unsigned __int16 *)a7;
  int v12 = a3;
  int v13 = a2;
  if ((int)a5 < 1)
  {
    LODWORD(v15) = 0;
  }

  else
  {
    uint64_t v15 = 0LL;
    while (*(__int16 *)(a6 + 2 * v15) != -1)
    {
      if (a5 == ++v15)
      {
        LODWORD(v15) = a5;
        break;
      }
    }
  }

  else {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v17 = v15;
  }
  uint64_t v55 = 2LL * ((int)v16 + (int)a8 + (int)v17);
  unint64_t v18 = sub_1000CAF58(v55, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v19 = (void *)v18;
  if ((int)v16 >= 1)
  {
    uint64_t v20 = v12 - (int)v16;
    if (v16 >= 0x10 && (uint64_t v21 = 2 * v20 + a4, v18 - v21 >= 0x20))
    {
      uint64_t v22 = v16 & 0x7FFFFFF0;
      int v46 = (__int128 *)(v21 + 16);
      uint64_t v47 = (_OWORD *)(v18 + 16);
      uint64_t v48 = v16 & 0xFFFFFFF0;
      do
      {
        __int128 v49 = *v46;
        *(v47 - 1) = *(v46 - 1);
        _OWORD *v47 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 16LL;
      }

      while (v48);
      if (v22 == v16)
      {
LABEL_19:
        unsigned int v27 = v16;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }

    uint64_t v23 = (__int16 *)(a4 + 2 * (v22 + v20));
    uint64_t v24 = (_WORD *)(v18 + 2 * v22);
    uint64_t v25 = v16 - v22;
    do
    {
      __int16 v26 = *v23++;
      *v24++ = v26;
      --v25;
    }

    while (v25);
    goto LABEL_19;
  }

  unsigned int v27 = 0;
LABEL_22:
  uint64_t v54 = v17;
  uint64_t v28 = (_WORD *)(v18 + 2LL * v27);
  v27 += v8;
  int v29 = v8;
  uint64_t v8 = v8;
  do
  {
    unsigned int v30 = *v9++;
    *v28++ = sub_1000BB868(a1, v30, 0LL);
    --v8;
  }

  while (v8);
  LODWORD(v8) = v29;
  uint64_t v17 = v54;
LABEL_25:
  unint64_t v31 = v27;
  if (v17 < 0x10 || (uint64_t v32 = (char *)v19 + 2 * v27, (unint64_t)&v32[-a6] < 0x20))
  {
    uint64_t v33 = 0LL;
LABEL_29:
    int v34 = (__int16 *)(a6 + 2 * v33);
    uint64_t v35 = v17 - v33;
    uint64_t v36 = (_WORD *)v19 + v31;
    do
    {
      __int16 v37 = *v34++;
      *v36++ = v37;
      --v35;
    }

    while (v35);
    goto LABEL_31;
  }

  uint64_t v33 = v17 & 0x7FFFFFF0;
  unint64_t v31 = (v17 & 0xFFFFFFF0) + (unint64_t)v27;
  uint64_t v50 = (__int128 *)(a6 + 16);
  int v51 = v32 + 16;
  uint64_t v52 = v17 & 0xFFFFFFF0;
  do
  {
    __int128 v53 = *v50;
    *(v51 - 1) = *(v50 - 1);
    *int v51 = v53;
    v50 += 2;
    v51 += 2;
    v52 -= 16LL;
  }

  while (v52);
  if (v33 != v17) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v38 = (v17 + v8);
  if ((int)v38 < 1)
  {
    LOWORD(v39) = 0;
    uint64_t v41 = v55;
  }

  else
  {
    int v39 = 0;
    uint64_t v40 = (int)v16;
    uint64_t v41 = v55;
    while (1)
    {
      unsigned int v42 = *((unsigned __int16 *)v19 + v40);
      if (v42 == 0xFFFF) {
        break;
      }
      else {
        unsigned int v43 = v40;
      }
      uint64_t v44 = (int)v40 - v13;
      if (v40 <= v13) {
        uint64_t v44 = 0LL;
      }
      v39 += sub_1000BBBB0(a1, (uint64_t)v19 + 2 * v44, v43, v42);
      ++v40;
      if (!--v38) {
        goto LABEL_43;
      }
    }

    LOWORD(v39) = 0x4000;
  }

uint64_t sub_10003C0D4( uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int16 *a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v12 = *(void *)(a1 + 392);
  uint64_t v13 = *(void *)(a1 + 480);
  int v14 = sub_10003BB80(a4, a5, a6, *(uint64_t **)(a1 + 376), *(void *)(a1 + 384), a7);
  if (!a2) {
    a2 = *(void *)(a1 + 384);
  }
  uint64_t result = sub_1000A1830(a2, *(void *)(a1 + 376), *(_DWORD *)(a1 + 432));
  if (result)
  {
    uint64_t v16 = result;
    int v75 = a7;
    uint64_t v77 = (void *)v12;
    if (v13) {
      int v17 = sub_10009D1D4(v13);
    }
    else {
      int v17 = sub_1000596B8(v12);
    }
    int v25 = v17;
    v83[0] = 0;
    int v81 = 0;
    uint64_t v80 = 0LL;
    uint64_t v74 = a3;
    *a3 = 0x40000000;
    uint64_t v26 = 2LL * v14;
    unsigned int v27 = sub_1000CAFC0(v26, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v35 = sub_1000CAFC0(v26, v28, v29, v30, v31, v32, v33, v34);
    unsigned int v43 = (unsigned __int16 *)sub_1000CAFC0(v26, v36, v37, v38, v39, v40, v41, v42);
    uint64_t v76 = sub_1000CAFC0(v26, v44, v45, v46, v47, v48, v49, v50);
    if (sub_1000A1CDC( v16,  v25,  v75,  0x7FFFFFFF,  1,  0,  a6,  a4,  v51,  v52,  v53,  v54,  v55,  v56,  0,  v43,  v14,  v27,  v35,  (uint64_t)v76,  v83,  a5)
      && v25 >= 1)
    {
      if (v13)
      {
        int v57 = 0;
        while (1)
        {
          uint64_t v58 = sub_1000B2DB4(v13, v57, &v80);
          if (v25 == ++v57) {
            goto LABEL_16;
          }
        }
      }

      else
      {
        while (1)
        {
          uint64_t v65 = sub_100059730(v77, v13, &v80);
          LODWORD(v13) = v13 + 1;
          if (v25 == (_DWORD)v13)
          {
LABEL_16:
            if (sub_1000A20A0(v16, 0, &v81) != 3)
            {
              __int16 v82 = -1;
              int v72 = *(_DWORD *)(a1 + 452);
              if (v72) {
                __int16 v82 = *(_WORD *)(a1 + 2LL * (v72 - 1) + 448);
              }
              int v73 = sub_10003BE3C( *(void *)(a1 + 376),  1LL,  1LL,  (uint64_t)&v82,  *(unsigned int *)(a1 + 460),  a1 + 456,  (uint64_t)a4,  a6);
              v81 += v73;
              _DWORD *v74 = v81;
            }

            break;
          }
        }
      }
    }

    sub_1000CB038(v76, v26);
    sub_1000CB038(v43, v26);
    sub_1000CB038(v35, v26);
    sub_1000CB038(v27, v26);
    return sub_1000A1874(v16);
  }

  return result;
}

uint64_t sub_10003C368(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11 = *(_DWORD *)(a1 + 452);
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = a1 + 448;
  *a2 -= sub_10003BE3C( *(void *)(a1 + 376),  a5,  v12,  a1 + 448 + 2LL * (v11 - (int)v12),  *(unsigned int *)(a1 + 460),  a1 + 456,  a3,  a4);
  int v14 = *(_DWORD *)(a1 + 452);
  else {
    uint64_t v15 = v14;
  }
  uint64_t result = sub_10003BE3C( *(void *)(a1 + 376),  a6,  v15,  v13 + 2LL * (v14 - (int)v15),  *(unsigned int *)(a1 + 460),  a1 + 456,  a3,  a4);
  *a2 += result;
  return result;
}

void sub_10003C430(uint64_t a1, uint64_t a2, char *__base, int *a4)
{
  int v8 = *a4;
  if (qword_1000FDCC0)
  {
    int v9 = *(_DWORD *)(qword_1000FDCC0 + 4596);
    if ((v9 - 4) < 2)
    {
      int v10 = 1;
      uint64_t v11 = *(void *)(a1 + 480);
      if (!v11) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }

    if (v9 == 2) {
      goto LABEL_16;
    }
  }

  int v10 = 0;
  uint64_t v11 = *(void *)(a1 + 480);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_7:
  if (sub_10009D1D4(v11))
  {
    int v8 = *a4;
    if (*a4 >= 1)
    {
      int v12 = 0;
      do
      {
        uint64_t v13 = &__base[1096 * v12];
        sub_10003C0D4(a1, a2, v13, (unsigned __int16 *)v13 + 14, (uint64_t)(v13 + 264), *((_DWORD *)v13 + 2), v10);
        if (*(_DWORD *)v13 == 0x40000000)
        {
          if (--v8 > v12) {
            j__memmove(&__base[1096 * v12], &__base[1096 * v12 + 1096], 1096 * (v8 - v12));
          }
          --v12;
        }

        ++v12;
      }

      while (v12 < v8);
    }

    *a4 = v8;
  }

uint64_t sub_10003C63C(_DWORD **a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  LODWORD(v3) = 0;
  uint64_t v4 = a2;
  do
  {
    int v5 = *a1++;
    else {
      uint64_t v3 = v3;
    }
    --v4;
  }

  while (v4);
  return v3;
}

BOOL sub_10003C6A4(_DWORD **a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  int v3 = 0;
  uint64_t v4 = a2;
  do
  {
    int v5 = *a1++;
    --v4;
  }

  while (v4);
  return v3 != 0;
}

void *sub_10003C700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = (void *)sub_10003C7D4(a1, a2, a5);
  if (!v10) {
    return v10;
  }
  if (a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = a2;
  }
  uint64_t v12 = sub_100038B44(a1, v11, 0LL, 0LL, a5, 1LL);
  v10[66] = v12;
  if (v12)
  {
    if (!a4)
    {
LABEL_9:
      v10[59] = *(void *)(v12 + 472);
      return v10;
    }

    uint64_t v13 = sub_100038B44(a1, a4, 0LL, 0LL, a5, 10LL);
    v10[68] = v13;
    if (v13)
    {
      uint64_t v12 = v10[66];
      goto LABEL_9;
    }
  }

  sub_100038D28((uint64_t)v10, 0LL);
  return 0LL;
}

uint64_t sub_10003C7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)sub_1000C1074(632LL);
  uint64_t v7 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  memcpy(v6, &off_1000F8DE0, 0x208uLL);
  *(void *)(v7 + 376) = a1;
  *(void *)(v7 + 384) = a2;
  *(_DWORD *)(v7 + 432) = a3;
  uint64_t v8 = sub_100038B44(a1, a2, 0LL, 0LL, a3, 4LL);
  *(void *)(v7 + 536) = v8;
  if (v8)
  {
    sub_10003AF54(v7);
    if (!*(void *)(v7 + 408))
    {
LABEL_11:
      sub_100038D28(v7, 0LL);
      return 0LL;
    }

    if (qword_1000FDCC0)
    {
      sub_100038FBC(v7, 0, *(_DWORD *)(qword_1000FDCC0 + 5372));
      uint64_t v9 = qword_1000FDCC0;
      if (!qword_1000FDCC0)
      {
LABEL_8:
        *(_DWORD *)(v7 + 576) = v9;
        uint64_t v10 = sub_1000C1074(2LL * (int)v9);
        *(void *)(v7 + 584) = v10;
        if (v10)
        {
          uint64_t v11 = sub_1000C1074(4LL * *(int *)(v7 + 576));
          *(void *)(v7 + 592) = v11;
          if (v11) {
            return v7;
          }
        }

        goto LABEL_11;
      }
    }

    else
    {
      sub_100038FBC(v7, 0, 0);
      uint64_t v9 = qword_1000FDCC0;
      if (!qword_1000FDCC0) {
        goto LABEL_8;
      }
    }

    LODWORD(v9) = *(_DWORD *)(v9 + 4680);
    goto LABEL_8;
  }

  sub_1000C0EF8(v7);
  return 0LL;
}

void *sub_10003C928(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = (void *)sub_10003C7D4(a3, a4, a7);
  if (v14)
  {
    uint64_t v28 = a6;
    int v15 = sub_1000C88E4((unint64_t)a2) + 10;
    uint64_t v23 = (unsigned __int8 *)sub_1000CAFC0(v15, v16, v17, v18, v19, v20, v21, v22);
    sub_1000C89F8(v23, a2, v15);
    sub_1000C89F8(v23, "fast", v15);
    if (a5) {
      uint64_t v24 = a5;
    }
    else {
      uint64_t v24 = a4;
    }
    v14[66] = sub_10003AF78(a1, v23, a3, v24, 0LL, 0LL);
    sub_1000CB038(v23, v15);
    uint64_t v25 = v14[66];
    if (v25)
    {
      if (!v28)
      {
LABEL_9:
        v14[59] = *(void *)(v25 + 472);
        return v14;
      }

      uint64_t v26 = sub_100038B44(a3, v28, 0LL, 0LL, a7, 10LL);
      v14[68] = v26;
      if (v26)
      {
        uint64_t v25 = v14[66];
        goto LABEL_9;
      }
    }

    sub_100038D28((uint64_t)v14, 0LL);
    return 0LL;
  }

  return v14;
}

uint64_t sub_10003CA60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[66];
  if (v4)
  {
    sub_100038D28(v4, a2);
    a1[66] = 0LL;
  }

  uint64_t v5 = a1[67];
  if (v5)
  {
    sub_100038D28(v5, a2);
    a1[67] = 0LL;
  }

  uint64_t v6 = a1[68];
  if (v6)
  {
    sub_100038D28(v6, a2);
    a1[68] = 0LL;
  }

  sub_1000C0EF8(a1[73]);
  sub_1000C0EF8(a1[74]);
  bzero(a1, 0x208uLL);
  return sub_1000C0EF8((uint64_t)a1);
}

uint64_t sub_10003CAE4(uint64_t a1)
{
  return sub_100038EC8(*(void *)(a1 + 528));
}

uint64_t sub_10003CAEC(uint64_t a1)
{
  return sub_100038EDC(*(void *)(a1 + 528));
}

uint64_t sub_10003CAF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  int v13 = a7;
  int v14 = a3;
  uint64_t v16 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    *(_DWORD *)(a1 + 372) = a6;
    *(_DWORD *)(a1 + 564) = HIDWORD(a9);
    goto LABEL_14;
  }

  if (!*(_DWORD *)(qword_1000FDCC0 + 3224) || *(_DWORD *)(qword_1000FDCC0 + 3024))
  {
    *(_DWORD *)(a1 + 372) = a6;
    *(_DWORD *)(a1 + 564) = HIDWORD(a9);
    if ((_DWORD)a6 == 1)
    {
      if (*(_DWORD *)(v16 + 4716)) {
        a6 = 2LL;
      }
      else {
        a6 = 1LL;
      }
    }

uint64_t sub_10003CC1C(uint64_t a1, int a2, int a3)
{
  else {
    return 0LL;
  }
}

uint64_t sub_10003CC84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1780) && !*(_DWORD *)(result + 616))
  {
    *(_DWORD *)(result + 616) = 1;
  }

  else
  {
    *(_DWORD *)(result + 616) = *(_DWORD *)(result + 616) == 0;
    uint64_t result = sub_100039834(*(void *)(result + 528), a2, a3);
    if (*(_DWORD *)(v3 + 372) != 1 || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4716)) {
      return sub_1000398FC(*(void *)(v3 + 528));
    }
  }

  return result;
}

uint64_t sub_10003CD0C(uint64_t a1)
{
  uint64_t result = sub_10003982C(*(void *)(a1 + 528));
  if ((_DWORD)result != 1)
  {
    if (sub_1000398FC(*(void *)(a1 + 528)))
    {
      return 3LL;
    }

    else if (sub_1000398FC(*(void *)(a1 + 536)))
    {
      return 3LL;
    }

    else
    {
      uint64_t result = sub_10003982C(*(void *)(a1 + 528));
      if ((_DWORD)result != 2) {
        return sub_10003982C(*(void *)(a1 + 536));
      }
    }
  }

  return result;
}

uint64_t sub_10003CD84(uint64_t a1)
{
  return sub_1000398BC(*(void *)(a1 + 528));
}

uint64_t sub_10003CD8C(uint64_t a1)
{
  uint64_t result = sub_10003982C(*(void *)(a1 + 528));
  if ((_DWORD)result != 1)
  {
    if (sub_1000398FC(*(void *)(a1 + 528)))
    {
      return 3LL;
    }

    else if (sub_1000398FC(*(void *)(a1 + 536)))
    {
      return 3LL;
    }

    else
    {
      uint64_t result = sub_10003982C(*(void *)(a1 + 528));
      if ((_DWORD)result != 2) {
        return sub_10003982C(*(void *)(a1 + 536));
      }
    }
  }

  return result;
}

uint64_t sub_10003CE04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2) {
    sub_10003991C(v2);
  }
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    return sub_10003991C(result);
  }
  return result;
}

uint64_t sub_10003CE40( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, void *a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, uint64_t a14)
{
  uint64_t v22 = *(void *)(a1 + 536);
  if (sub_10003982C(a1) == 3)
  {
    uint64_t result = 0LL;
LABEL_3:
    *a6 = -1;
    *a3 = 0x40000000;
    return result;
  }

  __int128 v105 = 0u;
  __int128 v106 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  if (*(_DWORD *)(a1 + 372) == 1 && (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4716))) {
    return sub_10003967C( *(void *)(a1 + 528),  a13,  a14,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t)a8,  a9,  (uint64_t)a10,  (uint64_t)a11,  a12,  0LL);
  }
  uint64_t v97 = a10;
  unsigned int v24 = sub_10009D4E8(v22, (uint64_t)&v99);
  unsigned int v98 = v24;
  int v25 = sub_1000398FC(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 372) != 1 || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4716)) {
    v25 |= sub_1000398FC(*(void *)(a1 + 536));
  }
  if (v25) {
    return 0LL;
  }
  if (!v24)
  {
    uint64_t v96 = 0LL;
    goto LABEL_75;
  }

  int v26 = DWORD1(v99);
  uint64_t v27 = SDWORD1(v99);
  if (SDWORD1(v99) >= 1)
  {
    unint64_t v28 = ((unint64_t)DWORD1(v99) + 1) >> 1;
    if (DWORD1(v99) >= 0xF)
    {
      unint64_t v29 = 0LL;
      uint64_t v30 = (DWORD1(v99) - 1);
      if (DWORD1(v99) - (int)v28 < SDWORD1(v99)
        && (char *)&v99 + 2 * (DWORD1(v99) - 1) + -2 * v28 + 18 <= (char *)&v99
                                                                               + 2 * (DWORD1(v99) - 1)
                                                                               + 16
        && (char *)&v99 + v30 - v28 + 89 <= (char *)&v99 + v30 + 88)
      {
        unint64_t v29 = 0LL;
        uint64_t v31 = (char *)&v99 + 2 * v28 + 16;
        uint64_t v32 = (char *)&v99 + v28 + 88;
        uint64_t v33 = 2LL * (DWORD1(v99) - 1) + 18;
        uint64_t v34 = (char *)&v99 + v33 - 2 * v28;
        uint64_t v35 = (char *)&v99 + v33;
        uint64_t v36 = (char *)&v99 + v30 + 89 - v28;
        uint64_t v37 = (char *)&v99 + v30 + 89;
        BOOL v38 = &v100 >= (__int128 *)((char *)&v99 + v33) || v34 >= v31;
        BOOL v39 = !v38;
        BOOL v40 = &v100 >= (__int128 *)v37 || v36 >= v31;
        BOOL v41 = !v40;
        BOOL v42 = (char *)&v104 + 8 >= v35 || v34 >= v32;
        BOOL v43 = !v42;
        BOOL v44 = (char *)&v104 + 8 >= v37 || v36 >= v32;
        BOOL v45 = !v44;
        BOOL v46 = v34 >= v37 || v36 >= v35;
        BOOL v47 = !v46;
        BOOL v48 = (char *)&v104 + 8 >= v31 || &v100 >= (__int128 *)v32;
        if (v48 && !v39 && !v41 && !v43 && !v45 && !v47)
        {
          if (DWORD1(v99) >= 0x1F)
          {
            unint64_t v29 = (((unint64_t)DWORD1(v99) + 1) >> 1) & 0x7FFFFFF0;
            unint64_t v49 = v29;
            uint64_t v50 = (int8x16_t *)((char *)&v104 + 8);
            int32x4_t v51 = (int16x8_t *)&v100;
            do
            {
              int16x8_t v53 = *v51;
              int16x8_t v52 = v51[1];
              int32x4_t v54 = (int16x8_t *)((char *)&v97 + 2 * (int)v30 + 2);
              int8x16_t v55 = (int8x16_t)vrev64q_s16(*v54);
              int8x16_t v56 = (int8x16_t)vrev64q_s16(v54[1]);
              *(int8x16_t *)int32x4_t v51 = vextq_s8(v56, v56, 8uLL);
              v51[1] = (int16x8_t)vextq_s8(v55, v55, 8uLL);
              v51 += 2;
              int8x16_t v57 = (int8x16_t)vrev64q_s16(v53);
              int8x16_t v58 = (int8x16_t)vrev64q_s16(v52);
              *(int8x16_t *)int32x4_t v54 = vextq_s8(v58, v58, 8uLL);
              v54[1] = (int16x8_t)vextq_s8(v57, v57, 8uLL);
              int8x16_t v59 = *v50;
              int8x16_t v60 = vrev64q_s8(*(int8x16_t *)((char *)&v103 + (int)v30 + 9));
              *v50++ = vextq_s8(v60, v60, 8uLL);
              int8x16_t v61 = vrev64q_s8(v59);
              *(__int128 *)((char *)&v103 + (int)v30 + 9) = (__int128)vextq_s8(v61, v61, 8uLL);
              LODWORD(v30) = v30 - 16;
              v49 -= 16LL;
            }

            while (v49);
            if (v29 == v28) {
              goto LABEL_74;
            }
            if ((v28 & 8) == 0) {
              goto LABEL_72;
            }
          }

          else
          {
            unint64_t v29 = 0LL;
          }

          unint64_t v62 = v29;
          unint64_t v29 = v28 & 0x7FFFFFF8;
          int8x16_t v63 = (int16x8_t *)((char *)&v99 + 2 * v62 + 16);
          int8x16_t v64 = (uint64_t *)((char *)&v99 + v62 + 88);
          unint64_t v65 = v62 - v29;
          int v66 = ~(_DWORD)v62 + v26;
          do
          {
            int16x8_t v67 = *v63;
            uint64_t v68 = 2LL * v66;
            int8x16_t v69 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)&v99 + v68 + 2));
            *(int8x16_t *)v63++ = vextq_s8(v69, v69, 8uLL);
            int8x16_t v70 = (int8x16_t)vrev64q_s16(v67);
            *(__int128 *)((char *)&v99 + v68 + 2) = (__int128)vextq_s8(v70, v70, 8uLL);
            v70.i64[0] = *v64;
            *v64++ = (uint64_t)vrev64_s8(*(int8x8_t *)((char *)&v104 + v66 + 1));
            *(int8x8_t *)((char *)&v104 + v66 + 1) = vrev64_s8(*(int8x8_t *)v70.i8);
            v66 -= 8;
            v65 += 8LL;
          }

          while (v65);
          if (v29 == v28) {
            goto LABEL_74;
          }
        }
      }
    }

    else
    {
      unint64_t v29 = 0LL;
    }

LABEL_88:
    int v85 = *(_DWORD *)(qword_1000FDCC0 + 4008);
    goto LABEL_90;
  }

  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4596)) {
    goto LABEL_88;
  }
  __int128 v79 = v99;
  __int128 v80 = v100;
  __int128 v81 = v102;
  *(_OWORD *)(result + 32) = v101;
  *(_OWORD *)(result + 48) = v81;
  *(_OWORD *)uint64_t result = v79;
  *(_OWORD *)(result + 16) = v80;
  __int128 v82 = v103;
  __int128 v83 = v104;
  __int128 v84 = v106;
  *(_OWORD *)(result + 96) = v105;
  *(_OWORD *)(result + 112) = v84;
  *(_OWORD *)(result + 64) = v82;
  *(_OWORD *)(result + 80) = v83;
LABEL_110:
  sub_100023688((uint64_t)v77, *(void *)(v78 + 96), (int *)&v98, a2, (uint64_t)a3, a5, (uint64_t)a6, a7, a11);
  if (a8) {
    bzero(a8, 4LL * (int)v98);
  }
  if (v97) {
    bzero(v97, (int)v98);
  }
  sub_1000C0EF8((uint64_t)v77);
  return v98;
}

          uint64_t v76 = 0;
          uint64_t v77 = 0;
          goto LABEL_89;
        }

        BOOL v87 = *v396;
        unsigned int v88 = v78 - 1;
        v416 = v78 - 1;
        a2 = (_DWORD *)v407;
        if (v78 != 1)
        {
          int8x16_t v69 = __dst;
          BOOL v89 = 2 * (v88 - __dst);
          unsigned int v86 = __src;
          goto LABEL_147;
        }

        BOOL v45 = 0LL;
        v370 = 1;
        v371 = v68;
        goto LABEL_327;
      }

      unsigned int v98 = (unsigned int *)(*(void *)(v395 + 48) + 16 * ((__int16)v93 - 1LL));
      __int128 v99 = v98[1];
      if (v99 < 1) {
        goto LABEL_150;
      }
      v368 = v90;
      v366 = v92;
      __int128 v100 = 0LL;
      __int128 v101 = *v98;
      __int128 v102 = v99 + *v98;
      v373 = (unsigned __int16 *)(v82 + 12LL * v81 + 4);
      v365 = v98 + 3;
      v364 = v414;
      __int128 v103 = 0x7FFFFFFFLL;
      while (2)
      {
        __int128 v104 = v103;
        __int128 v105 = v100;
        __int128 v106 = 8LL * (v101 >> 8);
        uint64_t v107 = *(void *)(*(void *)v67 + v106);
        __int128 v100 = (unsigned __int16 *)(v107 + 8LL * v101);
        uint64_t v108 = *(void *)(*(void *)(v67 + 16) + v106);
        uint64_t v109 = *v75;
        if ((_DWORD)v109 == 35)
        {
          if ((__int16)*v100 == -2 && !*(_WORD *)(v107 + 8LL * v101 + 2))
          {
            int v110 = 0;
          }

          goto LABEL_109;
        }

        int v110 = *(unsigned __int16 *)(v107 + 8LL * v101 + 2);
LABEL_117:
        uint64_t v111 = *v100;
        if (!(_DWORD)v109 && (!v110 ? (uint64_t v112 = v111 == 65534) : (uint64_t v112 = 0), v112))
        {
LABEL_109:
          __int128 v103 = v104;
          __int128 v100 = v105;
        }

        else if ((!a10 {
                || v111 == 65534
        }
                || (*(_WORD *)(v407 + (v72 << 7) + 2 * v109 + 16) = v111, sub_100026158((uint64_t)a9, a10)))
               && sub_100005DBC(v377, *v373, *(unsigned __int16 *)(v108 + 12LL * v101 + 6)))
        {
          __int128 v103 = v368;
          int16x8_t v67 = v395;
          if (v368 != v101)
          {
            uint64_t v113 = *v365 - v364 + *(__int16 *)(v107 + 8LL * v101 + 4);
            if (v113 < 0) {
              int v114 = *(_WORD *)v365 - v364 + *(_WORD *)(v107 + 8LL * v101 + 4);
            }
            else {
              int v114 = 0;
            }
            sub_1000D591C( (void *)v395,  v407,  v400,  &v416,  v372,  (v113 & ~(v113 >> 31)) + *(_DWORD *)(v407 + (v72 << 7) + 12),  v101,  v387,  v366 - v114,  *(_DWORD *)(v395 + 112));
            int16x8_t v67 = v395;
            goto LABEL_109;
          }
        }

        else
        {
          __int128 v103 = v104;
          __int128 v100 = v105;
          int16x8_t v67 = v395;
        }

        break;
      }

      int8x16_t v69 = __dst;
      if (v100)
      {
        __int16 v73 = v400;
        *(_DWORD *)v400 = v103;
        int v118 = *v100;
        BOOL v48 = (unsigned __int16 *)v387;
        if (v118 == 65534)
        {
          uint64_t v77 = v100[1];
          a2 = (_DWORD *)v407;
          if (v100[1])
          {
            uint64_t v119 = *v75;
            uint64_t v68 = v392;
            uint64_t v76 = 0;
            uint64_t v77 = 0;
            if ((_DWORD)v119)
            {
              int16x8_t v67 = v395;
              *(_BYTE *)(v407 + (v72 << 7) + v119 + 88) = 1;
            }
          }

          else
          {
            uint64_t v76 = 0;
            uint64_t v68 = v392;
          }
        }

        else
        {
          a2 = (_DWORD *)v407;
          uint64_t v122 = v407 + (v72 << 7);
          *(_WORD *)(v122 + 2LL * *v75 + 16) = v118;
          unsigned int v123 = *(unsigned __int16 *)(*(void *)(*(void *)(v67 + 16) + 8LL * (v103 >> 8))
                                     + 12LL * v103
                                     + 6);
          unsigned int v124 = *v75;
          if (v123) {
            unsigned int v125 = 1;
          }
          else {
            unsigned int v125 = *v75 < 1;
          }
          uint64_t v68 = v392;
          if (!v125) {
            *(_BYTE *)(v122 + (v124 - 1) + 88) = 1;
          }
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          int v126 = v124 + 1;
          *uint64_t v75 = v126;
          *(_BYTE *)(v122 + v126 + 88) = 0;
          *(_WORD *)(v122 + 124) += v366;
          int16x8_t v67 = v395;
        }

        int v71 = v396;
LABEL_89:
        if ((v76 & 1) == 0 && !v77)
        {
          ++v69;
          int v71 = __src;
          if (*(_DWORD *)v73 == 0x7FFFFFFF) {
            continue;
          }
          uint64_t v130 = v371;
          if (*((_DWORD *)v73 + 1) < v371) {
            uint64_t v130 = *((_DWORD *)v73 + 1);
          }
          v370 = 0;
          v371 = v130;
          int8x16_t v70 = __src;
          goto LABEL_83;
        }

        goto LABEL_85;
      }

      break;
    }

    uint64_t v78 = v416;
    BOOL v48 = (unsigned __int16 *)v387;
    uint64_t v68 = v392;
    int v71 = v396;
LABEL_150:
    int v120 = v78 - 1;
    v416 = v78 - 1;
    if (v78 != 1)
    {
      int8x16_t v69 = __dst;
      a2 = (_DWORD *)v407;
      if (v120 <= __dst)
      {
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        __int16 v73 = v400;
      }

      else
      {
        int v121 = *v71;
        j__memmove(v71, __src, 2LL * (v120 - __dst));
        int16x8_t v67 = v395;
        int v71 = v396;
        uint64_t v77 = 0;
        v48[v120] = v121;
        __int16 v73 = (__int128 *)(v407 + ((unint64_t)*v396 << 7));
        uint64_t v76 = 1;
      }

      goto LABEL_89;
    }

    BOOL v45 = 0LL;
    v370 = 1;
    v371 = v68;
    a2 = (_DWORD *)v407;
LABEL_327:
    if (v371 != v68 && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 992))
    {
      sub_1000D3890(v67, (uint64_t)a2, v45, v361, v362, v363, v48, v371);
      int16x8_t v67 = v395;
    }

    uint64_t v232 = v45;
    uint64_t v233 = __OFSUB__((_DWORD)v45, 1);
    v234 = (v45 - 1);
    int v235 = v232;
    if ((int)v234 < 0 == v233)
    {
      int32x4_t v236 = &v48[v234];
      if (a10)
      {
        int32x4_t v237 = 1LL - (int)v232;
        do
        {
          uint64_t v238 = *v236;
          int v239 = (_DWORD *)(v407 + (v238 << 7));
          if (*v239 != 0x7FFFFFFF
            && *(unsigned __int16 *)(*(void *)(*(void *)v67
                                               + (((unint64_t)*v239 >> 5) & 0x7FFFFF8))
                                   + 8LL * *v239
                                   + 2) == a4)
          {
            int v240 = (int16x8_t *)(v407 + (v238 << 7));
            int v241 = v240->i32[1];
            if (v241 && (v242 = sub_1000264E0((uint64_t)a9, a10, v240 + 1, v241), int16x8_t v67 = v395, v242))
            {
              *int v239 = 0x7FFFFFFF;
              uint32x4_t v243 = v407 + (v238 << 7);
              int v246 = *(__int16 *)(v243 + 124);
              float64x2_t v244 = (_WORD *)(v243 + 124);
              int32x4_t v245 = v246;
              if (v246)
              {
                int16x8_t v67 = v395;
                *(_DWORD *)(v407 + (v238 << 7) + 12) -= v245;
                *float64x2_t v244 = 0;
              }
            }

            else
            {
              uint64_t v247 = (v232 - 1);
              int v235 = v234;
              LODWORD(v232) = v234;
              if ((_DWORD)v234 != (_DWORD)v247)
              {
                unsigned int v248 = *v236;
                j__memmove(v236, v236 + 1, 2 * (v237 + (int)v247));
                int16x8_t v67 = v395;
                v48[(int)v247] = v248;
                int v235 = v247;
                LODWORD(v232) = v247;
              }
            }
          }

          v234 = (v234 - 1);
          --v236;
          ++v237;
        }

        while ((_DWORD)v234 != -1);
        goto LABEL_343;
      }

      unint64_t v272 = 1LL - (int)v232;
      while (2)
      {
        unint64_t v273 = *v236;
        v274 = (_DWORD *)(v407 + (v273 << 7));
        if (*v274 != 0x7FFFFFFF)
        {
          if (*(unsigned __int16 *)(*(void *)(*(void *)v67
                                               + (((unint64_t)*v274 >> 5) & 0x7FFFFF8))
                                   + 8LL * *v274
                                   + 2) != a4)
            goto LABEL_374;
          BOOL v275 = v407 + (v273 << 7);
          if (*(_DWORD *)(v275 + 4))
          {
            *v274 = 0x7FFFFFFF;
            v278 = *(__int16 *)(v275 + 124);
            BOOL v277 = (_WORD *)(v275 + 124);
            v276 = v278;
            if (v278)
            {
              *(_DWORD *)(v407 + (v273 << 7) + 12) -= v276;
              *BOOL v277 = 0;
            }

uint64_t sub_10003D4C8(uint64_t a1)
{
  return sub_100039818(*(void *)(a1 + 536));
}

uint64_t sub_10003D4D0(uint64_t a1)
{
  return sub_100039B8C(*(void *)(a1 + 536));
}

uint64_t sub_10003D4F8(uint64_t a1)
{
  return sub_1000399C4(*(void *)(a1 + 528));
}

uint64_t sub_10003D500(uint64_t a1)
{
  uint64_t v2 = *(__int128 **)(*(void *)(a1 + 536) + 472LL);
  if (!v2) {
    uint64_t v2 = *(__int128 **)(a1 + 472);
  }
  return sub_1000D0454(v2);
}

uint64_t sub_10003D51C( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int v14 = a8;
  int v15 = a7;
  uint64_t v16 = a5;
  if (a5)
  {
    if (a4) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 472);
    if (a4) {
      goto LABEL_7;
    }
  }

  a4 = *(void *)(a2 + 504);
LABEL_7:
  unsigned int v41 = 0;
  __int16 v40 = 0;
  uint64_t v19 = *(void *)(a4 + 16);
  uint64_t v37 = a1;
  int v38 = v15;
  if (v14 >= 1)
  {
    uint64_t v20 = 0LL;
    signed __int16 v21 = 0;
    while (*(__int16 *)(v19 + 2 * v20) < v14)
    {
      v21 += *(_WORD *)(*(void *)(a4 + 8) + 2 * v20++);
    }

    if ((_DWORD)v20)
    {
LABEL_14:
      uint64_t v23 = (v20 - 1);
      if (!*(_WORD *)(*(void *)(a4 + 24) + 2LL * v23)
        && qword_1000FDCC0
        && *(void *)(qword_1000FDCC0 + 4128))
      {
        unsigned __int16 v22 = v21 - *(_WORD *)(*(void *)(a4 + 8) + 2 * v23);
        goto LABEL_16;
      }
    }

    unsigned __int16 v22 = v21;
    goto LABEL_16;
  }

  LODWORD(v20) = 0;
  signed __int16 v21 = 0;
  unsigned __int16 v22 = 0;
LABEL_16:
  uint64_t v20 = v20;
  do
  {
    v21 += *(_WORD *)(*(void *)(a4 + 8) + 2 * v20++);
  }

  while (v20 < *(int *)(a4 + 36));
  if ((int)v20 <= 0)
  {
    uint64_t v25 = qword_1000FDCC0;
    __int16 v26 = v21 - (v21 > 0);
    if (!qword_1000FDCC0) {
      goto LABEL_25;
    }
    goto LABEL_33;
  }

  uint64_t v24 = (v20 - 1);
  uint64_t v25 = qword_1000FDCC0;
  if (!*(_WORD *)(*(void *)(a4 + 24) + 2LL * v24))
  {
    if (!qword_1000FDCC0)
    {
      __int16 v26 = v21 - (v21 > 0);
      uint64_t v27 = sub_1000CAFC0(0LL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
      if (v14) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }

    if (*(void *)(qword_1000FDCC0 + 4128)) {
      v21 -= *(_WORD *)(*(void *)(a4 + 8) + 2 * v24);
    }
    __int16 v26 = v21 - (v21 > 0);
LABEL_33:
    if (*(_DWORD *)(v25 + 1780))
    {
      unsigned __int16 v22 = (__int16)(v22 + ((unsigned __int16)(v22 & 0x8000) >> 15)) >> 1;
      __int16 v26 = (__int16)(v26 + ((unsigned __int16)(v26 & 0x8000) >> 15)) >> 1;
    }

    uint64_t v27 = sub_1000CAFC0(*(void *)(v25 + 4008) << 7, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
    if (v14) {
      goto LABEL_36;
    }
LABEL_26:
    unint64_t v28 = (__int16 *)(v16 + 104);
    unsigned int v29 = *(_DWORD *)(v16 + 108);
    if (v38 - 1 != a9) {
      goto LABEL_27;
    }
LABEL_37:
    uint64_t v31 = v37;
    unsigned int v30 = *(unsigned __int16 *)(v37 + 456);
    uint64_t v32 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }

  __int16 v26 = v21 - (v21 > 0);
  if (qword_1000FDCC0) {
    goto LABEL_33;
  }
LABEL_25:
  uint64_t v27 = sub_1000CAFC0(0LL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  if (!v14) {
    goto LABEL_26;
  }
LABEL_36:
  __int16 v40 = sub_1000B3A9C(*(void *)(v16 + 96), a6[v14 - 1]);
  unint64_t v28 = &v40;
  unsigned int v29 = 1;
  if (v38 - 1 == a9) {
    goto LABEL_37;
  }
LABEL_27:
  unsigned int v30 = sub_1000B3A9C(*(void *)(v16 + 96), a6[a9 + 1]);
  uint64_t v31 = v37;
  uint64_t v32 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
LABEL_28:
    int v33 = 0;
LABEL_41:
    unsigned int v34 = sub_1000D1250(v16, v27, v33, v22, v26, (uint64_t)v28, v29, v30, 0LL, 0);
    goto LABEL_42;
  }

uint64_t sub_10003D8DC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(result + 372) == 1 && (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4716)))
  {
    uint64_t result = sub_100039820(*(void *)(result + 528), 0LL);
    *(_DWORD *)(v3 + 520) = 1;
  }

  if (*(_DWORD *)(v3 + 520) == 1) {
    return result;
  }
  *(void *)(v3 + 480) = a2;
  uint64_t v4 = *(void *)(v3 + 536);
  if (!a2)
  {
LABEL_10:
    uint64_t result = sub_10003991C(v4);
    goto LABEL_11;
  }

  if (!sub_10003927C( v4,  *(unsigned int *)(v3 + 568),  v3 + 572,  0LL,  0LL,  *(unsigned int *)(v3 + 372),  *(unsigned int *)(v3 + 552),  *(_DWORD *)(v3 + 556),  *(void *)(v3 + 560))
    || (int v5 = sub_1000398BC(*(void *)(v3 + 528)), v6 = v5 - 1, v5 <= 1))
  {
    uint64_t v4 = *(void *)(v3 + 536);
    goto LABEL_10;
  }

  int v7 = v5 - 1;
  if (qword_1000FDCC0) {
    int v7 = v6 << (*(_DWORD *)(qword_1000FDCC0 + 1780) != 0);
  }
  sub_100039820(*(void *)(v3 + 528), 0LL);
  sub_10009D5B8(*(_WORD **)(v3 + 536), v6);
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 3224)
    && *(_DWORD *)(qword_1000FDCC0 + 3024)
    && *(_DWORD *)(qword_1000FDCC0 + 1312) == 3)
  {
    __int128 v82 = (__int16 *)sub_1000CAF58(2LL * *(int *)(v3 + 576), v8, v9, v10, v11, v12, v13, v14);
    __int128 v81 = (int *)sub_1000CAF58(4LL * *(int *)(v3 + 576), v15, v16, v17, v18, v19, v20, v21);
  }

  else
  {
    __int128 v81 = 0LL;
    __int128 v82 = 0LL;
  }

  uint64_t v22 = 0LL;
  BOOL v23 = 0;
  BOOL v85 = 0;
  char v24 = 0;
  unsigned int v86 = 0LL;
  uint64_t v25 = qword_1000FDCC0;
  uint64_t v84 = a2;
  while (1)
  {
    if (v25 && *(_DWORD *)(v25 + 1648))
    {
      if (v85)
      {
        if (!(_WORD)v6) {
          break;
        }
        LOWORD(v6) = v6 - 1;
      }

      BOOL v85 = !v85;
    }

    uint64_t v26 = sub_1000B2DB4(a2, (__int16)v7, &v86);
    uint64_t v27 = v26;
    if ((v24 & 1) == 0 || !qword_1000FDCC0) {
      goto LABEL_39;
    }
    if (!*(_DWORD *)(qword_1000FDCC0 + 1464))
    {
      uint64_t v29 = v26;
      if (!*(_DWORD *)(qword_1000FDCC0 + 1680)) {
        goto LABEL_40;
      }
      int v30 = sub_100015698(*(void *)(v3 + 384), v26, v22);
      uint64_t v31 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        uint64_t v31 = *(void *)(qword_1000FDCC0 + 1472);
      }
      BOOL v23 = v31 > v30;
LABEL_39:
      uint64_t v29 = v27;
      goto LABEL_40;
    }

    BOOL v28 = !v23;
    BOOL v23 = v23;
    uint64_t v29 = v28 ? v26 : v22;
LABEL_40:
    __int16 v32 = v6;
    if ((_WORD)v6)
    {
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3224))
      {
        BOOL v33 = 0;
        if ((v6 & 1) != 0 && *(_DWORD *)(qword_1000FDCC0 + 3024))
        {
          int v34 = *(_DWORD *)(qword_1000FDCC0 + 1312);
          BOOL v33 = 0;
          switch(v34)
          {
            case 0:
              goto LABEL_83;
            case 1:
              BOOL v33 = 0;
              __int16 v32 = v6 - 2;
              goto LABEL_50;
            case 2:
              goto LABEL_50;
            case 3:
              __int16 v32 = v6 - 2;
              BOOL v33 = (unsigned __int16)v6 != 1;
              goto LABEL_50;
            default:
              goto LABEL_48;
          }
        }
      }

      else
      {
LABEL_48:
        BOOL v33 = 0;
      }

      __int16 v32 = v6 - 1;
LABEL_50:
      int v35 = sub_1000D0BC8( *(void *)(v3 + 472),  *(_WORD **)(v3 + 584),  *(_DWORD **)(v3 + 592),  *(_DWORD *)(v3 + 576) - 1,  v32);
      int v34 = v35;
      if (!v33 || v35)
      {
        if (v33)
        {
          int v36 = sub_1000D0BC8(*(void *)(v3 + 472), v82, v81, *(_DWORD *)(v3 + 576) - 1, (__int16)v6);
          __int128 v83 = *(__int16 **)(v3 + 584);
          uint64_t v37 = *(int **)(v3 + 592);
          int v80 = *(_DWORD *)(v3 + 576);
          uint64_t v78 = 8LL * (v36 + v34);
          int v79 = v36 + v34;
          BOOL v45 = (_DWORD *)sub_1000CAF58(v78, v38, v39, v40, v41, v42, v43, v44);
          BOOL v46 = (char *)v45;
          if (v34 >= 1)
          {
            uint64_t v47 = v34;
            BOOL v48 = v45 + 1;
            unint64_t v49 = v83;
            do
            {
              __int16 v50 = *v49++;
              *((_WORD *)v48 - 2) = v50;
              int v51 = *v37++;
              *BOOL v48 = v51;
              v48 += 2;
              --v47;
            }

            while (v47);
          }

          if (v36 >= 1)
          {
            uint64_t v52 = v36;
            int16x8_t v53 = &v45[2 * v34 + 1];
            int8x16_t v55 = v81;
            int32x4_t v54 = v82;
            do
            {
              __int16 v56 = *v54++;
              *((_WORD *)v53 - 2) = v56;
              int v57 = *v55++;
              _DWORD *v53 = v57;
              v53 += 2;
              --v52;
            }

            while (v52);
          }

          qsort(v45, v79, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10003DFD4);
          if (v79 < 1)
          {
            int v58 = 0;
            unint64_t v62 = (unint64_t)v83;
          }

          else
          {
            int v58 = 0;
            uint64_t v59 = v79;
            unsigned __int16 v60 = -1;
            int8x16_t v61 = v46;
            unint64_t v62 = (unint64_t)v83;
            do
            {
              int v63 = *(unsigned __int16 *)v61;
              if (v63 != v60)
              {
                *(void *)&v46[8 * v58++] = *v61;
                unsigned __int16 v60 = v63;
              }

              ++v61;
              --v59;
            }

            while (v59);
          }

          if (v58 > v80)
          {
            size_t v64 = v58;
            int v58 = v80;
            qsort(v46, v64, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10003DFF8);
          }

          if (v58 >= 1)
          {
            if (v58 >= 0x11
              && (v62 >= (unint64_t)&v46[8 * v58 - 6] || (unint64_t)v46 >= v62 + 2LL * v58))
            {
              uint64_t v66 = v58 & 0xF;
              if ((v58 & 0xF) == 0) {
                uint64_t v66 = 16LL;
              }
              uint64_t v65 = v58 - v66;
              int16x8_t v67 = (const __int16 *)(v46 + 64);
              uint64_t v68 = (unsigned __int128 *)(v62 + 16);
              uint64_t v69 = v65;
              do
              {
                int8x16_t v70 = v67 - 32;
                unsigned __int128 v71 = (unsigned __int128)vld4q_s16(v70);
                unsigned __int128 v72 = (unsigned __int128)vld4q_s16(v67);
                *(v68 - 1) = v71;
                *uint64_t v68 = v72;
                v67 += 64;
                v68 += 2;
                v69 -= 16LL;
              }

              while (v69);
            }

            else
            {
              uint64_t v65 = 0LL;
            }

            uint64_t v73 = v58 - v65;
            uint64_t v74 = (_WORD *)(v62 + 2 * v65);
            uint64_t v75 = &v46[8 * v65];
            do
            {
              __int16 v76 = *(_WORD *)v75;
              v75 += 8;
              *v74++ = v76;
              --v73;
            }

            while (v73);
          }

          sub_1000CB038(v46, v78);
          if (v58) {
            int v34 = v58;
          }
        }
      }

      else
      {
        int v34 = sub_1000D0BC8( *(void *)(v3 + 472),  *(_WORD **)(v3 + 584),  *(_DWORD **)(v3 + 592),  *(_DWORD *)(v3 + 576) - 1,  (__int16)v6);
      }
    }

    else
    {
LABEL_47:
      int v34 = 0;
    }

uint64_t sub_10003DEAC(uint64_t a1)
{
  return sub_100038FD4(*(void *)(a1 + 528));
}

uint64_t sub_10003DEB4(uint64_t a1)
{
  return sub_100039408(*(void *)(a1 + 528));
}

uint64_t sub_10003DEBC(uint64_t a1)
{
  return sub_10003900C(*(void *)(a1 + 528));
}

uint64_t sub_10003DEC4(uint64_t a1)
{
  return sub_100038EF0(*(void *)(a1 + 528));
}

uint64_t sub_10003DED0(uint64_t a1)
{
  uint64_t result = sub_100039A14(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A14(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003DF10(uint64_t a1)
{
  uint64_t result = sub_100039A28(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A28(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003DF50(uint64_t a1)
{
  uint64_t result = sub_100039A3C(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A3C(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003DF90(uint64_t a1)
{
  uint64_t result = sub_100039A50(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A50(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003DFD4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*((_DWORD *)a1 + 1) - *((_DWORD *)a2 + 1));
  }
  return result;
}

uint64_t sub_10003DFF8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v3 = *((_DWORD *)a1 + 1);
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    unsigned int v6 = *a1 - *a2;
    if (v6) {
      return v6;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003E020(uint64_t a1, int a2)
{
  return sub_100066194(*(void *)(a1 + 536), a2);
}

uint64_t sub_10003E028(uint64_t a1, int a2, __int16 a3)
{
  uint64_t result = sub_1000398FC(*(void *)(a1 + 528));
  int v7 = result;
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    if ((_DWORD)result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1000398FC(*(void *)(a1 + 536));
  }

  __int16 v8 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    __int16 v8 = *(_WORD *)(qword_1000FDCC0 + 4088);
  }
  int v9 = (__int16)(v8 + a3);
  int v10 = (__int16)(sub_1000398BC(*(void *)(a1 + 528)) - 1);
  if (v9 >= v10) {
    int v11 = v10;
  }
  else {
    int v11 = v9;
  }
  if (sub_1000D4AA8(*(uint64_t **)(a1 + 552), a2, v11))
  {
    int v12 = 0;
    return sub_1000265B8(*(void *)(a1 + 536));
  }

  else
  {
    uint64_t result = sub_10003991C(*(void *)(a1 + 536));
    *(_DWORD *)(a1 + 520) = 1;
  }

  return result;
}

uint64_t sub_10003E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003E174(0LL, 0LL, a1, a2, a3, a4, a5);
}

uint64_t sub_10003E174(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)sub_1000C1074(8824LL);
  uint64_t v15 = (uint64_t)v14;
  if (v14)
  {
    memcpy(v14, &off_1000F8FE8, 0x208uLL);
    *(void *)(v15 + 376) = a3;
    *(void *)(v15 + 384) = a4;
    uint64_t v16 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 3304)) {
        a7 = ((_DWORD)a7 << (*(_DWORD *)(qword_1000FDCC0 + 1780) != 0));
      }
      *(_DWORD *)(v15 + 432) = a7;
      uint64_t v17 = 3LL;
      if (*(void *)(v16 + 1584))
      {
        if (*(void *)(v16 + 4136)) {
          uint64_t v17 = 9LL;
        }
        else {
          uint64_t v17 = 3LL;
        }
      }
    }

    else
    {
      *(_DWORD *)(v15 + 432) = a7;
      uint64_t v17 = 3LL;
    }

    uint64_t v18 = sub_100038B44(a3, a4, 0LL, 0LL, a7, v17);
    *(void *)(v15 + 536) = v18;
    if (!v18) {
      goto LABEL_42;
    }
    uint64_t v19 = sub_1000045F4(a4);
    if (qword_1000FDCC0)
    {
      uint64_t v20 = sub_1000595C8(v19, *(unsigned int *)(qword_1000FDCC0 + 4056));
      *(void *)(v15 + 392) = v20;
      *(_DWORD *)(v15 + 400) = 1;
      if (!v20) {
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v21 = sub_1000595C8(v19, 0LL);
      *(void *)(v15 + 392) = v21;
      *(_DWORD *)(v15 + 400) = 1;
      if (!v21)
      {
LABEL_42:
        sub_100038D28(v15, 0LL);
        return 0LL;
      }
    }

    int v22 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v22 = *(_DWORD *)(qword_1000FDCC0 + 5240);
    }
    *(_DWORD *)(v15 + 8820) = v22;
    sub_10003AF54(v15);
    if (!*(void *)(v15 + 408)) {
      goto LABEL_42;
    }
    int v23 = qword_1000FDCC0 ? *(_DWORD *)(qword_1000FDCC0 + 5372) : 0;
    sub_100038FBC(v15, 0, v23);
    uint64_t v24 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      uint64_t v25 = (int)a7;
      int v26 = (__int16)(*(void *)(qword_1000FDCC0 + 3512) / (int)a7);
      if (v26 <= 1) {
        LOWORD(v26) = 1;
      }
      *(_WORD *)(v15 + 562) = v26;
      uint64_t v24 = *(void *)(v24 + 3504);
    }

    else
    {
      uint64_t v25 = (int)a7;
      *(_WORD *)(v15 + 562) = 1;
    }

    int v27 = (__int16)(v24 / v25);
    if (v27 <= 1) {
      LOWORD(v27) = 1;
    }
    *(_WORD *)(v15 + 560) = v27;
    if (!a5) {
      a5 = a4;
    }
    if (a1)
    {
      int v28 = sub_1000C88E4((unint64_t)a2) + 10;
      int v36 = (unsigned __int8 *)sub_1000CAFC0(v28, v29, v30, v31, v32, v33, v34, v35);
      *int v36 = 0;
      sub_1000C89F8(v36, a2, v28);
      sub_1000C89F8(v36, "fast", v28);
      *(void *)(v15 + 528) = sub_10003AF78(a1, (char *)v36, a3, a5, 0LL, 0LL);
      sub_1000CB038(v36, v28);
      uint64_t v37 = *(void *)(v15 + 528);
    }

    else
    {
      uint64_t v37 = sub_100038B44(a3, a5, 0LL, 0LL, a7, 1LL);
      *(void *)(v15 + 528) = v37;
    }

    if (!v37) {
      goto LABEL_42;
    }
    if (a6)
    {
      uint64_t v38 = sub_100038B44(a3, a6, 0LL, 0LL, a7, 10LL);
      *(void *)(v15 + 544) = v38;
      if (!v38) {
        goto LABEL_42;
      }
    }

    uint64_t v39 = *(void *)(*(void *)(v15 + 528) + 472LL);
    *(void *)(v15 + 472) = v39;
    uint64_t v40 = sub_1000D49BC(v39);
    *(void *)(v15 + 552) = v40;
    if (!v40) {
      goto LABEL_42;
    }
  }

  return v15;
}

uint64_t sub_10003E46C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[66];
  if (v4)
  {
    sub_100038D28(v4, a2);
    a1[66] = 0LL;
  }

  uint64_t v5 = a1[67];
  if (v5)
  {
    sub_100038D28(v5, a2);
    a1[67] = 0LL;
  }

  uint64_t v6 = a1[68];
  if (v6)
  {
    sub_100038D28(v6, a2);
    a1[68] = 0LL;
  }

  uint64_t v7 = a1[69];
  if (v7)
  {
    sub_1000D4A70(v7);
    a1[69] = 0LL;
  }

  uint64_t v8 = a1[1101];
  if (v8)
  {
    sub_1000C0EF8(v8);
    a1[1101] = 0LL;
  }

  bzero(a1, 0x208uLL);
  return sub_1000C0EF8((uint64_t)a1);
}

BOOL sub_10003E500(uint64_t a1)
{
  int v2 = sub_100038EC8(*(void *)(a1 + 528));
  int v3 = sub_100038EC8(*(void *)(a1 + 536));
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4;
}

uint64_t sub_10003E554(uint64_t a1)
{
  return sub_100038EDC(*(void *)(a1 + 528));
}

uint64_t sub_10003E55C( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  unsigned int v10 = a6 - 5;
  if ((_DWORD)a6 == 5
    || (int v13 = a6, LODWORD(v14) = a5, v15 = a4, qword_1000FDCC0)
    && *(_DWORD *)(qword_1000FDCC0 + 3224)
    && !*(_DWORD *)(qword_1000FDCC0 + 3024))
  {
    sub_10003991C(*(void *)(a1 + 536));
    int v11 = (_DWORD *)(a1 + 520);
LABEL_26:
    uint64_t v20 = 0LL;
    *int v11 = 1;
    return v20;
  }

  if ((_DWORD)a6 == 4) {
    a6 = 5LL;
  }
  else {
    a6 = a6;
  }
  *(_DWORD *)(a1 + 372) = v13;
  *(_DWORD *)(a1 + 8784) = HIDWORD(a9);
  if ((int)a3 < 1)
  {
    int v18 = 0;
  }

  else
  {
    *(_WORD *)(a1 + 8792) = *(_WORD *)(a2 + 2LL * (a3 - 1));
    int v18 = 1;
  }

  *(_DWORD *)(a1 + 8788) = v18;
  unsigned int v24 = a6;
  uint64_t v19 = sub_10003927C(*(void *)(a1 + 528), a3, a2, a5, a4, a6, a7, a8, a9);
  int v11 = (_DWORD *)(a1 + 520);
  if (!(_DWORD)v19) {
    goto LABEL_26;
  }
  uint64_t v20 = v19;
  *int v11 = 0;
  if (v10 >= 0xFFFFFFFE) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (v10 < 0xFFFFFFFE) {
    uint64_t v15 = 0LL;
  }
  if ((_DWORD)v14) {
    memcpy((void *)(a1 + 568), v15, 8LL * (int)v14);
  }
  *(_DWORD *)(a1 + 8760) = v14;
  if (v13 != 1)
  {
    sub_1000596B0(*(void *)(a1 + 392));
    uint64_t v20 = sub_10003927C(*(void *)(a1 + 536), a3, a2, v14, v15, v24, a7, a8, a9);
    *(_WORD *)(a1 + 566) = 0;
    *(_DWORD *)(a1 + 8780) = 1;
    if (*(_DWORD *)(a1 + 8820))
    {
      if (*(int *)(a1 + 8816) >= 1)
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = *(void *)(a1 + 8808);
        do
          *(_DWORD *)(v22 + 4 * v21++) = 0x40000000;
        while (v21 < *(int *)(a1 + 8816));
      }
    }
  }

  return v20;
}

uint64_t sub_10003E718(uint64_t a1, int a2, int a3)
{
  else {
    return 0LL;
  }
}

void sub_10003E780(uint64_t a1, const void *a2, _DWORD *a3)
{
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1780) && !*(_DWORD *)(a1 + 8780))
  {
    *(_DWORD *)(a1 + 8780) = 1;
    return;
  }

  *(_DWORD *)(a1 + 8780) = *(_DWORD *)(a1 + 8780) == 0;
  sub_100039834(*(void *)(a1 + 528), (uint64_t)a2, (uint64_t)a3);
  if (*(_DWORD *)(a1 + 372) != 1)
  {
    if (sub_10003982C(*(void *)(a1 + 528)) != 5)
    {
      if (sub_1000596C0(*(void *)(a1 + 392), a2, a3))
      {
        if (!sub_1000398FC(*(void *)(a1 + 528)))
        {
          int v6 = sub_1000398BC(*(void *)(a1 + 528));
          int v7 = *(__int16 *)(a1 + 566);
          int v8 = *(__int16 *)(a1 + 560);
          if (v8 + v7 + *(__int16 *)(a1 + 562) <= v6)
          {
            __int16 v9 = v6;
            int v10 = sub_1000398FC(*(void *)(a1 + 528));
            if (*(_DWORD *)(a1 + 372) != 1) {
              v10 |= sub_1000398FC(*(void *)(a1 + 536));
            }
            if (!v10)
            {
              __int16 v11 = v9 - v8;
              sub_10003E028(a1, (__int16)v7, v11);
              *(_WORD *)(a1 + 566) = v11;
              sub_100015AE0(*(void *)(*(void *)(a1 + 528) + 384LL));
            }
          }
        }

        return;
      }

      sub_10003991C(*(void *)(a1 + 536));
    }

    *(_DWORD *)(a1 + 520) = 1;
  }

uint64_t sub_10003E8FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 372);
  uint64_t v3 = *(void *)(a1 + 528);
  if (v2 == 1) {
    return sub_10003982C(v3);
  }
  if (sub_1000398FC(v3) || sub_1000398FC(*(void *)(a1 + 536))) {
    return 3LL;
  }
  uint64_t result = sub_10003982C(*(void *)(a1 + 528));
  if ((_DWORD)result != 2) {
    return sub_10003982C(*(void *)(a1 + 536));
  }
  return result;
}

uint64_t sub_10003E96C(uint64_t a1)
{
  return sub_1000398A4(*(void *)(a1 + 536));
}

uint64_t sub_10003E99C(uint64_t a1)
{
  return sub_1000398BC(*(void *)(a1 + 528));
}

uint64_t sub_10003E9A4(uint64_t a1)
{
  return sub_1000398B4(*(void *)(a1 + 536));
}

uint64_t sub_10003E9AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2) {
    sub_10003991C(v2);
  }
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    return sub_10003991C(result);
  }
  return result;
}

uint64_t sub_10003E9E8( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, uint64_t a14)
{
  int v16 = a5;
  int v18 = a2;
  uint64_t v20 = *(void *)(a1 + 472);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4552))
  {
    uint64_t v21 = *(void *)(a1 + 536);
    return sub_10003967C(v21, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, 0LL);
  }

  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    uint64_t v21 = *(void *)(a1 + 528);
    return sub_10003967C(v21, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, 0LL);
  }

  uint64_t v46 = v20;
  unsigned int v23 = sub_100038FE8(*(void *)(a1 + 536));
  unsigned int v47 = v23;
  if (v23) {
    unsigned int v24 = (int *)&v48;
  }
  else {
    unsigned int v24 = 0LL;
  }
  BOOL v45 = v24;
  int v25 = sub_1000398FC(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 372) != 1) {
    v25 |= sub_1000398FC(*(void *)(a1 + 536));
  }
  if (v25) {
    return 0LL;
  }
  uint64_t v26 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v26 = *(void *)(qword_1000FDCC0 + 4008);
  }
  if (v26 < v18) {
    LODWORD(v26) = v26 + 1;
  }
  uint64_t result = sub_1000C1074((uint64_t)(int)v26 << 7);
  if (result)
  {
    int v27 = (_DWORD *)result;
    if (v18 <= 1 && v23)
    {
      if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4596))
      {
        __int128 v28 = v48;
        __int128 v29 = v49;
        __int128 v30 = v51;
        *(_OWORD *)(result + 32) = v50;
        *(_OWORD *)(result + 48) = v30;
        *(_OWORD *)uint64_t result = v28;
        *(_OWORD *)(result + 16) = v29;
        __int128 v31 = v52;
        __int128 v32 = v53;
        __int128 v33 = v55;
        *(_OWORD *)(result + 96) = v54;
        *(_OWORD *)(result + 112) = v33;
        *(_OWORD *)(result + 64) = v31;
        *(_OWORD *)(result + 80) = v32;
        uint64_t v34 = v46;
LABEL_46:
        sub_100023688((uint64_t)v27, *(void *)(v34 + 96), (int *)&v47, v18, (uint64_t)a3, v16, (uint64_t)a6, a7, a11);
        sub_1000C0EF8((uint64_t)v27);
        return v47;
      }
    }

    else if (!qword_1000FDCC0)
    {
      int v35 = 0;
LABEL_27:
      unsigned int v36 = sub_1000D11F8( v46,  (_DWORD *)result,  v35,  *(unsigned __int16 *)(a1 + 456),  (void *)(a1 + 568),  *(_DWORD *)(a1 + 8760));
      BOOL v37 = 0;
      unsigned int v47 = v36;
      if (v23 && v36) {
        BOOL v37 = sub_100023978(v45, v27, *(_DWORD *)(a1 + 8784));
      }
      BOOL v44 = v37;
      uint64_t v38 = qword_1000FDCC0;
      uint64_t v34 = v46;
      if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1712))
      {
        sub_100023A0C(*(void *)(v46 + 96), (__int128 *)v45, v27, (int *)&v47, v18);
        uint64_t v38 = qword_1000FDCC0;
      }

      uint64_t v39 = *(void *)(a1 + 544);
      if (v39)
      {
        if (v38)
        {
          __int16 v40 = *(_WORD *)(v38 + 1496);
          __int16 v41 = *(_WORD *)(v38 + 1704);
          LODWORD(v38) = *(_DWORD *)(v38 + 4600);
        }

        else
        {
          __int16 v41 = 0;
          __int16 v40 = 0;
        }

        sub_100052200(v39, &v47, (uint64_t)v27, *(void *)(a1 + 480), *(_DWORD *)(a1 + 8788), a1 + 8792, v40, v41, v38);
        uint64_t v38 = qword_1000FDCC0;
      }

      if (v38 && *(_DWORD *)(v38 + 4596))
      {
        BOOL v42 = v44;
        if (!*(_DWORD *)(v38 + 4216)) {
          BOOL v42 = 0;
        }
        if (!v42)
        {
          uint64_t v43 = *(void *)(v38 + 4104);
          sub_10003B194(a1, 0LL, v27, (int *)&v47);
        }
      }

      goto LABEL_46;
    }

    int v35 = *(_DWORD *)(qword_1000FDCC0 + 4008);
    goto LABEL_27;
  }

  return result;
}

uint64_t sub_10003ED04(uint64_t a1)
{
  return sub_100039818(*(void *)(a1 + 536));
}

uint64_t sub_10003ED0C(uint64_t a1)
{
  return sub_100039B8C(*(void *)(a1 + 536));
}

uint64_t sub_10003ED34(uint64_t a1)
{
  return sub_1000399C4(*(void *)(a1 + 528));
}

uint64_t sub_10003ED3C(uint64_t a1)
{
  return sub_1000D0454(*(__int128 **)(a1 + 472));
}

uint64_t sub_10003ED44( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int v14 = a8;
  unsigned int v42 = a7;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v20 = (void *)sub_1000CAF58(0x2000LL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  uint64_t v21 = v20;
  if (!v15) {
    uint64_t v15 = *(void *)(a1 + 472);
  }
  uint64_t v22 = *(int *)(a1 + 8760);
  memcpy(v20, (const void *)(a1 + 568), 8 * v22);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1780)) {
    goto LABEL_25;
  }
  if (!v16)
  {
    if (!sub_100039FC8(a2, a6, v42, a3, 1LL, v23, v24, v25))
    {
      sub_1000CB038(v21, 0x2000LL);
      return 0xFFFFFFFFLL;
    }

    uint64_t v16 = *(void *)(a2 + 504);
  }

  unsigned int v45 = 0;
  __int16 v44 = 0;
  memcpy((void *)(a1 + 568), v21, 8 * v22);
  *(_DWORD *)(a1 + 8760) = v22;
  if (v14 <= 0)
  {
    LODWORD(v26) = 0;
    unsigned __int16 v27 = 0;
    uint64_t v28 = *(void *)(v16 + 16);
  }

  else
  {
    uint64_t v26 = 0LL;
    unsigned __int16 v27 = 0;
    uint64_t v28 = *(void *)(v16 + 16);
    do
    {
      v27 += *(_WORD *)(*(void *)(v16 + 8) + 2 * v26++);
    }

    while (v26 < *(int *)(v16 + 36));
  }

  uint64_t v26 = v26;
  signed __int16 v29 = v27;
  do
  {
    v29 += *(_WORD *)(*(void *)(v16 + 8) + 2 * v26++);
  }

  while (v26 < *(int *)(v16 + 36));
  __int16 v30 = v29 > 0;
  if (qword_1000FDCC0)
  {
    uint64_t v31 = sub_1000C1074(*(void *)(qword_1000FDCC0 + 4008) << 7);
    if (v31) {
      goto LABEL_20;
    }
LABEL_25:
    sub_1000CB038(v21, 0x2000LL);
    return 0LL;
  }

  uint64_t v31 = sub_1000C1074(0LL);
  if (!v31) {
    goto LABEL_25;
  }
LABEL_20:
  __int128 v32 = (_DWORD *)v31;
  if (v14)
  {
    __int16 v44 = sub_1000B3A9C(*(void *)(v15 + 96), a6[v14 - 1]);
    __int128 v33 = &v44;
    unsigned int v34 = 1;
    if (v42 - 1 == a9) {
      goto LABEL_22;
    }
LABEL_27:
    __int16 v40 = v33;
    unsigned int v41 = sub_1000B3A9C(*(void *)(v15 + 96), a6[a9 + 1]);
    __int128 v33 = v40;
    unsigned int v35 = v41;
    __int16 v36 = v29 - v30;
    uint64_t v37 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_23;
    }
LABEL_28:
    int v38 = 0;
    goto LABEL_29;
  }

  __int128 v33 = (__int16 *)(v15 + 104);
  unsigned int v34 = *(_DWORD *)(v15 + 108);
  if (v42 - 1 != a9) {
    goto LABEL_27;
  }
LABEL_22:
  unsigned int v35 = *(unsigned __int16 *)(a1 + 456);
  __int16 v36 = v29 - v30;
  uint64_t v37 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_28;
  }
LABEL_23:
  int v38 = *(_DWORD *)(v37 + 4008);
LABEL_29:
  unsigned int v45 = sub_1000D1250(v15, v32, v38, v27, v36, (uint64_t)v33, v34, v35, v21, v22);
  sub_100023688((uint64_t)v32, *(void *)(v15 + 96), (int *)&v45, a10, a11, a12, a13, a14, 0LL);
  sub_1000C0EF8((uint64_t)v32);
  sub_1000CB038(v21, 0x2000LL);
  return v45;
}

uint64_t sub_10003F04C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    return sub_1000399D8(result);
  }
  return result;
}

uint64_t sub_10003F084(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000398BC(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 520) != 1 && (_DWORD)result != 0)
  {
    if (*(_DWORD *)(a1 + 372) != 1)
    {
      sub_10003E028(a1, *(__int16 *)(a1 + 566), result);
      sub_100039820(*(void *)(a1 + 536), a2);
    }

    uint64_t result = sub_100039820(*(void *)(a1 + 528), a2);
    *(_DWORD *)(a1 + 520) = 1;
  }

  return result;
}

uint64_t sub_10003F0F8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 392);
  if (result) {
    uint64_t result = sub_100059670(result);
  }
  *(void *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_10003F12C(uint64_t a1)
{
  return sub_100038FD4(*(void *)(a1 + 528));
}

uint64_t sub_10003F134(uint64_t a1)
{
  return sub_100039408(*(void *)(a1 + 528));
}

uint64_t sub_10003F13C(uint64_t a1)
{
  return sub_100038FF8(*(void *)(a1 + 528));
}

uint64_t sub_10003F144(uint64_t a1)
{
  return sub_1000398D4(*(void *)(a1 + 536));
}

uint64_t sub_10003F14C(uint64_t a1)
{
  return sub_1000398E8(*(void *)(a1 + 536));
}

uint64_t sub_10003F154(uint64_t a1)
{
  return sub_10003900C(*(void *)(a1 + 528));
}

uint64_t sub_10003F15C(uint64_t a1, int a2, int a3)
{
  uint64_t result = sub_100039020(*(void *)(a1 + 528));
  if (*(_DWORD *)(a1 + 8820))
  {
    int v7 = *(_DWORD *)(a1 + 8816);
    if (v7 <= a3)
    {
      if (v7) {
        int v9 = 2 * v7;
      }
      else {
        int v9 = 200;
      }
      int v10 = sub_1000C0F68(4LL * v9);
      if (!v10) {
        return sub_10003991C(a1);
      }
      int v8 = v10;
      j__memmove(v10, *(const void **)(a1 + 8808), 4LL * *(int *)(a1 + 8816));
      uint64_t v11 = *(int *)(a1 + 8816);
      uint64_t result = sub_1000C0EF8(*(void *)(a1 + 8808));
      *(_DWORD *)(a1 + 8816) = v9;
      *(void *)(a1 + 8808) = v8;
    }

    else
    {
      int v8 = *(_DWORD **)(a1 + 8808);
    }

    v8[a3] = a2;
  }

  return result;
}

uint64_t sub_10003F23C(uint64_t a1)
{
  return sub_100038EF0(*(void *)(a1 + 528));
}

uint64_t sub_10003F244(uint64_t a1)
{
  return sub_100039030(*(void *)(a1 + 536));
}

uint64_t sub_10003F24C(uint64_t a1)
{
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1776)) {
    return sub_100039A14(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_100039A14(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A14(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003F2A8(uint64_t a1)
{
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1776)) {
    return sub_100039A28(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_100039A28(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A28(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003F304(uint64_t a1)
{
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1776)) {
    return sub_100039A3C(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_100039A3C(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A3C(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003F360(uint64_t a1)
{
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1776)) {
    return sub_100039A50(*(void *)(a1 + 536)) != 0;
  }
  uint64_t result = sub_100039A50(*(void *)(a1 + 528));
  if ((_DWORD)result) {
    return sub_100039A50(*(void *)(a1 + 536)) != 0;
  }
  return result;
}

uint64_t sub_10003F3BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 536);
  if (result) {
    BOOL v2 = qword_1000FDCC0 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 4712)) {
      return sub_10003AF44(result);
    }
  }

  return result;
}

const char *sub_10003F3EC()
{
  return "";
}

void sub_10003F3F8(uint64_t a1)
{
  *(void *)(a1 + 6656) = a1 + 7196;
  *(_DWORD *)(a1 + 6648) = 5;
  *(void *)(a1 + 6672) = a1 + 6696;
  *(_DWORD *)(a1 + 6668) = 500;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 100))
  {
    *(_DWORD *)(a1 + 5500) = 0;
    *(void *)(a1 + 808) = 0LL;
    *(void *)(a1 + 800) = 0LL;
    sub_100046414(a1);
    if (!v9)
    {
      sub_1000467F0(a1, v2, v3, v4, v5, v6, v7, v8);
      if (qword_1000FDCC0)
      {
      }

      else if (!sub_10003F88C(a1, 0))
      {
        return;
      }

      *(_DWORD *)(a1 + 152) = sub_10009AA74();
      *(_DWORD *)(a1 + 156) = sub_10009AA58();
      *(_DWORD *)(a1 + 160) = sub_10009AA60();
LABEL_35:
      ++dword_1000FDCE8;
    }
  }

  else
  {
    if (sub_100004604(*(void *)(a1 + 16)))
    {
      uint64_t v10 = *(void *)a1;
      sub_1000045FC(*(void *)(a1 + 16));
      sub_1000597B0(v10);
    }

    sub_1000BBE20(*(uint64_t **)(a1 + 8));
    sub_100007B20(*(unsigned int **)(a1 + 16), 0);
    uint64_t v11 = *(unsigned int **)(a1 + 24);
    if (v11) {
      sub_100007B20(v11, 0);
    }
    int v12 = *(unsigned int **)(a1 + 40);
    if (v12) {
      sub_100007B20(v12, 0);
    }
    if (*(void *)(a1 + 24))
    {
      sub_100004604(*(void *)(a1 + 16));
      sub_100004604(*(void *)(a1 + 24));
      if (sub_100004604(*(void *)(a1 + 16)))
      {
        sub_1000045FC(*(void *)(a1 + 16));
        sub_1000045FC(*(void *)(a1 + 24));
      }
    }

    if (*(void *)(a1 + 40))
    {
      sub_100004604(*(void *)(a1 + 16));
      sub_100004604(*(void *)(a1 + 40));
      if (sub_100004604(*(void *)(a1 + 16)))
      {
        sub_1000045FC(*(void *)(a1 + 16));
        sub_1000045FC(*(void *)(a1 + 40));
      }
    }

    if (qword_1000FDCC0)
    {
      int v13 = *(_DWORD *)(qword_1000FDCC0 + 1872);
      *(_DWORD *)(a1 + 6468) = v13;
      if (v13) {
        sub_1000111D4(*(void *)(a1 + 16));
      }
    }

    else
    {
      *(_DWORD *)(a1 + 6468) = 0;
    }

    if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1928) || !sub_100048D48(a1))
    {
      sub_1000045F4(*(void *)(a1 + 16));
      sub_100046414(a1);
      if (!v21)
      {
        sub_1000467F0(a1, v14, v15, v16, v17, v18, v19, v20);
        if (qword_1000FDCC0)
        {
          int v22 = *(_DWORD *)(a1 + 728);
        }

        else
        {
          int v22 = *(_DWORD *)(a1 + 728);
        }

        if (sub_100049F58(a1, v23, v24, v25, v26, v27, v28, v29))
        {
          *(void *)(a1 + 6260) = 0xFFFFFFFF00000000LL;
          *(_DWORD *)(a1 + 5640) = sub_1000516B0( *(void *)(a1 + 5624),  (void *)(a1 + 5632),  (_DWORD *)(a1 + 5644),  (_DWORD *)(a1 + 5648));
          *(void *)(a1 + 760) = 0LL;
          if (qword_1000FDCC0)
          {
            int v30 = *(_DWORD *)(qword_1000FDCC0 + 2048);
            int v31 = *(_DWORD *)(qword_1000FDCC0 + 2072);
          }

          else
          {
            int v30 = 0;
            int v31 = 0;
          }

          sub_1000B2560(a1 + 496, v22, v30, v31, 0, 1);
          if (qword_1000FDCC0)
          {
            int v32 = *(_DWORD *)(qword_1000FDCC0 + 2032);
            int v33 = *(_DWORD *)(qword_1000FDCC0 + 2040);
            if (v32 == -1) {
              int v32 = *(_DWORD *)(qword_1000FDCC0 + 2048);
            }
            if (v33 == -1) {
              int v33 = *(_DWORD *)(qword_1000FDCC0 + 2072);
            }
          }

          else
          {
            int v32 = 0;
            int v33 = 0;
          }

          sub_1000B2560(a1 + 544, v22, v32, v33, 0, 1);
          if (qword_1000FDCC0)
          {
            int v34 = *(_DWORD *)(qword_1000FDCC0 + 1992);
            int v35 = *(_DWORD *)(qword_1000FDCC0 + 2000);
            if (v34 == -1) {
              int v34 = *(_DWORD *)(qword_1000FDCC0 + 2048);
            }
            if (v35 == -1) {
              int v35 = *(_DWORD *)(qword_1000FDCC0 + 2072);
            }
          }

          else
          {
            int v34 = 0;
            int v35 = 0;
          }

          sub_1000B2560(a1 + 448, v22, v34, v35, 0, 1);
          if (qword_1000FDCC0)
          {
            int v36 = *(_DWORD *)(qword_1000FDCC0 + 2056);
            int v37 = *(_DWORD *)(qword_1000FDCC0 + 2064);
            if (v36 == -1) {
              int v36 = *(_DWORD *)(qword_1000FDCC0 + 2048);
            }
            if (v37 == -1) {
              int v37 = *(_DWORD *)(qword_1000FDCC0 + 2072);
            }
          }

          else
          {
            int v36 = 0;
            int v37 = 0;
          }

          sub_1000B2560(a1 + 592, v22, v36, v37, 0, 1);
          *(void *)(a1 + 440) = a1 + 496;
          if (*(void *)(a1 + 56)
            || !qword_1000FDCC0
            || (uint64_t v43 = *(void *)(qword_1000FDCC0 + 2120)) == 0
            || (uint64_t v44 = sub_10005BAC4(*(void *)(a1 + 8), v43, (32 * v43), v38, v39, v40, v41, v42),
                (*(void *)(a1 + 56) = v44) != 0LL))
          {
            *(void *)&__int128 v45 = 0xFFFFFFFFLL;
            *((void *)&v45 + 1) = 0xFFFFFFFFLL;
            *(_OWORD *)(a1 + 6416) = v45;
            *(_DWORD *)(a1 + 152) = sub_10009AA74();
            *(_DWORD *)(a1 + 160) = sub_10009AA60();
            *(_DWORD *)(a1 + 156) = sub_10009AA58();
            goto LABEL_35;
          }
        }
      }
    }
  }

_DWORD *sub_10003F844(_DWORD *a1)
{
  *((void *)a1 + 1) = a1 + 137;
  *a1 = 5;
  *((void *)a1 + 3) = a1 + 12;
  a1[5] = 500;
  return a1;
}

uint64_t sub_10003F88C(uint64_t a1, int a2)
{
  *(void *)(a1 + 5512) = 0LL;
  *(_DWORD *)(a1 + 96) = a2;
  if ((!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1912)) && !*(void *)(a1 + 104))
  {
    if (a2)
    {
      int v4 = 8;
      goto LABEL_6;
    }

    if (!qword_1000FDCC0) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(qword_1000FDCC0 + 4728))
    {
      int v4 = 11;
      goto LABEL_6;
    }

    if (*(_DWORD *)(qword_1000FDCC0 + 4720))
    {
      int v4 = 6;
      goto LABEL_6;
    }

    if (*(_DWORD *)(qword_1000FDCC0 + 4712)) {
      int v4 = 5;
    }
    else {
LABEL_33:
    }
      int v4 = 1;
LABEL_6:
    uint64_t result = sub_100038B44( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 728),  v4);
    *(void *)(a1 + 104) = result;
    if (!result) {
      return result;
    }
  }

  if (*(void *)(a1 + 112)
    || (!a2 ? (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4544) ? (int v6 = 3) : (int v6 = 9)) : (int v6 = 8),
        uint64_t result = sub_100038B44(*(void *)(a1 + 8), *(void *)(a1 + 16), 0LL, 0LL, *(unsigned int *)(a1 + 728), v6),
        (*(void *)(a1 + 112) = result) != 0LL))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7
      || *(void *)(a1 + 136)
      || (uint64_t result = sub_100038B44(*(void *)(a1 + 8), v7, 0LL, 0LL, *(unsigned int *)(a1 + 728), 3),
          (*(void *)(a1 + 136) = result) != 0LL))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      if (!v8
        || *(void *)(a1 + 144)
        || (uint64_t result = sub_100038B44(*(void *)(a1 + 8), v8, 0LL, 0LL, *(unsigned int *)(a1 + 728), 3),
            (*(void *)(a1 + 144) = result) != 0LL))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        if (!v9) {
          return 1LL;
        }
        if (*(void *)(a1 + 120)) {
          return 1LL;
        }
        uint64_t result = sub_100038B44(*(void *)(a1 + 8), v9, 0LL, 0LL, *(unsigned int *)(a1 + 728), 3);
        *(void *)(a1 + 120) = result;
        if (result) {
          return 1LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10003FA1C()
{
  return sub_1000CAEDC();
}

int *sub_10003FA40( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  sub_1000C0BFC(0x90uLL, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_13;
  }
  *uint64_t v10 = v8;
  v10[8] = a1;
  uint64_t v12 = sub_1000C1074(4LL * v8);
  *((void *)v11 + 1) = v12;
  if (!v12) {
    goto LABEL_13;
  }
  uint64_t v13 = sub_1000C1074(2LL * *v11);
  *((void *)v11 + 2) = v13;
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t v14 = sub_1000C1074(8LL * *v11);
  *((void *)v11 + 3) = v14;
  if (!v14) {
    goto LABEL_13;
  }
  uint64_t v15 = sub_1000C1074(4LL * v11[8]);
  *((void *)v11 + 5) = v15;
  if (!v15) {
    goto LABEL_13;
  }
  uint64_t v16 = sub_1000C1074(4LL * v11[8]);
  *((void *)v11 + 6) = v16;
  if (!v16) {
    goto LABEL_13;
  }
  uint64_t v17 = sub_1000C1074(4LL * v11[8]);
  *((void *)v11 + 7) = v17;
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = sub_1000C1074(v11[8]);
  *((void *)v11 + 8) = v18;
  if (!v18) {
    goto LABEL_13;
  }
  uint64_t v19 = sub_1000C1074(2LL * v11[8]);
  *((void *)v11 + 9) = v19;
  if (!v19) {
    goto LABEL_13;
  }
  uint64_t v20 = sub_1000C1074(v11[8]);
  *((void *)v11 + 10) = v20;
  if (v20
    && (v11[1] = -1,
        *((void *)v11 + 11) = 0x7FFFFFFF00000000LL,
        *((void *)v11 + 13) = 0LL,
        uint64_t v21 = sub_1000C1074(4LL * v11[8]),
        (*((void *)v11 + 15) = v21) != 0LL))
  {
    int v22 = v11[8];
    v11[32] = 0;
    v11[33] = v22;
    v11[28] = -1;
    *((void *)v11 + 17) = 0LL;
    return v11;
  }

  else
  {
LABEL_13:
    sub_10003FB88((uint64_t)v11);
    return 0LL;
  }

uint64_t sub_10003FB88(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 80));
    v1[10] = 0LL;
    sub_1000C0EF8(v1[9]);
    v1[9] = 0LL;
    sub_1000C0EF8(v1[5]);
    v1[5] = 0LL;
    sub_1000C0EF8(v1[1]);
    v1[1] = 0LL;
    sub_1000C0EF8(v1[2]);
    v1[2] = 0LL;
    sub_1000C0EF8(v1[15]);
    v1[15] = 0LL;
    sub_1000C0EF8(v1[6]);
    v1[6] = 0LL;
    sub_1000C0EF8(v1[8]);
    v1[8] = 0LL;
    sub_1000C0EF8(v1[3]);
    v1[3] = 0LL;
    sub_1000C0EF8(v1[7]);
    v1[7] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

int *sub_10003FC28( int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_10003FA40(a1[8], *a1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    *uint64_t result = *a1;
    result[8] = a1[8];
    result[1] = a1[1];
    result[22] = a1[22];
    result[23] = a1[23];
    *((void *)result + 13) = *((void *)a1 + 13);
    result[33] = a1[33];
    result[32] = a1[32];
    result[28] = a1[28];
    result[35] = a1[35];
    result[34] = a1[34];
    if (*a1 >= 1)
    {
      uint64_t v10 = 0LL;
      do
      {
        *(_DWORD *)(*((void *)result + 1) + 4 * v10) = *(_DWORD *)(*((void *)a1 + 1) + 4 * v10);
        ++v10;
        uint64_t v11 = *a1;
      }

      while (v10 < v11);
      if ((int)v11 >= 1)
      {
        for (uint64_t i = 0LL; i < v13; ++i)
        {
          *(_WORD *)(*((void *)result + 2) + 2 * i) = *(_WORD *)(*((void *)a1 + 2) + 2 * i);
          uint64_t v13 = *a1;
        }

        if ((int)v13 >= 1)
        {
          uint64_t v14 = 0LL;
          do
          {
            *(void *)(*((void *)result + 3) + 8 * v14) = *(void *)(*((void *)a1 + 3) + 8 * v14);
            ++v14;
          }

          while (v14 < *a1);
        }
      }
    }

    if (a1[8] >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(_DWORD *)(*((void *)result + 5) + 4 * v15) = *(_DWORD *)(*((void *)a1 + 5) + 4 * v15);
        ++v15;
        uint64_t v16 = a1[8];
      }

      while (v15 < v16);
      if ((int)v16 >= 1)
      {
        for (uint64_t j = 0LL; j < v18; ++j)
        {
          *(_DWORD *)(*((void *)result + 6) + 4 * j) = *(_DWORD *)(*((void *)a1 + 6) + 4 * j);
          uint64_t v18 = a1[8];
        }

        if ((int)v18 >= 1)
        {
          for (uint64_t k = 0LL; k < v20; ++k)
          {
            *(_BYTE *)(*((void *)result + 8) + k) = *(_BYTE *)(*((void *)a1 + 8) + k);
            uint64_t v20 = a1[8];
          }

          if ((int)v20 >= 1)
          {
            for (uint64_t m = 0LL; m < v22; ++m)
            {
              *(_WORD *)(*((void *)result + 9) + 2 * m) = *(_WORD *)(*((void *)a1 + 9) + 2 * m);
              uint64_t v22 = a1[8];
            }

            if ((int)v22 >= 1)
            {
              for (uint64_t n = 0LL; n < v24; ++n)
              {
                *(_BYTE *)(*((void *)result + 10) + n) = *(_BYTE *)(*((void *)a1 + 10) + n);
                uint64_t v24 = a1[8];
              }

              if ((int)v24 >= 1)
              {
                for (iuint64_t i = 0LL; ii < v26; ++ii)
                {
                  *(_DWORD *)(*((void *)result + 15) + 4 * ii) = *(_DWORD *)(*((void *)a1 + 15) + 4 * ii);
                  uint64_t v26 = a1[8];
                }

                if ((int)v26 >= 1)
                {
                  uint64_t v27 = 0LL;
                  do
                  {
                    *(_DWORD *)(*((void *)result + 7) + 4 * v27) = *(_DWORD *)(*((void *)a1 + 7) + 4 * v27);
                    ++v27;
                  }

                  while (v27 < a1[8]);
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10003FE8C(uint64_t a1)
{
  *(void *)(a1 + 368) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(_DWORD *)(a1 + 384) = 0;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 392));
  *(void *)(a1 + 392) = 0LL;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_10003FEC8(uint64_t a1, uint64_t *a2)
{
  unsigned int v17 = 0;
  uint64_t v16 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v14 = 0LL;
  if (a1)
  {
    uint64_t v16 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v15 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v12 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v4 = *(void **)(a1 + 6520);
    uint64_t v5 = *(void *)(a1 + 6528);
  }

  else
  {
    uint64_t v16 = sub_1000C0BA8(0LL);
    uint64_t v15 = sub_1000CAEC8(0LL);
    uint64_t v12 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
  }

  uint64_t v13 = sub_1000CF8F8(v4, v5, &v14);
  bzero(&v18, 0x5E8uLL);
  uint64_t v19 = &v23;
  int v18 = 5;
  uint64_t v21 = &v22;
  int v20 = 500;
  sub_1000BEAB0(&v18);
  int v6 = (int *)sub_1000BE9FC();
  if (!setjmp(v6))
  {
    if (a1 && !sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (!*(_DWORD *)(a1 + 8160))
      {
        if (*(_DWORD *)(a1 + 5672)) {
          sub_100040BAC(a1, 1);
        }
        sub_100050568(a1);
        sub_1000505BC(a1);
        sub_10004A324(a1);
        sub_100046840(a1);
        sub_10004672C(a1);
        sub_100042BD4(a1);
        if (qword_1000FDCC0) {
          uint64_t v9 = *(unsigned int *)(qword_1000FDCC0 + 4456);
        }
        else {
          uint64_t v9 = 0LL;
        }
        sub_100038D28(*(void *)(a1 + 104), v9);
        *(void *)(a1 + 104) = 0LL;
        sub_100038D28(*(void *)(a1 + 112), v9);
        sub_100038D28(*(void *)(a1 + 136), v9);
        sub_100038D28(*(void *)(a1 + 144), v9);
        sub_100038D28(*(void *)(a1 + 120), v9);
        *(void *)(a1 + 112) = 0LL;
        uint64_t v10 = *(void *)(a1 + 56);
        if (v10) {
          sub_10005BC4C(v10);
        }
        uint64_t v11 = *(void *)(a1 + 80);
        if (v11) {
          sub_100033290(v11);
        }
        sub_10002F0D8(*(void *)(a1 + 72));
        sub_1000312F0(*(void *)(a1 + 80));
        sub_100048D78(a1);
        sub_1000B24F4(*(void (***)(void))(a1 + 48));
        sub_1000B2F4C(*(void *)(a1 + 8));
        sub_100008B24(*(void *)(a1 + 16));
        sub_100008B24(*(void *)(a1 + 24));
        sub_100008B24(*(void *)(a1 + 40));
        sub_100008B24(*(void *)(a1 + 32));
        sub_100059748(*(uint64_t (***)(void))a1);
        sub_1000C0EF8(*(void *)(a1 + 376));
        *(void *)(a1 + 368) = 0LL;
        *(void *)(a1 + 376) = 0LL;
        *(_DWORD *)(a1 + 384) = 0;
        sub_1000C0EF8(*(void *)(a1 + 392));
        *(void *)(a1 + 392) = 0LL;
        *(_DWORD *)(a1 + 400) = 0;
        sub_100051640(*(void *)(a1 + 5624));
        sub_1000C0EF8(*(void *)(a1 + 6512));
        qword_1000FDCC0 = 0LL;
        if (a2)
        {
          *a2 = *(void *)(a1 + 6480);
          bzero((void *)a1, 0x1FF0uLL);
          --dword_1000FDCE8;
          sub_1000C0EF8(a1);
          sub_1000CAF2C();
          sub_1000C0BBC(*a2);
        }

        else
        {
          bzero((void *)a1, 0x1FF0uLL);
          --dword_1000FDCE8;
          sub_1000C0EF8(a1);
          sub_1000CAF2C();
        }

        unsigned int v17 = 0;
        goto LABEL_12;
      }

      int v7 = 1;
    }

    else
    {
      int v7 = 4;
    }

    unsigned int v17 = v7;
LABEL_12:
    sub_1000BEA60();
    goto LABEL_13;
  }

  if (a1) {
    *(_DWORD *)(a1 + 8160) = 1;
  }
  unsigned int v17 = 1;
LABEL_13:
  sub_1000504B4(v17);
  sub_1000CF8F8(v13, v14, 0LL);
  sub_1000BEAB0(v12);
  sub_1000CAEC8(v15);
  sub_1000C0BA8(v16);
  return v17;
}

uint64_t sub_10004026C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v13 = 0;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  if (a1)
  {
    uint64_t v12 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v11 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v8 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v9 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v10);
    nullsub_1(v9);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v7 = (int *)sub_1000BE9FC();
    if (!setjmp(v7))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        unsigned int v13 = 4;
        sub_1000BEA60();
      }

      else
      {
        if (*(_DWORD *)(a1 + 8160))
        {
          unsigned int v13 = 1;
        }

        else
        {
          *a2 = *(_DWORD *)(a1 + 164);
          *a3 = *(_DWORD *)(a1 + 168);
          unsigned int v13 = 0;
        }

        sub_1000BEA60();
      }

      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v12 = sub_1000C0BA8(0LL);
    uint64_t v11 = sub_1000CAEC8(0LL);
    int v8 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v9 = sub_1000CF8F8(0LL, 0LL, &v10);
    nullsub_1(v9);
  }

  unsigned int v13 = 1;
LABEL_9:
  sub_1000504B4(v13);
  sub_1000CF8F8(v9, v10, 0LL);
  sub_1000BEAB0(v8);
  sub_1000CAEC8(v11);
  sub_1000C0BA8(v12);
  return v13;
}

uint64_t sub_100040448(uint64_t a1)
{
  unsigned int v40 = 0;
  if (*(_DWORD *)(a1 + 5680) != 6) {
    return v40;
  }
  BOOL v2 = *(_DWORD *)(a1 + 6232) != 1 || qword_1000FDCC0 == 0;
  if (v2 || !*(_DWORD *)(qword_1000FDCC0 + 1980))
  {
    *(_DWORD *)(a1 + 6320) = 0;
    return v40;
  }

  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(char **)(a1 + 6312);
  uint64_t v6 = *(void *)(a1 + 5512);
  int v7 = sub_1000B3C5C(v3, *(_DWORD *)(a1 + 5720));
  if (v7 > *(_DWORD *)(a1 + 6324))
  {
    int v8 = sub_1000B32A8(v3);
    if (v7 <= v8) {
      int v16 = v8;
    }
    else {
      int v16 = v7;
    }
    sub_1000C0BFC(24LL * v16, v9, v10, v11, v12, v13, v14, v15);
    uint64_t v5 = v17;
    uint64_t v18 = *(unsigned int *)(a1 + 6324);
    sub_1000C0EF8(*(void *)(a1 + 6312));
    *(void *)(a1 + 6312) = v5;
    uint64_t v19 = *(int *)(a1 + 6324);
    if ((int)v19 < v16)
    {
      uint64_t v20 = v16 - v19;
      uint64_t v21 = (uint64_t *)&v5[24 * (int)v19 + 8];
      do
      {
        uint64_t v22 = sub_1000A1830(v4, (uint64_t)v3, *(_DWORD *)(a1 + 728));
        *(v21 - 1) = v22;
        if (!v22) {
          return 1;
        }
        uint64_t v23 = sub_1000A26D0(v3, 1);
        *uint64_t v21 = v23;
        if (!v23) {
          return 1;
        }
        v21 += 3;
      }

      while (--v20);
    }

    *(_DWORD *)(a1 + 6324) = v16;
  }

  *(_DWORD *)(a1 + 6320) = v7;
  uint64_t v24 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    int v25 = *(_DWORD *)(qword_1000FDCC0 + 5252);
    *(_DWORD *)(a1 + 6336) = v25;
    if (v25)
    {
      *(_DWORD *)(a1 + 6328) = 0;
      *(_DWORD *)(a1 + 6332) = *(void *)(v24 + 984);
      if (v7 < 1) {
        goto LABEL_35;
      }
LABEL_27:
      uint64_t v27 = 0LL;
      uint64_t v28 = (uint64_t *)(v5 + 8);
      uint64_t v29 = v7;
      while (1)
      {
        unsigned __int16 v41 = 0;
        unsigned __int16 v41 = sub_1000B3B28((uint64_t)v3, *(_DWORD *)(a1 + 5720), v27);
        uint64_t v30 = *v28;
        if (!*v28) {
          return 1;
        }
        sub_1000A2820(*v28);
        if (qword_1000FDCC0)
        {
          int v37 = *(_DWORD *)(qword_1000FDCC0 + 4136);
          uint64_t v38 = *(void *)(qword_1000FDCC0 + 2072);
        }

        else
        {
          int v37 = 0;
          LODWORD(v38) = 0;
        }

        if (!sub_1000A1CDC( *(v28 - 1),  v37,  0,  v38,  1,  0,  1,  &v41,  v31,  v32,  v33,  v34,  v35,  v36,  0,  *(unsigned __int16 **)(v30 + 24),  *(_DWORD *)(v30 + 32),  *(_WORD **)v30,  *(_WORD **)(v30 + 16),  *(void *)(v30 + 8),  (int *)(v30 + 36),  0LL)) {
          return 1;
        }
        *(_DWORD *)(v30 + 44) = 1;
        **(_WORD **)(v30 + 48) = v41;
        ++v27;
        v28 += 3;
        if (v29 == v27)
        {
          uint64_t v24 = qword_1000FDCC0;
          goto LABEL_35;
        }
      }
    }
  }

  else
  {
    *(_DWORD *)(a1 + 6336) = 0;
  }

  *(_DWORD *)(a1 + 6328) = 0x40000000;
  if (v7 >= 1) {
    goto LABEL_27;
  }
LABEL_35:
  if (v24) {
    int v39 = *(_DWORD *)(v24 + 5372);
  }
  else {
    int v39 = 0;
  }
  sub_100038FBC(v6, 0, v39);
  return v40;
}

uint64_t sub_1000406CC(uint64_t a1, int a2)
{
  unsigned int v11 = 0;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v8 = 0LL;
  if (a1)
  {
    uint64_t v10 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v9 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v6 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v7 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v8);
    nullsub_1(v7);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000BE9FC();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      unsigned int v11 = 4;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
LABEL_13:
      unsigned int v11 = 1;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (a2)
    {
      sub_1000C0EF8(*(void *)(a1 + 6280));
      *(void *)(a1 + 6280) = 0LL;
      *(_DWORD *)(a1 + 5712) = 0;
    }

    else
    {
      if (!*(_DWORD *)(a1 + 5672))
      {
        unsigned int v11 = 11;
        sub_1000BEA60();
        goto LABEL_9;
      }

      sub_1000C0EF8(*(void *)(a1 + 6280));
      *(void *)(a1 + 6280) = 0LL;
      *(_DWORD *)(a1 + 5712) = 2;
      *(_DWORD *)(a1 + 5680) = 2;
      if (!*(_DWORD *)(a1 + 5676)) {
        *(_DWORD *)(a1 + 5672) = 0;
      }
    }

    unsigned int v11 = 0;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v10 = sub_1000C0BA8(0LL);
  uint64_t v9 = sub_1000CAEC8(0LL);
  uint64_t v6 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  int v7 = sub_1000CF8F8(0LL, 0LL, &v8);
  nullsub_1(v7);
LABEL_8:
  unsigned int v11 = 1;
LABEL_9:
  sub_1000504B4(v11);
  sub_1000CF8F8(v7, v8, 0LL);
  sub_1000BEAB0(v6);
  sub_1000CAEC8(v9);
  sub_1000C0BA8(v10);
  return v11;
}

uint64_t sub_100040914(uint64_t a1, int a2)
{
  BOOL v13 = 0;
  BOOL v12 = 1;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (!a1)
  {
    uint64_t v11 = sub_1000C0BA8(0LL);
    uint64_t v10 = sub_1000CAEC8(0LL);
    int v7 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
    nullsub_1(v8);
LABEL_8:
    BOOL v13 = 1;
    goto LABEL_9;
  }

  uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
  uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
  int v7 = sub_1000BEAC4();
  sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
  nullsub_1(v8);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1LL;
  }
  sub_1000BEAB0((void *)(a1 + 6648));
  uint64_t v5 = (int *)sub_1000BE9FC();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }

  if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
  {
    int v6 = 4;
  }

  else if (*(_DWORD *)(a1 + 8160))
  {
    int v6 = 1;
  }

  else
  {
    if (!*(_DWORD *)(a1 + 5672) || !*(_DWORD *)(a1 + 5680))
    {
      BOOL v13 = 0;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (a2)
    {
      BOOL v13 = 0;
      if (*(_DWORD *)(a1 + 5708)) {
        BOOL v13 = sub_100041368((uint64_t *)a1);
      }
      sub_1000413CC(a1);
      *(_DWORD *)(a1 + 5696) = 0;
      *(_DWORD *)(a1 + 5708) = 0;
      *(_DWORD *)(a1 + 5680) = 0;
      int v6 = v13;
    }

    else
    {
      if (*(_DWORD *)(a1 + 5680) != 4 && *(_DWORD *)(a1 + 5680) != 3)
      {
        sub_1000413CC(a1);
        BOOL v13 = 0;
        sub_1000BEA60();
        goto LABEL_9;
      }

      BOOL v12 = sub_100041428(a1);
      *(_DWORD *)(a1 + 5680) = 5;
      *(_DWORD *)(a1 + 5696) = 0;
      sub_1000413CC(a1);
      *(_DWORD *)(a1 + 5708) = 2;
      if (!*(_DWORD *)(a1 + 5676)) {
        *(_DWORD *)(a1 + 5672) = 0;
      }
      if (v12) {
        int v6 = 0;
      }
      else {
        int v6 = 12;
      }
    }
  }

  BOOL v13 = v6;
  sub_1000BEA60();
LABEL_9:
  sub_1000504B4(v13);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v13;
}

uint64_t sub_100040BAC(uint64_t a1, int a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (a1)
  {
    uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v7 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000BE9FC();
    if (!setjmp(v5))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }

      else if (*(_DWORD *)(a1 + 5672))
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 5716)) {
            unsigned int v12 = sub_100040E18(a1, 1);
          }
          if (*(_DWORD *)(a1 + 5712)) {
            unsigned int v12 = sub_1000406CC(a1, 1);
          }
          if (*(_DWORD *)(a1 + 5708)) {
            unsigned int v12 = sub_100040914(a1, 1);
          }
          *(_DWORD *)(a1 + 5684) = 1;
          *(_DWORD *)(a1 + 5708) = 0;
          *(_DWORD *)(a1 + 5712) = 0;
          *(_DWORD *)(a1 + 5716) = 0;
        }

        else
        {
          if (!*(_DWORD *)(a1 + 5684)) {
            unsigned int v12 = sub_100040E18(a1, 0);
          }
          *(_DWORD *)(a1 + 5684) = 1;
          *(_DWORD *)(a1 + 5708) = 2;
          *(_DWORD *)(a1 + 5712) = 2;
          *(_DWORD *)(a1 + 5716) = 2;
          sub_1000412FC(a1);
        }

        int v6 = v12;
      }

      else
      {
        int v6 = 11;
      }

      unsigned int v12 = v6;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v11 = sub_1000C0BA8(0LL);
    uint64_t v10 = sub_1000CAEC8(0LL);
    int v7 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
    nullsub_1(v8);
  }

  unsigned int v12 = 1;
LABEL_9:
  sub_1000504B4(v12);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v12;
}

uint64_t sub_100040E18(uint64_t a1, int a2)
{
  unsigned int v28 = 0;
  BOOL v27 = 0;
  BOOL v26 = 0;
  unsigned int v25 = 0;
  int v24 = 0;
  int v23 = a2;
  uint64_t v22 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v20 = 0LL;
  if (a1)
  {
    uint64_t v22 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v21 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v18 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v19 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v20);
    nullsub_1(v19);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v4 = (int *)sub_1000BE9FC();
    if (!setjmp(v4))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v5 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v5 = 1;
      }

      else
      {
        BOOL v27 = *(void *)(a1 + 136) != 0LL;
        BOOL v26 = *(void *)(a1 + 144) != 0LL;
        if (!*(_DWORD *)(a1 + 5716) || *(_DWORD *)(a1 + 5680) != 6) {
          int v23 = 1;
        }
        if (v23)
        {
          sub_10003AF00(*(uint64_t **)(a1 + 112));
          if (v27) {
            sub_10003AF00(*(uint64_t **)(a1 + 136));
          }
          if (v26) {
            sub_10003AF00(*(uint64_t **)(a1 + 144));
          }
          sub_1000412FC(a1);
          *(_DWORD *)(a1 + 5716) = 0;
        }

        else
        {
          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1980)) {
            sub_1000414C8(a1);
          }
          if (*(_DWORD *)(a1 + 5660))
          {
            unsigned int v25 = 0;
            uint64_t v6 = 1LL;
            switch(*(_DWORD *)(a1 + 5668))
            {
              case 0:
              case 2:
                uint64_t v6 = *(unsigned int *)(a1 + 5668);
                break;
              case 3:
                unsigned int v25 = 1;
                break;
              case 4:
                goto LABEL_31;
              case 5:
                unsigned int v25 = 1;
LABEL_31:
                uint64_t v6 = 3LL;
                break;
              default:
                break;
            }

            int v24 = sub_10003AE88(*(void *)(a1 + 112));
            if (!v24 && v27) {
              int v24 = sub_10003AE88(*(void *)(a1 + 136));
            }
            if (!v24 && v26) {
              int v24 = sub_10003AE88(*(void *)(a1 + 144));
            }
            if (!v24) {
              int v24 = sub_10003AEAC(*(void *)(a1 + 112), v6, v25);
            }
            if (!v24 && v27) {
              int v24 = sub_10003AEAC(*(void *)(a1 + 136), v6, v25);
            }
            if (!v24 && v26) {
              int v24 = sub_10003AEAC(*(void *)(a1 + 144), v6, v25);
            }
            if (v24 != 4)
            {
              if (*(void *)(a1 + 6304))
              {
                sub_100024180(*(void *)(a1 + 6304));
                uint64_t v7 = sub_1000B2F1C(*(uint64_t **)(a1 + 6304));
                if (!v24)
                {
                  if (v7)
                  {
                    uint64_t v12 = v7;
                    do
                    {
                      int v24 = sub_10003AC24( *(void *)(a1 + 112),  *(unsigned int *)(v12 + 16),  *(unsigned int **)(v12 + 8),  *(int **)v12,  v8,  v9,  v10,  v11);
                      if (!v24 && v27) {
                        int v24 = sub_10003AC24( *(void *)(a1 + 136),  *(unsigned int *)(v12 + 16),  *(unsigned int **)(v12 + 8),  *(int **)v12,  v13,  v14,  v15,  v16);
                      }
                      if (!v24 && v26) {
                        int v24 = sub_10003AC24( *(void *)(a1 + 144),  *(unsigned int *)(v12 + 16),  *(unsigned int **)(v12 + 8),  *(int **)v12,  v13,  v14,  v15,  v16);
                      }
                      if (v24 == 4) {
                        break;
                      }
                      uint64_t v17 = sub_1000B2F1C(*(uint64_t **)(a1 + 6304));
                      if (v24) {
                        break;
                      }
                      uint64_t v12 = v17;
                    }

                    while (v17);
                  }
                }
              }
            }
          }

          if (v24 != 4)
          {
            int v24 = sub_10003AE88(*(void *)(a1 + 112));
            if (!v24 && v27) {
              int v24 = sub_10003AE88(*(void *)(a1 + 136));
            }
            if (!v24 && v26) {
              int v24 = sub_10003AE88(*(void *)(a1 + 144));
            }
          }

          sub_10003AF00(*(uint64_t **)(a1 + 112));
          nullsub_1(*(void *)(a1 + 16));
          if (v27)
          {
            sub_10003AF00(*(uint64_t **)(a1 + 136));
            nullsub_1(*(void *)(a1 + 24));
          }

          if (v26)
          {
            sub_10003AF00(*(uint64_t **)(a1 + 144));
            nullsub_1(*(void *)(a1 + 40));
          }

          if (v24 == 4)
          {
            *(_DWORD *)(a1 + 5716) = 0;
            unsigned int v28 = 2;
          }

          else
          {
            *(_DWORD *)(a1 + 5716) = 2;
          }
        }

        int v5 = v28;
      }

      unsigned int v28 = v5;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v22 = sub_1000C0BA8(0LL);
    uint64_t v21 = sub_1000CAEC8(0LL);
    uint64_t v18 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v19 = sub_1000CF8F8(0LL, 0LL, &v20);
    nullsub_1(v19);
  }

  unsigned int v28 = 1;
LABEL_9:
  sub_1000504B4(v28);
  sub_1000CF8F8(v19, v20, 0LL);
  sub_1000BEAB0(v18);
  sub_1000CAEC8(v21);
  sub_1000C0BA8(v22);
  return v28;
}

uint64_t sub_1000412FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 5672) = 0;
  sub_1000B2EA4(*(uint64_t **)(a1 + 6304));
  *(void *)(a1 + 6304) = 0LL;
  sub_1000C133C(*(void *)(a1 + 6272));
  *(void *)(a1 + 6272) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 328));
  *(void *)(a1 + 328) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 6240));
  *(void *)(a1 + 6240) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 6288));
  *(void *)(a1 + 6288) = 0LL;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 6296));
  *(void *)(a1 + 6296) = 0LL;
  *(_DWORD *)(a1 + 6256) = 0;
  return result;
}

BOOL sub_100041368(uint64_t *a1)
{
  int v2 = sub_100059850(*a1);
  if (sub_100004604(a1[2]))
  {
    uint64_t v3 = a1[2];
    int v4 = sub_10003991C(*a1);
    sub_100004614(v3, v4);
  }

  return v2 == 0;
}

uint64_t sub_1000413CC(uint64_t a1)
{
  *(void *)(a1 + 6272) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 328));
  *(void *)(a1 + 328) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 6240));
  *(void *)(a1 + 6240) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 6288));
  *(void *)(a1 + 6288) = 0LL;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 6296));
  *(void *)(a1 + 6296) = 0LL;
  *(_DWORD *)(a1 + 6256) = 0;
  return result;
}

BOOL sub_100041428(uint64_t a1)
{
  int v2 = *(int **)(a1 + 6288);
  int v3 = *v2;
  int v4 = v2[1];
  if (v4 < *v2) {
    int v3 = v2[1];
  }
  if (v2[2] >= v3)
  {
    int v5 = v4 < *v2;
  }

  else
  {
    int v3 = v2[2];
    int v5 = 2;
  }

  if (v2[3] < v3)
  {
    int v3 = v2[3];
    int v5 = 3;
  }

  if (v2[4] >= v3) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 4;
  }
  int v7 = v6 - 2;
  if (v6 <= 2) {
    int v7 = v6 - 3;
  }
  if (v6) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 5704) = v8;
  sub_100004614(*(void *)(a1 + 16), v8);
  return sub_100059850(*(void *)a1) != 0;
}

uint64_t sub_1000414C8(uint64_t a1)
{
  if (*(int *)(a1 + 6324) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    do
    {
      int v4 = (uint64_t *)(*(void *)(a1 + 6312) + v2);
      sub_1000A1874(*v4);
      sub_1000A266C(v4[1]);
      ++v3;
      *int v4 = 0LL;
      v4[1] = 0LL;
      v2 += 24LL;
    }

    while (v3 < *(int *)(a1 + 6324));
  }

  *(_DWORD *)(a1 + 6324) = 0;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 6312));
  *(void *)(a1 + 6312) = 0LL;
  *(_DWORD *)(a1 + 6320) = 0;
  return result;
}

uint64_t sub_100041544(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v23 = 0;
  if (*(_DWORD *)(a1 + 5688))
  {
    uint64_t v4 = a1;
    LODWORD(a1) = 0;
    switch(*(_DWORD *)(v4 + 5680))
    {
      case 1:
        if (!*(void *)(v4 + 104) || *(void *)(v4 + 5512) == *(void *)(v4 + 112)) {
          uint64_t v5 = v4 + 808;
        }
        else {
          uint64_t v5 = v4 + 800;
        }
        LODWORD(a1) = 0;
        *(_DWORD *)(*(void *)v5 + 4LL) = -1;
        goto LABEL_36;
      case 3:
        LODWORD(a1) = sub_100041AC8(v4, 0);
        if (!*(void *)(v4 + 104) || *(void *)(v4 + 5512) == *(void *)(v4 + 112)) {
          uint64_t v6 = v4 + 808;
        }
        else {
          uint64_t v6 = v4 + 800;
        }
        *(_DWORD *)(*(void *)v6 + 4LL) = -1;
        goto LABEL_26;
      case 4:
        LODWORD(a1) = sub_100041AC8(v4, 1);
        goto LABEL_26;
      case 6:
        uint64_t v7 = *(unsigned int *)(v4 + 6320);
        if ((int)v7 >= 1)
        {
          uint64_t v8 = 0LL;
          int v9 = 0;
          int v10 = *(_DWORD *)(v4 + 6328);
          do
          {
            uint64_t v11 = *(void *)(v4 + 6312) + v8;
            uint64_t v12 = *(void *)(v11 + 8);
            int v13 = sub_1000A20A0(*(void *)v11, 0, (int *)(v11 + 16));
            int v14 = *(_DWORD *)(*(void *)(v4 + 6312) + v8 + 16);
            *(_DWORD *)(v12 + 68) = v14;
            if (*(_DWORD *)(v4 + 6336) && v14 > *(_DWORD *)(v4 + 6332) + v10) {
              int v13 = 3;
            }
            if (v13 == 3) {
              ++v9;
            }
            v8 += 24LL;
          }

          while (24 * v7 != v8);
          if (v9 != (_DWORD)v7)
          {
            LODWORD(a1) = 0;
            goto LABEL_36;
          }

          goto LABEL_28;
        }

        if (!*(_DWORD *)(v4 + 6232)) {
          goto LABEL_48;
        }
        if (sub_100048BB8(v4, -2))
        {
          int v24 = 0;
          if (!sub_10003AB20( *(void *)(v4 + 112),  *(unsigned int *)(v4 + 6232),  (unsigned int *)(v4 + 5720),  *(int **)(v4 + 256),  &v24,  0LL,  1LL,  v20)) {
            goto LABEL_48;
          }
          uint64_t v22 = *(void *)(v4 + 136);
          if (v22)
          {
            if (!sub_10003AB20( v22,  *(unsigned int *)(v4 + 6232),  (unsigned int *)(v4 + 5720),  *(int **)(v4 + 256),  &v24,  0LL,  1LL,  v21)) {
              goto LABEL_48;
            }
          }

          a1 = *(void *)(v4 + 144);
          if (!a1) {
            goto LABEL_26;
          }
          if (sub_10003AB20( a1,  *(unsigned int *)(v4 + 6232),  (unsigned int *)(v4 + 5720),  *(int **)(v4 + 256),  &v24,  0LL,  1LL,  v21))
          {
            LODWORD(a1) = 0;
          }

          else
          {
LABEL_48:
            LODWORD(a1) = 2;
          }
        }

        else
        {
          LODWORD(a1) = 1;
        }