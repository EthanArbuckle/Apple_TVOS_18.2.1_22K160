CFUUIDBytes *sub_1882BC398(void *a1, const char *a2)
{
  CFUUIDBytes *result;
  result = (CFUUIDBytes *)xpc_dictionary_get_uuid(a1, a2);
  if (result) {
    return (CFUUIDBytes *)CFUUIDCreateFromUUIDBytes(0LL, *result);
  }
  return result;
}

const void *sub_1882BC3C0(void *a1, const char *a2, uint64_t a3)
{
  if (!xpc_dictionary_get_value(a1, a2)) {
    return 0LL;
  }
  v4 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  v5 = v4;
  if (v4 && CFGetTypeID(v4) != a3)
  {
    CFRelease(v5);
    return 0LL;
  }

  return v5;
}

void sub_1882BC410(void *a1, const char *a2, CFUUIDRef uuid)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  CFUUIDBytes uuida = CFUUIDGetUUIDBytes(uuid);
  xpc_dictionary_set_uuid(a1, a2, &uuida.byte0);
}

void sub_1882BC480()
{
  if (qword_18C4D9CE0 != -1) {
    dispatch_once(&qword_18C4D9CE0, &unk_18A219220);
  }
}

CFMutableDictionaryRef sub_1882BC4A8()
{
  qword_18C4D9D30 = _CFRuntimeRegisterClass();
  qword_18C4D9D28 = (uint64_t)dispatch_queue_create("HeimCred", 0LL);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  qword_18C4D9D38 = (uint64_t)result;
  return result;
}

void sub_1882BC50C(uint64_t a1)
{
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0LL;
  }

  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0LL;
  }
}

CFStringRef sub_1882BC548()
{
  return @"format";
}

CFStringRef sub_1882BC554(uint64_t a1)
{
  v2 = *(const __CFDictionary **)(a1 + 24);
  if (!v2) {
    return CFStringCreateWithFormat(0LL, 0LL, @"HeimCred<%@>", *(void *)(a1 + 16));
  }
  Value = CFDictionaryGetValue(v2, @"kHEIMAttrClientName");
  v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrServerName");
  v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrParentCredential");
  uint64_t v6 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrLeadCredential");
  v7 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrAltDSID");
  v8 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrUserID");
  v9 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrASID");
  v10 = "no";
  if (v6 && CFBooleanGetValue(v6)) {
    v10 = "yes";
  }
  v11 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrBundleIdentifierACL");
  v12 = &stru_18A222BF8;
  if (v11) {
    v13 = v11;
  }
  else {
    v13 = &stru_18A222BF8;
  }
  if (v7) {
    v14 = v7;
  }
  else {
    v14 = &stru_18A222BF8;
  }
  if (v8) {
    v15 = v8;
  }
  else {
    v15 = &stru_18A222BF8;
  }
  if (v9) {
    v12 = v9;
  }
  return CFStringCreateWithFormat( 0LL,  0LL,  @"HeimCred<%@ group: %@ parent: %@ client: %@ server: %@ lead: %s ACL: %@, altDSID: %@, Uid: %@, asid: %@>",  *(void *)(a1 + 16),  v6,  v5,  Value,  v4,  v10,  v13,  v14,  v15,  v12);
}

uint64_t sub_1882BC6C4(const void *a1)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    CFRetain(a1);
    *(void *)(Instance + 16) = a1;
  }

  return Instance;
}

void HeimCredSetImpersonateBundle(const __CFString *a1)
{
  if (qword_18C4D9CE8)
  {
    free((void *)qword_18C4D9CE8);
    qword_18C4D9CE8 = 0LL;
  }

  if (a1) {
    qword_18C4D9CE8 = (uint64_t)sub_1882BC750(a1);
  }
}

char *sub_1882BC750(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr) {
    return strdup(CStringPtr);
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v6 = malloc(v5);
  if (v6)
  {
    if (!CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0LL;
    }
  }

  return (char *)v6;
}

uint64_t HeimCredGetImpersonateBundle()
{
  return qword_18C4D9CE8;
}

uint64_t HeimCredSetImpersonateAuditToken(uint64_t result)
{
  qword_18C707010 = result;
  return result;
}

uint64_t HeimCredGetImpersonateAuditToken()
{
  return qword_18C707010;
}

uint64_t HeimCredCreate(uint64_t a1, CFErrorRef *a2)
{
  if (a2) {
    *a2 = 0LL;
  }
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  uint64_t v3 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v3) {
    return 0LL;
  }
  v4 = (void *)v3;
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v5) {
    heim_abort("xpc_dictionary_create:request != NULL", v6, v7, v8, v9, v10, v11, v12, v30);
  }
  v13 = v5;
  xpc_dictionary_set_string(v5, "command", "create");
  xpc_dictionary_set_value(v13, "attributes", v4);
  xpc_release(v4);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v13, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v14 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v13);
  xpc_release(v13);
  if (!v14)
  {
    v21 = @"Server didn't return any data";
    v22 = a2;
    unsigned int v23 = 564608;
LABEL_16:
    sub_1882BCA2C(v22, v23, v21, v15, v16, v17, v18, v19, v30);
    return 0LL;
  }

  if (MEMORY[0x1895C219C](v14) == MEMORY[0x1895F9268])
  {
    unsigned int v23 = 564609;
    char v30 = (char)v14;
    v21 = @"Server returned an error: %@";
    v22 = a2;
    goto LABEL_16;
  }

  if (MEMORY[0x1895C219C](v14) == MEMORY[0x1895F9250])
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    v26 = (const __CFDictionary *)sub_1882BC3C0(v14, "attributes", TypeID);
    if (v26)
    {
      v27 = v26;
      Value = CFDictionaryGetValue(v26, @"kHEIMAttrUUID");
      if (Value)
      {
        uint64_t v29 = sub_1882BC6C4(Value);
        uint64_t v20 = v29;
        if (v29)
        {
          *(void *)(v29 + 24) = v27;
          block[0] = MEMORY[0x1895F87A8];
          block[1] = 0x40000000LL;
          block[2] = sub_1882BE444;
          block[3] = &unk_18A219448;
          block[4] = v29;
          dispatch_sync((dispatch_queue_t)qword_18C4D9D28, block);
        }

        else
        {
          CFRelease(v27);
        }

        goto LABEL_13;
      }

      CFRelease(v27);
    }
  }

  uint64_t v20 = 0LL;
LABEL_13:
  xpc_release(v14);
  return v20;
}

void sub_1882BCA2C( CFErrorRef *a1, unsigned int a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  userInfoKeys[2] = *(void **)MEMORY[0x1895F89C0];
  userInfoKeys[0] = *(void **)MEMORY[0x189604F38];
  userInfoKeys[1] = @"CommonErrorCode";
  userInfoValues[1] = *(void **)MEMORY[0x189604DE8];
  if (a1)
  {
    userInfoValues[0] = (void *)CFStringCreateWithFormatAndArguments(0LL, 0LL, a3, &a9);
    *a1 = CFErrorCreateWithUserInfoKeysAndValues( 0LL,  @"org.h5l.HeimdalCredential",  a2,  (const void *const *)userInfoKeys,  (const void *const *)userInfoValues,  2LL);
    if (userInfoValues[0]) {
      CFRelease(userInfoValues[0]);
    }
  }

uint64_t HeimCredGetUUID(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t HeimCredGetAttributes(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t HeimCredCopyFromUUID(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = sub_1882BCBC8;
  v4[3] = &unk_18A2192A8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1882BCBC8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFDictionaryGetValue( (CFDictionaryRef)qword_18C4D9D38,  *(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2)
  {
    CFRetain(v2);
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1882BC6C4(*(const void **)(a1 + 40));
    CFDictionarySetValue( (CFMutableDictionaryRef)qword_18C4D9D38,  *(const void **)(a1 + 40),  *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }

uint64_t HeimCredSetAttribute(uint64_t a1, void *a2, void *a3, CFErrorRef *a4)
{
  keys[1] = *(void **)MEMORY[0x1895F89C0];
  values = a3;
  keys[0] = a2;
  CFDictionaryRef v6 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!v6) {
    return 0LL;
  }
  CFDictionaryRef v7 = v6;
  uint64_t v8 = HeimCredSetAttributes(a1, (uint64_t)v6, a4);
  CFRelease(v7);
  return v8;
}

uint64_t HeimCredSetAttributes(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (a3) {
    *a3 = 0LL;
  }
  if (qword_18C4D9CF0 == -1)
  {
    if (!a1) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
    if (!a1) {
      return 0LL;
    }
  }

  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  if (!result) {
    return result;
  }
  CFDictionaryRef v6 = (void *)result;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v7, "command", "setattributes");
  sub_1882BC410(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v7);
  xpc_release(v7);
  if (v8)
  {
    if (MEMORY[0x1895C219C](v8) != MEMORY[0x1895F9268])
    {
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 0x40000000LL;
      v14[2] = sub_1882BCE94;
      v14[3] = &unk_18A2192C8;
      v14[4] = a1;
      v14[5] = v8;
      dispatch_sync((dispatch_queue_t)qword_18C4D9D28, v14);
      xpc_release(v8);
      return 1LL;
    }
  }

  else
  {
    sub_1882BCA2C(a3, 0x89D80u, @"Server didn't return any data", v9, v10, v11, v12, v13, v14[0]);
  }

  return 0LL;
}

const void *sub_1882BCE94(uint64_t a1)
{
  uint64_t v2 = *(const void **)(*(void *)(a1 + 32) + 24LL);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(a1 + 32) + 24LL) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = sub_1882BC3C0(v3, "attributes", TypeID);
  *(void *)(*(void *)(a1 + 32) + 24LL) = result;
  return result;
}

const void *HeimCredCopyAttribute(uint64_t a1, const void *a2)
{
  uint64_t v13 = 0LL;
  xpc_object_t v14 = &v13;
  uint64_t v15 = 0x2000000000LL;
  uint64_t v16 = 0LL;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  v12[2] = sub_1882BD004;
  v12[3] = &unk_18A2192F0;
  v12[4] = &v13;
  v12[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, v12);
  uint64_t v5 = (const __CFDictionary *)v14[3];
  if (v5)
  {
    int v6 = CFDictionaryContainsKey(v5, a2);
    xpc_object_t v7 = (const void *)v14[3];
    if (v6) {
      goto LABEL_6;
    }
    if (v7)
    {
      CFRelease(v7);
      v14[3] = 0LL;
    }
  }

  xpc_object_t v7 = (const void *)HeimCredCopyAttributes(a1, v4, 0LL);
  v14[3] = (uint64_t)v7;
  if (!v7)
  {
    uint64_t v9 = 0LL;
    goto LABEL_11;
  }

LABEL_6:
  Value = CFDictionaryGetValue((CFDictionaryRef)v7, a2);
  uint64_t v9 = Value;
  if (Value) {
    CFRetain(Value);
  }
  uint64_t v10 = (const void *)v14[3];
  if (v10)
  {
    CFRelease(v10);
    v14[3] = 0LL;
  }

    krb5_free_address((uint64_t)a1, (uint64_t)v8);
    goto LABEL_7;
  }

  uint64_t v15 = 128;
  if (getsockname(a3, &v19, &v15) < 0)
  {
    uint64_t v10 = *__error();
    strerror_r(v10, (char *)__strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v10, "getsockname: %s", (const char *)__strerrbuf);
    return v10;
  }

  uint64_t v10 = krb5_sockaddr2address(a1, (uint64_t)&v19, (uint64_t)v16);
  if (!v10)
  {
    uint64_t v12 = (_WORD *)((char *)a2 + 24);
    if ((v4 & 3) != 0) {
      krb5_sockaddr2port(a1, (uint64_t)&v19, (uint64_t)v12);
    }
    else {
      CFStringRef v12 = 0;
    }
    xpc_object_t v8 = v16;
    if ((v4 & 4) == 0) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }

  return v10;
}

  uint64_t v12 = (*(uint64_t (**)(krb5_context, krb5_ccache, krb5_ccache))(v7 + 160))(context, src, dst);
  if (!v12)
  {
    *(void *)src = 0LL;
    *((void *)src + 1) = 0LL;
    *((void *)src + 2) = 0LL;
    free(src);
  }

  return v12;
}

  if (*(void *)(a3 + 8))
  {
    sub_1882C9500(a1, a3, a2);
    *(void *)(a3 + 8) = 0LL;
  }

  if (v14)
  {
    bzero(v14, *(void *)(a2 + 16) * v22);
    free(v14);
  }

  return v11;
}

    uint64_t v13 = sub_1882C8190(a1, v12);
    goto LABEL_7;
  }

  uint64_t v13 = sub_1882C8098(a1, a2, a3, a5);
  if (!(_DWORD)v13)
  {
    uint64_t v12 = (unsigned int **)*a5;
    goto LABEL_6;
  }

  return v13;
}

        ((void (*)(void *))DH[4])(v3);
        return v3;
      }
    }

    DH = (char **)hc_ENGINE_get_DH(default_DH);
    v3[16] = DH;
    if (!DH)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0LL;
    }

    goto LABEL_6;
  }

  return v3;
}

        ((void (*)(void *))RSA[7])(v3);
        return v3;
      }
    }

    RSA = (char **)hc_ENGINE_get_RSA(default_RSA);
    v3[2] = RSA;
    if (!RSA)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0LL;
    }

    goto LABEL_6;
  }

  return v3;
}

        ((void (*)(void *))v5[5])(v3);
        return v3;
      }
    }

    uint64_t v5 = (char **)sub_188317328(v4);
    v3[2] = v5;
    if (!v5)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0LL;
    }

    goto LABEL_6;
  }

  return v3;
}

LABEL_11:
  _Block_object_dispose(&v13, 8);
  return v9;
}

  uint64_t v9 = 0LL;
  *a3 = v16;
  return v9;
}

      ++v14;
    }

    while (v14 != v15);
  }

  krb5_config_free_strings(v12);
  return v13;
}

    ;
  }

  if (v13 == 92)
  {
    xpc_object_t v14 = *(unsigned __int8 *)++i;
    if ((v14 | 0x40) != 0x40) {
      goto LABEL_11;
    }
    v38 = 569968LL;
    v39 = "trailing \\ in principal name";
    v40 = 569968;
LABEL_22:
    hx509_set_error_string(a1, 0, v40, v39, a5, a6, a7, a8, v45);
    v22 = 0LL;
    goto LABEL_28;
  }

  if (v13 != 64) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v15 = calloc(v11, 8uLL);
  v46[1] = v15;
  if (!v15)
  {
    v39 = "malloc: out of memory";
    v38 = 12LL;
    a1 = v10;
    v40 = 12;
    goto LABEL_22;
  }

  uint64_t v16 = (char **)v15;
  uint64_t v17 = strdup(a3);
  v22 = v17;
  if (!v17)
  {
    v41 = "malloc: out of memory";
    v38 = 12LL;
    v42 = v10;
    v43 = 12;
LABEL_27:
    hx509_set_error_string(v42, 0, v43, v41, v18, v19, v20, v21, v45);
    goto LABEL_28;
  }

  unsigned int v23 = strrchr(v17, 64);
  if (!v23)
  {
    v38 = 569968LL;
    v41 = "Missing @ in principal";
    v42 = v10;
    v43 = 569968;
    goto LABEL_27;
  }

  *unsigned int v23 = 0;
  *uint64_t v16 = v22;
  v24 = strchr(v22, 47);
  if (v24)
  {
    v25 = (const char **)(v16 + 1);
    do
    {
      *v24 = 0;
      v26 = v24 + 1;
      *v25++ = v26;
      v24 = strchr(v26, 47);
    }

    while (v24);
  }

  v27 = sub_1882FE8A8();
  v28 = malloc(v27);
  if (!v28)
  {
    v38 = 12LL;
LABEL_26:
    v41 = "Out of memory";
    v42 = v10;
    v43 = v38;
    goto LABEL_27;
  }

  uint64_t v29 = v28;
  char v30 = sub_1882FE888();
  if ((_DWORD)v30)
  {
    v38 = v30;
    free(v29);
    goto LABEL_26;
  }

  if (v27) {
    sub_188303AB8("internal ASN.1 encoder error", v31, v32, v33, v34, v35, v36, v37, v45);
  }
  v38 = sub_188313838((unsigned int *)(a2 + 64));
  free(v29);
LABEL_28:
  if (v46[1]) {
    free(v46[1]);
  }
  if (v22) {
    free(v22);
  }
  return v38;
}

  if (*a2) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

  sub_188313044();
  if (v93) {
    hx509_certs_free((const void **)&v93);
  }
  if ((_DWORD)appended)
  {
    if (a9[1]) {
      der_free_octet_string();
    }
    if (*a10)
    {
      heim_release(*a10);
      *a10 = 0LL;
    }

    der_free_oid();
    der_free_octet_string();
  }

  return appended;
}

CFTypeRef sub_1882BD004(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 24LL);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 24LL);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v3;
  return result;
}

uint64_t HeimCredCopyAttributes(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v19 = 0LL;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000LL;
  uint64_t v22 = 0LL;
  if (a3) {
    *a3 = 0LL;
  }
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v5, "command", "fetch");
  sub_1882BC410(v5, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v5, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v5);
  xpc_release(v5);
  if (!v6)
  {
    uint64_t v13 = @"Server didn't return any data";
    xpc_object_t v14 = a3;
    unsigned int v15 = 564608;
LABEL_12:
    sub_1882BCA2C(v14, v15, v13, v7, v8, v9, v10, v11, v17);
    uint64_t v12 = 0LL;
    goto LABEL_13;
  }

  if (MEMORY[0x1895C219C](v6) == MEMORY[0x1895F9268])
  {
    unsigned int v15 = 564609;
    char v17 = (char)v6;
    uint64_t v13 = @"Server returned an error: %@";
    xpc_object_t v14 = a3;
    goto LABEL_12;
  }

  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = sub_1882BD204;
  block[3] = &unk_18A219318;
  block[4] = &v19;
  void block[5] = a1;
  block[6] = v6;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, block);
  xpc_release(v6);
  uint64_t v12 = v20[3];
LABEL_13:
  _Block_object_dispose(&v19, 8);
  return v12;
}

CFTypeRef sub_1882BD204(void *a1)
{
  uint64_t v2 = *(const void **)(a1[5] + 24LL);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1[5] + 24LL) = 0LL;
  }

  uint64_t v3 = (void *)a1[6];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  xpc_object_t v5 = sub_1882BC3C0(v3, "attributes", TypeID);
  *(void *)(a1[5] + 24LL) = v5;
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v5;
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

CFMutableArrayRef HeimCredCopyQuery()
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  uint64_t v0 = sub_1882BD388("query");
  if (!v0) {
    return 0LL;
  }
  v1 = (void *)v0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (Mutable)
  {
    xpc_object_t value = xpc_dictionary_get_value(v1, "items");
    if (value)
    {
      uint64_t v4 = value;
      if (MEMORY[0x1895C219C]() == MEMORY[0x1895F9220])
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 0x40000000LL;
        applier[2] = sub_1882BD43C;
        applier[3] = &unk_18A219338;
        applier[4] = Mutable;
        xpc_array_apply(v4, applier);
      }
    }
  }

  xpc_release(v1);
  return Mutable;
}

uint64_t sub_1882BD388(const char *a1)
{
  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  if (result)
  {
    uint64_t v3 = (void *)result;
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v4, "command", a1);
    xpc_dictionary_set_value(v4, "query", v3);
    xpc_release(v3);
    if (qword_18C4D9CE8) {
      xpc_dictionary_set_string(v4, "impersonate", (const char *)qword_18C4D9CE8);
    }
    xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v4);
    xpc_release(v4);
    return (uint64_t)v5;
  }

  return result;
}

uint64_t sub_1882BD43C(uint64_t a1)
{
  uint64_t v2 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  if (v2)
  {
    uint64_t v3 = v2;
    xpc_object_t v4 = (const void *)sub_1882BC6C4(v2);
    CFRelease(v3);
    if (v4)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
      CFRelease(v4);
    }
  }

  return 1LL;
}

BOOL HeimCredDeleteQuery(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 0LL;
  }
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  uint64_t v2 = (void *)sub_1882BD388("delete");
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  BOOL v4 = xpc_dictionary_get_value(v2, "error") == 0LL;
  xpc_release(v3);
  return v4;
}

void HeimCredDeleteByUUID(void *a1)
{
  keys[1] = *(void **)MEMORY[0x1895F89C0];
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  values = a1;
  keys[0] = @"kHEIMAttrUUID";
  CFDictionaryRef v2 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  uint64_t v3 = (void *)sub_1882BD388("delete");
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    xpc_release(v3);
  }
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = sub_1882BD650;
  v4[3] = &unk_18A219358;
  v4[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, v4);
}

void sub_1882BD650(uint64_t a1)
{
}

void HeimCredDelete(uint64_t a1)
{
}

void HeimCredRetainTransient(uint64_t a1)
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v2, "command", "retain-transient");
  sub_1882BC410(v2, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v3 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v2);
  xpc_release(v2);
  xpc_release(v3);
}

void HeimCredReleaseTransient(uint64_t a1)
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v2, "command", "release-transient");
  sub_1882BC410(v2, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v3 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v2);
  xpc_release(v2);
  xpc_release(v3);
}

BOOL HeimCredMove(const __CFUUID *a1, const __CFUUID *a2)
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v4, "command", "move");
  sub_1882BC410(v4, "from", a1);
  sub_1882BC410(v4, "to", a2);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v4, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v4);
  BOOL v6 = xpc_dictionary_get_value(v5, "error") == 0LL;
  xpc_release(v4);
  xpc_release(v5);
  return v6;
}

uint64_t HeimCredCopyStatus(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v2, "command", "status");
  if (a1)
  {
    xpc_object_t v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v3)
    {
      xpc_release(v2);
      return 0LL;
    }

    xpc_object_t v4 = v3;
    xpc_dictionary_set_value(v2, "mech", v3);
    xpc_release(v4);
  }

  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v2);
  xpc_release(v2);
  if (v5)
  {
    uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
    xpc_release(v5);
    return v6;
  }

  return 0LL;
}

const void *HeimCredCopyDefaultCredential(const __CFString *a1, CFErrorRef *a2)
{
  if (qword_18C4D9CF0 == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  if (a2) {
LABEL_3:
  }
    *a2 = 0LL;
LABEL_4:
  xpc_object_t v4 = sub_1882BC750(a1);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v6, "command", "default");
    xpc_dictionary_set_string(v6, "mech", v5);
    free(v5);
    if (qword_18C4D9CE8) {
      xpc_dictionary_set_string(v6, "impersonate", (const char *)qword_18C4D9CE8);
    }
    xpc_object_t v7 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v6);
    xpc_release(v6);
    if (v7)
    {
      if (MEMORY[0x1895C219C](v7) != MEMORY[0x1895F9268])
      {
        CFTypeID v13 = CFUUIDGetTypeID();
        xpc_object_t v14 = sub_1882BC3C0(v7, "default", v13);
        xpc_release(v7);
        return v14;
      }

      unsigned int v18 = 564609;
      char v19 = (char)v7;
      uint64_t v16 = @"Server returned an error: %@";
      char v17 = a2;
    }

    else
    {
      uint64_t v16 = @"Server didn't return any data";
      char v17 = a2;
      unsigned int v18 = 564608;
    }

    sub_1882BCA2C(v17, v18, v16, v8, v9, v10, v11, v12, v19);
  }

  return 0LL;
}

uint64_t HeimCredDoAuth(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  uint64_t v24 = 0LL;
  if (qword_18C4D9CF0 == -1)
  {
    if (!a1)
    {
LABEL_14:
      uint64_t v14 = 0LL;
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
    if (!a1) {
      goto LABEL_14;
    }
  }

  if (a3) {
    *a3 = 0LL;
  }
  uint64_t v5 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v5) {
    goto LABEL_14;
  }
  xpc_object_t v6 = (void *)v5;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v7, "command", "doauth");
  sub_1882BC410(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v7);
  xpc_release(v7);
  if (!v8)
  {
    unsigned int v15 = @"Server didn't return any data";
    uint64_t v16 = a3;
    unsigned int v17 = 564608;
LABEL_13:
    sub_1882BCA2C(v16, v17, v15, v9, v10, v11, v12, v13, v19);
    goto LABEL_14;
  }

  if (MEMORY[0x1895C219C](v8) == MEMORY[0x1895F9268])
  {
    unsigned int v17 = 564609;
    char v19 = (char)v8;
    unsigned int v15 = @"Server returned an error: %@";
    uint64_t v16 = a3;
    goto LABEL_13;
  }

  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = sub_1882BDD4C;
  block[3] = &unk_18A219380;
  block[4] = &v21;
  void block[5] = v8;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, block);
  xpc_release(v8);
  uint64_t v14 = v22[3];
LABEL_15:
  _Block_object_dispose(&v21, 8);
  return v14;
}

const void *sub_1882BDD4C(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = sub_1882BC3C0(v2, "attributes", TypeID);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

BOOL HeimCredDeleteAll(void *a1, void *a2)
{
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  if (a2) {
    *a2 = 0LL;
  }
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  keys[0] = @"kHEIMAttrAltDSID";
  keys[1] = @"kHEIMObjectType";
  values[0] = a1;
  values[1] = @"kHEIMObjectAny";
  CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, 2LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  xpc_object_t v3 = (void *)sub_1882BD388("delete-all");
  if (!v3) {
    return 0LL;
  }
  xpc_object_t v4 = v3;
  BOOL v5 = xpc_dictionary_get_value(v3, "error") == 0LL;
  xpc_release(v4);
  return v5;
}

BOOL HeimCredAddNTLMChallenge(UInt8 *bytes)
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v2 = CFDataCreate(0LL, bytes, 8LL);
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v3, "command", "add-challenge");
  BytePtr = CFDataGetBytePtr(v2);
  size_t Length = CFDataGetLength(v2);
  xpc_dictionary_set_data(v3, "challenge", BytePtr, Length);
  if (v2) {
    CFRelease(v2);
  }
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v3);
  xpc_release(v3);
  if (!v6) {
    return 0LL;
  }
  BOOL v7 = xpc_dictionary_get_value(v6, "error") == 0LL;
  xpc_release(v6);
  return v7;
}

BOOL HeimCredCheckNTLMChallenge(UInt8 *bytes)
{
  if (qword_18C4D9CF0 != -1) {
    dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  }
  xpc_object_t v2 = CFDataCreate(0LL, bytes, 8LL);
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v3, "command", "check-challenge");
  BytePtr = CFDataGetBytePtr(v2);
  size_t Length = CFDataGetLength(v2);
  xpc_dictionary_set_data(v3, "challenge", BytePtr, Length);
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v3);
  xpc_release(v3);
  if (!v6) {
    return 1LL;
  }
  xpc_dictionary_get_value(v6, "error");
  xpc_object_t value = xpc_dictionary_get_value(v6, "challenge-result");
  if (value) {
    BOOL v8 = xpc_BOOL_get_value(value);
  }
  else {
    BOOL v8 = 1LL;
  }
  xpc_release(v6);
  return v8;
}

uint64_t HeimCredDoSCRAM(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  uint64_t v24 = 0LL;
  if (qword_18C4D9CF0 == -1)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  dispatch_once(&qword_18C4D9CF0, &unk_18A2193E8);
  if (a3) {
LABEL_3:
  }
    *a3 = 0LL;
LABEL_4:
  uint64_t v5 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v5)
  {
LABEL_13:
    uint64_t v14 = 0LL;
    goto LABEL_14;
  }

  xpc_object_t v6 = (void *)v5;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v7, "command", "doscram");
  sub_1882BC410(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_18C4D9D40, v7);
  xpc_release(v7);
  if (!v8)
  {
    unsigned int v15 = @"Server didn't return any data";
    uint64_t v16 = a3;
    unsigned int v17 = 564608;
LABEL_12:
    sub_1882BCA2C(v16, v17, v15, v9, v10, v11, v12, v13, v19);
    goto LABEL_13;
  }

  if (MEMORY[0x1895C219C](v8) == MEMORY[0x1895F9268])
  {
    unsigned int v17 = 564609;
    char v19 = (char)v8;
    unsigned int v15 = @"Server returned an error: %@";
    uint64_t v16 = a3;
    goto LABEL_12;
  }

  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = sub_1882BE2B0;
  block[3] = &unk_18A2193A8;
  block[4] = &v21;
  void block[5] = v8;
  dispatch_sync((dispatch_queue_t)qword_18C4D9D28, block);
  xpc_release(v8);
  uint64_t v14 = v22[3];
LABEL_14:
  _Block_object_dispose(&v21, 8);
  return v14;
}

CFTypeRef sub_1882BE2B0(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1882BC3C0(v2, "attributes", TypeID);
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1882BE310()
{
  qword_18C4D9D40 = (uint64_t)xpc_connection_create_mach_service( "com.apple.GSSCred",  (dispatch_queue_t)qword_18C4D9D28,  2uLL);
  xpc_connection_set_event_handler((xpc_connection_t)qword_18C4D9D40, &unk_18A219428);
  xpc_connection_resume((xpc_connection_t)qword_18C4D9D40);
  if (!qword_18C4D9D40) {
    heim_abort("no connection to XPCService:HeimCredCTX.conn != NULL", v0, v1, v2, v3, v4, v5, v6, v8);
  }
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v7, "command", "wakeup");
  xpc_dictionary_set_int64(v7, "version", 0LL);
  if (qword_18C4D9CE8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_18C4D9CE8);
  }
  xpc_connection_send_message((xpc_connection_t)qword_18C4D9D40, v7);
  xpc_release(v7);
}

void sub_1882BE3DC(uint64_t a1, void *a2)
{
  if (a2 != (void *)MEMORY[0x1895F9268])
  {
    uint64_t v2 = sub_1882BC398(a2, "uuid");
    if (v2)
    {
      uint64_t v3 = v2;
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_18C4D9D38, v2);
      CFRelease(v3);
    }
  }

void sub_1882BE444(uint64_t a1)
{
}

uint64_t krb5_add_et_list(uint64_t a1, void (*a2)(uint64_t))
{
  return 0LL;
}

uint64_t krb5_sockaddr2address(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &dword_18A219468;
  while (*v3 != *(unsigned __int8 *)(a2 + 1))
  {
    v3 += 32;
    if (v3 >= (int *)&off_18A2195E8)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", *(unsigned __int8 *)(a2 + 1));
      return 2529639126LL;
    }
  }

  return (*((uint64_t (**)(uint64_t, uint64_t))v3 + 2))(a2, a3);
}

uint64_t krb5_sockaddr2port(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &dword_18A219468;
  while (*v3 != *(unsigned __int8 *)(a2 + 1))
  {
    v3 += 32;
    if (v3 >= (int *)&off_18A2195E8)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", *(unsigned __int8 *)(a2 + 1));
      return 2529639126LL;
    }
  }

  return (*((uint64_t (**)(uint64_t, uint64_t))v3 + 3))(a2, a3);
}

uint64_t krb5_addr2sockaddr(_krb5_context *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = &dword_18A219468;
  while (v5[1] != *a2)
  {
    v5 += 32;
    if (v5 >= (int *)&off_18A2195E8)
    {
      uint64_t v6 = 2529639126LL;
      krb5_set_error_message(a1, -1765328170, "Address type %d not supported");
      return v6;
    }
  }

  xpc_object_t v7 = (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))*((void *)v5 + 4);
  if (v7)
  {
    v7(a2, a3, a4, a5);
    return 0LL;
  }

  else
  {
    uint64_t v6 = 2529639126LL;
    krb5_set_error_message(a1, -1765328170, "Can't convert address type %d to sockaddr");
  }

  return v6;
}

unint64_t krb5_max_sockaddr_size()
{
  unint64_t result = qword_18C707018;
  if (!qword_18C707018)
  {
    uint64_t v1 = &dword_18A219468;
    do
    {
      if (result <= *((void *)v1 + 1)) {
        unint64_t result = *((void *)v1 + 1);
      }
      v1 += 32;
    }

    while (v1 < (int *)&off_18A2195E8);
    qword_18C707018 = result;
  }

  return result;
}

uint64_t krb5_sockaddr_uninteresting(uint64_t a1)
{
  uint64_t v1 = dword_18A219468;
  while (*v1 != *(unsigned __int8 *)(a1 + 1))
  {
    v1 += 32;
  }

  uint64_t v2 = (uint64_t (*)(void))*((void *)v1 + 7);
  if (v2) {
    return v2();
  }
  return 1LL;
}

uint64_t sub_1882BE6A4(uint64_t a1)
{
  uint64_t v1 = dword_18A219468;
  while (*v1 != *(unsigned __int8 *)(a1 + 1))
  {
    v1 += 32;
  }

  uint64_t v2 = (uint64_t (*)(void))*((void *)v1 + 8);
  if (v2) {
    return v2();
  }
  return 1LL;
}

uint64_t krb5_h_addr2sockaddr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = &dword_18A219468;
  while (*v6 != a2)
  {
    v6 += 32;
    if (v6 >= (int *)&off_18A2195E8)
    {
      uint64_t v7 = 2529639126LL;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return v7;
    }
  }

  (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v6 + 5))(a3, a4, a5, a6);
  return 0LL;
}

uint64_t krb5_h_addr2addr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = &dword_18A219468;
  while (*v4 != a2)
  {
    v4 += 32;
    if (v4 >= (int *)&off_18A2195E8)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return 2529639126LL;
    }
  }

  return (*((uint64_t (**)(uint64_t, uint64_t))v4 + 6))(a3, a4);
}

uint64_t krb5_anyaddr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = dword_18A219468;
  while (*v5 != a2)
  {
    v5 += 32;
    if (v5 >= (int *)&off_18A2195E8)
    {
      uint64_t v6 = 2529639126LL;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return v6;
    }
  }

  (*((void (**)(uint64_t, uint64_t, uint64_t))v5 + 9))(a3, a4, a5);
  return 0LL;
}

uint64_t krb5_print_address(uint64_t a1, char *__str, size_t __size, void *a4)
{
  char v8 = &dword_18A219468;
  while (v8[1] != *(_DWORD *)a1)
  {
    v8 += 32;
  }

  uint64_t v9 = (uint64_t (*)(uint64_t, char *, size_t))*((void *)v8 + 10);
  if (!v9)
  {
LABEL_9:
    unsigned int v12 = snprintf(__str, __size, "TYPE_%d:", *(_DWORD *)a1);
    if ((v12 & 0x80000000) == 0 && __size > v12)
    {
      uint64_t v13 = &__str[v12];
      if (!*(void *)(a1 + 8))
      {
LABEL_16:
        if (a4)
        {
          uint64_t v11 = v13 - __str;
          goto LABEL_18;
        }

        return 0LL;
      }

      uint64_t v14 = 0LL;
      size_t v15 = __size - v12;
      while (1)
      {
        unsigned int v16 = snprintf(v13, v15, "%02x", *(char *)(*(void *)(a1 + 16) + v14));
        if ((v16 & 0x80000000) != 0 || v15 <= v16) {
          break;
        }
        v15 -= v16;
        v13 += v16;
      }
    }

    return 22LL;
  }

  unsigned int v10 = v9(a1, __str, __size);
  if ((v10 & 0x80000000) != 0) {
    return 22LL;
  }
  if (a4)
  {
    uint64_t v11 = v10;
LABEL_18:
    uint64_t result = 0LL;
    *a4 = v11;
    return result;
  }

  return 0LL;
}

uint64_t krb5_parse_address(_krb5_context *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  do
  {
    if (v6 != 64
      && !(*(unsigned int (**)(_krb5_context *, char *, addrinfo **))&dword_18A219468[v6 + 22])(a1, a2, v20))
    {
      *(_DWORD *)a3 = 1;
      uint64_t v11 = calloc(1uLL, 0x18uLL);
      *(void *)(a3 + 8) = v11;
      if (v11)
      {
        uint64_t v10 = 0LL;
        __int128 v12 = *(_OWORD *)v20;
        v11[2] = v21;
        *(_OWORD *)uint64_t v11 = v12;
      }

      else
      {
        uint64_t v10 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }

      return v10;
    }

    v6 += 32LL;
  }

  while (v6 != 96);
  uint64_t v7 = getaddrinfo(a2, 0LL, 0LL, v20);
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = __error();
    uint64_t v10 = krb5_eai_to_heim_errno(v8, *v9);
    gai_strerror(v8);
    krb5_set_error_message(a1, v10, "%s: %s");
  }

  else
  {
    uint64_t v13 = v20[0];
    if (v20[0])
    {
      unsigned int v14 = 0;
      do
      {
        ++v14;
        uint64_t v13 = v13->ai_next;
      }

      while (v13);
    }

    else
    {
      unsigned int v14 = 0;
    }

    *(_DWORD *)a3 = v14;
    size_t v15 = calloc(v14, 0x18uLL);
    *(void *)(a3 + 8) = v15;
    if (v15)
    {
      *(_DWORD *)a3 = 0;
      unsigned int v16 = v20[0];
      if (v20[0])
      {
        int v17 = 0;
        do
        {
          if (!krb5_sockaddr2address(a1, (uint64_t)v16->ai_addr, *(void *)(a3 + 8) + 24LL * v17))
          {
            if (krb5_address_search( a1,  (const krb5_address *)(*(void *)(a3 + 8) + 24LL * v17),  (krb5_address *const *)a3))
            {
              krb5_free_address((uint64_t)a1, *(void *)(a3 + 8) + 24LL * v17);
            }

            else
            {
              *(_DWORD *)a3 = ++v17;
            }
          }

          unsigned int v16 = v16->ai_next;
        }

        while (v16);
        unsigned int v18 = v20[0];
      }

      else
      {
        unsigned int v18 = 0LL;
      }

      freeaddrinfo(v18);
      return 0LL;
    }

    else
    {
      uint64_t v10 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      freeaddrinfo(v20[0]);
    }
  }

  return v10;
}

krb5_BOOLean krb5_address_search(krb5_context a1, const krb5_address *a2, krb5_address *const *a3)
{
  if (!*(_DWORD *)a3) {
    return 0;
  }
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  while (krb5_address_order(a1, a2, (const krb5_address *)(*((void *)a3 + 1) + v6)))
  {
    ++v7;
    v6 += 24LL;
  }

  return 1;
}

uint64_t krb5_free_address(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &dword_18A219468;
  while (v3[1] != *(_DWORD *)a2)
  {
    v3 += 32;
  }

  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v3 + 13);
  if (v4) {
    return v4(a1, a2);
  }
LABEL_7:
  krb5_data_free((void *)(a2 + 8));
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  return 0LL;
}

int krb5_address_order(krb5_context a1, const krb5_address *a2, const krb5_address *a3)
{
  krb5_magic magic = a2->magic;
  uint64_t v4 = &dword_18A219468;
  while (v4[1] != magic)
  {
    v4 += 32;
    if (v4 >= (int *)&off_18A2195E8)
    {
      int v5 = -1765328170;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2->magic);
      return v5;
    }
  }

  unint64_t v7 = (uint64_t (*)(krb5_context))*((void *)v4 + 12);
  if (v7) {
    return v7(a1);
  }
  krb5_magic v8 = a3->magic;
  uint64_t v9 = &dword_18A219468;
  while (v9[1] != v8)
  {
    v9 += 32;
    if (v9 >= (int *)&off_18A2195E8)
    {
      int v5 = -1765328170;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a3->magic);
      return v5;
    }
  }

  unint64_t v7 = (uint64_t (*)(krb5_context))*((void *)v9 + 12);
  if (v7) {
    return v7(a1);
  }
  int v5 = magic - v8;
  if (magic != v8) {
    return v5;
  }
  size_t v10 = *(void *)&a2->length;
  uint64_t v11 = *(void *)&a3->length;
  if (v10 != v11) {
    return v10 - v11;
  }
  return memcmp(a2->contents, a3->contents, v10);
}

krb5_BOOLean krb5_address_compare(krb5_context a1, const krb5_address *a2, const krb5_address *a3)
{
  return krb5_address_order(a1, a2, a3) == 0;
}

void krb5_free_addresses(krb5_context a1, krb5_address **a2)
{
  if (*(_DWORD *)a2)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    do
    {
      krb5_free_address((uint64_t)a1, (uint64_t)&a2[1][v4]);
      ++v5;
      ++v4;
    }

    while (v5 < *(unsigned int *)a2);
  }

  free(a2[1]);
  *(_DWORD *)a2 = 0;
  a2[1] = 0LL;
}

uint64_t krb5_copy_address(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = &dword_18A219468;
  while (*v2 != *a2)
  {
    v2 += 32;
  }

  uint64_t v3 = (uint64_t (*)(void))*((void *)v2 + 14);
  if (v3) {
    return v3();
  }
  return sub_1882FD4CC();
}

krb5_error_code krb5_copy_addresses(krb5_context a1, krb5_address *const *a2, krb5_address ***a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a2;
  uint64_t v6 = (krb5_address **)calloc(*(unsigned int *)a2, 0x18uLL);
  a3[1] = v6;
  if (*(_DWORD *)a2) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    return 12;
  }
  if (*(_DWORD *)a2)
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    do
    {
      krb5_copy_address((uint64_t)a1, (_DWORD *)(*((void *)a2 + 1) + v8));
      ++v9;
      v8 += 24LL;
    }

    while (v9 < *(unsigned int *)a2);
  }

  return 0;
}

uint64_t krb5_append_addresses(_krb5_context *a1, uint64_t a2, unsigned int *a3)
{
  if (*a3)
  {
    uint64_t v6 = realloc(*(void **)(a2 + 8), 24LL * (*(_DWORD *)a2 + *a3));
    if (!v6)
    {
      uint64_t v10 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v10;
    }

    *(void *)(a2 + 8) = v6;
    if (*a3)
    {
      uint64_t v7 = 0LL;
      for (unint64_t i = 0LL; i < *a3; ++i)
      {
        if (!krb5_address_search(a1, (const krb5_address *)(*((void *)a3 + 1) + v7), (krb5_address *const *)a2))
        {
          uint64_t v9 = krb5_copy_address((uint64_t)a1, (_DWORD *)(*((void *)a3 + 1) + v7));
          if ((_DWORD)v9) {
            return v9;
          }
          ++*(_DWORD *)a2;
        }

        v7 += 24LL;
      }
    }
  }

  return 0LL;
}

uint64_t krb5_make_addrport(_krb5_context *a1, void **a2, uint64_t a3, __int16 a4)
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = (size_t *)malloc(0x18uLL);
  *a2 = v9;
  if (v9)
  {
    *(_DWORD *)uint64_t v9 = 256;
    uint64_t v10 = krb5_data_alloc(v9 + 1, v8 + 18);
    if ((_DWORD)v10)
    {
      krb5_set_error_message(a1, v10, "malloc: out of memory");
      free(*a2);
      *a2 = 0LL;
    }

    else
    {
      uint64_t v11 = *((void *)*a2 + 2);
      *(_WORD *)uint64_t v11 = 0;
      *(_WORD *)(v11 + 2) = *(_DWORD *)a3;
      *(_WORD *)(v11 + 4) = *(void *)(a3 + 8);
      *(_BYTE *)(v11 + 6) = BYTE2(*(void *)(a3 + 8));
      uint64_t v12 = v11 + 8;
      *(_BYTE *)(v11 + 7) = BYTE3(*(void *)(a3 + 8));
      memcpy((void *)(v11 + 8), *(const void **)(a3 + 16), *(void *)(a3 + 8));
      uint64_t v13 = v12 + *(void *)(a3 + 8);
      *(void *)uint64_t v13 = 0x201010000LL;
      *(_WORD *)(v13 + 8) = a4;
    }
  }

  else
  {
    uint64_t v10 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v10;
}

uint64_t krb5_address_prefixlen_boundary(_krb5_context *a1, _DWORD *a2)
{
  uint64_t v2 = &dword_18A219468;
  while (v2[1] != *a2)
  {
    v2 += 32;
  }

  uint64_t v3 = (uint64_t (*)(void))*((void *)v2 + 15);
  if (v3) {
    return v3();
  }
LABEL_7:
  krb5_set_error_message(a1, -1765328170, "Address family %d doesn't support address mask operation", *a2);
  return 2529639126LL;
}

uint64_t sub_1882BF1B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  int v3 = *(_DWORD *)(a1 + 4);
  return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
}

uint64_t sub_1882BF1F4(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 2);
  return 0LL;
}

void *sub_1882BF204(uint64_t a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __src[2] = *MEMORY[0x1895F89C0];
  __src[0] = 512LL;
  __src[1] = 0LL;
  HIDWORD(__src[0]) = **(_DWORD **)(a1 + 16);
  WORD1(__src[0]) = a4;
  if (*a3 >= 0x10u) {
    size_t v5 = 16LL;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, __src, v5);
  *a3 = 16;
  return result;
}

void *sub_1882BF294(_DWORD *a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __src[2] = *MEMORY[0x1895F89C0];
  __src[0] = 512LL;
  __src[1] = 0LL;
  WORD1(__src[0]) = a4;
  HIDWORD(__src[0]) = *a1;
  if (*a3 >= 0x10u) {
    size_t v5 = 16LL;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, __src, v5);
  *a3 = 16;
  return result;
}

uint64_t sub_1882BF320(int *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  int v3 = *a1;
  return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
}

BOOL sub_1882BF35C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 0;
}

BOOL sub_1882BF36C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4) == 127;
}

void *sub_1882BF37C(void *a1, _DWORD *a2, __int16 a3)
{
  __src[2] = *MEMORY[0x1895F89C0];
  __src[0] = 512LL;
  __src[1] = 0LL;
  WORD1(__src[0]) = a3;
  if (*a2 >= 0x10u) {
    size_t v4 = 16LL;
  }
  else {
    size_t v4 = *a2;
  }
  uint64_t result = memcpy(a1, __src, v4);
  *a2 = 16;
  return result;
}

uint64_t sub_1882BF3F8(uint64_t a1, char *a2, size_t a3)
{
  v5.s_addr = **(_DWORD **)(a1 + 16);
  uint64_t v6 = inet_ntoa(v5);
  return snprintf(a2, a3, "IPv4:%s", v6);
}

uint64_t sub_1882BF444(int a1, char *__s, uint64_t a3)
{
  in_addr v5 = strchr(__s, 58);
  if (v5)
  {
    uint64_t v6 = v5 + 1;
    size_t v7 = v5 + 1 - __s;
    if (strncasecmp(__s, "ip:", v7)
      && strncasecmp(__s, "ip4:", v7)
      && strncasecmp(__s, "ipv4:", v7)
      && strncasecmp(__s, "inet:", v7))
    {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v6 = __s;
  }

  if (!inet_aton(v6, &v9)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)a3 = 2;
  _krb5_put_int(*(void *)(a3 + 16), bswap32(v9.s_addr), *(void *)(a3 + 8));
  return 0LL;
}

uint64_t sub_1882BF538(krb5_context a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = a3;
  if (a3 < 0x21)
  {
    uint64_t v7 = 0xFFFFFFFFLL;
    _krb5_get_int(*(unsigned __int8 **)(a2 + 16), &v13, *(void *)(a2 + 8));
    unsigned int v10 = v13;
    *(_DWORD *)a4 = 2;
    if (!krb5_data_alloc((size_t *)(a4 + 8), 4uLL))
    {
      int v11 = -1 << -v5;
      _krb5_put_int(*(void *)(a4 + 16), v11 & v10, *(void *)(a4 + 8));
      *(_DWORD *)a5 = 2;
      if (krb5_data_alloc((size_t *)(a5 + 8), 4uLL))
      {
        krb5_free_address((uint64_t)a1, a4);
        return 0xFFFFFFFFLL;
      }

      else
      {
        _krb5_put_int(*(void *)(a5 + 16), v10 | ~v11, *(void *)(a5 + 8));
        return 0LL;
      }
    }
  }

  else
  {
    uint64_t v7 = 2529639126LL;
    krb5_set_error_message(a1, -1765328170, "IPv4 prefix too large (%ld)", a3);
  }

  return v7;
}

uint64_t sub_1882BF62C(_DWORD *a1, uint64_t a2)
{
  if (a1[2] || a1[3] || a1[4] != -65536)
  {
    *(_DWORD *)a2 = 24;
    return krb5_data_copy((void *)(a2 + 8), a1 + 2, 0x10uLL);
  }

  else
  {
    *(_DWORD *)a2 = 2;
    int v3 = a1[5];
    return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
  }

uint64_t sub_1882BF6A4(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 2);
  return 0LL;
}

void *sub_1882BF6B4(uint64_t a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __int128 v8 = 0uLL;
  uint64_t v7 = 7680LL;
  int v9 = 0;
  __int128 v8 = *(_OWORD *)*(void *)(a1 + 16);
  WORD1(v7) = a4;
  if (*a3 >= 0x1Cu) {
    size_t v5 = 28LL;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, &v7, v5);
  *a3 = 28;
  return result;
}

void *sub_1882BF720(__int128 *a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __int128 v8 = 0uLL;
  uint64_t v7 = 7680LL;
  int v9 = 0;
  WORD1(v7) = a4;
  __int128 v8 = *a1;
  if (*a3 >= 0x1Cu) {
    size_t v5 = 28LL;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, &v7, v5);
  *a3 = 28;
  return result;
}

uint64_t sub_1882BF788(const void *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 24;
  return krb5_data_copy((void *)(a2 + 8), a1, 0x10uLL);
}

BOOL sub_1882BF7A4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  return v2 && v2 != 0x1000000;
}

BOOL sub_1882BF804(_DWORD *a1)
{
  return !a1[2] && !a1[3] && !a1[4] && a1[5] == 0x1000000;
}

void *sub_1882BF838(void *a1, _DWORD *a2, __int16 a3)
{
  __int128 v7 = 0uLL;
  uint64_t v6 = 7680LL;
  int v8 = 0;
  WORD1(v6) = a3;
  __int128 v7 = *MEMORY[0x1895FB7E8];
  if (*a2 >= 0x1Cu) {
    size_t v4 = 28LL;
  }
  else {
    size_t v4 = *a2;
  }
  uint64_t result = memcpy(a1, &v6, v4);
  *a2 = 28;
  return result;
}

uint64_t sub_1882BF8A0(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (!inet_ntop(30, *(const void **)(a1 + 16), v10, 0x80u))
  {
    v10[0] = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8))
    {
      unint64_t v7 = 0LL;
      do
      {
        snprintf(__str, 3uLL, "%02x", *(unsigned __int8 *)(v6 + v7));
        if (v7 && (v7 & 1) == 0) {
          __strlcat_chk();
        }
        __strlcat_chk();
        ++v7;
      }

      while (v7 < *(void *)(a1 + 8));
    }
  }

  return snprintf(a2, a3, "IPv6:%s", v10);
}

double sub_1882BF9BC(int a1, char *__s, uint64_t a3)
{
  size_t v4 = __s;
  size_t v5 = strchr(__s, 58);
  if (v5)
  {
    uint64_t v6 = v5 + 1;
    size_t v7 = v5 + 1 - v4;
    if (!strncasecmp(v4, "ip6:", v7) || !strncasecmp(v4, "ipv6:", v7) || !strncasecmp(v4, "inet6:", v7)) {
      size_t v4 = v6;
    }
  }

  if (inet_pton(30, v4, &v9) == 1)
  {
    *(_DWORD *)a3 = 24;
    if (!krb5_data_alloc((size_t *)(a3 + 8), 0x10uLL))
    {
      double result = *(double *)&v9;
      *(_OWORD *)*(void *)(a3 + 16) = v9;
    }
  }

  return result;
}

uint64_t sub_1882BFA94(krb5_context a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 0x81)
  {
    if (*(void *)(a2 + 8) == 16LL)
    {
      uint64_t v9 = 0LL;
      __int128 v16 = *(_OWORD *)*(void *)(a2 + 16);
      do
      {
        char v10 = 8 - a3;
        if (a3 > 8) {
          char v10 = 0;
        }
        int v11 = 255 << v10;
        char v12 = *((_BYTE *)&v16 + v9);
        *((_BYTE *)&v15 + v9) = v12 & v11;
        *((_BYTE *)&v14 + v9) = v12 | ~(_BYTE)v11;
        if (a3 >= 8) {
          a3 -= 8LL;
        }
        else {
          a3 = 0LL;
        }
        ++v9;
      }

      while (v9 != 16);
      *(_DWORD *)a4 = 24;
      if (!krb5_data_alloc((size_t *)(a4 + 8), 0x10uLL))
      {
        *(_OWORD *)*(void *)(a4 + 16) = v15;
        *(_DWORD *)a5 = 24;
        if (!krb5_data_alloc((size_t *)(a5 + 8), 0x10uLL))
        {
          uint64_t v6 = 0LL;
          *(_OWORD *)*(void *)(a5 + 16) = v14;
          return v6;
        }

        krb5_free_address((uint64_t)a1, a4);
      }

      return 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = 2529639126LL;
      krb5_set_error_message(a1, -1765328170, "IPv6 addr bad length");
    }
  }

  else
  {
    uint64_t v6 = 2529639126LL;
    krb5_set_error_message(a1, -1765328170, "IPv6 prefix too large (%ld)");
  }

  return v6;
}

uint64_t sub_1882BFBD0(uint64_t a1, char *a2, size_t a3)
{
  size_t v5 = krb5_storage_from_data((uint64_t *)(a1 + 8));
  if (!v5) {
    return 12LL;
  }
  uint64_t v6 = (uint64_t)v5;
  krb5_storage_set_byteorder((uint64_t)v5, 32);
  krb5_storage_seek(v6);
  krb5_ret_address(v6, (uint64_t)v19);
  krb5_storage_seek(v6);
  krb5_ret_address(v6, (uint64_t)&v16);
  krb5_storage_free(v6);
  int v7 = 0;
  if (v16 == 257 && v17 == 2)
  {
    _krb5_get_int(v18, &v15, 2LL);
    int v7 = (unsigned __int16)v15;
  }

  size_t v8 = strlcpy(a2, "ADDRPORT:", a3);
  int v9 = v8;
  size_t v15 = v8;
  if (v8 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v8;
  }
  uint64_t result = krb5_print_address((uint64_t)v19, &a2[v10], a3 - v10, &v15);
  if (!(_DWORD)result)
  {
    int v12 = v15;
    size_t v13 = v15 + v10;
    if (a3 - v10 <= v15) {
      size_t v13 = a3;
    }
    int v14 = snprintf(&a2[v13], a3 - v13, ",PORT=%u", v7);
    if (v14 < 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return (v14 + v12 + v9);
    }
  }

  return result;
}

krb5_error_code krb5_aname_to_localname(krb5_context a1, krb5_const_principal a2, int a3, char *a4)
{
  size_t v5 = *(void *)&a3;
  krb5_error_code default_realms = krb5_get_default_realms((CFArrayRef *)a1, (char *const **)&v19);
  if (!default_realms)
  {
    int v9 = v19;
    size_t v10 = *v19;
    if (*v19)
    {
      data = a2->data;
      uint64_t v12 = 1LL;
      while (strcmp(v10, (const char *)data))
      {
        size_t v10 = v9[v12++];
        if (!v10) {
          goto LABEL_6;
        }
      }

      krb5_error_code default_realms = -1765328227;
      krb5_free_host_realm(a1, v9);
      krb5_magic magic = a2->realm.magic;
      if (magic == 2)
      {
        krb5_error_code v16 = krb5_copy_principal(a1, a2, &v18);
        if (v16) {
          return v16;
        }
        size_t v15 = "root";
        krb5_BOOLean v17 = krb5_kuserok(a1, v18, "root");
        krb5_free_principal(a1, v18);
        if (!v17) {
          return default_realms;
        }
      }

      else
      {
        if (magic != 1) {
          return default_realms;
        }
        size_t v15 = *(const char **)a2->realm.data;
      }

      if (strlen(v15) >= v5)
      {
        return 34;
      }

      else
      {
        strlcpy(a4, v15, v5);
        return 0;
      }
    }

    else
    {
LABEL_6:
      krb5_error_code default_realms = -1765328227;
      krb5_free_host_realm(a1, v9);
    }
  }

  return default_realms;
}

void krb5_appdefault_BOOLean( krb5_context context, const char *appname, const krb5_data *realm, const char *option, int default_value, int *ret_value)
{
  uint64_t v9 = *(void *)&default_value;
  int v11 = appname;
  if (!appname) {
    int v11 = getprogname();
  }
  BOOL BOOL_default = krb5_config_get_BOOL_default( (uint64_t)context,  0LL,  v9,  (uint64_t)option,  *(uint64_t *)&default_value,  (uint64_t)ret_value,  v6,  v7,  (uint64_t)"libdefaults");
  if (realm)
  {
    BOOL v19 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, BOOL_default, v14, v15, v16, v17, v18, (uint64_t)"realms");
    BOOL v25 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, v19, v20, v21, v22, v23, v24, (uint64_t)"appdefaults");
    BOOL v31 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, v25, v26, v27, v28, v29, v30, (uint64_t)"appdefaults");
    if (v11)
    {
      BOOL v37 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, v31, v32, v33, v34, v35, v36, (uint64_t)"appdefaults");
      BOOL v43 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, v37, v38, v39, v40, v41, v42, (uint64_t)"appdefaults");
LABEL_8:
      LODWORD(v31) = v43;
    }
  }

  else
  {
    BOOL v31 = krb5_config_get_BOOL_default( (uint64_t)context,  0LL,  BOOL_default,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"appdefaults");
    if (v11)
    {
      BOOL v43 = krb5_config_get_BOOL_default((uint64_t)context, 0LL, v31, v44, v45, v46, v47, v48, (uint64_t)"appdefaults");
      goto LABEL_8;
    }
  }

  *ret_xpc_object_t value = v31;
}

void krb5_appdefault_string( krb5_context context, const char *appname, const krb5_data *realm, const char *option, const char *default_value, char **ret_value)
{
  int v11 = appname;
  if (!appname) {
    int v11 = getprogname();
  }
  uint64_t string_default = krb5_config_get_string_default( (uint64_t)context,  0LL,  (uint64_t)default_value,  (uint64_t)option,  (uint64_t)default_value,  (uint64_t)ret_value,  v6,  v7,  (uint64_t)"libdefaults");
  if (realm)
  {
    uint64_t v19 = krb5_config_get_string_default( (uint64_t)context,  0LL,  string_default,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"realms");
    uint64_t v25 = krb5_config_get_string_default((uint64_t)context, 0LL, v19, v20, v21, v22, v23, v24, (uint64_t)"appdefaults");
    BOOL v31 = (const char *)krb5_config_get_string_default( (uint64_t)context,  0LL,  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)"appdefaults");
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v37 = krb5_config_get_string_default( (uint64_t)context,  0LL,  (uint64_t)v31,  v32,  v33,  v34,  v35,  v36,  (uint64_t)"appdefaults");
    uint64_t v43 = krb5_config_get_string_default((uint64_t)context, 0LL, v37, v38, v39, v40, v41, v42, (uint64_t)"appdefaults");
  }

  else
  {
    BOOL v31 = (const char *)krb5_config_get_string_default( (uint64_t)context,  0LL,  string_default,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"appdefaults");
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v43 = krb5_config_get_string_default( (uint64_t)context,  0LL,  (uint64_t)v31,  v44,  v45,  v46,  v47,  v48,  (uint64_t)"appdefaults");
  }

  BOOL v31 = (const char *)v43;
LABEL_9:
  if (v31) {
    v49 = strdup(v31);
  }
  else {
    v49 = 0LL;
  }
  *ret_xpc_object_t value = v49;
}

void krb5_appdefault_time( _krb5_context *a1, const char *a2, const krb5_data *a3, const char *a4, uint64_t a5, void *a6)
{
  size_t v8 = v11;
  if (v11)
  {
    krb5_error_code v9 = krb5_string_to_deltat(v11, v12);
    uint64_t v10 = *(void *)v12;
    if (v9) {
      uint64_t v10 = a5;
    }
    *a6 = v10;
    free(v8);
  }

  else
  {
    *a6 = a5;
  }

uint64_t _krb5_principal2principalname()
{
  return sub_1882FD434();
}

uint64_t _krb5_principalname2krb5_principal(uint64_t a1, void *a2, uint64_t a3, const char *a4)
{
  uint64_t v6 = malloc(0x20uLL);
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_1882FD434();
  if (!(_DWORD)v8)
  {
    uint64_t v10 = strdup(a4);
    v7[3] = v10;
    if (v10)
    {
      uint64_t v9 = 0LL;
      *a2 = v7;
      return v9;
    }

    sub_1882FD424();
    free(v7);
    return 12LL;
  }

  uint64_t v9 = v8;
  free(v7);
  return v9;
}

krb5_error_code krb5_auth_con_init(krb5_context a1, krb5_auth_context *a2)
{
  size_t v4 = calloc(1uLL, 0x70uLL);
  if (v4)
  {
    size_t v5 = v4;
    void v4[5] = 0u;
    void v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    _OWORD *v4 = 0u;
    uint64_t v6 = calloc(1uLL, 0x58uLL);
    *((void *)v5 + 8) = v6;
    if (v6)
    {
      krb5_error_code v7 = 0;
      v6[10] = 0LL;
      *((_OWORD *)v6 + 3) = 0u;
      *((_OWORD *)v6 + 4) = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *(_OWORD *)uint64_t v6 = 0u;
      *(_DWORD *)size_t v5 = 1;
      *((void *)v5 + 1) = 0LL;
      *((void *)v5 + 2) = 0LL;
      *((_DWORD *)v5 + 6) = 0;
      *((void *)v5 + 12) = 0LL;
      *((void *)v5 + 13) = 0LL;
      *((void *)v5 + 11) = 0LL;
      *a2 = (krb5_auth_context)v5;
    }

    else
    {
      krb5_error_code v7 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      free(v5);
    }
  }

  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v7;
}

krb5_error_code krb5_auth_con_free(krb5_context a1, krb5_auth_context a2)
{
  if (a2)
  {
    krb5_free_authenticator(a1, (krb5_authenticator *)((char *)a2 + 64));
    if (*((void *)a2 + 1))
    {
      sub_1882FD4BC();
      free(*((void **)a2 + 1));
    }

    if (*((void *)a2 + 2))
    {
      sub_1882FD4BC();
      free(*((void **)a2 + 2));
    }

    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 4));
    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 6));
    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 5));
    if (*((void *)a2 + 12))
    {
      sub_1882FD5C8();
      free(*((void **)a2 + 12));
    }

    if (*((void *)a2 + 13)) {
      sub_1882F0D7C(a1, (uint64_t)a2);
    }
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
    free(a2);
  }

  return 0;
}

void krb5_free_authenticator(krb5_context a1, krb5_authenticator *a2)
{
  if (a2)
  {
    sub_1882FD8C8();
    uint64_t v3 = *(void *)&a2->magic;
    *(void *)(v3 + 80) = 0LL;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
    free(*(void **)&a2->magic);
    *(void *)&a2->krb5_magic magic = 0LL;
  }

krb5_error_code krb5_auth_con_setflags(krb5_context a1, krb5_auth_context a2, krb5_int32 a3)
{
  *(_DWORD *)a2 = a3;
  return 0;
}

krb5_error_code krb5_auth_con_getflags(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *(_DWORD *)a2;
  return 0;
}

uint64_t krb5_auth_con_addflags(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = *a2;
  }
  *a2 |= a3;
  return 0LL;
}

uint64_t krb5_auth_con_removeflags(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = *a2;
  }
  *a2 &= ~a3;
  return 0LL;
}

void sub_1882C046C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      krb5_free_address(a1, v6);
      free(*(void **)(a2 + 8));
      *(void *)(a2 + 8) = 0LL;
    }
  }

  if ((a3 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      krb5_free_address(a1, v7);
      free(*(void **)(a2 + 16));
      *(void *)(a2 + 16) = 0LL;
    }
  }

krb5_error_code krb5_auth_con_setaddrs( krb5_context a1, krb5_auth_context a2, krb5_address *a3, krb5_address *a4)
{
  if (a3)
  {
    uint64_t v8 = *((void *)a2 + 1);
    if (v8)
    {
      krb5_free_address((uint64_t)a1, v8);
    }

    else
    {
      uint64_t v9 = malloc(0x18uLL);
      *((void *)a2 + 1) = v9;
      if (!v9) {
        return 12;
      }
    }

    krb5_copy_address((uint64_t)a1, a3);
  }

  if (!a4) {
    return 0;
  }
  uint64_t v10 = *((void *)a2 + 2);
  if (v10)
  {
    krb5_free_address((uint64_t)a1, v10);
LABEL_10:
    krb5_copy_address((uint64_t)a1, a4);
    return 0;
  }

  int v11 = malloc(0x18uLL);
  *((void *)a2 + 2) = v11;
  if (v11) {
    goto LABEL_10;
  }
  return 12;
}

krb5_error_code krb5_auth_con_genaddrs(krb5_context a1, krb5_auth_context a2, int a3, int a4)
{
  char v4 = a4;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if ((a4 & 1) == 0 || *((void *)a2 + 1))
  {
    uint64_t v8 = 0LL;
    if ((a4 & 4) == 0)
    {
LABEL_4:
      uint64_t v9 = 0LL;
      goto LABEL_5;
    }

LABEL_17:
    socklen_t v15 = 128;
    if (getpeername(a3, __strerrbuf, &v15) < 0)
    {
      int v10 = *__error();
      strerror_r(v10, v17, 0x80uLL);
      krb5_set_error_message(a1, v10, "getpeername: %s", v17);
    }

    else
    {
      int v13 = krb5_sockaddr2address(a1, (uint64_t)__strerrbuf, (uint64_t)v17);
      if (!v13)
      {
        uint64_t v14 = (_WORD *)((char *)a2 + 26);
        if ((v4 & 0xC) != 0) {
          krb5_sockaddr2port(a1, (uint64_t)__strerrbuf, (uint64_t)v14);
        }
        else {
          _WORD *v14 = 0;
        }
        uint64_t v9 = v17;
LABEL_5:
        int v10 = krb5_auth_con_setaddrs(a1, a2, (krb5_address *)v8, (krb5_address *)v9);
        if (!v8) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }

      int v10 = v13;
    }

    uint64_t v9 = 0LL;
    if (!v8)
    {
LABEL_7:
      if (v9) {
        krb5_free_address((uint64_t)a1, (uint64_t)v9);
      }
      return v10;
    }

          cred = krb5_cc_retrieve_cred(a1, a3, v15 & 0x40000000, (krb5_creds *)principal, v17);
          if ((_DWORD)cred)
          {
            int v13 = cred;
            if ((_DWORD)cred != -1765328243)
            {
              free(v17);
              krb5_free_principal(a1, principal[0]);
              goto LABEL_36;
            }

            uint64_t v20 = v15 & 1;
          }

          else
          {
            if ((v15 & 4) != 0 || (krb5_timeofday(a1, v24), *(void *)&v17->times.endtime > *(uint64_t *)v24))
            {
              *a5 = v17;
              krb5_free_principal(a1, principal[0]);
              goto LABEL_26;
            }

            uint64_t v20 = v15 & 1;
            if ((v15 & 1) != 0) {
              krb5_cc_remove_cred(a1, a3, 0, v17);
            }
          }

          free(v17);
          if (v20)
          {
            krb5_free_principal(a1, principal[0]);
            sub_1882CFC6C(a1, principal[1]);
            int v13 = 2529639053LL;
LABEL_36:
            sub_1882F9E64(a1, (uint64_t)v34);
            sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_creds: ret = %d", v13);
            return v13;
          }

          *(void *)uint64_t v24 = 0LL;
          if (a2) {
            uint64_t v21 = *(__int128 **)a2;
          }
          else {
            uint64_t v21 = 0LL;
          }
          int v13 = sub_1882CF0C0( (uint64_t)a1,  (v15 >> 3) & 2 | ((((v15 & 2) >> 1) & 1) << 28) | (((v15 >> 5) & 1) << 26) | (((v15 >> 6) & 1) << 16) | (((v15 >> 7) & 1) << 15),  a3,  (krb5_error *)v34,  (__int128 *)principal,  v21,  *(_BYTE **)(a2 + 16),  a5,  (uint64_t **)v24);
          krb5_free_principal(a1, principal[0]);
          uint64_t v22 = *(void **)v24;
          if (*(void *)v24)
          {
            sub_1882CFCD0(a1, a3, *(krb5_creds ***)v24);
            free(v22);
          }

          if ((_DWORD)v13) {
            goto LABEL_36;
          }
          if (!((4 * (v15 & 2)) | v15 & 8)) {
            krb5_cc_store_cred(a1, a3, *a5);
          }
LABEL_26:
          int v13 = 0LL;
          goto LABEL_36;
        }
      }

      else
      {
        *a5 = 0LL;
        uint64_t v18 = (krb5_creds *)calloc(1uLL, 0x90uLL);
        if (v18)
        {
          uint64_t v17 = v18;
          socklen_t v15 = 0;
          goto LABEL_17;
        }
      }

      krb5_free_principal(a1, principal[0]);
      int v13 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  return v13;
}

  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  int v13 = *(void *)(a2 + 176);
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 32));
  if (v13 == a2 + 168)
  {
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 108);
    *(void *)(a2 + 120) = sub_1882DA72C;
    uint64_t v12 = sub_1882DA72C(a1, a2, a3, v14, v15, v16, v17, v18);
    if (!(_DWORD)v12) {
      *(_DWORD *)*a3 = (*(_DWORD *)(a2 + 104) >> 9) & 1;
    }
  }

  else
  {
    uint64_t v12 = 2529639068LL;
    sub_1882DFCE8((uint64_t)a1, 0, "No kpasswd entries found for realm %s");
  }

  return v12;
}

    uint64_t v18 = 22LL;
    uint64_t v21 = (_krb5_context *)a1;
    uint64_t v22 = 22;
LABEL_23:
    krb5_set_error_message(v21, v22, v19, v26);
    return v18;
  }

  memset(v32, 0, 24);
  uint64_t v20 = sub_1882FE9D8();
  if ((_DWORD)v20)
  {
    uint64_t v18 = v20;
    uint64_t v26 = v20;
    sockaddr v19 = "PKINIT: Failed decoding windows pkinit reply %d";
    goto LABEL_22;
  }

  krb5_clear_error_message((krb5_context)a1);
  if (LODWORD(v32[0]) != 2)
  {
    sub_1882FE9F8();
    sockaddr v19 = "PKINIT: win2k reply invalid content type";
    goto LABEL_17;
  }

  uint64_t v18 = hx509_cms_unwrap_ContentInfo((uint64_t)v32 + 8, v30, &v31, 0LL);
  sub_1882FE9F8();
  if ((_DWORD)v18)
  {
LABEL_21:
    sockaddr v19 = "PKINIT: failed to unwrap CI";
    goto LABEL_22;
  }

  uint64_t v18 = sub_1882E5910(a1, 1, (uint64_t *)&v31, (uint64_t)v30, a2, (_DWORD *)a3, a5, a6, a7, a9);
  der_free_octet_string();
  der_free_oid();
  return v18;
}

  hx509_cert_free(v19);
  if (v36[1]) {
    krb5_data_free(v36);
  }
  der_free_oid();
  sub_1882FE918();
  return v18;
}

  uint64_t v29 = calloc(1uLL, 0x28uLL);
  if (!v29)
  {
    pthread_mutex_unlock(&stru_18C4D8E20);
LABEL_23:
    uint64_t v33 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v33;
  }

  uint64_t v30 = v29;
  *uint64_t v29 = 1;
  v29[2] = a3;
  BOOL v31 = strdup(a4);
  v30[2] = v31;
  if (!v31)
  {
    pthread_mutex_unlock(&stru_18C4D8E20);
    free(v30);
    goto LABEL_23;
  }

  uint64_t v32 = qword_18C707450;
  v30[3] = a5;
  v30[4] = v32;
  qword_18C707450 = (uint64_t)v30;
LABEL_20:
  pthread_mutex_unlock(&stru_18C4D8E20);
  return 0LL;
}

            size_t v5 = 0;
            *a1++ = v8;
            goto LABEL_18;
          }

          size_t v5 = 1;
        }

    sub_188313954();
    heim_release(v22);
    uint64_t v30 = sub_188301450(a1, a8, v43);
    if ((_DWORD)v30) {
      return v30;
    }
    uint64_t v22 = v43;
    if (*a8 > v11)
    {
      heim_release(v43);
      uint64_t v16 = 569871LL;
      hx509_set_error_string(a1, 0, 569871, "Path too long while bulding certificate chain", v31, v32, v33, v34, v42);
      return v16;
    }
  }

  if ((a2 & 1) != 0 && *a8 && sub_188301810(a1, a4, *(void *)(a8[1] + 8 * *a8 - 8), v23, v24, v25, v26, v27))
  {
    heim_release(*(CFTypeRef *)(a8[1] + 8 * *a8 - 8));
    --*a8;
  }

  heim_release(v22);
  return 0LL;
}

uint64_t krb5_auth_con_setaddrs_from_fd(_krb5_context *a1, _krb5_auth_context *a2, int *a3)
{
  int v3 = *a3;
  if (*((void *)a2 + 1)) {
    int v4 = 0;
  }
  else {
    int v4 = 3;
  }
  if (*((void *)a2 + 2)) {
    int v5 = v4;
  }
  else {
    int v5 = v4 | 0xC;
  }
  return krb5_auth_con_genaddrs(a1, a2, v3, v5);
}

krb5_error_code krb5_auth_con_getaddrs( krb5_context a1, krb5_auth_context a2, krb5_address **a3, krb5_address **a4)
{
  if (*a3) {
    krb5_free_address((uint64_t)a1, (uint64_t)*a3);
  }
  uint64_t v8 = (krb5_address *)malloc(0x18uLL);
  *a3 = v8;
  if (v8)
  {
    krb5_copy_address((uint64_t)a1, *((_DWORD **)a2 + 1));
    if (*a4) {
      krb5_free_address((uint64_t)a1, (uint64_t)*a4);
    }
    uint64_t v9 = (krb5_address *)malloc(0x18uLL);
    *a4 = v9;
    if (v9)
    {
      krb5_copy_address((uint64_t)a1, *((_DWORD **)a2 + 2));
      return 0;
    }

    else
    {
      krb5_error_code v10 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      krb5_free_address((uint64_t)a1, (uint64_t)*a3);
      *a3 = 0LL;
    }
  }

  else
  {
    krb5_error_code v10 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v10;
}

krb5_error_code krb5_auth_con_getkey(krb5_context a1, krb5_auth_context a2, krb5_keyblock **a3)
{
  int v3 = (const krb5_keyblock *)*((void *)a2 + 4);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0LL;
  return 0;
}

uint64_t krb5_auth_con_getlocalsubkey(_krb5_context *a1, uint64_t a2, krb5_keyblock **a3)
{
  int v3 = *(const krb5_keyblock **)(a2 + 40);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0LL;
  return 0LL;
}

uint64_t krb5_auth_con_getremotesubkey(_krb5_context *a1, uint64_t a2, krb5_keyblock **a3)
{
  int v3 = *(const krb5_keyblock **)(a2 + 48);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0LL;
  return 0LL;
}

uint64_t krb5_auth_con_setkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 4;
  int v5 = a2[4];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3) {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  *uint64_t v6 = 0LL;
  return 0LL;
}

uint64_t krb5_auth_con_setlocalsubkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 5;
  int v5 = a2[5];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3) {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  *uint64_t v6 = 0LL;
  return 0LL;
}

uint64_t krb5_auth_con_generatelocalsubkey(_krb5_context *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = krb5_generate_subkey_extended(a1, a3, (char *)*(unsigned int *)(a2 + 88), &v8);
  if (!(_DWORD)v5)
  {
    uint64_t v6 = *(krb5_keyblock **)(a2 + 40);
    if (v6) {
      krb5_free_keyblock(a1, v6);
    }
    *(void *)(a2 + 40) = v8;
  }

  return v5;
}

uint64_t krb5_auth_con_setremotesubkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 6;
  uint64_t v5 = a2[6];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3) {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  *uint64_t v6 = 0LL;
  return 0LL;
}

uint64_t krb5_auth_con_setcksumtype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 92) = a3;
  return 0LL;
}

uint64_t krb5_auth_con_getcksumtype(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 92);
  return 0LL;
}

uint64_t krb5_auth_con_setkeytype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 88) = a3;
  return 0LL;
}

uint64_t krb5_auth_con_getkeytype(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 88);
  return 0LL;
}

krb5_error_code krb5_auth_con_getlocalseqnumber(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *((_DWORD *)a2 + 14);
  return 0;
}

uint64_t krb5_auth_con_setlocalseqnumber(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 56) = a3;
  return 0LL;
}

krb5_error_code krb5_auth_con_getremoteseqnumber(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *((_DWORD *)a2 + 15);
  return 0;
}

uint64_t krb5_auth_con_setremoteseqnumber(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 60) = a3;
  return 0LL;
}

krb5_error_code krb5_auth_con_getauthenticator(krb5_context a1, krb5_auth_context a2, krb5_authenticator **a3)
{
  uint64_t v5 = (krb5_authenticator *)malloc(0x58uLL);
  *a3 = v5;
  if (v5) {
    return sub_1882FD8D8();
  }
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return 12;
}

uint64_t krb5_auth_con_setuserkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 4;
  uint64_t v5 = a2[4];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  return krb5_copy_keyblock(a1, a3, v6);
}

krb5_error_code krb5_auth_con_getrcache(krb5_context a1, krb5_auth_context a2, krb5_rcache *a3)
{
  *a3 = (krb5_rcache)*((void *)a2 + 10);
  return 0;
}

krb5_error_code krb5_auth_con_setrcache(krb5_context a1, krb5_auth_context a2, krb5_rcache a3)
{
  *((void *)a2 + 10) = a3;
  return 0;
}

uint64_t krb5_auth_con_add_AuthorizationData(_krb5_context *a1, uint64_t a2)
{
  int v3 = *(unsigned int **)(a2 + 96);
  if (v3) {
    return sub_1882FD5EC(v3);
  }
  int v3 = (unsigned int *)calloc(1uLL, 0x10uLL);
  *(void *)(a2 + 96) = v3;
  if (v3) {
    return sub_1882FD5EC(v3);
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_build_ap_req( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = decode_Ticket();
  if (!(_DWORD)v9)
  {
    size_t v11 = sub_1882FDD50();
    *(void *)a7 = v11;
    uint64_t v12 = malloc(v11);
    *(void *)(a7 + 8) = v12;
    if (v12)
    {
      uint64_t v13 = sub_1882FDD30();
      if (!(_DWORD)v13)
      {
        if (*(void *)a7 != v15) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v10 = 0LL;
        goto LABEL_10;
      }

      uint64_t v10 = v13;
      free(*(void **)(a7 + 8));
      *(void *)(a7 + 8) = 0LL;
    }

    else
    {
      uint64_t v10 = 12LL;
    }

    krb5_data_zero((void *)a7);
LABEL_10:
    sub_1882FDD60();
    return v10;
  }

  uint64_t v10 = v9;
  krb5_data_zero((void *)a7);
  return v10;
}

uint64_t _krb5_build_authenticator( _krb5_context *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  eblock = 0LL;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  uint64_t v45 = 0LL;
  v46[0] = 0LL;
  v46[1] = 0LL;
  LODWORD(v40) = 5;
  uint64_t v14 = sub_1882FD3C0();
  if ((_DWORD)v14) {
    goto LABEL_4;
  }
  uint64_t v14 = sub_1882FD434();
  if ((_DWORD)v14) {
    goto LABEL_4;
  }
  krb5_us_timeofday(a1, (krb5_timestamp *)&v43 + 2, (krb5_int32 *)&v43);
  uint64_t v14 = krb5_auth_con_getlocalsubkey(a1, a2, (krb5_keyblock **)&v44);
  if ((_DWORD)v14) {
    goto LABEL_4;
  }
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    if (!*(_DWORD *)(a2 + 56)) {
      krb5_generate_seq_number(a1, a4 + 16, (int *)(a2 + 56));
    }
    uint64_t v18 = calloc(1uLL, 4uLL);
    *((void *)&v44 + 1) = v18;
    if (!v18) {
      goto LABEL_36;
    }
    *uint64_t v18 = *(_DWORD *)(a2 + 56);
  }

  else
  {
    *((void *)&v44 + 1) = 0LL;
  }

  if (*(void *)(a2 + 96))
  {
    uint64_t v45 = (unsigned int *)calloc(1uLL, 0x10uLL);
    if (!v45) {
      goto LABEL_36;
    }
    uint64_t v14 = sub_1882FD5D8();
    if ((_DWORD)v14) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v45 = 0LL;
  }

  if (*(void *)(a2 + 104))
  {
    uint64_t v14 = sub_1882F0EF0(a1, a2, *(const krb5_principal_data **)a4, (unsigned int *)v46);
    if ((_DWORD)v14) {
      goto LABEL_4;
    }
  }

  if (!a5) {
    goto LABEL_25;
  }
  *((void *)&v42 + 1) = calloc(1uLL, 0x18uLL);
  if (!*((void *)&v42 + 1))
  {
LABEL_36:
    uint64_t v16 = 0LL;
    goto LABEL_37;
  }

  uint64_t v14 = sub_1882FD864();
  if (!(_DWORD)v14)
  {
    if (**((_DWORD **)&v42 + 1) != 32771
      || (uint64_t v14 = sub_1882C1080(a1, (unsigned int *)v46, v19, v20, v21, v22, v23, v24), !(_DWORD)v14))
    {
LABEL_25:
      if (LODWORD(v46[0]))
      {
        uint64_t v25 = (krb5_encrypt_block *)sub_1882FE150();
        uint64_t v16 = malloc((size_t)v25);
        if (!v16) {
          goto LABEL_37;
        }
        uint64_t v26 = sub_1882FE130();
        if ((_DWORD)v26)
        {
LABEL_35:
          uint64_t v15 = v26;
          free(v16);
          goto LABEL_5;
        }

        if (v25 != eblock) {
          heim_abort( "internal error in ASN.1 encoder:buf_size == len",  v27,  v28,  v29,  v30,  v31,  v32,  v33,  (char)inptr[0]);
        }
        uint64_t v34 = v45;
        if (!v45)
        {
          uint64_t v34 = (unsigned int *)calloc(1uLL, 0x10uLL);
          uint64_t v45 = v34;
          if (!v34)
          {
            uint64_t v37 = krb5_enomem(a1);
            goto LABEL_42;
          }

          uint64_t v25 = eblock;
        }

        LODWORD(inptr[0]) = 1;
        inptr[1] = v25;
        inptr[2] = v16;
        uint64_t v15 = sub_1882FD5EC(v34);
        if ((_DWORD)v15) {
          goto LABEL_6;
        }
      }

      uint64_t v35 = *(void *)(a2 + 64);
      *(void *)(v35 + 56) = *((void *)&v43 + 1);
      *(_DWORD *)(v35 + 48) = v43;
      uint64_t v36 = (krb5_encrypt_block *)sub_1882FD8B8();
      uint64_t v16 = malloc((size_t)v36);
      if (v16)
      {
        uint64_t v26 = sub_1882FD898();
        if ((_DWORD)v26) {
          goto LABEL_35;
        }
        if (v36 != eblock) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v37 = krb5_crypto_init(a1, (const krb5_keyblock *)(a4 + 16), a3, (krb5_keyblock ***)inptr);
        if (!(_DWORD)v37)
        {
          uint64_t v15 = krb5_encrypt(a1, inptr[0], a7, (size_t)v16, eblock, a6);
          krb5_crypto_destroy(a1, (uint64_t)inptr[0]);
          goto LABEL_6;
        }

LABEL_42:
        uint64_t v15 = v37;
        goto LABEL_6;
      }

  uint64_t v32 = v45;
LABEL_58:
  sub_1882FAFB0(v32);
  return 0xFFFFFFFFLL;
}

      ++v14;
    }

    while (v14 < a2[7]);
  }

  if (!a2[5])
  {
LABEL_79:
    if ((*(_BYTE *)(a1 + 12) & 1) == 0)
    {
      v93 = 569956LL;
      v94 = "No revoke status found for certificates";
      v95 = a1;
      v96 = 1;
      goto LABEL_81;
    }

    return 0LL;
  }

  __int128 v41 = 0LL;
  while (1)
  {
    __int128 v42 = a2[4];
    __int128 v43 = v42 + 192 * v41;
    __int128 v44 = v43 + 64;
    uint64_t v45 = sub_18830E4C8(v111 + 72, v43 + 64, &v118);
    if (v45 | v118) {
      goto LABEL_65;
    }
    uint64_t v46 = v43 + 16;
    if (!stat(*(const char **)v43, &v119))
    {
      uint64_t v47 = v42 + 192 * v41;
      v49 = *(void *)(v47 + 8);
      uint64_t v48 = (__darwin_time_t *)(v47 + 8);
      if (v49 != v119.st_mtimespec.tv_sec && !sub_188311588(*(const char **)v43, v48, (uint64_t)&v115))
      {
        sub_188313DD4();
        v50 = *(_OWORD *)&v115.st_dev;
        st_atimespec = v115.st_atimespec;
        *(_OWORD *)(v43 + 32) = *(_OWORD *)&v115.st_uid;
        *(timespec *)(v43 + 48) = st_atimespec;
        *(_OWORD *)uint64_t v46 = v50;
        st_mtimespec = v115.st_mtimespec;
        st_ctimespec = v115.st_ctimespec;
        v54 = *(_OWORD *)&v115.st_size;
        *(timespec *)(v43 + 96) = v115.st_birthtimespec;
        *(_OWORD *)(v43 + 112) = v54;
        *(timespec *)(v43 + 64) = st_mtimespec;
        *(timespec *)(v43 + 80) = st_ctimespec;
        v55 = *(_OWORD *)&v115.st_blksize;
        v56 = *(_OWORD *)v115.st_qspare;
        v57 = v116;
        *(void *)(v43 + 176) = v117;
        *(_OWORD *)(v43 + 144) = v56;
        *(_OWORD *)(v43 + 160) = v57;
        *(_OWORD *)(v43 + 128) = v55;
        *(void *)(v42 + 192 * v41 + 184) = 0LL;
      }
    }

    v58 = v42 + 192 * v41;
    v60 = *(_DWORD *)(v58 + 188);
    v59 = (_DWORD *)(v58 + 188);
    if (v60) {
      goto LABEL_65;
    }
    v61 = v42 + 192 * v41;
    v63 = *(_DWORD *)(v61 + 184);
    v62 = (_DWORD *)(v61 + 184);
    if (v63) {
      goto LABEL_85;
    }
    if (sub_188301B10(v46 + 88) <= a4) {
      break;
    }
    v68 = a1;
    v69 = 0;
    v70 = 569952;
    v71 = "CRL used before time";
LABEL_63:
    hx509_set_error_string(v68, v69, v70, v71, v64, v65, v66, v67, v108);
LABEL_64:
    *v59 = 1;
LABEL_65:
  }

  v72 = *(void *)(v46 + 104);
  if (!v72)
  {
    v68 = a1;
    v69 = 0;
    v70 = 569954;
    v71 = "CRL missing nextUpdate";
    goto LABEL_63;
  }

  if (sub_188301B10(v72) < a4)
  {
    v68 = a1;
    v69 = 0;
    v70 = 569953;
    v71 = "CRL used after time";
    goto LABEL_63;
  }

  sub_1883031CC((uint64_t)&v115);
  if (!sub_188301104(a1, v113, 64, 0LL))
  {
    v78 = hx509_cert_ref(v113);
    v121[0] = v78;
    goto LABEL_69;
  }

  v115.st_dev = 1032;
  v115.st_mtimespec.tv_nsec = v44;
  v77 = hx509_certs_find(a1, a3, &v115.st_dev, v121, v73, v74, v75, v76);
  if (v77)
  {
    v70 = v77;
    v68 = a1;
    v69 = 1;
    v71 = "Failed to find certificate for CRL";
    goto LABEL_63;
  }

  v78 = v121[0];
LABEL_69:
  v79 = sub_188302C20(a1, v78, v42 + 192 * v41 + 144, v46, (void *)(v42 + 192 * v41 + 168), v65, v66, v67);
  if (v79)
  {
    v84 = v79;
    v85 = a1;
    v86 = "CRL signature invalid";
LABEL_71:
    hx509_set_error_string(v85, 1, v84, v86, v80, v81, v82, v83, v108);
    hx509_cert_free(v121[0]);
    goto LABEL_64;
  }

  if (sub_188301104(a1, v121[0], 32, 1LL))
  {
    while (1)
    {
      sub_1883031CC((uint64_t)&v115);
      v115.st_dev = 1032;
      v115.st_mtimespec.tv_nsec = sub_188300994(v121[0]) + 72;
      v91 = hx509_certs_find(a1, a3, &v115.st_dev, &v120, v87, v88, v89, v90);
      if (v91)
      {
        v84 = v91;
        v85 = a1;
        v86 = "Failed to find parent of CRL signer";
        goto LABEL_71;
      }

      v92 = hx509_revoke_verify(a1, a2, a3, a4, v121[0], v120);
      hx509_cert_free(v121[0]);
      v121[0] = v120;
      v85 = a1;
      if (v92) {
        break;
      }
    }

    v84 = v92;
    v86 = "Failed to verify revoke status of CRL signer";
    goto LABEL_71;
  }

LABEL_37:
      uint64_t v15 = 12LL;
      goto LABEL_6;
    }
  }

        uint64_t v14 = 0LL;
        uint64_t v9 = v38;
        if (!v12) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }

      uint64_t v12 = __src;
LABEL_36:
      if (!v15) {
        goto LABEL_37;
      }
    }
  }

  uint64_t v14 = 12LL;
  if (v11)
  {
LABEL_38:
    uint64_t v36 = v12;
    bzero(v12, v6);
    free(v36);
  }

LABEL_4:
  uint64_t v15 = v14;
LABEL_5:
  uint64_t v16 = 0LL;
LABEL_6:
  sub_1882FD5C8();
  sub_1882FD8C8();
  free(v16);
  return v15;
}

  uint64_t v9 = v8;
  sub_1882E63F4((void ***)v7);
  return v9;
}

  sub_1882FE250();
  sub_1882FE2B4();
  krb5_data_free(&v54);
  krb5_data_free(&v52);
  return checksum;
}

uint64_t sub_1882C1080( _krb5_context *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited = _krb5_init_etype(a1, 11LL, &v22, &v23, 0LL, a6, a7, a8);
  if (!(_DWORD)inited)
  {
    size_t v10 = sub_1882FE110();
    size_t v11 = malloc(v10);
    if (!v11)
    {
      uint64_t inited = 12LL;
      goto LABEL_6;
    }

    uint64_t v12 = v11;
    uint64_t v13 = sub_1882FE0F0();
    if ((_DWORD)v13)
    {
      uint64_t inited = v13;
      free(v12);
LABEL_6:
      sub_1882FE120();
      return inited;
    }

    sub_1882FE120();
    if (v10) {
      heim_abort("internal error in ASN.1 encoder:buf_size == len", v14, v15, v16, v17, v18, v19, v20, 0);
    }
    int v24 = 129;
    uint64_t v25 = 0LL;
    uint64_t v26 = v12;
    uint64_t inited = sub_1882FD5EC(a2);
    free(v12);
  }

  return inited;
}

uint64_t krb5_cc_register(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 176);
  if ((int)v5 < 1)
  {
    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(a1 + 168);
    while (1)
    {
      uint64_t v9 = *(const char **)(*(void *)(v8 + 8 * v7) + 8LL);
      if (!v9) {
        break;
      }
      if (!strcmp(v9, *(const char **)(a2 + 8)))
      {
        if (a3) {
          break;
        }
        uint64_t v12 = 2529639103LL;
        krb5_set_error_message((krb5_context)a1, -1765328193, "cache type %s already exists");
        return v12;
      }

      if (v5 == ++v7)
      {
        LODWORD(v7) = v5;
        goto LABEL_10;
      }
    }
  }

  if ((_DWORD)v7 == (_DWORD)v5)
  {
LABEL_10:
    size_t v10 = realloc(*(void **)(a1 + 168), 8LL * ((int)v5 + 1));
    if (!v10)
    {
      uint64_t v12 = 2529639110LL;
      krb5_set_error_message((krb5_context)a1, -1765328186, "malloc: out of memory");
      return v12;
    }

    *(void *)(a1 + 168) = v10;
    uint64_t v11 = *(int *)(a1 + 176);
    v10[v11] = 0LL;
    *(_DWORD *)(a1 + 176) = v11 + 1;
  }

  else
  {
    size_t v10 = *(void **)(a1 + 168);
  }

  uint64_t v12 = 0LL;
  v10[v7] = a2;
  return v12;
}

uint64_t sub_1882C128C(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = malloc(0x18uLL);
  if (v6)
  {
    uint64_t v7 = 0LL;
    *uint64_t v6 = a2;
    *a3 = v6;
  }

  else
  {
    uint64_t v7 = 2529639110LL;
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
  }

  return v7;
}

krb5_error_code krb5_cc_resolve(krb5_context a1, const char *a2, krb5_ccache *a3)
{
  *a3 = 0LL;
  uint64_t v6 = *((unsigned int *)a1 + 44);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *((void *)a1 + 21);
    do
    {
      uint64_t v8 = *(void **)v7;
      uint64_t v9 = *(const char **)(*(void *)v7 + 8LL);
      if (!v9) {
        break;
      }
      size_t v10 = strlen(*(const char **)(*(void *)v7 + 8LL));
      if (!strncmp(v9, a2, v10) && a2[v10] == 58)
      {
        uint64_t v14 = (char *)&a2[v10 + 1];
        uint64_t v13 = a1;
        uint64_t v12 = v8;
        return sub_1882C140C(v13, (uint64_t)v12, v14, a3);
      }

      v7 += 8LL;
      --v6;
    }

    while (v6);
  }

  if (strchr(a2, 58))
  {
    krb5_set_error_message(a1, -1765328244, "unknown ccache type %s", a2);
    return -1765328244;
  }

  else
  {
    uint64_t v12 = &krb5_fcc_ops;
    uint64_t v13 = a1;
    uint64_t v14 = (char *)a2;
    return sub_1882C140C(v13, (uint64_t)v12, v14, a3);
  }

uint64_t sub_1882C140C(_krb5_context *a1, uint64_t a2, char *__big, void *a4)
{
  uint64_t v11 = 0LL;
  uint64_t v7 = _krb5_expand_default_cc_name_0(a1, __big, &v11);
  if (!(_DWORD)v7)
  {
    uint64_t v8 = v11;
    uint64_t v9 = sub_1882C128C(a1, a2, a4);
    if ((_DWORD)v9)
    {
      uint64_t v7 = v9;
    }

    else
    {
      uint64_t v7 = (*(uint64_t (**)(_krb5_context *, void *, void *))(*(void *)*a4 + 24LL))(a1, a4, v8);
      if ((_DWORD)v7)
      {
        free((void *)*a4);
        *a4 = 0LL;
      }
    }

    if (v11) {
      free(v11);
    }
  }

  return v7;
}

krb5_error_code krb5_cc_new_unique(krb5_context context, const char *type, const char *hint, krb5_ccache *id)
{
  prefix_ops = krb5_cc_get_prefix_ops((uint64_t)context, (char *)type);
  if (prefix_ops)
  {
    krb5_error_code v8 = sub_1882C128C(context, (uint64_t)prefix_ops, id);
    if (!v8)
    {
      krb5_error_code v8 = (*(uint64_t (**)(krb5_context, krb5_ccache *))(*(void *)*id + 32LL))(context, id);
      if (v8)
      {
        free(*id);
        *id = 0LL;
      }
    }
  }

  else
  {
    krb5_error_code v8 = -1765328244;
    krb5_set_error_message(context, -1765328244, "Credential cache type %s is unknown", type);
  }

  return v8;
}

void *krb5_cc_get_prefix_ops(uint64_t a1, char *__s1)
{
  if (!__s1) {
    return &krb5_xcc_ops;
  }
  if (*__s1 == 47) {
    return &krb5_fcc_ops;
  }
  int v4 = strdup(__s1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = strchr(v4, 58);
    if (v6) {
      *uint64_t v6 = 0;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 176);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 168);
      do
      {
        uint64_t v9 = *(const char **)(*(void *)v8 + 8LL);
        if (!v9) {
          break;
        }
        if (!strcmp(v9, v5))
        {
          free(v5);
          return *(void **)v8;
        }

        v8 += 8LL;
        --v7;
      }

      while (v7);
    }

    free(v5);
  }

  else
  {
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  }

  return 0LL;
}

const char *__cdecl krb5_cc_get_name(krb5_context context, krb5_ccache cache)
{
  return (const char *)(*(uint64_t (**)(krb5_context))(*(void *)cache + 16LL))(context);
}

const char *__cdecl krb5_cc_get_type(krb5_context context, krb5_ccache cache)
{
  return *(const char **)(*(void *)cache + 8LL);
}

uint64_t krb5_cc_get_full_name(_krb5_context *a1, uint64_t a2, char **a3)
{
  *a3 = 0LL;
  int v4 = *(const char **)(*(void *)a2 + 8LL);
  if (v4)
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(_krb5_context *))(*(void *)a2 + 16LL))(a1);
    if (v6)
    {
      if (asprintf(a3, "%s:%s", v4, v6) == -1)
      {
        uint64_t v7 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        *a3 = 0LL;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      uint64_t v7 = 2529639051LL;
      krb5_set_error_message(a1, -1765328245, "cache of type %s have no name");
    }
  }

  else
  {
    uint64_t v7 = 2529639052LL;
    krb5_set_error_message(a1, -1765328244, "cache have no name of type");
  }

  return v7;
}

uint64_t krb5_cc_get_ops(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t krb5_cc_switch(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(void))(*(void *)a2 + 176LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

BOOL krb5_cc_support_switch(uint64_t a1, char *a2)
{
  prefix_ops = krb5_cc_get_prefix_ops(a1, a2);
  return prefix_ops && prefix_ops[22];
}

krb5_error_code krb5_cc_set_default_name(krb5_context a1, const char *a2)
{
  uint64_t v34 = 0LL;
  uint64_t v33 = 0LL;
  if (a2)
  {
    int v3 = strdup(a2);
    uint64_t v34 = v3;
    *((_DWORD *)a1 + 80) = 1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_33:
    krb5_error_code v4 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v4;
  }

  if (issuid()) {
    goto LABEL_8;
  }
  uint64_t v20 = getenv("KRB5CCPRINCIPAL");
  if (v20)
  {
    uint64_t v21 = v20;
    if (*v20 == 64)
    {
      unsigned int v22 = (krb5_principal_data *)calloc(1uLL, 0x20uLL);
      krb5_principal v32 = v22;
      if (!v22) {
        return krb5_enomem(a1);
      }
      krb5_principal v23 = v22;
      int v24 = strdup(v21 + 1);
      v23->data = (krb5_data *)v24;
      if (!v24)
      {
        free(v23);
        return krb5_enomem(a1);
      }
    }

    else
    {
      krb5_error_code v4 = krb5_parse_name(a1, v20, &v32);
      if (v4) {
        return v4;
      }
      krb5_principal v23 = v32;
    }

    if (!krb5_cc_cache_match(a1, v23, &id))
    {
      krb5_ccache v27 = id;
      krb5_cc_get_full_name(a1, (uint64_t)id, &v34);
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)v27 + 56LL))(a1, v27);
      free(v27);
    }

    uint64_t v28 = v34;
    if (v34)
    {
LABEL_26:
      if (*((void *)a1 + 39))
      {
        free(*((void **)a1 + 39));
        uint64_t v28 = v34;
      }

      *((void *)a1 + 39) = strdup(v28);
      goto LABEL_32;
    }
  }

  uint64_t v29 = getenv("KRB5CCNAME");
  if (v29)
  {
    uint64_t v28 = strdup(v29);
    uint64_t v34 = v28;
    if (!v28) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }

LABEL_8:
  string = (char *)krb5_config_get_string((uint64_t)a1, 0LL, v6, v7, v8, v9, v10, v11, (uint64_t)"libdefaults");
  if (string)
  {
    krb5_error_code v19 = _krb5_expand_default_cc_name_0(a1, string, (void **)&v34);
  }

  else
  {
    uint64_t v25 = (char *)krb5_config_get_string((uint64_t)a1, 0LL, v13, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
    if (v25)
    {
      prefix_ops = (uint64_t (**)(krb5_context, void **))krb5_cc_get_prefix_ops((uint64_t)a1, v25);
      if (!prefix_ops)
      {
        krb5_error_code v4 = -1765328244;
        krb5_set_error_message(a1, -1765328244, "Credential cache type %s is unknown");
        return v4;
      }
    }

    else
    {
      prefix_ops = (uint64_t (**)(krb5_context, void **))&krb5_xcc_ops;
    }

    krb5_error_code v19 = prefix_ops[21](a1, (void **)&v34);
  }

  krb5_error_code v4 = v19;
  if (v19) {
    return v4;
  }
LABEL_32:
  *((_DWORD *)a1 + 80) = 0;
  int v3 = v34;
  if (!v34) {
    goto LABEL_33;
  }
LABEL_3:
  krb5_error_code v4 = _krb5_expand_default_cc_name_0(a1, v3, &v33);
  free(v34);
  if (!v4)
  {
    uint64_t v5 = (void *)*((void *)a1 + 38);
    if (v5) {
      free(v5);
    }
    krb5_error_code v4 = 0;
    *((void *)a1 + 38) = v33;
  }

  return v4;
}

    (*(void (**)(_krb5_context *, uint64_t, _BYTE *))(*(void *)a2 + 104LL))(a1, a2, v13);
  }

  return v10;
}

    freeaddrinfo(v12);
  }

  return sub_1882CC550(a1, __s1, a3);
}

  if (!a4) {
    goto LABEL_37;
  }
  krb5_data_zero(&v64);
  uint64_t v15 = krb5_storage_emem();
  if (!v15)
  {
    uint64_t v18 = krb5_enomem(a1);
    if ((_DWORD)v18) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }

  uint64_t v16 = (uint64_t)v15;
  krb5_storage_set_flags((uint64_t)v15, 32);
  uint64_t v17 = krb5_store_uint32(v16, 10000000 * a3 + 116444736000000000LL);
  if ((_DWORD)v17
    || (uint64_t v17 = krb5_store_uint32(v16, (unint64_t)(10000000 * a3 + 116444736000000000LL) >> 32), (_DWORD)v17))
  {
LABEL_12:
    uint64_t v18 = v17;
    krb5_clear_error_message(a1);
    goto LABEL_13;
  }

  uint64_t v18 = krb5_unparse_name_flags(a1, a4, 2, __s);
  if (!(_DWORD)v18)
  {
    uint64_t v35 = strlen(__s[0]);
    uint64_t v36 = 2 * v35;
    uint64_t v17 = krb5_store_uint16(v16, 2 * (unsigned __int16)v35);
    if (!(_DWORD)v17)
    {
      uint64_t v37 = (char *)malloc(v36);
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = __s[0];
        if (v35)
        {
          __int128 v40 = v38 + 1;
          __int128 v41 = __s[0];
          do
          {
            __int128 v42 = *v41++;
            *(v40 - 1) = v42;
            *__int128 v40 = 0;
            v40 += 2;
            --v35;
          }

          while (v35);
        }

        free(v39);
        __int128 v43 = krb5_storage_write(v16);
        free(v38);
        if (v43 < 0 || v43 != v36)
        {
          uint64_t v18 = krb5_enomem(a1);
        }

        else
        {
          uint64_t v18 = krb5_storage_to_data(v16, &v64);
          if (!(_DWORD)v18)
          {
            krb5_storage_free(v16);
            if (!a5) {
              goto LABEL_39;
            }
LABEL_38:
            uint64_t v18 = sub_1882E3FB8(a1, a5, (_DWORD *)&v65 + 1, &v67);
            if (!(_DWORD)v18) {
              goto LABEL_39;
            }
LABEL_24:
            krb5_data_free(&v64);
            return v18;
          }
        }
      }

      else
      {
        uint64_t v18 = krb5_enomem(a1);
        free(__s[0]);
      }

      goto LABEL_13;
    }

    goto LABEL_12;
  }

krb5_error_code krb5_cc_cache_match(krb5_context context, krb5_principal client, krb5_ccache *id)
{
  krb5_ccache ccache = 0LL;
  *krb5_ccache id = 0LL;
  krb5_error_code v6 = krb5_cccol_cursor_new(context, &cursor);
  if (!v6)
  {
    uint64_t v7 = cursor;
    krb5_error_code v8 = krb5_cccol_cursor_next(context, cursor, &ccache);
    krb5_ccache v9 = ccache;
    krb5_ccache v10 = 0LL;
    if (v8) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = ccache == 0LL;
    }
    if (!v11)
    {
      while (1)
      {
        if ((*(unsigned int (**)(krb5_context))(*(void *)v9 + 80LL))(context)
          || (!client->realm.magic
            ? (krb5_principal_data *)(uint64_t v14 = (krb5_principal_data *)v18,
                                      krb5_BOOLean v13 = strcmp((const char *)client->data, (const char *)v18->data) == 0)
            : (v13 = krb5_principal_compare(context, v18, client), uint64_t v14 = (krb5_principal_data *)v18),
              krb5_free_principal(context, v14),
              !v13))
        {
          krb5_ccache v12 = ccache;
          if (ccache)
          {
            (*(void (**)(krb5_context, krb5_ccache))(*(void *)ccache + 56LL))(context, ccache);
            free(v12);
          }
        }

        else
        {
          krb5_ccache v10 = ccache;
        }

        krb5_ccache ccache = 0LL;
        if (!krb5_cccol_cursor_next(context, v7, &ccache))
        {
          krb5_ccache v9 = ccache;
          if (ccache) {
            continue;
          }
        }

        break;
      }
    }

    krb5_cccol_cursor_free(context, &cursor);
    if (!ccache && v10) {
      goto LABEL_24;
    }
    if (v10)
    {
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)v10 + 56LL))(context, v10);
      free(v10);
      krb5_ccache v10 = ccache;
LABEL_24:
      krb5_error_code v6 = 0;
      *krb5_ccache id = v10;
      return v6;
    }

    krb5_ccache v10 = ccache;
    if (ccache) {
      goto LABEL_24;
    }
    krb5_error_code v6 = -1765328243;
    krb5_unparse_name(context, client, (char **)&v18);
    uint64_t v16 = (const char *)v18;
    if (!v18) {
      uint64_t v16 = "<out of memory>";
    }
    krb5_set_error_message(context, -1765328243, "Principal %s not found in any credential cache", v16);
    if (v18) {
      free((void *)v18);
    }
  }

  return v6;
}

krb5_error_code krb5_cc_close(krb5_context context, krb5_ccache cache)
{
  krb5_error_code v3 = (*(uint64_t (**)(krb5_context))(*(void *)cache + 56LL))(context);
  free(cache);
  return v3;
}

const char *__cdecl krb5_cc_default_name(krb5_context a1)
{
  int v2 = (const char *)*((void *)a1 + 38);
  if (!v2) {
    goto LABEL_14;
  }
  if (*((_DWORD *)a1 + 80)) {
    return (const char *)*((void *)a1 + 38);
  }
  if (!strncmp(*((const char **)a1 + 38), "KCM:", 4uLL)
    || !strncmp(v2, "API:", 4uLL)
    || !strncmp(v2, "XCACHE:", 4uLL)
    || !strncmp(v2, "KCC:", 4uLL))
  {
LABEL_14:
    krb5_cc_set_default_name(a1, 0LL);
    return (const char *)*((void *)a1 + 38);
  }

  if (issuid()) {
    return (const char *)*((void *)a1 + 38);
  }
  krb5_error_code v3 = getenv("KRB5CCNAME");
  krb5_error_code v4 = (const char *)*((void *)a1 + 39);
  if (!v3)
  {
    if (!v4) {
      return (const char *)*((void *)a1 + 38);
    }
    free(*((void **)a1 + 39));
    *((void *)a1 + 39) = 0LL;
    goto LABEL_14;
  }

  if (!v4 || strcmp(v3, v4)) {
    goto LABEL_14;
  }
  return (const char *)*((void *)a1 + 38);
}

krb5_error_code krb5_cc_default(krb5_context a1, krb5_ccache *a2)
{
  krb5_error_code v4 = krb5_cc_default_name(a1);
  if (v4) {
    return krb5_cc_resolve(a1, v4, a2);
  }
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return 12;
}

krb5_error_code krb5_cc_initialize(krb5_context context, krb5_ccache cache, krb5_principal principal)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 40LL))(context);
}

krb5_error_code krb5_cc_destroy(krb5_context context, krb5_ccache cache)
{
  krb5_error_code v4 = (*(uint64_t (**)(void))(*(void *)cache + 48LL))();
  (*(void (**)(krb5_context, krb5_ccache))(*(void *)cache + 56LL))(context, cache);
  free(cache);
  return v4;
}

krb5_error_code krb5_cc_store_cred(krb5_context context, krb5_ccache cache, krb5_creds *creds)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 64LL))(context);
}

krb5_error_code krb5_cc_retrieve_cred( krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *mcreds, krb5_creds *creds)
{
  krb5_ccache v10 = *(uint64_t (**)(krb5_context, krb5_ccache, void, krb5_creds *, krb5_creds *))(*(void *)cache + 72LL);
  if (v10)
  {
    krb5_error_code result = v10(context, cache, *(void *)&flags, mcreds, creds);
    goto LABEL_3;
  }

  krb5_error_code result = sub_1882C1F14(context, (uint64_t)cache, flags, (uint64_t)mcreds, creds);
  if (result != -1765328242) {
    return result;
  }
  if ((flags & 0x200000) != 0)
  {
    krb5_error_code result = sub_1882C1F14(context, (uint64_t)cache, flags | 0x80000000, (uint64_t)mcreds, creds);
LABEL_3:
    if (result != -1765328242) {
      return result;
    }
  }

  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  krb5_cc_get_full_name(context, (uint64_t)cache, (char **)&v15);
  krb5_unparse_name(context, mcreds->client, &v14);
  krb5_ccache v12 = v14;
  if (!v14) {
    krb5_ccache v12 = "server";
  }
  krb5_BOOLean v13 = (const char *)v15;
  if (!v15) {
    krb5_BOOLean v13 = "unknown";
  }
  krb5_set_error_message(context, -1765328243, "Did not find credential for %s in cache %s", v12, v13);
  free(v15);
  free(v14);
  return -1765328243;
}

uint64_t sub_1882C1F14(_krb5_context *a1, uint64_t a2, int a3, uint64_t a4, krb5_creds *a5)
{
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a2 + 88LL))();
  if (!(_DWORD)v10)
  {
    uint64_t v10 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v13,  a5);
    if (!(_DWORD)v10)
    {
      do
      {
        if (krb5_compare_creds(a1, a3, a4, (uint64_t)a5))
        {
          uint64_t v10 = 0LL;
          goto LABEL_8;
        }

        krb5_free_cred_contents(a1, a5);
        uint64_t v11 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v13,  a5);
      }

      while (!(_DWORD)v11);
      uint64_t v10 = v11;
    }

krb5_error_code krb5_cc_get_principal(krb5_context context, krb5_ccache cache, krb5_principal *principal)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 80LL))(context);
}

krb5_error_code krb5_cc_start_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 88LL))(context);
}

krb5_error_code krb5_cc_next_cred( krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor, krb5_creds *creds)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 96LL))(context);
}

krb5_error_code krb5_cc_end_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 104LL))(context);
}

krb5_error_code krb5_cc_remove_cred( krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *creds)
{
  krb5_error_code v4 = *(uint64_t (**)(krb5_context))(*(void *)cache + 112LL);
  if (v4) {
    return v4(context);
  }
  krb5_set_error_message( context,  13,  "ccache %s does not support remove_cred",  *(const char **)(*(void *)cache + 8LL));
  return 13;
}

krb5_error_code krb5_cc_set_flags(krb5_context context, krb5_ccache cache, krb5_flags flags)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 120LL))(context);
}

uint64_t krb5_cc_copy_match_f( _krb5_context *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(_krb5_context *, uint64_t, krb5_creds *), uint64_t a5, _DWORD *a6)
{
  if (a6) {
    *a6 = 0;
  }
  uint64_t v12 = (*(uint64_t (**)(_krb5_context *, uint64_t, krb5_principal *))(*(void *)a2 + 80LL))(a1, a2, &v16);
  if (!(_DWORD)v12)
  {
    uint64_t v13 = (*(uint64_t (**)(_krb5_context *, uint64_t, krb5_principal))(*(void *)a3 + 40LL))(a1, a3, v16);
    if ((_DWORD)v13
      || (uint64_t v13 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *))(*(void *)a2 + 88LL))(a1, a2, v18),
          (_DWORD)v13))
    {
      uint64_t v12 = v13;
      krb5_free_principal(a1, v16);
    }

    else
    {
      LODWORD(v12) = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v18,  &v17);
      if (!(_DWORD)v12)
      {
        do
        {
          if (!a4 || a4(a1, a5, &v17))
          {
            if (a6) {
              ++*a6;
            }
            int v15 = (*(uint64_t (**)(_krb5_context *, uint64_t, krb5_creds *))(*(void *)a3 + 64LL))( a1,  a3,  &v17);
            if (v15) {
              break;
            }
          }

          krb5_free_cred_contents(a1, &v17);
          int v15 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v18,  &v17);
        }

        while (!v15);
        LODWORD(v12) = v15;
      }

      (*(void (**)(_krb5_context *, uint64_t, _BYTE *))(*(void *)a2 + 104LL))(a1, a2, v18);
      krb5_free_principal(a1, v16);
      if ((_DWORD)v12 == -1765328242) {
        return 0LL;
      }
      else {
        return v12;
      }
    }
  }

  return v12;
}

uint64_t krb5_cc_copy_cache(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return krb5_cc_copy_match_f(a1, a2, a3, 0LL, 0LL, 0LL);
}

uint64_t krb5_cc_get_version(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(void))(*(void *)a2 + 128LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

double krb5_cc_clear_mcred(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t krb5_cc_cache_get_first(_krb5_context *a1, char *__s1, void **a3)
{
  krb5_error_code v4 = __s1;
  if (!__s1) {
    krb5_error_code v4 = (char *)krb5_cc_default_name(a1);
  }
  prefix_ops = krb5_cc_get_prefix_ops((uint64_t)a1, v4);
  if (prefix_ops)
  {
    uint64_t v7 = prefix_ops;
    if (prefix_ops[17])
    {
      krb5_error_code v8 = calloc(1uLL, 0x10uLL);
      *a3 = v8;
      if (v8)
      {
        void *v8 = v7;
        uint64_t v9 = ((uint64_t (*)(_krb5_context *, uint64_t))v7[17])(a1, (uint64_t)*a3 + 8);
        if ((_DWORD)v9)
        {
          free(*a3);
          *a3 = 0LL;
        }
      }

      else
      {
        uint64_t v9 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }
    }

    else
    {
      uint64_t v9 = 2529639159LL;
      krb5_set_error_message(a1, -1765328137, "Credential cache type %s doesn't support iterations over caches");
    }
  }

  else
  {
    uint64_t v9 = 2529639052LL;
    krb5_set_error_message( a1,  -1765328244,  "Unknown type %s when iterating trying to iterate the credential caches");
  }

  return v9;
}

uint64_t krb5_cc_cache_next(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*a2 + 144LL))(a1, a2[1]);
}

uint64_t krb5_cc_cache_end_seq_get(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*a2 + 152LL))(a1, a2[1]);
  free(a2);
  return v3;
}

krb5_error_code krb5_cccol_cursor_new(krb5_context context, krb5_cccol_cursor *cursor)
{
  krb5_error_code v4 = (_krb5_cccol_cursor *)calloc(1uLL, 0x18uLL);
  *krb5_cccol_cursor cursor = v4;
  if (v4)
  {
    krb5_error_code v5 = 0;
    *(_DWORD *)krb5_error_code v4 = -1;
  }

  else
  {
    krb5_error_code v5 = 12;
    krb5_set_error_message(context, 12, "malloc: out of memory");
  }

  return v5;
}

krb5_error_code krb5_cccol_cursor_next(krb5_context context, krb5_cccol_cursor cursor, krb5_ccache *ccache)
{
  *krb5_ccache ccache = 0LL;
  int v6 = *(_DWORD *)cursor;
  if (*(_DWORD *)cursor == -1)
  {
    krb5_creds v17 = getenv("KRB5CCNAME");
    *(_DWORD *)krb5_cccol_cursor cursor = 0;
    if (v17)
    {
      if (!krb5_cc_resolve(context, v17, ccache))
      {
        krb5_cc_get_full_name(context, (uint64_t)*ccache, (char **)cursor + 2);
        return 0;
      }

      int v6 = *(_DWORD *)cursor;
    }

    else
    {
      int v6 = 0;
    }
  }

  if (v6 < *((_DWORD *)context + 44))
  {
    uint64_t v7 = (char *)cursor + 8;
    do
    {
      krb5_error_code v8 = *(void **)v7;
      if (!*(void *)v7)
      {
        if (krb5_cc_cache_get_first( context,  *(char **)(*(void *)(*((void *)context + 21) + 8LL * v6) + 8LL),  (void **)cursor + 1)) {
          goto LABEL_9;
        }
        krb5_error_code v8 = *(void **)v7;
      }

      int v9 = (*(uint64_t (**)(krb5_context, void, krb5_ccache *))(*v8 + 144LL))(context, v8[1], ccache);
      if (v9)
      {
        int v10 = v9;
        uint64_t v11 = *(void **)v7;
        (*(void (**)(krb5_context, void))(**(void **)v7 + 152LL))( context,  *(void *)(*(void *)v7 + 8LL));
        free(v11);
        *(void *)uint64_t v7 = 0LL;
        if (v10 != -1765328242) {
          break;
        }
LABEL_9:
        int v6 = *(_DWORD *)cursor + 1;
        *(_DWORD *)krb5_cccol_cursor cursor = v6;
        continue;
      }

      if (!*((void *)cursor + 2)) {
        break;
      }
      __s2 = 0LL;
      uint64_t v12 = __s2;
      int v13 = strcmp(*((const char **)cursor + 2), __s2);
      free(v12);
      if (v13) {
        break;
      }
      krb5_ccache v14 = *ccache;
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)*ccache + 56LL))(context, *ccache);
      free(v14);
      *krb5_ccache ccache = 0LL;
      int v6 = *(_DWORD *)cursor;
    }

    while (v6 < *((_DWORD *)context + 44));
  }

  if (*(_DWORD *)cursor >= *((_DWORD *)context + 44))
  {
    krb5_error_code v15 = -1765328242;
    krb5_set_error_message(context, -1765328242, "Reached end of credential caches");
    return v15;
  }

  return 0;
}

uint64_t krb5_cc_get_lifetime(_krb5_context *a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  time_t v6 = time(0LL);
  uint64_t v7 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *))(*(void *)a2 + 88LL))(a1, a2, v15);
  if (!(_DWORD)v7)
  {
    uint64_t v7 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v15,  &v14);
    if (!(_DWORD)v7)
    {
      uint64_t v8 = 0LL;
      while (1)
      {
        BOOL is_root_krbtgt = krb5_principal_is_root_krbtgt((uint64_t)a1, (uint64_t)v14.client);
        if (is_root_krbtgt) {
          break;
        }
        if (!krb5_is_config_principal((krb5_context)is_root_krbtgt, v14.client)
          && (*(uint64_t *)&v14.times.endtime < v8 || v8 == 0)
          && v6 < *(void *)&v14.times.endtime)
        {
          uint64_t v8 = *(void *)&v14.times.endtime;
        }

        krb5_free_cred_contents(a1, &v14);
        uint64_t v10 = (*(uint64_t (**)(_krb5_context *, uint64_t, _BYTE *, krb5_creds *))(*(void *)a2 + 96LL))( a1,  a2,  v15,  &v14);
        if ((_DWORD)v10)
        {
          uint64_t v7 = v10;
          if (!v8) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }

      krb5_free_cred_contents(a1, &v14);
      uint64_t v7 = 0LL;
      if (v8)
      {
LABEL_22:
        uint64_t v7 = 0LL;
        *a3 = v8 - v6;
      }
    }

LABEL_23:
    (*(void (**)(_krb5_context *, uint64_t, _BYTE *))(*(void *)a2 + 104LL))(a1, a2, v15);
  }

  return v7;
}

  free(v18);
  if (v34) {
    krb5_crypto_destroy(a1, (uint64_t)v34);
  }
LABEL_25:
  sub_1882FDE20();
  sub_1882FDDC0();
  return v15;
}

          free(*v11);
          der_free_heim_integer();
          der_free_heim_integer();
          der_free_heim_integer();
          free(v11);
          return v17;
        }

        int v24 = a2;
        uint64_t v25 = a3;
        unsigned int v22 = "moduli file %s have un-parsable bits on line %d";
      }

      else
      {
        int v24 = a2;
        uint64_t v25 = a3;
        unsigned int v22 = "moduli file %s missing bits on line %d";
      }
    }

    else
    {
      int v24 = a2;
      uint64_t v25 = a3;
      unsigned int v22 = "moduli file %s missing name on line %d";
    }

    krb5_creds v17 = 22LL;
    krb5_set_error_message(a1, 22, v22, v24, v25);
    goto LABEL_23;
  }

  free(v11);
  return 0LL;
}

krb5_error_code krb5_cccol_cursor_free(krb5_context context, krb5_cccol_cursor *cursor)
{
  krb5_cccol_cursor v2 = *cursor;
  *krb5_cccol_cursor cursor = 0LL;
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)v2 + 1);
    if (v3)
    {
      (*(void (**)(krb5_context, void))(*v3 + 152LL))(context, v3[1]);
      free(v3);
    }

    krb5_error_code v4 = (void *)*((void *)v2 + 2);
    if (v4) {
      free(v4);
    }
    free(v2);
  }

  return 0;
}

krb5_error_code krb5_cc_move(krb5_context context, krb5_ccache src, krb5_ccache dst)
{
  time_t v6 = *(const char **)(*(void *)src + 8LL);
  uint64_t v7 = *(void *)dst;
  uint64_t v8 = *(const char **)(*(void *)dst + 8LL);
  int v9 = strcmp(v6, v8);
  uint64_t v10 = *(uint64_t (**)(krb5_context, krb5_ccache))(v7 + 288);
  if (v9)
  {
    if (!v10) {
      goto LABEL_9;
    }
  }

  else if (!v10)
  {
    goto LABEL_6;
  }

  int v11 = v10(context, src);
  uint64_t v7 = *(void *)dst;
  if (!v11)
  {
    time_t v6 = *(const char **)(*(void *)src + 8LL);
    uint64_t v8 = *(const char **)(v7 + 8);
LABEL_9:
    krb5_error_code v12 = -1765328137;
    krb5_set_error_message( context,  -1765328137,  "Moving credentials between different types not yet supported (from %s to %s)",  v6,  v8);
    return v12;
  }

krb5_BOOLean krb5_is_config_principal(krb5_context a1, krb5_const_principal a2)
{
  return !strcmp((const char *)a2->data, "X-CACHECONF:")
      && a2->realm.magic
      && strcmp(*(const char **)a2->realm.data, "krb5_ccache_conf_data") == 0;
}

krb5_error_code krb5_cc_set_config( krb5_context a1, krb5_ccache a2, krb5_const_principal a3, const char *a4, krb5_data *a5)
{
  krb5_error_code v8 = sub_1882C29BC(a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)&v13);
  if (!v8)
  {
    krb5_error_code v10 = krb5_cc_remove_cred(a1, a2, 0, &v13);
    krb5_error_code v8 = v10;
    if (v10) {
      BOOL v11 = v10 == -1765328243;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = v11;
    if (a5)
    {
      if (v12)
      {
        v13.keyblock.contents = (krb5_octet *)(time(0LL) - 10);
        *(void *)&v13.times.endtime = v13.keyblock.contents;
        krb5_error_code v8 = krb5_data_copy(&v13.addresses, a5->data, *(void *)&a5->magic);
        if (!v8) {
          krb5_error_code v8 = (*(uint64_t (**)(krb5_context, krb5_ccache, krb5_creds *))(*(void *)a2 + 64LL))(a1, a2, &v13);
        }
      }
    }
  }

  krb5_free_cred_contents(a1, &v13);
  return v8;
}

uint64_t sub_1882C29BC(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, uint64_t a4, uint64_t a5)
{
  krb5_creds v13 = 0LL;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  uint64_t principal = (*(uint64_t (**)(void))(*(void *)a2 + 80LL))();
  if (!(_DWORD)principal)
  {
    if (a3)
    {
      uint64_t principal = krb5_unparse_name(a1, a3, &v13);
      if ((_DWORD)principal) {
        return principal;
      }
      krb5_error_code v10 = v13;
    }

    else
    {
      krb5_error_code v10 = 0LL;
    }

    uint64_t principal = krb5_make_principal(a1, (void *)(a5 + 8), "X-CACHECONF:", "krb5_ccache_conf_data", a4, v10, 0LL);
    free(v13);
    BOOL v11 = (krb5_principal_data *)v14;
    if (!(_DWORD)principal)
    {
      uint64_t principal = krb5_copy_principal(a1, v14, (krb5_principal *)a5);
      BOOL v11 = (krb5_principal_data *)v14;
    }

    krb5_free_principal(a1, v11);
  }

  return principal;
}

krb5_error_code krb5_cc_get_config( krb5_context a1, krb5_ccache a2, krb5_const_principal a3, const char *a4, krb5_data *a5)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v13 = 0u;
  memset(v12, 0, sizeof(v12));
  krb5_data_zero(a5);
  krb5_error_code v10 = sub_1882C29BC(a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)&mcreds);
  if (!v10)
  {
    krb5_error_code v10 = krb5_cc_retrieve_cred(a1, a2, 0, &mcreds, (krb5_creds *)v12);
    if (!v10) {
      krb5_error_code v10 = krb5_data_copy(a5, (const void *)v14, *((size_t *)&v13 + 1));
    }
  }

  krb5_free_cred_contents(a1, (krb5_creds *)v12);
  krb5_free_cred_contents(a1, &mcreds);
  return v10;
}

krb5_error_code krb5_cccol_last_change_time(krb5_context context, krb5_timestamp *change_time)
{
  uint64_t v3 = v2;
  uint64_t v14 = 0LL;
  void *v2 = 0LL;
  krb5_error_code result = krb5_cccol_cursor_new(context, &cursor);
  if (!result)
  {
    uint64_t v7 = cursor;
    krb5_error_code v8 = krb5_cccol_cursor_next(context, cursor, &ccache);
    krb5_ccache v9 = ccache;
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = ccache == 0LL;
    }
    if (!v10)
    {
      do
      {
        uint64_t v11 = *(void *)v9;
        if (!change_time || !strcmp(*(const char **)(v11 + 8), (const char *)change_time))
        {
          uint64_t v14 = 0LL;
          int v12 = (*(uint64_t (**)(krb5_context, krb5_ccache, uint64_t *))(v11 + 184))(context, v9, &v14);
          krb5_ccache v13 = ccache;
          (*(void (**)(krb5_context, krb5_ccache))(*(void *)ccache + 56LL))(context, ccache);
          free(v13);
          if (!v12 && v14 > *v3) {
            void *v3 = v14;
          }
        }

        if (krb5_cccol_cursor_next(context, v7, &ccache)) {
          break;
        }
        krb5_ccache v9 = ccache;
      }

      while (ccache);
    }

    krb5_cccol_cursor_free(context, &cursor);
    return 0;
  }

  return result;
}

uint64_t krb5_cc_get_friendly_name(_krb5_context *a1, _krb5_ccache *a2, char **a3)
{
  if (krb5_cc_get_config(a1, a2, 0LL, "FriendlyName", &v11))
  {
    uint64_t v6 = (*(uint64_t (**)(_krb5_context *, _krb5_ccache *, krb5_const_principal *))(*(void *)a2 + 80LL))( a1,  a2,  &v10);
    if ((_DWORD)v6)
    {
      return v6;
    }

    else
    {
      uint64_t v7 = krb5_unparse_name(a1, v10, a3);
      krb5_free_principal(a1, (krb5_principal)v10);
    }
  }

  else
  {
    int v8 = asprintf(a3, "%.*s", v11.magic, v11.data);
    krb5_data_free(&v11);
    if (v8 <= 0)
    {
      uint64_t v7 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }

    else
    {
      return 0LL;
    }
  }

  return v7;
}

uint64_t krb5_cc_set_friendly_name(_krb5_context *a1, _krb5_ccache *a2, char *__s)
{
  v6.data = __s;
  *(void *)&v6.krb5_magic magic = strlen(__s);
  return krb5_cc_set_config(a1, a2, 0LL, "FriendlyName", &v6);
}

uint64_t krb5_cc_set_kdc_offset(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)a2 + 192LL);
  if (v3) {
    return v3();
  }
  *(_DWORD *)(a1 + 108) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  return 0LL;
}

uint64_t krb5_cc_get_kdc_offset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)a2 + 200LL);
  if (v3) {
    return v3();
  }
  *a3 = *(int *)(a1 + 108);
  return 0LL;
}

uint64_t krb5_cc_hold(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 208LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

uint64_t krb5_cc_unhold(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 216LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

uint64_t krb5_cc_get_uuid(_krb5_context *a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 224LL);
  if (v2) {
    return v2();
  }
  krb5_set_error_message( a1,  -1765328244,  "Credential cache type %s doesn't support uuid",  *(const char **)(*(void *)a2 + 8LL));
  return 2529639052LL;
}

uint64_t krb5_cc_resolve_by_uuid(_krb5_context *a1, char *a2, void *a3)
{
  if (a2)
  {
    prefix_ops = krb5_cc_get_prefix_ops((uint64_t)a1, a2);
    if (!prefix_ops)
    {
      uint64_t v6 = 2529639052LL;
      krb5_set_error_message(a1, -1765328244, "Credential cache type %s is unknown");
      return v6;
    }
  }

  else
  {
    prefix_ops = &krb5_xcc_ops;
  }

  if (prefix_ops[29])
  {
    uint64_t v6 = sub_1882C128C(a1, (uint64_t)prefix_ops, a3);
    if (!(_DWORD)v6)
    {
      uint64_t v6 = (*(uint64_t (**)(_krb5_context *))(*(void *)*a3 + 232LL))(a1);
      if ((_DWORD)v6)
      {
        free((void *)*a3);
        *a3 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v6 = 2529639052LL;
    krb5_set_error_message(a1, -1765328244, "Credential cache type %s doesn't support uuid");
  }

  return v6;
}

uint64_t krb5_cc_set_acl(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 256LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

krb5_error_code krb5_set_password( krb5_context context, krb5_creds *creds, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string)
{
  *result_code = 1;
  krb5_data_zero(result_code_string);
  uint64_t v33 = result_string;
  krb5_data_zero(result_string);
  sub_1882DFCE8((uint64_t)context, 1, "trying to set password");
  krb5_error_code v13 = 0;
  uint64_t v14 = (const char **)&off_18A2195E8;
  krb5_auth_context v34 = 0LL;
  uint64_t v35 = creds;
  unint64_t v15 = -1LL;
  krb5_principal v36 = change_password_for;
  uint64_t v37 = newpw;
  while (1)
  {
    if (change_password_for && v15 < 2) {
      goto LABEL_28;
    }
    *(void *)uint64_t v38 = 0LL;
    krb5_data_zero(v40);
    krb5_data_zero(v39);
    krb5_principal v16 = v36;
    if (!v36) {
      krb5_principal v16 = *(krb5_principal *)&v35->magic;
    }
    data = (const char *)v16->data;
    sub_1882DFCE8((uint64_t)context, 1, "trying to set password using: %s in realm %s", *v14, data);
    krb5_error_code v13 = krb5_auth_con_init(context, &v34);
    if (!v13)
    {
      krb5_auth_con_setflags(context, v34, 4);
      krb5_error_code v13 = krb5_sendto_ctx_alloc((uint64_t)context, (uint64_t)v38, v18, v19, v20, v21, v22, v23);
      if (!v13)
      {
        krb5_sendto_ctx_set_type(*(uint64_t *)v38, 3);
        if (v35->addresses >= (krb5_address **)0x2BD)
        {
          sub_1882DFCE8((uint64_t)context, 1, "using TCP since the ticket is large: %lu", v35->addresses);
          krb5_sendto_ctx_add_flags(*(uint64_t *)v38, 2);
        }

        sub_1882EDC90(*(uint64_t *)v38, (uint64_t)v14[2], (uint64_t)&v34);
        uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
        if (!ImpersonateBundle) {
          goto LABEL_20;
        }
        uint64_t v25 = (char *)ImpersonateBundle;
        MainBundle = CFBundleGetMainBundle();
        if (!MainBundle) {
          goto LABEL_20;
        }
        CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
        CFStringRef v28 = CFStringCreateWithCString(0LL, v25, 0x8000100u);
        CFStringRef v29 = v28;
        if (v28 && Identifier)
        {
          if (CFEqual(Identifier, v28)) {
            sub_1882DFCE8((uint64_t)context, 5, "Bundle identifiers match, not setting delegate");
          }
          else {
            krb5_sendto_set_delegated_app(0LL, *(uint64_t *)v38, 0LL, 0, v25);
          }
        }

        else if (!v28)
        {
LABEL_20:
          krb5_error_code v13 = krb5_sendto_context((uint64_t)context, *(uint64_t *)v38, v40, data, v39);
          if (!v13) {
            krb5_error_code v13 = ((uint64_t (*)(krb5_context, krb5_auth_context, void *, int *, krb5_data *, krb5_data *))v14[3])( context,  v34,  v39,  result_code,  result_code_string,  v33);
          }
          goto LABEL_22;
        }

        CFRelease(v29);
        goto LABEL_20;
      }
    }

LABEL_22:
    sub_1882DFCE8((uint64_t)context, 1, "set password using %s returned: %d result_code %d", *v14, v13, *result_code);
    krb5_auth_con_free(context, v34);
    if (*(void *)v38) {
      krb5_sendto_ctx_free((uint64_t)context, *(const void **)v38);
    }
    krb5_data_free(v39);
    if (v13 != -1765328228) {
      break;
    }
    krb5_set_error_message(context, -1765328228, "Unable to reach any changepw server  in realm %s", data);
    *result_code = 2;
    krb5_error_code v13 = -1765328228;
LABEL_28:
    uint64_t v31 = v14[4];
    v14 += 4;
    ++v15;
    krb5_error_code result = v13;
    if (!v31) {
      return result;
    }
  }

  if (v13) {
    goto LABEL_28;
  }
  krb5_error_code result = 0;
  if (*result_code) {
    goto LABEL_28;
  }
  return result;
}

    uint64_t v14 = krb5_copy_keyblock(a1, v16, (krb5_keyblock **)v13);
    if ((_DWORD)v14) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }

  krb5_principal v16 = (const krb5_keyblock *)*((void *)*a2 + 4);
  if (v16)
  {
    unint64_t v15 = 0LL;
    goto LABEL_22;
  }

              uint64_t v3 = v45;
              v2[v45] = 0;
LABEL_23:
              uint64_t v38 = strlen(v19);
              sub_18830E030(a2, &v44, v19, v38, 0);
              free(v19);
              sub_18830E030(a2, &v44, "=", 1uLL, 0);
              sub_18830E030(a2, &v44, v2, v3, 1);
              if ((*v11 | 2) == 6) {
                free(v2);
              }
              ++v8;
              uint64_t v7 = *(void *)(a1 + 32);
              uint64_t v39 = *(unsigned int *)(v7 + 16 * v43);
              if (v8 < v39)
              {
                sub_18830E030(a2, &v44, "+", 1uLL, 0);
                uint64_t v7 = *(void *)(a1 + 32);
                uint64_t v39 = *(unsigned int *)(v7 + 16 * v43);
              }

              if (v8 >= v39) {
                goto LABEL_28;
              }
              break;
            default:
              goto LABEL_23;
          }
        }
      }

krb5_error_code krb5_set_password_using_ccache( krb5_context context, krb5_ccache ccache, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string)
{
  krb5_principal v20 = 0LL;
  creds = 0LL;
  *result_code = 1;
  krb5_data_zero(result_code_string);
  krb5_data_zero(result_string);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  *(_OWORD *)uint64_t principal = 0u;
  if (change_password_for)
  {
    krb5_principal v20 = change_password_for;
    krb5_principal v14 = change_password_for;
  }

  else
  {
    krb5_error_code credentials = krb5_cc_get_principal(context, ccache, &v20);
    if (credentials) {
      return credentials;
    }
    krb5_principal v14 = v20;
  }

  realm = (char *)krb5_principal_get_realm((uint64_t)context, (uint64_t)v14);
  krb5_error_code credentials = krb5_make_principal(context, &principal[1], realm, "kadmin", "changepw", 0LL);
  if (!credentials)
  {
    krb5_error_code v17 = krb5_cc_get_principal(context, ccache, principal);
    if (v17)
    {
      krb5_error_code credentials = v17;
      krb5_free_principal(context, principal[1]);
    }

    else
    {
      krb5_error_code credentials = krb5_get_credentials(context, 0, ccache, (krb5_creds *)principal, &creds);
      krb5_free_principal(context, principal[1]);
      krb5_free_principal(context, principal[0]);
      uint64_t v18 = creds;
      if (!credentials)
      {
        krb5_error_code credentials = krb5_set_password( context,  creds,  newpw,  change_password_for,  result_code,  result_code_string,  result_string);
        uint64_t v18 = creds;
      }

      if (v18) {
        krb5_free_creds(context, v18);
      }
    }
  }

  if (!change_password_for) {
    krb5_free_principal(context, v20);
  }
  return credentials;
}

const char *krb5_passwd_result_to_string(uint64_t a1, unsigned int a2)
{
  if (a2 <= 7) {
    return off_18A219648[a2];
  }
  else {
    return "unknown result code";
  }
}

uint64_t sub_1882C345C(_krb5_context *a1, uint64_t a2, uint64_t a3, int a4, size_t *a5)
{
  uint64_t v9 = krb5_auth_con_genaddrs(a1, *(krb5_auth_context *)a3, a4, 1);
  if ((_DWORD)v9) {
    goto LABEL_3;
  }
  uint64_t v9 = krb5_mk_req_extended(a1, (krb5_auth_context *)a3, 6, 0LL, *(krb5_creds **)(a3 + 8), &v18);
  if ((_DWORD)v9) {
    goto LABEL_3;
  }
  strlen(*(const char **)(a3 + 24));
  *(void *)&v16.krb5_magic magic = sub_1882FE0B0();
  v16.data = (char *)malloc(*(size_t *)&v16.magic);
  if (!v16.data) {
    goto LABEL_16;
  }
  uint64_t v11 = sub_1882FE090();
  if ((_DWORD)v11)
  {
    uint64_t v9 = v11;
    free(v16.data);
    v16.data = 0LL;
LABEL_3:
    sub_1882DFCE8((uint64_t)a1, 10, "setpw_prexmit failed with %d", v9);
    goto LABEL_4;
  }

  if (*(void *)&v16.magic) {
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  uint64_t v9 = krb5_mk_priv(a1, *(krb5_auth_context *)a3, &v16, &v17, 0LL);
  if ((_DWORD)v9) {
    goto LABEL_3;
  }
  int v12 = krb5_storage_emem();
  if (!v12)
  {
LABEL_16:
    uint64_t v9 = 12LL;
    goto LABEL_3;
  }

  uint64_t v13 = (uint64_t)v12;
  uint64_t v9 = krb5_store_uint16((uint64_t)v12, LOWORD(v18.magic) + LOWORD(v17.magic) + 6);
  if ((_DWORD)v9
    || (uint64_t v9 = krb5_store_uint16(v13, 65408), (_DWORD)v9)
    || (uint64_t v9 = krb5_store_uint16(v13, v18.magic), (_DWORD)v9)
    || (v14 = krb5_storage_write(v13), uint64_t v9 = 22LL, v14 < 0)
    || v14 != *(void *)&v18.magic
    || (v15 = krb5_storage_write(v13), uint64_t v9 = 22LL, v15 < 0)
    || v15 != *(void *)&v17.magic
    || (uint64_t v9 = krb5_storage_to_data(v13, a5), (_DWORD)v9))
  {
    sub_1882DFCE8((uint64_t)a1, 10, "setpw_prexmit failed with %d", v9);
  }

  krb5_storage_free(v13);
LABEL_4:
  krb5_data_free(&v17);
  krb5_data_free(&v18);
  krb5_data_free(&v16);
  return v9;
}

uint64_t sub_1882C36B0( _krb5_context *a1, _krb5_auth_context *a2, uint64_t *a3, _DWORD *a4, krb5_data *a5, void *a6)
{
  uint64_t v18 = *a3;
  if (*a3 <= 5)
  {
    uint64_t v35 = *a3;
    uint64_t v19 = "server sent to too short message (%ld bytes)";
LABEL_3:
    sub_1882CA44C(a6, v19, v12, v13, v14, v15, v16, v17, v35);
LABEL_4:
    uint64_t v20 = 0LL;
    *a4 = 1;
    return v20;
  }

  uint64_t v22 = (unsigned __int8 *)a3[1];
  uint64_t v23 = v22[1];
  if (v18 == (v23 | ((unint64_t)*v22 << 8)) && (v23 | 0x20) != 0x7E)
  {
    unsigned int v24 = __rev16(*((unsigned __int16 *)v22 + 1));
    if (v24 != 1)
    {
      sub_1882CA44C(a6, "client: wrong version number (%d)", v12, v13, v14, v15, v16, v17, v24);
      goto LABEL_4;
    }

    v38.data = (char *)(v22 + 6);
    uint64_t v25 = __rev16(*((unsigned __int16 *)v22 + 2));
    *(void *)&v38.krb5_magic magic = v25;
    if (&v22[v18] < &v22[v25 + 6])
    {
      uint64_t v19 = "client: wrong AP len in reply";
      goto LABEL_3;
    }

    if (v25)
    {
      *(void *)&v36.krb5_magic magic = v18 - v25 - 6;
      v36.data = (char *)&v22[v25 + 6];
      uint64_t v20 = krb5_rd_rep(a1, a2, &v38, &v37);
      if (!(_DWORD)v20)
      {
        krb5_free_ap_rep_enc_part(a1, v37);
        uint64_t v26 = krb5_rd_priv(a1, a2, &v36, a5, 0LL);
        if ((_DWORD)v26)
        {
          uint64_t v20 = v26;
          krb5_data_free(a5);
        }

        else
        {
          uint64_t v33 = *(void *)&a5->magic;
          if (*(void *)&a5->magic > 1uLL)
          {
            data = a5->data;
            *a4 = __rev16(*(unsigned __int16 *)data);
            krb5_data_copy(a6, data + 2, v33 - 2);
          }

          else
          {
            *a4 = 1;
            sub_1882CA44C(a6, "client: bad length in result", v27, v28, v29, v30, v31, v32, v35);
          }

          return 0LL;
        }
      }

      return v20;
    }
  }

  return sub_1882C3A30();
}

uint64_t sub_1882C3874(_krb5_context *a1, uint64_t a2, uint64_t a3, int a4, size_t *a5)
{
  uint64_t v9 = krb5_auth_con_genaddrs(a1, *(krb5_auth_context *)a3, a4, 1);
  if ((_DWORD)v9) {
    goto LABEL_4;
  }
  uint64_t v9 = krb5_mk_req_extended(a1, (krb5_auth_context *)a3, 6, 0LL, *(krb5_creds **)(a3 + 8), &v17);
  if ((_DWORD)v9) {
    goto LABEL_4;
  }
  v15.data = *(char **)(a3 + 24);
  *(void *)&v15.krb5_magic magic = strlen(v15.data);
  uint64_t v9 = krb5_mk_priv(a1, *(krb5_auth_context *)a3, &v15, &v16, 0LL);
  if ((_DWORD)v9) {
    goto LABEL_4;
  }
  uint64_t v11 = krb5_storage_emem();
  if (!v11)
  {
    uint64_t v9 = 12LL;
LABEL_4:
    sub_1882DFCE8((uint64_t)a1, 10, "chgpw_prexmit failed with: %d", v9);
    goto LABEL_5;
  }

  uint64_t v12 = (uint64_t)v11;
  uint64_t v9 = krb5_store_uint16((uint64_t)v11, LOWORD(v17.magic) + LOWORD(v16.magic) + 6);
  if ((_DWORD)v9
    || (uint64_t v9 = krb5_store_uint16(v12, 1), (_DWORD)v9)
    || (uint64_t v9 = krb5_store_uint16(v12, v17.magic), (_DWORD)v9)
    || (v13 = krb5_storage_write(v12), uint64_t v9 = 22LL, v13 < 0)
    || v13 != *(void *)&v17.magic
    || (v14 = krb5_storage_write(v12), uint64_t v9 = 22LL, v14 < 0)
    || v14 != *(void *)&v16.magic
    || (uint64_t v9 = krb5_storage_to_data(v12, a5), (_DWORD)v9))
  {
    sub_1882DFCE8((uint64_t)a1, 10, "chgpw_prexmit failed with: %d", v9);
  }

  krb5_storage_free(v12);
LABEL_5:
  krb5_data_free(&v16);
  krb5_data_free(&v17);
  return v9;
}

uint64_t sub_1882C3A30()
{
  uint64_t v0 = sub_1882FE010();
  if (!(_DWORD)v0)
  {
    uint64_t v0 = 0LL;
    sub_1882FE060();
  }

  return v0;
}

void *sub_1882C3B18(void *a1, char *__s1, int a3)
{
  krb5_error_code v5 = a1;
  uint64_t v6 = *a1;
  if (*a1)
  {
    while (1)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v6 = v7[2];
      if (!v6)
      {
        krb5_error_code v5 = v7 + 2;
        goto LABEL_7;
      }
    }
  }

  else
  {
LABEL_7:
    uint64_t v7 = calloc(1uLL, 0x20uLL);
    void *v5 = v7;
    if (v7)
    {
      v7[1] = strdup(__s1);
      uint64_t v7 = (void *)*v5;
      *(_DWORD *)uint64_t v7 = a3;
      if (!v7[1])
      {
        free(v7);
        uint64_t v7 = 0LL;
        void *v5 = 0LL;
      }
    }
  }

  return v7;
}

uint64_t krb5_config_parse_file_multi(_krb5_context *a1, char *__big, void *a3)
{
  krb5_error_code v4 = __big;
  uint64_t v46 = *MEMORY[0x1895F89C0];
  __s = 0LL;
  __int128 v42 = 0LL;
  unsigned int v40 = 0;
  if (*__big == 126 && __big[1] == 47)
  {
    if (!krb5_homedir_access((uint64_t)a1))
    {
      uint64_t v9 = 1LL;
      krb5_set_error_message(a1, 1, "Access to home directory not allowed");
      goto LABEL_56;
    }

    if (!issuid() && (pw_dir = getenv("HOME")) != 0LL
      || (uid_t v6 = getuid(), (v7 = getpwuid(v6)) != 0LL) && (pw_dir = v7->pw_dir) != 0LL)
    {
      asprintf(&v42, "%s%s", pw_dir, v4 + 1);
      krb5_error_code v4 = v42;
      if (!v42)
      {
        uint64_t v9 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory", v32, v34);
        goto LABEL_56;
      }
    }
  }

  uint64_t v9 = _krb5_expand_default_cc_name_0(a1, v4, (void **)&__s);
  if ((_DWORD)v9) {
    goto LABEL_56;
  }
  krb5_const_principal v10 = __s;
  size_t v11 = strlen(__s);
  if (v11 >= 7)
  {
    CFIndex v12 = v11;
    if (!strcasecmp(&__s[v11 - 6], ".plist"))
    {
      uint64_t v25 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      uint64_t v26 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)v10, v12, 0);
      if (v26 && (uint64_t v27 = v26, v28 = CFReadStreamCreateWithFile(v25, v26), CFRelease(v27), v28))
      {
        if (CFReadStreamOpen(v28))
        {
          uint64_t v29 = (const __CFDictionary *)CFPropertyListCreateWithStream(0LL, v28, 0LL, 0LL, 0LL, 0LL);
          CFRelease(v28);
          if (v29)
          {
            CFDictionaryApplyFunction(v29, (CFDictionaryApplierFunction)sub_1882C4780, a3);
            CFRelease(v29);
            goto LABEL_37;
          }
        }

        else
        {
          CFRelease(v28);
        }

        uint64_t v9 = 2LL;
      }

      else
      {
        uint64_t v9 = 12LL;
      }

      krb5_clear_error_message(a1);
      uint64_t v33 = v10;
      unsigned int v24 = "Failed to parse plist %s";
      goto LABEL_55;
    }
  }

  uint64_t v38 = 0LL;
  uint64_t v39 = fopen(v10, "r");
  if (!v39)
  {
    uint64_t v23 = __error();
    uint64_t v9 = *v23;
    strerror_r(*v23, __strerrbuf, 0x80uLL);
    uint64_t v33 = v10;
    krb5_auth_context v34 = __strerrbuf;
    unsigned int v24 = "open %s: %s";
    goto LABEL_55;
  }

  krb5_data v36 = v10;
  uint64_t v37 = a3;
  uint64_t v44 = 0LL;
  if (!sub_1882C48F4(__strerrbuf, (uint64_t)&v38))
  {
LABEL_36:
    fclose(v39);
LABEL_37:
    uint64_t v9 = 0LL;
    goto LABEL_56;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = MEMORY[0x1895F8770];
  while (1)
  {
    krb5_data v15 = (char *)++v40;
    __strerrbuf[strcspn(__strerrbuf, "\r\n")] = 0;
    krb5_data v16 = __strerrbuf;
    do
    {
      uint64_t v17 = *v16;
      if (*v16 < 0) {
        int v18 = __maskrune(*v16, 0x4000uLL);
      }
      else {
        int v18 = *(_DWORD *)(v14 + 4 * v17 + 60) & 0x4000;
      }
      ++v16;
    }

    while (v18);
    if ((_DWORD)v17 == 91) {
      break;
    }
    if ((_DWORD)v17 == 125)
    {
      uint64_t v30 = "unmatched }";
      goto LABEL_50;
    }

    if (!v13)
    {
      uint64_t v30 = "binding before section";
      goto LABEL_50;
    }

    uint64_t v20 = sub_1882C49AC((uint64_t)&v38, (int *)&v40, v16 - 1, &v44, v13 + 3, &v43);
    if ((_DWORD)v20)
    {
      uint64_t v9 = v20;
      krb5_data v15 = (char *)v40;
      uint64_t v30 = v43;
      goto LABEL_51;
    }

LABEL_35:
  }

  uint64_t v21 = strchr(v16, 93);
  if (!v21)
  {
    uint64_t v30 = "missing ]";
    goto LABEL_50;
  }

  char *v21 = 0;
  uint64_t v22 = sub_1882C3B18(v37, v16, 1);
  if (v22)
  {
    uint64_t v13 = v22;
    uint64_t v44 = 0LL;
    goto LABEL_35;
  }

  uint64_t v30 = "out of memory";
LABEL_50:
  __int128 v43 = v30;
  uint64_t v9 = 2529639048LL;
LABEL_51:
  fclose(v39);
  krb5_auth_context v34 = v15;
  uint64_t v35 = v30;
  uint64_t v33 = v36;
  unsigned int v24 = "%s:%u: %s";
LABEL_55:
  krb5_set_error_message(a1, v9, v24, v33, v34, v35);
LABEL_56:
  if (v42) {
    free(v42);
  }
  if (__s) {
    free(__s);
  }
  return v9;
}

              heim_release((CFTypeRef)v19);
              return;
            }

            heim_release((CFTypeRef)v19);
          }

          else
          {
            free(v27);
          }
        }

        krb5_enomem(a1);
        return;
      }

      krb5_const_principal v10 = 1;
    }

    size_t v11 = *(_DWORD *)(a2 + 112);
    CFIndex v12 = 0LL;
    if (!v11) {
      size_t v11 = bswap32(krb5_getportbyname((int)a1, a5, a4, 0x58u)) >> 16;
    }
    goto LABEL_13;
  }

  if ((v80 & 2) != 0)
  {
    if ((v80 & 0x20) != 0) {
      goto LABEL_41;
    }
    v57 = "CA certificate have no SubjectKeyIdentifier\n";
  }

  else
  {
    if ((v80 & 0x40) != 0) {
      goto LABEL_41;
    }
    v57 = "Is not CA and doesn't have AuthorityKeyIdentifier\n";
  }

  sub_1883106FC((uint64_t)a2, 1, (uint64_t)v57, v42, v43, v44, v45, v46, v77);
LABEL_41:
  v58 = v80;
  if ((v80 & 0x20) == 0)
  {
    sub_1883106FC((uint64_t)a2, 1, (uint64_t)"Doesn't have SubjectKeyIdentifier\n", v42, v43, v44, v45, v46, v77);
    v58 = v80;
  }

  if ((~v58 & 6) == 0)
  {
    sub_1883106FC((uint64_t)a2, 1, (uint64_t)"Proxy and CA at the same time!\n", v42, v43, v44, v45, v46, v77);
    LOBYTE(v58) = v80;
  }

  if ((v58 & 4) != 0)
  {
    if ((v58 & 8) != 0)
    {
      sub_1883106FC((uint64_t)a2, 1, (uint64_t)"Proxy and have SAN\n", v42, v43, v44, v45, v46, v77);
      LOBYTE(v58) = v80;
    }

    if ((v58 & 0x10) != 0) {
      sub_1883106FC((uint64_t)a2, 1, (uint64_t)"Proxy and have IAN\n", v42, v43, v44, v45, v46, v77);
    }
  }

  is_null_p = hx509_name_is_null_p(v82);
  v65 = v80;
  if (is_null_p && (v80 & 8) == 0)
  {
    sub_1883106FC((uint64_t)a2, 1, (uint64_t)"NULL subject DN and doesn't have a SAN\n", v60, v61, v62, v63, v64, v77);
    v65 = v80;
  }

  if ((v65 & 0xFFFFFF81) != 0)
  {
    if ((v65 & 1) == 0) {
      goto LABEL_61;
    }
  }

  else
  {
    sub_1883106FC( (uint64_t)a2,  1,  (uint64_t)"Not a CA nor PROXY and doesn't haveCRL Dist Point\n",  v60,  v61,  v62,  v63,  v64,  v77);
    if ((v80 & 1) == 0) {
      goto LABEL_61;
    }
  }

  if (sub_188302C20(a1, a3, (uint64_t)(v5 + 31), (uint64_t)v5, v5 + 34, v62, v63, v64))
  {
    v71 = "Could NOT verify self-signed certificate self-signature!\n";
    v72 = (uint64_t)a2;
    v73 = 1;
  }

  else
  {
    v71 = "Self-signed certificate was self-signed\n";
    v72 = (uint64_t)a2;
    v73 = 2;
  }

  sub_1883106FC(v72, v73, (uint64_t)v71, v66, v67, v68, v69, v70, v77);
LABEL_61:
  hx509_name_free((void **)&v82);
  hx509_name_free((void **)&v83);
  return 0LL;
}

uint64_t krb5_config_parse_file(_krb5_context *a1, char *__big, void *a3)
{
  *(void *)a3 = 0LL;
  return krb5_config_parse_file_multi(a1, __big, a3);
}

uint64_t krb5_config_file_free(uint64_t a1, void **a2)
{
  return 0LL;
}

void sub_1882C4018(uint64_t a1, void **a2)
{
  if (a2)
  {
    krb5_cccol_cursor v2 = a2;
    do
    {
      free(v2[1]);
      if (*(_DWORD *)v2 == 1)
      {
        sub_1882C4018(a1, v2[3]);
      }

      else
      {
        if (*(_DWORD *)v2) {
          krb5_abortx(a1, "unknown binding type (%d) in free_binding", *(_DWORD *)v2);
        }
        free(v2[3]);
      }

      krb5_error_code v4 = (void **)v2[2];
      free(v2);
      krb5_cccol_cursor v2 = v4;
    }

    while (v4);
  }

uint64_t sub_1882C40A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5 = a4;
  if (!a2)
  {
    a2 = *(void *)(a1 + 136);
    if (!a2) {
      return 0LL;
    }
  }

  uint64_t v7 = *a3;
  if (!*a3)
  {
    if (*(void *)a5) {
      return sub_1882C415C(a2, a3, a4, *(const char **)a5, (uint64_t *)(a5 + 8));
    }
    return 0LL;
  }

  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = *(const char **)(v7 + 8);
  while (strcmp(*(const char **)(v8 + 8), v9) || *(_DWORD *)v8 != v5)
  {
    uint64_t v8 = *(void *)(v8 + 16);
    if (!v8) {
      return 0LL;
    }
  }

  *a3 = v8;
  return *(void *)(v8 + 24);
}

uint64_t sub_1882C415C(uint64_t result, uint64_t *a2, uint64_t a3, const char *a4, uint64_t *a5)
{
  CFIndex v12 = a5 + 1;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *a5;
    while (1)
    {
      if (!strcmp(*(const char **)(v8 + 8), a4))
      {
        if (*(_DWORD *)v8 == (_DWORD)a3 && v9 == 0)
        {
          *a2 = v8;
          return *(void *)(v8 + 24);
        }

        if (*(_DWORD *)v8 == 1 && v9 != 0) {
          return sub_1882C415C(*(void *)(v8 + 24), a2, a3, v9, v12);
        }
      }

      uint64_t v8 = *(void *)(v8 + 16);
      if (!v8) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t krb5_config_get_list( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0LL;
  return sub_1882C40A4(a1, a2, &v10, 1LL, (uint64_t)&a9);
}

uint64_t krb5_config_get_string( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0LL;
  return sub_1882C40A4(a1, a2, &v10, 0LL, (uint64_t)&a9);
}

uint64_t krb5_config_get_string_default( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = 0LL;
  uint64_t result = sub_1882C40A4(a1, a2, &v11, 0LL, (uint64_t)&a9);
  if (!result) {
    return a3;
  }
  return result;
}

void *sub_1882C42B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0LL;
  uid_t v6 = (const char *)sub_1882C40A4(a1, a2, &v23, 0LL, a3);
  if (v6)
  {
    uint64_t v7 = 0LL;
    int v8 = 0;
    while (1)
    {
      uint64_t v9 = strdup(v6);
      uint64_t v22 = 0LL;
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_1882C4418(v9, &v22);
      if (v11)
      {
        CFIndex v12 = v11;
        uint64_t v13 = v8;
        size_t v14 = 8LL * v8 + 8;
        while (1)
        {
          krb5_data v15 = realloc(v7, v14);
          if (!v15) {
            break;
          }
          krb5_data v16 = v15;
          uint64_t v17 = strdup(v12);
          v16[v13] = v17;
          if (!v17)
          {
            LODWORD(v13) = v13 + 1;
            uint64_t v7 = v16;
            break;
          }

          CFIndex v12 = sub_1882C4418(0LL, &v22);
          ++v13;
          v14 += 8LL;
          uint64_t v7 = v16;
          if (!v12)
          {
            int v8 = v13;
            uint64_t v7 = v16;
            goto LABEL_10;
          }
        }

        int v8 = v13;
        break;
      }

LABEL_10:
      free(v10);
      uid_t v6 = (const char *)sub_1882C40A4(a1, a2, &v23, 0LL, a3);
      if (!v6)
      {
        if (!v8) {
          return v7;
        }
        int v18 = realloc(v7, 8LL * (v8 + 1));
        if (v18)
        {
          v18[v8] = 0LL;
          return v18;
        }

        goto LABEL_17;
      }
    }

    if (!v8) {
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v19 = v8 - 1LL;
    do
      free(*((void **)v7 + v19));
    while ((_DWORD)v19--);
LABEL_19:
    free(v7);
  }

  return 0LL;
}

    pthread_mutex_unlock(&stru_18C704428);
    CFIndex v12 = 0LL;
    *a2 = v5;
  }

  else
  {
    CFIndex v12 = 2529639110LL;
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
  }

  return v12;
}

    v3[1] = (char *)1;
    v3[2] = 0LL;
    v3[3] = 0LL;
    v3[4] = (char *)(v3 + 3);
    v3[7] = (char *)time(0LL);
    v3[8] = 0LL;
    krb5_generate_random_block((uint64_t)(v3 + 9), 16LL);
    pthread_mutex_init((pthread_mutex_t *)(v3 + 11), 0LL);
    uid_t v6 = (char *)off_18C704418;
    v3[5] = (char *)off_18C704418;
    uint64_t v7 = (uint64_t *)(v6 + 48);
    int v8 = v6 == 0LL;
    off_18C704418 = v3;
    uint64_t v9 = &qword_18C704420;
    if (!v8) {
      uint64_t v9 = v7;
    }
    char *v9 = (uint64_t)(v3 + 5);
    v3[6] = (char *)&off_18C704418;
  }

  return v3;
}

    krb5_data v16 = 2314790688LL;
    krb5_set_error_message(a1, -1980176608, "Group %d not accepted", *(_DWORD *)a4);
    return v16;
  }

  if (*(_DWORD *)a4 != 2 || (*(_BYTE *)(v7 + 120) & 1) == 0) {
    goto LABEL_10;
  }
  if (*(void *)(a4 + 8) != 32LL)
  {
    krb5_data v16 = 2314790688LL;
    krb5_set_error_message(a1, -1980176608, "public key of wrong length");
    return v16;
  }

  krb5_data v16 = krb5_data_alloc(&v24, 0x20uLL);
  if ((_DWORD)v16)
  {
LABEL_22:
    bzero(v25, v24);
    krb5_data_free(&v24);
    return v16;
  }

  krb5_data v16 = 2314790688LL;
  krb5_set_error_message(a1, -1980176608, "Failed to complete share key");
  return v16;
}

      uint64_t v9 = (uint64_t *)v11;
      if (!v11) {
        return 12LL;
      }
      goto LABEL_20;
    case 7:
      hx509_oid_sprint();
      if (!v19[0]) {
        return 12LL;
      }
      uid_t v6 = rk_strpoolprintf(0LL, "registeredID: %s");
LABEL_18:
      uint64_t v9 = (uint64_t *)v6;
      uint64_t v10 = (char *)v19[0];
LABEL_19:
      free(v10);
      if (!v9) {
        return 12LL;
      }
LABEL_20:
      krb5_data v15 = rk_strpoolcollect(v9);
      uint64_t result = 0LL;
      *a2 = v15;
      return result;
    default:
      return 12LL;
  }

    uint64_t v3 = 1LL;
    if ((v7 & 1) == 0) {
      return 2LL;
    }
  }

  uint64_t v10 = calloc(1uLL, 0x10uLL);
  if (!v10) {
    return 12LL;
  }
  uint64_t v11 = v10;
  char *v10 = v8;
  CFIndex v12 = ((uint64_t (*)(const char *, void *))(&off_18C4D9C90)[5 * v3 + 1])(&v5[v9], v10 + 1);
  if ((_DWORD)v12)
  {
    free(v11);
    if (!v4) {
      return v12;
    }
    krb5_error_code v4 = 1;
    goto LABEL_10;
  }

  *a2 = v11;
  return v12;
}

char *sub_1882C4418(char *__s, char **a2)
{
  uint64_t v3 = __s;
  if (!__s) {
    uint64_t v3 = *a2;
  }
  int v4 = *v3;
  if (!*v3) {
    return 0LL;
  }
  int v5 = v3;
  while (v4 == 34)
  {
    uid_t v6 = strchr(v5 + 1, 34);
    if (v6) {
      int v5 = v6 + 1;
    }
    else {
      v5 += strlen(v5);
    }
    int v4 = *(unsigned __int8 *)v5;
  }

  if (v4 && (v5 += strcspn(v5, " \t"), *v5))
  {
    const char *v5 = 0;
    *a2 = (char *)(v5 + 1);
  }

  else
  {
    *a2 = (char *)v5;
  }

  if (*v3 == 34 && *(v5 - 1) == 34 && v3 + 1 < v5)
  {
    ++v3;
    *((_BYTE *)v5 - 1) = 0;
  }

  return v3;
}

void *krb5_config_get_strings( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C42B0(a1, a2, (uint64_t)&a9);
}

void krb5_config_free_strings(void **a1)
{
  if (a1)
  {
    krb5_cccol_cursor v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = a1 + 1;
      do
      {
        free(v2);
        int v4 = *v3++;
        krb5_cccol_cursor v2 = v4;
      }

      while (v4);
    }
  }

  free(a1);
}

BOOL sub_1882C4558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0LL;
  int v5 = (const char *)sub_1882C40A4(a1, a2, &v8, 0LL, a4);
  if (v5)
  {
    uid_t v6 = v5;
    return !strcasecmp(v5, "yes") || !strcasecmp(v6, "true") || atoi(v6) != 0;
  }

  return a3;
}

BOOL krb5_config_get_BOOL_default( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C4558(a1, a2, a3, (uint64_t)&a9);
}

BOOL krb5_config_get_BOOL( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C4558(a1, a2, 0LL, (uint64_t)&a9);
}

uint64_t sub_1882C462C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t v7 = 0LL;
  int v5 = (char *)sub_1882C40A4(a1, a2, (uint64_t *)v7, 0LL, a4);
  if (v5 && !krb5_string_to_deltat(v5, v7)) {
    return v7[0];
  }
  return a3;
}

uint64_t krb5_config_get_time_default( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C462C(a1, a2, a3, (uint64_t)&a9);
}

uint64_t krb5_config_get_time( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C462C(a1, a2, -1LL, (uint64_t)&a9);
}

uint64_t sub_1882C46D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __endptr = 0LL;
  int v5 = (const char *)sub_1882C40A4(a1, a2, (uint64_t *)&__endptr, 0LL, a4);
  if (v5)
  {
    uid_t v6 = (char *)v5;
    unsigned int v7 = strtol(v5, &__endptr, 0);
    if (__endptr == v6) {
      return a3;
    }
    else {
      return v7;
    }
  }

  return a3;
}

uint64_t krb5_config_get_int_default( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C46D0(a1, a2, a3, (uint64_t)&a9);
}

uint64_t krb5_config_get_int( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1882C46D0(a1, a2, 0xFFFFFFFFLL, (uint64_t)&a9);
}

void sub_1882C4780(const __CFString *a1, const __CFString *a2, void *a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    unsigned int v7 = sub_1882BC750(a1);
    if (v7)
    {
      uint64_t v8 = v7;
      CFTypeID v9 = CFGetTypeID(a2);
      if (v9 == CFStringGetTypeID())
      {
        uint64_t v10 = sub_1882C3B18(a3, v8, 0);
        v10[3] = sub_1882BC750(a2);
      }

      else
      {
        CFTypeID v11 = CFGetTypeID(a2);
        if (v11 == CFDictionaryGetTypeID())
        {
          CFIndex v12 = sub_1882C3B18(a3, v8, 1);
          CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1882C4780, v12 + 3);
        }

        else
        {
          CFTypeID v13 = CFGetTypeID(a2);
          if (v13 == CFArrayGetTypeID())
          {
            v14[0] = a3;
            v14[1] = v8;
            v15.length = CFArrayGetCount((CFArrayRef)a2);
            v15.location = 0LL;
            CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_1882C489C, v14);
          }
        }
      }

      free(v8);
    }
  }

CFTypeID sub_1882C489C(const __CFString *a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID result = CFStringGetTypeID();
  if (v4 == result)
  {
    CFTypeID v6 = sub_1882C3B18(*(void **)a2, *(char **)(a2 + 8), 0);
    CFTypeID result = (CFTypeID)sub_1882BC750(a1);
    v6[3] = result;
  }

  return result;
}

char *sub_1882C48F4(char *a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = a1;
  uint64_t v3 = *(FILE **)(a2 + 8);
  if (v3) {
    return fgets(a1, 2048, v3);
  }
  CFTypeID v6 = *(const char **)a2;
  if (!**(_BYTE **)a2) {
    return 0LL;
  }
  size_t v7 = strcspn(v6, "\n");
  if (v6[v7] == 10) {
    uint64_t v8 = (uint64_t)&v6[v7 + 1];
  }
  else {
    uint64_t v8 = (uint64_t)&v6[v7];
  }
  else {
    size_t v9 = v8 - (void)v6;
  }
  memcpy(v2, v6, v9);
  v2[v9] = 0;
  *(void *)a2 = v8;
  return v2;
}

uint64_t sub_1882C49AC(uint64_t a1, int *a2, char *a3, void *a4, void *a5, const char **a6)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  CFIndex v12 = a3 - 1;
  uint64_t v13 = MEMORY[0x1895F8770];
  while (1)
  {
    uint64_t v14 = v12[1];
    if (!v12[1] || (_DWORD)v14 == 61) {
      break;
    }
    if ((v14 & 0x80) != 0)
    {
      if (__maskrune(v14, 0x4000uLL))
      {
LABEL_9:
        LODWORD(v14) = v12[1];
        break;
      }
    }

    else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    {
      goto LABEL_9;
    }

    ++v12;
  }

  if (!(_DWORD)v14) {
    goto LABEL_43;
  }
  CFRange v15 = v12;
  do
  {
    uint64_t v16 = v15[1];
    if (v15[1] < 0) {
      int v17 = __maskrune(v15[1], 0x4000uLL);
    }
    else {
      int v17 = *(_DWORD *)(v13 + 4 * v16 + 60) & 0x4000;
    }
    ++v15;
  }

  while (v17);
  if ((_DWORD)v16 != 61)
  {
LABEL_43:
    uint64_t result = 2529639048LL;
    uint64_t v30 = "missing =";
LABEL_44:
    *a6 = v30;
    return result;
  }

  do
  {
    while (1)
    {
      int v18 = *++v15;
      uint64_t v19 = v18;
      if (v18 < 0) {
        break;
      }
      if ((*(_DWORD *)(v13 + 4 * v19 + 60) & 0x4000) == 0) {
        goto LABEL_21;
      }
    }
  }

  while (__maskrune(v19, 0x4000uLL));
LABEL_21:
  v12[1] = 0;
  if (*v15 != 123)
  {
    uint64_t v31 = sub_1882C3B18(a5, a3, 0);
    if (v31)
    {
      uint64_t v32 = v31;
      int64_t v33 = strlen(v15);
      if (v33 < 1)
      {
LABEL_56:
        uint64_t v37 = &v15[v33];
      }

      else
      {
        do
        {
          uint64_t v34 = v15[v33 - 1];
          if (v15[v33 - 1] < 0)
          {
            if (!__maskrune(v34, 0x4000uLL)) {
              goto LABEL_56;
            }
          }

          else if ((*(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000) == 0)
          {
            goto LABEL_56;
          }

          int64_t v35 = v33 - 1;
          uint64_t v36 = v33-- + 1;
        }

        while (v36 >= 3);
        uint64_t v37 = &v15[v35];
      }

      *uint64_t v37 = 0;
      uint64_t v38 = strdup(v15);
      uint64_t result = 0LL;
      v32[3] = v38;
      goto LABEL_58;
    }

    goto LABEL_53;
  }

  uint64_t v20 = sub_1882C3B18(a5, a3, 1);
  if (!v20)
  {
LABEL_53:
    uint64_t result = 2529639048LL;
    uint64_t v30 = "out of memory";
    goto LABEL_44;
  }

  __int128 v41 = v20;
  unsigned int v40 = a4;
  int v39 = *a2;
  if (!sub_1882C48F4(__s, a1))
  {
LABEL_54:
    uint64_t result = 2529639048LL;
    *a2 = v39;
    *a6 = "unclosed {";
    goto LABEL_55;
  }

  while (1)
  {
    ++*a2;
    __s[strcspn(__s, "\r\n")] = 0;
    uint64_t v21 = &v43;
    do
    {
      uint64_t v22 = v21;
      int v23 = v21[1];
      unsigned int v24 = v23;
      if (v23 < 0) {
        int v25 = __maskrune(v23, 0x4000uLL);
      }
      else {
        int v25 = *(_DWORD *)(v13 + 4LL * v23 + 60) & 0x4000;
      }
      uint64_t v21 = v22 + 1;
    }

    while (v25);
    if (v24 <= 0x3B && ((1LL << v24) & 0x800000800000001LL) != 0) {
      goto LABEL_33;
    }
    do
    {
      uint64_t v27 = v22[1];
      if (v22[1] < 0) {
        int v28 = __maskrune(v22[1], 0x4000uLL);
      }
      else {
        int v28 = *(_DWORD *)(v13 + 4 * v27 + 60) & 0x4000;
      }
      ++v22;
    }

    while (v28);
    if (!(_DWORD)v27) {
      goto LABEL_33;
    }
    if ((_DWORD)v27 == 125) {
      break;
    }
    uint64_t result = sub_1882C49AC(a1, a2, v22, v42, v41 + 3, a6);
    if ((_DWORD)result) {
      goto LABEL_55;
    }
LABEL_33:
    if (!sub_1882C48F4(__s, a1)) {
      goto LABEL_54;
    }
  }

  uint64_t result = 0LL;
LABEL_55:
  a4 = v40;
  uint64_t v32 = v41;
LABEL_58:
  *a4 = v32;
  return result;
}

uint64_t krb5_init_context_flags( char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = 0LL;
  *a2 = 0LL;
  uint64_t v10 = heim_uniq_alloc(0x188uLL, (uint64_t)"krb5-context", (uint64_t)sub_1882C4EFC, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v11 = v10;
    CFIndex v12 = (pthread_mutex_t *)malloc(0x40uLL);
    *(void *)(v11 + 328) = v12;
    if (v12)
    {
      pthread_mutex_init(v12, 0LL);
      pthread_mutex_lock(&stru_18C4D8840);
      if (dword_18C7043F0) {
        *(_DWORD *)(v11 + 360) |= 4u;
      }
      pthread_mutex_unlock(&stru_18C4D8840);
      if ((a1 & 1) != 0)
      {
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t default_config_files = krb5_get_default_config_files(&v16);
        if ((_DWORD)default_config_files)
        {
LABEL_13:
          heim_release((CFTypeRef)v11);
          uint64_t v11 = 0LL;
LABEL_14:
          *a2 = v11;
          return default_config_files;
        }

        uint64_t v14 = (char **)v16;
      }

      uint64_t default_config_files = krb5_set_config_files((void ***)v11, v14);
      krb5_free_config_files((void **)v16);
      if (!(_DWORD)default_config_files)
      {
        heim_base_once_f(&qword_18C4D9CF8, (void *)v11, (dispatch_function_t)sub_1882C5178);
        krb5_init_ets(v11);
        *(void *)(v11 + 168) = 0LL;
        *(_DWORD *)(v11 + 176) = 0;
        krb5_cc_register(v11, (uint64_t)&krb5_fcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_mcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_api_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_temp_api_ops, 1);
        sub_1882F8F90(v11);
        *(_DWORD *)(v11 + 256) = 0;
        *(void *)(v11 + 264) = 0LL;
        krb5_kt_register(v11, (uint64_t)&off_18A219BA0);
        krb5_kt_register(v11, (uint64_t)&off_18A219C08);
        krb5_kt_register(v11, (uint64_t)&off_18A219C70);
        uint64_t default_config_files = hx509_context_init((uint64_t *)(v11 + 376));
        if (!(_DWORD)default_config_files) {
          goto LABEL_14;
        }
      }

      goto LABEL_13;
    }

    heim_release((CFTypeRef)v11);
  }

  return 12LL;
}

void sub_1882C4EFC(uint64_t a1)
{
  krb5_cccol_cursor v2 = *(void **)(a1 + 304);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 312);
  if (v3) {
    free(v3);
  }
  CFTypeID v4 = *(void ***)(a1 + 120);
  if (v4) {
    krb5_free_config_files(v4);
  }
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  heim_release(*(CFTypeRef *)(a1 + 72));
  krb5_config_file_free(a1, *(void ***)(a1 + 136));
  sub_1882FEE10(*(void **)(a1 + 144));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 264));
  krb5_clear_error_message((krb5_context)a1);
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5) {
    krb5_closelog(a1, v5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  if (v6) {
    krb5_closelog(a1, v6);
  }
  krb5_set_extra_addresses((krb5_context)a1, 0LL);
  krb5_set_ignore_addresses((krb5_context)a1, 0LL);
  if (*(void *)(a1 + 376)) {
    hx509_context_free((uint64_t *)(a1 + 376));
  }
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 328));
  free(*(void **)(a1 + 328));
}

uint64_t krb5_get_default_config_files(void **a1)
{
  if (!a1) {
    return 22LL;
  }
  if (issuid()) {
    krb5_cccol_cursor v2 = 0LL;
  }
  else {
    krb5_cccol_cursor v2 = getenv("KRB5_CONFIG");
  }
  if (!v2) {
    krb5_cccol_cursor v2 = off_18C7043C0[0];
  }
  return krb5_prepend_config_files(v2, 0LL, a1);
}

uint64_t krb5_set_config_files(void ***a1, char **a2)
{
  int v17 = 0LL;
  int v18 = 0LL;
  if (a2 && (v16 = 0, (uint64_t v3 = *a2) != 0LL))
  {
    CFTypeID v4 = a2 + 1;
    do
    {
      if (!*v3) {
        break;
      }
      uint64_t v5 = sub_1882C5258(&v17, &v16, v3);
      if (!(_DWORD)v5) {
        uint64_t v5 = krb5_config_parse_file_multi((_krb5_context *)a1, *(v4 - 1), &v18);
      }
      if ((v5 > 0xD || ((1 << v5) & 0x2007) == 0) && (_DWORD)v5 != -1765328248)
      {
        krb5_free_config_files((void **)v17);
        krb5_config_file_free((uint64_t)a1, v18);
        return v5;
      }

      uint64_t v6 = *v4++;
      uint64_t v3 = v6;
    }

    while (v6);
    size_t v7 = (void **)v17;
  }

  else
  {
    size_t v7 = 0LL;
  }

  krb5_free_config_files(a1[15]);
  a1[15] = v7;
  krb5_config_file_free((uint64_t)a1, a1[17]);
  a1[17] = v18;
  return sub_1882C530C((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
}

void krb5_free_config_files(void **a1)
{
  if (a1)
  {
    krb5_cccol_cursor v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = a1 + 1;
      do
      {
        free(v2);
        CFTypeID v4 = *v3++;
        krb5_cccol_cursor v2 = v4;
      }

      while (v4);
    }
  }

  free(a1);
}

void sub_1882C5178(_krb5_context *a1)
{
}

uint64_t krb5_init_ets(uint64_t result)
{
  if (!*(void *)(result + 144))
  {
    uint64_t v1 = result;
    krb5_add_et_list(result, (void (*)(uint64_t))initialize_krb5_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_asn1_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_heim_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_k524_error_table_r);
    return krb5_add_et_list(v1, (void (*)(uint64_t))initialize_hx_error_table_r);
  }

  return result;
}

krb5_error_code krb5_init_context(krb5_context *a1)
{
  return krb5_init_context_flags(0, (uint64_t *)a1, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1882C5258(void **a1, unsigned int *a2, char *__s2)
{
  uint64_t v6 = *a1;
  int v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (const char **)*a1;
    while (1)
    {
      uint64_t result = strcmp(*v9, __s2);
      if (!(_DWORD)result) {
        break;
      }
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    uint64_t v11 = realloc(v6, 8LL * (v7 + 2));
    if (v11 && (uint64_t v12 = v11, *a1 = v11, v13 = strdup(__s2), v14 = *a2, (v12[v14] = v13) != 0LL))
    {
      uint64_t result = 0LL;
      unsigned int v15 = v14 + 1;
      v12[v15] = 0LL;
      *a2 = v15;
    }

    else
    {
      return 12LL;
    }
  }

  return result;
}

uint64_t sub_1882C530C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 80) = krb5_config_get_time_default(a1, 0LL, 300LL, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  *(void *)(a1 + 88) = krb5_config_get_time_default(a1, 0LL, 30LL, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
  *(void *)(a1 + 96) = krb5_config_get_time_default(a1, 0LL, 3LL, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
  *(void *)(a1 + 352) = krb5_config_get_time_default(a1, 0LL, 1200LL, v19, v20, v21, v22, v23, (uint64_t)"libdefaults");
  *(_DWORD *)(a1 + 104) = krb5_config_get_int_default(a1, 0LL, 3LL, v24, v25, v26, v27, v28, (uint64_t)"libdefaults");
  *(void *)(a1 + 184) = krb5_config_get_string_default(a1, 0LL, 0LL, v29, v30, v31, v32, v33, (uint64_t)"libdefaults");
  uint64_t result = sub_1882C633C((char *)a1, (uint64_t)"default_etypes", &v189, v39, v40, v41, v42, v43);
  if (!(_DWORD)result)
  {
    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = v189;
    uint64_t result = sub_1882C633C((char *)a1, (uint64_t)"default_etypes_des", &v189, v45, v46, v47, v48, v49);
    if (!(_DWORD)result)
    {
      free(*(void **)(a1 + 40));
      *(void *)(a1 + 40) = v189;
      uint64_t result = sub_1882C633C((char *)a1, (uint64_t)"default_as_etypes", &v189, v50, v51, v52, v53, v54);
      if (!(_DWORD)result)
      {
        free(*(void **)(a1 + 48));
        *(void *)(a1 + 48) = v189;
        uint64_t result = sub_1882C633C((char *)a1, (uint64_t)"default_tgs_etypes", &v189, v55, v56, v57, v58, v59);
        if (!(_DWORD)result)
        {
          free(*(void **)(a1 + 56));
          *(void *)(a1 + 56) = v189;
          uint64_t result = sub_1882C633C((char *)a1, (uint64_t)"permitted_enctypes", &v189, v60, v61, v62, v63, v64);
          if (!(_DWORD)result)
          {
            free(*(void **)(a1 + 64));
            *(void *)(a1 + 64) = v189;
            if (issuid() || (uint64_t string_default = (uint64_t)getenv("KRB5_KTNAME")) == 0) {
              uint64_t string_default = krb5_config_get_string_default( a1,  0LL,  (uint64_t)"FILE:/etc/krb5.keytab",  v65,  v66,  v67,  v68,  v69,  (uint64_t)"libdefaults");
            }
            *(void *)(a1 + 208) = string_default;
            *(void *)(a1 + 216) = krb5_config_get_string_default( a1,  0LL,  0LL,  v65,  v66,  v67,  v68,  v69,  (uint64_t)"libdefaults");
            *(void *)(a1 + 192) = krb5_config_get_string_default( a1,  0LL,  (uint64_t)"%Y-%m-%dT%H:%M:%S",  v71,  v72,  v73,  v74,  v75,  (uint64_t)"libdefaults");
            *(void *)(a1 + 272) = krb5_config_get_string_default( a1,  0LL,  (uint64_t)"%Y-%m-%d",  v76,  v77,  v78,  v79,  v80,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 200) = krb5_config_get_BOOL_default( a1,  0LL,  0LL,  v81,  v82,  v83,  v84,  v85,  (uint64_t)"libdefaults");
            string = (const char *)krb5_config_get_string(a1, 0LL, v86, v87, v88, v89, v90, v91, (uint64_t)"libdefaults");
            if (string) {
              sub_1882FBB28(*(char **)(a1 + 184), string);
            }
            heim_release(*(CFTypeRef *)(a1 + 72));
            *(void *)(a1 + 72) = 0LL;
            krb5_set_extra_addresses((krb5_context)a1, 0LL);
            strings = (char **)krb5_config_get_strings(a1, 0LL, v93, v94, v95, v96, v97, v98, (uint64_t)"libdefaults");
            v100 = (void **)strings;
            v187 = 0LL;
            uint64_t v188 = 0LL;
            if (strings)
            {
              v101 = *strings;
              if (*strings)
              {
                v102 = strings + 1;
                do
                {
                  if (!krb5_parse_address((_krb5_context *)a1, v101, (uint64_t)&v187))
                  {
                    krb5_add_extra_addresses((_krb5_context *)a1, &v187);
                    krb5_free_addresses((krb5_context)a1, &v187);
                  }

                  v103 = *v102++;
                  v101 = v103;
                }

                while (v103);
              }
            }

            krb5_config_free_strings(v100);
            krb5_set_ignore_addresses((krb5_context)a1, 0LL);
            v110 = (char **)krb5_config_get_strings(a1, 0LL, v104, v105, v106, v107, v108, v109, (uint64_t)"libdefaults");
            v111 = (void **)v110;
            v187 = 0LL;
            uint64_t v188 = 0LL;
            if (v110)
            {
              v112 = *v110;
              if (*v110)
              {
                v113 = v110 + 1;
                do
                {
                  if (!krb5_parse_address((_krb5_context *)a1, v112, (uint64_t)&v187))
                  {
                    krb5_add_ignore_addresses((_krb5_context *)a1, &v187);
                    krb5_free_addresses((krb5_context)a1, &v187);
                  }

                  v114 = *v113++;
                  v112 = v114;
                }

                while (v114);
              }
            }

            krb5_config_free_strings(v111);
            *(_DWORD *)(a1 + 240) = krb5_config_get_BOOL_default( a1,  0LL,  1LL,  v115,  v116,  v117,  v118,  v119,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 252) = krb5_config_get_int_default( a1,  0LL,  0LL,  v120,  v121,  v122,  v123,  v124,  (uint64_t)"libdefaults");
            BOOL BOOL_default = krb5_config_get_BOOL_default( a1,  0LL,  1LL,  v125,  v126,  v127,  v128,  v129,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 244) = BOOL_default;
            *(_DWORD *)(a1 + 244) = krb5_config_get_BOOL_default( a1,  0LL,  BOOL_default,  v131,  v132,  v133,  v134,  v135,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 336) = krb5_config_get_int_default( a1,  0LL,  1400LL,  v136,  v137,  v138,  v139,  v140,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 340) = krb5_config_get_int_default( a1,  0LL,  1024000LL,  v141,  v142,  v143,  v144,  v145,  (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 344) = krb5_config_get_int_default( a1,  0LL,  5LL,  v146,  v147,  v148,  v149,  v150,  (uint64_t)"libdefaults");
            v167 = *(void **)(a1 + 304);
            if (v167) {
              free(v167);
            }
            *(void *)(a1 + 304) = 0LL;
            *(_DWORD *)(a1 + 320) = 0;
            v168 = (void **)krb5_config_get_strings(a1, 0LL, v161, v162, v163, v164, v165, v166, (uint64_t)"logging");
            uint64_t v175 = *(void *)(a1 + 160);
            if (v168)
            {
              v176 = v168;
              if (v175) {
                krb5_closelog(a1, v175);
              }
              krb5_initlog((_krb5_context *)a1, "libkrb5", (char ***)(a1 + 160));
              v177 = (char *)*v176;
              if (*v176)
              {
                v178 = (char **)(v176 + 1);
                do
                {
                  krb5_addlog_dest((_krb5_context *)a1, *(const char ***)(a1 + 160), v177);
                  v179 = *v178++;
                  v177 = v179;
                }

                while (v179);
              }

              krb5_config_free_strings(v176);
            }

            else if (!v175)
            {
              v187 = 0LL;
              if (issuid()
                || (v183 = getenv("KRB5_TRACE")) == 0LL
                || (asprintf((char **)&v187, "0-/FILE:%s", v183), !v187))
              {
                v180 = geteuid() && krb5_homedir_access(0LL)
                     ? (const __CFBoolean *)CFPreferencesCopyAppValue( @"KerberosDebugLevel",  @".GlobalPreferences")
                     : sub_1882C6460();
                v181 = v180;
                if (v180)
                {
                  BOOL valuePtr = 1;
                  CFTypeID v182 = CFGetTypeID(v180);
                  if (v182 == CFBooleanGetTypeID())
                  {
                    BOOL valuePtr = CFBooleanGetValue(v181) != 0;
                  }

                  else
                  {
                    CFTypeID v184 = CFGetTypeID(v181);
                    if (v184 == CFNumberGetTypeID()) {
                      CFNumberGetValue(v181, kCFNumberIntType, &valuePtr);
                    }
                  }

                  CFRelease(v181);
                  asprintf((char **)&v187, "0-%d/OSLOG:normal:libkrb5", valuePtr);
                }
              }

              krb5_initlog((_krb5_context *)a1, "libkrb5", (char ***)(a1 + 160));
              v185 = *(const char ***)(a1 + 160);
              if (v187)
              {
                krb5_addlog_dest((_krb5_context *)a1, v185, (char *)v187);
                free(v187);
              }

              else
              {
                krb5_addlog_dest((_krb5_context *)a1, v185, "0-10/OSLOG:normal:libkrb5");
              }
            }

            uint64_t result = krb5_config_get_string(a1, 0LL, v169, v170, v171, v172, v173, v174, (uint64_t)"libdefaults");
            if (!result)
            {
              if (issuid()) {
                return 0LL;
              }
              uint64_t result = (uint64_t)getenv("KRB5_CHECK_RD_REQ_SERVER");
              if (!result) {
                return result;
              }
            }

            uint64_t result = strcasecmp((const char *)result, "ignore");
            if (!(_DWORD)result)
            {
              *(_DWORD *)(a1 + 360) |= 0x10u;
              return result;
            }

            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_prepend_config_files(const char *a1, char **a2, void **a3)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = a1;
  unsigned int v15 = 0;
  while (1)
  {
    uint64_t v18 = v17;
    uint64_t v5 = rk_strsep_copy(&v18, ":", 0LL, 0LL);
    if (v5 == -1) {
      break;
    }
    size_t v6 = v5 + 1;
    int v7 = (char *)malloc(v5 + 1);
    if (!v7)
    {
      krb5_free_config_files((void **)v16);
      return 12LL;
    }

    uint64_t v8 = v7;
    rk_strsep_copy(&v17, ":", v7, v6);
    uint64_t v9 = sub_1882C5258(&v16, &v15, v8);
    free(v8);
    if ((_DWORD)v9) {
      goto LABEL_5;
    }
  }

  if (a2)
  {
    uint64_t v10 = *a2;
    if (*a2)
    {
      uint64_t v11 = a2 + 1;
      while (1)
      {
        uint64_t v12 = sub_1882C5258(&v16, &v15, v10);
        if ((_DWORD)v12) {
          break;
        }
        uint64_t v13 = *v11++;
        uint64_t v10 = v13;
        if (!v13) {
          goto LABEL_11;
        }
      }

      uint64_t v9 = v12;
LABEL_5:
      krb5_free_config_files((void **)v16);
      return v9;
    }
  }

uint64_t krb5_prepend_config_files_default(const char *a1, void *a2)
{
  size_t v6 = 0LL;
  uint64_t default_config_files = krb5_get_default_config_files(&v7);
  if (!(_DWORD)default_config_files)
  {
    uint64_t default_config_files = krb5_prepend_config_files(a1, (char **)v7, &v6);
    krb5_free_config_files((void **)v7);
    if (!(_DWORD)default_config_files) {
      *a2 = v6;
    }
  }

  return default_config_files;
}

int *krb5_kerberos_enctypes(_krb5_context *a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = dword_18831A338;
  while (!krb5_enctype_valid(a1, (char *)dword_18831A338[v2]))
  {
    if (++v2 == 7) {
      return v3;
    }
  }

  return (int *)&unk_18831A328;
}

uint64_t krb5_set_default_in_tkt_etypes(krb5_context a1, unsigned int *a2)
{
  uint64_t v7 = 0LL;
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v3 = sub_1882C5D14(a1, a2, &v7);
  if ((_DWORD)v3) {
    return v3;
  }
  uint64_t v4 = v7;
  if (!v7)
  {
LABEL_7:
    uint64_t v3 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "entypes not supported");
    return v3;
  }

  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5) {
    free(v5);
  }
  uint64_t v3 = 0LL;
  *((void *)a1 + 4) = v4;
  return v3;
}

uint64_t sub_1882C5D14(_krb5_context *a1, unsigned int *a2, void *a3)
{
  size_t v6 = 0LL;
  while (a2[v6++])
    ;
  uint64_t v8 = calloc(v6, 4uLL);
  if (!v8) {
    return krb5_enomem(a1);
  }
  uint64_t v9 = v8;
  unint64_t v10 = *a2;
  if (!(_DWORD)v10) {
    goto LABEL_12;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = a2 + 1;
  do
  {
    unsigned int v13 = *v12++;
    unint64_t v10 = v13;
  }

  while (v13);
  v9[v11] = 0;
  if (v11)
  {
    uint64_t v14 = 0LL;
    *a3 = v9;
  }

  else
  {
LABEL_12:
    uint64_t v14 = 2529639062LL;
    free(v9);
    krb5_set_error_message(a1, -1765328234, "no valid enctype set");
  }

  return v14;
}

uint64_t krb5_get_default_in_tkt_etypes( _krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((_DWORD)a2)
  {
    case 2:
      uint64_t v9 = (unsigned int *)*((void *)a1 + 6);
      if (v9) {
        goto LABEL_10;
      }
      break;
    case 4:
      uint64_t v9 = (unsigned int *)*((void *)a1 + 7);
      if (v9) {
        goto LABEL_10;
      }
      break;
    case 0xB:
      break;
    default:
      heim_abort( "pdu contant not as expected:pdu_type == KRB5_PDU_AS_REQUEST || pdu_type == KRB5_PDU_TGS_REQUEST || pdu_type == KRB5_PDU_NONE",  a2,  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  v11);
  }

  uint64_t v9 = (unsigned int *)*((void *)a1 + 4);
  if (!v9) {
    uint64_t v9 = (unsigned int *)&unk_18831A358;
  }
LABEL_10:
  uint64_t result = sub_1882C5D14(a1, v9, &v12);
  if (!(_DWORD)result)
  {
    uint64_t result = 0LL;
    *a3 = v12;
  }

  return result;
}

uint64_t krb5_set_use_admin_kdc(uint64_t result, int a2)
{
  *(_DWORD *)(result + 224) = a2;
  return result;
}

uint64_t krb5_get_use_admin_kdc(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t krb5_add_extra_addresses(_krb5_context *a1, krb5_address **a2)
{
  uint64_t v3 = *((void *)a1 + 29);
  if (v3) {
    return krb5_append_addresses(a1, v3, (unsigned int *)a2);
  }
  else {
    return krb5_set_extra_addresses(a1, a2);
  }
}

uint64_t krb5_set_extra_addresses(krb5_context a1, krb5_address **a2)
{
  uint64_t v4 = (krb5_address **)*((void *)a1 + 29);
  if (v4) {
    krb5_free_addresses(a1, v4);
  }
  uint64_t v5 = (krb5_address ***)*((void *)a1 + 29);
  if (a2)
  {
    if (v5) {
      return krb5_copy_addresses(a1, a2, v5);
    }
    uint64_t v5 = (krb5_address ***)malloc(0x10uLL);
    *((void *)a1 + 29) = v5;
    if (v5) {
      return krb5_copy_addresses(a1, a2, v5);
    }
    uint64_t v7 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  else if (v5)
  {
    free(*((void **)a1 + 29));
    uint64_t v7 = 0LL;
    *((void *)a1 + 29) = 0LL;
  }

  else
  {
    return 0LL;
  }

  return v7;
}

uint64_t krb5_get_extra_addresses(_krb5_context *a1, krb5_address ***a2)
{
  uint64_t v3 = (krb5_address *const *)*((void *)a1 + 29);
  if (v3) {
    return krb5_copy_addresses(a1, v3, a2);
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 0LL;
}

uint64_t krb5_add_ignore_addresses(_krb5_context *a1, krb5_address **a2)
{
  uint64_t v3 = *((void *)a1 + 37);
  if (v3) {
    return krb5_append_addresses(a1, v3, (unsigned int *)a2);
  }
  else {
    return krb5_set_ignore_addresses(a1, a2);
  }
}

uint64_t krb5_set_ignore_addresses(krb5_context a1, krb5_address **a2)
{
  uint64_t v4 = (krb5_address **)*((void *)a1 + 37);
  if (v4) {
    krb5_free_addresses(a1, v4);
  }
  uint64_t v5 = (krb5_address ***)*((void *)a1 + 37);
  if (a2)
  {
    if (v5) {
      return krb5_copy_addresses(a1, a2, v5);
    }
    uint64_t v5 = (krb5_address ***)malloc(0x10uLL);
    *((void *)a1 + 37) = v5;
    if (v5) {
      return krb5_copy_addresses(a1, a2, v5);
    }
    uint64_t v7 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  else if (v5)
  {
    free(*((void **)a1 + 37));
    uint64_t v7 = 0LL;
    *((void *)a1 + 37) = 0LL;
  }

  else
  {
    return 0LL;
  }

  return v7;
}

uint64_t krb5_get_ignore_addresses(_krb5_context *a1, krb5_address ***a2)
{
  uint64_t v3 = (krb5_address *const *)*((void *)a1 + 37);
  if (v3) {
    return krb5_copy_addresses(a1, v3, a2);
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 0LL;
}

uint64_t krb5_set_fcache_version(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 252) = a2;
  return 0LL;
}

uint64_t krb5_get_fcache_version(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 252);
  return 0LL;
}

krb5_BOOLean krb5_is_thread_safe(void)
{
  return 1;
}

uint64_t krb5_set_dns_canonicalize_hostname(uint64_t result, int a2)
{
  *(_DWORD *)(result + 360) = *(_DWORD *)(result + 360) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t krb5_get_dns_canonicalize_hostname(uint64_t a1)
{
  return *(_DWORD *)(a1 + 360) & 1;
}

uint64_t krb5_get_kdc_sec_offset(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 108);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 112);
  }
  return 0LL;
}

uint64_t krb5_set_kdc_sec_offset(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 108) = a2;
  if ((a3 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 112) = a3;
  }
  return 0LL;
}

uint64_t krb5_get_max_time_skew(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t krb5_set_max_time_skew(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t _krb5_init_etype( _krb5_context *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5)
  {
    uint64_t result = sub_1882C5D14(a1, a5, a4);
    if ((_DWORD)result) {
      return result;
    }
  }

  else
  {
    uint64_t result = krb5_get_default_in_tkt_etypes(a1, a2, a4, (uint64_t)a4, 0LL, a6, a7, a8);
    if ((_DWORD)result) {
      return result;
    }
  }

  if (a3)
  {
    unsigned int v11 = 0;
    uint64_t v12 = *a4;
    do
      *a3 = v11;
    while (*(_DWORD *)(v12 + 4LL * v11++));
  }

  return 0LL;
}

uint64_t krb5_homedir_access(uint64_t a1)
{
  if (!geteuid() || a1 && (*(_BYTE *)(a1 + 360) & 4) == 0) {
    return 0LL;
  }
  pthread_mutex_lock(&stru_18C4D8840);
  uint64_t v2 = dword_18C7043F0;
  pthread_mutex_unlock(&stru_18C4D8840);
  return v2;
}

uint64_t krb5_set_home_dir_access(uint64_t a1, int a2)
{
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 360);
    uint64_t v4 = (v3 >> 2) & 1;
    if (a2) {
      unsigned int v5 = v3 | 4;
    }
    else {
      unsigned int v5 = v3 & 0xFFFFFFFB;
    }
    *(_DWORD *)(a1 + 360) = v5;
  }

  else
  {
    pthread_mutex_lock(&stru_18C4D8840);
    uint64_t v4 = dword_18C7043F0;
    dword_18C7043F0 = a2;
    pthread_mutex_unlock(&stru_18C4D8840);
  }

  return v4;
}

uint64_t krb5_reload_config(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v22 = 0LL;
  if (a3) {
    *a3 = 0;
  }
  int check = 0;
  if (dword_18C4D8884 == -1 || (!notify_check(dword_18C4D8884, &check) ? (BOOL v5 = check == 0) : (BOOL v5 = 1), v5))
  {
    if (dword_18C4D8888 == -1) {
      return 0LL;
    }
    if (notify_check(dword_18C4D8888, &check) || check == 0) {
      return 0LL;
    }
  }

  *(void *)(a1 + 128) = time(0LL);
  uint64_t v7 = *(char ***)(a1 + 120);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    unsigned int v9 = 1;
    while (1)
    {
      uint64_t v10 = krb5_config_parse_file_multi((_krb5_context *)a1, v8, &v22);
      BOOL v11 = v10 > 0xD || ((1 << v10) & 0x2007) == 0;
      if (v11 && (_DWORD)v10 != -1765328248) {
        break;
      }
      uint64_t v8 = *(char **)(*(void *)(a1 + 120) + 8LL * v9++);
      if (!v8) {
        goto LABEL_26;
      }
    }

    uint64_t v21 = v10;
    krb5_config_file_free(a1, v22);
  }

  else
  {
LABEL_26:
    if (a3) {
      *a3 = 1;
    }
    krb5_config_file_free(a1, *(void ***)(a1 + 136));
    *(void *)(a1 + 136) = v22;
    return sub_1882C530C(a1, v13, v14, v15, v16, v17, v18, v19);
  }

  return v21;
}

uint64_t sub_1882C633C( char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!strings)
  {
    uint64_t v16 = 0LL;
LABEL_15:
    uint64_t v18 = 0LL;
    *a3 = v16;
    return v18;
  }

  BOOL v11 = strings;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  do
  {
    uint64_t v14 = strings[v13++];
    v12 += 4LL;
  }

  while (v14);
  uint64_t v15 = malloc(v12 & 0x3FFFFFFFCLL);
  if (v15)
  {
    uint64_t v16 = v15;
    if (v13 == 1)
    {
      int v17 = 0;
    }

    else
    {
      uint64_t v19 = 0LL;
      int v17 = 0;
      uint64_t v20 = v13 - 1;
      do
      {
        if (!krb5_string_to_enctype(a1, (krb5_enctype *)v11[v19])
          && !krb5_enctype_valid((_krb5_context *)a1, (char *)v22))
        {
          v16[v17++] = v22;
        }

        ++v19;
      }

      while (v20 != v19);
    }

    v16[v17] = 0;
    krb5_config_free_strings(v11);
    goto LABEL_15;
  }

  krb5_config_free_strings(v11);
  uint64_t v18 = 12LL;
  krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  return v18;
}

__CFReadStream *sub_1882C6460()
{
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v1 = CFURLCreateWithFileSystemPath( (CFAllocatorRef)*MEMORY[0x189604DB0],  @"/Library/Managed Preferences/mobile/.GlobalPreferences.plist",  kCFURLPOSIXPathStyle,  0);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  unsigned int v3 = CFReadStreamCreateWithFile(v0, v1);
  CFRelease(v2);
  if (!v3) {
    return v3;
  }
  if (!CFReadStreamOpen(v3))
  {
    uint64_t v7 = v3;
LABEL_11:
    CFRelease(v7);
    return 0LL;
  }

  uint64_t v4 = (void *)CFPropertyListCreateWithStream(v0, v3, 0LL, 0LL, 0LL, &error);
  CFRelease(v3);
  if (!v4) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 != CFDictionaryGetTypeID())
  {
    uint64_t v7 = (__CFReadStream *)v4;
    goto LABEL_11;
  }

  Value = (__CFReadStream *)CFDictionaryGetValue((CFDictionaryRef)v4, @"KerberosDebugLevel");
  unsigned int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v3;
}

uint64_t krb5_copy_host_realm(_krb5_context *a1, const char **a2, char *const **a3)
{
  if (*a2)
  {
    uint64_t v6 = 1LL;
    while (a2[v6++])
      ;
    size_t v8 = v6;
  }

  else
  {
    size_t v8 = 1LL;
  }

  unsigned int v9 = (char *const *)calloc(v8, 8uLL);
  *a3 = v9;
  if (!v9)
  {
LABEL_13:
    uint64_t v16 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v16;
  }

  uint64_t v10 = v9;
  BOOL v11 = *a2;
  if (*a2)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = a2 + 1;
    while (1)
    {
      uint64_t v14 = strdup(v11);
      uint64_t v15 = v12;
      v10[v15] = v14;
      uint64_t v10 = *a3;
      if (!(*a3)[v15]) {
        break;
      }
      BOOL v11 = (const char *)v13[v12++];
      if (!v11) {
        return 0LL;
      }
    }

    krb5_free_host_realm(a1, *a3);
    goto LABEL_13;
  }

  return 0LL;
}

void _krb5_crc_init_table()
{
  if ((byte_18C707020 & 1) == 0)
  {
    for (uint64_t i = 0LL; i != 256; ++i)
    {
      int v1 = -8;
      unsigned int v2 = i;
      do
      {
        if ((v2 & 1) != 0) {
          unsigned int v2 = (v2 >> 1) ^ 0xEDB88320;
        }
        else {
          v2 >>= 1;
        }
      }

      while (!__CFADD__(v1++, 1));
      dword_18C707024[i] = v2;
    }

    byte_18C707020 = 1;
  }

uint64_t _krb5_crc_update(char *a1, uint64_t a2, uint64_t a3)
{
  {
    char v3 = *a1++;
    a3 = dword_18C707024[(v3 ^ a3)] ^ (a3 >> 8);
  }

  return a3;
}

void krb5_free_cred_contents(krb5_context a1, krb5_creds *a2)
{
  *(void *)&a2->krb5_magic magic = 0LL;
  krb5_free_principal(a1, a2->client);
  a2->client = 0LL;
  krb5_free_keyblock_contents(a1, (krb5_keyblock *)&a2->server);
  krb5_data_free(&a2->addresses);
  krb5_data_free(&a2->ticket.data);
  sub_1882FD5C8();
  krb5_free_addresses(a1, (krb5_address **)&a2[1]);
  *(_OWORD *)&a2->krb5_magic magic = 0u;
  *(_OWORD *)&a2->server = 0u;
  *(_OWORD *)&a2->keyblock.length = 0u;
  a2->times = 0u;
  *(_OWORD *)&a2->is_skey = 0u;
  a2->ticket = 0u;
  a2->second_ticket = 0u;
  *(_OWORD *)&a2->authdata = 0u;
  *(_OWORD *)&a2[1].client = 0u;
}

uint64_t krb5_copy_creds_contents(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)a2, (krb5_principal *)a3);
  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 8), (krb5_principal *)(a3 + 8));
  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  uint64_t v6 = krb5_copy_keyblock_contents(a1, (const krb5_keyblock *)(a2 + 16), (krb5_keyblock *)(a3 + 16));
  if ((_DWORD)v6
    || (__int128 v7 = *(_OWORD *)(a2 + 40),
        *(_OWORD *)(a3 + 56) = *(_OWORD *)(a2 + 56),
        *(_OWORD *)(a3 + 40) = v7,
        uint64_t v6 = krb5_data_copy((void *)(a3 + 72), *(const void **)(a2 + 80), *(void *)(a2 + 72)),
        (_DWORD)v6)
    || (uint64_t v6 = krb5_data_copy((void *)(a3 + 88), *(const void **)(a2 + 96), *(void *)(a2 + 88)), (_DWORD)v6)
    || (uint64_t v6 = sub_1882FD5D8(), (_DWORD)v6)
    || (uint64_t v6 = krb5_copy_addresses(a1, (krb5_address *const *)(a2 + 120), (krb5_address ***)(a3 + 120)), (_DWORD)v6))
  {
LABEL_8:
    krb5_free_cred_contents(a1, (krb5_creds *)a3);
  }

  else
  {
    *(_DWORD *)(a3 + 136) = *(_DWORD *)(a2 + 136);
  }

  return v6;
}

krb5_error_code krb5_copy_creds(krb5_context a1, const krb5_creds *a2, krb5_creds **a3)
{
  uint64_t v6 = (krb5_creds *)malloc(0x90uLL);
  if (v6)
  {
    *(_OWORD *)&v6->authdata = 0u;
    *(_OWORD *)&v6[1].client = 0u;
    v6->ticket = 0u;
    v6->second_ticket = 0u;
    v6->times = 0u;
    *(_OWORD *)&v6->is_skey = 0u;
    *(_OWORD *)&v6->server = 0u;
    *(_OWORD *)&v6->keyblock.length = 0u;
    *(_OWORD *)&v6->krb5_magic magic = 0u;
    *a3 = v6;
    return krb5_copy_creds_contents(a1, (uint64_t)a2, (uint64_t)v6);
  }

  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }

void krb5_free_creds(krb5_context a1, krb5_creds *a2)
{
}

uint64_t krb5_compare_creds(krb5_context a1, int a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(const krb5_principal_data **)(a3 + 8);
  if (v8)
  {
    unsigned int v9 = *(const krb5_principal_data **)(a4 + 8);
    if ((a2 & 0xA0000000) != 0)
    {
      uint64_t result = krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v8, (uint64_t)v9);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      uint64_t result = krb5_principal_compare(a1, v8, v9);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t result = 1LL;
  }

  BOOL v11 = *(const krb5_principal_data **)a3;
  if (*(void *)a3)
  {
    uint64_t v12 = *(const krb5_principal_data **)a4;
    if (a2 < 0)
    {
      uint64_t result = krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v11, (uint64_t)v12);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      uint64_t result = krb5_principal_compare(a1, v11, v12);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  if ((a2 & 0x40000000) != 0)
  {
    if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a4 + 16)) {
      return 0LL;
    }
    uint64_t result = 1LL;
  }

  if ((a2 & 0x10000000) != 0)
  {
    if (*(_DWORD *)(a3 + 136) != *(_DWORD *)(a4 + 136)) {
      return 0LL;
    }
    uint64_t result = 1LL;
  }

  if ((a2 & 0x8000000) != 0)
  {
    if ((*(_DWORD *)(a3 + 136) & ~*(_DWORD *)(a4 + 136)) != 0) {
      return 0LL;
    }
    uint64_t result = 1LL;
  }

  if ((a2 & 0x4000000) == 0)
  {
    if ((a2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    if (*(void *)(a3 + 64) > *(void *)(a4 + 64) || *(void *)(a3 + 56) > *(void *)(a4 + 56)) {
      return 0LL;
    }
    uint64_t result = 1LL;
    if ((a2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }

  if (*(void *)(a3 + 48) != *(void *)(a4 + 48)
    || *(void *)(a3 + 40) != *(void *)(a4 + 40)
    || *(void *)(a3 + 56) != *(void *)(a4 + 56)
    || *(void *)(a3 + 64) != *(void *)(a4 + 64))
  {
    return 0LL;
  }

  uint64_t result = 1LL;
  if ((a2 & 0x2000000) != 0) {
    goto LABEL_34;
  }
LABEL_23:
  if ((a2 & 0x1000000) == 0) {
    goto LABEL_24;
  }
LABEL_37:
  if (*(_DWORD *)(a3 + 104) != *(_DWORD *)(a4 + 104)) {
    return 0LL;
  }
  if (*(_DWORD *)(a3 + 104))
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    while (1)
    {
      uint64_t v15 = *(void *)(a3 + 112);
      uint64_t v16 = *(void *)(a4 + 112);
      ++v14;
      v13 += 24LL;
      if (v14 >= *(unsigned int *)(a3 + 104))
      {
        uint64_t result = 1LL;
        break;
      }
    }
  }

LABEL_24:
  if ((a2 & 0x800000) == 0) {
    goto LABEL_27;
  }
  uint64_t result = 1LL;
LABEL_27:
  if ((a2 & 0x400000) != 0) {
    return (*(void *)(a3 + 88) != 0LL) ^ (*(void *)(a4 + 88) == 0LL);
  }
  return result;
}

  *(_DWORD *)(a2 + 280) = 0;
  uint64_t inited = _krb5_init_etype(a1, 2LL, (unsigned int *)(a2 + 288), (uint64_t *)(a2 + 296), v22, v27, v28, v29);
  if ((_DWORD)inited)
  {
LABEL_113:
    sub_1882FDA14();
    *(void *)(a2 + 320) = 0LL;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    char *v14 = 0u;
    sub_1882D44E4(a1, a2);
    return inited;
  }

  if (!v23)
  {
    uint64_t v75 = malloc(0x10uLL);
    *(void *)(a2 + 304) = v75;
    if (!v75) {
      goto LABEL_112;
    }
    uint64_t inited = krb5_get_all_client_addrs(a1, (uint64_t)v75);
    if ((_DWORD)inited) {
      goto LABEL_113;
    }
    uint64_t v76 = (void *)(a2 + 304);
    uint64_t v77 = *(_DWORD **)(a2 + 304);
    if (*v77) {
      goto LABEL_118;
    }
    free(v77);
LABEL_117:
    *uint64_t v76 = 0LL;
    goto LABEL_118;
  }

  if (!*(_DWORD *)v23)
  {
    uint64_t v76 = (void *)(a2 + 304);
    goto LABEL_117;
  }

  uint64_t v35 = (krb5_address ***)malloc(0x10uLL);
  *(void *)(a2 + 304) = v35;
  if (!v35) {
    goto LABEL_112;
  }
  uint64_t inited = krb5_copy_addresses(a1, v23, v35);
  if ((_DWORD)inited) {
    goto LABEL_113;
  }
LABEL_118:
  *(void *)(a2 + 216) = 0LL;
  *(void *)(a2 + 312) = 0LL;
  *(void *)(a2 + 320) = 0LL;
  uint64_t v78 = *(_DWORD *)(a2 + 940);
  if ((v78 & 0x140) == 0) {
    *(_DWORD *)(a2 + 940) = v78 | 0x80;
  }
  *(void *)(a2 + 1048) = heim_array_create();
  a7 = v19;
  a4 = v112;
  if (*(void *)(a2 + 360) || *(void *)(a2 + 352) || *(void *)(a2 + 904))
  {
    if (*(void *)(a2 + 376))
    {
LABEL_126:
      sub_1882D6FCC((uint64_t)a1, a2, 17, v79, v80, v81, v82, v83);
      sub_1882D6FCC((uint64_t)a1, a2, 15, v94, v95, v96, v97, v98);
      goto LABEL_127;
    }

    sub_1882D6FCC((uint64_t)a1, a2, 250, v79, v80, v81, v82, v83);
    sub_1882D6FCC((uint64_t)a1, a2, 138, v84, v85, v86, v87, v88);
    sub_1882D6FCC((uint64_t)a1, a2, 2, v89, v90, v91, v92, v93);
  }

  if (*(void *)(a2 + 376)) {
    goto LABEL_126;
  }
LABEL_127:
  uint64_t v15 = 1;
LABEL_5:
  uint64_t v16 = *(_DWORD *)(a2 + 328);
  if (v16 >= 11)
  {
    uint64_t inited = 2529639135LL;
    v110 = *(unsigned int *)(a2 + 328);
    uint64_t v18 = "Looping %d times while getting initial credentials";
LABEL_7:
    krb5_set_error_message(a1, inited, v18, v110);
    return inited;
  }

  uint64_t v36 = v16 + 1;
  *(_DWORD *)(a2 + 328) = v36;
  sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: loop %d", v36);
  if (a3 && *(void *)&a3->magic)
  {
    memset(v116, 0, sizeof(v116));
    sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: processing input");
    if (sub_1882FDC3C())
    {
      v113 = a4;
      sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: got an KRB-ERROR from KDC");
      sub_1882FE060();
      uint64_t v42 = krb5_rd_error(a1, a3, (krb5_error **)(a2 + 504));
      if ((_DWORD)v42)
      {
        uint64_t inited = v42;
        if (*(void *)&a3->magic)
        {
          if (*a3->data == 4) {
            uint64_t inited = 2529639131LL;
          }
          else {
            uint64_t inited = v42;
          }
        }

        uint64_t v43 = "krb5_get_init_creds: failed to read error";
        uint64_t v44 = (uint64_t)a1;
        uint64_t v45 = 5;
        goto LABEL_39;
      }

      uint64_t v57 = (_DWORD *)(a2 + 488);
      sub_1882FD96C();
      *(void *)(a2 + 488) = 0LL;
      *(void *)(a2 + 496) = 0LL;
      if (*(void *)(a2 + 600))
      {
        uint64_t v58 = sub_1882FD94C();
        if (v58) {
          sub_1882DFD2C((uint64_t *)a1, 5, v58, "Failed to decode METHOD-DATA");
        }
      }

      uint64_t inited = sub_1882F9A4C(a1, a2 + 936, a2 + 488, a2 + 504);
      if ((_DWORD)inited) {
        return inited;
      }
      uint64_t inited = krb5_error_from_rd_error(a1, a2 + 504, (uint64_t *)(a2 + 8));
      if (_krb5_have_debug((BOOL)a1))
      {
        error_message = krb5_get_error_message(a1, inited);
        sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: KRB-ERROR %d/%s", inited, error_message);
        krb5_free_error_message(a1, error_message);
      }

      if ((int)inited <= -1765328360)
      {
        if ((_DWORD)inited != -1765328370)
        {
          if ((_DWORD)inited == -1765328361)
          {
            if ((*(_BYTE *)(a2 + 444) & 1) == 0)
            {
              uint64_t v68 = *(void (**)(_krb5_context *, void, void, const char *, void, void))(a2 + 904);
              if (v68)
              {
                *(_BYTE *)(a2 + 444) |= 1u;
                v68(a1, *(void *)(a2 + 912), 0LL, "Password has expired", 0LL, 0LL);
                uint64_t v69 = *(const char **)(a2 + 176);
                if (v69 && !strcmp(v69, "kadmin/changepw")) {
                  return 2529638935LL;
                }
                gettimeofday(&v120, 0LL);
                sub_1883151E4((uint64_t)&v120, (uint64_t)&v121);
                sub_188315184(a2 + 1080, (uint64_t)&v120);
                uint64_t inited = sub_1882D601C( a1,  *(krb5_principal_data **)(a2 + 8),  *(char **)(a2 + 336),  (char *)__s1,  *(krb5_error_code (__cdecl **)(krb5_context, void *, const char *, const char *, int, krb5_prompt[]))(a2 + 904),  *(void **)(a2 + 912),  0LL);
                if ((_DWORD)inited) {
                  return inited;
                }
                gettimeofday(&v121, 0LL);
                krb5_init_creds_set_password(a1, a2, (uint64_t)__s1);
LABEL_133:
                v70 = *(void *)(a2 + 1040);
                if (!v70) {
                  goto LABEL_136;
                }
                uint64_t v71 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v70 + 32) + 48LL);
                if (!v71) {
                  goto LABEL_136;
                }
LABEL_135:
                v71(a1, a2, v70 + 48);
LABEL_136:
                uint64_t v15 = 1;
                goto LABEL_137;
              }
            }
          }

          else if ((_DWORD)inited == -1765328360)
          {
            if ((*(_BYTE *)(a2 + 444) & 2) != 0)
            {
              if (!*v57)
              {
                sub_1882DFCE8((uint64_t)a1, 10, "Disable allow_enc_pa_rep and trying again");
                *(_BYTE *)(a2 + 444) &= ~2u;
                goto LABEL_133;
              }

              uint64_t inited = 2529638936LL;
              uint64_t v43 = "Server send PA data with KRB-ERROR, so not a pre 1.7 MIT KDC and wont retry w/o ENC-PA-REQ";
            }

            else
            {
              uint64_t v64 = *(_DWORD *)(a2 + 940);
              if ((v64 & 0x80) != 0)
              {
                uint64_t inited = 2529638936LL;
                uint64_t v43 = "FAST disabled and got preauth failed";
              }

              else
              {
                if ((v64 & 0x200) != 0)
                {
                  sub_1882DFCE8((uint64_t)a1, 10, "preauth failed with Optimistic FAST, trying w/o FAST");
                  *(_DWORD *)(a2 + 940) = *(_DWORD *)(a2 + 940) & 0xFFFFFD7F | 0x80;
                  goto LABEL_133;
                }

                uint64_t inited = 2529638936LL;
                uint64_t v43 = "Preauth failed";
              }
            }

            uint64_t v44 = (uint64_t)a1;
            uint64_t v45 = 10;
LABEL_39:
            sub_1882DFCE8(v44, v45, v43, v110, v111);
            return inited;
          }

          goto LABEL_89;
        }

        goto LABEL_72;
      }

      if ((int)inited <= -1765328317)
      {
        if ((_DWORD)inited != -1765328359)
        {
          if ((_DWORD)inited == -1765328347 && !*((_DWORD *)a1 + 27))
          {
            krb5_set_real_time(a1, *(void *)(a2 + 528), -1);
            uint64_t v60 = *((_DWORD *)a1 + 27);
            sub_1882DFCE8((uint64_t)a1, 10, "init_creds: err skew updateing kdc offset to %d", v60);
            if (!v60) {
              return 2529638949LL;
            }
            goto LABEL_133;
          }

          goto LABEL_89;
        }

            CFRelease(v29);
            goto LABEL_25;
          }

          uint64_t inited = -1765328361;
          if (v28) {
            goto LABEL_24;
          }
        }
      }

    sub_1882FDE80();
  }

  return v9;
}

      uint64_t v33 = sub_188313034();
      *(void *)a11 = v33;
      uint64_t v34 = malloc(v33);
      *(void *)(a11 + 8) = v34;
      if (v34)
      {
        uint64_t v35 = sub_188313014();
        if (!(_DWORD)v35)
        {
          if (*(void *)a11 != v53) {
            sub_188303AB8("internal ASN.1 encoder error", v36, v37, v38, v39, v40, v41, v42, v44[0]);
          }
          int v17 = 0LL;
          goto LABEL_30;
        }

        int v17 = v35;
        free(*(void **)(a11 + 8));
        *(void *)(a11 + 8) = 0LL;
        goto LABEL_29;
      }
    }

      if (*(void *)(*(void *)(v5[30] + 8LL) + 40 * v48 + 16)) {
        uint64_t v51 = 3;
      }
      else {
        uint64_t v51 = 2;
      }
      sub_1883106FC((uint64_t)a2, v51, (uint64_t)"don't know what ", v42, v43, v44, v45, v46, v77);
      if (*(void *)(*(void *)(v5[30] + 8LL) + 40 * v48 + 16)) {
        sub_1883106FC((uint64_t)a2, v51, (uint64_t)"and is CRITICAL ", v52, v53, v54, v55, v56, v78);
      }
      if ((*a2 & v51) != 0) {
        hx509_oid_print( *(void *)(v5[30] + 8LL) + 40 * v48,  (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_1883107B0,  (uint64_t)a2);
      }
      sub_1883106FC((uint64_t)a2, v51, (uint64_t)" is\n", v52, v53, v54, v55, v56, v78);
      goto LABEL_32;
    }
  }

  else
  {
    sub_1883106FC((uint64_t)a2, 2, (uint64_t)"no extentions\n", v42, v43, v44, v45, v46, v77);
  }

uint64_t krb5_enctype_keysize(_krb5_context *a1, char *a2, void *a3)
{
  uint64_t v3 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return sub_1882C6B9C(a1, a2);
  }
  for (uint64_t i = &off_18C704548; *(_DWORD *)*i != (_DWORD)a2; ++i)
  {
    if (!--v3) {
      return sub_1882C6B9C(a1, a2);
    }
  }

  *a3 = *(void *)(*((void *)*i + 5) + 24LL);
  return 0LL;
}

_DWORD *sub_1882C6B58(int a1)
{
  uint64_t v1 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return 0LL;
  }
  for (uint64_t i = &off_18C704548; ; ++i)
  {
    uint64_t v3 = (_DWORD *)*i;
    if (*(_DWORD *)*i == a1) {
      break;
    }
    if (!--v1) {
      return 0LL;
    }
  }

  return v3;
}

uint64_t sub_1882C6B9C(_krb5_context *a1, char *a2)
{
  uint64_t v3 = krb5_enctype_to_string((krb5_enctype)a1, a2, (size_t)&v6);
  if (!(_DWORD)v3)
  {
    uint64_t v3 = 2529639062LL;
    uint64_t v4 = v6;
    krb5_set_error_message(a1, -1765328234, "Encryption type %s not supported", v6);
    free(v4);
  }

  return v3;
}

uint64_t krb5_enctype_keybits(_krb5_context *a1, char *a2, void *a3)
{
  uint64_t v3 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return sub_1882C6B9C(a1, a2);
  }
  for (uint64_t i = &off_18C704548; *(_DWORD *)*i != (_DWORD)a2; ++i)
  {
    if (!--v3) {
      return sub_1882C6B9C(a1, a2);
    }
  }

  *a3 = *(void *)(*((void *)*i + 5) + 16LL);
  return 0LL;
}

uint64_t krb5_generate_random_keyblock(_krb5_context *a1, char *a2, uint64_t a3)
{
  int v3 = (int)a2;
  uint64_t v5 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return sub_1882C6B9C(a1, a2);
  }
  for (uint64_t i = &off_18C704548; ; ++i)
  {
    size_t v8 = (_DWORD *)*i;
    if (*(_DWORD *)*i == (_DWORD)a2) {
      break;
    }
    if (!--v5) {
      return sub_1882C6B9C(a1, a2);
    }
  }

  uint64_t result = krb5_data_alloc((size_t *)(a3 + 8), *(void *)(*((void *)v8 + 5) + 24LL));
  if (!(_DWORD)result)
  {
    *(_DWORD *)a3 = v3;
    uint64_t v10 = *(void (**)(_krb5_context *, uint64_t))(*((void *)v8 + 5) + 40LL);
    if (v10) {
      v10(a1, a3);
    }
    else {
      krb5_generate_random_block(*(void *)(a3 + 16), *(void *)(a3 + 8));
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_1882C6D18( uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  size_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = (char *)malloc(v14 + a4);
  if (v15)
  {
    uint64_t v16 = v15;
    int v17 = (char *)malloc(*(void *)(a2 + 24) + v14);
    if (!v17)
    {
      uint64_t v22 = 12LL;
      uint64_t v18 = v16;
LABEL_12:
      free(v18);
      return v22;
    }

    uint64_t v18 = v17;
    memset(v16, 54, v14);
    memset(v18, 92, v14);
    uint64_t v19 = *a6;
    size_t v20 = *(void *)(*a6 + 8);
    if (v20 <= v14)
    {
      uint64_t v21 = (char **)(v19 + 16);
      if (!v20)
      {
LABEL_11:
        uint64_t v27 = *(void *)(a2 + 16);
        memcpy(&v16[v27], a3, a4);
        (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t, uint64_t))(a2 + 40))( a1,  a6,  v16,  v27 + a4,  a5,  a7);
        uint64_t v28 = *(void *)(a2 + 16);
        memcpy(&v18[v28], *(const void **)(a7 + 16), *(void *)(a7 + 8));
        (*(void (**)(uint64_t, uint64_t *, char *, uint64_t, uint64_t, uint64_t))(a2 + 40))( a1,  a6,  v18,  *(void *)(a2 + 24) + v28,  a5,  a7);
        uint64_t v29 = *(void *)(a2 + 16);
        bzero(v16, v29 + a4);
        free(v16);
        bzero(v18, *(void *)(a2 + 24) + v29);
        uint64_t v22 = 0LL;
        goto LABEL_12;
      }
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t *, void))(a2 + 40))(a1, a6, *(void *)(v19 + 16));
      uint64_t v21 = (char **)(a7 + 16);
      size_t v20 = *(void *)(a7 + 8);
      if (!v20) {
        goto LABEL_11;
      }
    }

    uint64_t v23 = *v21;
    uint64_t v24 = v16;
    uint64_t v25 = v18;
    do
    {
      *v24++ ^= *v23;
      char v26 = *v23++;
      *v25++ ^= v26;
      --v20;
    }

    while (v20);
    goto LABEL_11;
  }

  return 12LL;
}

uint64_t krb5_hmac(krb5_context a1, int a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    uint64_t v11 = 2529639065LL;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
  }

  else
  {
    unsigned int v9 = (_DWORD **)&off_18C704508;
    while (1)
    {
      uint64_t v10 = *v9;
      if (**v9 == a2) {
        break;
      }
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }

    uint64_t v13 = a6;
    size_t v14 = 0LL;
    uint64_t v11 = sub_1882C6D18((uint64_t)a1, (uint64_t)v10, a3, a4, a5, &v13, a7);
    if (v14) {
      krb5_free_data(a1, v14);
    }
  }

  return v11;
}

_DWORD *sub_1882C6F90(int a1)
{
  uint64_t v1 = dword_18C704540;
  if (dword_18C704540 < 1) {
    return 0LL;
  }
  for (uint64_t i = &off_18C704508; ; ++i)
  {
    int v3 = (_DWORD *)*i;
    if (*(_DWORD *)*i == a1) {
      break;
    }
    if (!--v1) {
      return 0LL;
    }
  }

  return v3;
}

uint64_t sub_1882C6FD4(_krb5_context *a1, uint64_t *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v9 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v10 = (_DWORD **)&off_18C704508;
    while (1)
    {
      uint64_t v11 = *v10;
      if (**v10 == 14) {
        break;
      }
      ++v10;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }

  uint64_t v14 = 20LL;
  __src = &v16;
  memcpy(*(void **)(a6 + 16), __src, *(void *)(a6 + 8));
  return 0LL;
}

uint64_t sub_1882C70A4(_krb5_context *a1)
{
  uint64_t result = CCDigest();
  if ((_DWORD)result) {
    krb5_abortx(a1, "sha1 checksum failed");
  }
  return result;
}

uint64_t krb5_create_checksum( krb5_context a1, _DWORD **a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    uint64_t v12 = dword_18C704540;
    if (dword_18C704540 >= 1)
    {
      uint64_t v13 = (int **)&off_18C704508;
      do
      {
        uint64_t v14 = *v13;
        if (**v13 == a4) {
          goto LABEL_11;
        }
        ++v13;
      }

      while (--v12);
    }

LABEL_14:
    uint64_t v16 = 2529639065LL;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a4);
    return v16;
  }

  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v14 = (int *)*((void *)*a2 + 7);
  if (!v14)
  {
    uint64_t v14 = (int *)*((void *)*a2 + 6);
    if (!v14) {
      goto LABEL_14;
    }
  }

  a4 = *v14;
LABEL_11:
  if (a4 == -138 && *a2[1] == 23)
  {
    unsigned int v18 = a3;
    sub_1882F70B4((uint64_t)a1, (int *)&v18);
    uint64_t v15 = v18;
  }

  else
  {
    uint64_t v15 = (a3 << 8) | 0x99;
    unsigned int v18 = (a3 << 8) | 0x99;
  }

  return sub_1882C7214(a1, (uint64_t)v14, (uint64_t)a2, v15, a5, a6, a7);
}

      uint64_t v25 = *(unsigned int *)(a2 + 96);
LABEL_15:
      sub_1882D87D8(a1, (uint64_t)v11, v25, v13, v14, v15, v16, v17);
      char v26 = krb5_storage_emem();
      if (v26)
      {
        uint64_t v27 = (uint64_t)v26;
        uint64_t v28 = *a3;
        is_flags = krb5_storage_is_flags((uint64_t)v26, 2);
        uint64_t v30 = *(_WORD *)(v28 + 8);
        if (is_flags) {
          ++v30;
        }
        unsigned int v18 = krb5_store_int16(v27, v30);
        if (!(_DWORD)v18)
        {
          unsigned int v18 = sub_1882D8EB0(v27, *(char **)(v28 + 24));
          if (!(_DWORD)v18)
          {
            if (*(_DWORD *)(v28 + 8))
            {
              uint64_t v35 = 0LL;
              while (1)
              {
                uint64_t v36 = sub_1882D8EB0(v27, *(char **)(*(void *)(v28 + 16) + 8 * v35));
                if ((_DWORD)v36) {
                  break;
                }
              }

              unsigned int v18 = v36;
            }

            else
            {
LABEL_38:
              if (krb5_storage_is_flags(v27, 4) || (unsigned int v18 = krb5_store_int32(v27, *(_DWORD *)v28), !(_DWORD)v18))
              {
                uint64_t v37 = krb5_store_int32(v27, *((_DWORD *)a3 + 10));
                if ((_DWORD)v37)
                {
                  unsigned int v18 = v37;
                  krb5_set_error_message(a1, v37, "Failed storing timpstamp in keytab %s");
                }

                else
                {
                  uint64_t v38 = krb5_store_int8(v27, *((_BYTE *)a3 + 8));
                  if ((_DWORD)v38)
                  {
                    unsigned int v18 = v38;
                    krb5_set_error_message(a1, v38, "Failed storing kvno in keytab %s");
                  }

                  else
                  {
                    uint64_t v39 = sub_1882D8DE0(a1, (const char **)v6, v27, (__int16 *)a3 + 8);
                    if ((_DWORD)v39)
                    {
                      unsigned int v18 = v39;
                    }

                    else
                    {
                      if ((*(_BYTE *)(v6 + 8) & 1) != 0
                        || (uint64_t v40 = krb5_store_int32(v27, *((_DWORD *)a3 + 2)), !(_DWORD)v40)
                        && (uint64_t v40 = krb5_store_uint32(v27, *((unsigned int *)a3 + 11)), !(_DWORD)v40))
                      {
                        unsigned int v18 = krb5_storage_to_data(v27, v49);
                        krb5_storage_free(v27);
                        if (!(_DWORD)v18)
                        {
                          while (1)
                          {
                            if (krb5_ret_int32((uint64_t)v11, &v48) == -1765328202)
                            {
                              uint64_t v42 = v49[0];
                              uint64_t v48 = v49[0];
                              goto LABEL_59;
                            }

                            uint64_t v41 = v48;
                            if ((v48 & 0x80000000) != 0)
                            {
                              uint64_t v48 = -v48;
                            }

                            krb5_storage_seek((uint64_t)v11);
                          }

                          krb5_storage_seek((uint64_t)v11);
                          uint64_t v42 = v48;
LABEL_59:
                          unsigned int v18 = krb5_store_int32((uint64_t)v11, v42);
                          if (krb5_storage_write((uint64_t)v11) < 0)
                          {
                            uint64_t v43 = __error();
                            unsigned int v18 = *v43;
                            uint64_t v44 = *(const char **)v6;
                            uint64_t v45 = strerror(*v43);
                            krb5_set_error_message(a1, v18, "Failed writing keytab block in keytab %s: %s", v44, v45);
                          }

                          bzero((void *)v49[1], v49[0]);
                          krb5_data_free(v49);
                          goto LABEL_30;
                        }

                        uint64_t v46 = *(const char **)v6;
                        uint64_t v19 = "Failed converting keytab entry to memory block for keytab %s";
                        goto LABEL_28;
                      }

                      unsigned int v18 = v40;
                      krb5_set_error_message(a1, v40, "Failed storing extended kvno in keytab %s");
                    }
                  }
                }

                goto LABEL_21;
              }
            }
          }
        }

        krb5_set_error_message(a1, v18, "Failed storing principal in keytab %s");
LABEL_21:
        krb5_storage_free(v27);
        goto LABEL_30;
      }

      uint64_t v19 = "malloc: out of memory";
LABEL_26:
      unsigned int v18 = 12LL;
      uint64_t v32 = a1;
      uint64_t v33 = 12;
LABEL_29:
      krb5_set_error_message(v32, v33, v19, v46, v47);
      goto LABEL_30;
    }

    goto LABEL_9;
  }

  size_t v20 = open(*(const char **)v6, 16779778, 384LL);
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v8 = v20;
    sub_1882FA158(v20);
    uint64_t v9 = sub_1882CC740(a1, v8, 1);
    if (!(_DWORD)v9)
    {
      uint64_t v11 = krb5_storage_from_fd(v8);
      krb5_storage_set_eof_code((uint64_t)v11, -1765328202);
      uint64_t v24 = sub_1882D8D8C(a2, (uint64_t)v11);
      if ((_DWORD)v24)
      {
        unsigned int v18 = v24;
LABEL_30:
        krb5_storage_free((uint64_t)v11);
        sub_1882CC854(a1, v8);
        goto LABEL_31;
      }

      goto LABEL_14;
    }

  *((void *)v14 + 4) = a3;
  if (*v8 == 91)
  {
    unsigned int v18 = strchr(v8, 93);
    if (v18)
    {
      uint64_t v19 = v18;
      size_t v20 = v8 + 1;
      uint64_t v21 = (size_t)&v18[~(unint64_t)v8];
      memcpy(v14 + 24, v20, v21);
      *((_BYTE *)v14 + v21 + 48) = 0;
      uint64_t v23 = v19[1];
      uint64_t v22 = v19 + 1;
      uint64_t v24 = v23 == 58;
      if (v23 == 58) {
        uint64_t v8 = v22 + 1;
      }
      else {
        uint64_t v8 = v22;
      }
      if (v24) {
        uint64_t v25 = v22 + 1;
      }
      else {
        uint64_t v25 = 0LL;
      }
LABEL_25:
      uint64_t v8 = strchr(v8, 47);
      if (!v8) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }

  uint64_t v25 = (const char *)strcspn(v8, ":/");
  if (!v25)
  {
    uint64_t v28 = strlen(v8);
    memcpy(v14 + 24, v8, v28 + 1);
LABEL_28:
    uint64_t v27 = *v8;
    goto LABEL_30;
  }

  memcpy(v14 + 24, v8, (size_t)v25);
  v25[(void)v14 + 48] = 0;
  char v26 = &v25[(void)v8];
  uint64_t v27 = v25[(void)v8];
  if (v27 == 58)
  {
    uint64_t v25 = v26 + 1;
    goto LABEL_25;
  }

  uint64_t v25 = 0LL;
  uint64_t v8 = (char *)v26;
LABEL_30:
  if (v27 == 47) {
    *((void *)v14 + 5) = strdup(v8 + 1);
  }
LABEL_32:
  rk_strlwr((unsigned __int8 *)v14 + 48);
  v14[3] = v7;
  void v14[2] = v7;
  if (v25)
  {
    if (*v25)
    {
      void v14[2] = strtol(v25, &__endptr, 0);
      if (__endptr == v25)
      {
        uint64_t v30 = (void *)*((void *)v14 + 5);
        if (v30) {
          free(v30);
        }
        free(v14);
        return 12LL;
      }
    }
  }

  if (a6) {
    void v14[2] = a6;
  }
  sub_1882DB7E0(a1, a2, (int *)v14);
  return 0LL;
}

    krb5_storage_free(v12);
    if (inptr) {
      krb5_crypto_destroy(a1, (uint64_t)inptr);
    }
    return v3;
  }

  return krb5_enomem(a1);
}

    krb5_free_cred_contents(a1, (krb5_creds *)creds);
    goto LABEL_15;
  }

  return init_creds_opt_alloc;
}

  uint64_t v17 = sub_188313164();
  *(void *)a6 = v17;
  unsigned int v18 = malloc(v17);
  *(void *)(a6 + 8) = v18;
  if (!v18)
  {
    uint64_t v11 = 12LL;
    goto LABEL_18;
  }

  uint64_t v19 = sub_188313144();
  if ((_DWORD)v19)
  {
    uint64_t v11 = v19;
    free(*(void **)(a6 + 8));
    *(void *)(a6 + 8) = 0LL;
LABEL_18:
    sub_188313174();
    goto LABEL_19;
  }

  sub_188313174();
  if (v31 != *(void *)a6) {
    sub_188303AB8("internal ASN.1 encoder error", v21, v22, v23, v24, v25, v26, v27, v28);
  }
  return 0LL;
}

uint64_t sub_1882C7214( krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x40) != 0)
  {
    uint64_t v14 = 2529639065LL;
    krb5_clear_error_message(a1);
    return v14;
  }

  if (!a3 && (v8 & 1) != 0)
  {
    uint64_t v14 = 2529639065LL;
    krb5_set_error_message( a1,  -1765328231,  "Checksum type %s is keyed but no crypto context (key) was passed in",  *(const char **)(a2 + 8));
    return v14;
  }

  if ((v8 & 1) != 0)
  {
    uint64_t v14 = sub_1882CA0A8(a1, a3, a4, a2, &v16);
    if ((_DWORD)v14) {
      return v14;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  *(_DWORD *)a7 = *(_DWORD *)a2;
  uint64_t v14 = krb5_data_alloc((size_t *)(a7 + 8), *(void *)(a2 + 24));
  if ((_DWORD)v14) {
    return v14;
  }
  return (*(uint64_t (**)(krb5_context, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40))( a1,  v16,  a5,  a6,  a4,  a7);
}

krb5_error_code krb5_verify_checksum( krb5_context context, krb5_cksumtype ctype, const krb5_checksum *cksum, krb5_const_pointer in, size_t in_length, krb5_const_pointer seed, size_t seed_length)
{
  int v8 = *(_DWORD *)seed;
  uint64_t v9 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    krb5_error_code v15 = -1765328231;
    krb5_set_error_message(context, -1765328231, "checksum type %d not supported", *(_DWORD *)seed);
  }

  else
  {
    uint64_t v13 = *(void *)&ctype;
    uint64_t v14 = (_DWORD **)&off_18C704508;
    while (**v14 != v8)
    {
      ++v14;
      if (!--v9) {
        goto LABEL_5;
      }
    }

    if (v8 == -138 && **(_DWORD **)(*(void *)&ctype + 8LL) == 23)
    {
      unsigned int v18 = cksum;
      sub_1882F70B4((uint64_t)context, (int *)&v18);
      uint64_t v16 = v18;
    }

    else
    {
      uint64_t v16 = ((_DWORD)cksum << 8) | 0x99u;
      unsigned int v18 = v16;
    }

    return sub_1882C7438(context, v13, v16, (uint64_t)in, in_length, (unsigned int *)seed);
  }

  return v15;
}

uint64_t sub_1882C7438(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = a1;
  int v7 = *a6;
  uint64_t v8 = dword_18C704540;
  if (dword_18C704540 < 1) {
    goto LABEL_14;
  }
  uint64_t v14 = (_DWORD **)&off_18C704508;
  while (1)
  {
    krb5_error_code v15 = *v14;
    if (**v14 == v7) {
      break;
    }
    ++v14;
    if (!--v8) {
      goto LABEL_14;
    }
  }

  int v16 = v15[8];
  if ((v16 & 0x40) != 0)
  {
LABEL_14:
    uint64_t v19 = 2529639065LL;
    uint64_t v27 = *a6;
    uint64_t v21 = "checksum type %d not supported";
LABEL_15:
    krb5_error_code v22 = -1765328231;
LABEL_16:
    krb5_set_error_message(a1, v22, v21, v27, v28, v29);
    return v19;
  }

  uint64_t v17 = (const char **)(a6 + 2);
  if (*((void *)v15 + 3) != *((void *)a6 + 1))
  {
    krb5_clear_error_message(a1);
    uint64_t v19 = 2529638943LL;
    uint64_t v28 = *v17;
    uint64_t v29 = *((void *)v15 + 3);
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v21 = "Decrypt integrity check failed for checksum type %s, length was %u, expected %u";
LABEL_19:
    a1 = v6;
    krb5_error_code v22 = v19;
    goto LABEL_16;
  }

  if ((v16 & 1) == 0)
  {
    uint64_t v32 = 0LL;
    goto LABEL_10;
  }

  if (!a2)
  {
    uint64_t v19 = 2529639065LL;
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v21 = "Checksum type %s is keyed but no crypto context (key) was passed in";
    goto LABEL_15;
  }

  uint64_t v24 = *(_DWORD **)(*(void *)a2 + 56LL);
  if (v24 && *v24 != v7)
  {
    uint64_t v19 = 2529639065LL;
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v28 = *(const char **)(*(void *)a2 + 8LL);
    uint64_t v21 = "Checksum type %s is keyed, but the key type %s passed didnt have that checksum type as the keyed type";
    goto LABEL_15;
  }

  uint64_t v19 = sub_1882CA0A8(a1, a2, a3, (uint64_t)v15, &v32);
  if ((_DWORD)v19) {
    return v19;
  }
LABEL_10:
  unsigned int v18 = (uint64_t (*)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))*((void *)v15 + 6);
  if (v18)
  {
    uint64_t v19 = v18(v6, v32, a4, a5, a3, a6);
    if ((_DWORD)v19)
    {
      if (a2) {
        size_t v20 = *(const char **)(*(void *)a2 + 8LL);
      }
      else {
        size_t v20 = "(none)";
      }
      uint64_t v27 = *((void *)v15 + 1);
      uint64_t v28 = v20;
      uint64_t v21 = "Decrypt integrity check failed for checksum type %s, key type %s";
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v19 = krb5_data_alloc(v31, *((void *)v15 + 3));
    if (!(_DWORD)v19)
    {
      uint64_t v25 = (*((uint64_t (**)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, char *))v15 + 5))( v6,  v32,  a4,  a5,  a3,  v30);
      if ((_DWORD)v25)
      {
        uint64_t v19 = v25;
      }

      else if (krb5_data_ct_cmp((uint64_t)v31, (uint64_t)v17))
      {
        if (a2) {
          char v26 = *(const char **)(*(void *)a2 + 8LL);
        }
        else {
          char v26 = "(unkeyed)";
        }
        uint64_t v19 = 2529638943LL;
        krb5_set_error_message( v6,  -1765328353,  "Decrypt integrity check failed for checksum type %s, key type %s",  *((const char **)v15 + 1),  v26);
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      krb5_data_free(v31);
    }
  }

  return v19;
}

uint64_t krb5_crypto_get_checksum_type(_krb5_context *a1, uint64_t a2, _DWORD *a3)
{
  if (a2 && ((int v3 = *(_DWORD **)(*(void *)a2 + 56LL)) != 0LL || (int v3 = *(_DWORD **)(*(void *)a2 + 48LL)) != 0LL))
  {
    uint64_t v4 = 0LL;
    *a3 = *v3;
  }

  else
  {
    uint64_t v4 = 2529639065LL;
    krb5_set_error_message(a1, -1765328231, "checksum type not found");
  }

  return v4;
}

uint64_t krb5_checksumsize(_krb5_context *a1, int a2, void *a3)
{
  uint64_t v3 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    uint64_t v5 = 2529639065LL;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
  }

  else
  {
    uint64_t v4 = &off_18C704508;
    while (*(_DWORD *)*v4 != a2)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }

    uint64_t v5 = 0LL;
    *a3 = *((void *)*v4 + 3);
  }

  return v5;
}

uint64_t krb5_checksum_is_keyed(uint64_t a1, int a2)
{
  uint64_t v2 = dword_18C704540;
  if (dword_18C704540 < 1) {
    return 0LL;
  }
  for (uint64_t i = &off_18C704508; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 0LL;
    }
  }

  return *((_DWORD *)*i + 8) & 1;
}

uint64_t krb5_checksum_is_collision_proof(uint64_t a1, int a2)
{
  uint64_t v2 = dword_18C704540;
  if (dword_18C704540 < 1) {
    return 0LL;
  }
  for (uint64_t i = &off_18C704508; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 0LL;
    }
  }

  return (*((_DWORD *)*i + 8) >> 1) & 1;
}

uint64_t krb5_checksum_disable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639065LL;
    if (a1) {
      krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
    }
  }

  else
  {
    uint64_t v3 = &off_18C704508;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }

    uint64_t v4 = 0LL;
    *((_DWORD *)*v3 + 8) |= 0x40u;
  }

  return v4;
}

krb5_error_code krb5_enctype_to_string(krb5_enctype a1, char *a2, size_t a3)
{
  uint64_t v4 = *(_krb5_context **)&a1;
  uint64_t v5 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    if (dword_18C7045B0 < 1) {
      goto LABEL_16;
    }
    int v7 = (const char **)&off_18C704588;
    unint64_t v8 = 1LL;
    do
    {
      if (*((_DWORD *)v7 - 2) == (_DWORD)a2) {
        uint64_t v9 = *v7;
      }
      else {
        uint64_t v9 = 0LL;
      }
      v7 += 2;
      ++v8;
    }

    while (!v9);
    if (!v9)
    {
LABEL_16:
      krb5_error_code v11 = -1765328234;
      krb5_set_error_message(v4, -1765328234, "encryption type %d not supported", (_DWORD)a2);
      *(void *)a3 = 0LL;
      return v11;
    }
  }

  else
  {
    uint64_t v6 = &off_18C704548;
    while (*(_DWORD *)*v6 != (_DWORD)a2)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_5;
      }
    }

    uint64_t v9 = (const char *)*((void *)*v6 + 1);
    if (!v9) {
      goto LABEL_16;
    }
  }

  uint64_t v10 = strdup(v9);
  *(void *)a3 = v10;
  if (v10) {
    return 0;
  }
  krb5_error_code v11 = 12;
  krb5_set_error_message(v4, 12, "malloc: out of memory");
  return v11;
}

krb5_error_code krb5_string_to_enctype(char *a1, krb5_enctype *a2)
{
  uint64_t v5 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    krb5_error_code v9 = -1765328234;
    krb5_set_error_message((krb5_context)a1, -1765328234, "encryption type %s not supported", (const char *)a2);
  }

  else
  {
    uint64_t v6 = v2;
    int v7 = &off_18C704548;
    while (1)
    {
      unint64_t v8 = *v7;
      ++v7;
      if (!--v5) {
        goto LABEL_5;
      }
    }

    krb5_error_code v9 = 0;
    *uint64_t v6 = *v8;
  }

  return v9;
}

uint64_t krb5_enctype_valid(_krb5_context *a1, char *a2)
{
  uint64_t v2 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    if (a1) {
      return sub_1882C6B9C(a1, a2);
    }
    return 2529639062LL;
  }

  else
  {
    uint64_t v3 = (const char ***)&off_18C704548;
    while (1)
    {
      uint64_t v4 = *v3;
      if (*(_DWORD *)*v3 == (_DWORD)a2) {
        break;
      }
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }

    if (((_BYTE)v4[8] & 0x40) != 0)
    {
      uint64_t v6 = 2529639062LL;
      if (a1) {
        krb5_set_error_message(a1, -1765328234, "encryption type %s is disabled", v4[1]);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

uint64_t krb5_cksumtype_valid(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_18C704540;
  if (dword_18C704540 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639065LL;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported");
  }

  else
  {
    uint64_t v3 = &off_18C704508;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }

    if ((*((_BYTE *)*v3 + 32) & 0x40) != 0)
    {
      uint64_t v4 = 2529639065LL;
      krb5_set_error_message(a1, -1765328231, "checksum type %s is disabled");
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t krb5_encrypt_iov_ivec( _krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if ((a5 & 0x80000000) != 0) {
    goto LABEL_54;
  }
  uint64_t v7 = *(void *)a2;
  if ((*(_BYTE *)(*(void *)a2 + 64LL) & 4) == 0)
  {
    krb5_clear_error_message(a1);
    return 2529639090LL;
  }

  uint64_t v11 = a4;
  if (!a5) {
    return 2529639102LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = (void *)(a4 + 8);
  uint64_t v14 = a5;
  do
  {
    if (*((_DWORD *)v13 - 2) == 2) {
      v12 += *v13;
    }
    v13 += 3;
    --v14;
  }

  while (v14);
  uint64_t v15 = *(void *)(v7 + 32);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v12 + v15 + *(void *)(v7 + 24) - 1) & -*(void *)(v7 + 24);
  size_t v18 = v17 - (v12 + v15);
  uint64_t v19 = (uint64_t *)(a4 + 8);
  uint64_t v20 = a5;
  while (*((_DWORD *)v19 - 2) != 1)
  {
    v19 += 3;
    if (!--v20) {
      return 2529639102LL;
    }
  }

  if (*v19 != v15) {
    return 2529639102LL;
  }
  uint64_t v57 = a1;
  size_t __n = *(void *)(*(void *)(v7 + 56) + 24LL);
  size_t v60 = v18;
  size_t v61 = v17;
  krb5_generate_random_block(v19[1], v15);
  size_t v21 = v61;
  uint64_t v22 = a5;
  uint64_t v23 = v11;
  while (*(_DWORD *)v23 != 4)
  {
    v23 += 24LL;
    if (!--v22)
    {
      if (v61 != v16) {
        return 2529639102LL;
      }
LABEL_22:
      uint64_t v23 = 0LL;
      goto LABEL_24;
    }
  }

  if (*(void *)(v23 + 8) < v60) {
    return 2529639102LL;
  }
  *(void *)(v23 + 8) = v60;
  if (v61 == v16) {
    goto LABEL_22;
  }
  memset(*(void **)(v23 + 16), v60, v60);
  size_t v21 = v61;
LABEL_24:
  uint64_t v24 = (void **)(v11 + 16);
  uint64_t v25 = a5;
  while (*((_DWORD *)v24 - 4) != 5)
  {
    v24 += 3;
    if (!--v25) {
      return 2529639102LL;
    }
  }

  uint64_t v55 = a6;
  uint64_t v8 = 2529639102LL;
  size_t v26 = v21;
  if (a5)
  {
    uint64_t v27 = (void *)(v11 + 8);
    uint64_t v28 = a5;
    size_t v26 = v21;
    do
    {
      if (*((_DWORD *)v27 - 2) == 3) {
        v26 += *v27;
      }
      v27 += 3;
      --v28;
    }

    while (v28);
  }

  uint64_t v52 = a5;
  uint64_t v54 = v26;
  uint64_t v29 = (char *)malloc(v26);
  uint64_t v30 = *v19;
  memcpy(v29, (const void *)v19[1], *v19);
  uint64_t v53 = v29;
  uint64_t v31 = &v29[v30];
  if (a5)
  {
    uint64_t v32 = v11 + 8;
    uint64_t v33 = a5;
    do
    {
      if ((*(_DWORD *)(v32 - 8) & 0xFFFFFFFE) == 2)
      {
        uint64_t v34 = v11;
        uint64_t v35 = v31;
        memcpy(v31, *(const void **)(v32 + 8), *(void *)v32);
        uint64_t v36 = v35;
        uint64_t v11 = v34;
        uint64_t v31 = &v36[*(void *)v32];
      }

      v32 += 24LL;
      --v33;
    }

    while (v33);
  }

  if (v23) {
    bzero(v31, *(void *)(v23 + 8));
  }
  uint64_t v8 = sub_1882C7214(v57, *(void *)(v7 + 56), a2, (a3 << 8) | 0x55, (uint64_t)v53, v54, (uint64_t)v63);
  free(v53);
  if ((_DWORD)v8) {
    return v8;
  }
  if (v64 != __n)
  {
    sub_1882FD854();
    a1 = v57;
LABEL_54:
    krb5_clear_error_message(a1);
    return 2529639090LL;
  }

  memcpy(*v24, __src, __n);
  sub_1882FD854();
  uint64_t v37 = (char *)malloc(v61);
  if (!v37) {
    return 12LL;
  }
  uint64_t v38 = v37;
  size_t v39 = *v19;
  memcpy(v37, (const void *)v19[1], *v19);
  __na = v38;
  uint64_t v40 = &v38[v39];
  if (a5)
  {
    uint64_t v41 = v11 + 8;
    uint64_t v42 = a5;
    do
    {
      if (*(_DWORD *)(v41 - 8) == 2)
      {
        memcpy(v40, *(const void **)(v41 + 8), *(void *)v41);
        v40 += *(void *)v41;
      }

      v41 += 24LL;
      --v42;
    }

    while (v42);
  }

  if (v23) {
    bzero(v40, *(void *)(v23 + 8));
  }
  uint64_t v43 = (pthread_mutex_t *)(a2 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  uint64_t v44 = sub_1882C8098(v57, a2, (a3 << 8) | 0xAA, (uint64_t *)&v62);
  if ((_DWORD)v44)
  {
    uint64_t v8 = v44;
    uint64_t v45 = __na;
LABEL_61:
    free(v45);
    return v8;
  }

  uint64_t v47 = v62;
  uint64_t v8 = sub_1882C8190(v57, v62);
  pthread_mutex_unlock(v43);
  if ((_DWORD)v8)
  {
LABEL_60:
    uint64_t v45 = __na;
    goto LABEL_61;
  }

  uint64_t v48 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, size_t, uint64_t, void, uint64_t))(v7 + 72))( v57,  v47,  __na,  v61,  1LL,  a3,  v55);
  if ((_DWORD)v48)
  {
    uint64_t v8 = v48;
    goto LABEL_60;
  }

  memcpy((void *)v19[1], __na, *v19);
  uint64_t v49 = &__na[*v19];
  if (a5)
  {
    uint64_t v50 = v11 + 8;
    uint64_t v51 = v52;
    do
    {
      if (*(_DWORD *)(v50 - 8) == 2)
      {
        memcpy(*(void **)(v50 + 8), v49, *(void *)v50);
        v49 += *(void *)v50;
      }

      v50 += 24LL;
      --v51;
    }

    while (v51);
  }

  if (v23) {
    memcpy(*(void **)(v23 + 16), v49, v60);
  }
  free(__na);
  return 0LL;
}

uint64_t sub_1882C8098(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if ((int)v8 < 1)
  {
LABEL_5:
    uint64_t v10 = sub_1882CA1C8(a2, a3);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      krb5_copy_keyblock(a1, *(const krb5_keyblock **)(a2 + 8), (krb5_keyblock **)v10);
      _krb5_put_int((uint64_t)v14, a3, 5LL);
      sub_1882C92F8(a1, *(void *)a2, v11, v14, 5uLL);
      uint64_t v12 = 0LL;
      *a4 = v11;
    }

    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
      uint64_t v12 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  else
  {
    krb5_error_code v9 = *(_DWORD ***)(a2 + 32);
    while (**v9 != a3)
    {
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }

    uint64_t v12 = 0LL;
    *a4 = (uint64_t)(*v9 + 2);
  }

  return v12;
}

uint64_t sub_1882C8190(_krb5_context *a1, unsigned int **a2)
{
  uint64_t v4 = (char *)**a2;
  uint64_t v5 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return sub_1882C6B9C(a1, v4);
  }
  for (uint64_t i = &off_18C704548; *(_DWORD *)*i != (_DWORD)v4; ++i)
  {
    if (!--v5) {
      return sub_1882C6B9C(a1, v4);
    }
  }

  uint64_t v8 = *((void *)*i + 5);
  if (!*(void *)(v8 + 48) || a2[1]) {
    return 0LL;
  }
  uint64_t v10 = (size_t *)calloc(1uLL, 0x10uLL);
  a2[1] = (unsigned int *)v10;
  if (v10)
  {
    uint64_t v9 = krb5_data_alloc(v10, *(void *)(v8 + 32));
    if ((_DWORD)v9)
    {
      free(a2[1]);
      a2[1] = 0LL;
    }

    else
    {
      (*(void (**)(_krb5_context *, uint64_t, unsigned int **))(v8 + 48))(a1, v8, a2);
    }
  }

  else
  {
    uint64_t v9 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v9;
}

uint64_t krb5_decrypt_iov_ivec( krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)a2;
  if ((*(_BYTE *)(*(void *)a2 + 64LL) & 4) == 0)
  {
    krb5_clear_error_message(a1);
    return 2529639090LL;
  }

  uint64_t v8 = 2529639102LL;
  if (a5)
  {
    size_t v12 = *(void *)(v7 + 32);
    uint64_t v13 = a5;
    uint64_t v14 = a4 + 8;
    uint64_t v15 = a5;
    while (*(_DWORD *)(v14 - 8) != 1)
    {
      v14 += 24LL;
      if (!--v15) {
        return v8;
      }
    }

    if (*(void *)v14 == v12)
    {
      uint64_t v16 = a4;
      while (*(_DWORD *)v16 != 5)
      {
        v16 += 24LL;
        if (!--v13)
        {
          uint64_t v16 = 0LL;
          break;
        }
      }

      if (*(void *)(v16 + 8) == *(void *)(*(void *)(v7 + 56) + 24LL))
      {
        if (a5 <= 1) {
          uint64_t v17 = 1LL;
        }
        else {
          uint64_t v17 = a5;
        }
        uint64_t v44 = v17;
        size_t v18 = (void *)(a4 + 8);
        size_t v19 = *(void *)(v7 + 32);
        do
        {
          if (*((_DWORD *)v18 - 2) == 2) {
            v19 += *v18;
          }
          v18 += 3;
          --v17;
        }

        while (v17);
        if (v19 % *(void *)(v7 + 24))
        {
          krb5_clear_error_message(a1);
          return v8;
        }

        uint64_t v20 = (char *)malloc(v19);
        if (v20)
        {
          size_t v21 = v20;
          uint64_t v43 = a1;
          memcpy(v20, *(const void **)(v14 + 8), v12);
          uint64_t v42 = v21;
          uint64_t v22 = &v21[v12];
          uint64_t v23 = v44;
          uint64_t v24 = a4 + 8;
          do
          {
            if (*(_DWORD *)(v24 - 8) == 2)
            {
              memcpy(v22, *(const void **)(v24 + 8), *(void *)v24);
              v22 += *(void *)v24;
            }

            v24 += 24LL;
            --v23;
          }

          while (v23);
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v25 = sub_1882C8098(v43, a2, ((_DWORD)a3 << 8) | 0xAAu, (uint64_t *)&v46);
          if ((_DWORD)v25)
          {
            uint64_t v8 = v25;
LABEL_31:
            size_t v26 = v42;
LABEL_32:
            free(v26);
            return v8;
          }

          uint64_t v41 = v46;
          uint64_t v8 = sub_1882C8190(v43, v46);
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
          if ((_DWORD)v8) {
            goto LABEL_31;
          }
          uint64_t v27 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, size_t, void, uint64_t, uint64_t))(v7 + 72))( v43,  v41,  v42,  v19,  0LL,  a3,  a6);
          if ((_DWORD)v27)
          {
            uint64_t v8 = v27;
            size_t v26 = v42;
            goto LABEL_32;
          }

          int v28 = (_DWORD)a3 << 8;
          memcpy(*(void **)(v14 + 8), v42, *(void *)v14);
          uint64_t v29 = &v42[*(void *)v14];
          uint64_t v30 = v44;
          uint64_t v31 = a4 + 8;
          uint64_t v32 = v44;
          do
          {
            if (*(_DWORD *)(v31 - 8) == 2)
            {
              memcpy(*(void **)(v31 + 8), v29, *(void *)v31);
              v29 += *(void *)v31;
            }

            v31 += 24LL;
            --v32;
          }

          while (v32);
          free(v42);
          uint64_t v33 = (void *)(a4 + 8);
          uint64_t v34 = v44;
          do
          {
            if (*((_DWORD *)v33 - 2) == 3) {
              v19 += *v33;
            }
            v33 += 3;
            --v34;
          }

          while (v34);
          uint64_t v35 = malloc(v19);
          if (v35)
          {
            uint64_t v36 = (uint64_t)v35;
            size_t v37 = *(void *)v14;
            memcpy(v35, *(const void **)(v14 + 8), *(void *)v14);
            uint64_t v38 = (char *)(v36 + v37);
            uint64_t v39 = a4 + 8;
            do
            {
              if ((*(_DWORD *)(v39 - 8) & 0xFFFFFFFE) == 2)
              {
                memcpy(v38, *(const void **)(v39 + 8), *(void *)v39);
                v38 += *(void *)v39;
              }

              v39 += 24LL;
              --v30;
            }

            while (v30);
            uint64_t v49 = *(void *)(v16 + 16);
            uint64_t v48 = *(void *)(v16 + 8);
            unsigned int v47 = **(_DWORD **)(v7 + 56);
            uint64_t v8 = sub_1882C7438(v43, a2, v28 | 0x55u, v36, v19, &v47);
            size_t v26 = (void *)v36;
            goto LABEL_32;
          }
        }

        return 12LL;
      }
    }
  }

  return v8;
}

uint64_t krb5_create_checksum_iov( krb5_context a1, _DWORD **a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t checksum = 2529639102LL;
  if (((*a2)[16] & 4) != 0)
  {
    if (a5)
    {
      uint64_t v12 = a5;
      uint64_t v13 = a4 + 8;
      uint64_t v14 = a5;
      while (*(_DWORD *)(v13 - 8) != 6)
      {
        v13 += 24LL;
        if (!--v14) {
          return checksum;
        }
      }

      size_t v15 = 0LL;
      uint64_t v16 = (void *)(a4 + 8);
      uint64_t v17 = a5;
      do
      {
        if ((*(_DWORD *)(v16 - 1) & 0xFFFFFFFE) == 2) {
          v15 += *v16;
        }
        v16 += 3;
        --v17;
      }

      while (v17);
      size_t v18 = (char *)malloc(v15);
      uint64_t v19 = a4 + 8;
      uint64_t v20 = v18;
      do
      {
        if ((*(_DWORD *)(v19 - 8) & 0xFFFFFFFE) == 2)
        {
          memcpy(v20, *(const void **)(v19 + 8), *(void *)v19);
          v20 += *(void *)v19;
        }

        v19 += 24LL;
        --v12;
      }

      while (v12);
      uint64_t checksum = krb5_create_checksum(a1, a2, a3, 0, (uint64_t)v18, v15, (uint64_t)&v23);
      free(v18);
      if (!(_DWORD)checksum)
      {
        if (a6) {
          *a6 = v23;
        }
        size_t v21 = __n;
        if (__n <= *(void *)v13)
        {
          *(void *)uint64_t v13 = __n;
          memcpy(*(void **)(v13 + 8), __src, v21);
          sub_1882FD854();
          return 0LL;
        }

        else
        {
          krb5_set_error_message(a1, -1765328194, "Checksum larger then input buffer");
          sub_1882FD854();
          return 2529639102LL;
        }
      }
    }
  }

  else
  {
    krb5_clear_error_message(a1);
    return 2529639090LL;
  }

  return checksum;
}

uint64_t krb5_verify_checksum_iov( krb5_context a1, uint64_t *a2, const krb5_checksum *a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v7 = 2529639102LL;
  uint64_t v8 = *a2;
  if ((*(_BYTE *)(*a2 + 64) & 4) != 0)
  {
    if (a5)
    {
      krb5_cksumtype v11 = (int)a2;
      uint64_t v12 = a5;
      uint64_t v13 = (void *)(a4 + 16);
      uint64_t v14 = a5;
      while (*((_DWORD *)v13 - 4) != 6)
      {
        v13 += 3;
        if (!--v14) {
          return v7;
        }
      }

      size_t v15 = 0LL;
      uint64_t v16 = (void *)(a4 + 8);
      uint64_t v17 = a5;
      do
      {
        if ((*(_DWORD *)(v16 - 1) & 0xFFFFFFFE) == 2) {
          v15 += *v16;
        }
        v16 += 3;
        --v17;
      }

      while (v17);
      uint64_t v19 = (char *)malloc(v15);
      uint64_t v20 = a4 + 8;
      size_t v21 = v19;
      do
      {
        if ((*(_DWORD *)(v20 - 8) & 0xFFFFFFFE) == 2)
        {
          memcpy(v21, *(const void **)(v20 + 8), *(void *)v20);
          v21 += *(void *)v20;
        }

        v20 += 24LL;
        --v12;
      }

      while (v12);
      int seed = **(_DWORD **)(v8 + 56);
      uint64_t v22 = *v13;
      uint64_t v26 = *(v13 - 1);
      uint64_t v27 = v22;
      uint64_t v7 = krb5_verify_checksum(a1, v11, a3, v19, v15, &seed, v18);
      free(v19);
      if (a6 && !(_DWORD)v7) {
        *a6 = seed;
      }
    }
  }

  else
  {
    krb5_clear_error_message(a1);
    return 2529639090LL;
  }

  return v7;
}

uint64_t krb5_crypto_length(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *(void **)a2;
  if ((*(_BYTE *)(*(void *)a2 + 64LL) & 4) != 0)
  {
    uint64_t v6 = 0LL;
    switch((int)a3)
    {
      case 0:
        uint64_t v6 = 0LL;
        *a4 = 0LL;
        return v6;
      case 1:
        uint64_t v6 = 0LL;
        unint64_t v7 = v4[2];
        goto LABEL_15;
      case 2:
      case 3:
        return v6;
      case 4:
        uint64_t v6 = 0LL;
        unint64_t v7 = v4[3];
        if (v7 <= 1) {
          unint64_t v7 = 0LL;
        }
        goto LABEL_15;
      case 5:
        uint64_t v6 = 0LL;
        unint64_t v7 = *(void *)(v4[7] + 24LL);
        goto LABEL_15;
      case 6:
        uint64_t v8 = v4[7];
        if (!v8) {
          uint64_t v8 = v4[6];
        }
        uint64_t v6 = 0LL;
        unint64_t v7 = *(void *)(v8 + 24);
LABEL_15:
        *a4 = v7;
        break;
      default:
        uint64_t v10 = a3;
        uint64_t v5 = "%d not a supported type";
        goto LABEL_3;
    }
  }

  else
  {
    uint64_t v5 = "not a derived crypto";
LABEL_3:
    uint64_t v6 = 22LL;
    krb5_set_error_message(a1, 22, v5, v10);
  }

  return v6;
}

uint64_t krb5_crypto_length_iov(_krb5_context *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v6 = a4;
  for (uint64_t i = (unint64_t *)(a3 + 8); ; i += 3)
  {
    uint64_t result = krb5_crypto_length(a1, a2, *((unsigned int *)i - 2), i);
    if ((_DWORD)result) {
      break;
    }
    if (!--v6) {
      return 0LL;
    }
  }

  return result;
}

uint64_t krb5_encrypt_ivec( _krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(*(void *)a2 + 64LL);
  if ((v14 & 4) != 0)
  {
    size_t v37 = (size_t *)a6;
    size_t v21 = *(void *)(*(void *)(v13 + 56) + 24LL);
    uint64_t v22 = (a5 + *(void *)(v13 + 32) + *(void *)(v13 + 24) - 1) & -*(void *)(v13 + 24);
    size_t v23 = v22 + v21;
    uint64_t v24 = (char *)calloc(1uLL, v22 + v21);
    if (v24)
    {
      uint64_t v25 = v24;
      krb5_generate_random_block((uint64_t)v24, *(void *)(v13 + 32));
      memcpy(&v25[*(void *)(v13 + 32)], a4, a5);
      uint64_t v20 = sub_1882C7214(a1, *(void *)(v13 + 56), a2, ((_DWORD)a3 << 8) | 0x55u, (uint64_t)v25, v22, (uint64_t)v40);
      if (!(_DWORD)v20)
      {
        if (v41 == v21)
        {
          memcpy(&v25[v22], __src, v21);
          sub_1882FD854();
          uint64_t v26 = (pthread_mutex_t *)(a2 + 40);
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v20 = sub_1882C8098(a1, a2, ((_DWORD)a3 << 8) | 0xAAu, (uint64_t *)&v39);
          if (!(_DWORD)v20)
          {
            uint64_t v27 = v39;
            uint64_t v20 = sub_1882C8190(a1, v39);
            pthread_mutex_unlock(v26);
            if (!(_DWORD)v20)
            {
              uint64_t v20 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 72))( a1,  v27,  v25,  v22,  1LL,  a3,  a7);
              if (!(_DWORD)v20)
              {
                *size_t v37 = v23;
                v37[1] = (size_t)v25;
                return v20;
              }
            }
          }
        }

        else
        {
          uint64_t v20 = 2529639090LL;
          sub_1882FD854();
          krb5_clear_error_message(a1);
        }
      }

      bzero(v25, v23);
      uint64_t v35 = v25;
LABEL_26:
      free(v35);
      return v20;
    }

    goto LABEL_19;
  }

  if ((v14 & 0x20) != 0)
  {
    size_t v37 = (size_t *)a6;
    size_t v28 = *(void *)(*(void *)(v13 + 48) + 24LL);
    uint64_t v29 = *(void *)(v13 + 32);
    size_t v30 = v28 + a5 + v29;
    uint64_t v31 = malloc(v30);
    if (v31)
    {
      uint64_t v18 = (uint64_t)v31;
      bzero(v31, v28);
      uint64_t v32 = v18 + v28;
      krb5_generate_random_block(v32, v29);
      memcpy((void *)(v32 + *(void *)(v13 + 32)), a4, a5);
      uint64_t v20 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, size_t, uint64_t, uint64_t, uint64_t))(v13 + 72))( a1,  a2 + 8,  v18,  v30,  1LL,  a3,  a7);
      if (!(_DWORD)v20)
      {
        *size_t v37 = v30;
        v37[1] = v18;
        return v20;
      }

      uint64_t v33 = (void *)v18;
      size_t v34 = v30;
      goto LABEL_25;
    }

LABEL_19:
    uint64_t v20 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory", v37);
    return v20;
  }

  size_t v15 = *(void *)(*(void *)(v13 + 48) + 24LL);
  uint64_t v16 = (a5 + *(void *)(v13 + 32) + *(void *)(v13 + 24) + v15 - 1) & -*(void *)(v13 + 24);
  uint64_t v17 = calloc(1uLL, v16);
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = (uint64_t)v17;
  krb5_generate_random_block((uint64_t)v17, *(void *)(v13 + 32));
  uint64_t v19 = (char *)(v18 + *(void *)(v13 + 32));
  bzero(v19, v15);
  memcpy(&v19[v15], a4, a5);
  uint64_t v20 = sub_1882C7214(a1, *(void *)(v13 + 48), a2, 0LL, v18, v16, (uint64_t)v40);
  if ((_DWORD)v20)
  {
LABEL_24:
    uint64_t v33 = (void *)v18;
    size_t v34 = v16;
LABEL_25:
    bzero(v33, v34);
    uint64_t v35 = (void *)v18;
    goto LABEL_26;
  }

  if (v41 != v15)
  {
    uint64_t v20 = 2529639090LL;
    krb5_clear_error_message(a1);
    sub_1882FD854();
    goto LABEL_24;
  }

  memcpy((void *)(v18 + *(void *)(v13 + 32)), __src, v15);
  sub_1882FD854();
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  uint64_t v20 = sub_1882C8190(a1, (unsigned int **)(a2 + 8));
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
  if ((_DWORD)v20) {
    goto LABEL_24;
  }
  uint64_t v20 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v13 + 72))( a1,  a2 + 8,  v18,  v16,  1LL,  0LL,  a7);
  if ((_DWORD)v20) {
    goto LABEL_24;
  }
  *a6 = v16;
  a6[1] = v18;
  return v20;
}

krb5_error_code krb5_encrypt( krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec)
{
  return krb5_encrypt_ivec( context,  (uint64_t)inptr,  (uint64_t)outptr,  (const void *)size,  (size_t)eblock,  (uint64_t *)ivec,  0LL);
}

uint64_t krb5_encrypt_EncryptedData( _krb5_context *a1, _DWORD **a2, uint64_t a3, const void *a4, size_t a5, int a6, uint64_t a7)
{
  *(_DWORD *)a7 = **a2;
  if (a6)
  {
    int v14 = calloc(1uLL, 4uLL);
    _DWORD *v14 = a6;
  }

  else
  {
    int v14 = 0LL;
  }

  *(void *)(a7 + 8) = v14;
  return krb5_encrypt_ivec(a1, (uint64_t)a2, a3, a4, a5, (uint64_t *)(a7 + 16), 0LL);
}

uint64_t krb5_decrypt_ivec( krb5_context a1, uint64_t a2, uint64_t a3, const void *a4, size_t __size, void *a6, uint64_t a7)
{
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(*(void *)a2 + 64LL);
  if ((v15 & 4) != 0)
  {
    uint64_t v24 = *(void *)(*(void *)(v14 + 56) + 24LL);
    if (*(void *)(v14 + 32) + v24 <= __size)
    {
      uint64_t v29 = __size - v24;
      if (!((__size - v24) % *(void *)(v14 + 24)))
      {
        size_t v30 = (char *)malloc(__size);
        if (__size && !v30) {
          goto LABEL_23;
        }
        uint64_t v44 = v30;
        memcpy(v30, a4, __size);
        pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
        uint64_t v32 = sub_1882C8098(a1, a2, ((_DWORD)a3 << 8) | 0xAAu, (uint64_t *)&v45);
        if ((_DWORD)v32)
        {
          uint64_t v21 = v32;
        }

        else
        {
          uint64_t v42 = v45;
          uint64_t v21 = sub_1882C8190(a1, v45);
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
          if (!(_DWORD)v21)
          {
            uint64_t v35 = (*(uint64_t (**)(krb5_context, unsigned int **, char *, uint64_t, void, uint64_t, uint64_t))(v14 + 72))( a1,  v42,  v44,  v29,  0LL,  a3,  a7);
            if ((_DWORD)v35
              || (v47[0] = v24,
                  v47[1] = &v44[v29],
                  unsigned int v46 = **(_DWORD **)(v14 + 56),
                  uint64_t v35 = sub_1882C7438(a1, a2, ((_DWORD)a3 << 8) | 0x55u, (uint64_t)v44, v29, &v46),
                  (_DWORD)v35))
            {
              uint64_t v21 = v35;
              size_t v23 = v44;
              goto LABEL_29;
            }

            uint64_t v40 = *(void *)(v14 + 32);
            memmove(v44, &v44[v40], v29 - v40);
            uint64_t v41 = realloc(v44, v29 - v40);
            a6[1] = v41;
            size_t v39 = v29 - v40;
            if (v29 != v40 && !v41)
            {
              uint64_t v36 = v44;
              goto LABEL_39;
            }

            goto LABEL_47;
          }
        }

        size_t v23 = v44;
        goto LABEL_29;
      }

      goto LABEL_20;
    }
  }

  else
  {
    if ((v15 & 0x20) == 0)
    {
      if (!(__size % *(void *)(v14 + 24)))
      {
        size_t v16 = *(void *)(*(void *)(v14 + 48) + 24LL);
        if (*(void *)(v14 + 32) + v16 <= __size)
        {
          uint64_t v17 = (char *)malloc(__size);
          uint64_t v18 = v17;
          if (__size && !v17) {
            goto LABEL_23;
          }
          memcpy(v17, a4, __size);
          uint64_t v19 = (pthread_mutex_t *)(a2 + 40);
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v20 = (unsigned int **)(a2 + 8);
          uint64_t v21 = sub_1882C8190(a1, v20);
          pthread_mutex_unlock(v19);
          if ((_DWORD)v21)
          {
LABEL_11:
            size_t v23 = v18;
LABEL_29:
            free(v23);
            return v21;
          }

          uint64_t v22 = (*(uint64_t (**)(krb5_context, unsigned int **, char *, size_t, void, void, uint64_t))(v14 + 72))( a1,  v20,  v18,  __size,  0LL,  0LL,  a7);
          if ((_DWORD)v22 || (uint64_t v22 = krb5_data_copy(v47, &v18[*(void *)(v14 + 32)], v16), (_DWORD)v22))
          {
            uint64_t v21 = v22;
            goto LABEL_11;
          }

          bzero(&v18[*(void *)(v14 + 32)], v16);
          unsigned int v46 = **(_DWORD **)(v14 + 48);
          uint64_t v21 = sub_1882C7438(a1, 0LL, 0LL, (uint64_t)v18, __size, &v46);
          sub_1882FD854();
          if ((_DWORD)v21) {
            goto LABEL_11;
          }
          size_t v37 = *(void *)(v14 + 32) + v16;
          memmove(v18, &v18[v37], __size - v37);
          uint64_t v38 = realloc(v18, __size - v37);
          a6[1] = v38;
          size_t v39 = __size - v37;
          if (__size != v37 && !v38)
          {
            uint64_t v36 = v18;
            goto LABEL_39;
          }

LABEL_47:
          uint64_t v21 = 0LL;
          *a6 = v39;
          return v21;
        }

        goto LABEL_13;
      }

        krb5_set_error_message(a1, v13, "Cant read keyblock from file %s");
        goto LABEL_11;
      }

      uint64_t v35 = "malloc: out of memory";
    }

    uint64_t v13 = 12LL;
    krb5_set_error_message(a1, 12, v35);
LABEL_46:
    a3 = v39;
    goto LABEL_47;
  }

  return v13;
}

    a2 = v43;
  }

LABEL_20:
      uint64_t v21 = 2529639102LL;
      krb5_clear_error_message(a1);
      return v21;
    }

    if (__size % *(void *)(v14 + 24)) {
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(*(void *)(v14 + 48) + 24LL);
    if (__size >= *(void *)(v14 + 32) + v25)
    {
      uint64_t v43 = (void *)(*(void *)(v14 + 32) + v25);
      uint64_t v26 = (char *)malloc(__size);
      if (!v26)
      {
LABEL_23:
        uint64_t v21 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory", v42);
        return v21;
      }

      uint64_t v27 = v26;
      memcpy(v26, a4, __size);
      uint64_t v28 = (*(uint64_t (**)(krb5_context, uint64_t, char *, size_t, void, uint64_t, uint64_t))(v14 + 72))( a1,  a2 + 8,  v27,  __size,  0LL,  a3,  a7);
      if ((_DWORD)v28)
      {
        uint64_t v21 = v28;
        size_t v23 = v27;
        goto LABEL_29;
      }

      memmove(v27, &v27[v25 + *(void *)(v14 + 32)], __size - (void)v43);
      uint64_t v33 = realloc(v27, __size - (void)v43);
      a6[1] = v33;
      if (v33) {
        BOOL v34 = 1;
      }
      else {
        BOOL v34 = __size == (void)v43;
      }
      if (v34)
      {
        uint64_t v21 = 0LL;
        *a6 = __size - (void)v43;
        return v21;
      }

      uint64_t v36 = v27;
LABEL_39:
      free(v36);
      goto LABEL_23;
    }
  }

  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v10 = v5;
LABEL_22:
  CFRelease(v10);
LABEL_23:
  if (staticCode) {
    CFRelease(staticCode);
  }
  if (requirement) {
    CFRelease(requirement);
  }
  return v2;
}

LABEL_13:
  uint64_t v21 = 2529639102LL;
  krb5_set_error_message(a1, -1765328194, "Encrypted data shorter then checksum + confunder");
  return v21;
}

    krb5_data_free(&v19);
    return 0LL;
  }

  return v10;
}

        if (a3) {
          asprintf(&v27, "_%s._%s.%s._sites.%s.");
        }
        else {
          asprintf(&v27, "_%s._%s.%s.");
        }
        if (v27)
        {
          uint64_t v18 = heim_uniq_alloc(0x68uLL, (uint64_t)"heim-query-ctx", (uint64_t)sub_1882DBB94, v13, v14, v15, v16, v17);
          if (v18)
          {
            uint64_t v19 = v18;
            *(void *)(v18 + 32) = a1;
            uint64_t v20 = j__dispatch_semaphore_create(0LL);
            *(void *)(v19 + 40) = v20;
            *(void *)(v19 + 56) = v27;
            if (v20)
            {
              uint64_t v21 = (char **)heim_retain((CFTypeRef)a2);
              *(void *)(v19 + 48) = v21;
              *(_DWORD *)(v19 + 64) = v11;
              *(_DWORD *)(v19 + 68) = v10;
              *(void *)(v19 + 72) = v12;
              *(void *)(v19 + 88) = 0LL;
              *(_DWORD *)(v19 + 96) = 0;
              uint64_t v29 = 69632;
              if (*(void *)(a2 + 216)) {
                goto LABEL_20;
              }
              if ((*(_BYTE *)(a2 + 105) & 0x10) != 0) {
                DelegateConnection = DNSServiceCreateDelegateConnection();
              }
              else {
                DelegateConnection = DNSServiceCreateConnection((DNSServiceRef *)(a2 + 216));
              }
              if (DelegateConnection)
              {
                sub_1882DFCE8((uint64_t)a1, 2, "Failed setting up search context for domain %s failed: %d");
              }

              else
              {
                if (!DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a2 + 216), *(dispatch_queue_t *)(a2 + 200)))
                {
                  uint64_t v21 = *(char ***)(v19 + 48);
LABEL_20:
                  uint64_t v22 = sub_1882DBCDC((uint64_t)a1, v21[12], a2, &v29);
                  sdRef = *(DNSServiceRef *)(a2 + 216);
                  heim_retain((CFTypeRef)v19);
                  if (DNSServiceQueryRecord( &sdRef,  v29 | 0x4000,  v22,  *(const char **)(v19 + 56),  0x21u,  1u,  (DNSServiceQueryRecordReply)sub_1882DC00C,  (void *)v19))
                  {
                    sub_1882DFCE8((uint64_t)a1, 2, "searching DNS for domain %s failed: %d");
                  }

                  else
                  {
                    uint64_t v24 = *(dispatch_semaphore_s **)(v19 + 40);
                    uint64_t v25 = dispatch_time(0LL, 10000000000LL);
                    if (dispatch_semaphore_wait(v24, v25)) {
                      sub_1882DFCE8((uint64_t)a1, 2, "searching DNS %s for domain timed out", *(const char **)(v19 + 56));
                    }
                    uint64_t v26 = *(dispatch_queue_s **)(a2 + 200);
                    block[0] = MEMORY[0x1895F87A8];
                    block[1] = 0x40000000LL;
                    block[2] = sub_1882DC80C;
                    block[3] = &unk_18A219CF8;
                    block[4] = sdRef;
                    void block[5] = v19;
                    dispatch_sync(v26, block);
                  }

                  goto LABEL_35;
                }

                DNSServiceRefDeallocate(*(DNSServiceRef *)(a2 + 216));
                sub_1882DFCE8((uint64_t)a1, 2, "Failed setting run queue for SRV query: %d");
              }

  krb5_storage_free(v16);
  if ((_DWORD)v18) {
    goto LABEL_24;
  }
LABEL_37:
  if (a5) {
    goto LABEL_38;
  }
LABEL_39:
  if (a6)
  {
    if (a2[7])
    {
      uint64_t v18 = sub_1882E3FB8(a1, a6, &v65, &v66);
      if ((_DWORD)v18) {
        goto LABEL_24;
      }
    }
  }

  size_t v30 = krb5_storage_emem();
  if (!v30) {
    return krb5_enomem(a1);
  }
  uint64_t v31 = (uint64_t)v30;
  krb5_storage_set_flags((uint64_t)v30, 32);
  uint64_t v32 = krb5_storage_emem();
  if (!v32)
  {
    krb5_storage_free(v31);
    return krb5_enomem(a1);
  }

  uint64_t v33 = (uint64_t)v32;
  krb5_storage_set_flags((uint64_t)v32, 32);
  BOOL v34 = krb5_store_uint32(v31, *(unsigned int *)a2[4]);
  if ((_DWORD)v34 || (BOOL v34 = krb5_store_uint32(v31, *(unsigned int *)(a2[4] + 4LL)), (_DWORD)v34))
  {
LABEL_46:
    uint64_t v18 = v34;
    krb5_clear_error_message(a1);
    goto LABEL_47;
  }

  uint64_t v44 = (unsigned int *)a2[4];
  uint64_t v45 = *v44;
  if (*v44 >= 0x3E9)
  {
    unsigned int v46 = "PAC has too many buffers";
    goto LABEL_63;
  }

  if (v45)
  {
    unsigned int v47 = 0LL;
    uint64_t v48 = 0LL;
    size_t v60 = 0LL;
    uint64_t v58 = HIDWORD(v65);
    uint64_t v59 = v65;
    uint64_t v62 = (16 * v45) | 8;
    while (1)
    {
      uint64_t v49 = v44[v47 + 2];
      size_t v61 = v48;
      switch(v49)
      {
        case 0xAu:
          uint64_t v51 = krb5_storage_write(v33);
          if (v64 != v51)
          {
            uint64_t v18 = 22LL;
            goto LABEL_47;
          }

          break;
        case 7u:
          uint64_t v50 = v66;
          if (v66 > 0xFFFFFFFB) {
            goto LABEL_100;
          }
          BOOL v34 = krb5_store_uint32(v33, v59);
          if ((_DWORD)v34) {
            goto LABEL_46;
          }
          BOOL v34 = sub_1882E406C(a1, v33, v66);
          if ((_DWORD)v34) {
            goto LABEL_46;
          }
          LODWORD(v60) = v62 + 4;
          goto LABEL_79;
        case 6u:
          uint64_t v50 = v67;
          if (v67 > 0xFFFFFFFB) {
            goto LABEL_100;
          }
          BOOL v34 = krb5_store_uint32(v33, v58);
          if ((_DWORD)v34) {
            goto LABEL_46;
          }
          BOOL v34 = sub_1882E406C(a1, v33, v67);
          if ((_DWORD)v34) {
            goto LABEL_46;
          }
          HIDWORD(v60) = v62 + 4;
LABEL_79:
          uint64_t v51 = v50 + 4;
          break;
        default:
          uint64_t v51 = v44[v47 + 3];
          uint64_t v52 = krb5_storage_write(v33);
          if (v52 < 0 || v52 != v51) {
            goto LABEL_99;
          }
          break;
      }

      BOOL v34 = krb5_store_uint32(v31, *(unsigned int *)(a2[4] + v47 * 4 + 8));
      if ((_DWORD)v34) {
        goto LABEL_46;
      }
      BOOL v34 = krb5_store_uint32(v31, v51);
      if ((_DWORD)v34) {
        goto LABEL_46;
      }
      BOOL v34 = krb5_store_uint32(v31, v62);
      if ((_DWORD)v34) {
        goto LABEL_46;
      }
      BOOL v34 = krb5_store_uint32(v31, 0LL);
      if ((_DWORD)v34) {
        goto LABEL_46;
      }
      if (0xFFFFFFFFLL - v51 < (unint64_t)v62 || (uint64_t v53 = v62 + v51, v62 + v51 >= 0xFFFFFFF9))
      {
LABEL_100:
        unsigned int v46 = "integer overrun";
LABEL_63:
        uint64_t v18 = 22LL;
        krb5_set_error_message(a1, 22, v46);
LABEL_47:
        krb5_data_free(&v64);
        krb5_storage_free(v31);
        krb5_storage_free(v33);
        return v18;
      }

      uint64_t v62 = (v53 + 7) & 0xFFFFFFF8;
      if (v62 != v53)
      {
        BOOL v34 = sub_1882E406C(a1, v33, v62 - v53);
        if ((_DWORD)v34) {
          goto LABEL_46;
        }
      }

      uint64_t v48 = v61 + 1;
      uint64_t v44 = (unsigned int *)a2[4];
      v47 += 4LL;
    }
  }

  size_t v60 = 0LL;
LABEL_94:
  uint64_t v54 = krb5_storage_to_data(v33, (size_t *)__s);
  if ((_DWORD)v54)
  {
    uint64_t v18 = v54;
    krb5_set_error_message(a1, v54, "malloc: out of memory");
    goto LABEL_47;
  }

  uint64_t v55 = krb5_storage_write(v31);
  uint64_t v56 = SLODWORD(__s[0]);
  krb5_data_free(__s);
  if (v55 != v56 || krb5_storage_to_data(v31, (size_t *)__s))
  {
LABEL_99:
    uint64_t v18 = krb5_enomem(a1);
    goto LABEL_47;
  }

  if (a5
    && (uint64_t v57 = sub_1882E40F0(a1, a5, SHIDWORD(v65), (uint64_t)__s[1], (uint64_t)__s[0], &__s[1][HIDWORD(v60)], v67),
        (_DWORD)v57)
    || a6
    && a2[7]
    && (uint64_t v57 = sub_1882E40F0(a1, a6, v65, (uint64_t)&__s[1][HIDWORD(v60)], v67, &__s[1][v60], v66),
        (_DWORD)v57))
  {
    uint64_t v18 = v57;
    krb5_data_free(__s);
    goto LABEL_47;
  }

  *a7 = *(_OWORD *)__s;
  krb5_data_free(&v64);
  krb5_storage_free(v31);
  krb5_storage_free(v33);
  return 0LL;
}

    sub_1882F0D7C(a1, (uint64_t)a2);
    krb5_data_free(&v25);
    sub_1882FDDC0();
  }

  return v12;
}

      krb5_clear_error_message(a1);
      return v24;
    }

    krb5_data_free(&v51);
    if ((a7 & 2) == 0) {
      return 0;
    }
    uint64_t v40 = 0LL;
    krb5_data_zero(&v41);
    message = krb5_read_message(a1, (int *)a3, (uint64_t)&v41);
    if (message)
    {
LABEL_42:
      uint64_t v24 = message;
      krb5_set_error_message(a1, message, "krb5_sendauth: server closed connection");
      return v24;
    }

    uint64_t v38 = a12;
    if (a12) {
      size_t v39 = a12;
    }
    else {
      size_t v39 = &v40;
    }
    uint64_t v24 = krb5_rd_rep(a1, *a2, &v41, v39);
    krb5_data_free(&v41);
    if (!v24)
    {
      if (!v38) {
        krb5_free_ap_rep_enc_part(a1, v40);
      }
      return 0;
    }
  }

  return v24;
}

    sub_188312FE4();
    goto LABEL_15;
  }

  uint64_t v10 = copy_AlgorithmIdentifier();
  if (!(_DWORD)v10) {
    goto LABEL_8;
  }
  krb5_cksumtype v11 = v10;
LABEL_5:
  hx509_clear_error_string(a1);
LABEL_15:
  sub_1883014D4((uint64_t)&v65);
  free_AlgorithmIdentifier();
  return v11;
}

krb5_error_code krb5_decrypt( krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec)
{
  return krb5_decrypt_ivec(context, (uint64_t)inptr, (uint64_t)outptr, (const void *)size, (size_t)eblock, ivec, 0LL);
}

uint64_t krb5_decrypt_EncryptedData(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return krb5_decrypt_ivec(a1, a2, a3, *(const void **)(a4 + 24), *(void *)(a4 + 16), a5, 0LL);
}

uint64_t sub_1882C92F8(_krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v10 = *(int **)(a2 + 40);
  uint64_t v11 = sub_1882C8190(a1, (unsigned int **)a3);
  if ((_DWORD)v11) {
    return v11;
  }
  size_t v12 = *(void *)(a2 + 16);
  unint64_t v13 = *((void *)v10 + 2) + 8 * v12 - 1;
  unint64_t v22 = v13 / (8 * v12);
  uint64_t v14 = (char *)malloc(v22 * v12);
  if (v14)
  {
    uint64_t v15 = sub_1882E2500(a4, a5, v14, v12);
    if ((_DWORD)v15)
    {
      uint64_t v11 = v15;
      krb5_set_error_message(a1, v15, "malloc: out of memory");
    }

    else
    {
      if (8 * v12 <= v13)
      {
        uint64_t v17 = 0LL;
        if (v22 <= 1) {
          unint64_t v18 = 1LL;
        }
        else {
          unint64_t v18 = v13 / (8 * v12);
        }
        do
        {
          uint64_t v19 = *(void *)(a2 + 16);
          if (v17)
          {
            uint64_t v20 = v19 * v17;
            memcpy(&v14[v19 * v17], &v14[v19 * (v17 - 1)], *(void *)(a2 + 16));
          }

          else
          {
            uint64_t v20 = 0LL;
          }

          (*(void (**)(_krb5_context *, uint64_t, char *, uint64_t, uint64_t, void, void))(a2 + 72))( a1,  a3,  &v14[v20],  v19,  1LL,  0LL,  0LL);
          ++v17;
        }

        while (v18 != v17);
      }

      int v21 = *v10;
      if ((*v10 - 17) < 2)
      {
        memcpy(*(void **)(*(void *)a3 + 16LL), v14, *(void *)(*(void *)a3 + 8LL));
      }

      else
      {
        if (v21 != 16 && v21 != 7)
        {
          uint64_t v11 = 2529639090LL;
          krb5_set_error_message(a1, -1765328206, "derive_key() called with unknown keytype (%u)");
          goto LABEL_6;
        }

        sub_1882F779C((uint64_t)a1, *(void *)a3, (uint64_t)v14, *(void *)(a2 + 16) * v22);
      }

      uint64_t v11 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

void sub_1882C9500(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(_krb5_context *, uint64_t))(*(void *)(a3 + 40) + 72LL);
  if (v5) {
    v5(a1, a2);
  }
  bzero(*(void **)(*(void *)(a2 + 8) + 8LL), **(void **)(a2 + 8));
  krb5_free_data(a1, *(krb5_data **)(a2 + 8));
}

uint64_t krb5_derive_key( krb5_context a1, const krb5_keyblock *a2, krb5_keyblock *a3, const void *a4, size_t a5, krb5_keyblock **a6)
{
  *a6 = 0LL;
  uint64_t v7 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return sub_1882C6B9C(a1, (char *)a3);
  }
  for (uint64_t i = (_DWORD **)&off_18C704548; ; ++i)
  {
    size_t v12 = *i;
    if (**i == (_DWORD)a3) {
      break;
    }
    if (!--v7) {
      return sub_1882C6B9C(a1, (char *)a3);
    }
  }

  uint64_t v14 = krb5_copy_keyblock(a1, a2, v15);
  if (!(_DWORD)v14)
  {
    v15[1] = 0LL;
    uint64_t v14 = sub_1882C92F8(a1, (uint64_t)v12, (uint64_t)v15, a4, a5);
    if (!(_DWORD)v14) {
      uint64_t v14 = krb5_copy_keyblock(a1, v15[0], a6);
    }
    sub_1882C9648(a1, (uint64_t)v15, (uint64_t)v12);
  }

  return v14;
}

void sub_1882C9648(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8))
  {
    sub_1882C9500(a1, a2, a3);
    *(void *)(a2 + 8) = 0LL;
  }

uint64_t krb5_crypto_init(_krb5_context *a1, const krb5_keyblock *a2, char *magic, krb5_keyblock ***a4)
{
  uint64_t v8 = (krb5_keyblock **)calloc(1uLL, 0x68uLL);
  *a4 = v8;
  if (v8)
  {
    if (!(_DWORD)magic) {
      krb5_magic magic = (char *)a2->magic;
    }
    uint64_t v9 = dword_18C704578;
    if (dword_18C704578 < 1)
    {
LABEL_8:
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v10 = (krb5_keyblock **)&off_18C704548;
      while (1)
      {
        uint64_t v11 = *v10;
        if ((*v10)->magic == (_DWORD)magic) {
          break;
        }
        ++v10;
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }

    _DWORD *v8 = v11;
    size_t v12 = *a4;
    unint64_t v13 = **a4;
    if (!v13 || ((uint64_t)v13[2].contents & 0x40) != 0)
    {
      free(v12);
      *a4 = 0LL;
      return sub_1882C6B9C(a1, magic);
    }

    if (*((void *)v13[1].contents + 3) == *(void *)&a2->length)
    {
      uint64_t v14 = krb5_copy_keyblock(a1, a2, v12 + 1);
      uint64_t v15 = *a4;
      if ((_DWORD)v14)
      {
        free(v15);
        *a4 = 0LL;
      }

      else
      {
        v15[2] = 0LL;
        uint64_t v17 = *a4;
        *((_DWORD *)v17 + 6) = 0;
        v17[4] = 0LL;
        pthread_mutex_init((pthread_mutex_t *)(*a4 + 5), 0LL);
      }
    }

    else
    {
      uint64_t v14 = 2529639101LL;
      free(v12);
      *a4 = 0LL;
      krb5_set_error_message(a1, -1765328195, "encryption key has bad length");
    }
  }

  else
  {
    uint64_t v14 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v14;
}

uint64_t krb5_crypto_destroy(_krb5_context *a1, uint64_t a2)
{
  if (a2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(a2 + 40));
    if (*(int *)(a2 + 24) >= 1)
    {
      uint64_t v4 = 0LL;
      do
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 32) + 8 * v4);
        sub_1882C9648(a1, (uint64_t)v5 + 8, *(void *)a2);
        free(v5);
        ++v4;
      }

      while (v4 < *(int *)(a2 + 24));
    }

    free(*(void **)(a2 + 32));
    sub_1882C9648(a1, a2 + 8, *(void *)a2);
    free((void *)a2);
  }

  return 0LL;
}

uint64_t krb5_crypto_getblocksize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 16LL);
  return 0LL;
}

uint64_t krb5_crypto_getenctype(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  *a3 = **a2;
  return 0LL;
}

uint64_t krb5_crypto_getpadsize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 24LL);
  return 0LL;
}

uint64_t krb5_crypto_getconfoundersize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 32LL);
  return 0LL;
}

uint64_t krb5_enctype_disable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639062LL;
    if (a1) {
      krb5_set_error_message(a1, -1765328234, "encryption type %d not supported", a2);
    }
  }

  else
  {
    uint64_t v3 = &off_18C704548;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }

    uint64_t v4 = 0LL;
    *((_DWORD *)*v3 + 16) |= 0x40u;
  }

  return v4;
}

uint64_t krb5_enctype_enable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639062LL;
    if (a1) {
      krb5_set_error_message(a1, -1765328234, "encryption type %d not supported", a2);
    }
  }

  else
  {
    uint64_t v3 = &off_18C704548;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }

    uint64_t v4 = 0LL;
    *((_DWORD *)*v3 + 16) &= ~0x40u;
  }

  return v4;
}

uint64_t sub_1882C9A0C(uint64_t a1, int a2)
{
  uint64_t v2 = dword_18C704578;
  if (dword_18C704578 >= 1)
  {
    uint64_t v3 = &off_18C704548;
    do
    {
      int v4 = *((_DWORD *)*v3 + 16);
      if ((v4 & 0x80) != 0) {
        *((_DWORD *)*v3 + 16) = v4 & 0xFFFFFFBF | ((a2 == 0) << 6);
      }
      ++v3;
      --v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t krb5_enctype_warning(uint64_t a1, int a2)
{
  uint64_t v2 = dword_18C704578;
  if (dword_18C704578 < 1) {
    return 1LL;
  }
  for (uint64_t i = &off_18C704548; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 1LL;
    }
  }

  return (*((_DWORD *)*i + 16) >> 8) & 1;
}

unint64_t krb5_get_wrapped_length(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void *)(*(void *)a2 + 24LL);
  if ((*(_BYTE *)(*(void *)a2 + 64LL) & 4) == 0) {
    return (v4 + a3 + v3[4] + *(void *)(v3[6] + 24LL) - 1) / v4 * v4;
  }
  uint64_t v6 = v3[7];
  if (!v6) {
    uint64_t v6 = v3[6];
  }
  return *(void *)(v6 + 24) + (v4 + a3 + v3[4] - 1) / v4 * v4;
}

uint64_t krb5_random_to_key(krb5_context a1, int a2, const void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    uint64_t v13 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }

  else
  {
    uint64_t v11 = &off_18C704548;
    while (1)
    {
      size_t v12 = (_DWORD *)*v11;
      if (*(_DWORD *)*v11 == a2) {
        break;
      }
      ++v11;
      if (!--v7) {
        goto LABEL_5;
      }
    }

    uint64_t v15 = *((void *)v12 + 5);
    if (a4 >= (unint64_t)(*(void *)(v15 + 16) + 7LL) >> 3)
    {
      uint64_t v13 = krb5_data_alloc((size_t *)(a5 + 8), *(void *)(v15 + 24));
      if (!(_DWORD)v13)
      {
        *(_DWORD *)a5 = a2;
        uint64_t v16 = *((void *)v12 + 5);
        uint64_t v17 = *(void (**)(krb5_context, uint64_t, const void *, unint64_t))(v16 + 64);
        if (v17) {
          v17(a1, a5, a3, a4);
        }
        else {
          memcpy(*(void **)(a5 + 16), a3, *(void *)(v16 + 24));
        }
        return 0LL;
      }
    }

    else
    {
      uint64_t v13 = 2529639062LL;
      krb5_set_error_message( a1,  -1765328234,  "encryption key %s needs %d bytes of random to make an encryption key out of it");
    }
  }

  return v13;
}

uint64_t krb5_crypto_prf_length(_krb5_context *a1, int a2, void *a3)
{
  uint64_t v3 = dword_18C704578;
  if (dword_18C704578 < 1)
  {
LABEL_5:
    uint64_t v5 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }

  else
  {
    unint64_t v4 = &off_18C704548;
    while (*(_DWORD *)*v4 != a2)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }

    uint64_t v6 = *((void *)*v4 + 10);
    if (v6)
    {
      uint64_t v5 = 0LL;
      *a3 = v6;
    }

    else
    {
      uint64_t v5 = 2314790690LL;
      krb5_set_error_message(a1, -1980176606, "encryption type %d not supported");
    }
  }

  return v5;
}

uint64_t krb5_crypto_prf(_krb5_context *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *a2;
  krb5_data_zero(a4);
  uint64_t v9 = *(uint64_t (**)(_krb5_context *, uint64_t *, uint64_t, void *))(v8 + 88);
  if (v9) {
    return v9(a1, a2, a3, a4);
  }
  krb5_set_error_message(a1, -1980176606, "kerberos prf for %s not supported", *(const char **)(v8 + 8));
  return 2314790690LL;
}

uint64_t krb5_crypto_fx_cf2( _krb5_context *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char *a6, void *a7)
{
  *a7 = 0LL;
  a7[1] = 0LL;
  a7[2] = 0LL;
  krb5_data_zero(&v23);
  krb5_data_zero(v22);
  uint64_t v14 = krb5_enctype_keysize(a1, a6, &v21);
  if (!(_DWORD)v14)
  {
    size_t v15 = v21;
    uint64_t v14 = sub_1882C9EC0(a1, a2, a4, v21, &v23);
    if (!(_DWORD)v14)
    {
      uint64_t v14 = sub_1882C9EC0(a1, a3, a5, v15, v22);
      if (!(_DWORD)v14)
      {
        uint64_t v16 = v24;
        if (v15)
        {
          uint64_t v17 = (char *)v22[1];
          size_t v18 = v15;
          do
          {
            char v19 = *v17++;
            *v16++ ^= v19;
            --v18;
          }

          while (v18);
          uint64_t v16 = v24;
        }

        uint64_t v14 = krb5_random_to_key(a1, (int)a6, v16, v15, (uint64_t)a7);
      }
    }

    krb5_data_free(&v23);
    krb5_data_free(v22);
  }

  return v14;
}

uint64_t sub_1882C9EC0(_krb5_context *a1, uint64_t *a2, uint64_t a3, size_t a4, size_t *a5)
{
  uint64_t v10 = krb5_data_alloc(a5, a4);
  if ((_DWORD)v10 || (uint64_t v10 = krb5_data_alloc(&v19, *(void *)a3 + 1LL), (_DWORD)v10))
  {
LABEL_3:
    krb5_data_free(&v19);
    krb5_data_free(a5);
  }

  else
  {
    krb5_clear_error_message(a1);
    memcpy(v20 + 1, *(const void **)(a3 + 8), *(void *)a3);
    if (a4)
    {
      size_t v12 = (char *)a5[1];
      char v13 = 1;
      while (1)
      {
        *uint64_t v20 = v13;
        uint64_t v14 = krb5_crypto_prf(a1, a2, (uint64_t)&v19, &v17);
        if ((_DWORD)v14)
        {
          uint64_t v10 = v14;
          goto LABEL_3;
        }

        size_t v15 = v17;
        size_t v16 = a4 - v17;
        if (a4 <= v17) {
          break;
        }
        ++v13;
        memcpy(v12, v18, v17);
        v12 += v15;
        krb5_data_free(&v17);
        a4 = v16;
        if (!v16) {
          goto LABEL_13;
        }
      }

      memcpy(v12, v18, a4);
      krb5_data_free(&v17);
    }

void _krb5_debug_keyblock(uint64_t a1, int a2, const char *a3, uint64_t a4)
{
  if (_krb5_have_debug(a1))
  {
    if (*(void *)(a4 + 8) >= 4uLL) {
      uint64_t v8 = 4LL;
    }
    else {
      uint64_t v8 = *(void *)(a4 + 8);
    }
    if ((rk_hex_encode(*(unsigned __int8 **)(a4 + 16), v8, &__s) & 0x8000000000000000LL) == 0)
    {
      sub_1882DFCE8(a1, a2, "%s %d/%s", a3, *(_DWORD *)a4, __s);
      size_t v9 = strlen(__s);
      bzero(__s, v9);
      free(__s);
    }
  }

uint64_t sub_1882CA0A8(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (pthread_mutex_t *)(a2 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  int v11 = *(_DWORD *)(a4 + 32);
  if ((v11 & 4) == 0)
  {
    if ((v11 & 8) != 0)
    {
      size_t v15 = sub_1882CA1C8(a2, 255);
      *a5 = (uint64_t)v15;
      if (!v15)
      {
        uint64_t v13 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        goto LABEL_7;
      }

      uint64_t v13 = krb5_copy_keyblock(a1, *(const krb5_keyblock **)(a2 + 8), (krb5_keyblock **)v15);
      if ((_DWORD)v13)
      {
LABEL_7:
        pthread_mutex_unlock(v10);
        return v13;
      }

      size_t v12 = (unsigned int **)*a5;
      uint64_t v16 = *(void *)*a5;
      if (*(void *)(v16 + 8))
      {
        unint64_t v17 = 0LL;
        do
        {
          *(_BYTE *)(*(void *)(v16 + 16) + v17++) ^= 0xF0u;
          size_t v12 = (unsigned int **)*a5;
          uint64_t v16 = *(void *)*a5;
        }

        while (v17 < *(void *)(v16 + 8));
      }
    }

    else
    {
      size_t v12 = (unsigned int **)(a2 + 8);
      *a5 = a2 + 8;
    }

char *sub_1882CA1C8(uint64_t a1, int a2)
{
  unint64_t v4 = realloc(*(void **)(a1 + 32), 8LL * *(int *)(a1 + 24) + 8);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  *(void *)(a1 + 32) = v4;
  uint64_t v6 = (char *)malloc(0x18uLL);
  uint64_t v7 = *(int *)(a1 + 24);
  v5[v7] = v6;
  if (!v6) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 24) = v7 + 1;
  *(void *)(v6 + 12) = 0LL;
  *(void *)(v6 + 4) = 0LL;
  *((_DWORD *)v6 + 5) = 0;
  uint64_t v8 = v6 + 8;
  *(_DWORD *)uint64_t v6 = a2;
  return v8;
}

void *krb5_data_zero(void *result)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  return result;
}

void krb5_data_free(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  *a1 = 0LL;
  a1[1] = 0LL;
}

void krb5_free_data(krb5_context a1, krb5_data *a2)
{
  data = a2->data;
  if (data) {
    free(data);
  }
  free(a2);
}

uint64_t krb5_data_alloc(size_t *a1, size_t a2)
{
  unint64_t v4 = calloc(1uLL, a2);
  a1[1] = (size_t)v4;
  if (a2 && !v4) {
    return 12LL;
  }
  uint64_t result = 0LL;
  *a1 = a2;
  return result;
}

uint64_t krb5_data_realloc(uint64_t a1, size_t a2)
{
  unint64_t v4 = realloc(*(void **)(a1 + 8), a2);
  uint64_t v5 = v4;
  if (a2 && !v4) {
    return 12LL;
  }
  uint64_t result = 0LL;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v5;
  return result;
}

uint64_t krb5_data_copy(void *a1, const void *a2, size_t __size)
{
  if (!__size)
  {
    a1[1] = 0LL;
    goto LABEL_5;
  }

  uint64_t v6 = calloc(1uLL, __size);
  a1[1] = v6;
  if (v6)
  {
    *a1 = __size;
    memmove(v6, a2, __size);
LABEL_5:
    uint64_t result = 0LL;
    *a1 = __size;
    return result;
  }

  return 12LL;
}

krb5_error_code krb5_copy_data(krb5_context a1, const krb5_data *a2, krb5_data **a3)
{
  uint64_t v5 = (krb5_data *)calloc(1uLL, 0x10uLL);
  *a3 = v5;
  if (v5)
  {
    krb5_error_code v6 = der_copy_octet_string();
    if (v6)
    {
      krb5_clear_error_message(a1);
      free(*a3);
      *a3 = 0LL;
    }
  }

  else
  {
    krb5_error_code v6 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v6;
}

uint64_t krb5_data_cmp(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)a1;
  if (*(void *)a1 == *(void *)a2) {
    return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v2);
  }
  else {
    return v2 - *(void *)a2;
  }
}

uint64_t sub_1882CA44C( void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v13[0] = 0LL;
  v13[1] = &a9;
  unsigned int v10 = vasprintf(v13, a2, &a9);
  int v11 = v13[0];
  uint64_t result = 12LL;
  if (v13[0])
  {
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t result = 0LL;
      *a1 = v10;
      a1[1] = v11;
    }
  }

  return result;
}

uint64_t krb5_data_ct_cmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1 == *(void *)a2) {
    return ct_memcmp(*(unsigned __int8 **)(a1 + 8), *(unsigned __int8 **)(a2 + 8), v2);
  }
  else {
    return v2 - *(void *)a2;
  }
}

char *krb5_get_error_string(uint64_t a1)
{
  uint64_t v2 = *(const char **)(a1 + 280);
  if (v2) {
    uint64_t v3 = strdup(v2);
  }
  else {
    uint64_t v3 = 0LL;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 328));
  return v3;
}

uint64_t _krb5_xcc_get_initial_ticket( _krb5_context *a1, uint64_t a2, int a3, const krb5_principal_data *a4, char *__s)
{
  keys[7] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a2 + 16);
  size_t v9 = strlen(__s);
  CFDataRef v10 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)__s, v9, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (v10)
  {
    CFDataRef v11 = v10;
    if (a4) {
      a4 = (const krb5_principal_data *)sub_1882CA740(a1, a4);
    }
    keys[0] = @"kHEIMObjectType";
    keys[1] = @"kHEIMAttrType";
    keys[2] = @"kHEIMAttrParentCredential";
    keys[3] = @"kHEIMAttrClientName";
    keys[4] = @"kHEIMAttrData";
    keys[5] = @"kHEIMAttrCredential";
    keys[6] = @"kHEIMAttrServerName";
    values[0] = @"kHEIMObjectKerberosAcquireCred";
    values[1] = @"kHEIMTypeKerberosAcquireCred";
    values[2] = *(void **)v8;
    values[3] = *(void **)(v8 + 16);
    values[4] = v11;
    values[5] = *(void **)MEMORY[0x189604DE8];
    values[6] = (void *)a4;
    if (a4) {
      CFIndex v12 = 7LL;
    }
    else {
      CFIndex v12 = 6LL;
    }
    CFDictionaryRef v13 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, v12, 0LL, 0LL);
    if (!v13) {
      heim_abort("Failed to create dictionary:query != NULL", v14, v15, v16, v17, v18, v19, v20, v25);
    }
    CFDictionaryRef v21 = v13;
    unint64_t v22 = (const void *)HeimCredCreate((uint64_t)v13, 0LL);
    if (v22)
    {
      CFRelease(v22);
      uint64_t v23 = 0LL;
      if (!a4)
      {
LABEL_11:
        CFRelease(v21);
        CFRelease(v11);
        return v23;
      }
    }

    else
    {
      sub_1882DFCE8((uint64_t)a1, 5, "failed to add initial ticket request to %s\n", *(const char **)(v8 + 32));
      uint64_t v26 = *(const char **)(v8 + 32);
      uint64_t v23 = 22LL;
      krb5_set_error_message(a1, 22, "failed to store initial ticket request to %s", v26);
      if (!a4) {
        goto LABEL_11;
      }
    }

    CFRelease(a4);
    goto LABEL_11;
  }

  return krb5_enomem(a1);
}

CFStringRef sub_1882CA740(_krb5_context *a1, const krb5_principal_data *a2)
{
  if (krb5_unparse_name(a1, a2, &cStr)) {
    return 0LL;
  }
  CFStringRef v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  krb5_xfree(cStr);
  return v2;
}

uint64_t sub_1882CA798(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 16) + 32LL);
}

uint64_t sub_1882CA7A4(_krb5_context *a1, uint64_t a2, char *in)
{
  if (uuid_parse(in, uu))
  {
    uint64_t v5 = 2529639054LL;
    krb5_set_error_message(a1, -1765328242, "failed to parse uuid: %s");
  }

  else
  {
    CFUUIDRef v7 = CFUUIDCreateFromUUIDBytes(0LL, *(CFUUIDBytes *)uu);
    if (v7)
    {
      CFUUIDRef v8 = v7;
      uint64_t v9 = sub_1882CB978(a1, a2);
      if ((_DWORD)v9)
      {
        uint64_t v5 = v9;
        CFRelease(v8);
      }

      else
      {
        CFDataRef v10 = *(uint64_t **)(*(void *)a2 + 16LL);
        uint64_t *v10 = (uint64_t)v8;
        sub_1882CB9D4((uint64_t)v10);
        sub_1882CBA24(a1, v10);
        return 0LL;
      }
    }

    else
    {
      uint64_t v5 = 2529639054LL;
      krb5_set_error_message(a1, -1765328242, "failed to create uuid from: %s");
    }
  }

  return v5;
}

CFIndex sub_1882CA88C(_krb5_context *a1, uint64_t a2)
{
  CFIndex result = sub_1882CB978(a1, a2);
  if (!(_DWORD)result) {
    return sub_1882CBB80(a1, *(void **)(*(void *)a2 + 16LL), 0LL, **(void **)a2 == (void)&krb5_xcc_temp_api_ops);
  }
  return result;
}

uint64_t sub_1882CA8E4(krb5_context a1, void *a2, krb5_const_principal a3)
{
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v6 = a2[2];
  CFUUIDRef v7 = *(krb5_principal_data **)(v6 + 24);
  if (v7) {
    krb5_free_principal(a1, v7);
  }
  CFIndex v8 = krb5_copy_principal(a1, a3, (krb5_principal *)(v6 + 24));
  if ((_DWORD)v8) {
    return v8;
  }
  CFDataRef v10 = *(const void **)(v6 + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v6 + 16) = 0LL;
  }

  CFStringRef v11 = sub_1882CA740(a1, a3);
  *(void *)(v6 + 16) = v11;
  if (v11)
  {
    if (*(void *)(v6 + 8))
    {
      keys[0] = @"kHEIMAttrType";
      keys[1] = @"kHEIMAttrParentCredential";
      values[0] = @"kHEIMTypeKerberos";
      values[1] = *(void **)v6;
      CFDictionaryRef v12 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, 2LL, 0LL, 0LL);
      if (!v12) {
        heim_abort("Failed to create dictionary:query != NULL", v13, v14, v15, v16, v17, v18, v19, v21);
      }
      CFDictionaryRef v20 = v12;
      HeimCredDeleteQuery((uint64_t)v12, 0LL);
      CFRelease(v20);
    }

    else
    {
      CFIndex v8 = sub_1882CBB80(a1, (void *)v6, *(void **)v6, *a2 == (void)&krb5_xcc_temp_api_ops);
      if ((_DWORD)v8) {
        return v8;
      }
    }

    CFIndex v8 = 22LL;
    krb5_set_error_message(a1, 22, "failed to store credential to %s", *(const char **)(v6 + 32));
    return v8;
  }

  return krb5_enomem(a1);
}

uint64_t sub_1882CAACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(void *)v2) {
    HeimCredDeleteByUUID(*(void **)v2);
  }
  uint64_t v3 = *(const void **)(v2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v2 + 8) = 0LL;
  }

  return 0LL;
}

uint64_t sub_1882CAB08(krb5_context a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)v4)
  {
    CFRelease(*(CFTypeRef *)v4);
    *(void *)uint64_t v4 = 0LL;
  }

  uint64_t v5 = *(const void **)(v4 + 8);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v4 + 8) = 0LL;
  }

  uint64_t v6 = *(const void **)(v4 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v4 + 16) = 0LL;
  }

  krb5_free_principal(a1, *(krb5_principal *)(v4 + 24));
  free(*(void **)(v4 + 32));
  krb5_data_free((void *)(a2 + 8));
  return 0LL;
}

uint64_t sub_1882CAB88(_krb5_context *a1, uint64_t a2, uint64_t *a3)
{
  keys[9] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a2 + 16);
  krb5_data_zero(v39);
  uint64_t v6 = a3[6];
  CFUUIDRef v7 = (double *)MEMORY[0x189604DA8];
  if (v6 || (uint64_t v6 = a3[5]) != 0) {
    double Current = (double)v6 - *MEMORY[0x189604DA8];
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  CFDateRef v9 = CFDateCreate(0LL, Current);
  if (!v9)
  {
    uint64_t v13 = krb5_enomem(a1);
    goto LABEL_40;
  }

  CFDateRef v10 = v9;
  uint64_t v11 = a3[7];
  if (v11) {
    CFDateRef v12 = CFDateCreate(0LL, (double)v11 - *v7);
  }
  else {
    CFDateRef v12 = 0LL;
  }
  uint64_t v14 = a3[8];
  if (v14) {
    CFDateRef v15 = CFDateCreate(0LL, (double)v14 - *v7);
  }
  else {
    CFDateRef v15 = 0LL;
  }
  uint64_t v16 = krb5_storage_emem();
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    uint64_t v13 = krb5_store_creds((uint64_t)v16, (uint64_t)a3);
    if (!(_DWORD)v13)
    {
      krb5_storage_to_data(v17, v39);
      CFDataRef v18 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)v39[1], v39[0], (CFAllocatorRef)*MEMORY[0x189604DC8]);
      if (v18)
      {
        CFDataRef v19 = v18;
        BOOL is_root_krbtgt = krb5_principal_is_root_krbtgt((uint64_t)a1, a3[1]);
        CFStringRef v21 = sub_1882CA740(a1, (const krb5_principal_data *)a3[1]);
        if (v21)
        {
          CFStringRef v22 = v21;
          uint64_t v23 = (void *)*MEMORY[0x189604DE0];
          if (is_root_krbtgt) {
            uint64_t v23 = (void *)*MEMORY[0x189604DE8];
          }
          keys[0] = @"kHEIMObjectType";
          keys[1] = @"kHEIMAttrType";
          keys[2] = @"kHEIMAttrClientName";
          keys[3] = @"kHEIMAttrServerName";
          keys[4] = @"kHEIMAttrData";
          keys[5] = @"kHEIMAttrParentCredential";
          keys[6] = @"kHEIMAttrLeadCredential";
          keys[7] = @"kHEIMAttrAuthTime";
          keys[8] = @"kHEIMAttrRenewTill";
          values[0] = @"kHEIMObjectKerberos";
          values[1] = @"kHEIMTypeKerberos";
          values[2] = *(void **)(v5 + 16);
          values[3] = (void *)v21;
          values[4] = v19;
          values[5] = *(void **)v5;
          values[6] = v23;
          if (v15) {
            CFIndex v24 = 9LL;
          }
          else {
            CFIndex v24 = 8LL;
          }
          values[7] = v10;
          values[8] = v15;
          char v25 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, v24, 0LL, 0LL);
          if (!v25) {
            heim_abort("Failed to create dictionary:query != NULL", v26, v27, v28, v29, v30, v31, v32, v38);
          }
          uint64_t v33 = v25;
          if (v12)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v25);
            CFDictionarySetValue(MutableCopy, @"kHEIMAttrExpire", v12);
            CFRelease(v33);
            uint64_t v33 = MutableCopy;
          }

          uint64_t v35 = (const void *)HeimCredCreate((uint64_t)v33, 0LL);
          if (v35)
          {
            CFRelease(v35);
            uint64_t v13 = 0LL;
          }

          else
          {
            sub_1882DFCE8((uint64_t)a1, 5, "failed to add credential to %s\n", *(const char **)(v5 + 32));
            uint64_t v13 = 22LL;
            krb5_set_error_message(a1, 22, "failed to store credential to %s", *(const char **)(v5 + 32));
          }

          krb5_storage_free(v17);
          if (v33) {
            CFRelease(v33);
          }
          CFRelease(v19);
          uint64_t v36 = v22;
        }

        else
        {
          uint64_t v13 = krb5_enomem(a1);
          krb5_storage_free(v17);
          uint64_t v36 = v19;
        }

        CFRelease(v36);
        goto LABEL_36;
      }

      uint64_t v13 = krb5_enomem(a1);
    }

    krb5_storage_free(v17);
  }

  else
  {
    uint64_t v13 = krb5_enomem(a1);
  }

LABEL_36:
  CFRelease(v10);
  if (v12) {
    CFRelease(v12);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_40:
  krb5_data_free(v39);
  return v13;
}

        ++v23;
      }

      while (v23 < *(unsigned int *)(a11 + 96));
    }

    _krb5_state_srv_sort(a11);
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV order after sorting");
    if (*(_DWORD *)(a11 + 96))
    {
      uint64_t v36 = 0LL;
      do
      {
        size_t v37 = *(void *)(*(void *)(a11 + 88) + 8 * v36);
        char v38 = *(void *)(v37 + 88);
        if (v38)
        {
          size_t v39 = (const char *)(v38 + 48);
          LODWORD(v38) = *(unsigned __int16 *)(v38 + 4);
        }

        else
        {
          size_t v39 = *(const char **)(v37 + 80);
          if (!v39) {
            size_t v39 = "<no-hostname>";
          }
        }

        sub_1882DFCE8( *(void *)(a11 + 32),  10,  "  SRV%lu kdc: %s:%d prio: %d weight: %d",  v36,  v39,  v38,  *(unsigned __int16 *)(v37 + 34),  *(_DWORD *)(v37 + 36));
        if (v36 < *(unsigned int *)(*v14 + 344))
        {
          sub_1882DB7E0(*v14, *(void *)(a11 + 48), *(int **)(*(void *)(*(void *)(a11 + 88) + 8 * v36) + 88LL));
          *(void *)(*(void *)(*(void *)(a11 + 88) + 8 * v36) + 88LL) = 0LL;
        }

        ++v36;
      }

      while (v36 < *(unsigned int *)(a11 + 96));
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a11 + 40));
    heim_release((CFTypeRef)a11);
  }

    uint64_t v32 = v29;
    goto LABEL_58;
  }

  if (v18 != 43)
  {
    if (v18 == 44)
    {
      if (v12 > 1)
      {
        CFDateRef v12 = (v12 - 2);
        uint64_t v30 = malloc(v12 + 23);
        CFStringRef v22 = v45;
        v45[3] = v30;
        if (v30)
        {
          *uint64_t v30 = v10[10];
          v30[1] = v10[11];
          *((void *)v30 + 1) = v12;
          char v25 = v30 + 4;
          uint64_t v26 = v10 + 12;
          goto LABEL_52;
        }

        goto LABEL_49;
      }

      goto LABEL_42;
    }

    goto LABEL_34;
  }

uint64_t sub_1882CAF44(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t result = sub_1882CBA24(a1, (uint64_t *)v5);
  if (!(_DWORD)result) {
    return krb5_copy_principal(a1, *(krb5_const_principal *)(v5 + 24), a3);
  }
  return result;
}

uint64_t sub_1882CAF98(_krb5_context *a1, uint64_t a2, const void ***a3)
{
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v3 = 2529639054LL;
  uint64_t v4 = **(void ***)(a2 + 16);
  if (v4)
  {
    CFUUIDRef v7 = (const void **)calloc(1uLL, 0x10uLL);
    if (!v7) {
      return krb5_enomem(a1);
    }
    CFIndex v8 = v7;
    keys[0] = @"kHEIMAttrParentCredential";
    keys[1] = @"kHEIMAttrType";
    values[0] = v4;
    values[1] = @"kHEIMTypeKerberos";
    CFDictionaryRef v9 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  2LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    if (!v9) {
      heim_abort("out of memory:query != NULL", v10, v11, v12, v13, v14, v15, v16, v19);
    }
    CFDictionaryRef v17 = v9;
    char *v8 = HeimCredCopyQuery();
    CFRelease(v17);
    if (*v8)
    {
      uint64_t v3 = 0LL;
      *a3 = v8;
    }

    else
    {
      sub_1882CBD24(v8);
    }
  }

  return v3;
}

uint64_t sub_1882CB0EC(uint64_t a1, uint64_t a2, const __CFArray ***a3, uint64_t a4)
{
  uint64_t v4 = 2529639054LL;
  uint64_t v5 = *a3;
  if (**a3)
  {
    while (1)
    {
      CFIndex v7 = (CFIndex)v5[1];
      if (v7 >= CFArrayGetCount(*v5)) {
        break;
      }
      CFIndex v8 = *v5;
      CFIndex v9 = (CFIndex)v5[1];
      v5[1] = (const __CFArray *)(v9 + 1);
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      if (!ValueAtIndex) {
        break;
      }
      uint64_t v11 = (const __CFData *)HeimCredCopyAttribute((uint64_t)ValueAtIndex, @"kHEIMAttrData");
      if (v11)
      {
        uint64_t v12 = v11;
        BytePtr = CFDataGetBytePtr(v11);
        CFIndex Length = CFDataGetLength(v12);
        uint64_t v15 = krb5_storage_from_readonly_mem((uint64_t)BytePtr, Length);
        if (v15)
        {
          uint64_t v16 = (uint64_t)v15;
          uint64_t v4 = krb5_ret_creds((uint64_t)v15, a4);
          krb5_storage_free(v16);
        }

        CFRelease(v12);
        return v4;
      }
    }
  }

  return v4;
}

uint64_t sub_1882CB1B0(uint64_t a1, uint64_t a2, const void ***a3)
{
  *a3 = 0LL;
  return 0LL;
}

uint64_t sub_1882CB1DC(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  keys[3] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v5 = 2529639053LL;
  uint64_t v6 = *(void ***)(a2 + 16);
  CFStringRef v7 = sub_1882CA740(a1, *(const krb5_principal_data **)(a4 + 8));
  if (!v7) {
    return 2529639054LL;
  }
  CFStringRef v8 = v7;
  keys[0] = @"kHEIMAttrParentCredential";
  keys[1] = @"kHEIMAttrType";
  keys[2] = @"kHEIMAttrServerName";
  values[0] = *v6;
  values[1] = @"kHEIMTypeKerberos";
  values[2] = (void *)v7;
  CFDictionaryRef v9 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  3LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!v9) {
    heim_abort("Failed to create dictionary:query != NULL", v10, v11, v12, v13, v14, v15, v16, v20);
  }
  CFDictionaryRef v17 = v9;
  CFRelease(v8);
  BOOL v18 = HeimCredDeleteQuery((uint64_t)v17, 0LL);
  CFRelease(v17);
  if (v18) {
    return 0LL;
  }
  krb5_set_error_message(a1, -1765328243, "Deleted credential not found");
  return v5;
}

uint64_t sub_1882CB31C()
{
  return 0LL;
}

uint64_t sub_1882CB324()
{
  return 0LL;
}

uint64_t sub_1882CB32C(_krb5_context *a1, const void ***a2)
{
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  keys[0] = @"kHEIMAttrType";
  keys[1] = @"kHEIMAttrServerName";
  uint64_t v4 = (const void *)*MEMORY[0x189605018];
  v17[0] = @"kHEIMTypeKerberos";
  v17[1] = v4;
  v17[2] = *(const void **)MEMORY[0x189604DE0];
  uint64_t v5 = (const void **)calloc(1uLL, 0x10uLL);
  if (!v5) {
    return krb5_enomem(a1);
  }
  uint64_t v6 = v5;
  CFDictionaryRef v7 = CFDictionaryCreate(0LL, (const void **)keys, v17, 2LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!v7) {
    heim_abort("Failed to create dictionary:query != NULL", v8, v9, v10, v11, v12, v13, v14, (char)v17[0]);
  }
  CFDictionaryRef v15 = v7;
  *uint64_t v6 = HeimCredCopyQuery();
  CFRelease(v15);
  if (*v6)
  {
    uint64_t result = 0LL;
    *a2 = v6;
  }

  else
  {
    sub_1882CBD24(v6);
    return 2529639054LL;
  }

  return result;
}

uint64_t sub_1882CB480()
{
  return 2529639054LL;
}

uint64_t sub_1882CB48C(int a1, const void **a2)
{
  return 0LL;
}

uint64_t sub_1882CB4A8(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  if (!HeimCredMove(*(const __CFUUID **)v5, *(const __CFUUID **)v6)) {
    return 2529639054LL;
  }
  if (*(void *)v5)
  {
    HeimCredDeleteByUUID(*(void **)v5);
    if (*(void *)v5)
    {
      CFRelease(*(CFTypeRef *)v5);
      *(void *)uint64_t v5 = 0LL;
    }
  }

  CFDictionaryRef v7 = *(const void **)(v6 + 8);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v6 + 8) = 0LL;
  }

  uint64_t v8 = *(const void **)(v5 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(v5 + 8) = 0LL;
  }

  uint64_t v9 = (void *)(a2 + 8);
  uint64_t v10 = *(const void **)(v6 + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v6 + 16) = 0LL;
  }

  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0LL;
  uint64_t v11 = *(krb5_principal_data **)(v6 + 24);
  if (v11) {
    krb5_free_principal(a1, v11);
  }
  *(void *)(v6 + 24) = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = 0LL;
  free(*(void **)(v6 + 32));
  *(void *)(v6 + 32) = 0LL;
  sub_1882CB9D4(v6);
  free(*(void **)(v5 + 32));
  krb5_data_free(v9);
  return 0LL;
}

uint64_t sub_1882CB594(int a1, char **a2)
{
  return sub_1882CBD50(a1, (uint64_t)&krb5_xcc_ops, "XCACHE:11111111-71F2-48EB-94C4-7D7392E900E5", a2);
}

uint64_t sub_1882CB5AC(_krb5_context *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = v3[1];
  if (!v4)
  {
    uint64_t v4 = HeimCredCopyFromUUID(*v3);
    v3[1] = v4;
    if (!v4) {
      return 2529639054LL;
    }
  }

  uint64_t v5 = 22LL;
  krb5_set_error_message(a1, 22, "XCACHE couldn't set default credential");
  return v5;
}

uint64_t sub_1882CB638(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  return 0LL;
}

uint64_t sub_1882CB644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  uint64_t v3 = v2[1];
  if (!v3)
  {
    uint64_t v3 = HeimCredCopyFromUUID(*v2);
    v2[1] = v3;
    if (!v3) {
      return 2529639053LL;
    }
  }

  HeimCredRetainTransient(v3);
  return 0LL;
}

uint64_t sub_1882CB68C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  uint64_t v3 = v2[1];
  if (!v3)
  {
    uint64_t v3 = HeimCredCopyFromUUID(*v2);
    v2[1] = v3;
    if (!v3) {
      return 2529639053LL;
    }
  }

  HeimCredReleaseTransient(v3);
  return 0LL;
}

uint64_t sub_1882CB6D4(uint64_t a1, uint64_t a2, CFUUIDBytes *a3)
{
  *a3 = CFUUIDGetUUIDBytes((CFUUIDRef)**(void **)(a2 + 16));
  return 0LL;
}

uint64_t sub_1882CB708(_krb5_context *a1, uint64_t a2, char *cStr, void *a4)
{
  CFDictionaryRef v7 = *(uint64_t **)(a2 + 16);
  if (!v7[1])
  {
    uint64_t v8 = HeimCredCopyFromUUID(*v7);
    v7[1] = v8;
    if (!v8) {
      return 2529639054LL;
    }
  }

  uint64_t v9 = (__CFString *)CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (!v9) {
    return krb5_enomem(a1);
  }
  uint64_t v10 = v9;
  int v11 = HeimCredSetAttribute(v7[1], v9, a4, 0LL);
  CFRelease(v10);
  if (v11) {
    return 0LL;
  }
  else {
    return 2529639054LL;
  }
}

uint64_t sub_1882CB7BC(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  *a4 = 0LL;
  uint64_t v7 = v6[1];
  if (!v7)
  {
    uint64_t v7 = HeimCredCopyFromUUID(*v6);
    v6[1] = v7;
    if (!v7) {
      return 2529639054LL;
    }
  }

  uint64_t v8 = HeimCredCopyAttributes(v7, 0LL, 0LL);
  *a4 = v8;
  if (v8) {
    return 0LL;
  }
  uint64_t v9 = 2529639054LL;
  krb5_set_error_message(a1, -1765328242, "Credential have no attributes");
  return v9;
}

BOOL sub_1882CB850(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  return *a2 == &krb5_xcc_api_ops || v2 == &krb5_xcc_ops || v2 == &krb5_xcc_temp_api_ops;
}

uint64_t sub_1882CB880(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = 2529639054LL;
  if (*(void *)a2)
  {
    CFIndex v7 = *(void *)(a2 + 8);
    if (v7 < CFArrayGetCount(*(CFArrayRef *)a2))
    {
      uint64_t v8 = *(const __CFArray **)a2;
      CFIndex v9 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v9 + 1;
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      if (ValueAtIndex)
      {
        int v11 = ValueAtIndex;
        uint64_t v4 = sub_1882C128C(a1, (uint64_t)&krb5_xcc_api_ops, a3);
        if (!(_DWORD)v4)
        {
          sub_1882CB978(a1, (uint64_t)a3);
          uint64_t v12 = *(void **)(*a3 + 16LL);
          UUID = (const void *)HeimCredGetUUID((uint64_t)v11);
          void *v12 = UUID;
          CFRetain(UUID);
          v12[1] = v11;
          CFRetain(v11);
          sub_1882CB9D4((uint64_t)v12);
        }
      }
    }
  }

  return v4;
}

uint64_t sub_1882CB944(int a1, char **a2)
{
  return sub_1882CBD50(a1, (uint64_t)&krb5_xcc_api_ops, "API:11111111-71F2-48EB-94C4-7D7392E900E5", a2);
}

uint64_t sub_1882CB960()
{
  return 2529639054LL;
}

uint64_t sub_1882CB96C()
{
  return 2529639054LL;
}

uint64_t sub_1882CB978(_krb5_context *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 16LL) = calloc(1uLL, 0x28uLL);
  if (!*(void *)(*(void *)a2 + 16LL)) {
    return krb5_enomem(a1);
  }
  *(void *)(*(void *)a2 + 8LL) = 40LL;
  return 0LL;
}

void sub_1882CB9D4(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    CFUUIDBytes v3 = CFUUIDGetUUIDBytes((CFUUIDRef)*(void *)a1);
    uint64_t v2 = (char *)malloc(0x25uLL);
    *(void *)(a1 + 32) = v2;
    uuid_unparse(&v3.byte0, v2);
  }

uint64_t sub_1882CBA24(_krb5_context *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  if (!v4)
  {
    uint64_t v5 = (const void *)HeimCredCopyFromUUID(*a2);
    uint64_t v6 = (const void *)HeimCredCopyAttributes((uint64_t)v5, 0LL, 0LL);
    if (v6)
    {
      a2[1] = (uint64_t)v5;
      CFRetain(v5);
    }

    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v4 = a2[1];
    if (!v4)
    {
      uint64_t v8 = 2529639053LL;
      krb5_set_error_message(a1, -1765328243, "no credential for %s");
      return v8;
    }
  }

  CFIndex v7 = (const __CFString *)a2[2];
  if (!v7)
  {
    CFIndex v7 = (const __CFString *)HeimCredCopyAttribute(v4, @"kHEIMAttrClientName");
    a2[2] = (uint64_t)v7;
    if (!v7)
    {
      uint64_t v8 = 2529639053LL;
      krb5_set_error_message(a1, -1765328243, "no cache for %s");
      return v8;
    }
  }

  if (!a2[3])
  {
    krb5_principal v13 = 0LL;
    CFIndex v9 = rk_cfstring2cstring(v7);
    if (v9)
    {
      uint64_t v10 = v9;
      krb5_parse_name(a1, v9, &v13);
      free(v10);
      krb5_principal v11 = v13;
      a2[3] = (uint64_t)v13;
      if (v11) {
        return 0LL;
      }
    }

    else
    {
      a2[3] = 0LL;
    }

    uint64_t v8 = 2529639053LL;
    krb5_set_error_message(a1, -1765328243, "no principal for %s");
    return v8;
  }

  return 0LL;
}

CFIndex sub_1882CBB80(_krb5_context *a1, void *a2, void *a3, int a4)
{
  keys[4] = *(void **)MEMORY[0x1895F89C0];
  keys[0] = @"kHEIMObjectType";
  keys[1] = @"kHEIMAttrType";
  keys[2] = @"kHEIMAttrTemporaryCache";
  keys[3] = @"kHEIMAttrUUID";
  values[0] = @"kHEIMObjectKerberos";
  values[1] = @"kHEIMTypeKerberos";
  CFIndex v7 = (void **)MEMORY[0x189604DE0];
  if (a4) {
    CFIndex v7 = (void **)MEMORY[0x189604DE8];
  }
  values[2] = *v7;
  values[3] = a3;
  if (a3) {
    CFIndex v8 = 4LL;
  }
  else {
    CFIndex v8 = 3LL;
  }
  CFTypeRef cf = 0LL;
  CFDictionaryRef v9 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, v8, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!v9) {
    heim_abort("Failed to create dictionary:attrs != NULL", v10, v11, v12, v13, v14, v15, v16, (char)cf);
  }
  CFDictionaryRef v17 = v9;
  a2[1] = HeimCredCreate((uint64_t)v9, (CFErrorRef *)&cf);
  CFRelease(v17);
  uint64_t v25 = a2[1];
  if (v25)
  {
    if (!a3)
    {
      if (*a2) {
        heim_abort( "credential should not already have a UUID:x->uuid == NULL",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  (char)cf);
      }
      UUID = (const void *)HeimCredGetUUID(v25);
      *a2 = UUID;
      if (!UUID) {
        heim_abort("no uuid for credential?:x->uuid != NULL", v27, v28, v29, v30, v31, v32, v33, (char)cf);
      }
      CFRetain(UUID);
    }

    sub_1882CB9D4((uint64_t)a2);
    CFIndex v34 = 0LL;
  }

  else
  {
    CFIndex v34 = sub_1882CC428(a1, 12LL, (__CFError *)cf, "no reply from GSSCred", v21, v22, v23, v24, (char)cf);
  }

  if (cf) {
    CFRelease(cf);
  }
  return v34;
}

void sub_1882CBD24(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t sub_1882CBD50(int a1, uint64_t a2, char *a3, char **a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  CFIndex v8 = (const __CFUUID *)HeimCredCopyDefaultCredential(@"kHEIMTypeKerberos", 0LL);
  if (!v8) {
    return _krb5_expand_default_cc_name(a1, a3);
  }
  CFDictionaryRef v9 = v8;
  CFUUIDBytes uu = CFUUIDGetUUIDBytes(v8);
  uuid_unparse(&uu.byte0, out);
  CFRelease(v9);
  asprintf(a4, "%s:%s", *(const char **)(a2 + 8), out);
  return 0LL;
}

uint64_t sub_1882CBE50(_krb5_context *a1, uint64_t a2, CFUUIDBytes *a3)
{
  uint64_t v10 = a2;
  CFUUIDRef v5 = CFUUIDCreateFromUUIDBytes(0LL, *a3);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    uint64_t v7 = sub_1882CB978(a1, (uint64_t)&v10);
    if ((_DWORD)v7)
    {
      CFRelease(v6);
    }

    else
    {
      CFIndex v8 = *(CFUUIDRef **)(a2 + 16);
      CFUUIDRef *v8 = v6;
      sub_1882CB9D4((uint64_t)v8);
    }
  }

  else
  {
    uint64_t v7 = 2529639054LL;
    krb5_set_error_message(a1, -1765328242, "failed to create uuid");
  }

  return v7;
}

uint64_t krb5_eai_to_heim_errno(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      return 2314790785LL;
    case 2:
      return 2314790786LL;
    case 3:
      return 2314790787LL;
    case 4:
      return 2314790788LL;
    case 5:
      int v2 = 5;
      goto LABEL_12;
    case 6:
      return 2314790790LL;
    case 7:
      return 2314790791LL;
    case 8:
      return 2314790792LL;
    case 9:
      int v2 = 9;
      goto LABEL_12;
    case 10:
      int v2 = 10;
LABEL_12:
      uint64_t result = v2 | 0x89F8E780;
      break;
    case 11:
      uint64_t result = a2;
      break;
    default:
      uint64_t result = 2314790784LL;
      break;
  }

  return result;
}

uint64_t krb5_h_errno_to_heim_errno(unsigned int a1)
{
  if (a1 > 4) {
    return 2314790784LL;
  }
  else {
    return dword_18831A38C[a1];
  }
}

void krb5_clear_error_message(krb5_context a1)
{
  int v2 = (void *)*((void *)a1 + 35);
  if (v2) {
    free(v2);
  }
  *((_DWORD *)a1 + 72) = 0;
  *((void *)a1 + 35) = 0LL;
  pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
}

void krb5_set_error_message(krb5_context a1, krb5_error_code a2, const char *a3, ...)
{
}

void krb5_vset_error_message(krb5_context a1, krb5_error_code a2, const char *a3, va_list a4)
{
  if (a1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)a1 + 41));
    CFIndex v8 = (void *)((char *)a1 + 280);
    CFDictionaryRef v9 = (void *)*((void *)a1 + 35);
    if (v9)
    {
      free(v9);
      void *v8 = 0LL;
    }

    *((_DWORD *)a1 + 72) = a2;
    pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
    uint64_t v10 = (const char *)*((void *)a1 + 35);
    if (v10) {
      sub_1882DFCE8((uint64_t)a1, 100, "set-error: %d: %s", a2, v10);
    }
  }

const char *__cdecl krb5_get_error_message(krb5_context a1, krb5_error_code a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v15 = 0LL;
  krb5_context v16 = a1;
  if (!a2) {
    return strdup("Success");
  }
  if (!a1)
  {
    krb5_error_code inited = krb5_init_context(&v16);
    krb5_error_code v9 = inited;
    if (v16)
    {
      uint64_t v10 = com_right_r(*((void **)v16 + 18), a2, __dst, 0x80uLL);
      CFUUIDRef v6 = v10;
      if (v9)
      {
        if (!v10) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }
    }

    else
    {
      if (inited) {
        goto LABEL_19;
      }
      CFUUIDRef v6 = 0LL;
    }

    krb5_free_context(v16);
    if (!v6) {
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v11 = v6;
    return strdup(v11);
  }

  pthread_mutex_lock(*((pthread_mutex_t **)a1 + 41));
  uint64_t v4 = (const char *)*((void *)a1 + 35);
  if (!v4 || (int v5 = *((_DWORD *)a1 + 72), v5 != a2) && v5)
  {
    pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
    goto LABEL_7;
  }

  uint64_t v12 = strdup(v4);
  uint64_t v15 = v12;
  pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
  if (!v12)
  {
LABEL_7:
    CFUUIDRef v6 = com_right_r(*((void **)a1 + 18), a2, __dst, 0x80uLL);
    if (!v6)
    {
LABEL_19:
      uint64_t v11 = error_message(a2);
      if (!v11)
      {
        int v13 = asprintf(&v15, "<unknown error: %d>", a2);
        if (v15) {
          BOOL v14 = v13 == -1;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14) {
          return 0LL;
        }
        else {
          return v15;
        }
      }

      return strdup(v11);
    }

    goto LABEL_13;
  }

  return v12;
}

void krb5_free_error_message(krb5_context a1, const char *a2)
{
  if (a2) {
    free((void *)a2);
  }
}

const char *krb5_get_err_text(uint64_t a1, int __errnum)
{
  if (!result) {
    return "Unknown error";
  }
  return result;
}

CFIndex sub_1882CC2D8(_krb5_context *a1, CFIndex Code, CFErrorRef err, char *a4, va_list a5)
{
  uint64_t v19 = 0LL;
  if (err)
  {
    uint64_t v10 = CFErrorCopyDescription(err);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = rk_cfstring2cstring(v10);
      CFRelease(v11);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    int v13 = CFErrorCopyUserInfo(err);
    if (v13)
    {
      BOOL v14 = v13;
      Value = (const __CFBoolean *)CFDictionaryGetValue(v13, @"CommonErrorCode");
      if (Value)
      {
        krb5_context v16 = Value;
        CFTypeID v17 = CFGetTypeID(Value);
        if (v17 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v16)) {
            Code = CFErrorGetCode(err);
          }
        }
      }

      CFRelease(v14);
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  if ((vasprintf(&v19, a4, a5) & 0x80000000) == 0 && v19)
  {
    if (v12)
    {
      krb5_set_error_message(a1, Code, "%s: %s", v19, v12);
      free(v12);
    }

    else
    {
      krb5_set_error_message(a1, Code, "%s", v19);
    }

    uint64_t v12 = v19;
  }

  free(v12);
  return Code;
}

CFIndex sub_1882CC428( _krb5_context *a1, CFIndex a2, __CFError *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_1882CC2D8(a1, a2, a3, a4, &a9);
}

uint64_t krb5_expand_hostname(_krb5_context *a1, char *__s1, unsigned __int8 **a3)
{
  if ((*((_BYTE *)a1 + 360) & 1) == 0) {
    return sub_1882CC550(a1, __s1, a3);
  }
  memset(&v11, 0, sizeof(v11));
  v11.ai_flags = 2;
  if (!getaddrinfo(__s1, 0LL, &v11, &v12))
  {
    uint64_t v7 = v12;
    if (v12)
    {
      CFIndex v8 = v12;
      while (1)
      {
        ai_canonname = v8->ai_canonname;
        if (ai_canonname) {
          break;
        }
        CFIndex v8 = v8->ai_next;
        if (!v8) {
          goto LABEL_8;
        }
      }

      *a3 = (unsigned __int8 *)strdup(ai_canonname);
      freeaddrinfo(v7);
      if (*a3) {
        return 0LL;
      }
      uint64_t v10 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v10;
    }

uint64_t sub_1882CC550(_krb5_context *a1, char *__s1, unsigned __int8 **a3)
{
  int v5 = (unsigned __int8 *)strdup(__s1);
  *a3 = v5;
  if (v5)
  {
    rk_strlwr(v5);
    return 0LL;
  }

  else
  {
    uint64_t v6 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v6;
}

uint64_t krb5_expand_hostname_realms(_krb5_context *a1, char *a2, unsigned __int8 **a3, char ***a4)
{
  if ((*((_BYTE *)a1 + 360) & 1) == 0) {
    return sub_1882CC6DC(a1, a2, a3, a4);
  }
  memset(&v14, 0, sizeof(v14));
  v14.ai_flags = 2;
  if (getaddrinfo(a2, 0LL, &v14, &v15)) {
    return sub_1882CC6DC(a1, a2, a3, a4);
  }
  krb5_error_code v9 = v15;
  if (!v15)
  {
    uint64_t v12 = 0LL;
LABEL_12:
    freeaddrinfo(v12);
    return sub_1882CC6DC(a1, a2, a3, a4);
  }

  while (1)
  {
    ai_canonname = v9->ai_canonname;
    if (ai_canonname) {
      break;
    }
LABEL_9:
    krb5_error_code v9 = v9->ai_next;
    if (!v9)
    {
      uint64_t v12 = v15;
      goto LABEL_12;
    }
  }

  uint64_t v11 = sub_1882CC550(a1, ai_canonname, a3);
  if ((_DWORD)v11)
  {
    uint64_t v13 = v11;
    freeaddrinfo(v15);
    return v13;
  }

  rk_strlwr(*a3);
  if (krb5_get_host_realm(a1, (const char *)*a3, a4))
  {
    free(*a3);
    goto LABEL_9;
  }

  freeaddrinfo(v15);
  return 0LL;
}

uint64_t sub_1882CC6DC(_krb5_context *a1, char *a2, unsigned __int8 **a3, char ***a4)
{
  uint64_t host_realm = sub_1882CC550(a1, a2, a3);
  if (!(_DWORD)host_realm)
  {
    rk_strlwr(*a3);
    uint64_t host_realm = krb5_get_host_realm(a1, (const char *)*a3, a4);
    if ((_DWORD)host_realm) {
      free(*a3);
    }
  }

  return host_realm;
}

uint64_t sub_1882CC740(_krb5_context *a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  v9[0] = 0LL;
  v9[1] = 0LL;
  if (a3) {
    __int16 v4 = 3;
  }
  else {
    __int16 v4 = 1;
  }
  __int16 v10 = v4;
  __int16 v11 = 0;
  uint64_t v5 = fcntl(a2, 9, v9);
  if ((v5 & 0x80000000) != 0) {
    uint64_t v5 = *__error();
  }
  if ((_DWORD)v5 == 13) {
    int v6 = 35;
  }
  else {
    int v6 = v5;
  }
  if (v6) {
    BOOL v7 = v6 == 22;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0LL;
  }
  if (v6 == 35)
  {
    uint64_t v5 = 35LL;
    krb5_set_error_message(a1, 35, "timed out locking cache file %s");
  }

  else
  {
    strerror_r(v6, __strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v6, "error locking cache file %s: %s");
  }

  return v5;
}

uint64_t sub_1882CC854(_krb5_context *a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  v5[0] = 0LL;
  v5[1] = 0LL;
  int v6 = 2;
  uint64_t v3 = fcntl(a2, 9, v5);
  if ((v3 & 0x80000000) != 0) {
    uint64_t v3 = *__error();
  }
  uint64_t result = 0LL;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 != 22)
    {
      strerror_r(v3, __strerrbuf, 0x80uLL);
      krb5_set_error_message(a1, v3, "Failed to unlock file: %s", __strerrbuf);
      return v3;
    }
  }

  return result;
}

uint64_t sub_1882CC91C(_krb5_context *a1, char *a2)
{
  if (lstat(a2, &v12) < 0) {
    return *__error();
  }
  int v4 = open(a2, 2);
  if (v4 < 0)
  {
    if (*__error() == 2) {
      return 0LL;
    }
    return *__error();
  }

  int v5 = v4;
  sub_1882FA158(v4);
  uint64_t v6 = sub_1882CC740(a1, v5, 1);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    close(v5);
    return v7;
  }

  if (unlink(a2) < 0 || fstat(v5, &v11) < 0)
  {
    sub_1882CC854(a1, v5);
    close(v5);
    return *__error();
  }

  if (v12.st_dev != v11.st_dev || v12.st_ino != v11.st_ino)
  {
    sub_1882CC854(a1, v5);
    close(v5);
    return 1LL;
  }

  if (v11.st_nlink)
  {
    sub_1882CC854(a1, v5);
    close(v5);
    return 0LL;
  }

  unsigned int v9 = sub_1882CCA84(v5);
  unsigned int v10 = sub_1882CC854(a1, v5);
  close(v5);
  if (v9) {
    return v9;
  }
  else {
    return v10;
  }
}

uint64_t sub_1882CCA84(int a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  off_t v2 = lseek(a1, 0LL, 2);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = v2;
    if ((lseek(a1, 0LL, 0) & 0x8000000000000000LL) == 0)
    {
      memset(v7, 0, sizeof(v7));
      if (!v3)
      {
LABEL_9:
        fsync(a1);
        return 0LL;
      }

      while (1)
      {
        size_t v4 = (unint64_t)v3 >= 0x80 ? 128LL : v3;
        ssize_t v5 = write(a1, v7, v4);
        if (v5 < 0) {
          break;
        }
        v3 -= v5;
        if (v3 < 1) {
          goto LABEL_9;
        }
      }
    }
  }

  return *__error();
}

uint64_t sub_1882CCB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    return *(void *)v2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1882CCB74(_krb5_context *a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = malloc(0x10uLL);
  if (!v6)
  {
    uint64_t v9 = 2529639110LL;
LABEL_6:
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    return v9;
  }

  uint64_t v7 = v6;
  uint64_t v8 = strdup(a3);
  *(void *)uint64_t v7 = v8;
  if (!v8)
  {
    uint64_t v9 = 2529639110LL;
    free(v7);
    goto LABEL_6;
  }

  uint64_t v9 = 0LL;
  krb5_deltat v7[2] = 0;
  *(void *)(*(void *)a2 + 16LL) = v7;
  *(void *)(*(void *)a2 + 8LL) = 16LL;
  return v9;
}

uint64_t sub_1882CCC18(_krb5_context *a1, uint64_t a2)
{
  unsigned int v10 = 0LL;
  __big = 0LL;
  size_t v4 = malloc(0x10uLL);
  if (!v4)
  {
    uint64_t v6 = 2529639110LL;
LABEL_9:
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    return v6;
  }

  ssize_t v5 = v4;
  if (asprintf(&__big, "%sXXXXXX", "%{TEMP}/krb5cc_") < 0 || !__big)
  {
    uint64_t v6 = 2529639110LL;
    free(v5);
    goto LABEL_9;
  }

  uint64_t v6 = _krb5_expand_default_cc_name_0(a1, __big, (void **)&v10);
  free(__big);
  if ((_DWORD)v6)
  {
    uint64_t v7 = (char *)v5;
  }

  else
  {
    __big = v10;
    int v9 = mkstemp(v10);
    if ((v9 & 0x80000000) == 0)
    {
      close(v9);
      uint64_t v6 = 0LL;
      *(void *)ssize_t v5 = v10;
      void v5[2] = 0;
      *(void *)(*(void *)a2 + 16LL) = v5;
      *(void *)(*(void *)a2 + 8LL) = 16LL;
      return v6;
    }

    uint64_t v6 = *__error();
    krb5_set_error_message(a1, v6, "mkstemp %s failed", v10);
    free(v5);
    uint64_t v7 = v10;
  }

  free(v7);
  return v6;
}

uint64_t sub_1882CCD54(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return sub_1882E1594();
  }
  unlink(*(const char **)v4);
  uint64_t v7 = sub_1882CDBDC((_krb5_context *)a1, a2, "initialize", &v21, 16779778, 0x180u);
  if (!(_DWORD)v7)
  {
    uint64_t v8 = krb5_storage_emem();
    krb5_storage_set_eof_code((uint64_t)v8, -1765328242);
    int v9 = a1[63];
    if (!v9) {
      int v9 = 4;
    }
    *(_DWORD *)(v4 + 8) = v9;
    int v10 = krb5_store_int8((uint64_t)v8, 5);
    int v11 = krb5_store_int8((uint64_t)v8, *(_BYTE *)(v4 + 8)) | v10;
    sub_1882CDD50((_krb5_context *)a1, (uint64_t)v8, *(_DWORD *)(v4 + 8));
    if (*(_DWORD *)(v4 + 8) == 4 && v11 == 0)
    {
      if (a1[27])
      {
        int v13 = krb5_store_int16((uint64_t)v8, 0xCu);
        int v14 = krb5_store_int16((uint64_t)v8, 1u) | v13;
        int v15 = v14 | krb5_store_int16((uint64_t)v8, 8u);
        int v16 = v15 | krb5_store_int32((uint64_t)v8, a1[27]);
        int v11 = v16 | krb5_store_int32((uint64_t)v8, a1[28]);
      }

      else
      {
        int v11 = krb5_store_int16((uint64_t)v8, 0);
      }
    }

    int v18 = krb5_store_principal((uint64_t)v8, a3);
    int v19 = v21;
    uint64_t v7 = v18 | v11 | sub_1882CDD98((_krb5_context *)a1, (uint64_t)v8, v21);
    krb5_storage_free((uint64_t)v8);
    sub_1882CC854((_krb5_context *)a1, v19);
    if (close(v19) < 0 && !(_DWORD)v7)
    {
      uint64_t v20 = __error();
      uint64_t v7 = *v20;
      strerror_r(*v20, __strerrbuf, 0x80uLL);
      krb5_set_error_message((krb5_context)a1, v7, "close %s: %s", **(const char ***)(a2 + 16), __strerrbuf);
    }
  }

  return v7;
}

uint64_t sub_1882CCF9C(_krb5_context *a1, uint64_t a2)
{
  uint64_t v2 = *(char ***)(a2 + 16);
  if (!v2) {
    return sub_1882E1594();
  }
  sub_1882CC91C(a1, *v2);
  return 0LL;
}

uint64_t sub_1882CCFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  if (!v2) {
    return sub_1882E1594();
  }
  uint64_t v3 = (void *)(a2 + 8);
  free(*v2);
  krb5_data_free(v3);
  return 0LL;
}

uint64_t sub_1882CD024(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v6 = sub_1882CDBDC(a1, a2, "store", &v15, 16777225, 0);
  if (!(_DWORD)v6)
  {
    uint64_t v7 = krb5_storage_emem();
    krb5_storage_set_eof_code((uint64_t)v7, -1765328242);
    sub_1882CDD50(a1, (uint64_t)v7, *(_DWORD *)(*(void *)(a2 + 16) + 8LL));
    uint64_t v6 = krb5_store_creds((uint64_t)v7, a3);
    int v13 = v15;
    if (!(_DWORD)v6) {
      uint64_t v6 = sub_1882CDD98(a1, (uint64_t)v7, v15);
    }
    krb5_storage_free((uint64_t)v7);
    sub_1882CC854(a1, v13);
    if (close(v13) < 0 && !(_DWORD)v6)
    {
      strerror_r(0, __strerrbuf, 0x80uLL);
      uint64_t v6 = *__error();
      krb5_set_error_message(a1, v6, "close %s: %s", **(const char ***)(a2 + 16), __strerrbuf);
    }
  }

  return v6;
}

uint64_t sub_1882CD1A0(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1882CDE38(a1, a2, "get-pricipal", &v9, &v10, 0LL);
  if (!(_DWORD)v5)
  {
    uint64_t v6 = v9;
    uint64_t v5 = krb5_ret_principal(v9, a3);
    if ((_DWORD)v5) {
      krb5_clear_error_message((krb5_context)a1);
    }
    krb5_storage_free(v6);
    int v7 = v10;
    sub_1882CC854((_krb5_context *)a1, v10);
    close(v7);
  }

  return v5;
}

uint64_t sub_1882CD234(unsigned int *a1, uint64_t a2, int **a3)
{
  if (!*(void *)(a2 + 16)) {
    return sub_1882E1594();
  }
  uint64_t v6 = malloc(0x10uLL);
  *a3 = (int *)v6;
  if (v6)
  {
    *(void *)uint64_t v6 = 0LL;
    *((void *)v6 + 1) = 0LL;
    uint64_t v7 = sub_1882CDE38(a1, a2, "get-frist", (uint64_t *)v6 + 1, (int *)v6, 0LL);
    uint64_t v8 = (uint64_t *)*a3;
    if ((_DWORD)v7)
    {
      free(v8);
      *a3 = 0LL;
    }

    else
    {
      uint64_t v7 = krb5_ret_principal(v8[1], &v10);
      if ((_DWORD)v7)
      {
        krb5_clear_error_message((krb5_context)a1);
        sub_1882CD410((uint64_t)a1, a2, a3);
      }

      else
      {
        krb5_free_principal((krb5_context)a1, v10);
        sub_1882CC854((_krb5_context *)a1, **a3);
      }
    }
  }

  else
  {
    uint64_t v7 = 12LL;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  }

  return v7;
}

uint64_t sub_1882CD350(_krb5_context *a1, uint64_t a2, int **a3, uint64_t a4)
{
  if (!*(void *)(a2 + 16) || !*a3) {
    return sub_1882E1594();
  }
  uint64_t v7 = sub_1882CC740(a1, **a3, 0);
  if (!(_DWORD)v7)
  {
    uint64_t v7 = krb5_ret_creds(*((void *)*a3 + 1), a4);
    if ((_DWORD)v7) {
      krb5_clear_error_message(a1);
    }
    sub_1882CC854(a1, **a3);
  }

  return v7;
}

uint64_t sub_1882CD410(uint64_t a1, uint64_t a2, int **a3)
{
  if (!*(void *)(a2 + 16) || !*a3) {
    return sub_1882E1594();
  }
  krb5_storage_free(*((void *)*a3 + 1));
  close(**a3);
  free(*a3);
  *a3 = 0LL;
  return 0LL;
}

uint64_t sub_1882CD488(krb5_context context, uint64_t a2, krb5_flags a3, krb5_creds *a4)
{
  int v15 = 0LL;
  if (!*(void *)(a2 + 16)) {
    return sub_1882E1594();
  }
  uint64_t v8 = krb5_cc_new_unique(context, krb5_cc_type_memory[0], 0LL, &id);
  if (!(_DWORD)v8)
  {
    uint64_t v9 = krb5_cc_copy_cache(context, a2, (uint64_t)id);
    krb5_principal v10 = id;
    if ((_DWORD)v9)
    {
      uint64_t v8 = v9;
    }

    else
    {
      uint64_t v12 = krb5_cc_remove_cred(context, id, a3, a4);
      if ((_DWORD)v12)
      {
        uint64_t v8 = v12;
      }

      else
      {
        if (asprintf(&v15, "FILE:%s.XXXXXX", **(const char ***)(a2 + 16)) < 0 || !v15)
        {
          krb5_cc_destroy(context, id);
          return 12LL;
        }

        int v13 = mkstemp(v15 + 5);
        if (v13 < 0)
        {
          uint64_t v8 = *__error();
        }

        else
        {
          close(v13);
          uint64_t v14 = krb5_cc_resolve(context, v15, &cache);
          if (!(_DWORD)v14)
          {
            uint64_t v8 = krb5_cc_copy_cache(context, (uint64_t)id, (uint64_t)cache);
            krb5_cc_destroy(context, id);
            if (!(_DWORD)v8)
            {
              else {
                uint64_t v8 = 0LL;
              }
              free(v15);
              krb5_cc_close(context, cache);
              return v8;
            }

            free(v15);
            krb5_principal v10 = cache;
            goto LABEL_9;
          }

          uint64_t v8 = v14;
          unlink(v15 + 5);
          free(v15);
        }
      }

      krb5_principal v10 = id;
    }

LABEL_9:
    krb5_cc_destroy(context, v10);
  }

  return v8;
}

  if (v21) {
    krb5_sendto_ctx_free((uint64_t)a1, v21);
  }
  return inited;
}

    int v18 = v9;
LABEL_31:
    close(v8);
    return v18;
  }

  int v21 = __error();
  int v18 = *v21;
  uint64_t v22 = *(const char **)v6;
  uint64_t v23 = strerror(*v21);
  krb5_set_error_message(a1, v18, "open(%s): %s", v22, v23);
  return v18;
}

  v4[3] = v8 >> 4;
  uint64_t v9 = __rev16(*((unsigned __int16 *)a1 + 2));
  v4[4] = v9;
  void v4[5] = __rev16(*((unsigned __int16 *)a1 + 3));
  void v4[6] = __rev16(*((unsigned __int16 *)a1 + 4));
  v4[7] = __rev16(*((unsigned __int16 *)a1 + 5));
  if (v9 == 1)
  {
    krb5_principal v10 = &a1[a2];
    uint64_t v11 = res_9_dn_expand(a1, v10, a1 + 12, __s1, 1025);
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v12 = v11;
      int v13 = strdup(__s1);
      *((void *)v5 + 4) = v13;
      if (v13)
      {
        uint64_t v14 = &a1[v12 + 12];
        if (v14 + 4 <= v10)
        {
          v5[10] = __rev16(*(unsigned __int16 *)v14);
          v5[11] = __rev16(*((unsigned __int16 *)v14 + 1));
          uint64_t v20 = v14 + 4;
          int v16 = (void ***)(v5 + 12);
          if (v5[5])
          {
            uint64_t v17 = 0LL;
            while (!sub_1882FB284(a1, v10, &v20, v16))
            {
              int v16 = (void ***)(*v16 + 4);
            }
          }

          else
          {
LABEL_27:
            if (v5[6])
            {
              int v18 = 0LL;
              while (!sub_1882FB284(a1, v10, &v20, v16))
              {
                int v16 = (void ***)(*v16 + 4);
              }
            }

            else
            {
LABEL_31:
              if (!v5[7])
              {
LABEL_35:
                *int v16 = 0LL;
                return v5;
              }

              int v19 = 0LL;
              while (!sub_1882FB284(a1, v10, &v20, v16))
              {
                int v16 = (void ***)(*v16 + 4);
              }
            }
          }
        }
      }
    }

    sub_1882FAF6C(v5);
  }

  else
  {
    free(v4);
  }

  return 0LL;
}

    uint64_t v32 = a1;
    uint64_t v33 = 569925;
LABEL_16:
    hx509_set_error_string(v32, 0, v33, v31, v20, v21, v22, v23, v35);
    goto LABEL_17;
  }

  uint64_t v30 = 12LL;
  hx509_set_error_string(a1, 0, 12, "out of memory", v13, v14, v15, v16, v35);
  sub_188313D30();
  return v30;
}

        ++v7;
        v10 += 2;
        if (v7 == 5)
        {
          if ((v8 & 1) != 0 && !sigaction(i, &v29, (sigaction *)&v32[4 * i + 34])) {
            v32[i] = 1;
          }
          goto LABEL_16;
        }
      }

      uint64_t v8 = 0;
      if (v7 != 4) {
        continue;
      }
      break;
    }

uint64_t sub_1882CD65C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 0LL;
  }
  else {
    return sub_1882E1594();
  }
}

uint64_t sub_1882CD67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    return *(unsigned int *)(v2 + 8);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1882CD694(_krb5_context *a1, void *a2)
{
  uint64_t v4 = calloc(1uLL, 4uLL);
  if (v4)
  {
    uint64_t v5 = 0LL;
    _DWORD *v4 = 1;
    *a2 = v4;
  }

  else
  {
    uint64_t v5 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v5;
}

uint64_t sub_1882CD6FC(const char **a1, _DWORD *a2, krb5_ccache *a3)
{
  uint64_t v9 = 0LL;
  if (!a2) {
    return sub_1882E1594();
  }
  if (*a2)
  {
    *a2 = 0;
    uint64_t v5 = a1[38];
    if (v5 && !strncasecmp(a1[38], "FILE:", 5uLL)) {
      goto LABEL_7;
    }
    uint64_t v6 = _krb5_expand_default_cc_name((int)a1, "FILE:%{TEMP}/krb5cc_%{uid}");
    if (!(_DWORD)v6)
    {
      uint64_t v5 = v9;
LABEL_7:
      if (!strncasecmp(v5, "FILE:", 5uLL) && stat(v5 + 5, &v8)) {
        uint64_t v6 = 2529639054LL;
      }
      else {
        uint64_t v6 = krb5_cc_resolve((krb5_context)a1, v5, a3);
      }
      if (v9) {
        free(v9);
      }
    }
  }

  else
  {
    uint64_t v6 = 2529639054LL;
    krb5_clear_error_message((krb5_context)a1);
  }

  return v6;
}

uint64_t sub_1882CD810(int a1, void *a2)
{
  if (!a2) {
    return sub_1882E1594();
  }
  free(a2);
  return 0LL;
}

uint64_t sub_1882CD840(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  __buf[128] = *MEMORY[0x1895F89C0];
  if (rename(**(const char ***)(a2 + 16), **(const char ***)(a3 + 16)))
  {
    if (*__error() != 18)
    {
      uint64_t v11 = __error();
      uint64_t v6 = *v11;
      strerror_r(*v11, (char *)__buf, 0x80uLL);
      krb5_set_error_message( a1,  v6,  "Rename of file from %s to %s failed: %s",  **(const char ***)(a2 + 16),  **(const char ***)(a3 + 16),  (const char *)__buf);
      return v6;
    }

    if (*__error() == 18)
    {
      uint64_t v6 = sub_1882CDBDC(a1, a2, "move/from", &v15, 0x1000000, 0);
      if ((_DWORD)v6) {
        return v6;
      }
      unlink(**(const char ***)(a3 + 16));
      uint64_t v6 = sub_1882CDBDC(a1, a3, "move/to", &v14, 16779777, 0x180u);
      int v7 = v15;
      if (!(_DWORD)v6)
      {
        int v8 = v14;
        uint64_t v9 = "Failed to write data from one file credential cache to the other";
        while (1)
        {
          ssize_t v10 = read(v7, __buf, 0x400uLL);
          if (v10 < 1) {
            break;
          }
          if (v10 != write(v8, __buf, v10)) {
            goto LABEL_14;
          }
        }

        if ((v10 & 0x8000000000000000LL) == 0)
        {
          uint64_t v6 = 0LL;
          goto LABEL_15;
        }

        uint64_t v9 = "Failed to read data from one file credential cache to the other";
LABEL_14:
        uint64_t v6 = 5LL;
        krb5_set_error_message(a1, 5, v9);
LABEL_15:
        sub_1882CC854(a1, v8);
        close(v8);
      }

      sub_1882CC854(a1, v7);
      close(v7);
      sub_1882CC91C(a1, **(char ***)(a2 + 16));
      if ((_DWORD)v6)
      {
        sub_1882CC91C(a1, **(char ***)(a3 + 16));
        return v6;
      }
    }
  }

  uint64_t v6 = sub_1882CDE38((unsigned int *)a1, a3, "move", __buf, &v15, 0LL);
  if (!(_DWORD)v6)
  {
    if (__buf[0]) {
      krb5_storage_free(__buf[0]);
    }
    int v12 = v15;
    sub_1882CC854(a1, v15);
    close(v12);
  }

  sub_1882CCFD4((uint64_t)a1, a2);
  return v6;
}

uint64_t sub_1882CDAB0(int a1)
{
  return _krb5_expand_default_cc_name(a1, "FILE:%{TEMP}/krb5cc_%{uid}");
}

uint64_t sub_1882CDAC0(_krb5_context *a1, uint64_t a2, __darwin_time_t *a3)
{
  uint64_t v5 = sub_1882CDBDC(a1, a2, "lastchange", &v9, 0x1000000, 0);
  if (!(_DWORD)v5)
  {
    int v6 = v9;
    int v7 = fstat(v9, &v10);
    close(v6);
    if (v7)
    {
      uint64_t v5 = *__error();
      krb5_set_error_message(a1, v5, "Failed to stat cache file");
    }

    else
    {
      uint64_t v5 = 0LL;
      *a3 = v10.st_mtimespec.tv_sec;
    }
  }

  return v5;
}

uint64_t sub_1882CDB60()
{
  return 0LL;
}

uint64_t sub_1882CDB68(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v8 = 0LL;
  uint64_t v4 = sub_1882CDE38(a1, a2, "get-kdc-offset", &v8, &v7, a3);
  if (v8) {
    krb5_storage_free(v8);
  }
  int v5 = v7;
  sub_1882CC854((_krb5_context *)a1, v7);
  close(v5);
  return v4;
}

uint64_t sub_1882CDBDC(_krb5_context *a1, uint64_t a2, const char *a3, int *a4, int a5, unsigned int a6)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  BOOL v8 = (a5 | 1) == a5 || (a5 | 2) == a5;
  int v9 = *(const char ***)(a2 + 16);
  if (!v9) {
    return sub_1882E1594();
  }
  int v12 = *v9;
  int v13 = open(*v9, a5, a6);
  if (v13 < 0)
  {
    int v16 = __error();
    uint64_t v17 = *v16;
    strerror_r(*v16, __strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v17, "%s open(%s): %s", a3, v12, __strerrbuf);
  }

  else
  {
    int v14 = v13;
    sub_1882FA158(v13);
    uint64_t v18 = sub_1882CC740(a1, v14, v8);
    uint64_t v17 = v18;
    if ((_DWORD)v18) {
      close(v14);
    }
    else {
      *a4 = v14;
    }
  }

  return v17;
}

uint64_t sub_1882CDD50(_krb5_context *a1, uint64_t a2, int a3)
{
  return krb5_storage_set_flags(a2, dword_18831A3A0[a3 - 1]);
}

uint64_t sub_1882CDD98(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v5 = krb5_storage_to_data(a2, v10);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    krb5_set_error_message(a1, v5, "malloc: out of memory");
  }

  else
  {
    ssize_t v7 = write(a3, (const void *)v10[1], v10[0]);
    size_t v8 = v10[0];
    krb5_data_free(v10);
    if (v7 == v8)
    {
      return 0LL;
    }

    else
    {
      uint64_t v6 = *__error();
      krb5_set_error_message(a1, v6, "Failed to write FILE credential data");
    }
  }

  return v6;
}

uint64_t sub_1882CDE38(unsigned int *a1, uint64_t a2, const char *a3, uint64_t *a4, int *a5, void *a6)
{
  if (a6) {
    *a6 = 0LL;
  }
  uint64_t v11 = sub_1882CDBDC((_krb5_context *)a1, a2, a3, &v35, 0x1000000, 0);
  if ((_DWORD)v11) {
    return v11;
  }
  int v12 = v35;
  int v13 = krb5_storage_from_fd(v35);
  if (!v13)
  {
    krb5_clear_error_message((krb5_context)a1);
    uint64_t v11 = 12LL;
    goto LABEL_18;
  }

  uint64_t v14 = (uint64_t)v13;
  uint64_t v11 = 2529639111LL;
  krb5_storage_set_eof_code((uint64_t)v13, -1765328242);
  uint64_t v15 = krb5_ret_int8(v14, (uint64_t)&v34);
  if ((_DWORD)v15)
  {
    uint64_t v16 = v15;
    if ((_DWORD)v15 == -1765328242)
    {
      uint64_t v11 = 2LL;
      krb5_set_error_message((krb5_context)a1, 2, "Empty credential cache file: %s");
    }

    else
    {
      krb5_set_error_message((krb5_context)a1, v15, "Error reading pvno in cache file: %s", **(const char ***)(a2 + 16));
      uint64_t v11 = v16;
    }

    goto LABEL_17;
  }

  if (v34 != 5)
  {
    uint64_t v11 = 2529639124LL;
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Bad version number in credential cache file: %s";
LABEL_15:
    uint64_t v18 = (_krb5_context *)a1;
    krb5_error_code v19 = -1765328172;
    goto LABEL_16;
  }

  if (krb5_ret_int8(v14, (uint64_t)&v33))
  {
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Error reading tag in cache file: %s";
    goto LABEL_12;
  }

  int v21 = v33;
  *(_DWORD *)(*(void *)(a2 + 16) + 8LL) = v33;
  sub_1882CDD50((_krb5_context *)a1, v14, v21);
  if ((v33 - 1) < 3)
  {
LABEL_21:
    uint64_t v11 = 0LL;
    *a4 = v14;
    *a5 = v12;
    return v11;
  }

  if (v33 != 4)
  {
    uint64_t v11 = 2529639124LL;
    uint64_t v26 = v33;
    uint64_t v27 = **(void **)(a2 + 16);
    uint64_t v17 = "Unknown version number (%d) in credential cache file: %s";
    goto LABEL_15;
  }

  if (krb5_ret_int16(v14, &v32))
  {
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Error reading tag length in cache file: %s";
    goto LABEL_12;
  }

  if (v32 < 1) {
    goto LABEL_21;
  }
  while (1)
  {
    if (krb5_ret_int16(v14, &v31))
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading dtag in cache file: %s";
      goto LABEL_12;
    }

    if (krb5_ret_int16(v14, &v30))
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading dlength in cache file: %s";
      goto LABEL_12;
    }

    if (v31 != 1) {
      break;
    }
    int v22 = krb5_ret_int32(v14, (unsigned int *)&v28);
    if (krb5_ret_int32(v14, a1 + 28) | v22)
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading kdc_sec in cache file: %s";
      goto LABEL_12;
    }

    uint64_t v23 = v28;
    a1[27] = v28;
    if (a6) {
      *a6 = v23;
    }
    __int16 v24 = v30;
LABEL_38:
    __int16 v32 = v32 - v24 - 4;
    if (v32 <= 0) {
      goto LABEL_21;
    }
  }

  __int16 v24 = v30;
  if (v30 < 1) {
    goto LABEL_38;
  }
  int v25 = 0;
  while (!krb5_ret_int8(v14, (uint64_t)&v29))
  {
    ++v25;
    __int16 v24 = v30;
    if (v25 >= v30) {
      goto LABEL_38;
    }
  }

  uint64_t v26 = **(void **)(a2 + 16);
  uint64_t v17 = "Error reading unknown tag in cache file: %s";
LABEL_12:
  uint64_t v18 = (_krb5_context *)a1;
  krb5_error_code v19 = -1765328185;
LABEL_16:
  krb5_set_error_message(v18, v19, v17, v26, v27);
LABEL_17:
  krb5_storage_free(v14);
LABEL_18:
  sub_1882CC854((_krb5_context *)a1, v12);
  close(v12);
  return v11;
}

krb5_error_code krb5_free_host_realm(krb5_context a1, char *const *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      uint64_t v4 = a2 + 1;
      do
      {
        free(v3);
        uint64_t v5 = *v4++;
        uint64_t v3 = v5;
      }

      while (v5);
    }

    free((void *)a2);
  }

  return 0;
}

uint64_t krb5_free_kdc_rep(uint64_t a1, _OWORD *a2)
{
  a2[23] = 0u;
  a2[24] = 0u;
  a2[21] = 0u;
  a2[22] = 0u;
  a2[19] = 0u;
  a2[20] = 0u;
  a2[17] = 0u;
  a2[18] = 0u;
  a2[15] = 0u;
  a2[16] = 0u;
  a2[13] = 0u;
  a2[14] = 0u;
  a2[11] = 0u;
  a2[12] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return 0LL;
}

uint64_t krb5_xfree(void *a1)
{
  return 0LL;
}

uint64_t krb5_generate_seq_number(_krb5_context *a1, uint64_t a2, int *a3)
{
  uint64_t result = CCRandomCopyBytes();
  if ((_DWORD)result) {
    krb5_abortx(a1, "Failed to generate random block");
  }
  if ((*a3 & 0x3FFFFFFE) != 0) {
    int v6 = *a3 & 0x3FFFFFFF;
  }
  else {
    int v6 = 1;
  }
  *a3 = v6;
  return result;
}

uint64_t krb5_generate_subkey_extended(_krb5_context *a1, unsigned int *a2, char *a3, void **a4)
{
  size_t v8 = calloc(1uLL, 0x18uLL);
  *a4 = v8;
  if (v8)
  {
    if (!(_DWORD)a3) {
      a3 = (char *)*a2;
    }
    uint64_t random_keyblock = krb5_generate_random_keyblock(a1, a3, (uint64_t)v8);
    if ((_DWORD)random_keyblock)
    {
      free(*a4);
      *a4 = 0LL;
    }
  }

  else
  {
    uint64_t random_keyblock = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return random_keyblock;
}

uint64_t krb5_get_all_client_addrs(_krb5_context *a1, uint64_t a2)
{
  if (*((_DWORD *)a1 + 60)) {
    char v2 = 14;
  }
  else {
    char v2 = 6;
  }
  return sub_1882CE360(a1, a2, v2);
}

uint64_t sub_1882CE360(_krb5_context *a1, uint64_t a2, char a3)
{
  v14[32] = *(krb5_address ***)MEMORY[0x1895F89C0];
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0LL;
  if ((a3 & 8) != 0 && (sub_1882CE754(a1, a2, a3) || !*(_DWORD *)a2))
  {
    if (gethostname((char *)v14, 0x100uLL))
    {
      ssize_t v7 = __error();
      uint64_t extra_addresses = *v7;
      strerror(*v7);
      krb5_set_error_message(a1, extra_addresses, "gethostname: %s");
      goto LABEL_7;
    }

    size_t v8 = sub_1882FBD40((const char *)v14);
    if (!v8)
    {
      int v12 = __error();
      uint64_t extra_addresses = *v12;
      strerror(*v12);
      krb5_set_error_message(a1, extra_addresses, "gethostbyname %s: %s");
LABEL_7:
      if ((_DWORD)extra_addresses) {
        goto LABEL_21;
      }
      goto LABEL_2;
    }

    int v9 = v8;
    *(_DWORD *)a2 = 1;
    stat v10 = malloc(0x18uLL);
    *(void *)(a2 + 8) = v10;
    if (!v10)
    {
      uint64_t extra_addresses = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_21;
    }

    *(_DWORD *)stat v10 = *((_DWORD *)v9 + 4);
    size_t v10[2] = 0LL;
    v10[1] = 0LL;
    uint64_t v11 = krb5_data_copy(v10 + 1, *(const void **)v9[3], *((int *)v9 + 5));
    if ((_DWORD)v11)
    {
      uint64_t extra_addresses = v11;
      free(*(void **)(a2 + 8));
      goto LABEL_21;
    }
  }

LABEL_2:
  if ((a3 & 4) != 0)
  {
    uint64_t extra_addresses = krb5_get_extra_addresses(a1, v14);
    if ((_DWORD)extra_addresses
      || (uint64_t extra_addresses = krb5_append_addresses(a1, a2, (unsigned int *)v14), (_DWORD)extra_addresses))
    {
      krb5_free_addresses(a1, (krb5_address **)a2);
      return extra_addresses;
    }

    krb5_free_addresses(a1, (krb5_address **)v14);
  }

  else
  {
    uint64_t extra_addresses = 0LL;
  }

LABEL_21:
  if (!*(_DWORD *)a2)
  {
    free(*(void **)(a2 + 8));
    *(void *)(a2 + 8) = 0LL;
  }

  return extra_addresses;
}

  sub_1882FE120();
  krb5_free_ticket(a1, (krb5_ticket *)v18);
  if (!a2) {
    goto LABEL_25;
  }
LABEL_24:
  if (!*a2) {
    goto LABEL_25;
  }
  return v16;
}

    krb5_abortx(a1, "hmac failed");
  }

  uint64_t v15 = sub_1882C6F90(7);
  uint64_t v18 = v6;
  *(void *)&char v29 = 16LL;
  *((void *)&v29 + 1) = &v33;
  __int16 v32 = v33;
  v21[0] = (uint64_t)&v19;
  uint64_t v20 = v29;
  uint64_t v26 = 16LL;
  *(void *)uint64_t v27 = v31;
  hc_EVP_CIPHER_CTX_init((uint64_t)v34);
  uint64_t v17 = hc_EVP_rc4(v16);
  hc_EVP_CipherInit_ex((uint64_t)v34, (uint64_t)v17, 0, *(uint64_t *)v27, 0LL, 0LL);
  hc_EVP_Cipher((uint64_t)v34);
  hc_EVP_CIPHER_CTX_cleanup(v34);
  *(void *)&uint64_t v20 = 16LL;
  *((void *)&v20 + 1) = &v32;
  v21[0] = (uint64_t)&v19;
  uint64_t v23 = 16LL;
  __int16 v24 = (unsigned __int8 *)v30;
  char v33 = 0uLL;
  __int16 v32 = 0uLL;
  v31[0] = 0LL;
  v31[1] = 0LL;
  uint64_t result = ct_memcmp(v24, a3, 16LL);
  if ((_DWORD)result)
  {
    krb5_clear_error_message(a1);
    return 2529638943LL;
  }

  return result;
}

    if (!(void)v51) {
      goto LABEL_24;
    }
    *(void *)&unsigned int v46 = calloc(1uLL, 0x10uLL);
    if ((void)v46)
    {
      uint64_t v17 = hx509_certs_iter_f( a1,  v51,  (uint64_t (*)(uint64_t, uint64_t))sub_188305EA0,  (uint64_t)v44,  v29,  v30,  v31,  v32);
      if ((_DWORD)v17)
      {
LABEL_30:
        hx509_certs_free((const void **)&v51);
        sub_188313044();
        return v17;
      }

uint64_t krb5_get_all_server_addrs(_krb5_context *a1, uint64_t a2)
{
  return sub_1882CE360(a1, a2, 9);
}

uint64_t krb5_get_all_any_addrs(_krb5_context *a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v10, 0, sizeof(v10));
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0LL;
  char v5 = 1;
  do
  {
    char v6 = v5;
    int v9 = 128;
    if (!krb5_anyaddr(a1, dword_18831A3B0[v4], (uint64_t)v13, (uint64_t)&v9, 0LL)
      && !krb5_sockaddr2address(a1, (uint64_t)v13, (uint64_t)v10))
    {
      int v12 = v10;
      unsigned int v11 = 1;
      uint64_t appended = krb5_append_addresses(a1, a2, &v11);
      krb5_free_address((uint64_t)a1, (uint64_t)v10);
      if ((_DWORD)appended)
      {
        krb5_free_addresses(a1, (krb5_address **)a2);
        return appended;
      }
    }

    char v5 = 0;
    uint64_t v4 = 1LL;
  }

  while ((v6 & 1) != 0);
  if (*(_DWORD *)a2) {
    return 0LL;
  }
  uint64_t appended = 6LL;
  krb5_set_error_message(a1, 6, "no addresses found");
  return appended;
}

uint64_t sub_1882CE690(_krb5_context *a1)
{
  size_t v8 = 0LL;
  uint64_t v9 = 0LL;
  if ((_DWORD)v8)
  {
    uint64_t v3 = 0LL;
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v4 = 0LL;
      char v5 = 1;
      while (1)
      {
        char v6 = v5;
        if (*(_DWORD *)(v9 + 24 * v3) == dword_18831A3B8[2 * v4]) {
          break;
        }
        char v5 = 0;
        uint64_t v4 = 1LL;
        if ((v6 & 1) == 0) {
          goto LABEL_10;
        }
      }

      uint64_t v2 = dword_18831A3B8[2 * v4 + 1] | v2;
LABEL_10:
      ++v3;
    }

    while (v3 != v8);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  krb5_free_addresses(a1, &v8);
  return v2;
}

uint64_t sub_1882CE754(_krb5_context *a1, uint64_t a2, char a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (getifaddrs(&v22) == -1)
  {
    uint64_t v9 = __error();
    uint64_t ignore_addresses = *v9;
    strerror(*v9);
    krb5_set_error_message(a1, ignore_addresses, "getifaddrs: %s");
    return ignore_addresses;
  }

  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  char v6 = &v22;
  LODWORD(v7) = -1;
  do
  {
    char v6 = (ifaddrs **)*v6;
    size_t v7 = (v7 + 1);
  }

  while (v6);
  if (!(_DWORD)v7)
  {
    MEMORY[0x1895C1A40](v22);
    uint64_t ignore_addresses = 6LL;
    krb5_set_error_message(a1, 6, "no addresses found");
    return ignore_addresses;
  }

  if ((a3 & 4) != 0)
  {
    uint64_t ignore_addresses = krb5_get_ignore_addresses(a1, v21);
    if ((_DWORD)ignore_addresses) {
      return ignore_addresses;
    }
  }

  else
  {
    uint64_t ignore_addresses = 6LL;
  }

  stat v10 = calloc(v7, 0x18uLL);
  *(void *)(a2 + 8) = v10;
  if (!v10)
  {
    krb5_free_addresses(a1, (krb5_address **)v21);
    MEMORY[0x1895C1A40](v22);
    uint64_t ignore_addresses = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return ignore_addresses;
  }

  unsigned int v11 = v22;
  if (v22)
  {
    unsigned int v12 = 0;
    do
    {
      if ((v11->ifa_flags & 1) != 0)
      {
        ifa_addr = v11->ifa_addr;
        if (ifa_addr)
        {
          BOOL v14 = *(void *)&ifa_addr->sa_len == v23 && *(void *)&ifa_addr->sa_data[6] == v24;
          if (!v14
            && !krb5_sockaddr_uninteresting((uint64_t)ifa_addr)
            && (!sub_1882BE6A4((uint64_t)v11->ifa_addr) || (a3 & 1) != 0))
          {
            uint64_t v15 = krb5_sockaddr2address(a1, (uint64_t)v11->ifa_addr, *(void *)(a2 + 8) + 24LL * v12);
            if ((_DWORD)v15)
            {
              uint64_t ignore_addresses = v15;
            }

            else if ((a3 & 4) != 0 {
                   && krb5_address_search( a1,  (const krb5_address *)(*(void *)(a2 + 8) + 24LL * v12),  (krb5_address *const *)v21))
            }
            {
              krb5_free_address((uint64_t)a1, *(void *)(a2 + 8) + 24LL * v12);
              uint64_t ignore_addresses = 0LL;
              a3 &= ~2u;
            }

            else
            {
              uint64_t ignore_addresses = 0LL;
              ++v12;
            }
          }
        }
      }

      unsigned int v11 = v11->ifa_next;
    }

    while (v11);
    if ((a3 & 2) == 0) {
      goto LABEL_55;
    }
    goto LABEL_34;
  }

  unsigned int v12 = 0;
  if ((a3 & 2) != 0)
  {
LABEL_34:
    if (!v12)
    {
      uint64_t v17 = v22;
      if (v22)
      {
        unsigned int v12 = 0;
        do
        {
          if ((v17->ifa_flags & 1) != 0)
          {
            uint64_t v18 = v17->ifa_addr;
            if (v18)
            {
              BOOL v19 = *(void *)&v18->sa_len == v23 && *(void *)&v18->sa_data[6] == v24;
              if (!v19
                && !krb5_sockaddr_uninteresting((uint64_t)v18)
                && sub_1882BE6A4((uint64_t)v17->ifa_addr)
                && (v17->ifa_flags & 8) != 0)
              {
                uint64_t v20 = krb5_sockaddr2address(a1, (uint64_t)v17->ifa_addr, *(void *)(a2 + 8) + 24LL * v12);
                if ((_DWORD)v20)
                {
                  uint64_t ignore_addresses = v20;
                }

                else if ((a3 & 4) != 0 {
                       && krb5_address_search( a1,  (const krb5_address *)(*(void *)(a2 + 8) + 24LL * v12),  (krb5_address *const *)v21))
                }
                {
                  krb5_free_address((uint64_t)a1, *(void *)(a2 + 8) + 24LL * v12);
                  uint64_t ignore_addresses = 0LL;
                }

                else
                {
                  uint64_t ignore_addresses = 0LL;
                  ++v12;
                }
              }
            }
          }

          uint64_t v17 = v17->ifa_next;
        }

        while (v17);
      }

      else
      {
        unsigned int v12 = 0;
      }
    }
  }

LABEL_55:
  if ((a3 & 4) != 0) {
    krb5_free_addresses(a1, (krb5_address **)v21);
  }
  MEMORY[0x1895C1A40](v22);
  if ((_DWORD)ignore_addresses)
  {
    free(*(void **)(a2 + 8));
    *(void *)(a2 + 8) = 0LL;
  }

  else
  {
    *(_DWORD *)a2 = v12;
  }

  return ignore_addresses;
}

  char v34 = (uint64_t *)rk_strpoolprintf(v19, "]");
  return rk_strpoolcollect(v34);
}

uint64_t _krb5_get_krbtgt(_krb5_context *a1, _krb5_ccache *a2, char *data, krb5_creds **a4)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  *(_OWORD *)uint64_t principal = 0u;
  uint64_t credentials_with_flags = krb5_cc_get_principal(a1, a2, principal);
  if (!(_DWORD)credentials_with_flags)
  {
    if (!data) {
      data = (char *)principal[0]->data;
    }
    uint64_t v9 = krb5_make_principal(a1, &principal[1], data, "krbtgt", data, 0LL);
    if ((_DWORD)v9)
    {
      uint64_t credentials_with_flags = v9;
      stat v10 = principal[0];
    }

    else
    {
      uint64_t credentials_with_flags = krb5_get_credentials_with_flags((uint64_t)a1, 1, 0, a2, (uint64_t)principal, a4);
      krb5_free_principal(a1, principal[0]);
      stat v10 = principal[1];
    }

    krb5_free_principal(a1, v10);
  }

  return credentials_with_flags;
}

krb5_error_code krb5_get_credentials( krb5_context a1, krb5_flags a2, krb5_ccache a3, krb5_creds *a4, krb5_creds **a5)
{
  return krb5_get_credentials_with_flags((uint64_t)a1, a2, 0, a3, (uint64_t)a4, a5);
}

uint64_t krb5_get_kdc_cred( _krb5_context *a1, _krb5_ccache *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  __int128 v13 = calloc(1uLL, 0x90uLL);
  *a7 = v13;
  if (v13)
  {
    uint64_t krbtgt = _krb5_get_krbtgt(a1, a2, *(char **)(*(void *)(a6 + 8) + 24LL), &v17);
    if ((_DWORD)krbtgt)
    {
      uint64_t v15 = krbtgt;
LABEL_6:
      free(*a7);
      *a7 = 0LL;
      return v15;
    }

    uint64_t v15 = sub_1882CEC50( (uint64_t)a1,  (uint64_t)a2,  0LL,  a3,  a4,  a6,  (uint64_t)v17,  0LL,  0LL,  0LL,  0LL,  (krb5_principal *)*a7);
    krb5_free_creds(a1, v17);
    if ((_DWORD)v15) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v15 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v15;
}

uint64_t sub_1882CEC50( uint64_t a1, uint64_t a2, krb5_error *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, _BYTE *a9, char *a10, char *a11, krb5_principal *a12)
{
  __int128 v20 = a9;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  krb5_data_zero(&v71);
  krb5_data_zero(&v72);
  uint64_t v39 = 0LL;
  unsigned int v38 = 0;
  krb5_generate_random_block((uint64_t)&v44, 4LL);
  if ((a4 & 0x10000000) != 0 && !a9)
  {
    __int128 v20 = v41;
    uint64_t v21 = decode_Ticket();
    if ((_DWORD)v21) {
      return v21;
    }
  }

  uint64_t v21 = sub_1882DD170( (_krb5_context *)a1,  a2,  (uint64_t)a3,  a5,  a4,  a8,  (uint64_t)v20,  a6,  a7,  v44,  &v38,  &v43,  (uint64_t)v74);
  if (!(_DWORD)v21)
  {
    size_t v72 = sub_1882FDA58();
    uint64_t v73 = malloc(v72);
    if (!v73)
    {
      uint64_t v21 = 12LL;
      goto LABEL_7;
    }

    uint64_t v23 = sub_1882FDA38();
    if ((_DWORD)v23)
    {
      uint64_t v21 = v23;
      free(v73);
      uint64_t v73 = 0LL;
      goto LABEL_7;
    }

    if (v72 != v42) {
      krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
    }
    uint64_t v75 = 0LL;
    sub_1882FDA68();
    uint64_t v30 = krb5_sendto_ctx_alloc(a1, (uint64_t)v46, v24, v25, v26, v27, v28, v29);
    if ((_DWORD)v30) {
      return v30;
    }
    krb5_sendto_ctx_set_func(*(uint64_t *)v46, (uint64_t)sub_1882EDEB4, 0LL);
    if (a10) {
      sub_1882EDC98((_krb5_context *)a1, *(uint64_t *)v46, a10);
    }
    if (a11) {
      sub_1882EDCDC((_krb5_context *)a1, *(uint64_t *)v46, a11);
    }
    uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
    if (ImpersonateBundle)
    {
      __int16 v32 = (char *)ImpersonateBundle;
      MainBundle = CFBundleGetMainBundle();
      if (MainBundle)
      {
        CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
        CFStringRef v35 = CFStringCreateWithCString(0LL, v32, 0x8000100u);
        CFStringRef v36 = v35;
        if (v35 && Identifier)
        {
          if (CFEqual(Identifier, v35)) {
            sub_1882DFCE8(a1, 5, "Bundle identifiers match, not setting delegate");
          }
          else {
            krb5_sendto_set_delegated_app(0LL, *(uint64_t *)v46, 0LL, 0, v32);
          }
          goto LABEL_32;
        }

        if (v35) {
LABEL_32:
        }
          CFRelease(v36);
      }
    }

    uint64_t v21 = krb5_sendto_context( a1,  *(uint64_t *)v46,  &v72,  *(const char **)(*(void *)(*(void *)(a7 + 8) + 16LL) + 8LL),  &v71);
    krb5_sendto_ctx_free(a1, *(const void **)v46);
    if (!(_DWORD)v21)
    {
      __int128 v69 = 0u;
      __int128 v70 = 0u;
      __int128 v67 = 0u;
      __int128 v68 = 0u;
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      __int128 v61 = 0u;
      __int128 v62 = 0u;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      __int128 v55 = 0u;
      __int128 v56 = 0u;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      *(_OWORD *)unsigned int v46 = 0u;
      if (sub_1882FDC6C())
      {
        if (krb5_rd_error((krb5_context)a1, &v71, v45))
        {
          if (*(void *)&v71.magic && *v71.data == 4)
          {
            krb5_clear_error_message((krb5_context)a1);
            uint64_t v21 = 2529639131LL;
          }

          else
          {
            uint64_t v21 = 2529638952LL;
            krb5_clear_error_message((krb5_context)a1);
          }
        }

        else
        {
          uint64_t v21 = krb5_error_from_rd_error((krb5_context)a1, (uint64_t)v45, (uint64_t *)a6);
          krb5_free_error_contents(a1, (uint64_t)v45);
        }
      }

      else
      {
        uint64_t v21 = sub_1882F9CB0((krb5_context)a1, v44, 0LL, (uint64_t)a3, (uint64_t)v46);
        if (!(_DWORD)v21)
        {
          uint64_t v21 = krb5_copy_principal((krb5_context)a1, *(krb5_const_principal *)a6, a12);
          if (!(_DWORD)v21)
          {
            uint64_t v21 = krb5_copy_principal((krb5_context)a1, *(krb5_const_principal *)(a6 + 8), a12 + 1);
            if (!(_DWORD)v21)
            {
              a12[7] = *(krb5_principal *)(a6 + 56);
              if (a8) {
                char v37 = 1;
              }
              else {
                char v37 = BYTE2(a4) & 1;
              }
              v45[0] = (krb5_error *)v43;
              v45[1] = a3;
              uint64_t v21 = sub_1882F3FCC( a1,  (uint64_t)v46,  (uint64_t)a12,  (const krb5_keyblock *)(a7 + 16),  0LL,  (krb5_address *const *)(a7 + 120),  v44,  v37,  0LL,  (uint64_t (*)(_krb5_context *, const krb5_keyblock *, uint64_t, uint64_t, uint64_t))sub_1882DD8F8,  (uint64_t)v45);
            }
          }
        }

        krb5_free_kdc_rep(a1, v46);
      }
    }
  }

LABEL_7:
  if (v20 == v41) {
    free_Ticket();
  }
  sub_1882FD96C();
  krb5_data_free(&v71);
  krb5_data_free(&v72);
  if (v43) {
    krb5_free_keyblock((krb5_context)a1, v43);
  }
  return v21;
}

      size_t v7 = 2529639049LL;
      krb5_clear_error_message(a1);
      return v7;
    }
  }

  if (strlcpy(__dst, v6, __size) >= __size) {
    goto LABEL_7;
  }
  return 0LL;
}

  sub_188313B3C();
  return v23;
}

uint64_t sub_1882CF0C0( uint64_t a1, unsigned int a2, krb5_ccache a3, krb5_error *a4, __int128 *a5, __int128 *a6, _BYTE *a7, krb5_creds **a8, uint64_t **a9)
{
  __int128 v16 = 0LL;
  if (!krb5_cc_get_config((krb5_context)a1, a3, 0LL, "lkdc-hostname", &v48))
  {
    size_t v17 = *(void *)&v48.magic;
    __int128 v18 = (char *)malloc(*(void *)&v48.magic + 1LL);
    if (!v18) {
      goto LABEL_22;
    }
    __int128 v16 = v18;
    memcpy(v18, v48.data, v17);
    v16[v17] = 0;
    krb5_data_free(&v48);
  }

  __int128 v19 = 0LL;
  if (krb5_cc_get_config((krb5_context)a1, a3, 0LL, "sitename", &v48)) {
    goto LABEL_7;
  }
  size_t v20 = *(void *)&v48.magic;
  uint64_t v21 = (char *)malloc(*(void *)&v48.magic + 1LL);
  if (!v21)
  {
LABEL_22:
    uint64_t v27 = 12LL;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    return v27;
  }

  __int128 v19 = v21;
  memcpy(v21, v48.data, v20);
  v19[v20] = 0;
  krb5_data_free(&v48);
LABEL_7:
  unsigned int v46 = a6;
  uint64_t v45 = a7;
  uint64_t v22 = *((void *)a5 + 1);
  unsigned int v23 = *(_DWORD *)(v22 + 8);
  if (v23 <= 1 && (a2 & 0x8000) == 0)
  {
    uint64_t v27 = 2529638940LL;
    krb5_set_error_message((krb5_context)a1, -1765328356, "Name too short to do referals, skipping referals");
    goto LABEL_18;
  }

  if (v23 && !strcmp(**(const char ***)(v22 + 16), "kadmin"))
  {
    uint64_t v27 = 2529638940LL;
    krb5_set_error_message((krb5_context)a1, -1765328356, "Name[0] is kadmin, skipping referrals");
  }

  else
  {
    __int128 v63 = 0u;
    memset(v62, 0, sizeof(v62));
    memset(creds, 0, sizeof(creds));
    __int128 v52 = 0u;
    *a8 = 0LL;
    realm = (char *)krb5_principal_get_realm(a1, *(void *)a5);
    uint64_t principal = krb5_make_principal((krb5_context)a1, &v53, realm, "krbtgt", realm, 0LL);
    if ((_DWORD)principal)
    {
      uint64_t v27 = principal;
      goto LABEL_18;
    }

    uint64_t v27 = sub_1882D03EC((_krb5_context *)a1, a3, (krb5_principal_data *)v53, *a9, (krb5_creds *)v62);
    krb5_free_principal((krb5_context)a1, (krb5_principal)v53);
    if (!(_DWORD)v27)
    {
      __int128 v29 = a5[7];
      __int128 v59 = a5[6];
      __int128 v60 = v29;
      __int128 v61 = a5[8];
      __int128 v30 = a5[3];
      __int128 v55 = a5[2];
      __int128 v56 = v30;
      __int128 v31 = a5[5];
      __int128 v57 = a5[4];
      __int128 v58 = v31;
      __int128 v32 = a5[1];
      __int128 v53 = *a5;
      __int128 v54 = v32;
      uint64_t v33 = krb5_copy_principal((krb5_context)a1, (krb5_const_principal)v22, (krb5_principal *)&v53 + 1);
      if ((_DWORD)v33)
      {
        uint64_t v27 = v33;
        char v34 = (krb5_creds *)v62;
LABEL_27:
        krb5_free_cred_contents((krb5_context)a1, v34);
        goto LABEL_18;
      }

      uint64_t v35 = krb5_principal_set_realm((_krb5_context *)a1, *((uint64_t *)&v53 + 1), realm);
      if (!(_DWORD)v35)
      {
        BOOL v37 = (a2 & 0x10000) == 0 && v46 != 0LL;
        int v38 = 1;
        int v44 = 1;
        BOOL v43 = v37;
        while (1)
        {
          if (v37
            || (krb5_cc_clear_mcred(&mcreds),
                mcreds.client = (krb5_principal)*((void *)&v53 + 1),
                krb5_timeofday((krb5_context)a1, &mcreds.times.endtime),
                krb5_cc_retrieve_cred((krb5_context)a1, a3, 0x2000000, &mcreds, (krb5_creds *)creds)))
          {
            uint64_t v39 = sub_1882D04BC( (krb5_context)a1,  (uint64_t)a3,  a4,  a2 | 0x8000,  (uint64_t)&v53,  (uint64_t)v62,  v46,  v45,  v16,  v19,  (krb5_principal *)creds);
            if ((_DWORD)v39) {
              goto LABEL_55;
            }
          }

          uint64_t v40 = *(char **)(*(void *)(*(void *)&creds[8] + 16LL) + 8LL);
          uint64_t v41 = *a9;
          krb5_cc_clear_mcred(&mcreds);
          mcreds.client = *(krb5_principal *)&creds[8];
          if (v41)
          {
            while (1)
            {
              uint64_t v42 = *v41;
              if (!*v41) {
                break;
              }
              ++v41;
              if (krb5_compare_creds((krb5_context)a1, 0x80000000, (uint64_t)&mcreds, v42))
              {
                uint64_t v27 = 2529639135LL;
                krb5_set_error_message((krb5_context)a1, -1765328161, "Referral from %s loops back to realm %s");
                goto LABEL_56;
              }
            }
          }

          if (v44 && (WORD4(v52) & 0x2000) != 0)
          {
            int v44 = 1;
          }

          else
          {
            int v44 = 0;
            DWORD2(v52) &= ~0x2000u;
          }

          uint64_t v39 = sub_1882D05C4((_krb5_context *)a1, (const krb5_creds *)creds, (void **)a9);
          if ((_DWORD)v39) {
            goto LABEL_55;
          }
          uint64_t v27 = krb5_principal_set_realm((_krb5_context *)a1, *((uint64_t *)&v53 + 1), v40);
          krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v62);
          *(_OWORD *)&v62[96] = *(_OWORD *)&creds[96];
          *(_OWORD *)&v62[112] = *(_OWORD *)&creds[112];
          __int128 v63 = v52;
          *(_OWORD *)&v62[32] = *(_OWORD *)&creds[32];
          *(_OWORD *)&v62[48] = *(_OWORD *)&creds[48];
          *(_OWORD *)&v62[64] = *(_OWORD *)&creds[64];
          *(_OWORD *)&v62[80] = *(_OWORD *)&creds[80];
          *(_OWORD *)__int128 v62 = *(_OWORD *)creds;
          *(_OWORD *)&v62[16] = *(_OWORD *)&creds[16];
          __int128 v52 = 0u;
          memset(creds, 0, sizeof(creds));
          if ((_DWORD)v27) {
            goto LABEL_56;
          }
          ++v38;
          BOOL v37 = v43;
          if (v38 == 18)
          {
LABEL_54:
            uint64_t v39 = krb5_copy_creds((krb5_context)a1, (const krb5_creds *)creds, a8);
LABEL_55:
            uint64_t v27 = v39;
            goto LABEL_56;
          }
        }

        uint64_t v27 = 2529638947LL;
        krb5_set_error_message((krb5_context)a1, -1765328349, "Got back an non krbtgt ticket referrals");
LABEL_56:
        krb5_free_principal((krb5_context)a1, *((krb5_principal *)&v53 + 1));
        krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v62);
        char v34 = (krb5_creds *)creds;
        goto LABEL_27;
      }

      uint64_t v27 = v35;
      krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v62);
      krb5_free_principal((krb5_context)a1, *((krb5_principal *)&v53 + 1));
    }
  }

LABEL_18:
  if ((_DWORD)v27 && (a2 & 0x8000) == 0) {
    uint64_t v27 = sub_1882CF628((_krb5_context *)a1, a2, a3, a4, (uint64_t *)a5, v46, v45, v16, v19, a8, a9);
  }
  free(v16);
  free(v19);
  return v27;
}

  sub_1882FDBDC();
  sub_1882F0D7C(a1, a2);
  return v12;
}

        uint64_t v9 = *++v6;
        uint64_t v4 = v9;
      }

      while (v9);
    }

    *a1 = 0;
  }

  else
  {
    free(a1);
  }

  return v3;
}

    sub_188318F1C();
  }

  unsigned int v11 = *(int *)(*(void *)a1 + 4LL);
  if ((_DWORD)v11 == (_DWORD)v10) {
    goto LABEL_18;
  }
  unsigned int v12 = v11 - v10;
  __int128 v13 = (char *)a1 + v10 + 56;
  __int128 v14 = __n - (v11 - v10);
  if (__n < v11 - v10)
  {
    memcpy(v13, __src, __n);
    a1[5] += v5;
    return 1LL;
  }

  memcpy(v13, __src, v11 - v10);
  __int128 v18 = (*(uint64_t (**)(int *, uint64_t, int *, size_t))(*(void *)a1 + 32LL))(a1, v8, a1 + 14, v11);
  bzero(a1 + 14, v11);
  if ((_DWORD)v18 == 1)
  {
    *a3 += v11;
    v6 += v12;
    v8 += v11;
    a1[5] = 0;
    char v5 = v14;
    if (!v14) {
      return 1LL;
    }
LABEL_8:
    __int128 v16 = a1[33];
    a1[5] = v16 & v5;
    size_t v17 = v5 & ~v16;
    __int128 v18 = (*(uint64_t (**)(int *, uint64_t, char *, size_t))(*(void *)a1 + 32LL))(a1, v8, v6, v17);
    if ((_DWORD)v18 == 1)
    {
      *a3 += v17;
      memcpy(a1 + 14, &v6[v17], a1[5]);
    }
  }

  return v18;
}

uint64_t sub_1882CF628( _krb5_context *a1, unsigned int a2, _krb5_ccache *a3, krb5_error *a4, uint64_t *a5, __int128 *a6, _BYTE *a7, char *a8, char *a9, krb5_creds **a10, uint64_t **a11)
{
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, *a5);
  krb5_principal_get_realm((uint64_t)a1, a5[1]);
  uint64_t result = sub_1882D0668(a1, a2, a3, a4, a5, realm, a6, a7, a8, a9, a10, a11);
  if ((_DWORD)result == -1765328377)
  {
    string = (const char *)krb5_config_get_string((uint64_t)a1, 0LL, v20, v21, v22, v23, v24, v25, (uint64_t)"capaths");
    if (string)
    {
      uint64_t v27 = (char *)string;
      int v28 = strcmp(string, realm);
      uint64_t result = 2529638919LL;
      if (v28) {
        return sub_1882D0668(a1, a2, a3, a4, a5, v27, a6, a7, a8, a9, a10, a11);
      }
    }

    else
    {
      return 2529638919LL;
    }
  }

  return result;
}

uint64_t krb5_get_credentials_with_flags( uint64_t a1, krb5_flags a2, int a3, _krb5_ccache *a4, uint64_t a5, krb5_creds **a6)
{
  unsigned int v12 = (char *)*(unsigned int *)(a5 + 16);
  if ((_DWORD)v12)
  {
    uint64_t v13 = krb5_enctype_valid((_krb5_context *)a1, v12);
    if ((_DWORD)v13) {
      return v13;
    }
  }

  *a6 = 0LL;
  __int128 v14 = (krb5_creds *)calloc(1uLL, 0x90uLL);
  if (!v14)
  {
    uint64_t v13 = 12LL;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    return v13;
  }

  uint64_t v15 = v14;
  if (*(_DWORD *)(a5 + 16)) {
    a2 |= 0x40000000u;
  }
  uint64_t cred = krb5_cc_retrieve_cred((krb5_context)a1, a4, a2, (krb5_creds *)a5, v14);
  if ((_DWORD)cred)
  {
    uint64_t v13 = cred;
    if ((_DWORD)cred != -1765328243)
    {
      __int128 v18 = (char *)v15;
LABEL_16:
      free(v18);
      return v13;
    }

    int v17 = a2 & 1;
  }

  else
  {
    if ((a2 & 4) != 0 || (krb5_timeofday((krb5_context)a1, v51), *(void *)&v15->times.endtime > *(uint64_t *)v51))
    {
      uint64_t v13 = 0LL;
      *a6 = v15;
      return v13;
    }

    int v17 = a2 & 1;
    if ((a2 & 1) != 0) {
      krb5_cc_remove_cred((krb5_context)a1, a4, 0, v15);
    }
    krb5_free_cred_contents((krb5_context)a1, v15);
  }

  free(v15);
  if (v17)
  {
    uint64_t v13 = 2529639053LL;
    sub_1882CFC6C((_krb5_context *)a1, *(const krb5_principal_data **)(a5 + 8));
    return v13;
  }

  if ((a2 & 0x40000000) != 0
    || !*(void *)(a1 + 352)
    || krb5_cc_get_config((krb5_context)a1, a4, *(krb5_const_principal *)(a5 + 8), "negative-cache", (krb5_data *)v51))
  {
    goto LABEL_20;
  }

  unint64_t v36 = time(0LL);
  unsigned int v60 = -1765328243;
  v48[0] = 0LL;
  BOOL v37 = krb5_storage_from_data((uint64_t *)v51);
  if (!v37)
  {
    krb5_data_free(v51);
    return 12LL;
  }

  uint64_t v38 = (uint64_t)v37;
  uint64_t v39 = krb5_ret_uint32((uint64_t)v37, &v62);
  if ((_DWORD)v39 || (uint64_t v39 = krb5_ret_int32(v38, &v60), (_DWORD)v39))
  {
    uint64_t v13 = v39;
    unint64_t v40 = v36;
  }

  else
  {
    uint64_t v13 = krb5_ret_string(v38, v48);
    unint64_t v40 = v36;
    if (!(_DWORD)v13)
    {
      if (krb5_ret_uint32(v38, &v61))
      {
        unint64_t v47 = 0LL;
        unsigned int v61 = 0;
      }

      else
      {
        unint64_t v47 = (unint64_t)v61 << 32;
      }

      uint64_t v13 = 0LL;
      unint64_t v40 = v47 | v62;
    }
  }

  unint64_t v41 = v40 - v36;
  BOOL v42 = v36 >= v40;
  unint64_t v43 = v36 - v40;
  if (v43 != 0 && v42) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v41;
  }
  krb5_storage_free(v38);
  krb5_data_free(v51);
  if ((_DWORD)v13)
  {
    __int128 v18 = (char *)v48[0];
    goto LABEL_16;
  }

  if (v44 < *(void *)(a1 + 352))
  {
    __int128 v63 = 0LL;
    uint64_t v13 = v60;
    krb5_unparse_name((krb5_context)a1, *(krb5_const_principal *)(a5 + 8), &v63);
    uint64_t v45 = (const char *)v48[0];
    if (!v48[0]) {
      uint64_t v45 = "<no cached error string>";
    }
    unsigned int v46 = v63;
    if (!v63) {
      unsigned int v46 = "unknown";
    }
    krb5_set_error_message( (krb5_context)a1,  v13,  "%s while looking up '%s' (cached result, timeout in %lld sec)",  v45,  v46,  *(void *)(a1 + 352) - v44);
    free(v48[0]);
    __int128 v18 = v63;
    goto LABEL_16;
  }

  free(v48[0]);
LABEL_20:
  unsigned int v19 = (a2 << 27) & 0x10000000 | a3;
  int v20 = a2 | (v19 >> 25);
  __int128 v63 = 0LL;
  uint64_t v13 = sub_1882CF0C0(a1, v19, a4, 0LL, (__int128 *)a5, 0LL, 0LL, a6, (uint64_t **)&v63);
  uint64_t v21 = v63;
  if (v63)
  {
    sub_1882CFCD0((_krb5_context *)a1, a4, (krb5_creds **)v63);
    free(v21);
  }

  if (v13 | v20 & 8)
  {
    if ((a2 & 0x40000000) == 0 && (v13 & 0xFFFFFFFE) == 0x96C73A06)
    {
      __int128 v31 = krb5_storage_emem();
      if (v31)
      {
        uint64_t v32 = (uint64_t)v31;
        time_t v33 = time(0LL);
        krb5_store_uint32(v32, v33);
        krb5_store_int32(v32, v13);
        if (*(_DWORD *)(a1 + 288) == (_DWORD)v13)
        {
          char v34 = *(char **)(a1 + 280);
          if (v34) {
            krb5_store_string(v32, v34);
          }
        }

        if (!krb5_storage_to_data(v32, (size_t *)v51))
        {
          krb5_cc_set_config( (krb5_context)a1,  a4,  *(krb5_const_principal *)(a5 + 8),  "negative-cache",  (krb5_data *)v51);
          krb5_data_free(v51);
        }

        krb5_storage_free(v32);
      }
    }
  }

  else
  {
    krb5_cc_store_cred((krb5_context)a1, a4, *a6);
    if (!krb5_principal_compare_any_realm(a1, (uint64_t)(*a6)->client, *(void *)(a5 + 8)))
    {
      uint64_t v22 = *a6;
      *(_OWORD *)__int128 v51 = *(_OWORD *)&(*a6)->magic;
      __int128 v23 = *(_OWORD *)&v22->is_skey;
      __int128 v25 = *(_OWORD *)&v22->server;
      __int128 v24 = *(_OWORD *)&v22->keyblock.length;
      krb5_ticket_times times = v22->times;
      __int128 v55 = v23;
      __int128 v52 = v25;
      __int128 v53 = v24;
      __int128 v26 = *(_OWORD *)&v22[1].client;
      krb5_data ticket = v22->ticket;
      krb5_data second_ticket = v22->second_ticket;
      __int128 v58 = *(_OWORD *)&v22->authdata;
      __int128 v59 = v26;
      krb5_data v56 = ticket;
      krb5_data v57 = second_ticket;
      uint64_t v29 = *(void *)(a5 + 8);
      uint64_t v30 = *(void *)(v29 + 16);
      *(_OWORD *)krb5_data v48 = *(_OWORD *)v29;
      uint64_t v49 = v30;
      __int128 v50 = "";
      *(void *)&v51[2] = v48;
      krb5_cc_store_cred((krb5_context)a1, a4, (krb5_creds *)v51);
    }
  }

  gettimeofday((timeval *)v51, 0LL);
  sub_1883151E4((uint64_t)v51, (uint64_t)&v64);
  sub_1882DFCE8( a1,  1,  "krb5_get_credentials_with_flags: %s wc: %lld.%06d",  *(const char **)(*(void *)a5 + 24LL),  *(void *)v51,  v51[2]);
  return v13;
}

void sub_1882CFC6C(_krb5_context *a1, const krb5_principal_data *a2)
{
  if (krb5_unparse_name(a1, a2, &v3))
  {
    krb5_clear_error_message(a1);
  }

  else
  {
    krb5_set_error_message(a1, -1765328243, "Matching credential (%s) not found", v3);
    free(v3);
  }

void sub_1882CFCD0(_krb5_context *a1, _krb5_ccache *a2, krb5_creds **a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    size_t v7 = a3 + 1;
    do
    {
      uint64_t client = (uint64_t)v3->client;
      if (krb5_principal_is_krbtgt((uint64_t)a1, client)
        && strcmp(*(const char **)(*(void *)(client + 16) + 8LL), *(const char **)(client + 24)))
      {
        krb5_cc_store_cred(a1, a2, *(v7 - 1));
      }

      uint64_t v9 = *v7++;
      uint64_t v3 = v9;
    }

    while (v9);
    stat v10 = *a3;
    if (*a3)
    {
      unsigned int v11 = a3 + 1;
      do
      {
        krb5_free_creds(a1, v10);
        unsigned int v12 = *v11++;
        stat v10 = v12;
      }

      while (v12);
    }
  }

uint64_t krb5_get_creds_opt_alloc(_krb5_context *a1, void *a2)
{
  uint64_t v4 = calloc(1uLL, 0x18uLL);
  *a2 = v4;
  if (v4) {
    return 0LL;
  }
  uint64_t v5 = 12LL;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v5;
}

void krb5_get_creds_opt_free(_krb5_context *a1, void **a2)
{
  uint64_t v3 = (krb5_principal_data *)*a2;
  if (v3) {
    krb5_free_principal(a1, v3);
  }
  if (a2[2])
  {
    free_Ticket();
    free(a2[2]);
  }

  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  free(a2);
}

void krb5_get_creds_opt_set_options(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 8) = a3;
}

void krb5_get_creds_opt_add_options(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 8) |= a3;
}

void krb5_get_creds_opt_set_enctype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 12) = a3;
}

uint64_t krb5_get_creds_opt_set_impersonate(krb5_context a1, krb5_principal *a2, krb5_const_principal a3)
{
  char v6 = *a2;
  if (v6) {
    krb5_free_principal(a1, v6);
  }
  return krb5_copy_principal(a1, a3, a2);
}

uint64_t krb5_get_creds_opt_set_ticket(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    free_Ticket();
    free(*(void **)(a2 + 16));
    *(void *)(a2 + 16) = 0LL;
  }

  if (a3)
  {
    char v6 = malloc(0x48uLL);
    *(void *)(a2 + 16) = v6;
    if (!v6)
    {
      a3 = 12LL;
      goto LABEL_8;
    }

    a3 = sub_1882FD7AC();
    if ((_DWORD)a3)
    {
      free(*(void **)(a2 + 16));
      *(void *)(a2 + 16) = 0LL;
LABEL_8:
      krb5_set_error_message(a1, a3, "malloc: out of memory");
    }
  }

  return a3;
}

uint64_t krb5_get_creds( _krb5_context *a1, uint64_t a2, _krb5_ccache *a3, const krb5_principal_data *a4, krb5_creds **a5)
{
  __int128 v10 = 0uLL;
  memset(v34, 0, sizeof(v34));
  uint64_t v35 = 0LL;
  if (!a2
    || (unsigned int v11 = (char *)*(unsigned int *)(a2 + 12), !(_DWORD)v11)
    || (v12 = krb5_enctype_valid(a1, v11), __int128 v10 = 0uLL, v13 = v12, !(_DWORD)v12))
  {
    __int128 v33 = v10;
    __int128 v31 = v10;
    __int128 v32 = v10;
    __int128 v29 = v10;
    __int128 v30 = v10;
    __int128 v27 = v10;
    __int128 v28 = v10;
    principal[0] = (krb5_principal)v10;
    __int128 v26 = v10;
    principal[1] = (krb5_principal)a4;
    if (_krb5_have_debug((BOOL)a1) && !krb5_unparse_name(a1, a4, (char **)v24))
    {
      if (a2) {
        int v14 = *(_DWORD *)(a2 + 8);
      }
      else {
        int v14 = 0;
      }
      sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_creds: %s: opt: %d", *(const char **)v24, v14);
      krb5_xfree(*(void **)v24);
    }

    uint64_t v13 = krb5_cc_get_principal(a1, a3, principal);
    if (!(_DWORD)v13)
    {
      if (a2)
      {
        unsigned int v15 = *(_DWORD *)(a2 + 8);
        *a5 = 0LL;
        __int128 v16 = (krb5_creds *)calloc(1uLL, 0x90uLL);
        if (v16)
        {
          int v17 = v16;
          if (*(_DWORD *)(a2 + 12))
          {
            LODWORD(v26) = *(_DWORD *)(a2 + 12);
            v15 |= 0x40000000u;
          }

krb5_error_code krb5_get_renewed_creds( krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service)
{
  uint64_t v17 = 0LL;
  *(_OWORD *)unsigned int v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  *(_OWORD *)&creds->krb5_magic magic = 0u;
  *(_OWORD *)&creds->server = 0u;
  *(_OWORD *)&creds->keyblock.length = 0u;
  creds->krb5_ticket_times times = 0u;
  *(_OWORD *)&creds->is_skey = 0u;
  creds->krb5_data ticket = 0u;
  creds->krb5_data second_ticket = 0u;
  *(_OWORD *)&creds->authdata = 0u;
  *(_OWORD *)&creds[1].uint64_t client = 0u;
  kdc_uint64_t cred = krb5_copy_principal(context, client, v19);
  if (!kdc_cred)
  {
    if (in_tkt_service)
    {
      krb5_error_code principal = krb5_parse_name(context, in_tkt_service, &v19[1]);
      if (principal)
      {
LABEL_4:
        kdc_uint64_t cred = principal;
        krb5_free_principal(context, v19[0]);
        return kdc_cred;
      }
    }

    else
    {
      realm = (char *)krb5_principal_get_realm((uint64_t)context, (uint64_t)client);
      krb5_error_code principal = krb5_make_principal(context, &v19[1], realm, "krbtgt", realm, 0LL);
      if (principal) {
        goto LABEL_4;
      }
    }

    if (krb5_get_credentials_with_flags((uint64_t)context, 1, 0, ccache, (uint64_t)v19, &v18))
    {
      int v14 = 1073742080;
    }

    else
    {
      int v14 = (uint64_t)v18[1].server & 0xA | 0x40000100;
      krb5_free_creds(context, v18);
    }

    kdc_uint64_t cred = krb5_get_kdc_cred(context, ccache, v14, 0LL, v13, (uint64_t)v19, (void **)&v17);
    krb5_free_principal(context, v19[0]);
    krb5_free_principal(context, v19[1]);
    if (!kdc_cred)
    {
      unsigned int v15 = (krb5_creds *)v17;
      kdc_uint64_t cred = krb5_copy_creds_contents(context, v17, (uint64_t)creds);
      krb5_free_creds(context, v15);
    }
  }

  return kdc_cred;
}

uint64_t sub_1882D03EC( _krb5_context *a1, _krb5_ccache *a2, krb5_principal_data *a3, uint64_t *a4, krb5_creds *a5)
{
  v14.uint64_t client = a3;
  krb5_timeofday(a1, &v14.times.endtime);
  uint64_t result = krb5_cc_retrieve_cred(a1, a2, -2113929216, &v14, a5);
  if ((_DWORD)result)
  {
    if (a4 && (uint64_t v11 = *a4) != 0)
    {
      uint64_t v12 = a4 + 1;
      while (!krb5_compare_creds(a1, 0x80000000, (uint64_t)&v14, v11))
      {
        uint64_t v13 = *v12++;
        uint64_t v11 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }

      return krb5_copy_creds_contents(a1, *(v12 - 1), (uint64_t)a5);
    }

    else
    {
LABEL_7:
      sub_1882CFC6C(a1, a3);
      return 2529639053LL;
    }
  }

  return result;
}

uint64_t sub_1882D04BC( krb5_context context, uint64_t a2, krb5_error *a3, int a4, uint64_t a5, uint64_t a6, __int128 *a7, _BYTE *a8, char *a9, char *a10, krb5_principal *a11)
{
  uint64_t v12 = a7;
  v24[0] = 0LL;
  v24[1] = 0LL;
  if (*(_DWORD *)(a6 + 120))
  {
    krb5_appdefault_BOOLean( context,  0LL,  *(const krb5_data **)(*(void *)(a6 + 8) + 24LL),  "no-addresses",  0,  &ret_value);
    unsigned int v19 = 0LL;
    if (!ret_value)
    {
      krb5_get_all_client_addrs(context, (uint64_t)v24);
      if (LODWORD(v24[0])) {
        unsigned int v19 = v24;
      }
      else {
        unsigned int v19 = 0LL;
      }
    }

    uint64_t v12 = a7;
  }

  else
  {
    unsigned int v19 = 0LL;
  }

  uint64_t v20 = sub_1882CEC50((uint64_t)context, a2, a3, a4, (uint64_t)v19, a5, a6, v12, a8, a9, a10, a11);
  krb5_free_addresses(context, v24);
  return v20;
}

uint64_t sub_1882D05C4(_krb5_context *a1, const krb5_creds *a2, void **a3)
{
  if (*a3)
  {
    unsigned int v6 = -1;
    size_t v7 = (uint64_t *)*a3;
    do
    {
      uint64_t v8 = *v7++;
      ++v6;
    }

    while (v8);
  }

  else
  {
    unsigned int v6 = 0;
  }

  uint64_t v9 = realloc(*a3, 8LL * (v6 + 2));
  if (v9)
  {
    __int128 v10 = v9;
    *a3 = v9;
    uint64_t result = krb5_copy_creds(a1, a2, (krb5_creds **)&v9[v6]);
    v10[v6 + 1] = 0LL;
  }

  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12LL;
  }

  return result;
}

uint64_t sub_1882D0668( _krb5_context *a1, unsigned int a2, _krb5_ccache *a3, krb5_error *a4, uint64_t *a5, char *a6, __int128 *a7, _BYTE *a8, char *a9, char *a10, krb5_creds **a11, uint64_t **a12)
{
  *a11 = 0LL;
  realm = (const char *)krb5_principal_get_realm((uint64_t)a1, *a5);
  unsigned int v19 = (const char *)krb5_principal_get_realm((uint64_t)a1, a5[1]);
  *(_OWORD *)BOOL v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  uint64_t v20 = krb5_copy_principal(a1, (krb5_const_principal)*a5, v42);
  if ((_DWORD)v20) {
    return v20;
  }
  uint64_t principal = krb5_make_principal(a1, &v42[1], a6, "krbtgt", v19, 0LL);
  if ((_DWORD)principal)
  {
    uint64_t v20 = principal;
LABEL_36:
    krb5_free_principal(a1, v42[0]);
    return v20;
  }

  __int128 v22 = a6;
  __int128 v23 = v19;
  uint64_t v37 = (uint64_t)a3;
  if (!sub_1882D03EC(a1, a3, v42[1], *a12, &v40))
  {
    if (!strcmp(v22, realm) && !strcmp(v22, v19))
    {
      __int128 v24 = a9;
      int v25 = 1;
    }

    else
    {
      __int128 v24 = a9;
      int v25 = (v41 >> 13) & 1;
    }

    __int128 v26 = (krb5_principal *)calloc(1uLL, 0x90uLL);
    *a11 = (krb5_creds *)v26;
    if (!v26)
    {
      uint64_t v20 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_34;
    }

    uint64_t v20 = sub_1882D04BC(a1, (uint64_t)a3, a4, a2, (uint64_t)a5, (uint64_t)&v40, a7, a8, v24, a10, v26);
    __int128 v27 = (uint64_t *)*a11;
    if ((_DWORD)v20)
    {
      free(v27);
    }

    else
    {
      if (krb5_principal_compare_any_realm((uint64_t)a1, v27[1], a5[1]) == 1)
      {
        uint64_t v20 = 0LL;
        if (!v25) {
          LODWORD((*a11)[1].server) &= ~0x2000u;
        }
LABEL_34:
        krb5_free_cred_contents(a1, &v40);
LABEL_35:
        krb5_free_principal(a1, v42[1]);
        goto LABEL_36;
      }

      uint64_t v20 = 2529638919LL;
      krb5_free_creds(a1, *a11);
    }

    *a11 = 0LL;
    goto LABEL_34;
  }

  if (krb5_realm_compare(a1, (krb5_const_principal)*a5, (krb5_const_principal)a5[1]))
  {
    sub_1882CFC6C(a1, (const krb5_principal_data *)a5[1]);
    return 2529639053LL;
  }

  int v28 = 1;
  while (1)
  {
    uint64_t v29 = sub_1882CF628(a1, a2, v37, a4, v42, 0LL, 0LL, a9, a10, &v40, a12);
    if ((_DWORD)v29
      || ((__int128 v30 = *(const krb5_creds **)&v40.magic, v31 = *(_DWORD *)(*(void *)&v40.magic + 136LL), !v28)
       || (v31 & 0x2000) == 0
        ? (int v28 = 0, *(_DWORD *)(*(void *)&v40.magic + 136LL) = v31 & 0xFFFFDFFF)
        : (int v28 = 1),
          uint64_t v29 = sub_1882D05C4(a1, v30, (void **)a12),
          (_DWORD)v29))
    {
LABEL_23:
      uint64_t v20 = v29;
      goto LABEL_35;
    }

    __int128 v32 = *(char **)(*(void *)(*(void *)(*(void *)&v40.magic + 8LL) + 16LL) + 8LL);
    int v33 = strcmp(v32, v23);
    krb5_free_principal(a1, v42[1]);
    if (!v33) {
      break;
    }
    uint64_t v29 = krb5_make_principal(a1, &v42[1], v32, "krbtgt", v23, 0LL);
    if (!(_DWORD)v29)
    {
      krb5_free_creds(a1, *(krb5_creds **)&v40.magic);
      if (!(_DWORD)v29) {
        continue;
      }
    }

    goto LABEL_23;
  }

  krb5_free_principal(a1, v42[0]);
  char v34 = (krb5_principal *)calloc(1uLL, 0x90uLL);
  *a11 = (krb5_creds *)v34;
  if (!v34)
  {
    uint64_t v20 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_43;
  }

  uint64_t v20 = sub_1882D04BC(a1, v37, a4, a2, (uint64_t)a5, *(uint64_t *)&v40.magic, a7, a8, a9, a10, v34);
  uint64_t v35 = *a11;
  if ((_DWORD)v20)
  {
    free(v35);
  }

  else
  {
    if (krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v35->client, a5[1]) == 1)
    {
      uint64_t v20 = 0LL;
      goto LABEL_43;
    }

    uint64_t v20 = 2529638919LL;
    krb5_free_creds(a1, *a11);
  }

  *a11 = 0LL;
LABEL_43:
  if (*(void *)&v40.magic) {
    krb5_free_creds(a1, *(krb5_creds **)&v40.magic);
  }
  return v20;
}

uint64_t sub_1882D0A9C(_krb5_context *a1, void *a2)
{
  *a2 = 0LL;
  uid_t v4 = getuid();
  if (v4)
  {
    uint64_t v5 = getpwuid(v4);
    if (v5)
    {
      pw_name = v5->pw_name;
      if (!pw_name)
      {
LABEL_12:
        krb5_set_error_message(a1, 25, "unable to figure out current principal");
        return 25LL;
      }
    }

    else
    {
      pw_name = sub_1882D0B78();
      if (!pw_name)
      {
        pw_name = getlogin();
        if (!pw_name) {
          goto LABEL_12;
        }
      }
    }

    return krb5_make_principal(a1, a2, 0LL, pw_name, 0LL);
  }

  size_t v7 = getlogin();
  if ((v7 || (size_t v7 = sub_1882D0B78()) != 0LL) && strcmp(v7, "root")) {
    return krb5_make_principal(a1, a2, 0LL, v7, "root", 0LL);
  }
  else {
    return krb5_make_principal(a1, a2, 0LL, "root", 0LL);
  }
}

char *sub_1882D0B78()
{
  uint64_t result = getenv("USER");
  if (!result)
  {
    uint64_t result = getenv("LOGNAME");
    if (!result) {
      return getenv("USERNAME");
    }
  }

  return result;
}

uint64_t krb5_get_default_principal(_krb5_context *a1, krb5_principal *a2)
{
  *a2 = 0LL;
  if (krb5_cc_default(a1, &cache)) {
    return sub_1882D0A9C(a1, a2);
  }
  krb5_error_code principal = krb5_cc_get_principal(a1, cache, a2);
  krb5_cc_close(a1, cache);
  if (principal) {
    return sub_1882D0A9C(a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1882D0C30(_krb5_context *a1, CFArrayRef theArray, char *const **a3)
{
  CFIndex length = heim_array_get_length(theArray);
  size_t v7 = (char *const *)calloc(length + 1, 8uLL);
  *a3 = v7;
  if (length)
  {
    CFIndex v8 = 0LL;
    while (1)
    {
      uint64_t v9 = (const __CFString *)heim_array_copy_value(theArray, v8);
      if (v9)
      {
        __int128 v10 = v9;
        (*a3)[v8] = heim_string_copy_utf8(v9);
        heim_release(v10);
      }

      uint64_t v11 = *a3;
      if (!(*a3)[v8]) {
        break;
      }
      if (length == ++v8) {
        goto LABEL_9;
      }
    }

    krb5_free_host_realm(a1, v11);
    uint64_t v12 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  else
  {
    uint64_t v11 = v7;
LABEL_9:
    uint64_t v12 = 0LL;
    a3 = (char *const **)&v11[length];
  }

  *a3 = 0LL;
  return v12;
}

uint64_t krb5_get_default_realms(CFArrayRef *a1, char *const **a2)
{
  uint64_t result = sub_1882D0D44((_krb5_context *)a1);
  if (!(_DWORD)result) {
    return sub_1882D0C30((_krb5_context *)a1, a1[9], a2);
  }
  return result;
}

uint64_t sub_1882D0D44(_krb5_context *a1)
{
  uint64_t v2 = (const __CFArray *)*((void *)a1 + 9);
  if ((!v2 || !heim_array_get_length(v2)) && krb5_set_default_realm(a1, 0LL)) {
    return 2529639136LL;
  }
  uid_t v4 = (const __CFArray *)*((void *)a1 + 9);
  if (v4 && heim_array_get_length(v4)) {
    return 0LL;
  }
  uint64_t v3 = 2529639136LL;
  krb5_set_error_message(a1, -1765328160, "No default realm found");
  return v3;
}

krb5_error_code krb5_get_default_realm(krb5_context a1, char **a2)
{
  krb5_error_code v4 = sub_1882D0D44(a1);
  if (!v4)
  {
    uint64_t v5 = (const __CFString *)heim_array_copy_value(*((const __CFArray **)a1 + 9), 0LL);
    if (v5 && (unsigned int v6 = v5, *a2 = heim_string_copy_utf8(v5), heim_release(v6), *a2))
    {
      return 0;
    }

    else
    {
      krb5_error_code v4 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  return v4;
}

krb5_error_code krb5_fwd_tgt_creds( krb5_context a1, krb5_auth_context a2, char *a3, krb5_principal a4, krb5_principal a5, krb5_ccache a6, int forwardable, krb5_data *a8)
{
  comp_string = a3;
  if (forwardable) {
    uint64_t v14 = 6LL;
  }
  else {
    uint64_t v14 = 4LL;
  }
  if (!a3)
  {
    if (krb5_principal_get_type((uint64_t)a1, (unsigned int *)a5) == 3)
    {
      comp_string = (const char *)krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a5, 0);
      uint64_t v16 = krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a5, 1u);
      if (comp_string)
      {
        uint64_t v17 = (const char *)v16;
        int v18 = strcmp(comp_string, "host");
        comp_string = 0LL;
        if (!v18)
        {
          if (v17)
          {
            else {
              comp_string = v17;
            }
          }
        }
      }
    }

    else
    {
      comp_string = 0LL;
    }
  }

  realm = (char *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a4);
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0LL;
  krb5_principal v21 = a4;
  krb5_error_code result = krb5_make_principal(a1, v22, realm, "krbtgt", realm, 0LL);
  if (!result) {
    return krb5_get_forwarded_creds(a1, (uint64_t)a2, a6, v14, comp_string, (uint64_t)&v21, (size_t *)a8);
  }
  return result;
}

uint64_t krb5_get_forwarded_creds( _krb5_context *a1, uint64_t a2, _krb5_ccache *a3, uint64_t a4, const char *a5, uint64_t a6, size_t *a7)
{
  __int128 v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v75[2] = (void *)0x1600000005LL;
  LODWORD(v78) = 0;
  uint64_t v79 = 0LL;
  uint64_t v80 = 0LL;
  krb5_data_zero(&v67);
  if (!*(void *)(a2 + 32))
  {
    kdc_uint64_t cred = 2529638921LL;
    krb5_set_error_message(a1, -1765328375, "auth context is missing session key");
    return kdc_cred;
  }

  if (krb5_get_credentials(a1, 0, a3, (krb5_creds *)a6, &v68))
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, *(void *)a6);
    krb5_appdefault_BOOLean(a1, 0LL, realm, "no-addresses", 1, ret_value);
    if (ret_value[0])
    {
LABEL_4:
      char v15 = 0;
      uint64_t v16 = 0LL;
      goto LABEL_5;
    }
  }

  else
  {
    krb5_magic magic = v68[1].magic;
    krb5_free_creds(a1, v68);
    if (!magic) {
      goto LABEL_4;
    }
  }

  uint64_t v22 = getaddrinfo(a5, 0LL, 0LL, &v69);
  if ((_DWORD)v22)
  {
    uint64_t v23 = v22;
    __int128 v24 = __error();
    kdc_uint64_t cred = krb5_eai_to_heim_errno(v23, *v24);
    gai_strerror(v23);
    krb5_set_error_message(a1, kdc_cred, "resolving host %s failed: %s");
    return kdc_cred;
  }

  __int128 v26 = v69;
  if (v69)
  {
    int v27 = 0;
    int v28 = v69;
    do
    {
      ++v27;
      int v28 = v28->ai_next;
    }

    while (v28);
  }

  else
  {
    int v27 = 0;
  }

  uint64_t v29 = (char *)realloc(v79, 24LL * ((_DWORD)v78 + v27));
  unint64_t v30 = v78;
  if (v29) {
    BOOL v31 = 1;
  }
  else {
    BOOL v31 = (_DWORD)v78 == -v27;
  }
  if (!v31)
  {
    kdc_uint64_t cred = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_38;
  }

  __int128 v65 = a7;
  uint64_t v79 = v29;
  if (v78 < (int)v78 + v27)
  {
    uint64_t v32 = 24LL * v78;
    do
    {
      int v33 = v79;
      *(_DWORD *)&v79[v32] = 0;
      krb5_data_zero(&v33[v32 + 8]);
      ++v30;
      v32 += 24LL;
    }

    while (v30 < ((_DWORD)v78 + v27));
    LODWORD(v30) = (_DWORD)v78;
  }

  if (!v26)
  {
LABEL_37:
    freeaddrinfo(v69);
    uint64_t v16 = &v78;
    char v15 = 1;
    a7 = v65;
    goto LABEL_5;
  }

  while (1)
  {
    uint64_t v34 = krb5_sockaddr2address(a1, (uint64_t)v26->ai_addr, (uint64_t)ret_value);
    if ((_DWORD)v34 != -1765328170) {
      break;
    }
    krb5_clear_error_message(a1);
LABEL_36:
    LODWORD(v78) = v30;
    __int128 v26 = v26->ai_next;
    if (!v26) {
      goto LABEL_37;
    }
  }

  kdc_uint64_t cred = v34;
  if (!(_DWORD)v34)
  {
    if (krb5_address_search(a1, (const krb5_address *)ret_value, &v78))
    {
      krb5_free_address((uint64_t)a1, (uint64_t)ret_value);
    }

    else
    {
      uint64_t v35 = &v79[24 * v30];
      __int128 v36 = *(_OWORD *)ret_value;
      *((void *)v35 + 2) = v73;
      *(_OWORD *)uint64_t v35 = v36;
      LODWORD(v30) = v30 + 1;
    }

    goto LABEL_36;
  }

  a7 = v65;
LABEL_38:
  uint64_t v16 = &v78;
  krb5_free_addresses(a1, &v78);
  freeaddrinfo(v69);
  if ((_DWORD)kdc_cred) {
    return kdc_cred;
  }
  char v15 = 1;
LABEL_5:
  LODWORD(v76) = 1;
  *((void *)&v76 + 1) = calloc(1uLL, 0x48uLL);
  if (!*((void *)&v76 + 1))
  {
    kdc_uint64_t cred = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return kdc_cred;
  }

  timeval v64 = a7;
  if (!v16)
  {
    char v63 = v15;
    uint64_t v17 = *(const krb5_principal_data **)(a6 + 8);
    krb5_data_zero(ret_value);
    krb5_error_code config = krb5_cc_get_config(a1, a3, v17, "_forward", (krb5_data *)ret_value);
    if (config)
    {
      krb5_error_code v19 = config;
      krb5_data_free(ret_value);
      char v15 = v63;
      goto LABEL_56;
    }

    uint64_t v37 = krb5_storage_from_data((uint64_t *)ret_value);
    if (v37)
    {
      uint64_t v38 = (uint64_t)v37;
      krb5_error_code v19 = krb5_ret_uint32((uint64_t)v37, &v71);
      if (!v19)
      {
        if ((_DWORD)v71 == (_DWORD)a4)
        {
          uint64_t v39 = calloc(1uLL, 0x90uLL);
          uint64_t v80 = (uint64_t)v39;
          if (v39)
          {
            krb5_error_code v40 = krb5_ret_creds(v38, (uint64_t)v39);
            if (v40)
            {
              krb5_error_code v19 = v40;
              if (v80)
              {
                krb5_free_creds(a1, (krb5_creds *)v80);
                uint64_t v80 = 0LL;
              }
            }

            else if (*(void *)(v80 + 56) >= time(0LL))
            {
              krb5_error_code v19 = 0;
            }

            else
            {
              krb5_cc_set_config(a1, a3, v17, "_forward", 0LL);
              krb5_free_creds(a1, (krb5_creds *)v80);
              uint64_t v80 = 0LL;
              krb5_error_code v19 = -1765328352;
            }
          }

          else
          {
            krb5_error_code v19 = krb5_enomem(a1);
          }
        }

        else
        {
          krb5_error_code v19 = -1765328349;
          krb5_set_error_message(a1, -1765328349, "cached forward credential not same flags");
        }
      }

      krb5_storage_free(v38);
    }

    else
    {
      krb5_error_code v19 = krb5_enomem(a1);
    }

    krb5_data_free(ret_value);
    char v15 = v63;
    if (v19) {
LABEL_56:
    }
      sub_1882DFD2C((uint64_t *)a1, 1, v19, "_krb5_get_cached_forward_creds");
  }

  if (!v80)
  {
    int v42 = sub_1882FD668(a4);
    kdc_uint64_t cred = krb5_get_kdc_cred(a1, a3, v42, (uint64_t)v16, 0LL, a6, (void **)&v80);
    krb5_free_addresses(a1, &v78);
    if (!(_DWORD)kdc_cred)
    {
      if (!v16)
      {
        krb5_error_code v43 = sub_1882D1940(a1, a3, *(const krb5_principal_data **)(a6 + 8), a4, v80);
        if (v43) {
          sub_1882DFD2C((uint64_t *)a1, 1, v43, "_krb5_store_cached_forward_creds");
        }
      }

      goto LABEL_58;
    }

    goto LABEL_88;
  }

LABEL_58:
  kdc_uint64_t cred = decode_Ticket();
  if ((_DWORD)kdc_cred)
  {
LABEL_88:
    sub_1882FDFA0();
    if (v80) {
      krb5_free_creds(a1, (krb5_creds *)v80);
    }
    return kdc_cred;
  }

  v75[0] = 0LL;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  *(_OWORD *)ret_xpc_object_t value = 0u;
  ret_value[0] = 1;
  *(void *)&ret_value[2] = calloc(1uLL, 0x68uLL);
  if (!*(void *)&ret_value[2]) {
    goto LABEL_86;
  }
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    krb5_us_timeofday(a1, v70, &v66);
    __int128 v44 = calloc(1uLL, 8uLL);
    *((void *)&v73 + 1) = v44;
    unsigned int v41 = v64;
    if (v44)
    {
      *__int128 v44 = *(void *)v70;
      __int128 v45 = calloc(1uLL, 4uLL);
      *(void *)&__int128 v74 = v45;
      if (v45)
      {
        *__int128 v45 = v66;
        goto LABEL_69;
      }
    }

    goto LABEL_86;
  }

  *((void *)&v73 + 1) = 0LL;
  *(void *)&__int128 v74 = 0LL;
  unsigned int v41 = v64;
LABEL_69:
  uint64_t v46 = *(void *)(a2 + 8);
  if (v46)
  {
    char v47 = v15 ^ 1;
    if (!*(_WORD *)(a2 + 24)) {
      char v47 = 1;
    }
    if ((v47 & 1) == 0)
    {
      kdc_uint64_t cred = krb5_make_addrport(a1, (void **)&v74 + 1, v46, *(_WORD *)(a2 + 24));
      if ((_DWORD)kdc_cred)
      {
LABEL_87:
        sub_1882FE000();
        goto LABEL_88;
      }
    }
  }

  if (!*(void *)(a2 + 16)) {
    goto LABEL_77;
  }
  if (!*(_WORD *)(a2 + 26))
  {
    v75[0] = calloc(1uLL, 0x18uLL);
    if (v75[0])
    {
      kdc_uint64_t cred = krb5_copy_address((uint64_t)a1, *(_DWORD **)(a2 + 16));
      if ((_DWORD)kdc_cred) {
        goto LABEL_87;
      }
      goto LABEL_77;
    }

LABEL_86:
    kdc_uint64_t cred = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_87;
  }

  __int128 v48 = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, *(void *)(v80 + 8));
  krb5_appdefault_BOOLean(a1, 0LL, v48, "no-addresses", 0, v70);
  if (!v70[0])
  {
    uint64_t addrport = krb5_make_addrport(a1, v75, *(void *)(a2 + 16), *(_WORD *)(a2 + 26));
    if ((_DWORD)addrport)
    {
      kdc_uint64_t cred = addrport;
      goto LABEL_87;
    }
  }

LABEL_77:
  ret_value[0] = 1;
  __int128 v49 = *(void **)&ret_value[2];
  copy_EncryptionKey();
  v49[3] = calloc(1uLL, 8uLL);
  sub_1882FD3C0();
  v49[4] = calloc(1uLL, 0x18uLL);
  sub_1882FD434();
  __int128 v50 = calloc(1uLL, 4uLL);
  v49[5] = v50;
  *__int128 v50 = *(_DWORD *)(v80 + 136);
  __int128 v51 = calloc(1uLL, 8uLL);
  v49[6] = v51;
  *__int128 v51 = *(void *)(v80 + 40);
  __int128 v52 = calloc(1uLL, 8uLL);
  v49[7] = v52;
  *__int128 v52 = *(void *)(v80 + 48);
  __int128 v53 = calloc(1uLL, 8uLL);
  v49[8] = v53;
  *__int128 v53 = *(void *)(v80 + 56);
  __int128 v54 = calloc(1uLL, 8uLL);
  v49[9] = v54;
  *__int128 v54 = *(void *)(v80 + 64);
  v49[10] = calloc(1uLL, 8uLL);
  sub_1882FD3C0();
  v49[11] = calloc(1uLL, 0x18uLL);
  sub_1882FD434();
  v49[12] = calloc(1uLL, 0x10uLL);
  sub_1882FD4E0();
  krb5_free_creds(a1, (krb5_creds *)v80);
  size_t v55 = sub_1882FDFF0();
  krb5_data v56 = malloc(v55);
  if (v56)
  {
    krb5_data v57 = v56;
    uint64_t v58 = sub_1882FDFD0();
    if ((_DWORD)v58)
    {
      kdc_uint64_t cred = v58;
      free(v57);
      goto LABEL_81;
    }

    sub_1882FE000();
    if (v55 != v71) {
      goto LABEL_101;
    }
    uint64_t v59 = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0LL, (krb5_keyblock ***)v70);
    if ((_DWORD)v59) {
      goto LABEL_92;
    }
    kdc_uint64_t cred = krb5_encrypt_EncryptedData(a1, *(_DWORD ***)v70, 14LL, v57, v71, 0, (uint64_t)v77);
    free(v57);
    krb5_crypto_destroy(a1, *(uint64_t *)v70);
    if (!(_DWORD)kdc_cred)
    {
      size_t v61 = sub_1882FDF90();
      unsigned int v62 = malloc(v61);
      if (v62)
      {
        krb5_data v57 = v62;
        uint64_t v59 = sub_1882FDF70();
        if (!(_DWORD)v59)
        {
          sub_1882FDFA0();
          if (v61 == v71)
          {
            kdc_uint64_t cred = 0LL;
            *unsigned int v41 = v61;
            v41[1] = (size_t)v57;
            return kdc_cred;
          }

      CFIndex v8 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory", v53);
      return v8;
    }
  }

  if (!strncmp(v3, "DEVICE", 6uLL))
  {
    krb5_error_code v19 = v3[6];
    if (v19 == 61 || v19 == 58)
    {
      krb5_principal v21 = v57;
      uint64_t v20 = v58;
      uint64_t v22 = strdup(v3 + 7);
      return sub_1882DF898(a1, (uint64_t)a2, v20, v21, v22, (uint64_t)"w", 0LL, 0, 1);
    }
  }

  if (!strncmp(v3, "SYSLOG", 6uLL) && (v3[6] == 58 || !v3[6]))
  {
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    size_t v71 = 0u;
    size_t v72 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    uint64_t v67 = 0u;
    __int128 v68 = 0u;
    krb5_int32 v66 = 0u;
    timeval v64 = 0u;
    __int128 v65 = 0u;
    unsigned int v62 = 0u;
    char v63 = 0u;
    unsigned int v60 = 0u;
    size_t v61 = 0u;
    *(_OWORD *)facility = 0u;
    size_t v55 = v3 + 6;
    if (v3[6]) {
      size_t v55 = v3 + 7;
    }
    if (!(_BYTE)v67) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    int v25 = v57;
    __int128 v24 = v58;
    __int128 v26 = (int *)malloc(4uLL);
    if (!v26) {
      goto LABEL_77;
    }
    int v27 = v26;
    int v28 = &off_18A219E58;
    uint64_t v29 = "EMERG";
    do
    {
      unint64_t v30 = v28[2];
      v28 += 2;
      uint64_t v29 = v30;
    }

    while (v30);
    if (*((_DWORD *)v28 + 2) == -1) {
      BOOL v31 = 3;
    }
    else {
      BOOL v31 = *((_DWORD *)v28 + 2);
    }
    uint64_t v32 = &off_18A219E58;
    int v33 = "EMERG";
    do
    {
      if (!strcasecmp(v33, facility)) {
        break;
      }
      uint64_t v34 = v32[2];
      v32 += 2;
      int v33 = v34;
    }

    while (v34);
    if (*((_DWORD *)v32 + 2) == -1) {
      uint64_t v35 = 32;
    }
    else {
      uint64_t v35 = *((_DWORD *)v32 + 2);
    }
    uint64_t *v27 = v35 | v31;
    openlog(*a2, 9, v35);
    __int128 v36 = sub_1882DFF14;
    uint64_t v37 = sub_1882DFF40;
    goto LABEL_76;
  }

  if (!strncmp(v3, "ASL", 3uLL) && (v3[3] == 58 || !v3[3]))
  {
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    size_t v71 = 0u;
    size_t v72 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    uint64_t v67 = 0u;
    __int128 v68 = 0u;
    krb5_int32 v66 = 0u;
    timeval v64 = 0u;
    __int128 v65 = 0u;
    unsigned int v62 = 0u;
    char v63 = 0u;
    unsigned int v60 = 0u;
    size_t v61 = 0u;
    *(_OWORD *)facility = 0u;
    size_t v55 = v3 + 3;
    if (v3[3]) {
      size_t v55 = v3 + 4;
    }
    if (!(_BYTE)v67) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    int v25 = v57;
    __int128 v24 = v58;
    uint64_t v38 = (int *)malloc(0x18uLL);
    if (!v38) {
      goto LABEL_77;
    }
    int v27 = v38;
    uint64_t v39 = &off_18A21A028;
    krb5_error_code v40 = "EMERG";
    do
    {
      unsigned int v41 = v39[2];
      v39 += 2;
      krb5_error_code v40 = v41;
    }

    while (v41);
    int v42 = *((_DWORD *)v39 + 2);
    if (v42 == -1) {
      int v42 = 3;
    }
    v27[4] = v42;
    krb5_error_code v43 = getprogname();
    *(void *)int v27 = asl_open(v43, facility, 0);
    __int128 v44 = asl_new(0);
    *((void *)v27 + 1) = v44;
    asl_set(v44, "org.h5l.asl", "krb5");
    __int128 v36 = sub_1882DFF54;
    uint64_t v37 = sub_1882DFF88;
LABEL_76:
    __int128 v45 = a1;
    uint64_t v46 = (uint64_t)a2;
    char v47 = v24;
    __int128 v48 = v25;
    __int128 v49 = (os_log_t)v27;
    return krb5_addlog_func(v45, v46, v47, v48, (uint64_t)v36, (uint64_t)v37, (uint64_t)v49);
  }

  if (!strncmp(v3, "OSLOG", 5uLL) && (v3[5] == 58 || !v3[5]))
  {
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    size_t v71 = 0u;
    size_t v72 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    uint64_t v67 = 0u;
    __int128 v68 = 0u;
    krb5_int32 v66 = 0u;
    timeval v64 = 0u;
    __int128 v65 = 0u;
    unsigned int v62 = 0u;
    char v63 = 0u;
    unsigned int v60 = 0u;
    size_t v61 = 0u;
    *(_OWORD *)facility = 0u;
    size_t v55 = v3 + 5;
    if (v3[5]) {
      size_t v55 = v3 + 6;
    }
    if (!(_BYTE)v67) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    __int128 v51 = v57;
    __int128 v50 = v58;
    __int128 v49 = os_log_create("com.apple.Heimdal", facility);
    else {
      __int128 v36 = sub_1882E0050;
    }
    uint64_t v37 = j__os_release;
    __int128 v45 = a1;
    uint64_t v46 = (uint64_t)a2;
    char v47 = v50;
    __int128 v48 = v51;
    return krb5_addlog_func(v45, v46, v47, v48, (uint64_t)v36, (uint64_t)v37, (uint64_t)v49);
  }

  CFIndex v8 = 2314790656LL;
  __int128 v54 = v3;
  uint64_t v9 = "unknown log type: %s";
LABEL_19:
  krb5_set_error_message(a1, -1980176640, v9, v54);
  return v8;
}

LABEL_101:
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }

LABEL_92:
        kdc_uint64_t cred = v59;
        free(v57);
      }

      else
      {
        kdc_uint64_t cred = 12LL;
      }
    }
  }

  else
  {
    kdc_uint64_t cred = 12LL;
LABEL_81:
    sub_1882FE000();
  }

  sub_1882FDFA0();
  return kdc_cred;
}

uint64_t sub_1882D1940( _krb5_context *a1, _krb5_ccache *a2, const krb5_principal_data *a3, uint64_t a4, uint64_t a5)
{
  __int128 v10 = krb5_storage_emem();
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = krb5_store_uint32(v10, a4);
    if (!(_DWORD)v12)
    {
      uint64_t v12 = krb5_store_creds(v11, a5);
      if (!(_DWORD)v12)
      {
        uint64_t v12 = krb5_storage_to_data(v11, (size_t *)&v14);
        if (!(_DWORD)v12) {
          uint64_t v12 = krb5_cc_set_config(a1, a2, a3, "_forward", &v14);
        }
      }
    }

    krb5_data_free(&v14);
    krb5_storage_free(v11);
  }

  else
  {
    uint64_t v12 = krb5_enomem(a1);
    krb5_data_free(&v14);
  }

  return v12;
}

uint64_t _krb5_get_host_realm_int( _krb5_context *a1, const char *a2, int a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL BOOL_default = krb5_config_get_BOOL_default( (uint64_t)a1,  0LL,  0LL,  (uint64_t)a4,  a5,  a6,  a7,  a8,  (uint64_t)"libdefaults");
  if (!a2)
  {
LABEL_19:
    uint64_t v34 = strchr(a2, 46);
    if (!v34)
    {
      uint64_t v39 = 2529639129LL;
      krb5_set_error_message(a1, -1765328167, "unable to find realm of host %s");
      return v39;
    }

    uint64_t v35 = v34;
    __int128 v36 = malloc(0x10uLL);
    *a4 = v36;
    if (v36)
    {
      uint64_t v37 = (unsigned __int8 **)v36;
      uint64_t v38 = (unsigned __int8 *)strdup(v35 + 1);
      *uint64_t v37 = v38;
      if (v38)
      {
        rk_strupr(v38);
        uint64_t v39 = 0LL;
        *((void *)*a4 + 1) = 0LL;
        return v39;
      }

      free(v37);
    }

    uint64_t v39 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v39;
  }

  if (a3) {
    BOOL v19 = !BOOL_default;
  }
  else {
    BOOL v19 = 1;
  }
  int v20 = !v19;
  krb5_principal v21 = (char *)a2;
  while (1)
  {
    strings = (const char **)krb5_config_get_strings( (uint64_t)a1,  0LL,  v13,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"domain_realm");
    if (strings) {
      break;
    }
LABEL_18:
    krb5_principal v21 = strchr(v21 + 1, 46);
    if (!v21) {
      goto LABEL_19;
    }
  }

  *a4 = strings;
  if (strcasecmp(*strings, "dns_locate")) {
    return 0LL;
  }
  if (!a3) {
    goto LABEL_18;
  }
  int v33 = (char *)a2;
  while (sub_1882D1BDC((uint64_t)a1, v33, a4, v28, v29, v30, v31, v32))
  {
    int v33 = strchr(v33 + 1, 46);
    if (!v33) {
      goto LABEL_18;
    }
  }

  return 0LL;
}

uint64_t sub_1882D1BDC( uint64_t a1, const char *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  strings = (void **)krb5_config_get_strings(a1, 0LL, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  uint64_t v32 = strings;
  if (strings) {
    uint64_t v11 = (const char **)strings;
  }
  else {
    uint64_t v11 = (const char **)&off_18A219B28;
  }
  if (*a2 == 46) {
    uint64_t v12 = a2 + 1;
  }
  else {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = "TXT";
    do
    {
      uint64_t v16 = sub_1882FB764(__str, v15);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = v15;
        uint64_t v19 = *((void *)v16 + 6);
        if (v19)
        {
          unsigned int v20 = 0;
          uint64_t v21 = *((void *)v16 + 6);
          do
          {
            if (*(_DWORD *)(v21 + 8) == 16) {
              ++v20;
            }
            uint64_t v21 = *(void *)(v21 + 32);
          }

          while (v21);
          if (v20)
          {
            uint64_t v22 = v20 + 1;
            uint64_t v23 = malloc(8 * v22);
            *a3 = v23;
            if (v23)
            {
              if ((_DWORD)v22)
              {
                uint64_t v24 = 0LL;
                do
                {
                  *(void *)((char *)*a3 + v24) = 0LL;
                  v24 += 8LL;
                }

                while (8 * v22 != v24);
              }

              unsigned int v25 = 0;
              while (1)
              {
                if (*(_DWORD *)(v19 + 8) == 16)
                {
                  uint64_t v26 = strdup(*(const char **)(v19 + 24));
                  if (!v26)
                  {
                    uint64_t v27 = 0LL;
                    if (v20 <= 1) {
                      unsigned int v28 = 1;
                    }
                    else {
                      unsigned int v28 = v20;
                    }
                    uint64_t v29 = 8LL * v28;
                    do
                    {
                      free(*(void **)((char *)*a3 + v27));
                      v27 += 8LL;
                    }

                    while (v29 != v27);
                    free(*a3);
                    break;
                  }

                  *((void *)*a3 + v25++) = v26;
                }

                uint64_t v19 = *(void *)(v19 + 32);
                if (!v19)
                {
                  sub_1882FAF6C(v17);
                  uint64_t v30 = 0LL;
                  goto LABEL_36;
                }
              }
            }
          }
        }

        sub_1882FAF6C(v17);
        uint64_t v15 = v18;
      }

      uint64_t v13 = v11[++v14];
    }

    while (v13);
  }

  uint64_t v30 = 0xFFFFFFFFLL;
LABEL_36:
  if (v32) {
    krb5_config_free_strings(v32);
  }
  return v30;
}

krb5_error_code krb5_get_host_realm(krb5_context a1, const char *a2, char ***a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  unsigned int v25 = 0LL;
  if (a2)
  {
    __strlcpy_chk();
  }

  else
  {
    if (gethostname(__s, 0x100uLL))
    {
      *a3 = 0LL;
      return *__error();
    }

    __s[255] = 0;
  }

  sub_1882D9F30(__s);
  CFMutableArrayRef v6 = heim_array_create();
  if (!v6) {
    return 12;
  }
  uint64_t v13 = v6;
  strings = (char **)krb5_config_get_strings((uint64_t)a1, 0LL, v7, v8, v9, v10, v11, v12, (uint64_t)"domain_realm");
  if (strings)
  {
    uint64_t v15 = strings;
    unsigned int v25 = strings;
    sub_1882D1FF8(v13, strings);
    krb5_free_host_realm(a1, v15);
  }

  v26[0] = __s;
  v26[1] = v13;
  krb5_plugin_run_f((uint64_t)a1, "krb5", "krb5_configuration", 1, 0LL, (uint64_t)v26, (uint64_t)sub_1882D2060);
  BOOL v16 = strchr(__s, 46) != 0LL;
  if (!_krb5_get_host_realm_int(a1, __s, v16, (void **)&v25, v17, v18, v19, v20))
  {
    uint64_t v21 = v25;
    if (v25)
    {
      sub_1882D1FF8(v13, v25);
      krb5_free_host_realm(a1, v21);
    }
  }

  CFIndex length = heim_array_get_length(v13);
  if (!a2 || length)
  {
    if (!heim_array_get_length(v13))
    {
      krb5_error_code v23 = -1765328167;
      krb5_set_error_message(a1, -1765328167, "Unable to find realm of self");
      return v23;
    }

    krb5_error_code v23 = sub_1882D0C30(a1, v13, (char *const **)a3);
    goto LABEL_22;
  }

  if (!krb5_get_default_realms(a1, a3))
  {
    krb5_error_code v23 = 0;
LABEL_22:
    heim_release(v13);
    return v23;
  }

  krb5_error_code v23 = -1765328167;
  krb5_set_error_message(a1, -1765328167, "Unable to find realm of host %s");
  return v23;
}

char *sub_1882D1FF8(__CFArray *a1, char **a2)
{
  krb5_error_code result = *a2;
  if (*a2)
  {
    krb5_error_code v4 = a2 + 1;
    do
    {
      CFStringRef v5 = heim_string_create(result);
      if (v5)
      {
        CFStringRef v6 = v5;
        heim_release(v6);
      }

      uint64_t v7 = *v4++;
      krb5_error_code result = v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_1882D2060(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  krb5_error_code v4 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void (*)(int, __CFArray *, char *)))(a2 + 32);
  if (v4) {
    return v4(a1, *a4, a3, a4[1], sub_1882D2084);
  }
  else {
    return 2529639161LL;
  }
}

void sub_1882D2084(int a1, __CFArray *a2, char *cStr)
{
  CFStringRef v4 = heim_string_create(cStr);
  if (v4)
  {
    CFStringRef v5 = v4;
    heim_array_append_value(a2, v4);
    heim_release(v5);
  }

void sub_1882D20CC()
{
  uint64_t v0 = (void *)MEMORY[0x1895C1D94]();
  AnalyticsSendEventLazy();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1882D2164(uint64_t a1)
{
  v6[4] = *MEMORY[0x1895F89C0];
  v5[0] = @"AS_REQ_replykey_et";
  v6[0] = [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a1 + 40)];
  v5[1] = @"AS_REQ_useret_et";
  v6[1] = [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a1 + 44)];
  void v5[2] = @"AS_REQ_preauth";
  uint64_t v2 = [NSString stringWithCString:*(void *)(a1 + 32) encoding:4];
  uint64_t v3 = @"unknown";
  if (v2) {
    uint64_t v3 = (const __CFString *)v2;
  }
  v6[2] = v3;
  v5[3] = @"AS_REQ_FAST";
  v6[3] = [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a1 + 48)];
  return [MEMORY[0x189603F68] dictionaryWithObjects:v6 forKeys:v5 count:4];
}

uint64_t krb5_getportbyname(int a1, char *a2, char *a3, unsigned int a4)
{
  CFStringRef v5 = getservbyname(a2, a3);
  if (v5) {
    return v5->s_port;
  }
  else {
    return bswap32(a4) >> 16;
  }
}

uint64_t krb5_process_last_request(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6)
    {
      if (*(void *)(v6 + 48))
      {
        uint64_t v7 = calloc((*(_DWORD *)(a3 + 784) + 1), 8uLL);
        if (!v7)
        {
          uint64_t v14 = 12LL;
          krb5_set_error_message(a1, 12, "malloc: out of memory");
          return v14;
        }

        uint64_t v8 = v7;
        if (*(_DWORD *)(a3 + 784))
        {
          uint64_t v9 = 0LL;
          unint64_t v10 = 0LL;
          do
          {
            uint64_t v11 = calloc(1uLL, 0x10uLL);
            v8[v10] = v11;
            if (!v11) {
              break;
            }
            uint64_t v12 = *(void *)(a3 + 792) + v9;
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
            v11[1] = *(void *)(v12 + 8);
            ++v10;
            v9 += 16LL;
          }

          while (v10 < *(unsigned int *)(a3 + 784));
        }

        (*(void (**)(_krb5_context *, void *, void))(*(void *)(a2 + 88) + 48LL))( a1,  v8,  *(void *)(*(void *)(a2 + 88) + 56LL));
        if (*(_DWORD *)(a3 + 784))
        {
          unint64_t v13 = 0LL;
          do
            free((void *)v8[v13++]);
          while (v13 < *(unsigned int *)(a3 + 784));
        }

        free(v8);
      }
    }
  }

  krb5_init_creds_warn_user(a1, a3);
  return 0LL;
}

uint64_t krb5_init_creds_warn_user(_krb5_context *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 904) || *(_DWORD *)(a2 + 920)) {
    return 0LL;
  }
  *(_DWORD *)(a2 + 920) = 1;
  krb5_timeofday(a1, v36);
  krb5_principal_get_realm((uint64_t)a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void *)v36;
  uint64_t time = krb5_config_get_time((uint64_t)a1, 0LL, v6, v7, v8, v9, v10, v11, (uint64_t)"realms");
  if (time < 0)
  {
    uint64_t time = krb5_config_get_time((uint64_t)a1, 0LL, v13, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
    if (time < 0) {
      uint64_t time = 604800LL;
    }
  }

  if (*(_DWORD *)(a2 + 784))
  {
    uint64_t v19 = 0LL;
    unint64_t v20 = 0LL;
    time_t v21 = time + v5;
    do
    {
      uint64_t v22 = *(void *)(a2 + 792);
      time_t v23 = *(void *)(v22 + v19 + 8);
      if (v23 <= v21)
      {
        int v24 = *(_DWORD *)(v22 + v19);
        if (v24 == 6)
        {
          unsigned int v25 = "Your password will expire at ";
          goto LABEL_14;
        }

        if (v24 == 7)
        {
          unsigned int v25 = "Your account will expire at ";
LABEL_14:
          sub_1882D25D4( (uint64_t)a1,  *(void (**)(uint64_t, uint64_t, void, char *, void, void))(a2 + 904),  *(void *)(a2 + 912),  v25,  v23);
        }
      }

      ++v20;
      v19 += 16LL;
    }

    while (v20 < *(unsigned int *)(a2 + 784));
  }

  if (krb5_enctype_warning((uint64_t)a1, *(_DWORD *)(a2 + 1024)))
  {
    uint64_t v31 = (unsigned int *)(a2 + 1024);
  }

  else
  {
    uint64_t v31 = (unsigned int *)(a2 + 24);
  }

  if (*(void *)(a2 + 904))
  {
    uint64_t v32 = (char *)*v31;
    if ((_DWORD)v32)
    {
      if (!krb5_config_get_BOOL_default((uint64_t)a1, 0LL, 0LL, v26, v27, v28, v29, v30, (uint64_t)"libdefaults"))
      {
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        krb5_enctype_to_string((krb5_enctype)a1, v32, (size_t)&v35);
        int v33 = (const char *)v35;
        if (!v35) {
          int v33 = "unknown";
        }
        asprintf( &v34,  "Encryption type %s(%d) used for authentication is weak and will be deprecated",  v33,  (_DWORD)v32);
        if (v34)
        {
          (*(void (**)(_krb5_context *, void, void, char *, void, void))(a2 + 904))( a1,  *(void *)(a2 + 912),  0LL,  v34,  0LL,  0LL);
          free(v34);
        }

        free(v35);
      }
    }
  }

  return 0LL;
}

void sub_1882D25D4( uint64_t a1, void (*a2)(uint64_t, uint64_t, void, char *, void, void), uint64_t a3, const char *a4, time_t a5)
{
  uint64_t v10 = 0LL;
  time_t v11 = a5;
  uint64_t v9 = ctime(&v11);
  if ((asprintf(&v10, "%s%s", a4, v9) & 0x80000000) == 0)
  {
    if (v10)
    {
      a2(a1, a3, 0LL, v10, 0LL, 0LL);
      free(v10);
    }
  }

uint64_t krb5_keyblock_key_proc(_krb5_context *a1, int a2, int a3, krb5_keyblock *a4, krb5_keyblock **a5)
{
  return krb5_copy_keyblock(a1, a4, a5);
}

uint64_t _krb5_make_pa_enc_challange(_krb5_context *a1, _DWORD **a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v22 = 0LL;
  krb5_us_timeofday(a1, &v23, &v20);
  krb5_int32 v19 = v20;
  int v24 = &v19;
  size_t v8 = sub_1882FDAB8();
  uint64_t v9 = malloc(v8);
  if (!v9) {
    return 12LL;
  }
  uint64_t v10 = v9;
  uint64_t v11 = sub_1882FDA98();
  if (!(_DWORD)v11)
  {
    if (v8 == v22)
    {
      uint64_t v12 = krb5_encrypt_EncryptedData(a1, a2, a3, v10, v8, 0, (uint64_t)v21);
      free(v10);
      if ((_DWORD)v12) {
        return v12;
      }
      uint64_t v14 = sub_1882FD6B8();
      uint64_t v15 = malloc(v14);
      if (!v15)
      {
        uint64_t v12 = 12LL;
        goto LABEL_12;
      }

      uint64_t v16 = v15;
      uint64_t v17 = sub_1882FD698();
      if ((_DWORD)v17)
      {
        uint64_t v12 = v17;
        free(v16);
LABEL_12:
        sub_1882FD6C8();
        return v12;
      }

      sub_1882FD6C8();
      if (v14 == v22)
      {
        uint64_t v12 = krb5_padata_add(a1, a4, 138, (uint64_t)v16, v14);
        if (!(_DWORD)v12) {
          return v12;
        }
        uint64_t v13 = v16;
        goto LABEL_4;
      }
    }

    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }

  uint64_t v12 = v11;
  uint64_t v13 = v10;
LABEL_4:
  free(v13);
  return v12;
}

uint64_t _krb5_validate_pa_enc_challange( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v7 = krb5_decrypt_EncryptedData(a1, a2, a3, a4, &v14);
  if (!(_DWORD)v7)
  {
    int v8 = sub_1882FDA78();
    krb5_data_free(&v14);
    if (v8)
    {
      uint64_t v7 = 2529638936LL;
      sub_1882DFCE8((uint64_t)a1, 5, "Failed to decode PA-ENC-TS_ENC - %s", a5);
    }

    else
    {
      krb5_us_timeofday(a1, v12, &v11);
      if (krb5_time_abs(*(uint64_t *)v12, v13) <= *((void *)a1 + 10))
      {
        uint64_t v7 = 0LL;
      }

      else
      {
        krb5_format_time((uint64_t)a1, v13, v15, 0x64uLL, 1);
        int v9 = krb5_time_abs(*(uint64_t *)v12, v13);
        sub_1882DFCE8( (uint64_t)a1,  0,  "Too large time skew, client time %s is out by %u > %d seconds -- %s",  v15,  v9,  *((void *)a1 + 10),  a5);
        uint64_t v7 = 2529638949LL;
      }
    }

    sub_1882FDAC8();
  }

  return v7;
}

void *_krb5_srp_validate_group(int a1)
{
  if (a1 == 1) {
    return &unk_18A219B58;
  }
  else {
    return 0LL;
  }
}

uint64_t _krb5_srp_pkisize(uint64_t a1)
{
  return ccdh_ccn_size();
}

uint64_t _krb5_srp_keysize(uint64_t a1)
{
  return *(void *)(*(uint64_t (**)(void))(a1 + 16))();
}

void *_krb5_srp_create(uint64_t a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(a1 + 16))();
  (*(void (**)(void))(a1 + 8))();
  uint64_t v3 = ccdh_ccn_size();
  CFStringRef v4 = malloc(4 * (*v2 + v3) + 48);
  if (v4) {
    ccsrp_ctx_init();
  }
  return v4;
}

uint64_t _krb5_srp_create_pa( _krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, const char *a4, uint64_t a5, size_t *a6)
{
  size_t v11 = ccdh_ccn_size();
  uint64_t v12 = krb5_data_alloc(a6, v11);
  if (!(_DWORD)v12)
  {
    uint64_t v13 = krb5_unparse_name_flags(a1, a3, 2, &v21);
    if ((_DWORD)v13)
    {
      uint64_t v12 = v13;
LABEL_7:
      krb5_data_free(a6);
      return v12;
    }

    uint64_t v14 = (size_t *)(*(uint64_t (**)(void))(a2 + 16))();
    uint64_t v15 = krb5_data_alloc(&v20, *v14);
    if ((_DWORD)v15
      || ((*(void (**)(void))(a2 + 16))(),
          strlen(a4),
          (*(void (**)(void))(a2 + 16))(),
          uint64_t v15 = ccpbkdf2_hmac(),
          (_DWORD)v15))
    {
      uint64_t v12 = v15;
      free(v21);
      goto LABEL_7;
    }

    uint64_t v17 = _krb5_srp_create(a2);
    if (v17)
    {
      uint64_t v18 = v17;
      int verifier = ccsrp_generate_verifier();
      krb5_data_free(&v20);
      krb5_xfree(v18);
      krb5_xfree(v21);
      if (verifier) {
        return 22LL;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      krb5_data_free(a6);
      krb5_data_free(&v20);
      krb5_xfree(v21);
      return 12LL;
    }
  }

  return v12;
}

uint64_t _krb5_srp_reply_key( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v10 = *(_OWORD *)*(void *)(a2 + 24);
  uint64_t v11 = 0LL;
  return _krb5_pk_kdf(a1, &v10, a4, a5, a6, 0LL, a3, a7, a8, 0LL, a9);
}

uint64_t sub_1882D2BC4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 376)) {
    return 0LL;
  }
  else {
    return 2314790669LL;
  }
}

uint64_t sub_1882D2BDC( uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if (a6)
  {
    uint64_t result = sub_1882E51E8( a1,  *(char **)(a5 + 32),  *(void *)(a2 + 376),  *(_DWORD *)(a6 + 120),  a7,  *(_DWORD *)(a2 + 188),  a2 + 192,  a4,  (void **)(a2 + 944));
    if (!(_DWORD)result) {
      *(_BYTE *)(a2 + 444) |= 4u;
    }
  }

  else
  {
    uint64_t v11 = *(void *)(a2 + 376);
    if (!v11) {
      return 2314790668LL;
    }
    uint64_t result = sub_1882E463C(a1, v11, *(_DWORD *)(a2 + 384), 0LL, a5 + 16, *(unsigned int *)(a2 + 188), a9, a8);
    if (!(_DWORD)result) {
      return 2314790668LL;
    }
  }

  return result;
}

uint64_t sub_1882D2C74( uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if (a6)
  {
    uint64_t result = sub_1882E51E8( a1,  *(char **)(a5 + 32),  *(void *)(a2 + 376),  *(_DWORD *)(a6 + 120),  a7,  *(_DWORD *)(a2 + 188),  a2 + 192,  a4,  (void **)(a2 + 944));
    if (!(_DWORD)result) {
      *(_BYTE *)(a2 + 444) |= 4u;
    }
  }

  else
  {
    uint64_t v11 = *(void *)(a2 + 376);
    if (!v11) {
      return 2314790668LL;
    }
    uint64_t result = sub_1882E463C(a1, v11, *(_DWORD *)(a2 + 384), 1LL, a5 + 16, *(unsigned int *)(a2 + 188), a9, a8);
    if (!(_DWORD)result) {
      return 2314790668LL;
    }
  }

  return result;
}

uint64_t sub_1882D2D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a2 + 336)) {
    return 2314790669LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)a3 = 1;
  *(void *)(a3 + 8) = 0LL;
  return result;
}

uint64_t sub_1882D2D30( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned int *a9)
{
  if (!a4)
  {
    uint64_t v13 = 2314790669LL;
    sub_1882DFCE8((uint64_t)a1, 0, "KDC didn't return any SRP pa data");
LABEL_12:
    *(_DWORD *)a3 = 4;
    return v13;
  }

  uint64_t v13 = 2314790669LL;
  switch(*(_DWORD *)a3)
  {
    case 1:
      v71[0] = 0LL;
      v71[1] = 0LL;
      uint64_t v70 = 0LL;
      int v14 = v72;
      if (!(_DWORD)v72) {
        goto LABEL_10;
      }
      uint64_t v15 = (_DWORD *)*((void *)&v72 + 1);
      uint64_t v16 = v72;
      while (*v15 != 1)
      {
        v15 += 8;
        if (!--v16)
        {
          *(void *)(a3 + 8) = 0LL;
LABEL_10:
          sub_1882DFCE8((uint64_t)a1, 0, "KDC didn't send a good SRP group for us, sent %u group(s)", v14);
          goto LABEL_36;
        }
      }

      *(void *)(a3 + 8) = &unk_18A219B58;
      if (copy_KRB5_SRP_PA()
        || (unsigned int v41 = _krb5_srp_create(*(void *)(a3 + 8)), (*(void *)(a3 + 16) = v41) == 0LL)
        || (*(void *)(a3 + 24) = *(void *)(*(uint64_t (**)(void))(*(void *)(a3 + 8) + 16LL))(),
            (*(void (**)(void))(*(void *)(a3 + 8) + 8LL))(),
            *(void *)(a3 + 32) = ccdh_ccn_size(),
            krb5_data_alloc((size_t *)(a3 + 40), *(void *)(a3 + 24))))
      {
LABEL_36:
        *(_DWORD *)a3 = 4;
        sub_1882FE468();
        return v13;
      }

      (*(void (**)(void))(*(void *)(a3 + 8) + 16LL))();
      strlen(*(const char **)(a2 + 336));
      int v42 = ccpbkdf2_hmac();
      sub_1882FE468();
      LODWORD(v70) = **(_DWORD **)(a3 + 8);
      ccDRBGGetRngState();
      ccsrp_client_start_authentication();
      krb5_error_code v43 = (krb5_principal_data *)sub_1882FE498();
      __int128 v44 = malloc((size_t)v43);
      if (!v44) {
        goto LABEL_44;
      }
      __int128 v45 = v44;
      if (sub_1882FE478())
      {
        free(v45);
LABEL_44:
        sub_1882FE4A8();
        goto LABEL_12;
      }

      sub_1882FE4A8();
      if (v43 != v69[0]) {
        heim_abort("ASN1.1 Internal error:data.length == size", v57, v58, v59, v60, v61, v62, v63, v64);
      }
      if (!krb5_padata_add(a1, a9, 250, (uint64_t)v45, (uint64_t)v43))
      {
        int v56 = 2;
        goto LABEL_55;
      }

      goto LABEL_53;
    case 2:
      krb5_const_principal v68 = 0LL;
      v69[0] = 0LL;
      v69[1] = 0LL;
      if (v70 != *(void *)(a3 + 32)) {
        goto LABEL_21;
      }
      uint64_t v26 = *(void *)(a5 + 24);
      if (!v26) {
        heim_abort( "should not get here since we could not have found the hdb entry otherwise:a->req_body.cname != NULL",  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v64);
      }
      uint64_t v27 = *(const char **)(a5 + 32);
      __int128 v28 = *(_OWORD *)v26;
      uint64_t v73 = *(void *)(v26 + 16);
      __int128 v72 = v28;
      krb5_error_code v29 = krb5_unparse_name_flags(a1, v68, 2, &v67);
      krb5_free_principal(a1, (krb5_principal)v68);
      if (v29) {
        goto LABEL_21;
      }
      if (krb5_data_alloc((size_t *)v69, *(void *)(a3 + 24)))
      {
        free(v67);
LABEL_21:
        *(_DWORD *)a3 = 4;
        sub_1882FE4D8();
        return v13;
      }

      sub_1882DFCE8((uint64_t)a1, 5, "ccsrp client start for user: %s", v67);
      int v46 = ccsrp_client_process_challenge();
      sub_1882FE4D8();
      if (v46)
      {
        *(_DWORD *)a3 = 4;
        sub_1882FE518();
        return v13;
      }

      uint64_t v47 = sub_1882FE508();
      __int128 v48 = malloc(v47);
      if (!v48) {
        goto LABEL_50;
      }
      __int128 v45 = v48;
      if (sub_1882FE4E8())
      {
        free(v45);
LABEL_50:
        sub_1882FE518();
        goto LABEL_12;
      }

      sub_1882FE518();
      if (v47 != v66) {
        heim_abort("ASN.1 internal error:data.length == size", v49, v50, v51, v52, v53, v54, v55, v65);
      }
      if (krb5_padata_add(a1, a9, 250, (uint64_t)v45, v47))
      {
LABEL_53:
        free(v45);
        goto LABEL_12;
      }

      int v56 = 3;
LABEL_55:
      *(_DWORD *)a3 = v56;
      return 2314790668LL;
    case 3:
      v69[0] = 0LL;
      if (!a6)
      {
        sub_1882DFCE8((uint64_t)a1, 0, "KDC didn't return an AS-REP in last step of verifier");
        goto LABEL_12;
      }

      if (v70 != *(void *)(a3 + 24))
      {
        *(_DWORD *)a3 = 4;
        sub_1882FE548();
        return v13;
      }

      char v31 = ccsrp_client_verify_session();
      sub_1882FE548();
      if ((v31 & 1) != 0)
      {
        uint64_t v32 = *(krb5_keyblock **)(a2 + 944);
        if (v32) {
          krb5_free_keyblock(a1, v32);
        }
        int v33 = calloc(1uLL, 0x18uLL);
        *(void *)(a2 + 944) = v33;
        if (v33)
        {
          uint64_t v34 = *(const char **)(a6 + 16);
          __int128 v72 = *(_OWORD *)(a6 + 24);
          uint64_t v73 = *(void *)(a6 + 40);
          if (!_krb5_principalname2krb5_principal((uint64_t)a1, v69, (uint64_t)&v72, v34))
          {
            uint64_t v35 = *(unsigned int *)(a6 + 120);
            uint64_t v36 = *(void *)(a3 + 8);
            uint64_t v37 = *(void *)(a3 + 16);
            uint64_t v38 = MEMORY[0x1895C1620](*(void *)(v37 + 8));
            uint64_t v39 = *(void *)(a3 + 24);
            uint64_t v40 = *(void *)(a2 + 944);
            __int128 v72 = *(_OWORD *)*(void *)(v36 + 24);
            uint64_t v73 = 0LL;
            LODWORD(v35) = _krb5_pk_kdf( a1,  &v72,  v37 + 32 * v38 + 32,  v39,  (uint64_t)v69[0],  0LL,  v35,  a2 + 192,  a3 + 56,  0LL,  v40);
            krb5_free_principal(a1, v69[0]);
            if (!(_DWORD)v35)
            {
              uint64_t v13 = 0LL;
              *(_BYTE *)(a2 + 444) |= 4u;
            }
          }
        }
      }

      else
      {
        sub_1882DFCE8((uint64_t)a1, 0, "Failed to validate the KDC");
      }

      goto LABEL_12;
    case 4:
      return v13;
    default:
      krb5_abortx(a1, "internal state machine error");
  }

uint64_t sub_1882D32E0(uint64_t a1)
{
  return free_KRB5_SRP_PA();
}

uint64_t sub_1882D3318( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v30 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v35 = 0LL;
  if (a6) {
    int v13 = *(_DWORD *)(a6 + 120);
  }
  else {
    int v13 = 0;
  }
  LODWORD(v34[0]) = v13;
  int v14 = sub_1882D6C94((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v34, a8);
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v17 = *v14;
    if ((_DWORD)v17)
    {
      if (*(void *)(a2 + 944))
      {
        krb5_free_keyblock(a1, *(krb5_keyblock **)(a2 + 944));
        uint64_t v17 = *v16;
      }

      *(_OWORD *)&v33.krb5_magic magic = *(_OWORD *)(v16 + 2);
      uint64_t v18 = *((void *)v16 + 4);
      v33.contents = (krb5_octet *)*((void *)v16 + 3);
      uint64_t v19 = *(void *)(a2 + 352);
      uint64_t v20 = *(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, krb5_keyblock *, uint64_t, uint64_t))(a2 + 360);
      krb5_keyblock v28 = v33;
      uint64_t pa_enc_challange = v20(a1, v17, v19, &v28, v18, a2 + 944);
      double v22 = sub_1882D6D64(a1, (uint64_t)v34);
      if ((_DWORD)pa_enc_challange)
      {
        sub_1882DFCE8((uint64_t)a1, 5, "enc-chal: failed to build key", v22);
      }

      else
      {
        uint64_t pa_enc_challange = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 944), 0LL, &v30);
        if (!(_DWORD)pa_enc_challange)
        {
          krb5_crypto_getenctype((uint64_t)a1, *(_DWORD ***)(a2 + 984), &v29);
          uint64_t v23 = "kdcchallengearmor";
          if (!a6) {
            uint64_t v23 = "clientchallengearmor";
          }
          uint64_t v24 = 20LL;
          if (a6) {
            uint64_t v24 = 17LL;
          }
          v32[0] = v24;
          v32[1] = v23;
          v31[0] = 17LL;
          v31[1] = "challengelongterm";
          uint64_t pa_enc_challange = krb5_crypto_fx_cf2( a1,  *(uint64_t **)(a2 + 984),  (uint64_t *)v30,  (uint64_t)v32,  (uint64_t)v31,  (char *)v29,  &v33);
          krb5_crypto_destroy(a1, (uint64_t)v30);
          if (!(_DWORD)pa_enc_challange)
          {
            uint64_t pa_enc_challange = krb5_crypto_init(a1, &v33, 0LL, &v30);
            krb5_free_keyblock_contents(a1, &v33);
            if (!(_DWORD)pa_enc_challange)
            {
              if (a6)
              {
                sub_1882DFCE8((uint64_t)a1, 5, "ENC_CHAL rep key");
                if (*(void *)(a2 + 1016))
                {
                  if (a4)
                  {
                    if (sub_1882FD678())
                    {
                      uint64_t pa_enc_challange = 2529638943LL;
                      sub_1882DFCE8((uint64_t)a1, 5, "Failed to decode ENC_CHAL KDC reply", v26);
                    }

                    else
                    {
                      uint64_t pa_enc_challange = _krb5_validate_pa_enc_challange(a1, (uint64_t)v30, 55LL, (uint64_t)&v28, "KDC");
                      sub_1882FD6C8();
                      krb5_crypto_destroy(a1, (uint64_t)v30);
                    }
                  }

                  else
                  {
                    krb5_crypto_destroy(a1, (uint64_t)v30);
                    sub_1882DFCE8((uint64_t)a1, 0, "KDC response missing");
                    return 2314790669LL;
                  }
                }

                else
                {
                  krb5_crypto_destroy(a1, (uint64_t)v30);
                  sub_1882DFCE8((uint64_t)a1, 5, "ENC_CHAL w/o strengthen_key");
                  return 2529639059LL;
                }
              }

              else
              {
                uint64_t pa_enc_challange = _krb5_make_pa_enc_challange(a1, (_DWORD **)v30, 54LL, a9);
                krb5_crypto_destroy(a1, (uint64_t)v30);
                if ((_DWORD)pa_enc_challange) {
                  sub_1882DFCE8((uint64_t)a1, 5, "enc-chal: failed build enc challange", v27);
                }
                else {
                  return 2314790668LL;
                }
              }
            }
          }
        }
      }
    }

    else
    {
      return 2314790669LL;
    }
  }

  else
  {
    uint64_t pa_enc_challange = 2314790668LL;
    sub_1882DFCE8((uint64_t)a1, 5, "no ppaid found", v15);
  }

  return pa_enc_challange;
}

uint64_t sub_1882D3620(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  krb5_free_principal(a1, *(krb5_principal *)(a3 + 8));
  *(void *)(a3 + 8) = 0LL;
  return 0LL;
}

uint64_t sub_1882D3650( krb5_context a1, uint64_t a2, krb5_principal *a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v16 = a3 + 1;
  double v15 = a3[1];
  if (v15)
  {
    if (krb5_principal_compare(a1, v15, *(krb5_const_principal *)(a2 + 8)))
    {
      if (*v16) {
        goto LABEL_7;
      }
    }

    else
    {
      *(_DWORD *)a3 = 0;
      krb5_free_principal(a1, a3[1]);
      a3[1] = 0LL;
    }
  }

  uint64_t v17 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 8), v16);
  if ((_DWORD)v17) {
    return v17;
  }
LABEL_7:
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  if (a6)
  {
    LODWORD(v46[0]) = *(_DWORD *)(a6 + 120);
    uint64_t v18 = sub_1882D6C94((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v46, a8);
    if (v18)
    {
LABEL_11:
      uint64_t v19 = *(unsigned int *)(a6 + 120);
      *(_OWORD *)__int128 v44 = *(_OWORD *)(v18 + 2);
      uint64_t v20 = *((void *)v18 + 4);
      uint64_t v45 = *((void *)v18 + 3);
      uint64_t v21 = *(void *)(a2 + 352);
      double v22 = *(uint64_t (**)(krb5_context, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(a2 + 360);
      __int128 v52 = *(_OWORD *)v44;
      uint64_t v53 = v45;
      uint64_t v17 = v22(a1, v19, v21, &v52, v20, a2 + 944);
      sub_1882D6D64(a1, (uint64_t)v46);
      return v17;
    }

    if (*(_DWORD *)(a2 + 448))
    {
      uint64_t v18 = (_DWORD *)(a2 + 448);
      goto LABEL_11;
    }

    sub_1882DFCE8((uint64_t)a1, 0, "no paid when building key, build a default salt structure ?");
    return 2314790669LL;
  }

  uint64_t v23 = sub_1882D6C94((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v46, a8);
  if (!v23)
  {
    uint64_t v17 = 2314790668LL;
    sub_1882DFCE8((uint64_t)a1, 5, "TS-ENC: waiting for KDC to set pw-salt/etype_info{,2}");
    return v17;
  }

  uint64_t v24 = v23;
  if (!*v23)
  {
    sub_1882D6D64(a1, (uint64_t)v46);
    sub_1882DFCE8((uint64_t)a1, 5, "TS-ENC: kdc proposes enctype NULL ?");
    return 2314790669LL;
  }

  int v25 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 8) != 0) {
    int v26 = 16;
  }
  else {
    int v26 = 8;
  }
  if ((v26 & v25) == 0)
  {
    *(_DWORD *)a3 = v26 | v25;
    sub_1882D6D64(a1, a2 + 448);
    __int128 v29 = *(_OWORD *)v24;
    __int128 v30 = *((_OWORD *)v24 + 1);
    *(void *)(a2 + 480) = *((void *)v24 + 4);
    *(_OWORD *)(a2 + 448) = v29;
    *(_OWORD *)(a2 + 464) = v30;
    if (!*(void *)(a2 + 360) || !*(void *)(a2 + 352))
    {
      uint64_t v17 = 2314790668LL;
      sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: no keyproc or keyseed");
      return v17;
    }

    sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: pa-info found, using %d", *v24);
    uint64_t v33 = a2 + 352;
    uint64_t v31 = *(void *)(a2 + 352);
    uint64_t v32 = *(unsigned int (**)(krb5_context, uint64_t, uint64_t, __int128 *, uint64_t, krb5_keyblock **))(v33 + 8);
    uint64_t v34 = *((void *)v24 + 4);
    sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: using ENC-TS with enctype %d", *v24);
    uint64_t v35 = *v24;
    __int128 v36 = *(_OWORD *)(v24 + 2);
    uint64_t v53 = *((void *)v24 + 3);
    __int128 v52 = v36;
    if (v32(a1, v35, v31, &v52, v34, &v48)) {
      return 2314790668LL;
    }
    uint64_t v37 = v48;
    size_t v54 = 0LL;
    krb5_us_timeofday(a1, v44, &v51);
    krb5_int32 v50 = v51;
    *(void *)&v44[2] = &v50;
    size_t v38 = sub_1882FDAB8();
    uint64_t v39 = malloc(v38);
    if (!v39)
    {
LABEL_37:
      uint64_t v17 = 2314790668LL;
      krb5_free_keyblock(a1, v48);
      return v17;
    }

    uint64_t v40 = v39;
    if (sub_1882FDA98())
    {
LABEL_36:
      free(v40);
      goto LABEL_37;
    }

    if (v38 == v54)
    {
      int v41 = krb5_encrypt_EncryptedData(a1, (_DWORD **)v49, 1LL, v40, v54, 0, (uint64_t)&v52);
      free(v40);
      krb5_crypto_destroy(a1, (uint64_t)v49);
      if (v41) {
        goto LABEL_37;
      }
      uint64_t v42 = sub_1882FD6B8();
      krb5_error_code v43 = malloc(v42);
      if (!v43)
      {
LABEL_42:
        sub_1882FD6C8();
        goto LABEL_37;
      }

      uint64_t v40 = v43;
      if (sub_1882FD698())
      {
        free(v40);
        goto LABEL_42;
      }

      sub_1882FD6C8();
      if (v42 == v54)
      {
        if (!krb5_padata_add(a1, a9, 2, (uint64_t)v40, v42))
        {
          krb5_free_keyblock(a1, v48);
          return 2314790668LL;
        }

        goto LABEL_36;
      }
    }

    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }

  uint64_t v17 = 2529639135LL;
  if ((v25 & 8) != 0) {
    double v27 = "reneg";
  }
  else {
    double v27 = "info";
  }
  sub_1882D6D64(a1, (uint64_t)v46);
  krb5_set_error_message(a1, -1765328161, "Already tried ENC-TS-%s, looping", v27);
  return v17;
}

void sub_1882D3AA4(uint64_t a1)
{
  uint64_t v1 = *(krb5_principal_data **)(a1 + 8);
  if (v1) {
    krb5_free_principal(0LL, v1);
  }
}

uint64_t sub_1882D3AB8( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t result = *(unsigned int *)(a2 + 368);
  if ((_DWORD)result)
  {
    size_t v11 = sub_1882FDAF8();
    uint64_t v12 = malloc(v11);
    if (v12)
    {
      int v13 = v12;
      uint64_t v21 = sub_1882FDAD8();
      if ((_DWORD)v21) {
        goto LABEL_6;
      }
      if (v11) {
        heim_abort("internal error in ASN.1 encoder:len == length", v14, v15, v16, v17, v18, v19, v20, v23);
      }
      int v22 = krb5_padata_add(a1, a9, 128, (uint64_t)v13, 0LL);
      uint64_t v21 = 0LL;
      uint64_t result = 0LL;
      if (v22)
      {
LABEL_6:
        free(v13);
        return v21;
      }
    }

    else
    {
      return 12LL;
    }
  }

  return result;
}

uint64_t sub_1882D3B9C( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v9 = *(void *)(a2 + 1072);
  if (!v9) {
    return 0LL;
  }
  uint64_t v11 = krb5_data_copy(v13, *(const void **)(v9 + 8), *(void *)v9);
  if (!(_DWORD)v11)
  {
    uint64_t v11 = krb5_padata_add(a1, a9, 148, v13[1], v13[0]);
    if ((_DWORD)v11) {
      krb5_data_free(v13);
    }
  }

  return v11;
}

uint64_t sub_1882D3C0C( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if ((*(_BYTE *)(a2 + 444) & 2) != 0) {
    return krb5_padata_add(a1, a9, 149, 0LL, 0LL);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1882D3C30( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  int v17 = 0;
  padata = krb5_find_padata(*(void *)(a8 + 8), *(_DWORD *)a8, 133, &v17);
  if (!padata) {
    return 0LL;
  }
  uint64_t v11 = (const void **)padata;
  size_t v12 = *((void *)padata + 1);
  int v13 = malloc(v12);
  if (!v13) {
    return 12LL;
  }
  uint64_t v14 = v13;
  memcpy(v13, v11[2], v12);
  uint64_t v15 = krb5_padata_add(a1, a9, 133, (uint64_t)v14, v12);
  if ((_DWORD)v15) {
    free(v14);
  }
  else {
    sub_1882DFCE8((uint64_t)a1, 5, "Mirrored FX-COOKIE to KDC");
  }
  return v15;
}

uint64_t sub_1882D3CFC()
{
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  sub_1882FD91C();
  sub_1882FD93C();
  return 0LL;
}

uint64_t sub_1882D3E9C()
{
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  sub_1882FD8EC();
  sub_1882FD90C();
  return 0LL;
}

int *sub_1882D403C(_krb5_context *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v5 = (char *)*a4;
  return a4;
}

uint64_t krb5_init_creds_init( _krb5_context *a1, krb5_principal_data *a2, uint64_t a3, uint64_t a4, uint64_t a5, krb5_get_init_creds_opt *a6, void *a7)
{
  *a7 = 0LL;
  uint64_t v14 = (char *)calloc(1uLL, 0x448uLL);
  if (!v14)
  {
    uint64_t inited = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return inited;
  }

  uint64_t v15 = v14;
  opt = 0LL;
  bzero(v14, 0x448uLL);
  if (!a6)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
    krb5_get_init_creds_opt_alloc(a1, &opt);
    a6 = opt;
    krb5_get_init_creds_opt_set_default_flags(a1, 0LL, realm, (uint64_t)opt, v17, v18, v19, v20);
  }

  uint64_t v21 = *(void *)&a6[1].proxiable;
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 8);
    if (v22)
    {
      uint64_t inited = krb5_init_creds_set_password(a1, (uint64_t)v15, v22);
      if ((_DWORD)inited) {
        goto LABEL_62;
      }
      uint64_t v21 = *(void *)&a6[1].proxiable;
    }

    uint64_t v24 = *(void *)(v21 + 16);
    *((void *)v15 + 45) = v24;
    *((_DWORD *)v15 + 92) = *(_DWORD *)(v21 + 24);
    *((void *)v15 + 47) = *(void *)(v21 + 32);
    *((_DWORD *)v15 + 96) = *(_DWORD *)(v21 + 44);
    if (!v24) {
      goto LABEL_9;
    }
  }

  else
  {
    *((_DWORD *)v15 + 92) = 0;
    if (!*((void *)v15 + 45)) {
LABEL_9:
    }
      *((void *)v15 + 45) = sub_1882D6E9C;
  }

  uint64_t v47 = a4;
  *((void *)v15 + 19) = 0LL;
  *((void *)v15 + 20) = 0LL;
  *((void *)v15 + 21) = 0LL;
  krb5_timeofday(a1, v49);
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  if (a2)
  {
    krb5_copy_principal(a1, a2, (krb5_principal *)v15 + 1);
    goto LABEL_15;
  }

  default_krb5_error_code principal = krb5_get_default_principal(a1, (krb5_principal *)v15 + 1);
  if (!(_DWORD)default_principal)
  {
LABEL_15:
    if (a5) {
      *((void *)v15 + 7) = *(void *)v49 + a5;
    }
    krb5_flags flags = a6->flags;
    if ((a6->flags & 1) != 0) {
      uint64_t v26 = *(void *)&a6->renew_life;
    }
    else {
      uint64_t v26 = 36000LL;
    }
    uint64_t v27 = *(void *)v49;
    *((void *)v15 + 8) = *(void *)v49 + v26;
    if ((flags & 2) != 0)
    {
      uint64_t v28 = *(void *)&a6->proxiable;
      if (v28 >= 1) {
        *((void *)v15 + 9) = v28 + v27;
      }
    }

    uint64_t inited = krb5_init_creds_set_service(a1, (uint64_t)v15, 0LL);
    if ((_DWORD)inited) {
      goto LABEL_62;
    }
    if ((a6->flags & 4) != 0)
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v15 & 0xFFFFFFFD | (2 * ((uint64_t)a6->etype_list & 1));
      if ((a6->flags & 8) == 0)
      {
LABEL_29:
        if (!a5) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }

    else if ((a6->flags & 8) == 0)
    {
      goto LABEL_29;
    }

    *(_DWORD *)uint64_t v15 = *(_DWORD *)v15 & 0xFFFFFFF7 | (8 * (HIDWORD(a6->etype_list) & 1));
    if (!a5)
    {
LABEL_31:
      if (*((void *)v15 + 9)) {
        *(_DWORD *)v15 |= 0x100u;
      }
      krb5_flags v29 = a6->flags;
      if ((a6->flags & 0x20) != 0)
      {
        p_preauth_list_CFIndex length = &a6->preauth_list_length;
      }

      else
      {
        uint64_t v30 = *(void *)&a6[1].proxiable;
        if (!v30 || (uint64_t v31 = *(int *)(v30 + 40), v31 > 2))
        {
LABEL_44:
          if ((v29 & 0x10) != 0)
          {
            uint64_t v34 = (void *)*((void *)v15 + 20);
            if (v34) {
              free(v34);
            }
            uint64_t preauth_list_low = SLODWORD(a6->preauth_list);
            __int128 v36 = malloc(4 * preauth_list_low + 4);
            if (!v36)
            {
LABEL_61:
              uint64_t inited = 12LL;
              krb5_set_error_message(a1, 12, "malloc: out of memory");
              goto LABEL_62;
            }

            uint64_t v37 = v36;
            memcpy(v36, a6->address_list, 4 * preauth_list_low);
            v37[preauth_list_low] = 0;
            *((void *)v15 + 20) = v37;
            krb5_flags v29 = a6->flags;
          }

          if ((v29 & 0x40) == 0)
          {
LABEL_52:
            if ((v29 & 0x100) != 0) {
              *(_DWORD *)uint64_t v15 = *(_DWORD *)v15 & 0xFFFEFFFF | ((a6->etype_list_length & 1) << 16);
            }
            if (opt) {
              krb5_get_init_creds_opt_free(a1, opt);
            }
            krb5_generate_random_block((uint64_t)(v15 + 184), 4LL);
            int v41 = *((_DWORD *)v15 + 46) & 0x7FFFFFFF;
            *((_DWORD *)v15 + 46) = v41;
            *((_DWORD *)v15 + 47) = v41;
            *((void *)v15 + 113) = a3;
            *((void *)v15 + 114) = v47;
            size_t v42 = strlen("WELLKNOWN:COM.APPLE.LKDC");
            if (!*((void *)v15 + 49))
            {
              size_t v43 = v42;
              __int128 v44 = *(const char **)(*((void *)v15 + 1) + 24LL);
              if (!strncmp(v44, "WELLKNOWN:COM.APPLE.LKDC", v42) && v44[v43] == 58)
              {
                uint64_t v45 = strdup(&v44[v43 + 1]);
                *((void *)v15 + 49) = v45;
                sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: setting LKDC hostname to: %s", v45);
              }
            }

            uint64_t inited = 0LL;
            v15[444] |= 2u;
            *((_DWORD *)v15 + 235) |= 0x1000u;
            *a7 = v15;
            return inited;
          }

          uint64_t v38 = a6[1].flags;
          uint64_t v39 = malloc(4 * v38 + 4);
          if (v39)
          {
            uint64_t v40 = v39;
            memcpy(v39, a6->salt, 4 * v38);
            v40[v38] = 0;
            *((void *)v15 + 21) = v40;
            goto LABEL_52;
          }

          goto LABEL_61;
        }

        p_preauth_list_CFIndex length = (int *)(&off_18A219B88 + v31);
      }

      *((void *)v15 + 19) = *(void *)p_preauth_list_length;
      goto LABEL_44;
    }

LABEL_30:
    *(_DWORD *)v15 |= 0x40u;
    goto LABEL_31;
  }

  uint64_t inited = default_principal;
  krb5_free_cred_contents(a1, (krb5_creds *)(v15 + 8));
LABEL_62:
  if (opt) {
    krb5_get_init_creds_opt_free(a1, opt);
  }
  free(v15);
  return inited;
}

  sub_1882F56EC((uint64_t)v11);
LABEL_31:
  uint64_t v30 = krb5_enomem(a1);
  if ((_DWORD)v30) {
    return v30;
  }
LABEL_32:
  if (!v11)
  {
    *a5 = 0;
LABEL_83:
    uint64_t v58 = 1;
    goto LABEL_84;
  }

  uint64_t v31 = 0LL;
  uint64_t v32 = (const char **)v11;
  while (2)
  {
    if (((_BYTE)v32[1] & 4) == 0)
    {
      if (((_BYTE)v32[1] & 2) != 0 && ((_BYTE)v32[1] & 1) == 0 && v31)
      {
        uint64_t v33 = strlen(*v32);
        uint64_t v34 = v33 + strlen(v31) + 1;
        uint64_t v35 = (char *)malloc(v34);
        if (!v35) {
          break;
        }
        __int128 v36 = v35;
        strlcpy(v35, v31, v34);
        strlcat(v36, *v32, v34);
        free((void *)*v32);
        *uint64_t v32 = v36;
      }

      goto LABEL_44;
    }

    if (!v31) {
      uint64_t v31 = a6;
    }
    uint64_t v37 = strlen(*v32);
    uint64_t v38 = v37 + strlen(v31) + 1;
    uint64_t v39 = (char *)realloc((void *)*v32, v38);
    if (v39)
    {
      *uint64_t v32 = v39;
      strlcat(v39, v31, v38);
LABEL_44:
      uint64_t v31 = *v32;
      uint64_t v32 = (const char **)v32[2];
      if (!v32) {
        goto LABEL_45;
      }
      continue;
    }

    break;
  }

  sub_1882F56EC((uint64_t)v11);
  uint64_t v30 = krb5_enomem(a1);
  if ((_DWORD)v30) {
    return v30;
  }
LABEL_45:
  uint64_t v40 = (const char **)v11;
  do
  {
    if (!**v40)
    {
      while (1)
      {
        int v41 = v40;
        uint64_t v40 = (const char **)v40[2];
        if (!v40) {
          break;
        }
        size_t v42 = *v40;
        if (**v40) {
          goto LABEL_52;
        }
      }

      size_t v42 = a7;
LABEL_52:
      size_t v43 = strlen(a6);
      __int128 v44 = strlen(v42);
      if (v43 >= v44) {
        uint64_t v45 = a6;
      }
      else {
        uint64_t v45 = v42;
      }
      if (v43 >= v44) {
        a6 = v42;
      }
      int v46 = &v45[strlen(v45)];
      uint64_t v47 = strlen(a6);
      if (!strcmp(&v46[-v47], a6))
      {
        while (1)
        {
          __int128 v52 = strchr(v45, 46);
          if (!v52) {
            break;
          }
          uint64_t v45 = v52 + 1;
          if (!strcmp(v52 + 1, a6)) {
            goto LABEL_73;
          }
          uint64_t v53 = (char **)calloc(1uLL, 0x18uLL);
          if (!v53) {
            goto LABEL_72;
          }
          krb5_int32 v50 = v53;
          v53[2] = (char *)v41[2];
          v41[2] = (const char *)v53;
          size_t v54 = strdup(v45);
          *krb5_int32 v50 = v54;
          if (!v54)
          {
LABEL_71:
            v41[2] = v50[2];
            free(v50);
LABEL_72:
            uint64_t v55 = krb5_enomem(a1);
            if (!(_DWORD)v55) {
              goto LABEL_73;
            }
            uint64_t v30 = v55;
            goto LABEL_93;
          }
        }
      }

      else if (!strncmp(v45, a6, v47))
      {
        while (1)
        {
          if (v46 < v45 || *v46 == 47)
          {
            __int128 v48 = v46 - v45;
            if (v46 == v45)
            {
              uint64_t v30 = 2529638924LL;
              goto LABEL_93;
            }

            if (!strncmp(a6, v45, v46 - v45)) {
              goto LABEL_73;
            }
            uint64_t v49 = (char **)calloc(1uLL, 0x18uLL);
            if (!v49) {
              goto LABEL_72;
            }
            krb5_int32 v50 = v49;
            krb5_timestamp v49[2] = (char *)v41[2];
            v41[2] = (const char *)v49;
            krb5_int32 v51 = (char *)malloc(v48 + 1);
            *krb5_int32 v50 = v51;
            if (!v51) {
              goto LABEL_71;
            }
            memcpy(v51, v45, v46 - v45);
            (*v50)[v48] = 0;
          }

          --v46;
        }
      }

      uint64_t v30 = 2529638924LL;
      krb5_clear_error_message(a1);
LABEL_93:
      sub_1882F56EC((uint64_t)v11);
      return v30;
    }

    int v41 = v40;
LABEL_73:
    a6 = *v41;
    uint64_t v40 = (const char **)v41[2];
  }

  while (v40);
  int v56 = (char *)v67;
  *a5 = 0;
  if (!v56) {
    goto LABEL_83;
  }
  uint64_t v57 = &v67;
  do
  {
    if (**(_BYTE **)v56)
    {
      ++*a5;
      uint64_t v57 = (void **)(v56 + 16);
    }

    else
    {
      *uint64_t v57 = (void *)*((void *)v56 + 2);
      free(*(void **)v56);
      free(v56);
    }

    int v56 = (char *)*v57;
  }

  while (*v57);
  uint64_t v58 = *a5 + 1;
  if (v58 >> 29) {
    return 34LL;
  }
LABEL_84:
  uint64_t v59 = malloc(8 * v58);
  if (!v59) {
    return krb5_enomem(a1);
  }
  uint64_t v60 = v59;
  *a4 = v59;
  uint64_t v61 = v67;
  if (v67)
  {
    do
    {
      *v60++ = *v61;
      uint64_t v62 = (void *)v61[2];
      free(v61);
      uint64_t v61 = v62;
    }

    while (v62);
  }

  return 0LL;
}

void sub_1882D44E4(krb5_context a1, uint64_t a2)
{
  CFStringRef v4 = *(void **)(a2 + 160);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a2 + 168);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a2 + 176);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a2 + 344);
  if (v7) {
    free(v7);
  }
  int v8 = *(void **)(a2 + 336);
  if (v8)
  {
    size_t v9 = strlen(*(const char **)(a2 + 336));
    bzero(v8, v9);
    free(*(void **)(a2 + 336));
  }

  sub_1882F9E64(a1, a2 + 936);
  __int128 v10 = *(krb5_keyblock **)(a2 + 1032);
  if (v10) {
    krb5_free_keyblock(a1, v10);
  }
  krb5_data_free((void *)(a2 + 192));
  krb5_free_cred_contents(a1, (krb5_creds *)(a2 + 8));
  sub_1882FD96C();
  sub_1882FDC5C();
  sub_1882FDC8C();
  sub_1882FE060();
  sub_1882FDA14();
  heim_release(*(CFTypeRef *)(a2 + 1048));
  heim_release(*(CFTypeRef *)(a2 + 1040));
  *(void *)(a2 + 1040) = 0LL;
  uint64_t v11 = *(void *)(a2 + 1064);
  if (v11) {
    hx509_cert_free(v11);
  }
  size_t v12 = *(krb5_data **)(a2 + 1072);
  if (v12) {
    krb5_free_data(a1, v12);
  }
  int v13 = *(void **)(a2 + 392);
  if (v13) {
    free(v13);
  }
  uint64_t v14 = *(void **)(a2 + 400);
  if (v14) {
    free(v14);
  }
  sub_1882D6D64(a1, a2 + 448);
  bzero((void *)a2, 0x448uLL);
}

uint64_t krb5_init_creds_set_kdc_hostname(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 392);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 392) = v7;
  if (v7) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_init_creds_set_sitename(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 400);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 400) = v7;
  if (v7) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_init_creds_set_source_app(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *__s1)
{
  return 0LL;
}

uint64_t krb5_init_creds_set_source_process(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, char *__s1)
{
  *(_BYTE *)(a2 + 444) |= 8u;
  *(_OWORD *)(a2 + 408) = *(_OWORD *)a3;
  __int128 v10 = *(void **)(a2 + 432);
  if (v10)
  {
    free(v10);
    *(void *)(a2 + 432) = 0LL;
  }

  if (__s1) {
    *(void *)(a2 + 432) = strdup(__s1);
  }
  sub_1882DFCE8( a1,  5,  "krb5_init_creds_set_source_app: %s %d%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  __s1,  a4,  *a3,  a3[1],  a3[2],  a3[3],  a3[4],  a3[5],  a3[6],  a3[7],  a3[8],  a3[9],  a3[10],  a3[11],  a3[12],  a3[13],  a3[14],  a3[15]);
  return 0LL;
}

uint64_t krb5_init_creds_set_service(_krb5_context *a1, uint64_t a2, const char *a3)
{
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, *(void *)(a2 + 8));
  uint64_t v7 = realm;
  if (a3)
  {
    uint64_t result = krb5_parse_name(a1, a3, &v9);
    if ((_DWORD)result) {
      return result;
    }
    krb5_principal_set_realm(a1, (uint64_t)v9, v7);
  }

  else
  {
    uint64_t result = krb5_make_principal(a1, &v9, realm, "krbtgt", realm, 0LL);
    if ((_DWORD)result) {
      return result;
    }
  }

  krb5_free_principal(a1, *(krb5_principal *)(a2 + 16));
  uint64_t result = 0LL;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t krb5_init_creds_set_pkinit_client_cert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 1064)) {
    hx509_cert_free();
  }
  *(void *)(a2 + 1064) = hx509_cert_ref(a3);
  return 0LL;
}

uint64_t krb5_init_creds_set_password(_krb5_context *a1, uint64_t a2, uint64_t __s1)
{
  uint64_t v6 = *(void **)(a2 + 336);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)(a2 + 336));
    bzero(v6, v7);
    free(*(void **)(a2 + 336));
  }

  if (__s1)
  {
    int v8 = strdup((const char *)__s1);
    *(void *)(a2 + 336) = v8;
    if (v8)
    {
      __s1 = 0LL;
      *(void *)(a2 + 352) = v8;
    }

    else
    {
      __s1 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  else
  {
    *(void *)(a2 + 352) = 0LL;
    *(void *)(a2 + 336) = 0LL;
  }

  return __s1;
}

uint64_t krb5_init_creds_set_keytab(_krb5_context *a1, uint64_t a2, _krb5_kt *a3)
{
  uint64_t v6 = malloc(0x10uLL);
  if (!v6)
  {
    uint64_t v8 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v8;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  *uint64_t v6 = a3;
  v6[1] = v7;
  *(void *)(a2 + 344) = v6;
  *(void *)(a2 + 352) = v6;
  *(void *)(a2 + 360) = sub_1882D4BC4;
  uint64_t v8 = krb5_kt_start_seq_get(a1, a3, v20);
  if ((_DWORD)v8) {
    goto LABEL_5;
  }
  if (krb5_kt_next_entry(a1, a3, &entry, v20))
  {
    uint64_t v8 = 2529639093LL;
    krb5_kt_end_seq_get(a1, a3, v20);
    goto LABEL_5;
  }

  int v10 = 0;
  int principal = 0;
  uint64_t v12 = 0LL;
  int v13 = 0LL;
  do
  {
    if (!krb5_principal_compare(a1, *(krb5_const_principal *)&entry.magic, *(krb5_const_principal *)(a2 + 8))) {
      goto LABEL_27;
    }
    if (SLODWORD(entry.principal) <= principal)
    {
      if (LODWORD(entry.principal) != principal) {
        goto LABEL_16;
      }
    }

    else
    {
      if (v13)
      {
        free(v13);
        int v13 = 0LL;
      }

      uint64_t v12 = 0LL;
      int principal = (int)entry.principal;
    }

    uint64_t v14 = *(void *)(a2 + 160);
    if (v14)
    {
      unsigned int v15 = 0;
      do
      {
        int v16 = *(_DWORD *)(v14 + 4LL * v15++);
        if (v16) {
          BOOL v17 = v16 == entry.timestamp;
        }
        else {
          BOOL v17 = 1;
        }
      }

      while (!v17);
      if (!v16)
      {
LABEL_16:
        int v10 = 1;
        goto LABEL_27;
      }
    }

    uint64_t v18 = realloc(v13, 4 * v12 + 8);
    if (!v18)
    {
      free(v13);
      return krb5_enomem(a1);
    }

    v18[v12++] = entry.timestamp;
    v18[v12] = 0;
    int v10 = 1;
    int v13 = v18;
LABEL_27:
    krb5_kt_free_entry(a1, (uint64_t)&entry);
  }

  while (!krb5_kt_next_entry(a1, a3, &entry, v20));
  krb5_kt_end_seq_get(a1, a3, v20);
  uint64_t v19 = *(void **)(a2 + 160);
  if (v13)
  {
    if (v19) {
      free(v19);
    }
    *(void *)(a2 + 160) = v13;
    if (!v10)
    {
      uint64_t v8 = 2529639093LL;
      goto LABEL_5;
    }

    return 0LL;
  }

  uint64_t v8 = 2529639093LL;
  if (!v19 && v10) {
    return 0LL;
  }
LABEL_5:
  sub_1882D98D4(a1, v8, (uint64_t)a3, *(void *)(a2 + 8), 0LL, 0);
  return v8;
}

uint64_t sub_1882D4BC4( krb5_context context, krb5_enctype enctype, uint64_t a3, uint64_t a4, uint64_t a5, krb5_keyblock **a6)
{
  krb5_principal v9 = *(_krb5_kt **)a3;
  int v10 = *(const krb5_principal_data **)(a3 + 8);
  if (*(void *)a3)
  {
    krb5_keytab keytab = *(krb5_keytab *)a3;
    uint64_t entry = krb5_kt_get_entry(context, v9, v10, 0, enctype, &v13);
    if (!(_DWORD)entry)
    {
LABEL_6:
      uint64_t entry = krb5_copy_keyblock(context, (const krb5_keyblock *)&v13.timestamp, a6);
      krb5_kt_free_entry(context, (uint64_t)&v13);
    }
  }

  else
  {
    uint64_t entry = krb5_kt_default(context, &keytab);
    if (!(_DWORD)entry)
    {
      uint64_t entry = krb5_kt_get_entry(context, keytab, v10, 0, enctype, &v13);
      krb5_kt_close(context, keytab);
      if (!(_DWORD)entry) {
        goto LABEL_6;
      }
    }
  }

  return entry;
}

uint64_t _krb5_init_creds_set_pku2u(_krb5_context *a1, uint64_t a2, const krb5_data *a3)
{
  *(_DWORD *)(a2 + 384) |= 0x10u;
  *(_DWORD *)a2 = sub_1882FD668(0);
  uint64_t v6 = *(krb5_data **)(a2 + 1072);
  if (v6) {
    krb5_free_data(a1, v6);
  }
  uint64_t v7 = (krb5_data **)(a2 + 1072);
  if (a3)
  {
    uint64_t result = krb5_copy_data(a1, a3, v7);
    if ((_DWORD)result) {
      return result;
    }
  }

  else
  {
    char *v7 = 0LL;
  }

  return 0LL;
}

uint64_t krb5_init_creds_set_keyblock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 352) = a3;
  *(void *)(a2 + 360) = sub_1882D4D28;
  return 0LL;
}

uint64_t sub_1882D4D28(_krb5_context *a1, int a2, krb5_keyblock *a3, int a4, int a5, krb5_keyblock **a6)
{
  return krb5_copy_keyblock(a1, a3, a6);
}

uint64_t krb5_init_creds_set_fast_ccache(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3)
{
  krb5_principal v9 = 0LL;
  uint64_t krbtgt = _krb5_get_krbtgt(a1, a3, 0LL, &v9);
  if (!(_DWORD)krbtgt)
  {
    uint64_t krbtgt = krb5_cc_get_config(a1, a3, v9->client, "fast_avail", &v8);
    krb5_free_creds(a1, v9);
    if ((_DWORD)krbtgt)
    {
      uint64_t krbtgt = 22LL;
      krb5_set_error_message(a1, 22, "FAST not available for the KDC in the armor ccache");
    }

    else
    {
      *(void *)(a2 + 952) = a3;
      *(_DWORD *)(a2 + 940) |= 0x40u;
    }
  }

  return krbtgt;
}

uint64_t krb5_init_creds_step( _krb5_context *a1, uint64_t a2, const krb5_data *a3, void *a4, uint64_t a5, void *a6, _DWORD *a7)
{
  uint64_t v123 = *MEMORY[0x1895F89C0];
  uint64_t v118 = 0LL;
  gettimeofday(&v121, 0LL);
  krb5_data_zero(a4);
  krb5_data_zero(v119);
  if (a6) {
    *a6 = 0LL;
  }
  uint64_t v14 = (_OWORD *)(a2 + 208);
  if (*(void *)(a2 + 232))
  {
    int v15 = 0;
    goto LABEL_5;
  }

  v112 = a4;
  uint64_t v19 = a7;
  uint64_t v20 = *(uint64_t **)(a2 + 376);
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 1064);
    if (v21) {
      sub_1882E5C04((uint64_t)a1, v20, v21);
    }
  }

  char v23 = *(krb5_address *const **)(a2 + 152);
  uint64_t v22 = *(unsigned int **)(a2 + 160);
  int v24 = *(_DWORD *)a2;
  *(void *)(a2 + 320) = 0LL;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  _OWORD *v14 = 0u;
  *(void *)(a2 + 208) = 0xA00000005LL;
  *(_DWORD *)(a2 + 224) = v24;
  int v25 = malloc(0x18uLL);
  *(void *)(a2 + 232) = v25;
  if (!v25) {
    goto LABEL_112;
  }
  uint64_t v26 = calloc(1uLL, 0x18uLL);
  *(void *)(a2 + 248) = v26;
  if (!v26) {
    goto LABEL_112;
  }
  uint64_t inited = _krb5_principal2principalname();
  if ((_DWORD)inited) {
    goto LABEL_113;
  }
  uint64_t inited = sub_1882FD3C0();
  if ((_DWORD)inited) {
    goto LABEL_113;
  }
  uint64_t inited = _krb5_principal2principalname();
  if ((_DWORD)inited) {
    goto LABEL_113;
  }
  uint64_t v30 = *(void *)(a2 + 56);
  if (v30)
  {
    uint64_t v31 = malloc(8uLL);
    *(void *)(a2 + 256) = v31;
    if (!v31) {
      goto LABEL_112;
    }
    *uint64_t v31 = v30;
  }

  if (*(void *)(a2 + 64))
  {
    uint64_t v32 = calloc(1uLL, 8uLL);
    *(void *)(a2 + 264) = v32;
    *uint64_t v32 = *(void *)(a2 + 64);
  }

  uint64_t v33 = *(void *)(a2 + 72);
  if (v33)
  {
    uint64_t v34 = malloc(8uLL);
    *(void *)(a2 + 272) = v34;
    if (v34)
    {
      *uint64_t v34 = v33;
      goto LABEL_24;
    }

LABEL_112:
    uint64_t inited = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_113;
  }

LABEL_72:
        if (!*v57)
        {
          uint64_t v18 = "Preauth required but no preauth options send by KDC";
          goto LABEL_7;
        }

        goto LABEL_137;
      }

      if ((_DWORD)inited != -1765328316)
      {
        if ((_DWORD)inited == -1765328293) {
          goto LABEL_72;
        }
LABEL_89:
        if ((*(_BYTE *)(a2 + 941) & 2) == 0) {
          return inited;
        }
        sub_1882DFCE8((uint64_t)a1, 10, "Some other error %d failed with Optimistic FAST, trying w/o FAST", inited);
        *(_DWORD *)(a2 + 940) = *(_DWORD *)(a2 + 940) & 0xFFFFFD7F | 0x80;
        uint64_t v70 = *(void *)(a2 + 1040);
        if (v70)
        {
          size_t v71 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v70 + 32) + 48LL);
          if (!v71) {
            goto LABEL_136;
          }
          goto LABEL_135;
        }

LABEL_106:
        int v15 = 1;
LABEL_137:
        a4 = v113;
        goto LABEL_138;
      }

      if ((*(_BYTE *)(a2 + 1) & 0x80) == 0) {
        goto LABEL_89;
      }
      __int128 v72 = *(void **)(a2 + 544);
      if (!v72)
      {
        uint64_t inited = 2529638980LL;
        uint64_t v18 = "Got a client referral, not but no realm";
        goto LABEL_7;
      }

      *(void *)&__s1[0].krb5_magic magic = *v72;
      sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: referral to realm %s", *(const char **)&__s1[0].magic);
      if (!krb5_principal_is_krbtgt((uint64_t)a1, *(void *)(a2 + 16)))
      {
LABEL_99:
        free(*(void **)(a2 + 240));
        uint64_t inited = sub_1882FD3C0();
        if ((_DWORD)inited) {
          return inited;
        }
        uint64_t inited = krb5_principal_set_realm(a1, *(void *)(a2 + 8), **(char ***)(a2 + 544));
        if ((_DWORD)inited) {
          return inited;
        }
        if (!krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 8), (char **)__s1))
        {
          sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: got referal to %s", *(const char **)&__s1[0].magic);
          krb5_xfree(*(void **)&__s1[0].magic);
        }

        uint64_t v73 = *(void *)(a2 + 1040);
        if (v73)
        {
          __int128 v74 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v73 + 32) + 48LL);
          if (v74) {
            v74(a1, a2, v73 + 48);
          }
        }

        goto LABEL_106;
      }

      free(*(void **)(*(void *)(*(void *)(a2 + 16) + 16LL) + 8LL));
      *(void *)(*(void *)(*(void *)(a2 + 16) + 16LL) + 8LL) = strdup(*(const char **)&__s1[0].magic);
      if (*(void *)(*(void *)(*(void *)(a2 + 16) + 16LL) + 8LL))
      {
        sub_1882FD424();
        uint64_t inited = _krb5_principal2principalname();
        if ((_DWORD)inited) {
          return inited;
        }
        goto LABEL_99;
      }

      return 12LL;
    }

    size_t v46 = sub_1882FD78C();
    v115[0] = v46;
    uint64_t v47 = malloc(v46);
    v115[1] = v47;
    if (!v47) {
      return 12LL;
    }
    __int128 v48 = v47;
    uint64_t v49 = sub_1882FD76C();
    if ((_DWORD)v49)
    {
      uint64_t inited = v49;
      free(v48);
      return inited;
    }

    if (v46 != v117) {
      heim_abort("ASN.1 internal error:data.length == size", v50, v51, v52, v53, v54, v55, v56, v110);
    }
    uint64_t inited = sub_1882F9CB0(a1, *(_DWORD *)(a2 + 184), (uint64_t)v115, a2 + 936, (uint64_t)v116);
    krb5_data_free(v115);
    if ((_DWORD)inited) {
      return inited;
    }
    if ((*(_DWORD *)a2 & 0x8000) != 0) {
      char v61 = 30;
    }
    else {
      char v61 = 24;
    }
    int v62 = *(_DWORD *)(a2 + 384);
    uint64_t v63 = sub_1882D5CB0((uint64_t *)a1, a2, (uint64_t *)(a2 + 8), a2 + 208, (uint64_t)v116, a5);
    if ((_DWORD)v63)
    {
LABEL_62:
      uint64_t inited = v63;
      sub_1882FDC5C();
      return inited;
    }

    if (*(void *)(a2 + 1016))
    {
      sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: FAST strengthen_key");
      uint64_t v63 = _krb5_fast_cf2( a1,  *(const krb5_keyblock **)(a2 + 1016),  "strengthenkey",  *(const krb5_keyblock **)(a2 + 944),  "replykey",  __s1,  0LL);
      if ((_DWORD)v63) {
        goto LABEL_62;
      }
      *(_BYTE *)(a2 + 444) |= 4u;
      krb5_free_keyblock_contents(a1, *(krb5_keyblock **)(a2 + 944));
      uint64_t v65 = *(void *)(a2 + 944);
      __int128 v66 = *(_OWORD *)&__s1[0].magic;
      *(void *)(v65 + 16) = __s1[0].contents;
      *(_OWORD *)uint64_t v65 = v66;
    }

    sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: extracting ticket");
    uint64_t inited = sub_1882F3FCC( (uint64_t)a1,  (uint64_t)v116,  a2 + 8,  *(const krb5_keyblock **)(a2 + 944),  3LL,  0LL,  *(_DWORD *)(a2 + 184),  v61 & 0xFEu | ((v62 & 4) != 0),  a2 + 192,  0LL,  0LL);
    if (!(_DWORD)inited)
    {
      uint64_t inited = sub_1882FDC9C();
      if (!(_DWORD)inited) {
        uint64_t inited = sub_1882D5DE8(a1, a2, (uint64_t)v116, (_DWORD *)(a2 + 24));
      }
    }

    sub_1882D20CC();
    uint64_t v67 = *(krb5_keyblock **)(a2 + 944);
    *(_DWORD *)(a2 + 1024) = v67->magic;
    if ((*(_BYTE *)(a2 + 444) & 4) != 0) {
      *(void *)(a2 + 1032) = v67;
    }
    else {
      krb5_free_keyblock(a1, v67);
    }
    *(void *)(a2 + 944) = 0LL;
    *(_DWORD *)(a2 + 384) |= 1u;
    *a7 = 0;
    sub_1882FDC5C();
    sub_1882FDCD0();
    gettimeofday(&v120, 0LL);
    sub_1883151E4((uint64_t)&v120, (uint64_t)&v121);
    sub_188315184(a2 + 1080, (uint64_t)&v120);
    sub_1882DFCE8((uint64_t)a1, 1, "krb5_get_init_creds: wc: %lld.%06d");
    return inited;
  }

LABEL_138:
  v114 = a4;
  if (*(void *)(a2 + 216))
  {
    sub_1882FD96C();
    free(*(void **)(a2 + 216));
    *(void *)(a2 + 216) = 0LL;
  }

  uint64_t inited = sub_1882F9310(a1, a2 + 936, *(const char **)(*(void *)(a2 + 8) + 24LL), v37, v38, v39, v40, v41);
  if (!(_DWORD)inited)
  {
    *(_DWORD *)(a2 + 280) = *(_DWORD *)(a2 + 184);
    v100 = calloc(1uLL, 0x10uLL);
    *(void *)(a2 + 216) = v100;
    if (!v100)
    {
      uint64_t inited = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory", v110);
      return inited;
    }

    *(_DWORD *)v100 = 0;
    v100[1] = 0LL;
    sub_1882D70C8((uint64_t)a1, (unsigned int *)(a2 + 488));
    if (!v15)
    {
      uint64_t v101 = sub_1882D71B4((uint64_t *)a1, a2, a2 + 208, 0LL, 0LL, a2 + 488, *(void *)(a2 + 216));
      if ((_DWORD)v101 == -1980176628)
      {
        sub_1882DFCE8((uint64_t)a1, 0, "pamech need more stepping");
      }

      else
      {
        uint64_t inited = v101;
        if ((_DWORD)v101) {
          return inited;
        }
        sub_1882DFCE8((uint64_t)a1, 0, "pamech done step");
      }
    }

    uint64_t v102 = 0LL;
    v103 = *(unsigned int **)(a2 + 216);
    do
    {
      if ((dword_18C4D88C8[v102 + 4] & 3) != 0)
      {
        uint64_t v104 = *(void (**)(_krb5_context *, uint64_t, void, void, void, void, void, uint64_t, unsigned int *))&dword_18C4D88C8[v102 + 14];
        if (v104) {
          v104(a1, a2, 0LL, 0LL, 0LL, 0LL, 0LL, a2 + 488, v103);
        }
        else {
          krb5_padata_add(a1, v103, dword_18C4D88C8[v102], 0LL, 0LL);
        }
      }

      v102 += 18LL;
    }

    while (v102 != 342);
    uint64_t v105 = *(_DWORD **)(a2 + 216);
    if (!*v105)
    {
      free(v105);
      *(void *)(a2 + 216) = 0LL;
    }

    uint64_t inited = sub_1882FDA24();
    if (!(_DWORD)inited)
    {
      uint64_t inited = sub_1882F95E4(a1, a2 + 936, 0LL, (uint64_t)__s1);
      krb5_data_free(v119);
      if ((_DWORD)inited)
      {
LABEL_159:
        sub_1882FDA14();
        return inited;
      }

      krb5_data_free((void *)(a2 + 192));
      size_t v106 = sub_1882FDA04();
      *(void *)(a2 + 192) = v106;
      uint64_t v107 = malloc(v106);
      *(void *)(a2 + 200) = v107;
      if (!v107)
      {
        uint64_t inited = 12LL;
        goto LABEL_159;
      }

      uint64_t v108 = sub_1882FD9E4();
      if ((_DWORD)v108)
      {
        uint64_t inited = v108;
        free(*(void **)(a2 + 200));
        *(void *)(a2 + 200) = 0LL;
        goto LABEL_159;
      }

      sub_1882FDA14();
      if (v118 != *(void *)(a2 + 192)) {
        krb5_abortx(a1, "internal error in ASN.1 encoder");
      }
      uint64_t v109 = *(void *)(a2 + 200);
      void *v114 = v118;
      v114[1] = v109;
      *a7 = 1;
      if (a6) {
        *a6 = *(void *)(*(void *)(a2 + 8) + 24LL);
      }
      gettimeofday(&v120, 0LL);
      sub_1883151E4((uint64_t)&v120, (uint64_t)&v121);
      sub_188315184(a2 + 1080, (uint64_t)&v120);
      return 0LL;
    }
  }

  return inited;
}

uint64_t sub_1882D5CB0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  uint64_t v12 = *(unsigned int **)(a5 + 8);
  if (v12)
  {
    sub_1882D70C8((uint64_t)a1, v12);
    uint64_t v13 = *(void *)(a5 + 8);
    int v14 = *(_DWORD *)(a5 + 120);
    if (v13)
    {
      LODWORD(v16[0]) = *(_DWORD *)(a5 + 120);
    }
  }

  else
  {
    int v14 = *(_DWORD *)(a5 + 120);
  }

  if (*(_DWORD *)(a2 + 448)
    || (*(_DWORD *)(a2 + 448) = v14,
        *(void *)(a2 + 480) = 0LL,
        uint64_t result = krb5_get_pw_salt((uint64_t)a1, *a3, a2 + 456),
        !(_DWORD)result))
  {
LABEL_8:
    uint64_t result = sub_1882D71B4(a1, a2, a4, a5, a6, *(void *)(a5 + 8), 0LL);
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -1980176628)
      {
        sub_1882DFCE8((uint64_t)a1, 0, "In final stretch and pa require more stepping ?");
        return 2314790668LL;
      }
    }

    else
    {
      sub_1882DFCE8((uint64_t)a1, 0, "final pamech done step");
      sub_1882D6D64((_krb5_context *)a1, (uint64_t)v16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1882D5DE8(_krb5_context *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  int v19 = 0;
  krb5_keyblock_zero((uint64_t)&v24);
  krb5_keyblock_zero((uint64_t)&v25);
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8 && krb5_find_padata(*(void *)(v8 + 8), *(_DWORD *)v8, 147, &v19))
  {
    int v15 = *(const krb5_keyblock **)(a2 + 944);
    if (!v15) {
      heim_abort( "must have a reply key at this stage:ctx->fast_state.reply_key != NULL",  0LL,  v9,  v10,  v11,  v12,  v13,  v14,  v18);
    }
    uint64_t v16 = krb5_crypto_init(a1, v15, 0LL, &v27);
    if (!(_DWORD)v16)
    {
      uint64_t v16 = sub_1882FD678();
      if (!(_DWORD)v16)
      {
        uint64_t v16 = krb5_decrypt_EncryptedData(a1, (uint64_t)v27, 44LL, (uint64_t)v23, &v22);
        sub_1882FD6C8();
        if (!(_DWORD)v16)
        {
          uint64_t v16 = decode_EncryptionKey();
          if (!(_DWORD)v16)
          {
            uint64_t v16 = krb5_crypto_init(a1, &v25, 0LL, &v26);
            if (!(_DWORD)v16)
            {
              v21[0] = 6LL;
              v21[1] = "PKINIT";
              v20[0] = 11LL;
              v20[1] = "KEYEXCHANGE";
              uint64_t v16 = krb5_crypto_fx_cf2( a1,  (uint64_t *)v26,  (uint64_t *)v27,  (uint64_t)v21,  (uint64_t)v20,  (char *)v25.magic,  &v24);
              if (!(_DWORD)v16)
              {
                if (v24.magic == *a4 && !krb5_data_ct_cmp((uint64_t)&v24.length, (uint64_t)(a4 + 2)))
                {
                  uint64_t v16 = 0LL;
                  *(_DWORD *)(a2 + 384) |= 0x20u;
                }

                else
                {
                  uint64_t v16 = 2529639059LL;
                  krb5_set_error_message(a1, -1765328237, "PKINIT-KX session key doesn't match");
                }
              }
            }
          }
        }
      }
    }

    krb5_free_keyblock_contents(a1, &v25);
    krb5_free_keyblock_contents(a1, &v24);
    if (v27) {
      krb5_crypto_destroy(a1, (uint64_t)v27);
    }
    if (v26) {
      krb5_crypto_destroy(a1, (uint64_t)v26);
    }
  }

  else if ((*(_BYTE *)(a2 + 2) & 1) != 0 && *(void *)(a2 + 376))
  {
    uint64_t v16 = 2529639059LL;
    krb5_set_error_message(a1, -1765328237, "Requested anonymous with PKINIT and KDC didn't set PKINIT_KX");
  }

  else
  {
    return 0LL;
  }

  return v16;
}

uint64_t sub_1882D601C( _krb5_context *a1, krb5_principal_data *a2, char *a3, char *a4, krb5_error_code (__cdecl *a5)(krb5_context, void *, const char *, const char *, int, krb5_prompt[]), void *a6, uint64_t a7)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  memset(&creds, 0, 144);
  uint64_t init_creds_opt_alloc = krb5_get_init_creds_opt_alloc(a1, &opt);
  if (!(_DWORD)init_creds_opt_alloc)
  {
    krb5_get_init_creds_opt_set_tkt_life(opt, 60);
    krb5_get_init_creds_opt_set_forwardable(opt, 0);
    krb5_get_init_creds_opt_set_proxiable(opt, 0);
    if (a7 && (*(_BYTE *)a7 & 0x40) != 0) {
      krb5_get_init_creds_opt_set_preauth_list(opt, *(krb5_preauthtype **)(a7 + 64), *(_DWORD *)(a7 + 72));
    }
    krb5_data_zero(&result_code_string);
    krb5_data_zero(&result_string);
    uint64_t init_creds_opt_alloc = krb5_get_init_creds_password(a1, &creds, a2, a3, a5, a6, 0, "kadmin/changepw", opt);
    krb5_get_init_creds_opt_free(a1, opt);
    if ((_DWORD)init_creds_opt_alloc) {
      goto LABEL_24;
    }
    while (1)
    {
      v25[0] = 1024LL;
      v25[1] = __s1;
      int v30 = 1;
      uint64_t v29 = "New password: ";
      uint64_t v31 = v25;
      int v32 = 2;
      v26[0] = 1024LL;
      v26[1] = __s2;
      int v34 = 1;
      uint64_t v33 = "Repeat new password: ";
      uint64_t v35 = v26;
      int v36 = 3;
      if (((unsigned int (*)(_krb5_context *, void *, void, const char *, uint64_t, const char **))a5)( a1,  a6,  0LL,  "Changing password",  2LL,  &v29))
      {
        uint64_t init_creds_opt_alloc = 2529639044LL;
        goto LABEL_24;
      }

      if (!strcmp(__s1, __s2)) {
        break;
      }
      bzero(__s1, 0x400uLL);
      bzero(__s2, 0x400uLL);
    }

    uint64_t init_creds_opt_alloc = krb5_set_password(a1, &creds, __s1, 0LL, &result_code, &result_code_string, &result_string);
    if ((_DWORD)init_creds_opt_alloc) {
      goto LABEL_24;
    }
    if (result_code)
    {
      data = result_code_string.data;
      uint64_t v16 = "";
      if (!*(void *)&result_code_string.magic) {
        data = "";
      }
      if (*(void *)&result_string.magic) {
        uint64_t v16 = result_string.data;
      }
      if (asprintf( &v20,  "Failed: %.*s %.*s: %d\n",  result_code_string.magic,  data,  result_string.magic,  v16,  result_code) < 0)
      {
        uint64_t init_creds_opt_alloc = 12LL;
LABEL_24:
        bzero(__s1, 0x400uLL);
        bzero(__s2, 0x400uLL);
        krb5_data_free(&result_string);
        krb5_data_free(&result_code_string);
        krb5_free_cred_contents(a1, &creds);
        return init_creds_opt_alloc;
      }

      uint64_t v17 = v20;
    }

    else
    {
      uint64_t v17 = strdup("Success");
      uint64_t v20 = v17;
    }

    ((void (*)(_krb5_context *, void *, void, char *, void, void))a5)(a1, a6, 0LL, v17, 0LL, 0LL);
    if (result_code)
    {
      uint64_t init_creds_opt_alloc = 25LL;
      krb5_set_error_message(a1, 25, "failed changing password: %s", v20);
    }

    else
    {
      strlcpy(a4, __s1, 0x400uLL);
      uint64_t init_creds_opt_alloc = 0LL;
    }

    free(v20);
    goto LABEL_24;
  }

  return init_creds_opt_alloc;
}

uint64_t krb5_init_creds_get_creds(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return krb5_copy_creds_contents(a1, a2 + 8, a3);
}

uint64_t krb5_init_creds_get_as_reply_key(_krb5_context *a1, uint64_t a2, krb5_keyblock *a3)
{
  uint64_t v3 = *(const krb5_keyblock **)(a2 + 1032);
  if (v3) {
    return krb5_copy_keyblock_contents(a1, v3, a3);
  }
  else {
    return 2529638937LL;
  }
}

uint64_t _krb5_init_creds_get_cred_endtime(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 64);
}

uint64_t _krb5_init_creds_get_cred_client(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t krb5_init_creds_set_nonce(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 184) = a3;
  *(_DWORD *)(a2 + 188) = a3;
  return 0LL;
}

uint64_t krb5_init_creds_store_config(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3)
{
  uint64_t v6 = *(char **)(a2 + 392);
  if (!v6
    || (*(void *)&v9.krb5_magic magic = strlen(*(const char **)(a2 + 392)),
        v9.data = v6,
        uint64_t result = krb5_cc_set_config(a1, a3, 0LL, "lkdc-hostname", &v9),
        !(_DWORD)result))
  {
    uint64_t v8 = *(char **)(a2 + 400);
    if (!v8) {
      return 0LL;
    }
    *(void *)&v9.krb5_magic magic = strlen(v8);
    v9.data = v8;
    uint64_t result = krb5_cc_set_config(a1, a3, 0LL, "sitename", &v9);
    if (!(_DWORD)result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t krb5_init_creds_store(krb5_context a1, uint64_t a2, krb5_ccache cache)
{
  uint64_t v6 = (krb5_creds *)(a2 + 8);
  uint64_t v5 = *(krb5_principal_data **)(a2 + 8);
  if (v5)
  {
    uint64_t v8 = krb5_cc_initialize(a1, cache, v5);
    if (!(_DWORD)v8)
    {
      uint64_t v8 = krb5_cc_store_cred(a1, cache, v6);
      if (!(_DWORD)v8)
      {
        if ((*(_BYTE *)(a2 + 145) & 0x80) == 0) {
          return 0LL;
        }
        __int128 v10 = xmmword_18A219B78;
        uint64_t v8 = krb5_cc_set_config(a1, cache, *(krb5_const_principal *)(a2 + 16), "fast_avail", (krb5_data *)&v10);
        if (!(_DWORD)v8) {
          return 0LL;
        }
      }
    }
  }

  else
  {
    uint64_t v8 = 2529638937LL;
    krb5_set_error_message(a1, -1765328359, "init creds not completed yet");
  }

  return v8;
}

void krb5_init_creds_free(_krb5_context *a1, void *a2)
{
}

uint64_t krb5_init_creds_get(_krb5_context *a1, uint64_t a2)
{
  uint64_t v21 = 0LL;
  krb5_data_zero(&v20);
  krb5_data_zero(v19);
  uint64_t inited = krb5_sendto_ctx_alloc((uint64_t)a1, (uint64_t)&v21, v4, v5, v6, v7, v8, v9);
  if (!(_DWORD)inited)
  {
    krb5_sendto_ctx_set_func((uint64_t)v21, (uint64_t)sub_1882EDEB4, 0LL);
    uint64_t v11 = *(char **)(a2 + 392);
    if (v11) {
      sub_1882EDC98(a1, (uint64_t)v21, v11);
    }
    uint64_t v12 = *(char **)(a2 + 400);
    if (v12) {
      sub_1882EDCDC(a1, (uint64_t)v21, v12);
    }
    if ((*(_BYTE *)(a2 + 444) & 8) != 0) {
      krb5_sendto_set_delegated_app( (uint64_t)a1,  (uint64_t)v21,  (_OWORD *)(a2 + 408),  *(_DWORD *)(a2 + 424),  *(char **)(a2 + 432));
    }
    uint64_t v17 = 0LL;
    int v18 = 0;
    uint64_t inited = krb5_init_creds_step(a1, a2, &v20, v19, 0LL, &v17, &v18);
    krb5_data_free(&v20);
    if (!(_DWORD)inited)
    {
      while (1)
      {
        if ((v18 & 1) == 0)
        {
          uint64_t inited = 0LL;
          goto LABEL_9;
        }

        gettimeofday(&v16, 0LL);
        uint64_t v14 = krb5_sendto_context((uint64_t)a1, (uint64_t)v21, v19, v17, &v20);
        if ((_DWORD)v14) {
          break;
        }
        gettimeofday(&v15, 0LL);
        sub_1883151E4((uint64_t)&v15, (uint64_t)&v16);
        sub_188315184(a2 + 1080, (uint64_t)&v15);
        uint64_t v17 = 0LL;
        int v18 = 0;
        uint64_t inited = krb5_init_creds_step(a1, a2, &v20, v19, 0LL, &v17, &v18);
        krb5_data_free(&v20);
        if ((_DWORD)inited) {
          goto LABEL_9;
        }
      }

      uint64_t inited = v14;
    }
  }

krb5_error_code krb5_get_init_creds_password( krb5_context context, krb5_creds *creds, krb5_principal client, char *password, krb5_prompter_fct prompter, void *data, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options)
{
  uint64_t v10 = *(void *)&start_time;
  uint64_t v11 = (uint64_t)data;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  krb5_error_code inited = krb5_init_creds_init( context,  client,  (uint64_t)prompter,  (uint64_t)data,  *(uint64_t *)&start_time,  k5_gic_options,  &v43);
  if (!inited)
  {
    uint64_t v38 = client;
    int v36 = creds;
    uint64_t v37 = v11;
    krb5_error_code inited = -1765328361;
    char v18 = 1;
    while (1)
    {
      int v19 = v43;
      krb5_error_code v20 = krb5_init_creds_set_service(context, (uint64_t)v43, in_tkt_service);
      if (v20)
      {
LABEL_34:
        krb5_error_code inited = v20;
        break;
      }

      if (prompter && !((unint64_t)password | v19[42]))
      {
        krb5_unparse_name(context, v38, &v40);
        asprintf(&v39, "%s's Password: ", v40);
        free(v40);
        *(void *)&__int128 v44 = v39;
        uint64_t v42 = v47;
        uint64_t v41 = 1024LL;
        DWORD2(v44) = 1;
        int v45 = &v41;
        int v46 = 1;
        int v21 = ((uint64_t (*)(krb5_context, uint64_t, void, void, uint64_t, __int128 *))prompter)( context,  v11,  0LL,  0LL,  1LL,  &v44);
        free(v39);
        if (v21)
        {
          bzero(v47, 0x400uLL);
          krb5_clear_error_message(context);
          krb5_error_code inited = -1765328252;
          break;
        }

        password = v42;
      }

      if (password)
      {
        krb5_error_code v20 = krb5_init_creds_set_password(context, (uint64_t)v19, (uint64_t)password);
        if (v20) {
          goto LABEL_34;
        }
      }

      uint64_t v22 = v10;
      char v23 = in_tkt_service;
      uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
      if (ImpersonateBundle)
      {
        krb5_keyblock v25 = (char *)ImpersonateBundle;
        MainBundle = CFBundleGetMainBundle();
        if (MainBundle)
        {
          CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
          CFStringRef v28 = CFStringCreateWithCString(0LL, v25, 0x8000100u);
          CFStringRef v29 = v28;
          if (v28 && Identifier)
          {
            if (CFEqual(Identifier, v28))
            {
              sub_1882DFCE8((uint64_t)context, 5, "Bundle identifiers match, not setting delegate");
              krb5_error_code inited = -1765328361;
            }

            else
            {
              uint64_t v30 = NEHelperCacheCopyAppUUIDMapping();
              krb5_error_code inited = -1765328361;
              if (v30)
              {
                xpc_object_t xarray = (xpc_object_t)v30;
                if (MEMORY[0x1895C219C]() == MEMORY[0x1895F9220] && xpc_array_get_count(xarray)) {
                  __int128 v44 = *(_OWORD *)xpc_array_get_uuid(xarray, 0LL);
                }
                xpc_release(xarray);
              }

              krb5_init_creds_set_source_process((uint64_t)context, (uint64_t)v19, (unsigned __int8 *)&v44, 0, v25);
            }

LABEL_25:
      krb5_error_code v20 = krb5_init_creds_get(context, v19);
      if (!v20)
      {
        krb5_process_last_request(context, (uint64_t)k5_gic_options, (uint64_t)v19);
        krb5_copy_creds_contents(context, (uint64_t)(v19 + 1), (uint64_t)v36);
        krb5_error_code inited = 0;
        if (v19) {
          goto LABEL_36;
        }
        return inited;
      }

      if (v20 == -1765328361 && (v18 & 1) != 0)
      {
        in_tkt_service = v23;
        if (v23)
        {
          int v31 = strcmp(v23, "kadmin/changepw");
          int v32 = k5_gic_options;
          uint64_t v33 = (krb5_principal_data *)v38;
          if (!prompter) {
            break;
          }
          uint64_t v10 = v22;
          if (!v31) {
            break;
          }
        }

        else
        {
          uint64_t v10 = v22;
          int v32 = k5_gic_options;
          uint64_t v33 = (krb5_principal_data *)v38;
          if (!prompter) {
            break;
          }
        }

        uint64_t v11 = v37;
        krb5_error_code v20 = sub_1882D601C(context, v33, v19[42], &v44, prompter, v37, v32);
        if (!v20)
        {
          sub_1882D44E4(context, (uint64_t)v19);
          free(v19);
          krb5_error_code v20 = krb5_init_creds_init(context, v33, (uint64_t)prompter, v37, v10, v32, &v43);
          char v18 = 0;
          if (!v20) {
            continue;
          }
        }
      }

      goto LABEL_34;
    }
  }

  int v19 = v43;
  if (v43)
  {
LABEL_36:
    sub_1882D44E4(context, (uint64_t)v19);
    free(v19);
  }

  return inited;
}

uint64_t krb5_get_init_creds_keyblock( _krb5_context *a1, _OWORD *a2, krb5_principal_data *a3, uint64_t a4, uint64_t a5, const char *a6, krb5_get_init_creds_opt *a7)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  uint64_t inited = krb5_init_creds_init(a1, a3, 0LL, 0LL, a5, a7, &v15);
  uint64_t v13 = v15;
  if (!(_DWORD)inited)
  {
    uint64_t inited = krb5_init_creds_set_service(a1, (uint64_t)v15, a6);
    if (!(_DWORD)inited)
    {
      v13[44] = a4;
      v13[45] = sub_1882D4D28;
      uint64_t inited = krb5_init_creds_get(a1, (uint64_t)v13);
      if (!(_DWORD)inited)
      {
        krb5_process_last_request(a1, (uint64_t)a7, (uint64_t)v13);
        krb5_copy_creds_contents(a1, (uint64_t)(v13 + 1), (uint64_t)a2);
      }

      goto LABEL_4;
    }
  }

  if (v13)
  {
LABEL_4:
    sub_1882D44E4(a1, (uint64_t)v13);
    free(v13);
  }

  return inited;
}

krb5_error_code krb5_get_init_creds_keytab( krb5_context context, krb5_creds *creds, krb5_principal client, krb5_keytab arg_keytab, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options)
{
  *(_OWORD *)&creds->authdata = 0u;
  *(_OWORD *)&creds[1].uint64_t client = 0u;
  creds->krb5_data ticket = 0u;
  creds->krb5_data second_ticket = 0u;
  creds->krb5_ticket_times times = 0u;
  *(_OWORD *)&creds->is_skey = 0u;
  *(_OWORD *)&creds->server = 0u;
  *(_OWORD *)&creds->keyblock.CFIndex length = 0u;
  *(_OWORD *)&creds->krb5_magic magic = 0u;
  krb5_error_code inited = krb5_init_creds_init(context, client, 0LL, 0LL, *(uint64_t *)&start_time, k5_gic_options, &v15);
  uint64_t v13 = v15;
  if (!inited)
  {
    krb5_error_code inited = krb5_init_creds_set_service(context, (uint64_t)v15, in_tkt_service);
    if (!inited)
    {
      krb5_error_code inited = krb5_init_creds_set_keytab(context, (uint64_t)v13, arg_keytab);
      if (!inited)
      {
        krb5_error_code inited = krb5_init_creds_get(context, (uint64_t)v13);
        if (!inited)
        {
          krb5_process_last_request(context, (uint64_t)k5_gic_options, (uint64_t)v13);
          krb5_copy_creds_contents(context, (uint64_t)v13 + 8, (uint64_t)creds);
        }
      }
    }
  }

  if (v13)
  {
    sub_1882D44E4(context, (uint64_t)v13);
    free(v13);
  }

  return inited;
}

_DWORD *sub_1882D6C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    unint64_t v10 = 0LL;
    for (uint64_t i = &qword_18C4D88E8; ; i += 9)
    {
      int v14 = 0;
      if (*i)
      {
        uint64_t result = krb5_find_padata(*(void *)(a5 + 8), *(_DWORD *)a5, *((_DWORD *)i - 8), &v14);
        if (result)
        {
          *(_DWORD *)(a4 + 8) = *((_DWORD *)i - 8);
          uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))*i)( a1,  a2,  a3,  a4,  result + 2);
        }

        if (result) {
          return result;
        }
      }

      else
      {
        uint64_t result = 0LL;
      }

      if (v10++ >= 0x12) {
        return result;
      }
    }
  }

  return 0LL;
}

double sub_1882D6D64(_krb5_context *a1, uint64_t a2)
{
  __int128 v6 = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  krb5_free_salt((uint64_t)a1, (uint64_t)&v6);
  uint64_t v4 = *(krb5_data **)(a2 + 32);
  if (v4) {
    krb5_free_data(a1, v4);
  }
  *(void *)(a2 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_1882D6DC0( uint64_t a1, _krb5_context *a2, int a3, int a4, const void *a5, size_t a6, const krb5_data *a7)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = a4;
  uint64_t v12 = (__int128 *)(a1 + 8);
  uint64_t v13 = malloc(a6 + 1);
  *(void *)(a1 + 24) = v13;
  if (v13)
  {
    int v14 = v13;
    memcpy(v13, a5, a6);
    v14[a6] = 0;
    *(void *)(a1 + 16) = a6;
    timeval v15 = (krb5_data **)(a1 + 32);
    if (a7)
    {
      a7 = (const krb5_data *)krb5_copy_data(a2, a7, v15);
      if ((_DWORD)a7)
      {
        krb5_clear_error_message(a2);
        __int128 v17 = *v12;
        uint64_t v18 = *((void *)v12 + 2);
        krb5_free_salt((uint64_t)a2, (uint64_t)&v17);
      }
    }

    else
    {
      void *v15 = 0LL;
    }
  }

  else
  {
    krb5_clear_error_message(a2);
    return 12LL;
  }

  return (uint64_t)a7;
}

uint64_t sub_1882D6E9C(_krb5_context *a1, char *a2, const char *a3, uint64_t a4, __int128 *a5, void **a6)
{
  if (_krb5_have_debug((BOOL)a1))
  {
    v17[0] = 0LL;
    uint64_t v12 = krb5_enctype_to_string((krb5_enctype)a1, a2, (size_t)v17);
    if ((_DWORD)v12) {
      return v12;
    }
    sub_1882DFCE8( (uint64_t)a1,  5,  "krb5_get_init_creds: using default_s2k_func: %s (%d)",  (const char *)v17[0],  (_DWORD)a2);
    free(v17[0]);
  }

  if (a3)
  {
    size_t v13 = strlen(a3);
    if (a5)
    {
LABEL_6:
      __int128 v19 = *a5;
      goto LABEL_9;
    }
  }

  else
  {
    size_t v13 = 0LL;
    if (a5) {
      goto LABEL_6;
    }
  }

  krb5_data_zero(&v19);
LABEL_9:
  int v14 = malloc(0x18uLL);
  *a6 = v14;
  if (!v14) {
    return krb5_enomem(a1);
  }
  *(_OWORD *)__int128 v17 = *(_OWORD *)a4;
  uint64_t v18 = *(void *)(a4 + 16);
  uint64_t v15 = krb5_string_to_key_data_salt_opaque( a1,  (uint64_t)a2,  v13,  (uint64_t)a3,  (__int128 *)v17,  v19,  *((uint64_t *)&v19 + 1),  (uint64_t)v14);
  if ((_DWORD)v15)
  {
    free(*a6);
    *a6 = 0LL;
  }

  return v15;
}

void sub_1882D6FCC( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = 0LL;
  uint64_t v11 = &unk_18C4D8880;
  do
  {
    int v13 = v11[18];
    v11 += 18;
    int v12 = v13;
    if (v10 > 0x11) {
      break;
    }
    ++v10;
  }

  while (v12 != a3);
  if (v12 == a3)
  {
    uint64_t v14 = heim_uniq_alloc( *((void *)v11 + 3) + 55LL,  (uint64_t)"heim-pa-mech-ctx",  (uint64_t)sub_1882D70B0,  a4,  a5,  a6,  a7,  a8);
    if (v14)
    {
      uint64_t v15 = (const void *)v14;
      *(void *)(v14 + 32) = v11;
      timeval v16 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v11 + 5);
      if (!v16 || !v16(a1, a2, v14 + 48))
      {
        sub_1882DFCE8(a1, 5, "Adding PA mech: %s", *((const char **)v11 + 1));
        heim_array_append_value(*(__CFArray **)(a2 + 1048), v15);
      }

      heim_release(v15);
    }
  }

uint64_t sub_1882D70B0(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(result + 32) + 64LL);
  if (v1) {
    return v1(result + 48);
  }
  return result;
}

uint64_t sub_1882D70C8(uint64_t a1, unsigned int *a2)
{
  uint64_t result = _krb5_have_debug(a1);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1882DFCE8(a1, 5, "KDC sent %d patypes", *a2);
    if (*a2)
    {
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = 0LL;
        while (dword_18C4D88C8[v6] != *(_DWORD *)(*((void *)a2 + 1) + 24 * v5))
        {
          v6 += 18LL;
          if (v6 == 342)
          {
            uint64_t v7 = "unknown";
            goto LABEL_9;
          }
        }

        uint64_t v7 = *(const char **)&dword_18C4D88C8[v6 + 2];
LABEL_9:
        uint64_t result = sub_1882DFCE8( a1,  5,  "KDC sent PA-DATA type: %d (%s)",  *(_DWORD *)(*((void *)a2 + 1) + 24 * v5++),  v7);
      }

      while (v5 < *a2);
    }
  }

  return result;
}

uint64_t sub_1882D71B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  padata = 0LL;
  uint64_t v14 = "Stepping pa-mech: %s";
  uint64_t v15 = "PA type %s returned %d";
  for (BOOL i = *(void *)(a2 + 1040) == 0LL; ; BOOL i = 1)
  {
    do
    {
      if (i)
      {
        if (!heim_array_get_length(*(CFArrayRef *)(a2 + 1048)))
        {
          sub_1882DFCE8((uint64_t)a1, 0, "no more available_pa_mechs to try");
          return 2314790670LL;
        }

        *(void *)(a2 + 1040) = heim_array_copy_value(*(const __CFArray **)(a2 + 1048), 0LL);
        heim_array_delete_value(*(CFMutableArrayRef *)(a2 + 1048), 0LL);
      }

      uint64_t v17 = *(void *)(*(void *)(a2 + 1040) + 32LL);
      int v18 = *(_DWORD *)(v17 + 16);
      if (*(void *)(a2 + 984))
      {
        if ((v18 & 4) == 0)
        {
          sub_1882DFCE8((uint64_t)a1, 0, "pa-mech %s dropped under FAST (not supported)");
LABEL_10:
          heim_release(*(CFTypeRef *)(a2 + 1040));
          uint64_t v19 = 0LL;
          *(void *)(a2 + 1040) = 0LL;
          goto LABEL_15;
        }
      }

      else if ((v18 & 8) == 0)
      {
        sub_1882DFCE8((uint64_t)a1, 0, "dropped pa-mech %s since not running under FAST");
        goto LABEL_10;
      }

      sub_1882DFCE8((uint64_t)a1, 0, "pa-mech trying: %s, searching for %d", *(const char **)(v17 + 8), *(_DWORD *)v17);
      int v32 = 0;
      if (v8) {
        padata = krb5_find_padata( *(void *)(v8 + 8),  *(_DWORD *)v8,  **(_DWORD **)(*(void *)(a2 + 1040) + 32LL),  &v32);
      }
      else {
        padata = 0LL;
      }
      uint64_t v19 = *(void *)(a2 + 1040);
LABEL_15:
      BOOL i = 1;
    }

    while (!v19);
    sub_1882DFCE8((uint64_t)a1, 5, v14, *(void *)(*(void *)(v19 + 32) + 8LL));
    uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 1040) + 32LL) + 56LL))( a1,  a2,  *(void *)(a2 + 1040) + 48LL,  padata,  a3,  a4,  a5,  v8,  a7);
    sub_1882DFD2C(a1, 10, v20, v15, *(void *)(*(void *)(*(void *)(a2 + 1040) + 32LL) + 8LL), v20);
    if (!(_DWORD)v20)
    {
      int v21 = v15;
      uint64_t v22 = a3;
      uint64_t v23 = a5;
      uint64_t v24 = a7;
      krb5_keyblock v25 = v14;
      uint64_t v26 = *(void *)(a2 + 1040);
      uint64_t v27 = *(void **)(v26 + 40);
      if (v27)
      {
        sub_1882DFCE8((uint64_t)a1, 5, "Next PA type in set is: %s", *(const char **)(v27[4] + 8LL));
        uint64_t v20 = 2314790668LL;
      }

      else
      {
        CFStringRef v28 = *(const char **)(*(void *)(v26 + 32) + 8LL);
        if (a4)
        {
          uint64_t v20 = 0LL;
          *(void *)(a2 + 1056) = v28;
        }

        else
        {
          sub_1882DFCE8((uint64_t)a1, 5, "PA %s done, but no ticket in sight!!!", v28);
          uint64_t v20 = 2314790669LL;
        }
      }

      heim_retain(v27);
      heim_release(*(CFTypeRef *)(a2 + 1040));
      *(void *)(a2 + 1040) = v27;
      uint64_t v14 = v25;
      a7 = v24;
      a5 = v23;
      a3 = v22;
      uint64_t v15 = v21;
      uint64_t v8 = a6;
    }

    if ((_DWORD)v20 != -1980176627) {
      break;
    }
    sub_1882DFCE8( (uint64_t)a1,  5,  "Dropping PA type %s",  *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32LL) + 8LL));
    heim_release(*(CFTypeRef *)(a2 + 1040));
    *(void *)(a2 + 1040) = 0LL;
  }

  if ((_DWORD)v20 == -1980176628)
  {
    sub_1882DFCE8( (uint64_t)a1,  5,  "Continue needed for %s",  *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32LL) + 8LL));
    return 2314790668LL;
  }

  else
  {
    if ((_DWORD)v20)
    {
      sub_1882DFCE8( (uint64_t)a1,  5,  "Other error from mech %s: %d",  *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32LL) + 8LL),  v20);
      heim_release(*(CFTypeRef *)(a2 + 1040));
      *(void *)(a2 + 1040) = 0LL;
    }

    return v20;
  }

krb5_error_code krb5_get_init_creds_opt_alloc(krb5_context context, krb5_get_init_creds_opt **opt)
{
  krb5_get_init_creds_opt *opt = 0LL;
  uint64_t v4 = (krb5_get_init_creds_opt *)calloc(1uLL, 0x60uLL);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = calloc(1uLL, 0x40uLL);
    *(void *)&v5[1].proxiable = v6;
    if (v6)
    {
      krb5_error_code v7 = 0;
      *uint64_t v6 = 1;
      krb5_get_init_creds_opt *opt = v5;
    }

    else
    {
      krb5_error_code v7 = 12;
      krb5_set_error_message(context, 12, "malloc: out of memory");
      free(v5);
    }
  }

  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(context, 12, "malloc: out of memory");
  }

  return v7;
}

void krb5_get_init_creds_opt_free(krb5_context context, krb5_get_init_creds_opt *opt)
{
  if (opt)
  {
    uint64_t v3 = *(int **)&opt[1].proxiable;
    if (v3)
    {
      BOOL v4 = *v3 == 1;
      if (*v3 >= 1)
      {
        --*v3;
        if (v4)
        {
          sub_1882E67C4((uint64_t)opt);
          free(*(void **)&opt[1].proxiable);
        }

        *(_OWORD *)&opt->salt = 0u;
        *(_OWORD *)&opt[1].renew_life = 0u;
        *(_OWORD *)&opt->etype_list_CFIndex length = 0u;
        *(_OWORD *)&opt->preauth_list = 0u;
        *(_OWORD *)&opt->krb5_flags flags = 0u;
        *(_OWORD *)&opt->proxiable = 0u;
        free(opt);
      }
    }
  }

void krb5_get_init_creds_opt_set_default_flags( _krb5_context *a1, const char *a2, const krb5_data *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ret_xpc_object_t value = sub_1882D7838((uint64_t)a1, 1LL, (uint64_t)a3, (uint64_t)"forwardable", a5, a6, a7, a8);
  krb5_appdefault_BOOLean(a1, a2, a3, "forwardable", ret_value, &ret_value);
  int v12 = ret_value;
  *(_DWORD *)a4 |= 4u;
  *(_DWORD *)(a4 + 24) = v12;
  ret_xpc_object_t value = sub_1882D7838((uint64_t)a1, 0LL, (uint64_t)a3, (uint64_t)"proxiable", v13, v14, v15, v16);
  krb5_appdefault_BOOLean(a1, a2, a3, "proxiable", ret_value, &ret_value);
  int v17 = ret_value;
  *(_DWORD *)a4 |= 8u;
  *(_DWORD *)(a4 + 28) = v17;
  krb5_appdefault_time(a1, a2, a3, "ticket_lifetime", 0LL, &v32);
  uint64_t v23 = v32;
  if (v32
    || (uint64_t v23 = sub_1882D78D8((uint64_t)a1, (uint64_t)a3, (uint64_t)"ticket_lifetime", v18, v19, v20, v21, v22),
        (uint64_t v32 = v23) != 0))
  {
    *(_DWORD *)a4 |= 1u;
    *(void *)(a4 + 8) = v23;
  }

  krb5_appdefault_time(a1, a2, a3, "renew_lifetime", 0LL, &v32);
  uint64_t v29 = v32;
  if (v32
    || (uint64_t v29 = sub_1882D78D8((uint64_t)a1, (uint64_t)a3, (uint64_t)"renew_lifetime", v24, v25, v26, v27, v28),
        (uint64_t v32 = v29) != 0))
  {
    *(_DWORD *)a4 |= 2u;
    *(void *)(a4 + 16) = v29;
  }

  krb5_appdefault_BOOLean(a1, a2, a3, "no-addresses", 1, &ret_value);
  uint64_t v30 = *(void *)(a4 + 88);
  if (v30)
  {
    if (ret_value) {
      int v31 = 1;
    }
    else {
      int v31 = 2;
    }
    *(_DWORD *)(v30 + 40) = v31;
  }

  else
  {
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }

BOOL sub_1882D7838( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = krb5_config_get_BOOL_default(a1, 0LL, a2, a4, a5, a6, a7, a8, (uint64_t)"realms");
  if (result == (_DWORD)a2) {
    return krb5_config_get_BOOL_default(a1, 0LL, a2, v11, v12, v13, v14, v15, (uint64_t)"libdefaults");
  }
  return result;
}

void krb5_get_init_creds_opt_set_forwardable(krb5_get_init_creds_opt *opt, int forwardable)
{
  opt->flags |= 4u;
  LODWORD(opt->etype_list) = forwardable;
}

void krb5_get_init_creds_opt_set_proxiable(krb5_get_init_creds_opt *opt, int proxiable)
{
  opt->flags |= 8u;
  HIDWORD(opt->etype_list) = proxiable;
}

uint64_t sub_1882D78D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = krb5_config_get_time(a1, 0LL, a3, a4, a5, a6, a7, a8, (uint64_t)"realms");
  if (result < 0)
  {
    uint64_t time = krb5_config_get_time(a1, 0LL, v10, v11, v12, v13, v14, v15, (uint64_t)"libdefaults");
    return time & ~(time >> 63);
  }

  return result;
}

void krb5_get_init_creds_opt_set_tkt_life(krb5_get_init_creds_opt *opt, krb5_deltat tkt_life)
{
  opt->flags |= 1u;
  *(void *)&opt->renew_life = *(void *)&tkt_life;
}

void krb5_get_init_creds_opt_set_renew_life(krb5_get_init_creds_opt *opt, krb5_deltat renew_life)
{
  opt->flags |= 2u;
  *(void *)&opt->proxiable = *(void *)&renew_life;
}

uint64_t krb5_get_init_creds_opt_set_addressless(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    uint64_t v4 = 0LL;
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(v3 + 40) = v5;
  }

  else
  {
    uint64_t v4 = 22LL;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }

  return v4;
}

void krb5_get_init_creds_opt_set_etype_list( krb5_get_init_creds_opt *opt, krb5_enctype *etype_list, int etype_list_length)
{
  opt->flags |= 0x10u;
  opt->address_list = (krb5_address **)etype_list;
  LODWORD(opt->preauth_list) = etype_list_length;
}

void krb5_get_init_creds_opt_set_address_list(krb5_get_init_creds_opt *opt, krb5_address **addresses)
{
  opt->flags |= 0x20u;
  *(void *)&opt->preauth_list_CFIndex length = addresses;
}

void krb5_get_init_creds_opt_set_preauth_list( krb5_get_init_creds_opt *opt, krb5_preauthtype *preauth_list, int preauth_list_length)
{
  opt->flags |= 0x40u;
  opt[1].krb5_flags flags = preauth_list_length;
  opt->salt = (krb5_data *)preauth_list;
}

void krb5_get_init_creds_opt_set_salt(krb5_get_init_creds_opt *opt, krb5_data *salt)
{
  opt->flags |= 0x80u;
  *(void *)&opt[1].renew_life = salt;
}

_DWORD *krb5_get_init_creds_opt_set_anonymous(_DWORD *result, int a2)
{
  *result |= 0x100u;
  result[8] = a2;
  return result;
}

uint64_t krb5_get_init_creds_opt_set_pa_password(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 88);
  if (v4)
  {
    uint64_t v5 = 0LL;
    *(void *)(v4 + 8) = a3;
    *(void *)(v4 + 16) = a4;
  }

  else
  {
    uint64_t v5 = 22LL;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pa_password");
  }

  return v5;
}

uint64_t krb5_get_init_creds_opt_set_pac_request(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    uint64_t v4 = 0LL;
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(v3 + 24) = v5;
  }

  else
  {
    uint64_t v4 = 22LL;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }

  return v4;
}

void krb5_get_init_creds_opt_set_canonicalize(krb5_get_init_creds_opt *opt, int canonicalize)
{
  uint64_t v3 = *(void *)(*(void *)&canonicalize + 88LL);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 44);
    if (v2) {
      unsigned int v5 = v4 | 2;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFD;
    }
    *(_DWORD *)(v3 + 44) = v5;
  }

  else
  {
    krb5_set_error_message((krb5_context)opt, 22, "%s on non extendable opt", "init_creds_opt_set_canonicalize");
  }

uint64_t krb5_get_init_creds_opt_set_win2k(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 44);
    uint64_t v5 = 0LL;
    if (a3) {
      unsigned int v6 = v4 | 0x4C;
    }
    else {
      unsigned int v6 = v4 & 0xFFFFFFB3;
    }
    *(_DWORD *)(v3 + 44) = v6;
  }

  else
  {
    uint64_t v5 = 22LL;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_win2k");
  }

  return v5;
}

krb5_error_code krb5_get_init_creds_opt_set_process_last_req( krb5_context a1, krb5_get_init_creds_opt *a2, krb5_gic_process_last_req a3, void *a4)
{
  uint64_t v4 = *(void *)&a2[1].proxiable;
  if (v4)
  {
    krb5_error_code v5 = 0;
    *(void *)(v4 + 48) = a3;
    *(void *)(v4 + 56) = a4;
  }

  else
  {
    krb5_error_code v5 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_win2k");
  }

  return v5;
}

void *krb5_keyblock_zero(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  return krb5_data_zero((void *)(a1 + 8));
}

void krb5_free_keyblock_contents(krb5_context a1, krb5_keyblock *a2)
{
  if (a2)
  {
    p_CFIndex length = &a2->length;
    contents = a2->contents;
    if (contents) {
      bzero(contents, *(void *)p_length);
    }
    krb5_data_free(p_length);
    a2->krb5_magic magic = 0;
  }

void krb5_free_keyblock(krb5_context a1, krb5_keyblock *a2)
{
  if (a2)
  {
    krb5_free_keyblock_contents(a1, a2);
    free(a2);
  }

krb5_error_code krb5_copy_keyblock_contents(krb5_context a1, const krb5_keyblock *a2, krb5_keyblock *a3)
{
  return copy_EncryptionKey();
}

krb5_error_code krb5_copy_keyblock(krb5_context a1, const krb5_keyblock *a2, krb5_keyblock **a3)
{
  *a3 = 0LL;
  krb5_error_code v5 = (krb5_keyblock *)calloc(1uLL, 0x18uLL);
  if (v5)
  {
    unsigned int v6 = v5;
    krb5_error_code v7 = copy_EncryptionKey();
    if (v7) {
      free(v6);
    }
    else {
      *a3 = v6;
    }
  }

  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v7;
}

uint64_t krb5_keyblock_get_enctype(unsigned int *a1)
{
  return *a1;
}

uint64_t krb5_keyblock_init(_krb5_context *a1, char *a2, const void *a3, size_t a4, void *a5)
{
  int v8 = (int)a2;
  *a5 = 0LL;
  a5[1] = 0LL;
  a5[2] = 0LL;
  uint64_t v10 = krb5_enctype_keysize(a1, a2, &v12);
  if (!(_DWORD)v10)
  {
    if (v12 == a4)
    {
      uint64_t v10 = krb5_data_copy(a5 + 1, a3, a4);
      if ((_DWORD)v10) {
        krb5_set_error_message(a1, v10, "malloc: out of memory");
      }
      else {
        *(_DWORD *)a5 = v8;
      }
    }

    else
    {
      uint64_t v10 = 2529639062LL;
      krb5_set_error_message(a1, -1765328234, "Encryption key %d is %lu bytes long, %lu was passed in");
    }
  }

  return v10;
}

uint64_t sub_1882D7E08(_krb5_context *a1, const char *a2, uint64_t a3)
{
  unsigned int v6 = malloc(0x10uLL);
  if (!v6) {
    goto LABEL_5;
  }
  krb5_error_code v7 = v6;
  int v8 = strdup(a2);
  *(void *)krb5_error_code v7 = v8;
  if (!v8)
  {
    free(v7);
LABEL_5:
    uint64_t v9 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v9;
  }

  uint64_t v9 = 0LL;
  krb5_deltat v7[2] = 0;
  *(void *)(a3 + 88) = v7;
  return v9;
}

uint64_t sub_1882D7E88(int a1, uint64_t a2, char *__dst, size_t __size)
{
  return 0LL;
}

uint64_t sub_1882D7EB0(uint64_t a1, uint64_t a2)
{
  int v2 = *(void ***)(a2 + 88);
  free(*v2);
  free(v2);
  return 0LL;
}

uint64_t sub_1882D7EE0(_krb5_context *a1, uint64_t a2)
{
  return 0LL;
}

uint64_t sub_1882D7F00(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return sub_1882D85EC(a1, a2, 0x1000000, 0, a3);
}

uint64_t sub_1882D7F10(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1882D882C(a1, a2, a3, a4, 0LL, 0LL);
}

uint64_t sub_1882D7F1C(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1882D7F5C(_krb5_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  int v7 = open(*(const char **)v6, 16777218);
  if ((v7 & 0x80000000) == 0)
  {
    int v8 = v7;
    sub_1882FA158(v7);
    uint64_t v9 = sub_1882CC740(a1, v8, 1);
    if (!(_DWORD)v9)
    {
      uint64_t v10 = krb5_storage_from_fd(v8);
      uint64_t v11 = v10;
      if (!v10)
      {
        uint64_t v19 = "out of memory";
        goto LABEL_26;
      }

      krb5_storage_set_eof_code((uint64_t)v10, -1765328202);
      if (!krb5_ret_int8((uint64_t)v11, (uint64_t)v49))
      {
        if (LOBYTE(v49[0]) != 5)
        {
          uint64_t v18 = 2529639125LL;
          int v46 = *(const char **)v6;
          uint64_t v19 = "Bad version in keytab %s";
          goto LABEL_28;
        }

        uint64_t v31 = krb5_ret_int8((uint64_t)v11, (uint64_t)&v48);
        if ((_DWORD)v31)
        {
          uint64_t v18 = v31;
          int v46 = *(const char **)v6;
          uint64_t v19 = "failed reading tag from keytab %s";
          goto LABEL_28;
        }

        uint64_t v25 = (char)v48;
        *(_DWORD *)(a2 + 96) = v25;
        goto LABEL_15;
      }

      uint64_t v12 = sub_1882D8D8C(a2, (uint64_t)v11);
      if ((_DWORD)v12)
      {
        uint64_t v18 = v12;
        int v46 = *(const char **)v6;
        uint64_t v47 = strerror(v12);
        uint64_t v19 = "%s: keytab is corrupted: %s";
LABEL_28:
        uint64_t v32 = a1;
        krb5_error_code v33 = v18;
        goto LABEL_29;
      }

uint64_t sub_1882D841C(_krb5_context *a1, _krb5_kt *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (sub_1882D882C(a1, (uint64_t)a2, (uint64_t)v15, (uint64_t)&cursor, &v12, &v11))
  {
    krb5_kt_end_seq_get(a1, a2, &cursor);
LABEL_4:
    krb5_clear_error_message(a1);
    return 2529639093LL;
  }

  int v7 = 0;
  do
  {
    if (krb5_kt_compare( (uint64_t)a1,  (uint64_t)v15,  *(_DWORD **)a3,  *(_DWORD *)(a3 + 8),  *(_DWORD *)(a3 + 16)))
    {
      uint64_t v8 = v14;
      krb5_storage_seek(v14);
      unint64_t v9 = v11 - v12 - 4;
      krb5_store_int32(v8, 4 - (v11 - v12));
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      for (__int128 i = 0u; v9; v9 -= v10)
      {
        if (v9 >= 0x80) {
          uint64_t v10 = 128LL;
        }
        else {
          uint64_t v10 = v9;
        }
        krb5_storage_write(v8);
      }

      int v7 = 1;
    }

    krb5_kt_free_entry(a1, (uint64_t)v15);
  }

  while (!sub_1882D882C(a1, (uint64_t)a2, (uint64_t)v15, (uint64_t)&cursor, &v12, &v11));
  krb5_kt_end_seq_get(a1, a2, &cursor);
  if (!v7) {
    goto LABEL_4;
  }
  return 0LL;
}

uint64_t sub_1882D85B8(_krb5_context *a1, const char *a2, uint64_t a3)
{
  uint64_t result = sub_1882D7E08(a1, a2, a3);
  if (!(_DWORD)result) {
    *(_DWORD *)(*(void *)(a3 + 88) + 8LL) |= 1u;
  }
  return result;
}

uint64_t sub_1882D85EC(_krb5_context *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(const char ***)(a2 + 88);
  if ((a3 & 1) != 0) {
    int v11 = 2;
  }
  else {
    int v11 = 4;
  }
  if ((a3 & 2) != 0) {
    int v12 = 6;
  }
  else {
    int v12 = v11;
  }
  if (access(*v10, v12))
  {
    uint64_t v13 = __error();
    uint64_t v14 = *v13;
    uint64_t v29 = *v10;
    __int16 v30 = strerror(*v13);
    uint64_t v15 = "keytab %s access failed: %s";
LABEL_9:
    krb5_set_error_message(a1, v14, v15, v29, v30);
    return v14;
  }

  int v17 = open(*v10, a3);
  *(_DWORD *)a5 = v17;
  if (v17 < 0)
  {
    __int128 v19 = __error();
    uint64_t v14 = *v19;
    uint64_t v29 = *v10;
    __int16 v30 = strerror(*v19);
    uint64_t v15 = "keytab %s open failed: %s";
    goto LABEL_9;
  }

  sub_1882FA158(v17);
  uint64_t v14 = sub_1882CC740(a1, *(_DWORD *)a5, a4);
  int v18 = *(_DWORD *)a5;
  if ((_DWORD)v14)
  {
    close(v18);
  }

  else
  {
    __int128 v20 = krb5_storage_from_fd(v18);
    *(void *)(a5 + 8) = v20;
    if (v20)
    {
      krb5_storage_set_eof_code((uint64_t)v20, -1765328202);
      uint64_t v21 = krb5_ret_int8(*(void *)(a5 + 8), (uint64_t)&v32);
      if ((_DWORD)v21)
      {
        uint64_t v14 = v21;
      }

      else
      {
        uint64_t v22 = *(void *)(a5 + 8);
        if (v32 != 5)
        {
          krb5_storage_free(v22);
          sub_1882CC854(a1, *(_DWORD *)a5);
          close(*(_DWORD *)a5);
          krb5_clear_error_message(a1);
          return 2529639125LL;
        }

        uint64_t v14 = krb5_ret_int8(v22, (uint64_t)&v31);
        if (!(_DWORD)v14)
        {
          uint64_t v28 = v31;
          *(_DWORD *)(a2 + 96) = v28;
          sub_1882D87D8(a1, *(void *)(a5 + 8), v28, v23, v24, v25, v26, v27);
          return v14;
        }
      }

      krb5_storage_free(*(void *)(a5 + 8));
      sub_1882CC854(a1, *(_DWORD *)a5);
      close(*(_DWORD *)a5);
      krb5_clear_error_message(a1);
    }

    else
    {
      sub_1882CC854(a1, *(_DWORD *)a5);
      close(*(_DWORD *)a5);
      uint64_t v14 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  return v14;
}

uint64_t sub_1882D87D8( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 2) {
    goto LABEL_5;
  }
  if ((_DWORD)a3 != 1)
  {
    krb5_warnx(a1, "storage_set_flags called with bad vno (%d)", a3, a4, a5, a6, a7, a8, a3);
LABEL_5:
    int v9 = 0;
    return krb5_storage_set_flags(a2, v9);
  }

  int v9 = 7;
  return krb5_storage_set_flags(a2, v9);
}

uint64_t sub_1882D882C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  int v11 = *(const char ***)(a2 + 88);
  uint64_t v12 = krb5_storage_seek(*(void *)(a4 + 8));
  uint64_t v13 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v42);
  if (!(_DWORD)v13)
  {
    while (v42 < 0)
    {
      uint64_t v12 = krb5_storage_seek(*(void *)(a4 + 8));
      uint64_t v14 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v42);
      if ((_DWORD)v14) {
        return v14;
      }
    }

    uint64_t v15 = *(void *)(a4 + 8);
    __int128 v16 = (krb5_principal_data *)calloc(1uLL, 0x20uLL);
    if (!v16)
    {
      uint64_t v13 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_11;
    }

    int v17 = v16;
    uint64_t v18 = krb5_ret_int16(v15, &__count);
    if ((_DWORD)v18)
    {
      uint64_t v13 = v18;
      uint64_t v37 = *v11;
      __int128 v19 = "Failed decoding length of keytab principal in keytab file %s";
LABEL_8:
      krb5_set_error_message(a1, v13, v19, v37);
LABEL_9:
      krb5_free_principal(a1, v17);
LABEL_11:
      krb5_kt_free_entry(a1, a3);
LABEL_12:
      krb5_storage_seek(*(void *)(a4 + 8));
      return v13;
    }

    is_krb5_flags flags = krb5_storage_is_flags(v15, 2);
    __int16 v22 = __count;
    if (is_flags)
    {
      __int16 v22 = __count - 1;
      LOWORD(__count) = __count - 1;
    }

    if (v22 < 0)
    {
      uint64_t v13 = 2529639094LL;
      krb5_set_error_message(a1, -1765328202, "Keytab principal contains invalid length in keytab %s");
      goto LABEL_9;
    }

    uint64_t v23 = sub_1882D8CB4(a1, v15, &v17->data);
    if ((_DWORD)v23)
    {
      uint64_t v13 = v23;
      uint64_t v37 = *v11;
      __int128 v19 = "Can't read realm from keytab: %s";
      goto LABEL_8;
    }

    uint64_t v24 = (char *)calloc((__int16)__count, 8uLL);
    v17->realm.data = v24;
    if (!v24)
    {
      uint64_t v13 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_9;
    }

    uint64_t v38 = a6;
    uint64_t v39 = a3;
    int v25 = (__int16)__count;
    v17->realm.krb5_magic magic = (__int16)__count;
    if (v25)
    {
      uint64_t v26 = 0LL;
      unint64_t v27 = 0LL;
      while (1)
      {
        uint64_t v28 = sub_1882D8CB4(a1, v15, &v17->realm.data[v26]);
        if ((_DWORD)v28) {
          break;
        }
        ++v27;
        v26 += 8LL;
      }

      uint64_t v13 = v28;
      krb5_set_error_message(a1, v28, "Can't read principal from keytab: %s", *v11);
      a3 = v39;
      goto LABEL_9;
    }

LABEL_26:
    if (krb5_storage_is_flags(v15, 4))
    {
      v17->krb5_magic magic = 0;
      a3 = v39;
    }

    else
    {
      uint64_t v34 = krb5_ret_int32(v15, (unsigned int *)&v43);
      v17->krb5_magic magic = v43;
      a3 = v39;
      if ((_DWORD)v34)
      {
        uint64_t v13 = v34;
        uint64_t v37 = *v11;
        __int128 v19 = "Can't read name-type from keytab: %s";
        goto LABEL_8;
      }
    }

    *(void *)a3 = v17;
    uint64_t v13 = krb5_ret_uint32(*(void *)(a4 + 8), &__count);
    *(_DWORD *)(a3 + 40) = __count;
    if ((_DWORD)v13) {
      goto LABEL_11;
    }
    uint64_t v13 = krb5_ret_int8(*(void *)(a4 + 8), (uint64_t)&__count_7);
    if ((_DWORD)v13) {
      goto LABEL_11;
    }
    *(_DWORD *)(a3 + 8) = __count_7;
    uint64_t v29 = *(void *)(a4 + 8);
    uint64_t v13 = krb5_ret_int16(v29, &v44);
    if ((_DWORD)v13) {
      goto LABEL_47;
    }
    *(_DWORD *)(a3 + 16) = v44;
    uint64_t v13 = krb5_ret_int16(v29, &v43);
    if ((_DWORD)v13) {
      goto LABEL_47;
    }
    if ((__int16)v43 < 0)
    {
      uint64_t v35 = "bad size value";
    }

    else
    {
      size_t v30 = (unsigned __int16)v43;
      *(void *)(a3 + 24) = (unsigned __int16)v43;
      char v31 = calloc(1uLL, v30);
      *(void *)(a3 + 32) = v31;
      if (v31)
      {
        uint64_t v32 = krb5_storage_read(v29);
        if ((v32 & 0x8000000000000000LL) == 0)
        {
          uint64_t v13 = 2529639094LL;
          goto LABEL_46;
        }

        uint64_t v13 = *__error();
        a3 = v39;
        if (!(_DWORD)v13)
        {
LABEL_35:
          uint64_t v33 = v12 - krb5_storage_seek(*(void *)(a4 + 8));
          if (v42 + v33 + 4 < 4)
          {
            uint64_t v13 = 0LL;
          }

          else
          {
            uint64_t v13 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v43);
            if (!(_DWORD)v13 && v43)
            {
              uint64_t v13 = 0LL;
              *(_DWORD *)(v39 + 8) = v43;
            }
          }

          if (v42 + v33 + 4 < 8)
          {
            int v36 = 0;
          }

          else
          {
            uint64_t v13 = krb5_ret_uint32(*(void *)(a4 + 8), &__count);
            if ((_DWORD)v13) {
              goto LABEL_56;
            }
            int v36 = __count;
          }

          *(_DWORD *)(v39 + 44) = v36;
LABEL_56:
          *(void *)(v39 + 48) = 0LL;
          if (a5) {
            *a5 = v12;
          }
          if (v38) {
            *uint64_t v38 = v12 + v42 + 4;
          }
          a3 = v39;
          if (!(_DWORD)v13) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }

uint64_t sub_1882D8CB4(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = krb5_ret_int16(a2, &v11);
  if ((_DWORD)v6) {
    return v6;
  }
  if ((__int16)v11 < 0)
  {
    int v9 = "bad size value";
LABEL_9:
    uint64_t v6 = 12LL;
    krb5_set_error_message(a1, 12, v9);
    return v6;
  }

  int v7 = calloc(1uLL, v11 + 1LL);
  *a3 = v7;
  if (!v7)
  {
    int v9 = "malloc: out of memory";
    goto LABEL_9;
  }

  uint64_t v8 = krb5_storage_read(a2);
  uint64_t v6 = 0LL;
  *(_BYTE *)(*a3 + (__int16)v11) = 0;
  if (v8 != (__int16)v11)
  {
    if (v8 < 0) {
      return *__error();
    }
    else {
      return 2529639094LL;
    }
  }

  return v6;
}

uint64_t sub_1882D8D8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_store_int8(a2, 5);
  if (!(_DWORD)result)
  {
    int v5 = *(_DWORD *)(a1 + 96);
    if (!v5)
    {
      LOBYTE(v5) = 2;
      *(_DWORD *)(a1 + 96) = 2;
    }

    return krb5_store_int8(a2, v5);
  }

  return result;
}

uint64_t sub_1882D8DE0(_krb5_context *a1, const char **a2, uint64_t a3, __int16 *a4)
{
  uint64_t v8 = krb5_store_int16(a3, *a4);
  if (!(_DWORD)v8)
  {
    uint64_t v10 = *((void *)a4 + 1);
    uint64_t v11 = krb5_store_int16(a3, (__int16)v10);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v8 = v11;
    }

    else
    {
      uint64_t v12 = krb5_storage_write(a3);
      if (v12 == v10) {
        return 0LL;
      }
      if (v12 < 0)
      {
        uint64_t v8 = *__error();
        if (!(_DWORD)v8) {
          return v8;
        }
      }

      else
      {
        uint64_t v8 = 2529639094LL;
      }
    }
  }

  krb5_set_error_message(a1, v8, "Cant store keyblock to file %s", *a2);
  return v8;
}

uint64_t sub_1882D8EB0(uint64_t a1, char *__s)
{
  size_t v3 = strlen(__s);
  uint64_t result = krb5_store_int16(a1, (__int16)v3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = krb5_storage_write(a1);
    if (v5 == v3)
    {
      return 0LL;
    }

    else if (v5 < 0)
    {
      return *__error();
    }

    else
    {
      return 2529639094LL;
    }
  }

  return result;
}

uint64_t krb5_kt_register(uint64_t a1, uint64_t a2)
{
  if (strlen(*(const char **)a2) < 0x1E)
  {
    uint64_t v5 = (char *)realloc(*(void **)(a1 + 264), 104LL * *(int *)(a1 + 256) + 104);
    if (v5)
    {
      uint64_t v4 = 0LL;
      int v6 = *(_DWORD *)(a1 + 256);
      int v7 = &v5[104 * v6];
      *((void *)v7 + 12) = *(void *)(a2 + 96);
      __int128 v8 = *(_OWORD *)(a2 + 80);
      *((_OWORD *)v7 + 4) = *(_OWORD *)(a2 + 64);
      *((_OWORD *)v7 + 5) = v8;
      __int128 v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)int v7 = *(_OWORD *)a2;
      *((_OWORD *)v7 + 1) = v9;
      __int128 v10 = *(_OWORD *)(a2 + 48);
      *((_OWORD *)v7 + 2) = *(_OWORD *)(a2 + 32);
      *((_OWORD *)v7 + 3) = v10;
      *(void *)(a1 + 264) = v5;
      *(_DWORD *)(a1 + 256) = v6 + 1;
    }

    else
    {
      uint64_t v4 = 12LL;
      krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    }
  }

  else
  {
    uint64_t v4 = 2529639091LL;
    krb5_set_error_message((krb5_context)a1, -1765328205, "can't register cache type, prefix too long");
  }

  return v4;
}

krb5_error_code krb5_kt_resolve(krb5_context a1, const char *a2, krb5_keytab *a3)
{
  uint64_t v4 = a2;
  int v6 = strchr(a2, 58);
  if (v6)
  {
    int v7 = *(unsigned __int8 *)v4;
    if (v7 == 47) {
      __int128 v8 = "FILE";
    }
    else {
      __int128 v8 = v4;
    }
    if (v7 == 47) {
      size_t v9 = 4LL;
    }
    else {
      size_t v9 = v6 - v4;
    }
    if (v7 != 47) {
      uint64_t v4 = v6 + 1;
    }
  }

  else
  {
    __int128 v8 = "FILE";
    size_t v9 = 4LL;
  }

  uint64_t v10 = *((unsigned int *)a1 + 64);
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = (const char **)*((void *)a1 + 33);
    while (strncasecmp(v8, *v12, v9))
    {
      ++v11;
      v12 += 13;
      if (v10 == v11) {
        goto LABEL_19;
      }
    }
  }

  if ((_DWORD)v11 == (_DWORD)v10)
  {
LABEL_19:
    krb5_error_code v13 = -1765328204;
    krb5_set_error_message(a1, -1765328204, "unknown keytab type %.*s");
  }

  else
  {
    uint64_t v14 = malloc(0x68uLL);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *((void *)a1 + 33) + 104LL * v11;
      uint64_t v17 = *(void *)(v16 + 96);
      __int128 v19 = *(_OWORD *)(v16 + 48);
      __int128 v18 = *(_OWORD *)(v16 + 64);
      _BYTE v14[5] = *(_OWORD *)(v16 + 80);
      __int128 v21 = *(_OWORD *)(v16 + 16);
      __int128 v20 = *(_OWORD *)(v16 + 32);
      _OWORD *v14 = *(_OWORD *)v16;
      v14[1] = v21;
      void v14[2] = v20;
      v14[3] = v19;
      v14[4] = v18;
      *((void *)v14 + 11) = 0LL;
      *((void *)v14 + 12) = v17;
      krb5_error_code v13 = (*((uint64_t (**)(krb5_context, const char *, _OWORD *))v14 + 1))(a1, v4, v14);
      if (v13)
      {
        free(v15);
        uint64_t v15 = 0LL;
      }

      *a3 = (krb5_keytab)v15;
    }

    else
    {
      krb5_error_code v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  return v13;
}

krb5_error_code krb5_kt_default_name(krb5_context a1, char *a2, int a3)
{
  return -1765328247;
}

uint64_t krb5_kt_default_modify_name(_krb5_context *a1, char *__dst, size_t __size)
{
  int v6 = (const char *)*((void *)a1 + 27);
  if (!v6)
  {
    int v6 = (const char *)*((void *)a1 + 26);
    if (!strncasecmp(v6, "ANY:", 4uLL))
    {
      __int128 v8 = v6 + 4;
      size_t v9 = strcspn(v8, ",");
      if (v9 < __size)
      {
        size_t v10 = v9;
        strlcpy(__dst, v8, __size);
        uint64_t v7 = 0LL;
        __dst[v10] = 0;
        return v7;
      }

krb5_error_code krb5_kt_default(krb5_context a1, krb5_keytab *a2)
{
  return krb5_kt_resolve(a1, *((const char **)a1 + 26), a2);
}

krb5_error_code krb5_kt_read_service_key( krb5_context a1, krb5_pointer a2, krb5_principal a3, krb5_kvno a4, krb5_enctype a5, krb5_keyblock **a6)
{
  if (!a2) {
    a2 = (krb5_pointer)*((void *)a1 + 26);
  }
  krb5_error_code entry = krb5_kt_resolve(a1, (const char *)a2, &keytab);
  if (!entry)
  {
    krb5_keytab v12 = keytab;
    krb5_error_code entry = krb5_kt_get_entry(a1, keytab, a3, a4, a5, &v14);
    (*((void (**)(krb5_context, krb5_keytab))v12 + 3))(a1, v12);
    *(_OWORD *)krb5_keytab v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((void *)v12 + 12) = 0LL;
    free(v12);
    if (!entry)
    {
      krb5_error_code entry = krb5_copy_keyblock(a1, (const krb5_keyblock *)&v14.timestamp, a6);
      krb5_kt_free_entry(a1, (uint64_t)&v14);
    }
  }

  return entry;
}

krb5_error_code krb5_kt_get_entry( krb5_context context, krb5_keytab keytab, krb5_const_principal principal, krb5_kvno vno, krb5_enctype enctype, krb5_keytab_entry *entry)
{
  uint64_t v7 = *(char **)&enctype;
  krb5_keytab v12 = (uint64_t (*)(krb5_context, krb5_keytab, krb5_const_principal, void, void, krb5_keytab_entry *))*((void *)keytab + 5);
  if (v12) {
    return v12(context, keytab, principal, *(void *)&vno, *(void *)&enctype, entry);
  }
  krb5_keytab_entry v14 = (unsigned int (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 6);
  if (v14)
  {
    if (!v14(context, keytab, cursor))
    {
      LODWORD(entry->principal) = 0;
      if (!krb5_kt_next_entry(context, keytab, &entrya, cursor))
      {
        else {
          int v15 = vno;
        }
        do
        {
          if (krb5_kt_compare((uint64_t)context, (uint64_t)&entrya, principal, 0, (int)v7))
          {
            if (LODWORD(entrya.principal) == vno
              || (SLODWORD(entrya.principal) <= 255 ? (BOOL v16 = v15 == LODWORD(entrya.principal)) : (BOOL v16 = 0), v16))
            {
              krb5_kt_copy_entry_contents(context, (uint64_t)&entrya, (uint64_t)entry);
              krb5_kt_free_entry(context, (uint64_t)&entrya);
              __int128 v20 = (void (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 8);
              if (v20) {
                v20(context, keytab, cursor);
              }
              else {
                krb5_set_error_message( context,  -1980176636,  "end_seq_get is not supported in the %s  keytab",  *(const char **)keytab);
              }
              return 0;
            }

            if (!vno)
            {
              int v17 = (int)entry->principal;
              if (SLODWORD(entrya.principal) > v17)
              {
                if (v17) {
                  krb5_kt_free_entry(context, (uint64_t)entry);
                }
                krb5_kt_copy_entry_contents(context, (uint64_t)&entrya, (uint64_t)entry);
              }
            }
          }

          krb5_kt_free_entry(context, (uint64_t)&entrya);
        }

        while (!krb5_kt_next_entry(context, keytab, &entrya, cursor));
      }

      __int128 v18 = (void (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 8);
      if (v18) {
        v18(context, keytab, cursor);
      }
      else {
        krb5_set_error_message( context,  -1980176636,  "end_seq_get is not supported in the %s  keytab",  *(const char **)keytab);
      }
      if (LODWORD(entry->principal)) {
        return 0;
      }
      krb5_error_code v19 = -1765328203;
      sub_1882D98D4(context, 2529639093LL, (uint64_t)keytab, (uint64_t)principal, v7, vno);
      return v19;
    }
  }

  else
  {
    krb5_set_error_message( context,  -1980176636,  "start_seq_get is not supported in the %s keytab type",  *(const char **)keytab);
  }

  krb5_error_code v19 = -1765328203;
  *((_DWORD *)context + 72) = -1765328203;
  return v19;
}

krb5_error_code krb5_kt_close(krb5_context context, krb5_keytab keytab)
{
  krb5_error_code v3 = (*((uint64_t (**)(krb5_context))keytab + 3))(context);
  *(_OWORD *)krb5_keytab keytab = 0u;
  *((_OWORD *)keytab + 1) = 0u;
  *((_OWORD *)keytab + 2) = 0u;
  *((_OWORD *)keytab + 3) = 0u;
  *((_OWORD *)keytab + 4) = 0u;
  *((_OWORD *)keytab + 5) = 0u;
  *((void *)keytab + 12) = 0LL;
  free(keytab);
  return v3;
}

uint64_t krb5_kt_free_entry(_krb5_context *a1, uint64_t a2)
{
  *(void *)(a2 + 48) = 0LL;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return 0LL;
}

const char *__cdecl krb5_kt_get_type(krb5_context a1, krb5_keytab keytab)
{
  return 0LL;
}

krb5_error_code krb5_kt_get_name(krb5_context context, krb5_keytab keytab, char *name, unsigned int namelen)
{
  return (*((uint64_t (**)(krb5_context))keytab + 2))(context);
}

uint64_t krb5_kt_get_full_name(_krb5_context *a1, uint64_t a2, char **a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  *a3 = 0LL;
  __strlcpy_chk();
  uint64_t v6 = (*(uint64_t (**)(_krb5_context *, uint64_t, char *, uint64_t))(a2 + 16))(a1, a2, v8, 1024LL);
  if (!(_DWORD)v6)
  {
    if (asprintf(a3, "%s:%s", v9, v8) == -1)
    {
      uint64_t v6 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      *a3 = 0LL;
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

uint64_t krb5_kt_destroy(uint64_t a1, uint64_t (**a2)(void))
{
  uint64_t v4 = a2[4]();
  ((void (*)(uint64_t, uint64_t (**)(void)))a2[3])(a1, a2);
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  a2[12] = 0LL;
  free(a2);
  return v4;
}

uint64_t krb5_kt_compare(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  if (!a3) {
    return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
  }
  if (*a3 == -1202)
  {
    uint64_t v10 = (unsigned int (*)(uint64_t, uint64_t, _DWORD *))krb5_principal_compare_any_realm;
    uint64_t result = ((uint64_t (*)(uint64_t, void))krb5_principal_compare_any_realm)(a1, *(void *)a2);
  }

  else
  {
    uint64_t v10 = (unsigned int (*)(uint64_t, uint64_t, _DWORD *))krb5_principal_compare;
    uint64_t result = ((uint64_t (*)(uint64_t, void))krb5_principal_compare)(a1, *(void *)a2);
  }

  if ((_DWORD)result)
  {
    krb5_keytab v12 = *(unsigned int **)(a2 + 48);
    if (v12 && *v12)
    {
      uint64_t v13 = 0LL;
      unint64_t v14 = 0LL;
      while (!v10(a1, *((void *)v12 + 1) + v13, a3))
      {
        ++v14;
        krb5_keytab v12 = *(unsigned int **)(a2 + 48);
        v13 += 32LL;
        if (v14 >= *v12) {
          return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
        }
      }

      return 0LL;
    }

    return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
  }

  return result;
}

uint64_t sub_1882D98D4(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unint64_t v14 = 0LL;
  krb5_unparse_name_fixed(a1, a4, (uint64_t)v17, 0x100uLL);
  krb5_kt_get_full_name(a1, a3, (char **)&v15);
  if ((_DWORD)a5) {
    krb5_enctype_to_string((krb5_enctype)a1, a5, (size_t)&v14);
  }
  if (a6) {
    snprintf(__str, 0x19uLL, "(kvno %d)", a6);
  }
  else {
    __str[0] = 0;
  }
  uint64_t v11 = (const char *)v15;
  if (!v15) {
    uint64_t v11 = "unknown keytab";
  }
  krb5_keytab v12 = (const char *)v14;
  if (!v14) {
    krb5_keytab v12 = "unknown enctype";
  }
  krb5_set_error_message(a1, a2, "Failed to find %s%s in keytab %s (%s)", v17, __str, v11, v12);
  free(v15);
  if (v14) {
    free(v14);
  }
  return a2;
}

krb5_error_code krb5_kt_start_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)keytab + 6);
  if (v3) {
    return v3(context);
  }
  krb5_set_error_message( context,  -1980176636,  "start_seq_get is not supported in the %s keytab type",  *(const char **)keytab);
  return -1980176636;
}

krb5_error_code krb5_kt_next_entry( krb5_context context, krb5_keytab keytab, krb5_keytab_entry *entry, krb5_kt_cursor *cursor)
{
  *(void *)&entry[1].krb5_magic magic = 0LL;
  *(_OWORD *)&entry->timestamp = 0u;
  *(_OWORD *)&entry->key.CFIndex length = 0u;
  *(_OWORD *)&entry->krb5_magic magic = 0u;
  uint64_t v4 = (uint64_t (*)(krb5_context))*((void *)keytab + 7);
  if (v4) {
    return v4(context);
  }
  krb5_set_error_message(context, -1980176636, "next_entry is not supported in the %s  keytab", *(const char **)keytab);
  return -1980176636;
}

uint64_t krb5_kt_copy_entry_contents(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 48) = 0LL;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)a2, (krb5_principal *)a3);
  if ((_DWORD)v6
    || (uint64_t v6 = krb5_copy_keyblock_contents(a1, (const krb5_keyblock *)(a2 + 16), (krb5_keyblock *)(a3 + 16)), (_DWORD)v6))
  {
    krb5_kt_free_entry(a1, a3);
  }

  else
  {
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
  }

  return v6;
}

krb5_error_code krb5_kt_end_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)keytab + 8);
  if (v3) {
    return v3(context);
  }
  krb5_set_error_message(context, -1980176636, "end_seq_get is not supported in the %s  keytab", *(const char **)keytab);
  return -1980176636;
}

krb5_error_code krb5_kt_add_entry(krb5_context a1, krb5_keytab a2, krb5_keytab_entry *a3)
{
  if (*((void *)a2 + 9))
  {
    LODWORD(a3->key.contents) = time(0LL);
    return (*((uint64_t (**)(krb5_context, krb5_keytab, krb5_keytab_entry *))a2 + 9))(a1, a2, a3);
  }

  else
  {
    krb5_set_error_message(a1, -1765328201, "Add is not supported in the %s keytab", *(const char **)a2);
    return -1765328201;
  }

krb5_error_code krb5_kt_remove_entry(krb5_context a1, krb5_keytab a2, krb5_keytab_entry *a3)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)a2 + 10);
  if (v3) {
    return v3(a1);
  }
  krb5_set_error_message(a1, -1765328201, "Remove is not supported in the %s keytab", *(const char **)a2);
  return -1765328201;
}

uint64_t krb5_kt_have_content(krb5_context a1, const char **a2)
{
  uint64_t v4 = a2[6];
  if (v4)
  {
    if (!((unsigned int (*)(krb5_context, const char **, krb5_kt_cursor *))v4)(a1, a2, cursor))
    {
      uint64_t v5 = krb5_kt_next_entry(a1, (krb5_keytab)a2, &entry, cursor);
      uint64_t v6 = a2[8];
      if (v6)
      {
        ((void (*)(krb5_context, const char **, krb5_kt_cursor *))v6)(a1, a2, cursor);
        if (!(_DWORD)v5) {
          goto LABEL_11;
        }
      }

      else
      {
        krb5_set_error_message(a1, -1980176636, "end_seq_get is not supported in the %s  keytab", *a2);
        if (!(_DWORD)v5)
        {
LABEL_11:
          krb5_kt_free_entry(a1, (uint64_t)&entry);
          return v5;
        }
      }
    }
  }

  else
  {
    krb5_set_error_message(a1, -1980176636, "start_seq_get is not supported in the %s keytab type", *a2);
  }

  uint64_t v5 = 2529639093LL;
  if (!krb5_kt_get_full_name(a1, (uint64_t)a2, (char **)&v8))
  {
    krb5_set_error_message(a1, -1765328203, "No entry in keytab: %s", (const char *)v8);
    free(v8);
  }

  return v5;
}

void _krb5_state_srv_sort(uint64_t a1)
{
  size_t v1 = *(unsigned int *)(a1 + 96);
  if (v1 >= 2)
  {
    qsort(*(void **)(a1 + 88), v1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1882D9F08);
    size_t v3 = *(unsigned int *)(a1 + 96);
    if (v3 >= 2)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0LL;
      for (unint64_t i = 1LL; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(a1 + 88);
        int v8 = *(unsigned __int16 *)(*(void *)(v7 + 8 * v5) + 34LL);
        uint64_t v9 = *(void *)(v7 + 8 * i);
        if (v8 == *(unsigned __int16 *)(v9 + 34))
        {
          unsigned int v10 = *(_DWORD *)(v9 + 36) + v4;
          unint64_t v11 = v5;
        }

        else
        {
          unsigned int v10 = 0;
          if (v5 >= i) {
            goto LABEL_18;
          }
          unint64_t v11 = i;
          if (v4)
          {
            unint64_t v12 = v5;
            do
            {
              int v13 = ~*(_DWORD *)(a1 + 96);
              uint32_t v14 = arc4random() % v4;
              unint64_t v15 = v5;
              do
              {
                uint64_t v16 = *(void *)(*(void *)(a1 + 88) + 8 * v15);
                uint32_t v17 = *(_DWORD *)(v16 + 36);
                if ((v17 & 0x80000000) == 0)
                {
                  BOOL v18 = v14 >= v17;
                  v14 -= v17;
                  if (v14 == 0 || !v18)
                  {
                    v4 -= v17;
                    *(_DWORD *)(v16 + 36) = v13;
                    goto LABEL_15;
                  }
                }

                ++v15;
              }

              while (i != v15);
              sub_1882DFCE8(*(void *)(a1 + 32), 2, "o too large: sum %d", v4);
LABEL_15:
              ++v12;
            }

            while (v12 < i && v4);
            unsigned int v10 = 0;
            size_t v3 = *(unsigned int *)(a1 + 96);
LABEL_18:
            unint64_t v11 = i;
          }
        }

        unsigned int v4 = v10;
        unint64_t v5 = v11;
      }
    }

    qsort(*(void **)(a1 + 88), v3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1882D9F08);
  }

uint64_t sub_1882D9F08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = *(unsigned __int16 *)(*a1 + 34);
  int v4 = *(unsigned __int16 *)(*(void *)a2 + 34LL);
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*(_DWORD *)(v2 + 36) - *(_DWORD *)(*(void *)a2 + 36LL));
  }
  return result;
}

size_t sub_1882D9F30(const char *a1)
{
  size_t result = strlen(a1);
  if (result)
  {
    if (a1[result - 1] == 46) {
      a1[result - 1] = 0;
    }
  }

  return result;
}

void sub_1882D9F68(void *a1)
{
  uint64_t v2 = (addrinfo *)a1[1];
  if (v2)
  {
    freeaddrinfo(v2);
    a1[1] = 0LL;
  }

  int v3 = (void *)a1[5];
  if (v3) {
    free(v3);
  }
  free(a1);
}

uint64_t krb5_krbhst_format_string(int a1, int *a2, char *__str, size_t __size)
{
  *(_DWORD *)&__stra[3] = 0;
  *(_DWORD *)__stra = 0;
  int v7 = *a2;
  else {
    int v8 = off_18A219E40[v7 - 1];
  }
  if (*((unsigned __int16 *)a2 + 2) != *((unsigned __int16 *)a2 + 3))
  {
    snprintf(__stra, 7uLL, ":%d", *((unsigned __int16 *)a2 + 2));
    int v7 = *a2;
  }

  if (v7 == 3)
  {
    uint64_t v9 = (const char *)*((void *)a2 + 5);
    unsigned int v10 = "/";
  }

  else
  {
    unsigned int v10 = "";
    uint64_t v9 = "";
  }

  snprintf(__str, __size, "%s%s%s%s%s", v8, (const char *)a2 + 48, __stra, v10, v9);
  return 0LL;
}

uint64_t krb5_krbhst_get_addrinfo(uint64_t a1, uint64_t a2, addrinfo **a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unint64_t v5 = (addrinfo **)(a2 + 8);
  int v4 = *(addrinfo **)(a2 + 8);
  if (v4)
  {
    uint64_t result = 0LL;
  }

  else
  {
    int v8 = (const char *)(a2 + 48);
    unint64_t v12 = (char *)(a2 + 48);
    snprintf(__str, 0x20uLL, "%d", *(unsigned __int16 *)(a2 + 4));
    sub_1882DA1F4((uint64_t)&v13, *(_DWORD *)a2);
    v13.ai_flags |= 0x1004u;
    uint64_t result = getaddrinfo(v8, __str, &v13, v5);
    if ((_DWORD)result)
    {
      v13.ai_flags &= ~4u;
      if (strchr(v8, 46) && v8[strlen(v8) - 1] != 46)
      {
        uint64_t v9 = v12;
        if (!v12) {
          return 12LL;
        }
      }

      else
      {
        uint64_t v9 = (char *)v8;
      }

      uint64_t v10 = getaddrinfo(v9, __str, &v13, v5);
      if (v12 != v8) {
        free(v12);
      }
      if ((_DWORD)v10)
      {
        unint64_t v11 = __error();
        uint64_t result = krb5_eai_to_heim_errno(v10, *v11);
      }

      else
      {
        uint64_t result = 0LL;
      }
    }

    int v4 = *v5;
  }

  *a3 = v4;
  return result;
}

uint64_t sub_1882DA1F4(uint64_t result, unsigned int a2)
{
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_DWORD *)(result + 4) = 0;
  if (a2 <= 3) {
    *(_DWORD *)(result + 8) = dword_18831A3F0[a2];
  }
  return result;
}

uint64_t krb5_krbhst_init(_krb5_context *a1, const char *a2, int a3, uint64_t *a4)
{
  return krb5_krbhst_init_flags(a1, a2, a3, 0, a4);
}

uint64_t krb5_krbhst_init_flags(_krb5_context *a1, const char *a2, int a3, int a4, uint64_t *a5)
{
  *a5 = 0LL;
  switch(a3)
  {
    case 3:
      unsigned int v14 = krb5_getportbyname((int)a1, "kpasswd", "udp", 0x1D0u);
      uint64_t v15 = "change_password";
      uint64_t v16 = sub_1882DA8DC;
      break;
    case 2:
      unsigned int v14 = krb5_getportbyname((int)a1, "kerberos-adm", "tcp", 0x2EDu);
      uint64_t v15 = "admin";
      uint64_t v16 = sub_1882DA72C;
      break;
    case 1:
      unsigned int v14 = krb5_getportbyname((int)a1, "kerberos", "udp", 0x58u);
      uint64_t v15 = "kdc";
      uint64_t v16 = sub_1882DA430;
      break;
    default:
      uint64_t v23 = 25LL;
      krb5_set_error_message(a1, 25, "unknown krbhst type (%u)", a3);
      return v23;
  }

  uint64_t v17 = heim_uniq_alloc(0xF0uLL, (uint64_t)"krbhst-context", (uint64_t)sub_1882DD08C, v9, v10, v11, v12, v13);
  if (!v17) {
    return 12LL;
  }
  uint64_t v18 = v17;
  krb5_error_code v19 = strdup(a2);
  *(void *)(v18 + 96) = v19;
  if (!v19
    || (dispatch_queue_t v20 = sub_188318C40("krbhst-srv"), (*(void *)(v18 + 200) = v20) == 0LL)
    || (dispatch_queue_t v21 = sub_188318C40("krbhst-addrinfo"), (*(void *)(v18 + 208) = v21) == 0LL))
  {
    heim_release((CFTypeRef)v18);
    return 12LL;
  }

  unsigned int v22 = bswap32(v14);
  sub_1882DFCE8((uint64_t)a1, 2, "Trying to find service %s for realm %s flags %x", v15, a2, a4);
  if (!strchr(a2, 46)) {
    *(_DWORD *)(v18 + 104) |= 0x100u;
  }
  if ((a4 & 2) != 0) {
    *(_DWORD *)(v18 + 104) |= 0x200u;
  }
  *(void *)(v18 + 176) = v18 + 168;
  *(void *)(v18 + 184) = v18 + 168;
  pthread_mutex_init((pthread_mutex_t *)(v18 + 32), 0LL);
  uint64_t v23 = 0LL;
  *(void *)(v18 + 120) = v16;
  *(_DWORD *)(v18 + 108) = HIWORD(v22);
  *a5 = v18;
  return v23;
}

uint64_t sub_1882DA430( _krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x800) == 0)
  {
    *(_DWORD *)(a2 + 104) = v11 | 0x800;
    if (*(void *)(a2 + 128))
    {
      sub_1882DFCE8((uint64_t)a1, 5, "adding hostname: %s", *(const char **)(a2 + 128));
      sub_1882DB508( (uint64_t)a1,  a2,  (uint64_t)"hostname",  *(char **)(a2 + 128),  *(_DWORD *)(a2 + 108),  *(_DWORD *)(a2 + 112));
    }

    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 0x400) == 0)
  {
    sub_1882DAE04((uint64_t)a1, a2, 1);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 1) == 0)
  {
    sub_1882DAE6C((uint64_t)a1, a2, (uint64_t)"kdc", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068LL;
    sub_1882DFCE8((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }

  if (!*((_DWORD *)a1 + 61)) {
    goto LABEL_32;
  }
  if ((v11 & 0x10) == 0)
  {
    uint64_t v13 = *(void *)(a2 + 136);
    if (v13)
    {
      sub_1882DAF54(a1, a2, v13, "tcp", "kerberos");
      *(_DWORD *)(a2 + 104) |= 0x10u;
      if (sub_1882DAB44(a2, a3)) {
        return 0LL;
      }
      int v11 = *(_DWORD *)(a2 + 104);
    }
  }

  if ((v11 & 4) == 0)
  {
    sub_1882DAF54(a1, a2, 0LL, "tcp", "kerberos");
    *(_DWORD *)(a2 + 104) |= 4u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 0x202) != 0)
  {
    if ((v11 & 0x40) != 0) {
      goto LABEL_30;
    }
  }

  else
  {
    sub_1882DAF54(a1, a2, 0LL, "udp", "kerberos");
    *(_DWORD *)(a2 + 104) |= 2u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
    if ((v11 & 0x40) != 0) {
      goto LABEL_30;
    }
  }

  sub_1882DAF54(a1, a2, 0LL, "kkdcp", "kerberos");
  *(_DWORD *)(a2 + 104) |= 0x40u;
  if (sub_1882DAB44(a2, a3)) {
    return 0LL;
  }
  int v11 = *(_DWORD *)(a2 + 104);
LABEL_30:
  if ((v11 & 0x20) == 0)
  {
    sub_1882DAF54(a1, a2, 0LL, "http", "kerberos");
    *(_DWORD *)(a2 + 104) |= 0x20u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
  }

LABEL_32:
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(a2 + 104);
    if ((v15 & 0x80) != 0) {
      break;
    }
    uint64_t v12 = sub_1882DB2FC((uint64_t)a1, a2, *(_DWORD *)(a2 + 108), (v15 >> 9) & 1, a5, a6, a7, a8);
    if ((_DWORD)v12 || sub_1882DAB44(a2, a3)) {
      return v12;
    }
  }

  uint64_t v12 = 2529639068LL;
  sub_1882DFCE8((uint64_t)a1, 0, "No KDC entries found for %s");
  return v12;
}

      krb5_abortx(a1, "internal error in ASN.1 encoder", v25, v26, v27, v28);
    }
  }

    sub_1882FE260();
    free(v26);
    return v14;
  }

  if ((v23 & 0x1000) != 0) {
    heim_abort("FAST AS with AC:(state->flags & KRB5_FAST_AS_REQ) == 0", v15, v16, v17, v18, v19, v20, v21, v30);
  }
  return _krb5_fast_cf2( a1,  *(const krb5_keyblock **)(v22 + 40),  "subkeyarmor",  *(const krb5_keyblock **)(v22 + 32),  "ticketarmor",  (krb5_keyblock *)(a2 + 56),  v12);
}

uint64_t sub_1882DA72C( _krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x400) == 0)
  {
    sub_1882DAE04((uint64_t)a1, a2, 3);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 1) == 0)
  {
    sub_1882DAE6C((uint64_t)a1, a2, (uint64_t)"admin_server", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068LL;
    sub_1882DFCE8((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }

  if ((v11 & 4) != 0
    || !*((_DWORD *)a1 + 61)
    || (sub_1882DAF54(a1, a2, 0LL, "tcp", "kerberos-adm"), *(_DWORD *)(a2 + 104) |= 4u, !sub_1882DAB44(a2, a3)))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
    uint64_t v13 = *(void *)(a2 + 176);
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 32));
    if (v13 != a2 + 168) {
      goto LABEL_17;
    }
    unsigned int v18 = *(_DWORD *)(a2 + 104);
    if ((v18 & 0x80) != 0) {
      goto LABEL_17;
    }
    uint64_t v12 = sub_1882DB2FC((uint64_t)a1, a2, *(_DWORD *)(a2 + 108), (v18 >> 9) & 1, v14, v15, v16, v17);
    if ((_DWORD)v12) {
      return v12;
    }
    *(_DWORD *)(a2 + 104) |= 0x80u;
    if (!sub_1882DAB44(a2, a3))
    {
LABEL_17:
      uint64_t v12 = 2529639068LL;
      sub_1882DFCE8((uint64_t)a1, 0, "No admin entries found for realm %s");
      return v12;
    }
  }

  return 0LL;
}

uint64_t sub_1882DA8DC( _krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x400) == 0)
  {
    sub_1882DAE04((uint64_t)a1, a2, 5);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 1) == 0)
  {
    sub_1882DAE6C((uint64_t)a1, a2, (uint64_t)"kpasswd_server", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }

  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068LL;
    sub_1882DFCE8((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }

  if (*((_DWORD *)a1 + 61))
  {
    if ((v11 & 0x202) != 0)
    {
      if ((v11 & 4) != 0) {
        goto LABEL_17;
      }
    }

    else
    {
      sub_1882DAF54(a1, a2, 0LL, "udp", "kpasswd");
      *(_DWORD *)(a2 + 104) |= 2u;
      if (sub_1882DAB44(a2, a3)) {
        return 0LL;
      }
      if ((*(_DWORD *)(a2 + 104) & 4) != 0) {
        goto LABEL_17;
      }
    }

    sub_1882DAF54(a1, a2, 0LL, "tcp", "kpasswd");
    *(_DWORD *)(a2 + 104) |= 4u;
    if (sub_1882DAB44(a2, a3)) {
      return 0LL;
    }
  }

uint64_t krb5_krbhst_next(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1882DAB44(a2, a3)) {
    return 0LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, void *))(a2 + 120))(a1, a2, a3);
  }
}

BOOL sub_1882DAB44(uint64_t a1, void *a2)
{
  int v4 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  uint64_t v5 = **(void **)(a1 + 176);
  if (v5)
  {
    *a2 = v5;
    *(void *)(a1 + 176) = **(void **)(a1 + 176) + 16LL;
  }

  BOOL v6 = v5 != 0;
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t krb5_krbhst_next_as_string(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  LODWORD(result) = sub_1882DAB44(a2, v9);
  if ((_DWORD)result
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(a2 + 120))(a1, a2, v9), !(_DWORD)result))
  {
    krb5_krbhst_format_string(result, *(int **)v9, a3, a4);
    return 0LL;
  }

  return result;
}

uint64_t krb5_krbhst_set_hostname(_krb5_context *a1, uint64_t a2, char *__s1)
{
  BOOL v6 = *(void **)(a2 + 128);
  if (v6) {
    free(v6);
  }
  int v7 = strdup(__s1);
  *(void *)(a2 + 128) = v7;
  if (v7) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_krbhst_set_sitename(_krb5_context *a1, uint64_t a2, char *__s1)
{
  BOOL v6 = *(void **)(a2 + 136);
  if (v6) {
    free(v6);
  }
  int v7 = strdup(__s1);
  *(void *)(a2 + 136) = v7;
  if (v7) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_krbhst_set_delgated_uuid(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a3)
  {
    *(_DWORD *)(a2 + 104) |= 0x1000u;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)a3;
    sub_1882DFCE8( a1,  5,  "krb5_krbhst_set_delegated_uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  *a3,  a3[1],  a3[2],  a3[3],  a3[4],  a3[5],  a3[6],  a3[7],  a3[8],  a3[9],  a3[10],  a3[11],  a3[12],  a3[13],  a3[14],  a3[15]);
  }

  return 0LL;
}

uint64_t krb5_krbhst_set_delgated_pid(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    *(_DWORD *)(a2 + 104) |= 0x1000u;
    *(_DWORD *)(a2 + 160) = a3;
    sub_1882DFCE8(a1, 5, "krb5_krbhst_set_delegated_pid: %d", a3);
  }

  return 0LL;
}

uint64_t krb5_krbhst_reset(uint64_t a1, uint64_t a2)
{
  int v3 = (pthread_mutex_t *)(a2 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  *(void *)(a2 + 176) = a2 + 168;
  return pthread_mutex_unlock(v3);
}

void krb5_krbhst_free(uint64_t a1, const void *a2)
{
}

uint64_t sub_1882DAE04(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = a3;
  uint64_t v6 = a2;
  BOOL v7 = krb5_homedir_access(a1) != 0;
  return krb5_plugin_run_f(a1, "krb5", "service_locator", 0, 0LL, (uint64_t)&v5, (uint64_t)sub_1882DB8D4);
}

void sub_1882DAE6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strings = (void **)krb5_config_get_strings(a1, 0LL, a3, a4, a5, a6, a7, a8, (uint64_t)"realms");
  int v11 = "";
  if (!strings) {
    int v11 = " not";
  }
  sub_1882DFCE8(a1, 2, "configuration file for realm %s%s found", *(const char **)(a2 + 96), v11);
  if (strings)
  {
    *(_DWORD *)(a2 + 104) |= 0x100u;
    uint64_t v12 = (char *)*strings;
    if (*strings)
    {
      uint64_t v13 = (char **)(strings + 1);
      do
      {
        sub_1882DB508(a1, a2, (uint64_t)"config", v12, *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 112));
        uint64_t v14 = *v13++;
        uint64_t v12 = v14;
      }

      while (v14);
    }

    krb5_config_free_strings(strings);
  }

void sub_1882DAF54(_krb5_context *a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  unint64_t v27 = 0LL;
  if (!krb5_realm_is_lkdc(*(const char **)(a2 + 96)))
  {
    if (!strcasecmp(a4, "udp"))
    {
      int v10 = 0;
    }

    else
    {
      if (strcasecmp(a4, "tcp"))
      {
        if (!strcasecmp(a4, "http"))
        {
          uint64_t v12 = 0LL;
          unsigned int v11 = bswap32(krb5_getportbyname((int)a1, "http", "tcp", 0x50u)) >> 16;
          int v10 = 2;
        }

        else
        {
          if (strcasecmp(a4, "kkdcp"))
          {
            return;
          }

          unsigned int v11 = bswap32(krb5_getportbyname((int)a1, "https", "tcp", 0x1BBu)) >> 16;
          uint64_t v12 = "kkdcp";
          int v10 = 3;
        }

uint64_t sub_1882DB2FC( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __s = 0LL;
  uint64_t result = krb5_config_get_BOOL_default(a1, 0LL, 0LL, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!(_DWORD)result) {
    goto LABEL_5;
  }
  sub_1882DFCE8( a1,  2,  "fallback lookup %d for realm %s (service %s)",  *(_DWORD *)(a2 + 164),  *(const char **)(a2 + 96),  "kerberos");
  if (*(_DWORD *)(a2 + 164) > 4u || krb5_realm_is_lkdc(*(const char **)(a2 + 96)))
  {
LABEL_4:
    uint64_t result = 0LL;
LABEL_5:
    *(_DWORD *)(a2 + 104) |= 0x80u;
    return result;
  }

  if (*(_DWORD *)(a2 + 164)) {
    int v13 = asprintf(&__s, "%s-%d.%s.");
  }
  else {
    int v13 = asprintf(&__s, "%s.%s.");
  }
  int v14 = v13;
  uint64_t result = 12LL;
  if ((v14 & 0x80000000) == 0 && __s)
  {
    sub_1882DA1F4((uint64_t)&v20, v8);
    snprintf(__str, 0x20uLL, "%d", a3);
    if (getaddrinfo(__s, __str, &v20, &v21))
    {
      free(__s);
      goto LABEL_4;
    }

    size_t v15 = strlen(__s);
    uint64_t v16 = (int *)calloc(1uLL, v15 + 56);
    if (v16)
    {
      uint64_t v17 = v16;
      *uint64_t v16 = v8;
      *((_WORD *)v16 + 3) = a3;
      *((_WORD *)v16 + 2) = a3;
      uint64_t v18 = __s;
      *((void *)v16 + 1) = v21;
      *((void *)v16 + 4) = "fallback";
      uint64_t v19 = (char *)(v16 + 12);
      memmove(v16 + 12, v18, v15);
      v19[v15] = 0;
      free(__s);
      sub_1882DB7E0(a1, a2, v17);
      uint64_t result = 0LL;
      ++*(_DWORD *)(a2 + 164);
    }

    else
    {
      free(__s);
      return 12LL;
    }
  }

  return result;
}

uint64_t sub_1882DB508(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, __int16 a5, int a6)
{
  LOWORD(v7) = a5;
  unsigned int v8 = __s;
  size_t v12 = strlen(__s);
  int v13 = calloc(1uLL, v12 + 56);
  if (!v13) {
    return 12LL;
  }
  int v14 = v13;
  _DWORD *v13 = (*(_DWORD *)(a2 + 104) >> 9) & 1;
  if (!strncmp(v8, "http://", 7uLL))
  {
    *(_DWORD *)int v14 = 2;
    v8 += 7;
    goto LABEL_14;
  }

  if (!strncmp(v8, "http/", 5uLL))
  {
    *(_DWORD *)int v14 = 2;
    v8 += 5;
    size_t v15 = "http";
    int v16 = a1;
    unsigned int v17 = 80;
LABEL_11:
    unsigned int v7 = bswap32(krb5_getportbyname(v16, v15, "tcp", v17)) >> 16;
    goto LABEL_14;
  }

  if (!strncmp(v8, "kkdcp://", 8uLL))
  {
    *(_DWORD *)int v14 = 3;
    v8 += 8;
    size_t v15 = "https";
    int v16 = a1;
    unsigned int v17 = 443;
    goto LABEL_11;
  }

  if (!strncmp(v8, "tcp/", 4uLL))
  {
    *(_DWORD *)int v14 = 1;
    goto LABEL_13;
  }

  if (!strncmp(v8, "udp/", 4uLL))
  {
    *(_DWORD *)int v14 = 0;
LABEL_13:
    v8 += 4;
  }

uint64_t sub_1882DB7E0(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v11 = (pthread_mutex_t *)(a2 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  if (a3)
  {
    do
    {
      int v5 = (int *)*((void *)a3 + 2);
      *((void *)a3 + 2) = 0LL;
      uint64_t v6 = *(int **)(a2 + 168);
      if (v6)
      {
        int v7 = *a3;
        while (1)
        {
          int v8 = *v6;
          if (*v6 == v7)
          {
            int v9 = *((unsigned __int16 *)v6 + 2);
          }

          uint64_t v6 = (int *)*((void *)v6 + 2);
          if (!v6) {
            goto LABEL_8;
          }
        }

        sub_1882DFCE8(a1, 10, "dropping dup KDC host: %s:%d (proto %d)", (const char *)v6 + 48, v9, v8);
        sub_1882D9F68(a3);
      }

      else
      {
LABEL_8:
        **(void **)(a2 + 184) = a3;
        *(void *)(a2 + 184) = a3 + 4;
      }

      a3 = v5;
    }

    while (v5);
  }

  return pthread_mutex_unlock(v11);
}

uint64_t sub_1882DB8D4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(int *)a2 >= 3)
  {
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void *))(a2 + 40);
    if (v4)
    {
      uint64_t v5 = *a4;
      uint64_t v6 = *((void *)a4 + 2);
      uint64_t v7 = *(void *)(*((void *)a4 + 1) + 96LL);
      int v8 = sub_1882DB974;
      return v4(a3, v6, v5, v7, 0LL, 0LL, v8);
    }

LABEL_5:
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void *))(a2 + 32);
    uint64_t v5 = *a4;
    uint64_t v6 = *((void *)a4 + 2);
    uint64_t v7 = *(void *)(*((void *)a4 + 1) + 96LL);
    int v8 = sub_1882DB990;
    return v4(a3, v6, v5, v7, 0LL, 0LL, v8);
  }

  if (*(_DWORD *)a2 == 2) {
    goto LABEL_5;
  }
  if ((a4[4] & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t (*)(_DWORD *, uint64_t, const sockaddr *)))(a2 + 24))( a3,  *a4,  *(void *)(*((void *)a4 + 1) + 96LL),  0LL,  0LL,  sub_1882DB990);
  }
  else {
    return 2529639161LL;
  }
}

    ++v12;
  }

  while (v12 != a2);
  uint64_t v67 = v11;
  int v23 = &a3[a2] - v14;
  BOOL v24 = (unsigned __int8 *)malloc(v23 + 1);
  if (!v24)
  {
    free(v11);
    goto LABEL_31;
  }

  dispatch_time_t v25 = v24;
  memcpy(v24, v14, v23);
  v25[v23] = 0;
  uint64_t v26 = sub_1882F5604(v25);
  if (v26)
  {
    if (v11)
    {
      int v27 = v11;
      do
      {
        size_t v28 = v27;
        int v27 = (_BYTE *)*((void *)v27 + 2);
      }

      while (v27);
      int v29 = v26;
      uint64_t v26 = v11;
    }

    else
    {
      int v29 = 0LL;
      size_t v28 = v26;
      unsigned int v11 = v26;
    }

    *((void *)v28 + 2) = v29;
    uint64_t v67 = v26;
    goto LABEL_32;
  }

  uint64_t v18 = 1LL;
  sub_1883106FC(a1, 1, (uint64_t)v17, v11, v12, v13, v14, v15, v40);
  return v18;
}

uint64_t sub_1882DB974(uint64_t a1, char *__s)
{
  return sub_1882DB508(*(void *)(a1 + 192), a1, (uint64_t)"plugin", __s, *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
}

uint64_t sub_1882DB990(_DWORD *a1, uint64_t a2, const sockaddr *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  socklen_t v5 = rk_socket_sockaddr_size((uint64_t)a3);
  __int16 v6 = sub_1882FBA0C((uint64_t)a3);
  if (getnameinfo(a3, v5, v11, 0x401u, __str, 0x20u, 10)) {
    return 0LL;
  }
  int v8 = a1[28];
  if (!v8)
  {
    if (atoi(__str)) {
      goto LABEL_6;
    }
    int v8 = a1[27];
  }

  snprintf(__str, 0x20uLL, "%d", v8);
LABEL_6:
  unsigned int v9 = (a1[26] >> 9) & 1;
  uint64_t result = sub_1882DBAB8((uint64_t)a1, v11, __str, v6, v9);
  if (!(_DWORD)result)
  {
    if (v9) {
      return 0LL;
    }
    uint64_t result = sub_1882DBAB8((uint64_t)a1, v11, __str, v6, 1u);
    if (!(_DWORD)result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1882DBAB8(uint64_t a1, const char *a2, const char *a3, __int16 a4, unsigned int a5)
{
  if (!getaddrinfo(a2, a3, &v16, &v15))
  {
    size_t v10 = strlen(a2);
    unsigned int v11 = (int *)calloc(1uLL, v10 + 56);
    if (!v11) {
      return 12LL;
    }
    uint64_t v12 = v11;
    int *v11 = a5;
    *((_WORD *)v11 + 3) = a4;
    *((_WORD *)v11 + 2) = a4;
    *((void *)v11 + 1) = v15;
    *((void *)v11 + 4) = "plugin";
    int v13 = (char *)(v11 + 12);
    memmove(v11 + 12, a2, v10);
    v13[v10] = 0;
    sub_1882DB7E0(*(void *)(a1 + 192), a1, v12);
  }

  return 0LL;
}

void sub_1882DBB94(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v4 = 0LL;
      uint64_t v5 = MEMORY[0x1895F87A8];
      do
      {
        __int16 v6 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 208LL);
        v7[0] = v5;
        v7[1] = 0x40000000LL;
        krb5_deltat v7[2] = sub_1882DBC64;
        v7[3] = &unk_18A219CD8;
        v7[4] = a1;
        v7[5] = v4;
        dispatch_sync(v6, v7);
        heim_release(*(CFTypeRef *)(*(void *)(a1 + 88) + 8 * v4++));
      }

      while (v4 < *(unsigned int *)(a1 + 96));
      int v3 = *(void **)(a1 + 88);
    }

    free(v3);
    *(_DWORD *)(a1 + 96) = 0;
  }

  heim_release(*(CFTypeRef *)(a1 + 48));
}

void sub_1882DBC64(uint64_t a1)
{
  uint64_t v2 = *(_DNSServiceRef_t **)(*(void *)(*(void *)(*(void *)(a1 + 32) + 88LL) + 8LL * *(void *)(a1 + 40)) + 64LL);
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 88LL) + 8 * v3) + 64LL) = 0LL;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 88LL) + 8 * v3);
    if ((*(_BYTE *)(v4 + 96) & 1) == 0)
    {
      *(_BYTE *)(v4 + 96) |= 1u;
      heim_release(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 88LL) + 8LL * *(void *)(a1 + 40)));
    }
  }

uint64_t sub_1882DBCDC(uint64_t a1, char *__s1, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = (unsigned __int8 *)strdup(__s1);
  rk_strlwr(v7);
  nw_endpoint_t host = nw_endpoint_create_host((const char *)v7, "88");
  if (host)
  {
    nw_endpoint_t v9 = host;
    nw_parameters_t v10 = nw_parameters_create();
    if (v10)
    {
      nw_parameters_t v11 = v10;
      if ((*(_BYTE *)(a3 + 105) & 0x10) != 0)
      {
        sub_1882DFCE8(a1, 5, "host_create(%s): have delegate uuid", (const char *)v7);
        nw_parameters_set_e_proc_uuid();
      }

      else
      {
        getpid();
        nw_parameters_set_pid();
      }

      uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
      if (evaluator_for_endpoint)
      {
        size_t v15 = (void *)evaluator_for_endpoint;
        uint64_t v16 = nw_path_evaluator_copy_path();
        if (v16)
        {
          unsigned int v17 = (void *)v16;
          if (nw_path_is_flow_divert())
          {
            if ((nw_path_get_vpn_config_id() & 1) != 0)
            {
              sub_1882DFCE8( a1,  5,  "host_create(%s): vpn config uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  (const char *)v7,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36);
              nw_path_is_per_app_vpn();
              dns_service_krb5_ccache id = ne_session_service_get_dns_service_id();
              sub_1882DFCE8(a1, 5, "host_create(%s): AppVPN: %d", (const char *)v7, dns_service_id);
              if ((_DWORD)dns_service_id) {
                *a4 |= 0x10000000u;
              }
            }

            else
            {
              sub_1882DFCE8(a1, 5, "host_create(%s): path have no config id", (const char *)v7);
              dns_service_krb5_ccache id = 0LL;
            }

            addrinfo v20 = 0LL;
          }

          else
          {
            uint64_t v19 = (nw_interface *)nw_path_copy_scoped_interface();
            addrinfo v20 = v19;
            if (v19)
            {
              dns_service_krb5_ccache id = nw_interface_get_index(v19);
              sub_1882DFCE8(a1, 5, "host_create(%s): use dns_service_id %d", (const char *)v7, dns_service_id);
            }

            else
            {
              sub_1882DFCE8(a1, 5, "host_create(%s): no interface", (const char *)v7);
              dns_service_krb5_ccache id = 0LL;
            }
          }

          nw_release(v17);
          nw_release(v9);
          nw_release(v15);
          if (v20) {
            nw_release(v20);
          }
LABEL_27:
          nw_release(v11);
          if (!v7) {
            return dns_service_id;
          }
          goto LABEL_8;
        }

        sub_1882DFCE8(a1, 5, "host_create(%s): path is NULL", (const char *)v7);
        nw_release(v9);
        nw_endpoint_t v18 = (nw_endpoint_t)v15;
      }

      else
      {
        sub_1882DFCE8(a1, 5, "host_create(%s): nw_path_evaluator_t is NULL", (const char *)v7);
        nw_endpoint_t v18 = v9;
      }

      nw_release(v18);
      dns_service_krb5_ccache id = 0LL;
      goto LABEL_27;
    }

    sub_1882DFCE8(a1, 5, "host_create(%s): nw_parameters_t is NULL", (const char *)v7);
    nw_release(v9);
  }

  else
  {
    sub_1882DFCE8(a1, 5, "host_create(%s): nw_endpoint_t host is NULL", (const char *)v7);
  }

  dns_service_krb5_ccache id = 0LL;
  if (v7) {
LABEL_8:
  }
    free(v7);
  return dns_service_id;
}

void sub_1882DC00C( uint64_t a1, char a2, uint64_t a3, int a4, const char *a5, int a6, uint64_t a7, unsigned int a8, const u_char *a9, uint64_t a10, uint64_t a11)
{
  if ((*(_BYTE *)(a11 + 80) & 1) != 0)
  {
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "Got SRV callback after MoreComing == 0 was already set!");
    return;
  }

  if (a4)
  {
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV callback: error: %d", a4);
    char v12 = 0;
LABEL_9:
    int v14 = (uint64_t *)(a11 + 32);
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV callback end: %s", a5);
    goto LABEL_10;
  }

  char v12 = a2;
  if (a6 != 33)
  {
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV callback: rd_len no srv query");
    goto LABEL_9;
  }

  if (a8 <= 6)
  {
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV callback: rd_len too short: %d");
    goto LABEL_9;
  }

  unsigned int v40 = __rev16(*(unsigned __int16 *)a9);
  unsigned int v41 = __rev16(*((unsigned __int16 *)a9 + 1));
  unsigned int v42 = __rev16(*((unsigned __int16 *)a9 + 2));
  int v14 = (uint64_t *)(a11 + 32);
  sub_1882DFCE8(*(void *)(a11 + 32), 10, "Got SRV callback: %s:%d prio: %d weight: %d", a5, v42, v40, v41);
  krb5_magic v43 = (char *)malloc(a8 + 1);
  if (!v43)
  {
    sub_1882DFCE8(*v14, 10, "SRV callback: failed to allocate hostname", v71);
    goto LABEL_9;
  }

  __int16 v44 = v43;
  unsigned int v45 = res_9_dn_expand(a9, &a9[a8], a9 + 6, v43, a8);
  if ((v45 & 0x80000000) != 0 || (unint64_t)v45 + 6 > a8)
  {
    sub_1882DFCE8(*v14, 10, "SRV callback: dn_expand: %d");
LABEL_62:
    sub_1882DFCE8(*v14, 10, "SRV callback end: %s", a5);
    free(v44);
    goto LABEL_10;
  }

  size_t v46 = strlen(v44);
  if (v46 && v44[v46 - 1] == 46) {
    v44[v46 - 1] = 0;
  }
  uint64_t v52 = heim_uniq_alloc(0x68uLL, (uint64_t)"heim-srv-object", (uint64_t)sub_1882DC904, v47, v48, v49, v50, v51);
  if (!v52)
  {
    sub_1882DFCE8(*v14, 10, "SRV callback: alloc heim-srv-object");
    goto LABEL_62;
  }

  uint64_t v53 = v52;
  *(_WORD *)(v52 + 32) = v42;
  *(_WORD *)(v52 + 34) = v40;
  *(_DWORD *)(v52 + 36) = v41;
  *(void *)(v52 + 40) = a11;
  *(void *)(v52 + 80) = v44;
  uint64_t v54 = *(_krb5_context **)(a11 + 32);
  if ((*(_BYTE *)(*(void *)(a11 + 48) + 105LL) & 0x10) != 0)
  {
    char v58 = sub_1882CE690(v54);
    uint64_t v59 = *(void *)(a11 + 48);
    LODWORD(v74[0]) = 69632;
    v75[0] = 0LL;
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "Got delegated query on: %s", *(const char **)(v53 + 80));
    *(void *)(v53 + 72) = heim_retain(*(CFTypeRef *)(v59 + 208));
    int DelegateConnection = DNSServiceCreateDelegateConnection();
    uint64_t v61 = *(void *)(a11 + 32);
    if (DelegateConnection)
    {
      sub_1882DFCE8(v61, 2, "Failed setting up search context for addrinfo resolving for %s failed: %d");
      goto LABEL_70;
    }

    sub_1882DFCE8(v61, 10, "setting queue");
    DNSServiceErrorType v63 = DNSServiceSetDispatchQueue(*(DNSServiceRef *)(v53 + 56), *(dispatch_queue_t *)(v53 + 72));
    uint64_t v64 = *v14;
    if (v63)
    {
      sub_1882DFCE8(v64, 2, "Failed setting run queue for SRV query: %d");
      goto LABEL_70;
    }

    uint32_t v65 = sub_1882DBCDC(v64, *(char **)(*(void *)(a11 + 48) + 96LL), v59, v74);
    dispatch_semaphore_t v66 = j__dispatch_semaphore_create(0LL);
    *(void *)(v53 + 48) = v66;
    if (!v66) {
      goto LABEL_70;
    }
    heim_retain((CFTypeRef)v53);
    if ((v58 & 1) != 0)
    {
      if ((v58 & 2) != 0)
      {
        DNSServiceProtocol v68 = 3;
      }

      else
      {
        *(_BYTE *)(v53 + 96) |= 0x20u;
        DNSServiceProtocol v68 = 1;
      }
    }

    else
    {
      char v67 = *(_BYTE *)(v53 + 96);
      *(_BYTE *)(v53 + 96) = v67 | 0x10;
      if ((v58 & 2) == 0)
      {
        *(_BYTE *)(v53 + 96) = v67 | 0x30;
        sub_1882DFCE8(*v14, 10, "No support address families: %s");
        goto LABEL_82;
      }

      DNSServiceProtocol v68 = 2;
    }

    sub_1882DFCE8(*v14, 10, "DNS SRV using address flags: %08x", v68);
    asprintf(v75, "%s.", *(const char **)(v53 + 80));
    *(void *)(v53 + 64) = *(void *)(v53 + 56);
    DNSServiceErrorType AddrInfo = DNSServiceGetAddrInfo( (DNSServiceRef *)(v53 + 64),  LODWORD(v74[0]) | 0x4000,  v65,  v68,  v75[0],  (DNSServiceGetAddrInfoReply)sub_1882DC9D8,  (void *)v53);
    free(v75[0]);
    if (AddrInfo)
    {
      sub_1882DFCE8(*v14, 10, "Failed doing A/AAAA lookup: %s: %d");
      goto LABEL_82;
    }
  }

  else
  {
    sub_1882DFCE8((uint64_t)v54, 10, "Adding host: %s:%d", v44, v42);
    sub_1882DCD44(v53, *(char **)(v53 + 80), 0LL, (uint64_t)"srv", a11);
  }

  uint64_t v55 = realloc(*(void **)(a11 + 88), 8LL * (*(_DWORD *)(a11 + 96) + 1));
  if (!v55)
  {
    sub_1882DFCE8(*v14, 10, "SRV callback: realloc failed");
    if (*(void *)(v53 + 64))
    {
      int v62 = *(dispatch_queue_s **)(v53 + 72);
      v72[0] = MEMORY[0x1895F87A8];
      v72[1] = 0x40000000LL;
      v72[2] = sub_1882DCE14;
      v72[3] = &unk_18A219D18;
      v72[4] = v53;
      dispatch_sync(v62, v72);
      goto LABEL_70;
    }

LABEL_82:
    heim_release((CFTypeRef)v53);
    goto LABEL_70;
  }

  *(void *)(a11 + 88) = v55;
  CFTypeRef v56 = heim_retain((CFTypeRef)v53);
  uint64_t v57 = *(unsigned int *)(a11 + 96);
  *(void *)(*(void *)(a11 + 88) + 8 * v57) = v56;
  *(_DWORD *)(a11 + 96) = v57 + 1;
LABEL_70:
  sub_1882DFCE8(*v14, 10, "SRV callback end: %s", a5);
  heim_release((CFTypeRef)v53);
LABEL_10:
  if ((v12 & 1) == 0)
  {
    sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV callback no more coming");
    time_t v15 = time(0LL);
    if ((*(_BYTE *)(a11 + 80) & 1) != 0) {
      heim_abort( "DNS-SD invariant not true, canceled but got error message:!query->state.srvQueryDone",  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v70);
    }
    *(_BYTE *)(a11 + 80) |= 1u;
    if (*(_DWORD *)(a11 + 96))
    {
      unint64_t v23 = 0LL;
      time_t v24 = v15 + 10;
      unsigned __int8 v25 = (char *)MEMORY[0x1895F87A8];
      do
      {
        uint64_t v26 = *(void *)(*(void *)(a11 + 88) + 8 * v23);
        uint64_t v27 = *(void *)(v26 + 88);
        if (v27)
        {
          unsigned __int8 v28 = (const char *)(v27 + 48);
        }

        else
        {
          unsigned __int8 v29 = *(const char **)(v26 + 80);
          if (v29) {
            unsigned __int8 v28 = v29;
          }
          else {
            unsigned __int8 v28 = "<no-hostname>";
          }
        }

        uint64_t v30 = v24 - time(0LL);
        uint64_t v31 = *(void *)(*(void *)(*(void *)(a11 + 88) + 8 * v23) + 48LL);
        if (v31) {
          BOOL v32 = v30 < 1;
        }
        else {
          BOOL v32 = 1;
        }
        if (v32)
        {
          if (!v31) {
            goto LABEL_36;
          }
        }

        else if (v23 < *(unsigned int *)(*v14 + 344))
        {
          sub_1882DFCE8(*v14, 10, "SRV waiting for addrinfo: %s", v28);
          if (sub_188318C5C(*(dispatch_semaphore_s **)(*(void *)(*(void *)(a11 + 88) + 8 * v23) + 48LL), v30))
          {
            unsigned __int8 v33 = *(dispatch_queue_s **)(*(void *)(a11 + 48) + 208LL);
            v74[0] = v25;
            v74[1] = 0x40000000LL;
            v74[2] = sub_1882DCFA4;
            v74[3] = &unk_18A219D80;
            v74[4] = a11;
            v74[5] = v23;
            unsigned __int8 v34 = v74;
LABEL_31:
            dispatch_sync(v33, v34);
            uint64_t v35 = *v14;
            if (qword_18C707448 != -1) {
              dispatch_once(&qword_18C707448, &unk_18A219DE0);
            }
            if (qword_18C707438 && qword_18C707440)
            {
              sub_1882DFCE8(v35, 10, " DNS adding negative cache for %s for %ld seconds", v28, 3600LL);
              v75[0] = v25;
              v75[1] = (char *)0x40000000;
              v75[2] = (char *)sub_1882DD014;
              v75[3] = (char *)&unk_18A219E00;
              v75[4] = (char *)3600;
              v75[5] = (char *)v28;
              dispatch_sync((dispatch_queue_t)qword_18C707438, v75);
            }

            goto LABEL_36;
          }

          goto LABEL_36;
        }

        if (*(void *)(*(void *)(a11 + 48) + 208LL))
        {
          sub_1882DFCE8(*(void *)(a11 + 32), 10, "SRV timeout waiting for addrinfo: %s", v28);
          unsigned __int8 v33 = *(dispatch_queue_s **)(*(void *)(a11 + 48) + 208LL);
          block[0] = v25;
          block[1] = 0x40000000LL;
          block[2] = sub_1882DCFC0;
          block[3] = &unk_18A219DA0;
          block[4] = a11;
          void block[5] = v23;
          unsigned __int8 v34 = block;
          goto LABEL_31;
        }

void sub_1882DC80C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(_BYTE *)(v2 + 80) & 1) == 0)
  {
    *(_BYTE *)(v2 + 80) |= 1u;
    heim_release(*(CFTypeRef *)(a1 + 40));
  }

uint64_t sub_1882DC854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (qword_18C707438) {
    BOOL v3 = qword_18C707440 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000LL;
  uint64_t v9 = 0LL;
  if (!v3)
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1882DCE6C;
    block[3] = &unk_18A219D40;
    block[4] = &v6;
    void block[5] = a2;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_18C707438, block);
    uint64_t v2 = v7[3];
  }

  _Block_object_dispose(&v6, 8);
  return v2;
}

void *sub_1882DC904(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 96) & 1) == 0) {
    sub_1882DFCE8(0LL, 10, "srv_release w/o getAddrDone set");
  }
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    heim_release(v2);
  }
  BOOL v3 = *(dispatch_queue_s **)(a1 + 72);
  if (v3)
  {
    int8x16_t v7 = *(int8x16_t *)(a1 + 56);
    *(void *)(a1 + 56) = 0LL;
    *(void *)(a1 + 64) = 0LL;
    heim_retain(v3);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1882DCF6C;
    block[3] = &unk_18A219D60;
    int8x16_t v9 = vextq_s8(v7, v7, 8uLL);
    nw_parameters_t v10 = v3;
    dispatch_async(v3, block);
  }

  uint64_t v4 = *(void **)(a1 + 80);
  if (v4) {
    free(v4);
  }
  uint64_t result = *(void **)(a1 + 88);
  if (result)
  {
    do
    {
      uint64_t v6 = (void *)result[2];
      sub_1882D9F68(result);
      uint64_t result = v6;
    }

    while (v6);
  }

  return result;
}

void sub_1882DC9D8( uint64_t a1, char a2, uint64_t a3, int a4, char *a5, const sockaddr *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a8 + 40);
  unsigned __int8 v28 = 0LL;
  if ((*(_BYTE *)(a8 + 96) & 1) != 0) {
    return;
  }
  if ((*(_BYTE *)(a8 + 96) & 2) != 0)
  {
    sub_1882DFCE8(*(void *)(v8 + 32), 10, "SRV getaddrinfo: canceled: %s");
    goto LABEL_13;
  }

  if (!a4)
  {
    sub_1882DFCE8(*(void *)(v8 + 32), 10, "DNS getaddrinfo callback on: %s for af = %d", a5, a6->sa_family);
    int sa_family = a6->sa_family;
    if (sa_family == 2)
    {
      char v16 = 4;
    }

    else
    {
      if (sa_family != 30)
      {
        int v17 = 1;
LABEL_41:
        socklen_t v23 = sub_1882FB9CC((uint64_t)a6);
        if (!getnameinfo(a6, v23, v30, 0x401u, 0LL, 0, 2))
        {
          snprintf(__str, 0x20uLL, "%d", *(unsigned __int16 *)(a8 + 32));
          unsigned int v24 = *(_DWORD *)(v8 + 68);
          sub_1882DA1F4((uint64_t)&v27, v24);
          int v25 = a6->sa_family;
          v27.ai_krb5_flags flags = 4100;
          v27.ai_family = v25;
          sub_1882DFCE8( *(void *)(v8 + 32),  10,  " SRV getaddrinfo: %s domain: proto: %d addr: %s:%d",  *(const char **)(v8 + 56),  v24,  v30,  *(unsigned __int16 *)(a8 + 32));
          int v26 = getaddrinfo(v30, __str, &v27, &v28);
          if (v26) {
            sub_1882DFCE8( *(void *)(v8 + 32),  10,  " SRV getaddrinfo: failed to parse host: [%s]:%s error: %d",  v30,  __str,  v26);
          }
          if (v28)
          {
            sub_1882DFCE8( *(void *)(v8 + 32),  10,  " Adding srv-addrinfo host: %s:%d",  a5,  *(unsigned __int16 *)(a8 + 32));
            sub_1882DCD44(a8, a5, v28, (uint64_t)"srv-addrinfo", v8);
          }
        }

        goto LABEL_14;
      }

      char v16 = 8;
    }

    int v17 = 0;
    *(_BYTE *)(a8 + 96) |= v16;
    goto LABEL_41;
  }

  if (a4 == -65554)
  {
    int v13 = a6->sa_family;
    if (v13 == 2)
    {
      char v14 = 16;
    }

    else
    {
      if (v13 != 30)
      {
        int v17 = 1;
        goto LABEL_37;
      }

      char v14 = 32;
    }

    int v17 = 0;
    *(_BYTE *)(a8 + 96) |= v14;
LABEL_37:
    sub_1882DFCE8( *(void *)(v8 + 32),  10,  "SRV callback: getaddrinfo on %s: no such record for af = %d",  a5,  a6->sa_family);
    goto LABEL_14;
  }

  sub_1882DFCE8(*(void *)(v8 + 32), 10, "SRV getaddrinfo other error: %d");
LABEL_13:
  int v17 = 1;
LABEL_14:
  uint64_t v18 = "more coming";
  if ((a2 & 1) == 0) {
    uint64_t v18 = "done";
  }
  uint64_t v19 = "yes";
  if ((*(_BYTE *)(a8 + 96) & 4) != 0) {
    uint64_t v20 = "yes";
  }
  else {
    uint64_t v20 = "waiting";
  }
  if ((*(_BYTE *)(a8 + 96) & 0x10) != 0) {
    uint64_t v20 = "no-rr";
  }
  if ((*(_BYTE *)(a8 + 96) & 8) == 0) {
    uint64_t v19 = "waiting";
  }
  if ((*(_BYTE *)(a8 + 96) & 0x20) != 0) {
    uint64_t v21 = "no-rr";
  }
  else {
    uint64_t v21 = v19;
  }
  sub_1882DFCE8(*(void *)(v8 + 32), 10, " SRV getaddrinfo end: %s (%s) (IPv4:%s) (IPv6:%s)", a5, v18, v20, v21);
  if (v17)
  {
    uint64_t v22 = "failed";
LABEL_28:
    sub_1882DFCE8(*(void *)(v8 + 32), 10, " DNS getaddrinfo done: %s %s", *(const char **)(a8 + 80), v22);
    *(_BYTE *)(a8 + 96) |= 1u;
    j__dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a8 + 48));
    heim_release((CFTypeRef)a8);
    return;
  }

  if ((*(_BYTE *)(a8 + 96) & 0x14) != 0 && (a2 & 1) == 0 && (*(_BYTE *)(a8 + 96) & 0x28) != 0)
  {
    uint64_t v22 = "success";
    goto LABEL_28;
  }

void sub_1882DCD44(uint64_t a1, char *__s, addrinfo *a3, uint64_t a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  nw_parameters_t v11 = (char *)calloc(1uLL, v10 + 56);
  if (v11)
  {
    char v12 = v11;
    int v13 = v11 + 48;
    size_t v14 = strlen(__s);
    memcpy(v13, __s, v14 + 1);
    *(_DWORD *)char v12 = *(_DWORD *)(a5 + 68);
    *((_WORD *)v12 + 3) = 0;
    *((_WORD *)v12 + 2) = *(_WORD *)(a1 + 32);
    time_t v15 = *(const char **)(a5 + 72);
    if (v15) {
      *((void *)v12 + 5) = strdup(v15);
    }
    *((void *)v12 + 4) = a4;
    uint64_t v16 = *(void *)(a1 + 88);
    *((void *)v12 + 1) = a3;
    *((void *)v12 + 2) = v16;
    *(void *)(a1 + 88) = v12;
  }

  else if (a3)
  {
    freeaddrinfo(a3);
  }

void sub_1882DCE14(uint64_t a1)
{
  uint64_t v2 = *(_DNSServiceRef_t **)(*(void *)(a1 + 32) + 64LL);
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *(void *)(*(void *)(a1 + 32) + 64LL) = 0LL;
    uint64_t v3 = *(void *)(a1 + 32);
    if ((*(_BYTE *)(v3 + 96) & 1) == 0)
    {
      *(_BYTE *)(v3 + 96) |= 1u;
      heim_release(*(CFTypeRef *)(a1 + 32));
    }
  }

void sub_1882DCE6C(uint64_t a1)
{
  CFStringRef v2 = heim_string_create(*(char **)(a1 + 40));
  if (v2)
  {
    CFStringRef v3 = v2;
    uint64_t v4 = (const __CFNumber *)heim_dict_copy_value((const __CFDictionary *)qword_18C707440, v2);
    if (v4)
    {
      uint64_t v5 = v4;
      time_t v6 = time(0LL);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (int)heim_number_get_int(v5);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) -= v6;
      heim_release(v5);
    }

    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v7 <= 0)
    {
      heim_dict_delete_key((CFMutableDictionaryRef)qword_18C707440, v3);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
    }

    else
    {
      sub_1882DFCE8( *(void *)(a1 + 48),  10,  " DNS negative cache for host %s for another %ld seconds",  *(const char **)(a1 + 40),  v7);
    }

    heim_release(v3);
  }

void sub_1882DCF6C(uint64_t a1)
{
  CFStringRef v2 = *(_DNSServiceRef_t **)(a1 + 32);
  if (v2) {
    DNSServiceRefDeallocate(v2);
  }
  CFStringRef v3 = *(_DNSServiceRef_t **)(a1 + 40);
  if (v3) {
    DNSServiceRefDeallocate(v3);
  }
  heim_release(*(CFTypeRef *)(a1 + 48));
}

uint64_t sub_1882DCFA4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 88LL) + 8LL * *(void *)(result + 40));
  *(_BYTE *)(v1 + 96) |= 2u;
  return result;
}

uint64_t sub_1882DCFC0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 88LL) + 8LL * *(void *)(result + 40));
  *(_BYTE *)(v1 + 96) |= 2u;
  return result;
}

dispatch_queue_t sub_1882DCFDC()
{
  qword_18C707440 = (uint64_t)heim_dict_create();
  dispatch_queue_t result = dispatch_queue_create("krbhst-dns-cache", 0LL);
  qword_18C707438 = (uint64_t)result;
  return result;
}

void sub_1882DD014(uint64_t a1)
{
  int v2 = time(0LL);
  CFNumberRef v3 = heim_number_create(*(_DWORD *)(a1 + 32) + v2);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFStringRef v5 = heim_string_create(*(char **)(a1 + 40));
    if (v5)
    {
      CFStringRef v6 = v5;
      heim_dict_set_value((__CFDictionary *)qword_18C707440, v5, v4);
      heim_release(v4);
      CFNumberRef v4 = (CFNumberRef)v6;
    }

    heim_release(v4);
  }

void sub_1882DD08C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    do
    {
      CFNumberRef v3 = (void *)v2[2];
      sub_1882D9F68(v2);
      int v2 = v3;
    }

    while (v3);
  }

  *(void *)(a1 + 168) = 0LL;
  CFNumberRef v4 = *(void **)(a1 + 128);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 128) = 0LL;
  }

  CFStringRef v5 = *(void **)(a1 + 136);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 136) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 216);
  if (v6)
  {
    *(void *)(a1 + 216) = 0LL;
    uint64_t v7 = *(dispatch_queue_s **)(a1 + 200);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1882DD168;
    block[3] = &unk_18A219E20;
    void block[4] = v6;
    dispatch_async(v7, block);
  }

  uint64_t v8 = *(dispatch_object_s **)(a1 + 200);
  if (v8)
  {
    sub_188318C48(v8);
    *(void *)(a1 + 200) = 0LL;
  }

  int8x16_t v9 = *(dispatch_object_s **)(a1 + 208);
  if (v9)
  {
    sub_188318C48(v9);
    *(void *)(a1 + 208) = 0LL;
  }

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  free(*(void **)(a1 + 96));
  *(void *)(a1 + 96) = 0LL;
}

void sub_1882DD168(uint64_t a1)
{
}

uint64_t sub_1882DD170( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int *a11, krb5_keyblock **a12, uint64_t a13)
{
  krb5_auth_context v78 = 0LL;
  *(void *)(a13 + 112) = 0LL;
  *(_OWORD *)(a13 + 80) = 0u;
  *(_OWORD *)(a13 + 96) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  *(_OWORD *)(a13 + 64) = 0u;
  *(_OWORD *)(a13 + 16) = 0u;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)a13 = 0u;
  krb5_data_zero(v77);
  unsigned int v24 = *(uint64_t (**)(_krb5_context *, uint64_t, __int128 *, _OWORD *))(*(void *)a2 + 240LL);
  if (v24)
  {
    uint64_t v75 = 0LL;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    memset(v76, 0, sizeof(v76));
    uint64_t checksum = v24(a1, a2, &v49, v76);
    if (!(_DWORD)checksum) {
      sub_1882FE394();
    }
    return checksum;
  }

  int v26 = *(_DWORD *)(a9 + 136);
  if (a6)
  {
    __int128 v49 = *a6;
    uint64_t v27 = *((void *)a6 + 3);
    *(void *)&__int128 v50 = *((void *)a6 + 2);
    *((void *)&v50 + 1) = v27;
    *((void *)&v52 + 1) = "Kerberos";
    uint64_t checksum = _krb5_s4u2self_to_checksumdata(a1, (uint64_t)&v49, (size_t *)v76);
    if ((_DWORD)checksum) {
      goto LABEL_45;
    }
    uint64_t v28 = krb5_crypto_init(a1, (const krb5_keyblock *)(a9 + 16), 0LL, &v48);
    if ((_DWORD)v28)
    {
      uint64_t checksum = v28;
      krb5_data_free(v76);
      goto LABEL_45;
    }

    uint64_t checksum = krb5_create_checksum( a1,  (_DWORD **)v48,  0x11u,  0,  *((uint64_t *)&v76[0] + 1),  *(uint64_t *)&v76[0],  (uint64_t)&v51);
    krb5_crypto_destroy(a1, (uint64_t)v48);
    krb5_data_free(v76);
    if ((_DWORD)checksum) {
      goto LABEL_45;
    }
    size_t v29 = sub_1882FE180();
    uint64_t v30 = malloc(v29);
    if (!v30)
    {
      uint64_t checksum = 12LL;
      goto LABEL_13;
    }

    size_t v46 = v29;
    uint64_t v47 = v30;
    uint64_t v31 = sub_1882FE160();
    if ((_DWORD)v31)
    {
      uint64_t checksum = v31;
      free(v47);
LABEL_13:
      sub_1882FD854();
      goto LABEL_45;
    }

    sub_1882FD854();
    if (v29) {
      krb5_abortx(a1, "internal asn1 error");
    }
    uint64_t checksum = krb5_padata_add(a1, a11, 129, (uint64_t)v47, 0LL);
    if ((_DWORD)checksum) {
      goto LABEL_45;
    }
  }

  *(void *)a13 = 0xC00000005LL;
  if (*(_DWORD *)(a8 + 16))
  {
    *(_DWORD *)(a13 + 80) = 1;
    BOOL v32 = calloc(1uLL, 4uLL);
    *(void *)(a13 + 88) = v32;
    if (!v32) {
      goto LABEL_44;
    }
    *BOOL v32 = *(_DWORD *)(a8 + 16);
  }

  else
  {
    uint64_t checksum = _krb5_init_etype(a1, 4LL, (unsigned int *)(a13 + 80), (uint64_t *)(a13 + 88), 0LL, v21, v22, v23);
    if ((_DWORD)checksum) {
      goto LABEL_45;
    }
  }

  *(_DWORD *)(a13 + 16) = v26 & 0xA | a5 & 0xFFFFFFF5;
  *(void *)(a13 + 96) = a4;
  uint64_t checksum = sub_1882FD3C0();
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
  unsigned __int8 v33 = calloc(1uLL, 0x18uLL);
  *(void *)(a13 + 40) = v33;
  if (!v33) {
    goto LABEL_44;
  }
  uint64_t checksum = sub_1882FD434();
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
  unsigned __int8 v34 = calloc(1uLL, 8uLL);
  *(void *)(a13 + 56) = v34;
  if (!v34) {
    goto LABEL_44;
  }
  *unsigned __int8 v34 = *(void *)(a8 + 56);
  *(_DWORD *)(a13 + 72) = a10;
  if (!a7) {
    goto LABEL_28;
  }
  uint64_t v35 = calloc(1uLL, 0x10uLL);
  *(void *)(a13 + 112) = v35;
  if (!v35 || (*uint64_t v35 = 1, v36 = calloc(1uLL, 0x48uLL), (*(void *)(*(void *)(a13 + 112) + 8LL) = v36) == 0LL))
  {
LABEL_44:
    uint64_t checksum = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory", v46);
    goto LABEL_45;
  }

  uint64_t checksum = sub_1882FD7AC();
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
LABEL_28:
  if (a11)
  {
    if (!*(void *)(a13 + 8))
    {
      uint64_t v37 = calloc(1uLL, 0x10uLL);
      *(void *)(a13 + 8) = v37;
      if (!v37)
      {
LABEL_51:
        uint64_t v44 = krb5_enomem(a1);
        goto LABEL_52;
      }
    }

    uint64_t checksum = sub_1882FD97C();
    if ((_DWORD)checksum) {
      goto LABEL_45;
    }
  }

  uint64_t checksum = krb5_auth_con_init(a1, &v78);
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
  uint64_t checksum = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)v78, (unsigned int *)(a9 + 16));
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
  uint64_t checksum = sub_1882DD6AC(a1, a13 + 16, (_DWORD *)(a8 + 104), *((const krb5_keyblock **)v78 + 5));
  if ((_DWORD)checksum) {
    goto LABEL_45;
  }
  if (!*(void *)(a13 + 8))
  {
    uint64_t v38 = calloc(1uLL, 0x10uLL);
    *(void *)(a13 + 8) = v38;
    if (!v38) {
      goto LABEL_51;
    }
  }

  uint64_t checksum = sub_1882DD808(a1, v78, a13 + 16, a2, a9, (uint64_t)v77);
  if (!(_DWORD)checksum)
  {
    if (a3)
    {
      *(void *)(a3 + 24) = v78;
      uint64_t checksum = sub_1882F9310(a1, a3, 0LL, v39, v40, v41, v42, v43);
      *(void *)(a3 + 24) = 0LL;
      if ((_DWORD)checksum) {
        goto LABEL_45;
      }
      uint64_t checksum = sub_1882F95E4(a1, a3, v77, a13);
      if ((_DWORD)checksum) {
        goto LABEL_45;
      }
      *(_DWORD *)(a3 + 4) &= ~0x20u;
    }

    uint64_t checksum = krb5_padata_add(a1, *(unsigned int **)(a13 + 8), 1, v77[1], v77[0]);
    if (!(_DWORD)checksum)
    {
      krb5_data_zero(v77);
      uint64_t v44 = krb5_auth_con_getlocalsubkey(a1, (uint64_t)v78, a12);
LABEL_52:
      uint64_t checksum = v44;
    }
  }

LABEL_45:
  if (v78) {
    krb5_auth_con_free(a1, v78);
  }
  if ((_DWORD)checksum)
  {
    *(void *)(a13 + 96) = 0LL;
    sub_1882FDA68();
  }

  krb5_data_free(v77);
  return checksum;
}

uint64_t sub_1882DD6AC(_krb5_context *a1, uint64_t a2, _DWORD *a3, const krb5_keyblock *a4)
{
  if (!*a3)
  {
    uint64_t v11 = 0LL;
LABEL_6:
    *(void *)(a2 + 88) = 0LL;
    return v11;
  }

  size_t v15 = 0LL;
  size_t v7 = sub_1882FD5B8();
  uint64_t v8 = malloc(v7);
  if (!v8) {
    return 12LL;
  }
  int8x16_t v9 = v8;
  uint64_t v10 = sub_1882FD598();
  if (!(_DWORD)v10)
  {
    if (v7 != v15) {
      krb5_abortx(a1, "internal error in ASN.1 encoder");
    }
    int v13 = calloc(1uLL, 0x20uLL);
    *(void *)(a2 + 88) = v13;
    if (!v13)
    {
      free(v9);
      uint64_t v11 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v11;
    }

    uint64_t v11 = krb5_crypto_init(a1, a4, 0LL, &v14);
    if (!(_DWORD)v11)
    {
      krb5_encrypt_EncryptedData(a1, (_DWORD **)v14, 5LL, v9, v15, 0, *(void *)(a2 + 88));
      free(v9);
      krb5_crypto_destroy(a1, (uint64_t)v14);
      return v11;
    }

    free(v9);
    free(*(void **)(a2 + 88));
    goto LABEL_6;
  }

  uint64_t v11 = v10;
  free(v9);
  return v11;
}

uint64_t sub_1882DD808(_krb5_context *a1, _krb5_auth_context *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  krb5_auth_context v16 = a2;
  size_t v10 = sub_1882FD9B0();
  uint64_t v11 = malloc(v10);
  if (!v11) {
    return 12LL;
  }
  char v12 = v11;
  uint64_t v13 = sub_1882FD990();
  if (!(_DWORD)v13)
  {
    if (v10) {
      krb5_abortx(a1, "internal error in ASN.1 encoder");
    }
    v15[0] = 0LL;
    v15[1] = (uint64_t)v12;
    uint64_t v13 = sub_1882E1E0C(a1, &v16, 0LL, v15, a4, a5, a6, 6u, 7u);
  }

  free(v12);
  return v13;
}

uint64_t sub_1882DD8F8(_krb5_context *a1, krb5_keyblock *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    sub_188318D28();
  }
  krb5_data_zero(&v14);
  krb5_keyblock_zero((uint64_t)&v12);
  if (!*(void *)a4) {
    goto LABEL_12;
  }
  uint64_t v9 = sub_1882DDAD8(a1, *(void *)(a4 + 8), *(krb5_keyblock **)a4, &v12);
  if ((_DWORD)v9) {
    return v9;
  }
  uint64_t v9 = krb5_crypto_init(a1, &v12, 0LL, &v13);
  krb5_free_keyblock_contents(a1, &v12);
  if ((_DWORD)v9) {
    return v9;
  }
  else {
    BOOL v10 = 0;
  }
  krb5_crypto_destroy(a1, (uint64_t)v13);
  if (!*(void *)a4 || v10)
  {
LABEL_12:
    uint64_t v9 = sub_1882DDAD8(a1, *(void *)(a4 + 8), a2, &v12);
    if ((_DWORD)v9) {
      return v9;
    }
    uint64_t v9 = krb5_crypto_init(a1, &v12, 0LL, &v13);
    krb5_free_keyblock_contents(a1, &v12);
    if ((_DWORD)v9) {
      return v9;
    }
    uint64_t v9 = krb5_decrypt_EncryptedData(a1, (uint64_t)v13, 8LL, a5 + 120, &v14);
    krb5_crypto_destroy(a1, (uint64_t)v13);
    if ((_DWORD)v9) {
      return v9;
    }
  }

  if (sub_1882FDCB0())
  {
    uint64_t v9 = sub_1882FDCE0();
    if ((_DWORD)v9) {
      krb5_set_error_message(a1, v9, "Failed to decode encpart in ticket");
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  krb5_data_free(&v14);
  return v9;
}

uint64_t sub_1882DDAD8(_krb5_context *a1, uint64_t a2, krb5_keyblock *a3, krb5_keyblock *a4)
{
  if (a2 && *(void *)(a2 + 80))
  {
    sub_1882DFCE8((uint64_t)a1, 5, "_krb5_fast_tgs_strengthen_key");
    uint64_t v8 = *(_DWORD **)(a2 + 80);
    krb5_magic magic = a3->magic;
    if (*v8 != a3->magic)
    {
      uint64_t v11 = 2529638953LL;
      krb5_set_error_message(a1, -1765328343, "strengthen_key %d not same enctype as reply key %d", *v8, magic);
      return v11;
    }

    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: strengthen_key", (uint64_t)v8);
    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: old reply_key", (uint64_t)a3);
    uint64_t v10 = _krb5_fast_cf2(a1, *(const krb5_keyblock **)(a2 + 80), "strengthenkey", a3, "replykey", a4, 0LL);
  }

  else
  {
    uint64_t v10 = krb5_copy_keyblock_contents(a1, a3, a4);
  }

  uint64_t v11 = v10;
  if (!(_DWORD)v10)
  {
    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: extract key", (uint64_t)a4);
    return 0LL;
  }

  return v11;
}

uint64_t krb5_tkt_creds_init( _krb5_context *a1, uint64_t a2, const krb5_creds *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  *a5 = 0LL;
  uint64_t v13 = heim_uniq_alloc(0x208uLL, (uint64_t)"tkt-ctx", (uint64_t)sub_1882DDD08, a4, (uint64_t)a5, a6, a7, a8);
  if (!v13) {
    return 12LL;
  }
  uint64_t v14 = v13;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = sub_1882DDD74;
  *(_DWORD *)(v13 + 48) = v9;
  *(void *)(v13 + 88) = a2;
  if ((v9 & 0x10) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    *(_DWORD *)(v13 + 68) |= 0x10000000u;
    *(_DWORD *)(v13 + 48) = v9 | 8;
    if ((v9 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  *(_DWORD *)(v13 + 68) |= 2u;
  if ((v9 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v9 & 0x80) != 0) {
LABEL_5:
  }
    *(_DWORD *)(v13 + 68) |= 0x8000u;
LABEL_6:
  uint64_t v15 = krb5_copy_creds(a1, a3, (krb5_creds **)(v13 + 96));
  if ((_DWORD)v15)
  {
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v16 = krb5_unparse_name(a1, *(krb5_const_principal *)(*(void *)(v14 + 96) + 8LL), (char **)(v14 + 56));
    if (!(_DWORD)v16)
    {
      *a5 = v14;
      return v16;
    }
  }

  heim_release((CFTypeRef)v14);
  return v16;
}

void sub_1882DDD08(uint64_t a1)
{
  int v2 = *(krb5_creds **)(a1 + 512);
  if (v2) {
    krb5_free_creds(*(krb5_context *)(a1 + 32), v2);
  }
  sub_1882DDEDC(*(_krb5_context **)(a1 + 32), a1);
  CFNumberRef v3 = *(krb5_creds ***)(a1 + 408);
  if (v3)
  {
    CFNumberRef v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = 1LL;
      do
      {
        krb5_free_creds(*(krb5_context *)(a1 + 32), v4);
        CFNumberRef v3 = *(krb5_creds ***)(a1 + 408);
        CFNumberRef v4 = v3[v5++];
      }

      while (v4);
    }

    free(v3);
  }

  free(*(void **)(a1 + 56));
}

uint64_t sub_1882DDD74(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = sub_1882DDF2C;
  return 0LL;
}

uint64_t krb5_tkt_creds_step(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, _DWORD *a6)
{
  uint64_t result = 0LL;
  *a6 = 0;
  *a5 = 0LL;
  *(_DWORD *)(a2 + 64) = 0;
  if (!*a4)
  {
    while (1)
    {
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void *, _DWORD *))(a2 + 40);
      if (!v21) {
        return 0LL;
      }
      uint64_t result = v21(a1, a2, a3, a4, a5, a6);
      if ((_DWORD)result) {
        break;
      }
      uint64_t v20 = *a4;
      if ((*(_BYTE *)a6 & 1) != 0)
      {
        if (!v20) {
          heim_abort("no data to send to KDC:out->length != 0", v13, v14, v15, v16, v17, v18, v19, v22);
        }
        if (!*a5) {
          heim_abort("no realm to send data too:*realm != NULL", v13, v14, v15, v16, v17, v18, v19, v22);
        }
        return 0LL;
      }

      if (v20) {
        heim_abort("out state but not state continue:out->length == 0", v13, v14, v15, v16, v17, v18, v19, v22);
      }
    }

    if (*(_DWORD *)(a2 + 64) != (_DWORD)result) {
      heim_abort("error not same as saved:ctx->error == ret", v13, v14, v15, v16, v17, v18, v19, v22);
    }
  }

  return result;
}

uint64_t krb5_tkt_creds_get_creds(_krb5_context *a1, uint64_t a2, krb5_creds **a3)
{
  if (*(void *)(a2 + 40)) {
    return 22LL;
  }
  if (*(void *)(a2 + 512)) {
    return krb5_copy_creds(a1, *(const krb5_creds **)(a2 + 512), a3);
  }
  return *(unsigned int *)(a2 + 64);
}

void krb5_tkt_creds_free(uint64_t a1, const void *a2)
{
}

void sub_1882DDEDC(_krb5_context *a1, uint64_t a2)
{
  *(void *)(a2 + 112) = 0LL;
}

uint64_t sub_1882DDF2C(_krb5_context *a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_DWORD *)(a2 + 104) = 0x8000;
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, **(void **)(a2 + 96));
  int principal = krb5_make_principal(a1, &v12, realm, "krbtgt", realm, 0LL);
  if (principal) {
    goto LABEL_2;
  }
  size_t v7 = *(_krb5_ccache **)(a2 + 88);
  krb5_principal v8 = v12;
  krb5_cc_clear_mcred(&mcreds);
  mcreds.uint64_t client = v8;
  if (krb5_cc_retrieve_cred(a1, v7, 0x80000000, &mcreds, (krb5_creds *)(a2 + 120)))
  {
    int v6 = -1765328243;
    if (krb5_unparse_name(a1, v8, &v14))
    {
      krb5_clear_error_message(a1);
    }

    else
    {
      krb5_set_error_message(a1, -1765328243, "Matching credential (%s) not found", v14);
      free(v14);
    }

    krb5_free_principal(a1, v12);
    goto LABEL_11;
  }

  krb5_free_principal(a1, v12);
  int principal = krb5_copy_principal(a1, **(krb5_const_principal **)(a2 + 96), (krb5_principal *)(a2 + 264));
  if (principal)
  {
LABEL_2:
    int v6 = principal;
LABEL_11:
    uint64_t v10 = sub_1882DE100;
    goto LABEL_12;
  }

  krb5_error_code v9 = krb5_copy_principal(a1, *(krb5_const_principal *)(*(void *)(a2 + 96) + 8LL), (krb5_principal *)(a2 + 272));
  uint64_t v10 = sub_1882DE100;
  if (v9)
  {
    int v6 = v9;
  }

  else
  {
    int v6 = krb5_principal_set_realm(a1, *(void *)(a2 + 272), *(char **)(*(void *)(a2 + 128) + 24LL));
    if (!v6) {
      uint64_t v10 = sub_1882DE164;
    }
  }

LABEL_12:
  *(_DWORD *)(a2 + 64) = v6;
  *(void *)(a2 + 40) = v10;
  return 0LL;
}

    krb5_clear_error_message(a1);
    return v7;
  }

  krb5_clear_error_message(a1);
  return 2314790661LL;
}

  if (v31) {
    krb5_crypto_destroy(a1, (uint64_t)v31);
  }
  sub_1882FDBDC();
  sub_1882FD568();
  free(v27);
  return checksum;
}

    uint64_t v16 = a1;
    uint64_t v17 = v13;
LABEL_13:
    hx509_set_error_string(v16, 0, v17, "Out of memory", v9, v10, v11, v12, v22);
    goto LABEL_14;
  }

  uint64_t v31 = 0LL;
  BOOL v32 = 0LL;
  int v26 = 0u;
  memset(v27, 0, 24);
  unsigned int v24 = calloc(1uLL, 0x10uLL);
  if (!v24) {
    goto LABEL_9;
  }
  int v25 = calloc(1uLL, 0x18uLL);
  if (!v25) {
    goto LABEL_9;
  }
  uint64_t v13 = hx509_name_to_Name_0();
  if ((_DWORD)v13) {
    goto LABEL_12;
  }
  uint64_t v28 = 0u;
  size_t v29 = *(_OWORD *)((char *)v27 + 8);
  uint64_t v30 = 0LL;
  LODWORD(v28) = 4;
  DWORD2(v28) = 1;
  uint64_t v13 = sub_188313838((unsigned int *)&v31);
  if ((_DWORD)v13) {
    goto LABEL_12;
  }
  uint64_t v14 = v24;
  *((void *)v24 + 1) = v32;
  char *v14 = v31;
  uint64_t v15 = der_copy_heim_integer();
  if (!v25)
  {
LABEL_9:
    uint64_t v13 = 12LL;
    goto LABEL_12;
  }

  uint64_t v13 = v15;
  if (!(_DWORD)v15) {
    goto LABEL_17;
  }
LABEL_14:
  sub_188313954();
LABEL_15:
  sub_188313954();
  return v13;
}

      uint64_t v14 = v13[++v16];
    }

    uint64_t v16 = strlen(v13);
    uint64_t v18 = 0LL;
LABEL_14:
    uint64_t v19 = strchr(v13, 61);
    if (!v19)
    {
      uint64_t v38 = (char)v13;
      unsigned __int8 v34 = "missing = in %s";
LABEL_35:
      uint64_t v35 = a1;
      unint64_t v36 = 569968;
      goto LABEL_36;
    }

    unsigned int v24 = v19 - v13;
    if (v19 == v13)
    {
      uint64_t v38 = (char)v13;
      unsigned __int8 v34 = "missing name before = in %s";
      goto LABEL_35;
    }

    int v25 = v16 - v24;
    if (v16 < v24)
    {
      uint64_t v38 = (char)v13;
      unsigned __int8 v34 = " = after , in %s";
      goto LABEL_35;
    }

    int v26 = 0LL;
    v41[0] = 0LL;
    v41[1] = 0LL;
    while (strncasecmp((&off_18A21EDB0)[v26], v13, v24))
    {
      v26 += 3LL;
      if (v26 == 39)
      {
        uint64_t v27 = malloc(v24 + 1);
        if (v27)
        {
          uint64_t v28 = v27;
          memcpy(v27, v13, v24);
          v28[v24] = 0;
          size_t v29 = der_parse_heim_oid();
          free(v28);
          goto LABEL_23;
        }

        goto LABEL_31;
      }
    }

    size_t v29 = der_copy_oid();
LABEL_23:
    if (v29)
    {
LABEL_31:
      uint64_t v38 = v24;
      unsigned __int8 v34 = "unknown type: %.*s";
      goto LABEL_35;
    }

    uint64_t v30 = (char *)malloc(v16 - v24);
    if (v30)
    {
      uint64_t v31 = v30;
      memcpy(v30, &v13[v24 + 1], v25 - 1);
      v31[v25 - 1] = 0;
      uint64_t v11 = (void *)v42;
      BOOL v32 = sub_18830E7F4(a1, v42, 0, (uint64_t)v41, v31);
      free(v31);
      der_free_oid();
      if (v32) {
        goto LABEL_37;
      }
      v13 += v18 + v16;
      uint64_t v14 = *v13;
      if (!*v13)
      {
        CFNumberRef v3 = v39;
        uint64_t v13 = v40;
        goto LABEL_28;
      }

      continue;
    }

    break;
  }

  der_free_oid();
  unsigned __int8 v34 = "out of memory";
  uint64_t v35 = a1;
  unint64_t v36 = 12;
LABEL_36:
  hx509_set_error_string(v35, 0, v36, v34, v20, v21, v22, v23, v38);
LABEL_37:
  free(v40);
  hx509_name_free((void **)&v42);
  return 569879LL;
}

uint64_t sub_1882DE100(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 22;
  *(void *)(a2 + 40) = sub_1882DE334;
  return 0LL;
}

uint64_t sub_1882DE164(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  memset(v23, 0, sizeof(v23));
  __int128 v24 = 0u;
  uint64_t v25 = 0LL;
  unsigned int v20 = 0;
  krb5_generate_random_block(a2 + 108, 4LL);
  if (_krb5_have_debug((BOOL)a1))
  {
    krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 128), &v18);
    krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 272), &v19);
    sub_1882DFCE8((uint64_t)a1, 10, "sending TGS-REQ for %s using %s", v19, v18);
  }

  uint64_t v11 = sub_1882DD170( a1,  *(void *)(a2 + 88),  a2 + 424,  *(void *)(a2 + 80),  *(_DWORD *)(a2 + 104),  *(__int128 **)(a2 + 72),  0LL,  a2 + 264,  a2 + 120,  *(_DWORD *)(a2 + 108),  &v20,  (krb5_keyblock **)(a2 + 112),  (uint64_t)v23);
  if ((_DWORD)v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0LL;
  }

  else
  {
    size_t v15 = sub_1882FDA58();
    *(void *)a4 = v15;
    uint64_t v16 = malloc(v15);
    *(void *)(a4 + 8) = v16;
    if (v16)
    {
      uint64_t v17 = sub_1882FDA38();
      if ((_DWORD)v17)
      {
        uint64_t v12 = v17;
        free(*(void **)(a4 + 8));
        uint64_t v13 = 0LL;
        *(void *)(a4 + 8) = 0LL;
      }

      else
      {
        if (*(void *)a4 != v22) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        *(void *)&__int128 v24 = 0LL;
        sub_1882FDA68();
        uint64_t v12 = 0LL;
        *a5 = *(void *)(*(void *)(*(void *)(a2 + 128) + 16LL) + 8LL);
        *a6 |= 1u;
        uint64_t v13 = sub_1882DE390;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v12 = 12LL;
    }
  }

  *(_DWORD *)(a2 + 64) = v12;
  *(void *)(a2 + 40) = v13;
  return v12;
}

uint64_t sub_1882DE334(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 22;
  *(void *)(a2 + 40) = 0LL;
  return 0LL;
}

uint64_t sub_1882DE390(_krb5_context *a1, uint64_t a2, const krb5_data *a3)
{
  __int128 v41 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  *(_OWORD *)size_t v29 = 0u;
  if (*(void *)(**(void **)(a2 + 88) + 248LL))
  {
    krb5_error_code v6 = 22;
LABEL_3:
    sub_1882DFCE8((uint64_t)a1, 10, "tkt_referral_recv: parse_tgs_rep %d", v6);
    sub_1882DDEDC(a1, a2);
LABEL_4:
    uint64_t result = 0LL;
    krb5_principal v8 = sub_1882DE334;
    goto LABEL_5;
  }

  if (sub_1882FDC6C())
  {
    if (krb5_rd_error(a1, a3, (krb5_error **)&v40[18] + 1))
    {
      krb5_clear_error_message(a1);
      krb5_free_kdc_rep((uint64_t)a1, v40);
      krb5_error_code v6 = -1765328344;
      goto LABEL_3;
    }

    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    if (*((void *)&v41 + 1) && (krb5_error_code v10 = sub_1882FD94C()) != 0)
    {
      krb5_error_code v6 = v10;
      krb5_set_error_message(a1, v10, "Failed to decode METHOD-DATA");
    }

    else
    {
      krb5_error_code v6 = sub_1882F9A4C(a1, a2 + 424, (uint64_t)&v38, (uint64_t)&v40[18] + 8);
      sub_1882FD96C();
      if (!v6)
      {
        krb5_error_code v6 = krb5_error_from_rd_error(a1, (uint64_t)&v40[18] + 8, *(uint64_t **)(a2 + 96));
        if (_krb5_have_debug((BOOL)a1))
        {
          error_message = krb5_get_error_message(a1, v6);
          sub_1882DFCE8((uint64_t)a1, 5, "parse_tgs_rep: KRB-ERROR %d/%s", v6, error_message);
          krb5_free_error_message(a1, error_message);
        }
      }
    }
  }

  else
  {
    krb5_error_code v6 = sub_1882F9CB0(a1, *(_DWORD *)(a2 + 108), 0LL, a2 + 424, (uint64_t)v40);
    if (v6) {
      goto LABEL_3;
    }
    krb5_error_code v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 264), v29);
    if (v6) {
      goto LABEL_3;
    }
    krb5_error_code v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 272), &v29[1]);
    if (v6) {
      goto LABEL_3;
    }
    *((void *)&v32 + 1) = *(void *)(*(void *)(a2 + 96) + 56LL);
    char v9 = (*(_BYTE *)(a2 + 106) & 1) != 0 || *(void *)(a2 + 72);
    uint64_t v38 = *(void *)(a2 + 112);
    uint64_t v39 = a2 + 424;
    krb5_error_code v6 = sub_1882F3FCC( (uint64_t)a1,  (uint64_t)v40,  (uint64_t)v29,  (const krb5_keyblock *)(a2 + 136),  0LL,  (krb5_address *const *)(a2 + 240),  *(_DWORD *)(a2 + 108),  v9,  0LL,  (uint64_t (*)(_krb5_context *, const krb5_keyblock *, uint64_t, uint64_t, uint64_t))sub_1882DD8F8,  (uint64_t)&v38);
  }

  krb5_free_kdc_rep((uint64_t)a1, v40);
  if (v6) {
    goto LABEL_3;
  }
  if (!krb5_principal_compare_any_realm((uint64_t)a1, *(void *)(a2 + 272), (uint64_t)v29[1]))
  {
    if (krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)v29[1]))
    {
      sub_1882DFCE8( (uint64_t)a1,  10,  "KDC for realm %s sends a referrals to %s",  *(const char **)(*(void *)(a2 + 128) + 24LL),  *((const char **)v29[1]->realm.data + 1));
      krb5_cc_clear_mcred(v40);
      *((krb5_principal *)&v40[0] + 1) = v29[1];
      uint64_t v12 = *(uint64_t **)(a2 + 408);
      if (v12)
      {
        unint64_t v13 = 0LL;
        do
        {
          uint64_t v14 = v12[v13];
          BOOL v15 = v14 != 0;
          if (!v14) {
            break;
          }
          if (krb5_compare_creds(a1, 0x80000000, (uint64_t)v40, v14))
          {
            sub_1882DFCE8( (uint64_t)a1,  5,  "Referral from %s loops back to realm %s",  *(const char **)(*(void *)(a2 + 128) + 24LL),  (const char *)v29[1]->data);
            goto LABEL_4;
          }

          ++v13;
          uint64_t v12 = *(uint64_t **)(a2 + 408);
        }

        while (v12);
        if (v13 >= 0x10) {
          goto LABEL_4;
        }
      }

      else
      {
        BOOL v15 = 1;
      }

      int v16 = DWORD2(v37);
      if (*(_DWORD *)(a2 + 416)) {
        BOOL v17 = (WORD4(v37) & 0x2000) == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        *(_DWORD *)(a2 + 416) = 0;
        DWORD2(v37) = v16 & 0xFFFFDFFF;
      }

      if (v15)
      {
        unsigned int v18 = 0;
      }

      else
      {
        unsigned int v18 = -1;
        uint64_t v19 = v12;
        do
        {
          uint64_t v20 = *v19++;
          ++v18;
        }

        while (v20);
      }

      uint64_t v21 = (krb5_creds **)realloc(v12, 8LL * (v18 + 2));
      if (v21)
      {
        uint64_t v22 = v21;
        *(void *)(a2 + 408) = v21;
        krb5_error_code v23 = krb5_copy_creds(a1, (const krb5_creds *)v29, &v21[v18]);
        v22[v18 + 1] = 0LL;
        if (!v23)
        {
          krb5_free_cred_contents(a1, (krb5_creds *)(a2 + 120));
          __int128 v24 = v32;
          *(_OWORD *)(a2 + 152) = v31;
          *(_OWORD *)(a2 + 168) = v24;
          __int128 v25 = v37;
          __int128 v26 = v35;
          *(_OWORD *)(a2 + 232) = v36;
          *(_OWORD *)(a2 + 248) = v25;
          __int128 v27 = v34;
          *(_OWORD *)(a2 + 184) = v33;
          *(_OWORD *)(a2 + 200) = v27;
          *(_OWORD *)(a2 + 216) = v26;
          __int128 v28 = v30;
          *(_OWORD *)(a2 + 120) = *(_OWORD *)v29;
          *(_OWORD *)(a2 + 136) = v28;
          uint64_t result = krb5_principal_set_realm(a1, *(void *)(a2 + 272), *(char **)(*(void *)(a2 + 128) + 24LL));
          if (!(_DWORD)result)
          {
            krb5_principal v8 = (uint64_t (*)(_krb5_context *, uint64_t))sub_1882DE164;
            goto LABEL_5;
          }
        }
      }

      else
      {
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }
    }

    else
    {
      krb5_set_error_message(a1, -1765328349, "Got back an non krbtgt ticket referrals");
      krb5_free_cred_contents(a1, (krb5_creds *)v29);
    }

    goto LABEL_4;
  }

  uint64_t result = krb5_copy_creds(a1, (const krb5_creds *)v29, (krb5_creds **)(a2 + 512));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 64) = result;
    return result;
  }

  krb5_free_cred_contents(a1, (krb5_creds *)v29);
  uint64_t result = 0LL;
  krb5_principal v8 = sub_1882DE880;
LABEL_5:
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t sub_1882DE880(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a2 + 40) = 0LL;
  if ((*(_BYTE *)(a2 + 48) & 8) == 0)
  {
    krb5_error_code v10 = *(krb5_creds ***)(a2 + 408);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(_krb5_ccache **)(a2 + 88);
        unint64_t v13 = v10 + 1;
        do
        {
          uint64_t client = (uint64_t)v11->client;
          if (krb5_principal_is_krbtgt((uint64_t)a1, client)
            && strcmp(*(const char **)(*(void *)(client + 16) + 8LL), *(const char **)(client + 24)))
          {
            krb5_cc_store_cred(a1, v12, *(v13 - 1));
          }

          BOOL v15 = *v13++;
          uint64_t v11 = v15;
        }

        while (v15);
        int v16 = *v10;
        if (*v10)
        {
          BOOL v17 = v10 + 1;
          do
          {
            krb5_free_creds(a1, v16);
            unsigned int v18 = *v17++;
            int v16 = v18;
          }

          while (v18);
        }
      }

      free(*(void **)(a2 + 408));
      *(void *)(a2 + 408) = 0LL;
    }

    uint64_t v19 = *(krb5_creds **)(a2 + 512);
    if (!v19) {
      heim_abort("store but no credential:ctx->cred != NULL", v4, 0LL, v5, v6, v7, v8, v9, v31);
    }
    krb5_cc_store_cred(a1, *(krb5_ccache *)(a2 + 88), v19);
    if (!krb5_principal_compare_any_realm( (uint64_t)a1,  *(void *)(*(void *)(a2 + 512) + 8LL),  *(void *)(*(void *)(a2 + 96) + 8LL)))
    {
      uint64_t v20 = *(_OWORD **)(a2 + 512);
      creds[0] = *v20;
      __int128 v21 = v20[4];
      __int128 v23 = v20[1];
      __int128 v22 = v20[2];
      creds[3] = v20[3];
      creds[4] = v21;
      creds[1] = v23;
      creds[2] = v22;
      __int128 v24 = v20[8];
      __int128 v26 = v20[5];
      __int128 v25 = v20[6];
      creds[7] = v20[7];
      creds[8] = v24;
      creds[5] = v26;
      creds[6] = v25;
      __int128 v27 = *(_krb5_ccache **)(a2 + 88);
      __int128 v28 = *(__int128 **)(*(void *)(a2 + 96) + 8LL);
      uint64_t v29 = *((void *)v28 + 2);
      __int128 v32 = *v28;
      uint64_t v33 = v29;
      __int128 v34 = "";
      *((void *)&creds[0] + 1) = &v32;
      krb5_cc_store_cred(a1, v27, (krb5_creds *)creds);
    }
  }

  return 0LL;
}

krb5_BOOLean krb5_kuserok(krb5_context a1, krb5_principal a2, const char *a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  LODWORD(__s) = 0;
  uint64_t v6 = getpwnam(a3);
  if (!v6) {
    goto LABEL_52;
  }
  uint64_t v7 = (uint64_t)v6;
  pw_dir = v6->pw_dir;
  size_t v9 = strlen(pw_dir) + 12;
  krb5_error_code v10 = (char *)malloc(v9);
  if (!v10) {
    goto LABEL_52;
  }
  uint64_t v11 = v10;
  strlcpy(v10, pw_dir, v9);
  strlcat(v11, "/.k5login", v9);
  int v12 = sub_1882DEE00(a1, v11, v7, a2, (krb5_BOOLean *)&__s);
  if (v12) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = (_DWORD)__s == 1;
  }
  if (v13)
  {
    free(v11);
    return 1;
  }

  int v14 = v12;
  strlcat(v11, ".d", v9);
  LODWORD(__s) = 0;
  if (lstat(v11, &v35) < 0) {
    goto LABEL_32;
  }
  if ((v35.st_mode & 0xF000) != 0x4000)
  {
    int v15 = 0;
    int v18 = 20;
    goto LABEL_37;
  }

  int v15 = 0;
  if (v35.st_uid) {
    BOOL v16 = v35.st_uid == *(_DWORD *)(v7 + 16);
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = v16;
  int v18 = 13;
  if ((v35.st_mode & 0x12) != 0 || !v17) {
    goto LABEL_37;
  }
  uint64_t v19 = opendir(v11);
  if (!v19)
  {
LABEL_32:
    int v15 = 0;
    int v18 = *__error();
    goto LABEL_37;
  }

  uint64_t v20 = v19;
  int v21 = dirfd(v19);
  if (fstat(v21, &v36) < 0)
  {
    closedir(v20);
    int v18 = *__error();
  }

  else
  {
    if (v35.st_dev == v36.st_dev && v35.st_ino == v36.st_ino)
    {
      __int128 v22 = readdir(v20);
      if (v22)
      {
        __int128 v23 = v22;
        int v15 = 0;
        do
        {
          if (strcmp(v23->d_name, "."))
          {
            if (strcmp(v23->d_name, ".."))
            {
              if (v23->d_name[0] != 35 && *(&v23->d_type + strlen(v23->d_name)) != 126)
              {
                snprintf((char *)&v36, 0x400uLL, "%s/%s", v11, v23->d_name);
                int v24 = sub_1882DEE00(a1, (char *)&v36, v7, a2, (krb5_BOOLean *)&__s);
                int v15 = (int)__s;
                if (!v24 && (_DWORD)__s == 1) {
                  break;
                }
              }
            }
          }

          __int128 v23 = readdir(v20);
        }

        while (v23);
      }

      else
      {
        int v15 = 0;
      }

      closedir(v20);
      int v18 = 0;
      goto LABEL_37;
    }

    closedir(v20);
    int v18 = 13;
  }

  int v15 = 0;
LABEL_37:
  free(v11);
  if (!v18 && v15 == 1) {
    return 1;
  }
  if ((v18 == 20 || v18 == 2)
    && v14 == 2
    && !krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a2, 1u)
    && !krb5_get_default_realms((CFArrayRef *)a1, (char *const **)&v36))
  {
    __int128 v26 = *(char *const **)&v36.st_dev;
    if (**(void **)&v36.st_dev)
    {
      __int128 v27 = (void *)(*(void *)&v36.st_dev + 8LL);
      while (1)
      {
        realm = (const char *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
        if (!strcmp(realm, (const char *)*(v27 - 1)))
        {
          comp_string = (const char *)krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a2, 0);
          if (!strcmp(comp_string, a3)) {
            break;
          }
        }

        if (!*v27++)
        {
          __int128 v26 = *(char *const **)&v36.st_dev;
          goto LABEL_51;
        }
      }

      krb5_free_host_realm(a1, *(char *const **)&v36.st_dev);
      return 1;
    }

LABEL_51:
    krb5_free_host_realm(a1, v26);
  }

                BOOL v16 = krb5_copy_keyblock(a1, (const krb5_keyblock *)(v18 + 8), (krb5_keyblock **)v42 + 4);
                if (!(_DWORD)v16)
                {
                  if (a7)
                  {
                    stat v36 = 4 * (*((_DWORD *)v42 + 22) != 0);
                    *a7 = v36;
                    uint64_t v37 = *(_DWORD *)(a3 + 8);
                    if ((v37 & 2) != 0)
                    {
                      v36 |= 1u;
                      *a7 = v36;
                      uint64_t v37 = *(_DWORD *)(a3 + 8);
                    }

                    if ((v37 & 4) != 0) {
                      *a7 = v36 | 2;
                    }
                  }

                  if (a8) {
                    *a8 = v18;
                  }
                  else {
                    krb5_free_ticket(a1, (krb5_ticket *)v18);
                  }
                  if (a2)
                  {
                    if (!*a2) {
                      *a2 = v42;
                    }
                  }

                  else
                  {
                    krb5_auth_con_free(a1, v42);
                  }

                  sub_1882FE120();
                  return 0LL;
                }
              }

              goto LABEL_21;
            }

            krb5_clear_error_message(a1);
            BOOL v16 = 2529638950LL;
          }
        }
      }
    }
  }

LABEL_52:
  __s = 0LL;
  krb5_BOOLean v25 = !krb5_unparse_name(a1, a2, &__s)
     && (size_t v31 = strlen(a3), !mbr_identifier_to_uuid(4, a3, v31, (unsigned __int8 *)&v35))
  if (__s) {
    free(__s);
  }
  return v25;
}

uint64_t sub_1882DEE00( _krb5_context *a1, char *__filename, uint64_t a3, const krb5_principal_data *a4, krb5_BOOLean *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  *a5 = 0;
  size_t v9 = fopen(__filename, "r");
  if (!v9) {
    return *__error();
  }
  krb5_error_code v10 = v9;
  rk_cloexec_file(v9);
  int v11 = fileno(v10);
  if (fstat(v11, &v16))
  {
    fclose(v10);
    return *__error();
  }

  if ((v16.st_mode & 0xF000) == 0x4000)
  {
    fclose(v10);
    return 21LL;
  }

  else if (v16.st_uid && v16.st_uid != *(_DWORD *)(a3 + 16) || (v16.st_mode & 0x12) != 0)
  {
    fclose(v10);
    return 13LL;
  }

  else
  {
    while (fgets(__s, 1024, v10))
    {
      size_t v13 = strcspn(__s, "\n");
      if (__s[v13] == 10 || (int v14 = fgetc(v10), v14 == -1))
      {
        __s[v13] = 0;
        if (!krb5_parse_name(a1, __s, (krb5_principal *)&v15))
        {
          *a5 = krb5_principal_compare(a1, a4, v15);
          krb5_free_principal(a1, (krb5_principal)v15);
          if (*a5) {
            break;
          }
        }
      }

      else
      {
        while (v14 != -1 && v14 != 10)
          int v14 = fgetc(v10);
      }
    }

    fclose(v10);
    return 0LL;
  }

uint64_t krb5_initlog(_krb5_context *a1, const char *a2, char ***a3)
{
  uint64_t v6 = (char **)calloc(1uLL, 0x18uLL);
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t v7 = v6;
  uint64_t v8 = strdup(a2);
  _krb5_ccache *v7 = v8;
  if (!v8)
  {
    free(v7);
LABEL_5:
    uint64_t v9 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v9;
  }

  uint64_t v9 = 0LL;
  *a3 = v7;
  return v9;
}

uint64_t krb5_addlog_func(_krb5_context *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = (char *)realloc(*(void **)(a2 + 16), 32LL * *(int *)(a2 + 8) + 32);
  if (v14)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = *(int *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v16 + 1;
    *(void *)(a2 + 16) = v14;
    int v17 = &v14[32 * v16];
    *(_DWORD *)int v17 = a3;
    *((_DWORD *)v17 + 1) = a4;
    *((void *)v17 + 1) = a5;
    *((void *)v17 + 2) = a6;
    *((void *)v17 + 3) = a7;
  }

  else
  {
    uint64_t v15 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v15;
}

uint64_t krb5_addlog_dest(_krb5_context *a1, const char **a2, char *a3)
{
  CFNumberRef v3 = a3;
  uint64_t v75 = *MEMORY[0x1895F89C0];
  int v57 = -1;
  int v58 = 0;
  __int128 v55 = a3;
  int v6 = sscanf(a3, "%d%c%d/", &v58, &v56, &v57);
  if (v6 == 2 && v56 == 47)
  {
    if (v58 < 0)
    {
      int v57 = -v58;
      int v58 = 0;
    }

    else
    {
      int v57 = v58;
    }
  }

  else if (!v6)
  {
    goto LABEL_10;
  }

  uint64_t v7 = strchr(v3, 47);
  __int128 v55 = v7;
  if (!v7)
  {
    uint64_t v8 = 2314790656LL;
    __int128 v54 = v3;
    uint64_t v9 = "failed to parse %s";
    goto LABEL_19;
  }

  CFNumberRef v3 = v7 + 1;
  __int128 v55 = v7 + 1;
LABEL_10:
  if (!strcmp(v3, "STDERR")) {
    return sub_1882DF898(a1, (uint64_t)a2, v58, v57, 0LL, 0LL, *MEMORY[0x1895F89D0], 1, 0);
  }
  if (!strcmp(v3, "CONSOLE")) {
    return sub_1882DF898(a1, (uint64_t)a2, v58, v57, "/dev/console", (uint64_t)"w", 0LL, 0, 0);
  }
  if (!strncmp(v3, "FILE", 4uLL))
  {
    int v11 = v3[4];
    if (v11 == 61 || v11 == 58)
    {
      int v12 = strdup(v3 + 5);
      if (v12)
      {
        size_t v13 = v12;
        if (v11 == 61)
        {
          int v14 = open(v12, 1545, 438LL);
          if (v14 < 0)
          {
            __int128 v52 = __error();
            uint64_t v8 = *v52;
            strerror(*v52);
            krb5_set_error_message(a1, v8, "open(%s) logile: %s");
          }

          else
          {
            int v15 = v14;
            sub_1882FA158(v14);
            uint64_t v16 = fdopen(v15, "a");
            if (v16)
            {
              uint64_t v17 = (uint64_t)v16;
              int v18 = 1;
              return sub_1882DF898(a1, (uint64_t)a2, v58, v57, v13, (uint64_t)"a", v17, v18, 1);
            }

            uint64_t v8 = *__error();
            close(v15);
            strerror(v8);
            krb5_set_error_message(a1, v8, "fdopen(%s) logfile: %s");
          }

          free(v13);
          return v8;
        }

        uint64_t v17 = 0LL;
        int v18 = 0;
        return sub_1882DF898(a1, (uint64_t)a2, v58, v57, v13, (uint64_t)"a", v17, v18, 1);
      }

uint64_t sub_1882DF898( _krb5_context *a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  uint64_t v17 = malloc(0x20uLL);
  if (v17)
  {
    *uint64_t v17 = a5;
    v17[1] = a6;
    v17[2] = a7;
    *((_DWORD *)v17 + 6) = a8;
    *((_DWORD *)v17 + 7) = a9;
    return krb5_addlog_func(a1, a2, a3, a4, (uint64_t)sub_1882DFDF8, (uint64_t)sub_1882DFEC8, (uint64_t)v17);
  }

  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    if (a5)
    {
      if (a9) {
        free(a5);
      }
    }

    return 12LL;
  }

uint64_t krb5_openlog(_krb5_context *a1, const char *a2, char ***a3)
{
  uint64_t v11 = krb5_initlog(a1, a2, a3);
  if ((_DWORD)v11) {
    return v11;
  }
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, v5, v6, v7, v8, v9, v10, (uint64_t)"logging");
  if (strings
    || (strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, v12, v13, v14, v15, v16, v17, (uint64_t)"logging")) != 0LL)
  {
    int v19 = (char *)*strings;
    if (*strings)
    {
      int v20 = (char **)(strings + 1);
      do
      {
        uint64_t v21 = krb5_addlog_dest(a1, (const char **)*a3, v19);
        __int128 v22 = *v20++;
        int v19 = v22;
        if (v22) {
          BOOL v23 = (_DWORD)v21 == 0;
        }
        else {
          BOOL v23 = 0;
        }
      }

      while (v23);
      uint64_t v11 = v21;
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    krb5_config_free_strings(strings);
    return v11;
  }

  return krb5_addlog_dest(a1, (const char **)*a3, "SYSLOG");
}

uint64_t krb5_closelog(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    do
    {
      (*(void (**)(void))(*(void *)(a2 + 16) + v3 + 16))(*(void *)(*(void *)(a2 + 16) + v3 + 24));
      ++v4;
      v3 += 32LL;
    }

    while (v4 < *(int *)(a2 + 8));
  }

  free(*(void **)(a2 + 16));
  free(*(void **)a2);
  free((void *)a2);
  return 0LL;
}

uint64_t krb5_vlog_msg(uint64_t a1, uint64_t a2, void **a3, int a4, char *a5, va_list a6)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v21 = 0LL;
  if (a2 && *(int *)(a2 + 8) >= 1)
  {
    uint64_t v12 = 0LL;
    time_t v13 = 0LL;
    uint64_t v14 = 0LL;
    for (uint64_t i = 0LL; i < *(int *)(a2 + 8); ++i)
    {
      uint64_t v16 = *(void *)(a2 + 16);
      if (*(_DWORD *)(v16 + v12) > a4) {
        goto LABEL_10;
      }
      int v17 = *(_DWORD *)(v16 + v12 + 4);
      if ((v17 & 0x80000000) == 0 && v17 < a4) {
        goto LABEL_10;
      }
      if (v13)
      {
        if (!v14) {
          goto LABEL_13;
        }
      }

      else
      {
        time_t v13 = time(0LL);
        krb5_format_time(a1, v13, v22, 0x40uLL, 1);
        if (!v14)
        {
LABEL_13:
          int v18 = vasprintf((char **)&v21, a5, a6);
          if (v21) {
            BOOL v19 = v18 < 0;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19) {
            uint64_t v14 = a5;
          }
          else {
            uint64_t v14 = (char *)v21;
          }
        }
      }

      (*(void (**)(char *, char *, void))(*(void *)(a2 + 16) + v12 + 8))( v22,  v14,  *(void *)(*(void *)(a2 + 16) + v12 + 24));
LABEL_10:
      v12 += 32LL;
    }
  }

  if (a3) {
    *a3 = v21;
  }
  else {
    free(v21);
  }
  return 0LL;
}

uint64_t krb5_vlog(uint64_t a1, uint64_t a2, int a3, char *a4, va_list a5)
{
  return 0LL;
}

uint64_t krb5_log_msg( uint64_t a1, uint64_t a2, int a3, void **a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return 0LL;
}

uint64_t krb5_log(uint64_t a1, uint64_t a2, int a3, char *a4, ...)
{
  return 0LL;
}

uint64_t sub_1882DFCE8(uint64_t result, int a2, char *a3, ...)
{
  if (result)
  {
    if (*(void *)(result + 160)) {
      return krb5_vlog_msg(result, *(void *)(result + 160), 0LL, a2, a3, va);
    }
  }

  return result;
}

void sub_1882DFD2C(uint64_t *a1, int a2, krb5_error_code a3, char *a4, ...)
{
  v10[0] = 0LL;
  if (a1)
  {
    if (a1[20])
    {
      va_copy((va_list)&v10[1], va);
      vasprintf(v10, a4, va);
      if (v10[0])
      {
        error_message = krb5_get_error_message((krb5_context)a1, a3);
        uint64_t v8 = error_message;
        uint64_t v9 = "<unknown error>";
        if (error_message) {
          uint64_t v9 = error_message;
        }
        krb5_log((uint64_t)a1, a1[20], a2, "%s: %s", v10[0], v9);
        krb5_free_error_message((krb5_context)a1, v8);
        free(v10[0]);
      }
    }
  }

BOOL _krb5_have_debug(BOOL result)
{
  if (result) {
    return *(void *)(result + 160) != 0LL;
  }
  return result;
}

void sub_1882DFDF8(const char *a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  if (*(_DWORD *)(a3 + 24))
  {
    uint64_t v7 = *(FILE **)(a3 + 16);
    if (!v7) {
      return;
    }
  }

  else
  {
    uint64_t v7 = fopen(*(const char **)a3, *(const char **)(a3 + 8));
    if (!v7) {
      return;
    }
  }

  uint64_t v8 = (char *)malloc(4 * v6 + 4);
  if (v8)
  {
    uint64_t v9 = v8;
    strvisx(v8, __s, v6, 1);
    fprintf(v7, "%s %s\n", a1, v9);
    free(v9);
  }

  if (!*(_DWORD *)(a3 + 24)) {
    fclose(v7);
  }
}

void sub_1882DFEC8(FILE **a1)
{
  if (*((_DWORD *)a1 + 6))
  {
    if (!*a1) {
      goto LABEL_7;
    }
    fclose(a1[2]);
  }

  if (*a1 && *((_DWORD *)a1 + 7)) {
    free(*a1);
  }
LABEL_7:
  free(a1);
}

void sub_1882DFF14(uint64_t a1, const char *a2, int *a3)
{
}

void sub_1882DFF40(void *a1)
{
}

uint64_t sub_1882DFF54(uint64_t a1, const char *a2, uint64_t a3)
{
  return asl_log(*(asl_object_t *)a3, *(asl_object_t *)(a3 + 8), *(_DWORD *)(a3 + 16), "%s", a2);
}

void sub_1882DFF88(void *a1)
{
}

void sub_1882DFFB8(int a1, uint64_t a2, os_log_t oslog)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446210;
    uint64_t v6 = a2;
    _os_log_impl(&dword_1882BB000, oslog, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&v5, 0xCu);
  }

void sub_1882E0050(int a1, uint64_t a2, os_log_t oslog)
{
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG)) {
    sub_188318D50(a2, oslog);
  }
}

uint64_t sub_1882E0094(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 16);
}

uint64_t sub_1882E00A0(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = (char **)off_18C704418;
  if (off_18C704418)
  {
    while (1)
    {
      uint64_t v7 = *v6;
      if (!strcmp(*v6, a3)) {
        break;
      }
      uint64_t v6 = (char **)v6[5];
      if (!v6) {
        goto LABEL_4;
      }
    }

    sub_1882DFCE8(a1, 20, "mcc_resolve, found: %s\n", v7);
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 11));
    ++*((_DWORD *)v6 + 2);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 11));
  }

  else
  {
LABEL_4:
    uint64_t v6 = sub_1882E0FC8(a3);
    sub_1882DFCE8(a1, 20, "mcc_resolve, allocated: %s\n", *v6);
  }

  pthread_mutex_unlock(&stru_18C704428);
  *(void *)(*(void *)a2 + 16LL) = v6;
  *(void *)(*(void *)a2 + 8LL) = 152LL;
  return 0LL;
}

uint64_t sub_1882E0198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1882E0FC8(0LL);
  sub_1882DFCE8(a1, 20, "mcc_gen_new: %s\n", *v4);
  pthread_mutex_unlock(&stru_18C704428);
  *(void *)(*(void *)a2 + 16LL) = v4;
  *(void *)(*(void *)a2 + 8LL) = 152LL;
  return 0LL;
}

uint64_t sub_1882E0220(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3)
{
  int v5 = *(const char ***)(a2 + 16);
  pthread_mutex_lock(&stru_18C704428);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 11));
  sub_1882DFCE8((uint64_t)a1, 20, "mcc_initialize: %s\n", *v5);
  int v6 = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = 0;
  v5[7] = (const char *)time(0LL);
  uint64_t v7 = krb5_copy_principal(a1, a3, &v14);
  if (!(_DWORD)v7)
  {
    uint64_t v8 = (krb5_principal_data *)v5[2];
    if (v8) {
      krb5_free_principal(a1, v8);
    }
    void v5[2] = (const char *)v14;
    sub_1882E10F4(a1, (uint64_t)v5);
    if (v6)
    {
      sub_1882DFCE8((uint64_t)a1, 20, "mcc_initialize was dead: %s\n", *v5);
      uint64_t v9 = (const char *)off_18C704418;
      if (off_18C704418)
      {
        uint64_t v10 = *v5;
        uint64_t v11 = (const char **)off_18C704418;
        while (strcmp(v10, *v11))
        {
          uint64_t v11 = (const char **)v11[5];
          if (!v11)
          {
            v5[5] = v9;
            *((void *)v9 + 6) = v5 + 5;
            goto LABEL_12;
          }
        }

        uint64_t v12 = (krb5_principal_data *)v5[2];
        if (v12)
        {
          krb5_free_principal(a1, v12);
          void v5[2] = 0LL;
        }

        *((_DWORD *)v5 + 3) = 1;
        uint64_t v7 = 17LL;
      }

      else
      {
        v5[5] = 0LL;
        qword_18C704420 = (uint64_t)(v5 + 5);
LABEL_12:
        uint64_t v7 = 0LL;
        off_18C704418 = v5;
        v5[6] = (const char *)&off_18C704418;
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_unlock(&stru_18C704428);
  return v7;
}

uint64_t sub_1882E03A4(_krb5_context *a1, uint64_t a2)
{
  uint64_t v3 = *(const char ***)(a2 + 16);
  sub_1882DFCE8((uint64_t)a1, 20, "mcc_destroy: %s\n", *v3);
  pthread_mutex_lock(&stru_18C704428);
  sub_1882E1160(a1, (uint64_t)v3);
  pthread_mutex_unlock(&stru_18C704428);
  return 0LL;
}

uint64_t sub_1882E0414(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t sub_1882E0448(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  if (*(_DWORD *)(v5 + 12))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    return 2LL;
  }

  else
  {
    uint64_t v7 = calloc(1uLL, 0xA0uLL);
    if (v7)
    {
      uint64_t v8 = v7;
      v7[18] = 0LL;
      uint64_t v9 = *(void **)(v5 + 32);
      v7[19] = v9;
      void *v9 = v7;
      *(void *)(v5 + 32) = v7 + 18;
      *((_OWORD *)v7 + 7) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      *((_OWORD *)v7 + 6) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 2) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      uint64_t v6 = krb5_copy_creds_contents(a1, a3, (uint64_t)v7);
      if ((_DWORD)v6)
      {
        uint64_t v10 = v8[18];
        uint64_t v11 = (void *)v8[19];
        if (v10)
        {
          *(void *)(v10 + 152) = v11;
          uint64_t v11 = (void *)v8[19];
        }

        else
        {
          *(void *)(v5 + 32) = v11;
        }

        void *v11 = v10;
        free(v8);
      }

      else
      {
        *(void *)(v5 + 56) = time(0LL);
      }

      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    }

    else
    {
      uint64_t v6 = 2529639110LL;
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
      krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    }
  }

  return v6;
}

uint64_t sub_1882E0568(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  sub_1882DFCE8((uint64_t)a1, 20, "mcc_get_principal: %p\n", (const void *)v5);
  if (*(_DWORD *)(v5 + 12) || (uint64_t v7 = *(const krb5_principal_data **)(v5 + 16)) == 0LL) {
    uint64_t v6 = 2LL;
  }
  else {
    uint64_t v6 = krb5_copy_principal(a1, v7, a3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
  return v6;
}

uint64_t sub_1882E05F4(_krb5_context *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = (pthread_mutex_t *)(v5 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  if (*(_DWORD *)(v5 + 12))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    return 2LL;
  }

  else
  {
    uint64_t v9 = (uint64_t *)calloc(1uLL, 0x10uLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t *v9 = 0LL;
      v9[1] = (uint64_t)v9;
      uint64_t v11 = *(void *)(v5 + 24);
      if (v11)
      {
        while (1)
        {
          uint64_t v12 = *(void *)(v11 + 144);
          time_t v13 = (uint64_t *)calloc(1uLL, 0xA0uLL);
          if (!v13)
          {
            uint64_t v7 = 2529639110LL;
            krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
            sub_1882E12FC(a1, v10);
            int v17 = v10;
            goto LABEL_13;
          }

          krb5_principal v14 = v13;
          uint64_t v15 = krb5_copy_creds_contents(a1, v11, (uint64_t)v13);
          if ((_DWORD)v15) {
            break;
          }
          v14[18] = 0LL;
          uint64_t v16 = (uint64_t **)v10[1];
          v14[19] = (uint64_t)v16;
          *uint64_t v16 = v14;
          v10[1] = (uint64_t)(v14 + 18);
          uint64_t v11 = v12;
          if (!v12) {
            goto LABEL_9;
          }
        }

        uint64_t v7 = v15;
        int v17 = v14;
LABEL_13:
        free(v17);
        pthread_mutex_unlock(v6);
      }

      else
      {
LABEL_9:
        pthread_mutex_unlock(v6);
        uint64_t v7 = 0LL;
        *a3 = v10;
      }
    }

    else
    {
      uint64_t v7 = 2529639110LL;
      pthread_mutex_unlock(v6);
      krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    }
  }

  return v7;
}

uint64_t sub_1882E074C(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *a3;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  LODWORD(v5) = *(_DWORD *)(v5 + 12);
  pthread_mutex_unlock(v7);
  if ((_DWORD)v5) {
    return 2LL;
  }
  uint64_t v9 = *(_OWORD **)v6;
  if (!*(void *)v6) {
    return 2529639054LL;
  }
  *a4 = *v9;
  __int128 v10 = v9[1];
  __int128 v11 = v9[2];
  __int128 v12 = v9[4];
  a4[3] = v9[3];
  a4[4] = v12;
  a4[1] = v10;
  a4[2] = v11;
  __int128 v13 = v9[5];
  __int128 v14 = v9[6];
  __int128 v15 = v9[8];
  a4[7] = v9[7];
  a4[8] = v15;
  a4[5] = v13;
  a4[6] = v14;
  uint64_t v16 = *((void *)v9 + 18);
  int v17 = (void *)*((void *)v9 + 19);
  if (v16)
  {
    *(void *)(v16 + 152) = v17;
    int v17 = (void *)*((void *)v9 + 19);
  }

  else
  {
    *(void *)(v6 + 8) = v17;
  }

  *int v17 = v16;
  free(v9);
  return 0LL;
}

uint64_t sub_1882E07FC(_krb5_context *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  *a3 = 0LL;
  sub_1882E12FC(a1, v3);
  free(v3);
  return 0LL;
}

uint64_t sub_1882E0830(_krb5_context *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 88));
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v8 + 144);
      if (krb5_compare_creds(a1, a3, a4, v8))
      {
        krb5_free_cred_contents(a1, (krb5_creds *)v8);
        uint64_t v10 = *(void *)(v8 + 144);
        __int128 v11 = *(void **)(v8 + 152);
        if (v10)
        {
          *(void *)(v10 + 152) = v11;
          __int128 v11 = *(void **)(v8 + 152);
        }

        else
        {
          *(void *)(v7 + 32) = v11;
        }

        void *v11 = v10;
        free((void *)v8);
        *(void *)(v7 + 56) = time(0LL);
      }

      uint64_t v8 = v9;
    }

    while (v9);
  }

  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 88));
  return 0LL;
}

uint64_t sub_1882E08F0()
{
  return 0LL;
}

uint64_t sub_1882E08F8(_krb5_context *a1, uint64_t *a2)
{
  uint64_t v4 = calloc(1uLL, 0x10uLL);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    void *v4 = 0LL;
    v4[1] = v4;
    pthread_mutex_lock(&stru_18C704428);
    uint64_t v6 = (const char **)off_18C704418;
    if (off_18C704418)
    {
      do
      {
        while (1)
        {
          uint64_t v7 = v6;
          uint64_t v6 = (const char **)v6[5];
          uint64_t v8 = calloc(1uLL, 0x18uLL);
          if (!v8)
          {
            pthread_mutex_unlock(&stru_18C704428);
            uint64_t v12 = 12LL;
            krb5_set_error_message(a1, 12, "malloc: out of memory");
            sub_1882E1368((uint64_t)a1, v5);
            return v12;
          }

          uint64_t v9 = v8;
          v8[1] = 0LL;
          void *v8 = v7;
          uint64_t v10 = *(void **)(v5 + 8);
          v8[2] = v10;
          void *v10 = v8;
          *(void *)(v5 + 8) = v8 + 1;
          sub_1882DFCE8((uint64_t)a1, 20, "mcc_get_cache_first, adding to cursor cache: %s\n", *v7);
          if (*v9) {
            break;
          }
LABEL_7:
          if (!v6) {
            goto LABEL_10;
          }
        }

        pthread_mutex_lock((pthread_mutex_t *)(*v9 + 88LL));
        uint64_t v11 = *v9;
        if (*(_DWORD *)(*v9 + 12LL))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(v11 + 88));
          void *v9 = 0LL;
          goto LABEL_7;
        }

        ++*(_DWORD *)(v11 + 8);
        pthread_mutex_unlock((pthread_mutex_t *)(v11 + 88));
      }

      while (v6);
    }

uint64_t sub_1882E0A78(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2529639054LL;
  if (!a2) {
    return v3;
  }
  uint64_t v7 = *(const char ****)a2;
  while (!v7)
  {
LABEL_10:
    uint64_t v7 = *(const char ****)a2;
    if (!*(void *)a2) {
      return v3;
    }
  }

  uint64_t v8 = v7[1];
  uint64_t v9 = v7[2];
  if (v8)
  {
    v8[2] = (const char *)v9;
    uint64_t v9 = v7[2];
  }

  else
  {
    *(void *)(a2 + 8) = v9;
  }

  void *v9 = (const char *)v8;
  uint64_t v10 = *v7;
  free(v7);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 11));
  int v11 = *((_DWORD *)v10 + 3);
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 11));
  if (v11)
  {
    sub_1882DFCE8((uint64_t)a1, 20, "mcc_get_cache_next, not returning, already dead: %s\n", *v10);
    if (sub_1882E1220((uint64_t)a1, v10))
    {
      sub_1882DFCE8((uint64_t)a1, 20, "mcc_get_cache_next, needs to be freed: %s\n", *v10);
      free(v10);
    }

    goto LABEL_10;
  }

  sub_1882DFCE8((uint64_t)a1, 20, "mcc_get_cache_next, returning: %s\n", *v10);
  uint64_t v3 = sub_1882C128C(a1, (uint64_t)&krb5_mcc_ops, a3);
  if (!(_DWORD)v3)
  {
    *(void *)(*a3 + 16LL) = v10;
    *(void *)(*a3 + 8LL) = 152LL;
  }

  return v3;
}

uint64_t sub_1882E0BC8(uint64_t a1, void *a2)
{
  return 0LL;
}

uint64_t sub_1882E0BF4(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const char ***)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  sub_1882DFCE8((uint64_t)a1, 20, "mcc_move, from: %s to: %s\n", *v5, *(const char **)v6);
  pthread_mutex_lock(&stru_18C704428);
  uint64_t v7 = v5[5];
  uint64_t v8 = (char *)v5[6];
  if (v7)
  {
    *((void *)v7 + 6) = v8;
    uint64_t v8 = (char *)v5[6];
  }

  else
  {
    qword_18C704420 = (uint64_t)v5[6];
  }

  *(void *)uint64_t v8 = v7;
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 88));
  uint64_t v9 = *(void *)(v6 + 24);
  if (v9)
  {
    do
    {
      uint64_t v10 = *(void *)(v9 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v9);
      uint64_t v11 = *(void *)(v9 + 144);
      uint64_t v12 = *(void **)(v9 + 152);
      if (v11)
      {
        *(void *)(v11 + 152) = v12;
        uint64_t v12 = *(void **)(v9 + 152);
      }

      else
      {
        *(void *)(v6 + 32) = v12;
      }

      void *v12 = v11;
      free((void *)v9);
      uint64_t v9 = v10;
    }

    while (v10);
  }

  __int128 v13 = v5[3];
  if (v13)
  {
    __int128 v14 = v13 + 144;
    uint64_t v15 = *((void *)v13 + 18);
    if (v15)
    {
      do
      {
        uint64_t v16 = (const char *)v15;
        *(void *)(v15 + 152) = *((void *)v13 + 19);
        **((void **)v13 + 19) = v15;
        int v17 = *(const char ***)(v6 + 32);
        *((void *)v13 + 18) = 0LL;
        *((void *)v13 + 19) = v17;
        *int v17 = v13;
        *(void *)(v6 + 32) = v14;
        __int128 v14 = v16 + 144;
        uint64_t v15 = *((void *)v16 + 18);
        __int128 v13 = v16;
      }

      while (v15);
    }

    else
    {
      uint64_t v16 = v5[3];
    }

    int v18 = (const char *)*((void *)v16 + 19);
    void v5[4] = v18;
    *(void *)int v18 = 0LL;
    BOOL v19 = *(const char ***)(v6 + 32);
    *((void *)v16 + 18) = 0LL;
    *((void *)v16 + 19) = v19;
    *BOOL v19 = v16;
    *(void *)(v6 + 32) = v14;
  }

  int v20 = *(const char **)(v6 + 16);
  *(void *)(v6 + 16) = v5[2];
  void v5[2] = v20;
  time_t v21 = time(0LL);
  v5[7] = (const char *)v21;
  *(void *)(v6 + 56) = v21;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 88));
  sub_1882E1160(a1, (uint64_t)v5);
  pthread_mutex_unlock(&stru_18C704428);
  if (sub_1882E1220((uint64_t)a1, v5))
  {
    krb5_data_free((void *)(a2 + 8));
    sub_1882DFCE8((uint64_t)a1, 20, "mcc_move, from freed\n");
  }

  else
  {
    sub_1882DFCE8((uint64_t)a1, 20, "mcc_move, from not freed\n");
  }

  return 0LL;
}

uint64_t sub_1882E0DD0(_krb5_context *a1, char **a2)
{
  uint64_t v4 = strdup("MEMORY:");
  *a2 = v4;
  if (v4) {
    return 0LL;
  }
  uint64_t v5 = 12LL;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v5;
}

uint64_t sub_1882E0E28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *a3 = *(void *)(v4 + 56);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0LL;
}

uint64_t sub_1882E0E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *(void *)(v4 + 64) = a3;
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0LL;
}

uint64_t sub_1882E0EB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *a3 = *(void *)(v4 + 64);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0LL;
}

uint64_t sub_1882E0EFC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *a3 = *(_OWORD *)(*(void *)(a2 + 16) + 72LL);
  return 0LL;
}

uint64_t sub_1882E0F10(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (char *)off_18C704418;
  if (off_18C704418)
  {
    while (*((void *)v6 + 9) != *a3 || *((void *)v6 + 10) != a3[1])
    {
      uint64_t v6 = (char *)*((void *)v6 + 5);
      if (!v6) {
        goto LABEL_7;
      }
    }

    pthread_mutex_lock((pthread_mutex_t *)(v6 + 88));
    ++*((_DWORD *)v6 + 2);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 88));
    pthread_mutex_unlock(&stru_18C704428);
    uint64_t result = 0LL;
    *(void *)(a2 + 8) = 152LL;
    *(void *)(a2 + 16) = v6;
  }

  else
  {
LABEL_7:
    pthread_mutex_unlock(&stru_18C704428);
    krb5_clear_error_message(a1);
    return 2529639054LL;
  }

  return result;
}

char **sub_1882E0FC8(const char *a1)
{
  int v2 = (char **)calloc(1uLL, 0x98uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (a1)
    {
      uint64_t v4 = strdup(a1);
      uint64_t *v3 = v4;
      if (!v4)
      {
LABEL_14:
        free(v3);
        return 0LL;
      }
    }

    else
    {
      uint64_t v4 = *v3;
      if (!*v3) {
        goto LABEL_14;
      }
    }

    uint64_t v5 = (const char **)off_18C704418;
    if (off_18C704418)
    {
      while (strcmp(v4, *v5))
      {
        uint64_t v5 = (const char **)v5[5];
        if (!v5) {
          goto LABEL_10;
        }
      }

      free(v4);
      goto LABEL_14;
    }

void sub_1882E10F4(krb5_context a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v2);
      uint64_t v6 = *(void *)(v2 + 144);
      uint64_t v7 = *(void **)(v2 + 152);
      if (v6)
      {
        *(void *)(v6 + 152) = v7;
        uint64_t v7 = *(void **)(v2 + 152);
      }

      else
      {
        *(void *)(a2 + 32) = v7;
      }

      void *v7 = v6;
      free((void *)v2);
      uint64_t v2 = v5;
    }

    while (v5);
  }

uint64_t sub_1882E1160(_krb5_context *a1, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a2 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 88));
  sub_1882DFCE8((uint64_t)a1, 20, "mcc_destroy_internal_locked: %s\n", *(const char **)a2);
  if (!*(_DWORD *)(a2 + 8)) {
    heim_abort("mcc_destroy: refcnt already 0:m->refcnt != 0", v5, v6, v7, v8, v9, v10, v11, v16);
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    uint64_t v12 = *(void *)(a2 + 40);
    __int128 v13 = *(void **)(a2 + 48);
    if (v12)
    {
      *(void *)(v12 + 48) = v13;
      __int128 v13 = *(void **)(a2 + 48);
    }

    else
    {
      qword_18C704420 = *(void *)(a2 + 48);
    }

    void *v13 = v12;
    __int128 v14 = *(krb5_principal_data **)(a2 + 16);
    if (v14)
    {
      krb5_free_principal(a1, v14);
      *(void *)(a2 + 16) = 0LL;
    }

    *(_DWORD *)(a2 + 12) = 1;
    sub_1882E10F4(a1, a2);
  }

  return pthread_mutex_unlock(v4);
}

uint64_t sub_1882E1220(uint64_t a1, const char **a2)
{
  int v4 = *((_DWORD *)a2 + 2) - 1;
  *((_DWORD *)a2 + 2) = v4;
  if (v4 || !*((_DWORD *)a2 + 3))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 11));
    uint64_t v5 = 0LL;
  }

  else
  {
    sub_1882DFCE8(a1, 20, "mcc_close_internal, dead: %s\n", *a2);
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 11));
    free((void *)*a2);
    *a2 = 0LL;
    pthread_mutex_destroy((pthread_mutex_t *)(a2 + 11));
    uint64_t v5 = 1LL;
  }

  pthread_mutex_unlock(&stru_18C704428);
  return v5;
}

void sub_1882E12FC(krb5_context a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v2);
      uint64_t v6 = *(void *)(v2 + 144);
      uint64_t v7 = *(void **)(v2 + 152);
      if (v6)
      {
        *(void *)(v6 + 152) = v7;
        uint64_t v7 = *(void **)(v2 + 152);
      }

      else
      {
        a2[1] = (uint64_t)v7;
      }

      void *v7 = v6;
      free((void *)v2);
      uint64_t v2 = v5;
    }

    while (v5);
  }

void sub_1882E1368(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(const char ****)a2; *(void *)a2; uint64_t i = *(const char ****)a2)
  {
    sub_1882DFCE8(a1, 20, "mcc_free_cache_cursor, closing cache: %s\n", **i);
    if (sub_1882E1220(a1, *i))
    {
      uint64_t v5 = *i;
      sub_1882DFCE8(a1, 20, "mcc_free_cache_cursor, needs to be freed: %s\n", **i);
      free(v5);
    }

    uint64_t v6 = i[1];
    uint64_t v7 = i[2];
    if (v6)
    {
      v6[2] = (const char *)v7;
      uint64_t v7 = i[2];
    }

    else
    {
      *(void *)(a2 + 8) = v7;
    }

    void *v7 = (const char *)v6;
    free(i);
  }

uint64_t _krb5_s4u2self_to_checksumdata(_krb5_context *a1, uint64_t a2, size_t *a3)
{
  uint64_t v6 = krb5_storage_emem();
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    krb5_storage_set_flags((uint64_t)v6, 32);
    uint64_t v8 = krb5_store_int32(v7, *(_DWORD *)a2);
    if (!(_DWORD)v8)
    {
      if (*(_DWORD *)(a2 + 8))
      {
        uint64_t v9 = 0LL;
        while (1)
        {
          size_t v10 = strlen(*(const char **)(*(void *)(a2 + 16) + 8 * v9));
          if (krb5_storage_write(v7) != v10) {
            break;
          }
        }
      }

      else
      {
LABEL_7:
        size_t v11 = strlen(*(const char **)(a2 + 24));
        if (krb5_storage_write(v7) == v11)
        {
          size_t v12 = strlen(*(const char **)(a2 + 56));
          if (krb5_storage_write(v7) == v12)
          {
            uint64_t v13 = krb5_storage_to_data(v7, a3);
            krb5_storage_free(v7);
            return v13;
          }
        }
      }

      uint64_t v8 = 12LL;
    }

    krb5_clear_error_message(a1);
  }

  else
  {
    krb5_clear_error_message(a1);
    return 12LL;
  }

  return v8;
}

uint64_t krb5_enomem(_krb5_context *a1)
{
  return 12LL;
}

uint64_t sub_1882E1594()
{
  return 22LL;
}

_BYTE *krb5_uuid_to_string(uint64_t a1)
{
  uint64_t result = malloc(0x25uLL);
  if (result)
  {
    uint64_t v3 = 0LL;
    int v4 = result;
    do
    {
      if ((v3 & 0x7FFFFFFFFFFFFFFDLL) == 8 || (v3 & 0x7FFFFFFFFFFFFFFDLL) == 4) {
        *v4++ = 45;
      }
      _BYTE *v4 = byte_18831A418[(unint64_t)*(unsigned __int8 *)(a1 + v3) >> 4];
      v4[1] = byte_18831A418[*(_BYTE *)(a1 + v3) & 0xF];
      v4 += 2;
      ++v3;
    }

    while (v3 != 16);
    _BYTE *v4 = 0;
  }

  return result;
}

uint64_t krb5_string_to_uuid(const char *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)a1;
  if (strlen(a1) == 36)
  {
    uint64_t v4 = 0LL;
    while (1)
    {
      if ((v4 & 0x7FFFFFFFFFFFFFFDLL) == 8 || (v4 & 0x7FFFFFFFFFFFFFFDLL) == 4)
      {
        int v6 = *v3++;
        if (v6 != 45) {
          break;
        }
      }

      char v7 = sub_1882E16C4(*v3);
      *(_BYTE *)(a2 + v4) = sub_1882E16C4(v3[1]) | (16 * v7);
      v3 += 2;
      if (++v4 == 16) {
        return 0LL;
      }
    }
  }

  return 22LL;
}

uint64_t sub_1882E16C4(unsigned __int8 a1)
{
  char v1 = __toupper(a1);
  uint64_t result = 0LL;
  LOBYTE(strlcpy(v2, *(const char **)keytab, v3) = 48;
  while (v1 != (char)v3)
  {
    int v3 = byte_18831A418[++result];
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

krb5_error_code krb5_mk_error(krb5_context a1, const krb5_error *a2, krb5_data *a3)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  size_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v12 = v3;
  error_message = a3;
  krb5_error_code v14 = (int)a2;
  __int128 v34 = a3;
  krb5_us_timeofday(a1, v24, &v23);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v33 = 0LL;
  uint64_t v25 = 0x1E00000005LL;
  uint64_t v27 = v8;
  uint64_t v28 = *(void *)v24;
  LODWORD(v29) = v23;
  uint64_t v26 = v9;
  if ((v14 + 1765328256) > 0xFFFFFF7F)
  {
    char v16 = 0LL;
    int v17 = v14 + 1765328384;
    goto LABEL_6;
  }

  if (!error_message)
  {
    error_message = (krb5_data *)krb5_get_error_message(a1, v14);
    __int128 v34 = error_message;
    int v17 = 60;
    char v16 = (const char *)error_message;
LABEL_6:
    DWORD1(v29) = v17;
    if (!error_message) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  char v16 = 0LL;
  DWORD1(v29) = 60;
LABEL_7:
  *((void *)&v32 + 1) = &v34;
LABEL_8:
  if (v12) {
    uint64_t v33 = v12;
  }
  if (v10)
  {
    __int128 v31 = *v10;
    int v18 = (char *)*((void *)v10 + 3);
    *(void *)&__int128 v32 = *((void *)v10 + 2);
  }

  else
  {
    int v18 = aUnspecifiedRea;
  }

  *((void *)&v30 + 1) = v18;
  if (v11)
  {
    *((void *)&v29 + 1) = v11 + 24;
    *(void *)&__int128 v30 = v11;
  }

  size_t v19 = sub_1882FE050();
  *(void *)uint64_t v35 = v19;
  int v20 = malloc(v19);
  *(void *)(v35 + 8) = v20;
  if (!v20)
  {
    krb5_error_code v21 = 12;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  krb5_error_code v21 = sub_1882FE030();
  if (v21)
  {
    free(*(void **)(v35 + 8));
    *(void *)(v35 + 8) = 0LL;
  }

  if (v16) {
LABEL_19:
  }
    krb5_free_error_message(a1, v16);
LABEL_20:
  if (!v21 && *(void *)v35) {
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  return v21;
}

krb5_error_code krb5_mk_priv( krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  size_t __size = 0LL;
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  size_t v10 = (const krb5_keyblock *)*((void *)a2 + 5);
  if (!v10)
  {
    size_t v10 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v10) {
      size_t v10 = (const krb5_keyblock *)*((void *)a2 + 4);
    }
  }

  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  krb5_data v29 = *a3;
  krb5_us_timeofday(a1, (krb5_timestamp *)&v25, (krb5_int32 *)&v26);
  int v11 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 1) != 0) {
    uint64_t v12 = &v25;
  }
  else {
    uint64_t v12 = 0LL;
  }
  if ((v11 & 1) != 0) {
    uint64_t v13 = &v26;
  }
  else {
    uint64_t v13 = 0LL;
  }
  __int128 v30 = v12;
  __int128 v31 = v13;
  if ((v11 & 2) != 0)
  {
    *(void *)&a5->timestamp = v25;
    a5->seq = v26;
  }

  if ((v11 & 4) != 0)
  {
    krb5_error_code v14 = (char *)&v26 + 4;
    HIDWORD(v26) = *((_DWORD *)a2 + 14);
  }

  else
  {
    krb5_error_code v14 = 0LL;
  }

  __int128 v32 = v14;
  if ((v11 & 8) != 0) {
    a5[1].timestamp = *((_DWORD *)a2 + 14);
  }
  __int128 v33 = *(_OWORD *)((char *)a2 + 8);
  krb5_data_zero(v37);
  size_t v15 = sub_1882FDF30();
  char v16 = (char *)malloc(v15);
  if (!v16) {
    goto LABEL_33;
  }
  int v17 = v16;
  int v18 = &v16[v15];
  krb5_error_code v19 = sub_1882FDF10();
  if (v19)
  {
LABEL_22:
    krb5_error_code v9 = v19;
    free(v17);
LABEL_34:
    krb5_data_free(v37);
    return v9;
  }

  if (v15 != __size) {
LABEL_38:
  }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  uint64_t v34 = 0x1500000005LL;
  krb5_magic magic = v10->magic;
  uint64_t v36 = 0LL;
  krb5_error_code v20 = krb5_crypto_init(a1, v10, 0LL, &v27);
  if (v20)
  {
    krb5_error_code v9 = v20;
LABEL_26:
    free(v17);
    return v9;
  }

  krb5_error_code v9 = krb5_encrypt(a1, v27, (krb5_pointer)0xD, (size_t)&v18[-__size], (krb5_encrypt_block *)__size, v37);
  krb5_crypto_destroy(a1, (uint64_t)v27);
  free(v17);
  if (v9) {
    return v9;
  }
  size_t v21 = sub_1882FDED0();
  __int128 v22 = (char *)malloc(v21);
  if (!v22)
  {
LABEL_33:
    krb5_error_code v9 = 12;
    goto LABEL_34;
  }

  int v17 = v22;
  krb5_int32 v23 = &v22[v21];
  krb5_error_code v19 = sub_1882FDEB0();
  if (v19) {
    goto LABEL_22;
  }
  if (v21 != __size) {
    goto LABEL_38;
  }
  krb5_data_free(v37);
  if (krb5_data_copy(a4, &v23[-__size], __size))
  {
    krb5_error_code v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_26;
  }

  free(v17);
  krb5_error_code v9 = 0;
  if ((*(_BYTE *)a2 & 4) != 0) {
    ++*((_DWORD *)a2 + 14);
  }
  return v9;
}

krb5_error_code krb5_mk_rep(krb5_context a1, krb5_auth_context a2, krb5_data *a3)
{
  uint64_t v34 = 0LL;
  uint64_t v28 = 0LL;
  eblock = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  __int128 v32 = 0LL;
  __int128 v33 = 0LL;
  uint64_t v25 = 0xF00000005LL;
  uint64_t v11 = *((void *)a2 + 8);
  uint64_t v30 = *(void *)(v11 + 56);
  uint64_t v31 = 0LL;
  LODWORD(v31) = *(_DWORD *)(v11 + 48);
  int v12 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x20) != 0)
  {
    uint64_t v13 = (const krb5_keyblock *)*((void *)a2 + 5);
    if (!v13)
    {
      krb5_error_code v15 = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)a2, *((unsigned int **)a2 + 4));
      if (v15) {
        goto LABEL_25;
      }
      uint64_t v13 = (const krb5_keyblock *)*((void *)a2 + 5);
    }

    if (krb5_copy_keyblock(a1, v13, &v32)) {
      goto LABEL_16;
    }
    int v12 = *(_DWORD *)a2;
  }

  if ((v12 & 4) != 0)
  {
    if (!*((_DWORD *)a2 + 14)) {
      krb5_generate_seq_number(a1, *((void *)a2 + 4), (int *)a2 + 14);
    }
    krb5_error_code v14 = calloc(1uLL, 4uLL);
    __int128 v33 = v14;
    if (v14)
    {
      _DWORD *v14 = *((_DWORD *)a2 + 14);
      goto LABEL_11;
    }

LABEL_16:
    krb5_error_code v15 = krb5_enomem(a1);
    goto LABEL_25;
  }

  __int128 v33 = 0LL;
LABEL_11:
  LODWORD(v26) = **((_DWORD **)a2 + 4);
  *((void *)&v26 + 1) = 0LL;
  if (*((void *)a2 + 13))
  {
    krb5_error_code v15 = sub_1882F17D0(a1, (uint64_t)a2, (uint64_t)&v25, v3, v4, v5, v6, v7);
    if (v15) {
      goto LABEL_25;
    }
  }

  char v16 = (krb5_encrypt_block *)sub_1882FDE10();
  int v17 = malloc((size_t)v16);
  if (!v17)
  {
    krb5_error_code v15 = 12;
    goto LABEL_25;
  }

  int v18 = v17;
  krb5_error_code v19 = (char *)v16 + (void)v17;
  krb5_error_code v20 = sub_1882FDDF0();
  if (v20)
  {
    krb5_error_code v15 = v20;
    free(v18);
    goto LABEL_25;
  }

  if (v16 != eblock) {
    goto LABEL_32;
  }
  krb5_error_code v15 = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0LL, &v34);
  if (!v15)
  {
    krb5_error_code v15 = krb5_encrypt(a1, v34, (krb5_pointer)0xC, v19 - (char *)eblock, eblock, &v27);
    if (!v15)
    {
      size_t v22 = sub_1882FDDB0();
      *(void *)&a3->krb5_magic magic = v22;
      krb5_int32 v23 = (char *)malloc(v22);
      a3->data = v23;
      if (!v23)
      {
        krb5_error_code v15 = 12;
        goto LABEL_23;
      }

      krb5_error_code v24 = sub_1882FDD90();
      if (v24)
      {
        krb5_error_code v15 = v24;
        free(a3->data);
        a3->data = 0LL;
        goto LABEL_23;
      }

      if (*(krb5_encrypt_block **)&a3->magic == eblock)
      {
        krb5_error_code v15 = 0;
        goto LABEL_23;
      }

    hx509_free_octet_string_list((uint64_t)&v16);
  }

  return v8;
}

    krb5_error_code v24 = __error();
    int v18 = *v24;
    uint64_t v37 = strerror(*v24);
    uint64_t v25 = "read: %s";
LABEL_17:
    __int128 v26 = a1;
    __int128 v27 = v18;
LABEL_28:
    krb5_set_error_message(v26, v27, v25, v37);
  }

  return v18;
}

        if (!v14) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }

    return 0LL;
  }

  return v9;
}

    ;
  }

  uint64_t v11 = fopen("/dev/tty", "r");
  int v12 = (FILE **)MEMORY[0x1895F89D8];
  if (v11)
  {
    uint64_t v13 = v11;
    rk_cloexec_file(v11);
  }

  else
  {
    uint64_t v13 = (FILE *)*MEMORY[0x1895F89D8];
  }

  krb5_error_code v14 = (FILE **)MEMORY[0x1895F89D0];
  fprintf((FILE *)*MEMORY[0x1895F89D0], "%s%s", a1, a2);
  fflush(*v14);
  krb5_error_code v15 = fileno(v13);
  tcgetattr(v15, &v30);
  *(_OWORD *)&v31.c_cc[16] = *(_OWORD *)&v30.c_cc[16];
  v31.c_ospeed = v30.c_ospeed;
  v31.c_cflag = v30.c_cflag;
  *(_OWORD *)v31.c_cc = *(_OWORD *)v30.c_cc;
  *(_OWORD *)&v31.c_iflag = *(_OWORD *)&v30.c_iflag;
  v31.c_lflag = v30.c_lflag & 0xFFFFFFFFFFFFFFF7LL;
  char v16 = fileno(v13);
  tcsetattr(v16, 0, &v31);
  int v17 = 0;
  dword_18C7076C8 = 0;
  int v18 = &a3[a4];
  while (1)
  {
    krb5_error_code v19 = getc(v13);
    if (v19 == 10)
    {
LABEL_26:
      krb5_error_code v20 = 1;
      goto LABEL_28;
    }

    if (v19 == -1) {
      break;
    }
    if (!v17) {
      *a3++ = v19;
    }
    int v17 = a3 == v18;
    if (dword_18C7076C8) {
      goto LABEL_26;
    }
  }

  krb5_error_code v20 = ferror(v13) != 0;
LABEL_28:
  a3[-v17] = 0;
  fputc(10, *v14);
  size_t v21 = fileno(v13);
  tcsetattr(v21, 0, &v30);
  if (v13 != *v12) {
    fclose(v13);
  }
  size_t v22 = (const sigaction *)v33;
  for (j = 1LL; j != 32; ++j)
  {
    if (v32[j]) {
      sigaction(j, v22, 0LL);
    }
    ++v22;
  }

  if (v17) {
    krb5_error_code v24 = -1;
  }
  else {
    krb5_error_code v24 = 0;
  }
  if (dword_18C7076C8) {
    uint64_t v25 = -2;
  }
  else {
    uint64_t v25 = v24;
  }
  if (v20) {
    return v25;
  }
  else {
    return 4294967293LL;
  }
}

uint64_t sub_1882E1E0C( krb5_context a1, krb5_auth_context *a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  if (!a2)
  {
    uint64_t checksum = krb5_auth_con_init(a1, &v28);
    if ((_DWORD)checksum) {
      return checksum;
    }
LABEL_8:
    krb5_auth_context v18 = v28;
    if ((a3 & 4) != 0 && !*((void *)v28 + 5))
    {
      uint64_t checksum = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)v28, (unsigned int *)(a6 + 16));
      if ((_DWORD)checksum) {
        goto LABEL_13;
      }
      krb5_auth_context v18 = v28;
    }

    krb5_free_keyblock(a1, *((krb5_keyblock **)v18 + 4));
    uint64_t checksum = krb5_copy_keyblock(a1, (const krb5_keyblock *)(a6 + 16), (krb5_keyblock **)v28 + 4);
    if ((_DWORD)checksum)
    {
LABEL_13:
      if (!a2) {
        krb5_auth_con_free(a1, v28);
      }
      return checksum;
    }

    if (a2)
    {
      if ((a3 & 8) != 0)
      {
        uint64_t checksum = _krb5_auth_con_setup_pfs(a1, (uint64_t)v28, **((_DWORD **)v28 + 4));
        if ((_DWORD)checksum) {
          return checksum;
        }
      }
    }

    if (!a4)
    {
      __int128 v26 = 0LL;
      goto LABEL_26;
    }

    krb5_error_code v20 = (const krb5_keyblock *)*((void *)v28 + 4);
    krb5_magic magic = v20->magic;
    if (v20->magic <= 0x18u)
    {
      if (((1 << magic) & 0x180000C) != 0)
      {
        uint64_t v23 = *a4;
        uint64_t v22 = a4[1];
        krb5_error_code v24 = a1;
        int v25 = 7;
        goto LABEL_23;
      }

      if (magic == 1)
      {
        uint64_t v23 = *a4;
        uint64_t v22 = a4[1];
        krb5_error_code v24 = a1;
        int v25 = 2;
LABEL_23:
        uint64_t checksum = krb5_create_checksum(v24, 0LL, 0, v25, v22, v23, (uint64_t)v29);
        if ((_DWORD)checksum) {
          goto LABEL_13;
        }
LABEL_24:
        __int128 v26 = v29;
LABEL_26:
        uint64_t checksum = _krb5_build_authenticator( a1,  (uint64_t)v28,  (char *)**((unsigned int **)v28 + 4),  a6,  (uint64_t)v26,  v30,  (void *)a9);
        if (v26) {
          sub_1882FD854();
        }
        if ((_DWORD)checksum) {
          goto LABEL_13;
        }
        uint64_t v27 = krb5_build_ap_req(a1, **((unsigned int **)v28 + 4), a6, a3, (uint64_t)v30[0], (uint64_t)v30[1], a7);
        goto LABEL_33;
      }
    }

    uint64_t v27 = krb5_crypto_init(a1, v20, 0LL, v30);
    if ((_DWORD)v27)
    {
LABEL_33:
      uint64_t checksum = v27;
      goto LABEL_13;
    }

    uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v30[0], a8, 0, a4[1], *a4, (uint64_t)v29);
    krb5_crypto_destroy(a1, (uint64_t)v30[0]);
    if ((_DWORD)checksum) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  char v16 = *a2;
  if (*a2)
  {
    uint64_t checksum = 0LL;
  }

  else
  {
    uint64_t checksum = krb5_auth_con_init(a1, a2);
    char v16 = *a2;
  }

  krb5_auth_context v28 = v16;
  if (!(_DWORD)checksum) {
    goto LABEL_8;
  }
  return checksum;
}

krb5_error_code krb5_mk_req_extended( krb5_context a1, krb5_auth_context *a2, krb5_flags a3, krb5_data *a4, krb5_creds *a5, krb5_data *a6)
{
  return sub_1882E1E0C(a1, a2, *(uint64_t *)&a3, (uint64_t *)&a4->magic, (int)a5, (uint64_t)a5, (uint64_t)a6, 0xAu, 0xBu);
}

uint64_t krb5_mk_req_exact( _krb5_context *a1, krb5_auth_context *a2, krb5_flags a3, const krb5_principal_data *a4, krb5_data *a5, krb5_ccache cache, krb5_data *a7)
{
  *(_OWORD *)int principal = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t credentials = krb5_cc_get_principal(a1, cache, principal);
  if (!(_DWORD)credentials)
  {
    uint64_t v15 = krb5_copy_principal(a1, a4, &principal[1]);
    if ((_DWORD)v15)
    {
      uint64_t credentials = v15;
      krb5_free_cred_contents(a1, (krb5_creds *)principal);
    }

    else
    {
      *((void *)&v21 + 1) = 0LL;
      if (a2 && *a2 && *((_DWORD *)*a2 + 22)) {
        LODWORD(v19) = *((_DWORD *)*a2 + 22);
      }
      uint64_t credentials = krb5_get_credentials(a1, 0, cache, (krb5_creds *)principal, &v17);
      krb5_free_cred_contents(a1, (krb5_creds *)principal);
      if (!(_DWORD)credentials)
      {
        uint64_t credentials = krb5_mk_req_extended(a1, a2, a3, a5, v17, a7);
        krb5_free_creds(a1, v17);
      }
    }
  }

  return credentials;
}

krb5_error_code krb5_mk_req( krb5_context a1, krb5_auth_context *a2, krb5_flags a3, char *a4, char *a5, krb5_data *a6, krb5_ccache a7, krb5_data *a8)
{
  krb5_error_code principal = krb5_expand_hostname_realms(a1, a5, (unsigned __int8 **)&v18, &v19);
  if (!principal)
  {
    krb5_error_code principal = krb5_make_principal(a1, &v17, *v19, a4, v18, 0LL);
    free(v18);
    krb5_free_host_realm(a1, v19);
    if (!principal)
    {
      krb5_error_code principal = krb5_mk_req_exact(a1, a2, a3, v17, a6, a7, a8);
      krb5_free_principal(a1, v17);
    }
  }

  return principal;
}

krb5_error_code krb5_mk_safe( krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  uint64_t v27 = 0LL;
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  size_t v10 = (const krb5_keyblock *)*((void *)a2 + 5);
  if (!v10)
  {
    size_t v10 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v10) {
      size_t v10 = (const krb5_keyblock *)*((void *)a2 + 4);
    }
  }

  uint64_t v28 = 0x1400000005LL;
  *(void *)__int128 v24 = 0LL;
  uint64_t v25 = 0LL;
  krb5_data v29 = *a3;
  krb5_us_timeofday(a1, v24, (krb5_int32 *)&v25);
  int v11 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 1) != 0) {
    int v12 = v24;
  }
  else {
    int v12 = 0LL;
  }
  if ((v11 & 1) != 0) {
    uint64_t v13 = &v25;
  }
  else {
    uint64_t v13 = 0LL;
  }
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  if ((v11 & 2) != 0)
  {
    *(void *)&a5->timestamp = *(void *)v24;
    a5->seq = v25;
  }

  if ((v11 & 4) != 0)
  {
    krb5_error_code v14 = (char *)&v25 + 4;
    HIDWORD(v25) = *((_DWORD *)a2 + 14);
  }

  else
  {
    krb5_error_code v14 = 0LL;
  }

  __int128 v32 = v14;
  if ((v11 & 8) != 0) {
    a5[1].timestamp = *((_DWORD *)a2 + 14);
  }
  __int128 v33 = *(_OWORD *)((char *)a2 + 8);
  int v34 = 0;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  size_t v15 = sub_1882FDE70();
  char v16 = malloc(v15);
  if (!v16) {
    return 12;
  }
  krb5_principal v17 = v16;
  krb5_error_code v18 = sub_1882FDE50();
  if (v18)
  {
LABEL_24:
    krb5_error_code checksum = v18;
    free(v17);
    return checksum;
  }

  if (v15 != v27) {
    goto LABEL_36;
  }
  krb5_error_code v18 = krb5_crypto_init(a1, v10, 0LL, &v26);
  if (v18) {
    goto LABEL_24;
  }
  krb5_error_code checksum = krb5_create_checksum(a1, (_DWORD **)v26, 0xFu, 0, (uint64_t)v17, v27, (uint64_t)&v34);
  krb5_crypto_destroy(a1, (uint64_t)v26);
  free(v17);
  if (checksum) {
    return checksum;
  }
  size_t v20 = sub_1882FDE70();
  __int128 v21 = malloc(v20);
  if (!v21)
  {
    krb5_error_code checksum = 12;
    goto LABEL_32;
  }

  __int128 v22 = v21;
  krb5_error_code v23 = sub_1882FDE50();
  if (v23)
  {
    krb5_error_code checksum = v23;
    free(v22);
LABEL_32:
    sub_1882FD854();
    return checksum;
  }

  sub_1882FD854();
  if (v20 != v27) {
LABEL_36:
  }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  *(void *)&a4->krb5_magic magic = v20;
  a4->data = (char *)v22;
  krb5_error_code checksum = 0;
  if ((*(_BYTE *)a2 & 4) != 0) {
    ++*((_DWORD *)a2 + 14);
  }
  return checksum;
}

uint64_t sub_1882E2500(const void *a1, size_t a2, char *a3, size_t a4)
{
  size_t v6 = a2;
  if (a4 <= a2) {
    size_t v8 = a2;
  }
  else {
    size_t v8 = a4;
  }
  size_t v9 = 2 * v8;
  size_t v10 = (char *)malloc(2 * v8);
  int v11 = malloc(v6);
  int v12 = v11;
  if (v10) {
    BOOL v13 = v11 == 0LL;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    size_t v38 = v9;
    __src = v11;
    memcpy(v11, a1, v6);
    bzero(a3, a4);
    int v12 = __src;
    size_t v15 = 0LL;
    unint64_t v16 = 8 * v6;
    size_t v17 = v6 & 0x1FFFFFFFFFFFFFFFLL;
    if ((v6 & 0x1FFFFFFFFFFFFFFELL) != 0) {
      uint64_t v18 = v6 & 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v18 = 1LL;
    }
    size_t v40 = v6;
    __int128 v41 = &v10[a4];
    __int128 v19 = v10 - 1;
    size_t v20 = a3 - 1;
    uint64_t v39 = v10;
    while (1)
    {
      memcpy(&v10[v15], v12, v6);
      if (v16)
      {
        __int128 v21 = malloc(v17);
        if (!v21)
        {
          uint64_t v14 = 12LL;
          size_t v9 = v38;
          size_t v6 = v40;
          int v12 = __src;
          if (__src) {
            goto LABEL_38;
          }
          goto LABEL_39;
        }

        __int128 v22 = v21;
        memcpy(v21, __src, v17);
        uint64_t v23 = 0LL;
        do
        {
          unint64_t v24 = 8 * v23 - 0xD % v16;
          do
          {
            unint64_t v25 = v24;
            v24 += v16;
          }

          while ((v25 & 0x8000000000000000LL) != 0);
          unint64_t v26 = v25 >> 3;
          char v27 = v25 & 7;
          unint64_t v28 = v25 + 8;
          int v29 = -(int)v25 & 7;
          if (v28 <= v16) {
            LOBYTE(v29) = 8 - v27;
          }
          *((_BYTE *)__src + v23++) = (v22[(v26 + 1) % v17] >> v29) | (v22[v26] << v27);
        }

        while (v23 != v18);
        free(v22);
        size_t v10 = v39;
        size_t v6 = v40;
      }

      v15 += v6;
      if (v15 >= a4)
      {
        int v12 = __src;
        while (1)
        {
          if (((a4 - 1) & 0x8000000000000000LL) == 0)
          {
            BOOL v30 = 0;
            size_t v31 = a4;
            do
            {
              unsigned int v32 = v30 + v20[v31] + v19[v31];
              BOOL v30 = v32 > 0xFF;
              v20[v31--] = v32;
            }

            while (v31);
            size_t v33 = a4 - 1;
            if (v32 >= 0x100)
            {
              do
              {
                unsigned int v34 = a3[v33]++ + 1;
                BOOL v35 = v33-- != 0;
              }

              while (v35 && ((v34 >> 8) & 1) != 0);
            }
          }

          v15 -= a4;
          if (!v15) {
            break;
          }
          memmove(v10, v41, v15);
          int v12 = __src;
          if (v15 < a4) {
            goto LABEL_36;
          }
        }

LABEL_39:
  if (v10)
  {
    bzero(v10, v9);
    free(v10);
  }

  return v14;
}

ssize_t krb5_net_read(int a1, int *a2, char *a3, size_t a4)
{
  return sub_1882FA460(*a2, a3, a4);
}

size_t krb5_net_write(int a1, int *a2, char *__buf, size_t __nbyte)
{
  return sub_1882FA4E0(*a2, __buf, __nbyte);
}

uint64_t krb5_net_write_block(uint64_t a1, int *a2, char *a3, size_t a4, uint64_t a5)
{
  size_t v6 = a4;
  int v8 = *a2;
  int v9 = 1 << *a2;
  unint64_t v10 = (unint64_t)*a2 >> 5;
  size_t v11 = a4;
  while (1)
  {
    memset(&v17, 0, sizeof(v17));
    if (__darwin_check_fd_set_overflow(v8, &v17, 0)) {
      v17.fds_bits[v10] |= v9;
    }
    if (a5)
    {
      uint64_t v18 = a5;
      int v19 = 0;
      int v12 = (timeval *)&v18;
    }

    else
    {
      int v12 = 0LL;
    }

    int v13 = select(v8 + 1, 0LL, &v17, 0LL, v12);
    if ((v13 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4) {
      return -1LL;
    }
LABEL_16:
    if (!v11) {
      return v6;
    }
  }

  if (!v13) {
    return 0LL;
  }
  if (!__darwin_check_fd_set_overflow(v8, &v17, 0) || (v17.fds_bits[v10] & v9) == 0)
  {
    *__error() = 60;
    return -1LL;
  }

  ssize_t v14 = write(v8, a3, v11);
  ssize_t v15 = v14;
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    a3 += v14;
    v11 -= v14;
    goto LABEL_16;
  }

  if (*__error() == 4) {
    goto LABEL_16;
  }
  return v15;
}

uint64_t krb5_pac_parse( _krb5_context *a1, const void *a2, size_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = (void *)heim_uniq_alloc(0x68uLL, (uint64_t)"krb5-pac", (uint64_t)sub_1882E2C9C, (uint64_t)a4, a5, a6, a7, a8);
  if (!v12)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_12;
  }

  int v13 = krb5_storage_from_readonly_mem((uint64_t)a2, a3);
  if (!v13)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_9;
  }

  uint64_t v14 = (uint64_t)v13;
  krb5_storage_set_flags((uint64_t)v13, 32);
  uint64_t v15 = krb5_ret_uint32(v14, &v34);
  if ((_DWORD)v15 || (uint64_t v15 = krb5_ret_uint32(v14, &v33), (_DWORD)v15))
  {
LABEL_5:
    uint64_t v16 = v15;
    krb5_clear_error_message(a1);
    goto LABEL_6;
  }

  if (!v34)
  {
    int v19 = "PAC have too few buffers";
    goto LABEL_19;
  }

  if (v34 >= 0x3E9)
  {
    uint64_t v16 = 2314790741LL;
    krb5_set_error_message(a1, -1980176555, "PAC have too many buffers");
    goto LABEL_6;
  }

  if (v33)
  {
    size_t v31 = (const char *)v33;
    int v19 = "PAC have wrong version %d";
    goto LABEL_19;
  }

  size_t v20 = (16LL * v34) | 8;
  __int128 v21 = (unsigned int *)calloc(1uLL, v20);
  _OWORD v12[4] = v21;
  if (!v21)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_6;
  }

  unsigned int v22 = v34;
  unsigned int *v21 = v34;
  v21[1] = v33;
  if (v20 > a3)
  {
    uint64_t v16 = 22LL;
    goto LABEL_6;
  }

  if (!v22)
  {
LABEL_47:
    uint64_t v16 = krb5_data_copy(v12 + 5, a2, a3);
    if ((_DWORD)v16) {
      goto LABEL_6;
    }
    krb5_storage_free(v14);
    goto LABEL_12;
  }

  unint64_t v23 = 0LL;
  uint64_t v24 = 3LL;
  while (2)
  {
    uint64_t v15 = krb5_ret_uint32(v14, &v21[v24 - 1]);
    if ((_DWORD)v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4));
    if ((_DWORD)v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4 + 8));
    if ((_DWORD)v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4 + 4));
    if ((_DWORD)v15) {
      goto LABEL_5;
    }
    __int128 v21 = (unsigned int *)v12[4];
    unint64_t v25 = &v21[v24];
    size_t v26 = v21[v24 + 2];
    if ((v26 & 7) != 0)
    {
      int v19 = "PAC out of allignment";
      goto LABEL_19;
    }

    if (v25[1])
    {
      int v19 = "PAC high offset set";
      goto LABEL_19;
    }

    if (a3 < v26)
    {
      int v19 = "PAC offset off end";
      goto LABEL_19;
    }

    if (v26 < v20)
    {
      size_t v31 = (const char *)v21[v24 + 2];
      size_t v32 = v20;
      int v19 = "PAC offset inside header: %lu %lu";
      goto LABEL_19;
    }

    if (a3 - v26 < v21[v24])
    {
      int v19 = "PAC length off end";
      goto LABEL_19;
    }

    int v29 = *(v25 - 1);
    char v27 = v25 - 1;
    int v28 = v29;
    switch(v29)
    {
      case 2:
        if (!v12[10])
        {
          v12[10] = v27;
          goto LABEL_46;
        }

        BOOL v30 = "credential info";
        goto LABEL_58;
      case 6:
        if (v12[7])
        {
          BOOL v30 = "server checksum";
          goto LABEL_58;
        }

        v12[7] = v27;
        goto LABEL_46;
      case 7:
        if (v12[8])
        {
          BOOL v30 = "KDC checksum";
          goto LABEL_58;
        }

        v12[8] = v27;
        goto LABEL_46;
      case 10:
        if (!v12[9])
        {
          v12[9] = v27;
LABEL_46:
          ++v23;
          v24 += 4LL;
          if (v23 >= *v21) {
            goto LABEL_47;
          }
          continue;
        }

        BOOL v30 = "logon names";
LABEL_58:
        size_t v31 = v30;
        int v19 = "PAC have two %s";
LABEL_19:
        uint64_t v16 = 22LL;
        krb5_set_error_message(a1, 22, v19, v31, v32);
LABEL_6:
        krb5_storage_free(v14);
LABEL_9:
        fd_set v17 = (void *)v12[4];
        if (v17) {
          free(v17);
        }
        free(v12);
        int v12 = 0LL;
LABEL_12:
        *a4 = v12;
        return v16;
      default:
        sub_1882DFCE8((uint64_t)a1, 5, "krb5_pac_parse: unsupported pac type %d", v28);
        __int128 v21 = (unsigned int *)v12[4];
        goto LABEL_46;
    }
  }

void sub_1882E2C9C(uint64_t a1)
{
}

uint64_t krb5_pac_init( _krb5_context *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = heim_uniq_alloc(0x68uLL, (uint64_t)"krb5-pac", (uint64_t)sub_1882E2C9C, a4, a5, a6, a7, a8);
  if (!v10) {
    return krb5_enomem(a1);
  }
  uint64_t v11 = v10;
  int v12 = calloc(1uLL, 0x18uLL);
  *(void *)(v11 + 32) = v12;
  if (!v12)
  {
LABEL_5:
    free((void *)v11);
    return krb5_enomem(a1);
  }

  uint64_t result = krb5_data_alloc((size_t *)(v11 + 40), 8uLL);
  if ((_DWORD)result)
  {
    free(*(void **)(v11 + 32));
    goto LABEL_5;
  }

  *a2 = v11;
  return result;
}

uint64_t krb5_pac_add_buffer(krb5_context a1, void *a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 4) || (size_t v6 = (unsigned int *)a2[4], v7 = *v6, (_DWORD)v7 == -1))
  {
LABEL_13:
    int v8 = "integer overrun";
    goto LABEL_14;
  }

  if (v7 >= 0x3E8)
  {
    int v8 = "PAC has too many buffers";
LABEL_14:
    uint64_t v20 = 22LL;
    krb5_set_error_message(a1, 22, v8);
    return v20;
  }

  int v11 = 16 * v7;
  int v12 = (char *)realloc(v6, 16 * v7 + 24);
  if (v12)
  {
    a2[4] = v12;
    if ((_DWORD)v7)
    {
      int v13 = v12 + 20;
      uint64_t v14 = v7;
      while (*v13 < 0xFFFFFFF0)
      {
        *v13 += 16;
        v13 += 4;
        if (!--v14) {
          goto LABEL_10;
        }
      }
    }

    else
    {
LABEL_10:
      unint64_t v15 = a2[5];
      if (v15 < 0xFFFFFFF0)
      {
        unint64_t v16 = (v15 + 16);
        fd_set v17 = &v12[16 * v7];
        size_t v18 = *(void *)a4;
        *((_DWORD *)v17 + 2) = a3;
        *(void *)(v17 + 12) = v18;
        *((_DWORD *)v17 + 5) = v16;
        if (0xFFFFFFFF - v18 >= v16)
        {
          unsigned int v19 = v16 + v18;
          if ((v16 + v18) < 0xFFFFFFF9)
          {
            uint64_t v20 = krb5_data_realloc((uint64_t)(a2 + 5), (v19 + 7) & 0xFFFFFFF8);
            if ((_DWORD)v20)
            {
              krb5_set_error_message(a1, v20, "malloc: out of memory");
            }

            else
            {
              uint64_t v22 = v11 | 8u;
              memmove((void *)(a2[6] + v22 + 16), (const void *)(a2[6] + v22), (v15 - v22));
              unint64_t v23 = (void *)(a2[6] + v22);
              *unint64_t v23 = 0LL;
              v23[1] = 0LL;
              memcpy((void *)(a2[6] + v16), *(const void **)(a4 + 8), *(void *)a4);
              bzero((void *)(a2[6] + *(void *)a4 + v16), a2[5] - v19);
              ++*(_DWORD *)a2[4];
            }

            return v20;
          }
        }
      }
    }

    goto LABEL_13;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_pac_get_buffer(_krb5_context *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = *(unsigned int **)(a2 + 32);
  uint64_t v6 = *v5;
  if ((_DWORD)v6)
  {
    uint64_t v7 = v5 + 3;
    while (*(v7 - 1) != a3)
    {
      v7 += 4;
      if (!--v6) {
        goto LABEL_5;
      }
    }

    uint64_t v8 = krb5_data_copy(a4, (const void *)(*(void *)(a2 + 48) + v7[2]), *v7);
    if ((_DWORD)v8) {
      krb5_set_error_message(a1, v8, "malloc: out of memory");
    }
  }

  else
  {
LABEL_5:
    uint64_t v8 = 2LL;
    krb5_set_error_message(a1, 2, "No PAC buffer of type %lu was found");
  }

  return v8;
}

uint64_t krb5_pac_get_types(_krb5_context *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v8 = calloc(**(unsigned int **)(a2 + 32), 4uLL);
  *a4 = v8;
  if (v8)
  {
    int v9 = *(_DWORD **)(a2 + 32);
    if (*v9)
    {
      unint64_t v10 = 0LL;
      uint64_t v11 = 2LL;
      do
      {
        v8[v10++] = v9[v11];
        unint64_t v12 = *v9;
        v11 += 4LL;
      }

      while (v10 < v12);
    }

    else
    {
      unint64_t v12 = 0LL;
    }

    *a3 = v12;
    return 0LL;
  }

  else
  {
    *a3 = 0LL;
    return krb5_enomem(a1);
  }

void krb5_pac_free(uint64_t a1, const void *a2)
{
}

uint64_t krb5_pac_verify( krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, const krb5_keyblock *a5, const krb5_keyblock *a6)
{
  if (!*(void *)(a2 + 56))
  {
    fd_set v17 = "PAC missing server checksum";
LABEL_11:
    uint64_t v16 = 22LL;
    krb5_set_error_message(a1, 22, v17);
    return v16;
  }

  if (!*(void *)(a2 + 64))
  {
    fd_set v17 = "PAC missing kdc checksum";
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(a2 + 72);
  if (!v8)
  {
    fd_set v17 = "PAC missing logon name";
    goto LABEL_11;
  }

  int v13 = krb5_storage_from_readonly_mem(*(void *)(a2 + 48) + *(unsigned int *)(v8 + 12), *(unsigned int *)(v8 + 4));
  if (!v13)
  {
LABEL_24:
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_25;
  }

  uint64_t v14 = (uint64_t)v13;
  krb5_storage_set_flags((uint64_t)v13, 32);
  uint64_t v15 = krb5_ret_uint32(v14, &__size[3]);
  if ((_DWORD)v15) {
    goto LABEL_7;
  }
  uint64_t v15 = krb5_ret_uint32(v14, &__size[1]);
  if ((_DWORD)v15) {
    goto LABEL_7;
  }
  if (10000000 * a3 + 116444736000000000LL != (*(unsigned int *)&__size[3] | ((unint64_t)*(unsigned int *)&__size[1] << 32)))
  {
    krb5_storage_free(v14);
    fd_set v17 = "PAC timestamp mismatch";
    goto LABEL_11;
  }

  uint64_t v15 = krb5_ret_uint16(v14, __size);
  if ((_DWORD)v15)
  {
LABEL_7:
    uint64_t v16 = v15;
    krb5_clear_error_message(a1);
    return v16;
  }

  if (!__size[0])
  {
    krb5_storage_free(v14);
    fd_set v17 = "PAC logon name length missing";
    goto LABEL_11;
  }

  unsigned int v19 = (unsigned __int16 *)malloc(__size[0]);
  if (!v19)
  {
    krb5_storage_free(v14);
    goto LABEL_24;
  }

  uint64_t v20 = v19;
  uint64_t v21 = krb5_storage_read(v14);
  uint64_t v22 = __size[0];
  krb5_storage_free(v14);
  if (v21 != v22)
  {
    fd_set v17 = "Failed to read PAC logon name";
    goto LABEL_11;
  }

  uint64_t v23 = __size[0];
  unint64_t v33 = (unint64_t)__size[0] >> 1;
  unsigned int v31 = 1;
  uint64_t v24 = (unsigned __int16 *)malloc(2 * v33);
  if (!v24) {
    goto LABEL_24;
  }
  unint64_t v25 = v24;
  uint64_t v16 = sub_1882FD0F4(v20, v23, &v31, v24, (uint64_t *)&v33);
  free(v20);
  if (!(_DWORD)v16)
  {
    uint64_t v28 = wind_ucs2utf8_length(v25, v33, &v32);
    if ((_DWORD)v28)
    {
      uint64_t v16 = v28;
      free(v25);
      krb5_set_error_message(a1, v16, "Failed to count length of UCS-2 string");
      goto LABEL_25;
    }

    int v29 = malloc(++v32);
    if (v29)
    {
      BOOL v30 = v29;
      uint64_t v16 = wind_ucs2utf8(v25, v33, v29, &v32);
      free(v25);
      if ((_DWORD)v16)
      {
        free(v30);
        krb5_set_error_message(a1, v16, "Failed to convert to UTF-8");
      }

      else
      {
        uint64_t v16 = krb5_parse_name_flags(a1, (const char *)v30, 1, &v35);
        free(v30);
        if ((_DWORD)v16) {
          return v16;
        }
        if (krb5_principal_compare_any_realm((uint64_t)a1, a4, (uint64_t)v35) == 1)
        {
          uint64_t v16 = 0LL;
        }

        else
        {
          uint64_t v16 = 22LL;
          krb5_set_error_message(a1, 22, "PAC logon name mismatch");
        }

        krb5_free_principal(a1, v35);
      }

      goto LABEL_25;
    }

    free(v25);
    goto LABEL_24;
  }

  free(v25);
  krb5_set_error_message(a1, v16, "Failed to convert string to UCS-2");
LABEL_25:
  if (!(_DWORD)v16)
  {
    uint64_t v16 = krb5_copy_data(a1, (const krb5_data *)(a2 + 40), (krb5_data **)&v35);
    if (!(_DWORD)v16)
    {
      uint64_t v26 = *(void *)(a2 + 56);
      unsigned int v27 = *(_DWORD *)(v26 + 4);
      if (v27 >= 4 && *(_DWORD *)(*(void *)(a2 + 64) + 4LL) > 3u)
      {
        bzero((void *)(*(void *)&v35->realm.magic + *(unsigned int *)(v26 + 12) + 4LL), v27 - 4);
        bzero( (void *)(*(void *)&v35->realm.magic + *(unsigned int *)(*(void *)(a2 + 64) + 12LL) + 4LL),  (*(_DWORD *)(*(void *)(a2 + 64) + 4LL) - 4));
        uint64_t v16 = sub_1882E346C( a1,  *(void *)(a2 + 56),  a2 + 40,  *(const void **)&v35->realm.magic,  *(void *)&v35->magic,  a5);
        krb5_free_data(a1, (krb5_data *)v35);
        if (!(_DWORD)v16)
        {
          if (!a6) {
            return 0LL;
          }
          uint64_t v16 = sub_1882E346C( a1,  *(void *)(a2 + 64),  a2 + 40,  (const void *)(*(void *)(a2 + 48) + *(unsigned int *)(*(void *)(a2 + 56) + 12LL) + 4LL),  (*(_DWORD *)(*(void *)(a2 + 56) + 4LL) - 4),  a6);
          if (!(_DWORD)v16) {
            return 0LL;
          }
        }
      }

      else
      {
        return 22LL;
      }
    }
  }

  return v16;
}

uint64_t sub_1882E346C( _krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, const krb5_keyblock *a6)
{
  uint64_t seed = 0LL;
  uint64_t v30 = 0LL;
  unsigned int v31 = 0LL;
  uint64_t v11 = krb5_storage_from_mem(*(void *)(a3 + 8) + *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 4));
  if (!v11) {
    return krb5_enomem(a1);
  }
  uint64_t v12 = (uint64_t)v11;
  krb5_storage_set_flags((uint64_t)v11, 32);
  uint64_t v13 = krb5_ret_uint32(v12, &v32);
  if (!(_DWORD)v13)
  {
    uint64_t v16 = v32;
    LODWORD(seed) = v32;
    uint64_t v17 = *(unsigned int *)(a2 + 4);
    uint64_t v18 = krb5_storage_seek(v12);
    int v19 = v17 - v18;
    uint64_t v30 = v17 - v18;
    uint64_t v20 = malloc(v17 - v18);
    unsigned int v31 = v20;
    if (!v20)
    {
      uint64_t v14 = krb5_enomem(a1);
      goto LABEL_24;
    }

    uint64_t v21 = v20;
    if (krb5_storage_read(v12) == v19)
    {
      if (krb5_checksum_is_keyed((uint64_t)a1, v16))
      {
        if ((_DWORD)v16 == -138)
        {
          *(void *)ctype = 0LL;
          v28[0] = 0LL;
          v28[1] = 0LL;
          if (sub_1882E41F4(a1, a6, (uint64_t)a4, a5, (uint64_t)ctype)
            || krb5_data_ct_cmp((uint64_t)v28, (uint64_t)&v30))
          {
            uint64_t v14 = 2529638943LL;
            krb5_set_error_message(a1, -1765328353, "PAC integrity check failed for hmac-md5 checksum");
          }

          else
          {
            uint64_t v14 = 0LL;
          }

          krb5_data_free(v28);
          goto LABEL_22;
        }

        *(void *)ctype = 0LL;
        uint64_t v24 = krb5_crypto_init(a1, a6, 0LL, (krb5_keyblock ***)ctype);
        if (!(_DWORD)v24)
        {
          uint64_t v14 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0x11, a4, a5, &seed, v25);
          krb5_crypto_destroy(a1, *(uint64_t *)ctype);
LABEL_22:
          uint64_t v23 = v31;
          goto LABEL_23;
        }

        uint64_t v14 = v24;
        uint64_t v21 = v31;
        if (!v31) {
          goto LABEL_24;
        }
LABEL_17:
        uint64_t v23 = v21;
LABEL_23:
        free(v23);
        goto LABEL_24;
      }

      uint64_t v26 = v16;
      uint64_t v22 = "Checksum type %d not keyed";
    }

    else
    {
      uint64_t v22 = "PAC checksum missing checksum";
    }

    uint64_t v14 = 22LL;
    krb5_set_error_message(a1, 22, v22, v26);
    goto LABEL_17;
  }

  uint64_t v14 = v13;
  krb5_clear_error_message(a1);
LABEL_24:
  krb5_storage_free(v12);
  return v14;
}

uint64_t krb5_pac_process_credentials_buffer(_krb5_context *a1, void *a2, const krb5_keyblock *a3)
{
  uint64_t v3 = 2314790736LL;
  krb5_const_pointer inptr = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v4 = a2 + 11;
  if (a2[11]) {
    return 2314790739LL;
  }
  uint64_t v7 = a2[10];
  if (!v7) {
    return 2314790737LL;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 4);
  uint64_t v11 = krb5_storage_from_readonly_mem(a2[6] + *(unsigned int *)(v7 + 12), v8);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    krb5_storage_set_flags((uint64_t)v11, 32);
    uint64_t v13 = krb5_ret_uint32(v12, (_DWORD *)&v19 + 1);
    if ((_DWORD)v13 || (uint64_t v13 = krb5_ret_int32(v12, (unsigned int *)&v19), (_DWORD)v13))
    {
      uint64_t v14 = v13;
      krb5_clear_error_message(a1);
      uint64_t v3 = v14;
    }

    else if (HIDWORD(v19))
    {
      uint64_t v3 = 2314790738LL;
      krb5_set_error_message(a1, -1980176558, "unsupport pac credentail version: %d");
    }

    else
    {
      if (v19 <= 0x17 && ((1 << v19) & 0x86000A) != 0)
      {
        if (a3->magic == (_DWORD)v19)
        {
          uint64_t v3 = krb5_crypto_init(a1, a3, 0LL, (krb5_keyblock ***)&inptr);
          if (!(_DWORD)v3) {
            uint64_t v3 = krb5_decrypt( a1,  inptr,  (krb5_pointer)0x10,  a2[6] + *(unsigned int *)(a2[10] + 12LL) + 8LL,  (krb5_encrypt_block *)(*(_DWORD *)(a2[10] + 4LL) - 8),  v4);
          }
          goto LABEL_14;
        }

        uint64_t magic = a3->magic;
        uint64_t v17 = v19;
        uint64_t v15 = "as key (%d) mismatch with PAC enctype (%d)";
      }

      else
      {
        uint64_t magic = v19;
        uint64_t v15 = "enctype: %d not support as pac enctype";
      }

      krb5_set_error_message(a1, -1980176560, v15, magic, v17);
    }

uint64_t krb5_pac_copy_credential_package()
{
  return 2314790737LL;
}

uint64_t _krb5_pac_sign( _krb5_context *a1, void *a2, uint64_t a3, const krb5_principal_data *a4, const krb5_keyblock *a5, const krb5_keyblock *a6, _OWORD *a7)
{
  unint64_t v66 = 0LL;
  unint64_t v67 = 0LL;
  uint64_t v65 = 0LL;
  krb5_data_zero(&v64);
  if (a4)
  {
    int v14 = a2[9] == 0LL;
    if (!a5) {
      goto LABEL_5;
    }
  }

  else
  {
    int v14 = 0;
    if (!a5) {
      goto LABEL_5;
    }
  }

  if (!a2[7]) {
    ++v14;
  }
LABEL_5:
  if (a6 && !a2[8])
  {
    ++v14;
  }

  else if (!v14)
  {
    goto LABEL_8;
  }

  uint64_t v19 = (_DWORD *)a2[4];
  if (__CFADD__(v14, *v19))
  {
    uint64_t v20 = "integer overrun";
LABEL_23:
    uint64_t v18 = 22LL;
    krb5_set_error_message(a1, 22, v20);
    goto LABEL_24;
  }

  unsigned int v21 = *v19 + v14;
  if (v21 > 0x3E8)
  {
    uint64_t v20 = "PAC has too many buffers";
    goto LABEL_23;
  }

  uint64_t v23 = realloc(v19, (16 * v21) | 8);
  if (!v23) {
    return krb5_enomem(a1);
  }
  a2[4] = v23;
  if (a4 && !a2[9])
  {
    uint64_t v24 = *v23;
    *uint64_t v23 = v24 + 1;
    size_t v25 = &v23[4 * v24];
    *((void *)v25 + 1) = 0LL;
    v25 += 2;
    a2[9] = v25;
    *((void *)v25 + 1) = 0LL;
    *size_t v25 = 10;
  }

  if (a5 && !a2[7])
  {
    uint64_t v26 = *v23;
    *uint64_t v23 = v26 + 1;
    unsigned int v27 = &v23[4 * v26];
    *((void *)v27 + 1) = 0LL;
    v27 += 2;
    a2[7] = v27;
    *((void *)v27 + 1) = 0LL;
    _DWORD *v27 = 6;
  }

  if (a6 && !a2[8])
  {
    uint64_t v28 = *v23;
    *uint64_t v23 = v28 + 1;
    int v29 = &v23[4 * v28];
    *((void *)v29 + 1) = 0LL;
    v29 += 2;
    a2[8] = v29;
    *((void *)v29 + 1) = 0LL;
    *int v29 = 7;
  }

uint64_t sub_1882E3FB8(_krb5_context *a1, const krb5_keyblock *a2, _DWORD *a3, void *a4)
{
  int v9 = 0LL;
  uint64_t checksum_type = krb5_crypto_init(a1, a2, 0LL, &v9);
  if (!(_DWORD)checksum_type)
  {
    uint64_t checksum_type = krb5_crypto_get_checksum_type(a1, (uint64_t)v9, &v10);
    krb5_crypto_destroy(a1, (uint64_t)v9);
    if (!(_DWORD)checksum_type)
    {
      if (!krb5_checksum_is_keyed((uint64_t)a1, v10))
      {
        *a3 = -138;
        *a4 = 16LL;
      }

      uint64_t checksum_type = krb5_checksumsize(a1, v10, a4);
      if (!(_DWORD)checksum_type) {
        *a3 = v10;
      }
    }
  }

  return checksum_type;
}

uint64_t sub_1882E406C(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v3 = a3;
  while (1)
  {
    uint64_t v6 = krb5_storage_write(a2);
    if (v6 <= 0) {
      break;
    }
    v3 -= v6;
    if (!v3) {
      return 0LL;
    }
  }

  return krb5_enomem(a1);
}

uint64_t sub_1882E40F0( _krb5_context *a1, const krb5_keyblock *a2, int a3, uint64_t a4, uint64_t a5, void *a6, size_t a7)
{
  uint64_t v15 = 0LL;
  if (a3 == -138)
  {
    uint64_t checksum = sub_1882E41F4(a1, a2, a4, a5, (uint64_t)v14);
    if ((_DWORD)checksum) {
      return checksum;
    }
  }

  else
  {
    uint64_t checksum = krb5_crypto_init(a1, a2, 0LL, &v15);
    if ((_DWORD)checksum) {
      return checksum;
    }
    uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v15, 0x11u, 0, a4, a5, (uint64_t)v14);
    krb5_crypto_destroy(a1, (uint64_t)v15);
    if ((_DWORD)checksum) {
      return checksum;
    }
  }

  if (v14[1] == a7)
  {
    memcpy(a6, (const void *)v14[2], a7);
    uint64_t checksum = 0LL;
  }

  else
  {
    uint64_t checksum = 22LL;
    krb5_set_error_message(a1, 22, "pac checksum wrong length");
  }

  sub_1882FD854();
  return checksum;
}

uint64_t sub_1882E41F4(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  uint64_t v9 = krb5_copy_keyblock(a1, a2, v11);
  if (!(_DWORD)v9)
  {
    uint64_t v9 = krb5_data_alloc((size_t *)(a5 + 8), 0x10uLL);
    if (!(_DWORD)v9)
    {
      *(_DWORD *)a5 = -138;
      uint64_t v9 = sub_1882F6F28(a1, (uint64_t *)v11, a3, a4, 17LL, a5);
      if ((_DWORD)v9) {
        krb5_data_free((void *)(a5 + 8));
      }
    }

    krb5_free_keyblock(a1, v11[0]);
  }

  return v9;
}

_DWORD *krb5_find_padata(uint64_t a1, int a2, int a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= a2) {
    return 0LL;
  }
  for (uint64_t result = (_DWORD *)(a1 + 24LL * v4); *result != a3; result += 6)
  {
    *a4 = ++v4;
    if (a2 == v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t krb5_padata_add(_krb5_context *a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10 = (char *)realloc(*((void **)a2 + 1), 24LL * (*a2 + 1));
  if (v10)
  {
    uint64_t v11 = 0LL;
    *((void *)a2 + 1) = v10;
    int v12 = *a2;
    uint64_t v13 = &v10[24 * *a2];
    *(_DWORD *)uint64_t v13 = a3;
    *((void *)v13 + 1) = a5;
    *((void *)v13 + 2) = a4;
    *a2 = v12 + 1;
  }

  else
  {
    uint64_t v11 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v11;
}

uint64_t _krb5_pk_find_cert(uint64_t *a1, int a2, uint64_t a3, int *a4, void *a5)
{
  v19[9] = *MEMORY[0x1895F89C0];
  v19[0] = 0x188320375LL;
  void v19[2] = "PKINIT EKU";
  v19[4] = 0x18832038DLL;
  v18[0] = xmmword_18831A45C;
  v18[1] = unk_18831A46C;
  v17[0] = 8LL;
  v17[1] = v18;
  v19[1] = v17;
  v19[3] = &unk_18A21D4F0;
  uint64_t v9 = 2LL * (a2 == 0);
  v19[5] = &unk_18A21D540;
  v19[6] = "any (or no)";
  v19[7] = 0LL;
  while (1)
  {
    uint64_t match_eku = hx509_query_match_eku((uint64_t)a4, v19[v9 + 1]);
    if ((_DWORD)match_eku) {
      break;
    }
    uint64_t v15 = hx509_certs_find(a1[47], a3, a4, a5, v11, v12, v13, v14);
    if ((_DWORD)v15)
    {
      sub_1882E44E8(a1, v15, "Failed finding certificate with %s OID", (const char *)v19[v9]);
      v9 += 2LL;
      if (v9 != 8) {
        continue;
      }
    }

    return v15;
  }

  uint64_t v15 = match_eku;
  sub_1882E44E8(a1, match_eku, "Failed setting %s OID", (const char *)v19[v9]);
  return v15;
}

void sub_1882E44E8(uint64_t *a1, int a2, char *a3, ...)
{
  if (vasprintf(v8, a3, va) == -1 || v8[0] == 0LL)
  {
    krb5_clear_error_message((krb5_context)a1);
  }

  else
  {
    error_string = hx509_get_error_string(a1[47], a2);
    if (error_string)
    {
      uint64_t v7 = error_string;
      krb5_set_error_message((krb5_context)a1, a2, "%s: %s", v8[0], error_string);
      sub_1882DFCE8((uint64_t)a1, 5, "%s: %s: %d", v8[0], v7, a2);
      free(v7);
    }

    else
    {
      krb5_clear_error_message((krb5_context)a1);
    }

    free(v8[0]);
  }

uint64_t _krb5_pk_mk_ContentInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = der_copy_oid();
  if (!(_DWORD)result)
  {
    uint64_t v7 = (size_t *)calloc(1uLL, 0x10uLL);
    *(void *)(a4 + 16) = v7;
    if (v7 && (uint64_t v8 = v7, v9 = *(void *)a2, v10 = malloc(*(void *)a2), (v8[1] = (size_t)v10) != 0))
    {
      memcpy(v10, *(const void **)(a2 + 8), v9);
      uint64_t result = 0LL;
      size_t *v8 = v9;
    }

    else
    {
      return 12LL;
    }
  }

  return result;
}

uint64_t sub_1882E463C( uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v9 = a6;
  if (*(void *)(*(void *)a2 + 16LL) || (*(_BYTE *)(a2 + 52) & 0x20) != 0)
  {
    if (krb5_config_get_BOOL_default((uint64_t)a1, 0LL, a4, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)"realms"))
    {
      int v19 = 1;
      *(_BYTE *)(a2 + 52) = *(_BYTE *)(a2 + 52) & 0xFE | krb5_config_get_BOOL_default( (uint64_t)a1,  0LL,  1LL,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"realms");
    }

    else
    {
      int v19 = 2;
    }

    *(_DWORD *)(a2 + 48) = v19;
    *(_BYTE *)(a2 + 52) = (2
                         * krb5_config_get_BOOL_default( (uint64_t)a1,  0LL,  1LL,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"realms")) | *(_BYTE *)(a2 + 52) & 0xFD;
    *(_BYTE *)(a2 + 52) = (4
                         * krb5_config_get_BOOL_default( (uint64_t)a1,  0LL,  1LL,  v20,  v21,  v22,  v23,  v24,  (uint64_t)"realms")) | *(_BYTE *)(a2 + 52) & 0xFB;
    *(_BYTE *)(a2 + 52) = (8
                         * krb5_config_get_BOOL_default( (uint64_t)a1,  0LL,  0LL,  v25,  v26,  v27,  v28,  v29,  (uint64_t)"realms")) | *(_BYTE *)(a2 + 52) & 0xF7;
    BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)a1, 0LL, 1LL, v30, v31, v32, v33, v34, (uint64_t)"realms");
    char v36 = *(_BYTE *)(a2 + 52) & 0xEF | (16 * BOOL_default);
    if ((a3 & 8) != 0) {
      char v36 = *(_BYTE *)(a2 + 52) & 0xED | (16 * BOOL_default);
    }
    if ((a3 & 0x40) != 0) {
      v36 &= ~4u;
    }
    *(_BYTE *)(a2 + 52) = v36;
    if ((*(_BYTE *)(*(void *)a2 + 48LL) & 1) != 0) {
      *(_BYTE *)(a2 + 52) = v36 & 0xE9;
    }
    uint64_t v108 = 0LL;
    krb5_data_zero(v107);
    krb5_data_zero(v106);
    uint64_t v109 = 0LL;
    uint64_t v110 = 0LL;
    uint64_t v111 = 0LL;
    int v37 = *(_DWORD *)(a2 + 48);
    if (v37 != 2)
    {
      if (v37 != 1) {
        goto LABEL_91;
      }
      __int128 v113 = 0u;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
      __int128 v116 = 0u;
      uint64_t v38 = sub_1882FD434();
      if ((_DWORD)v38 || (uint64_t v38 = sub_1882FD3C0(), (_DWORD)v38))
      {
        uint64_t checksum = v38;
        sub_1882FE988();
        krb5_clear_error_message((krb5_context)a1);
LABEL_116:
        free_ContentInfo();
        return checksum;
      }

      krb5_us_timeofday((krb5_context)a1, v101, v122);
      *((void *)&v115 + 1) = *(void *)v101;
      LODWORD(v115) = v122[0];
      LODWORD(v116) = v9;
      v107[0] = (void *)sub_1882FE978();
      v107[1] = malloc((size_t)v107[0]);
      if (!v107[1])
      {
        uint64_t checksum = 12LL;
        goto LABEL_38;
      }

      uint64_t v63 = sub_1882FE958();
      if ((_DWORD)v63)
      {
        uint64_t checksum = v63;
        free(v107[1]);
        v107[1] = 0LL;
LABEL_38:
        sub_1882FE988();
        krb5_set_error_message((krb5_context)a1, checksum, "Failed encoding AuthPackWin: %d");
        goto LABEL_116;
      }

      sub_1882FE988();
      size_t v64 = v107[0];
      if (v107[0] == v108)
      {
        uint64_t v65 = &asn1_oid_id_pkcs7_data;
        goto LABEL_41;
      }

      goto LABEL_122;
    }

    __int128 v104 = 0u;
    *(_OWORD *)uint64_t v105 = 0u;
    *(void *)&__int128 v102 = 0LL;
    __int128 v103 = 0u;
    *(_OWORD *)uint64_t v101 = 0u;
    uint64_t v127 = 0LL;
    krb5_clear_error_message((krb5_context)a1);
    *(void *)uint64_t v122 = 0LL;
    size_t v123 = 0LL;
    uint64_t v124 = 0LL;
    krb5_us_timeofday((krb5_context)a1, v126, &v125);
    *((void *)&v102 + 1) = *(void *)v126;
    LODWORD(v103) = v9;
    uint64_t v39 = sub_1882FD9B0();
    size_t v40 = malloc(v39);
    if (!v40) {
      goto LABEL_114;
    }
    __int128 v41 = v40;
    uint64_t v42 = sub_1882FD990();
    if ((_DWORD)v42)
    {
      uint64_t checksum = v42;
      free(v41);
      goto LABEL_115;
    }

    if (v39 != v127) {
      krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
    }
    uint64_t checksum = krb5_create_checksum((krb5_context)a1, 0LL, 0, 14, (uint64_t)v41, v39, (uint64_t)v122);
    free(v41);
    if ((_DWORD)checksum) {
      goto LABEL_115;
    }
    uint64_t v43 = calloc(1uLL, 0x10uLL);
    *((void *)&v103 + 1) = v43;
    if (!v43)
    {
      uint64_t checksum = 12LL;
      krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
      goto LABEL_115;
    }

    uint64_t checksum = krb5_data_copy(v43, v124, v123);
    sub_1882FD854();
    if ((_DWORD)checksum)
    {
LABEL_115:
      sub_1882FE858();
      goto LABEL_116;
    }

    if ((*(_DWORD *)(a2 + 8) - 1) > 1)
    {
LABEL_108:
      uint64_t v91 = (void **)calloc(1uLL, 0x10uLL);
      *((void *)&v104 + 1) = v91;
      if (v91)
      {
        uint64_t checksum = hx509_crypto_available(a1[47], 0, *(void *)(*(void *)a2 + 16LL), v91 + 1, v91, v92, v93, v94);
        goto LABEL_110;
      }

LABEL_114:
      uint64_t checksum = 12LL;
      goto LABEL_115;
    }

    uint64_t v119 = 0LL;
    krb5_data_zero(&v120);
    krb5_config_get_string((uint64_t)a1, 0LL, v44, v45, v46, v47, v48, v49, (uint64_t)"libdefaults");
    int int_default = krb5_config_get_int_default((uint64_t)a1, 0LL, 0LL, v50, v51, v52, v53, v54, (uint64_t)"libdefaults");
    uint64_t v56 = (uint64_t **)(a2 + 32);
    uint64_t checksum = _krb5_parse_moduli();
    if ((_DWORD)checksum) {
      goto LABEL_110;
    }
    uint64_t v57 = sub_188315684();
    *(void *)(a2 + 16) = v57;
    if (v57)
    {
      unsigned int v58 = v57;
      unsigned int v59 = *v56;
      uint64_t v60 = **v56;
      if (int_default)
      {
        if (!v60)
        {
LABEL_33:
          uint64_t checksum = 22LL;
          krb5_set_error_message( (krb5_context)a1,  22,  "Did not find a DH group parameter matching requirement of %lu bits");
          goto LABEL_110;
        }

        uint64_t v61 = v59 + 1;
        while (*(void *)(v60 + 8) <= (unint64_t)int_default)
        {
          uint64_t v62 = *v61++;
          uint64_t v60 = v62;
          if (!v62) {
            goto LABEL_33;
          }
        }
      }

      __int128 v69 = sub_1882E7188((_krb5_context *)a1, "p", (const void **)(v60 + 16));
      v58[1] = v69;
      if (!v69) {
        goto LABEL_89;
      }
      __int128 v70 = sub_1882E7188((_krb5_context *)a1, "g", (const void **)(v60 + 40));
      v58[2] = v70;
      if (!v70) {
        goto LABEL_89;
      }
      __int128 v71 = sub_1882E7188((_krb5_context *)a1, "q", (const void **)(v60 + 64));
      v58[8] = v71;
      if (!v71) {
        goto LABEL_89;
      }
      if (sub_188315984(*(void *)(a2 + 16)) == 1)
      {
        __int128 v72 = (krb5_data *)calloc(1uLL, 0x10uLL);
        v105[0] = v72;
        if (v72)
        {
          krb5_data_alloc((size_t *)v72, 0x28uLL);
          krb5_generate_random_block((uint64_t)v105[0]->data, *(void *)v105[0]);
          uint64_t checksum = krb5_copy_data((krb5_context)a1, v105[0], (krb5_data **)(a2 + 24));
          if ((_DWORD)checksum) {
            goto LABEL_110;
          }
          *(void *)&__int128 v104 = calloc(1uLL, 0x28uLL);
          if ((void)v104)
          {
            int v73 = *(_DWORD *)(a2 + 8);
            if (v73 == 2)
            {
              uint64_t checksum = 22LL;
              goto LABEL_110;
            }

            if (v73 != 1) {
              krb5_abortx((_krb5_context *)a1, "internal error");
            }
            __int128 v74 = *(unsigned int ***)(a2 + 16);
            uint64_t checksum = der_copy_oid();
            if ((_DWORD)checksum) {
              goto LABEL_110;
            }
            uint64_t v118 = 0LL;
            __int128 v116 = 0u;
            __int128 v117 = 0u;
            __int128 v114 = 0u;
            __int128 v115 = 0u;
            __int128 v113 = 0u;
            uint64_t v75 = sub_1882E7110((_krb5_context *)a1, v74[1], (uint64_t)&v113);
            if ((_DWORD)v75
              || (uint64_t v75 = sub_1882E7110((_krb5_context *)a1, v74[2], (uint64_t)&v114 + 8), (_DWORD)v75)
              || (uint64_t v75 = sub_1882E7110((_krb5_context *)a1, v74[8], (uint64_t)&v116), (_DWORD)v75))
            {
              uint64_t checksum = v75;
LABEL_71:
              free_DomainParameters();
              goto LABEL_110;
            }

            uint64_t v83 = malloc(0x10uLL);
            *((void *)&v117 + 1) = 0LL;
            uint64_t v118 = 0LL;
            *(void *)(v104 + 16) = v83;
            if (!v83)
            {
              free_DomainParameters();
              uint64_t checksum = 0LL;
              goto LABEL_110;
            }

            size_t v84 = sub_1883136A4();
            uint64_t v85 = *(size_t **)(v104 + 16);
            *uint64_t v85 = v84;
            uint64_t v86 = malloc(v84);
            v85[1] = (size_t)v86;
            if (!v86)
            {
              uint64_t checksum = 12LL;
              goto LABEL_71;
            }

            uint64_t v87 = sub_188313684();
            if ((_DWORD)v87)
            {
              uint64_t checksum = v87;
              free(*(void **)(*(void *)(v104 + 16) + 8LL));
              *(void *)(*(void *)(v104 + 16) + 8LL) = 0LL;
              goto LABEL_71;
            }

            free_DomainParameters();
            if (v119 != **(void **)(v104 + 16)) {
              goto LABEL_123;
            }
            uint64_t checksum = sub_1882E7110((_krb5_context *)a1, v74[4], (uint64_t)v112);
            if ((_DWORD)checksum)
            {
LABEL_110:
              if (!(_DWORD)checksum)
              {
                v107[0] = (void *)sub_1882FE848();
                v107[1] = malloc((size_t)v107[0]);
                if (v107[1])
                {
                  uint64_t v95 = sub_1882FE828();
                  if (!(_DWORD)v95)
                  {
                    sub_1882FE858();
                    size_t v64 = v107[0];
                    if (v107[0] == v108)
                    {
                      uint64_t v65 = &unk_18A21D4D0;
LABEL_41:
                      uint64_t signed_1 = hx509_cms_create_signed_1( a1[47],  4 * (*(void *)(*(void *)a2 + 16LL) == 0LL),  v65,  v107[1],  (size_t)v64,  0LL,  *(void *)(*(void *)a2 + 16LL),  *(void *)(a2 + 40),  0LL,  *(void *)(*(void *)a2 + 32LL),  v106);
                      if ((_DWORD)signed_1)
                      {
                        uint64_t checksum = signed_1;
                        sub_1882E44E8(a1, signed_1, "Create CMS signedData");
                        krb5_data_free(v107);
                        goto LABEL_116;
                      }

                      krb5_data_free(v107);
                      uint64_t checksum = hx509_cms_wrap_ContentInfo( (uint64_t)&asn1_oid_id_pkcs7_signedData,  (uint64_t)v106,  (uint64_t)v107);
                      krb5_data_free(v106);
                      if ((_DWORD)checksum)
                      {
                        krb5_set_error_message( (krb5_context)a1,  checksum,  "ContentInfo wrapping of signedData failed",  v98,  v99,  v100);
                        goto LABEL_116;
                      }

                      int v67 = *(_DWORD *)(a2 + 48);
                      if (v67 != 2)
                      {
                        if (v67 == 1)
                        {
                          __int128 v114 = 0uLL;
                          *(void *)&__int128 v115 = 0LL;
                          __int128 v113 = *(_OWORD *)v107;
                          v107[0] = (void *)sub_1882FE9B8();
                          v107[1] = malloc((size_t)v107[0]);
                          if (v107[1])
                          {
                            uint64_t checksum = sub_1882FE998();
                            if ((_DWORD)checksum)
                            {
                              free(v107[1]);
                              v107[1] = 0LL;
                            }
                          }

                          else
                          {
                            uint64_t checksum = 12LL;
                          }

                          sub_1882FE9C8();
                          int v82 = 15;
LABEL_79:
                          if ((_DWORD)checksum)
                          {
                            krb5_set_error_message((krb5_context)a1, checksum, "PA-PK-AS-REQ %d");
                            goto LABEL_116;
                          }

                          if (v107[0] == v108)
                          {
                            uint64_t checksum = krb5_padata_add((_krb5_context *)a1, a7, v82, (uint64_t)v107[1], (uint64_t)v107[0]);
                            if ((_DWORD)checksum) {
                              free(v107[1]);
                            }
                            else {
                              krb5_padata_add((_krb5_context *)a1, a7, 132, 0LL, 0LL);
                            }
                            goto LABEL_116;
                          }

LABEL_123:
                          krb5_abortx((_krb5_context *)a1, "Internal ASN1 encoder error");
                        }

LABEL_91:
                        krb5_abortx((_krb5_context *)a1, "internal pkinit error");
                      }

                      __int128 v114 = 0uLL;
                      __int128 v113 = *(_OWORD *)v107;
                      if ((*(_BYTE *)(a2 + 52) & 0x10) == 0)
                      {
LABEL_52:
                        *((void *)&v114 + 1) = 0LL;
                        v107[0] = (void *)sub_1882FE808();
                        v107[1] = malloc((size_t)v107[0]);
                        if (v107[1])
                        {
                          uint64_t checksum = sub_1882FE7E8();
                          if ((_DWORD)checksum)
                          {
                            free(v107[1]);
                            v107[1] = 0LL;
                          }
                        }

                        else
                        {
                          uint64_t checksum = 12LL;
                        }

                        sub_1882FE818();
                        int v82 = 16;
                        goto LABEL_79;
                      }

                      __int128 v76 = calloc(1uLL, 0x10uLL);
                      *(void *)&__int128 v114 = v76;
                      if (v76)
                      {
                        uint64_t v81 = hx509_certs_iter_f( a1[47],  *(void *)(*(void *)a2 + 24LL),  (uint64_t (*)(uint64_t, uint64_t))sub_1882E7200,  (uint64_t)v76,  v77,  v78,  v79,  v80);
                        if (!(_DWORD)v81) {
                          goto LABEL_52;
                        }
                        uint64_t checksum = v81;
                        krb5_set_error_message((krb5_context)a1, v81, "pk-init: failed to build trustedCertifiers");
                      }

                      else
                      {
                        uint64_t checksum = 12LL;
                        krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
                      }

                      sub_1882FE818();
                      goto LABEL_116;
                    }

LABEL_122:
                    krb5_abortx((_krb5_context *)a1, "internal ASN1 encoder error");
                  }

                  uint64_t checksum = v95;
                  free(v107[1]);
                  v107[1] = 0LL;
                }

                else
                {
                  uint64_t checksum = 12LL;
                }

                sub_1882FE858();
                krb5_set_error_message((krb5_context)a1, checksum, "Failed encoding AuthPack: %d", checksum);
                goto LABEL_116;
              }

              goto LABEL_115;
            }

            size_t v120 = length_DHPublicKey();
            timeval v121 = malloc(v120);
            if (!v121)
            {
              uint64_t checksum = 12LL;
              goto LABEL_105;
            }

            uint64_t v88 = encode_DHPublicKey();
            if ((_DWORD)v88)
            {
              uint64_t checksum = v88;
              free(v121);
              timeval v121 = 0LL;
LABEL_105:
              der_free_heim_integer();
              goto LABEL_110;
            }

            der_free_heim_integer();
            if (v119 != v120) {
              krb5_abortx((_krb5_context *)a1, "asn1 internal error");
            }
            uint64_t v89 = v104;
            uint64_t v90 = v121;
            *(void *)(v104 + 24) = 8 * v119;
            *(void *)(v89 + 32) = v90;
            goto LABEL_108;
          }
        }

        else
        {
          krb5_clear_error_message((krb5_context)a1);
        }

LABEL_89:
        uint64_t checksum = 12LL;
        goto LABEL_110;
      }

      __int128 v68 = "pkinit: failed to generate DH key";
    }

    else
    {
      __int128 v68 = "malloc: out of memory";
    }

    uint64_t checksum = 12LL;
    krb5_set_error_message( (krb5_context)a1,  12,  v68,  v97,  "pkinit_dh_min_bits",  0LL,  0LL,  *(void *)v101,  *(void *)&v101[2],  v102,  v103,  v104,  v105[0],  v105[1]);
    goto LABEL_110;
  }

  uint64_t checksum = 2314790721LL;
  krb5_set_error_message((krb5_context)a1, -1980176575, "PKINIT: No user certificate given");
  return checksum;
}

uint64_t sub_1882E51E8( uint64_t *a1, char *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, _DWORD *a8, void **a9)
{
  int v15 = *(_DWORD *)(a3 + 48);
  if (v15 != 1)
  {
    if (v15 == 2)
    {
      if (*a8 == 17)
      {
        uint64_t v17 = sub_1882FE8C8();
        if ((_DWORD)v17)
        {
          uint64_t v18 = v17;
          int v19 = "Failed to decode pkinit AS rep";
LABEL_22:
          uint64_t v21 = (_krb5_context *)a1;
          krb5_error_code v22 = v18;
          goto LABEL_23;
        }

        if (LODWORD(v32[0]) == 2)
        {
          sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: using kinit enc reply key");
          goto LABEL_19;
        }

        if (LODWORD(v32[0]) == 1)
        {
          sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: using pkinit dh");
LABEL_19:
          __int128 v31 = *(_OWORD *)((char *)v32 + 8);
          uint64_t v23 = hx509_cms_unwrap_ContentInfo((uint64_t)&v31, v29, v30, 0LL);
          if ((_DWORD)v23)
          {
            uint64_t v18 = v23;
            sub_1882FE8E8();
            goto LABEL_21;
          }

          if (LODWORD(v32[0]) == 2)
          {
            uint64_t v25 = sub_1882E5910(a1, 2, v30, (uint64_t)v29, a2, (_DWORD *)a3, a5, a6, a7, a9);
          }

          else
          {
            if (LODWORD(v32[0]) != 1) {
              krb5_abortx((_krb5_context *)a1, "pk-init as-rep case not possible to happen");
            }
            uint64_t v25 = sub_1882E5524( (_krb5_context *)a1,  v30,  (uint64_t)v29,  a2,  a3,  a4,  a5,  *(void *)(a3 + 24),  *((uint64_t *)&v32[1] + 1),  a6,  a9);
          }

          uint64_t v18 = v25;
          der_free_octet_string();
          der_free_oid();
          sub_1882FE8E8();
          return v18;
        }

        sub_1882FE8E8();
        uint64_t v33 = 0LL;
        memset(v32, 0, sizeof(v32));
        sub_1882DFCE8((uint64_t)a1, 5, "krb5_get_init_creds: using BTMM kinit enc reply key");
        if (sub_1882FEA38())
        {
          int v19 = "PKINIT: -27 reply invalid content type";
        }

        else
        {
          if (!v27 && v28)
          {
            LODWORD(v32[0]) = 2;
            *(void *)&v32[1] = v28[1];
            *((void *)&v32[0] + 1) = *v28;
            *uint64_t v28 = 0LL;
            v28[1] = 0LL;
            sub_1882FEA58();
            goto LABEL_19;
          }

          sub_1882FEA58();
          int v19 = "DH mode not supported for BTMM mode";
        }
      }

      else
      {
        int v19 = "PKINIT: wrong padata recv";
      }
    }

    else
    {
      int v19 = "PKINIT: unknown reply type";
    }

uint64_t sub_1882E5524( _krb5_context *a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, void **a11)
{
  uint64_t v40 = 0LL;
  v37[0] = 0LL;
  v37[1] = 0LL;
  krb5_data_zero(v36);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  if (der_heim_oid_cmp())
  {
    uint64_t v18 = 22LL;
    krb5_set_error_message(a1, 22, "PKINIT: Invalid content type");
    return v18;
  }

  uint64_t v18 = sub_1882E7414((uint64_t *)a1, a2[1], *a2, *(void *)a5, v37, v36, &v40);
  uint64_t v19 = v40;
  if (!(_DWORD)v18)
  {
    uint64_t v18 = sub_1882E751C(a1, a4, a7, a5, v40);
    if (!(_DWORD)v18)
    {
      if (der_heim_oid_cmp())
      {
        uint64_t v18 = 2529638952LL;
        uint64_t v20 = "pkinit - dh reply contains wrong oid";
LABEL_15:
        krb5_error_code v22 = a1;
        krb5_error_code v23 = v18;
LABEL_16:
        krb5_set_error_message(v22, v23, v20);
        goto LABEL_17;
      }

      uint64_t v21 = sub_1882FE8F8();
      if ((_DWORD)v21)
      {
        uint64_t v18 = v21;
        uint64_t v20 = "pkinit - failed to decode KDC DH Key Info";
        goto LABEL_15;
      }

      if ((_DWORD)v39 != a10)
      {
        uint64_t v18 = 2529638953LL;
        uint64_t v20 = "PKINIT: DH nonce is wrong";
        goto LABEL_15;
      }

      if (*((void *)&v39 + 1))
      {
        if (!a9)
        {
          uint64_t v18 = 2529638972LL;
          uint64_t v20 = "pkinit; got key expiration without server nonce";
          goto LABEL_24;
        }

        if (!a8)
        {
          uint64_t v18 = 2529638972LL;
          uint64_t v20 = "pkinit; got DH reuse but no client nonce";
LABEL_24:
          krb5_error_code v22 = a1;
          krb5_error_code v23 = -1765328324;
          goto LABEL_16;
        }
      }

      else
      {
        if (a9)
        {
          uint64_t v18 = 2529638972LL;
          uint64_t v20 = "pkinit: got server nonce without key expiration";
          goto LABEL_24;
        }

        a8 = 0LL;
      }

      size_t v35 = (unint64_t)(v38 + 7) >> 3;
      if (*(_DWORD *)(a5 + 8) != 1)
      {
        uint64_t v18 = 22LL;
        goto LABEL_17;
      }

      uint64_t v25 = decode_DHPublicKey();
      if ((_DWORD)v25)
      {
        uint64_t v18 = v25;
        uint64_t v20 = "pkinit: can't decode without key expiration";
        goto LABEL_15;
      }

      uint64_t v26 = sub_1882E7188(a1, "DHPublicKey", &v34);
      sub_188313754();
      if (!v26)
      {
        uint64_t v18 = 12LL;
        goto LABEL_17;
      }

      size_t v35 = (int)sub_18831580C(*(void *)(a5 + 16));
      uint64_t v27 = (char *)malloc(v35);
      if (!v27)
      {
        uint64_t v18 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        sub_188315250(v26);
        goto LABEL_17;
      }

      uint64_t v28 = *(void *)(a5 + 16);
      uint64_t v29 = v27;
      int v30 = sub_188315990((uint64_t)v27, v26, v28);
      if (v30 < 1 || v30 < v35 >> 1)
      {
        uint64_t v18 = 2529638972LL;
        krb5_set_error_message(a1, -1765328324, "PKINIT: Can't compute Diffie-Hellman key");
LABEL_35:
        unsigned int v31 = 0;
LABEL_36:
        sub_188315250(v26);
        bzero(v29, v31);
        free(v29);
        goto LABEL_17;
      }

      if (v30 >= (int)v35)
      {
        unsigned int v31 = v30;
      }

      else
      {
        size_t v32 = v35 - v30;
        memmove(&v29[v32], v29, v30);
        bzero(v29, v32);
        unsigned int v31 = v35;
        if ((int)v35 <= 0)
        {
          uint64_t v18 = 22LL;
          krb5_set_error_message(a1, 22, "PKINIT: resulting DH key <= 0");
          goto LABEL_35;
        }
      }

      uint64_t v33 = malloc(0x18uLL);
      *a11 = v33;
      if (v33)
      {
        uint64_t v18 = _krb5_pk_octetstring2key(a1, a6, (uint64_t)v29, v31, a8, a9, (uint64_t)v33);
        if ((_DWORD)v18)
        {
          krb5_set_error_message(a1, v18, "PKINIT: can't create key from DH key");
          free(*a11);
          *a11 = 0LL;
        }
      }

      else
      {
        uint64_t v18 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }

      goto LABEL_36;
    }
  }

uint64_t sub_1882E5910( uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, char *a5, _DWORD *a6, uint64_t a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v33 = 0LL;
  v30[0] = 0LL;
  v30[1] = 0LL;
  if (!der_heim_oid_cmp())
  {
    if (a6[12] == 1) {
      char v18 = 3;
    }
    else {
      char v18 = 1;
    }
    uint64_t v19 = hx509_cms_unenvelope(a1[47], *(void *)(*(void *)a6 + 8LL), v18, a3[1], *a3, 0LL, 0LL, v30, (size_t *)&v31);
    if ((_DWORD)v19)
    {
      uint64_t v17 = v19;
      sub_1882E44E8(a1, v19, "Failed to unenvelope CMS data in PK-INIT reply");
      return v17;
    }

    der_free_oid();
    if (a2 == 1)
    {
      if (hx509_cms_unwrap_ContentInfo((uint64_t)&v31, v29, v28, 0LL))
      {
        uint64_t v20 = der_length_len() + 1;
        size_t v21 = v31;
        krb5_error_code v22 = (char *)malloc(v31 + v20);
        memcpy(&v22[v20], __src, v21);
        uint64_t v23 = der_put_length_and_tag();
        if ((_DWORD)v23) {
          return v23;
        }
        free(__src);
        v31 += v20;
        __src = v22;
        uint64_t v24 = hx509_cms_unwrap_ContentInfo((uint64_t)&v31, v29, v28, 0LL);
        if ((_DWORD)v24)
        {
          uint64_t v17 = v24;
LABEL_18:
          uint64_t v25 = 0LL;
          goto LABEL_22;
        }
      }

      if (der_heim_oid_cmp())
      {
        uint64_t v17 = 22LL;
        krb5_set_error_message((krb5_context)a1, 22, "PKINIT: Invalid content type");
        der_free_oid();
        der_free_octet_string();
        goto LABEL_18;
      }

      der_free_oid();
      krb5_data_free(&v31);
      uint64_t v17 = krb5_data_copy(&v31, (const void *)v28[1], v28[0]);
      der_free_octet_string();
      if ((_DWORD)v17)
      {
        krb5_set_error_message((krb5_context)a1, v17, "malloc: out of memory");
        goto LABEL_18;
      }
    }

    uint64_t v26 = sub_1882E7414(a1, (uint64_t)__src, v31, *(void *)a6, v30, (size_t *)&v31, &v33);
    uint64_t v25 = v33;
    if (!(_DWORD)v26)
    {
      uint64_t v26 = sub_1882E751C((_krb5_context *)a1, a5, a7, (uint64_t)a6, v33);
      if (!(_DWORD)v26)
      {
        if (a2 == 2)
        {
          uint64_t v26 = sub_1882E7660((_krb5_context *)a1, (uint64_t)&v31, a9, a10);
        }

        else
        {
          if (a2 != 1)
          {
            uint64_t v17 = 0LL;
            goto LABEL_22;
          }

          uint64_t v17 = sub_1882E7660((_krb5_context *)a1, (uint64_t)&v31, a9, a10);
          if (!(_DWORD)v17 || (a6[13] & 1) != 0) {
            goto LABEL_22;
          }
          uint64_t v26 = sub_1882E77D8((_krb5_context *)a1, (uint64_t)&v31, a8, a10);
        }
      }
    }

    uint64_t v17 = v26;
LABEL_22:
    hx509_cert_free(v25);
    der_free_oid();
    krb5_data_free(&v31);
    return v17;
  }

  uint64_t v17 = 22LL;
  krb5_set_error_message((krb5_context)a1, 22, "PKINIT: Invalid content type");
  return v17;
}

uint64_t sub_1882E5C04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a2 + 16);
  if (v6) {
    hx509_cert_free(v6);
  }
  uint64_t v7 = hx509_cert_ref(a3);
  uint64_t v8 = *a2;
  *(void *)(v8 + 16) = v7;
  if (*(void *)(v8 + 8))
  {
    hx509_certs_free((const void **)(v8 + 8));
    uint64_t v8 = *a2;
    uint64_t v7 = *(void *)(*a2 + 16);
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t subject = hx509_certs_init(*(void *)(a1 + 376), "MEMORY:pkinit-set-user-id", 0LL, 0LL, (void *)(v8 + 8));
  if ((_DWORD)subject) {
    return subject;
  }
  hx509_certs_add(*(void *)(a1 + 376), *(void *)(*a2 + 8), a3, v9, v10, v11, v12, v13);
  if (!*(void *)(*a2 + 16) || !_krb5_have_debug(a1)) {
    return 0LL;
  }
  uint64_t subject = hx509_cert_get_subject(*(void *)(*a2 + 16), &v21);
  if (!(_DWORD)subject)
  {
    uint64_t subject = hx509_name_to_string(v21, &v20);
    hx509_name_free(&v21);
    if (!(_DWORD)subject)
    {
      uint64_t serialnumber = hx509_cert_get_serialnumber();
      if ((_DWORD)serialnumber)
      {
        uint64_t subject = serialnumber;
        uint64_t v16 = &v20;
      }

      else
      {
        uint64_t subject = der_print_hex_heim_integer();
        der_free_heim_integer();
        if (!(_DWORD)subject)
        {
          sub_1882DFCE8(a1, 2, "using cert: subject: %s sn: %s", (const char *)v20, v19);
          free(v20);
          char v18 = (void *)v19;
          goto LABEL_18;
        }

        uint64_t v16 = &v21;
      }

      char v18 = *v16;
LABEL_18:
      free(v18);
    }
  }

  return subject;
}

uint64_t _krb5_pk_load_id( uint64_t *a1, void *a2, char *a3, char *a4, char **a5, char **a6, uint64_t a7, uint64_t a8, char *__s1)
{
  *a2 = 0LL;
  if (a4)
  {
    uint64_t v17 = calloc(1uLL, 0x38uLL);
    if (v17)
    {
      char v18 = v17;
      if (a3)
      {
        uint64_t v19 = hx509_lock_init(a1[47], v39);
        if ((_DWORD)v19)
        {
          uint64_t inited = v19;
          sub_1882E44E8(a1, v19, "Failed init lock");
          goto LABEL_33;
        }

        if (__s1 && *__s1) {
          hx509_lock_add_password(*(uint64_t **)v39, __s1);
        }
        if (a7)
        {
          v40[0] = a1;
          v40[1] = a7;
          void v40[2] = a8;
          uint64_t v22 = hx509_lock_set_prompter(*(uint64_t *)v39, (uint64_t)sub_1882E6074, (uint64_t)v40);
          if ((_DWORD)v22)
          {
            uint64_t inited = v22;
            hx509_lock_free(*(const void ***)v39);
            goto LABEL_33;
          }
        }

        uint64_t inited = hx509_certs_init(a1[47], a3, 0LL, *(uint64_t *)v39, v18 + 1);
        hx509_lock_free(*(const void ***)v39);
        if ((_DWORD)inited)
        {
          sub_1882E44E8(a1, inited, "Failed to init cert certs");
          goto LABEL_33;
        }
      }

      else
      {
        v17[1] = 0LL;
      }

      uint64_t v21 = hx509_certs_init(a1[47], a4, 0LL, 0LL, v18 + 3);
      if ((_DWORD)v21)
      {
        uint64_t inited = v21;
        sub_1882E44E8(a1, v21, "Failed to init anchors");
      }

      else
      {
        uint64_t v23 = hx509_certs_init(a1[47], "MEMORY:pkinit-cert-chain", 0LL, 0LL, v18 + 4);
        if (!(_DWORD)v23)
        {
          if (a5)
          {
            uint64_t v25 = *a5;
            if (*a5)
            {
              int v30 = a5 + 1;
              do
              {
                uint64_t v31 = *v30++;
                uint64_t v25 = v31;
              }

              while (v31);
            }
          }

          uint64_t v32 = a1[47];
          if (a6)
          {
            uint64_t v33 = hx509_revoke_init(v32, v18 + 5, v24, (uint64_t)v25, v26, v27, v28, v29);
            if ((_DWORD)v33)
            {
              uint64_t inited = v33;
              sub_1882E44E8(a1, v33, "Failed init revoke list");
              goto LABEL_33;
            }

            size_t v35 = *a6;
            if (*a6)
            {
              char v36 = a6 + 1;
              while (1)
              {
                uint64_t v37 = hx509_revoke_add_crl(a1[47], v18[5], v35);
                if ((_DWORD)v37) {
                  break;
                }
                __int128 v38 = *v36++;
                size_t v35 = v38;
                if (!v38) {
                  goto LABEL_31;
                }
              }

              uint64_t inited = v37;
              sub_1882E44E8(a1, v37, "Failed load revoke list");
              goto LABEL_33;
            }
          }

          else
          {
            hx509_context_set_missing_revoke(v32, 1);
          }

LABEL_31:
          uint64_t inited = hx509_verify_init_ctx(a1[47], v18);
          if (!(_DWORD)inited)
          {
            hx509_verify_attach_anchors((const void **)*v18, (CFTypeRef)v18[3]);
            hx509_verify_attach_revoke(*v18, (CFTypeRef)v18[5]);
            *a2 = v18;
            return inited;
          }

          sub_1882E44E8(a1, inited, "Failed init verify context");
          goto LABEL_33;
        }

        uint64_t inited = v23;
        sub_1882E44E8(a1, v23, "Failed to init chain");
      }

  if (v12 > 3)
  {
    uint64_t v12 = (v12 - 4);
    uint64_t v31 = malloc(v12 + 31);
    uint64_t v22 = v45;
    v45[3] = v31;
    if (v31)
    {
      *uint64_t v31 = __rev16(*((unsigned __int16 *)v10 + 5));
      v31[1] = v10[12];
      void v31[2] = v10[13];
      *((void *)v31 + 2) = v12;
      uint64_t v25 = v31 + 6;
      uint64_t v26 = v10 + 14;
      goto LABEL_52;
    }

LABEL_33:
      hx509_verify_destroy_ctx((const void **)*v18);
      hx509_certs_free((const void **)v18 + 1);
      hx509_certs_free((const void **)v18 + 3);
      hx509_certs_free((const void **)v18 + 4);
      hx509_revoke_free((CFTypeRef *)v18 + 5);
      free(v18);
      return inited;
    }

    uint64_t inited = 12LL;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  }

  else
  {
    uint64_t inited = 2314790722LL;
    krb5_set_error_message((krb5_context)a1, -1980176574, "PKINIT: No anchor given");
  }

  return inited;
}

uint64_t sub_1882E6074(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[3];
  v8[0] = a2[2];
  v8[1] = v4;
  uint64_t v9 = *a2;
  BOOL v10 = hx509_prompt_hidden(*((_DWORD *)a2 + 2));
  uint64_t v11 = v8;
  int v5 = *((_DWORD *)a2 + 2);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 4) {
      goto LABEL_6;
    }
    int v6 = 5;
  }

  else
  {
    int v6 = 1;
  }

  int v12 = v6;
LABEL_6:
  uint64_t result = (*(uint64_t (**)(void, void, void, void, uint64_t, uint64_t *))(a1 + 8))( *(void *)a1,  *(void *)(a1 + 16),  0LL,  0LL,  1LL,  &v9);
  if ((_DWORD)result)
  {
    bzero((void *)a2[3], a2[2]);
    return 1LL;
  }

  return result;
}

uint64_t sub_1882E6114(_krb5_context *a1, uint64_t a2, uint64_t a3, char *a4, char ***a5)
{
  int v6 = a4;
  __stringp = a4;
  *a5 = 0LL;
  BOOL v10 = (char **)calloc(1uLL, 0x58uLL);
  if (!v10)
  {
    uint64_t v17 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v17;
  }

  uint64_t v11 = v10;
  int v12 = __stringp;
  uint64_t v13 = MEMORY[0x1895F8770];
  do
  {
    uint64_t v14 = v12;
    uint64_t v15 = *v6;
    if (*v6 < 0) {
      int v16 = __maskrune(*v6, 0x4000uLL);
    }
    else {
      int v16 = *(_DWORD *)(v13 + 4 * v15 + 60) & 0x4000;
    }
    int v12 = ++v6;
  }

  while (v16);
  __stringp = v14;
  if ((_DWORD)v15 != 35)
  {
    char v18 = strsep(&__stringp, " \t");
    if (v18)
    {
      uint64_t v19 = strdup(v18);
      void *v11 = v19;
      if (!v19)
      {
        uint64_t v17 = 12LL;
        krb5_set_error_message(a1, 12, "malloc: out of memeory");
        goto LABEL_23;
      }

      uint64_t v20 = strsep(&__stringp, " \t");
      if (v20)
      {
        int v21 = atoi(v20);
        v11[1] = (char *)v21;
        if (v21)
        {
          uint64_t v17 = sub_1882E6348(a1, &__stringp);
          if (!(_DWORD)v17)
          {
            uint64_t v17 = sub_1882E6348(a1, &__stringp);
            if (!(_DWORD)v17)
            {
              uint64_t v17 = sub_1882E6348(a1, &__stringp);
              if (!(_DWORD)v17)
              {
                *a5 = v11;
                return v17;
              }
            }
          }

uint64_t sub_1882E6348(_krb5_context *a1, char **__stringp)
{
  if (strsep(__stringp, " \t"))
  {
    uint64_t v3 = der_parse_hex_heim_integer();
    if ((_DWORD)v3) {
      krb5_set_error_message(a1, v3, "moduli file %s failed parsing %s on line %d");
    }
  }

  else
  {
    uint64_t v3 = 22LL;
    krb5_set_error_message(a1, 22, "moduli file %s missing %s on line %d");
  }

  return v3;
}

void sub_1882E63F4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1;
    do
    {
      free(*v2);
      der_free_heim_integer();
      der_free_heim_integer();
      der_free_heim_integer();
      free(*v3);
      uint64_t v4 = (void **)v3[1];
      ++v3;
      uint64_t v2 = v4;
    }

    while (v4);
  }

  free(a1);
}

uint64_t _krb5_parse_moduli()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v5 = (_krb5_context *)v0;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  krb5_principal_data *v1 = 0LL;
  int v6 = (char ***)calloc(1uLL, 0x18uLL);
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  __strlcpy_chk();
  uint64_t v8 = sub_1882E6114(v5, (uint64_t)"builtin", 1LL, __s, v7);
  if (!(_DWORD)v8)
  {
    __strlcpy_chk();
    uint64_t v8 = sub_1882E6114(v5, (uint64_t)"builtin", 1LL, __s, v7 + 1);
    if (!(_DWORD)v8)
    {
      if (!v4) {
        uint64_t v4 = "/etc/krb5.moduli";
      }
      if (_krb5_expand_default_cc_name_0(v5, v4, (void **)&__filename)
        || (BOOL v10 = fopen(__filename, "r"), krb5_xfree(__filename), !v10)
        || (rk_cloexec_file(v10), !fgets(__s, 4096, v10)))
      {
LABEL_8:
        uint64_t v9 = 0LL;
        krb5_creds *v2 = v7;
        return v9;
      }

      LODWORD(v11) = 2;
      uint64_t v12 = 1LL;
      while (1)
      {
        __s[strcspn(__s, "\n")] = 0;
        uint64_t v13 = (char ***)realloc(v7, 8LL * ((int)v11 + 2));
        if (!v13) {
          break;
        }
        uint64_t v7 = v13;
        v13[(int)v11] = 0LL;
        uint64_t v8 = sub_1882E6114(v5, (uint64_t)v4, v12, __s, (char ***)&__filename);
        if ((_DWORD)v8) {
          goto LABEL_4;
        }
        if (__filename)
        {
          v7[(int)v11] = (char **)__filename;
          uint64_t v11 = (int)v11 + 1LL;
          v7[v11] = 0LL;
        }

        uint64_t v12 = (v12 + 1);
        if (!fgets(__s, 4096, v10)) {
          goto LABEL_8;
        }
      }

      sub_1882E63F4((void ***)v7);
LABEL_19:
      uint64_t v9 = 12LL;
      krb5_set_error_message(v5, 12, "malloc: out of memory");
      return v9;
    }
  }

uint64_t _krb5_dh_group_ok( krb5_context a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char ***a6, char **a7)
{
  uint64_t v8 = a6;
  if (a7) {
    *a7 = 0LL;
  }
  if (*a6)
  {
    while (der_heim_integer_cmp()
         || der_heim_integer_cmp()
         || a5 && der_heim_integer_cmp())
    {
      uint64_t v12 = v8[1];
      ++v8;
      if (!v12) {
        goto LABEL_9;
      }
    }

    if (a2 && (unint64_t)(*v8)[1] < a2)
    {
      uint64_t v13 = 2529638977LL;
      krb5_set_error_message(a1, -1765328319, "PKINIT: DH group parameter %s no accepted, not enough bits generated");
    }

    else if (a7)
    {
      uint64_t v15 = strdup(**v8);
      uint64_t v13 = 0LL;
      *a7 = v15;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
LABEL_9:
    uint64_t v13 = 2529638977LL;
    krb5_set_error_message(a1, -1765328319, "PKINIT: DH group parameter no ok");
  }

  return v13;
}

void sub_1882E67C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 8) == 1)
      {
        uint64_t v4 = *(_DWORD **)(v2 + 16);
        if (v4) {
          sub_18831573C(v4);
        }
      }

      if (*(void *)v2)
      {
        hx509_verify_destroy_ctx(**(const void ****)v2);
        hx509_certs_free((const void **)(*(void *)v2 + 8LL));
        hx509_cert_free(*(void *)(*(void *)v2 + 16LL));
        hx509_certs_free((const void **)(*(void *)v2 + 24LL));
        hx509_certs_free((const void **)(*(void *)v2 + 32LL));
        int v5 = *(krb5_data **)(v2 + 24);
        if (v5)
        {
          krb5_free_data(0LL, v5);
          *(void *)(v2 + 24) = 0LL;
        }

        int v6 = *(void ****)(v2 + 32);
        if (v6) {
          sub_1882E63F4(v6);
        }
        free(*(void **)v2);
        *(void *)uint64_t v2 = 0LL;
      }

      free(*(void **)(*(void *)(a1 + 88) + 32LL));
      *(void *)(*(void *)(a1 + 88) + 32LL) = 0LL;
    }
  }

uint64_t _krb5_get_init_creds_opt_set_pkinit_user_cert( uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char **strings, char **a7, char a8, uint64_t a9, uint64_t a10, char *__s1)
{
  return krb5_get_init_creds_opt_set_pkinit(a1, a2, a3, a4, a5, strings, a7, a8, a9, a10, __s1);
}

uint64_t krb5_get_init_creds_opt_set_pkinit( uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char **strings, char **a7, char a8, uint64_t a9, uint64_t a10, char *__s1)
{
  ret_xpc_object_t value = 0LL;
  if (!*(void *)(a2 + 88))
  {
    int v30 = "PKINIT: on non extendable opt";
LABEL_16:
    uint64_t v29 = 22LL;
    uint64_t v31 = (_krb5_context *)a1;
    krb5_error_code v32 = 22;
LABEL_18:
    krb5_set_error_message(v31, v32, v30);
    return v29;
  }

  uint64_t v19 = calloc(1uLL, 0x38uLL);
  *(void *)(*(void *)(a2 + 88) + 32LL) = v19;
  if (!v19)
  {
    int v30 = "malloc: out of memory";
    uint64_t v29 = 12LL;
    uint64_t v31 = (_krb5_context *)a1;
    krb5_error_code v32 = 12;
    goto LABEL_18;
  }

  v19[52] &= ~1u;
  *(_BYTE *)(*(void *)(*(void *)(a2 + 88) + 32LL) + 52LL) |= 2u;
  *(_BYTE *)(*(void *)(*(void *)(a2 + 88) + 32LL) + 52LL) |= 4u;
  *(void *)(*(void *)(*(void *)(a2 + 88) + 32LL) + 4gettimeofday(&v64, 0LL) = 0LL;
  if (!strings) {
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0LL, v20, v21, v22, v23, v24, v25, (uint64_t)"appdefaults");
  }
  if (!strings) {
    strings = &off_18C704480;
  }
  if (!a7) {
    a7 = (char **)krb5_config_get_strings((uint64_t)a1, 0LL, v20, v21, v22, v23, v24, v25, (uint64_t)"appdefaults");
  }
  if (!a5)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, a3);
    krb5_appdefault_string((krb5_context)a1, "kinit", realm, "pkinit_anchors", 0LL, &ret_value);
    a5 = ret_value;
  }

  uint64_t v27 = *(void *)(a2 + 88);
  if ((a8 & 4) != 0)
  {
    *(_BYTE *)(*(void *)(v27 + 32) + 52LL) |= 0x20u;
    uint64_t v27 = *(void *)(a2 + 88);
  }

  uint64_t id = _krb5_pk_load_id(a1, *(void **)(v27 + 32), a4, a5, strings, a7, a9, a10, __s1);
  if ((_DWORD)id)
  {
    uint64_t v29 = id;
    free(*(void **)(*(void *)(a2 + 88) + 32LL));
    *(void *)(*(void *)(a2 + 88) + 32LL) = 0LL;
    return v29;
  }

  if ((a8 & 8) != 0)
  {
    uint64_t v34 = **(void **)(*(void *)(a2 + 88) + 32LL);
    *(_DWORD *)(v34 + 48) |= 1u;
  }

  if (a3)
  {
    BOOL is_lkdc = krb5_principal_is_lkdc((uint64_t)a1, a3);
    uint64_t v36 = *(void *)(a2 + 88);
    if (is_lkdc) {
      *(_DWORD *)(**(void **)(v36 + 32) + 48LL) |= 1u;
    }
  }

  else
  {
    uint64_t v36 = *(void *)(a2 + 88);
  }

  uint64_t v37 = *(uint64_t **)(v36 + 32);
  __int128 v38 = *(const void **)(*v37 + 8);
  if (v38)
  {
    uint64_t v44 = j__heim_retain(v38);
    uint64_t v53 = 0LL;
    uint64_t v55 = 0LL;
    uint64_t v45 = *v37;
    if (*(void *)(*v37 + 8))
    {
      hx509_certs_free((const void **)(*v37 + 8));
      uint64_t v45 = *v37;
    }

    uint64_t v46 = *(void *)(v45 + 16);
    if (v46)
    {
      hx509_cert_free(v46);
      uint64_t v45 = *v37;
      *(void *)(*v37 + 16) = 0LL;
    }

    hx509_certs_merge(a1[47], *(void *)(v45 + 32), v44, v39, v40, v41, v42, v43);
    *(void *)(*v37 + 8) = v44;
    *((_BYTE *)v37 + 52) &= ~0x20u;
    int v47 = hx509_query_alloc(a1[47], &v53);
    if (v47)
    {
      sub_1882E44E8(a1, v47, "Allocate query to find signing certificate");
    }

    else
    {
      hx509_query_match_option(v53, 1);
      hx509_query_match_option(v53, 3);
      int cert = _krb5_pk_find_cert(a1, *(_DWORD *)(*v37 + 48) & 1, *(void *)(*v37 + 8), (int *)v53, &v55);
      hx509_query_free(a1[47], (void **)v53);
      if (!cert)
      {
        sub_1882E5C04((uint64_t)a1, v37, v55);
        hx509_cert_free(v55);
      }
    }
  }

  else
  {
    *(void *)(*v37 + 16) = 0LL;
  }

  if ((a8 & 2) != 0)
  {
    uint64_t v29 = 0LL;
    uint64_t v52 = *(_DWORD **)(*(void *)(a2 + 88) + 32LL);
    v52[2] = 0;
    if (*(void *)(*(void *)v52 + 8LL)) {
      return v29;
    }
    int v30 = "No anonymous pkinit support in RSA mode";
    goto LABEL_16;
  }

  uint64_t v49 = a1[47];
  uint64_t v50 = *(_DWORD **)(*(void *)(a2 + 88) + 32LL);
  uint64_t v51 = *(void *)(*(void *)v50 + 16LL);
  v50[2] = 1;
  if (v51 && !sub_188301BA4(v49))
  {
    free_AlgorithmIdentifier();
  }

  return 0LL;
}

uint64_t krb5_get_init_creds_opt_set_pkinit_user_cert(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (!v3)
  {
    int v6 = "PKINIT: on non extendable opt";
LABEL_6:
    uint64_t v5 = 22LL;
    krb5_set_error_message(a1, 22, v6);
    return v5;
  }

  uint64_t v4 = *(uint64_t **)(v3 + 32);
  if (!v4)
  {
    int v6 = "PKINIT: on pkinit context";
    goto LABEL_6;
  }

  sub_1882E5C04((uint64_t)a1, v4, a3);
  return 0LL;
}

uint64_t krb5_pk_enterprise_cert(uint64_t *a1, char *a2, char *a3, _DWORD **a4, void *a5)
{
  uint64_t v25 = 0LL;
  *a4 = 0LL;
  if (a5) {
    *a5 = 0LL;
  }
  if (a2)
  {
    int v9 = hx509_certs_init(a1[47], a2, 0LL, 0LL, &v27);
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = "Failed to init cert certs";
LABEL_6:
      sub_1882E44E8(a1, v10, v11);
      goto LABEL_11;
    }

    krb5_error_code v13 = hx509_query_alloc(a1[47], &v24);
    if (v13)
    {
      krb5_set_error_message((krb5_context)a1, v13, "out of memory");
      hx509_certs_free((const void **)&v27);
      goto LABEL_11;
    }

    hx509_query_match_option(v24, 1);
    hx509_query_match_option(v24, 3);
    hx509_query_match_eku((uint64_t)v24, (uint64_t)&unk_18A21D540);
    hx509_query_match_cmp_func((uint64_t)v24, (uint64_t)sub_1882E6F04, 0LL);
    uint64_t v12 = hx509_certs_filter(a1[47], v27, (int *)v24, &v26);
    hx509_query_free(a1[47], (void **)v24);
    hx509_certs_free((const void **)&v27);
    if ((_DWORD)v12)
    {
      sub_1882E44E8(a1, v12, "Failed to find PKINIT certificate");
      return v12;
    }

    one_int cert = hx509_get_one_cert(a1[47], v26, &v25, v15, v16, v17, v18, v19);
    hx509_certs_free((const void **)&v26);
    if (one_cert)
    {
      sub_1882E44E8(a1, one_cert, "Failed to get one cert");
      goto LABEL_11;
    }

    int v21 = sub_1882E6F40(a1[47], v25, &v23);
    if (v21)
    {
      int v10 = v21;
      uint64_t v11 = "Failed to get MS SAN";
      goto LABEL_6;
    }

    int principal = krb5_make_principal((krb5_context)a1, a4, a3, v23, 0LL);
    free(v23);
    if (principal)
    {
LABEL_11:
      uint64_t v12 = 2529638983LL;
      hx509_cert_free(v25);
      krb5_set_error_message((krb5_context)a1, -1765328313, "PK-INIT cert didn't contain principal SAN");
      return v12;
    }

    krb5_principal_set_type((uint64_t)a1, *a4, 10);
    if (a5) {
      *a5 = hx509_cert_ref(v25);
    }
    hx509_cert_free(v25);
    return 0LL;
  }

  else
  {
    uint64_t v12 = 2LL;
    krb5_set_error_message((krb5_context)a1, 2, "no user id");
  }

  return v12;
}

uint64_t sub_1882E6F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1882E6F40(a1, a2, &v4);
  if (!(_DWORD)v2) {
    free(v4);
  }
  return v2;
}

uint64_t sub_1882E6F40(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  if (v5[0] && *(void *)v5[1]) {
    uint64_t v3 = sub_1882FE7B8();
  }
  else {
    uint64_t v3 = 1LL;
  }
  hx509_free_octet_string_list((uint64_t)v5);
  return v3;
}

uint64_t _krb5_pk_match_cert(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t subjectAltName_otherName = hx509_cert_find_subjectAltName_otherName( a1[47],  a3,  (uint64_t)&xmmword_18A21D530,  (uint64_t)&v16);
  if ((_DWORD)subjectAltName_otherName)
  {
    uint64_t v8 = subjectAltName_otherName;
    krb5_set_error_message( (krb5_context)a1,  subjectAltName_otherName,  "Failed to find the PK-INIT subjectAltName in the certificate");
  }

  else
  {
    if (v16)
    {
      unsigned int v9 = 1;
      do
      {
        uint64_t v10 = sub_1882FE868();
        if ((_DWORD)v10)
        {
          uint64_t v8 = v10;
          krb5_set_error_message( (krb5_context)a1,  v10,  "Failed to decode the PK-INIT subjectAltName in the KDC certificate");
          goto LABEL_16;
        }

        sub_1882FE8B8();
        if (!v11) {
          break;
        }
        unint64_t v12 = v9++;
      }

      while (v16 > v12);
      if (v11) {
        goto LABEL_14;
      }
      uint64_t v8 = 0LL;
    }

    else
    {
LABEL_14:
      uint64_t v8 = 2529638983LL;
      krb5_set_error_message((krb5_context)a1, -1765328313, "PK-INIT cert didn't contain principal SAN");
    }

uint64_t sub_1882E7110(_krb5_context *a1, unsigned int *a2, uint64_t a3)
{
  int v6 = sub_188315334(a2);
  *(void *)a3 = v6;
  uint64_t v7 = malloc(v6);
  *(void *)(a3 + 8) = v7;
  if (v7)
  {
    sub_1883153EC((const void **)a2, v7);
    BOOL v8 = sub_188315430((uint64_t)a2);
    uint64_t result = 0LL;
    *(_DWORD *)(a3 + 16) = v8;
  }

  else
  {
    krb5_clear_error_message(a1);
    return 12LL;
  }

  return result;
}

void *sub_1882E7188(_krb5_context *a1, const char *a2, const void **a3)
{
  int v6 = sub_18831533C(a3[1], *(unsigned int *)a3, 0LL);
  uint64_t v7 = v6;
  if (v6) {
    sub_18831541C((uint64_t)v6, *((_DWORD *)a3 + 4));
  }
  else {
    krb5_set_error_message(a1, 12, "PKINIT: parsing BN failed %s", a2);
  }
  return v7;
}

uint64_t sub_1882E7200(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v21 = 0LL;
  if (*a2 <= 0xA)
  {
    __int128 v22 = 0uLL;
    uint64_t v23 = 0LL;
    uint64_t subject = hx509_cert_get_subject(a3, (void **)&v21);
    if ((_DWORD)subject) {
      return subject;
    }
    if (hx509_name_is_null_p(v21))
    {
      int v6 = calloc(1uLL, 0x10uLL);
      *(void *)&__int128 v22 = v6;
      if (!v6)
      {
        hx509_name_free((void **)&v21);
        goto LABEL_15;
      }

      uint64_t v7 = hx509_name_binary(v21, (uint64_t)v6);
      if ((_DWORD)v7)
      {
        uint64_t subject = v7;
        hx509_name_free((void **)&v21);
LABEL_13:
        sub_1882FE7D8();
        return subject;
      }
    }

    hx509_name_free((void **)&v21);
    *((void *)&v22 + 1) = calloc(1uLL, 0x10uLL);
    if (*((void *)&v22 + 1))
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      uint64_t subject = hx509_cert_get_issuer(a3, &v16);
      if ((_DWORD)subject) {
        goto LABEL_13;
      }
      uint64_t subject = hx509_name_to_Name();
      hx509_name_free(&v16);
      if ((_DWORD)subject) {
        goto LABEL_13;
      }
      uint64_t subject = hx509_cert_get_serialnumber();
      if ((_DWORD)subject) {
        goto LABEL_12;
      }
      size_t v9 = length_IssuerAndSerialNumber();
      uint64_t v10 = *((void *)&v22 + 1);
      **((void **)&v22 + 1) = v9;
      BOOL v11 = malloc(v9);
      *(void *)(v10 + 8) = v11;
      if (!v11)
      {
        uint64_t subject = 12LL;
        goto LABEL_12;
      }

      uint64_t v12 = encode_IssuerAndSerialNumber();
      if ((_DWORD)v12)
      {
        uint64_t subject = v12;
        free(*(void **)(*((void *)&v22 + 1) + 8LL));
        *(void *)(*((void *)&v22 + 1) + 8LL) = 0LL;
LABEL_12:
        free_IssuerAndSerialNumber();
        goto LABEL_13;
      }

      free_IssuerAndSerialNumber();
      if (**((void **)&v22 + 1)) {
        abort();
      }
      uint64_t v23 = 0LL;
      krb5_error_code v13 = (char *)realloc(*((void **)a2 + 1), 24LL * (*a2 + 1));
      if (v13)
      {
        uint64_t subject = 0LL;
        *((void *)a2 + 1) = v13;
        int v14 = *a2;
        uint64_t v15 = &v13[24 * *a2];
        *(_OWORD *)uint64_t v15 = v22;
        *((void *)v15 + 2) = v23;
        *a2 = v14 + 1;
        return subject;
      }
    }

LABEL_15:
    sub_1882FE7D8();
    return 12LL;
  }

  return 0LL;
}

uint64_t sub_1882E7414(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, size_t *a6, void *a7)
{
  CFArrayRef theArray = 0LL;
  int v11 = ((int)(*(_DWORD *)(a4 + 48) << 31) >> 31) & 0xB;
  *a7 = 0LL;
  uint64_t v12 = hx509_cms_verify_signed(a1[47], *(void *)a4, v11, a2, a3, 0LL, *(void *)(a4 + 32), a5, a6, &theArray);
  if (!(_DWORD)v12)
  {
    if (theArray)
    {
      uint64_t v13 = 2529638982LL;
      if (!heim_array_get_length(theArray))
      {
        uint64_t v15 = 0LL;
        goto LABEL_12;
      }

      int v14 = heim_array_copy_value(theArray, 0LL);
      uint64_t v15 = v14;
      if (!v14) {
        goto LABEL_12;
      }
      int cert = hx509_evaluate_get_cert((uint64_t)v15, 0LL);
      *a7 = cert;
      if (!cert) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t v13 = 0LL;
LABEL_12:
    heim_release(theArray);
    heim_release(v15);
    return v13;
  }

  uint64_t v13 = v12;
  sub_1882E44E8(a1, v12, "CMS verify signed failed");
  return v13;
}

uint64_t sub_1882E751C(_krb5_context *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = *(_BYTE *)(a4 + 52);
  if ((v10 & 2) != 0)
  {
    uint64_t v11 = hx509_cert_check_eku(*((void *)a1 + 47), a5);
    if ((_DWORD)v11)
    {
      uint64_t principal = v11;
      uint64_t v13 = "No PK-INIT KDC EKU in kdc certificate";
LABEL_9:
      krb5_set_error_message(a1, principal, v13);
      return principal;
    }

    char v10 = *(_BYTE *)(a4 + 52);
  }

  if ((v10 & 4) != 0)
  {
    uint64_t principal = krb5_make_principal(a1, &v16, a2, "krbtgt", a2, 0LL);
    if ((_DWORD)principal) {
      return principal;
    }
    int matched = _krb5_pk_match_cert((uint64_t *)a1, (uint64_t)v16, a5, 1);
    krb5_free_principal(a1, v16);
    if (matched)
    {
      uint64_t principal = 2529638983LL;
      krb5_set_error_message(a1, -1765328313, "KDC have wrong realm name in the certificate");
      return principal;
    }
  }

  if (!a3) {
    return 0LL;
  }
  uint64_t principal = hx509_verify_hostname( *((void *)a1 + 47),  a5,  (*(_BYTE *)(a4 + 52) & 8) != 0,  0LL,  (const char *)(a3 + 48),  *(void *)(*(void *)(a3 + 8) + 32LL),  *(_DWORD *)(*(void *)(a3 + 8) + 16LL));
  if ((_DWORD)principal)
  {
    uint64_t v13 = "Address mismatch in the KDC certificate";
    goto LABEL_9;
  }

  return principal;
}

uint64_t sub_1882E7660(_krb5_context *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v7 = sub_1882FE928();
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    krb5_set_error_message(a1, v7, "PKINIT decoding reply key failed");
LABEL_11:
    sub_1882FE948();
    return v8;
  }

  uint64_t v9 = krb5_enctype_valid(a1, (char *)v12.magic);
  if ((_DWORD)v9)
  {
    uint64_t v8 = v9;
    goto LABEL_11;
  }

  uint64_t v8 = sub_1882E78EC(a1, &v12, &v13, a3);
  if ((_DWORD)v8 && v13 == 12 && v12.magic == 18 && v14 == 20)
  {
    int v13 = 16;
    uint64_t v14 = 12LL;
    uint64_t v8 = sub_1882E78EC(a1, &v12, &v13, a3);
  }

  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  uint64_t v11 = malloc(0x18uLL);
  *a4 = v11;
  if (v11)
  {
    uint64_t v8 = copy_EncryptionKey();
    sub_1882FE948();
    if ((_DWORD)v8)
    {
      krb5_set_error_message(a1, v8, "PKINIT failed copying reply key");
      free(*a4);
      *a4 = 0LL;
    }
  }

  else
  {
    sub_1882FE948();
    uint64_t v8 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v8;
}

uint64_t sub_1882E77D8(_krb5_context *a1, uint64_t a2, int a3, void **a4)
{
  uint64_t v7 = sub_1882FEA08();
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    krb5_set_error_message(a1, v7, "PKINIT decoding reply key failed");
    sub_1882FEA28();
  }

  else if (v11 == a3)
  {
    uint64_t v9 = malloc(0x18uLL);
    *a4 = v9;
    if (v9)
    {
      uint64_t v8 = copy_EncryptionKey();
      sub_1882FEA28();
      if ((_DWORD)v8)
      {
        krb5_set_error_message(a1, v8, "PKINIT failed copying reply key");
        free(*a4);
        *a4 = 0LL;
      }
    }

    else
    {
      sub_1882FEA28();
      uint64_t v8 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }

  else
  {
    krb5_set_error_message(a1, 0, "PKINIT enckey nonce is wrong");
    sub_1882FEA28();
    return 2529638953LL;
  }

  return v8;
}

uint64_t sub_1882E78EC(_krb5_context *a1, const krb5_keyblock *a2, const void *a3, uint64_t a4)
{
  uint64_t v8 = krb5_crypto_init(a1, a2, 0LL, (krb5_keyblock ***)ctype);
  if (!(_DWORD)v8)
  {
    uint64_t v8 = krb5_verify_checksum( a1,  ctype[0],  (const krb5_checksum *)6,  *(krb5_const_pointer *)(a4 + 8),  *(void *)a4,  a3,  v7);
    krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  }

  return v8;
}

uint64_t _krb5_plugin_get_symbol(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _krb5_plugin_get_next(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t _krb5_plugin_find(_krb5_context *a1, int a2, const char *a3, void *a4)
{
  *a4 = 0LL;
  pthread_mutex_lock(&stru_18C4D8E20);
  if ((byte_18C707458 & 1) == 0)
  {
    int v43 = a2;
    byte_18C707458 = 1;
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0LL, v8, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
    uint64_t v15 = off_18C704490;
    if (strings) {
      uint64_t v15 = strings;
    }
    uint64_t v44 = (void **)v15;
    krb5_principal v16 = *v15;
    if (v16)
    {
      __int128 v17 = v44;
      while (1)
      {
        __s = v16;
        if (!_krb5_expand_default_cc_name_0(a1, (char *)*v17, (void **)&__s))
        {
          __int128 v18 = __s;
          size_t v19 = strlen(__s);
          if (v19)
          {
            __int128 v20 = __s - 1;
            do
            {
              if (v20[v19] != 47) {
                break;
              }
              v20[v19--] = 0;
            }

            while (v19);
            __int128 v18 = __s;
          }

          uint64_t v21 = opendir(v18);
          if (v21) {
            break;
          }
        }

LABEL_44:
        if (__s != *v17) {
          free(__s);
        }
        uint64_t v34 = (char *)v17[1];
        ++v17;
        krb5_principal v16 = v34;
        if (!v34) {
          goto LABEL_47;
        }
      }

      __int128 v22 = v21;
      sub_1882FA1B4(v21);
      while (1)
      {
        do
        {
          uint64_t v23 = readdir(v22);
          if (!v23)
          {
            closedir(v22);
            goto LABEL_44;
          }

          d_name = v23->d_name;
        }

        while (v23->d_name[0] == 46 && (!v23->d_name[1] || v23->d_name[1] == 46 && !v23->d_name[2]));
        __s2 = 0LL;
        size_t v25 = strlen(v23->d_name);
        if (v25 < 8) {
          goto LABEL_21;
        }
        int v26 = v25 - 7;
        if (strcmp(&d_name[v25 - 7], ".bundle")) {
          goto LABEL_21;
        }
        int v33 = asprintf(&__s2, "%s/%s/%.*s", __s, d_name, v26, d_name);
        int v27 = v33;
        uint64_t v28 = __s2;
        if (v33)
        {
          if (v33 < 0) {
            goto LABEL_21;
          }
        }

        else
        {
          if (access(__s2, 1))
          {
            __error();
            free(__s2);
            __s2 = 0LL;
LABEL_21:
            int v27 = asprintf(&__s2, "%s/%s", __s, d_name);
            uint64_t v28 = __s2;
            goto LABEL_22;
          }

          uint64_t v28 = __s2;
        }

        if (!v28) {
          goto LABEL_21;
        }
LABEL_22:
        if (v27 < 0 || !v28)
        {
          krb5_set_error_message(a1, 12, "malloc: out of memory");
          a2 = v43;
          goto LABEL_50;
        }

        uint64_t v29 = qword_18C707450;
        if (qword_18C707450)
        {
          while (*(_DWORD *)v29 || strcmp(*(const char **)(v29 + 8), v28))
          {
            uint64_t v29 = *(void *)(v29 + 32);
            if (!v29) {
              goto LABEL_28;
            }
          }

  if (ccache && !v13 && !*ccache) {
    *krb5_ccache ccache = id;
  }
  return v13;
}

LABEL_29:
          free(v28);
        }

        else
        {
LABEL_28:
          int v47 = 0;
          if ((v47 & 0x2810) == 0x800 && !sub_1882E7E38((uint64_t)a1, (uint64_t)v28))
          {
            sub_1882DFCE8((uint64_t)a1, 2, "Since binary is restricted skipping plugin %s ", v28);
            goto LABEL_29;
          }

          int v30 = calloc(1uLL, 0x28uLL);
          if (!v30)
          {
            krb5_set_error_message(a1, 12, "malloc: out of memory");
            goto LABEL_29;
          }

          uint64_t v31 = v30;
          *int v30 = 0;
          krb5_error_code v32 = dlopen(v28, 5);
          v31[1] = v28;
          void v31[2] = v32;
          v31[4] = qword_18C707450;
          qword_18C707450 = (uint64_t)v31;
        }
      }
    }

    uint64_t v15 = v9 - v10;
    goto LABEL_30;
  }

  if ((v7 & 3) == 0) {
    return 3325697545LL;
  }
  krb5_principal v16 = v7 & 0xFFFFFFF8;
  if (v8) {
    __int128 v17 = 1;
  }
  else {
    __int128 v17 = 2;
  }
  *a3 = v17 | v16;
LABEL_21:
  while (v10)
  {
    if (v8) {
      __int128 v18 = (unsigned __int8 *)a1;
    }
    else {
      __int128 v18 = (unsigned __int8 *)a1 + 1;
    }
    if (v8) {
      size_t v19 = (unsigned __int8 *)a1 + 1;
    }
    else {
      size_t v19 = (unsigned __int8 *)a1;
    }
    *a4++ = *v18 | (*v19 << 8);
    ++a1;
    --v10;
    a2 -= 2LL;
    if (!a2) {
      goto LABEL_29;
    }
  }

  return result;
}

          uint64_t v37 = "out of memory";
          uint64_t v36 = 12LL;
          __int128 v38 = a1;
          uint64_t v39 = 12;
          goto LABEL_30;
        }

        __int128 v22 = 0LL;
LABEL_20:
        if (v22)
        {
          free(*v17);
          uint64_t v35 = rk_strpoolcollect((uint64_t *)v22);
          *__int128 v17 = v35;
          if (!v35) {
            goto LABEL_29;
          }
        }

        ++v14;
        uint64_t v13 = *(void *)(a2 + 32);
        if (v14 >= *(unsigned int *)(v13 + 16 * v12))
        {
          uint64_t v10 = *(unsigned int *)(a2 + 24);
          goto LABEL_24;
        }
      }

      uint64_t v37 = "unsupported type";
      goto LABEL_28;
    }

    return 0LL;
  }

  uint64_t v37 = "RDN not of supported type";
LABEL_28:
  uint64_t v36 = 22LL;
  __int128 v38 = a1;
  uint64_t v39 = 22;
LABEL_30:
  hx509_set_error_string(v38, 0, v39, v37, a5, a6, a7, a8, v42);
  return v36;
}

LABEL_50:
  uint64_t v35 = qword_18C707450;
  if (qword_18C707450)
  {
    uint64_t v36 = 0LL;
    while (*(_DWORD *)v35 != 1)
    {
      if (*(_DWORD *)v35) {
        goto LABEL_61;
      }
      uint64_t v37 = *(void **)(v35 + 16);
      if (v37)
      {
        __int128 v38 = dlsym(v37, a3);
        if (v38)
        {
          uint64_t v39 = (uint64_t)v38;
          goto LABEL_60;
        }

        goto LABEL_61;
      }

LABEL_65:
      uint64_t v35 = *(void *)(v35 + 32);
      if (!v35)
      {
        pthread_mutex_unlock(&stru_18C4D8E20);
        if (!(_DWORD)v36) {
          goto LABEL_69;
        }
        return v36;
      }
    }

    if (!strcmp(*(const char **)(v35 + 16), a3) && *(_DWORD *)(v35 + 8) == a2)
    {
      uint64_t v39 = *(void *)(v35 + 24);
LABEL_60:
      uint64_t v36 = sub_1882E7D9C(a1, a4, v39);
    }

LABEL_61:
    if ((_DWORD)v36)
    {
      uint64_t v40 = (void *)*a4;
      if (*a4)
      {
        do
        {
          uint64_t v41 = (void *)v40[1];
          free(v40);
          uint64_t v40 = v41;
        }

        while (v41);
      }

      *a4 = 0LL;
    }

    goto LABEL_65;
  }

  pthread_mutex_unlock(&stru_18C4D8E20);
LABEL_69:
  if (*a4) {
    return 0LL;
  }
  uint64_t v36 = 2LL;
  krb5_set_error_message(a1, 2, "Did not find a plugin for %s", a3);
  return v36;
}

uint64_t sub_1882E7D9C(_krb5_context *a1, void *a2, uint64_t a3)
{
  int v6 = calloc(1uLL, 0x10uLL);
  if (v6)
  {
    uint64_t v7 = 0LL;
    *int v6 = a3;
    v6[1] = *a2;
    *a2 = v6;
  }

  else
  {
    uint64_t v7 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v7;
}

void *_krb5_plugin_free(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)result[1];
      free(result);
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

uint64_t sub_1882E7E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  SecRequirementRef requirement = 0LL;
  SecStaticCodeRef staticCode = 0LL;
  if (!a2)
  {
    sub_1882DFCE8(a1, 2, "path cannot be null %s", 0LL);
    goto LABEL_23;
  }

  OSStatus v4 = SecRequirementCreateWithString(@"anchor apple", 0, &requirement);
  if (v4 || !requirement)
  {
    sub_1882DFCE8(a1, 2, "Error creating requirement %d ", v4);
    uint64_t v2 = 0LL;
    goto LABEL_23;
  }

  uint64_t v5 = CFStringCreateWithCString(0LL, (const char *)v2, 0x8000100u);
  int v6 = CFURLCreateWithFileSystemPath(0LL, v5, kCFURLPOSIXPathStyle, 0);
  if (SecStaticCodeCreateWithPath(v6, 0, &staticCode) || !staticCode)
  {
    sub_1882DFCE8(a1, 2, "Error creating static code for %s: %d ");
  }

  else
  {
    if (!SecStaticCodeCheckValidity(staticCode, 0x15u, requirement))
    {
      uint64_t v2 = 1LL;
      if (v6) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }

    sub_1882DFCE8(a1, 2, "Error checking requirement for %s: %d ");
  }

  uint64_t v2 = 0LL;
  if (v6)
  {
LABEL_12:
    PathComponent = CFURLCopyLastPathComponent(v6);
    CStringPtr = CFStringGetCStringPtr(PathComponent, 0x8000100u);
    uint64_t v9 = "is not";
    if ((_DWORD)v2) {
      uint64_t v9 = "is";
    }
    sub_1882DFCE8(a1, 2, "Plugin %s %s signed by Apple", CStringPtr, v9);
    if (PathComponent) {
      CFRelease(PathComponent);
    }
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v10 = v6;
    goto LABEL_22;
  }

void krb5_load_plugins(_krb5_context *a1, char *cStr, char **a3)
{
  CFStringRef v5 = heim_string_create(cStr);
  pthread_mutex_lock(&stru_18C4D8E20);
  int v6 = (const __CFDictionary *)qword_18C4D9D00;
  if (!qword_18C4D9D00)
  {
    int v6 = heim_dict_create();
    qword_18C4D9D00 = (uint64_t)v6;
    if (!v6)
    {
      pthread_mutex_unlock(&stru_18C4D8E20);
      return;
    }
  }

  uint64_t v7 = (const __CFDictionary *)heim_dict_copy_value(v6, v5);
  if (!v7)
  {
    CFMutableDictionaryRef v8 = heim_dict_create();
    if (!v8)
    {
      pthread_mutex_unlock(&stru_18C4D8E20);
      heim_release(v5);
      return;
    }

    uint64_t v7 = v8;
    heim_dict_set_value((__CFDictionary *)qword_18C4D9D00, v5, v8);
  }

  heim_release(v5);
  int v35 = 0;
  if (!csops())
  {
    uint64_t v9 = *a3;
    if (*a3)
    {
      while (1)
      {
        __s = 0LL;
        if (!_krb5_expand_default_cc_name_0(a1, v9, (void **)&__s))
        {
          uint64_t v10 = __s;
          size_t v11 = strlen(__s);
          if (v11)
          {
            uint64_t v12 = __s - 1;
            do
            {
              if (v12[v11] != 47) {
                break;
              }
              v12[v11--] = 0;
            }

            while (v11);
            uint64_t v10 = __s;
          }

          uint64_t v13 = opendir(v10);
          if (v13) {
            break;
          }
        }

LABEL_46:
        if (__s) {
          free(__s);
        }
        krb5_error_code v32 = a3[1];
        ++a3;
        uint64_t v9 = v32;
        if (!v32) {
          goto LABEL_49;
        }
      }

      uint64_t v14 = v13;
      sub_1882FA1B4(v13);
      while (1)
      {
        do
        {
          uint64_t v15 = readdir(v14);
          if (!v15)
          {
LABEL_45:
            closedir(v14);
            goto LABEL_46;
          }

          d_name = v15->d_name;
          int v16 = v15->d_name[0];
          __path = 0LL;
        }

        while (v16 == 46 && (!v15->d_name[1] || v15->d_name[1] == 46 && !v15->d_name[2]));
        size_t v18 = strlen(v15->d_name);
        if (v18 < 8) {
          break;
        }
        int v19 = v18 - 7;
        if (strcmp(&d_name[v18 - 7], ".bundle")) {
          break;
        }
        int v21 = asprintf(&__path, "%s/%s/%.*s", __s, d_name, v19, d_name);
        if (!v21)
        {
          __int128 v20 = __path;
          goto LABEL_24;
        }

LABEL_28:
        __int128 v22 = __path;
        if (!__path) {
          goto LABEL_34;
        }
        if ((v35 & 0x2810) == 0x800)
        {
          if (sub_1882E7E38((uint64_t)a1, (uint64_t)__path))
          {
            __int128 v22 = __path;
            goto LABEL_32;
          }
        }

        else
        {
LABEL_32:
          if (v21 < 0 || !v22) {
            goto LABEL_34;
          }
LABEL_35:
          if (v21 < 0 || !v22) {
            goto LABEL_45;
          }
          CFStringRef v23 = heim_string_create(d_name);
          if (!v23)
          {
            free(__path);
            goto LABEL_45;
          }

          CFStringRef v24 = v23;
          int v30 = heim_dict_copy_value(v7, v23);
          if (!v30)
          {
            int v30 = (void *)heim_uniq_alloc( 0x38uLL,  (uint64_t)"krb5-plugin",  (uint64_t)sub_1882E8380,  v25,  v26,  v27,  v28,  v29);
            if (v30)
            {
              uint64_t v31 = dlopen(__path, 5);
              v30[5] = v31;
              if (v31)
              {
                v30[4] = heim_retain(v24);
                v30[6] = heim_dict_create();
                heim_dict_set_value(v7, v24, v30);
              }
            }
          }

          heim_release(v24);
          heim_release(v30);
          free(__path);
        }
      }

      __int128 v20 = 0LL;
LABEL_24:
      if (access(v20, 1))
      {
        __error();
        free(__path);
        __path = 0LL;
LABEL_34:
        int v21 = asprintf(&__path, "%s/%s", __s, d_name);
        __int128 v22 = __path;
        goto LABEL_35;
      }

      int v21 = 0;
      goto LABEL_28;
    }

      if (!v43) {
        break;
      }
      sub_18830E030(a2, &v44, ",", 1uLL, 0);
    }
  }

  return 0LL;
}

LABEL_49:
    heim_release(v7);
    pthread_mutex_unlock(&stru_18C4D8E20);
  }

    krb5_error_code v32 = v22;
    goto LABEL_58;
  }

              hx509_set_error_string(v57, 0, v58, v59, v16, v17, v18, v19, v76);
              goto LABEL_59;
            }

            uint64_t appended = v34;
          }

          else
          {
            uint64_t appended = 569889LL;
            hx509_set_error_string( a1,  0,  569889,  "SignerInfo %d in SignedData missing sigature",  v16,  v17,  v18,  v19,  v27);
          }

void *sub_1882E8380(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 40);
  if (result) {
    return (void *)dlclose(result);
  }
  return result;
}

uint64_t krb5_plugin_register_module(_krb5_context *a1, char *a2, int a3, char *a4, const void *a5)
{
  if (!a2) {
    goto LABEL_11;
  }
  if (!qword_18C4D9D00)
  {
    qword_18C4D9D00 = (uint64_t)heim_dict_create();
    if (!qword_18C4D9D00)
    {
      pthread_mutex_unlock(&stru_18C4D8E20);
      return 1LL;
    }
  }

  CFStringRef v10 = heim_string_create(a2);
  size_t v11 = (const __CFDictionary *)heim_dict_copy_value((const __CFDictionary *)qword_18C4D9D00, v10);
  if (v11) {
    goto LABEL_7;
  }
  CFMutableDictionaryRef v12 = heim_dict_create();
  if (!v12)
  {
    pthread_mutex_unlock(&stru_18C4D8E20);
    heim_release(v10);
    return 1LL;
  }

  size_t v11 = v12;
  heim_dict_set_value((__CFDictionary *)qword_18C4D9D00, v10, v12);
LABEL_7:
  heim_release(v10);
  asprintf(&cStr, "%p", a5);
  CFStringRef v13 = heim_string_create(cStr);
  int v19 = heim_dict_copy_value(v11, v13);
  if (!v19)
  {
    int v19 = (void *)heim_uniq_alloc(0x38uLL, (uint64_t)"krb5-plugin", (uint64_t)sub_1882E8380, v14, v15, v16, v17, v18);
    if (v19)
    {
      v19[6] = heim_dict_create();
      heim_dict_set_value(v11, v13, v19);
      uint64_t v25 = (void *)heim_uniq_alloc(0x30uLL, (uint64_t)"struct-plug", (uint64_t)sub_1882E8638, v20, v21, v22, v23, v24);
      v25[4] = a5;
      uint64_t v26 = (__CFDictionary *)v19[6];
      CFStringRef v27 = heim_string_create(a4);
      heim_dict_set_value(v26, v27, v25);
    }
  }

  heim_release(v19);
LABEL_11:
  uint64_t v28 = qword_18C707450;
  if (qword_18C707450)
  {
    while (*(_DWORD *)v28 != 1
         || strcmp(*(const char **)(v28 + 16), a4)
         || *(_DWORD *)(v28 + 8) != a3
         || *(const void **)(v28 + 24) != a5)
    {
      uint64_t v28 = *(void *)(v28 + 32);
      if (!v28) {
        goto LABEL_17;
      }
    }

    goto LABEL_20;
  }

uint64_t sub_1882E8638(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 16))(*(void *)(result + 40));
  }
  return result;
}

uint64_t krb5_plugin_register(_krb5_context *a1, int a2, char *a3, const void *a4)
{
  return krb5_plugin_register_module(a1, 0LL, a2, a3, a4);
}

uint64_t krb5_plugin_run_f(uint64_t a1, char *cStr, char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = 2529639161LL;
  CFStringRef v13 = heim_string_create(cStr);
  pthread_mutex_lock(&stru_18C4D8E20);
  uint64_t v14 = (const __CFDictionary *)heim_dict_copy_value((const __CFDictionary *)qword_18C4D9D00, v13);
  heim_release(v13);
  if (v14)
  {
    uint64_t v16 = a1;
    uint64_t v18 = a3;
    CFStringRef v17 = heim_string_create(a3);
    int v19 = a4;
    uint64_t v20 = heim_array_create();
    uint64_t v21 = a7;
    uint64_t v22 = a6;
    sub_188318830(v14, (uint64_t)&v16, (uint64_t)sub_1882E877C);
    heim_release(v14);
    pthread_mutex_unlock(&stru_18C4D8E20);
    unsigned int v23 = -1765328135;
    heim_array_iterate_f(v20, (uint64_t)&v16, (uint64_t (*)(const void *, int *, uint64_t))sub_1882E8860);
    heim_release(v20);
    heim_release(v17);
    return v23;
  }

  else
  {
    pthread_mutex_unlock(&stru_18C4D8E20);
  }

  return v12;
}

void sub_1882E877C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5 = heim_dict_copy_value(*(const __CFDictionary **)(a2 + 48), *(const void **)(a3 + 8));
  if (v5)
  {
    size_t v11 = v5;
    uint64_t v12 = (_DWORD *)v5[4];
    if (!v12) {
      goto LABEL_11;
    }
LABEL_9:
    if (*v12 >= *(_DWORD *)(a3 + 24)) {
      heim_array_append_value(*(__CFArray **)(a3 + 32), v11);
    }
    goto LABEL_11;
  }

  if (!*(void *)(a2 + 40)) {
    return;
  }
  size_t v11 = (void *)heim_uniq_alloc(0x30uLL, (uint64_t)"struct-plug", (uint64_t)sub_1882E8638, v6, v7, v8, v9, v10);
  CFStringRef v13 = dlsym(*(void **)(a2 + 40), *(const char **)(a3 + 16));
  uint64_t v12 = v13;
  v11[4] = v13;
  if (v13 && (*((unsigned int (**)(void, void *))v13 + 1))(*(void *)a3, v11 + 5))
  {
    uint64_t v12 = 0LL;
    v11[4] = 0LL;
  }

  heim_dict_set_value(*(__CFDictionary **)(a2 + 48), *(const void **)(a3 + 8), v11);
  if (v12) {
    goto LABEL_9;
  }
LABEL_11:
  heim_release(v11);
}

uint64_t sub_1882E8860(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(a3 + 40))( *(void *)a3,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a3 + 48));
  *(_DWORD *)(a3 + 56) = result;
  if ((_DWORD)result != -1765328135) {
    *a2 = 1;
  }
  return result;
}

void krb5_free_principal(krb5_context a1, krb5_principal a2)
{
  if (a2)
  {
    free_Principal();
    free(a2);
  }

void krb5_principal_set_type(uint64_t a1, _DWORD *a2, int a3)
{
  *a2 = a3;
}

uint64_t krb5_principal_get_type(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t krb5_principal_get_realm(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t krb5_principal_get_comp_string(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 8) <= a3) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)(a2 + 16) + 8LL * a3);
  }
}

uint64_t krb5_principal_get_num_comp(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

krb5_error_code krb5_parse_name_flags(krb5_context a1, const char *a2, int a3, krb5_principal *a4)
{
  OSStatus v4 = a1;
  uint64_t v53 = 0LL;
  *a4 = 0LL;
  if ((~a3 & 3) == 0)
  {
    krb5_error_code v5 = -1765328138;
    krb5_set_error_message(a1, -1765328138, "Can't require both realm and no realm at the same time");
    return v5;
  }

  int v9 = 1;
  if ((a3 & 4) == 0)
  {
    for (uint64_t i = a2; ; ++i)
    {
      unsigned int v29 = *(unsigned __int8 *)i;
      if (v29 > 0x3F)
      {
        if (v29 == 92)
        {
          if (!*(unsigned __int8 *)++i)
          {
            krb5_error_code v5 = -1765328250;
            krb5_set_error_message(a1, -1765328250, "trailing \\ in principal name");
            return v5;
          }
        }

        else if (v29 == 64)
        {
          break;
        }
      }

      else if (v29 == 47)
      {
        ++v9;
      }

      else if (!*i)
      {
        break;
      }
    }
  }

  uint64_t v10 = (char *)calloc(v9, 8uLL);
  if (!v10)
  {
LABEL_50:
    krb5_error_code v5 = 12;
    krb5_set_error_message(v4, 12, "malloc: out of memory");
    return v5;
  }

  size_t v11 = v10;
  uint64_t v12 = strdup(a2);
  if (!v12)
  {
    free(v11);
    goto LABEL_50;
  }

  CFStringRef v13 = v12;
  int v43 = a4;
  unsigned int v14 = *v12;
  if (!*v12)
  {
    int v16 = 0;
    uint64_t v18 = v12;
    int v19 = v12;
    if ((a3 & 2) != 0) {
      goto LABEL_73;
    }
    goto LABEL_53;
  }

  uint64_t v44 = v4;
  BOOL v15 = 0;
  int v16 = 0;
  BOOL v17 = 1;
  uint64_t v18 = v12;
  int v19 = v12;
  uint64_t v52 = v12;
  uint64_t v49 = v12;
  uint64_t v50 = v11;
LABEL_8:
  uint64_t v20 = 0LL;
  uint64_t v46 = v18;
  BOOL v45 = v15;
  int v51 = v16;
  unsigned int v47 = v14;
  BOOL v48 = v17;
  unsigned int v21 = v17 & (a3 >> 2);
  uint64_t v22 = &v11[8 * v16];
  unsigned int v23 = v14;
  while (1)
  {
    uint64_t v24 = &v52[v20];
    if (v23 == 92)
    {
      int v16 = v51 + v20;
      uint64_t v52 = v24 + 2;
      unsigned int v27 = v24[1];
      if (v27 > 0x6D)
      {
        size_t v11 = v50;
        BOOL v17 = v48;
        if (v27 == 116)
        {
          unsigned int v27 = 9;
        }

        else if (v27 == 110)
        {
          unsigned int v27 = 10;
        }
      }

      else
      {
        size_t v11 = v50;
        BOOL v17 = v48;
        if (v27 == 48)
        {
          unsigned int v27 = 0;
        }

        else if (v27 == 98)
        {
          unsigned int v27 = 8;
        }

        else if (!v24[1])
        {
          krb5_error_code v5 = -1765328250;
          krb5_set_error_message(v44, -1765328250, "trailing \\ in principal name");
          int v16 = v51 + v20;
          CFStringRef v13 = v49;
          goto LABEL_76;
        }
      }

      CFStringRef v13 = v49;
      if (v15) {
        goto LABEL_34;
      }
      goto LABEL_36;
    }

    if (v21)
    {
      unsigned int v27 = v47;
      BOOL v17 = v47 != 64;
      int v16 = v51;
      v52 += v20 + 1;
      BOOL v15 = v45;
      uint64_t v18 = v46;
      CFStringRef v13 = v49;
      size_t v11 = v50;
      if (v45) {
        goto LABEL_34;
      }
LABEL_36:
      *v19++ = v27;
      unsigned int v14 = *v52;
      if (*v52) {
        goto LABEL_8;
      }
LABEL_59:
      if (v15)
      {
        if ((a3 & 1) != 0)
        {
          krb5_error_code v5 = -1765328250;
          krb5_set_error_message(v44, -1765328250, "realm found in 'short' principal expected to be without one", v43);
          goto LABEL_76;
        }

        size_t v33 = v19 - v18;
        uint64_t v34 = (char *)malloc(v19 - v18 + 1);
        uint64_t v53 = v34;
        OSStatus v4 = v44;
        if (!v34) {
          goto LABEL_71;
        }
        int v35 = v34;
        memcpy(v34, v18, v33);
        v35[v33] = 0;
LABEL_66:
        uint64_t v39 = (krb5_principal_data *)malloc(0x20uLL);
        *int v43 = v39;
        if (v39)
        {
          if ((a3 & 4) != 0) {
            int v40 = 10;
          }
          else {
            int v40 = 1;
          }
          v39->uint64_t magic = v40;
          v39->realm.uint64_t magic = v16;
          uint64_t v41 = v53;
          v39->realm.data = v11;
          v39->data = (krb5_data *)v41;
          free(v13);
          return 0;
        }

LABEL_71:
        krb5_error_code v5 = 12;
        krb5_set_error_message(v4, 12, "malloc: out of memory", v43);
        goto LABEL_76;
      }

      OSStatus v4 = v44;
      if ((a3 & 2) != 0)
      {
LABEL_73:
        krb5_error_code v5 = -1765328250;
        krb5_set_error_message(v4, -1765328250, "realm NOT found in principal expected to be with one", v43);
        goto LABEL_76;
      }

LABEL_53:
      if ((a3 & 1) != 0)
      {
        uint64_t v53 = 0LL;
      }

      else
      {
        krb5_error_code default_realm = krb5_get_default_realm(v4, &v53);
        if (default_realm)
        {
          krb5_error_code v5 = default_realm;
          goto LABEL_76;
        }
      }

      size_t v36 = v19 - v18;
      uint64_t v37 = malloc(v19 - v18 + 1);
      *(void *)&v11[8 * v16] = v37;
      if (!v37) {
        goto LABEL_71;
      }
      __int128 v38 = v37;
      memcpy(v37, v18, v36);
      v38[v36] = 0;
      ++v16;
      goto LABEL_66;
    }

    unsigned int v25 = (a3 >> 2) & 1;
    if (v23 != 47) {
      LOBYTE(v25) = 1;
    }
    if (v23 != 64 && (v25 & 1) != 0) {
      break;
    }
    if (v15)
    {
      krb5_error_code v5 = -1765328250;
      int v16 = v51 + v20;
      krb5_set_error_message(v44, -1765328250, "part after realm in principal name", v43);
LABEL_58:
      CFStringRef v13 = v49;
      size_t v11 = v50;
      goto LABEL_76;
    }

    uint64_t v26 = malloc(v19 - v18 + 1);
    *(void *)&v22[8 * v20] = v26;
    if (!v26)
    {
      int v16 = v51 + v20;
      krb5_error_code v5 = 12;
      krb5_set_error_message(v44, 12, "malloc: out of memory", v43);
      goto LABEL_58;
    }

    BOOL v15 = v23 == 64;
    memcpy(v26, v18, v19 - v18);
    *(_BYTE *)(*(void *)&v22[8 * v20] + v19 - v18) = 0;
    unsigned int v23 = v24[1];
    ++v20;
    uint64_t v18 = v19;
    if (!v24[1])
    {
      size_t v11 = v50;
      int v16 = v51 + v20;
      uint64_t v18 = v19;
      CFStringRef v13 = v49;
      goto LABEL_59;
    }
  }

  size_t v11 = v50;
  v52 += v20 + 1;
  unsigned int v27 = v23;
  int v16 = v51 + v20;
  CFStringRef v13 = v49;
  BOOL v17 = v48;
  if (!v15) {
    goto LABEL_36;
  }
LABEL_34:
  if (v27 != 47 && v27) {
    goto LABEL_36;
  }
  krb5_error_code v5 = -1765328250;
  krb5_set_error_message(v44, -1765328250, "part after realm in principal name", v43);
LABEL_76:
  if (v16 >= 1)
  {
    unint64_t v42 = v16 + 1LL;
    do
      free(*(void **)&v11[8 * (v42-- - 2)]);
    while (v42 > 1);
  }

  free(v11);
  free(v53);
  free(v13);
  return v5;
}

    uint64_t v28 = "Out of memory";
    unsigned int v27 = 12LL;
    unsigned int v29 = a1;
LABEL_61:
    int v30 = 12;
    goto LABEL_62;
  }

  uint64_t v18 = "No public key set";
LABEL_29:
  unsigned int v27 = 22LL;
  hx509_set_error_string(a1, 0, 22, v18, a5, a6, a7, a8, (char)v57);
  return v27;
}

krb5_error_code krb5_parse_name(krb5_context a1, const char *a2, krb5_principal *a3)
{
  return krb5_parse_name_flags(a1, a2, 0, a3);
}

uint64_t krb5_unparse_name_fixed(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1882E8E4C(a1, a2, a3, a4, 0);
}

uint64_t sub_1882E8E4C(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  if ((a5 & 2) == 0 && !*(void *)(a2 + 24))
  {
    int v16 = "Realm missing from principal, can't unparse";
LABEL_24:
    uint64_t v14 = 34LL;
    krb5_set_error_message(a1, 34, v16);
    return v14;
  }

  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    while (1)
    {
      if (v11 && v10 < a4) {
        *(_BYTE *)(a3 + v10++) = 47;
      }
      unint64_t v12 = sub_1882E9AE4(*(_BYTE **)(*(void *)(a2 + 16) + 8 * v11), a3, v10, a4, (a5 >> 2) & 1);
      if (v12 == a4) {
        break;
      }
      unint64_t v10 = v12;
    }

    int v16 = "Out of space printing principal";
    goto LABEL_24;
  }

  unint64_t v10 = 0LL;
LABEL_12:
  if ((a5 & 3) != 1)
  {
    int v15 = a5 & 1;
    goto LABEL_19;
  }

  uint64_t default_realm = krb5_get_default_realm(a1, &__s2);
  if (!(_DWORD)default_realm)
  {
    BOOL v17 = __s2;
    int v15 = strcmp(*(const char **)(a2 + 24), __s2) == 0;
    free(v17);
LABEL_19:
    if (v15 | a5 & 2) {
      return 0LL;
    }
    if (v10 < a4) {
      *(_BYTE *)(a3 + v10++) = 64;
    }
    if (sub_1882E9AE4(*(_BYTE **)(a2 + 24), a3, v10, a4, (a5 >> 2) & 1) != a4) {
      return 0LL;
    }
    int v16 = "Out of space printing realm of principal";
    goto LABEL_24;
  }

  return default_realm;
}

uint64_t krb5_unparse_name_fixed_short(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1882E8E4C(a1, a2, a3, a4, 1u);
}

uint64_t krb5_unparse_name_fixed_flags( _krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  return sub_1882E8E4C(a1, a2, a4, a5, a3);
}

krb5_error_code krb5_unparse_name(krb5_context a1, krb5_const_principal a2, char **a3)
{
  return sub_1882E9004(a1, (uint64_t)a2, (void **)a3, 0);
}

uint64_t sub_1882E9004(_krb5_context *a1, uint64_t a2, void **a3, unsigned int a4)
{
  uint64_t v8 = *(const char **)(a2 + 24);
  if (v8)
  {
    size_t v9 = strlen(*(const char **)(a2 + 24));
    uint64_t v10 = (v9 << (strcspn(v8, " \n\t\b\\/@") != v9)) + 1;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v11)
  {
    unint64_t v12 = *(const char ***)(a2 + 16);
    do
    {
      CFStringRef v13 = *v12++;
      size_t v14 = strlen(v13);
      v10 += (v14 << (strcspn(v13, " \n\t\b\\/@") != v14)) + 1;
      --v11;
    }

    while (v11);
  }

  int v15 = malloc(v10 + 1);
  *a3 = v15;
  if (v15)
  {
    uint64_t v16 = sub_1882E8E4C(a1, a2, (uint64_t)v15, v10 + 1, a4);
    if ((_DWORD)v16)
    {
      free(*a3);
      *a3 = 0LL;
    }
  }

  else
  {
    uint64_t v16 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v16;
}

krb5_error_code krb5_unparse_name_flags(krb5_context a1, krb5_const_principal a2, int a3, char **a4)
{
  return sub_1882E9004(a1, (uint64_t)a2, (void **)a4, a3);
}

uint64_t krb5_unparse_name_short(_krb5_context *a1, uint64_t a2, void **a3)
{
  return sub_1882E9004(a1, a2, a3, 1u);
}

uint64_t krb5_principal_set_realm(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 24) = v7;
  if (v7) {
    return 0LL;
  }
  uint64_t v8 = 12LL;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v8;
}

krb5_error_code krb5_build_principal(krb5_context a1, krb5_principal *a2, unsigned int a3, const char *a4, ...)
{
  return sub_1882E9288(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_1882E9338, (uint64_t)va);
}

uint64_t krb5_build_principal_va(_krb5_context *a1, void *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return sub_1882E9288(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_1882E9338, a5);
}

uint64_t krb5_make_principal(krb5_context a1, void *a2, char *a3, ...)
{
  uint64_t v7 = 0LL;
  if (!a3)
  {
    uint64_t default_realm = krb5_get_default_realm(a1, &v7);
    if ((_DWORD)default_realm) {
      return default_realm;
    }
    a3 = v7;
  }

  uint64_t default_realm = sub_1882E9288( a1,  a2,  a3,  (void (*)(_krb5_context *, void *, uint64_t))sub_1882E9338,  (uint64_t)va);
  if (v7) {
    free(v7);
  }
  return default_realm;
}

uint64_t sub_1882E9288( _krb5_context *a1, void *a2, const char *a3, void (*a4)(_krb5_context *, void *, uint64_t), uint64_t a5)
{
  uint64_t v10 = calloc(1uLL, 0x20uLL);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  _DWORD *v10 = 1;
  unint64_t v12 = strdup(a3);
  v11[3] = v12;
  if (!v12)
  {
    free(v11);
LABEL_5:
    uint64_t v13 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v13;
  }

  a4(a1, v11, a5);
  uint64_t v13 = 0LL;
  *a2 = v11;
  return v13;
}

void sub_1882E9338(_krb5_context *a1, uint64_t a2, const char **a3)
{
  uint64_t v8 = a3 + 1;
  uint64_t v3 = *a3;
  if (*a3)
  {
    do
    {
      size_t v6 = strlen(v3);
      sub_1882E9BDC(a1, a2, v3, v6);
      uint64_t v7 = v8++;
      uint64_t v3 = *v7;
    }

    while (*v7);
  }

uint64_t krb5_build_principal_va_ext(_krb5_context *a1, void *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return sub_1882E9288(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_1882E93B8, a5);
}

void sub_1882E93B8(_krb5_context *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v7 = (const void **)(a3 + 2);
  for (int i = *a3; i; int i = *v6)
  {
    sub_1882E9BDC(a1, a2, *v7, i);
    size_t v6 = (int *)(v7 + 1);
    v7 += 2;
  }

krb5_error_code krb5_build_principal_ext(krb5_context a1, krb5_principal *a2, unsigned int a3, const char *a4, ...)
{
  return sub_1882E9288(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_1882E93B8, (uint64_t)va);
}

krb5_error_code krb5_copy_principal(krb5_context a1, krb5_const_principal a2, krb5_principal *a3)
{
  krb5_error_code v5 = (krb5_principal_data *)malloc(0x20uLL);
  if (v5)
  {
    size_t v6 = v5;
    if (!copy_Principal())
    {
      krb5_error_code v7 = 0;
      *a3 = v6;
      return v7;
    }

    free(v6);
  }

  krb5_error_code v7 = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v7;
}

uint64_t krb5_principal_compare_any_realm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == *(_DWORD *)(a3 + 8))
  {
    if (!(_DWORD)v3) {
      return 1LL;
    }
    OSStatus v4 = *(const char ***)(a2 + 16);
    for (int i = *(const char ***)(a3 + 16); !strcmp(*v4, *i); ++i)
    {
      ++v4;
      if (!--v3) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1882E953C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == *(_DWORD *)(a3 + 8))
  {
    if (!(_DWORD)v3) {
      return 1LL;
    }
    OSStatus v4 = *(const char ***)(a2 + 16);
    for (int i = *(const char ***)(a3 + 16); !strcmp(*v4, *i); ++i)
    {
      ++v4;
      if (!--v3) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

krb5_BOOLean krb5_principal_compare(krb5_context a1, krb5_const_principal a2, krb5_const_principal a3)
{
  uint64_t v5 = strcmp((const char *)a2->data, (const char *)a3->data);
  if ((_DWORD)v5) {
    return 0;
  }
  else {
    return krb5_principal_compare_any_realm(v5, (uint64_t)a2, (uint64_t)a3);
  }
}

krb5_BOOLean krb5_realm_compare(krb5_context a1, krb5_const_principal a2, krb5_const_principal a3)
{
  return strcmp((const char *)a2->data, (const char *)a3->data) == 0;
}

uint64_t krb5_principal_match(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a3 + 8))
  {
    int v5 = fnmatch(*(const char **)(a3 + 24), *(const char **)(a2 + 24), 0);
    uint64_t result = 0LL;
    if (v5) {
      return result;
    }
    if (!*(_DWORD *)(a2 + 8)) {
      return 1LL;
    }
    uint64_t v7 = 0LL;
    while (!fnmatch( *(const char **)(*(void *)(a3 + 16) + 8 * v7),  *(const char **)(*(void *)(a2 + 16) + 8 * v7),  0))
    {
    }
  }

  return 0LL;
}

krb5_error_code krb5_sname_to_principal( krb5_context a1, const char *a2, const char *a3, krb5_int32 a4, krb5_principal *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a4 && a4 != 3)
  {
    krb5_error_code host_realm = -1765328166;
    krb5_set_error_message(a1, -1765328166, "unsupported name type %d");
    return host_realm;
  }

  if (a2)
  {
    __strlcpy_chk();
  }

  else
  {
    if (gethostname(__s, 0xFFuLL))
    {
      krb5_error_code host_realm = *__error();
      krb5_set_error_message(a1, host_realm, "Failed to get local hostname");
      return host_realm;
    }

    __s[255] = 0;
  }

  if (!a3) {
    a3 = "host";
  }
  if (a4 == 3)
  {
    krb5_error_code v10 = krb5_expand_hostname_realms(a1, __s, (unsigned __int8 **)&v14, &v15);
    if (v10) {
      return v10;
    }
    rk_strlwr((unsigned __int8 *)v14);
    __strlcpy_chk();
    free(v14);
  }

  else
  {
    krb5_error_code host_realm = krb5_get_host_realm(a1, a2, &v15);
    if (host_realm) {
      return host_realm;
    }
  }

  size_t v12 = strlen(__s);
  if (v12 && __s[v12 - 1] == 46) {
    __s[v12 - 1] = 0;
  }
  krb5_error_code host_realm = krb5_make_principal(a1, a5, *v15, a3, __s, 0LL);
  krb5_free_host_realm(a1, v15);
  return host_realm;
}

uint64_t krb5_parse_nametype(_krb5_context *a1, char *a2, _DWORD *a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = "UNKNOWN";
  while (strcasecmp(v7, a2))
  {
    uint64_t v7 = (&off_18A21A220)[v6 + 2];
    v6 += 2LL;
    if (v6 == 24)
    {
      uint64_t v8 = 2529639046LL;
      krb5_set_error_message(a1, -1765328250, "Failed to find name type %s", a2);
      return v8;
    }
  }

  uint64_t v8 = 0LL;
  *a3 = (&off_18A21A220)[v6 + 1];
  return v8;
}

BOOL krb5_principal_is_null(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(_DWORD *)a2 == 11 && *(_DWORD *)(a2 + 8) == 2)
  {
    uint64_t v2 = *(const char ***)(a2 + 16);
    if (!strcmp(*v2, "WELLKNOWN") && !strcmp(v2[1], "NULL")) {
      return 1;
    }
  }

  return result;
}

BOOL krb5_realm_is_lkdc(const char *a1)
{
  return !strncmp(a1, "LKDC:", 5uLL) || strncmp(a1, "WELLKNOWN:COM.APPLE.LKDC", 0x18uLL) == 0;
}

BOOL krb5_principal_is_lkdc(uint64_t a1, uint64_t a2)
{
  return krb5_realm_is_lkdc(*(const char **)(a2 + 24));
}

BOOL krb5_principal_is_pku2u(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a2 + 24), "WELLKNOWN:PKU2U") == 0;
}

BOOL krb5_principal_is_krbtgt(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == 2 && strcmp(**(const char ***)(a2 + 16), "krbtgt") == 0;
}

BOOL krb5_principal_is_gss_hostbased_service(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 8) == 2) {
    return strcmp(*(const char **)(*(void *)(a2 + 16) + 8LL), "WELLKNOWN:ORG.H5L.HOSTBASED-SERVICE") == 0;
  }
  return 0LL;
}

BOOL krb5_principal_is_root_krbtgt(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

unint64_t sub_1882E9AE4(_BYTE *a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5 = a3;
  char v7 = *a1;
  BOOL v8 = a3 < a4;
  if (*a1) {
    BOOL v9 = a3 >= a4;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    size_t v12 = a1 + 1;
    do
    {
      uint64_t v13 = memchr(" \n\t\b\\/@", v7, 8uLL);
      if (a5 && v13)
      {
        *(_BYTE *)(a2 + v5++) = aNtb[v13 - " \n\t\b\\/@"];
        goto LABEL_14;
      }

      unint64_t v14 = v5 + 1;
      if (v13)
      {
        *(_BYTE *)(a2 + v5) = 92;
        if (v14 < a4)
        {
          v5 += 2LL;
          *(_BYTE *)(a2 + v14) = aNtb[v13 - " \n\t\b\\/@"];
          goto LABEL_14;
        }
      }

      else
      {
        *(_BYTE *)(a2 + v5) = v7;
      }

      ++v5;
LABEL_14:
      int v15 = *v12++;
      char v7 = v15;
      BOOL v8 = v5 < a4;
    }

    while (v15 && v5 < a4);
  }

  if (v8) {
    *(_BYTE *)(a2 + v5) = 0;
  }
  return v5;
}

void sub_1882E9BDC(_krb5_context *a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  BOOL v9 = realloc(*(void **)(a2 + 16), 8 * v8 + 8);
  if (v9 && (krb5_error_code v10 = v9, *(void *)(a2 + 16) = v9, v11 = malloc(a4 + 1), (v10[v8] = v11) != 0LL))
  {
    size_t v12 = v11;
    memcpy(v11, a3, a4);
    v12[a4] = 0;
    ++*(_DWORD *)(a2 + 8);
  }

  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

krb5_error_code krb5_prompter_posix( krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[])
{
  BOOL v9 = (FILE **)MEMORY[0x1895F89D0];
  if (name)
  {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", name);
    if (!banner) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  if (banner)
  {
LABEL_5:
    fprintf(*v9, "%s\n", banner);
LABEL_6:
    fflush(*v9);
  }

  if (num_prompts < 1) {
    return 0;
  }
  uint64_t v10 = num_prompts;
  p_reply = (int **)&prompts->reply;
  size_t v12 = (FILE **)MEMORY[0x1895F89E0];
  uint64_t v13 = (FILE **)MEMORY[0x1895F89D8];
  while (1)
  {
    unint64_t v14 = (const char *)*((void *)*p_reply + 1);
    if (!*((_DWORD *)p_reply - 2)) {
      break;
    }
LABEL_14:
    p_reply += 4;
    if (!--v10) {
      return 0;
    }
  }

  fputs((const char *)*(p_reply - 2), *v12);
  fflush(*v12);
  if (fgets(*((char **)*p_reply + 1), **p_reply, *v13))
  {
    v14[strcspn(v14, "\n")] = 0;
    goto LABEL_14;
  }

  return 1;
}

uint64_t krb5_prompter_print_only(uint64_t a1, uint64_t a2, const char *a3, const char *a4, int a5)
{
  uint64_t v8 = (FILE **)MEMORY[0x1895F89D0];
  if (a3)
  {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", a3);
    if (!a4) {
      goto LABEL_6;
    }
  }

  else if (!a4)
  {
    goto LABEL_7;
  }

  fprintf(*v8, "%s\n", a4);
LABEL_6:
  fflush(*v8);
LABEL_7:
  if (!a5) {
    return 0LL;
  }
  sub_1882DFCE8(a1, 10, "prompter disabled");
  return 1LL;
}

krb5_error_code krb5_rd_cred( krb5_context a1, krb5_auth_context a2, krb5_data *a3, krb5_creds ***a4, krb5_replay_data *a5)
{
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  uint64_t v52 = 0LL;
  krb5_data_zero(&v47);
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  *a4 = 0LL;
  krb5_error_code v10 = sub_1882FDF50();
  if (v10)
  {
    krb5_error_code addrport = v10;
    krb5_clear_error_message(a1);
    return addrport;
  }

  if (v53 != 5)
  {
    krb5_clear_error_message(a1);
    krb5_error_code addrport = -1765328345;
    goto LABEL_22;
  }

  if (v54 != 22)
  {
    krb5_clear_error_message(a1);
    krb5_error_code addrport = -1765328344;
    goto LABEL_22;
  }

  if (v55[0])
  {
    krb5_error_code addrport = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0LL, &v46);
    if (addrport) {
      goto LABEL_22;
    }
    krb5_error_code addrport = krb5_decrypt_EncryptedData(a1, (uint64_t)v46, 14LL, (uint64_t)v55, &v47);
    krb5_crypto_destroy(a1, (uint64_t)v46);
    if (addrport)
    {
      uint64_t v11 = (const krb5_keyblock *)*((void *)a2 + 6);
      if (!v11) {
        goto LABEL_22;
      }
      krb5_error_code addrport = krb5_crypto_init(a1, v11, 0LL, &v46);
      if (addrport) {
        goto LABEL_22;
      }
      krb5_error_code addrport = krb5_decrypt_EncryptedData(a1, (uint64_t)v46, 14LL, (uint64_t)v55, &v47);
      krb5_crypto_destroy(a1, (uint64_t)v46);
      if (addrport) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v47 = v56;
    uint64_t v48 = v57;
  }

  krb5_error_code addrport = sub_1882FDFB0();
  if (v48 != v57) {
    krb5_data_free(&v47);
  }
  if (addrport)
  {
    krb5_set_error_message(a1, addrport, "Failed to decode encrypte credential part");
    goto LABEL_22;
  }

  if (*((void *)&v51 + 1))
  {
    uint64_t v16 = *((void *)a2 + 2);
    if (v16)
    {
      if (*((_WORD *)a2 + 13))
      {
        krb5_error_code addrport = krb5_make_addrport(a1, v44, v16, *((_WORD *)a2 + 13));
        if (addrport
          || (krb5_error_code addrport = sub_1882EA42C( a1,  (const krb5_address *)v44[0],  *((const krb5_address **)&v51 + 1),  "sender address is wrong in received creds"),  krb5_free_address((uint64_t)a1, (uint64_t)v44[0]),  free(v44[0]),  addrport))
        {
LABEL_22:
          sub_1882FE000();
          sub_1882FDFA0();
          size_t v12 = *a4;
          if (*a4)
          {
            uint64_t v13 = *v12;
            if (*v12)
            {
              uint64_t v14 = 1LL;
              do
              {
                krb5_free_creds(a1, v13);
                size_t v12 = *a4;
                uint64_t v13 = (*a4)[v14++];
              }

              while (v13);
            }

            free(v12);
            *a4 = 0LL;
          }

          return addrport;
        }
      }
    }
  }

  if (v52 && *((void *)a2 + 1))
  {
    if (*((_WORD *)a2 + 12) && v52->magic == 256)
    {
      krb5_error_code addrport = krb5_make_addrport(a1, v44, *((void *)a2 + 1), *((_WORD *)a2 + 12));
      if (!addrport)
      {
        krb5_error_code addrport = sub_1882EA42C(a1, (const krb5_address *)v44[0], v52, "receiver address is wrong in received creds");
        krb5_free_address((uint64_t)a1, (uint64_t)v44[0]);
        free(v44[0]);
        if (!addrport) {
          goto LABEL_41;
        }
      }

      goto LABEL_22;
    }

    krb5_error_code addrport = sub_1882EA42C(a1, *((const krb5_address **)a2 + 1), v52, "receiver address is wrong in received creds");
    if (addrport) {
      goto LABEL_22;
    }
  }

LABEL_41:
  int v17 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    krb5_timeofday(a1, (krb5_timestamp *)v44);
    if (!*((void *)&v50 + 1)
      || !(void)v51
      || krb5_time_abs(**((void **)&v50 + 1), (uint64_t)v44[0]) > *((void *)a1 + 10))
    {
      krb5_clear_error_message(a1);
      krb5_error_code addrport = -1765328347;
      goto LABEL_22;
    }

    int v17 = *(_DWORD *)a2;
  }

  if ((v17 & 0xA) != 0)
  {
    *(void *)&a5->timestamp = 0LL;
    *(void *)&a5->seq = 0LL;
    if (*((void *)&v50 + 1)) {
      *(void *)&a5->timestamp = **((void **)&v50 + 1);
    }
    if ((void)v51) {
      a5->seq = *(_DWORD *)v51;
    }
    if ((void)v50) {
      a5[1].timestamp = *(_DWORD *)v50;
    }
  }

  uint64_t v18 = (krb5_creds **)calloc((v49 + 1), 8uLL);
  *a4 = v18;
  if (!v18)
  {
LABEL_80:
    krb5_error_code addrport = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_22;
  }

  if ((_DWORD)v49)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    unint64_t v21 = 0LL;
    while (1)
    {
      uint64_t v22 = *((void *)&v49 + 1);
      unsigned int v23 = calloc(1uLL, 0x90uLL);
      if (!v23) {
        goto LABEL_80;
      }
      uint64_t v24 = v23;
      size_t v25 = sub_1882FD78C();
      v24[9] = v25;
      uint64_t v26 = malloc(v25);
      v24[10] = v26;
      if (!v26) {
        break;
      }
      krb5_error_code v27 = sub_1882FD76C();
      if (v27)
      {
        krb5_error_code addrport = v27;
        free((void *)v24[10]);
        v24[10] = 0LL;
        goto LABEL_86;
      }

      if (v24[9] != v58) {
        krb5_abortx(a1, "internal error in ASN.1 encoder");
      }
      copy_EncryptionKey();
      uint64_t v28 = v22 + v19;
      unsigned int v29 = *(const char ***)(v22 + v19 + 24);
      if (v29)
      {
        int v30 = *(__int128 **)(v28 + 32);
        if (v30)
        {
          uint64_t v31 = *v29;
          __int128 v32 = *v30;
          uint64_t v45 = *((void *)v30 + 2);
          *(_OWORD *)uint64_t v44 = v32;
          _krb5_principalname2krb5_principal((uint64_t)a1, v24, (uint64_t)v44, v31);
        }
      }

      size_t v33 = *(_DWORD **)(v28 + 40);
      if (v33) {
        *((_DWORD *)v24 + 34) = *v33;
      }
      uint64_t v34 = *(void **)(v22 + v19 + 48);
      if (v34) {
        v24[5] = *v34;
      }
      int v35 = *(void **)(v22 + v19 + 56);
      if (v35) {
        v24[6] = *v35;
      }
      size_t v36 = *(void **)(v22 + v19 + 64);
      if (v36) {
        v24[7] = *v36;
      }
      uint64_t v37 = *(void **)(v22 + v19 + 72);
      if (v37) {
        v24[8] = *v37;
      }
      uint64_t v38 = v22 + v19;
      uint64_t v39 = *(const char ***)(v22 + v19 + 80);
      if (v39)
      {
        int v40 = *(__int128 **)(v38 + 88);
        if (v40)
        {
          uint64_t v41 = *v39;
          __int128 v42 = *v40;
          uint64_t v45 = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v44 = v42;
          _krb5_principalname2krb5_principal((uint64_t)a1, v24 + 1, (uint64_t)v44, v41);
        }
      }

      int v43 = *(krb5_address *const **)(v38 + 96);
      if (v43) {
        krb5_copy_addresses(a1, v43, (krb5_address ***)v24 + 15);
      }
      (*a4)[v21++] = (krb5_creds *)v24;
      v20 += 72LL;
      v19 += 104LL;
      if (v21 >= v49)
      {
        uint64_t v18 = *a4;
        goto LABEL_82;
      }
    }

    krb5_error_code addrport = 12;
LABEL_86:
    free(v24);
    goto LABEL_22;
  }

  unint64_t v21 = 0LL;
LABEL_82:
  v18[v21] = 0LL;
  sub_1882FDFA0();
  sub_1882FE000();
  return 0;
}

uint64_t sub_1882EA42C(_krb5_context *a1, const krb5_address *a2, const krb5_address *a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (krb5_address_compare(a1, a2, a3)) {
    return 0LL;
  }
  uint64_t v8 = 2529638950LL;
  krb5_print_address((uint64_t)a2, __str, 0x40uLL, &v10);
  krb5_print_address((uint64_t)a3, v11, 0x40uLL, &v10);
  krb5_set_error_message(a1, -1765328346, "%s: %s != %s", a4, v11, __str);
  return v8;
}

uint64_t krb5_rd_cred2(_krb5_context *a1, _krb5_auth_context *a2, _krb5_ccache *a3, krb5_data *a4)
{
  uint64_t result = krb5_rd_cred(a1, a2, a4, &v11, 0LL);
  if (!(_DWORD)result)
  {
    char v7 = v11;
    if (v11)
    {
      uint64_t v8 = *v11;
      if (*v11)
      {
        BOOL v9 = v11 + 1;
        do
        {
          krb5_cc_store_cred(a1, a3, v8);
          krb5_free_creds(a1, *(v9 - 1));
          uint64_t v10 = *v9++;
          uint64_t v8 = v10;
        }

        while (v10);
      }
    }

    free(v7);
    return 0LL;
  }

  return result;
}

krb5_error_code krb5_rd_error(krb5_context a1, const krb5_data *a2, krb5_error **a3)
{
  krb5_error_code v5 = sub_1882FE010();
  if (v5) {
    krb5_clear_error_message(a1);
  }
  else {
    *((_DWORD *)a3 + 9) -= 1765328384;
  }
  return v5;
}

double krb5_free_error_contents(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void krb5_free_error(krb5_context a1, krb5_error *a2)
{
  a2[1].uint64_t client = 0LL;
  *(_OWORD *)&a2->e_data.data = 0u;
  *(_OWORD *)&a2[1].cusec = 0u;
  *(_OWORD *)&a2->server = 0u;
  *(_OWORD *)&a2->text.data = 0u;
  *(_OWORD *)&a2->uint64_t magic = 0u;
  *(_OWORD *)&a2->suint64_t time = 0u;
  free(a2);
}

uint64_t krb5_error_from_rd_error(krb5_context a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  if (*(void *)(a2 + 88))
  {
    krb5_set_error_message(a1, v4, "Error from KDC: %s");
  }

  else
  {
    if (a3)
    {
      krb5_unparse_name_fixed(a1, *a3, (uint64_t)v8, 0x100uLL);
      krb5_unparse_name_fixed(a1, a3[1], (uint64_t)v7, 0x100uLL);
    }

    switch(v4)
    {
      case 0x96C73A01:
        krb5_set_error_message(a1, -1765328383, "Client %s%s%s expired");
        break;
      case 0x96C73A02:
        krb5_set_error_message(a1, -1765328382, "Server %s%s%s expired");
        break;
      case 0x96C73A06:
        krb5_set_error_message(a1, -1765328378, "Client %s%s%s unknown");
        break;
      case 0x96C73A07:
        krb5_set_error_message(a1, -1765328377, "Server %s%s%s unknown");
        break;
      default:
        krb5_clear_error_message(a1);
        break;
    }
  }

  return v4;
}

krb5_error_code krb5_rd_priv( krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  if ((*(_BYTE *)a2 & 0xA) == 0)
  {
LABEL_4:
    uint64_t v25 = 0LL;
    memset(v24, 0, sizeof(v24));
    krb5_error_code v9 = sub_1882FDE90();
    if (v9)
    {
      krb5_error_code v10 = v9;
      goto LABEL_6;
    }

    if (LODWORD(v24[0]) != 5)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v10 = -1765328345;
      goto LABEL_29;
    }

    if (DWORD1(v24[0]) != 21)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v10 = -1765328344;
      goto LABEL_29;
    }

    uint64_t v11 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v11)
    {
      uint64_t v11 = (const krb5_keyblock *)*((void *)a2 + 5);
      if (!v11) {
        uint64_t v11 = (const krb5_keyblock *)*((void *)a2 + 4);
      }
    }

    krb5_error_code v10 = krb5_crypto_init(a1, v11, 0LL, &v17);
    if (v10) {
      goto LABEL_29;
    }
    krb5_error_code v10 = krb5_decrypt_EncryptedData(a1, (uint64_t)v17, 13LL, (uint64_t)v24 + 8, v18);
    krb5_crypto_destroy(a1, (uint64_t)v17);
    if (v10) {
      goto LABEL_29;
    }
    krb5_error_code v10 = sub_1882FDEF0();
    krb5_data_free(v18);
    if (v10)
    {
LABEL_6:
      krb5_clear_error_message(a1);
LABEL_29:
      sub_1882FDEE0();
      return v10;
    }

    if (v22 && (size_t v12 = (const krb5_address *)*((void *)a2 + 2)) != 0LL && !krb5_address_compare(a1, v12, v22)
      || v23 && (uint64_t v13 = (const krb5_address *)*((void *)a2 + 1)) != 0LL && !krb5_address_compare(a1, v13, v23))
    {
      krb5_error_code v10 = -1765328346;
      krb5_clear_error_message(a1);
      goto LABEL_48;
    }

    if ((*(_DWORD *)a2 & 1) != 0)
    {
      krb5_timeofday(a1, (krb5_timestamp *)&v16);
      if (!v19 || !v20 || krb5_time_abs(*v19, v16) > *((void *)a1 + 10))
      {
        krb5_clear_error_message(a1);
        krb5_error_code v10 = -1765328347;
        goto LABEL_48;
      }

      if ((*(_DWORD *)a2 & 4) == 0)
      {
LABEL_37:
        krb5_error_code v10 = krb5_data_copy(a4, (const void *)v18[4], v18[3]);
        if (!v10)
        {
          if ((*(_BYTE *)a2 & 0xA) == 0) {
            goto LABEL_47;
          }
          if (v19) {
            *(void *)&a5->timestamp = *v19;
          }
          if (v20) {
            a5->seq = *v20;
          }
          if (v21)
          {
            krb5_error_code v10 = 0;
            a5[1].timestamp = *v21;
          }

          else
          {
LABEL_47:
            krb5_error_code v10 = 0;
          }
        }

        goto LABEL_48;
      }
    }

    else if ((*(_DWORD *)a2 & 4) == 0)
    {
      goto LABEL_37;
    }

    if (v21)
    {
      krb5_timestamp v14 = *v21;
      if (*v21 == *((_DWORD *)a2 + 15))
      {
LABEL_25:
        *((_DWORD *)a2 + 15) = v14 + 1;
        goto LABEL_37;
      }
    }

    else
    {
      krb5_timestamp v14 = *((_DWORD *)a2 + 15);
      if (!v14) {
        goto LABEL_25;
      }
    }

    krb5_clear_error_message(a1);
    krb5_error_code v10 = -1765328342;
LABEL_48:
    sub_1882FDF40();
    goto LABEL_29;
  }

  if (a5)
  {
    *(void *)&a5->timestamp = 0LL;
    *(void *)&a5->seq = 0LL;
    goto LABEL_4;
  }

  krb5_clear_error_message(a1);
  return -1765328169;
}

uint64_t sub_1882EAB5C(_krb5_context *a1, uint64_t a2, const char *a3, __int128 *a4, void *a5)
{
  uint64_t v36 = 0LL;
  uint64_t v37 = a2;
  __int128 v34 = *a4;
  int v35 = &v37;
  size_t v8 = length_KDC_PROXY_MESSAGE();
  v33[0] = v8;
  krb5_error_code v9 = malloc(v8);
  v33[1] = v9;
  if (!v9) {
    return 12LL;
  }
  krb5_error_code v10 = v9;
  uint64_t v11 = encode_KDC_PROXY_MESSAGE();
  if (!(_DWORD)v11)
  {
    if (v8) {
      heim_abort("internal asn1. encoder error:msgdata.length == size", v12, v13, v14, v15, v16, v17, v18, v32);
    }
    uint64_t v45 = 0LL;
    uint64_t v46 = &v45;
    uint64_t v47 = 0x2020000000LL;
    uint64_t v20 = (void *)MEMORY[0x1895C1D94]();
    uint64_t v39 = 0LL;
    int v40 = &v39;
    uint64_t v41 = 0x3052000000LL;
    __int128 v42 = sub_1882EAEF4;
    int v43 = sub_1882EAF04;
    uint64_t v44 = 0LL;
    unint64_t v21 = (void *)[NSString stringWithUTF8String:a3];
    sub_1882DFCE8((uint64_t)a1, 5, "kkdcp request to url: %s", (const char *)[v21 UTF8String]);
    uint64_t v22 = [MEMORY[0x189604030] URLWithString:v21];
    if (v22)
    {
      uint64_t v23 = [objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v10 length:v8];
      uint64_t v24 = (void *)[MEMORY[0x189607948] requestWithURL:v22];
      [v24 setHTTPMethod:@"POST"];
      [v24 setHTTPBody:v23];
      [v24 addValue:@"application/octet-stream" forHTTPHeaderField:@"Content-Type"];
      [v24 addValue:@"Heimdal 1.5.1apple1" forHTTPHeaderField:@"X-Kerberos-Client"];
      _CFURLRequestSetAllowedProtocolTypes();
      uint64_t v25 = dispatch_semaphore_create(0LL);
      uint64_t v26 = (void *)objc_msgSend( MEMORY[0x189607AA0],  "sessionWithConfiguration:",  objc_msgSend(MEMORY[0x189607AA8], "ephemeralSessionConfiguration"));
      v38[0] = MEMORY[0x1895F87A8];
      v38[1] = 3221225472LL;
      int v38[2] = sub_1882EAF10;
      v38[3] = &unk_18A21A2F8;
      v38[6] = &v39;
      v38[7] = a1;
      v38[4] = v25;
      v38[5] = &v45;
      objc_msgSend((id)objc_msgSend(v26, "dataTaskWithRequest:completionHandler:", v24, v38), "resume");
      dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);
      [(id)v40[5] bytes];
      [(id)v40[5] length];
      krb5_error_code v27 = decode_KDC_PROXY_MESSAGE();
      *((_DWORD *)v46 + 6) = v27;
      if (v27)
      {
        krb5_set_error_message(a1, v27, "failed to decode KDC_PROXY_MESSAGE");
        int v28 = 0;
      }

      else
      {
        int v28 = 1;
      }
    }

    else
    {
      int v28 = 0;
      *((_DWORD *)v46 + 6) = 12;
    }

    _Block_object_dispose(&v39, 8);
    objc_autoreleasePoolPop(v20);
    if (v28)
    {
      int v29 = krb5_data_copy(a5, v49, v48);
      *((_DWORD *)v46 + 6) = v29;
      sub_1882FE384();
      krb5_error_code v30 = *((_DWORD *)v46 + 6);
      if (!v30)
      {
        uint64_t v19 = 0LL;
        *((_DWORD *)v46 + 6) = 0;
LABEL_17:
        _Block_object_dispose(&v45, 8);
        krb5_data_free(v33);
        return v19;
      }
    }

    else
    {
      krb5_error_code v30 = *((_DWORD *)v46 + 6);
      if (!v30)
      {
        uint64_t v19 = 0LL;
        goto LABEL_17;
      }
    }

    sub_1882DFD2C((uint64_t *)a1, 10, v30, "kkdcp to url (%s) failed", a3);
    uint64_t v19 = *((unsigned int *)v46 + 6);
    goto LABEL_17;
  }

  uint64_t v19 = v11;
  free(v10);
  return v19;
}

void sub_1882EAEC4(_Unwind_Exception *a1)
{
}

void sub_1882EAEF4(uint64_t a1, uint64_t a2)
{
}

void sub_1882EAF04(uint64_t a1)
{
}

uint64_t sub_1882EAF10(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    sub_1882DFCE8( *(void *)(a1 + 56),  5,  "kkdcp response error: %s",  (const char *)objc_msgSend((id)objc_msgSend(a4, "localizedDescription"), "UTF8String"));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -1980176635;
    sub_1882CC428( *(_krb5_context **)(a1 + 56),  *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  (__CFError *)a4,  "Failure during kkdcp stream",  v7,  v8,  v9,  v10,  v12);
  }

  if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 4gettimeofday(&v64, 0) = [a2 copy];
    sub_1882DFCE8(*(void *)(a1 + 56), 5, "kkdcp response received: %lu", [a2 length]);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

krb5_error_code krb5_rd_rep( krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_ap_rep_enc_part **a4)
{
  krb5_error_code v12 = sub_1882FDD70();
  if (!v12)
  {
    if (v26[0] != 5)
    {
      krb5_error_code v12 = -1765328345;
      krb5_clear_error_message(a1);
      goto LABEL_13;
    }

    if (v26[1] != 15)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v12 = -1765328344;
      goto LABEL_13;
    }

    if (v28 && *((void *)a2 + 13))
    {
      krb5_error_code v12 = sub_1882F1AD4(a1, (uint64_t)a2, (uint64_t)v26, v7, v8, v9, v10, v11);
      if (v12) {
        goto LABEL_13;
      }
    }

    else
    {
      sub_1882F0D7C(a1, (uint64_t)a2);
    }

    krb5_error_code v12 = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0LL, &v24);
    if (v12) {
      goto LABEL_13;
    }
    krb5_error_code v12 = krb5_decrypt_EncryptedData(a1, (uint64_t)v24, 12LL, (uint64_t)&v27, &v25);
    krb5_crypto_destroy(a1, (uint64_t)v24);
    if (v12) {
      goto LABEL_13;
    }
    uint64_t v14 = (krb5_ap_rep_enc_part *)malloc(0x20uLL);
    *a4 = v14;
    if (v14)
    {
      krb5_error_code v15 = sub_1882FDDD0();
      if (v15)
      {
        krb5_error_code v12 = v15;
        krb5_set_error_message(a1, v15, "Failed to decode EncAPRepPart");
        return v12;
      }

      uint64_t v20 = *a4;
      if ((*(_BYTE *)a2 & 1) != 0)
      {
        uint64_t v23 = *((void *)a2 + 8);
        if (*(void *)&v20->magic != *(void *)(v23 + 56) || v20->cusec != *(_DWORD *)(v23 + 48))
        {
          sub_1882FDE20();
          free(v20);
          *a4 = 0LL;
          krb5_clear_error_message(a1);
          krb5_error_code v12 = -1765328338;
          goto LABEL_13;
        }
      }

      unint64_t v21 = *(int **)&v20->seq_number;
      if (v21)
      {
        krb5_auth_con_setremoteseqnumber((uint64_t)a1, (uint64_t)a2, *v21);
        uint64_t v20 = *a4;
      }

      subkey = v20->subkey;
      if (!subkey)
      {
LABEL_32:
        krb5_error_code v12 = 0;
        goto LABEL_13;
      }

      if (!v28 || !*((void *)a2 + 13))
      {
        sub_1882DFCE8((uint64_t)a1, 10, "krb5_rd_rep not using PFS");
LABEL_31:
        krb5_auth_con_setremotesubkey(a1, (krb5_keyblock **)a2, (*a4)->subkey);
        goto LABEL_32;
      }

      krb5_error_code v12 = sub_1882F0DF4(a1, (uint64_t)a2, "server key", subkey, v16, v17, v18, v19);
      if (!v12) {
        goto LABEL_31;
      }
    }

    else
    {
      krb5_error_code v12 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }

void krb5_free_ap_rep_enc_part(krb5_context a1, krb5_ap_rep_enc_part *a2)
{
  if (a2)
  {
    sub_1882FDE20();
    free(a2);
  }

uint64_t krb5_decode_ap_req(_krb5_context *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = sub_1882FDD10();
  if (!(_DWORD)v5)
  {
    uint64_t v5 = 2529638951LL;
    if (*a3 == 5)
    {
      if (a3[1] == 14)
      {
        if (a3[4] == 5) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v5 = 2529638952LL;
      }
    }

    sub_1882FDD60();
    krb5_clear_error_message(a1);
  }

  return v5;
}

uint64_t krb5_decrypt_ticket(_krb5_context *a1, uint64_t a2, const krb5_keyblock *a3, uint64_t a4, char a5)
{
  uint64_t v9 = krb5_crypto_init(a1, a3, 0LL, &v26);
  if (!(_DWORD)v9)
  {
    uint64_t v9 = krb5_decrypt_EncryptedData(a1, (uint64_t)v26, 2LL, a2 + 40, &v28);
    krb5_crypto_destroy(a1, (uint64_t)v26);
    if (!(_DWORD)v9)
    {
      uint64_t v10 = sub_1882FD7C0();
      if ((_DWORD)v10)
      {
        uint64_t v9 = v10;
        krb5_set_error_message(a1, v10, "Failed to decode encrypted ticket part");
        krb5_data_free(&v28);
        return v9;
      }

      krb5_data_free(&v28);
      uint64_t v11 = *((void *)&v22 + 1);
      krb5_timeofday(a1, v27);
      if ((void)v23) {
        uint64_t v11 = *(void *)v23;
      }
      uint64_t v12 = *((void *)a1 + 10);
      if (v11 - *(void *)v27 > v12 || (a5 & 1) == 0 && (v17 & 0x80) != 0)
      {
        sub_1882FD7E0();
        krb5_clear_error_message(a1);
        return 2529638945LL;
      }

      if (*(void *)v27 - *((void *)&v23 + 1) > v12)
      {
        sub_1882FD7E0();
        krb5_clear_error_message(a1);
        return 2529638944LL;
      }

      if ((v17 & 0x1000) != 0) {
        goto LABEL_26;
      }
      if ((_DWORD)v21 == 1)
      {
        if (!*((void *)&v21 + 1)) {
          goto LABEL_26;
        }
        uint64_t v9 = krb5_domain_x500_decode( a1,  *((uint64_t *)&v21 + 1),  (char *)v22,  &v28,  &v26,  (const char *)v19,  *(const char **)(a2 + 8));
        if (!(_DWORD)v9)
        {
          uint64_t v9 = krb5_check_transited(a1, v19, *(void *)(a2 + 8), (uint64_t)v28, v26, 0LL, v14, v15);
          if ((_DWORD)v26)
          {
            unint64_t v16 = 0LL;
            do
              free(v28[v16++]);
            while (v16 < v26);
          }

          free(v28);
          if (!(_DWORD)v9) {
            goto LABEL_26;
          }
        }
      }

      else
      {
        uint64_t v9 = 2529638929LL;
        if (!(_DWORD)v21 && !*((void *)&v21 + 1))
        {
LABEL_26:
          if (a4)
          {
            uint64_t v9 = 0LL;
            *(void *)(a4 + 12_Block_object_dispose((const void *)(v1 - 128), 8) = v25;
            *(_OWORD *)(a4 + 96) = v23;
            *(_OWORD *)(a4 + 112) = v24;
            *(_OWORD *)(a4 + 32) = v19;
            *(_OWORD *)(a4 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = v20;
            *(_OWORD *)(a4 + 64) = v21;
            *(_OWORD *)(a4 + 80) = v22;
            *(_OWORD *)a4 = v17;
            *(_OWORD *)(a4 + 16) = v18;
          }

          else
          {
            sub_1882FD7E0();
            return 0LL;
          }

          return v9;
        }
      }

      sub_1882FD7E0();
    }
  }

  return v9;
}

uint64_t krb5_verify_authenticator_checksum( _krb5_context *a1, _krb5_auth_context *a2, const void *a3, size_t a4)
{
  uint64_t v8 = krb5_auth_con_getauthenticator(a1, a2, (krb5_authenticator **)&v13);
  if (!(_DWORD)v8)
  {
    if (*(void *)(*(void *)&v13.magic + 40LL))
    {
      uint64_t v10 = krb5_auth_con_getkey(a1, a2, (krb5_keyblock **)&v13.client);
      if ((_DWORD)v10)
      {
        uint64_t v8 = v10;
        krb5_free_authenticator(a1, &v13);
      }

      else
      {
        uint64_t v8 = krb5_crypto_init(a1, (const krb5_keyblock *)v13.client, 0LL, &v12);
        if (!(_DWORD)v8)
        {
          uint64_t v8 = krb5_verify_checksum( a1,  (krb5_cksumtype)v12,  (const krb5_checksum *)0xA,  a3,  a4,  *(krb5_const_pointer *)(*(void *)&v13.magic + 40LL),  v11);
          krb5_crypto_destroy(a1, (uint64_t)v12);
        }

        krb5_free_authenticator(a1, &v13);
        krb5_free_keyblock(a1, (krb5_keyblock *)v13.client);
      }
    }

    else
    {
      krb5_free_authenticator(a1, &v13);
      return 4294967279LL;
    }
  }

  return v8;
}

uint64_t krb5_verify_ap_req( _krb5_context *a1, krb5_auth_context *a2, uint64_t a3, int a4, const krb5_keyblock *a5, char a6, int *a7, void *a8)
{
  return krb5_verify_ap_req2(a1, a2, a3, a4, a5, a6, a7, a8, 0xBu);
}

uint64_t krb5_verify_ap_req2( krb5_context a1, krb5_auth_context *a2, uint64_t a3, int a4, const krb5_keyblock *a5, char a6, int *a7, void *a8, unsigned int a9)
{
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  if (a8) {
    *a8 = 0LL;
  }
  if (a2 && *a2)
  {
    krb5_auth_context v42 = *a2;
  }

  else
  {
    uint64_t v16 = krb5_auth_con_init(a1, &v42);
    if ((_DWORD)v16) {
      return v16;
    }
  }

  __int128 v17 = (char *)calloc(1uLL, 0x98uLL);
  if (!v17)
  {
    krb5_clear_error_message(a1);
    sub_1882FE120();
    uint64_t v16 = 12LL;
    if (!a2)
    {
LABEL_25:
      krb5_auth_con_free(a1, v42);
      return v16;
    }

    goto LABEL_24;
  }

  __int128 v18 = v17;
  if ((*(_BYTE *)(a3 + 8) & 2) != 0 && (__int128 v19 = (const krb5_keyblock *)*((void *)v42 + 4)) != 0LL)
  {
    uint64_t v16 = krb5_decrypt_ticket(a1, a3 + 16, v19, (uint64_t)v17, a6);
    krb5_free_keyblock(a1, *((krb5_keyblock **)v42 + 4));
    *((void *)v42 + 4) = 0LL;
    if ((_DWORD)v16) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v16 = krb5_decrypt_ticket(a1, a3 + 16, a5, (uint64_t)v17, a6);
    if ((_DWORD)v16) {
      goto LABEL_21;
    }
  }

  __int128 v20 = *(const char **)(a3 + 24);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 32);
  uint64_t v39 = *(void *)(a3 + 48);
  uint64_t v16 = _krb5_principalname2krb5_principal((uint64_t)a1, (void *)v18 + 18, (uint64_t)v38, v20);
  if (!(_DWORD)v16)
  {
    __int128 v21 = (const char *)*((void *)v18 + 4);
    *(_OWORD *)uint64_t v38 = *(_OWORD *)(v18 + 40);
    uint64_t v39 = *((void *)v18 + 7);
    uint64_t v16 = _krb5_principalname2krb5_principal((uint64_t)a1, (void *)v18 + 17, (uint64_t)v38, v21);
    if (!(_DWORD)v16)
    {
      uint64_t v16 = krb5_crypto_init(a1, (const krb5_keyblock *)(v18 + 8), 0LL, (krb5_keyblock ***)&v43);
      if (!(_DWORD)v16)
      {
        uint64_t v22 = krb5_decrypt_EncryptedData(a1, (uint64_t)v43, a9, a3 + 88, v38);
        uint64_t v16 = v22;
        if (a9 == 7 && (_DWORD)v22) {
          uint64_t v16 = krb5_decrypt_EncryptedData(a1, (uint64_t)v43, 11LL, a3 + 88, v38);
        }
        krb5_crypto_destroy(a1, (uint64_t)v43);
        if (!(_DWORD)v16)
        {
          uint64_t v16 = sub_1882FD878();
          krb5_data_free(v38);
          if (!(_DWORD)v16)
          {
            uint64_t v24 = *((void *)v42 + 8);
            uint64_t v25 = *(const char **)(v24 + 8);
            *(_OWORD *)uint64_t v38 = *(_OWORD *)(v24 + 16);
            uint64_t v39 = *(void *)(v24 + 32);
            _krb5_principalname2krb5_principal((uint64_t)a1, &v44, (uint64_t)v38, v25);
            uint64_t v26 = (const char *)*((void *)v18 + 4);
            *(_OWORD *)uint64_t v38 = *(_OWORD *)(v18 + 40);
            uint64_t v39 = *((void *)v18 + 7);
            _krb5_principalname2krb5_principal((uint64_t)a1, &v43, (uint64_t)v38, v26);
            krb5_BOOLean v27 = krb5_principal_compare(a1, v44, v43);
            krb5_free_principal(a1, v44);
            krb5_free_principal(a1, v43);
            if (!v27)
            {
              uint64_t v16 = 2529638948LL;
              krb5_clear_error_message(a1);
              goto LABEL_21;
            }

            uint64_t v28 = (krb5_address *const *)*((void *)v18 + 15);
            if (!v28 || (int v29 = (const krb5_address *)*((void *)v42 + 2)) == 0LL || krb5_address_search(a1, v29, v28))
            {
              krb5_timeofday(a1, v38);
              if (krb5_time_abs(*(void *)(*((void *)v42 + 8) + 56LL), *(uint64_t *)v38) > *((void *)a1 + 10))
              {
                krb5_clear_error_message(a1);
                uint64_t v16 = 2529638949LL;
                goto LABEL_21;
              }

              krb5_auth_context v30 = v42;
              if (*((void *)v42 + 10))
              {
                uint64_t v16 = krb5_rc_store((uint64_t)a1, *((void *)v42 + 10));
                if ((_DWORD)v16) {
                  goto LABEL_21;
                }
                krb5_auth_context v30 = v42;
              }

              uint64_t v31 = *((void *)v30 + 8);
              char v32 = *(int **)(v31 + 72);
              if (v32)
              {
                krb5_auth_con_setremoteseqnumber((uint64_t)a1, (uint64_t)v30, *v32);
                krb5_auth_context v30 = v42;
                uint64_t v31 = *((void *)v42 + 8);
              }

              size_t v33 = *(krb5_keyblock **)(v31 + 64);
              if (v33)
              {
                uint64_t v16 = krb5_auth_con_setremotesubkey(a1, (krb5_keyblock **)v30, v33);
                if ((_DWORD)v16) {
                  goto LABEL_21;
                }
                krb5_auth_context v30 = v42;
              }

              uint64_t v16 = sub_1882EBB8C(a1, (uint64_t)v30);
              if (!(_DWORD)v16)
              {
                *((_DWORD *)v42 + 22) = 0;
                if (v41 && (_DWORD)v40)
                {
                  uint64_t v34 = 0LL;
                  while (krb5_enctype_valid(a1, (char *)*(unsigned int *)(v41 + 4 * v34)))
                  {
                  }

                  int v35 = *(_DWORD *)(v41 + 4 * v34);
                  *((_DWORD *)v42 + 22) = v35;
                  sub_1882DFCE8((uint64_t)a1, 10, "ap_req2: upgrading to enctype: %d", v35);
                }

uint64_t sub_1882EBB8C(_krb5_context *a1, uint64_t a2)
{
  uint64_t v3 = sub_1882FE0D0();
  krb5_data_free(&v5);
  if ((_DWORD)v3) {
    krb5_clear_error_message(a1);
  }
  return v3;
}

uint64_t krb5_rd_req_in_ctx_alloc(_krb5_context *a1, void *a2)
{
  uint64_t v4 = calloc(1uLL, 0x20uLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v5 = 0LL;
    v4[4] = (*((_DWORD *)a1 + 90) >> 1) & 1;
  }

  else
  {
    uint64_t v5 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v5;
}

uint64_t krb5_rd_req_in_set_keytab(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = a3;
  return 0LL;
}

uint64_t krb5_rd_req_in_set_pac_check(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 16) = a3;
  return 0LL;
}

uint64_t krb5_rd_req_in_set_as_reply_key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 24) = a3;
  return 0LL;
}

uint64_t krb5_rd_req_in_set_keyblock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 128), 8) = a3;
  return 0LL;
}

uint64_t krb5_rd_req_out_get_ap_req_options(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 12);
  return 0LL;
}

uint64_t krb5_rd_req_out_get_ticket(_krb5_context *a1, uint64_t a2, krb5_ticket **a3)
{
  return krb5_copy_ticket(a1, *(const krb5_ticket **)(a2 + 16), a3);
}

uint64_t krb5_rd_req_out_get_keyblock(_krb5_context *a1, const krb5_keyblock **a2, krb5_keyblock **a3)
{
  return krb5_copy_keyblock(a1, *a2, a3);
}

uint64_t krb5_rd_req_out_get_flags(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

CFTypeRef krb5_rd_req_out_copy_pac(uint64_t a1, uint64_t a2)
{
  return heim_retain(*(CFTypeRef *)(a2 + 32));
}

uint64_t krb5_rd_req_out_get_server(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 24), a3);
}

void krb5_rd_req_in_ctx_free(int a1, void *a2)
{
}

void krb5_rd_req_out_ctx_free(krb5_context a1, krb5_keyblock **a2)
{
  uint64_t v4 = (krb5_ticket *)a2[2];
  if (v4) {
    krb5_free_ticket(a1, v4);
  }
  if (*a2) {
    krb5_free_keyblock(a1, *a2);
  }
  uint64_t v5 = (krb5_principal_data *)a2[3];
  if (v5) {
    krb5_free_principal(a1, v5);
  }
  uint64_t v6 = a2[4];
  if (v6) {
    krb5_pac_free((uint64_t)a1, v6);
  }
  free(a2);
}

krb5_error_code krb5_rd_req( krb5_context a1, krb5_auth_context *a2, const krb5_data *a3, krb5_const_principal a4, krb5_keytab a5, krb5_flags *a6, krb5_ticket **a7)
{
  krb5_error_code v14 = krb5_rd_req_in_ctx_alloc(a1, &v19);
  if (!v14)
  {
    uint64_t v15 = v19;
    *__int128 v19 = a5;
    krb5_error_code v14 = krb5_rd_req_ctx(a1, a2, (uint64_t)a3, a4, (uint64_t)v15, &v18);
    free(v15);
    if (!v14)
    {
      uint64_t v16 = v18;
      if (a6) {
        *a6 = *(_DWORD *)(v18 + 12);
      }
      if (a7) {
        krb5_error_code v14 = krb5_copy_ticket(a1, *(const krb5_ticket **)(v16 + 16), a7);
      }
      else {
        krb5_error_code v14 = 0;
      }
      krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v16);
    }
  }

  return v14;
}

uint64_t krb5_rd_req_ctx( _krb5_context *a1, krb5_auth_context *a2, uint64_t a3, const krb5_principal_data *a4, uint64_t a5, void *a6)
{
  krb5_principal v34 = 0LL;
  krb5_keytab keytab = 0LL;
  *a6 = 0LL;
  uint64_t v12 = (_DWORD **)calloc(1uLL, 0x28uLL);
  if (!v12)
  {
    uint64_t v14 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v14;
  }

  krb5_authenticator v13 = v12;
  if (!*a2)
  {
    uint64_t v14 = krb5_auth_con_init(a1, a2);
    if ((_DWORD)v14) {
      goto LABEL_14;
    }
  }

  uint64_t v14 = krb5_decode_ap_req(a1, a3, &v36);
  if ((_DWORD)v14) {
    goto LABEL_14;
  }
  *(_OWORD *)&entry.uint64_t magic = v39;
  *(void *)&entry.timestamp = v40;
  uint64_t v14 = _krb5_principalname2krb5_principal((uint64_t)a1, v13 + 3, (uint64_t)&entry, v38);
  if ((_DWORD)v14) {
    goto LABEL_14;
  }
  if ((v37 & 2) != 0 && !*((void *)*a2 + 4))
  {
    uint64_t v14 = 2529638957LL;
    krb5_set_error_message(a1, -1765328339, "krb5_rd_req: user to user auth without session key given");
    goto LABEL_14;
  }

  if (a5)
  {
    uint64_t v15 = *(_krb5_kt **)a5;
    uint64_t v16 = (const krb5_keyblock *)*((void *)*a2 + 4);
    if (!v16)
    {
      uint64_t v16 = *(const krb5_keyblock **)(a5 + 8);
      if (!v16)
      {
        if (v15) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }

LABEL_38:
  krb5_kt_default(a1, &keytab);
  uint64_t v15 = keytab;
  if (!keytab) {
    goto LABEL_46;
  }
LABEL_39:
  if (!a4)
  {
    *(_OWORD *)&entry.uint64_t magic = v39;
    *(void *)&entry.timestamp = v40;
    uint64_t v14 = _krb5_principalname2krb5_principal((uint64_t)a1, &v34, (uint64_t)&entry, v38);
    if ((_DWORD)v14) {
      goto LABEL_14;
    }
    a4 = v34;
  }

  uint64_t v24 = sub_1882EC418(a1, (uint64_t)&v36, a4, v15, (krb5_keyblock **)v13);
  if (!(_DWORD)v24)
  {
LABEL_23:
    if (*v13)
    {
      uint64_t v14 = krb5_verify_ap_req2( a1,  a2,  (uint64_t)&v36,  v18,  (const krb5_keyblock *)*v13,  0,  (int *)v13 + 3,  v13 + 2,  0xBu);
      if (!(_DWORD)v14) {
        goto LABEL_25;
      }
      goto LABEL_14;
    }

    goto LABEL_44;
  }

  if (!v34)
  {
    uint64_t v14 = v24;
    if ((*((_BYTE *)a1 + 360) & 0x10) == 0) {
      goto LABEL_14;
    }
  }

  const krb5_address *v13 = 0LL;
LABEL_44:
  memset(cursor, 0, sizeof(cursor));
  if (v42) {
    int v25 = *v42;
  }
  else {
    int v25 = 0;
  }
  uint64_t v14 = krb5_kt_start_seq_get(a1, v15, cursor);
  if ((_DWORD)v14) {
    goto LABEL_14;
  }
  uint64_t v14 = krb5_kt_next_entry(a1, v15, &entry, cursor);
  if ((_DWORD)v14)
  {
LABEL_56:
    sub_1882D98D4(a1, v14, (uint64_t)v15, (uint64_t)v13[3], (char *)v41, v25);
LABEL_57:
    krb5_kt_end_seq_get(a1, v15, cursor);
    goto LABEL_14;
  }

  krb5_auth_context v30 = v13 + 2;
  while (1)
  {
    if (entry.timestamp != v41) {
      goto LABEL_54;
    }
    int v27 = krb5_verify_ap_req2( a1,  a2,  (uint64_t)&v36,  v26,  (const krb5_keyblock *)&entry.timestamp,  0,  (int *)v13 + 3,  v30,  0xBu);
    if (!v27) {
      break;
    }
    if (v27 == -1765328221)
    {
      krb5_kt_end_seq_get(a1, v15, cursor);
      krb5_kt_free_entry(a1, (uint64_t)&entry);
      uint64_t v14 = 2529639075LL;
      goto LABEL_14;
    }

LABEL_54:
    krb5_kt_free_entry(a1, (uint64_t)&entry);
    uint64_t v28 = krb5_kt_next_entry(a1, v15, &entry, cursor);
    if ((_DWORD)v28)
    {
      uint64_t v14 = v28;
      goto LABEL_56;
    }
  }

  uint64_t v29 = krb5_copy_keyblock(a1, (const krb5_keyblock *)&entry.timestamp, (krb5_keyblock **)v13);
  if ((_DWORD)v29 || (uint64_t v29 = krb5_copy_principal(a1, *(krb5_const_principal *)&entry.magic, &v31), (_DWORD)v29))
  {
    uint64_t v14 = v29;
    krb5_kt_free_entry(a1, (uint64_t)&entry);
    goto LABEL_57;
  }

  krb5_free_principal(a1, *(krb5_principal *)(*v30 + 144LL));
  *(void *)(*v30 + 144LL) = v31;
  krb5_kt_free_entry(a1, (uint64_t)&entry);
  krb5_kt_end_seq_get(a1, v15, cursor);
LABEL_25:
  uint64_t v14 = sub_1882F1230(a1, (uint64_t)*a2);
  if ((_DWORD)v14) {
    goto LABEL_14;
  }
  sub_1882DFCE8((uint64_t)a1, 15, "krb5_rd_req: used enctype %d from keytab", **v13);
  if (a5 && !*(_DWORD *)(a5 + 16)
    || krb5_ticket_get_authorization_data_type(a1, (uint64_t)v13[2], 128LL, &entry))
  {
    goto LABEL_46;
  }

  uint64_t v14 = krb5_pac_parse(a1, entry.principal, *(size_t *)&entry.magic, cursor, v19, v20, v21, v22);
  krb5_data_free(&entry);
  if ((_DWORD)v14)
  {
LABEL_14:
    krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v13);
    goto LABEL_15;
  }

  if (!krb5_pac_verify( a1,  (uint64_t)cursor[0],  *((void *)v13[2] + 11),  *((void *)v13[2] + 17),  (const krb5_keyblock *)*v13,  0LL))
  {
    *((_DWORD *)v13 + 2) |= 1u;
    v13[4] = heim_retain(cursor[0]);
  }

  if (((_BYTE)v13[1] & 1) != 0)
  {
    __int128 v23 = *(const krb5_keyblock **)(a5 + 24);
    if (v23)
    {
    }
  }

  krb5_pac_free((uint64_t)a1, cursor[0]);
LABEL_46:
  uint64_t v14 = 0LL;
  *a6 = v13;
LABEL_15:
  sub_1882FDD60();
  if (v34) {
    krb5_free_principal(a1, v34);
  }
  if (keytab) {
    krb5_kt_close(a1, keytab);
  }
  return v14;
}

    CFRelease(privateKeyRef);
LABEL_55:
    sub_188300BFC(v86, (uint64_t)sub_18830C4E8, (uint64_t)certificateRef);
    if (result) {
      CFRelease(result);
    }
    uint64_t inited = 0LL;
    if (a3) {
      *a3 = v86;
    }
    return inited;
  }

  if (result) {
    CFRelease(result);
  }
  CFRelease(certificateRef);
  return 12LL;
}

uint64_t krb5_rd_req_with_keyblock( _krb5_context *a1, krb5_auth_context *a2, uint64_t a3, const krb5_principal_data *a4, uint64_t a5, _DWORD *a6, krb5_ticket **a7)
{
  uint64_t v14 = krb5_rd_req_in_ctx_alloc(a1, &v19);
  if (!(_DWORD)v14)
  {
    uint64_t v15 = v19;
    v19[1] = a5;
    uint64_t v14 = krb5_rd_req_ctx(a1, a2, a3, a4, (uint64_t)v15, &v18);
    free(v15);
    if (!(_DWORD)v14)
    {
      uint64_t v16 = v18;
      if (a6) {
        *a6 = *(_DWORD *)(v18 + 12);
      }
      if (a7) {
        uint64_t v14 = krb5_copy_ticket(a1, *(const krb5_ticket **)(v16 + 16), a7);
      }
      else {
        uint64_t v14 = 0LL;
      }
      krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v16);
    }
  }

  return v14;
}

uint64_t sub_1882EC418( krb5_context context, uint64_t a2, const krb5_principal_data *a3, krb5_keytab keytab, krb5_keyblock **a5)
{
  uint64_t v8 = *(krb5_kvno **)(a2 + 64);
  if (v8) {
    krb5_kvno v9 = *v8;
  }
  else {
    krb5_kvno v9 = 0;
  }
  uint64_t v10 = krb5_kt_get_entry(context, keytab, a3, v9, *(_DWORD *)(a2 + 56), &entry);
  if (!(_DWORD)v10)
  {
    uint64_t v10 = krb5_copy_keyblock(context, (const krb5_keyblock *)&entry.timestamp, a5);
    krb5_kt_free_entry(context, (uint64_t)&entry);
  }

  return v10;
}

krb5_error_code krb5_rd_safe( krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  if ((*(_BYTE *)a2 & 0xA) != 0)
  {
    if (!a5)
    {
      krb5_error_code v9 = -1765328169;
      krb5_set_error_message(a1, -1765328169, "rd_safe: need outdata to return data");
      return v9;
    }

    *(void *)&a5->timestamp = 0LL;
    *(void *)&a5->seq = 0LL;
  }

  krb5_error_code v9 = sub_1882FDE30();
  if (!v9)
  {
    if (v17[0] == 5)
    {
      if (v17[1] == 20)
      {
        if (krb5_checksum_is_keyed((uint64_t)a1, v25)
          && krb5_checksum_is_collision_proof((uint64_t)a1, v25))
        {
          if (v23 && (uint64_t v10 = (const krb5_address *)*((void *)a2 + 2)) != 0LL && !krb5_address_compare(a1, v10, v23)
            || v24 && (size_t v11 = (const krb5_address *)*((void *)a2 + 1)) != 0LL && !krb5_address_compare(a1, v11, v24))
          {
            krb5_error_code v9 = -1765328346;
            krb5_clear_error_message(a1);
            goto LABEL_24;
          }

          if ((*(_DWORD *)a2 & 1) != 0)
          {
            krb5_timeofday(a1, v16);
            if (!v20 || !v21 || krb5_time_abs(*v20, *(uint64_t *)v16) > *((void *)a1 + 10))
            {
              krb5_clear_error_message(a1);
              krb5_error_code v9 = -1765328347;
              goto LABEL_24;
            }

            if ((*(_DWORD *)a2 & 4) == 0)
            {
LABEL_32:
              krb5_error_code v9 = sub_1882EC770(a1, a2, (uint64_t)v17);
              if (!v9)
              {
                size_t v14 = __size;
                *(void *)&a4->uint64_t magic = __size;
                uint64_t v15 = (char *)malloc(v14);
                a4->data = v15;
                if (!v14 || v15)
                {
                  memcpy(v15, __src, v14);
                  if ((*(_BYTE *)a2 & 0xA) == 0) {
                    goto LABEL_45;
                  }
                  if (v20) {
                    *(void *)&a5->timestamp = *v20;
                  }
                  if (v21) {
                    a5->seq = *v21;
                  }
                  if (v22)
                  {
                    krb5_error_code v9 = 0;
                    a5[1].timestamp = *v22;
                  }

                  else
                  {
LABEL_45:
                    krb5_error_code v9 = 0;
                  }
                }

                else
                {
                  krb5_error_code v9 = 12;
                  krb5_set_error_message(a1, 12, "malloc: out of memory");
                  krb5_data_zero(a4);
                }
              }

              goto LABEL_24;
            }
          }

          else if ((*(_DWORD *)a2 & 4) == 0)
          {
            goto LABEL_32;
          }

          if (v22)
          {
            krb5_timestamp v12 = *v22;
            if (*v22 == *((_DWORD *)a2 + 15))
            {
LABEL_19:
              *((_DWORD *)a2 + 15) = v12 + 1;
              goto LABEL_32;
            }
          }

          else
          {
            krb5_timestamp v12 = *((_DWORD *)a2 + 15);
            if (!v12) {
              goto LABEL_19;
            }
          }

          krb5_clear_error_message(a1);
          krb5_error_code v9 = -1765328342;
        }

        else
        {
          krb5_clear_error_message(a1);
          krb5_error_code v9 = -1765328334;
        }
      }

      else
      {
        krb5_clear_error_message(a1);
        krb5_error_code v9 = -1765328344;
      }
    }

    else
    {
      krb5_clear_error_message(a1);
      krb5_error_code v9 = -1765328345;
    }

uint64_t sub_1882EC770(_krb5_context *a1, void *a2, uint64_t a3)
{
  __int128 seed = *(_OWORD *)(a3 + 64);
  uint64_t v17 = *(void *)(a3 + 80);
  in_CFIndex length = 0LL;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0LL;
  *(void *)(a3 + 80) = 0LL;
  size_t v6 = sub_1882FDE70();
  uint64_t v7 = (char *)malloc(v6);
  if (!v7) {
    return 12LL;
  }
  uint64_t v8 = v7;
  krb5_error_code v9 = &v7[v6];
  uint64_t v10 = sub_1882FDE50();
  if (!(_DWORD)v10)
  {
    if (v6 != in_length) {
      krb5_abortx(a1, "internal error in ASN.1 encoder");
    }
    size_t v11 = (const krb5_keyblock *)a2[6];
    if (!v11)
    {
      size_t v11 = (const krb5_keyblock *)a2[5];
      if (!v11) {
        size_t v11 = (const krb5_keyblock *)a2[4];
      }
    }

    uint64_t v12 = a3 + 64;
    uint64_t v10 = krb5_crypto_init(a1, v11, 0LL, (krb5_keyblock ***)ctype);
    if (!(_DWORD)v10)
    {
      uint64_t v10 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xF, &v9[-in_length], in_length, &seed, v13);
      krb5_crypto_destroy(a1, *(uint64_t *)ctype);
    }

    *(_OWORD *)uint64_t v12 = seed;
    *(void *)(v12 + 16) = v17;
  }

  free(v8);
  return v10;
}

uint64_t krb5_read_message(_krb5_context *a1, int *a2, uint64_t a3)
{
  ssize_t v6 = krb5_net_read((int)a1, a2, (char *)&v11, 4uLL);
  if (v6 == -1)
  {
    uint64_t v7 = *__error();
    goto LABEL_12;
  }

  if (v6 > 3)
  {
    if (v11 >> 4)
    {
      uint64_t v7 = 34LL;
      krb5_set_error_message(a1, 34, "packet to large");
      return v7;
    }

    size_t v8 = _byteswap_ulong(v11);
    uint64_t v9 = krb5_data_alloc((size_t *)a3, v8);
    if ((_DWORD)v9)
    {
      uint64_t v7 = v9;
    }

    else
    {
      uint64_t v7 = *__error();
      krb5_data_free((void *)a3);
    }

uint64_t krb5_read_priv_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v9);
  if (!(_DWORD)message)
  {
    uint64_t message = krb5_rd_priv(a1, a2, &v9, a4, 0LL);
    krb5_data_free(&v9);
  }

  return message;
}

uint64_t krb5_read_safe_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v9);
  if (!(_DWORD)message)
  {
    uint64_t message = krb5_rd_safe(a1, a2, &v9, a4, 0LL);
    krb5_data_free(&v9);
  }

  return message;
}

krb5_error_code krb5_recvauth( krb5_context a1, krb5_auth_context *a2, krb5_pointer a3, char *a4, krb5_principal a5, krb5_int32 a6, krb5_keytab a7, krb5_ticket **a8)
{
  return krb5_recvauth_match_version( a1,  a2,  (int *)a3,  (unsigned int (*)(uint64_t, char *))sub_1882ECF60,  (uint64_t)a4,  a5,  a6,  a7,  a8);
}

uint64_t krb5_recvauth_match_version( krb5_context a1, krb5_auth_context *a2, int *a3, unsigned int (*a4)(uint64_t, char *), uint64_t a5, const krb5_principal_data *a6, char a7, _krb5_kt *a8, krb5_ticket **a9)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t v17 = *a2;
  if (!v17)
  {
    uint64_t v18 = krb5_auth_con_init(a1, a2);
    if ((_DWORD)v18) {
      return v18;
    }
    uint64_t v17 = *a2;
  }

  uint64_t v18 = krb5_auth_con_setaddrs_from_fd(a1, v17, a3);
  if (!(_DWORD)v18)
  {
    if ((a7 & 1) == 0)
    {
      ssize_t v19 = krb5_net_read((int)a1, a3, (char *)&v42, 4uLL);
      if (v19 < 0) {
        goto LABEL_16;
      }
      if (!v19)
      {
        uint64_t v18 = 2529639116LL;
        krb5_set_error_message(a1, -1765328180, "Failed to receive sendauth data");
        return v18;
      }

      unsigned int v20 = v42;
      unsigned int v42 = bswap32(v42);
      if (v20 != 318767104
        || (ssize_t v21 = krb5_net_read((int)a1, a3, __s2, 0x13uLL), v21 != v42)
        || strncmp("KRB5_SENDAUTH_V1.0", __s2, v21))
      {
        uint64_t v18 = 2529639116LL;
        char __buf = 1;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        krb5_clear_error_message(a1);
        return v18;
      }
    }

    ssize_t v22 = krb5_net_read((int)a1, a3, (char *)&v42, 4uLL);
    if ((v22 & 0x8000000000000000LL) == 0)
    {
      if (!v22)
      {
        krb5_clear_error_message(a1);
        return 2529639117LL;
      }

      size_t v23 = bswap32(v42);
      unsigned int v42 = v23;
      if (v23 >> 28)
      {
        uint64_t v18 = 34LL;
        krb5_set_error_message(a1, 34, "packet to large");
        return v18;
      }

      uint64_t v28 = (char *)malloc(v23);
      if (!v28)
      {
        char __buf = 2;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        int v25 = "malloc: out of memory";
        uint64_t v18 = 12LL;
        int v26 = a1;
        krb5_error_code v27 = 12;
        goto LABEL_28;
      }

      uint64_t v29 = v28;
      ssize_t v30 = krb5_net_read((int)a1, a3, v28, v23);
      if (v30 != v42 || !a4(a5, v29))
      {
        char __buf = 2;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        uint64_t v18 = 2529639117LL;
        krb5_set_error_message(a1, -1765328179, "wrong sendauth version (%s)", v29);
        free(v29);
        return v18;
      }

      free(v29);
      char __buf = 0;
      if (krb5_net_write((int)a1, a3, &__buf, 1uLL) != 1)
      {
        size_t v33 = __error();
        uint64_t v18 = *v33;
        char v37 = strerror(*v33);
        int v25 = "write: %s";
        goto LABEL_17;
      }

      krb5_data_zero(&v40);
      uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v40);
      if ((_DWORD)message)
      {
        uint64_t v18 = message;
        int v25 = "krb5_recvauth: client closed connection";
        goto LABEL_17;
      }

      uint64_t v18 = krb5_rd_req(a1, a2, &v40, a6, a8, &v39, a9);
      krb5_data_free(&v40);
      if ((_DWORD)v18)
      {
        if (krb5_mk_error(a1, (const krb5_error *)v18, 0LL)) {
          return v18;
        }
        krb5_write_message(a1, a3, v38);
        krb5_principal v34 = (krb5_data *)v38;
LABEL_34:
        krb5_data_free(v34);
        return v18;
      }

      unsigned int v42 = 0;
      if (krb5_net_write((int)a1, a3, (char *)&v42, 4uLL) == 4)
      {
        if ((v39 & 2) == 0) {
          return 0LL;
        }
        uint64_t v36 = krb5_mk_rep(a1, *a2, &v40);
        if ((_DWORD)v36)
        {
          uint64_t v18 = v36;
        }

        else
        {
          uint64_t v18 = krb5_write_message(a1, a3, (char **)&v40);
          if (!(_DWORD)v18)
          {
            krb5_principal v34 = &v40;
            goto LABEL_34;
          }

          krb5_set_error_message(a1, v18, "krb5_recvauth: server closed connection");
        }
      }

      else
      {
        int v35 = __error();
        uint64_t v18 = *v35;
        strerror(*v35);
        krb5_set_error_message(a1, v18, "write: %s");
      }

      krb5_free_ticket(a1, *a9);
      *a9 = 0LL;
      return v18;
    }

BOOL sub_1882ECF60(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t krb5_rc_resolve( _krb5_context *a1, void *a2, char *__s1, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[1]) {
    krb5_abort(a1, 22, "called krb5_rc_resolve more then once", a4, a5, a6, a7, a8, v12);
  }
  a2[1] = strdup(__s1);
  return (*(uint64_t (**)(_krb5_context *, char *, void *))(*a2 + 16LL))(a1, __s1, a2);
}

uint64_t krb5_rc_resolve_type(_krb5_context *a1, void *a2, const char *a3)
{
  uint64_t v6 = 0LL;
  *a2 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v8 = i;
    krb5_data v9 = (const char **)&(&off_18C4D8E60)[9 * v6];
    size_t v10 = strlen(*v9);
    if (!strncmp(a3, *v9, v10) && (!a3[v10] || a3[v10] == 58)) {
      break;
    }
    uint64_t v6 = 1LL;
    if ((v8 & 1) == 0)
    {
      uint64_t v11 = 2529639073LL;
      krb5_set_error_message(a1, -1765328223, "replay cache type %s not supported", a3);
      return v11;
    }
  }

  char v12 = calloc(1uLL, (size_t)((&off_18C4D8E60)[9 * v6 + 1] + 16));
  *a2 = v12;
  if (v12)
  {
    uint64_t v11 = 0LL;
    void *v12 = v9;
    return v11;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_rc_resolve_full(_krb5_context *a1, const char ****a2, const char *a3)
{
  *a2 = 0LL;
  uint64_t v6 = krb5_rc_resolve_type(a1, a2, a3);
  if (!(_DWORD)v6)
  {
    char v12 = &a3[strlen(***a2)];
    if (*v12 == 58)
    {
      uint64_t v6 = krb5_rc_resolve(a1, *a2, (char *)v12 + 1, v7, v8, v9, v10, v11);
      if ((_DWORD)v6)
      {
        krb5_rc_close((uint64_t)a1, *a2);
        *a2 = 0LL;
      }
    }

    else
    {
      uint64_t v6 = 2529639073LL;
      krb5_set_error_message(a1, -1765328223, "replay have bad name: %s", a3);
    }
  }

  return v6;
}

uint64_t krb5_rc_close(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  if (v3) {
    free(v3);
  }
  free(a2);
  return 0LL;
}

const char *krb5_rc_default_name()
{
  return "MEMORY:";
}

const char *krb5_rc_default_type()
{
  return "MEMORY";
}

uint64_t krb5_rc_default(_krb5_context *a1, const char ****a2)
{
  return krb5_rc_resolve_full(a1, a2, "MEMORY:");
}

uint64_t krb5_rc_initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24LL))(a1, a3, a2);
}

uint64_t krb5_rc_recover()
{
  return 0LL;
}

uint64_t krb5_rc_destroy(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*a2 + 56LL))();
  if (!(_DWORD)v4) {
    krb5_rc_close(a1, a2);
  }
  return v4;
}

uint64_t krb5_rc_store(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 40LL))();
}

uint64_t krb5_rc_expunge(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 48LL))();
}

uint64_t krb5_rc_get_lifespan(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32LL))();
}

uint64_t krb5_rc_get_name(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t krb5_rc_get_type(uint64_t a1, uint64_t a2)
{
  return **(void **)a2;
}

krb5_error_code krb5_get_server_rcache(krb5_context a1, const krb5_data *a2, krb5_rcache *a3)
{
  return krb5_rc_resolve_full(a1, (const char ****)a3, "MEMORY:");
}

uint64_t sub_1882ED2D8()
{
  return 0LL;
}

uint64_t sub_1882ED2E0(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  __ptr[16] = *MEMORY[0x1895F89C0];
  uint64_t v6 = fopen(*(const char **)(a3 + 8), "w");
  if (v6)
  {
    uint64_t v7 = v6;
    __ptr[0] = a2;
    fwrite(__ptr, 1uLL, 0x28uLL, v6);
    fclose(v7);
    return 0LL;
  }

  else
  {
    uint64_t v9 = __error();
    uint64_t v8 = *v9;
    strerror_r(*v9, (char *)__ptr, 0x80uLL);
    krb5_set_error_message(a1, v8, "open(%s): %s", *(const char **)(a3 + 8), (const char *)__ptr);
  }

  return v8;
}

uint64_t sub_1882ED3BC(_krb5_context *a1, uint64_t a2, void *a3)
{
  v8[5] = *MEMORY[0x1895F89C0];
  uint64_t v5 = fopen(*(const char **)(a2 + 8), "r");
  size_t v6 = fread(v8, 0x28uLL, 1uLL, v5);
  fclose(v5);
  if (v6)
  {
    uint64_t result = 0LL;
    *a3 = v8[0];
  }

  else
  {
    krb5_clear_error_message(a1);
    return 2529639083LL;
  }

  return result;
}

uint64_t sub_1882ED470(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x1895F89C0];
  time_t v24 = time(0LL);
  sub_1882EDA94(a3, (uint64_t)v25);
  size_t v6 = fopen(*(const char **)(a2 + 8), "r");
  if (!v6)
  {
    uint64_t v16 = __error();
    uint64_t v14 = *v16;
    strerror_r(*v16, __strerrbuf, 0x80uLL);
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v15 = "open(%s): %s";
    goto LABEL_19;
  }

  uint64_t v7 = v6;
  rk_cloexec_file(v6);
  fread(__ptr, 0x28uLL, 1uLL, v7);
  time_t v8 = v24;
  uint64_t v9 = __ptr[0];
  if (!fread(__ptr, 0x28uLL, 1uLL, v7))
  {
LABEL_16:
    if (!ferror(v7))
    {
      fclose(v7);
      uint64_t v18 = fopen(*(const char **)(a2 + 8), "a");
      if (v18)
      {
        ssize_t v19 = v18;
        fwrite(&v24, 1uLL, 0x28uLL, v18);
        fclose(v19);
        return 0LL;
      }

      else
      {
        uint64_t v14 = 2529639083LL;
        unsigned int v20 = __error();
        strerror_r(*v20, __strerrbuf, 0x80uLL);
        krb5_set_error_message(a1, -1765328213, "open(%s): %s");
      }

      return v14;
    }

    uint64_t v14 = *__error();
    fclose(v7);
    strerror_r(v14, __strerrbuf, 0x80uLL);
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v15 = "%s: %s";
LABEL_19:
    krb5_set_error_message(a1, v14, v15, v21, __strerrbuf);
    return v14;
  }

  uint64_t v10 = v8 - v9;
  while (1)
  {
    if (__ptr[0] >= v10)
    {
      BOOL v11 = __ptr[1] == v25[0] && __ptr[2] == v25[1];
      BOOL v12 = v11 && __ptr[3] == v25[2];
      if (v12 && __ptr[4] == v25[3]) {
        break;
      }
    }

    if (!fread(__ptr, 0x28uLL, 1uLL, v7)) {
      goto LABEL_16;
    }
  }

  fclose(v7);
  krb5_clear_error_message(a1);
  return 2529639075LL;
}

uint64_t sub_1882ED6B4()
{
  return 0LL;
}

uint64_t sub_1882ED6BC(_krb5_context *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v5 = __error();
  uint64_t v4 = *v5;
  strerror_r(*v5, __strerrbuf, 0x80uLL);
  krb5_set_error_message(a1, v4, "remove(%s): %s", *(const char **)(a2 + 8), __strerrbuf);
  return v4;
}

uint64_t sub_1882ED76C()
{
  return 0LL;
}

uint64_t sub_1882ED774(uint64_t a1, uint64_t a2)
{
  if (qword_18C7044B0 != a2) {
    qword_18C7044B0 = a2;
  }
  pthread_mutex_unlock(&stru_18C7044C8);
  return 0LL;
}

uint64_t sub_1882ED7C4(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = qword_18C7044B0;
  pthread_mutex_unlock(&stru_18C7044C8);
  return 0LL;
}

uint64_t sub_1882ED810(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = malloc(0x38uLL);
  if (!v5) {
    return krb5_enomem(a1);
  }
  size_t v6 = v5;
  void *v5 = *(void *)(a3 + 56);
  uint64_t v7 = v5 + 1;
  sub_1882EDA94(a3, (uint64_t)(v5 + 1));
  time_t v8 = time(0LL);
  uint64_t v9 = qword_18C7044B0;
  pthread_mutex_lock(&stru_18C7044C8);
  uint64_t v10 = off_18C7044B8;
  if (off_18C7044B8)
  {
    uint64_t v11 = *(void *)(a3 + 56);
    do
    {
      BOOL v12 = (void *)v10[5];
      if (*v10 == v11)
      {
        BOOL v13 = v10[1] == *v7 && v10[2] == v7[1];
        BOOL v14 = v13 && v10[3] == v7[2];
        if (v14 && v10[4] == v7[3])
        {
          uint64_t v20 = 2529639075LL;
          pthread_mutex_unlock(&stru_18C7044C8);
          krb5_set_error_message(a1, -1765328221, "replay detected");
          free(v6);
          return v20;
        }
      }

      if (*v10 < v8 - v9)
      {
        uint64_t v16 = (void *)v10[6];
        if (v12)
        {
          void v12[6] = v16;
          uint64_t v16 = (void *)v10[6];
        }

        else
        {
          qword_18C7044C0 = v10[6];
        }

        *uint64_t v16 = v12;
      }

      uint64_t v10 = v12;
    }

    while (v12);
    uint64_t v17 = off_18C7044B8;
    void v6[5] = off_18C7044B8;
    uint64_t v18 = (uint64_t)(v6 + 5);
    if (!v17) {
      goto LABEL_25;
    }
    v17[6] = v18;
  }

  else
  {
    void v6[5] = 0LL;
    uint64_t v18 = (uint64_t)(v6 + 5);
LABEL_25:
    qword_18C7044C0 = v18;
  }

  v6[6] = &off_18C7044B8;
  off_18C7044B8 = v6;
  pthread_mutex_unlock(&stru_18C7044C8);
  return 0LL;
}

uint64_t sub_1882ED99C()
{
  time_t v0 = time(0LL);
  uint64_t v1 = (time_t *)off_18C7044B8;
  if (off_18C7044B8)
  {
    time_t v2 = v0 - qword_18C7044B0;
    do
    {
      uint64_t v3 = (time_t *)v1[5];
      if (*v1 < v2)
      {
        uint64_t v4 = (time_t **)v1[6];
        if (v3)
        {
          v3[6] = (time_t)v4;
          uint64_t v4 = (time_t **)v1[6];
        }

        else
        {
          qword_18C7044C0 = v1[6];
        }

        krb5_ticket *v4 = v3;
      }

      uint64_t v1 = v3;
    }

    while (v3);
  }

  pthread_mutex_unlock(&stru_18C7044C8);
  return 0LL;
}

uint64_t sub_1882EDA24()
{
  for (char i = off_18C7044B8; off_18C7044B8; char i = off_18C7044B8)
  {
    uint64_t v1 = i[5];
    time_t v2 = (void *)i[6];
    if (v1)
    {
      *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = v2;
      time_t v2 = (void *)i[6];
    }

    else
    {
      qword_18C7044C0 = i[6];
    }

    void *v2 = v1;
  }

  pthread_mutex_unlock(&stru_18C7044C8);
  return 0LL;
}

uint64_t sub_1882EDA94(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = ccsha256_di();
  MEMORY[0x1895F8858]();
  size_t v6 = (char *)v9 - v5;
  ccdigest_init();
  strlen(*(const char **)(a1 + 8));
  ccdigest_update();
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v7 = 0LL;
    do
    {
      strlen(*(const char **)(*(void *)(a1 + 32) + 8 * v7));
      ccdigest_update();
      ++v7;
    }

    while (v7 < *(unsigned int *)(a1 + 24));
  }

  ccdigest_update();
  ccdigest_update();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 56))(v4, v6, a2);
}

uint64_t krb5_sendto_ctx_alloc( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a2 = heim_uniq_alloc(0xF8uLL, (uint64_t)"sendto-context", (uint64_t)sub_1882EDC1C, a4, a5, a6, a7, a8);
  *(void *)(*(void *)a2 + 136LL) = heim_array_create();
  return 0LL;
}

void sub_1882EDC1C(uint64_t a1)
{
  time_t v2 = *(void **)(a1 + 56);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4) {
    free(v4);
  }
  heim_release(*(CFTypeRef *)(a1 + 136));
  heim_release(*(CFTypeRef *)(a1 + 104));
}

uint64_t krb5_sendto_ctx_add_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) |= a2;
  return result;
}

uint64_t krb5_sendto_ctx_get_flags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t krb5_sendto_ctx_set_type(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

uint64_t krb5_sendto_ctx_set_func(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 40) = a2;
  *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 128), 8) = a3;
  return result;
}

uint64_t sub_1882EDC90(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 160) = a2;
  *(void *)(result + 16_Block_object_dispose((const void *)(v1 - 128), 8) = a3;
  return result;
}

uint64_t sub_1882EDC98(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v5 = strdup(__s1);
  *(void *)(a2 + 56) = v5;
  if (v5) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t sub_1882EDCDC(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v5 = strdup(__s1);
  *(void *)(a2 + 64) = v5;
  if (v5) {
    return 0LL;
  }
  else {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_sendto_set_delegated_app(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, char *__s1)
{
  *(_DWORD *)(a2 + 156) |= 1u;
  if (a3)
  {
    *(_OWORD *)(a2 + 72) = *a3;
    uint64_t v9 = "passed-in";
  }

  else if (__s1)
  {
    *(void *)(a2 + 72) = 0LL;
    *(void *)(a2 + 80) = 0LL;
    uint64_t v12 = NEHelperCacheCopyAppUUIDMapping();
    if (v12)
    {
      BOOL v13 = (void *)v12;
      if (MEMORY[0x1895C219C]() == MEMORY[0x1895F9220] && xpc_array_get_count(v13))
      {
        *(_OWORD *)(a2 + 72) = *(_OWORD *)xpc_array_get_uuid(v13, 0LL);
        uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping";
      }

      else
      {
        uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping-fail";
      }

      xpc_release(v13);
    }

    else
    {
      uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping-fail";
    }
  }

  else
  {
    uint64_t v9 = "unknown";
  }

  uint64_t v10 = *(void **)(a2 + 96);
  if (v10)
  {
    free(v10);
    *(void *)(a2 + 96) = 0LL;
  }

  if (__s1) {
    *(void *)(a2 + 96) = strdup(__s1);
  }
  sub_1882DFCE8( a1,  5,  "krb5_sendto_set_delegated_app: %s - %s, %d uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  v9,  __s1,  a4,  *(unsigned __int8 *)(a2 + 72),  *(unsigned __int8 *)(a2 + 73),  *(unsigned __int8 *)(a2 + 74),  *(unsigned __int8 *)(a2 + 75),  *(unsigned __int8 *)(a2 + 76),  *(unsigned __int8 *)(a2 + 77),  *(unsigned __int8 *)(a2 + 78),  *(unsigned __int8 *)(a2 + 79),  *(unsigned __int8 *)(a2 + 80),  *(unsigned __int8 *)(a2 + 81),  *(unsigned __int8 *)(a2 + 82),  *(unsigned __int8 *)(a2 + 83),  *(unsigned __int8 *)(a2 + 84),  *(unsigned __int8 *)(a2 + 85),  *(unsigned __int8 *)(a2 + 86),  *(unsigned __int8 *)(a2 + 87));
  return 0LL;
}

void krb5_sendto_ctx_free(uint64_t a1, const void *a2)
{
}

uint64_t sub_1882EDEB4(_krb5_context *a1, uint64_t a2, int a3, krb5_data *a4, int *a5)
{
  if (!krb5_rd_error(a1, a4, v12))
  {
    int v8 = krb5_error_from_rd_error(a1, (uint64_t)v12, 0LL);
    krb5_free_error_contents((uint64_t)a1, (uint64_t)v12);
    if (v8 == -1765328355)
    {
      int v10 = 2;
      goto LABEL_7;
    }

    if (v8 == -1765328332)
    {
      int v9 = *(_DWORD *)(a2 + 32);
      if ((v9 & 2) == 0)
      {
        *(_DWORD *)(a2 + 32) = v9 | 2;
        int v10 = 1;
LABEL_7:
        *a5 = v10;
      }
    }
  }

  return 0LL;
}

uint64_t krb5_sendto_context(uint64_t a1, uint64_t a2, _DWORD *a3, const char *a4, void *a5)
{
  uint64_t v156 = *MEMORY[0x1895F89C0];
  uint64_t v98 = 2529639068LL;
  *(void *)size_t v106 = 0LL;
  krb5_data_zero(a5);
  heim_warn_blocking("krb5_sendto_context", &qword_18C707460);
  uint64_t v14 = a2;
  int v15 = -1765328228;
  uint64_t v95 = a2;
  if (!a2)
  {
    uint64_t v14 = heim_uniq_alloc(0xF8uLL, (uint64_t)"sendto-context", (uint64_t)sub_1882EDC1C, v9, v10, v11, v12, v13);
    int v15 = 0;
    *(void *)(v14 + 136) = heim_array_create();
  }

  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 20_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  gettimeofday((timeval *)(v14 + 176), 0LL);
  *(void *)(v14 + 144) = a4;
  int v23 = *(_DWORD *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v23 + 1;
  *(_DWORD *)(v14 + 240) = v23 << 16;
  int v96 = *(_DWORD *)(v14 + 36);
  if (!v96)
  {
    if ((*(_BYTE *)(v14 + 32) & 1) != 0)
    {
      int v24 = 2;
    }

    else if (*(_DWORD *)(a1 + 224))
    {
      int v24 = 2;
    }

    else
    {
      int v24 = 1;
    }

    int v96 = v24;
  }

  uint64_t v100 = a4;
  *(void *)(v14 + 112) = a3;
  if (*(_DWORD *)(a1 + 336) < *a3) {
    *(_DWORD *)(v14 + 32) |= 2u;
  }
  int v101 = 0;
  int v25 = 4;
  int v103 = 4;
  int v26 = (void *)(v14 + 120);
  uint64_t v97 = a3;
  while (2)
  {
    if (v25 == 6) {
      goto LABEL_131;
    }
    switch(v25)
    {
      case 1:
        sub_1882DFCE8(a1, 5, "krb5_sendto trying over again (reset): %d", v101);
        sub_1882EEC94(v14);
        uint64_t v16 = *(const void **)v106;
        if (*(void *)v106)
        {
          krb5_krbhst_free(a1, *(const void **)v106);
          *(void *)size_t v106 = 0LL;
        }

        int v15 = 0;
        if (v101 > 1) {
          int v27 = 6;
        }
        else {
          int v27 = 7;
        }
        int v103 = v27;
        ++v101;
        goto LABEL_122;
      case 2:
        uint64_t v134 = 0LL;
        uint64_t v135 = &v134;
        uint64_t v136 = 0x2000000000LL;
        uint64_t v137 = 0LL;
        *(void *)uint64_t v149 = 0LL;
        *(void *)&v149[8] = v149;
        *(void *)&v149[16] = 0x9800000000LL;
        *(void *)__str = 0LL;
        uint64_t v139 = __str;
        uint64_t v140 = 0x9800000000LL;
        uint64_t v130 = 0LL;
        uint64_t v131 = &v130;
        uint64_t v132 = 0x2000000000LL;
        int v133 = 0;
        uint64_t v127 = 0LL;
        uint64_t v128 = &v127;
        uint64_t v129 = 0x2000000000LL;
        __int128 v154 = 0u;
        __int128 v155 = 0u;
        __int128 v152 = 0u;
        __int128 v153 = 0u;
        __int128 v150 = 0u;
        __int128 v151 = 0u;
        memset(&v149[24], 0, 32);
        __int128 v147 = 0u;
        __int128 v148 = 0u;
        __int128 v141 = 0u;
        __int128 v142 = 0u;
        __int128 v143 = 0u;
        __int128 v144 = 0u;
        __int128 v145 = 0u;
        __int128 v146 = 0u;
        if (*v26)
        {
          int v15 = 0;
          int v103 = 5;
          goto LABEL_88;
        }

        krb5_principal v34 = (addrinfo *)time(0LL);
        int v35 = *(const __CFArray **)(v14 + 136);
        v116.tv_sec = MEMORY[0x1895F87A8];
        *(void *)&v116.tv_usec = 0x40000000LL;
        __int128 v117 = sub_1882EFC90;
        uint64_t v118 = &unk_18A21A348;
        size_t v123 = v34;
        uint64_t v124 = a1;
        uint64_t v125 = v14;
        uint64_t v119 = &v134;
        size_t v120 = v149;
        timeval v121 = __str;
        uint64_t v122 = &v130;
        heim_array_iterate(v35, (uint64_t)&v116);
        if (!*((_DWORD *)v131 + 6))
        {
          uint64_t v58 = v135[3];
          if (v58)
          {
            unsigned int v59 = (addrinfo *)(*(void *)(v58 + 88) - (void)v34);
            sub_1882EEEDC(a1, v14, v58, v36, v37, v38, v39, v40);
            sub_1882EFDC8( v135[3],  (char *)(*(void *)&v149[8] + 24LL),  (uint64_t)(v139 + 24),  (_DWORD *)v131 + 6,  v60,  v61,  v62,  v63);
            if ((uint64_t)v59 >= 1)
            {
              size_t v64 = *(const __CFArray **)(v14 + 136);
              v115[0] = (addrinfo *)MEMORY[0x1895F87A8];
              v115[1] = (addrinfo *)0x40000000;
              void v115[2] = (addrinfo *)sub_1882EFED4;
              v115[3] = (addrinfo *)&unk_18A21A368;
              v115[4] = v59;
              v115[5] = v34;
              heim_array_iterate(v64, (uint64_t)v115);
            }
          }
        }

        heim_array_filter(*(const __CFArray **)(v14 + 136), (uint64_t)&unk_18A21A3A8);
        if (!heim_array_get_length(*(CFArrayRef *)(v14 + 136)))
        {
          if ((*(_DWORD *)(v14 + 152) & 1) != 0) {
            uint64_t v65 = "no more hosts to send/recv packets to/from trying to pulling more hosts";
          }
          else {
            uint64_t v65 = "no more hosts to send/recv packets to/from and no more hosts -> failure";
          }
          if ((*(_DWORD *)(v14 + 152) & 1) != 0) {
            int v66 = 6;
          }
          else {
            int v66 = 3;
          }
          sub_1882DFCE8(a1, 5, v65);
          int v15 = 0;
          int v103 = v66;
          a3 = v97;
LABEL_87:
          int v26 = (void *)(v14 + 120);
          goto LABEL_88;
        }

        v126.tv_sec = 1LL;
        v126.tv_usec = 0;
        int v41 = select( *((_DWORD *)v131 + 6) + 1,  (fd_set *)(*(void *)&v149[8] + 24LL),  (fd_set *)(v139 + 24),  0LL,  &v126);
        unsigned int v42 = v128;
        *((_DWORD *)v128 + 6) = v41;
        if (v41 < 0)
        {
          a3 = v97;
          if (*__error() == 35 && *__error() == 4)
          {
            *((_DWORD *)v128 + 6) = 0;
            int v26 = (void *)(v14 + 120);
LABEL_83:
            int v15 = 0;
            int v103 = 3;
            goto LABEL_88;
          }

          int v15 = *__error();
          goto LABEL_87;
        }

        int v26 = (void *)(v14 + 120);
        a3 = v97;
        if (!v41) {
          goto LABEL_83;
        }
        *((_DWORD *)v42 + 6) = 0;
        krb5_principal v43 = *(const __CFArray **)(v14 + 136);
        v107.tv_sec = MEMORY[0x1895F87A8];
        *(void *)&v107.tv_usec = 0x40000000LL;
        uint64_t v108 = sub_1882EFF14;
        uint64_t v109 = &unk_18A21A3D0;
        uint64_t v110 = v149;
        uint64_t v111 = __str;
        v112 = &v127;
        uint64_t v113 = a1;
        uint64_t v114 = v14;
        heim_array_iterate(v43, (uint64_t)&v107);
        int v15 = 0;
        if (*((_DWORD *)v128 + 6)) {
          int v44 = 5;
        }
        else {
          int v44 = 2;
        }
        int v103 = v44;
LABEL_88:
        _Block_object_dispose(&v127, 8);
        _Block_object_dispose(&v130, 8);
        _Block_object_dispose(__str, 8);
        _Block_object_dispose(v149, 8);
        _Block_object_dispose(&v134, 8);
        if (v15) {
          goto LABEL_131;
        }
        goto LABEL_122;
      case 3:
        goto LABEL_50;
      case 4:
        uint64_t v28 = *(void *)(a1 + 88);
        *(void *)uint64_t v149 = v100;
        *(void *)&v149[8] = 0LL;
        *(void *)&v149[16] = v28;
        *(void *)&v149[24] = a3;
        *(void *)&v149[32] = a5;
        int v29 = krb5_plugin_run_f(a1, "krb5", "send_to_kdc", 2, 0LL, (uint64_t)v149, (uint64_t)sub_1882EECCC);
        if (v29 == -1765328135)
        {
          int v103 = 7;
          int v15 = -1765328135;
LABEL_25:
          ssize_t v30 = *(const void **)(v14 + 104);
          if (v30)
          {
            *(void *)size_t v106 = heim_retain(v30);
          }

          else
          {
            int inited = krb5_krbhst_init_flags((_krb5_context *)a1, v100, v96, *(_DWORD *)(v14 + 32), (uint64_t *)v106);
            if (inited
              || (size_t v33 = *(char **)(v14 + 56)) != 0LL
              && (int inited = krb5_krbhst_set_hostname((_krb5_context *)a1, *(uint64_t *)v106, v33)) != 0
              || (uint64_t v17 = *(char **)(v14 + 64)) != 0LL
              && (int inited = krb5_krbhst_set_sitename((_krb5_context *)a1, *(uint64_t *)v106, v17)) != 0)
            {
LABEL_130:
              int v15 = inited;
              goto LABEL_131;
            }

            if ((*(_BYTE *)(v14 + 156) & 1) != 0)
            {
              int inited = krb5_krbhst_set_delgated_uuid(a1, *(uint64_t *)v106, (unsigned __int8 *)(v14 + 72));
              if (inited) {
                goto LABEL_130;
              }
              int v15 = krb5_krbhst_set_delgated_pid(a1, *(uint64_t *)v106, *(_DWORD *)(v14 + 88));
              if (v15) {
                goto LABEL_131;
              }
            }

            else
            {
              int v15 = 0;
            }
          }

          int v103 = 3;
LABEL_50:
          if ((*(_BYTE *)(v14 + 152) & 1) != 0)
          {
            int v103 = 2;
            goto LABEL_122;
          }

          gettimeofday(&v105, 0LL);
          int v15 = krb5_krbhst_next(a1, *(uint64_t *)v106, &v102);
          gettimeofday(&v104, 0LL);
          sub_1883151E4((uint64_t)&v104, (uint64_t)&v105);
          sub_188315184(v14 + 208, (uint64_t)&v104);
          int v103 = 2;
          if (!v15)
          {
            sub_1882DFCE8(a1, 5, "submissing new requests to new host");
            uint64_t v45 = v102;
            v115[0] = 0LL;
            uint64_t v46 = *(void *)(a1 + 88);
            uint64_t v47 = *(void *)(v14 + 112);
            *(void *)uint64_t v149 = 0LL;
            *(void *)&v149[8] = v102;
            *(void *)&v149[16] = v46;
            *(void *)&v149[24] = v47;
            *(void *)&v149[32] = v26;
            int v48 = krb5_plugin_run_f(a1, "krb5", "send_to_kdc", 0, 0LL, (uint64_t)v149, (uint64_t)sub_1882EF0F0);
            if (v48 != -1765328135)
            {
              if (v48)
              {
                sub_1882DFCE8(a1, 5, "send via plugin failed %s: %d", (const char *)(v45 + 48), v48);
                int v26 = (void *)(v14 + 120);
                goto LABEL_120;
              }

LABEL_56:
              int v15 = 0;
              int v26 = (void *)(v14 + 120);
              a3 = v97;
              goto LABEL_122;
            }

            gettimeofday(&v116, 0LL);
            if (*(_DWORD *)v45 == 3)
            {
              v115[0] = 0LL;
            }

            else
            {
              if (*(_DWORD *)v45 == 2)
              {
                __int128 v49 = *(const char **)(a1 + 184);
                if (v49)
                {
                  __int128 v50 = strdup(v49);
                  if (!v50)
                  {
                    int v88 = 12;
LABEL_127:
                    if (v88) {
                      goto LABEL_120;
                    }
                    int v15 = 0;
                    goto LABEL_121;
                  }

                  __int128 v51 = v50;
                  int v52 = strncmp(v50, "http://", 7uLL);
                  uint64_t v53 = 7LL;
                  if (v52) {
                    uint64_t v53 = 0LL;
                  }
                  int v54 = &v51[v53];
                  uint64_t v55 = strchr(&v51[v53], 47);
                  if (v55) {
                    *uint64_t v55 = 0;
                  }
                  uint64_t v56 = strchr(v54, 58);
                  if (v56)
                  {
                    *uint64_t v56 = 0;
                    memset(v149, 0, 48);
                    *(_DWORD *)&v149[8] = 1;
                    sscanf(v56 + 1, "%d", &v134);
                    unsigned int v57 = bswap32((unsigned __int16)v134) >> 16;
                  }

                  else
                  {
                    memset(v149, 0, 48);
                    unsigned int v57 = 20480;
                    *(_DWORD *)&v149[8] = 1;
                  }

                  snprintf(__str, 0x20uLL, "%d", __rev16(v57));
                  uint64_t v89 = getaddrinfo(v54, __str, (const addrinfo *)v149, v115);
                  free(v51);
                  if ((_DWORD)v89)
                  {
                    uint64_t v90 = __error();
                    int v88 = krb5_eai_to_heim_errno(v89, *v90);
                    goto LABEL_127;
                  }

                  char v94 = 0;
LABEL_92:
                  gettimeofday(&v107, 0LL);
                  sub_1883151E4((uint64_t)&v107, (uint64_t)&v116);
                  sub_188315184(v14 + 192, (uint64_t)&v107);
                  ++*(void *)(v14 + 232);
                  int v67 = v115[0];
                  if (!v115[0])
                  {
                    uint64_t v68 = 0LL;
LABEL_106:
                    if (*(_DWORD *)v45 == 3)
                    {
                      if (v115[0]) {
                        heim_abort( "kkdcp host with ai ?:ai == NULL",  (uint64_t)v16,  (uint64_t)v17,  v18,  v19,  v20,  v21,  v22,  v93);
                      }
                      rk_socket_set_nopipe(*(int *)v149, 1);
                      rk_socket_set_nopipe(*(int *)&v149[4], 1);
                      sub_1882FBA30(*(int *)v149, 1);
                      sub_1882FBA30(*(int *)&v149[4], 1);
                      uint64_t v85 = sub_1882EECFC(a1, v14, (int *)v45, 0LL, *(unsigned int *)v149, v82, v83, v84);
                      if (!v85)
                      {
                        close(*(int *)v149);
                        close(*(int *)&v149[4]);
LABEL_119:
                        int v26 = (void *)(v14 + 120);
LABEL_120:
                        int v15 = 0;
                        int v103 = 3;
LABEL_121:
                        a3 = v97;
                        goto LABEL_122;
                      }

                      uint64_t v86 = (const void *)v85;
                      *(_DWORD *)(v85 + 6_Block_object_dispose((const void *)(v1 - 128), 8) = *(_DWORD *)&v149[4];
                      unint64_t v87 = *(void *)(a1 + 88) / *(int *)(*(void *)(v85 + 72) + 24LL);
                      if (v87 <= 1) {
                        unint64_t v87 = 1LL;
                      }
                      *(void *)(v85 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = v87;
                      *(void *)(v85 + 88) += time(0LL);
                      sub_1882EF004(a1, v14, (uint64_t)v86);
                      ++v68;
                      heim_release(v86);
                    }

                    if ((v94 & 1) == 0) {
                      freeaddrinfo(v115[0]);
                    }
                    if (!v68) {
                      goto LABEL_119;
                    }
                    goto LABEL_56;
                  }

                  uint64_t v68 = 0LL;
                  while (2)
                  {
                    uint64_t v69 = socket(v67->ai_family, v67->ai_socktype, v67->ai_protocol);
                    if ((v69 & 0x80000000) == 0)
                    {
                      uint64_t v70 = v69;
                      sub_1882FA158(v69);
                      rk_socket_set_nopipe(v70, 1);
                      sub_1882FBA30(v70, 1);
                      if (v70 >= 0x400)
                      {
                        sub_1882DFCE8(a1, 0, "fd too large for select");
                        goto LABEL_100;
                      }

                      uint64_t v74 = sub_1882EECFC(a1, v14, (int *)v45, (uint64_t)v67, v70, v71, v72, v73);
                      if (v74)
                      {
                        uint64_t v81 = (void *)v74;
                        if (v68)
                        {
                          sub_1882EEFD0( a1,  v75,  v74,  "Queuing host in future (in %ds), its the %lu address on the same name",  v77,  v78,  v79,  v80,  *(_BYTE *)(a1 + 96) * v68);
                          v81[11] = time(0LL) + *(void *)(a1 + 96) * v68++;
                        }

                        else
                        {
                          sub_1882EEEDC(a1, v14, v74, v76, v77, v78, v79, v80);
                          uint64_t v68 = 1LL;
                        }

                        heim_release(v81);
                      }

                      else
                      {
LABEL_100:
                        close(v70);
                      }
                    }

                    int v67 = v67->ai_next;
                    if (!v67) {
                      goto LABEL_106;
                    }
                    continue;
                  }
                }
              }
            }

            char v94 = 1;
            goto LABEL_92;
          }

          sub_1882DFCE8(a1, 5, "out of hosts, waiting for replies");
          *(_DWORD *)(v14 + 152) |= 1u;
        }

        else
        {
          int v15 = v29;
          int v103 = 0;
        }

        goto LABEL_122;
      case 5:
        int v103 = 0;
        krb5_principal v31 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, int *))(v14 + 40);
        if (!v31) {
          goto LABEL_122;
        }
        int inited = v31(a1, v14, *(void *)(v14 + 48), v26, &v103);
        if (inited) {
          goto LABEL_130;
        }
        int v15 = v103;
        if ((v103 - 1) < 2)
        {
          krb5_data_free(v26);
          int v15 = 0;
LABEL_122:
          int v25 = v103;
          if (!v103) {
            goto LABEL_131;
          }
          continue;
        }

        if (!v103) {
          goto LABEL_122;
        }
        krb5_set_error_message( (krb5_context)a1,  -1765328228,  "sendto filter funcation return unsupported state: %d",  v103);
        int v15 = -1765328228;
LABEL_131:
        gettimeofday((timeval *)v149, 0LL);
        sub_1883151E4((uint64_t)v149, v14 + 176);
        if (v15 || !*v26)
        {
          krb5_data_free(v26);
          krb5_clear_error_message((krb5_context)a1);
          uint64_t v91 = "KDCs";
          if (*(void *)(v14 + 232) == 1LL) {
            uint64_t v91 = "KDC";
          }
          krb5_set_error_message( (krb5_context)a1,  -1765328228,  "unable to reach any KDC in realm %s, tried %lu %s",  v100,  *(void *)(v14 + 232),  v91);
        }

        else
        {
          *(_OWORD *)a5 = *(_OWORD *)v26;
          krb5_data_zero(v26);
          uint64_t v98 = 0LL;
        }

        sub_1882DFCE8( a1,  1,  "krb5_sendto_context %s done: %d hosts %lu packets %lu wc: %lld.%06d nr: %lld.%06d kh: %lld.%06d tid: %08x",  *(const char **)(v14 + 144),  v98,  *(void *)(v14 + 232),  *(void *)(v14 + 224),  *(void *)v149,  *(_DWORD *)&v149[8],  *(void *)(v14 + 192),  *(_DWORD *)(v14 + 200),  *(void *)(v14 + 208),  *(_DWORD *)(v14 + 216),  *(_DWORD *)(v14 + 240));
        if (v95) {
          sub_1882EEC94(v14);
        }
        else {
          heim_release((CFTypeRef)v14);
        }
        if (*(void *)v106) {
          krb5_krbhst_free(a1, *(const void **)v106);
        }
        return v98;
      case 7:
        goto LABEL_25;
      default:
        heim_abort("invalid krb5_sendto_context action: %d", (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22, v25);
    }
  }

CFMutableArrayRef sub_1882EEC94(uint64_t a1)
{
  CFMutableArrayRef result = heim_array_create();
  *(void *)(a1 + 136) = result;
  *(_DWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_1882EECCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void, void, void, void))(a2 + 32);
  if (v4) {
    return v4(a1, a3, *a4, a4[2], a4[3], a4[4]);
  }
  else {
    return 2529639161LL;
  }
}

uint64_t sub_1882EECFC( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint64_t v13 = heim_uniq_alloc(0x78uLL, (uint64_t)"sendto-host", (uint64_t)sub_1882EF11C, a4, a5, a6, a7, a8);
  uint64_t v14 = v13;
  if (v13)
  {
    *(_DWORD *)(v13 + 64) = v8;
    *(_DWORD *)(v13 + 6_Block_object_dispose((const void *)(v1 - 128), 8) = -1;
    *(void *)(v13 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = a3;
    *(void *)(v13 + 56) = a4;
    *(void *)(v13 + 32) = a2;
    unsigned int v15 = ((unsigned __int16)*(_DWORD *)(a2 + 240) + 1) | *(_DWORD *)(a2 + 240) & 0xFFFF0000;
    *(_DWORD *)(a2 + 240) = v15;
    *(_DWORD *)(v13 + 112) = v15;
    *(_DWORD *)(v13 + 40) = 0;
    uint64_t v16 = *a3;
    if ((*(_BYTE *)(a2 + 156) & 1) != 0)
    {
      uint64_t v17 = __error();
      sub_1882DFCE8(a1, 5, "host_create: setting host delegate uuid", *v17);
      if (setsockopt(*(_DWORD *)(v14 + 64), 0xFFFF, 4360, (const void *)(a2 + 72), 0x10u))
      {
        uint64_t v18 = __error();
        sub_1882DFCE8(a1, 5, "host_create: SO_DELEGATED_UUID failed: %d", *v18);
      }

      if (*(_DWORD *)(a2 + 88))
      {
        uint64_t v19 = __error();
        sub_1882DFCE8(a1, 5, "host_create: setting host delegate process", *v19);
        if (setsockopt(*(_DWORD *)(v14 + 64), 0xFFFF, 4359, (const void *)(a2 + 88), 4u))
        {
          uint64_t v20 = __error();
          sub_1882DFCE8(a1, 5, "host_create: SO_DELEGATED failed: %d", *v20);
        }
      }
    }

    uint64_t v21 = strdup((const char *)(*(void *)(v14 + 48) + 48LL));
    if (v21)
    {
      uint64_t v22 = v21;
      sub_1882D9F30(v21);
      sub_1882DFCE8(a1, 5, "host_create: setting hostname %s", v22);
      ne_session_set_socket_attributes();
      free(v22);
    }

    *(_DWORD *)(v14 + 80) = *(_DWORD *)(*(void *)(v14 + 72) + 24LL);
    heim_array_append_value(*(__CFArray **)(a2 + 136), (const void *)v14);
  }

  return v14;
}

time_t sub_1882EEEDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a3 + 56);
  sub_1882EEFD0(a1, a2, a3, "connecting to host", a5, a6, a7, a8, v25);
  if (connect(*(_DWORD *)(a3 + 64), *(const sockaddr **)(v11 + 32), *(_DWORD *)(v11 + 16)) < 0)
  {
    if (*__error() == 36)
    {
      sub_1882EEFD0(a1, v12, a3, "connecting to %d (in progress)", v13, v14, v15, v16, *(_DWORD *)(a3 + 64));
      *(_DWORD *)(a3 + 40) = 1;
    }

    else
    {
      uint64_t v17 = __error();
      sub_1882EFB0C(a1, a3, "failed to connect: %d", v18, v19, v20, v21, v22, *v17);
    }
  }

  else
  {
    sub_1882EF004(a1, a2, a3);
  }

  unint64_t v23 = *(void *)(a1 + 88) / *(int *)(*(void *)(a3 + 72) + 24LL);
  if (v23 <= 1) {
    unint64_t v23 = 1LL;
  }
  *(void *)(a3 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = v23;
  time_t result = time(0LL);
  *(void *)(a3 + 88) += result;
  return result;
}

void sub_1882EEFD0( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1882EF004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) = 2;
  if (*(void *)(a2 + 160))
  {
    krb5_data_zero(v13);
    int v12 = (*(uint64_t (**)(uint64_t, void, void, void, char *))(a2 + 160))( a1,  **(unsigned int **)(a3 + 48),  *(void *)(a2 + 168),  *(unsigned int *)(a3 + 64),  v13);
    if (!v12)
    {
      if (!*(void *)v13)
      {
        sub_1882EFB0C(a1, a3, "prexmit function didn't send data", v7, v8, v9, v10, v11, 0);
        return;
      }

      int v12 = (**(uint64_t (***)(uint64_t, uint64_t, char *))(a3 + 72))(a1, a3, v13);
      krb5_data_free(v13);
    }
  }

  else
  {
    int v12 = (**(uint64_t (***)(uint64_t, uint64_t, void))(a3 + 72))(a1, a3, *(void *)(a2 + 112));
  }

  if (v12) {
    sub_1882EEFD0(a1, v6, a3, "failed to prexmit/prepare", v8, v9, v10, v11, v13[0]);
  }
}

uint64_t sub_1882EF0F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void, void, void, void))(a2 + 24);
  if (v4) {
    return v4(a1, a3, a4[1], a4[2], a4[3], a4[4]);
  }
  else {
    return 2529639161LL;
  }
}

void sub_1882EF11C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x80000000) == 0) {
    close(v3);
  }
  krb5_data_free((void *)(a1 + 96));
  *(void *)(a1 + 56) = 0LL;
}

uint64_t sub_1882EF15C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __s = 0LL;
  uint64_t v17 = 0LL;
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_http called twice:host->data.length == 0", a2, a3, a4, a5, a6, a7, a8, v15);
  }
  if (*(void *)(a1 + 184)) {
    int v10 = asprintf(&__s, "GET http://%s/%s HTTP/1.0\r\n\r\n");
  }
  else {
    int v10 = asprintf(&__s, "GET /%s HTTP/1.0\r\n\r\n");
  }
  int v12 = v10;
  free(v17);
  uint64_t result = 12LL;
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = __s;
    if (__s)
    {
      *(void *)(a2 + 104) = __s;
      size_t v14 = strlen(v13);
      uint64_t result = 0LL;
      *(void *)(a2 + 96) = v14;
    }
  }

  return result;
}

uint64_t sub_1882EF228(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 96);
  unint64_t v4 = write(*(_DWORD *)(a2 + 64), *(const void **)(a2 + 104), *(void *)(a2 + 96));
  if ((v4 & 0x8000000000000000LL) != 0) {
    return *__error();
  }
  unint64_t v5 = *v3 - v4;
  if (*v3 <= v4)
  {
    krb5_data_free(v3);
    return 0LL;
  }

  else
  {
    *(void *)(a2 + 96) = v5;
    memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + v4), v5 - v4);
    return 0xFFFFFFFFLL;
  }

uint64_t sub_1882EF2A0(int *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result = sub_1882EF36C(a1, a2);
  if (!(_DWORD)result)
  {
    uint64_t v6 = *(const char **)(a2 + 104);
    uint64_t v7 = strstr(v6, "\r\n\r\n");
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v8 = v7;
    uint64_t v9 = (unsigned __int8 *)(v7 + 4);
    size_t v10 = *(void *)(a2 + 96) + v6 - (const char *)v9;
    if (v10 < 4) {
      return 2529638973LL;
    }
    _krb5_get_int(v9, &__len, 4LL);
    if (v10 >= __len)
    {
      memmove(*(void **)(a2 + 104), v8 + 8, __len);
      *(void *)(a2 + 96) = __len;
      *a3 = *(_OWORD *)(a2 + 96);
      krb5_data_zero((void *)(a2 + 96));
      return 0LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_1882EF36C(int *a1, uint64_t a2)
{
  if (ioctl(*(_DWORD *)(a2 + 64), 0x4004667FuLL)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (int)v20 <= 0;
  }
  if (v9)
  {
    sub_1882EEFD0((uint64_t)a1, v4, a2, "failed to get nbytes from socket, no bytes there?", v5, v6, v7, v8, (char)&v20);
    return 2314790848LL;
  }

  else
  {
    uint64_t v11 = *(void *)(a2 + 96);
    if (a1[85] - v11 >= (unint64_t)v20)
    {
      uint64_t v10 = krb5_data_realloc(a2 + 96, v20 + v11 + 1);
      if (!(_DWORD)v10)
      {
        ssize_t v12 = read(*(_DWORD *)(a2 + 64), (void *)(*(void *)(a2 + 104) + v11), (int)v20);
        if (v12 <= 0)
        {
          uint64_t v13 = __error();
          uint64_t v10 = *v13;
          sub_1882EEFD0((uint64_t)a1, v14, a2, "failed to read bytes from stream: %d", v15, v16, v17, v18, *v13);
        }

        else
        {
          uint64_t v10 = 0LL;
          *(void *)(a2 + 96) = v12 + v11;
          *(_BYTE *)(*(void *)(a2 + 104) + v12 + v11) = 0;
        }
      }
    }

    else
    {
      uint64_t v10 = 2529638973LL;
      krb5_set_error_message((krb5_context)a1, -1765328323, "TCP message from KDC too large %d", v20 + v11);
    }
  }

  return v10;
}

uint64_t sub_1882EF494( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (size_t *)(a2 + 96);
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_kkdcp called twice:host->data.length == 0", a2, a3, a4, a5, a6, a7, a8, v16);
  }
  uint64_t v10 = krb5_storage_emem();
  if (!v10) {
    return 12LL;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = krb5_store_data((uint64_t)v10, *(void *)a3, *(void *)(a3 + 8));
  if ((_DWORD)v12)
  {
    uint64_t v13 = v12;
    krb5_storage_free(v11);
    return v13;
  }

  uint64_t v15 = krb5_storage_to_data(v11, v8);
  krb5_storage_free(v11);
  return v15;
}

uint64_t sub_1882EF56C(const void *a1, uint64_t a2)
{
  char v16 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2800000000LL;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  heim_retain((CFTypeRef)a2);
  heim_retain(*(CFTypeRef *)(a2 + 32));
  else {
    asprintf(&v16, "https://%s:%d/%s");
  }
  if (v16)
  {
    *(_OWORD *)(v14 + 3) = *(_OWORD *)(a2 + 96);
    krb5_data_zero((void *)(a2 + 96));
    sub_1882EEFD0((uint64_t)a1, v5, a2, "sending request to: %s", v6, v7, v8, v9, (char)v16);
    heim_retain(a1);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = sub_1882EF7AC;
    block[3] = &unk_18A21A320;
    void block[6] = a2;
    void block[7] = v16;
    void block[4] = &v13;
    void block[5] = a1;
    dispatch_async(global_queue, block);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 12LL;
  }

  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t sub_1882EF6D4( int *a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)a1, 0LL, 1LL, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  uint64_t result = sub_1882EF36C(a1, a2);
  if (!(_DWORD)result)
  {
    if (*(void *)(a2 + 96) < 4uLL) {
      return 0xFFFFFFFFLL;
    }
    if (BOOL_default)
    {
      _krb5_get_int(*(unsigned __int8 **)(a2 + 104), &v14, 4LL);
      size_t v13 = *(void *)(a2 + 96) - 4LL;
      if (v14 > v13) {
        return 0xFFFFFFFFLL;
      }
      memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + 4LL), v13);
      *(void *)(a2 + 96) -= 4LL;
    }

    *a3 = *(_OWORD *)(a2 + 96);
    krb5_data_zero((void *)(a2 + 96));
    return 0LL;
  }

  return result;
}

void sub_1882EF7AC(uint64_t a1)
{
  int v2 = sub_1882EAB5C( *(_krb5_context **)(a1 + 40),  *(void *)(*(void *)(*(void *)(a1 + 48) + 32LL) + 144LL),  *(const char **)(a1 + 56),  (__int128 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  v9);
  krb5_data_free((void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  free(*(void **)(a1 + 56));
  if (!v2)
  {
    sub_1882EEFD0( *(void *)(a1 + 40),  v3,  *(void *)(a1 + 48),  "kkdcp: got %d bytes, feeding them back",  v4,  v5,  v6,  v7,  v9[0]);
    krb5_net_write_block(*(void *)(a1 + 40), (int *)(*(void *)(a1 + 48) + 68LL), (char *)v9[1], v9[0], 2LL);
    krb5_data_free(v9);
  }

  close(*(_DWORD *)(*(void *)(a1 + 48) + 68LL));
  uint64_t v8 = *(void *)(a1 + 48);
  *(_DWORD *)(v8 + 6_Block_object_dispose((const void *)(v1 - 128), 8) = -1;
  heim_release(*(CFTypeRef *)(v8 + 32));
  heim_release(*(CFTypeRef *)(a1 + 48));
  heim_release(*(CFTypeRef *)(a1 + 40));
}

uint64_t sub_1882EF87C( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (size_t *)(a2 + 96);
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_tcp called twice:host->data.length == 0", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v14);
  }
  uint64_t v10 = krb5_storage_emem();
  if (!v10) {
    return 12LL;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = krb5_store_data((uint64_t)v10, *a3, a3[1]);
  if (!(_DWORD)v12) {
    uint64_t v12 = krb5_storage_to_data(v11, v8);
  }
  krb5_storage_free(v11);
  return v12;
}

uint64_t sub_1882EF8F8(int *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result = sub_1882EF36C(a1, a2);
  if (!(_DWORD)result)
  {
    if (*(void *)(a2 + 96) >= 4uLL
      && (_krb5_get_int(*(unsigned __int8 **)(a2 + 104), &v7, 4LL), size_t v6 = *(void *)(a2 + 96) - 4LL, v7 <= v6))
    {
      memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + 4LL), v6);
      *(void *)(a2 + 96) -= 4LL;
      *a3 = *(_OWORD *)(a2 + 96);
      krb5_data_zero((void *)(a2 + 96));
      return 0LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_1882EF998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return krb5_data_copy((void *)(a2 + 96), *(const void **)(a3 + 8), *(void *)a3);
}

uint64_t sub_1882EF9A4(uint64_t a1, uint64_t a2)
{
  ssize_t v2 = send(*(_DWORD *)(a2 + 64), *(const void **)(a2 + 104), *(void *)(a2 + 96), 0);
  uint64_t result = 0LL;
  if (v2 < 0) {
    return *__error();
  }
  return result;
}

uint64_t sub_1882EF9DC(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (ioctl(*(_DWORD *)(a2 + 64), 0x4004667FuLL)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (int)v20 <= 0;
  }
  if (v10)
  {
    sub_1882EEFD0((uint64_t)a1, v20, a2, "failed to get nbytes from socket, no bytes there?", v6, v7, v8, v9, (char)&v20);
    return 2314790848LL;
  }

  else if ((signed int)v20 <= *((_DWORD *)a1 + 85))
  {
    uint64_t v11 = krb5_data_alloc((size_t *)a3, v20);
    if (!(_DWORD)v11)
    {
      ssize_t v12 = recv(*(_DWORD *)(a2 + 64), *(void **)(a3 + 8), *(void *)a3, 0);
      if (v12 < 0)
      {
        size_t v13 = __error();
        sub_1882EEFD0((uint64_t)a1, v14, a2, "read data from nbytes from host: %d", v15, v16, v17, v18, *v13);
        uint64_t v11 = *__error();
        krb5_data_free((void *)a3);
      }

      else
      {
        uint64_t v11 = 0LL;
        *(void *)a3 = v12;
      }
    }
  }

  else
  {
    uint64_t v11 = 2529638973LL;
    sub_1882EEFD0((uint64_t)a1, v20, a2, "server sent too large message %d (max is %d)", v6, v7, v8, v9, v20);
    krb5_set_error_message(a1, -1765328323, "UDP message from KDC too large %d", v20);
  }

  return v11;
}

uint64_t sub_1882EFB0C( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = close(*(_DWORD *)(a2 + 64));
  *(_DWORD *)(a2 + 64) = -1;
  *(_DWORD *)(a2 + 40) = 4;
  return result;
}

void sub_1882EFB58(uint64_t a1, uint64_t a2, const char *a3, va_list a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 0LL;
  if (_krb5_have_debug(a1) && vasprintf(&v11, a3, a4) != -1 && v11)
  {
    uint64_t v8 = **(int **)(a2 + 48);
    else {
      uint64_t v9 = off_18A21A410[v8];
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (!v10 || getnameinfo(*(const sockaddr **)(v10 + 32), *(_DWORD *)(v10 + 16), v13, 0x401u, v12, 0x20u, 10))
    {
      v13[0] = 0;
      v12[0] = 0;
    }

    sub_1882DFCE8( a1,  5,  "%s: %s %s:%s (%s) tid: %08x",  v11,  v9,  v13,  v12,  (const char *)(*(void *)(a2 + 48) + 48LL),  *(_DWORD *)(a2 + 112));
    free(v11);
  }

void *sub_1882EFC90( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = *(_DWORD *)(a2 + 40);
  if (v9 == 4) {
    return result;
  }
  uint64_t v11 = result;
  if (!v9)
  {
    uint64_t v12 = *(void *)(a2 + 88);
    if (v12 >= result[8])
    {
      uint64_t v17 = *(void *)(result[4] + 8LL);
      uint64_t v18 = *(void *)(v17 + 24);
      if (!v18 || *(void *)(v18 + 88) > v12) {
        *(void *)(v17 + 24) = a2;
      }
      return result;
    }

    sub_1882EEEDC(result[9], result[10], a2, a4, a5, a6, a7, a8);
  }

  if (*(void *)(a2 + 88) >= v11[8]) {
    return (void *)sub_1882EFDC8( a2,  (char *)(*(void *)(v11[5] + 8LL) + 24LL),  *(void *)(v11[6] + 8LL) + 24LL,  (_DWORD *)(*(void *)(v11[7] + 8LL) + 24LL),  a5,  a6,  a7,  a8);
  }
  int v13 = *(_DWORD *)(a2 + 80);
  if (!v13) {
    heim_abort("tries should not reach 0:h->tries != 0", a2, a3, a4, a5, a6, a7, a8, v19);
  }
  uint64_t v14 = v11[9];
  int v15 = v13 - 1;
  *(_DWORD *)(a2 + 80) = v15;
  if (v15)
  {
    sub_1882EEFD0(v14, a2, a2, "retrying sending to", a5, a6, a7, a8, v19);
    unint64_t v16 = *(void *)(v11[9] + 88LL) / *(int *)(*(void *)(a2 + 72) + 24LL);
    if (v16 <= 1) {
      unint64_t v16 = 1LL;
    }
    *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = v16;
    *(void *)(a2 + 88) += time(0LL);
    sub_1882EF004(v11[9], v11[10], a2);
    return (void *)sub_1882EFDC8( a2,  (char *)(*(void *)(v11[5] + 8LL) + 24LL),  *(void *)(v11[6] + 8LL) + 24LL,  (_DWORD *)(*(void *)(v11[7] + 8LL) + 24LL),  a5,  a6,  a7,  a8);
  }

  return (void *)sub_1882EFB0C(v14, a2, "host timed out", a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1882EFDC8( uint64_t result, char *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(result + 64);
  if (v8 >= 1024) {
    heim_abort("fd too large:h->fd < FD_SETSIZE", (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, v15);
  }
  uint64_t v11 = result;
  int v12 = *(_DWORD *)(result + 40);
  if ((v12 - 1) >= 2)
  {
    if (v12 != 3) {
      goto LABEL_10;
    }
    uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(result + 64), a2, 0);
    int v13 = a2;
    if (!(_DWORD)result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  int v13 = (char *)a3;
  if (__darwin_check_fd_set_overflow(*(_DWORD *)(result + 64), a2, 0)) {
    *(_DWORD *)&a2[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v8;
  }
  int v8 = *(_DWORD *)(v11 + 64);
  uint64_t result = __darwin_check_fd_set_overflow(v8, v13, 0);
  if ((_DWORD)result) {
LABEL_9:
  }
    *(_DWORD *)&v13[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v8;
LABEL_10:
  int v14 = *(_DWORD *)(v11 + 64);
  if (v14 > *a4) {
    *a4 = v14 + 1;
  }
  return result;
}

uint64_t sub_1882EFED4(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 40))
  {
    uint64_t v2 = *(void *)(a2 + 88) - *(void *)(result + 32);
    *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = v2;
    if (v2 <= *(void *)(result + 40)) {
      uint64_t v2 = *(void *)(result + 40);
    }
    *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = v2;
  }

  return result;
}

BOOL sub_1882EFF04(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == 4;
}

void sub_1882EFF14( void *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 40) == 4) {
    heim_abort("dead host resurected:h->state != DEAD", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v34);
  }
  unint64_t v9 = *(int *)(a2 + 64);
  int v12 = (const void *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (__darwin_check_fd_set_overflow(*(_DWORD *)(a2 + 64), v12, 0)) {
    int v13 = *(_DWORD *)((_BYTE *)v12 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) & (1 << v9);
  }
  else {
    int v13 = 0;
  }
  int v14 = *(_DWORD *)(a2 + 64);
  char v15 = (char *)(*(void *)(a1[5] + 8LL) + 24LL);
  if (__darwin_check_fd_set_overflow(v14, v15, 0))
  {
    int v21 = (*(_DWORD *)&v15[((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v14) & 1;
    if (v13) {
      goto LABEL_11;
    }
  }

  else
  {
    int v21 = 0;
    if (v13) {
      goto LABEL_11;
    }
  }

  if (!v21) {
    goto LABEL_28;
  }
LABEL_11:
  uint64_t v22 = a1[7];
  uint64_t v23 = a1[8];
  char v24 = v21 ^ 1;
  if (*(_DWORD *)(a2 + 40) != 1) {
    char v24 = 1;
  }
  if ((v24 & 1) == 0) {
    sub_1882EF004(a1[7], a1[8], a2);
  }
  if (!v13
    || (sub_1882EEFD0(v22, v16, a2, "reading packet", v17, v18, v19, v20, v34),
        int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 72) + 16LL))(v22, a2, v23 + 120),
        v25 == -1))
  {
LABEL_20:
    if (v21)
    {
      if (*(_DWORD *)(a2 + 40) == 2)
      {
        ++*(void *)(v23 + 224);
        sub_1882EEFD0(v22, v16, a2, "writing packet", v17, v18, v19, v20, v34);
        int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 72) + 8LL))(v22, a2);
        if (v28 != -1)
        {
          if (!v28)
          {
            int v27 = 0;
            *(_DWORD *)(a2 + 40) = 3;
            goto LABEL_27;
          }

          sub_1882EFB0C(v22, a2, "host dead, write failed", v29, v30, v31, v32, v33, v35);
        }
      }
    }

    int v27 = 0;
    goto LABEL_27;
  }

  if (v25)
  {
    sub_1882EFB0C(v22, a2, "host disconnected", v26, v17, v18, v19, v20, v34);
    goto LABEL_20;
  }

  sub_1882EEFD0(v22, v16, a2, "host completed", v17, v18, v19, v20, v34);
  int v27 = 1;
LABEL_27:
  *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) |= v27;
LABEL_28:
  if (*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

krb5_error_code krb5_sendauth( krb5_context a1, krb5_auth_context *a2, krb5_pointer a3, char *a4, krb5_principal a5, krb5_principal a6, krb5_flags a7, krb5_data *a8, krb5_creds *a9, krb5_ccache cache, krb5_error **a11, krb5_ap_rep_enc_part **a12, krb5_creds **a13)
{
  krb5_principal principal = 0LL;
  *(_DWORD *)char __buf = 318767104;
  if (krb5_net_write((int)a1, (int *)a3, __buf, 4uLL) != 4
    || krb5_net_write((int)a1, (int *)a3, "KRB5_SENDAUTH_V1.0", 0x13uLL) != 19
    || (size_t v21 = strlen(a4),
        size_t v22 = v21 + 1,
        *(_DWORD *)char __buf = bswap32(v21 + 1),
        krb5_net_write((int)a1, (int *)a3, __buf, 4uLL) != 4)
    || krb5_net_write((int)a1, (int *)a3, a4, v22) != v22)
  {
    int v24 = *__error();
    strerror(v24);
    krb5_set_error_message(a1, v24, "write: %s");
    return v24;
  }

  ssize_t v23 = krb5_net_read((int)a1, (int *)a3, &v53, 1uLL);
  if (v23 < 0)
  {
    int v24 = *__error();
    strerror(v24);
    krb5_set_error_message(a1, v24, "read: %s");
    return v24;
  }

  if (v23 != 1)
  {
    int v24 = -1765328178;
    goto LABEL_13;
  }

  if (v53)
  {
    krb5_clear_error_message(a1);
    return -1765328177;
  }

  uint64_t v26 = a9;
  if (!a9)
  {
    krb5_ccache v27 = cache;
    if (cache)
    {
      int v28 = 0;
      if (!a5)
      {
LABEL_19:
        krb5_error_code v29 = krb5_cc_get_principal(a1, cache, &principal);
        if (v29)
        {
          int v24 = v29;
          if (v27) {
            return v24;
          }
LABEL_30:
          krb5_cc_close(a1, cache);
          return v24;
        }

        a5 = principal;
      }
    }

    else
    {
      int v24 = krb5_cc_default(a1, &cache);
      if (v24) {
        return v24;
      }
      int v28 = 1;
      if (!a5) {
        goto LABEL_19;
      }
    }

    memset(&v50[16], 0, 128);
    *(void *)__int128 v50 = a5;
    *(void *)&v50[8] = a6;
    uint64_t v26 = (krb5_creds *)v50;
    goto LABEL_28;
  }

  if (a9->addresses)
  {
    int v48 = a9;
    goto LABEL_33;
  }

  int v28 = 0;
LABEL_28:
  krb5_error_code credentials = krb5_get_credentials(a1, 0, cache, v26, &v48);
  if (credentials)
  {
    int v24 = credentials;
    if (!v28) {
      return v24;
    }
    goto LABEL_30;
  }

  if (v28) {
    krb5_cc_close(a1, cache);
  }
LABEL_33:
  uint64_t v31 = a13;
  int v24 = krb5_mk_req_extended(a1, a2, a7, a8, v48, &v52);
  if (v31)
  {
    *uint64_t v31 = v48;
  }

  else if (v48)
  {
    krb5_free_creds(a1, v48);
  }

  if (principal) {
    krb5_free_principal(a1, principal);
  }
  if (!v24)
  {
    krb5_error_code message = krb5_write_message(a1, (int *)a3, (char **)&v52);
    if (message) {
      goto LABEL_42;
    }
    krb5_data_free(&v52);
    krb5_error_code message = krb5_read_message(a1, (int *)a3, (uint64_t)&v51);
    if (message) {
      goto LABEL_42;
    }
    if (*(void *)&v51.magic)
    {
      int v24 = krb5_rd_error(a1, &v51, (krb5_error **)&v41);
      krb5_data_free(&v51);
      if (!v24)
      {
        uint64_t v33 = a11;
        int v24 = krb5_error_from_rd_error(a1, (uint64_t)&v41, 0LL);
        if (v33 && (v34 = malloc(0x68uLL), (*uint64_t v33 = (krb5_error *)v34) != 0LL))
        {
          __int128 v35 = v46;
          v34[4] = v45;
          v34[5] = v35;
          *((void *)v34 + 12) = v47;
          __int128 v36 = v42;
          *char v34 = v41;
          v34[1] = v36;
          __int128 v37 = v44;
          _OWORD v34[2] = v43;
          v34[3] = v37;
        }

        else
        {
          krb5_free_error_contents((uint64_t)a1, (uint64_t)&v41);
        }

        return v24;
      }

krb5_error_code krb5_set_default_realm(krb5_context a1, const char *a2)
{
  uint64_t v18 = 0LL;
  uint64_t v4 = heim_array_create();
  uint64_t v5 = v4;
  if (a2)
  {
    sub_1882F0678((int)v4, v4, (char *)a2);
  }

  else
  {
    krb5_plugin_run_f((uint64_t)a1, "krb5", "krb5_configuration", 0, 0LL, (uint64_t)v4, (uint64_t)sub_1882F06C0);
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0LL, v6, v7, v8, v9, v10, v11, (uint64_t)"libdefaults");
    int v13 = strings;
    uint64_t v18 = strings;
    if (strings) {
      goto LABEL_4;
    }
    if (!heim_array_get_length(v5))
    {
      LODWORD(strings) = krb5_get_host_realm(a1, 0LL, &v18);
      if ((_DWORD)strings)
      {
        krb5_error_code v16 = (int)strings;
        heim_release(v5);
        return v16;
      }

      int v13 = v18;
      if (v18)
      {
LABEL_4:
        int v14 = *v13;
        if (*v13)
        {
          uint64_t v15 = 1LL;
          do
          {
            sub_1882F0678((int)strings, v5, v14);
            int v13 = v18;
            int v14 = v18[v15++];
          }

          while (v14);
        }

        krb5_free_host_realm(a1, v13);
      }
    }
  }

  heim_release(*((CFTypeRef *)a1 + 9));
  krb5_error_code v16 = 0;
  *((void *)a1 + 9) = v5;
  return v16;
}

void sub_1882F0678(int a1, __CFArray *a2, char *cStr)
{
  CFStringRef v4 = heim_string_create(cStr);
  if (v4)
  {
    CFStringRef v5 = v4;
    heim_array_append_value(a2, v4);
    heim_release(v5);
  }

uint64_t sub_1882F06C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (*)(int, __CFArray *, char *)))(a2 + 24);
  if (v4) {
    return v4(a1, a3, a4, sub_1882F0678);
  }
  else {
    return 2529639161LL;
  }
}

uint64_t krb5_sock_to_principal(_krb5_context *a1, int a2, const char *a3, krb5_int32 a4, krb5_principal *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  socklen_t v15 = 128;
  if (getsockname(a2, &v17, &v15) < 0)
  {
    int v13 = __error();
    uint64_t v12 = *v13;
    strerror(*v13);
    krb5_set_error_message(a1, v12, "getsockname: %s");
  }

  else
  {
    uint64_t v9 = getnameinfo(&v17, v15, v16, 0x401u, 0LL, 0, 0);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = __error();
      uint64_t v12 = krb5_eai_to_heim_errno(v10, *v11);
      gai_strerror(v10);
      krb5_set_error_message(a1, v12, "getnameinfo: %s");
    }

    else
    {
      return krb5_sname_to_principal(a1, v16, a3, a4, a5);
    }
  }

  return v12;
}

void *krb5_storage_emem()
{
  time_t v0 = malloc(0x40uLL);
  if (v0)
  {
    uint64_t v1 = malloc(0x20uLL);
    if (v1)
    {
      uint64_t v2 = v1;
      *time_t v0 = v1;
      v0[6] = 0x89F8E70500000000LL;
      v1[1] = 1024LL;
      uint64_t v3 = malloc(0x400uLL);
      void *v2 = v3;
      if (v3)
      {
        v2[2] = 0LL;
        v2[3] = v3;
        v0[1] = sub_1882F08DC;
        v0[2] = sub_1882F093C;
        v0[3] = sub_1882F09E8;
        v0[4] = sub_1882F0A90;
        v0[5] = sub_1882F0B64;
        v0[7] = 0x1FFFFFFFLL;
        return v0;
      }

      free(v0);
      CFStringRef v4 = v2;
    }

    else
    {
      CFStringRef v4 = v0;
    }

    free(v4);
    return 0LL;
  }

  return v0;
}

size_t sub_1882F08DC(void **a1, void *__dst, size_t a3)
{
  CFStringRef v5 = (const void *)(*a1)[3];
  if (**a1 + (*a1)[2] - (void)v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = **a1 + (*a1)[2] - (void)v5;
  }
  memmove(__dst, v5, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1LL);
  return v6;
}

size_t sub_1882F093C(void ***a1, void *__src, size_t __len)
{
  size_t v3 = __len;
  size_t v6 = *a1;
  uint64_t v7 = **a1;
  uint64_t v8 = (char *)v6[3];
  if ((char *)v6[1] + (void)v7 - v8 < __len)
  {
    int64_t v9 = v8 - v7;
    size_t v10 = (v8 - v7 + __len) << (v8 - v7 + __len < 0x1000);
    uint64_t v11 = (char *)realloc(v7, v10);
    if (!v11) {
      return -1LL;
    }
    *size_t v6 = v11;
    v6[1] = (void *)v10;
    uint64_t v8 = &v11[v9];
    v6[3] = &v11[v9];
  }

  memmove(v8, __src, v3);
  ((void (*)(void ***, size_t, uint64_t))a1[3])(a1, v3, 1LL);
  return v3;
}

uint64_t sub_1882F09E8(uint64_t a1, unint64_t a2, int a3)
{
  size_t v3 = *(void **)a1;
  switch(a3)
  {
    case 2:
      size_t v6 = *(void (**)(void))(a1 + 24);
LABEL_10:
      v6();
      return v3[3] - *v3;
    case 1:
      size_t v6 = *(void (**)(void))(a1 + 24);
      goto LABEL_10;
    case 0:
      uint64_t v4 = v3[1];
      if (v4 >= a2) {
        uint64_t v4 = a2;
      }
      unint64_t v5 = v4 & ~(v4 >> 63);
      v3[3] = *v3 + v5;
      if (v5 > v3[2]) {
        v3[2] = v5;
      }
      return v3[3] - *v3;
  }

  *__error() = 22;
  return -1LL;
}

uint64_t sub_1882F0A90(void ***a1, size_t __size)
{
  size_t v3 = *a1;
  if (__size)
  {
    unint64_t v5 = *v3;
    size_t v4 = (size_t)v3[1];
    size_t v6 = (char *)v3[3];
    if (v4 < __size || v4 >> 1 > __size)
    {
      uint64_t v8 = (char *)realloc(*v3, __size);
      if (!v8) {
        return 12LL;
      }
      uint64_t v11 = v8;
      uint64_t v9 = v6 - v5;
      size_t v10 = (char *)v3[1];
      void *v3 = v11;
      v3[1] = (void *)__size;
      size_t v6 = &v11[v9];
      v3[3] = &v11[v9];
    }

    else
    {
      uint64_t v11 = (char *)*v3;
    }
  }

  else
  {
    free(*v3);
    uint64_t v11 = 0LL;
    size_t v6 = 0LL;
    v3[3] = 0LL;
    void *v3 = 0LL;
    v3[1] = 0LL;
  }

  v3[2] = (void *)__size;
  uint64_t result = 0LL;
  return result;
}

void sub_1882F0B64(void ***a1)
{
  uint64_t v1 = *a1;
  bzero(**a1, (size_t)(*a1)[2]);
  free(*v1);
}

uint64_t _krb5_auth_con_setup_pfs(_krb5_context *a1, uint64_t a2, unsigned int a3)
{
  size_t v6 = (void *)MEMORY[0x1895C1650]();
  ccDRBGGetRngState();
  sub_1882DFCE8((uint64_t)a1, 20, "Setting up PFS for auth context");
  uint64_t v7 = (krb5_keyblock *)calloc(1uLL, 0x90uLL);
  if (!v7) {
    return krb5_enomem(a1);
  }
  int v14 = v7;
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, v8, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
  krb5_error_code v16 = strings;
  if (strings)
  {
    sockaddr v17 = (const char *)*strings;
    if (!*strings)
    {
      krb5_config_free_strings(strings);
      v14[5].uint64_t magic = 0;
      goto LABEL_18;
    }

    uint64_t v18 = 0LL;
    uint64_t v19 = (const char **)(strings + 1);
    do
    {
      uint64_t v18 = sub_1882F1D48((uint64_t)a1, v18, v17);
      uint64_t v20 = *v19++;
      sockaddr v17 = v20;
    }

    while (v20);
  }

  else
  {
    LODWORD(v1_Block_object_dispose((const void *)(v1 - 128), 8) = sub_1882F1D48((uint64_t)a1, 0LL, "ALL");
  }

  krb5_config_free_strings(v16);
  v14[5].uint64_t magic = v18;
  if (!(_DWORD)v18)
  {
LABEL_18:
    sub_1882DFCE8((uint64_t)a1, 10, "No PFS configuration");
LABEL_19:
    free(v14);
    return 0LL;
  }

  if (a3 > 0x17 || ((1 << a3) & 0x870000) == 0) {
    goto LABEL_19;
  }
  *(_OWORD *)&v14[4].uint64_t magic = xmmword_18A21D520;
  v14[4].contents = 0LL;
  size_t v21 = (krb5_octet *)calloc(1uLL, (32LL * *v6) | 0x10);
  v14[2].contents = v21;
  if (!v21)
  {
LABEL_15:
    free(v14);
    return krb5_enomem(a1);
  }

  if (cccurve25519_make_key_pair() || ccec_generate_key_fips())
  {
    krb5_free_keyblock_contents(a1, v14 + 3);
    free(v14[2].contents);
    goto LABEL_15;
  }

  *(void *)(a2 + 104) = v14;
  return 0LL;
}

void sub_1882F0D7C(_krb5_context *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  if (v2)
  {
    free(*(void **)(v2 + 64));
    krb5_free_keyblock_contents(a1, (krb5_keyblock *)(*(void *)(a2 + 104) + 72LL));
    krb5_free_principal(a1, *(krb5_principal *)(*(void *)(a2 + 104) + 128LL));
    unint64_t v5 = *(_OWORD **)(a2 + 104);
    v5[7] = 0u;
    v5[8] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    v5[3] = 0u;
    void v5[4] = 0u;
    v5[1] = 0u;
    void v5[2] = 0u;
    _OWORD *v5 = 0u;
    free(*(void **)(a2 + 104));
    *(void *)(a2 + 104) = 0LL;
  }

uint64_t sub_1882F0DF4( _krb5_context *a1, uint64_t a2, const char *a3, krb5_keyblock *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 104);
  memset(&v15, 0, sizeof(v15));
  if (!v8) {
    heim_abort("no PFS requestd:pfs", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v14);
  }
  uint64_t v9 = (const krb5_keyblock *)(v8 + 72);
  if (!*(_DWORD *)(v8 + 72)) {
    heim_abort("shared secret completed:pfs->keyblock.keytype", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v14);
  }
  if (!*(_DWORD *)(v8 + 136)) {
    heim_abort( "no pfs group selected:pfs->group != KRB5_PFS_INVALID",  a2,  (uint64_t)a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  v14);
  }
  sub_1882DFCE8((uint64_t)a1, 10, "krb5_pfs: updating to PFS key for direction %s", a3);
  uint64_t result = _krb5_fast_cf2(a1, a4, "AP PFS shared key", v9, a3, &v15, 0LL);
  if ((_DWORD)result != -1980176606)
  {
    if ((_DWORD)result) {
      return result;
    }
    krb5_free_keyblock_contents(a1, a4);
    *a4 = v15;
    _krb5_debug_keyblock((uint64_t)a1, 20, a3, (uint64_t)a4);
  }

  return 0LL;
}

uint64_t sub_1882F0EF0(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, unsigned int *a4)
{
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v28 = 0LL;
  krb5_error_code v29 = 0LL;
  size_t v33 = 0LL;
  char v34 = 0LL;
  v30[0] = 0LL;
  v30[1] = 0LL;
  krb5_data_zero(&v26);
  if (!sub_1882F11B0(a1, a2)) {
    return 0LL;
  }
  int v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 1) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v12 = sub_1882F1A58(a1, (uint64_t)&v35);
    if ((_DWORD)v12) {
      goto LABEL_11;
    }
    uint64_t checksum = sub_1882FDB18((unsigned int *)v30);
    sub_1882FDB08();
    if ((_DWORD)checksum) {
      goto LABEL_12;
    }
    goto LABEL_4;
  }

  int v35 = 2;
  uint64_t v12 = krb5_data_copy(&v36, (const void *)(v8 + 32), 0x20uLL);
  if ((_DWORD)v12)
  {
LABEL_11:
    uint64_t checksum = v12;
    sub_1882FDB08();
    goto LABEL_12;
  }

  uint64_t checksum = sub_1882FDB18((unsigned int *)v30);
  sub_1882FDB08();
  if ((_DWORD)checksum) {
    goto LABEL_12;
  }
  if ((*(_DWORD *)(v8 + 120) & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v10 = krb5_copy_principal(a1, a3, (krb5_principal *)(v8 + 128));
  if ((_DWORD)v10)
  {
    uint64_t checksum = v10;
    sub_1882F0D7C(a1, a2);
    sub_1882FDBDC();
    return checksum;
  }

  uint64_t checksum = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0LL, &v31);
  if (!(_DWORD)checksum)
  {
    uint64_t v26 = sub_1882FDBCC();
    krb5_ccache v27 = malloc(v26);
    if (v27)
    {
      uint64_t v14 = sub_1882FDBAC();
      if ((_DWORD)v14)
      {
        uint64_t checksum = v14;
        free(v27);
        krb5_ccache v27 = 0LL;
        goto LABEL_12;
      }

      if (v28 != v26) {
        heim_abort("internal asn1 error:size == data.length", v15, v16, v17, v18, v19, v20, v21, v25);
      }
      size_t v22 = calloc(1uLL, 0x18uLL);
      krb5_error_code v29 = v22;
      if (!v22)
      {
        uint64_t v24 = krb5_enomem(a1);
        goto LABEL_30;
      }

      uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v31, 0xFFFFFFE5, 0, (uint64_t)v27, v26, (uint64_t)v22);
      if ((_DWORD)checksum) {
        goto LABEL_12;
      }
      LODWORD(v32) = 513;
      size_t v33 = sub_1882FDBCC();
      char v34 = malloc(v33);
      if (v34)
      {
        uint64_t v23 = sub_1882FDBAC();
        if ((_DWORD)v23)
        {
          uint64_t checksum = v23;
          free(v34);
          char v34 = 0LL;
          goto LABEL_12;
        }

        if (v33 != v28) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v24 = sub_1882FD5EC(a4);
LABEL_30:
        uint64_t checksum = v24;
        goto LABEL_12;
      }
    }

    uint64_t checksum = 12LL;
  }

BOOL sub_1882F11B0(_krb5_context *a1, uint64_t a2)
{
  int v4 = krb5_crypto_prf_length(a1, **(_DWORD **)(a2 + 32), &v7);
  if (v4 == -1980176606)
  {
    sub_1882DFCE8((uint64_t)a1, 10, "Enctype %d doesn't support PFS", **(_DWORD **)(a2 + 32));
    return 0LL;
  }

  else
  {
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v7 == 0;
    }
    return !v6;
  }

uint64_t sub_1882F1230(_krb5_context *a1, uint64_t a2)
{
  uint64_t v40 = 0LL;
  uint64_t v43 = 0LL;
  __int128 v44 = 0LL;
  __int128 v42 = 0LL;
  krb5_data_zero(&v41);
  uint64_t v11 = *(void *)(a2 + 64);
  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(v11 + 80);
  if (!v12) {
    return v12;
  }
  if (!*(void *)(a2 + 32)) {
    heim_abort("pfs: don't have keyblock:auth_context->keyblock", v4, v5, v6, v7, v8, v9, v10, ctype[0]);
  }
  uint64_t v12 = sub_1882FDB8C();
  krb5_data_free(&v41);
  if ((_DWORD)v12) {
    goto LABEL_18;
  }
  uint64_t v14 = *(const krb5_keyblock **)(a2 + 32);
  uint64_t v45 = 0LL;
  uint64_t v15 = v42;
  if (!v42)
  {
    uint64_t v12 = 2314790689LL;
    krb5_ccache v27 = "peer sent no checksum";
LABEL_14:
    krb5_set_error_message(a1, -1980176607, v27);
    goto LABEL_18;
  }

  __int128 v42 = 0LL;
  size_t v16 = sub_1882FDBCC();
  uint64_t v17 = malloc(v16);
  if (!v17)
  {
    uint64_t v12 = 12LL;
    goto LABEL_17;
  }

  uint64_t v18 = v17;
  uint64_t v19 = sub_1882FDBAC();
  if ((_DWORD)v19)
  {
    uint64_t v12 = v19;
    free(v18);
LABEL_17:
    __int128 v42 = v15;
    goto LABEL_18;
  }

  __int128 v42 = v15;
  if (v16 != v45) {
    heim_abort("internal asn1 encode error:data.length == size", v20, v21, v22, v23, v24, v25, v26, ctype[0]);
  }
  uint64_t v28 = krb5_crypto_init(a1, v14, 0LL, (krb5_keyblock ***)ctype);
  if ((_DWORD)v28)
  {
    uint64_t v12 = v28;
    free(v18);
    goto LABEL_18;
  }

  if (!krb5_checksum_is_keyed((uint64_t)a1, *v15))
  {
    uint64_t v12 = 2314790689LL;
    free(v18);
    krb5_ccache v27 = "checksum not keyed";
    goto LABEL_14;
  }

  uint64_t v12 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE5LL, v18, v16, v15, v29);
  krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  free(v18);
  if ((_DWORD)v12) {
    goto LABEL_18;
  }
  uint64_t v12 = _krb5_auth_con_setup_pfs(a1, a2, **(_DWORD **)(a2 + 32));
  if ((_DWORD)v12) {
    goto LABEL_18;
  }
  if (!(_DWORD)v43)
  {
LABEL_44:
    uint64_t v12 = 2314790688LL;
    krb5_set_error_message(a1, -1980176608, "No acceptable PFS group sent");
    goto LABEL_18;
  }

  uint64_t v30 = v44;
  unint64_t v31 = 1LL;
  do
  {
    if (*v30 == 2)
    {
      int v32 = 1;
    }

    else
    {
      if (*v30 != 1)
      {
        uint64_t v33 = 0LL;
        goto LABEL_35;
      }

      int v32 = 2;
    }

    if ((*(_DWORD *)(*(void *)(a2 + 104) + 120LL) & v32) != 0) {
      uint64_t v33 = (uint64_t)v30;
    }
    else {
      uint64_t v33 = 0LL;
    }
LABEL_35:
    if (v33) {
      break;
    }
    v30 += 6;
  }

  while (v31++ < v43);
  if (!v33) {
    goto LABEL_44;
  }
  int v35 = (void *)(*(void *)(a2 + 104) + 128LL);
  uint64_t v36 = *(void *)(a2 + 64);
  __int128 v37 = *(const char **)(v36 + 8);
  *(_OWORD *)ctype = *(_OWORD *)(v36 + 16);
  uint64_t v39 = *(void *)(v36 + 32);
  uint64_t v12 = _krb5_principalname2krb5_principal((uint64_t)a1, v35, (uint64_t)ctype, v37);
  if (!(_DWORD)v12)
  {
    uint64_t v12 = sub_1882F1554(a1, a2, **(unsigned int **)(a2 + 32), v33);
    if (!(_DWORD)v12)
    {
      sub_1882FDBDC();
      sub_1882DFCE8((uint64_t)a1, 10, "PFS server made selected");
      return v12;
    }
  }

uint64_t sub_1882F1554(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a2 + 104);
  ccDRBGGetRngState();
  if (!v7) {
    heim_abort("no PFS requestd:pfs", v8, v9, v10, v11, v12, v13, v14, v23[0]);
  }
  uint64_t v15 = krb5_data_zero(&v24);
  if (*(_DWORD *)a4 == 1)
  {
    if ((*(_BYTE *)(v7 + 120) & 2) != 0)
    {
      uint64_t v18 = (void *)MEMORY[0x1895C1650](v15);
      uint64_t v19 = MEMORY[0x1895F8858]();
      if (MEMORY[0x1895C1674](v19, *(void *)(a4 + 8), *(void *)(a4 + 16), &v23[-v20]))
      {
        uint64_t v21 = "failed to import public key";
      }

      else
      {
        uint64_t v22 = krb5_data_alloc(&v24, 8LL * *v18);
        if ((_DWORD)v22)
        {
          uint64_t v16 = v22;
          goto LABEL_22;
        }

        if (!ccec_compute_key())
        {
LABEL_20:
          uint64_t v16 = _krb5_pk_kdf( a1,  (__int128 *)(v7 + 96),  (uint64_t)v25,  v24,  *(void *)(v7 + 128),  0LL,  a3,  0LL,  0LL,  0LL,  v7 + 72);
          if (!(_DWORD)v16)
          {
            _krb5_debug_keyblock((uint64_t)a1, 20, "PFS shared keyblock", v7 + 72);
            *(_DWORD *)(v7 + 136) = *(_DWORD *)a4;
          }

          goto LABEL_22;
        }

        uint64_t v21 = "Failed to complete share key";
      }

      uint64_t v16 = 2314790688LL;
      krb5_set_error_message(a1, -1980176608, v21);
      return v16;
    }

uint64_t sub_1882F17D0( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v45 = 0LL;
  if (!v8) {
    heim_abort("no pfs:pfs", a2, a3, a4, a5, a6, a7, a8, 0);
  }
  if (!*(_DWORD *)(v8 + 136)) {
    heim_abort("no pfs group selected:pfs->group != KRB5_PFS_INVALID", a2, a3, a4, a5, a6, a7, a8, 0);
  }
  krb5_data_zero(&v43);
  uint64_t v12 = calloc(1uLL, 0x20uLL);
  *(void *)(a3 + 40) = v12;
  if (!v12) {
    return krb5_enomem(a1);
  }
  int v20 = *(_DWORD *)(v8 + 136);
  if (v20 == 1)
  {
    uint64_t v21 = sub_1882F1A58(a1, (uint64_t)(v12 + 2));
  }

  else
  {
    if (v20 != 2) {
      heim_abort("Invalid PFS group:0", v13, v14, v15, v16, v17, v18, v19, 0);
    }
    krb5_timestamp v12[2] = 2;
    uint64_t v21 = krb5_data_copy((void *)v12 + 2, (const void *)(v8 + 32), 0x20uLL);
  }

  uint64_t checksum = v21;
  if (!(_DWORD)v21)
  {
    uint64_t checksum = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0LL, &v45);
    if (!(_DWORD)checksum)
    {
      uint64_t v43 = sub_1882FDC0C();
      __int128 v44 = malloc(v43);
      if (v44)
      {
        uint64_t v24 = sub_1882FDBEC();
        if ((_DWORD)v24)
        {
          uint64_t checksum = v24;
          free(v44);
          __int128 v44 = 0LL;
        }

        else
        {
          if (v43) {
            heim_abort("internal asn1 error:size == data.length", v25, v26, v27, v28, v29, v30, v31, 0);
          }
          int v32 = calloc(1uLL, 0x18uLL);
          **(void **)(a3 + 40) = v32;
          if (v32)
          {
            uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v45, 0xFFFFFFE3, 0, (uint64_t)v44, v43, (uint64_t)v32);
            if (!(_DWORD)checksum)
            {
              sub_1882DFCE8((uint64_t)a1, 20, "PFS deriving new keys on server");
              uint64_t checksum = sub_1882F0DF4(a1, a2, "session key", *(krb5_keyblock **)(a2 + 32), v33, v34, v35, v36);
              if (!(_DWORD)checksum)
              {
                uint64_t v41 = *(krb5_keyblock **)(a2 + 40);
                if (!v41
                  || (uint64_t checksum = sub_1882F0DF4(a1, a2, "server key", v41, v37, v38, v39, v40), !(_DWORD)checksum))
                {
                  __int128 v42 = *(krb5_keyblock **)(a2 + 48);
                  if (!v42
                    || (uint64_t checksum = sub_1882F0DF4(a1, a2, "client key", v42, v37, v38, v39, v40), !(_DWORD)checksum))
                  {
                    uint64_t checksum = 0LL;
                    *(_DWORD *)a2 |= 0x100u;
                  }
                }
              }
            }
          }

          else
          {
            uint64_t checksum = krb5_enomem(a1);
          }
        }
      }

      else
      {
        uint64_t checksum = 12LL;
      }
    }
  }

  sub_1882F0D7C(a1, a2);
  krb5_crypto_destroy(a1, (uint64_t)v45);
  if (v44) {
    free(v44);
  }
  if ((_DWORD)checksum && *(void *)(a3 + 40))
  {
    sub_1882FDC1C();
    free(*(void **)(a3 + 40));
    *(void *)(a3 + 40) = 0LL;
  }

  return checksum;
}

uint64_t sub_1882F1A58(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  size_t v4 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 128), 8) = v4;
  uint64_t v5 = malloc(v4);
  *(void *)(a2 + 16) = v5;
  if (!v5) {
    return krb5_enomem(a1);
  }
  ccec_export_pub();
  return 0LL;
}

uint64_t sub_1882F1AD4( krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a2 + 104)) {
    heim_abort("no pfs:auth_context->pfs", a2, a3, a4, a5, a6, a7, a8, v40);
  }
  uint64_t v9 = *(int ***)(a3 + 40);
  if (!v9) {
    heim_abort("no pfs from server:ap_rep->pfs", a2, a3, a4, a5, a6, a7, a8, v40);
  }
  uint64_t v12 = *(const krb5_keyblock **)(a2 + 32);
  uint64_t v13 = *v9;
  if (!*v9)
  {
    uint64_t v25 = 2314790689LL;
    krb5_set_error_message(a1, -1980176607, "peer sent no checksum", 0LL);
LABEL_10:
    sub_1882F0D7C(a1, a2);
    return v25;
  }

  const krb5_keyblock *v9 = 0LL;
  size_t v14 = sub_1882FDC0C();
  uint64_t v15 = malloc(v14);
  if (!v15)
  {
    uint64_t v25 = 12LL;
    goto LABEL_9;
  }

  uint64_t v16 = v15;
  uint64_t v17 = sub_1882FDBEC();
  if ((_DWORD)v17)
  {
    uint64_t v25 = v17;
    free(v16);
LABEL_9:
    const krb5_keyblock *v9 = v13;
    goto LABEL_10;
  }

  const krb5_keyblock *v9 = v13;
  if (v14) {
    heim_abort("internal asn1 encode error:data.length == size", v18, v19, v20, v21, v22, v23, v24, 0);
  }
  uint64_t v27 = krb5_crypto_init(a1, v12, 0LL, (krb5_keyblock ***)ctype);
  if ((_DWORD)v27)
  {
    uint64_t v25 = v27;
    free(v16);
    goto LABEL_10;
  }

  if (!krb5_checksum_is_keyed((uint64_t)a1, *v13))
  {
    uint64_t v25 = 2314790689LL;
    free(v16);
    krb5_set_error_message(a1, -1980176607, "checksum not keyed", 0LL);
    goto LABEL_10;
  }

  uint64_t v25 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE3LL, v16, v14, v13, v28);
  krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  free(v16);
  if ((_DWORD)v25) {
    goto LABEL_10;
  }
  uint64_t v25 = sub_1882F1554(a1, a2, **(unsigned int **)(a2 + 32), *(void *)(a3 + 40) + 8LL);
  if ((_DWORD)v25) {
    goto LABEL_10;
  }
  sub_1882DFCE8((uint64_t)a1, 10, "PFS client made secret");
  sub_1882DFCE8((uint64_t)a1, 20, "PFS deriving new keys on client");
  uint64_t v25 = sub_1882F0DF4(a1, a2, "session key", *(krb5_keyblock **)(a2 + 32), v29, v30, v31, v32);
  if ((_DWORD)v25) {
    goto LABEL_10;
  }
  uint64_t v39 = *(krb5_keyblock **)(a2 + 40);
  if (v39)
  {
    uint64_t v25 = sub_1882F0DF4(a1, a2, "client key", v39, v35, v36, v37, v38);
    if ((_DWORD)v25) {
      goto LABEL_10;
    }
  }

  if (!*(_DWORD *)(*(void *)(a2 + 104) + 136LL)) {
    heim_abort( "no pfs group selected:auth_context->pfs->group != KRB5_PFS_INVALID",  v33,  v34,  (uint64_t)v39,  v35,  v36,  v37,  v38,  0);
  }
  uint64_t v25 = 0LL;
  *(_DWORD *)a2 |= 0x100u;
  return v25;
}

uint64_t sub_1882F1D48(uint64_t a1, uint64_t a2, const char *a3)
{
  int v5 = *(unsigned __int8 *)a3;
  if (v5 == 45) {
    uint64_t v6 = a3 + 1;
  }
  else {
    uint64_t v6 = a3;
  }
  if (!strcasecmp(v6, "ALL"))
  {
    int v7 = 3;
  }

  else if (!strcasecmp(v6, "dh25519"))
  {
    int v7 = 1;
  }

  else
  {
    if (strcasecmp(v6, "nist-p256") && strcasecmp(v6, "p256") && strcasecmp(v6, "all-nist"))
    {
      sub_1882DFCE8(a1, 10, "unsupported dh curve(s): %s", v6);
      return a2;
    }

    int v7 = 2;
  }

  unsigned int v8 = a2 & ~v7;
  unsigned int v9 = v7 | a2;
  if (v5 == 45) {
    return v8;
  }
  else {
    return v9;
  }
}

void *krb5_storage_from_fd(int a1)
{
  int v1 = dup(a1);
  if (v1 < 0) {
    return 0LL;
  }
  int v2 = v1;
  size_t v3 = malloc(0x40uLL);
  if (!v3)
  {
    close(v2);
    return v3;
  }

  size_t v4 = malloc(4uLL);
  void *v3 = v4;
  if (!v4)
  {
    close(v2);
    free(v3);
    return 0LL;
  }

  v3[6] = 0x89F8E70500000000LL;
  _DWORD *v4 = v2;
  v3[1] = sub_1882F1EE8;
  v3[2] = sub_1882F1EF4;
  v3[3] = sub_1882F1F00;
  v3[4] = sub_1882F1F0C;
  v3[5] = sub_1882F1F40;
  v3[7] = 0x1FFFFFFFLL;
  return v3;
}

ssize_t sub_1882F1EE8(int **a1, char *a2, size_t a3)
{
  return sub_1882FA460(**a1, a2, a3);
}

size_t sub_1882F1EF4(int **a1, char *a2, size_t a3)
{
  return sub_1882FA4E0(**a1, a2, a3);
}

off_t sub_1882F1F00(int **a1, off_t a2, int a3)
{
  return lseek(**a1, a2, a3);
}

uint64_t sub_1882F1F0C(int **a1, off_t a2)
{
  if (ftruncate(**a1, a2) == -1) {
    return *__error();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1882F1F40(int **a1)
{
  return close(**a1);
}

void *krb5_storage_from_mem(uint64_t a1, uint64_t a2)
{
  size_t v4 = malloc(0x40uLL);
  if (v4)
  {
    int v5 = malloc(0x18uLL);
    if (v5)
    {
      void v4[6] = 0x89F8E70500000000LL;
      void *v5 = a1;
      v5[1] = a2;
      void v5[2] = a1;
      void *v4 = v5;
      v4[1] = sub_1882F1FEC;
      v4[2] = sub_1882F204C;
      v4[3] = sub_1882F20A4;
      v4[4] = sub_1882F2128;
      void v4[5] = 0LL;
      v4[7] = 0x1FFFFFFFLL;
    }

    else
    {
      free(v4);
      return 0LL;
    }
  }

  return v4;
}

size_t sub_1882F1FEC(void **a1, void *__dst, size_t a3)
{
  int v5 = (const void *)(*a1)[2];
  if (**a1 + (*a1)[1] - (void)v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = **a1 + (*a1)[1] - (void)v5;
  }
  memmove(__dst, v5, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1LL);
  return v6;
}

size_t sub_1882F204C(void **a1, const void *a2, size_t a3)
{
  uint64_t v4 = **a1 + (*a1)[1];
  int v5 = (void *)(*a1)[2];
  else {
    size_t v6 = v4 - (void)v5;
  }
  memmove(v5, a2, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1LL);
  return v6;
}

uint64_t sub_1882F20A4(uint64_t a1, unint64_t a2, int a3)
{
  size_t v3 = *(void **)a1;
  if (a3 == 2)
  {
    size_t v6 = *(uint64_t (**)(void))(a1 + 24);
    return v6();
  }

  if (a3 == 1)
  {
    size_t v6 = *(uint64_t (**)(void))(a1 + 24);
    return v6();
  }

  if (a3)
  {
    *__error() = 22;
    return -1LL;
  }

  else
  {
    uint64_t v4 = v3[1];
    if (v4 >= a2) {
      uint64_t v4 = a2;
    }
    uint64_t result = v4 & ~(v4 >> 63);
    v3[2] = *v3 + result;
  }

  return result;
}

uint64_t sub_1882F2128(uint64_t a1, unint64_t a2)
{
  int v2 = *(void **)a1;
  if (*(void *)(*(void *)a1 + 8LL) < a2) {
    return 34LL;
  }
  v2[1] = a2;
  uint64_t result = 0LL;
  return result;
}

void *krb5_storage_from_data(uint64_t *a1)
{
  return krb5_storage_from_mem(a1[1], *a1);
}

void *krb5_storage_from_readonly_mem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x40uLL);
  if (v4)
  {
    int v5 = malloc(0x18uLL);
    if (v5)
    {
      void v4[6] = 0x89F8E70500000000LL;
      void *v5 = a1;
      v5[1] = a2;
      void v5[2] = a1;
      void *v4 = v5;
      v4[1] = sub_1882F1FEC;
      v4[2] = sub_1882F221C;
      v4[3] = sub_1882F20A4;
      v4[4] = sub_1882F2224;
      void v4[5] = 0LL;
      v4[7] = 0x1FFFFFFFLL;
    }

    else
    {
      free(v4);
      return 0LL;
    }
  }

  return v4;
}

uint64_t sub_1882F221C()
{
  return -1LL;
}

uint64_t sub_1882F2224()
{
  return 22LL;
}

void *krb5_storage_from_mem_copy(const void *a1, size_t a2)
{
  uint64_t v4 = malloc(0x40uLL);
  if (v4)
  {
    int v5 = malloc(0x18uLL);
    if (v5)
    {
      size_t v6 = v5;
      void *v4 = v5;
      void v4[6] = 0x89F8E70500000000LL;
      int v7 = malloc(a2);
      *size_t v6 = v7;
      if (v7)
      {
        unsigned int v8 = v7;
        memcpy(v7, a1, a2);
        v6[1] = a2;
        v6[2] = v8;
        v4[1] = sub_1882F1FEC;
        v4[2] = sub_1882F204C;
        v4[3] = sub_1882F20A4;
        v4[4] = sub_1882F2128;
        void v4[5] = sub_1882F2308;
        return v4;
      }

      free(v4);
      unsigned int v9 = v6;
    }

    else
    {
      unsigned int v9 = v4;
    }

    free(v9);
    return 0LL;
  }

  return v4;
}

void sub_1882F2308(void ***a1)
{
  int v1 = *a1;
  bzero(**a1, (size_t)(*a1)[1]);
  free(*v1);
}

uint64_t krb5_storage_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) |= a2;
  return result;
}

uint64_t krb5_storage_clear_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) &= ~a2;
  return result;
}

BOOL krb5_storage_is_flags(uint64_t a1, int a2)
{
  return (a2 & ~*(_DWORD *)(a1 + 48)) == 0;
}

uint64_t krb5_storage_set_byteorder(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose((const void *)(v1 - 128), 8) = *(_DWORD *)(result + 48) & 0xFFFFFF9F | a2;
  return result;
}

uint64_t krb5_storage_get_byteorder(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) & 0x60;
}

uint64_t krb5_storage_seek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t krb5_storage_truncate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t krb5_storage_read(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t krb5_storage_write(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t krb5_storage_set_eof_code(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t krb5_storage_get_eof_code(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t krb5_storage_free(uint64_t a1)
{
  int v2 = *(void (**)(uint64_t))(a1 + 40);
  if (v2) {
    v2(a1);
  }
  free(*(void **)a1);
  free((void *)a1);
  return 0LL;
}

uint64_t krb5_storage_to_data(uint64_t a1, size_t *a2)
{
  uint64_t v4 = 2314790665LL;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a1 + 24))(a1, 0LL, 1LL);
  if (v5 < 0) {
    return 2314790664LL;
  }
  uint64_t v6 = v5;
  int64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a1 + 24))(a1, 0LL, 2LL);
  if (v7 <= 102400)
  {
    int64_t v8 = v7;
    int64_t v9 = *(void *)(a1 + 56);
    if (!v9 || v9 >= v7)
    {
      uint64_t v4 = krb5_data_alloc(a2, v7);
      if (!(_DWORD)v4)
      {
        if (!v8) {
          return 0LL;
        }
        (*(void (**)(uint64_t, void, void))(a1 + 24))(a1, 0LL, 0LL);
        (*(void (**)(uint64_t, size_t, size_t))(a1 + 8))(a1, a2[1], *a2);
        uint64_t v4 = 0LL;
      }

      (*(void (**)(uint64_t, uint64_t, void))(a1 + 24))(a1, v6, 0LL);
    }
  }

  return v4;
}

uint64_t krb5_store_int32(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 48) & 0x60) != 0x40 && (*(_DWORD *)(a1 + 48) & 1) == 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20) {
      a2 = sub_1882FBB18(a2);
    }
  }

  else
  {
    a2 = bswap32(a2);
  }

  return sub_1882F2530(a1, a2, 4LL);
}

uint64_t sub_1882F2530(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  _krb5_put_int((uint64_t)v8, a2, a3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(a1 + 16))(a1, v8, a3);
  if (v5 < 0)
  {
    int64_t v7 = __error();
  }

  else
  {
    if (v5 == a3) {
      return 0LL;
    }
    int64_t v7 = (int *)(a1 + 52);
  }

  return *v7;
}

uint64_t krb5_ret_int32(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = sub_1882F2640(a1, a2, 4LL);
  if (!(_DWORD)v4)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x40 || (*(_DWORD *)(a1 + 48) & 1) != 0)
    {
      unsigned int v6 = bswap32(*a2);
LABEL_9:
      *a2 = v6;
      return v4;
    }

    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20)
    {
      unsigned int v6 = sub_1882FBB18(*a2);
      goto LABEL_9;
    }
  }

  return v4;
}

uint64_t sub_1882F2640(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 8))(a1, v9);
  if (v6 < 0) {
    return *__error();
  }
  if (v6 != a3) {
    return *(unsigned int *)(a1 + 52);
  }
  _krb5_get_int(v9, &v8, a3);
  uint64_t result = 0LL;
  *a2 = v8;
  return result;
}

uint64_t krb5_ret_uint32(uint64_t a1, _DWORD *a2)
{
  uint64_t result = krb5_ret_int32(a1, &v4);
  if (!(_DWORD)result) {
    *a2 = v4;
  }
  return result;
}

uint64_t krb5_store_int16(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 48) & 0x60) != 0x40 && (*(_DWORD *)(a1 + 48) & 1) == 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20) {
      LOWORD(a2) = sub_1882FBB20((unsigned __int16)a2);
    }
  }

  else
  {
    a2 = bswap32(a2) >> 16;
  }

  return sub_1882F2530(a1, (__int16)a2, 2LL);
}

uint64_t krb5_store_uint16(uint64_t a1, __int16 a2)
{
  return krb5_store_int16(a1, a2);
}

uint64_t krb5_ret_int16(uint64_t a1, _WORD *a2)
{
  uint64_t v4 = sub_1882F2640(a1, &v9, 2LL);
  if (!(_DWORD)v4)
  {
    unsigned int v5 = v9;
    *a2 = v9;
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x40 || (*(_DWORD *)(a1 + 48) & 1) != 0)
    {
      unsigned int v7 = bswap32(v5) >> 16;
LABEL_9:
      *a2 = v7;
      return v4;
    }

    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20)
    {
      LOWORD(v7) = sub_1882FBB20((unsigned __int16)v5);
      goto LABEL_9;
    }
  }

  return v4;
}

uint64_t krb5_ret_uint16(uint64_t a1, _WORD *a2)
{
  uint64_t result = krb5_ret_int16(a1, &v4);
  if (!(_DWORD)result) {
    *a2 = v4;
  }
  return result;
}

uint64_t krb5_store_int8(uint64_t a1, char a2)
{
  char v6 = a2;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 16))(a1, &v6, 1LL);
  if (v3 == 1) {
    return 0LL;
  }
  if (v3 < 0) {
    unsigned int v5 = __error();
  }
  else {
    unsigned int v5 = (int *)(a1 + 52);
  }
  return *v5;
}

uint64_t krb5_store_uint8(uint64_t a1, char a2)
{
  return krb5_store_int8(a1, a2);
}

uint64_t krb5_ret_int8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, a2, 1LL);
  if (v3 == 1) {
    return 0LL;
  }
  if (v3 < 0) {
    unsigned int v5 = __error();
  }
  else {
    unsigned int v5 = (int *)(a1 + 52);
  }
  return *v5;
}

uint64_t krb5_ret_uint8(uint64_t a1, _BYTE *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v7, 1LL);
  if (v4 == 1 || (v4 < 0 ? (v5 = __error()) : (v5 = (int *)(a1 + 52)), uint64_t result = *v5, !(_DWORD)result))
  {
    uint64_t result = 0LL;
    *a2 = v7;
  }

  return result;
}

uint64_t krb5_store_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2314790665LL;
  if (a2 <= 102400)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6 || v6 >= a2)
    {
      uint64_t result = krb5_store_int32(a1, a2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, a3, a2);
        if (v9 < 0)
        {
          uint64_t v10 = __error();
        }

        else
        {
          if (v9 == a2) {
            return 0LL;
          }
          uint64_t v10 = (int *)(a1 + 52);
        }

        return *v10;
      }
    }
  }

  return result;
}

uint64_t krb5_ret_data(uint64_t a1, size_t *a2)
{
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v9);
  if (!(_DWORD)result)
  {
    uint64_t result = 2314790665LL;
    uint64_t v5 = v9;
    if (v9 <= 102400)
    {
      uint64_t v6 = *(void *)(a1 + 56);
      if (!v6 || v6 >= v9)
      {
        uint64_t result = krb5_data_alloc(a2, v9);
        if (!(_DWORD)result)
        {
          if ((_DWORD)v5
            && (uint64_t v7 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(a1 + 8))(a1, a2[1], v5), v7 != v5))
          {
            if (v7 < 0) {
              unint64_t v8 = __error();
            }
            else {
              unint64_t v8 = (int *)(a1 + 52);
            }
            return *v8;
          }

          else
          {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_store_string(uint64_t a1, char *__s)
{
  int64_t v4 = strlen(__s);
  v8[0] = v4;
  v8[1] = __s;
  if (v4 <= 2048)
  {
    int64_t v5 = *(void *)(a1 + 56);
    if (!v5 || v5 >= v4) {
      return krb5_store_data(a1, v4, (uint64_t)__s);
    }
  }

  krb5_data_free(v8);
  return 2314790665LL;
}

uint64_t krb5_ret_string(uint64_t a1, void *a2)
{
  uint64_t result = krb5_ret_data(a1, (size_t *)&v8);
  if (!(_DWORD)result)
  {
    if (v8 > 2048 || (int64_t v5 = *(void *)(a1 + 56)) != 0 && v5 < v8)
    {
      krb5_data_free(&v8);
      return 2314790665LL;
    }

    else
    {
      uint64_t v6 = realloc(__ptr, v8 + 1);
      *a2 = v6;
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t result = 0LL;
        v7[v8] = 0;
      }

      else
      {
        free(__ptr);
        return 12LL;
      }
    }
  }

  return result;
}

uint64_t krb5_store_stringz(uint64_t a1, char *__s)
{
  uint64_t v4 = 2314790665LL;
  int64_t v5 = strlen(__s) + 1;
  if (v5 <= 2048)
  {
    int64_t v6 = *(void *)(a1 + 56);
    if (!v6 || v6 >= v5)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, char *, int64_t))(a1 + 16))(a1, __s, v5);
      if (v8 < 0 || v8 != v5) {
        return *(unsigned int *)(a1 + 52);
      }
      else {
        return 0LL;
      }
    }
  }

  return v4;
}

uint64_t krb5_ret_stringz(uint64_t a1, void *a2)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  while (1)
  {
    if ((*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(a1 + 8))(a1, &v11, 1LL) != 1)
    {
      free(v5);
      return *(unsigned int *)(a1 + 52);
    }

    if (v4 == 2048 || (uint64_t v6 = *(void *)(a1 + 56)) != 0 && v6 <= v4)
    {
      free(v5);
      return 2314790665LL;
    }

    uint64_t v7 = realloc(v5, v4 + 1);
    if (!v7) {
      break;
    }
    uint64_t v8 = v7;
    int v9 = v11;
    v7[v4++] = v11;
    int64_t v5 = v7;
    if (!v9)
    {
      uint64_t result = 0LL;
      *a2 = v8;
      return result;
    }
  }

  free(v5);
  return 12LL;
}

uint64_t krb5_store_stringnl(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, size_t))(a1 + 16))(a1, __s, v4);
  if ((v5 & 0x8000000000000000LL) == 0
    && v5 == v4
    && (*(uint64_t (**)(uint64_t, const char *, uint64_t))(a1 + 16))(a1, "\n", 1LL) == 1)
  {
    return 0LL;
  }

  else
  {
    return *(unsigned int *)(a1 + 52);
  }

uint64_t krb5_ret_stringnl(uint64_t a1, void *a2)
{
  if ((*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1LL) == 1)
  {
    int v4 = 0;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    while (1)
    {
      if (v11 == 13)
      {
        int v4 = 1;
      }

      else
      {
        if (v4 && v11 != 10)
        {
          free(v5);
          return 2529639050LL;
        }

        if (v6 + 1 > 2048 || (uint64_t v7 = *(void *)(a1 + 56)) != 0 && v7 < v6 + 1)
        {
          free(v5);
          return 2314790665LL;
        }

        uint64_t v8 = realloc(v5, v6 + 1);
        if (!v8)
        {
          free(v5);
          return 12LL;
        }

        int v9 = v8;
        if (v11 == 10)
        {
          uint64_t result = 0LL;
          v9[v6] = 0;
          *a2 = v9;
          return result;
        }

        v8[v6++] = v11;
        uint64_t v5 = v8;
      }
    }
  }

  uint64_t v5 = 0LL;
LABEL_16:
  free(v5);
  return *(unsigned int *)(a1 + 52);
}

uint64_t krb5_store_principal(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) == 0)
  {
    uint64_t result = krb5_store_int32(a1, *(_DWORD *)a2);
    if ((_DWORD)result) {
      return result;
    }
    unsigned int v4 = *(_DWORD *)(a1 + 48);
  }

  uint64_t result = krb5_store_int32(a1, *(_DWORD *)(a2 + 8) + ((v4 >> 1) & 1));
  if (!(_DWORD)result)
  {
    uint64_t result = krb5_store_string(a1, *(char **)(a2 + 24));
    if (!(_DWORD)result)
    {
      if (*(_DWORD *)(a2 + 8))
      {
        unint64_t v6 = 0LL;
        do
        {
          uint64_t result = krb5_store_string(a1, *(char **)(*(void *)(a2 + 16) + 8 * v6));
          if ((_DWORD)result) {
            break;
          }
          ++v6;
        }

        while (v6 < *(unsigned int *)(a2 + 8));
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t krb5_ret_principal(uint64_t a1, void *a2)
{
  unsigned int v4 = calloc(1uLL, 0x20uLL);
  if (!v4) {
    return 12LL;
  }
  uint64_t v5 = v4;
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    unsigned int v17 = 0;
  }

  else
  {
    uint64_t v6 = krb5_ret_int32(a1, &v17);
    if ((_DWORD)v6)
    {
LABEL_7:
      uint64_t v7 = v6;
      goto LABEL_8;
    }
  }

  uint64_t v6 = krb5_ret_int32(a1, &v16);
  if ((_DWORD)v6) {
    goto LABEL_7;
  }
  int v8 = *(_DWORD *)(a1 + 48) << 30;
  size_t v9 = v16 + (v8 >> 31);
  if ((int)(v16 + (v8 >> 31)) < 0)
  {
    free(v5);
    return 22LL;
  }

  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 && v10 >> 3 < v9)
  {
    free(v5);
    return 2314790665LL;
  }

  _DWORD *v5 = v17;
  void v5[2] = v9;
  uint64_t v6 = krb5_ret_string(a1, (void *)v5 + 3);
  if ((_DWORD)v6) {
    goto LABEL_7;
  }
  char v11 = calloc(v9, 8uLL);
  *((void *)v5 + 2) = v11;
  if ((_DWORD)v9 && !v11)
  {
    free(*((void **)v5 + 3));
    free(v5);
    return 12LL;
  }

  if (!(_DWORD)v9)
  {
LABEL_24:
    uint64_t v7 = 0LL;
    *a2 = v5;
    return v7;
  }

  uint64_t v13 = 0LL;
  while (1)
  {
    uint64_t v14 = krb5_ret_string(a1, (void *)(*((void *)v5 + 2) + 8 * v13));
    if ((_DWORD)v14) {
      break;
    }
    if (++v13 == v9) {
      goto LABEL_24;
    }
  }

  uint64_t v7 = v14;
  do
    free(*(void **)(*((void *)v5 + 2) + 8 * v13));
  while (v13-- > 0);
  free(*((void **)v5 + 3));
LABEL_8:
  free(v5);
  return v7;
}

uint64_t krb5_store_keyblock(uint64_t a1, __int16 *a2)
{
  uint64_t result = krb5_store_int16(a1, *a2);
  if (!(_DWORD)result)
  {
    if ((*(_BYTE *)(a1 + 48) & 8) == 0) {
      return krb5_store_data(a1, *((void *)a2 + 1), *((void *)a2 + 2));
    }
    uint64_t result = krb5_store_int16(a1, *a2);
    if (!(_DWORD)result) {
      return krb5_store_data(a1, *((void *)a2 + 1), *((void *)a2 + 2));
    }
  }

  return result;
}

uint64_t krb5_ret_keyblock(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_ret_int16(a1, &v5);
  if (!(_DWORD)result)
  {
    *(_DWORD *)a2 = v5;
    if ((*(_BYTE *)(a1 + 48) & 8) == 0) {
      return krb5_ret_data(a1, (size_t *)(a2 + 8));
    }
    uint64_t result = krb5_ret_int16(a1, &v5);
    if (!(_DWORD)result) {
      return krb5_ret_data(a1, (size_t *)(a2 + 8));
    }
  }

  return result;
}

uint64_t krb5_store_times(uint64_t a1, unsigned int *a2)
{
  uint64_t result = krb5_store_int32(a1, *a2);
  if (!(_DWORD)result)
  {
    uint64_t result = krb5_store_int32(a1, a2[2]);
    if (!(_DWORD)result)
    {
      uint64_t result = krb5_store_int32(a1, a2[4]);
      if (!(_DWORD)result) {
        return krb5_store_int32(a1, a2[6]);
      }
    }
  }

  return result;
}

uint64_t krb5_ret_times(uint64_t a1, void *a2)
{
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
  *a2 = v5;
  if (!(_DWORD)result)
  {
    uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
    a2[1] = v5;
    if (!(_DWORD)result)
    {
      uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
      a2[2] = v5;
      if (!(_DWORD)result)
      {
        uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
        a2[3] = v5;
      }
    }
  }

  return result;
}

uint64_t krb5_store_address(uint64_t a1, __int16 *a2)
{
  uint64_t result = krb5_store_int16(a1, *a2);
  if (!(_DWORD)result) {
    return krb5_store_data(a1, *((void *)a2 + 1), *((void *)a2 + 2));
  }
  return result;
}

uint64_t krb5_ret_address(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_ret_int16(a1, &v5);
  if (!(_DWORD)result)
  {
    *(_DWORD *)a2 = v5;
    return krb5_ret_data(a1, (size_t *)(a2 + 8));
  }

  return result;
}

uint64_t krb5_store_addrs(uint64_t a1, unsigned int a2, __int128 *a3)
{
  LODWORD(v4) = a2;
  uint64_t result = krb5_store_int32(a1, a2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = v4;
    if ((_DWORD)v4)
    {
      while (1)
      {
        __int128 v7 = *a3;
        uint64_t v8 = *((void *)a3 + 2);
        uint64_t result = krb5_store_address(a1, (__int16 *)&v7);
        if ((_DWORD)result) {
          break;
        }
        a3 = (__int128 *)((char *)a3 + 24);
        if (!--v4) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t krb5_ret_addrs(uint64_t a1, unsigned int *a2)
{
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&__count);
  if (!(_DWORD)result)
  {
    size_t v5 = __count;
    unint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      BOOL v7 = v6 / 0x18 >= (int)__count;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      *a2 = __count;
      uint64_t v8 = calloc(v5, 0x18uLL);
      *((void *)a2 + 1) = v8;
      int v9 = *a2;
      if (v8)
      {
        if (v9)
        {
          uint64_t v10 = 0LL;
          unint64_t v11 = 0LL;
          while (1)
          {
            uint64_t result = krb5_ret_address(a1, *((void *)a2 + 1) + v10);
            if ((_DWORD)result) {
              break;
            }
            ++v11;
            v10 += 24LL;
            if (v11 >= *a2) {
              return 0LL;
            }
          }
        }

        else
        {
          return 0LL;
        }
      }

      else if (v9)
      {
        return 12LL;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 2314790665LL;
    }
  }

  return result;
}

uint64_t krb5_store_authdata(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = krb5_store_int32(a1, a2);
  if (!(_DWORD)result)
  {
    if (a2)
    {
      uint64_t v7 = a2 - 1LL;
      uint64_t v8 = (uint64_t *)(a3 + 16);
      do
      {
        BOOL v9 = krb5_store_data(a1, *(v8 - 1), *v8) || v7-- == 0;
        v8 += 3;
      }

      while (!v9);
    }

    return 0LL;
  }

  return result;
}

uint64_t krb5_ret_authdata(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v15);
  if (!(_DWORD)result)
  {
    uint64_t v5 = v15;
    size_t v6 = v15;
    unint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      BOOL v8 = v7 / 0x18 >= v15;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      *(_DWORD *)a2 = v15;
      BOOL v9 = calloc(v6, 0x18uLL);
      *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 128), 8) = v9;
      if (v9) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = (_DWORD)v5 == 0;
      }
      if (v10)
      {
        if ((int)v5 < 1)
        {
          return 0LL;
        }

        else
        {
          uint64_t v11 = 0LL;
          uint64_t v12 = 24 * v5;
          do
          {
            uint64_t result = krb5_ret_int16(a1, &v14);
            if ((_DWORD)result) {
              break;
            }
            uint64_t v13 = *(void *)(a2 + 8);
            *(_DWORD *)(v13 + v11) = v14;
            uint64_t result = krb5_ret_data(a1, (size_t *)(v13 + v11 + 8));
            if ((_DWORD)result) {
              break;
            }
            v11 += 24LL;
          }

          while (v12 != v11);
        }
      }

      else
      {
        return 12LL;
      }
    }

    else
    {
      return 2314790665LL;
    }
  }

  return result;
}

uint64_t krb5_store_creds(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_store_principal(a1, *(void *)a2);
  if (!(_DWORD)result)
  {
    uint64_t result = krb5_store_principal(a1, *(void *)(a2 + 8));
    if (!(_DWORD)result)
    {
      __int128 v10 = *(_OWORD *)(a2 + 16);
      *(void *)&__int128 v11 = *(void *)(a2 + 32);
      uint64_t result = krb5_store_keyblock(a1, (__int16 *)&v10);
      if (!(_DWORD)result)
      {
        __int128 v5 = *(_OWORD *)(a2 + 56);
        __int128 v10 = *(_OWORD *)(a2 + 40);
        __int128 v11 = v5;
        uint64_t result = krb5_store_times(a1, (unsigned int *)&v10);
        if (!(_DWORD)result)
        {
          uint64_t result = krb5_store_int8(a1, *(void *)(a2 + 88) != 0LL);
          if (!(_DWORD)result)
          {
            unsigned int v6 = *(_DWORD *)(a2 + 136);
            if ((*(_BYTE *)(a1 + 48) & 0x80) != 0)
            {
              uint64_t v9 = a1;
            }

            else
            {
              int v7 = TicketFlags2int(*(unsigned int *)(a2 + 136));
              unsigned int v6 = 0;
              int v8 = 32;
              do
              {
                unsigned int v6 = v7 & 1 | (2 * v6);
                v7 >>= 1;
                --v8;
              }

              while (v8);
              uint64_t v9 = a1;
            }

            uint64_t result = krb5_store_int32(v9, v6);
            if (!(_DWORD)result)
            {
              uint64_t result = krb5_store_addrs(a1, *(void *)(a2 + 120), *(__int128 **)(a2 + 128));
              if (!(_DWORD)result)
              {
                uint64_t result = krb5_store_authdata(a1, *(void *)(a2 + 104), *(void *)(a2 + 112));
                if (!(_DWORD)result)
                {
                  uint64_t result = krb5_store_data(a1, *(void *)(a2 + 72), *(void *)(a2 + 80));
                  if (!(_DWORD)result) {
                    return krb5_store_data(a1, *(void *)(a2 + 88), *(void *)(a2 + 96));
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_ret_creds(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t result = krb5_ret_principal(a1, (void *)a2);
  if (!(_DWORD)result)
  {
    uint64_t result = krb5_ret_principal(a1, (void *)(a2 + 8));
    if (!(_DWORD)result)
    {
      uint64_t result = krb5_ret_keyblock(a1, a2 + 16);
      if (!(_DWORD)result)
      {
        uint64_t result = krb5_ret_times(a1, (void *)(a2 + 40));
        if (!(_DWORD)result)
        {
          uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1LL);
          if (v5 == 1
            || (v5 < 0 ? (unsigned int v6 = __error()) : (unsigned int v6 = (int *)(a1 + 52)), result = *v6, !(_DWORD)result))
          {
            uint64_t result = krb5_ret_int32(a1, &v10);
            if (!(_DWORD)result)
            {
              int v7 = v10;
              if (v10 >= 0x10000)
              {
                int v8 = 0;
                int v9 = 32;
                do
                {
                  int v8 = v7 & 1 | (2 * v8);
                  v7 >>= 1;
                  --v9;
                }

                while (v9);
              }

              else
              {
                int v8 = v10;
              }

              *(_DWORD *)(a2 + 136) = v8;
              uint64_t result = krb5_ret_addrs(a1, (unsigned int *)(a2 + 120));
              if (!(_DWORD)result)
              {
                uint64_t result = krb5_ret_authdata(a1, a2 + 104);
                if (!(_DWORD)result)
                {
                  uint64_t result = krb5_ret_data(a1, (size_t *)(a2 + 72));
                  if (!(_DWORD)result) {
                    return krb5_ret_data(a1, (size_t *)(a2 + 88));
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_store_creds_tag(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void *)a2 != 0LL;
  if (*(void *)(a2 + 8)) {
    v4 |= 2u;
  }
  uint64_t v5 = (__int128 *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16)) {
    v4 |= 4u;
  }
  if (*(void *)(a2 + 80)) {
    v4 |= 8u;
  }
  if (*(void *)(a2 + 88)) {
    v4 |= 0x10u;
  }
  if (*(_DWORD *)(a2 + 104)) {
    v4 |= 0x20u;
  }
  if (*(_DWORD *)(a2 + 120)) {
    unsigned int v6 = v4 | 0x40;
  }
  else {
    unsigned int v6 = v4;
  }
  uint64_t result = krb5_store_int32(a1, v6);
  if (!(_DWORD)result)
  {
    if (!*(void *)a2 || (uint64_t result = krb5_store_principal(a1, *(void *)a2), !(_DWORD)result))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8 || (uint64_t result = krb5_store_principal(a1, v8), !(_DWORD)result))
      {
        if (!*(_DWORD *)v5
          || (__int128 v15 = *v5,
              *(void *)&__int128 v16 = *((void *)v5 + 2),
              uint64_t result = krb5_store_keyblock(a1, (__int16 *)&v15),
              !(_DWORD)result))
        {
          __int128 v9 = *(_OWORD *)(a2 + 56);
          __int128 v15 = *(_OWORD *)(a2 + 40);
          __int128 v16 = v9;
          uint64_t result = krb5_store_times(a1, (unsigned int *)&v15);
          if (!(_DWORD)result)
          {
            uint64_t result = krb5_store_int8(a1, *(void *)(a2 + 88) != 0LL);
            if (!(_DWORD)result)
            {
              int v10 = TicketFlags2int(*(unsigned int *)(a2 + 136));
              unsigned int v11 = 0;
              int v12 = 32;
              do
              {
                unsigned int v11 = v10 & 1 | (2 * v11);
                v10 >>= 1;
                --v12;
              }

              while (v12);
              uint64_t result = krb5_store_int32(a1, v11);
              if (!(_DWORD)result)
              {
                if (!*(_DWORD *)(a2 + 120)
                  || (uint64_t result = krb5_store_addrs(a1, *(void *)(a2 + 120), *(__int128 **)(a2 + 128)), !(_DWORD)result))
                {
                  if (!*(_DWORD *)(a2 + 104)
                    || (uint64_t result = krb5_store_authdata(a1, *(void *)(a2 + 104), *(void *)(a2 + 112)), !(_DWORD)result))
                  {
                    uint64_t v13 = *(void *)(a2 + 80);
                    if (!v13 || (uint64_t result = krb5_store_data(a1, *(void *)(a2 + 72), v13), !(_DWORD)result))
                    {
                      uint64_t v14 = *(void *)(a2 + 96);
                      if (!v14) {
                        return 0LL;
                      }
                      uint64_t result = krb5_store_data(a1, *(void *)(a2 + 88), v14);
                      if (!(_DWORD)result) {
                        return 0LL;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_ret_creds_tag(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t result = krb5_ret_int32(a1, &v11);
  if (!(_DWORD)result)
  {
    char v5 = v11;
    if ((v11 & 1) == 0 || (uint64_t result = krb5_ret_principal(a1, (void *)a2), !(_DWORD)result))
    {
      if ((v5 & 2) == 0 || (uint64_t result = krb5_ret_principal(a1, (void *)(a2 + 8)), !(_DWORD)result))
      {
        if ((v5 & 4) == 0 || (uint64_t result = krb5_ret_keyblock(a1, a2 + 16), !(_DWORD)result))
        {
          uint64_t result = krb5_ret_times(a1, (void *)(a2 + 40));
          if (!(_DWORD)result)
          {
            uint64_t v6 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v13, 1LL);
            if (v6 == 1
              || (v6 < 0 ? (v7 = __error()) : (v7 = (int *)(a1 + 52)), uint64_t result = *v7, !(_DWORD)result))
            {
              uint64_t result = krb5_ret_int32(a1, &v12);
              if (!(_DWORD)result)
              {
                int v8 = v12;
                if (v12 >= 0x10000)
                {
                  int v9 = 0;
                  int v10 = 32;
                  do
                  {
                    int v9 = v8 & 1 | (2 * v9);
                    v8 >>= 1;
                    --v10;
                  }

                  while (v10);
                }

                else
                {
                  int v9 = v12;
                }

                *(_DWORD *)(a2 + 136) = v9;
                if ((v5 & 0x40) == 0 || (uint64_t result = krb5_ret_addrs(a1, (unsigned int *)(a2 + 120)), !(_DWORD)result))
                {
                  if ((v5 & 0x20) == 0 || (uint64_t result = krb5_ret_authdata(a1, a2 + 104), !(_DWORD)result))
                  {
                    if ((v5 & 8) == 0 || (uint64_t result = krb5_ret_data(a1, (size_t *)(a2 + 72)), !(_DWORD)result))
                    {
                      if ((v5 & 0x10) != 0) {
                        return krb5_ret_data(a1, (size_t *)(a2 + 88));
                      }
                      else {
                        return 0LL;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t krb5_store_uuid(uint64_t a1, uint64_t a2)
{
  else {
    return 2314790666LL;
  }
}

uint64_t krb5_ret_uuid(uint64_t a1, uint64_t a2)
{
  else {
    return 2314790666LL;
  }
}

void krb5_free_ticket(krb5_context a1, krb5_ticket *a2)
{
}

krb5_error_code krb5_copy_ticket(krb5_context a1, const krb5_ticket *a2, krb5_ticket **a3)
{
  *a3 = 0LL;
  uint64_t v6 = (krb5_principal *)malloc(0x98uLL);
  if (v6)
  {
    int v7 = v6;
    krb5_error_code v8 = sub_1882FD7F0();
    if (v8)
    {
      krb5_error_code v9 = v8;
    }

    else
    {
      krb5_error_code v10 = krb5_copy_principal(a1, *(krb5_const_principal *)&a2[2].enc_part.kvno, v7 + 17);
      if (v10)
      {
        krb5_error_code v9 = v10;
      }

      else
      {
        krb5_error_code v9 = krb5_copy_principal(a1, *(krb5_const_principal *)&a2[2].enc_part.ciphertext.magic, v7 + 18);
        if (!v9)
        {
          *a3 = (krb5_ticket *)v7;
          return v9;
        }

        krb5_free_principal(a1, v7[17]);
      }

      sub_1882FD7E0();
    }

    free(v7);
  }

  else
  {
    krb5_error_code v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v9;
}

uint64_t krb5_ticket_get_client(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 136), a3);
}

uint64_t krb5_ticket_get_server(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 144), a3);
}

uint64_t krb5_ticket_get_endtime(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t _krb5_get_ad(_krb5_context *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v13 = 0;
  krb5_data_zero(a5);
  if (!a2)
  {
    krb5_error_code v10 = "No authorization data";
    goto LABEL_7;
  }

  uint64_t v9 = sub_1882F3D6C(a1, a4, a5, &v13, 1, a2, 0);
  if (!(_DWORD)v9)
  {
    if (v13) {
      return 0LL;
    }
    uint64_t v12 = a4;
    krb5_error_code v10 = "Have no authorization data of type %d";
LABEL_7:
    uint64_t v9 = 2LL;
    krb5_set_error_message(a1, 2, v10, v12);
  }

  return v9;
}

uint64_t sub_1882F3D6C( _krb5_context *a1, uint64_t a2, void *a3, _DWORD *a4, int a5, unsigned int *a6, int a7)
{
  if (a7 > 9)
  {
    uint64_t v25 = 10LL;
    krb5_error_code v10 = "Authorization data nested deeper then %d levels, stop searching";
LABEL_3:
    uint64_t v11 = 2LL;
    uint64_t v12 = a1;
    krb5_error_code v13 = 2;
    goto LABEL_4;
  }

  if (!*a6) {
    return 0LL;
  }
  uint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  unsigned int v26 = a7 + 1;
  while (1)
  {
    uint64_t v19 = *((void *)a6 + 1);
    int v20 = *(_DWORD *)(v19 + v17);
    if (*a4 || v20 != (_DWORD)a2) {
      break;
    }
    uint64_t v23 = der_copy_octet_string();
    if ((_DWORD)v23)
    {
      uint64_t v11 = v23;
      krb5_error_code v10 = "malloc: out of memory";
      goto LABEL_29;
    }

    *a4 = 1;
LABEL_23:
    ++v18;
    v17 += 24LL;
    if (v18 >= *a6) {
      return 0LL;
    }
  }

  if (v20 == 5)
  {
    if (a5)
    {
      krb5_error_code v10 = "Authorization data contains AND-OR element that is unknown to the application";
      goto LABEL_3;
    }

    goto LABEL_23;
  }

  if (v20 != 1)
  {
    if (a5)
    {
      uint64_t v25 = *(unsigned int *)(v19 + v17);
      krb5_error_code v10 = "Authorization data contains unknown type (%d) ";
      goto LABEL_3;
    }

    goto LABEL_23;
  }

  uint64_t v22 = sub_1882FD578();
  if (!(_DWORD)v22)
  {
    uint64_t v11 = sub_1882F3D6C(a1, a2, a3, a4, 0LL, v27, v26);
    sub_1882FD5C8();
    if ((_DWORD)v11) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

  uint64_t v11 = v22;
  uint64_t v25 = v22;
  krb5_error_code v10 = "Failed to decode IF_RELEVANT with %d";
LABEL_29:
  uint64_t v12 = a1;
  krb5_error_code v13 = v11;
LABEL_4:
  krb5_set_error_message(v12, v13, v10, v25);
LABEL_5:
  if (*a4)
  {
    krb5_data_free(a3);
    *a4 = 0;
  }

  return v11;
}

uint64_t krb5_ticket_get_authorization_data_type(_krb5_context *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v13 = 0;
  krb5_data_zero(a4);
  krb5_error_code v8 = *(unsigned int **)(a2 + 128);
  if (!v8)
  {
    krb5_error_code v10 = "Ticket have not authorization data";
    goto LABEL_7;
  }

  uint64_t v9 = sub_1882F3D6C(a1, a3, a4, &v13, 1, v8, 0);
  if (!(_DWORD)v9)
  {
    if (v13) {
      return 0LL;
    }
    uint64_t v12 = a3;
    krb5_error_code v10 = "Ticket have not authorization data of type %d";
LABEL_7:
    uint64_t v9 = 2LL;
    krb5_set_error_message(a1, 2, v10, v12);
  }

  return v9;
}

uint64_t sub_1882F3FCC( uint64_t a1, uint64_t a2, uint64_t a3, const krb5_keyblock *a4, uint64_t a5, krb5_address *const *a6, int a7, char a8, uint64_t a9, uint64_t (*a10)(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5), uint64_t a11)
{
  unint64_t v18 = a10;
  uint64_t v61 = 0LL;
  if (!a10) {
    unint64_t v18 = sub_1882F4584;
  }
  uint64_t v19 = v18((_krb5_context *)a1, a4, a5, a11, a2);
  if ((_DWORD)v19) {
    goto LABEL_4;
  }
  if ((a8 & 0x20) != 0 && a9 && (*(_DWORD *)(a2 + 208) & 0x8000) != 0)
  {
    *(void *)ctype = 0LL;
    int v58 = 0;
    sub_1882DFCE8(a1, 5, "processing enc-ap-rep");
    uint64_t v21 = *(void *)(a2 + 288);
    if (!v21 || !krb5_find_padata(*(void *)(v21 + 8), *(_DWORD *)v21, 149, &v58))
    {
      uint64_t v19 = 2529638953LL;
      sub_1882DFCE8(a1, 5, "KRB5_PADATA_REQ_ENC_PA_REP missing");
      goto LABEL_4;
    }

    uint64_t v19 = krb5_crypto_init((_krb5_context *)a1, a4, 0LL, (krb5_keyblock ***)ctype);
    if ((_DWORD)v19)
    {
LABEL_4:
      sub_1882DFCE8(a1, 5, "_krb5_extract_ticket failed with %d", v19);
      goto LABEL_5;
    }

    uint64_t v22 = sub_1882FD804();
    if ((_DWORD)v22)
    {
      uint64_t v19 = v22;
      krb5_crypto_destroy((_krb5_context *)a1, *(uint64_t *)ctype);
      goto LABEL_4;
    }

    uint64_t v19 = krb5_verify_checksum( (krb5_context)a1,  ctype[0],  (const krb5_checksum *)0x38,  *(krb5_const_pointer *)(a9 + 8),  *(void *)a9,  &seed,  v23);
    krb5_crypto_destroy((_krb5_context *)a1, *(uint64_t *)ctype);
    sub_1882FD854();
    uint64_t v24 = "in";
    if (!(_DWORD)v19) {
      uint64_t v24 = "";
    }
    sub_1882DFD2C((uint64_t *)a1, 5, v19, "enc-ap-rep: %svalid", v24);
    if ((_DWORD)v19) {
      goto LABEL_4;
    }
  }

  *(void *)(a3 + 32) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 152);
  uint64_t v25 = krb5_data_copy((void *)(a3 + 24), *(const void **)(a2 + 168), *(void *)(a2 + 160));
  if ((_DWORD)v25)
  {
    uint64_t v19 = v25;
LABEL_20:
    krb5_clear_error_message((krb5_context)a1);
    goto LABEL_4;
  }

  unsigned int v26 = *(const char **)(a2 + 16);
  __int128 seed = *(_OWORD *)(a2 + 24);
  uint64_t v60 = *(void *)(a2 + 40);
  uint64_t v19 = _krb5_principalname2krb5_principal(a1, ctype, (uint64_t)&seed, v26);
  if ((_DWORD)v19) {
    goto LABEL_4;
  }
  if ((a8 & 1) == 0)
  {
    uint64_t v27 = sub_1882F465C( (krb5_context)a1,  a2,  *(krb5_const_principal *)a3,  *(krb5_const_principal *)ctype,  (const krb5_keyblock *)(a3 + 16));
    if ((_DWORD)v27) {
      goto LABEL_27;
    }
  }

  krb5_free_principal((krb5_context)a1, *(krb5_principal *)a3);
  *(void *)a3 = *(void *)ctype;
  size_t v28 = *(const char **)(a2 + 248);
  __int128 seed = *(_OWORD *)(a2 + 256);
  uint64_t v60 = *(void *)(a2 + 272);
  uint64_t v19 = _krb5_principalname2krb5_principal(a1, ctype, (uint64_t)&seed, v28);
  if ((_DWORD)v19) {
    goto LABEL_4;
  }
  if ((a8 & 2) == 0)
  {
    uint64_t v27 = sub_1882F48D8( (krb5_context)a1,  a2,  a8,  *(krb5_const_principal *)(a3 + 8),  *(krb5_const_principal *)ctype,  (const krb5_keyblock *)(a3 + 16));
    if ((_DWORD)v27)
    {
LABEL_27:
      uint64_t v19 = v27;
      krb5_free_principal((krb5_context)a1, *(krb5_principal *)ctype);
      goto LABEL_4;
    }
  }

  krb5_free_principal((krb5_context)a1, *(krb5_principal *)(a3 + 8));
  uint64_t v29 = *(void *)ctype;
  *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 128), 8) = *(void *)ctype;
  if ((a8 & 4) != 0)
  {
    realm = (const char *)krb5_principal_get_realm(a1, v29);
    char v40 = (const char *)krb5_principal_get_realm(a1, *(void *)a3);
    uint64_t v41 = *(const char **)(a2 + 248);
    if (strcmp(v41, realm) || strcmp(v41, v40))
    {
      uint64_t v19 = 2529638953LL;
      krb5_set_error_message((krb5_context)a1, -1765328343, "server realm (%s) doesn't match client's (%s)", realm, v40);
      goto LABEL_20;
    }
  }

  if (*(_DWORD *)(a2 + 192) != a7)
  {
    uint64_t v19 = 2529638953LL;
    __int128 v42 = "malloc: out of memory";
LABEL_44:
    uint64_t v43 = (_krb5_context *)a1;
    krb5_error_code v44 = -1765328343;
LABEL_55:
    krb5_set_error_message(v43, v44, v42, v55, v56, v57);
    goto LABEL_4;
  }

  krb5_timeofday((krb5_context)a1, (krb5_timestamp *)&seed);
  if ((a8 & 0x10) != 0 && (*(_DWORD *)(a2 + 208) & 0x200) != 0 && !*(_DWORD *)(a1 + 108))
  {
    uint64_t v56 = "kdc_timesync";
    uint64_t v57 = 0LL;
    if (krb5_config_get_BOOL(a1, 0LL, v30, v31, v32, v33, v34, v35, (uint64_t)"libdefaults"))
    {
      *(_DWORD *)(a1 + 10_Block_object_dispose((const void *)(v1 - 128), 8) = *(_DWORD *)(a2 + 216) - seed;
      krb5_timeofday((krb5_context)a1, (krb5_timestamp *)&seed);
    }
  }

  uint64_t v36 = *(uint64_t **)(a2 + 224);
  if (!v36) {
    uint64_t v36 = (uint64_t *)(a2 + 216);
  }
  uint64_t v37 = *v36;
  uint64_t v38 = *(void *)(a3 + 48);
  if (!v38)
  {
    if (krb5_time_abs(v37, seed) > *(void *)(a1 + 80))
    {
      krb5_time_abs(v37, seed);
      uint64_t v19 = 2529638949LL;
      krb5_set_error_message((krb5_context)a1, -1765328347, "time skew (%ld) larger than max (%d)");
      goto LABEL_4;
    }

    uint64_t v38 = *(void *)(a3 + 48);
  }

  if (v38 && v37 != v38)
  {
    uint64_t v19 = 2529638953LL;
    krb5_clear_error_message((krb5_context)a1);
    __int128 v42 = "startime is not the requested startime";
LABEL_54:
    uint64_t v43 = (_krb5_context *)a1;
    krb5_error_code v44 = 0;
    goto LABEL_55;
  }

  *(void *)(a3 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = v37;
  uint64_t v45 = *(void **)(a2 + 240);
  if (v45) {
    uint64_t v45 = (void *)*v45;
  }
  uint64_t v46 = *(void *)(a3 + 64);
  if (v46 && (uint64_t)v45 > v46)
  {
    uint64_t v19 = 2529638953LL;
    krb5_clear_error_message((krb5_context)a1);
    __int128 v42 = "renewtime is past the requested renewtime";
    goto LABEL_54;
  }

  *(void *)(a3 + 64) = v45;
  *(void *)(a3 + 40) = *(void *)(a2 + 216);
  uint64_t v47 = *(void *)(a3 + 56);
  uint64_t v48 = *(void *)(a2 + 232);
  if (v47 && v48 > v47)
  {
    uint64_t v19 = 2529638953LL;
    krb5_clear_error_message((krb5_context)a1);
    __int128 v42 = "endtime is past the requested endtime";
    goto LABEL_44;
  }

  *(void *)(a3 + 56) = v48;
  __int128 v49 = *(krb5_address *const **)(a2 + 280);
  if (v49)
  {
    __int128 v50 = (krb5_address ***)(a3 + 120);
    krb5_data v51 = (_krb5_context *)a1;
LABEL_64:
    krb5_copy_addresses(v51, v49, v50);
    goto LABEL_65;
  }

  if (a6)
  {
    __int128 v50 = (krb5_address ***)(a3 + 120);
    krb5_data v51 = (_krb5_context *)a1;
    __int128 v49 = a6;
    goto LABEL_64;
  }

  *(_DWORD *)(a3 + 120) = 0;
  *(void *)(a3 + 12_Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
LABEL_65:
  *(_DWORD *)(a3 + 136) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0LL;
  size_t v52 = sub_1882FD78C();
  *(void *)(a3 + 72) = v52;
  char v53 = malloc(v52);
  *(void *)(a3 + 80) = v53;
  if (!v53)
  {
    uint64_t v19 = 12LL;
    goto LABEL_4;
  }

  uint64_t v54 = sub_1882FD76C();
  if ((_DWORD)v54)
  {
    uint64_t v19 = v54;
    free(*(void **)(a3 + 80));
    *(void *)(a3 + 80) = 0LL;
    goto LABEL_4;
  }

  if (*(void *)(a3 + 72) != v61) {
    krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
  }
  uint64_t v19 = 0LL;
  *(void *)(a3 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
  *(void *)(a3 + 96) = 0LL;
LABEL_5:
  bzero(*(void **)(a2 + 168), *(void *)(a2 + 160));
  return v19;
}

uint64_t sub_1882F4584(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = krb5_crypto_init(a1, a2, 0LL, &v10);
  if (!(_DWORD)v8)
  {
    uint64_t v8 = krb5_decrypt_EncryptedData(a1, (uint64_t)v10, a3, a5 + 120, &v11);
    krb5_crypto_destroy(a1, (uint64_t)v10);
    if (!(_DWORD)v8)
    {
      if (sub_1882FDCB0())
      {
        uint64_t v8 = sub_1882FDCE0();
        krb5_data_free(&v11);
        if ((_DWORD)v8) {
          krb5_set_error_message(a1, v8, "Failed to decode encpart in ticket");
        }
      }

      else
      {
        krb5_data_free(&v11);
        return 0LL;
      }
    }
  }

  return v8;
}

uint64_t sub_1882F465C( krb5_context a1, uint64_t a2, krb5_const_principal a3, krb5_const_principal a4, const krb5_keyblock *a5)
{
  int v24 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 && krb5_find_padata(*(void *)(v9 + 8), *(_DWORD *)v9, 133, &v24))
  {
    uint64_t v11 = sub_1882FE1C0();
    if ((_DWORD)v11)
    {
      uint64_t v12 = v11;
      data = a3->data;
      int v13 = "Failed to decode ClientCanonicalized from realm %s";
      uint64_t v14 = a1;
      krb5_error_code v15 = v12;
LABEL_5:
      krb5_set_error_message(v14, v15, v13, data);
      return v12;
    }

    size_t v17 = sub_1882FE1B0();
    unint64_t v18 = malloc(v17);
    if (!v18)
    {
      uint64_t v12 = 12LL;
      goto LABEL_17;
    }

    uint64_t v19 = v18;
    uint64_t v20 = sub_1882FE190();
    if ((_DWORD)v20) {
      goto LABEL_15;
    }
    if (v17 != v25) {
      krb5_abortx(a1, "internal asn.1 error");
    }
    uint64_t v20 = krb5_crypto_init(a1, a5, 0LL, (krb5_keyblock ***)ctype);
    if ((_DWORD)v20)
    {
LABEL_15:
      uint64_t v12 = v20;
      free(v19);
LABEL_17:
      sub_1882FE1E0();
      return v12;
    }

    uint64_t v12 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE9LL, v19, v17, &v29, v21);
    krb5_crypto_destroy(a1, *(uint64_t *)ctype);
    free(v19);
    if ((_DWORD)v12)
    {
      krb5_set_error_message( a1,  v12,  "Failed to verify client canonicalized data from realm %s",  (const char *)a3->data);
      goto LABEL_17;
    }

    if (sub_1882E953C((uint64_t)a1, (uint64_t)a3, (uint64_t)v27))
    {
      uint64_t v12 = 2529639058LL;
      sub_1882FE1E0();
      int v13 = "Mapped name doesn't match in client referral";
    }

    else
    {
      uint64_t v12 = 2529639058LL;
      sub_1882FE1E0();
      int v13 = "Requested name doesn't match in client referral";
    }

    uint64_t v14 = a1;
    krb5_error_code v15 = -1765328238;
    goto LABEL_5;
  }

  if (krb5_principal_compare(a1, a3, a4) || (*(_BYTE *)(a2 + 209) & 0x80) != 0) {
    return 0LL;
  }
  v27[0] = 0LL;
  krb5_unparse_name(a1, a4, v27);
  __int128 v16 = v27[0];
  if (!v27[0]) {
    __int128 v16 = "<unknown name>";
  }
  uint64_t v12 = 2529638953LL;
  krb5_set_error_message(a1, -1765328343, "Not same client principal returned (%s)as requested", v16);
  krb5_xfree(v27[0]);
  return v12;
}

uint64_t sub_1882F48D8( krb5_context a1, uint64_t a2, char a3, krb5_const_principal a4, krb5_const_principal a5, const krb5_keyblock *a6)
{
  int v17 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9 || (padata = krb5_find_padata(*(void *)(v9 + 8), *(_DWORD *)v9, 25, &v17)) == 0LL)
  {
    if (krb5_principal_compare(a1, a4, a5) != 1
      && krb5_realm_compare(a1, a4, a5) != 1
      && !krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)a5))
    {
      uint64_t v14 = 2529638953LL;
      krb5_set_error_message(a1, -1765328343, "Not same server principal returned as requested");
      return v14;
    }

    return 0LL;
  }

  int v13 = padata;
  memset(v19, 0, sizeof(v19));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v14 = sub_1882FD678();
  if (!(_DWORD)v14)
  {
    if (v18[2] != *((void *)v13 + 1))
    {
      uint64_t v14 = 2529638953LL;
      sub_1882FD6C8();
      krb5_set_error_message(a1, -1765328343, "Referral EncryptedData wrong for realm %s");
      return v14;
    }

    uint64_t v15 = krb5_crypto_init(a1, a6, 0LL, &v20);
    if ((_DWORD)v15)
    {
      uint64_t v14 = v15;
      sub_1882FD6C8();
      return v14;
    }

    uint64_t v14 = krb5_decrypt_EncryptedData(a1, (uint64_t)v20, 26LL, (uint64_t)v19, v18);
    sub_1882FD6C8();
    krb5_crypto_destroy(a1, (uint64_t)v20);
    if (!(_DWORD)v14)
    {
      uint64_t v14 = sub_1882FE1F0();
      krb5_data_free(v18);
      if (!(_DWORD)v14)
      {
        if (strcmp((const char *)a4->data, (const char *)a5->data))
        {
          uint64_t v14 = 2529638953LL;
          sub_1882FE210();
          krb5_set_error_message(a1, -1765328343, "server ref realm mismatch, requested realm %s got back %s");
          return v14;
        }

        if (krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)a5))
        {
          if (!(void)v21 || strcmp(*(const char **)v21, *((const char **)a5->realm.data + 1)))
          {
            uint64_t v14 = 2529638953LL;
            sub_1882FE210();
            krb5_set_error_message(a1, -1765328343, "tgt returned with wrong ref");
            return v14;
          }
        }

        else if (!krb5_principal_compare(a1, a5, a4))
        {
          uint64_t v14 = 2529638953LL;
          sub_1882FE210();
          krb5_set_error_message(a1, -1765328343, "req princ no same as returned");
          return v14;
        }

        if ((void)v22)
        {
          if (!sub_1882E953C((uint64_t)a1, (uint64_t)a4, v22))
          {
            uint64_t v14 = 2529638953LL;
            sub_1882FE210();
            krb5_set_error_message(a1, -1765328343, "referred principal not same as requested");
            return v14;
          }
        }

        else if ((a3 & 8) != 0)
        {
          uint64_t v14 = 2529638953LL;
          sub_1882FE210();
          krb5_set_error_message(a1, -1765328343, "Requested principal missing on AS-REQ");
          return v14;
        }

        sub_1882FE210();
        return 0LL;
      }
    }
  }

  return v14;
}

krb5_error_code krb5_set_real_time(krb5_context a1, krb5_timestamp a2, krb5_int32 a3)
{
  __darwin_suseconds_t tv_usec = v10.tv_usec;
  int v7 = a2 - LODWORD(v10.tv_sec);
  *((_DWORD *)a1 + 27) = a2 - LODWORD(v10.tv_sec);
  if (a3 < 0) {
    goto LABEL_4;
  }
  int v8 = a3 - tv_usec;
  *((_DWORD *)a1 + 2_Block_object_dispose((const void *)(v1 - 128), 8) = v8;
  if (v8 < 0)
  {
    __darwin_suseconds_t tv_usec = v8 + 1000000;
    *((_DWORD *)a1 + 27) = v7 - 1;
LABEL_4:
    *((_DWORD *)a1 + 2_Block_object_dispose((const void *)(v1 - 128), 8) = tv_usec;
  }

  return 0;
}

krb5_error_code krb5_timeofday(krb5_context a1, krb5_timestamp *a2)
{
  time_t v4 = time(0LL);
  *(void *)a2 = v4;
  if (a1) {
    *(void *)a2 = v4 + *((int *)a1 + 27);
  }
  return 0;
}

krb5_error_code krb5_us_timeofday(krb5_context a1, krb5_timestamp *a2, krb5_int32 *a3)
{
  __darwin_time_t tv_sec = v8.tv_sec;
  *(void *)a2 = v8.tv_sec;
  if (a1) {
    *(void *)a2 = tv_sec + *((int *)a1 + 27);
  }
  *a3 = v8.tv_usec;
  return 0;
}

uint64_t krb5_format_time(uint64_t a1, time_t a2, char *a3, size_t a4, int a5)
{
  time_t v12 = a2;
  if (*(_DWORD *)(a1 + 200)) {
    uint64_t v9 = gmtime(&v12);
  }
  else {
    uint64_t v9 = localtime(&v12);
  }
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = 192LL;
  if (!a5) {
    uint64_t v10 = 272LL;
  }
  if (!strftime(a3, a4, *(const char **)(a1 + v10), v9)) {
LABEL_8:
  }
    snprintf(a3, a4, "%ld", v12);
  return 0LL;
}

krb5_error_code krb5_string_to_deltat(char *a1, krb5_deltat *a2)
{
  int v3 = parse_time(a1, "s");
  *(void *)a2 = v3;
  if (v3 == -1) {
    return -1765328136;
  }
  else {
    return 0;
  }
}

uint64_t krb5_time_abs(uint64_t a1, uint64_t a2)
{
  if (a1 - a2 >= 0) {
    return a1 - a2;
  }
  else {
    return a2 - a1;
  }
}

uint64_t krb5_domain_x500_decode( _krb5_context *a1, uint64_t a2, char *a3, void *a4, _DWORD *a5, const char *a6, const char *a7)
{
  if (!a2)
  {
    uint64_t v30 = 0LL;
    *a4 = 0LL;
    *a5 = 0;
    return v30;
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int v13 = 0;
  uint64_t v14 = a3;
  do
  {
    if (v13)
    {
LABEL_4:
      int v13 = 0;
      goto LABEL_5;
    }

    uint64_t v15 = &a3[v12];
    int v16 = a3[v12];
    if (v16 == 92)
    {
      int v13 = 1;
    }

    else
    {
      if (v16 != 44) {
        goto LABEL_4;
      }
      int v17 = (unsigned __int8 *)malloc(v15 - v14 + 1);
      if (!v17)
      {
        int v67 = v11;
        goto LABEL_31;
      }

      unint64_t v18 = v17;
      memcpy(v17, v14, v15 - v14);
      v18[v15 - v14] = 0;
      uint64_t v19 = sub_1882F5604(v18);
      if (!v19)
      {
        int v67 = v11;
        goto LABEL_30;
      }

      if (v11)
      {
        uint64_t v20 = v11;
        do
        {
          __int128 v21 = v20;
          uint64_t v20 = (_BYTE *)*((void *)v20 + 2);
        }

        while (v20);
        __int128 v22 = v19;
      }

      else
      {
        __int128 v22 = 0LL;
        __int128 v21 = v19;
        uint64_t v11 = v19;
      }

      int v13 = 0;
      *((void *)v21 + 2) = v22;
      uint64_t v14 = v15 + 1;
    }

uint64_t krb5_domain_x500_encode(const char **a1, unsigned int a2, size_t *a3)
{
  if (!a2) {
    return 0LL;
  }
  int v6 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  do
  {
    uint64_t v10 = *v9++;
    int v11 = v6 + strlen(v10);
    if (*v10 == 47) {
      int v6 = v11 + 1;
    }
    else {
      int v6 = v11;
    }
    --v8;
  }

  while (v8);
  int v12 = v6 + a2;
  size_t v13 = (int)(v6 + a2);
  uint64_t v14 = (char *)malloc(v12);
  if (!v14) {
    return 12LL;
  }
  uint64_t v15 = v14;
  uint64_t v16 = 0LL;
  char *v14 = 0;
  do
  {
    if (v16 * 8) {
      strlcat(v15, ",", v13);
    }
    int v17 = a1[v16];
    if (*v17 == 47)
    {
      strlcat(v15, " ", v13);
      int v17 = a1[v16];
    }

    strlcat(v15, v17, v13);
    ++v16;
  }

  while (v7 != v16);
  a3[1] = (size_t)v15;
  size_t v18 = strlen(v15);
  uint64_t result = 0LL;
  *a3 = v18;
  return result;
}

uint64_t krb5_check_transited( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a5;
  if ((_DWORD)a5)
  {
    strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, a3, a4, a5, (uint64_t)a6, a7, a8, (uint64_t)"capaths");
    uint64_t v13 = 0LL;
LABEL_3:
    if (strings)
    {
      uint64_t v14 = (const char **)strings;
      while (1)
      {
        uint64_t v15 = *v14;
        if (!*v14) {
          break;
        }
        ++v14;
        if (!strcmp(v15, *(const char **)(a4 + 8 * v13)))
        {
          krb5_config_free_strings(strings);
          return 0LL;
        }
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v8 = 2529638955LL;
    krb5_config_free_strings(strings);
    krb5_set_error_message(a1, -1765328341, "no transit allowed through realm %s", *(const char **)(a4 + 8 * v13));
    if (a6) {
      *a6 = v13;
    }
  }

  return v8;
}

uint64_t krb5_check_transited_realms( _krb5_context *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a3;
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0LL, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!strings) {
    return 0LL;
  }
  int v12 = strings;
  uint64_t v13 = 0LL;
  if (v9)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = v9;
    do
    {
      uint64_t v16 = (const char *)*v12;
      if (*v12)
      {
        int v17 = *(const char **)(a2 + 8 * v14);
        size_t v18 = (const char **)(v12 + 1);
        while (strcmp(v16, v17))
        {
          uint64_t v19 = *v18++;
          uint64_t v16 = v19;
          if (!v19) {
            goto LABEL_11;
          }
        }

        krb5_set_error_message(a1, -1765328341, "no transit allowed through realm %s", v16);
        uint64_t v13 = 2529638955LL;
        if (a4) {
          *a4 = v14;
        }
      }

_BYTE *sub_1882F5604(unsigned __int8 *a1)
{
  int v2 = calloc(1uLL, 0x18uLL);
  int v3 = v2;
  if (v2)
  {
    *(void *)int v2 = a1;
    int v4 = *a1;
    if (*a1)
    {
      int v5 = 0;
      int v6 = a1;
      do
      {
        uint64_t v7 = *(unsigned __int8 **)v2;
        if (v4 == 32 && v6 == v7)
        {
          v2[8] |= 1u;
        }

        else
        {
          if (v4 == 47 && a1 == v7) {
            v2[8] |= 2u;
          }
          int v8 = *v6;
          if (v5) {
            goto LABEL_17;
          }
          if (v8 != 92)
          {
            if (v8 == 46)
            {
              if (v6[1])
              {
                LOBYTE(v_Block_object_dispose((const void *)(v1 - 128), 8) = 46;
              }

              else
              {
                v2[8] |= 4u;
                LOBYTE(v_Block_object_dispose((const void *)(v1 - 128), 8) = *v6;
              }
            }

void sub_1882F56EC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *(void *)(v1 + 16);
      free(*(void **)v1);
      free((void *)v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

void krb5_verify_init_creds_opt_init(krb5_verify_init_creds_opt *k5_vic_options)
{
  *k5_vic_options = 0LL;
  k5_vic_options[1] = 0LL;
}

void krb5_verify_init_creds_opt_set_ap_req_nofail( krb5_verify_init_creds_opt *k5_vic_options, int ap_req_nofail)
{
  k5_vic_options->flags |= 1u;
  k5_vic_options->ap_req_nofail = ap_req_nofail;
}

uint64_t sub_1882F5740(uint64_t result, uint64_t a2)
{
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 128), 8) = a2;
  return result;
}

krb5_error_code krb5_verify_init_creds( krb5_context context, krb5_creds *creds, krb5_principal ap_req_server, krb5_keytab ap_req_keytab, krb5_ccache *ccache, krb5_verify_init_creds_opt *k5_vic_options)
{
  uint64_t v35 = 0LL;
  krb5_ccache id = 0LL;
  krb5_principal v33 = 0LL;
  krb5_auth_context v34 = 0LL;
  int v12 = "host";
  krb5_keytab v32 = 0LL;
  if (k5_vic_options && *(void *)&k5_vic_options[1]) {
    int v12 = (const char *)k5_vic_options[1];
  }
  krb5_data_zero(&v37);
  if (ap_req_server)
  {
    krb5_principal v33 = ap_req_server;
  }

  else
  {
    krb5_error_code v21 = krb5_sname_to_principal(context, 0LL, v12, 3, &v33);
    if (v21)
    {
      krb5_error_code v13 = v21;
      goto LABEL_29;
    }
  }

  if (ap_req_keytab)
  {
    krb5_keytab v32 = ap_req_keytab;
  }

  else
  {
    krb5_error_code v13 = krb5_kt_default(context, &v32);
    if (v13) {
      goto LABEL_29;
    }
  }

  if (ccache && *ccache)
  {
    krb5_ccache id = *ccache;
  }

  else
  {
    krb5_error_code v13 = krb5_cc_new_unique(context, krb5_cc_type_memory[0], 0LL, &id);
    if (v13) {
      goto LABEL_29;
    }
    krb5_error_code v13 = krb5_cc_initialize(context, id, *(krb5_principal *)&creds->magic);
    if (v13) {
      goto LABEL_29;
    }
    krb5_error_code v13 = krb5_cc_store_cred(context, id, creds);
    if (v13) {
      goto LABEL_29;
    }
  }

  if (!krb5_principal_compare(context, v33, creds->client))
  {
    __int128 v31 = 0u;
    memset(&v30[16], 0, 112);
    *(void *)uint64_t v30 = *(void *)&creds->magic;
    *(void *)&char v30[8] = v33;
    krb5_error_code credentials = krb5_get_credentials(context, 0, id, (krb5_creds *)v30, &v35);
    if (credentials)
    {
      int v14 = credentials;
LABEL_26:
      else {
        krb5_error_code v13 = v14;
      }
      goto LABEL_29;
    }

    krb5_creds creds = v35;
  }

  krb5_error_code v13 = krb5_mk_req_extended(context, &v34, 0, 0LL, creds, &v37);
  krb5_auth_con_free(context, v34);
  krb5_auth_context v34 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  int v14 = -1765328203;
  krb5_error_code v13 = krb5_rd_req(context, &v34, &v37, v33, v32, 0LL, 0LL);
  if (v13 == -1765328203) {
    goto LABEL_26;
  }
LABEL_29:
  if (v34) {
    krb5_auth_con_free(context, v34);
  }
LABEL_31:
  krb5_data_free(&v37);
  if (v35) {
    krb5_free_creds(context, v35);
  }
  if (!ap_req_server && v33) {
    krb5_free_principal(context, v33);
  }
  if (!ap_req_keytab && v32) {
    krb5_kt_close(context, v32);
  }
  if (!id) {
    goto LABEL_44;
  }
  if (!ccache) {
    goto LABEL_43;
  }
  if (v13)
  {
    if (*ccache) {
      return v13;
    }
LABEL_43:
    krb5_cc_destroy(context, id);
  }

BOOL sub_1882F5A00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((*(_BYTE *)a2 & 1) == 0 || !*(_DWORD *)(a2 + 4))
      && !krb5_config_get_BOOL(a1, 0LL, a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
}

krb5_error_code krb5_get_validated_creds( krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service)
{
  if (krb5_principal_compare(context, *(krb5_const_principal *)&creds->magic, client) == 1)
  {
    krb5_error_code inited = krb5_sname_to_principal(context, 0LL, in_tkt_service, 3, &ap_req_server);
    if (!inited)
    {
      krb5_verify_init_creds_opt k5_vic_options = 0LL;
      uint64_t v12 = 0LL;
      krb5_error_code inited = krb5_verify_init_creds(context, creds, ap_req_server, 0LL, 0LL, &k5_vic_options);
      krb5_free_principal(context, ap_req_server);
    }
  }

  else
  {
    krb5_error_code inited = -1765328238;
    krb5_set_error_message(context, -1765328238, "Validation credentials and client doesn't match");
  }

  return inited;
}

double krb5_verify_opt_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = "host";
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = krb5_prompter_posix;
  return result;
}

uint64_t krb5_verify_opt_alloc(_krb5_context *a1, void *a2)
{
  int v4 = calloc(1uLL, 0x40uLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v5 = 0LL;
    v4[2] = 0u;
    v4[3] = 0u;
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    *((_DWORD *)v4 + 6) = 1;
    *((void *)v4 + 4) = "host";
    *((void *)v4 + 6) = krb5_prompter_posix;
  }

  else
  {
    uint64_t v5 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v5;
}

uint64_t krb5_verify_opt_set_ccache(uint64_t result, uint64_t a2)
{
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 128), 8) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_server(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_keytab(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_secure(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_service(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

_DWORD *krb5_verify_opt_set_flags(_DWORD *result, int a2)
{
  *result |= a2;
  return result;
}

uint64_t krb5_verify_opt_set_prompter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 128), 8) = a2;
  *(void *)(result + 56) = a3;
  return result;
}

uint64_t krb5_verify_user_opt(_krb5_context *a1, krb5_principal_data *a2, char *a3, _BYTE *a4)
{
  if (!a4 || (*a4 & 1) == 0) {
    return sub_1882F5D08(a1, a2, a3, (uint64_t)a4);
  }
  uint64_t default_realms = krb5_get_default_realms((CFArrayRef *)a1, (char *const **)&v15);
  if (!(_DWORD)default_realms)
  {
    uint64_t v10 = *v15;
    if (*v15)
    {
      int v11 = v15 + 1;
      do
      {
        uint64_t v12 = krb5_principal_set_realm(a1, (uint64_t)a2, v10);
        if ((_DWORD)v12) {
          break;
        }
        uint64_t v12 = sub_1882F5D08(a1, a2, a3, (uint64_t)a4);
        krb5_error_code v13 = *v11++;
        uint64_t v10 = v13;
      }

      while (v13 && (_DWORD)v12 != 0);
      uint64_t default_realms = v12;
      krb5_free_host_realm(a1, v15);
    }

    else
    {
      krb5_free_host_realm(a1, v15);
      return 2529639136LL;
    }
  }

  return default_realms;
}

uint64_t sub_1882F5D08(_krb5_context *a1, krb5_principal_data *a2, char *a3, uint64_t a4)
{
  uint64_t init_creds_opt_alloc = krb5_get_init_creds_opt_alloc(a1, &opt);
  if (!(_DWORD)init_creds_opt_alloc)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
    krb5_get_init_creds_opt_set_default_flags(a1, 0LL, realm, (uint64_t)opt, v10, v11, v12, v13);
    uint64_t init_creds_opt_alloc = krb5_get_init_creds_password( a1,  (krb5_creds *)creds,  a2,  a3,  *(krb5_prompter_fct *)(a4 + 48),  *(void **)(a4 + 56),  0,  0LL,  opt);
    if ((_DWORD)init_creds_opt_alloc)
    {
LABEL_15:
      krb5_get_init_creds_opt_free(a1, opt);
      return init_creds_opt_alloc;
    }

    uint64_t v15 = *(_krb5_ccache **)(a4 + 8);
    int v14 = *(_krb5_kt **)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 24);
    uint64_t v17 = *(krb5_principal_data **)(a4 + 40);
    if (*(void *)(a4 + 32)) {
      uint64_t v18 = *(const char **)(a4 + 32);
    }
    else {
      uint64_t v18 = "host";
    }
    krb5_verify_init_creds_opt_init(&k5_vic_options);
    krb5_verify_init_creds_opt_set_ap_req_nofail(&k5_vic_options, v16);
    sub_1882F5740((uint64_t)&k5_vic_options, (uint64_t)v18);
    uint64_t init_creds_opt_alloc = krb5_verify_init_creds(a1, (krb5_creds *)creds, v17, v14, 0LL, &k5_vic_options);
    if (!(_DWORD)init_creds_opt_alloc)
    {
      if (v15)
      {
        krb5_ccache v23 = v15;
        uint64_t v19 = v15;
LABEL_9:
        uint64_t init_creds_opt_alloc = krb5_cc_initialize(a1, v19, a2);
        if (!(_DWORD)init_creds_opt_alloc) {
          uint64_t init_creds_opt_alloc = krb5_cc_store_cred(a1, v23, (krb5_creds *)creds);
        }
        if (!v15) {
          krb5_cc_close(a1, v23);
        }
        goto LABEL_14;
      }

      uint64_t init_creds_opt_alloc = krb5_cc_default(a1, &v23);
      if (!(_DWORD)init_creds_opt_alloc)
      {
        uint64_t v19 = v23;
        goto LABEL_9;
      }
    }

uint64_t krb5_verify_user( _krb5_context *a1, krb5_principal_data *a2, uint64_t a3, char *a4, int a5, unint64_t a6)
{
  v7[0] = 0LL;
  __int128 v8 = 0u;
  uint64_t v11 = 0LL;
  v7[1] = a3;
  DWORD2(v_Block_object_dispose((const void *)(v1 - 128), 8) = a5;
  uint64_t v10 = krb5_prompter_posix;
  __int128 v9 = a6;
  return krb5_verify_user_opt(a1, a2, a4, v7);
}

uint64_t krb5_verify_user_lrealm( _krb5_context *a1, krb5_principal_data *a2, uint64_t a3, char *a4, int a5, unint64_t a6)
{
  __int128 v8 = 0u;
  uint64_t v11 = 0LL;
  v7[1] = a3;
  DWORD2(v_Block_object_dispose((const void *)(v1 - 128), 8) = a5;
  uint64_t v10 = krb5_prompter_posix;
  __int128 v9 = a6;
  v7[0] = 1LL;
  return krb5_verify_user_opt(a1, a2, a4, v7);
}

uint64_t krb5_vwarn(_krb5_context *a1, krb5_error_code a2, const char *a3, va_list a4)
{
  return sub_1882F5F64(a1, 1, a2, 1, 0LL, a3, a4);
}

uint64_t sub_1882F5F64( _krb5_context *a1, int a2, krb5_error_code a3, int a4, void (*a5)(char *), const char *a6, va_list a7)
{
  *(_DWORD *)&v26[3] = 0;
  *(_DWORD *)uint64_t v26 = 0;
  krb5_ccache v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  if (!a6)
  {
    int v16 = &v25;
    goto LABEL_8;
  }

  __strlcat_chk();
  if (a2) {
    __strlcat_chk();
  }
  int v14 = vasprintf(&v23, a6, a7);
  uint64_t result = 12LL;
  if ((v14 & 0x80000000) == 0 && v23)
  {
    uint64_t v25 = v23;
    int v16 = (char **)&v24;
LABEL_8:
    uint64_t v17 = 0LL;
    if (a1 && a2)
    {
      __strlcat_chk();
      error_krb5_error_code message = krb5_get_error_message(a1, a3);
      uint64_t v17 = error_message;
      uint64_t v19 = "<unknown error>";
      if (error_message) {
        uint64_t v19 = error_message;
      }
      *int v16 = (char *)v19;
    }

    if (a5)
    {
      a5(v26);
LABEL_18:
      free(v23);
      krb5_free_error_message(a1, v17);
      return 0LL;
    }

    if (a1)
    {
      uint64_t v20 = *((void *)a1 + 19);
      uint64_t v22 = v24;
      krb5_error_code v21 = v25;
      if (v20)
      {
        krb5_log((uint64_t)a1, v20, a4, v26, v25, v24);
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v22 = v24;
      krb5_error_code v21 = v25;
    }

    warnx(v26, v21, v22);
    goto LABEL_18;
  }

  return result;
}

uint64_t krb5_warn( _krb5_context *a1, krb5_error_code a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_1882F5F64(a1, 1, a2, 1, 0LL, a3, &a9);
}

uint64_t krb5_vwarnx(_krb5_context *a1, const char *a2, va_list a3)
{
  return sub_1882F5F64(a1, 0, 0, 1, 0LL, a2, a3);
}

uint64_t krb5_warnx( _krb5_context *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_1882F5F64(a1, 0, 0, 1, 0LL, a2, &a9);
}

void krb5_verr(_krb5_context *a1, int a2, krb5_error_code a3, const char *a4, va_list a5)
{
}

void krb5_err( _krb5_context *a1, int a2, krb5_error_code a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_verrx(_krb5_context *a1, int a2, const char *a3, va_list a4)
{
}

void krb5_errx( _krb5_context *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_vabort(_krb5_context *a1, krb5_error_code a2, const char *a3, va_list a4)
{
}

void krb5_abort( _krb5_context *a1, krb5_error_code a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_vabortx(_krb5_context *a1, const char *a2, va_list a3)
{
}

void krb5_abortx(_krb5_context *a1, const char *a2, ...)
{
}

uint64_t krb5_set_warn_dest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    krb5_closelog(a1, v4);
  }
  *(void *)(a1 + 152) = a2;
  return 0LL;
}

uint64_t krb5_get_warn_dest(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t krb5_set_debug_dest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4) {
    krb5_closelog(a1, v4);
  }
  *(void *)(a1 + 160) = a2;
  return 0LL;
}

uint64_t krb5_get_debug_dest(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t krb5_write_message(_krb5_context *a1, int *a2, char **a3)
{
  unint64_t v6 = *(unsigned int *)a3;
  _krb5_put_int((uint64_t)__buf, v6, 4LL);
  __int128 v8 = __error();
  uint64_t v7 = *v8;
  __int128 v9 = strerror(*v8);
  krb5_set_error_message(a1, v7, "write: %s", v9);
  return v7;
}

uint64_t krb5_write_priv_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  uint64_t v6 = krb5_mk_priv(a1, a2, a4, &v8, 0LL);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = krb5_write_message(a1, a3, (char **)&v8);
    krb5_data_free(&v8);
  }

  return v6;
}

uint64_t krb5_write_safe_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  uint64_t v6 = krb5_mk_safe(a1, a2, a4, &v8, 0LL);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = krb5_write_message(a1, a3, (char **)&v8);
    krb5_data_free(&v8);
  }

  return v6;
}

uint64_t _krb5_expand_default_cc_name_0(_krb5_context *a1, char *__big, void **a3)
{
  if (!__big || (uint64_t v4 = (uint64_t)__big, !*__big))
  {
    uint64_t v4 = 0LL;
    *a3 = strdup("");
    return v4;
  }

  uint64_t v5 = 0LL;
  *a3 = 0LL;
  while (1)
  {
    if (!*(_BYTE *)v4) {
      return 0LL;
    }
    uint64_t v6 = strstr((const char *)v4, "%{");
    uint64_t v7 = (uint64_t)v6;
    if (!v6) {
      break;
    }
    krb5_data v8 = &v6[-v4];
    __int128 v9 = malloc((size_t)(v8 + 1));
    __src = v9;
    if (!v9)
    {
      uint64_t v11 = *a3;
LABEL_37:
      if (!v11)
      {
LABEL_40:
        *a3 = 0LL;
        uint64_t v4 = 12LL;
        if (a1) {
          krb5_set_error_message(a1, 12, "malloc - out of memory");
        }
        return v4;
      }

      krb5_error_code v21 = v11;
LABEL_39:
      free(v21);
      goto LABEL_40;
    }

    uint64_t v10 = (char *)v9;
    memcpy(v9, (const void *)v4, v7 - v4);
    v8[(void)v10] = 0;
    uint64_t v11 = *a3;
    uint64_t v4 = v7;
LABEL_23:
    size_t v17 = strlen(v10);
    uint64_t v18 = (char *)realloc(v11, v17 + v5 + 1);
    if (!v18)
    {
      free(__src);
      krb5_error_code v21 = *a3;
      if (!*a3) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

    *a3 = v18;
    uint64_t v19 = __src;
    memcpy(&v18[v5], __src, v17 + 1);
    free(v19);
    v5 += v17;
    if (!v4) {
      return v4;
    }
  }

  if (!v6)
  {
    uint64_t v10 = strdup((const char *)v4);
    uint64_t v4 = 0LL;
    __src = v10;
LABEL_22:
    uint64_t v11 = *a3;
    if (!v10) {
      goto LABEL_37;
    }
    goto LABEL_23;
  }

  uint64_t v12 = strchr(v6, 125);
  if (!v12)
  {
    if (*a3) {
      free(*a3);
    }
    *a3 = 0LL;
    uint64_t v4 = 22LL;
    if (a1) {
      krb5_set_error_message(a1, 22, "variable missing }");
    }
    return v4;
  }

  uint64_t v13 = v12;
  uint64_t v14 = (uint64_t)&v12[-v7];
  __src = 0LL;
  if (*(_BYTE *)v7 == 37 && *(_BYTE *)(v7 + 1) == 123 && v14 >= 3 && *v12 == 125)
  {
    uint64_t v15 = 0LL;
    while (strncmp((const char *)(v7 + 2), (&off_18A21A430)[v15], v14 - 2))
    {
      v15 += 4LL;
      if (v15 == 44) {
        goto LABEL_27;
      }
    }

    uint64_t v16 = ((uint64_t (*)(_krb5_context *, void, char *, void **))(&off_18A21A430)[v15 + 3])( a1,  0LL,  (&off_18A21A430)[v15 + 2],  &__src);
    if ((_DWORD)v16)
    {
      uint64_t v4 = v16;
      goto LABEL_29;
    }

    uint64_t v4 = (uint64_t)(v13 + 1);
    uint64_t v10 = (char *)__src;
    goto LABEL_22;
  }

LABEL_27:
  uint64_t v4 = 22LL;
  if (a1) {
    krb5_set_error_message(a1, 22, "Invalid token: %.*s", v14, (const char *)v7);
  }
LABEL_29:
  if (*a3) {
    free(*a3);
  }
  *a3 = 0LL;
  return v4;
}

    size_t v17 = 12LL;
LABEL_29:
    hx509_clear_error_string(a1);
    goto LABEL_30;
  }

  return v17;
}

          abort();
        }

        free(v7);
      }
    }

    sub_188313CD0();
    return 0LL;
  }

  uint64_t v12 = 0uLL;
  v13[0] = 0uLL;
  uint64_t v11 = 0uLL;
  uint64_t v5 = sub_188313C60();
  uint64_t v6 = malloc(v5);
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = v6;
  if (!sub_188313C40())
  {
    sub_188313C70();
    if (v18 == v5)
    {
      krb5_data v8 = MEMORY[0x18960B4A8](0LL, v7, v5, 1LL);
LABEL_21:
      int v3 = v8;
      free(v7);
      return v3;
    }

    goto LABEL_27;
  }

  free(v7);
LABEL_4:
  sub_188313C70();
  return 0LL;
}

uint64_t sub_1882F67DC(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v5 = 2529639048LL;
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    uint64_t v7 = MainBundle;
    InfoDictionary = CFBundleGetInfoDictionary(MainBundle);
    if (InfoDictionary)
    {
      if (CFDictionaryGetCount(InfoDictionary))
      {
        __int128 v9 = CFBundleCopyResourcesDirectoryURL(v7);
        if (v9)
        {
          uint64_t v10 = v9;
          int v11 = CFURLGetFileSystemRepresentation(v9, 1u, buffer, 1024LL);
          CFRelease(v10);
          uint64_t v5 = 12LL;
          if (v11)
          {
            uint64_t v12 = strdup((const char *)buffer);
            *a4 = v12;
            if (v12) {
              return 0LL;
            }
            else {
              return 12LL;
            }
          }
        }
      }
    }
  }

  return v5;
}

uint64_t sub_1882F68AC(int a1, int a2, char *a3, char **a4)
{
  uint64_t v5 = getenv(a3);
  if (!v5) {
    uint64_t v5 = "";
  }
  uint64_t v6 = strdup(v5);
  *a4 = v6;
  if (v6) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

uint64_t sub_1882F68F0(_krb5_context *a1, int a2, char *__s1, char **a4)
{
  uint64_t v6 = strdup(__s1);
  *a4 = v6;
  if (v6) {
    return 0LL;
  }
  uint64_t v7 = 12LL;
  krb5_set_error_message(a1, 12, "malloc - out of memory");
  return v7;
}

uint64_t sub_1882F6944(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  if (issuid() || (uint64_t v5 = getenv("TEMP")) == 0LL) {
    uint64_t v5 = "/tmp";
  }
  uint64_t v6 = strdup(v5);
  *a4 = v6;
  if (v6) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

uint64_t sub_1882F6994(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uid_t v5 = getuid();
  int v6 = asprintf(a4, "%ld", v5);
  uint64_t result = 12LL;
  if ((v6 & 0x80000000) == 0)
  {
    if (*a4) {
      return 0LL;
    }
    else {
      return 12LL;
    }
  }

  return result;
}

uint64_t sub_1882F69EC(_krb5_context *a1, uint64_t a2, uint64_t a3, char **a4)
{
  if (getaudit_addr(&v8, 48))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v6 = *__error();
    krb5_set_error_message(a1, v6, "cant get audit information for the session");
  }

  return v6;
}

uint64_t sub_1882F6A8C(_krb5_context *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6 = strdup("");
  *a4 = v6;
  if (v6) {
    return 0LL;
  }
  uint64_t v7 = 12LL;
  if (a1) {
    krb5_set_error_message(a1, 12, "Out of memory");
  }
  return v7;
}

uint64_t sub_1882F6AF0( _krb5_context *a1, void *a2, void *dataOut, size_t __size, int a5, uint64_t a6, const void *a7)
{
  if (__size > 0xF)
  {
    uint64_t v10 = *(void *)(a2[1] + 8LL);
    if (__size == 16)
    {
      if (CCCrypt( a5 == 0,  *(_DWORD *)(*(void *)(v10 + 16) + 80LL),  0,  *(const void **)(*a2 + 16LL),  *(void *)(*a2 + 8LL),  0LL,  dataOut,  0x10uLL,  dataOut,  0x10uLL,  &dataOutMoved))
      {
        heim_abort("CCCrypt failed:s == 0", v11, v12, v13, v14, v15, v16, v17, dataOutb);
      }

      if (dataOutMoved != 16) {
        heim_abort("moved == len:moved == len", v11, v12, v13, v14, v15, v16, v17, dataOutb);
      }
    }

    else
    {
      uint64_t v19 = *(_CCCryptor **)(v10 + 8LL * (a5 == 0));
      uint64_t v20 = (char *)malloc(__size);
      if (!v20) {
        return 12LL;
      }
      krb5_error_code v21 = v20;
      if (a7) {
        uint64_t v22 = a7;
      }
      else {
        uint64_t v22 = &unk_18831A4E8;
      }
      CCCryptorReset(v19, v22);
      if (CCCryptorUpdate(v19, dataOut, __size, v21, __size, &dataOutMoved)) {
        heim_abort("CCCryptorUpdate failed:s == 0", v23, v24, v25, v26, v27, v28, v29, dataOuta);
      }
      size_t v30 = __size - dataOutMoved;
      if (CCCryptorFinal(v19, &v21[dataOutMoved], __size - dataOutMoved, &dataOutMoved)) {
        heim_abort("CCCryptorFinal failed:s == 0", v31, v32, v33, v34, v35, v36, v37, dataOuta);
      }
      if (v30 != dataOutMoved) {
        heim_abort("plen == 0:plen == 0", v31, v32, v33, v34, v35, v36, v37, dataOuta);
      }
      memcpy(dataOut, v21, __size);
      free(v21);
    }

    return 0LL;
  }

  else
  {
    uint64_t v7 = 22LL;
    krb5_set_error_message(a1, 22, "message block too short");
  }

  return v7;
}

uint64_t sub_1882F6C90(_krb5_context *a1, const krb5_keyblock **a2, void *a3, uint64_t a4)
{
  auditinfo_addr v8 = *(int **)&(*a2)[2].magic;
  int v25 = *v8;
  uint64_t v9 = krb5_data_alloc(v26, *((void *)v8 + 3));
  if ((_DWORD)v9)
  {
    uint64_t v10 = v9;
    krb5_set_error_message(a1, v9, "malloc: out memory");
  }

  else
  {
    uint64_t v11 = (*((uint64_t (**)(_krb5_context *, void, void, void, void, int *))v8 + 5))( a1,  0LL,  a3[1],  *a3,  0LL,  &v25);
    if ((_DWORD)v11)
    {
      uint64_t v10 = v11;
      krb5_data_free(v26);
    }

    else
    {
      uint64_t v12 = *a2;
      if ((krb5_octet *)v26[0] < (*a2)->contents) {
        krb5_abortx(a1, "internal prf error");
      }
      uint64_t v24 = 0LL;
      size_t contents = (size_t)(*a2)->contents;
      size_t dataOutAvailable = v26[0] / contents * contents;
      if (dataOutAvailable != *(void *)&(*a2)[3].length) {
        heim_abort( "prfsize not same ?:prfsize == crypto->et->prf_length",  contents,  v13,  v14,  v15,  v16,  v17,  v18,  dataOut);
      }
      if (CCCrypt( 0,  *((_DWORD *)(*a2)[1].contents + 20),  0,  v24->contents,  *((void *)(*a2)[1].contents + 3),  0LL,  (const void *)v26[1],  dataOutAvailable,  *(void **)(a4 + 8),  dataOutAvailable,  &v23)
        || v23 != dataOutAvailable)
      {
        krb5_abortx(a1, "encrypt failed");
      }

      krb5_data_free(v26);
      krb5_free_keyblock(a1, v24);
      return 0LL;
    }
  }

  return v10;
}

uint64_t sub_1882F6E5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a3;
  uint64_t cryptorRef = *(void *)(a3[1] + 8LL);
  CCAlgorithm v6 = *(_DWORD *)(a2 + 80);
  *(void *)(cryptorRef + 16) = a2;
  if (CCCryptorCreateWithMode( 0,  2u,  v6,  0xCu,  0LL,  *(const void **)(v4 + 16),  *(void *)(v4 + 8),  0LL,  0LL,  0,  0,  (CCCryptorRef *)cryptorRef)
    || (uint64_t result = CCCryptorCreateWithMode( 1u,  2u,  v6,  0xCu,  0LL,  *(const void **)(*a3 + 16LL),  *(void *)(*a3 + 8LL),  0LL,  0LL,  0,  0,  (CCCryptorRef *)(cryptorRef + 8)),  (_DWORD)result))
  {
    abort();
  }

  return result;
}

uint64_t sub_1882F6EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(CCCryptorRef **)(*(void *)(a2 + 8) + 8LL);
  CCCryptorRelease(*v2);
  return CCCryptorRelease(v2[1]);
}

uint64_t sub_1882F6F28(_krb5_context *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v9 = sub_1882C6F90(7);
  strcpy(v20, "signaturekey");
  if (CCDigestCreate())
  {
    *(void *)&__int128 v17 = 16LL;
    *((void *)&v17 + 1) = &v18;
    uint64_t v10 = sub_1882C6D18((uint64_t)a1, (uint64_t)v9, v20, 0xDuLL, 0LL, a2, (uint64_t)v16);
    if ((_DWORD)v10)
    {
      uint64_t v11 = v10;
      CCDigestDestroy();
    }

    else
    {
      uint64_t v15 = &v13;
      __int128 v14 = v17;
      CCDigestUpdate();
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      return sub_1882C6D18((uint64_t)a1, (uint64_t)v9, v19, 0x10uLL, 0LL, (uint64_t *)&v15, a6);
    }
  }

  else
  {
    uint64_t v11 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  return v11;
}

uint64_t sub_1882F70B4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 22)
  {
    if (v2 == 23)
    {
      int v3 = 15;
      goto LABEL_10;
    }

    if (v2 == 24)
    {
      int v3 = 0;
      goto LABEL_10;
    }
  }

  else
  {
    if (v2 == 3)
    {
      int v3 = 8;
      goto LABEL_10;
    }

    if (v2 == 22)
    {
      int v3 = 13;
LABEL_10:
      *a2 = v3;
    }
  }

  return 0LL;
}

uint64_t sub_1882F7108(_krb5_context *a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v6 = a6;
  v34[21] = *MEMORY[0x1895F89C0];
  if (a6 > 22)
  {
    if (a6 == 23)
    {
      int v6 = 15;
    }

    else if (a6 == 24)
    {
      int v6 = 0;
    }
  }

  else if (a6 == 3)
  {
    int v6 = 8;
  }

  else if (a6 == 22)
  {
    int v6 = 13;
  }

  if (a5)
  {
    uint64_t v11 = sub_1882C6F90(7);
    v30[0] = v6;
    *(void *)&__int128 v29 = 16LL;
    *((void *)&v29 + 1) = &v33;
    if (!sub_1882C6D18(0LL, (uint64_t)v11, v30, 4uLL, 0LL, a2, (uint64_t)v28))
    {
      __int128 v32 = v33;
      *(void *)&__int128 v20 = 16LL;
      *((void *)&v20 + 1) = &v32;
      v21[0] = (uint64_t)&v19;
      uint64_t v23 = 16LL;
      uint64_t v24 = a3;
      if (!sub_1882C6D18(0LL, (uint64_t)v11, a3 + 16, a4 - 16, 0LL, v21, (uint64_t)v22))
      {
        v21[0] = (uint64_t)&v19;
        __int128 v20 = v29;
        uint64_t v26 = 16LL;
        *(void *)uint64_t v27 = v31;
        if (!sub_1882C6D18(0LL, (uint64_t)v11, a3, 0x10uLL, 0LL, v21, (uint64_t)v25))
        {
          hc_EVP_CIPHER_CTX_init((uint64_t)v34);
          char v13 = hc_EVP_rc4(v12);
          hc_EVP_CipherInit_ex((uint64_t)v34, (uint64_t)v13, 0, *(uint64_t *)v27, 0LL, 1LL);
          hc_EVP_Cipher((uint64_t)v34);
          hc_EVP_CIPHER_CTX_cleanup(v34);
          return 0LL;
        }
      }
    }

uint64_t sub_1882F7440(uint64_t a1, uint64_t a2, uint64_t a3, size_t *a4)
{
  auditinfo_addr v8 = sub_1882C6F90(14);
  uint64_t v9 = krb5_data_alloc(a4, *((void *)v8 + 3));
  if (!(_DWORD)v9)
  {
    size_t v10 = a4[1];
    size_t v13 = *a4;
    size_t v14 = v10;
    if (sub_1882C6D18( a1,  (uint64_t)v8,  *(const void **)(a3 + 8),  *(void *)a3,  0LL,  (uint64_t *)(a2 + 8),  (uint64_t)v12)) {
      krb5_data_free(a4);
    }
  }

  return v9;
}

_BYTE *sub_1882F74D4(_BYTE *result, _BYTE *a2)
{
  *result ^= *a2;
  result[1] ^= a2[1];
  result[2] ^= a2[2];
  result[3] ^= a2[3];
  result[4] ^= a2[4];
  result[5] ^= a2[5];
  result[6] ^= a2[6];
  result[7] ^= a2[7];
  return result;
}

uint64_t sub_1882F7558(_krb5_context *a1)
{
  uint64_t result = CCDigest();
  if ((_DWORD)result) {
    krb5_abortx(a1, "md5 checksum failed");
  }
  return result;
}

uint64_t sub_1882F75A0(_krb5_context *a1, const krb5_keyblock **a2, void *a3, size_t *a4)
{
  v25[21] = *MEMORY[0x1895F89C0];
  auditinfo_addr v8 = *(int **)&(*a2)[2].magic;
  int v23 = *v8;
  uint64_t v9 = krb5_data_alloc(&v24, *((void *)v8 + 3));
  if ((_DWORD)v9)
  {
    uint64_t v10 = v9;
    krb5_set_error_message(a1, v9, "malloc: out memory");
  }

  else
  {
    uint64_t v11 = (*((uint64_t (**)(_krb5_context *, void, void, void, void, int *))v8 + 5))( a1,  0LL,  a3[1],  *a3,  0LL,  &v23);
    if ((_DWORD)v11)
    {
      uint64_t v10 = v11;
      krb5_data_free(&v24);
    }

    else
    {
      uint64_t v12 = *a2;
      if ((krb5_octet *)v24 < (*a2)->contents) {
        krb5_abortx(a1, "internal prf error");
      }
      uint64_t v22 = 0LL;
      if (v24 / (size_t)(*a2)->contents * (size_t)(*a2)->contents != *(void *)&(*a2)[3].length) {
        heim_abort("prfsize not same ?:prfsize == crypto->et->prf_length", v13, v14, v15, v16, v17, v18, v19, (char)v22);
      }
      uint64_t v20 = (*((uint64_t (**)(void))(*a2)[1].contents + 10))();
      hc_EVP_CIPHER_CTX_init((uint64_t)v25);
      hc_EVP_CipherInit_ex((uint64_t)v25, v20, 0, (uint64_t)v22->contents, 0LL, 1LL);
      hc_EVP_Cipher((uint64_t)v25);
      hc_EVP_CIPHER_CTX_cleanup(v25);
      krb5_data_free(&v24);
      krb5_free_keyblock(a1, v22);
      return 0LL;
    }
  }

  return v10;
}

_BYTE *sub_1882F779C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 <= 0x14) {
    abort();
  }
  bzero(*(void **)(a2 + 16), *(void *)(a2 + 8));
  uint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = v7;
  do
  {
    for (uint64_t i = 0LL; i != 7; ++i)
      *(_BYTE *)(v8 + i) = *(_BYTE *)(a3 + i);
    char v10 = 0;
    for (uint64_t j = 6LL; j != -1; --j)
      char v10 = 2 * (*(_BYTE *)(a3 + j) & 1 | v10);
    *(_BYTE *)(v7 + ((8 * v6++) | 7)) = v10;
    v8 += 8LL;
    a3 += 7LL;
  }

  while (v6 != 3);
  uint64_t v12 = 0LL;
  uint64_t v13 = *(void *)(a2 + 16);
  do
  {
    MEMORY[0x1895C0F0C](v13 + v12, 8LL);
    uint64_t result = (_BYTE *)MEMORY[0x1895C0F00](v13 + v12, 8LL);
    if ((_DWORD)result) {
      uint64_t result = sub_1882F74D4((_BYTE *)(v13 + v12), byte_18831A508);
    }
    v12 += 8LL;
  }

  while (v12 != 24);
  return result;
}

uint64_t sub_1882F7888(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  for (uint64_t i = v3; ; uint64_t i = *(void *)(a2 + 16))
  {
    krb5_generate_random_block(i, *(void *)(a2 + 8));
    MEMORY[0x1895C0F0C](v3, 8LL);
    MEMORY[0x1895C0F0C](v3 + 8, 8LL);
    MEMORY[0x1895C0F0C](v3 + 16, 8LL);
    if (!MEMORY[0x1895C0F00](v3, 8LL) && !MEMORY[0x1895C0F00](v3 + 8, 8LL))
    {
      uint64_t result = MEMORY[0x1895C0F00](v3 + 16, 8LL);
      if (!(_DWORD)result) {
        break;
      }
    }
  }

  return result;
}

uint64_t sub_1882F7920(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[1] + 8LL);
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 80))();
  hc_EVP_CIPHER_CTX_init(v4);
  hc_EVP_CIPHER_CTX_init(v4 + 168);
  hc_EVP_CipherInit_ex(v4, v5, 0, *(void *)(*a3 + 16LL), 0LL, 1LL);
  return hc_EVP_CipherInit_ex(v4 + 168, v5, 0, *(void *)(*a3 + 16LL), 0LL, 0LL);
}

uint64_t sub_1882F79A8(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t **)(*(void *)(a2 + 8) + 8LL);
  hc_EVP_CIPHER_CTX_cleanup(v2);
  return hc_EVP_CIPHER_CTX_cleanup(v2 + 21);
}

uint64_t sub_1882F79D4(_krb5_context *a1, uint64_t a2, int a3, int a4, int a5, int a6, void *__src)
{
  if (a5) {
    uint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8LL);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8LL) + 168LL;
  }
  if (__src)
  {
    hc_EVP_CipherInit_ex(v7, 0LL, 0, 0LL, __src, 0xFFFFFFFFLL);
LABEL_8:
    hc_EVP_Cipher(v7);
    return 0LL;
  }

  size_t v9 = hc_EVP_CIPHER_CTX_iv_length(v7);
  char v10 = malloc(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    bzero(v10, v9);
    hc_EVP_CipherInit_ex(v7, 0LL, 0, 0LL, v11, 0xFFFFFFFFLL);
    free(v11);
    goto LABEL_8;
  }

  krb5_clear_error_message(a1);
  return 12LL;
}

uint64_t sub_1882F7AAC()
{
  return 0LL;
}

uint64_t sub_1882F7AB4()
{
  return 0LL;
}

uint64_t _krb5_pk_octetstring2key( _krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v12 = sub_1882C6B58(a2);
  if (!v12)
  {
    uint64_t v19 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
    return v19;
  }

  size_t v13 = (unint64_t)(*(void *)(*((void *)v12 + 5) + 16LL) + 7LL) >> 3;
  uint64_t v14 = malloc(v13);
  if (!v14)
  {
LABEL_16:
    uint64_t v19 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v19;
  }

  uint64_t v15 = v14;
  if (!CCDigestCreate())
  {
    free(v15);
    goto LABEL_16;
  }

  int v21 = a2;
  uint64_t v22 = a7;
  size_t v16 = 0LL;
  char v23 = 0;
  unint64_t v17 = v13;
  do
  {
    CCDigestReset();
    CCDigestUpdate();
    CCDigestUpdate();
    if (a5) {
      CCDigestUpdate();
    }
    if (a6) {
      CCDigestUpdate();
    }
    CCDigestFinal();
    if (v17 >= 0x14) {
      size_t v18 = 20LL;
    }
    else {
      size_t v18 = v17;
    }
    memcpy((char *)v15 + v16, __src, v18);
    v16 += 20LL;
    ++v23;
    v17 -= 20LL;
  }

  while (v16 < v13);
  __src[0] = 0LL;
  __src[1] = 0LL;
  int v25 = 0;
  CCDigestDestroy();
  uint64_t v19 = krb5_random_to_key(a1, v21, v15, v13, v22);
  void *v15 = 0LL;
  free(v15);
  return v19;
}

uint64_t _krb5_pk_kdf( _krb5_context *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!der_heim_oid_cmp())
  {
    uint64_t v19 = 20LL;
LABEL_6:
    uint64_t v20 = *((void *)a2 + 2);
    if (v20 && (*(void *)v20 != 2LL || **(_WORD **)(v20 + 8) != 5))
    {
      uint64_t v17 = 2529639062LL;
      size_t v18 = "kdf params not NULL or the NULL-type";
      goto LABEL_16;
    }

    int v21 = sub_1882C6B58(a7);
    if (!v21)
    {
      uint64_t v17 = 2529639062LL;
      uint64_t v36 = a7;
      size_t v18 = "encryption type %d not supported";
      goto LABEL_16;
    }

    size_t v22 = (unint64_t)(*(void *)(*((void *)v21 + 5) + 16LL) + 7LL) >> 3;
    char v23 = malloc(v22);
    if (v23)
    {
      size_t v37 = v19;
      unint64_t v38 = v22;
      uint64_t v39 = v23;
      uint64_t v42 = 0LL;
      krb5_data_zero(&v40);
      uint64_t v50 = 0LL;
      *(_OWORD *)int64_t v48 = 0u;
      *(_OWORD *)__int128 v49 = 0u;
      __int128 __src = 0u;
      __int128 v47 = 0u;
      v45[1] = a8;
      v45[0] = a7;
      v45[2] = a9;
      v45[3] = a10;
      size_t v24 = sub_1882FEAB8();
      size_t v43 = v24;
      int v25 = malloc(v24);
      size_t v44 = v25;
      if (!v25)
      {
        uint64_t v17 = 12LL;
        goto LABEL_19;
      }

      uint64_t v26 = v25;
      uint64_t v27 = sub_1882FEA98();
      if ((_DWORD)v27)
      {
        uint64_t v17 = v27;
        free(v26);
LABEL_19:
        krb5_set_error_message(a1, v17, "malloc: out of memory");
LABEL_20:
        __int128 v29 = v39;
LABEL_21:
        free(v29);
        return v17;
      }

      if (v24 != v42) {
        goto LABEL_45;
      }
      if (a5)
      {
        uint64_t v30 = sub_1882F80C0(a1, a5, (uint64_t)&v47 + 8);
        if ((_DWORD)v30)
        {
          uint64_t v17 = v30;
LABEL_29:
          free(v26);
          goto LABEL_20;
        }
      }

      if (a6)
      {
        uint64_t v31 = sub_1882F80C0(a1, a6, (uint64_t)&v48[1]);
        if ((_DWORD)v31)
        {
          uint64_t v17 = v31;
          free(v48[0]);
          goto LABEL_29;
        }
      }

      __int128 __src = *a2;
      *(void *)&__int128 v47 = *((void *)a2 + 2);
      v49[1] = &v43;
      size_t v40 = sub_1882FEA88();
      uint64_t v41 = malloc(v40);
      if (v41)
      {
        uint64_t v17 = sub_1882FEA68();
        if ((_DWORD)v17)
        {
          free(v41);
          uint64_t v41 = 0LL;
        }
      }

      else
      {
        uint64_t v17 = 12LL;
      }

      free(v48[0]);
      free(v49[0]);
      free(v44);
      if ((_DWORD)v17) {
        goto LABEL_19;
      }
      if (v40 != v42) {
LABEL_45:
      }
        krb5_abortx(a1, "asn1 compiler internal error");
      if (CCDigestCreate())
      {
        unint64_t v32 = 0LL;
        unsigned int v33 = 1;
        size_t v34 = v38;
        do
        {
          CCDigestReset();
          _krb5_put_int((uint64_t)v45, v33, 4LL);
          CCDigestUpdate();
          CCDigestUpdate();
          CCDigestUpdate();
          CCDigestFinal();
          if (v34 >= v37) {
            size_t v35 = v37;
          }
          else {
            size_t v35 = v34;
          }
          memcpy((char *)v39 + v32, &__src, v35);
          v32 += v37;
          ++v33;
          v34 -= v37;
        }

        while (v32 < v38);
        *(_OWORD *)int64_t v48 = 0u;
        *(_OWORD *)__int128 v49 = 0u;
        __int128 __src = 0u;
        __int128 v47 = 0u;
        CCDigestDestroy();
        free(v41);
        uint64_t v17 = krb5_random_to_key(a1, a7, v39, v38, a11);
        *uint64_t v39 = 0LL;
        __int128 v29 = v39;
        goto LABEL_21;
      }

      free(v39);
      free(v41);
    }

    uint64_t v17 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v17;
  }

  if (!der_heim_oid_cmp())
  {
    uint64_t v19 = 64LL;
    goto LABEL_6;
  }

  uint64_t v17 = 2529639062LL;
  size_t v18 = "KDF not supported";
LABEL_16:
  krb5_set_error_message(a1, -1765328234, v18, v36);
  return v17;
}

uint64_t sub_1882F80C0(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = sub_1882FE8A8();
  *(void *)a3 = v5;
  uint64_t v6 = malloc(v5);
  *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 128), 8) = v6;
  if (!v6)
  {
    uint64_t v8 = 12LL;
    goto LABEL_5;
  }

  uint64_t v7 = sub_1882FE888();
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    free(*(void **)(a3 + 8));
    *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
LABEL_5:
    krb5_data_zero((void *)a3);
    krb5_set_error_message(a1, v8, "Failed to encode KRB5PrincipalName");
    return v8;
  }

  if (*(void *)a3) {
    krb5_abortx(a1, "asn1 compiler internal error");
  }
  return 0LL;
}

uint64_t krb5_generate_random_block(uint64_t a1, uint64_t a2)
{
  uint64_t result = CCRandomCopyBytes();
  if ((_DWORD)result) {
    krb5_abortx(0LL, "Failed reading %lu random bytes", a2);
  }
  return result;
}

uint64_t sub_1882F81F0( _krb5_context *a1, int a2, size_t a3, const char *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, krb5_keyblock *a8)
{
  uint64_t v14 = 2529639063LL;
  if (a6 == 4)
  {
    _krb5_get_int(a7, (unint64_t *)v23, 4LL);
    unsigned int v15 = v23[0];
  }

  else
  {
    if (a6) {
      return v14;
    }
    unsigned int v15 = _krb5_AES_string_to_default_iterator;
  }

  size_t v16 = sub_1882C6B58(a2);
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    v23[1] = 0LL;
    size_t v18 = calloc(1uLL, 0x18uLL);
    v23[0] = (krb5_keyblock *)v18;
    if (v18)
    {
      uint64_t v19 = (uint8_t **)v18;
      *(_DWORD *)size_t v18 = a2;
      uint64_t v20 = krb5_data_alloc((size_t *)v18 + 1, *(void *)(*(void *)(v17 + 40) + 24LL));
      if ((_DWORD)v20)
      {
        uint64_t v21 = v20;
        krb5_set_error_message(a1, v20, "malloc: out of memory");
        return v21;
      }

      else if (hc_PKCS5_PBKDF2_HMAC_SHA1( a4,  a3,  *(uint8_t **)(a5 + 16),  *(void *)(a5 + 8),  v15,  *(void *)(*(void *)(v17 + 40) + 24LL),  v19[2]))
      {
        uint64_t v14 = sub_1882C92F8(a1, v17, (uint64_t)v23, "kerberos", 8uLL);
        if (!(_DWORD)v14) {
          uint64_t v14 = krb5_copy_keyblock_contents(a1, v23[0], a8);
        }
        sub_1882C9648(a1, (uint64_t)v23, v17);
      }

      else
      {
        sub_1882C9648(a1, (uint64_t)v23, v17);
        krb5_set_error_message(a1, -1765328233, "Error calculating s2k", v23[0]);
      }
    }

    else
    {
      uint64_t v14 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory", 0LL);
    }
  }

  return v14;
}

uint64_t sub_1882F8394( _krb5_context *a1, int a2, size_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v24 = 0LL;
  if (getenv("KRB5_USE_BROKEN_ARCFOUR_STRING2KEY")) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = krb5_heim_use_broken_arcfour_string2key == 0;
  }
  if (v13)
  {
    unsigned int v15 = (char *)malloc(a3 + 1);
    if (!v15)
    {
      uint64_t v14 = 12LL;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v14;
    }

    size_t v16 = v15;
    memcpy(v15, a4, a3);
    v16[a3] = 0;
    if (CCDigestCreate())
    {
      uint64_t v17 = wind_utf8ucs2_length(v16, &v24);
      if ((_DWORD)v17)
      {
        uint64_t v14 = v17;
        krb5_set_error_message(a1, v17, "Password not an UCS2 string");
LABEL_21:
        CCDigestDestroy();
LABEL_22:
        free(v16);
        return v14;
      }

      size_t v18 = v24;
      uint64_t v19 = malloc(2 * v24);
      uint64_t v20 = v19;
      if (!v18 || v19)
      {
        uint64_t v22 = wind_utf8ucs2(v16, (uint64_t)v19, &v24);
        if ((_DWORD)v22)
        {
          uint64_t v14 = v22;
          krb5_set_error_message(a1, v22, "Password not an UCS2 string");
        }

        else
        {
          if (v24)
          {
            for (size_t i = 0LL; i < v24; ++i)
            {
              CCDigestUpdate();
              CCDigestUpdate();
            }
          }

          *(_DWORD *)a8 = a2;
          uint64_t v14 = krb5_data_alloc((size_t *)(a8 + 8), 0x10uLL);
          if ((_DWORD)v14) {
            krb5_set_error_message(a1, 12, "malloc: out of memory");
          }
          else {
            CCDigestFinal();
          }
        }

        CCDigestDestroy();
        if (v20)
        {
          bzero(v20, v24);
          free(v20);
        }

        goto LABEL_22;
      }
    }

    uint64_t v14 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_21;
  }

  if (CCDigestCreate())
  {
    for (; a3; --a3)
    {
      ++a4;
      CCDigestUpdate();
      char v25 = 0;
      CCDigestUpdate();
    }

    *(_DWORD *)a8 = a2;
    uint64_t v14 = krb5_data_alloc((size_t *)(a8 + 8), 0x10uLL);
    if ((_DWORD)v14) {
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
    else {
      CCDigestFinal();
    }
  }

  else
  {
    uint64_t v14 = 12LL;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }

  CCDigestDestroy();
  return v14;
}

uint64_t sub_1882F8638( _krb5_context *a1, int a2, size_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, krb5_keyblock *a8)
{
  size_t v14 = *(void *)(a5 + 8);
  size_t v15 = v14 + a3;
  size_t v16 = (char *)malloc(v14 + a3);
  if (v15) {
    BOOL v17 = v16 == 0LL;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12LL;
  }

  else
  {
    size_t v18 = v16;
    memcpy(v16, a4, a3);
    memcpy(&v18[a3], *(const void **)(a5 + 16), v14);
    uint64_t v19 = krb5_string_to_key_derived(a1, v18, v15, a2, a8);
    bzero(v18, v15);
    free(v18);
    return v19;
  }

krb5_error_code krb5_salttype_to_string(krb5_int32 a1, char *a2, size_t a3)
{
  uint64_t v4 = v3;
  int v5 = a3;
  uint64_t v6 = *(_krb5_context **)&a1;
  uint64_t v7 = sub_1882C6B58((int)a2);
  if (v7)
  {
    uint64_t v8 = *(_DWORD **)(*((void *)v7 + 5) + 56LL);
    if (v8 && (int v9 = *v8) != 0)
    {
      char v10 = (const char **)(v8 + 6);
      while (v9 != v5)
      {
        int v11 = *(_DWORD *)v10;
        v10 += 3;
        int v9 = v11;
        if (!v11) {
          goto LABEL_7;
        }
      }

      size_t v14 = strdup(*(v10 - 2));
      _OWORD *v4 = v14;
      if (v14)
      {
        return 0;
      }

      else
      {
        krb5_error_code v12 = 12;
        krb5_set_error_message(v6, 12, "malloc: out of memory");
      }
    }

    else
    {
LABEL_7:
      krb5_error_code v12 = -1980176638;
      krb5_set_error_message(v6, -1980176638, "salttype %d not supported");
    }
  }

  else
  {
    krb5_error_code v12 = -1765328234;
    krb5_set_error_message(v6, -1765328234, "encryption type %d not supported");
  }

  return v12;
}

krb5_error_code krb5_string_to_salttype(char *a1, krb5_int32 *a2)
{
  uint64_t v4 = v3;
  int v5 = v2;
  uint64_t v7 = sub_1882C6B58((int)a2);
  if (v7)
  {
    uint64_t v8 = *(_DWORD **)(*((void *)v7 + 5) + 56LL);
    if (v8 && (int v9 = *v8) != 0)
    {
      char v10 = (const char **)(v8 + 6);
      while (strcasecmp(*(v10 - 2), v5))
      {
        int v11 = *(_DWORD *)v10;
        v10 += 3;
        int v9 = v11;
        if (!v11) {
          goto LABEL_7;
        }
      }

      krb5_error_code v12 = 0;
      _DWORD *v4 = v9;
    }

    else
    {
LABEL_7:
      krb5_error_code v12 = -1980176638;
      krb5_set_error_message((krb5_context)a1, -1980176638, "salttype %s not supported");
    }
  }

  else
  {
    krb5_error_code v12 = -1765328234;
    krb5_set_error_message((krb5_context)a1, -1765328234, "encryption type %d not supported");
  }

  return v12;
}

uint64_t krb5_get_pw_salt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 3;
  size_t v5 = strlen(*(const char **)(a2 + 24));
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
  {
    uint64_t v7 = *(const char ***)(a2 + 16);
    do
    {
      uint64_t v8 = *v7++;
      v5 += strlen(v8);
      --v6;
    }

    while (v6);
  }

  uint64_t result = krb5_data_alloc((size_t *)(a3 + 8), v5);
  if (!(_DWORD)result)
  {
    char v10 = *(char **)(a3 + 16);
    size_t v11 = strlen(*(const char **)(a2 + 24));
    memcpy(v10, *(const void **)(a2 + 24), v11);
    if (*(_DWORD *)(a2 + 8))
    {
      unint64_t v12 = 0LL;
      BOOL v13 = &v10[strlen(*(const char **)(a2 + 24))];
      uint64_t v14 = *(void *)(a2 + 16);
      do
      {
        size_t v15 = *(const char **)(v14 + 8 * v12);
        size_t v16 = strlen(v15);
        memcpy(v13, v15, v16);
        uint64_t v14 = *(void *)(a2 + 16);
        v13 += strlen(*(const char **)(v14 + 8 * v12++));
      }

      while (v12 < *(unsigned int *)(a2 + 8));
    }

    return 0LL;
  }

  return result;
}

uint64_t krb5_free_salt(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t krb5_string_to_key_data( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t pw_salt = krb5_get_pw_salt((uint64_t)a1, a5, (uint64_t)&v15);
  if (!(_DWORD)pw_salt)
  {
    __int128 v13 = v15;
    uint64_t v14 = v16;
    uint64_t pw_salt = krb5_string_to_key_data_salt(a1, a2, a3, a4, (uint64_t)&v13, a6);
    __int128 v13 = v15;
    uint64_t v14 = v16;
    krb5_data_free((void *)&v13 + 1);
  }

  return pw_salt;
}

uint64_t krb5_string_to_key_data_salt( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v13 = *(_OWORD *)a5;
  uint64_t v14 = *(void *)(a5 + 16);
  return krb5_string_to_key_data_salt_opaque(a1, a2, a3, a4, &v13, v15[0], v15[1], a6);
}

krb5_error_code krb5_string_to_key( krb5_context context, const krb5_encrypt_block *eblock, krb5_keyblock *keyblock, const krb5_data *data, const krb5_data *salt)
{
  size_t v10 = strlen((const char *)keyblock);
  return krb5_string_to_key_data(context, (uint64_t)eblock, v10, (uint64_t)keyblock, (uint64_t)data, (uint64_t)salt);
}

uint64_t krb5_string_to_key_data_salt_opaque( _krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = sub_1882C6B58(a2);
  if (v16)
  {
    BOOL v17 = *(int **)(*((void *)v16 + 5) + 56LL);
    if (v17 && (int v18 = *v17) != 0)
    {
      uint64_t v19 = v17 + 6;
      while (v18 != *(_DWORD *)a5)
      {
        int v20 = *v19;
        v19 += 6;
        int v18 = v20;
        if (!v20) {
          goto LABEL_7;
        }
      }

      char v23 = (uint64_t (*)(_krb5_context *, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))*((void *)v19 - 1);
      __int128 v24 = *a5;
      uint64_t v25 = *((void *)a5 + 2);
      return v23(a1, a2, a3, a4, &v24, a6, a7, a8);
    }

    else
    {
LABEL_7:
      uint64_t v21 = 2314790658LL;
      krb5_set_error_message(a1, -1980176638, "salt type %d not supported");
    }
  }

  else
  {
    uint64_t v21 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }

  return v21;
}

uint64_t krb5_string_to_key_salt(_krb5_context *a1, uint64_t a2, char *__s, __int128 *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  __int128 v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  return krb5_string_to_key_data_salt(a1, a2, v10, (uint64_t)__s, (uint64_t)&v12, a5);
}

uint64_t krb5_string_to_key_salt_opaque( _krb5_context *a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v14 = strlen(__s);
  __int128 v16 = *(_OWORD *)a4;
  uint64_t v17 = *(void *)(a4 + 16);
  return krb5_string_to_key_data_salt_opaque(a1, a2, v14, (uint64_t)__s, &v16, a5, a6, a7);
}

uint64_t krb5_string_to_key_derived(_krb5_context *a1, const void *a2, size_t a3, int a4, krb5_keyblock *a5)
{
  size_t v10 = sub_1882C6B58(a4);
  if (!v10)
  {
    uint64_t v16 = 2529639062LL;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
    return v16;
  }

  uint64_t v11 = (uint64_t)v10;
  unint64_t v12 = *(void *)(*((void *)v10 + 5) + 16LL);
  uint64_t v13 = calloc(1uLL, 0x18uLL);
  v23[0] = (krb5_keyblock *)v13;
  if (!v13) {
    goto LABEL_10;
  }
  size_t v14 = (krb5_keyblock *)v13;
  uint64_t v15 = krb5_data_alloc((size_t *)v13 + 1, *(void *)(*(void *)(v11 + 40) + 24LL));
  if ((_DWORD)v15)
  {
    uint64_t v16 = v15;
    free(v14);
    return v16;
  }

  size_t v17 = v12 >> 3;
  v14->uint64_t magic = a4;
  int v18 = (char *)malloc(v17);
  if (!v18)
  {
    krb5_free_keyblock(a1, v14);
LABEL_10:
    uint64_t v16 = 12LL;
    goto LABEL_11;
  }

  uint64_t v19 = v18;
  uint64_t v20 = sub_1882E2500(a2, a3, v18, v17);
  if ((_DWORD)v20)
  {
    uint64_t v16 = v20;
    free(v19);
LABEL_11:
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v16;
  }

  v23[1] = 0LL;
  sub_1882F779C((uint64_t)a1, (uint64_t)v14, (uint64_t)v19, v17);
  bzero(v19, v17);
  free(v19);
  uint64_t v22 = sub_1882C92F8(a1, v11, (uint64_t)v23, "kerberos", 8uLL);
  if (!(_DWORD)v22) {
    uint64_t v22 = krb5_copy_keyblock_contents(a1, v23[0], a5);
  }
  uint64_t v16 = v22;
  sub_1882C9648(a1, (uint64_t)v23, v11);
  return v16;
}

uint64_t _krb5_put_int(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 - 1 >= 0)
  {
    uint64_t v3 = a3;
    do
    {
      *(_BYTE *)(a1 - 1 + strlcpy(v2, *(const char **)keytab, v3) = a2;
      a2 >>= 8;
      --v3;
    }

    while (v3);
  }

  return a3;
}

uint64_t _krb5_get_int(unsigned __int8 *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = 0LL;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      unsigned int v5 = *a1++;
      unint64_t v3 = v5 | (v3 << 8);
      --v4;
    }

    while (v4);
  }

  *a2 = v3;
  return a3;
}

uint64_t sub_1882F8F90(uint64_t a1)
{
  unsigned int v2 = 0;
  krb5_plugin_run_f(a1, "krb5", "ccache_ops", 0, 0LL, (uint64_t)&v2, (uint64_t)sub_1882F8FD8);
  return v2;
}

uint64_t sub_1882F8FD8(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  if (!a2 || *a2 <= 7)
  {
    int v5 = krb5_cc_register(a1, (uint64_t)a2, 1);
    if (v5) {
      *a4 = v5;
    }
  }

  return 2529639161LL;
}

uint64_t _krb5_fast_cf2( _krb5_context *a1, const krb5_keyblock *a2, const char *a3, const krb5_keyblock *a4, const char *a5, krb5_keyblock *a6, krb5_keyblock ***a7)
{
  uint64_t v14 = krb5_crypto_init(a1, a2, 0LL, &v20);
  if (!(_DWORD)v14)
  {
    uint64_t v15 = krb5_crypto_init(a1, a4, 0LL, &v19);
    if ((_DWORD)v15)
    {
      uint64_t v14 = v15;
      krb5_crypto_destroy(a1, (uint64_t)v20);
    }

    else
    {
      v18[1] = a3;
      v17[1] = a5;
      v18[0] = strlen(a3);
      v17[0] = strlen(a5);
      uint64_t v14 = krb5_crypto_fx_cf2( a1,  (uint64_t *)v20,  (uint64_t *)v19,  (uint64_t)v18,  (uint64_t)v17,  (char *)a2->magic,  a6);
      krb5_crypto_destroy(a1, (uint64_t)v20);
      krb5_crypto_destroy(a1, (uint64_t)v19);
      if (!(_DWORD)v14)
      {
        if (a7)
        {
          uint64_t v14 = krb5_crypto_init(a1, a6, 0LL, a7);
          if ((_DWORD)v14) {
            krb5_free_keyblock_contents(a1, a6);
          }
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return v14;
}

uint64_t _krb5_fast_armor_key( _krb5_context *a1, const krb5_keyblock *a2, const krb5_keyblock *a3, krb5_keyblock *a4, krb5_keyblock ***a5)
{
  return _krb5_fast_cf2(a1, a2, "subkeyarmor", a3, "ticketarmor", a4, a5);
}

uint64_t sub_1882F9164( _krb5_context *a1, _krb5_ccache *a2, krb5_data *a3, krb5_keyblock *a4, krb5_keyblock ***a5)
{
  krb5_auth_context v24 = 0LL;
  uint64_t v14 = 0LL;
  krb5_data_zero(&v13);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  *(_OWORD *)krb5_principal principal = 0u;
  uint64_t credentials = krb5_auth_con_init(a1, &v24);
  if (!(_DWORD)credentials)
  {
    uint64_t credentials = krb5_cc_get_principal(a1, a2, principal);
    if (!(_DWORD)credentials)
    {
      uint64_t v11 = krb5_make_principal(a1, &principal[1], (char *)principal[0]->data, "krbtgt", principal[0]->data, 0LL);
      if ((_DWORD)v11)
      {
        uint64_t credentials = v11;
        krb5_free_principal(a1, principal[0]);
      }

      else
      {
        uint64_t credentials = krb5_get_credentials(a1, 0, a2, (krb5_creds *)principal, &v14);
        krb5_free_principal(a1, principal[1]);
        krb5_free_principal(a1, principal[0]);
        if (!(_DWORD)credentials)
        {
          uint64_t credentials = krb5_auth_con_add_AuthorizationData(a1, (uint64_t)v24);
          if (!(_DWORD)credentials)
          {
            uint64_t credentials = krb5_mk_req_extended(a1, &v24, 4, 0LL, v14, a3);
            if (!(_DWORD)credentials) {
              uint64_t credentials = _krb5_fast_cf2( a1,  *((const krb5_keyblock **)v24 + 5),  "subkeyarmor",  *((const krb5_keyblock **)v24 + 4),  "ticketarmor",  a4,  a5);
            }
          }
        }
      }
    }
  }

  if (v24) {
    krb5_auth_con_free(a1, v24);
  }
  if (v14) {
    krb5_free_creds(a1, v14);
  }
  return credentials;
}

uint64_t sub_1882F9310( krb5_context a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12 = (krb5_keyblock ***)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 48);
  if (v11)
  {
    if (*(_DWORD *)a2 != 1) {
      heim_abort("unknown state type: %d", v11, (uint64_t)a3, a4, a5, a6, a7, a8, *(_DWORD *)a2);
    }
    krb5_crypto_destroy(a1, v11);
  }

  else
  {
    if (!*(void *)(a2 + 16) && !*(void *)(a2 + 24))
    {
      int v13 = *(_DWORD *)(a2 + 4);
      if ((v13 & 0x100) == 0)
      {
        if ((v13 & 0x20) == 0) {
          return 0LL;
        }
        uint64_t v14 = 2529638953LL;
        krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
        return v14;
      }
    }

    *(_DWORD *)a2 = 1;
  }

  krb5_free_keyblock_contents(a1, (krb5_keyblock *)(a2 + 56));
  uint64_t v22 = *(void *)(a2 + 24);
  int v23 = *(_DWORD *)(a2 + 4);
  if (!v22)
  {
    if ((v23 & 0x1000) == 0) {
      heim_abort("FAST TGS without AC:(state->flags & KRB5_FAST_AS_REQ) != 0", v15, v16, v17, v18, v19, v20, v21, v30);
    }
    if (*(void *)(a2 + 32))
    {
      sub_1882FE260();
      free(*(void **)(a2 + 32));
    }

    uint64_t v25 = (char *)calloc(1uLL, 0x18uLL);
    if (!v25) {
      return 12LL;
    }
    uint64_t v26 = v25;
    if ((*(_BYTE *)(a2 + 5) & 1) != 0)
    {
      heim_base_once_f(&qword_18C707468, &qword_18C707470, (dispatch_function_t)sub_1882F9EF8);
      if (!qword_18C707470)
      {
        free(v26);
        uint64_t v14 = 2LL;
        krb5_set_error_message(a1, 2, "Failed to open fast armor service");
        return v14;
      }

      krb5_data_zero(&v31);
      v32[1] = a3;
      v32[0] = strlen(a3);
      uint64_t v28 = heim_ipc_call((void *)qword_18C707470, (uint64_t)v32, (uint64_t)&v31, 0LL);
      if ((_DWORD)v28)
      {
        uint64_t v14 = v28;
        krb5_set_error_message(a1, v28, "Failed to get armor service credential");
        goto LABEL_32;
      }

      uint64_t v14 = sub_1882FE3A4();
      krb5_data_free(&v31);
      if ((_DWORD)v14) {
        goto LABEL_32;
      }
      uint64_t v29 = sub_1882FE270();
      if ((_DWORD)v29)
      {
        uint64_t v14 = v29;
        sub_1882FE3C4();
        goto LABEL_32;
      }

      uint64_t v14 = krb5_copy_keyblock_contents(a1, &v33, (krb5_keyblock *)(a2 + 56));
      sub_1882FE3C4();
      if ((_DWORD)v14) {
        goto LABEL_32;
      }
      uint64_t v27 = krb5_crypto_init(a1, (const krb5_keyblock *)(a2 + 56), 0LL, v12);
    }

    else
    {
      *(_DWORD *)uint64_t v25 = 1;
      uint64_t v27 = sub_1882F9164(a1, *(_krb5_ccache **)(a2 + 16), (krb5_data *)(v25 + 8), (krb5_keyblock *)(a2 + 56), v12);
    }

    uint64_t v14 = v27;
    if (!(_DWORD)v27)
    {
      uint64_t v14 = 0LL;
      *(void *)(a2 + 32) = v26;
      return v14;
    }

uint64_t sub_1882F95E4(_krb5_context *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if ((*(_BYTE *)(a2 + 4) & 0x80) != 0)
  {
    sub_1882DFCE8((uint64_t)a1, 10, "fast disabled, not doing any fast wrapping");
    return 0LL;
  }

  uint64_t v66 = 0LL;
  __int128 v64 = 0u;
  memset(v65, 0, sizeof(v65));
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  krb5_data_zero(&v54);
  krb5_data_zero(&v52);
  int v8 = *(_DWORD *)(a2 + 4);
  if (!*(void *)(a2 + 48))
  {
    if ((v8 & 0x20) != 0)
    {
      uint64_t checksum = 2529638953LL;
      krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
      return checksum;
    }

    return 0LL;
  }

  *(_DWORD *)(a2 + 4) = v8 | 0x20;
  LODWORD(v56) = v56 | 2;
  uint64_t checksum = sub_1882FD9D0();
  if (!(_DWORD)checksum)
  {
    if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
    {
LABEL_11:
      if (*(void *)(a4 + 8))
      {
        uint64_t checksum = sub_1882FD97C();
        sub_1882FD96C();
        if ((_DWORD)checksum) {
          goto LABEL_4;
        }
LABEL_21:
        uint64_t v54 = sub_1882FE240();
        uint64_t v55 = malloc(v54);
        if (v55)
        {
          uint64_t v19 = sub_1882FE220();
          if ((_DWORD)v19)
          {
LABEL_23:
            uint64_t checksum = v19;
            free(v55);
            uint64_t v55 = 0LL;
            goto LABEL_4;
          }

          if (v54) {
LABEL_47:
          }
            heim_abort("ASN.1 internal error:data.length == size", v20, v21, v22, v23, v24, v25, v26, v51);
          LODWORD(v64) = *(_DWORD *)a2;
          if ((_DWORD)v64 != 1)
          {
            krb5_data_free(&v54);
            heim_abort("unknown FAST type, internal error:false", v44, v45, v46, v47, v48, v49, v50, v51);
          }

          *((void *)&v64 + 1) = *(void *)(a2 + 32);
          *(void *)(a2 + 32) = 0LL;
          uint64_t v27 = *(_DWORD ***)(a2 + 48);
          if (!v27) {
            heim_abort( "FAST armor key missing when FAST started:state->armor_crypto != NULL",  0LL,  v21,  v22,  v23,  v24,  v25,  v26,  v51);
          }
          uint64_t checksum = krb5_create_checksum(a1, v27, 0x32u, 0, a3[1], *a3, (uint64_t)v65);
          if ((_DWORD)checksum) {
            goto LABEL_4;
          }
          uint64_t checksum = krb5_encrypt_EncryptedData(a1, *(_DWORD ***)(a2 + 48), 51LL, v55, v54, 0, (uint64_t)&v65[1] + 8);
          krb5_data_free(&v54);
          if ((_DWORD)checksum) {
            goto LABEL_4;
          }
          uint64_t v54 = sub_1882FE2A4();
          uint64_t v55 = malloc(v54);
          if (v55)
          {
            uint64_t v19 = sub_1882FE284();
            if ((_DWORD)v19) {
              goto LABEL_23;
            }
            uint64_t v23 = v54;
            if (!v54)
            {
              uint64_t checksum = krb5_padata_add(a1, *(unsigned int **)(a4 + 8), 136, (uint64_t)v55, 0LL);
              if (!(_DWORD)checksum) {
                krb5_data_zero(&v54);
              }
              goto LABEL_4;
            }

            goto LABEL_47;
          }
        }

LABEL_43:
        uint64_t checksum = 12LL;
        goto LABEL_4;
      }

      uint64_t v18 = calloc(1uLL, 0x10uLL);
      *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 128), 8) = v18;
      if (v18) {
        goto LABEL_21;
      }
LABEL_24:
      uint64_t checksum = krb5_enomem(a1);
      goto LABEL_4;
    }

    sub_1882FD9C0();
    uint64_t v11 = strdup("WELLKNOWN:ANONYMOUS");
    *(void *)(a4 + 32) = v11;
    if (!v11) {
      goto LABEL_24;
    }
    unint64_t v12 = calloc(1uLL, 0x18uLL);
    *(void *)(a4 + 24) = v12;
    if (v12)
    {
      _DWORD *v12 = 1;
      krb5_timestamp v12[2] = 2;
      *(void *)(*(void *)(a4 + 24) + 16LL) = calloc(2uLL, 8uLL);
      int v13 = *(void **)(a4 + 24);
      uint64_t v14 = (char **)v13[2];
      if (v14)
      {
        krb5_creds *v14 = strdup("WELLKNOWN");
        uint64_t v15 = *(void **)(*(void *)(a4 + 24) + 16LL);
        if (*v15)
        {
          v15[1] = strdup("ANONYMOUS");
          uint64_t v16 = *(void *)(*(void *)(a4 + 24) + 16LL);
          if (*(void *)(v16 + 8))
          {
LABEL_39:
            uint64_t v28 = calloc(1uLL, 8uLL);
            *(void *)(a4 + 56) = v28;
            *uint64_t v28 = 0LL;
            if (a3) {
              heim_abort("checksum data not NULL:checksum_data == NULL", v29, v30, v31, v32, v33, v34, v35, v51);
            }
            size_t v52 = sub_1882FD9B0();
            char v53 = malloc(v52);
            if (!v53) {
              goto LABEL_43;
            }
            uint64_t v36 = sub_1882FD990();
            if ((_DWORD)v36)
            {
              uint64_t checksum = v36;
              free(v53);
              char v53 = 0LL;
              goto LABEL_4;
            }

            if (v52) {
              heim_abort("ASN.1 internal error:aschecksum_data.length == size", v37, v38, v39, v40, v41, v42, v43, v51);
            }
            a3 = (uint64_t *)&v52;
            goto LABEL_11;
          }

          uint64_t v17 = *(void **)v16;
        }

        else
        {
          uint64_t v17 = 0LL;
        }

        free(v17);
        free(*(void **)(*(void *)(*(void *)(a4 + 24) + 16LL) + 8LL));
        free(*(void **)(*(void *)(a4 + 24) + 16LL));
        int v13 = *(void **)(a4 + 24);
      }

      free(v13);
    }

    uint64_t checksum = krb5_enomem(a1);
    if ((_DWORD)checksum) {
      goto LABEL_4;
    }
    goto LABEL_39;
  }

uint64_t sub_1882F9A4C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 48))
  {
    uint64_t v16 = 0LL;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    if (*(_DWORD *)(a4 + 36) != -1765328293) {
      sub_1882DFCE8((uint64_t)a1, 10, "using fast but no FAST error code ?");
    }
    int v13 = 0;
    if (krb5_find_padata(*(void *)(a3 + 8), *(_DWORD *)a3, 136, &v13))
    {
      uint64_t v8 = sub_1882F9BF4(a1, a2);
      if ((_DWORD)v8)
      {
LABEL_15:
        sub_1882FE2E4();
        return v8;
      }

      int v13 = 0;
      padata = krb5_find_padata(*((uint64_t *)&v14 + 1), v14, 137, &v13);
      if (padata)
      {
        size_t v10 = padata;
        sub_1882FE060();
        uint64_t v8 = krb5_rd_error(a1, (const krb5_data *)(v10 + 2), (krb5_error **)a4);
        if (!(_DWORD)v8)
        {
          uint64_t v11 = *(void **)(a4 + 96);
          if (v11) {
            sub_1882DFCE8((uint64_t)a1, 10, "FAST wrapped KBB_ERROR contained e_data: %d", *v11);
          }
          sub_1882FD96C();
          uint64_t v8 = 0LL;
          *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 128), 8) = *((void *)&v14 + 1);
          *(_DWORD *)a3 = v14;
          *((void *)&v14 + 1) = 0LL;
          LODWORD(v14) = 0;
        }

        goto LABEL_15;
      }

      krb5_set_error_message(a1, -1765328237, "No wrapped error");
    }

    else
    {
      krb5_set_error_message(a1, -1765328237, "FAST fast respons is missing fx-fast data");
    }

    uint64_t v8 = 2529639059LL;
    goto LABEL_15;
  }

  if ((*(_BYTE *)(a2 + 4) & 0x20) == 0) {
    return 0LL;
  }
  uint64_t v8 = 2529638953LL;
  krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
  return v8;
}

uint64_t sub_1882F9BF4(_krb5_context *a1, uint64_t a2)
{
  uint64_t v4 = sub_1882FE2F4();
  if (!(_DWORD)v4)
  {
    if (LODWORD(v6[2]) == 1)
    {
      uint64_t v4 = krb5_decrypt_EncryptedData(a1, *(void *)(a2 + 48), 52LL, (uint64_t)&v6[3], v6);
      if (!(_DWORD)v4)
      {
        uint64_t v4 = sub_1882FE2C4();
        krb5_data_free(v6);
      }
    }

    else
    {
      uint64_t v4 = 2529638936LL;
    }

    sub_1882FE314();
  }

  return v4;
}

uint64_t sub_1882F9CB0(krb5_context a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v19 = 0;
  if (!a4) {
    return 0LL;
  }
  if (!*(void *)(a4 + 48)
    || (uint64_t v8 = *(void *)(a5 + 8)) == 0
    || !krb5_find_padata(*(void *)(v8 + 8), *(_DWORD *)v8, 136, &v19))
  {
    if ((*(_BYTE *)(a4 + 4) & 0x20) != 0)
    {
      uint64_t v11 = 2529638953LL;
      krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
      return v11;
    }

    return 0LL;
  }

  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  uint64_t v11 = sub_1882F9BF4(a1, a4);
  if (!(_DWORD)v11)
  {
    sub_1882FD96C();
    uint64_t v11 = sub_1882FD97C();
    if (!(_DWORD)v11)
    {
      int v13 = v21[0];
      if (!v21[0]) {
        goto LABEL_16;
      }
      uint64_t v16 = *(krb5_keyblock **)(a4 + 80);
      __int128 v15 = (krb5_keyblock **)(a4 + 80);
      __int128 v14 = v16;
      if (v16)
      {
        krb5_free_keyblock(a1, v14);
        int v13 = v21[0];
      }

      uint64_t v11 = krb5_copy_keyblock(a1, v13, v15);
      if (!(_DWORD)v11)
      {
LABEL_16:
        uint64_t v11 = 2529638936LL;
        if ((_DWORD)v22 == a2)
        {
          if (v21[1])
          {
            uint64_t v11 = sub_1882FD3C0();
            if (!(_DWORD)v11)
            {
              sub_1882FD3B0();
              *(void *)(a5 + 16) = 0LL;
              uint64_t v11 = sub_1882FD434();
              if (!(_DWORD)v11)
              {
                sub_1882FD424();
                *(_OWORD *)(a5 + 24) = v17;
                *(void *)(a5 + memset(&v6[2], 0, 40) = v18;
              }
            }
          }

          else if (a3)
          {
            uint64_t v11 = 2529638936LL;
          }

          else
          {
            uint64_t v11 = 0LL;
          }
        }
      }
    }
  }

  sub_1882FE2E4();
  return v11;
}

double sub_1882F9E64(krb5_context a1, uint64_t a2)
{
  uint64_t v4 = *(_krb5_ccache **)(a2 + 16);
  if (v4) {
    krb5_cc_close(a1, v4);
  }
  int v5 = *(krb5_principal_data **)(a2 + 40);
  if (v5) {
    krb5_free_principal(a1, v5);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6) {
    krb5_crypto_destroy(a1, v6);
  }
  uint64_t v7 = *(krb5_keyblock **)(a2 + 80);
  if (v7) {
    krb5_free_keyblock(a1, v7);
  }
  krb5_free_keyblock_contents(a1, (krb5_keyblock *)(a2 + 56));
  if (*(void *)(a2 + 32))
  {
    sub_1882FE260();
    free(*(void **)(a2 + 32));
  }

  *(void *)(a2 + 80) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_1882F9EF8(void *a1)
{
  return heim_ipc_init_context("ANY:org.h5l.armor-service", a1);
}

size_t base64_encode(uint64_t a1, unsigned int a2, const char **a3)
{
  if (a2 >> 29 || (uint64_t v6 = (const char *)malloc(4 * a2 / 3 + 4)) == 0LL)
  {
    *a3 = 0LL;
    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = (char *)v6;
    if (a2)
    {
      unint64_t v8 = 1LL;
      uint64_t v7 = (char *)v6;
      do
      {
        int v9 = *(unsigned __int8 *)(a1 + v8 - 1) << 8;
        if (v8 < a2) {
          v9 |= *(unsigned __int8 *)(a1 + v8);
        }
        unint64_t v10 = (v9 << 8);
        if (v8 + 1 < a2) {
          unint64_t v10 = v10 | *(unsigned __int8 *)(a1 + v8 + 1);
        }
        unint64_t v11 = v8 + 2;
        char *v7 = aAbcdefghijklmn[(unint64_t)v10 >> 18];
        v7[1] = aAbcdefghijklmn[(v10 >> 12) & 0x3F];
        void v7[2] = aAbcdefghijklmn[(v10 >> 6) & 0x3F];
        char v12 = aAbcdefghijklmn[v10 & 0x3F];
        if (v8 + 2 > a2) {
          char v12 = 61;
        }
        v7[3] = v12;
        if (v8 + 1 > a2) {
          void v7[2] = 61;
        }
        v7 += 4;
        v8 += 3LL;
      }

      while (v11 < a2);
    }

    char *v7 = 0;
    *a3 = v6;
    return strlen(v6);
  }

uint64_t base64_decode(char *__s, _BYTE *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = a2;
  while (1)
  {
    int v5 = *__s;
    if (v5 != 61
      && (!*__s || !memchr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", (char)v5, 0x41uLL)))
    {
      return ((_DWORD)v4 - v2);
    }

    if (strlen(__s) < 4) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = 0LL;
    int v7 = 0;
    int v8 = 0;
    do
    {
      v8 <<= 6;
      int v9 = __s[v6];
      if (v9 == 61)
      {
        ++v7;
      }

      else
      {
        if (v7 > 0) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v10 = 0LL;
        int v11 = 65;
        while (v11 != v9)
        {
          int v11 = aAbcdefghijklmn[++v10];
          if (v10 == 64)
          {
            LODWORD(v10) = -1;
            break;
          }
        }

        v8 += v10;
      }

      ++v6;
    }

    while (v6 != 4);
    if (v7 > 2) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v12 = v8 | (v7 << 24);
    if (v12 == -1) {
      return 0xFFFFFFFFLL;
    }
    _BYTE *v4 = BYTE2(v8);
    if (v12 >> 25)
    {
      ++v4;
    }

    else
    {
      v4[1] = BYTE1(v8);
      if (HIBYTE(v12))
      {
        v4 += 2;
      }

      else
      {
        v4[2] = v8;
        v4 += 3;
      }
    }

    __s += 4;
  }

uint64_t sub_1882FA158(int a1)
{
  uint64_t result = fcntl(a1, 1);
  if ((_DWORD)result != -1) {
    return fcntl(a1, 2, result | 1);
  }
  return result;
}

uint64_t rk_cloexec_file(FILE *a1)
{
  int v1 = fileno(a1);
  return sub_1882FA158(v1);
}

uint64_t sub_1882FA1B4(DIR *a1)
{
  int v1 = dirfd(a1);
  return sub_1882FA158(v1);
}

void *sub_1882FA1C8(size_t a1, size_t a2)
{
  uint64_t result = calloc(a1, a2);
  if (!result)
  {
    if (a2 * a1) {
      errx(1, "calloc %lu failed", a2 * a1);
    }
  }

  return result;
}

void *sub_1882FA214(size_t a1)
{
  uint64_t result = malloc(a1);
  if (a1)
  {
    if (!result) {
      errx(1, "malloc %lu failed", a1);
    }
  }

  return result;
}

void *sub_1882FA258(void *a1, size_t a2)
{
  uint64_t result = realloc(a1, a2);
  if (a2)
  {
    if (!result) {
      errx(1, "realloc %lu failed", a2);
    }
  }

  return result;
}

char *rk_estrdup(const char *a1)
{
  uint64_t result = strdup(a1);
  if (!result) {
    sub_188318DC4();
  }
  return result;
}

uint64_t rk_hex_encode(unsigned __int8 *a1, uint64_t a2, void *a3)
{
  return sub_1882FA2C8(a1, a2, (uint64_t)&unk_18831A552, a3);
}

uint64_t sub_1882FA2C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 < 0)
  {
    int v8 = 0LL;
    goto LABEL_8;
  }

  uint64_t v6 = a2;
  int v8 = (char *)malloc((2 * a2) | 1);
  if (!v8)
  {
LABEL_8:
    uint64_t v9 = -1LL;
    goto LABEL_11;
  }

  if (v6)
  {
    uint64_t v9 = 2 * v6;
    uint64_t v10 = v8 + 1;
    do
    {
      unsigned int v11 = *a1++;
      *(v10 - 1) = *(_BYTE *)(a3 + ((unint64_t)v11 >> 4));
      _BYTE *v10 = *(_BYTE *)(a3 + (v11 & 0xF));
      v10 += 2;
      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  v8[v9] = 0;
LABEL_11:
  *a4 = v8;
  return v9;
}

uint64_t rk_hex_decode(const char *a1, _BYTE *a2, size_t a3)
{
  int v5 = (unsigned __int8 *)a1;
  size_t v6 = strlen(a1);
  size_t v7 = v6 & 1;
  if (v7 + (v6 >> 1) > a3) {
    return -1LL;
  }
  unint64_t v9 = v6;
  if ((v6 & 1) != 0)
  {
    unsigned __int8 v10 = *v5++;
    *a2++ = sub_1882FA410(v10);
  }

  if (v9 >= 2)
  {
    if (v9 >> 1 <= 1) {
      uint64_t v11 = 1LL;
    }
    else {
      uint64_t v11 = v9 >> 1;
    }
    unsigned int v12 = v5 + 1;
    uint64_t v13 = v11;
    do
    {
      char v14 = sub_1882FA410(*(v12 - 1));
      *a2++ = sub_1882FA410(*v12) | (16 * v14);
      v12 += 2;
      --v13;
    }

    while (v13);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11 + v7;
}

uint64_t sub_1882FA410(unsigned __int8 a1)
{
  char v1 = __toupper(a1);
  uint64_t result = 0LL;
  LOBYTE(strlcpy(v2, *(const char **)keytab, v3) = 48;
  while (v1 != (char)v3)
  {
    int v3 = byte_18831A552[++result];
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

ssize_t sub_1882FA460(int a1, char *a2, size_t a3)
{
  if (!a3) {
    return a3;
  }
  size_t v6 = a3;
  while (1)
  {
    while (1)
    {
      ssize_t v7 = read(a1, a2, v6);
      ssize_t v8 = v7;
      if ((v7 & 0x8000000000000000LL) == 0) {
        break;
      }
      if (*__error() != 4) {
        return v8;
      }
    }

    if (!v7) {
      break;
    }
    a2 += v7;
    v6 -= v7;
    if (!v6) {
      return a3;
    }
  }

  return v8;
}

size_t sub_1882FA4E0(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3 = __nbyte;
  if (__nbyte)
  {
    size_t v6 = __nbyte;
    do
    {
      while (1)
      {
        ssize_t v7 = write(__fd, __buf, v6);
        ssize_t v8 = v7;
        if (v7 < 0) {
          break;
        }
        __buf += v7;
        v6 -= v7;
        if (!v6) {
          return v3;
        }
      }
    }

    while (*__error() == 4);
    return v8;
  }

  return v3;
}

uint64_t parse_bytes(char *a1, char *a2)
{
  return parse_units(a1, (const char **)&off_18C704618, a2);
}

uint64_t unparse_bytes(int a1, char *__str, size_t __size)
{
  return sub_1882FA8B0(a1, (uint64_t)&off_18C704618, __str, __size);
}

uint64_t unparse_bytes_short(int a1, char *__str, size_t __size)
{
  return sub_1882FA9D4(a1, (uint64_t)&off_18C7046B8, __str, __size);
}

uint64_t parse_time(char *a1, char *a2)
{
  return parse_units(a1, (const char **)&off_18C7046F8, a2);
}

uint64_t unparse_time(int a1, char *__str, size_t __size)
{
  return (int)sub_1882FA8B0(a1, (uint64_t)&off_18C7046F8, __str, __size);
}

const char *print_time_table(FILE *a1)
{
  return sub_1882FAA80((const char *)&off_18C7046F8, a1);
}

uint64_t parse_units(char *a1, const char **a2, char *a3)
{
  return sub_1882FA5F4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))sub_1882FA868, 0LL, 0);
}

uint64_t sub_1882FA5F4( char *a1, const char **a2, char *a3, uint64_t (*a4)(uint64_t, uint64_t, void), uint64_t a5, int a6)
{
  if (a3)
  {
    unint64_t v9 = *a2;
    if (!*a2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = a2 + 2;
    while (strcasecmp(v9, a3))
    {
      unsigned int v12 = *v11;
      v11 += 2;
      unint64_t v9 = v12;
      if (!v12) {
        return 0xFFFFFFFFLL;
      }
    }

    int v13 = *((_DWORD *)v11 - 2);
  }

  else
  {
    int v13 = 1;
  }

  if (!*a1) {
    return a5;
  }
  unsigned int v33 = v13;
  uint64_t v14 = MEMORY[0x1895F8770];
  while (2)
  {
    __int128 v15 = a1 - 1;
    do
    {
      uint64_t v16 = v15[1];
      if (v15[1] < 0) {
        int v17 = __maskrune(v15[1], 0x4000uLL);
      }
      else {
        int v17 = *(_DWORD *)(v14 + 4 * v16 + 60) & 0x4000;
      }
      ++v15;
    }

    while ((_DWORD)v16 == 44 || v17 != 0);
    unsigned int v19 = strtol(v15, &__endptr, 0);
    __int128 v20 = __endptr;
    if (v15 == __endptr) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = v19;
    }
    if (!a6 && v15 == __endptr) {
      return 0xFFFFFFFFLL;
    }
    a1 = __endptr;
    do
    {
      uint64_t v22 = *a1;
      if (*a1 < 0) {
        int v23 = __maskrune(*a1, 0x4000uLL);
      }
      else {
        int v23 = *(_DWORD *)(v14 + 4 * v22 + 60) & 0x4000;
      }
      ++a1;
    }

    while (v23);
    switch((_DWORD)v22)
    {
      case 0x2B:
        LODWORD(v21) = 1;
        break;
      case 0x2D:
        LODWORD(v21) = -1;
        break;
      case 0:
        return a4(a5, v21, v33);
      default:
        --a1;
        break;
    }

    if ((_DWORD)v21) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v15 == v20;
    }
    if (v24) {
      uint64_t v21 = 1LL;
    }
    else {
      uint64_t v21 = v21;
    }
    size_t v25 = strcspn(a1, ", \t");
    size_t v26 = v25;
    if (v25 >= 2 && a1[v25 - 1] == 115) {
      size_t v26 = v25 - 1;
    }
    uint64_t v27 = *a2;
    if (!*a2) {
      return 0xFFFFFFFFLL;
    }
    int v28 = 0;
    uint64_t v29 = 0LL;
    uint64_t v30 = a2;
    while (strncasecmp(a1, v27, v26))
    {
LABEL_50:
      uint64_t v31 = v30[2];
      v30 += 2;
      uint64_t v27 = v31;
      if (!v31) {
        goto LABEL_51;
      }
    }

    if (v26 != strlen(v27))
    {
      ++v28;
      uint64_t v29 = v30;
      goto LABEL_50;
    }

    a5 = a4(a5, v21, *((unsigned int *)v30 + 2));
    if ((a5 & 0x80000000) != 0) {
      return a5;
    }
    a1 += v26;
    if (*v30) {
      goto LABEL_54;
    }
LABEL_51:
    if (v28 != 1) {
      return 0xFFFFFFFFLL;
    }
    a5 = a4(a5, v21, *((unsigned int *)v29 + 2));
    if ((a5 & 0x80000000) != 0) {
      return a5;
    }
    a1 += v26;
LABEL_54:
    if (*a1 == 115) {
      ++a1;
    }
    if (*a1) {
      continue;
    }
    return a5;
  }

uint64_t sub_1882FA868(int a1, int a2, int a3)
{
  return (a1 + a3 * a2);
}

uint64_t parse_flags(char *a1, const char **a2, uint64_t a3)
{
  return sub_1882FA5F4(a1, a2, 0LL, (uint64_t (*)(uint64_t, uint64_t, void))sub_1882FA888, a3, 1);
}

uint64_t sub_1882FA888(int a1, int a2, unsigned int a3)
{
  if (a2 == 1) {
    unsigned int v3 = a3 | a1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (!a2) {
    unsigned int v3 = a3;
  }
  if (a2 == -1) {
    return a1 & ~a3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1882FA8B0(int a1, uint64_t a2, char *__str, size_t __size)
{
  size_t v4 = __size;
  int v5 = __str;
  if (!a1) {
    return snprintf(__str, __size, "%s", "0");
  }
  int v6 = a1;
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v8 = 0LL;
  while (*(void *)a2)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 8);
    if (v9 <= v6)
    {
      int v10 = v6 / v9;
      v6 %= v9;
      if (v10 == 1) {
        uint64_t v11 = "";
      }
      else {
        uint64_t v11 = "s";
      }
      if (v6 <= 0) {
        unsigned int v12 = "";
      }
      else {
        unsigned int v12 = " ";
      }
      uint64_t v13 = snprintf(v5, v4, "%u %s%s%s", v10, *(const char **)a2, v11, v12);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
      BOOL v14 = (int)v13 <= (int)v4;
      else {
        size_t v4 = 0LL;
      }
      if (v14) {
        v5 += v13;
      }
      else {
        int v5 = 0LL;
      }
      uint64_t v8 = (v13 + v8);
    }

    a2 += 16LL;
    if (v6 <= 0) {
      return v8;
    }
  }

  return v8;
}

uint64_t sub_1882FA9D4(int a1, uint64_t a2, char *__str, size_t __size)
{
  if (!a1) {
    return snprintf(__str, __size, "%s");
  }
  if (a1 >= 1 && *(void *)a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 <= a1) {
      return snprintf(__str, __size, "%u %s%s%s");
    }
    for (size_t i = (unsigned int *)(a2 + 24); *((void *)i - 1); i += 4)
    {
      unsigned int v6 = *i;
      if (v6 <= a1) {
        return snprintf(__str, __size, "%u %s%s%s");
      }
    }
  }

  return 0LL;
}

const char *sub_1882FAA80(const char *result, FILE *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)result;
  if (*(void *)result)
  {
    unsigned int v4 = result;
    size_t v5 = 0LL;
    uint64_t v6 = 16LL;
    uint64_t result = *(const char **)result;
    do
    {
      size_t v7 = strlen(result);
      if (v5 <= v7) {
        size_t v5 = v7;
      }
      uint64_t result = *(const char **)&v4[v6];
      v6 += 16LL;
    }

    while (result);
    if (v2)
    {
      do
      {
        uint64_t v8 = v4;
        unsigned int v9 = v4 + 16;
        do
        {
          unsigned int v4 = v9;
          if (!*(void *)v9)
          {
            uint64_t result = (const char *)fprintf(a2, "1 %s\n");
            goto LABEL_18;
          }

          unsigned int v10 = *((_DWORD *)v8 + 2);
          v9 += 16;
        }

        while (*((_DWORD *)v4 + 2) == v10);
        uint64_t v11 = v4;
        do
        {
          int v12 = v10 % *((_DWORD *)v11 + 2);
          if (!v12) {
            break;
          }
          uint64_t v13 = *((void *)v11 + 2);
          v11 += 16;
        }

        while (v13);
        if (v12) {
          uint64_t v14 = -1LL;
        }
        else {
          uint64_t v14 = 0LL;
        }
        sub_1882FA8B0(v10, (uint64_t)&v11[16 * v14], __str, 0x400uLL);
        uint64_t result = (const char *)fprintf(a2, "1 %*s = %s\n");
LABEL_18:
        ;
      }

      while (*(void *)v4);
    }
  }

  return result;
}

uint64_t unparse_flags(int a1, uint64_t a2, char *__str, size_t __size)
{
  size_t v4 = __size;
  size_t v5 = __str;
  if (!a1) {
    return snprintf(__str, __size, "%s", "");
  }
  if (a1 < 1) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  while (*(void *)a2)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    int v9 = a1 - v8;
    if (a1 >= v8)
    {
      if (v9 <= 0) {
        unsigned int v10 = "";
      }
      else {
        unsigned int v10 = ", ";
      }
      uint64_t v11 = snprintf(v5, v4, "%s%s", *(const char **)a2, v10);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      BOOL v12 = (int)v11 <= (int)v4;
      else {
        size_t v4 = 0LL;
      }
      if (v12) {
        v5 += v11;
      }
      else {
        size_t v5 = 0LL;
      }
      uint64_t v7 = (v11 + v7);
      a1 = v9;
    }

    a2 += 16LL;
    if (a1 <= 0) {
      return v7;
    }
  }

  return v7;
}

const char **print_flags_table(const char **result, FILE *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    size_t v4 = result + 2;
    do
    {
      if (*v4) {
        size_t v5 = ", ";
      }
      else {
        size_t v5 = "\n";
      }
      uint64_t result = (const char **)fprintf(a2, "%s%s", v2, v5);
      uint64_t v6 = *v4;
      v4 += 2;
      uint64_t v2 = v6;
    }

    while (v6);
  }

  return result;
}

unsigned __int8 *rk_strlwr(unsigned __int8 *a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = a1 + 1;
    do
    {
      *(v3 - 1) = __tolower(v2);
      __darwin_ct_rune_t v4 = *v3++;
      __darwin_ct_rune_t v2 = v4;
    }

    while (v4);
  }

  return a1;
}

void sub_1882FAD7C(void **a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  free(a1);
}

void **rk_strpoolprintf(void **a1, char *a2, ...)
{
  unsigned int v3 = a1;
  if (!a1)
  {
    __darwin_ct_rune_t v4 = (void **)malloc(0x10uLL);
    unsigned int v3 = v4;
    if (!v4) {
      return v3;
    }
    const char *v4 = 0LL;
    v4[1] = 0LL;
  }

  va_copy((va_list)&__src[1], va);
  int v5 = vasprintf((char **)__src, a2, va);
  if (__src[0] && (int v6 = v5, (v7 = (char *)realloc(*v3, (size_t)v3[1] + v5 + 1)) != 0LL))
  {
    unsigned __int8 *v3 = v7;
    unsigned int v8 = (char *)v3[1];
    int v9 = __src[0];
    memcpy(&v8[(void)v7], __src[0], v6 + 1);
    v3[1] = &v8[v6];
    free(v9);
  }

  else
  {
    sub_1882FAD7C(v3);
    return 0LL;
  }

  return v3;
}

char *rk_strpoolcollect(uint64_t *a1)
{
  if (!a1) {
    return strdup("");
  }
  uint64_t v1 = *a1;
  free(a1);
  return (char *)v1;
}

uint64_t rk_strsep_copy(const char **a1, const char *a2, void *a3, size_t a4)
{
  __darwin_ct_rune_t v4 = *a1;
  if (!*a1) {
    return -1LL;
  }
  size_t v8 = strcspn(*a1, a2);
  int v9 = &v4[v8];
  *a1 = &v4[v8];
  if (a4)
  {
    if (v8 < a4) {
      a4 = v8;
    }
    memcpy(a3, v4, a4);
    *((_BYTE *)a3 + a4) = 0;
    int v9 = *a1;
  }

  uint64_t result = v9 - v4;
  int v12 = *(unsigned __int8 *)v9;
  uint64_t v11 = v9 + 1;
  if (!v12) {
    uint64_t v11 = 0LL;
  }
  *a1 = v11;
  return result;
}

unsigned __int8 *rk_strupr(unsigned __int8 *a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = a1 + 1;
    do
    {
      *(v3 - 1) = __toupper(v2);
      __darwin_ct_rune_t v4 = *v3++;
      __darwin_ct_rune_t v2 = v4;
    }

    while (v4);
  }

  return a1;
}

void sub_1882FAF6C(void *a1)
{
  __darwin_ct_rune_t v2 = (void *)a1[4];
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      sub_1882FAFB0((void **)v3);
      uint64_t v3 = v4;
    }

    while (v4);
  }

  free(a1);
}

void sub_1882FAFB0(void **a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[3];
  if (v3) {
    free(v3);
  }
  free(a1);
}

_DWORD *sub_1882FAFE8(const u_char *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v4 = calloc(1uLL, 0x38uLL);
  int v5 = v4;
  if (!v4) {
    return v5;
  }
  __int128 v20 = a1;
  _DWORD *v4 = __rev16(*(unsigned __int16 *)a1);
  v4[1] = 0;
  int v6 = a1[2] & 1;
  v4[1] = v6;
  v4[2] = (a1[2] >> 1) & 0xF;
  u_char v7 = a1[2];
  if ((v7 & 0x20) == 0)
  {
    if ((a1[2] & 0x40) == 0) {
      goto LABEL_4;
    }
LABEL_15:
    v6 |= 4u;
    v4[1] = v6;
    if ((a1[2] & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

  v6 |= 2u;
  v4[1] = v6;
  u_char v7 = a1[2];
  if ((v7 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v7 & 0x80) == 0) {
    goto LABEL_5;
  }
LABEL_16:
  v6 |= 8u;
  v4[1] = v6;
LABEL_5:
  unsigned int v8 = a1[3];
  if ((v8 & 1) == 0)
  {
    if ((v8 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    v6 |= 2u;
    v4[1] = v6;
    unsigned int v8 = a1[3];
    if ((v8 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  v6 |= 0x10u;
  v4[1] = v6;
  unsigned int v8 = a1[3];
  if ((v8 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_7:
  if ((v8 & 8) != 0)
  {
LABEL_8:
    v4[1] = v6 | 0x40;
    unsigned int v8 = a1[3];
  }

uint64_t sub_1882FB284(const u_char *a1, const u_char *a2, const u_char **a3, void ***a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  unsigned int v8 = *a3;
  *a4 = 0LL;
  unsigned int v9 = res_9_dn_expand(a1, a2, v8, __s1, 1025);
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v10 = &v8[v9];
  int v11 = (unsigned __int8 *)(v10 + 10);
  if (v10 + 10 > a2) {
    return 0xFFFFFFFFLL;
  }
  size_t v12 = __rev16(*((unsigned __int16 *)v10 + 4));
  if (&v11[v12] > a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v44 = &v11[v12];
  unsigned int v13 = *(unsigned __int16 *)v10;
  unsigned int v14 = *((unsigned __int16 *)v10 + 1);
  unsigned int v15 = *((_DWORD *)v10 + 1);
  uint64_t v16 = (void **)calloc(1uLL, 0x28uLL);
  if (!v16) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v45 = v16;
  uint64_t v17 = strdup(__s1);
  *uint64_t v45 = v17;
  if (!v17) {
    goto LABEL_42;
  }
  int v18 = __rev16(v13);
  *((_DWORD *)v45 + 2) = v18;
  *((_DWORD *)v45 + 3) = __rev16(v14);
  *((_DWORD *)v45 + 4) = bswap32(v15);
  *((_DWORD *)v45 + 5) = v12;
  if (v18 <= 32)
  {
    switch(v18)
    {
      case 12:
        goto LABEL_23;
      case 13:
      case 14:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_34;
      case 15:
      case 18:
        unsigned int v19 = res_9_dn_expand(a1, a2, v10 + 12, __s1, 1025);
        size_t v20 = strlen(__s1);
        uint64_t v21 = (char *)malloc(v20 + 8);
        uint64_t v22 = v45;
        v45[3] = v21;
        if (!v21) {
          goto LABEL_49;
        }
        *(_DWORD *)uint64_t v21 = __rev16(*((unsigned __int16 *)v10 + 5));
        int v23 = v21 + 4;
        goto LABEL_47;
      case 16:
        if (!(_DWORD)v12) {
          goto LABEL_42;
        }
        uint64_t v33 = *v11;
        uint64_t v34 = (char *)malloc(v33 + 1);
        uint64_t v22 = v45;
        v45[3] = v34;
        if (!v34) {
          goto LABEL_49;
        }
        strncpy(v34, (const char *)v10 + 11, v10[10]);
        uint64_t v29 = v45;
        *((_BYTE *)v45[3] + v10[10]) = 0;
        goto LABEL_54;
      case 24:
        unsigned int v39 = res_9_dn_expand(a1, a2, v10 + 28, __s1, 1025);
        if ((v39 & 0x80000000) != 0) {
          goto LABEL_57;
        }
        uint64_t v40 = v39;
        size_t v41 = v12 - v39 - 18;
        size_t v42 = strlen(__s1);
        uint64_t v43 = malloc(v41 + v42 + 56);
        uint64_t v32 = v45;
        v45[3] = v43;
        if (!v43) {
          goto LABEL_58;
        }
        *uint64_t v43 = __rev16(*((unsigned __int16 *)v10 + 5));
        v43[1] = v10[12];
        v43[2] = v10[13];
        v43[3] = bswap32(*(_DWORD *)(v10 + 14));
        v43[4] = bswap32(*(_DWORD *)(v10 + 18));
        v43[5] = bswap32(*(_DWORD *)(v10 + 22));
        v43[6] = __rev16(*((unsigned __int16 *)v10 + 13));
        *((void *)v43 + 5) = v41;
        memcpy(v43 + 12, &v10[v40 + 28], v41);
        int v23 = (char *)v43 + v41 + 48;
        *((void *)v43 + 4) = v23;
        size_t v37 = v42 + 1;
        goto LABEL_48;
      case 25:
        goto LABEL_31;
      default:
        if (v18 != 2 && v18 != 5) {
          goto LABEL_34;
        }
LABEL_23:
        if (res_9_dn_expand(a1, a2, v10 + 10, __s1, 1025) < 0) {
          goto LABEL_57;
        }
        int v28 = strdup(__s1);
        uint64_t v29 = v45;
        v45[3] = v28;
        if (!v28) {
          goto LABEL_36;
        }
        goto LABEL_54;
    }
  }

  if (v18 <= 42)
  {
    if (v18 == 33)
    {
      unsigned int v35 = res_9_dn_expand(a1, a2, v10 + 16, __s1, 1025);
      if ((v35 & 0x80000000) != 0 || (unint64_t)v35 + 6 > v12)
      {
LABEL_57:
        uint64_t v32 = v45;
        goto LABEL_58;
      }

      size_t v20 = strlen(__s1);
      uint64_t v36 = (char *)malloc(v20 + 16);
      uint64_t v22 = v45;
      v45[3] = v36;
      if (v36)
      {
        *(_DWORD *)uint64_t v36 = __rev16(*((unsigned __int16 *)v10 + 5));
        *((_DWORD *)v36 + 1) = __rev16(*((unsigned __int16 *)v10 + 6));
        *((_DWORD *)v36 + 2) = __rev16(*((unsigned __int16 *)v10 + 7));
        int v23 = v36 + 12;
LABEL_47:
        size_t v37 = v20 + 1;
LABEL_48:
        strlcpy(v23, __s1, v37);
        goto LABEL_53;
      }

      goto LABEL_49;
    }

    if (v18 == 37)
    {
      if (v12 > 4)
      {
        size_t v12 = (v12 - 5);
        BOOL v24 = malloc(v12 + 31);
        uint64_t v22 = v45;
        v45[3] = v24;
        if (v24)
        {
          *BOOL v24 = __rev16(*((unsigned __int16 *)v10 + 5));
          v24[1] = __rev16(*((unsigned __int16 *)v10 + 6));
          _OWORD v24[2] = v10[14];
          *((void *)v24 + 2) = v12;
          size_t v25 = v24 + 6;
          size_t v26 = v10 + 15;
LABEL_52:
          memcpy(v25, v26, v12);
LABEL_53:
          uint64_t v29 = v45;
          goto LABEL_54;
        }

        goto LABEL_49;
      }

      goto LABEL_42;
    }

LABEL_34:
    size_t v25 = malloc(v12);
    uint64_t v29 = v45;
    v45[3] = v25;
    if (!(_DWORD)v12 || v25)
    {
      if (!(_DWORD)v12)
      {
LABEL_54:
        uint64_t result = 0LL;
        *a3 = v44;
        *a4 = v29;
        return result;
      }

      size_t v26 = v10 + 10;
      goto LABEL_52;
    }

_DWORD *sub_1882FB764(const char *a1, char *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v4 = "a";
  int v5 = &off_18A21A5A0;
  while (strcasecmp(a2, v4))
  {
    int v6 = *v5;
    v5 += 2;
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_29;
    }
  }

  uint32_t v7 = *((_DWORD *)v5 - 2);
  if (v7 == -1)
  {
LABEL_29:
    if (dword_18C70770C) {
    return 0LL;
    }
  }

  uint32_t fromlen = 128;
  dns_handle_t v8 = dns_open(0LL);
  if (v8)
  {
    unsigned int v9 = v8;
    unsigned int v10 = 0LL;
    int32_t v11 = 1500;
    size_t v12 = (FILE **)MEMORY[0x1895F89D0];
    while (1)
    {
      do
      {
        int v13 = v11;
        if (v10) {
          free(v10);
        }
        if (dword_18C70770C)
        {
          dns_set_debug(v9, 1u);
          unsigned int v14 = "a";
          if (v7 != 1)
          {
            unsigned int v15 = &dword_18A21A5A8;
            do
            {
              unsigned int v14 = (const char *)*((void *)v15 - 1);
              if (!v14) {
                break;
              }
              int v16 = *v15;
              v15 += 4;
            }

            while (v16 != v7);
          }

          fprintf(*v12, "dns_lookup(%s, %d, %s), buffer size %d\n", a1, 1, v14, v11);
        }

        uint64_t v17 = (char *)malloc(v11);
        if (!v17)
        {
          dns_free(v9);
          return 0LL;
        }

        unsigned int v10 = v17;
        int32_t v11 = dns_search(v9, a1, 1u, v7, v17, v11, &from, &fromlen);
        if (dword_18C70770C)
        {
          int v18 = "a";
          if (v7 != 1)
          {
            unsigned int v19 = &dword_18A21A5A8;
            do
            {
              int v18 = (const char *)*((void *)v19 - 1);
              if (!v18) {
                break;
              }
              int v20 = *v19;
              v19 += 4;
            }

            while (v20 != v7);
          }

          fprintf(*v12, "dns_lookup(%s, %d, %s) --> %d\n", a1, 1, v18, v11);
        }
      }

      while (v11 > v13);
      if (v11 > 0)
      {
        uint64_t v21 = sub_1882FAFE8((const u_char *)v10, v11);
        free(v10);
        dns_free(v9);
        return v21;
      }

      if (v13 > 65534) {
        break;
      }
      else {
        int32_t v11 = 2 * v13;
      }
    }

    dns_free(v9);
    free(v10);
  }

  return 0LL;
}

uint64_t sub_1882FB9CC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 2) {
    return 4LL;
  }
  else {
    return 16LL * (v1 == 30);
  }
}

uint64_t rk_socket_sockaddr_size(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30) {
    unsigned int v2 = 28;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v1 == 2) {
    return 16LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1882FBA0C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2) {
    return *(unsigned __int16 *)(a1 + 2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1882FBA30(int a1, int a2)
{
  uint64_t result = fcntl(a1, 3, 0LL);
  if ((_DWORD)result != -1) {
    return fcntl(a1, 4, result & 0xFFFFFFFB | (4 * (a2 != 0)));
  }
  return result;
}

uint64_t rk_socket_set_nopipe(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 0xFFFF, 4130, &v3, 4u);
}

uint64_t rk_socket_set_reuseaddr(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 0xFFFF, 4, &v3, 4u);
}

uint64_t rk_socket_set_ipv6only(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 41, 27, &v3, 4u);
}

uint64_t sub_1882FBB18(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_1882FBB20(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t sub_1882FBB28(char *a1, const char *a2)
{
  int v13 = 0LL;
  unsigned int v12 = 0;
  sub_1882FBC8C(a2, (char **)&v11, &v9, (char **)&v10);
  int v3 = (const char *)v10;
  if (v10)
  {
    if (a1)
    {
      sub_1882FBC8C(a1, &v13, &v12, 0LL);
      a1 = v13;
      unsigned int v4 = v12;
      int v3 = (const char *)v10;
    }

    else
    {
      unsigned int v4 = 0;
    }

    int v5 = (const char *)v11;
    unsigned int v6 = v9;
    xmmword_18C707478 = 0uLL;
    if (qword_18C707488) {
      free((void *)qword_18C707488);
    }
    qword_18C707488 = 0LL;
    if (a1)
    {
      WORD1(xmmword_18C70747_Block_object_dispose((const void *)(v1 - 128), 8) = bswap32(v4) >> 16;
LABEL_16:
      uint64_t v7 = 0LL;
      BYTE1(xmmword_18C70747_Block_object_dispose((const void *)(v1 - 128), 8) = 2;
      goto LABEL_14;
    }

    if (!sub_1882FBFB8(v5))
    {
      WORD1(xmmword_18C70747_Block_object_dispose((const void *)(v1 - 128), 8) = bswap32(v6) >> 16;
      asprintf((char **)&qword_18C707488, "%s", v3);
      goto LABEL_16;
    }
  }

  a1 = 0LL;
LABEL_13:
  uint64_t v7 = 0xFFFFFFFFLL;
LABEL_14:
  free(a1);
  free(v11);
  free(v10);
  return v7;
}

char *sub_1882FBC8C(const char *a1, char **a2, _DWORD *a3, char **a4)
{
  uint64_t v7 = strdup(a1);
  *a2 = v7;
  dns_handle_t v8 = strchr(v7, 58);
  if (!v8)
  {
    unsigned int v9 = v7;
    goto LABEL_5;
  }

  char *v8 = 0;
  unsigned int v9 = v8 + 1;
  if (sscanf(v8 + 1, "%d", a3) != 1) {
LABEL_5:
  }
    *a3 = 80;
  uint64_t result = strchr(v9, 47);
  if (result)
  {
    int32_t v11 = result;
    if (a4)
    {
      uint64_t result = strdup(result);
      *a4 = result;
    }

    char *v11 = 0;
  }

  else if (a4)
  {
    *a4 = 0LL;
  }

  return result;
}

uint64_t *sub_1882FBD40(const char *a1)
{
  uint64_t result = (uint64_t *)gethostbyname(a1);
  if (!result) {
    return sub_1882FBD74(a1);
  }
  return result;
}

uint64_t *sub_1882FBD74(const char *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __s = 0LL;
  if (!BYTE1(xmmword_18C707478)) {
    return 0LL;
  }
  sockaddr v20 = (sockaddr)xmmword_18C707478;
  int v1 = 0LL;
  int v2 = socket(2, 1, 0);
  if (v2 < 0) {
    goto LABEL_17;
  }
  int v3 = v2;
  rk_socket_set_nopipe(v2, 1);
  if (connect(v3, &v20, 0x10u) < 0 || (size_t v4 = strlen(__s), write(v3, __s, v4) != v4))
  {
    close(v3);
LABEL_17:
    free(__s);
    return 0LL;
  }

  free(__s);
  int v5 = 0;
  do
  {
    unsigned int v6 = &__big[v5];
    ssize_t v7 = read(v3, v6, 1024LL - v5);
    v5 += v7;
  }

  while (v7 > 0);
  *unsigned int v6 = 0;
  close(v3);
  dns_handle_t v8 = strstr(__big, "\r\n\r\n");
  if (!v8) {
    return 0LL;
  }
  __lasts = 0LL;
  unsigned int v9 = strtok_r(v8 + 4, " \t\r\n", &__lasts);
  if (!v9) {
    return 0LL;
  }
  int v1 = &qword_18C707490;
  qword_18C707490 = (uint64_t)v9;
  *(void *)algn_18C707498 = 0LL;
  qword_18C7074A0 = 0x400000002LL;
  unsigned int v10 = strtok_r(0LL, " \t\r\n", &__lasts);
  if (v10)
  {
    unint64_t v11 = 0LL;
    unsigned int v12 = &unk_18C7074F8;
    int v13 = &byte_18C7074B0;
    do
    {
      inet_aton(v10, &v16);
      unsigned int v14 = bswap32(v16.s_addr);
      *(v12 - 1) = v13;
      void *v12 = 0LL;
      char *v13 = HIBYTE(v14);
      v13[1] = BYTE2(v14);
      uint64_t v13[2] = BYTE1(v14);
      v13[3] = v14;
      unsigned int v10 = strtok_r(0LL, " \t\r\n", &__lasts);
      if (v11 > 0xE) {
        break;
      }
      ++v11;
      ++v12;
      v13 += 4;
    }

    while (v10);
  }

  qword_18C7074A8 = (uint64_t)&qword_18C7074F0;
  return v1;
}

uint64_t sub_1882FBFB8(const char *a1)
{
  if (inet_aton(a1, (in_addr *)&xmmword_18C707478 + 1)) {
    return 0LL;
  }
  int v3 = gethostbyname(a1);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  size_t v4 = v3;
  uint64_t result = 0LL;
  DWORD1(xmmword_18C70747_Block_object_dispose((const void *)(v1 - 128), 8) = bswap32(**(_DWORD **)v4->h_addr_list);
  return result;
}

void *rtbl_create()
{
  return calloc(1uLL, 0x28uLL);
}

uint64_t rtbl_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t rtbl_get_flags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void rtbl_destroy(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    unint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
      if (*(void *)(v3 + 24))
      {
        unint64_t v4 = 0LL;
        do
          free(*(void **)(*(void *)(v3 + 32) + 8 * v4++));
        while (v4 < *(void *)(v3 + 24));
      }

      free(*(void **)(v3 + 32));
      free(*(void **)v3);
      free(*(void **)(v3 + 8));
      free(*(void **)(v3 + 48));
      free((void *)v3);
      ++v2;
    }

    while (v2 < *(void *)(a1 + 8));
  }

  free(*(void **)a1);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 16));
  free((void *)a1);
}

uint64_t rtbl_add_column_by_id(uint64_t a1, int a2, const char *a3, int a4)
{
  dns_handle_t v8 = realloc(*(void **)(a1 + 16), 8LL * *(void *)(a1 + 8) + 8);
  if (v8)
  {
    unsigned int v9 = v8;
    *(void *)(a1 + 16) = v8;
    unsigned int v10 = (char **)malloc(0x38uLL);
    if (v10)
    {
      unint64_t v11 = v10;
      unsigned int v12 = strdup(a3);
      char *v11 = v12;
      if (v12)
      {
        uint64_t result = 0LL;
        v11[1] = 0LL;
        *((_DWORD *)v11 + 4) = 0;
        *((_DWORD *)v11 + 5) = a4;
        v11[3] = 0LL;
        v11[4] = 0LL;
        *((_DWORD *)v11 + 10) = a2;
        v11[6] = 0LL;
        uint64_t v14 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 128), 8) = v14 + 1;
        v9[v14] = v11;
        return result;
      }

      free(v11);
    }
  }

  return 12LL;
}

uint64_t rtbl_add_column(uint64_t a1, const char *a2, int a3)
{
  return rtbl_add_column_by_id(a1, 0, a2, a3);
}

uint64_t rtbl_new_row(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  unint64_t v4 = 0LL;
  do
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(void *)(*(void *)(v5 + 8 * v3) + 24LL) > v4) {
      unint64_t v4 = *(void *)(*(void *)(v5 + 8 * v3) + 24LL);
    }
    ++v3;
  }

  while (v1 != v3);
  uint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v8 = *(void *)(v7 + 8 * v6);
    if (*(void *)(v8 + 24) != v4) {
      break;
    }
LABEL_14:
    if (++v6 >= v1) {
      return 0LL;
    }
  }

  unsigned int v9 = realloc(*(void **)(v8 + 32), 8 * v4);
  if (v9)
  {
    unsigned int v10 = v9;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(*(void *)(v7 + 8 * v6) + 32LL) = v9;
    while (1)
    {
      uint64_t v11 = *(void *)(v7 + 8 * v6);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v12 >= v4) {
        break;
      }
      int v13 = strdup("");
      *(void *)(v11 + 24) = v12 + 1;
      v10[v12] = v13;
      if (!v13) {
        return 12LL;
      }
    }

    unint64_t v1 = *(void *)(a1 + 8);
    goto LABEL_14;
  }

  return 12LL;
}

uint64_t rtbl_set_prefix(void **a1, char *__s1)
{
  unint64_t v4 = *a1;
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *a1 = v5;
  if (v5) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

uint64_t rtbl_set_separator(uint64_t a1, char *__s1)
{
  unint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

uint64_t rtbl_set_column_prefix(uint64_t a1, char *a2, const char *a3)
{
  unint64_t v4 = sub_1882FC384(a1, a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (char *)v4[1];
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(a3);
  v5[1] = v7;
  if (v7) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

const char **sub_1882FC384(uint64_t a1, char *__s2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  for (size_t i = *(const char ****)(a1 + 16); ; ++i)
  {
    uint64_t v5 = *i;
    if (!strcmp(**i, __s2)) {
      break;
    }
    if (!--v2) {
      return 0LL;
    }
  }

  return v5;
}

uint64_t rtbl_set_column_affix_by_id(uint64_t a1, int a2, char *__s1, const char *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  for (size_t i = *(uint64_t **)(a1 + 16); ; ++i)
  {
    uint64_t v8 = *i;
    if (*(_DWORD *)(*i + 40) == a2) {
      break;
    }
    if (!--v4) {
      return 0xFFFFFFFFLL;
    }
  }

  unsigned int v10 = *(void **)(v8 + 8);
  if (v10) {
    free(v10);
  }
  if (__s1)
  {
    uint64_t v11 = strdup(__s1);
    *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 128), 8) = v11;
    if (!v11) {
      return 12LL;
    }
  }

  else
  {
    *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
  }

  unint64_t v12 = *(void **)(v8 + 48);
  if (v12) {
    free(v12);
  }
  if (a4)
  {
    int v13 = strdup(a4);
    *(void *)(v8 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = v13;
    if (!v13) {
      return 12LL;
    }
  }

  else
  {
    *(void *)(v8 + 4_Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
  }

  return 0LL;
}

uint64_t rtbl_add_column_entry_by_id(uint64_t a1, int a2, char *__s1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  for (size_t i = *(uint64_t **)(a1 + 16); *(_DWORD *)(*i + 40) != a2; ++i)
  {
    if (!--v3) {
      return 0xFFFFFFFFLL;
    }
  }

  return sub_1882FC4C4(*i, __s1);
}

uint64_t sub_1882FC4C4(uint64_t a1, char *__s1)
{
  uint64_t v3 = strdup(__s1);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = realloc(*(void **)(a1 + 32), 8LL * *(void *)(a1 + 24) + 8);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0LL;
      uint64_t v8 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v8 + 1;
      *(void *)(a1 + 32) = v6;
      v6[v8] = v4;
      return result;
    }

    free(v4);
  }

  return 12LL;
}

uint64_t rtbl_add_column_entryv_by_id(uint64_t a1, int a2, char *a3, ...)
{
  uint64_t v5 = rtbl_add_column_entry_by_id(a1, a2, __s1[0]);
  free(__s1[0]);
  return v5;
}

uint64_t rtbl_add_column_entry(uint64_t a1, char *a2, char *a3)
{
  uint64_t v4 = sub_1882FC384(a1, a2);
  if (v4) {
    return sub_1882FC4C4((uint64_t)v4, a3);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t rtbl_add_column_entryv(uint64_t a1, char *a2, char *a3, ...)
{
  uint64_t v5 = sub_1882FC384(a1, a2);
  if (v5) {
    uint64_t v6 = sub_1882FC4C4((uint64_t)v5, __s1[0]);
  }
  else {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  free(__s1[0]);
  return v6;
}

uint64_t rtbl_format(uint64_t a1, FILE *a2)
{
  uint64_t v3 = rtbl_format_str(a1);
  if (!v3) {
    return 12LL;
  }
  uint64_t v4 = v3;
  fputs(v3, a2);
  free(v4);
  return 0LL;
}

char *rtbl_format_str(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 2) == 0)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0LL;
      do
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v3);
        if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
          int v5 = 0;
        }
        else {
          int v5 = strlen(*(const char **)v4);
        }
        *(_DWORD *)(v4 + 16) = v5;
        uint64_t v6 = *(void *)(v4 + 24);
        if (v6)
        {
          uint64_t v7 = *(const char ***)(v4 + 32);
          do
          {
            uint64_t v8 = *v7++;
            int v9 = strlen(v8);
            if (v5 <= v9) {
              int v5 = v9;
            }
            *(_DWORD *)(v4 + 16) = v5;
            --v6;
          }

          while (v6);
        }

        ++v3;
        unint64_t v10 = *(void *)(a1 + 8);
      }

      while (v3 < v10);
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      {
        uint64_t v34 = 0LL;
        if (!v10) {
          return rk_strpoolcollect(v34);
        }
        goto LABEL_60;
      }

      uint64_t v11 = 0LL;
      if (v10)
      {
        for (unint64_t i = 0LL; i < *(void *)(a1 + 8); ++i)
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8 * i);
          if (i && *(void *)(a1 + 32)) {
            uint64_t v11 = rk_strpoolprintf(v11, "%s", *(const char **)(a1 + 32));
          }
          if (v13)
          {
            uint64_t v14 = *(const char **)(v13 + 8);
            if (!v14)
            {
              uint64_t v14 = *(const char **)a1;
              if (!*(void *)a1) {
                uint64_t v14 = "";
              }
            }

            unsigned int v15 = rk_strpoolprintf(v11, "%s", v14);
            if (i != *(void *)(a1 + 8) - 1LL || (uint64_t v16 = *(void *)(v13 + 48)) != 0) {
              LODWORD(v16) = *(_DWORD *)(v13 + 16);
            }
            uint64_t v17 = rk_strpoolprintf(v15, "%-*s", v16, *(const char **)v13);
            int v18 = *(const char **)(v13 + 48);
            if (v18) {
              goto LABEL_30;
            }
          }

          else
          {
            uint64_t v17 = rk_strpoolprintf(v11, "%s", "");
          }

          int v18 = "";
LABEL_30:
          uint64_t v11 = rk_strpoolprintf(v17, "%s", v18);
        }
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v34 = 0LL;
      if ((v2 & 1) != 0) {
        return rk_strpoolcollect(v34);
      }
    }

    uint64_t v34 = (uint64_t *)rk_strpoolprintf(v11, "\n");
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      return rk_strpoolcollect(v34);
    }
LABEL_60:
    unint64_t v35 = 0LL;
    do
    {
      uint64_t v36 = 0LL;
      while (*(void *)(*(void *)(*(void *)(a1 + 16) + 8 * v36) + 24LL) <= v35)
      {
        if (v10 == ++v36) {
          return rk_strpoolcollect(v34);
        }
      }

      unint64_t v37 = 0LL;
      do
      {
        uint64_t v38 = *(void *)(*(void *)(a1 + 16) + 8 * v37);
        if (v37 && *(void *)(a1 + 32)) {
          uint64_t v34 = (uint64_t *)rk_strpoolprintf((void **)v34, "%s", *(const char **)(a1 + 32));
        }
        int v39 = *(_DWORD *)(v38 + 16);
        if ((*(_BYTE *)(v38 + 20) & 1) == 0)
        {
          if (v37 == *(void *)(a1 + 8) - 1LL && !*(void *)(v38 + 48)) {
            int v39 = 0;
          }
          else {
            int v39 = -v39;
          }
        }

        uint64_t v40 = *(const char **)(v38 + 8);
        if (!v40)
        {
          uint64_t v40 = *(const char **)a1;
          if (!*(void *)a1) {
            uint64_t v40 = "";
          }
        }

        rk_strpoolprintf((void **)v34, "%s", v40);
        if (*(void *)(v38 + 24) <= v35) {
          size_t v41 = rk_strpoolprintf((void **)v34, "%*s", v39, "");
        }
        else {
          size_t v41 = rk_strpoolprintf((void **)v34, "%*s", v39, *(const char **)(*(void *)(v38 + 32) + 8 * v35));
        }
        size_t v42 = *(const char **)(v38 + 48);
        if (!v42) {
          size_t v42 = "";
        }
        uint64_t v34 = (uint64_t *)rk_strpoolprintf(v41, "%s", v42);
        ++v37;
      }

      while (v37 < *(void *)(a1 + 8));
      uint64_t v34 = (uint64_t *)rk_strpoolprintf((void **)v34, "\n");
      ++v35;
      unint64_t v10 = *(void *)(a1 + 8);
    }

    while (v10);
    return rk_strpoolcollect(v34);
  }

  unsigned int v19 = rk_strpoolprintf(0LL, "[");
  uint64_t v20 = *(void *)(a1 + 8);
  if (v20)
  {
    unint64_t v21 = 0LL;
    uint64_t v22 = MEMORY[0x1895F8770];
    do
    {
      uint64_t v23 = *(void *)(a1 + 16);
      while (*(void *)(*(void *)v23 + 24LL) <= v21)
      {
        v23 += 8LL;
        if (!--v20) {
          goto LABEL_55;
        }
      }

      if (v21) {
        BOOL v24 = ",";
      }
      else {
        BOOL v24 = "";
      }
      uint64_t v25 = rk_strpoolprintf(v19, "%s{", v24);
      unint64_t v26 = *(void *)(a1 + 8);
      if (v26)
      {
        unint64_t v27 = 0LL;
        int v28 = 0;
        do
        {
          uint64_t v29 = *(void **)(*(void *)(a1 + 16) + 8 * v27);
          if (v29[3] > v21)
          {
            uint64_t v30 = *v29 - 1LL;
            do
            {
              unsigned int v31 = *(char *)(v30 + 1);
              if ((v31 & 0x80000000) != 0) {
                int v32 = __maskrune(v31, 0x4000uLL);
              }
              else {
                int v32 = *(_DWORD *)(v22 + 4LL * v31 + 60) & 0x4000;
              }
              ++v30;
            }

            while (v32);
            if (v28) {
              uint64_t v33 = ",";
            }
            else {
              uint64_t v33 = "";
            }
            uint64_t v25 = rk_strpoolprintf(v25, "%s%s : %s", v33, (const char *)v30, *(const char **)(v29[4] + 8 * v21));
            unint64_t v26 = *(void *)(a1 + 8);
            int v28 = 1;
          }

          ++v27;
        }

        while (v27 < v26);
      }

      unsigned int v19 = rk_strpoolprintf(v25, "}");
      ++v21;
      uint64_t v20 = *(void *)(a1 + 8);
    }

    while (v20);
  }

uint64_t rk_dumpdata(const char *a1, char *a2, size_t a3)
{
  uint64_t result = open(a1, 1537, 416LL);
  if ((result & 0x80000000) == 0)
  {
    int v6 = result;
    sub_1882FA4E0(result, a2, a3);
    return close(v6);
  }

  return result;
}

uint64_t rk_undumpdata(const char *a1, void **a2, off_t *a3)
{
  *a2 = 0LL;
  int v5 = open(a1, 0, 0LL);
  if (v5 < 0) {
    return *__error();
  }
  int v6 = v5;
  if (!fstat(v5, &v12))
  {
    off_t st_size = v12.st_size;
    unint64_t v10 = (char *)malloc(v12.st_size);
    *a2 = v10;
    if (!v10)
    {
      uint64_t v7 = 12LL;
      goto LABEL_4;
    }

    *a3 = st_size;
    ssize_t v11 = sub_1882FA460(v6, v10, st_size);
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      if (v11 == *a3)
      {
        uint64_t v7 = 0LL;
      }

      else
      {
        free(*a2);
        *a2 = 0LL;
        uint64_t v7 = 22LL;
      }

      goto LABEL_4;
    }
  }

  uint64_t v7 = *__error();
LABEL_4:
  close(v6);
  return v7;
}

BOOL ct_memcmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  int v3 = 0;
  do
  {
    int v5 = *a1++;
    int v4 = v5;
    int v6 = *a2++;
    v3 |= v6 ^ v4;
    --a3;
  }

  while (a3);
  return v3 != 0;
}

char *rk_cfstring2cstring(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr) {
    return strdup(CStringPtr);
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  int v6 = malloc(v5);
  if (v6)
  {
    if (!CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0LL;
    }
  }

  return (char *)v6;
}

uint64_t wind_utf8ucs4(char *a1, uint64_t a2, unint64_t *a3)
{
  int v9 = a1;
  if (*a1)
  {
    unint64_t v5 = 0LL;
    while (1)
    {
      uint64_t result = sub_1882FCD94(&v9, &v8);
      if ((_DWORD)result) {
        break;
      }
      if (a2)
      {
        if (v5 >= *a3) {
          return 3325697538LL;
        }
        *(_DWORD *)(a2 + 4 * v5) = v8;
      }

      ++v5;
      if (!*++v9) {
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v5 = 0LL;
LABEL_10:
    uint64_t result = 0LL;
    *a3 = v5;
  }

  return result;
}

uint64_t sub_1882FCD94(char **a1, int *a2)
{
  int v2 = *a1;
  int v3 = **a1;
  if ((**a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = 3325697542LL;
  if ((v3 & 0xE0) == 0xC0)
  {
    char v7 = *++v2;
    char v6 = v7;
    if ((v7 & 0xC0) != 0x80) {
      return v4;
    }
    int v3 = v6 & 0x3F | ((v3 & 0x1F) << 6);
    goto LABEL_2;
  }

  if ((v3 & 0xF0) == 0xE0)
  {
    char v8 = v2[1];
    if ((v8 & 0xC0) == 0x80)
    {
      char v10 = v2[2];
      v2 += 2;
      char v9 = v10;
      if ((v10 & 0xC0) == 0x80)
      {
        int v3 = ((v3 & 0xF) << 12) | ((v8 & 0x3F) << 6) | v9 & 0x3F;
LABEL_2:
        uint64_t v4 = 0LL;
        *a2 = v3;
        *a1 = v2;
      }
    }
  }

  else if ((v3 & 0xF8) == 0xF0)
  {
    char v11 = v2[1];
    if ((v11 & 0xC0) == 0x80)
    {
      char v12 = v2[2];
      if ((v12 & 0xC0) == 0x80)
      {
        char v14 = v2[3];
        v2 += 3;
        char v13 = v14;
        if ((v14 & 0xC0) == 0x80)
        {
          int v3 = ((v3 & 7) << 18) | ((v11 & 0x3F) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F;
          goto LABEL_2;
        }
      }
    }
  }

  return v4;
}

uint64_t sub_1882FCE78(char *a1, unint64_t *a2)
{
  return wind_utf8ucs4(a1, 0LL, a2);
}

uint64_t wind_utf8ucs4_copy(char *a1, void **a2, unint64_t *a3)
{
  uint64_t v6 = wind_utf8ucs4(a1, 0LL, a3);
  if (!(_DWORD)v6)
  {
    unint64_t v7 = *a3;
    if (!(*a3 >> 30))
    {
      if (!v7) {
        return 0LL;
      }
      char v8 = malloc(4 * v7);
      *a2 = v8;
      if (v8)
      {
        uint64_t v6 = wind_utf8ucs4(a1, (uint64_t)v8, a3);
        if (!(_DWORD)v6) {
          return v6;
        }
        free(*a2);
        *a2 = 0LL;
      }

      else
      {
        uint64_t v6 = 12LL;
      }

      *a3 = 0LL;
      return v6;
    }

    return 34LL;
  }

  return v6;
}

uint64_t wind_ucs4utf8(unsigned int *a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  uint64_t result = 3325697538LL;
  for (unint64_t i = 0LL; a2; --a2)
  {
    unsigned int v8 = *a1++;
    unsigned int v7 = v8;
    if (v8 >= 0x80)
    {
      if (v7 >= 0x800)
      {
        if (v7 >= 0x10000)
        {
          if (HIWORD(v7) > 0x10u) {
            return 3325697544LL;
          }
          uint64_t v9 = 4u;
        }

        else
        {
          uint64_t v9 = 3u;
        }
      }

      else
      {
        uint64_t v9 = 2u;
      }
    }

    else
    {
      uint64_t v9 = 1u;
    }

    i += v9;
    if (a3)
    {
      if (i >= *a4) {
        return result;
      }
      switch(v9)
      {
        case 1LL:
          goto LABEL_16;
        case 2LL:
          goto LABEL_15;
        case 3LL:
          goto LABEL_14;
        case 4LL:
          a3[3] = v7 & 0x3F | 0x80;
          LOBYTE(v7) = (_BYTE)v7 << 6;
LABEL_14:
          char v10 = v7 & 0x3F | 0x80;
          LOBYTE(v7) = 0;
          a3[2] = v10;
LABEL_15:
          a3[1] = v7 & 0x3F | 0x80;
          LOBYTE(v7) = (_BYTE)v7 << 6;
LABEL_16:
          *a3 = *((_BYTE *)&unk_18831A57C + v9 - 1) | v7;
          break;
        default:
          break;
      }

      a3 += v9;
    }
  }

  if (a3)
  {
    if (i >= *a4) {
      return result;
    }
    *a3 = 0;
  }

  uint64_t result = 0LL;
  *a4 = i;
  return result;
}

uint64_t sub_1882FD030(unsigned int *a1, uint64_t a2, unint64_t *a3)
{
  return wind_ucs4utf8(a1, a2, 0LL, a3);
}

uint64_t wind_ucs4utf8_copy(unsigned int *a1, uint64_t a2, void **a3, void *a4)
{
  uint64_t v8 = wind_ucs4utf8(a1, a2, 0LL, &v12);
  if (!(_DWORD)v8)
  {
    char v10 = malloc(++v12);
    *a3 = v10;
    if (v10)
    {
      uint64_t v11 = wind_ucs4utf8(a1, a2, v10, &v12);
      if ((_DWORD)v11)
      {
        uint64_t v8 = v11;
        free(*a3);
        *a3 = 0LL;
      }

      else
      {
        uint64_t v8 = 0LL;
        if (a4) {
          *a4 = v12;
        }
      }
    }

    else
    {
      return 12LL;
    }
  }

  return v8;
}

uint64_t sub_1882FD0F4(unsigned __int16 *a1, uint64_t a2, unsigned int *a3, _WORD *a4, uint64_t *a5)
{
  if (!a2)
  {
    uint64_t v15 = 0LL;
LABEL_30:
    uint64_t result = 0LL;
    *a5 = v15;
    return result;
  }

  uint64_t result = 3325697538LL;
  if ((a2 & 1) != 0) {
    return 3325697540LL;
  }
  unsigned int v7 = *a3;
  int v8 = *a3 & 1;
  uint64_t v9 = *a5;
  uint64_t v10 = *a5;
  if ((*a3 & 4) == 0) {
    goto LABEL_21;
  }
  unsigned int v11 = __rev16(*a1);
  if (v11 == 65279 || v11 == 65534)
  {
    int v8 = v11 == 65534;
    unsigned int v13 = v7 & 0xFFFFFFF8;
    if (v11 == 65534) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    *a3 = v14 | v13;
    a2 -= 2LL;
    if (a2)
    {
      ++a1;
      goto LABEL_21;
    }

uint64_t wind_utf8ucs2(char *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v11 = a1;
  if (*a1)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = 3325697538LL;
    while (1)
    {
      uint64_t v7 = sub_1882FCD94(&v11, (int *)&v10);
      if ((_DWORD)v7) {
        return v7;
      }
      if (HIWORD(v10)) {
        return 3325697546LL;
      }
      if (a2)
      {
        if (v5 >= *a3) {
          return v6;
        }
        *(_WORD *)(a2 + 2 * v5) = v10;
      }

      ++v5;
      if (!*++v11) {
        goto LABEL_11;
      }
    }
  }

  else
  {
    unint64_t v5 = 0LL;
LABEL_11:
    uint64_t v6 = 0LL;
    *a3 = v5;
  }

  return v6;
}

uint64_t wind_utf8ucs2_length(char *a1, unint64_t *a2)
{
  return wind_utf8ucs2(a1, 0LL, a2);
}

uint64_t wind_ucs2utf8(unsigned __int16 *a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  for (unint64_t i = 0LL; a2; --a2)
  {
    unsigned int v6 = *a1++;
    unsigned int v5 = v6;
    if (v6 < 0x800) {
      uint64_t v7 = 2LL;
    }
    else {
      uint64_t v7 = 3LL;
    }
    if (v5 < 0x80) {
      uint64_t v7 = 1LL;
    }
    i += v7;
    if (a3)
    {
      if (i >= *a4) {
        return 3325697538LL;
      }
      if (v7 != 1)
      {
        if (v7 != 2)
        {
          char v8 = v5 & 0x3F | 0x80;
          LOBYTE(v5) = 0;
          a3[2] = v8;
        }

        a3[1] = v5 & 0x3F | 0x80;
        LOBYTE(v5) = (_BYTE)v5 << 6;
      }

      *a3 = *((_BYTE *)&unk_18831A57C + v7 - 1) | v5;
      a3 += v7;
    }
  }

  if (!a3) {
    goto LABEL_18;
  }
  if (i < *a4)
  {
    *a3 = 0;
LABEL_18:
    uint64_t result = 0LL;
    *a4 = i;
    return result;
  }

  return 3325697538LL;
}

uint64_t wind_ucs2utf8_length(unsigned __int16 *a1, uint64_t a2, unint64_t *a3)
{
  return wind_ucs2utf8(a1, a2, 0LL, a3);
}

uint64_t sub_1882FD360()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD380()
{
  return _asn1_encode();
}

uint64_t sub_1882FD3A0()
{
  return _asn1_length();
}

uint64_t sub_1882FD3B0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD3C0()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD3D4()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD3F4()
{
  return _asn1_encode();
}

uint64_t sub_1882FD414()
{
  return _asn1_length();
}

uint64_t sub_1882FD424()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD434()
{
  return _asn1_copy_top();
}

uint64_t decode_Principal()
{
  return _asn1_decode_top();
}

uint64_t encode_Principal()
{
  return _asn1_encode();
}

uint64_t length_Principal()
{
  return _asn1_length();
}

uint64_t free_Principal()
{
  return _asn1_free_top();
}

uint64_t copy_Principal()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD4BC()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD4CC()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD4E0()
{
  return _asn1_copy_top();
}

uint64_t decode_KerberosTime()
{
  return _asn1_decode_top();
}

uint64_t encode_KerberosTime()
{
  return _asn1_encode();
}

uint64_t length_KerberosTime()
{
  return _asn1_length();
}

uint64_t free_KerberosTime()
{
  return _asn1_free_top();
}

uint64_t copy_KerberosTime()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD568()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD578()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD598()
{
  return _asn1_encode();
}

uint64_t sub_1882FD5B8()
{
  return _asn1_length();
}

uint64_t sub_1882FD5C8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD5D8()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD5EC(unsigned int *a1)
{
  int v2 = realloc(*((void **)a1 + 1), 24LL * *a1 + 24);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t TicketFlags2int(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t sub_1882FD668(int a1)
{
  return a1 & 0xDC01817F;
}

uint64_t sub_1882FD678()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD698()
{
  return _asn1_encode();
}

uint64_t sub_1882FD6B8()
{
  return _asn1_length();
}

uint64_t sub_1882FD6C8()
{
  return _asn1_free_top();
}

uint64_t decode_EncryptionKey()
{
  return _asn1_decode_top();
}

uint64_t encode_EncryptionKey()
{
  return _asn1_encode();
}

uint64_t length_EncryptionKey()
{
  return _asn1_length();
}

uint64_t free_EncryptionKey()
{
  return _asn1_free_top();
}

uint64_t copy_EncryptionKey()
{
  return _asn1_copy_top();
}

uint64_t decode_Ticket()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD76C()
{
  return _asn1_encode();
}

uint64_t sub_1882FD78C()
{
  return _asn1_length();
}

uint64_t free_Ticket()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD7AC()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD7C0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD7E0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD7F0()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD804()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD824()
{
  return _asn1_encode();
}

uint64_t sub_1882FD844()
{
  return _asn1_length();
}

uint64_t sub_1882FD854()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD864()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD878()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD898()
{
  return _asn1_encode();
}

uint64_t sub_1882FD8B8()
{
  return _asn1_length();
}

uint64_t sub_1882FD8C8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD8D8()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD8EC()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD90C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD91C()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD93C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD94C()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FD96C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD97C()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD990()
{
  return _asn1_encode();
}

uint64_t sub_1882FD9B0()
{
  return _asn1_length();
}

uint64_t sub_1882FD9C0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FD9D0()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FD9E4()
{
  return _asn1_encode();
}

uint64_t sub_1882FDA04()
{
  return _asn1_length();
}

uint64_t sub_1882FDA14()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDA24()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FDA38()
{
  return _asn1_encode();
}

uint64_t sub_1882FDA58()
{
  return _asn1_length();
}

uint64_t sub_1882FDA68()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDA78()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDA98()
{
  return _asn1_encode();
}

uint64_t sub_1882FDAB8()
{
  return _asn1_length();
}

uint64_t sub_1882FDAC8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDAD8()
{
  return _asn1_encode();
}

uint64_t sub_1882FDAF8()
{
  return _asn1_length();
}

uint64_t sub_1882FDB08()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDB18(unsigned int *a1)
{
  int v2 = realloc(*((void **)a1 + 1), 24LL * *a1 + 24);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_1882FDB8C()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDBAC()
{
  return _asn1_encode();
}

uint64_t sub_1882FDBCC()
{
  return _asn1_length();
}

uint64_t sub_1882FDBDC()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDBEC()
{
  return _asn1_encode();
}

uint64_t sub_1882FDC0C()
{
  return _asn1_length();
}

uint64_t sub_1882FDC1C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDC2C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDC3C()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDC5C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDC6C()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDC8C()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDC9C()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FDCB0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDCD0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDCE0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDD00()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDD10()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDD30()
{
  return _asn1_encode();
}

uint64_t sub_1882FDD50()
{
  return _asn1_length();
}

uint64_t sub_1882FDD60()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDD70()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDD90()
{
  return _asn1_encode();
}

uint64_t sub_1882FDDB0()
{
  return _asn1_length();
}

uint64_t sub_1882FDDC0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDDD0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDDF0()
{
  return _asn1_encode();
}

uint64_t sub_1882FDE10()
{
  return _asn1_length();
}

uint64_t sub_1882FDE20()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDE30()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDE50()
{
  return _asn1_encode();
}

uint64_t sub_1882FDE70()
{
  return _asn1_length();
}

uint64_t sub_1882FDE80()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDE90()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDEB0()
{
  return _asn1_encode();
}

uint64_t sub_1882FDED0()
{
  return _asn1_length();
}

uint64_t sub_1882FDEE0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDEF0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDF10()
{
  return _asn1_encode();
}

uint64_t sub_1882FDF30()
{
  return _asn1_length();
}

uint64_t sub_1882FDF40()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDF50()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDF70()
{
  return _asn1_encode();
}

uint64_t sub_1882FDF90()
{
  return _asn1_length();
}

uint64_t sub_1882FDFA0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FDFB0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FDFD0()
{
  return _asn1_encode();
}

uint64_t sub_1882FDFF0()
{
  return _asn1_length();
}

uint64_t sub_1882FE000()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE010()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE030()
{
  return _asn1_encode();
}

uint64_t sub_1882FE050()
{
  return _asn1_length();
}

uint64_t sub_1882FE060()
{
  return _asn1_free_top();
}

uint64_t decode_ChangePasswdDataMS()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE090()
{
  return _asn1_encode();
}

uint64_t sub_1882FE0B0()
{
  return _asn1_length();
}

uint64_t free_ChangePasswdDataMS()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE0D0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE0F0()
{
  return _asn1_encode();
}

uint64_t sub_1882FE110()
{
  return _asn1_length();
}

uint64_t sub_1882FE120()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE130()
{
  return _asn1_encode();
}

uint64_t sub_1882FE150()
{
  return _asn1_length();
}

uint64_t sub_1882FE160()
{
  return _asn1_encode();
}

uint64_t sub_1882FE180()
{
  return _asn1_length();
}

uint64_t sub_1882FE190()
{
  return _asn1_encode();
}

uint64_t sub_1882FE1B0()
{
  return _asn1_length();
}

uint64_t sub_1882FE1C0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE1E0()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE1F0()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE210()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE220()
{
  return _asn1_encode();
}

uint64_t sub_1882FE240()
{
  return _asn1_length();
}

uint64_t sub_1882FE250()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE260()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE270()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FE284()
{
  return _asn1_encode();
}

uint64_t sub_1882FE2A4()
{
  return _asn1_length();
}

uint64_t sub_1882FE2B4()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE2C4()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE2E4()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE2F4()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE314()
{
  return _asn1_free_top();
}

uint64_t free_KDCSRPState()
{
  return _asn1_free_top();
}

uint64_t decode_KDC_PROXY_MESSAGE()
{
  return _asn1_decode_top();
}

uint64_t encode_KDC_PROXY_MESSAGE()
{
  return _asn1_encode();
}

uint64_t length_KDC_PROXY_MESSAGE()
{
  return _asn1_length();
}

uint64_t sub_1882FE384()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE394()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE3A4()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE3C4()
{
  return _asn1_free_top();
}

uint64_t decode_KRB5_SRP_PA()
{
  return _asn1_decode_top();
}

uint64_t encode_KRB5_SRP_PA()
{
  return _asn1_encode();
}

uint64_t length_KRB5_SRP_PA()
{
  return _asn1_length();
}

uint64_t free_KRB5_SRP_PA()
{
  return _asn1_free_top();
}

uint64_t copy_KRB5_SRP_PA()
{
  return _asn1_copy_top();
}

uint64_t sub_1882FE448()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE468()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE478()
{
  return _asn1_encode();
}

uint64_t sub_1882FE498()
{
  return _asn1_length();
}

uint64_t sub_1882FE4A8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE4B8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE4D8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE4E8()
{
  return _asn1_encode();
}

uint64_t sub_1882FE508()
{
  return _asn1_length();
}

uint64_t sub_1882FE518()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE528()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE548()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE558()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE578()
{
  return _asn1_encode();
}

uint64_t sub_1882FE598()
{
  return _asn1_length();
}

uint64_t sub_1882FE5A8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE5B8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE5D8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE5E8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE608()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE618()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE638()
{
  return _asn1_encode();
}

uint64_t sub_1882FE658()
{
  return _asn1_length();
}

uint64_t sub_1882FE668()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE678()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE698()
{
  return _asn1_encode();
}

uint64_t sub_1882FE6B8()
{
  return _asn1_length();
}

uint64_t sub_1882FE6C8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE6D8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE6F8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE708()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE728()
{
  return _asn1_encode();
}

uint64_t sub_1882FE748()
{
  return _asn1_length();
}

uint64_t sub_1882FE758()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE768()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE788()
{
  return _asn1_encode();
}

uint64_t sub_1882FE7A8()
{
  return _asn1_length();
}

uint64_t sub_1882FE7B8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE7D8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE7E8()
{
  return _asn1_encode();
}

uint64_t sub_1882FE808()
{
  return _asn1_length();
}

uint64_t sub_1882FE818()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE828()
{
  return _asn1_encode();
}

uint64_t sub_1882FE848()
{
  return _asn1_length();
}

uint64_t sub_1882FE858()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE868()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE888()
{
  return _asn1_encode();
}

uint64_t sub_1882FE8A8()
{
  return _asn1_length();
}

uint64_t sub_1882FE8B8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE8C8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE8E8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE8F8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE918()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE928()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE948()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE958()
{
  return _asn1_encode();
}

uint64_t sub_1882FE978()
{
  return _asn1_length();
}

uint64_t sub_1882FE988()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE998()
{
  return _asn1_encode();
}

uint64_t sub_1882FE9B8()
{
  return _asn1_length();
}

uint64_t sub_1882FE9C8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FE9D8()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FE9F8()
{
  return _asn1_free_top();
}

uint64_t sub_1882FEA08()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FEA28()
{
  return _asn1_free_top();
}

uint64_t sub_1882FEA38()
{
  return _asn1_decode_top();
}

uint64_t sub_1882FEA58()
{
  return _asn1_free_top();
}

uint64_t sub_1882FEA68()
{
  return _asn1_encode();
}

uint64_t sub_1882FEA88()
{
  return _asn1_length();
}

uint64_t sub_1882FEA98()
{
  return _asn1_encode();
}

uint64_t sub_1882FEAB8()
{
  return _asn1_length();
}

const char *__cdecl error_message(errcode_t code)
{
  int v2 = com_right((void *)qword_18C707710, code);
  if (!v2)
  {
    if (code < 0)
    {
      snprintf(byte_18C707578, 0x80uLL, "Unknown error %ld", code);
      goto LABEL_8;
    }

    int v2 = strerror(code);
    if (!v2) {
      goto LABEL_8;
    }
  }

  if (!*v2)
  {
LABEL_8:
    snprintf(byte_18C707578, 0x80uLL, "Unknown error %ld", code);
    return byte_18C707578;
  }

  __strlcpy_chk();
  return byte_18C707578;
}

uint64_t init_error_table(uint64_t a1, uint64_t a2, int a3)
{
  return 0LL;
}

void com_err_va(const char *progname, errcode_t code, const char *format, va_list args)
{
}

void com_err(const char *progname, errcode_t code, const char *format, ...)
{
}

com_err_handler_t set_com_err_hook(com_err_handler_t handler)
{
  unint64_t v1 = (void (__cdecl *)(const char *, errcode_t, const char *, va_list))off_18C4D94F0;
  int v2 = (uint64_t (*)(int, errcode_t, char *, va_list))sub_1882FEC04;
  if (handler) {
    int v2 = (uint64_t (*)(int, errcode_t, char *, va_list))handler;
  }
  off_18C4D94F0 = v2;
  return v1;
}

size_t sub_1882FEC04(const char *a1, errcode_t code, char *a3, va_list a4)
{
  uint64_t v7 = (FILE **)MEMORY[0x1895F89D0];
  if (a1) {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "%s: ", a1);
  }
  if (code)
  {
    char v8 = *v7;
    error_message(code);
    fprintf(v8, "%s ", byte_18C707578);
  }

  if (a3) {
    vfprintf(*v7, a3, a4);
  }
  return fwrite("\r\n", 2uLL, 1uLL, *v7);
}

com_err_handler_t reset_com_err_hook(void)
{
  com_err_handler_t result = (com_err_handler_t)off_18C4D94F0;
  off_18C4D94F0 = (uint64_t (*)(int, errcode_t, char *, va_list))sub_1882FEC04;
  return result;
}

void *com_right(void *result, uint64_t a2)
{
  if (result)
  {
    while (1)
    {
      uint64_t v2 = result[1];
      uint64_t v3 = *(void *)(v2 + 8);
      com_err_handler_t result = (void *)*result;
      if (!result) {
        return result;
      }
    }

    return *(void **)(*(void *)v2 + 8 * (a2 - v3));
  }

  return result;
}

char *com_right_r(void *a1, uint64_t a2, char *__dst, size_t __size)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = __dst;
  while (1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = a2 - v6;
    a1 = (void *)*a1;
    if (!a1) {
      return 0LL;
    }
  }

  uint64_t v9 = *(const char **)(*(void *)v5 + 8 * v7);
  if (v9) {
    strlcpy(__dst, v9, __size);
  }
  else {
    snprintf(__dst, __size, "Reserved error code %ld in base %ld", v7, v6);
  }
  return v4;
}

void *initialize_error_table_r(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = result;
  while (1)
  {
    char v8 = (void *)*v7;
    if (!*v7) {
      break;
    }
    uint64_t v7 = (void *)*v7;
    if (*(void *)v8[1] == a2) {
      return result;
    }
  }

  com_err_handler_t result = malloc(0x28uLL);
  if (result)
  {
    result[2] = a2;
    *((_DWORD *)result + _Block_object_dispose((const void *)(v1 - 128), 8) = a3;
    result[3] = a4;
    *com_err_handler_t result = 0LL;
    result[1] = result + 2;
    void *v7 = result;
  }

  return result;
}

void *sub_1882FEE10(void *result)
{
  if (result)
  {
    do
    {
      unint64_t v1 = (void *)*result;
      free(result);
      com_err_handler_t result = v1;
    }

    while (v1);
  }

  return result;
}

void *initialize_asn1_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C704B10, 21, 1859794432LL);
}

void initialize_asn1_error_table(void)
{
}

void *initialize_gk5_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C704BC0, 137, 35224064LL);
}

uint64_t initialize_gk5_error_table()
{
  return init_error_table((uint64_t)off_18C704BC0, 35224064LL, 137);
}

void *initialize_hdb_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)&unk_18C705010, 18, 36150272LL);
}

void *initialize_heim_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C7050A8, 226, -1980176640LL);
}

uint64_t initialize_heim_error_table()
{
  return init_error_table((uint64_t)off_18C7050A8, -1980176640LL, 226);
}

void *initialize_hx_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C7057C0, 135, 569856LL);
}

uint64_t initialize_hx_error_table()
{
  return init_error_table((uint64_t)off_18C7057C0, 569856LL, 135);
}

void *initialize_k524_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C705C00, 8, -1750206208LL);
}

void initialize_k524_error_table(void)
{
}

void *initialize_krb5_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C705C48, 251, -1765328384LL);
}

void initialize_krb5_error_table(void)
{
}

void *initialize_wind_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C706428, 11, -969269760LL);
}

uint64_t initialize_wind_error_table()
{
  return init_error_table((uint64_t)off_18C706428, -969269760LL, 11);
}

void *initialize_krb_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_18C706488, 82, 39525376LL);
}

uint64_t initialize_krb_error_table()
{
  return init_error_table((uint64_t)off_18C706488, 39525376LL, 82);
}

uint64_t hx509_ca_tbs_init(uint64_t a1, void *a2)
{
  uint64_t v3 = calloc(1uLL, 0xC0uLL);
  *a2 = v3;
  if (v3) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

void hx509_ca_tbs_free(void ***a1)
{
  if (a1)
  {
    if (*a1)
    {
      free_SubjectPublicKeyInfo();
      sub_188313828();
      sub_188313ACC();
      der_free_heim_integer();
      sub_188313B9C();
      der_free_bit_string();
      der_free_bit_string();
      hx509_name_free(*a1);
      uint64_t v2 = *a1;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      free(*a1);
      *a1 = 0LL;
    }
  }

uint64_t hx509_ca_tbs_set_notBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 120) = a3;
  return 0LL;
}

uint64_t hx509_ca_tbs_set_notAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a3;
  return 0LL;
}

uint64_t hx509_ca_tbs_set_notAfter_lifetime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = time(0LL) + a3;
  return 0LL;
}

char **hx509_ca_tbs_template_units()
{
  return &off_18A21E330;
}

uint64_t hx509_ca_tbs_set_template(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    if (*(void *)a2) {
      hx509_name_free((void **)a2);
    }
    uint64_t subject = hx509_cert_get_subject(a4, (void **)a2);
    if ((_DWORD)subject)
    {
      uint64_t SPKI = subject;
      int v14 = "Failed to get subject from template";
LABEL_9:
      hx509_set_error_string(a1, 0, SPKI, v14, v9, v10, v11, v12, v21);
      return SPKI;
    }
  }

  if ((a3 & 2) != 0)
  {
    der_free_heim_integer();
    uint64_t serialnumber = hx509_cert_get_serialnumber();
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a2 + 112) & 0xF7 | (8 * ((_DWORD)serialnumber == 0));
    if ((_DWORD)serialnumber)
    {
      uint64_t SPKI = serialnumber;
      int v14 = "Failed to copy serial number";
      goto LABEL_9;
    }
  }

  if ((a3 & 4) != 0)
  {
    *(void *)(a2 + 120) = hx509_cert_get_notBefore(a4);
    if ((a3 & 8) == 0)
    {
LABEL_12:
      if ((a3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  else if ((a3 & 8) == 0)
  {
    goto LABEL_12;
  }

  *(void *)(a2 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = hx509_cert_get_notAfter(a4);
  if ((a3 & 0x10) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  free_SubjectPublicKeyInfo();
  uint64_t SPKI = hx509_cert_get_SPKI(a1);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a2 + 112) & 0xFB | (4 * ((_DWORD)SPKI == 0));
  if ((_DWORD)SPKI) {
    return SPKI;
  }
LABEL_17:
  if ((a3 & 0x20) != 0)
  {
    uint64_t v16 = sub_18830392C(a1, a4, &v21);
    if ((_DWORD)v16) {
      return v16;
    }
    *(_DWORD *)(a2 + 80) = sub_1883138FC(v21);
  }

  if ((a3 & 0x40) == 0) {
    return 0LL;
  }
  uint64_t SPKI = sub_1883039B0(a1, a4, &v21);
  if ((_DWORD)SPKI) {
    return SPKI;
  }
  if (!(_DWORD)v21)
  {
LABEL_27:
    sub_188313ACC();
    return 0LL;
  }

  uint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  while (1)
  {
    uint64_t v19 = hx509_ca_tbs_add_eku(a1, a2);
    if ((_DWORD)v19) {
      break;
    }
    ++v18;
    v17 += 16LL;
  }

  uint64_t SPKI = v19;
  sub_188313ACC();
  return SPKI;
}

uint64_t hx509_ca_tbs_add_eku(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48))
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    while (der_heim_oid_cmp())
    {
      ++v5;
      unint64_t v6 = *(unsigned int *)(a2 + 48);
      v4 += 16LL;
      if (v5 >= v6)
      {
        size_t v7 = 16LL * (v6 + 1);
        goto LABEL_7;
      }
    }

    return 0LL;
  }

  else
  {
    size_t v7 = 16LL;
LABEL_7:
    char v8 = realloc(*(void **)(a2 + 56), v7);
    if (v8)
    {
      *(void *)(a2 + 56) = v8;
      uint64_t v13 = der_copy_oid();
      if (!(_DWORD)v13)
      {
        ++*(_DWORD *)(a2 + 48);
        return v13;
      }

      uint64_t v14 = a1;
      int v15 = v13;
    }

    else
    {
      uint64_t v13 = 12LL;
      uint64_t v14 = a1;
      int v15 = 12;
    }

    hx509_set_error_string(v14, 0, v15, "out of memory", v9, v10, v11, v12, v17);
  }

  return v13;
}

uint64_t hx509_ca_tbs_set_ca(uint64_t a1, uint64_t a2, int a3)
{
  *(_BYTE *)(a2 + 112) |= 2u;
  *(_DWORD *)(a2 + 136) = a3;
  return 0LL;
}

uint64_t hx509_ca_tbs_set_proxy(uint64_t a1, uint64_t a2, int a3)
{
  *(_BYTE *)(a2 + 112) |= 1u;
  *(_DWORD *)(a2 + 136) = a3;
  return 0LL;
}

uint64_t hx509_ca_tbs_set_domaincontroller(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 112) |= 0x10u;
  return 0LL;
}

uint64_t hx509_ca_tbs_set_spki(uint64_t a1, uint64_t a2)
{
  uint64_t result = copy_SubjectPublicKeyInfo();
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a2 + 112) & 0xFB | (4 * ((_DWORD)result == 0));
  return result;
}

uint64_t hx509_ca_tbs_set_serialnumber(uint64_t a1, uint64_t a2)
{
  uint64_t result = der_copy_heim_integer();
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a2 + 112) & 0xF7 | (8 * ((_DWORD)result == 0));
  return result;
}

uint64_t hx509_ca_tbs_add_crl_dp_uri(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  char v8 = sub_1882FA1C8(1uLL, 0x10uLL);
  int v29 = 1;
  int v30 = 1;
  unsigned int v31 = &v26;
  int v32 = v8;
  int v26 = 5;
  int v28 = a3;
  size_t v27 = strlen(a3);
  size_t v9 = sub_188313B1C();
  void *v8 = v9;
  uint64_t v10 = malloc(v9);
  v8[1] = v10;
  if (!v10)
  {
    uint64_t v23 = 12LL;
    goto LABEL_5;
  }

  uint64_t v15 = sub_188313AFC();
  if ((_DWORD)v15)
  {
    uint64_t v23 = v15;
    free((void *)v32[1]);
    v32[1] = 0LL;
LABEL_5:
    BOOL v24 = "Failed to encoded DistributionPointName";
LABEL_6:
    hx509_set_error_string(a1, 0, v23, v24, v11, v12, v13, v14, 0);
    goto LABEL_7;
  }

  if (*v32) {
    sub_188303AB8("internal ASN.1 encoder error", v16, v17, v18, v19, v20, v21, v22, 0);
  }
  if (a4)
  {
    uint64_t v23 = 22LL;
    hx509_set_error_string(a1, 0, 22, "CRLDistributionPoints.name.issuername not yet supported", v19, v20, v21, v22, 0);
    return v23;
  }

  uint64_t v23 = sub_188313BAC((unsigned int *)(a2 + 144));
  if ((_DWORD)v23)
  {
    BOOL v24 = "out of memory";
    goto LABEL_6;
  }

uint64_t hx509_ca_tbs_add_san_otherName(uint64_t a1, uint64_t a2)
{
  return sub_188313838((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_add_san_pkinit( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1;
  *(_OWORD *)uint64_t v46 = 0u;
  int v11 = 1;
  for (unint64_t i = a3; ; ++i)
  {
    unsigned int v13 = *(unsigned __int8 *)i;
    if (v13 > 0x3F) {
      break;
    }
    if (v13 == 47)
    {
      ++v11;
    }

    else if (!*i)
    {
      goto LABEL_12;
    }

uint64_t hx509_ca_tbs_add_san_ms_upn(uint64_t a1, uint64_t a2)
{
  return sub_1882FF8F4(a1, a2);
}

uint64_t sub_1882FF8F4(uint64_t a1, uint64_t a2)
{
  size_t v4 = sub_188313E98();
  unint64_t v5 = malloc(v4);
  if (!v5)
  {
    uint64_t v19 = 12LL;
    goto LABEL_5;
  }

  uint64_t v10 = v5;
  uint64_t v11 = sub_188313E78();
  if ((_DWORD)v11)
  {
    uint64_t v19 = v11;
    free(v10);
LABEL_5:
    hx509_set_error_string(a1, 0, v19, "Out of memory", v6, v7, v8, v9, v21);
    return v19;
  }

  if (v4) {
    sub_188303AB8("internal ASN.1 encoder error", v12, v13, v14, v15, v16, v17, v18, v21);
  }
  uint64_t v19 = sub_188313838((unsigned int *)(a2 + 64));
  free(v10);
  return v19;
}

uint64_t hx509_ca_tbs_add_san_jid(uint64_t a1, uint64_t a2)
{
  return sub_1882FF8F4(a1, a2);
}

uint64_t hx509_ca_tbs_add_san_hostname(int a1, uint64_t a2, char *__s)
{
  return sub_188313838((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_add_san_rfc822name(int a1, uint64_t a2, char *__s)
{
  return sub_188313838((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_set_subject(uint64_t a1, void **a2, uint64_t a3)
{
  if (*a2) {
    hx509_name_free(a2);
  }
  return hx509_name_copy(a1, a3, a2);
}

uint64_t hx509_ca_tbs_subject_expand( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_name_expand(a1, *a2, a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_ca_sign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = 0LL;
  BOOL v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v8 = sub_188300994(a3);
  if (!sub_188300DB8(v8, &v33))
  {
    uint64_t v23 = calloc(1uLL, 0x10uLL);
    if (!v23)
    {
      sub_1883139B4();
      uint64_t v13 = 12LL;
      uint64_t v16 = a1;
      int v17 = 12;
      goto LABEL_13;
    }

    uint64_t v13 = der_copy_octet_string();
    sub_1883139B4();
    if (!(_DWORD)v13)
    {
LABEL_17:
      uint64_t v19 = _hx509_cert_private_key(a3);
      uint64_t v13 = sub_1882FFCB0(a1, a2, v19, (uint64_t)&v23, v8 + 144, a4, v20, v21);
      goto LABEL_15;
    }

uint64_t sub_1882FFCB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  uint64_t v61 = 0LL;
  uint64_t v13 = off_18C706720;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  memset(v66, 0, sizeof(v66));
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  memset(v69, 0, sizeof(v69));
  __int128 v70 = 0u;
  memset(v71, 0, sizeof(v71));
  __int128 v72 = 0u;
  time_t v14 = *(void *)(a2 + 120);
  if (!v14) {
    time_t v14 = time(0LL) - 86400;
  }
  time_t v15 = *(void *)(a2 + 128);
  if (!v15) {
    time_t v15 = time(0LL) + 31536000;
  }
  int v16 = *(_DWORD *)(a2 + 80);
  if (!v16) {
    LOWORD(v16) = sub_1883138FC(5);
  }
  char v17 = *(_BYTE *)(a2 + 112);
  if ((v17 & 2) != 0)
  {
    LOWORD(v16) = sub_1883138FC(96) | v16;
    char v17 = *(_BYTE *)(a2 + 112);
  }

  if ((v17 & 4) != 0)
  {
    if ((v17 & 1) == 0)
    {
      if (!*(void *)a2)
      {
        uint64_t v18 = "No subject name set";
        goto LABEL_29;
      }

      if (hx509_name_is_null_p(*(void *)a2) && !*(_DWORD *)(a2 + 64))
      {
        uint64_t v18 = "NULL subject and no SubjectAltNames";
        goto LABEL_29;
      }
    }

    int v19 = *(unsigned __int8 *)(a2 + 112);
    if ((~v19 & 3) == 0)
    {
      uint64_t v18 = "Can't be proxy and CA at the same time";
      goto LABEL_29;
    }

    if ((v19 & 1) != 0 && *(_DWORD *)(a2 + 64))
    {
      uint64_t v18 = "Proxy certificate is not allowed to have SubjectAltNames";
      goto LABEL_29;
    }

    uint64_t v20 = calloc(1uLL, 4uLL);
    *(void *)&__int128 v63 = v20;
    if (!v20)
    {
LABEL_60:
      __int128 v28 = "Out of memory";
      uint64_t v27 = 12LL;
      uint64_t v29 = a1;
      char v26 = 0;
      goto LABEL_61;
    }

    *uint64_t v20 = 2;
    if ((*(_BYTE *)(a2 + 112) & 8) != 0)
    {
      __int128 v57 = (CFTypeRef *)a6;
      uint64_t v31 = der_copy_heim_integer();
      if ((_DWORD)v31)
      {
        uint64_t v27 = v31;
        __int128 v28 = "Failed to copy integer";
LABEL_38:
        uint64_t v29 = a1;
        char v26 = 0;
        int v30 = v27;
        goto LABEL_62;
      }
    }

    else
    {
      *((void *)&v63 + 1) = 20LL;
      uint64_t v25 = malloc(0x14uLL);
      char v26 = (char)v25;
      *(void *)&__int128 v64 = v25;
      if (!v25) {
        goto LABEL_53;
      }
      __int128 v57 = (CFTypeRef *)a6;
      if (CCRandomCopyBytes())
      {
        uint64_t v27 = 569935LL;
        __int128 v28 = "Out of random";
        uint64_t v29 = a1;
        char v26 = 0;
        int v30 = 569935;
LABEL_62:
        hx509_set_error_string(v29, v26, v30, v28, v21, v22, v23, v24, (char)v57);
        goto LABEL_63;
      }
    }

    uint64_t v33 = copy_AlgorithmIdentifier();
    if ((_DWORD)v33)
    {
      uint64_t v27 = v33;
      __int128 v28 = "Failed to copy sigature alg";
      goto LABEL_38;
    }

    if (a5) {
      uint64_t v34 = hx509_name_to_Name_0();
    }
    else {
      uint64_t v34 = hx509_name_to_Name();
    }
    uint64_t v27 = v34;
    if ((_DWORD)v34)
    {
      __int128 v28 = "Failed to copy issuer name";
      goto LABEL_38;
    }

    *((void *)&v67 + 1) = v14;
    LODWORD(v67) = 2;
    LODWORD(v6init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 2;
    *((void *)&v68 + 1) = v15;
    if ((*(_BYTE *)(a2 + 112) & 1) != 0)
    {
      uint64_t v27 = sub_188300690(a1, (uint64_t)v66 + 8, (uint64_t)v69);
      if ((_DWORD)v27)
      {
LABEL_63:
        sub_188313640();
        return v27;
      }
    }

    else
    {
      uint64_t v35 = hx509_name_to_Name();
      if ((_DWORD)v35)
      {
        uint64_t v27 = v35;
        __int128 v28 = "Failed to copy subject name";
        goto LABEL_38;
      }
    }

    uint64_t v36 = copy_SubjectPublicKeyInfo();
    if ((_DWORD)v36)
    {
      uint64_t v27 = v36;
      __int128 v28 = "Failed to copy spki";
      goto LABEL_38;
    }

    if (*(void *)(a2 + 176))
    {
      uint64_t v37 = calloc(1uLL, 0x10uLL);
      char v26 = (char)v37;
      *(void *)&__int128 v70 = v37;
      if (!v37) {
        goto LABEL_53;
      }
      uint64_t v38 = der_copy_bit_string();
      if ((_DWORD)v38)
      {
LABEL_51:
        uint64_t v27 = v38;
LABEL_52:
        __int128 v28 = "Out of memory";
        goto LABEL_38;
      }
    }

    if (!*(void *)(a2 + 160)) {
      goto LABEL_54;
    }
    int v39 = calloc(1uLL, 0x10uLL);
    char v26 = (char)v39;
    *((void *)&v70 + 1) = v39;
    if (v39)
    {
      uint64_t v38 = der_copy_bit_string();
      if ((_DWORD)v38) {
        goto LABEL_51;
      }
LABEL_54:
      v71[0] = calloc(1uLL, 0x10uLL);
      if (v71[0])
      {
        if ((*(_BYTE *)(a2 + 112) & 0x10) != 0)
        {
          size_t v73 = 34LL;
          uint64_t v74 = &unk_18831AAB0;
          uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
          if ((_DWORD)v27) {
            goto LABEL_63;
          }
        }

        LODWORD(v75[0]) = sub_1883138FC(v16);
        size_t v73 = sub_1883138EC();
        uint64_t v74 = malloc(v73);
        if (!v74) {
          goto LABEL_106;
        }
        uint64_t v40 = sub_1883138CC();
        if ((_DWORD)v40)
        {
LABEL_59:
          uint64_t v27 = v40;
          free(v74);
          uint64_t v74 = 0LL;
          goto LABEL_52;
        }

        if (v61 != v73) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 1);
        free(v74);
        if ((_DWORD)v27) {
          goto LABEL_63;
        }
        if (*(_DWORD *)(a2 + 48))
        {
          size_t v73 = sub_188313ABC();
          uint64_t v74 = malloc(v73);
          if (!v74) {
            goto LABEL_106;
          }
          uint64_t v40 = sub_188313A9C();
          if ((_DWORD)v40) {
            goto LABEL_59;
          }
          if (v61 != v73) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
          free(v74);
          if ((_DWORD)v27) {
            goto LABEL_63;
          }
        }

        if (*(_DWORD *)(a2 + 64))
        {
          size_t v73 = sub_188313818();
          uint64_t v74 = malloc(v73);
          if (!v74) {
            goto LABEL_106;
          }
          uint64_t v40 = sub_1883137F8();
          if ((_DWORD)v40) {
            goto LABEL_59;
          }
          if (v61 != v73) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
          free(v74);
          if ((_DWORD)v27) {
            goto LABEL_63;
          }
        }

        if (a4)
        {
          size_t v73 = sub_188313944();
          uint64_t v74 = malloc(v73);
          if (!v74) {
            goto LABEL_106;
          }
          uint64_t v40 = sub_188313924();
          if ((_DWORD)v40) {
            goto LABEL_59;
          }
          if (v61 != v73) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
          free(v74);
          if ((_DWORD)v27) {
            goto LABEL_63;
          }
        }

        CCDigestCreate();
        CCDigestUpdate();
        CCDigestFinal();
        CCDigestDestroy();
        v60[0] = 20LL;
        v60[1] = v75;
        size_t v73 = sub_1883139A4();
        uint64_t v74 = malloc(v73);
        if (!v74) {
          goto LABEL_106;
        }
        uint64_t v40 = sub_188313984();
        if ((_DWORD)v40) {
          goto LABEL_59;
        }
        if (v61 != v73) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
        free(v74);
        if ((_DWORD)v27) {
          goto LABEL_63;
        }
        LODWORD(v60[0]) = 1;
        v75[0] = 0uLL;
        if ((*(_BYTE *)(a2 + 112) & 2) != 0)
        {
          *(void *)&v75[0] = v60;
          if ((*(_DWORD *)(a2 + 136) & 0x80000000) == 0)
          {
            int v59 = *(_DWORD *)(a2 + 136);
            *((void *)&v75[0] + 1) = &v59;
          }
        }

        size_t v73 = sub_188313A18();
        uint64_t v74 = malloc(v73);
        if (!v74)
        {
LABEL_106:
          uint64_t v27 = 12LL;
          goto LABEL_52;
        }

        uint64_t v40 = sub_1883139F8();
        if ((_DWORD)v40) {
          goto LABEL_59;
        }
        if (v61 != v73) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, (*(unsigned __int8 *)(a2 + 112) >> 1) & 1);
        free(v74);
        if ((_DWORD)v27) {
          goto LABEL_63;
        }
        if ((*(_BYTE *)(a2 + 112) & 1) == 0)
        {
LABEL_93:
          if (!*(_DWORD *)(a2 + 144))
          {
LABEL_98:
            size_t v73 = sub_1883135E0();
            uint64_t v74 = malloc(v73);
            if (!v74)
            {
              uint64_t v27 = 12LL;
              goto LABEL_111;
            }

            uint64_t v48 = sub_1883135C0();
            if ((_DWORD)v48)
            {
              uint64_t v27 = v48;
              free(v74);
              uint64_t v74 = 0LL;
LABEL_111:
              __int128 v28 = "malloc out of memory";
              goto LABEL_38;
            }

            if (v73 == v61)
            {
              uint64_t v27 = sub_188306BB4(a1, a3, (uint64_t)v13, (uint64_t)&v73, (uint64_t)&v71[1], &v72);
              free(v74);
              if (!(_DWORD)v27) {
                uint64_t v27 = hx509_cert_init(a1, (uint64_t)&v62, v57, v52, v53, v54, v55, v56);
              }
              goto LABEL_63;
            }

LABEL_119:
            sub_188303AB8("internal ASN.1 encoder error", v41, v42, v43, v44, v45, v46, v47, (char)v57);
          }

          size_t v73 = sub_188313B8C();
          uint64_t v74 = malloc(v73);
          if (v74)
          {
            uint64_t v40 = sub_188313B6C();
            if ((_DWORD)v40) {
              goto LABEL_59;
            }
            if (v61 != v73) {
              goto LABEL_119;
            }
            uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
            free(v74);
            if ((_DWORD)v27) {
              goto LABEL_63;
            }
            goto LABEL_98;
          }

          goto LABEL_106;
        }

        memset(v75, 0, sizeof(v75));
        int v49 = *(_DWORD *)(a2 + 136);
        if ((v49 & 0x80000000) == 0)
        {
          uint64_t v50 = malloc(4uLL);
          *(void *)&v75[0] = v50;
          if (!v50) {
            goto LABEL_106;
          }
          *uint64_t v50 = v49;
        }

        uint64_t v27 = der_copy_oid();
        if (!(_DWORD)v27)
        {
          size_t v73 = sub_188313F28();
          uint64_t v74 = malloc(v73);
          if (v74)
          {
            uint64_t v51 = sub_188313F08();
            if (!(_DWORD)v51)
            {
              sub_188313F38();
              if (v61 != v73) {
                goto LABEL_119;
              }
              uint64_t v27 = sub_188300764(a1, (uint64_t)&v62, 0);
              free(v74);
              if ((_DWORD)v27) {
                goto LABEL_63;
              }
              goto LABEL_93;
            }

            uint64_t v27 = v51;
            free(v74);
            uint64_t v74 = 0LL;
          }

          else
          {
            uint64_t v27 = 12LL;
          }
        }

        sub_188313F38();
        goto LABEL_52;
      }

      goto LABEL_60;
    }

uint64_t hx509_ca_sign_self( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1882FFCB0(a1, a2, a3, 0LL, 0LL, a4, a7, a8);
}

uint64_t sub_188300690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = hx509_name_to_Name_0();
  if ((_DWORD)v5)
  {
    uint64_t v10 = v5;
    uint64_t v11 = a1;
    int v12 = v10;
LABEL_3:
    hx509_set_error_string(v11, 0, v12, "Failed to copy subject name", (uint64_t)v6, v7, v8, v9, v15);
    return v10;
  }

  time_t v14 = time(0LL);
  asprintf(&v16, "ts-%lu", v14);
  uint64_t v6 = v16;
  if (!v16)
  {
    uint64_t v10 = 12LL;
    uint64_t v11 = a1;
    int v12 = 12;
    goto LABEL_3;
  }

  uint64_t v10 = sub_18830E7F4(a1, a3, 1, (uint64_t)&unk_18A220558, v16);
  free(v16);
  if ((_DWORD)v10) {
    sub_1883133BC();
  }
  return v10;
}

uint64_t sub_188300764(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = malloc(4uLL);
    if (!v5)
    {
      uint64_t v11 = 12LL;
      uint64_t v12 = a1;
      int v13 = 12;
      goto LABEL_9;
    }

    _DWORD *v5 = 1;
  }

  uint64_t v10 = der_copy_oid();
  if ((_DWORD)v10 || (uint64_t v10 = der_copy_octet_string(), (_DWORD)v10))
  {
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v11 = sub_18831354C(*(unsigned int **)(a2 + 240));
    if (!(_DWORD)v11) {
      goto LABEL_10;
    }
  }

  uint64_t v12 = a1;
  int v13 = v11;
LABEL_9:
  hx509_set_error_string(v12, 0, v13, "Out of memory", v6, v7, v8, v9, 0);
LABEL_10:
  sub_1883134C8();
  return v11;
}

uint64_t hx509_context_init(uint64_t *a1)
{
  uint64_t v2 = calloc(1uLL, 0x38uLL);
  *a1 = (uint64_t)v2;
  if (!v2) {
    return 12LL;
  }
  ((void (*)(void))nullsub_4)();
  sub_18830C784(*a1);
  sub_18830AEAC(*a1);
  sub_18830CFE4(*a1);
  nullsub_4(*a1);
  nullsub_4(*a1);
  uint64_t v3 = sub_18830BFA8(*a1);
  uint64_t v4 = hc_ENGINE_add_conf_module(v3);
  hc_OpenSSL_add_all_algorithms(v4);
  uint64_t v5 = *a1;
  *(_DWORD *)(v5 + 16) = 300;
  initialize_hx_error_table_r((void *)(v5 + 32));
  initialize_asn1_error_table_r((void *)(*a1 + 32));
  hx509_certs_init(*a1, "KEYCHAIN:system-anchors", 0LL, 0LL, (void *)(*a1 + 48));
  return 0LL;
}

uint64_t hx509_context_set_missing_revoke(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(result + 12) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

void hx509_context_free(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)*a1;
  if (v3)
  {
    free(v3);
    *(void *)*a1 = 0LL;
    uint64_t v2 = *a1;
  }

  *(_DWORD *)(v2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0;
  sub_1882FEE10(*(void **)(v2 + 32));
  uint64_t v4 = *a1;
  *(void *)(v4 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  free((void *)*a1);
  *a1 = 0LL;
}

uint64_t sub_188300994(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_18830099C(uint64_t a1)
{
  unint64_t v1 = *(_DWORD **)(a1 + 16);
  if (v1) {
    return (*v1 + 1);
  }
  else {
    return 1LL;
  }
}

uint64_t hx509_cert_init( uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = heim_uniq_alloc(0x70uLL, (uint64_t)"hx509-cert", (uint64_t)sub_188300A78, a4, a5, a6, a7, a8);
  *a3 = (CFTypeRef)v9;
  if (!v9) {
    return 12LL;
  }
  *(void *)(v9 + 32) = 0LL;
  uint64_t v10 = *a3;
  v10[9] = 0LL;
  v10[10] = 0LL;
  *((void *)*a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  *((void *)*a3 + 11) = 0LL;
  *((void *)*a3 + 12) = 0LL;
  *((void *)*a3 + 13) = 0LL;
  *((void *)*a3 + 7) = calloc(1uLL, 0x120uLL);
  if (!*((void *)*a3 + 7))
  {
    heim_release(*a3);
    uint64_t v11 = 12LL;
    goto LABEL_7;
  }

  uint64_t v11 = sub_188313650();
  if ((_DWORD)v11)
  {
    heim_release(*a3);
LABEL_7:
    *a3 = 0LL;
  }

  return v11;
}

uint64_t sub_188300A78(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 96);
  if (v2) {
    v2(a1, *(void *)(a1 + 104));
  }
  if (*(void *)(a1 + 64)) {
    hx509_private_key_free((const void **)(a1 + 64));
  }
  if (*(void *)(a1 + 56))
  {
    sub_188313640();
    free(*(void **)(a1 + 56));
  }

  if (*(void *)(a1 + 72))
  {
    unint64_t v3 = 0LL;
    do
    {
      der_free_octet_string();
      der_free_oid();
      free(*(void **)(*(void *)(a1 + 80) + 8 * v3++));
    }

    while (v3 < *(void *)(a1 + 72));
  }

  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 32));
  if (*(void *)(a1 + 88)) {
    hx509_name_free((void **)(a1 + 88));
  }
  return der_free_octet_string();
}

uint64_t hx509_cert_init_data(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7 = sub_1883135F0();
  if ((_DWORD)v7)
  {
    uint64_t v13 = v7;
    time_t v14 = "Failed to decode certificate";
    uint64_t v15 = a1;
    int v16 = v13;
LABEL_6:
    hx509_set_error_string(v15, 0, v16, v14, v9, v10, v11, v12, v18);
    return v13;
  }

  if (v19 != a3)
  {
    uint64_t v13 = 569876LL;
    sub_188313640();
    time_t v14 = "Extra data after certificate";
    uint64_t v15 = a1;
    int v16 = 569876;
    goto LABEL_6;
  }

  uint64_t v13 = hx509_cert_init(v7, (uint64_t)v20, a4, v8, v9, v10, v11, v12);
  sub_188313640();
  return v13;
}

uint64_t sub_188300BFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 96) = a2;
  *(void *)(result + 104) = a3;
  return result;
}

uint64_t _hx509_cert_set_key(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a1 + 64);
  if (*(void *)(a1 + 64)) {
    hx509_private_key_free((const void **)(a1 + 64));
  }
  void *v3 = _hx509_private_key_ref(a2);
  return 0LL;
}

uint64_t hx509_verify_init_ctx(uint64_t a1, void *a2)
{
  unint64_t v3 = calloc(1uLL, 0x28uLL);
  if (!v3) {
    return 12LL;
  }
  uint64_t v4 = v3;
  uint64_t result = 0LL;
  void v4[6] = 30;
  *a2 = v4;
  return result;
}

void hx509_verify_destroy_ctx(const void **a1)
{
  if (a1)
  {
    hx509_certs_free(a1);
    hx509_revoke_free(a1 + 4);
    a1[4] = 0LL;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }

  free(a1);
}

const void *hx509_verify_attach_anchors(const void **a1, CFTypeRef cf)
{
  if (*a1) {
    hx509_certs_free(a1);
  }
  uint64_t result = (const void *)j__heim_retain(cf);
  *a1 = result;
  return result;
}

uint64_t hx509_verify_attach_revoke(uint64_t a1, CFTypeRef cf)
{
  unint64_t v3 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32)) {
    hx509_revoke_free((CFTypeRef *)(a1 + 32));
  }
  uint64_t result = j__heim_retain(cf);
  void *v3 = result;
  return result;
}

uint64_t hx509_verify_set_time(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) |= 1u;
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_188300D60(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t hx509_verify_set_max_depth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t hx509_verify_set_proxy_certificate(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFFD | (2 * (a2 != 0));
  return result;
}

uint64_t hx509_verify_set_strict_rfc3280_verification(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFFB | (4 * (a2 != 0));
  return result;
}

uint64_t hx509_verify_ctx_f_allow_default_trustanchors(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFEF | (16 * (a2 == 0));
  return result;
}

uint64_t sub_188300DB8(uint64_t a1, void *a2)
{
  unint64_t v3 = 0LL;
  *a2 = 0LL;
  a2[1] = 0LL;
  else {
    return 569857LL;
  }
}

uint64_t sub_188300E18(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *(_DWORD **)(a1 + 16);
  if (!v3) {
    return 0LL;
  }
  if (*v3 < 2u) {
    return 0LL;
  }
  uint64_t v5 = *(unsigned int **)(a1 + 240);
  if (!v5 || *a3 >= *v5) {
    return 0LL;
  }
  while (der_heim_oid_cmp())
  {
    unint64_t v7 = *a3 + 1;
    *a3 = v7;
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 240) + 8LL);
  unint64_t v10 = (*a3)++;
  return v9 + 40 * v10;
}

void hx509_free_octet_string_list(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      der_free_octet_string();
      ++v3;
      v2 += 16LL;
    }

    while (v3 < *(void *)a1);
  }

  free(*(void **)(a1 + 8));
  *(void *)a1 = 0LL;
  *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
}

uint64_t hx509_cert_find_subjectAltName_otherName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = 0LL;
  *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  unint64_t v23 = 0LL;
  while (1)
  {
    uint64_t v7 = sub_1883010A8(*(void *)(a2 + 56), &v23, v24);
    ++v23;
    if ((_DWORD)v7)
    {
      uint64_t v20 = v7;
      if ((_DWORD)v7 == 569857) {
        return 0LL;
      }
      hx509_set_error_string(a1, 0, v7, "Error searching for SAN", v8, v9, v10, v11, v22);
      hx509_free_octet_string_list(a4);
      return v20;
    }

    if (LODWORD(v24[0])) {
      break;
    }
LABEL_11:
    sub_188313828();
  }

  uint64_t v12 = 0LL;
  unint64_t v13 = 0LL;
  while (1)
  {
    time_t v14 = realloc(*(void **)(a4 + 8), 16LL * *(void *)a4 + 16);
    if (!v14)
    {
      uint64_t v20 = 12LL;
      goto LABEL_14;
    }

    *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v14;
    uint64_t v19 = der_copy_octet_string();
    if ((_DWORD)v19) {
      break;
    }
    ++*(void *)a4;
LABEL_10:
    ++v13;
    v12 += 40LL;
    if (v13 >= LODWORD(v24[0])) {
      goto LABEL_11;
    }
  }

  uint64_t v20 = v19;
LABEL_14:
  hx509_set_error_string(a1, 0, v20, "Error adding an exra SAN to return list", v15, v16, v17, v18, v22);
  hx509_free_octet_string_list(a4);
  sub_188313828();
  return v20;
}

uint64_t sub_1883010A8(uint64_t a1, unint64_t *a2, void *a3)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  else {
    return 569857LL;
  }
}

uint64_t sub_188301104(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_18830110C(a1, *(void *)(a2 + 56), a3, a4);
}

uint64_t sub_18830110C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  unint64_t v21 = 0LL;
  uint64_t v4 = *(_DWORD **)(a2 + 16);
  if (!v4 || *v4 + 1 < 3) {
    return 0LL;
  }
  uint64_t v5 = a4;
  if (sub_188300E18(a2, (uint64_t)&unk_18A221128, &v21))
  {
    uint64_t v5 = sub_1883138AC();
    if ((_DWORD)v5) {
      return v5;
    }
    int v14 = sub_1883138FC(v22);
    if ((a3 & ~v14) != 0)
    {
      uint64_t v5 = 569872LL;
      unparse_flags(a3 & ~v14, (uint64_t)off_18C706D10, __str, 0x100uLL);
      sub_18830EFEC(a2 + 144, &v20);
      hx509_set_error_string( a1,  0,  569872,  "Key usage %s required but missing from certifiate %s",  v15,  v16,  v17,  v18,  (char)__str);
      free(v20);
      return v5;
    }

    return 0LL;
  }

  if ((_DWORD)v5)
  {
    uint64_t v5 = 569872LL;
    hx509_set_error_string( a1,  0,  569872,  "Required extension key usage missing from certifiate",  v10,  v11,  v12,  v13,  v19);
  }

  return v5;
}

uint64_t sub_188301270(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2 + 144;
  uint64_t result = sub_18830E4C8(a2 + 144, a1 + 72, (int *)&v19);
  if (!(_DWORD)result)
  {
    uint64_t result = v19;
    if (!v19)
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      v15[0] = 0LL;
      v15[1] = 0LL;
      int v8 = sub_1883013EC(a1, &v16);
      int v9 = v8;
      if (v8 != 569857 && v8) {
        return 1LL;
      }
      int v10 = sub_188300DB8(a2, v15);
      if (v10 == 569857 || !v10)
      {
        if (v9)
        {
LABEL_9:
          sub_188313954();
          sub_1883139B4();
          return v19;
        }

        if (v10)
        {
          if (a3)
          {
LABEL_13:
            unsigned int v19 = 0;
            goto LABEL_9;
          }

          if (v16)
          {
            unsigned int v19 = -1;
            goto LABEL_9;
          }
        }

        else if (v16)
        {
          unsigned int v19 = der_heim_octet_string_cmp();
          goto LABEL_9;
        }

        if (v17 && v18)
        {
          uint64_t result = der_heim_integer_cmp();
          unsigned int v19 = result;
          if ((_DWORD)result) {
            return result;
          }
          if (*(_DWORD *)v17 == 1)
          {
            uint64_t v11 = *(void *)(v17 + 8);
            if (*(_DWORD *)v11 == 4)
            {
              int v13 = *(_DWORD *)(v11 + 8);
              __int128 v14 = *(_OWORD *)(v11 + 16);
              uint64_t result = sub_18830E4C8(v6, (uint64_t)v12, (int *)&v19);
              if ((_DWORD)result) {
                return result;
              }
              uint64_t result = v19;
              if (v19) {
                return result;
              }
              goto LABEL_13;
            }
          }
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_1883013EC(uint64_t a1, void *a2)
{
  unint64_t v3 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  else {
    return 569857LL;
  }
}

uint64_t sub_188301450(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6 = realloc((void *)a2[1], 8 * *a2 + 8);
  if (v6)
  {
    a2[1] = (uint64_t)v6;
    CFTypeRef v11 = heim_retain(a3);
    uint64_t v12 = 0LL;
    uint64_t v13 = *a2;
    *(void *)(a2[1] + 8 * *a2) = v11;
    *a2 = v13 + 1;
  }

  else
  {
    uint64_t v12 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v15);
  }

  return v12;
}

void sub_1883014D4(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 0LL;
    unsigned int v3 = 1;
    do
    {
      heim_release(*(CFTypeRef *)(*(void *)(a1 + 8) + 8 * v2));
      uint64_t v2 = v3;
    }

    while (*(void *)a1 > (unint64_t)v3++);
  }

  free(*(void **)(a1 + 8));
  *(void *)a1 = 0LL;
  *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
}

uint64_t sub_18830152C( uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, const void *a6, uint64_t a7, uint64_t *a8)
{
  LODWORD(v11) = a5;
  uint64_t v16 = sub_188301450(a1, a8, a6);
  if ((_DWORD)v16) {
    return v16;
  }
  if ((_DWORD)v11) {
    unint64_t v11 = v11;
  }
  else {
    unint64_t v11 = 30LL;
  }
  int v22 = heim_retain(a6);
  while (!sub_188301810(a1, a4, (uint64_t)v22, v17, v18, v19, v20, v21))
  {
    uint64_t v43 = 0LL;
    memset(v54, 0, 24);
    uint64_t v53 = 0LL;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    memset(v46, 0, sizeof(v46));
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    uint64_t v28 = v22[7];
    if (*(_DWORD *)(v28 + 168))
    {
      *((void *)&v46[0] + 1) = v22[7];
      int v29 = 1;
    }

    else
    {
      if (sub_1883013EC(v28, v54))
      {
        uint64_t v16 = 569880LL;
        uint64_t v40 = "Subjectless certificate missing AuthKeyID";
LABEL_31:
        hx509_set_error_string(a1, 0, 569880, v40, v24, v25, v26, v27, v42);
LABEL_33:
        heim_release(v22);
        return v16;
      }

      if (!v54[0])
      {
        uint64_t v16 = 569880LL;
        sub_188313954();
        uint64_t v40 = "Subjectless certificate missing keyIdentifier inside AuthKeyID";
        goto LABEL_31;
      }

      *(void *)&__int128 v47 = v54[0];
      int v29 = 16;
    }

    *(void *)&__int128 v49 = a8;
    LODWORD(v46[0]) = v29 | 0x20000;
    if (a7)
    {
      *((void *)&v51 + 1) = a3;
      LODWORD(v46[0]) = v29 | 0x220000;
      LODWORD(v46[0]) &= ~0x200000u;
    }

    if (!a4 || hx509_certs_find(a1, a4, (int *)v46, &v43, v24, v25, v26, v27))
    {
      sub_188313954();
      if (hx509_name_from_Name(v22[7] + 144LL, &v45)
        || (int v35 = hx509_name_to_string(v45, &v44), hx509_name_free(&v45), v35))
      {
        hx509_clear_error_string(a1);
        uint64_t v16 = 569867LL;
      }

      else
      {
        uint64_t v16 = 569867LL;
        hx509_set_error_string( a1,  0,  569867,  "Failed to find issuer for certificate with subject: '%s'",  v36,  v37,  v38,  v39,  (char)v44);
        free(v44);
      }

      goto LABEL_33;
    }

BOOL sub_188301810( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0LL;
  }
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  LODWORD(v11) = 0x8000;
  *(void *)&__int128 v12 = *(void *)(a3 + 56);
  int v8 = hx509_certs_find(a1, a2, (int *)&v11, &v10, a5, a6, a7, a8);
  if (!v8) {
    heim_release(v10);
  }
  return v8 == 0;
}

uint64_t sub_188301888(uint64_t a1, uint64_t a2)
{
  uint64_t result = der_heim_oid_cmp();
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a1 + 16))
    {
      if (v5) {
        return der_heim_octet_string_cmp();
      }
      else {
        return 1LL;
      }
    }

    else if (v5)
    {
      return 0xFFFFFFFFLL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1883018E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = der_heim_bit_string_cmp();
  if (!(_DWORD)result)
  {
    uint64_t result = sub_188301888(a1 + 248, a2 + 248);
    if (!(_DWORD)result) {
      return der_heim_octet_string_cmp();
    }
  }

  return result;
}

uint64_t hx509_cert_cmp(uint64_t a1, uint64_t a2)
{
  return sub_1883018E0(*(void *)(a1 + 56), *(void *)(a2 + 56));
}

uint64_t hx509_cert_get_issuer(uint64_t a1, void **a2)
{
  return hx509_name_from_Name(*(void *)(a1 + 56) + 72LL, a2);
}

uint64_t hx509_cert_get_subject(uint64_t a1, void **a2)
{
  return hx509_name_from_Name(*(void *)(a1 + 56) + 144LL, a2);
}

uint64_t hx509_cert_get_base_subject(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  if (v6) {
    return hx509_name_copy(a1, v6, a3);
  }
  hx509_set_error_string( a1,  0,  569882,  "Proxy certificate have not been canonicalize yet, no base name",  v8,  v9,  v10,  v11,  v12);
  return 569882LL;
}

uint64_t sub_1883019F8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v11[0] = 0LL;
  if (a3)
  {
    *a3 = 0u;
    a3[1] = 0u;
  }

  uint64_t v5 = sub_188300E18(a2, (uint64_t)&unk_18A221A88, v11);
  if (!v5)
  {
    uint64_t v8 = 569857LL;
    goto LABEL_7;
  }

  uint64_t v6 = v5;
  uint64_t v7 = sub_188313EE8();
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
LABEL_7:
    hx509_clear_error_string(a1);
    return v8;
  }

  if (v11[1] == *(void *)(v6 + 24))
  {
    if (a3)
    {
      uint64_t v8 = 0LL;
      __int128 v10 = v13;
      *a3 = v12;
      a3[1] = v10;
    }

    else
    {
      sub_188313F38();
      return 0LL;
    }
  }

  else
  {
    sub_188313F38();
    hx509_clear_error_string(a1);
    return 569876LL;
  }

  return v8;
}

uint64_t hx509_cert_get_serialnumber()
{
  return der_copy_heim_integer();
}

uint64_t hx509_cert_get_notBefore(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  else {
    return *(void *)(v1 + 120);
  }
}

uint64_t sub_188301B10(uint64_t a1)
{
  else {
    return *(void *)(a1 + 8);
  }
}

uint64_t hx509_cert_get_notAfter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  else {
    return *(void *)(v1 + 136);
  }
}

uint64_t hx509_cert_get_SPKI(uint64_t a1)
{
  uint64_t v6 = copy_SubjectPublicKeyInfo();
  if ((_DWORD)v6) {
    hx509_set_error_string(a1, 0, v6, "Failed to copy SPKI", v2, v3, v4, v5, v8);
  }
  return v6;
}

uint64_t sub_188301BA4(uint64_t a1)
{
  uint64_t v6 = copy_AlgorithmIdentifier();
  if ((_DWORD)v6) {
    hx509_set_error_string(a1, 0, v6, "Failed to copy SPKI AlgorithmIdentifier", v2, v3, v4, v5, v8);
  }
  return v6;
}

uint64_t _hx509_cert_private_key(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_188301BFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return sub_188307424(result);
  }
  return result;
}

uint64_t sub_188301C0C( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0LL;
  a5[1] = 0LL;
  uint64_t v8 = *(void *)(a4 + 64);
  if (v8) {
    return sub_188306D3C(a1, a2, a3, v8, a5, a6, a7, a8);
  }
  hx509_set_error_string(a1, 0, 569865, "Private key missing", (uint64_t)a5, a6, a7, a8, vars0);
  return 569865LL;
}

uint64_t sub_188301C50(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_188306BF0(a1, a2, *(void *)(a3 + 56), a4, a5);
}

void *sub_188301C58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (void *)heim_uniq_alloc(0x28uLL, (uint64_t)"hx509-evaluate", (uint64_t)sub_188301CAC, a4, a5, a6, a7, a8);
  if (v8)
  {
    CFMutableArrayRef v9 = heim_array_create();
    v8[4] = v9;
    if (!v9)
    {
      heim_release(v8);
      return 0LL;
    }
  }

  return v8;
}

void sub_188301CAC(uint64_t a1)
{
}

CFIndex hx509_evaluate_get_length(uint64_t a1)
{
  return heim_array_get_length(*(CFArrayRef *)(a1 + 32));
}

const void *hx509_evaluate_get_cert(uint64_t a1, CFIndex a2)
{
  return heim_array_copy_value(*(const __CFArray **)(a1 + 32), a2);
}

const void *hx509_evaluate_get_ta(uint64_t a1)
{
  uint64_t result = (const void *)heim_array_get_length(*(CFArrayRef *)(a1 + 32));
  if (result) {
    return heim_array_copy_value(*(const __CFArray **)(a1 + 32), (CFIndex)result - 1);
  }
  return result;
}

uint64_t hx509_verify_path(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  return sub_188301D10(a1, a2, a3, a4, 0LL);
}

uint64_t sub_188301D10(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v152 = 0LL;
  __int128 v153 = &v152;
  uint64_t v154 = 0x2000000000LL;
  uint64_t v149 = 0LL;
  __int128 v150 = &v149;
  uint64_t v151 = 0x2000000000LL;
  if (a5) {
    *a5 = 0LL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  v153[3] = (uint64_t)Mutable;
  if (!Mutable) {
    heim_abort("out of memory:certs != NULL", v11, v12, v13, v14, v15, v16, v17, v138);
  }
  uint64_t inited = 569878LL;
  SecCertificateRef v19 = sub_188302AA8(a1, (uint64_t)a3);
  v150[3] = (uint64_t)v19;
  CFArrayAppendValue((CFMutableArrayRef)v153[3], v19);
  CFRelease((CFTypeRef)v150[3]);
  v148[0] = MEMORY[0x1895F87A8];
  v148[1] = 0x40000000LL;
  v148[2] = sub_188302B34;
  v148[3] = &unk_18A21E3B8;
  v148[4] = &v149;
  v148[5] = &v152;
  v148[6] = a1;
  hx509_certs_iter(a1, a4, (uint64_t)v148, v20, v21, v22, v23, v24);
  SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
  SecTrustRef trust = 0LL;
  OSStatus v26 = SecTrustCreateWithCertificates((CFTypeRef)v153[3], BasicX509, &trust);
  CFRelease(BasicX509);
  CFRelease((CFTypeRef)v153[3]);
  if (v26)
  {
    hx509_set_error_string(a1, 0, 569867, "Failed to create trust", v27, v28, v29, v30, v138);
    CFRelease(trust);
  }

  int v31 = MEMORY[0x1895C13F8](trust, &v146);
  if (v31)
  {
    uint64_t inited = 569867LL;
    hx509_set_error_string(a1, 0, 569867, "Failed to validate trust: %d", v32, v33, v34, v35, v31);
    CFRelease(trust);
    goto LABEL_135;
  }

  if (v146 != 1 && v146 != 4)
  {
    hx509_set_error_string(a1, 0, 569867, "Failed to validate trust", v32, v33, v34, v35, v138);
    CFRelease(trust);
    if (qword_18C7075F8 != -1) {
      dispatch_once(&qword_18C7075F8, &unk_18A21E3F8);
    }
    if (!byte_18C707600)
    {
      uint64_t inited = 569867LL;
      goto LABEL_135;
    }

    uint64_t v156 = 0LL;
    __int128 v157 = 0u;
    __int128 v158 = 0u;
    uint64_t v159 = 0LL;
    if (a5) {
      *a5 = 0LL;
    }
    unint64_t v161 = 0LL;
    uint64_t v162 = 0LL;
    if ((*(_BYTE *)(a2 + 8) & 1) == 0) {
      *(void *)(a2 + 16) = time(0LL);
    }
    uint64_t v66 = *(const void **)a2;
    if (*(void *)a2 || (uint64_t v66 = *(const void **)(a1 + 48)) != 0LL && (*(_BYTE *)(a2 + 8) & 0x10) == 0)
    {
      __int128 v67 = (const void *)j__heim_retain(v66);
      uint64_t v156 = v67;
    }

    else
    {
      uint64_t v68 = hx509_certs_init(a1, "MEMORY:no-TA", 0LL, 0LL, &v156);
      if ((_DWORD)v68) {
        goto LABEL_130;
      }
      __int128 v67 = v156;
    }

    uint64_t v68 = sub_18830152C(a1, 0, *(void *)(a2 + 16), (uint64_t)v67, *(_DWORD *)(a2 + 24), a3, a4, (uint64_t *)&v161);
    if ((_DWORD)v68)
    {
LABEL_130:
      uint64_t v102 = 0LL;
      uint64_t v91 = 0LL;
      uint64_t inited = v68;
      goto LABEL_131;
    }

    if (!v161) {
      goto LABEL_136;
    }
    int __ptr = 0;
    int v144 = 0;
    unint64_t v76 = 0LL;
    unsigned int v77 = ((*(_DWORD *)(a2 + 8) >> 1) & 1) == 0;
    uint64_t v140 = a3 + 11;
    while (1)
    {
      uint64_t v78 = *(void *)(v162 + 8 * v76);
      uint64_t v79 = *(void *)(v78 + 56);
      if (!v77) {
        break;
      }
      if (v77 == 1) {
        goto LABEL_38;
      }
      unint64_t v80 = v76;
      uint64_t v68 = sub_18830110C(a1, v79, 32, (*(_DWORD *)(a2 + 8) >> 2) & 1);
      if ((_DWORD)v68)
      {
        uint64_t v114 = v68;
        __int128 v115 = "Key usage missing from CA certificate";
        uint64_t v116 = a1;
        char v117 = 1;
        goto LABEL_154;
      }

      if (v80 + 1 != v161)
      {
        uint64_t v68 = sub_188303E08(a1, v79, v155);
        if (LODWORD(v155[0])) {
          int v82 = __ptr + 1;
        }
        else {
          int v82 = __ptr;
        }
        int __ptr = v82;
        if ((_DWORD)v68) {
          goto LABEL_130;
        }
        unsigned int v77 = 2;
LABEL_65:
        unint64_t v76 = v80;
        goto LABEL_66;
      }

      unint64_t v76 = v80;
      unsigned int v77 = 2;
LABEL_66:
      unint64_t v164 = 0LL;
      uint64_t v84 = *(_DWORD **)(v79 + 16);
      if (v84 && *v84 + 1 >= 3)
      {
        unint64_t v85 = v76;
        uint64_t v68 = sub_188300E18(v79, (uint64_t)&unk_18A221258, &v164);
        if (v68)
        {
          uint64_t v86 = sub_1883139D8();
          if ((_DWORD)v86)
          {
            uint64_t inited = v86;
            goto LABEL_207;
          }

          if (v77 == 2)
          {
            if (!*(void *)&v155[0] || !**(_DWORD **)&v155[0])
            {
              uint64_t inited = 569859LL;
              goto LABEL_206;
            }

            if (*((void *)&v155[0] + 1) && ~(__ptr + (uint64_t)v144) + v85 > **((_DWORD **)&v155[0] + 1))
            {
              uint64_t inited = 569860LL;
LABEL_206:
              sub_188313A28();
LABEL_207:
              uint64_t v102 = 0LL;
              uint64_t v91 = 0LL;
              goto LABEL_131;
            }
          }

          else if (!v77 && *(void *)&v155[0] && **(_DWORD **)&v155[0])
          {
            uint64_t inited = 569875LL;
            goto LABEL_206;
          }

          uint64_t v68 = sub_188313A28();
          unint64_t v76 = v85;
        }

        else
        {
          unint64_t v76 = v85;
          if (v77 >= 2)
          {
            uint64_t inited = 569857LL;
            hx509_set_error_string( a1,  0,  569857,  "basicConstraints missing from CA certifiacte %s",  v133,  v134,  v135,  v136,  (char)v163);
            free(v163);
            goto LABEL_207;
          }
        }
      }

      ++v76;
      unint64_t v87 = v161;
      if (v76 != v161 || (*(_BYTE *)(a2 + 8) & 8) != 0)
      {
        else {
          uint64_t v88 = *(void *)(v79 + 120);
        }
        uint64_t v89 = *(void *)(a2 + 16);
        if (v88 > v89)
        {
          hx509_clear_error_string(a1);
          uint64_t v102 = 0LL;
          uint64_t v91 = 0LL;
          uint64_t inited = 569863LL;
          goto LABEL_131;
        }

        uint64_t v90 = (*(_DWORD *)(v79 + 128) - 1) > 1 ? 0LL : *(void *)(v79 + 136);
        if (v90 < v89)
        {
          hx509_clear_error_string(a1);
          uint64_t v102 = 0LL;
          uint64_t v91 = 0LL;
          uint64_t inited = 569864LL;
          goto LABEL_131;
        }
      }

      if (v77 == 1)
      {
        unsigned int v77 = 2;
      }

      else if (!v77)
      {
        ++v144;
      }

      if (v76 >= v161)
      {
        if (v161)
        {
          uint64_t v91 = 0LL;
          __ptra = 0LL;
          while (1)
          {
            unint64_t v141 = v87 - 1;
            uint64_t v145 = *(void *)(*(void *)(v162 + 8 * (v87 - 1)) + 56LL);
            uint64_t v68 = sub_188303E08(a1, v145, &v163);
            if ((_DWORD)v68)
            {
LABEL_188:
              uint64_t inited = v68;
              goto LABEL_204;
            }

            BOOL v92 = (_DWORD)v163 && v87 == v161;
            if (!v92 && v91) {
              break;
            }
LABEL_114:
            unint64_t v164 = 0LL;
            v155[0] = 0uLL;
            uint64_t v68 = sub_188300E18(v145, (uint64_t)&unk_18A2212B8, &v164);
            if (v68)
            {
              uint64_t v68 = sub_188313A38();
              if ((_DWORD)v68)
              {
                uint64_t v98 = v68;
                if ((_DWORD)v68 != 569857)
                {
                  hx509_set_error_string(a1, 0, v68, "Failed getting NameConstraints", v72, v73, v74, v75, v139);
                  uint64_t inited = v98;
                  goto LABEL_204;
                }
              }

              else
              {
                if (!v141)
                {
                  uint64_t inited = 569868LL;
                  hx509_set_error_string(a1, 0, 569868, "Not a CA and have NameConstraints", v72, v73, v74, v75, v139);
LABEL_213:
                  sub_188313A58();
                  goto LABEL_204;
                }

                uint64_t v99 = (uint64_t *)realloc(__ptra, 16 * v91 + 16);
                if (!v99)
                {
                  hx509_clear_error_string(a1);
                  uint64_t inited = 12LL;
                  goto LABEL_213;
                }

                uint64_t v100 = v99;
                uint64_t v101 = sub_188313A68();
                if ((_DWORD)v101)
                {
                  uint64_t v137 = v101;
                  hx509_clear_error_string(a1);
                  __ptra = v100;
                  uint64_t inited = v137;
                  goto LABEL_213;
                }

                ++v91;
                uint64_t v68 = sub_188313A58();
                __ptra = v100;
              }
            }

            unint64_t v87 = v141;
            if (!v141) {
              goto LABEL_137;
            }
          }

          char v93 = __ptra + 1;
          uint64_t v94 = v91;
          while (1)
          {
            uint64_t v95 = *(v93 - 1);
            if (v95)
            {
              LODWORD(v155[0]) = *(_DWORD *)v95;
              *((void *)&v155[0] + 1) = *(void *)(v95 + 8);
              uint64_t v96 = sub_188303E94((unsigned int *)v155, v145, v165);
              if ((_DWORD)v96) {
                goto LABEL_158;
              }
              if (!LODWORD(v165[0]) && *(_DWORD *)(v145 + 168)) {
                break;
              }
            }

            uint64_t v97 = *v93;
            if (*v93)
            {
              LODWORD(v155[0]) = *(_DWORD *)v97;
              *((void *)&v155[0] + 1) = *(void *)(v97 + 8);
              uint64_t v96 = sub_188303E94((unsigned int *)v155, v145, v165);
              if ((_DWORD)v96)
              {
LABEL_158:
                uint64_t v118 = v96;
                hx509_clear_error_string(a1);
                uint64_t inited = v118;
                goto LABEL_204;
              }

              if (LODWORD(v165[0]))
              {
                uint64_t inited = 569868LL;
                timeval v121 = "Error verify constraints, certificate included in excluded subtree";
                goto LABEL_202;
              }
            }

            v93 += 2;
            if (!--v94) {
              goto LABEL_114;
            }
          }

          uint64_t inited = 569868LL;
          timeval v121 = "Error verify constraints, certificate didn't match any permitted subtree";
LABEL_202:
          uint64_t v128 = a1;
          char v129 = 0;
LABEL_203:
          hx509_set_error_string(v128, v129, inited, v121, v72, v73, v74, v75, v139);
LABEL_204:
          uint64_t v102 = (char *)__ptra;
LABEL_131:
          hx509_certs_free(&v156);
          sub_1883133BC();
          if (v91)
          {
            int v103 = v102;
            do
            {
              sub_188313A58();
              v103 += 16;
              --v91;
            }

            while (v91);
          }

          free(v102);
          sub_1883014D4((uint64_t)&v161);
          goto LABEL_135;
        }

LABEL_136:
        uint64_t v91 = 0LL;
        __ptra = 0LL;
LABEL_137:
        if (*(void *)(a2 + 32))
        {
          uint64_t inited = hx509_certs_init(a1, "MEMORY:revoke-certs", 0LL, 0LL, v155);
          if ((_DWORD)inited) {
            goto LABEL_204;
          }
          if (v161)
          {
            uint64_t v110 = 0LL;
            while (1)
            {
              uint64_t v111 = hx509_certs_add( a1,  *(uint64_t *)&v155[0],  *(void *)(v162 + 8 * v110),  v105,  v106,  v107,  v108,  v109);
              if ((_DWORD)v111) {
                break;
              }
              if (++v110 >= v161) {
                goto LABEL_143;
              }
            }

LABEL_147:
            uint64_t inited = v111;
            goto LABEL_148;
          }

LABEL_143:
          uint64_t inited = hx509_certs_merge(a1, *(uint64_t *)&v155[0], a4, v105, v106, v107, v108, v109);
          if ((_DWORD)inited)
          {
LABEL_148:
            hx509_certs_free((const void **)v155);
            goto LABEL_204;
          }

          unint64_t v112 = 0LL;
          while (v112 < v161 - 1)
          {
            unint64_t v113 = v112 + 1;
            uint64_t v111 = hx509_revoke_verify( a1,  *(void **)(a2 + 32),  *(uint64_t *)&v155[0],  *(void *)(a2 + 16),  *(void *)(v162 + 8 * v112),  *(void *)(v162 + 8 * v112 + 8));
            unint64_t v112 = v113;
            if ((_DWORD)v111) {
              goto LABEL_147;
            }
          }

          hx509_certs_free((const void **)v155);
        }

        unint64_t v122 = v161;
        if (!v161)
        {
LABEL_182:
          if (a5)
          {
            timeval v126 = sub_188301C58(v68, v69, v70, v71, v72, v73, v74, v75);
            *a5 = v126;
            if (!v126)
            {
              uint64_t inited = 12LL;
              goto LABEL_204;
            }

            if (v161)
            {
              for (unint64_t i = 0LL; i < v161; ++i)
                heim_array_append_value(*((__CFArray **)*a5 + 4), *(const void **)(v162 + 8 * i));
            }
          }

          uint64_t inited = 0LL;
          goto LABEL_204;
        }

        while (2)
        {
          uint64_t v123 = *(void *)(v162 + 8 * v122 - 8);
          uint64_t v124 = *(void *)(v123 + 56);
          if (v122 == v161)
          {
            uint64_t v68 = sub_188303E08(a1, *(void *)(v123 + 56), v155);
            if ((_DWORD)v68) {
              goto LABEL_188;
            }
            if (!LODWORD(v155[0]))
            {
LABEL_181:
              if (!--v122) {
                goto LABEL_182;
              }
              continue;
            }
          }

          else
          {
            uint64_t v123 = *(void *)(v162 + 8 * v122);
          }

          break;
        }

        uint64_t v68 = sub_188302C20(a1, v123, v124 + 248, v124, (void *)(v124 + 272), v73, v74, v75);
        if ((_DWORD)v68)
        {
          uint64_t inited = v68;
          timeval v121 = "Failed to verify signature of certificate";
          uint64_t v128 = a1;
          char v129 = 1;
          goto LABEL_203;
        }

        if (v122 == 1) {
          goto LABEL_182;
        }
        if ((*(_BYTE *)(a2 + 8) & 0x20) == 0)
        {
          uint64_t v125 = (*(_DWORD *)(v124 + 112) - 1) > 1 ? 0LL : *(void *)(v124 + 120);
          uint64_t v68 = sub_1883067E0(a1, v124 + 248, v125);
          if ((_DWORD)v68) {
            goto LABEL_188;
          }
        }

        goto LABEL_181;
      }
    }

    unint64_t v80 = v76;
    uint64_t v68 = sub_1883019F8(a1, *(void *)(v78 + 56), v155);
    if (!(_DWORD)v68)
    {
      if (*(void *)&v155[0] && v80 > **(_DWORD **)&v155[0])
      {
        sub_188313F38();
        uint64_t inited = 569871LL;
        uint64_t v119 = "Proxy certificate chain longer then allowed";
        goto LABEL_197;
      }

      sub_188313F38();
      v165[0] = 0LL;
      if (sub_188300E18(v79, (uint64_t)&unk_18A2213D8, v165))
      {
        uint64_t inited = 569877LL;
        uint64_t v119 = "Proxy certificate have explicity forbidden subjectAltName";
LABEL_197:
        uint64_t v130 = a1;
        int v131 = inited;
        goto LABEL_200;
      }

      v165[0] = 0LL;
      if (sub_188300E18(v79, (uint64_t)&unk_18A2213E8, v165))
      {
        uint64_t inited = 569877LL;
        uint64_t v119 = "Proxy certificate have explicity forbidden issuerAltName";
        goto LABEL_197;
      }

      if (v144)
      {
        uint64_t v68 = sub_18830E4C8((uint64_t)&v157, v79 + 144, &v160);
        if ((_DWORD)v68) {
          goto LABEL_165;
        }
        if (v160)
        {
          uint64_t v119 = "Base proxy name not right";
LABEL_199:
          uint64_t v130 = a1;
          int v131 = 569878;
LABEL_200:
          hx509_set_error_string(v130, 0, v131, v119, v72, v73, v74, v75, v139);
          goto LABEL_207;
        }
      }

      sub_1883133BC();
      uint64_t v83 = hx509_name_to_Name_0();
      if ((_DWORD)v83)
      {
        uint64_t v120 = v83;
        hx509_clear_error_string(a1);
LABEL_194:
        uint64_t inited = v120;
        goto LABEL_207;
      }

      if (DWORD2(v158) < 2 || *(_DWORD *)(v159 + 16 * (DWORD2(v158) - 1LL)) > 1u || der_heim_oid_cmp())
      {
        uint64_t v119 = "Proxy name too short or does not have Common name at the top";
        goto LABEL_199;
      }

      sub_18831335C();
      --DWORD2(v158);
      uint64_t v68 = sub_18830E4C8((uint64_t)&v157, v79 + 72, &v160);
      if ((_DWORD)v68)
      {
LABEL_165:
        uint64_t v120 = v68;
        hx509_set_error_string(a1, 0, v68, "Out of memory", v72, v73, v74, v75, v139);
        goto LABEL_194;
      }

      if (v160)
      {
        uint64_t v119 = "Proxy issuer name not as expected";
        goto LABEL_199;
      }

      unsigned int v77 = 0;
      goto LABEL_65;
    }

    unint64_t v76 = v80;
LABEL_38:
    if (v144)
    {
      unint64_t v80 = v76;
      uint64_t v81 = sub_18830E4C8((uint64_t)&v157, v79 + 144, &v160);
      if ((_DWORD)v81)
      {
        uint64_t v114 = v81;
        __int128 v115 = "out of memory";
        uint64_t v116 = a1;
        char v117 = 0;
LABEL_154:
        hx509_set_error_string(v116, v117, v114, v115, v72, v73, v74, v75, v139);
        goto LABEL_157;
      }

      if (v160)
      {
        hx509_clear_error_string(a1);
        goto LABEL_207;
      }

      if (*v140) {
        hx509_name_free(v140);
      }
      uint64_t v68 = hx509_name_from_Name((uint64_t)&v157, v140);
      if ((_DWORD)v68)
      {
        uint64_t v114 = v68;
        hx509_clear_error_string(a1);
LABEL_157:
        uint64_t v102 = 0LL;
        uint64_t v91 = 0LL;
        uint64_t inited = v114;
        goto LABEL_131;
      }

      unsigned int v77 = 1;
      goto LABEL_65;
    }

    unsigned int v77 = 1;
    goto LABEL_66;
  }

  if (!a5) {
    goto LABEL_18;
  }
  CFIndex CertificateCount = SecTrustGetCertificateCount(trust);
  uint64_t v44 = sub_188301C58(CertificateCount, v37, v38, v39, v40, v41, v42, v43);
  *a5 = v44;
  if (!v44)
  {
    CFRelease(trust);
    uint64_t inited = 12LL;
    goto LABEL_135;
  }

  if (CertificateCount >= 1)
  {
    CFIndex v45 = 0LL;
    while (1)
    {
      CertificateAtIndex = SecTrustGetCertificateAtIndex(trust, v45);
      if (!CertificateAtIndex) {
        heim_abort( "SecTrustGetCertificateAtIndex didn't return a cert:tc != NULL",  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v138);
      }
      uint64_t v54 = SecCertificateCopyData(CertificateAtIndex);
      if (!v54) {
        heim_abort("cert w/o data ?:data != NULL", v55, v56, v57, v58, v59, v60, v61, v138);
      }
      __int128 v62 = v54;
      *(void *)&__int128 v157 = 0LL;
      BytePtr = CFDataGetBytePtr(v54);
      CFIndex Length = CFDataGetLength(v62);
      uint64_t inited = hx509_cert_init_data(a1, (uint64_t)BytePtr, Length, (CFTypeRef *)&v157);
      CFRelease(v62);
      if ((_DWORD)inited) {
        break;
      }
      __int128 v65 = (const void *)v157;
      heim_array_append_value(*((__CFArray **)*a5 + 4), (const void *)v157);
      heim_release(v65);
      if (CertificateCount == ++v45) {
        goto LABEL_18;
      }
    }

    CFRelease(trust);
    heim_release(*a5);
    *a5 = 0LL;
  }

  else
  {
LABEL_18:
    CFRelease(trust);
    uint64_t inited = 0LL;
  }

LABEL_135:
  _Block_object_dispose(&v149, 8);
  _Block_object_dispose(&v152, 8);
  return inited;
}

SecCertificateRef sub_188302AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v8;
  uint64_t v4 = CFDataCreateWithBytesNoCopy(0LL, v8, v7, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (v4)
  {
    uint64_t v5 = v4;
    SecCertificateRef v2 = SecCertificateCreateWithData(0LL, v4);
    CFRelease(v5);
  }

  else
  {
    SecCertificateRef v2 = 0LL;
  }

  free(v3);
  return v2;
}

uint64_t sub_188302B34(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = sub_188302AA8(a1[6], a2);
  CFArrayAppendValue( *(CFMutableArrayRef *)(*(void *)(a1[5] + 8LL) + 24LL),  *(const void **)(*(void *)(a1[4] + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(a1[4] + 8LL) + 24LL));
  return 0LL;
}

void sub_188302B90()
{
  time_t v0 = (const __CFBoolean *)CFPreferencesCopyValue( @"AllowHX509Validation",  @"org.h5l.hx509",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      byte_18C707600 = CFBooleanGetValue(v1) != 0;
    }
    CFRelease(v1);
  }

uint64_t sub_188302C20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*a5 & 7LL) != 0)
  {
    uint64_t v8 = 569925LL;
    hx509_set_error_string(a1, 0, 569925, "signature not multiple of 8 bits", (uint64_t)a5, a6, a7, a8, v11[0]);
  }

  else
  {
    uint64_t v9 = a5[1];
    v11[0] = *a5 >> 3;
    v11[1] = v9;
    return hx509_verify_signature_0(a1, a2, a3, a4, (uint64_t)v11);
  }

  return v8;
}

uint64_t hx509_verify_hostname( uint64_t a1, uint64_t a2, char a3, uint64_t a4, const char *a5, uint64_t a6, int a7)
{
  if (a6 && a7 < 1) {
    return 22LL;
  }
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  unint64_t v23 = 0LL;
  while (1)
  {
    int v11 = sub_1883010A8(*(void *)(a2 + 56), &v23, &v24);
    if (v11) {
      break;
    }
    unint64_t v12 = v24;
    if ((_DWORD)v24)
    {
      uint64_t v13 = 0LL;
      for (unint64_t i = 0LL; i < v12; ++i)
      {
        if (*(_DWORD *)(v25 + v13) == 3)
        {
          strlen(a5);
          if (!der_printable_string_cmp())
          {
            sub_188313828();
            return 0LL;
          }

          unint64_t v12 = v24;
        }

        v13 += 40LL;
      }
    }

    sub_188313828();
  }

  if (v11 != 569857) {
    return 569968LL;
  }
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(unsigned int *)(v15 + 168);
  if (!(_DWORD)v16)
  {
    unsigned int v21 = 0;
    goto LABEL_33;
  }

  while (1)
  {
    --v16;
    uint64_t v17 = *(void *)(v15 + 176);
    if (*(_DWORD *)(v17 + 16 * v16)) {
      break;
    }
LABEL_20:
    if (!v16)
    {
      unsigned int v21 = 0;
      goto LABEL_33;
    }
  }

  uint64_t v18 = 0LL;
  unint64_t v19 = 0LL;
  while (1)
  {
    uint64_t v20 = *(void *)(v17 + 16 * v16 + 8);
    ++v19;
    uint64_t v17 = *(void *)(v15 + 176);
    v18 += 40LL;
  }

  int v22 = *(_DWORD *)(v20 + v18 + 16);
  switch(v22)
  {
    case 1:
      strlen(a5);
      uint64_t result = der_ia5_string_cmp();
      goto LABEL_30;
    case 5:
      uint64_t result = strcasecmp(*(const char **)(v20 + v18 + 24), a5);
LABEL_30:
      unsigned int v21 = 569870;
      if (!(_DWORD)result) {
        return result;
      }
      goto LABEL_33;
    case 3:
      strlen(a5);
      uint64_t result = der_printable_string_cmp();
      goto LABEL_30;
  }

  unsigned int v21 = 569870;
LABEL_33:
  if ((a3 & 1) != 0) {
    return v21;
  }
  else {
    return 569870LL;
  }
}

uint64_t sub_188302EC8(uint64_t a1, uint64_t a2)
{
  if (hx509_cert_get_attribute(a2)) {
    return 0LL;
  }
  uint64_t v5 = realloc(*(void **)(a2 + 80), 8LL * *(void *)(a2 + 72) + 8);
  if (v5)
  {
    *(void *)(a2 + 80) = v5;
    uint64_t v6 = malloc(0x20uLL);
    if (v6)
    {
      CFIndex v7 = v6;
      der_copy_octet_string();
      der_copy_oid();
      uint64_t result = 0LL;
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(*(void *)(a2 + 80) + 8 * vinit_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v7;
      *(void *)(a2 + 72) = v8 + 1;
      return result;
    }
  }

  else
  {
    hx509_clear_error_string(a1);
  }

  return 12LL;
}

uint64_t hx509_cert_get_attribute(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  while (der_heim_oid_cmp())
  {
  }

  return *(void *)(*(void *)(a1 + 80) + 8 * v2);
}

uint64_t hx509_cert_set_friendly_name(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

_BYTE *hx509_cert_get_friendly_name(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result)
  {
    if (hx509_cert_get_attribute(a1))
    {
      if (!sub_1882FE5E8())
      {
        if ((_DWORD)v10 == 1)
        {
          uint64_t v4 = v11;
          unint64_t v5 = *v11;
          uint64_t v6 = malloc(*v11 + 1);
          *(void *)uint64_t v3 = v6;
          if (v6)
          {
            unint64_t v7 = 0LL;
            if (v5)
            {
              do
              {
                unsigned int v8 = *(unsigned __int16 *)(v4[1] + 2 * v7);
                if (v8 >= 0x100) {
                  LOBYTE(vinit_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 88;
                }
                *(_BYTE *)(*(void *)v3 + v7++) = v8;
                uint64_t v4 = v11;
              }

              while (v7 < *v11);
              uint64_t v6 = *(_BYTE **)v3;
            }

            v6[v7] = 0;
            sub_1882FE608();
            return *(_BYTE **)v3;
          }
        }

        sub_1882FE608();
      }
    }

    else if (!hx509_name_from_Name(*(void *)(a1 + 56) + 144LL, &v10))
    {
      int v9 = hx509_name_to_string(v10, v3);
      hx509_name_free(&v10);
      if (!v9) {
        return *(_BYTE **)v3;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t hx509_cert_get_persistent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40)) {
    return der_copy_octet_string();
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 216LL);
  v6[0] = *(void *)(*(void *)(a1 + 56) + 208LL) >> 3;
  v6[1] = v4;
  unint64_t v5 = hx509_signature_sha1();
  uint64_t result = sub_188306A9C(0LL, 0LL, (uint64_t)v5, (uint64_t)v6, 0LL, a2);
  if (!(_DWORD)result)
  {
    der_free_octet_string();
    der_copy_octet_string();
    return 0LL;
  }

  return result;
}

double sub_1883031CC(uint64_t a1)
{
  *(void *)(a1 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t hx509_query_alloc(uint64_t a1, void *a2)
{
  uint64_t v3 = calloc(1uLL, 0x88uLL);
  *a2 = v3;
  if (v3) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

_DWORD *hx509_query_match_option(_DWORD *result, int a2)
{
  return result;
}

uint64_t hx509_query_match_issuer_serial(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    der_free_heim_integer();
    free(*(void **)(a1 + 24));
  }

  uint64_t v2 = malloc(0x18uLL);
  *(void *)(a1 + 24) = v2;
  if (!v2) {
    return 12LL;
  }
  uint64_t v3 = der_copy_heim_integer();
  if ((_DWORD)v3)
  {
    uint64_t v4 = v3;
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
    return v4;
  }

  if (*(void *)(a1 + 48))
  {
    sub_1883133BC();
    free(*(void **)(a1 + 48));
  }

  unint64_t v5 = malloc(0x28uLL);
  *(void *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v5;
  if (!v5) {
    return 12LL;
  }
  uint64_t v4 = hx509_name_to_Name_0();
  if ((_DWORD)v4)
  {
    free(*(void **)(a1 + 48));
    *(void *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  }

  else
  {
    *(_DWORD *)a1 |= 6u;
  }

  return v4;
}

uint64_t hx509_query_match_friendly_name(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4) {
    free(v4);
  }
  unint64_t v5 = strdup(__s1);
  *(void *)(a1 + 72) = v5;
  if (!v5) {
    return 12LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)a1 |= 0x40000u;
  return result;
}

uint64_t hx509_query_match_eku(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!a2)
  {
    if (v3)
    {
      der_free_oid();
      free(*(void **)(a1 + 112));
      *(void *)(a1 + 112) = 0LL;
    }

    unsigned int v4 = *(_DWORD *)a1 & 0xFFBFFFFF;
    goto LABEL_11;
  }

  if (v3)
  {
    der_free_oid();
  }

  else
  {
    unint64_t v5 = calloc(1uLL, 0x10uLL);
    *(void *)(a1 + 112) = v5;
    if (!v5) {
      return 12LL;
    }
  }

  uint64_t v6 = der_copy_oid();
  if (!(_DWORD)v6)
  {
    unsigned int v4 = *(_DWORD *)a1 | 0x400000;
LABEL_11:
    uint64_t v7 = 0LL;
    *(_DWORD *)a1 = v4;
    return v7;
  }

  uint64_t v7 = v6;
  free(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0LL;
  return v7;
}

uint64_t hx509_query_match_cmp_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFF7FFFF | ((a2 != 0) << 19);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 8init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a3;
  return 0LL;
}

uint64_t hx509_query_match_persistent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFEFFFFFF | ((a2 != 0) << 24);
  *(void *)(a1 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a2;
  return 0LL;
}

void hx509_query_free(int a1, void **a2)
{
  if (a2)
  {
    if (a2[3])
    {
      der_free_heim_integer();
      free(a2[3]);
    }

    if (a2[6])
    {
      sub_1883133BC();
      free(a2[6]);
    }

    if (a2[14])
    {
      der_free_oid();
      free(a2[14]);
    }

    uint64_t v3 = a2[9];
    if (v3) {
      free(v3);
    }
    a2[16] = 0LL;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    free(a2);
  }

const char *sub_1883034E4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 56);
  unsigned int v7 = *a2;
  if ((*a2 & 1) != 0)
  {
    int v8 = sub_188301270(*((void *)a2 + 1), *(void *)(a3 + 56), 0);
    uint64_t result = 0LL;
    if (v8) {
      return result;
    }
    unsigned int v7 = *a2;
  }

  if ((v7 & 0x8000) != 0)
  {
    unsigned int v7 = *a2;
  }

  if ((v7 & 2) != 0)
  {
    unsigned int v7 = *a2;
  }

  if ((v7 & 4) != 0)
  {
    int v10 = sub_18830E4C8(v6 + 72, *((void *)a2 + 6), &v23);
    if (v10 | v23) {
      return 0LL;
    }
    unsigned int v7 = *a2;
  }

  if ((v7 & 8) != 0)
  {
    int v11 = sub_18830E4C8(v6 + 144, *((void *)a2 + 7), &v23);
    if (v11 | v23) {
      return 0LL;
    }
    unsigned int v7 = *a2;
  }

  if ((v7 & 0x10) != 0)
  {
    int v15 = der_heim_octet_string_cmp();
    sub_1883139B4();
    if (v15) {
      return 0LL;
    }
    unsigned int v7 = *a2;
    if ((*a2 & 0x20) != 0) {
      return 0LL;
    }
  }

  else if ((v7 & 0x20) != 0)
  {
    return 0LL;
  }

  if ((v7 & 0x40) != 0 && !*(void *)(a3 + 64)) {
    return 0LL;
  }
  int v12 = (v7 >> 10) & 2 | (v7 >> 8) & 1 | (v7 >> 5) & 4 | (v7 >> 10) & 8 | (v7 >> 8) & 0x10 | (v7 >> 4) & 0x60;
  if (v12)
  {
    unsigned int v7 = *a2;
  }

  if ((v7 & 0x4000) != 0) {
    return 0LL;
  }
  if ((v7 & 0x10000) != 0)
  {
    uint64_t result = (const char *)hx509_cert_get_attribute(a3);
    if (!result) {
      return result;
    }
    unsigned int v7 = *a2;
    if ((*a2 & 0x20000) == 0)
    {
LABEL_38:
      if ((v7 & 0x40000) != 0)
      {
        uint64_t result = hx509_cert_get_friendly_name(a3);
        if (!result) {
          return result;
        }
        unsigned int v7 = *a2;
        if ((*a2 & 0x80000) != 0) {
          goto LABEL_40;
        }
      }

      else if ((v7 & 0x80000) != 0)
      {
LABEL_40:
        unsigned int v7 = *a2;
      }

      if ((v7 & 0x100000) != 0)
      {
        uint64_t v16 = *(void *)(v6 + 216);
        v22[0] = *(void *)(v6 + 208) >> 3;
        v22[1] = v16;
        uint64_t v17 = hx509_signature_sha1();
        unsigned int v7 = *a2;
      }

      if ((v7 & 0x200000) != 0)
      {
        uint64_t v18 = (*(_DWORD *)(v6 + 112) - 1) > 1 ? 0LL : *(void *)(v6 + 120);
        uint64_t v19 = *((void *)a2 + 13);
        if (v18 > v19) {
          return 0LL;
        }
        uint64_t v20 = (*(_DWORD *)(v6 + 128) - 1) > 1 ? 0LL : *(void *)(v6 + 136);
        if (v20 < v19) {
          return 0LL;
        }
      }

      if ((v7 & 0x400000) != 0)
      {
        unsigned int v7 = *a2;
      }

      if ((v7 & 0x800000) == 0)
      {
        if ((v7 & 0x1000000) == 0) {
          return (const char *)(v7 >> 25 == 0);
        }
        if (!hx509_cert_get_persistent(a3, (uint64_t)v22))
        {
          int v21 = der_heim_octet_string_cmp();
          der_free_octet_string();
          if (!v21)
          {
            unsigned int v7 = *a2;
            return (const char *)(v7 >> 25 == 0);
          }
        }
      }

      return 0LL;
    }
  }

  else if ((v7 & 0x20000) == 0)
  {
    goto LABEL_38;
  }

  uint64_t v13 = (unint64_t *)*((void *)a2 + 8);
  if (!*v13) {
    goto LABEL_38;
  }
  unint64_t v14 = 0LL;
  while (1)
  {
    uint64_t result = (const char *)sub_1883018E0(*(void *)(*(void *)(v13[1] + 8 * v14) + 56LL), *(void *)(a3 + 56));
    if (!(_DWORD)result) {
      return result;
    }
    ++v14;
    uint64_t v13 = (unint64_t *)*((void *)a2 + 8);
    if (v14 >= *v13)
    {
      unsigned int v7 = *a2;
      goto LABEL_38;
    }
  }

uint64_t hx509_cert_check_eku(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1883038CC(*(void *)(a2 + 56), &v8);
  if ((_DWORD)v3)
  {
    uint64_t v4 = v3;
    hx509_clear_error_string(a1);
  }

  else if ((_DWORD)v8)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    while (der_heim_oid_cmp())
    {
      ++v6;
      v5 += 16LL;
    }

    sub_188313ACC();
    return 0LL;
  }

  else
  {
LABEL_7:
    sub_188313ACC();
    hx509_clear_error_string(a1);
    return 569881LL;
  }

  return v4;
}

uint64_t sub_1883038CC(uint64_t a1, void *a2)
{
  unint64_t v3 = 0LL;
  *a2 = 0LL;
  a2[1] = 0LL;
  else {
    return 569857LL;
  }
}

uint64_t sub_18830392C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v6 = 0LL;
  *a3 = 0;
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(_DWORD **)(v3 + 16);
  if (!v4 || *v4 + 1 < 3) {
    return 0LL;
  }
  return 569872LL;
}

uint64_t sub_1883039B0(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v4 = sub_1883038CC(*(void *)(a2 + 56), a3);
  if ((_DWORD)v4) {
    BOOL v5 = (_DWORD)v4 == 569857;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  uint64_t v6 = v4;
  hx509_clear_error_string(a1);
  return v6;
}

uint64_t hx509_cert_binary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  size_t v4 = sub_188313630();
  *(void *)a3 = v4;
  BOOL v5 = malloc(v4);
  *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v5;
  if (!v5)
  {
    uint64_t v14 = 12LL;
    goto LABEL_5;
  }

  uint64_t v6 = sub_188313610();
  if ((_DWORD)v6)
  {
    uint64_t v14 = v6;
    free(*(void **)(a3 + 8));
LABEL_5:
    *(void *)a3 = 0LL;
    *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
    return v14;
  }

  if (*(void *)a3) {
    sub_188303AB8("internal ASN.1 encoder error", v7, v8, v9, v10, v11, v12, v13, v16);
  }
  return 0LL;
}

void sub_188303AB8( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t hx509_print_cert(uint64_t a1, uint64_t a2, FILE *a3)
{
  if (a3) {
    BOOL v5 = a3;
  }
  else {
    BOOL v5 = (FILE *)*MEMORY[0x1895F89D0];
  }
  uint64_t result = hx509_name_from_Name(*(void *)(a2 + 56) + 72LL, &v9);
  if (!(_DWORD)result)
  {
    hx509_name_to_string(v9, &v8);
    hx509_name_free(&v9);
    fprintf(v5, "    issuer:  %s\n", (const char *)v8);
    free(v8);
    uint64_t result = hx509_name_from_Name(*(void *)(a2 + 56) + 144LL, &v9);
    if (!(_DWORD)result)
    {
      hx509_name_to_string(v9, &v8);
      hx509_name_free(&v9);
      fprintf(v5, "    subject: %s\n", (const char *)v8);
      free(v8);
      uint64_t result = der_copy_heim_integer();
      if (!(_DWORD)result)
      {
        uint64_t result = der_print_hex_heim_integer();
        if (!(_DWORD)result)
        {
          der_free_heim_integer();
          fprintf(v5, "    serial: %s\n", (const char *)v8);
          free(v8);
          fwrite("    keyusage: ", 0xEuLL, 1uLL, v5);
          if (hx509_cert_keyusage_print(a1, a2, (char **)&v8))
          {
            fwrite("no\n", 3uLL, 1uLL, v5);
          }

          else
          {
            fprintf(v5, "%s\n", (const char *)v8);
            free(v8);
          }

          fwrite("    persistent: ", 0x10uLL, 1uLL, v5);
          if (hx509_cert_get_persistent(a2, (uint64_t)v7))
          {
            fwrite("no\n", 3uLL, 1uLL, v5);
          }

          else
          {
            if ((int)rk_hex_encode((unsigned __int8 *)v7[1], v7[0], &v8) < 1)
            {
              fwrite("out of memory\n", 0xEuLL, 1uLL, v5);
            }

            else
            {
              fprintf(v5, "%s\n", (const char *)v8);
              free(v8);
            }

            der_free_octet_string();
          }

          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t hx509_cert_get_appleid(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  v12[0] = xmmword_18831AAD8;
  v12[1] = unk_18831AAE8;
  uint64_t v10 = 8LL;
  uint64_t v11 = v12;
  int v9 = 0;
  *a3 = 0LL;
  uint64_t v5 = hx509_cert_check_eku(a1, a2);
  if (!(_DWORD)v5)
  {
    uint64_t v5 = hx509_name_from_Name(*(void *)(a2 + 56) + 144LL, (void **)&v8);
    if (!(_DWORD)v5)
    {
      uint64_t v5 = sub_18830E610(v8, 3u, (uint64_t)&unk_18A220558, &v9, &v7);
      hx509_name_free((void **)&v8);
      if (!(_DWORD)v5)
      {
        asprintf(a3, "%s@me.com", (const char *)v7);
        free(v7);
        if (*a3) {
          return 0LL;
        }
        else {
          return 12LL;
        }
      }
    }
  }

  return v5;
}

uint64_t sub_188303E08(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = sub_18830E4C8(a2 + 144, a2 + 72, &v13);
  *a3 = v13 == 0;
  if (!(_DWORD)v5) {
    return sub_1883068A8(a1);
  }
  uint64_t v10 = v5;
  hx509_set_error_string(a1, 0, v5, "Failed to check if self signed", v6, v7, v8, v9, v12);
  return v10;
}

uint64_t sub_188303E94(unsigned int *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v20 = 0LL;
  if (!*a1) {
    return 0LL;
  }
  unint64_t v5 = 0LL;
  int v6 = 0;
  uint64_t v7 = (__int128 *)(a2 + 168);
  do
  {
    uint64_t v8 = *((void *)a1 + 1);
    if (*(void *)(v8 + 56 * v5 + 40) && *(void *)(v8 + 56 * v5 + 48)) {
      return 569869LL;
    }
    uint64_t v9 = (_DWORD *)(v8 + 56 * v5);
    if (*v9 == 4 && *(_DWORD *)v7)
    {
      uint64_t v19 = 0LL;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v10 = *(_DWORD *)(a2 + 160);
      LODWORD(v17) = 4;
      DWORD2(v17) = v10;
      __int128 v18 = *v7;
      sub_18830403C((uint64_t)v9, (uint64_t)&v17, (_DWORD *)&v20 + 1);
      uint64_t v8 = *((void *)a1 + 1);
    }

    uint64_t v11 = (_DWORD *)(v8 + 56 * v5);
    unint64_t v21 = 0LL;
    while (1)
    {
      LODWORD(result) = sub_1883010A8(a2, &v21, &v17);
      if ((_DWORD)result) {
        break;
      }
      unint64_t v13 = v17;
      if ((_DWORD)v17)
      {
        uint64_t v14 = 0LL;
        unint64_t v15 = 0LL;
        do
        {
          if (*v11 == *(_DWORD *)(*((void *)&v17 + 1) + v14))
          {
            sub_18830403C((uint64_t)v11, *((void *)&v17 + 1) + v14, &v20);
            unint64_t v13 = v17;
            int v6 = 1;
          }

          ++v15;
          v14 += 40LL;
        }

        while (v15 < v13);
      }

      sub_188313828();
    }

    if ((_DWORD)result == 569857) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = result;
    }
    ++v5;
  }

  while (v5 < *a1);
  if (HIDWORD(v20) && (!v6 || (_DWORD)v20)) {
    *a3 = 1;
  }
  return result;
}

uint64_t sub_18830403C(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)result != *(_DWORD *)a2) {
    sub_188318E04();
  }
  switch(*(_DWORD *)result)
  {
    case 1:
      uint64_t result = der_heim_oid_cmp();
      if (!(_DWORD)result)
      {
        uint64_t result = der_heim_octet_string_cmp();
        if (!(_DWORD)result) {
          goto LABEL_19;
        }
      }

      return result;
    case 2:
      size_t v5 = *(void *)(result + 8);
      int v6 = *(const void **)(result + 16);
      if (memchr(v6, 64, v5))
      {
        uint64_t result = der_printable_string_cmp();
        if (!(_DWORD)result) {
          goto LABEL_19;
        }
      }

      else
      {
        size_t v27 = *(void *)(a2 + 8);
        OSStatus v26 = *(char **)(a2 + 16);
        uint64_t result = (uint64_t)memchr(v26, 64, v27);
        if (result)
        {
          uint64_t v28 = result;
          uint64_t v29 = &v26[v27 - result];
          if ((unint64_t)v29 >= v5)
          {
            uint64_t result = memcmp(&v29[result - v5 + 1], v6, v5);
            if (!(_DWORD)result)
            {
              int v11 = v29[v28 - v5 + 1];
              goto LABEL_13;
            }
          }
        }
      }

      return result;
    case 3:
      unint64_t v7 = *(void *)(result + 8);
      unint64_t v8 = *(void *)(a2 + 8);
      unint64_t v9 = v8 - v7;
      if (v8 >= v7)
      {
        uint64_t v10 = *(void *)(a2 + 16);
        uint64_t result = memcmp((const void *)(v10 + v9), *(const void **)(result + 16), *(void *)(result + 8));
        if (!(_DWORD)result)
        {
          if (v8 == v7) {
            goto LABEL_19;
          }
          int v11 = *(unsigned __int8 *)(v9 + v10 - 1);
LABEL_13:
          if (v11 == 46) {
            goto LABEL_19;
          }
        }
      }

      return result;
    case 4:
      if (*(_DWORD *)(result + 8) != 1 || *(_DWORD *)(a2 + 8) != 1) {
        goto LABEL_19;
      }
      uint64_t v13 = *(unsigned int *)(result + 16);
      if (v13 <= *(_DWORD *)(a2 + 16))
      {
        if (!(_DWORD)v13)
        {
LABEL_19:
          *a3 = 1;
          return result;
        }

        uint64_t v14 = 0LL;
        uint64_t v15 = *(void *)(result + 24);
        uint64_t v16 = *(void *)(a2 + 24);
        while (1)
        {
          __int128 v17 = (_DWORD *)(v16 + 16 * v14);
          int v18 = *(_DWORD *)(v15 + 16 * v14);
          if (v18 != *v17) {
            break;
          }
          if (v18)
          {
            unint64_t v19 = 0LL;
            uint64_t v20 = 16LL;
            do
            {
              uint64_t result = der_heim_oid_cmp();
              if ((_DWORD)result) {
                return result;
              }
              uint64_t result = sub_18830E1D8( *(void *)(v15 + 16 * v14 + 8) + v20,  *(void *)(v16 + 16 * v14 + 8) + v20,  &v30,  v21,  v22,  v23,  v24,  v25);
              if ((_DWORD)result || v30) {
                return result;
              }
              ++v19;
              v20 += 40LL;
            }

            while (v19 < *v17);
          }

          if (++v14 == v13) {
            goto LABEL_19;
          }
        }
      }

      return result;
    default:
      return result;
  }

uint64_t hx509_cms_wrap_ContentInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  uint64_t v5 = der_copy_oid();
  if ((_DWORD)v5) {
    return v5;
  }
  if (a2)
  {
    int v6 = (size_t *)calloc(1uLL, 0x10uLL);
    if (!v6) {
      goto LABEL_9;
    }
    unint64_t v7 = v6;
    size_t v8 = *(void *)a2;
    unint64_t v9 = malloc(*(void *)a2);
    v7[1] = (size_t)v9;
    if (!v9) {
      goto LABEL_9;
    }
    memcpy(v9, *(const void **)(a2 + 8), v8);
    size_t *v7 = v8;
  }

  size_t v10 = length_ContentInfo();
  *(void *)a3 = v10;
  int v11 = malloc(v10);
  *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v11;
  if (!v11)
  {
LABEL_9:
    uint64_t v5 = 12LL;
    goto LABEL_10;
  }

  uint64_t v12 = encode_ContentInfo();
  if ((_DWORD)v12)
  {
    uint64_t v5 = v12;
    free(*(void **)(a3 + 8));
    *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
LABEL_10:
    free_ContentInfo();
    return v5;
  }

  free_ContentInfo();
  if (*(void *)a3) {
    sub_188303AB8("internal ASN.1 encoder error", v14, v15, v16, v17, v18, v19, v20, 0);
  }
  return 0LL;
}

uint64_t hx509_cms_unwrap_ContentInfo(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = sub_188312ECC();
  if (!(_DWORD)v6)
  {
    uint64_t v6 = der_copy_oid();
    if ((_DWORD)v6)
    {
LABEL_3:
      free_ContentInfo();
      return v6;
    }

    if (v9)
    {
      uint64_t v8 = der_copy_octet_string();
      if ((_DWORD)v8)
      {
        uint64_t v6 = v8;
        der_free_oid();
        goto LABEL_3;
      }
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
    }

    uint64_t v6 = 0LL;
    if (a4) {
      *a4 = v9 != 0;
    }
    goto LABEL_3;
  }

  return v6;
}

uint64_t hx509_cms_unenvelope( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, time_t a7, void *a8, size_t *a9)
{
  size_t v57 = 0LL;
  uint64_t v58 = 0LL;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  uint64_t v56 = 0LL;
  v48[0] = 0LL;
  v48[1] = 0LL;
  *a9 = 0LL;
  a9[1] = 0LL;
  if ((a3 & 1) != 0) {
    int v14 = 64;
  }
  else {
    int v14 = 192;
  }
  *a8 = 0LL;
  a8[1] = 0LL;
  uint64_t v15 = sub_188313084();
  if ((_DWORD)v15)
  {
    uint64_t v20 = v15;
    hx509_set_error_string(a1, 0, v15, "Failed to decode EnvelopedData", v16, v17, v18, v19, v45);
    return v20;
  }

  if ((_DWORD)v52)
  {
    if (*((void *)&v55 + 1))
    {
      if (a6)
      {
        uint64_t v20 = 569891LL;
        uint64_t v21 = "Both internal and external encrypted data";
LABEL_13:
        uint64_t v22 = a1;
        int v23 = v20;
        goto LABEL_14;
      }

      a6 = *((void *)&v55 + 1);
    }

    else if (!a6)
    {
      uint64_t v20 = 569891LL;
      uint64_t v21 = "Content missing from encrypted data";
      goto LABEL_13;
    }

    uint64_t v46 = a6;
    unint64_t v25 = 0LL;
    int v26 = 0;
    uint64_t v50 = 0LL;
    uint64_t v27 = 104LL;
    do
    {
      uint64_t v28 = (unsigned int *)(*((void *)&v52 + 1) + v27);
      uint64_t v29 = (int *)(*((void *)&v52 + 1) + v27 - 96);
      if (!sub_18830481C(a1, v29, a2, a7, &v50, v14))
      {
        uint64_t v34 = v50;
        int v35 = sub_188301C0C(a1, v28, (uint64_t)(v28 - 6), v50, &v57, v31, v32, v33);
        hx509_cert_free(v34);
        if (!v35) {
          goto LABEL_29;
        }
        uint64_t v50 = 0LL;
        int v26 = 1;
        if (!sub_188304980(v29, v49))
        {
          hx509_set_error_string(a1, 1, v35, "Failed to decrypt with %s", v30, v31, v32, v33, (char)v49[0]);
          free(v49[0]);
        }
      }

      ++v25;
      v27 += 120LL;
    }

    while (v25 < v52);
    if (v26)
    {
      uint64_t v34 = v50;
LABEL_29:
      if (v34)
      {
        uint64_t v36 = der_copy_oid();
        if ((_DWORD)v36)
        {
          uint64_t v20 = v36;
          hx509_set_error_string(a1, 0, v36, "Failed to copy EnvelopedData content oid", v37, v38, v39, v40, v45);
          goto LABEL_15;
        }

        if ((void)v55)
        {
          v49[1] = *(char **)(v55 + 8);
          v49[0] = *(char **)v55;
          uint64_t v42 = v49;
        }

        else
        {
          uint64_t v42 = 0LL;
        }

        uint64_t v20 = hx509_crypto_init(a1, 0LL, (uint64_t)&v54, &v47);
        if ((_DWORD)v20) {
          goto LABEL_15;
        }
        if ((a3 & 2) != 0) {
          sub_18830762C((uint64_t)v47);
        }
        if (v42)
        {
          uint64_t v43 = hx509_crypto_set_params(a1, (uint64_t)v47, (uint64_t)v42);
          if ((_DWORD)v43)
          {
            uint64_t v20 = v43;
            hx509_crypto_destroy(v47);
            goto LABEL_15;
          }
        }

        uint64_t v20 = hx509_crypto_set_key_data(v47, v58, v57);
        if ((_DWORD)v20)
        {
          hx509_crypto_destroy(v47);
          uint64_t v21 = "Failed to set key for decryption of EnvelopedData";
        }

        else
        {
          if (v48[0]) {
            uint64_t v44 = v48;
          }
          else {
            uint64_t v44 = 0LL;
          }
          uint64_t v20 = hx509_crypto_decrypt((uint64_t)v47, *(void *)(v46 + 8), *(void *)v46, v44, a9);
          hx509_crypto_destroy(v47);
          if (!(_DWORD)v20) {
            goto LABEL_15;
          }
          uint64_t v21 = "Failed to decrypt EnvelopedData";
        }

        goto LABEL_13;
      }

      uint64_t v20 = 569894LL;
      uint64_t v41 = "No private key decrypted the transfer key";
    }

    else
    {
      uint64_t v20 = 569894LL;
      uint64_t v41 = "No matching certificate found in the enveloped data";
    }

    hx509_set_error_string(a1, 1, 569894, v41, v30, v31, v32, v33, v45);
    goto LABEL_15;
  }

  uint64_t v20 = 569894LL;
  uint64_t v21 = "No recipient info in enveloped data";
  uint64_t v22 = a1;
  int v23 = 569894;
LABEL_14:
  hx509_set_error_string(v22, 0, v23, v21, v16, v17, v18, v19, v45);
LABEL_15:
  sub_1883130D4();
  der_free_octet_string();
  if (v48[0]) {
    der_free_octet_string();
  }
  if ((_DWORD)v20)
  {
    der_free_oid();
    der_free_octet_string();
  }

  return v20;
}

uint64_t sub_18830481C(uint64_t a1, int *a2, uint64_t a3, time_t a4, void *a5, int a6)
{
  *a5 = 0LL;
  int v16 = *a2;
  if (!*a2)
  {
    uint64_t v18 = 569894LL;
    uint64_t v19 = "unknown CMS identifier element";
LABEL_17:
    uint64_t v21 = a1;
    char v22 = 0;
    goto LABEL_18;
  }

  if (v16 == 1)
  {
    uint64_t v28 = a2 + 12;
    uint64_t v30 = a2 + 2;
    int v17 = 6;
  }

  else if (v16 == 2)
  {
    uint64_t v29 = a2 + 2;
    int v17 = 16;
  }

  else
  {
    int v17 = v27[0];
  }

  v27[0] = v17 | a6 | 0x200000;
  if (!a4) {
    a4 = time(0LL);
  }
  time_t v31 = a4;
  int v20 = hx509_certs_find(a1, a3, v27, &v26, v12, v13, v14, v15);
  if (!v20)
  {
    uint64_t v18 = 0LL;
    *a5 = v26;
    return v18;
  }

  uint64_t v18 = 569894LL;
  if (v20 != 569873)
  {
    uint64_t v19 = "Failed to find CMS id in cert store";
    uint64_t v21 = a1;
    char v22 = 1;
LABEL_18:
    hx509_set_error_string(v21, v22, 569894, v19, v12, v13, v14, v15, v24);
    return v18;
  }

  if (!sub_188304980(a2, &v25))
  {
    char v24 = (char)v25;
    uint64_t v19 = "Failed to find %s";
    goto LABEL_17;
  }

  hx509_clear_error_string(a1);
  return v18;
}

uint64_t sub_188304980(int *a1, char **a2)
{
  *a2 = 0LL;
  int v3 = *a1;
  if (*a1)
  {
    if (v3 == 2)
    {
      asprintf(a2, "certificate with id %s", (const char *)v7);
    }

    else
    {
      if (v3 != 1) {
        goto LABEL_11;
      }
      uint64_t v4 = sub_18830DD10((uint64_t)(a1 + 2), &v6);
      if ((_DWORD)v4) {
        return v4;
      }
      uint64_t v4 = der_print_hex_heim_integer();
      if ((_DWORD)v4)
      {
        free(v6);
        return v4;
      }

      asprintf(a2, "certificate issued by %s with serial number %s", (const char *)v6, (const char *)v7);
      free(v6);
    }

    free(v7);
  }

  else
  {
    asprintf(a2, "certificate have unknown CMSidentifier type");
  }

uint64_t hx509_cms_envelope_1( uint64_t a1, unsigned int a2, uint64_t a3, const void *a4, size_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = 0LL;
  v49[0] = 0LL;
  v50[0] = 0LL;
  v50[1] = 0LL;
  v49[1] = 0LL;
  __int128 v46 = 0u;
  uint64_t v47 = 0LL;
  if (a6) {
    uint64_t v14 = a6;
  }
  else {
    uint64_t v14 = &unk_18A2204D8;
  }
  *(void *)a8 = 0LL;
  *(void *)(a8 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  if ((a2 & 1) == 0)
  {
    uint64_t params = sub_188301104(a1, a3, 4, 1LL);
    if ((_DWORD)params) {
      goto LABEL_20;
    }
  }

  uint64_t params = hx509_crypto_init(a1, 0LL, (uint64_t)v14, &v48);
  if ((_DWORD)params) {
    goto LABEL_20;
  }
  if ((a2 & 2) != 0) {
    sub_18830762C((uint64_t)v48);
  }
  uint64_t v16 = hx509_crypto_set_random_key((uint64_t)v48, (uint64_t)v49);
  if ((_DWORD)v16)
  {
    uint64_t params = v16;
    uint64_t v21 = "Create random key for EnvelopedData content";
LABEL_17:
    uint64_t v25 = a1;
    char v26 = 0;
LABEL_18:
    int v27 = params;
LABEL_19:
    hx509_set_error_string(v25, v26, v27, v21, v17, v18, v19, v20, v45);
    goto LABEL_20;
  }

  uint64_t v22 = sub_18830779C((uint64_t)v48, (uint64_t)v50);
  if ((_DWORD)v22)
  {
    uint64_t params = v22;
    uint64_t v21 = "Failed to create a random iv";
    goto LABEL_17;
  }

  uint64_t v23 = hx509_crypto_encrypt((uint64_t)v48, a4, a5, (uint64_t)v50, (void ***)&v46 + 1);
  if ((_DWORD)v23)
  {
    uint64_t params = v23;
    uint64_t v21 = "Failed to encrypt EnvelopedData content";
    goto LABEL_17;
  }

  uint64_t v24 = der_copy_oid();
  if ((_DWORD)v24)
  {
    uint64_t params = v24;
    uint64_t v21 = "Failed to set crypto oid for EnvelopedData";
    goto LABEL_17;
  }

  if (!calloc(1uLL, 0x10uLL))
  {
    uint64_t v21 = "Failed to allocate crypto paramaters for EnvelopedData";
LABEL_31:
    uint64_t params = 12LL;
    uint64_t v25 = a1;
    char v26 = 0;
    int v27 = 12;
    goto LABEL_19;
  }

  uint64_t params = hx509_crypto_get_params(a1, (uint64_t)v48);
  if ((_DWORD)params) {
    goto LABEL_20;
  }
  uint64_t v29 = calloc(1uLL, 0x78uLL);
  if (!v29)
  {
    uint64_t v21 = "Failed to allocate recipients info for EnvelopedData";
    goto LABEL_31;
  }

  time_t v31 = v29;
  *uint64_t v29 = ((a2 & 4) >> 1) ^ 2;
  uint64_t v32 = sub_188304DBC(a3, (a2 >> 2) & 1, (uint64_t)(v29 + 2), v30, v17, v18, v19, v20);
  if ((_DWORD)v32)
  {
    uint64_t params = v32;
    uint64_t v21 = "Failed to set CMS identifier info for EnvelopedData";
    goto LABEL_17;
  }

  uint64_t v33 = sub_188301C50(a1, (unsigned int *)v49, a3, (uint64_t)(v31 + 20), (void *)v31 + 13);
  if ((_DWORD)v33)
  {
    uint64_t params = v33;
    uint64_t v21 = "Failed to encrypt transport key for EnvelopedData";
    uint64_t v25 = a1;
    char v26 = 1;
    goto LABEL_18;
  }

  uint64_t v34 = der_copy_oid();
  if ((_DWORD)v34)
  {
    uint64_t params = v34;
    uint64_t v21 = "Failed to copy content oid for EnvelopedData";
    goto LABEL_17;
  }

  uint64_t v47 = 0LL;
  size_t v35 = sub_1883130C4();
  *(void *)a8 = v35;
  uint64_t v36 = malloc(v35);
  *(void *)(a8 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v36;
  if (!v36)
  {
    uint64_t params = 12LL;
    goto LABEL_41;
  }

  uint64_t v37 = sub_1883130A4();
  if ((_DWORD)v37)
  {
    uint64_t params = v37;
    free(*(void **)(a8 + 8));
    *(void *)(a8 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
LABEL_41:
    uint64_t v21 = "Failed to encode EnvelopedData";
    goto LABEL_17;
  }

  if (*(void *)a8) {
    sub_188303AB8("internal ASN.1 encoder error", v38, v39, v40, v41, v42, v43, v44, v45);
  }
  uint64_t params = 0LL;
LABEL_20:
  if (v48) {
    hx509_crypto_destroy(v48);
  }
  if ((_DWORD)params) {
    der_free_octet_string();
  }
  der_free_octet_string();
  der_free_octet_string();
  sub_1883130D4();
  return params;
}

uint64_t sub_188304DBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 == 1) {
    goto LABEL_4;
  }
  if ((_DWORD)a2) {
    sub_188303AB8("CMS fill identifier with unknown type", a2, a3, a4, a5, a6, a7, a8, v13);
  }
  *(_DWORD *)a3 = 2;
  uint64_t v10 = sub_188300994(a1);
LABEL_4:
  *(_DWORD *)a3 = 1;
  uint64_t issuer = hx509_cert_get_issuer(a1, &v14);
  if (!(_DWORD)issuer)
  {
    uint64_t issuer = hx509_name_to_Name();
    hx509_name_free(&v14);
    if (!(_DWORD)issuer) {
      return hx509_cert_get_serialnumber();
    }
  }

  return issuer;
}

uint64_t hx509_cms_verify_signed( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9, __CFArray **a10)
{
  uint64_t v93 = 0LL;
  v94[0] = 0LL;
  *a10 = 0LL;
  *a9 = 0LL;
  a9[1] = 0LL;
  *a8 = 0LL;
  a8[1] = 0LL;
  memset(v89, 0, sizeof(v89));
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  uint64_t v15 = sub_188312FF4();
  if ((_DWORD)v15)
  {
    uint64_t appended = v15;
    uint64_t v21 = "Failed to decode SignedData";
    goto LABEL_3;
  }

  if (!(a6 | *((void *)&v90 + 1)))
  {
    uint64_t appended = 569891LL;
    uint64_t v21 = "No content data in SignedData";
LABEL_9:
    uint64_t v22 = a1;
    int v23 = 569891;
    goto LABEL_10;
  }

  if (a6 && *((void *)&v90 + 1))
  {
    uint64_t appended = 569891LL;
    uint64_t v21 = "Both external and internal SignedData";
    goto LABEL_9;
  }

  uint64_t appended = der_copy_octet_string();
  if ((_DWORD)appended)
  {
    uint64_t v21 = "malloc: out of memory";
    goto LABEL_3;
  }

  uint64_t appended = hx509_certs_init(a1, "MEMORY:cms-cert-buffer", 0LL, 0LL, &v93);
  if (!(_DWORD)appended)
  {
    CFMutableArrayRef v25 = heim_array_create();
    *a10 = v25;
    if (!v25)
    {
      uint64_t appended = 12LL;
      goto LABEL_11;
    }

    uint64_t appended = sub_1883055B8(a1, (uint64_t)v89, v93);
    if (!(_DWORD)appended)
    {
      if (!a7 || (uint64_t appended = hx509_certs_merge(a1, v93, a7, v26, v16, v17, v18, v19), !(_DWORD)appended))
      {
        if (!(_DWORD)v92)
        {
          if ((a3 & 4) == 0) {
            goto LABEL_106;
          }
          goto LABEL_107;
        }

        uint64_t v27 = 0LL;
        int v77 = 0;
        while (1)
        {
          uint64_t v84 = 0LL;
          uint64_t v28 = *((void *)&v92 + 1) + 160 * v27;
          uint64_t v30 = *(void *)(v28 + 136);
          uint64_t v29 = v28 + 136;
          if (v30)
          {
            uint64_t v80 = *((void *)&v92 + 1);
            time_t v31 = (int *)(*((void *)&v92 + 1) + 160 * v27 + 8);
            uint64_t v32 = v93;
            time_t v33 = sub_188300D60(a2);
            uint64_t v34 = sub_18830481C(a1, v31, v32, v33, v94, 256);
            if (!(_DWORD)v34
              || (a3 & 2) != 0
              && (v35 = v93, v36 = sub_188300D60(a2), uint64_t v34 = sub_18830481C(a1, v31, v35, v36, v94, 0), !(_DWORD)v34))
            {
              uint64_t v37 = v80 + 160 * v27;
              uint64_t v38 = *(int **)(v37 + 104);
              uint64_t v79 = (void *)(v37 + 104);
              if (!v38)
              {
                uint64_t v41 = (void *)a9[1];
                size_t v86 = *a9;
                unint64_t v87 = v41;
                uint64_t v42 = &asn1_oid_id_pkcs7_data;
                goto LABEL_42;
              }

              uint64_t v83 = *((void *)v38 + 1);
              unsigned int v82 = *v38;
              if (!v82) {
                goto LABEL_48;
              }
              uint64_t v39 = 0LL;
              unint64_t v40 = 0LL;
              while (der_heim_oid_cmp())
              {
                ++v40;
                v39 += 32LL;
                if (v40 >= v82) {
                  goto LABEL_48;
                }
              }

              if (v83)
              {
                if (*(_DWORD *)(v83 + v39 + 16) == 1)
                {
                  uint64_t v48 = sub_188312E7C();
                  if ((_DWORD)v48)
                  {
                    uint64_t appended = v48;
                    uint64_t v53 = a1;
                    char v54 = 0;
                    int v55 = appended;
                    uint64_t v56 = "Failed to decode messageDigest (signature)";
                    goto LABEL_78;
                  }

                  uint64_t appended = hx509_verify_signature_0(a1, 0LL, v80 + 160 * v27 + 80, (uint64_t)a9, (uint64_t)v81);
                  der_free_octet_string();
                  if ((_DWORD)appended)
                  {
                    uint64_t v53 = a1;
                    char v54 = 1;
                    int v55 = appended;
                    uint64_t v56 = "Failed to verify messageDigest";
LABEL_78:
                    hx509_set_error_string(v53, v54, v55, v56, v49, v50, v51, v52, v76);
LABEL_59:
                    uint64_t v60 = v94[0];
                    if (v94[0]) {
LABEL_60:
                    }
                      hx509_cert_free(v60);
LABEL_61:
                    v94[0] = 0LL;
                    goto LABEL_62;
                  }

                  if (!v82) {
                    goto LABEL_88;
                  }
                  uint64_t v64 = 0LL;
                  unint64_t v65 = 0LL;
                  while (der_heim_oid_cmp())
                  {
                    ++v65;
                    v64 += 32LL;
                    if (v65 >= v82) {
                      goto LABEL_88;
                    }
                  }

                  if (v83)
                  {
                    if (*(_DWORD *)(v83 + v64 + 16) != 1)
                    {
                      uint64_t appended = 569895LL;
                      uint64_t v57 = a1;
                      int v58 = 569895;
                      uint64_t v59 = "More then one oid in signedAttrs";
                      goto LABEL_49;
                    }

                    uint64_t v66 = v85;
                    uint64_t v67 = sub_188312E2C();
                    if ((_DWORD)v67)
                    {
                      uint64_t appended = v67;
                      uint64_t v57 = a1;
                      int v58 = appended;
                      uint64_t v59 = "Failed to decode oid in signedAttrs";
                      goto LABEL_49;
                    }
                  }

                  else
                  {
LABEL_88:
                    uint64_t v66 = &asn1_oid_id_pkcs7_data;
                  }

                  size_t v86 = sub_188312FD4();
                  unint64_t v87 = malloc(v86);
                  if (!v87)
                  {
                    uint64_t appended = 12LL;
                    goto LABEL_93;
                  }

                  uint64_t v68 = sub_188312FB4();
                  if ((_DWORD)v68)
                  {
                    uint64_t appended = v68;
                    free(v87);
                    unint64_t v87 = 0LL;
LABEL_93:
                    if (v66 == v85) {
                      der_free_oid();
                    }
                    hx509_clear_error_string(a1);
                    goto LABEL_59;
                  }

                  if (v88 != v86) {
                    sub_188303AB8("internal ASN.1 encoder error", v69, v70, v71, v72, v73, v74, v75, v76);
                  }
                  uint64_t v42 = v66;
LABEL_42:
                  uint64_t v78 = v42;
                  uint64_t v43 = der_heim_oid_cmp();
                  char v47 = a3 | ((_DWORD)v43 == 0);
                  if (a3 & 1 | ((_DWORD)v43 == 0))
                  {
                    uint64_t appended = 0LL;
                  }

                  else
                  {
                    uint64_t appended = 569895LL;
                    hx509_set_error_string( a1,  0,  569895,  "Oid in message mismatch from the expected",  v16,  v17,  v18,  v19,  v76);
                  }

                  if (v78 == v85) {
                    uint64_t v43 = der_free_oid();
                  }
                  if ((v47 & 1) != 0)
                  {
                    uint64_t v43 = hx509_verify_signature(a1, (uint64_t)v94[0], v80 + 160 * v27 + 112, (uint64_t)&v86, v29);
                    uint64_t appended = v43;
                    if ((_DWORD)v43) {
                      hx509_set_error_string( a1,  1,  v43,  "Failed to verify signature in CMS SignedData",  v16,  v17,  v18,  v19,  v76);
                    }
                  }

                  if (*v79)
                  {
                    free(v87);
                    unint64_t v87 = 0LL;
                  }

                  if ((_DWORD)appended) {
                    goto LABEL_59;
                  }
                  if ((a3 & 8) != 0)
                  {
                    __int128 v62 = (__CFArray **)sub_188301C58(v43, v44, v45, v46, v16, v17, v18, v19);
                    uint64_t v84 = v62;
                    if (!v62)
                    {
                      uint64_t appended = 0LL;
                      goto LABEL_59;
                    }

                    uint64_t appended = heim_array_append_value(v62[4], v94[0]);
                    if (!(_DWORD)appended) {
                      goto LABEL_70;
                    }
                  }

                  else
                  {
                    uint64_t v60 = v94[0];
                    uint64_t v61 = sub_188301D10(a1, a2, v94[0], v93, (CFTypeRef *)&v84);
                    if ((_DWORD)v61)
                    {
                      uint64_t appended = v61;
                      if (v60) {
                        goto LABEL_60;
                      }
                      goto LABEL_61;
                    }

LABEL_70:
                    uint64_t appended = heim_array_append_value(*a10, v84);
                  }

                  heim_release(v84);
                  int v63 = v77;
                  if (!(_DWORD)appended) {
                    int v63 = v77 + 1;
                  }
                  int v77 = v63;
                  goto LABEL_59;
                }

                uint64_t appended = 569922LL;
                uint64_t v57 = a1;
                int v58 = 569922;
                uint64_t v59 = "SignerInfo have more then one messageDigest (signature)";
              }

              else
              {
LABEL_48:
                uint64_t appended = 569922LL;
                uint64_t v57 = a1;
                int v58 = 569922;
                uint64_t v59 = "SignerInfo have signed attributes but messageDigest (signature) is missing";
              }

LABEL_62:
          if (++v27 >= (unint64_t)v92)
          {
            if ((a3 & 4) == 0 || (_DWORD)v92)
            {
              if (!v77)
              {
                if (!(_DWORD)appended)
                {
LABEL_106:
                  uint64_t appended = 569890LL;
                  uint64_t v21 = "No signers where found";
LABEL_3:
                  uint64_t v22 = a1;
                  int v23 = appended;
LABEL_10:
                  hx509_set_error_string(v22, 0, v23, v21, v16, v17, v18, v19, v76);
                }

                break;
              }

LABEL_108:
              uint64_t appended = der_copy_oid();
              if ((_DWORD)appended) {
                hx509_clear_error_string(a1);
              }
              break;
            }

LABEL_107:
            heim_release(*a10);
            *a10 = 0LL;
            goto LABEL_108;
          }
        }
      }
    }
  }

uint64_t sub_1883055B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned int **)(a2 + 48);
  if (!v3 || !*v3) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  while (1)
  {
    uint64_t inited = hx509_cert_init_data( a1,  *(void *)(*((void *)v3 + 1) + v7 + 8),  *(void *)(*((void *)v3 + 1) + v7),  (CFTypeRef *)&v17);
    if ((_DWORD)inited) {
      break;
    }
    uint64_t v15 = hx509_certs_add(a1, a3, v17, v10, v11, v12, v13, v14);
    hx509_cert_free(v17);
    if ((_DWORD)v15) {
      return v15;
    }
    ++v8;
    int v3 = *(unsigned int **)(a2 + 48);
    v7 += 16LL;
    if (v8 >= *v3) {
      return 0LL;
    }
  }

  return inited;
}

uint64_t hx509_cms_create_signed_1( uint64_t a1, char a2, void *a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = 0LL;
  a11[1] = 0LL;
  uint64_t v24 = hx509_certs_init(a1, "MEMORY:certs", 0LL, 0LL, &v26);
  if (!(_DWORD)v24)
  {
    uint64_t v24 = hx509_certs_add(a1, v26, a7, v19, v20, v21, v22, v23);
    if (!(_DWORD)v24) {
      uint64_t v24 = hx509_cms_create_signed(a1, a2, a3, a4, a5, a6, v26, a8, a9, a10, (uint64_t)a11);
    }
    hx509_certs_free((const void **)&v26);
  }

  return v24;
}

uint64_t hx509_cms_create_signed( uint64_t a1, char a2, void *a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v53 = 0LL;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  uint64_t v52 = 0LL;
  __int128 v51 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  memset(v44, 0, sizeof(v44));
  if (a3) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = &asn1_oid_id_pkcs7_data;
  }
  *(void *)&__int128 v49 = a5;
  *((void *)&v49 + 1) = a4;
  *(void *)&__int128 v48 = a6;
  *((void *)&v48 + 1) = v16;
  *(void *)&__int128 v50 = a8;
  *((int8x8_t *)&v50 + 1) = vand_s8( (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a2), (uint32x2_t)0xFFFFFFFDFFFFFFFFLL),  (int8x8_t)0x100000001LL);
  if ((a2 & 0x10) != 0 || (uint64_t v17 = hx509_certs_init(a1, "MEMORY:certs", 0LL, 0LL, &v51), !(_DWORD)v17))
  {
    *((void *)&v51 + 1) = a9;
    uint64_t v52 = a10;
    LODWORD(v44[0]) = 3;
    der_copy_oid();
    if ((a2 & 1) == 0)
    {
      uint64_t v22 = (size_t *)calloc(1uLL, 0x10uLL);
      *((void *)&v45 + 1) = v22;
      if (!v22) {
        goto LABEL_27;
      }
      uint64_t v23 = v22;
      uint64_t v24 = malloc(a5);
      v23[1] = (size_t)v24;
      if (!v24) {
        goto LABEL_27;
      }
      memcpy(v24, a4, a5);
      *uint64_t v23 = a5;
    }

    if ((a2 & 4) == 0)
    {
      uint64_t v17 = hx509_certs_iter_f( a1,  a7,  (uint64_t (*)(uint64_t, uint64_t))sub_188305A00,  (uint64_t)v44,  v18,  v19,  v20,  v21);
      if ((_DWORD)v17) {
        goto LABEL_30;
      }
    }

    if ((_DWORD)v47)
    {
      uint64_t v25 = 0LL;
      while (1)
      {
        if (!DWORD2(v44[0])) {
          goto LABEL_37;
        }
        uint64_t v26 = 0LL;
        unint64_t v27 = 0LL;
        do
        {
          ++v27;
          v26 += 24LL;
        }

        while (v27 < DWORD2(v44[0]));
        if (DWORD2(v44[0]) == (_DWORD)v27)
        {
LABEL_37:
          uint64_t v28 = sub_188312DB8((unsigned int *)v44 + 2);
          if ((_DWORD)v28) {
            break;
          }
        }
      }

      uint64_t v17 = v28;
      goto LABEL_29;
    }

uint64_t sub_188305A00(uint64_t a1, uint64_t a2, const void *a3)
{
  size_t v69 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v67 = 0LL;
  memset(v68, 0, sizeof(v68));
  unint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  if (!_hx509_cert_private_key((uint64_t)a3))
  {
    uint64_t v11 = 569865LL;
    hx509_set_error_string(a1, 0, 569865, "Private key missing for signing", v6, v7, v8, v9, v62);
    return v11;
  }

  if (!*(void *)(a2 + 80))
  {
    uint64_t v12 = (char *)_hx509_cert_private_key((uint64_t)a3);
    uint64_t v11 = hx509_crypto_select(a1, 1, v12, *(void *)(a2 + 112), v68, v13, v14, v15);
    if ((_DWORD)v11) {
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v16 = (char *)realloc(*(void **)(a2 + 72), 160LL * (*(_DWORD *)(a2 + 64) + 1));
    if (!v16)
    {
      uint64_t v11 = 12LL;
      goto LABEL_15;
    }

    uint64_t v22 = v16;
    *(void *)(a2 + 72) = v16;
    int v23 = *(_DWORD *)(a2 + 64);
    uint64_t v24 = &v16[160 * v23];
    *(_OWORD *)uint64_t v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 3) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *((_OWORD *)v24 + 6) = 0u;
    *((_OWORD *)v24 + 7) = 0u;
    *((_OWORD *)v24 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
    *((_OWORD *)v24 + 9) = 0u;
    *(_DWORD *)uint64_t v24 = 1;
    uint64_t v25 = sub_188304DBC((uint64_t)a3, *(unsigned int *)(a2 + 120), (uint64_t)(v24 + 8), v17, v18, v19, v20, v21);
    if ((_DWORD)v25
      || (uint64_t v26 = &v22[160 * v23],
          *((void *)v26 + 13) = 0LL,
          unint64_t v27 = (_DWORD **)(v26 + 104),
          int v27[6] = 0LL,
          uint64_t v25 = copy_AlgorithmIdentifier(),
          (_DWORD)v25))
    {
      uint64_t v11 = v25;
LABEL_12:
      hx509_clear_error_string(a1);
      goto LABEL_13;
    }

    if (der_heim_oid_cmp())
    {
      uint64_t v29 = calloc(1uLL, 0x10uLL);
      const char *v27 = v29;
      if (!v29) {
        goto LABEL_39;
      }
      uint64_t v11 = sub_188306A9C(a1, 0LL, (uint64_t)v68, a2 + 96, 0LL, (uint64_t)v64);
      if ((_DWORD)v11) {
        goto LABEL_13;
      }
      size_t v30 = sub_188312EBC();
      size_t v71 = v30;
      uint64_t v31 = malloc(v30);
      uint64_t v72 = v31;
      if (!v31)
      {
        uint64_t v11 = 12LL;
        goto LABEL_32;
      }

      uint64_t v32 = v31;
      uint64_t v33 = sub_188312E9C();
      if ((_DWORD)v33)
      {
        uint64_t v11 = v33;
        free(v32);
LABEL_32:
        der_free_octet_string();
        goto LABEL_12;
      }

      der_free_octet_string();
      if (v67 != v30) {
        goto LABEL_54;
      }
      uint64_t v52 = sub_18830605C((void **)*v27 + 1, *v27, (uint64_t)&unk_18A21D000, (uint64_t *)&v71);
      if ((_DWORD)v52)
      {
LABEL_35:
        uint64_t v11 = v52;
        free(v32);
        goto LABEL_12;
      }

      size_t v53 = sub_188312E6C();
      size_t v71 = v53;
      char v54 = malloc(v53);
      uint64_t v72 = v54;
      if (!v54)
      {
LABEL_39:
        uint64_t v11 = 12LL;
        goto LABEL_13;
      }

      uint64_t v32 = v54;
      uint64_t v55 = sub_188312E4C();
      if ((_DWORD)v55)
      {
        uint64_t v11 = v55;
        free(v32);
        goto LABEL_13;
      }

      if (v67 != v53) {
        goto LABEL_54;
      }
      uint64_t v52 = sub_18830605C((void **)*v27 + 1, *v27, (uint64_t)&unk_18A21CFF0, (uint64_t *)&v71);
      if ((_DWORD)v52) {
        goto LABEL_35;
      }
      uint64_t v60 = *v27;
      v63[1] = *((void *)*v27 + 1);
      LODWORD(v63[0]) = *v60;
      size_t v69 = sub_188312FD4();
      uint64_t v70 = malloc(v69);
      if (!v70)
      {
        uint64_t v11 = 12LL;
        goto LABEL_12;
      }

      uint64_t v61 = sub_188312FB4();
      if ((_DWORD)v61)
      {
        uint64_t v11 = v61;
        free(v70);
        uint64_t v70 = 0LL;
        goto LABEL_12;
      }

      if (v67 != v69) {
LABEL_54:
      }
        sub_188303AB8("internal ASN.1 encoder error", v45, v46, v47, v48, v49, v50, v51, v62);
    }

    else
    {
      uint64_t v34 = *(void **)(a2 + 104);
      size_t v69 = *(void *)(a2 + 96);
      uint64_t v70 = v34;
    }

    uint64_t v35 = (char *)_hx509_cert_private_key((uint64_t)a3);
    uint64_t v11 = hx509_crypto_select(a1, 2, v35, *(void *)(a2 + 112), v63, v36, v37, v38);
    if (!(_DWORD)v11)
    {
      uint64_t v39 = _hx509_cert_private_key((uint64_t)a3);
      uint64_t v11 = sub_188306A9C( a1,  v39,  (uint64_t)v63,  (uint64_t)&v69,  (uint64_t)&v22[160 * v23 + 112],  (uint64_t)&v22[160 * v23 + 136]);
      free_AlgorithmIdentifier();
      if (!(_DWORD)v11)
      {
        ++*(_DWORD *)(a2 + 64);
        if (*(void *)(a2 + 144) && !*(_DWORD *)(a2 + 124))
        {
          time_t v56 = time(0LL);
          sub_18830152C(a1, 1, v56, *(void *)(a2 + 136), 0, a3, *(void *)(a2 + 144), (uint64_t *)&v65);
        }

        else
        {
          sub_188301450(a1, (uint64_t *)&v65, a3);
        }

        if (!v65)
        {
          uint64_t v11 = 0LL;
          goto LABEL_15;
        }

        uint64_t v57 = 0LL;
        unsigned int v58 = 1;
        while (1)
        {
          uint64_t v11 = hx509_certs_add(a1, *(void *)(a2 + 128), *(void *)(v66 + 8 * v57), v40, v41, v42, v43, v44);
          if ((_DWORD)v11) {
            goto LABEL_5;
          }
          uint64_t v57 = v58;
          if (v65 <= v58++) {
            goto LABEL_15;
          }
        }
      }
    }

uint64_t sub_188305EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void ***)(a2 + 48);
  uint64_t v7 = *(unsigned int *)v6;
  uint64_t v8 = realloc(v6[1], 16LL * (v7 + 1));
  if (!v8) {
    return 12LL;
  }
  *(void *)(*(void *)(a2 + 48) + 8LL) = v8;
  uint64_t result = hx509_cert_binary(a1, a3, (uint64_t)v8 + 16 * v7);
  if (!(_DWORD)result) {
    ++**(_DWORD **)(a2 + 48);
  }
  return result;
}

uint64_t hx509_cms_decrypt_encrypted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  *a6 = 0LL;
  a6[1] = 0LL;
  v23[0] = 0LL;
  v23[1] = 0LL;
  uint64_t v9 = sub_188313054();
  if ((_DWORD)v9)
  {
    uint64_t v14 = v9;
    hx509_set_error_string(a1, 0, v9, "Failed to decode CMSEncryptedData", v10, v11, v12, v13, v20);
  }

  else
  {
    if (v22)
    {
      uint64_t v15 = der_copy_oid();
      if ((_DWORD)v15)
      {
        uint64_t v14 = v15;
        hx509_clear_error_string(a1);
      }

      else if (v21[2])
      {
        uint64_t v14 = sub_188307C28(a1, a2, (uint64_t)v21, v22, v23, v16, v17, v18);
        if ((_DWORD)v14)
        {
          if (v23[1]) {
            free(v23[1]);
          }
        }

        else
        {
          *(_OWORD *)a6 = *(_OWORD *)v23;
        }
      }

      else
      {
        hx509_clear_error_string(a1);
        uint64_t v14 = 569866LL;
      }
    }

    else
    {
      uint64_t v14 = 569891LL;
      hx509_set_error_string(a1, 0, 569891, "No content in EncryptedData", v10, v11, v12, v13, v20);
    }

    sub_188313074();
  }

  return v14;
}

uint64_t sub_18830605C(void **a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = realloc(*a1, 32LL * (*a2 + 1));
  if (v7)
  {
    *a1 = v7;
    uint64_t result = der_copy_oid();
    if ((_DWORD)result) {
      return result;
    }
    *((_DWORD *)*a1 + 8 * *a2 + 4) = 1;
    uint64_t v9 = calloc(1uLL, 0x10uLL);
    uint64_t v10 = *a2;
    *((void *)*a1 + 4 * v10 + 3) = v9;
    uint64_t v11 = *((void *)*a1 + 4 * v10 + 3);
    if (v11)
    {
      uint64_t result = 0LL;
      uint64_t v12 = *a4;
      *(void *)(v11 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a4[1];
      **((void **)*a1 + 4 * v10 + 3) = v12;
      *a2 = v10 + 1;
      return result;
    }

    der_free_oid();
  }

  return 12LL;
}

uint64_t sub_18830612C(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  uint64_t v6 = calloc(1uLL, 0x28uLL);
  if (v6)
  {
    uint64_t v11 = v6;
    *uint64_t v6 = a2;
    uint64_t v12 = (const void **)(v6 + 1);
    uint64_t v13 = hx509_certs_init(a1, "MEMORY:collector-unenvelop-cert", 0LL, 0LL, v6 + 1);
    if ((_DWORD)v13)
    {
      uint64_t v14 = v13;
    }

    else
    {
      v11[3] = 0LL;
      v11[4] = 0LL;
      uint64_t v14 = hx509_certs_init(a1, "MEMORY:collector-tmp-store", 0LL, 0LL, v11 + 2);
      if (!(_DWORD)v14)
      {
        *a3 = v11;
        return v14;
      }

      hx509_certs_free(v12);
    }

    free(v11);
  }

  else
  {
    uint64_t v14 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v16);
  }

  return v14;
}

uint64_t sub_18830620C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_188306214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_18830621C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (CFTypeRef *)calloc(1uLL, 0x30uLL);
  if (!v12) {
    return 12LL;
  }
  uint64_t v13 = v12;
  uint64_t v14 = realloc(*(void **)(a2 + 24), 8LL * *(void *)(a2 + 32) + 8);
  if (!v14)
  {
    free(v13);
    uint64_t v20 = 12LL;
    hx509_set_error_string(a1, 0, 12, "Out of memory", v22, v23, v24, v25, v29);
    return v20;
  }

  *(void *)(a2 + 24) = v14;
  uint64_t v15 = copy_AlgorithmIdentifier();
  if (!(_DWORD)v15)
  {
    if (a4)
    {
      v13[3] = a4;
    }

    else
    {
      uint64_t v20 = sub_188306E58(a1, a3, a5[1], *a5, 1LL, v13 + 3);
      if ((_DWORD)v20) {
        goto LABEL_6;
      }
    }

    if (a6)
    {
      uint64_t v26 = der_copy_octet_string();
      if ((_DWORD)v26)
      {
        uint64_t v20 = v26;
        uint64_t v21 = "Failed to copy localKeyId";
        goto LABEL_5;
      }
    }

    else
    {
      v13[4] = 0LL;
      v13[5] = 0LL;
    }

    uint64_t v20 = 0LL;
    uint64_t v27 = *(void *)(a2 + 32);
    *(void *)(*(void *)(a2 + 24) + 8 * v27) = v13;
    *(void *)(a2 + 32) = v27 + 1;
    return v20;
  }

  uint64_t v20 = v15;
  uint64_t v21 = "Failed to copy AlgorithmIdentifier";
LABEL_5:
  hx509_set_error_string(a1, 0, v20, v21, v16, v17, v18, v19, v29);
LABEL_6:
  sub_188306364(v13);
  return v20;
}

void sub_188306364(const void **a1)
{
  if (a1[3]) {
    hx509_private_key_free(a1 + 3);
  }
  der_free_octet_string();
  free(a1);
}

uint64_t sub_1883063A0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *a3 = 0LL;
  uint64_t v11 = hx509_certs_init(a1, "MEMORY:collector-store", 0LL, 0LL, &v39);
  if (!(_DWORD)v11)
  {
    uint64_t v12 = hx509_certs_merge(a1, v39, a2[2], v6, v7, v8, v9, v10);
    if ((_DWORD)v12)
    {
      uint64_t v11 = v12;
      hx509_certs_free((const void **)&v39);
      return v11;
    }

    if (!a2[4])
    {
LABEL_28:
      uint64_t v11 = 0LL;
      *a3 = v39;
      return v11;
    }

    uint64_t v17 = 0LL;
    while (1)
    {
      uint64_t v18 = *(void *)(a2[3] + 8 * v17);
      if (!*(void *)(v18 + 32)) {
        break;
      }
      uint64_t v19 = v39;
      sub_1883031CC((uint64_t)v40);
      LODWORD(v40[0]) |= 0x10000u;
      v40[5] = v18 + 32;
      uint64_t v29 = *(void *)(v18 + 24);
      if (v29) {
        _hx509_cert_set_key(v41[0], v29);
      }
      hx509_cert_free(v41[0]);
LABEL_25:
    }

    hx509_set_error_string(a1, 0, 569964, "No local key attribute on private key", v13, v14, v15, v16, v39);
LABEL_12:
    uint64_t v30 = *(void *)(a2[3] + 8 * v17);
    if (*(void *)(v30 + 24))
    {
      uint64_t v31 = v39;
      if (!hx509_certs_start_seq(a1, v39, (uint64_t)v40, v24, v25, v26, v27, v28))
      {
        v41[0] = 0LL;
        if (hx509_certs_next_cert(a1, v31, v40[0], v41) || (uint64_t v32 = v41[0]) == 0)
        {
LABEL_23:
          hx509_certs_end_seq(a1, v31, v40[0]);
          hx509_clear_error_string(a1);
        }

        else
        {
          while (1)
          {
            uint64_t v33 = _hx509_cert_private_key(v32);
            uint64_t v34 = v41[0];
            if (!v33)
            {
              unsigned int v35 = sub_188307C5C(v41[0], *(void *)(v30 + 24));
              uint64_t v34 = v41[0];
              if (v35) {
                break;
              }
            }

            hx509_cert_free(v34);
            int cert = hx509_certs_next_cert(a1, v31, v40[0], v41);
            uint64_t v32 = v41[0];
            if (cert) {
              BOOL v37 = 1;
            }
            else {
              BOOL v37 = v41[0] == 0;
            }
            if (v37) {
              goto LABEL_23;
            }
          }

          _hx509_cert_set_key(v41[0], *(void *)(v30 + 24));
          hx509_cert_free(v41[0]);
          hx509_certs_end_seq(a1, v31, v40[0]);
        }
      }
    }

    else
    {
      hx509_set_error_string(a1, 0, 569865, "No private key to compare with", v25, v26, v27, v28, v39);
    }

    goto LABEL_25;
  }

  return v11;
}

uint64_t sub_1883065E8(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = *(uint64_t **)(a2 + 24);
    do
    {
      uint64_t v9 = *v8++;
      if (*(void *)(v9 + 24)) {
        ++v7;
      }
      --v6;
    }

    while (v6);
    size_t v10 = v7 + 1;
  }

  else
  {
    size_t v10 = 1LL;
  }

  uint64_t v11 = calloc(v10, 8uLL);
  *a3 = v11;
  if (v11)
  {
    uint64_t v16 = *(void *)(a2 + 32);
    if (v16)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v19 = *(void *)(a2 + 24);
      do
      {
        uint64_t v20 = *(void *)(*(void *)(v19 + 8 * v18) + 24LL);
        if (v20)
        {
          *(void *)(*a3 + 8 * v17++) = v20;
          uint64_t v19 = *(void *)(a2 + 24);
          *(void *)(*(void *)(v19 + 8 * v18) + 24LL) = 0LL;
        }

        ++v18;
      }

      while (v16 != v18);
      uint64_t v11 = (void *)*a3;
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    uint64_t v21 = 0LL;
    v11[v17] = 0LL;
  }

  else
  {
    uint64_t v21 = 12LL;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v12, v13, v14, v15, v23);
  }

  return v21;
}

void sub_1883066D8(char *a1)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = (const void **)(a1 + 8);
  if (v3) {
    hx509_certs_free(v2);
  }
  if (*((void *)a1 + 2)) {
    hx509_certs_free((const void **)a1 + 2);
  }
  if (*((void *)a1 + 4))
  {
    unint64_t v4 = 0LL;
    do
      sub_188306364(*(const void ***)(*((void *)a1 + 3) + 8 * v4++));
    while (v4 < *((void *)a1 + 4));
  }

  uint64_t v5 = (void *)*((void *)a1 + 3);
  if (v5) {
    free(v5);
  }
  free(a1);
}

void *sub_188306748(const void **a1)
{
  uint64_t v2 = sub_18831533C(a1[1], *(unsigned int *)a1, 0LL);
  sub_18831541C((uint64_t)v2, *((_DWORD *)a1 + 4));
  return v2;
}

uint64_t sub_188306784()
{
  uint64_t v0 = 0LL;
  while (1)
  {
    uint64_t v1 = *(uint64_t *)((char *)&off_18A21E5D8 + v0);
    if (*(void *)(v1 + 16))
    {
    }

    v0 += 8LL;
    if (v0 == 16) {
      return 0LL;
    }
  }

  return v1;
}

uint64_t sub_1883067E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v6 = (&off_18A21E6A0)[v5];
    if (++v5 == 15)
    {
      hx509_clear_error_string(a1);
      return 569861LL;
    }
  }

  uint64_t v12 = v6[6];
  if (v12) {
    BOOL v13 = (uint64_t)v12 < a3;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    return 0LL;
  }
  uint64_t v11 = 569933LL;
  hx509_set_error_string(a1, 0, 569933, "Algorithm %s has passed it best before date", v7, v8, v9, v10, (char)*v6);
  return v11;
}

uint64_t sub_1883068A8(uint64_t a1)
{
  uint64_t v2 = 0LL;
  while (1)
  {
    uint64_t v3 = (&off_18A21E6A0)[v2];
    if (++v2 == 15)
    {
      hx509_clear_error_string(a1);
      return 569861LL;
    }
  }

  if (((_BYTE)v3[5] & 4) != 0) {
    return 0LL;
  }
  uint64_t v8 = 569933LL;
  hx509_set_error_string(a1, 0, 569933, "Algorithm %s not trusted for self signatures", v4, v5, v6, v7, (char)*v3);
  return v8;
}

uint64_t hx509_verify_signature_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    uint64_t v9 = sub_188300994(a2);
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v10 = 0LL;
  while (1)
  {
    uint64_t v11 = (&off_18A21E6A0)[v10];
    if (++v10 == 15)
    {
      uint64_t v12 = 569861LL;
      hx509_clear_error_string(a1);
      return v12;
    }
  }

  int v13 = *((_DWORD *)v11 + 10);
  if (v9)
  {
    if ((v13 & 1) == 0)
    {
      hx509_clear_error_string(a1);
      return 569924LL;
    }

    if (v11[3] && der_heim_oid_cmp())
    {
      hx509_clear_error_string(a1);
      return 569862LL;
    }
  }

  else if ((v13 & 2) != 0)
  {
    hx509_clear_error_string(a1);
    return 569928LL;
  }

  return ((uint64_t (*)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t))v11[8])(a1, v11, v9, a3, a4, a5);
}

uint64_t sub_188306A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0LL;
  while (1)
  {
    int v13 = (&off_18A21E6A0)[v12];
    if (++v12 == 15)
    {
      uint64_t v18 = 569861LL;
      hx509_set_error_string(a1, 0, 569861, "algorithm no supported", v14, v15, v16, v17, v20);
      return v18;
    }
  }

  if (a2 && ((_BYTE)v13[5] & 1) == 0)
  {
    hx509_set_error_string(a1, 0, 569861, "algorithm provides no conf", v14, v15, v16, v17, v20);
    return 569924LL;
  }

  return ((uint64_t (*)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13[9])( a1,  v13,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_188306BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t result = sub_188306A9C(a1, a2, a3, a4, a5, (uint64_t)v9);
  if (!(_DWORD)result)
  {
    uint64_t v8 = v9[1];
    *a6 = 8LL * v9[0];
    a6[1] = v8;
  }

  return result;
}

uint64_t sub_188306BF0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = 0LL;
  a5[1] = 0LL;
  uint64_t v32 = *(void *)(a3 + 216);
  uint64_t v8 = sub_188316D7C(0LL, &v32);
  if (v8)
  {
    int v13 = v8;
    int v14 = sub_188316744((uint64_t)v8);
    uint64_t v15 = malloc(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      int v17 = sub_188316764(*a2, *((void *)a2 + 1), (uint64_t)v15, (uint64_t)v13);
      sub_188316500(v13);
      if (v17 <= 0)
      {
        uint64_t v25 = 569929LL;
        free(v16);
        hx509_set_error_string(a1, 0, 569929, "RSA public encrypt failed with %d", v27, v28, v29, v30, v17);
        return v25;
      }

      if (v17 > v14) {
        sub_188303AB8("internal rsa decryption failure: ret > tosize", v18, v19, v20, v21, v22, v23, v24, v31);
      }
      *a5 = v17;
      a5[1] = v16;
      der_free_octet_string();
    }

    else
    {
      sub_188316500(v13);
    }
  }

  uint64_t v25 = 12LL;
  hx509_set_error_string(a1, 0, 12, "out of memory", v9, v10, v11, v12, v31);
  return v25;
}

uint64_t sub_188306D3C( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0LL;
  a5[1] = 0LL;
  uint64_t v9 = *(void *)(a4 + 56);
  if (!v9)
  {
    uint64_t v24 = 569865LL;
    uint64_t v25 = "Private RSA key missing";
    uint64_t v26 = a1;
    int v27 = 569865;
LABEL_9:
    hx509_set_error_string(v26, 0, v27, v25, (uint64_t)a5, a6, a7, a8, v29);
    return v24;
  }

  int v13 = sub_188316744(v9);
  *a5 = v13;
  int v14 = malloc(v13);
  a5[1] = v14;
  if (!v14)
  {
    uint64_t v25 = "out of memory";
    uint64_t v24 = 12LL;
    uint64_t v26 = a1;
    int v27 = 12;
    goto LABEL_9;
  }

  int v15 = sub_188316770(*a2, *((void *)a2 + 1), (uint64_t)v14, *(void *)(a4 + 56));
  char v23 = v15;
  if (v15 <= 0)
  {
    der_free_octet_string();
    uint64_t v24 = 569932LL;
    char v29 = v23;
    uint64_t v25 = "Failed to decrypt using private key: %d";
    uint64_t v26 = a1;
    int v27 = 569932;
    goto LABEL_9;
  }

  uint64_t v24 = 0LL;
  *a5 = v15;
  return v24;
}

uint64_t sub_188306E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  *a6 = 0LL;
  uint64_t v12 = sub_188306784();
  if (v12)
  {
    uint64_t v18 = v12;
    uint64_t v19 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_1883072C0, v13, v14, v15, v16, v17);
    *a6 = (CFTypeRef)v19;
    if (v19)
    {
      *(void *)(v19 + 64) = v18;
      *((void *)*a6 + 7) = 0LL;
      *((_DWORD *)*a6 + 12) = *(_DWORD *)v18;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, a2, a3, a4, a5);
      if ((_DWORD)v24 && *a6)
      {
        heim_release(*a6);
        *a6 = 0LL;
      }
    }

    else
    {
      uint64_t v24 = 12LL;
      hx509_set_error_string(a1, 0, 12, "out of memory", v20, v21, v22, v23, v26);
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 569861LL;
  }

  return v24;
}

uint64_t sub_188306F58( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_1883072C0, a4, a5, a6, a7, a8);
  *(void *)a1 = v11;
  if (!v11) {
    return 12LL;
  }
  *(void *)(v11 + 64) = a2;
  *(void *)(*(void *)a1 + 56LL) = a3;
  if (a2) {
    int v12 = *a2;
  }
  else {
    int v12 = 2;
  }
  uint64_t result = 0LL;
  *(_DWORD *)(*(void *)a1 + 48LL) = v12;
  return result;
}

uint64_t hx509_private_key_free(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      heim_release(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t hx509_private_key2SPKI( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v8 + 32);
    if (v9) {
      return v9();
    }
  }

  hx509_set_error_string(a1, 0, 569967, "Private key have no key2SPKI function", a5, a6, a7, a8, vars0);
  return 569967LL;
}

uint64_t _hx509_generate_private_key_init(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0LL;
  if (der_heim_oid_cmp())
  {
    uint64_t v10 = "private key not an RSA key";
    uint64_t v11 = 22LL;
    uint64_t v12 = a1;
    int v13 = 22;
  }

  else
  {
    uint64_t v14 = calloc(1uLL, 0x18uLL);
    *a3 = v14;
    if (v14)
    {
      uint64_t v11 = 0LL;
      void *v14 = a2;
      return v11;
    }

    uint64_t v10 = "out of memory";
    uint64_t v11 = 12LL;
    uint64_t v12 = a1;
    int v13 = 12;
  }

  hx509_set_error_string(v12, 0, v13, v10, v6, v7, v8, v9, v16);
  return v11;
}

uint64_t _hx509_generate_private_key_is_ca(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 1;
  return 0LL;
}

uint64_t _hx509_generate_private_key_bits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = a3;
  return 0LL;
}

void _hx509_generate_private_key_free(void **a1)
{
  *a1 = 0LL;
}

uint64_t _hx509_generate_private_key(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  *a3 = 0LL;
  uint64_t v6 = sub_188306784();
  if (v6)
  {
    uint64_t v12 = v6;
    uint64_t v13 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_1883072C0, v7, v8, v9, v10, v11);
    *a3 = (CFTypeRef)v13;
    if (v13)
    {
      *(void *)(v13 + 64) = v12;
      *((void *)*a3 + 7) = 0LL;
      *((_DWORD *)*a3 + 12) = *(_DWORD *)v12;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(a1, a2);
      if ((_DWORD)v18 && *a3)
      {
        heim_release(*a3);
        *a3 = 0LL;
      }
    }

    else
    {
      uint64_t v18 = 12LL;
      hx509_set_error_string(a1, 0, 12, "out of memory", v14, v15, v16, v17, v20);
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 569861LL;
  }

  return v18;
}

void *hx509_signature_sha512()
{
  return &unk_18A21E428;
}

void *hx509_signature_sha384()
{
  return &unk_18A21E440;
}

void *hx509_signature_sha256()
{
  return &unk_18A21E458;
}

void *hx509_signature_sha1()
{
  return &unk_18A21E470;
}

void *hx509_signature_md5()
{
  return &unk_18A21E488;
}

void *sub_188307248()
{
  return &unk_18A21E4A0;
}

void *hx509_signature_rsa_with_sha512()
{
  return &unk_18A21E4E8;
}

void *hx509_signature_rsa_with_sha384()
{
  return &unk_18A21E500;
}

void *hx509_signature_rsa_with_sha256()
{
  return &unk_18A21E518;
}

void *hx509_signature_rsa_with_sha1()
{
  return &unk_18A21E530;
}

void *hx509_signature_rsa_with_md5()
{
  return &unk_18A21E548;
}

void *hx509_signature_rsa()
{
  return &unk_18A21E560;
}

void *hx509_crypto_des_rsdi_ede3_cbc()
{
  return &unk_18A21E590;
}

void *hx509_crypto_aes128_cbc()
{
  return &unk_18A21E5A8;
}

void *hx509_crypto_aes256_cbc()
{
  return &unk_18A21E5C0;
}

void sub_1883072C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 48);
  if (v8 == 3)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 56);
    if (v10) {
      sub_188317D28(v10);
    }
  }

  else if (v8 != 2)
  {
    if (v8 != 1) {
      sub_188303AB8("unsupported keytype %d", a2, a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 48));
    }
    uint64_t v9 = *(_DWORD **)(a1 + 56);
    if (v9) {
      sub_188316500(v9);
    }
  }

uint64_t sub_188307330(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 64) + 8LL);
}

void sub_18830733C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  if (v4) {
    sub_188316500(v4);
  }
  *(_DWORD *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 1;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 32) = &off_18A21E5F0;
  *(void *)(a1 + memset(&v6[2], 0, 40) = &unk_18A220418;
}

void sub_188307388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  if (v4) {
    sub_188317D28(v4);
  }
  *(_DWORD *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 3;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 32) = &off_18A21E648;
  *(void *)(a1 + memset(&v6[2], 0, 40) = &unk_18A220528;
}

uint64_t sub_1883073D4(uint64_t a1)
{
  uint64_t v6 = der_copy_oid();
  if ((_DWORD)v6) {
    hx509_set_error_string(a1, 0, v6, "malloc out of memory", v2, v3, v4, v5, v8);
  }
  return v6;
}

BOOL sub_188307424(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 64) + 40LL) != 0LL;
}

uint64_t sub_188307438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a2 + 64) + 40LL);
  if (v2) {
    return v2();
  }
  hx509_clear_error_string(a1);
  return 569967LL;
}

char *hx509_crypto_enctype_by_name(char *a1)
{
  uint64_t v2 = 0LL;
  while (strcasecmp(a1, (&off_18A21E720)[v2]))
  {
    v2 += 7LL;
    if (v2 == 35) {
      return 0LL;
    }
  }

  return (&off_18A21E720)[v2 + 2];
}

uint64_t hx509_crypto_init(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v6 = 0LL;
  *a4 = 0LL;
  while (der_heim_oid_cmp())
  {
    v6 += 7LL;
    if (v6 == 35)
    {
      uint64_t v11 = 569866LL;
      hx509_set_error_string(a1, 0, 569866, "Algorithm not supported", v7, v8, v9, v10, v14);
      return v11;
    }
  }

  uint64_t v12 = calloc(1uLL, 0x48uLL);
  *a4 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + 2) = 4;
    _OWORD v12[2] = &(&off_18A21E720)[v6];
    (*a4)[3] = ((uint64_t (*)(void))(&off_18A21E720)[v6 + 4])();
    hx509_crypto_destroy(*a4);
    *a4 = 0LL;
  }

  hx509_clear_error_string(a1);
  return 12LL;
}

void hx509_crypto_destroy(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[8];
  if (v4) {
    free(v4);
  }
  der_free_oid();
  a1[8] = 0LL;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  free(a1);
}

const char *hx509_crypto_provider()
{
  return "unknown";
}

uint64_t hx509_crypto_set_key_name()
{
  return 0LL;
}

uint64_t sub_18830762C(uint64_t result)
{
  *(_DWORD *)(result + 8) |= 1u;
  return result;
}

uint64_t hx509_crypto_set_key_data(uint64_t *a1, const void *a2, size_t a3)
{
  if (hc_EVP_CIPHER_key_length(a1[3]) > a3) {
    return 569920LL;
  }
  uint64_t v7 = (void *)a1[5];
  if (v7)
  {
    free(v7);
    a1[4] = 0LL;
  }

  uint64_t v8 = malloc(a3);
  a1[5] = (uint64_t)v8;
  if (!v8) {
    return 12LL;
  }
  memcpy(v8, a2, a3);
  uint64_t result = 0LL;
  a1[4] = a3;
  return result;
}

uint64_t hx509_crypto_set_random_key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    free(v5);
    void *v4 = 0LL;
  }

  size_t v6 = hc_EVP_CIPHER_key_length(*(void *)(a1 + 24));
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = malloc(v6);
  *(void *)(a1 + memset(&v6[2], 0, 40) = v7;
  if (v7)
  {
    if (CCRandomCopyBytes())
    {
      free(*(void **)(a1 + 40));
      void *v4 = 0LL;
      v4[1] = 0LL;
      return 569920LL;
    }

    else if (a2)
    {
      return der_copy_octet_string();
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    void *v4 = 0LL;
    return 12LL;
  }

uint64_t hx509_crypto_set_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 16) + 48LL))(a1, a3, a2);
}

uint64_t hx509_crypto_get_params(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 40LL))();
}

uint64_t sub_18830779C(uint64_t a1, uint64_t a2)
{
  size_t v3 = hc_EVP_CIPHER_iv_length(*(void *)(a1 + 24));
  *(void *)a2 = v3;
  uint64_t v4 = malloc(v3);
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v4;
  if (v4)
  {
    uint64_t result = CCRandomCopyBytes();
    if ((_DWORD)result)
    {
      free(*(void **)(a2 + 8));
      *(void *)a2 = 0LL;
      *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
      return 569920LL;
    }
  }

  else
  {
    *(void *)a2 = 0LL;
    return 12LL;
  }

  return result;
}

uint64_t hx509_crypto_encrypt(uint64_t a1, const void *a2, size_t a3, uint64_t a4, void ***a5)
{
  v18[21] = *MEMORY[0x1895F89C0];
  *a5 = 0LL;
  if ((*(_BYTE *)(*(void *)(a1 + 16) + 8LL) & 1) == 0 || (*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (hc_EVP_CIPHER_iv_length(*(void *)(a1 + 24)) != *(void *)a4) {
      sub_188318E54();
    }
    hc_EVP_CIPHER_CTX_init((uint64_t)v18);
    if (hc_EVP_CipherInit_ex( (uint64_t)v18,  *(void *)(a1 + 24),  0,  *(void *)(a1 + 40),  *(void **)(a4 + 8),  1LL) == 1)
    {
      uint64_t v11 = (void **)calloc(1uLL, 0x10uLL);
      *a5 = v11;
      if (!v11)
      {
        uint64_t v10 = 12LL;
LABEL_29:
        hc_EVP_CIPHER_CTX_cleanup(v18);
        return v10;
      }

      if ((*(_BYTE *)(a1 + 8) & 6) == 0) {
        sub_188318E2C();
      }
      unint64_t v12 = hc_EVP_CIPHER_block_size(*(void *)(a1 + 24));
      int v13 = *(_DWORD *)(a1 + 8);
      if ((v13 & 2) != 0)
      {
        if (v12 != 1 && a3 % v12) {
          return 569893LL;
        }
        size_t v14 = 0LL;
      }

      else
      {
        size_t v14 = 0LL;
        if ((v13 & 4) != 0 && v12 != 1) {
          size_t v14 = v12 + a3 / v12 * v12 - a3;
        }
      }

      uint64_t v16 = *a5;
      **a5 = (void *)(v14 + a3);
      v16[1] = malloc(v14 + a3);
      uint64_t v15 = *a5;
      if (!(*a5)[1])
      {
        uint64_t v10 = 12LL;
        goto LABEL_26;
      }

      memcpy((*a5)[1], a2, a3);
      if (v14) {
        memset((char *)(*a5)[1] + a3, v14, v14);
      }
      if (hc_EVP_Cipher((uint64_t)v18) == 1)
      {
        uint64_t v10 = 0LL;
        goto LABEL_29;
      }
    }

    else
    {
      hc_EVP_CIPHER_CTX_cleanup(v18);
    }

    uint64_t v10 = 569920LL;
    uint64_t v15 = *a5;
    if (!*a5) {
      goto LABEL_29;
    }
LABEL_26:
    if (v15[1])
    {
      free(v15[1]);
      uint64_t v15 = *a5;
    }

    free(v15);
    *a5 = 0LL;
    goto LABEL_29;
  }

  return 569933LL;
}

uint64_t hx509_crypto_decrypt(uint64_t a1, uint64_t a2, size_t a3, void *a4, size_t *a5)
{
  v20[21] = *MEMORY[0x1895F89C0];
  *a5 = 0LL;
  a5[1] = 0LL;
  if ((*(_BYTE *)(*(void *)(a1 + 16) + 8LL) & 1) != 0 && (*(_BYTE *)(a1 + 8) & 1) == 0) {
    return 569933LL;
  }
  if (a4)
  {
    uint64_t v10 = (void *)a4[1];
  }

  else
  {
    if (!*(void *)(a1 + 40)) {
      return 569920LL;
    }
    uint64_t v10 = 0LL;
  }

  hc_EVP_CIPHER_CTX_init((uint64_t)v20);
  if (hc_EVP_CipherInit_ex((uint64_t)v20, *(void *)(a1 + 24), 0, *(void *)(a1 + 40), v10, 0LL) != 1)
  {
    hc_EVP_CIPHER_CTX_cleanup(v20);
    return 569920LL;
  }

  *a5 = a3;
  uint64_t v11 = malloc(a3);
  a5[1] = (size_t)v11;
  if (!v11)
  {
    hc_EVP_CIPHER_CTX_cleanup(v20);
    *a5 = 0LL;
    return 12LL;
  }

  int v12 = hc_EVP_Cipher((uint64_t)v20);
  uint64_t v9 = 569920LL;
  if (v12 == 1)
  {
    hc_EVP_CIPHER_CTX_cleanup(v20);
    if ((*(_BYTE *)(a1 + 8) & 4) != 0 && (unint64_t)hc_EVP_CIPHER_block_size(*(void *)(a1 + 24)) >= 2)
    {
      int v13 = hc_EVP_CIPHER_block_size(*(void *)(a1 + 24));
      size_t v15 = *a5;
      size_t v14 = (char *)a5[1];
      uint64_t v17 = &v14[v15 - 1];
      uint64_t v18 = *v17;
      if ((int)v18 > v13)
      {
LABEL_23:
        free(v14);
LABEL_24:
        *a5 = 0LL;
        a5[1] = 0LL;
        return 569893LL;
      }

      *a5 = v15 - v18;
      if ((_DWORD)v18)
      {
        int v19 = v18;
        while (*v17 == (_DWORD)v18)
        {
          uint64_t v9 = 0LL;
          --v17;
          if (!--v19) {
            return v9;
          }
        }

uint64_t sub_188307C28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0LL;
  a5[1] = 0LL;
  hx509_set_error_string(a1, 0, 569866, "String to key algorithm not supported", (uint64_t)a5, a6, a7, a8, vars0);
  return 569866LL;
}

void *sub_188307C5C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) != 1) {
    return 0LL;
  }
  size_t v6 = *(void **)(a2 + 56);
  if (!v6 || !v6[6] || !v6[7] || !v6[8]) {
    return 0LL;
  }
  sub_188300994(a1);
  uint64_t result = sub_188316448();
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = sub_18831533C(v12, __size, 0LL);
  sub_18831541C((uint64_t)v8, v13);
  v7[4] = v8;
  uint64_t v9 = sub_18831533C(v15, v14, 0LL);
  sub_18831541C((uint64_t)v9, v16);
  v7[5] = v9;
  sub_188313C70();
  void v7[6] = sub_1883152B0();
  v7[7] = sub_1883152B0();
  _OWORD v7[8] = sub_1883152B0();
  v7[9] = sub_1883152B0();
  v7[10] = sub_1883152B0();
  v7[11] = sub_1883152B0();
  if (!v7[4] || !v7[5] || !v7[6] || !v7[7] || !v7[8] || !v7[9] || !v7[10])
  {
LABEL_13:
    sub_188316500(v7);
    return 0LL;
  }

  BOOL v10 = sub_188316644(v7);
  sub_188316500(v7);
  return (void *)v10;
}

uint64_t hx509_crypto_select( uint64_t a1, int a2, char *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1;
  *a5 = 0LL;
  a5[1] = 0LL;
  a5[2] = 0LL;
  if (a2 == 4)
  {
    char v23 = 0;
    int v11 = 1024;
    if (a4)
    {
LABEL_14:
      int v13 = sub_188308114(a3);
      if (*(void *)(a4 + 16))
      {
        unsigned int v14 = v13;
        unint64_t v15 = 0LL;
        int v16 = &off_18A21E648;
        uint64_t v22 = v10;
LABEL_16:
        uint64_t v17 = 1u;
        while (((_DWORD)v16[5] & v11) == 0
             || der_heim_oid_cmp()
             || v14 && v16[3] && der_heim_oid_cmp())
        {
          int v16 = (&off_18A21E6A0)[v17++];
          if (v17 == 16)
          {
            if ((v23 & 1) != 0) {
              goto LABEL_30;
            }
            uint64_t v18 = 0LL;
            int v19 = (void (**)(void))&qword_18A21E738;
            while (der_heim_oid_cmp())
            {
              ++v18;
              v19 += 7;
              if (v18 == 5) {
                goto LABEL_30;
              }
            }

            if (!v18 || v18 == 3)
            {
LABEL_30:
              ++v15;
              uint64_t v10 = v22;
              int v16 = &off_18A21E648;
              if (v15 < *(void *)(a4 + 16)) {
                goto LABEL_16;
              }
              break;
            }

            (*v19)();
            uint64_t v12 = copy_AlgorithmIdentifier();
            if (!(_DWORD)v12) {
              return v12;
            }
            uint64_t v20 = v22;
            goto LABEL_33;
          }
        }
      }
    }
  }

  else
  {
    if (a2 == 2)
    {
      if (a3) {
        sub_188308070((uint64_t)a3, 2);
      }
      int v11 = 512;
    }

    else
    {
      if (a2 != 1)
      {
        uint64_t v12 = 22LL;
        hx509_set_error_string(a1, 0, 22, "Unknown type %d of selection", (uint64_t)a5, a6, a7, a8, a2);
        return v12;
      }

      if (a3) {
        sub_188308070((uint64_t)a3, 1);
      }
      int v11 = 256;
    }

    char v23 = 1;
    if (a4) {
      goto LABEL_14;
    }
  }

  uint64_t v12 = copy_AlgorithmIdentifier();
  if ((_DWORD)v12)
  {
    uint64_t v20 = v10;
LABEL_33:
    hx509_clear_error_string(v20);
  }

  return v12;
}

char *sub_188308070(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 64)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  while (1)
  {
    uint64_t v5 = (&off_18A21E6A0)[v4];
    if (v5[3])
    {
      if (!der_heim_oid_cmp())
      {
        size_t v6 = *(unsigned int (**)(uint64_t, char *))(*(void *)(a1 + 64) + 24LL);
        if (!v6 || v6(a1, v5[2])) {
          break;
        }
      }
    }

    if (++v4 == 15) {
      return 0LL;
    }
  }

  uint64_t v8 = 4LL;
  if (a2 == 2) {
    uint64_t v8 = 2LL;
  }
  return v5[v8];
}

char *sub_188308114(char *result)
{
  if (result)
  {
    uint64_t v1 = 0LL;
    while (1)
    {
      uint64_t v2 = (&off_18A21E6A0)[v1];
      if (++v1 == 15) {
        return 0LL;
      }
    }

    return v2[3];
  }

  return result;
}

uint64_t hx509_crypto_available( uint64_t a1, int a2, uint64_t a3, void **a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a4 = 0LL;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v27 = a1;
      int v10 = 256;
    }

    else
    {
      if (a2 != 2)
      {
        char v23 = "Unknown type %d of available";
        char v26 = a2;
        uint64_t v21 = 22LL;
        int v24 = 22;
LABEL_34:
        hx509_set_error_string(a1, 0, v24, v23, (uint64_t)a5, a6, a7, a8, v26);
        return v21;
      }

      uint64_t v27 = a1;
      int v10 = 512;
    }
  }

  else
  {
    uint64_t v27 = a1;
    int v10 = 1792;
  }

  if (a3)
  {
    int v11 = (char *)_hx509_cert_private_key(a3);
    uint64_t v12 = sub_188308114(v11);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  uint64_t v13 = 0LL;
  unsigned int v14 = &off_18A21E648;
  uint64_t v15 = 1u;
  do
  {
    LODWORD(v16) = v13;
    if (((_DWORD)v14[5] & v10) != 0 && v14[2] && (!v12 || !v14[3] || !der_heim_oid_cmp()))
    {
      uint64_t v13 = (v13 + 1);
      uint64_t v17 = realloc(*a4, 24LL * v13);
      if (!v17 || (*a4 = v17, copy_AlgorithmIdentifier()))
      {
LABEL_29:
        if ((_DWORD)v16)
        {
          uint64_t v22 = 0LL;
          do
          {
            free_AlgorithmIdentifier();
            v22 += 24LL;
          }

          while (24LL * v16 != v22);
        }

        free(*a4);
        *a4 = 0LL;
        char v23 = "out of memory";
        uint64_t v21 = 12LL;
        a1 = v27;
        int v24 = 12;
        goto LABEL_34;
      }
    }

    unsigned int v14 = (&off_18A21E6A0)[v15++];
  }

  while (v15 != 16);
  if (!a2)
  {
    uint64_t v18 = 0LL;
    uint64_t v16 = v13;
    int v19 = (void (**)(void))&qword_18A21E738;
    do
    {
      if ((_DWORD)v18 && (_DWORD)v18 != 3)
      {
        uint64_t v13 = (v16 + 1);
        uint64_t v20 = realloc(*a4, 24LL * v13);
        if (!v20) {
          goto LABEL_29;
        }
        *a4 = v20;
        (*v19)();
      }

      else
      {
        uint64_t v13 = v16;
      }

      ++v18;
      v19 += 7;
      uint64_t v16 = v13;
    }

    while (v18 != 5);
  }

  uint64_t v21 = 0LL;
  *a5 = v13;
  return v21;
}

void hx509_crypto_free_algs(char *a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    do
    {
      free_AlgorithmIdentifier();
      v4 += 24;
      --v3;
    }

    while (v3);
  }

  free(a1);
}

BOOL sub_1883083DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 48) != 1) {
    heim_abort( "internal error passing private key to wrong ops:signer->keytype == KEYTYPE_RSA",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v12);
  }
  uint64_t v9 = 0LL;
  while (1)
  {
    int v10 = (&off_18A21E6A0)[v9];
    if (++v9 == 15) {
      return 0LL;
    }
  }

  if (*((_DWORD *)v10 + 20)) {
    return (int)sub_188316744(*(void *)(a1 + 56)) > *((_DWORD *)v10 + 20);
  }
  return 0LL;
}

uint64_t sub_188308478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0LL;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v6 = sub_188316C70(*(void *)(a2 + 56), 0LL);
  uint64_t v7 = malloc(v6);
  *(void *)(a3 + 32) = v7;
  if (v7)
  {
    *(void *)(a3 + 24) = 8 * v6;
    uint64_t v16 = sub_1883087EC(a3);
    if ((_DWORD)v16)
    {
      hx509_set_error_string(a1, 0, v16, "malloc - out of memory", v12, v13, v14, v15, v18);
      free(*(void **)(a3 + 32));
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 32) = 0LL;
    }

    else
    {
      uint64_t v19 = *(void *)(a3 + 32);
      sub_188316C70(*(void *)(a2 + 56), &v19);
    }
  }

  else
  {
    uint64_t v16 = 12LL;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v8, v9, v10, v11, v18);
  }

  return v16;
}

uint64_t sub_188308560(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  if (a3 != 1) {
    return 569934LL;
  }
  int v7 = sub_188316A7C(*(unsigned int ***)(a2 + 56), 0LL);
  if (v7 <= 0)
  {
    uint64_t v15 = "Private key is not exportable";
    uint64_t v14 = 22LL;
    uint64_t v16 = a1;
    int v17 = 22;
LABEL_8:
    hx509_set_error_string(v16, 0, v17, v15, v8, v9, v10, v11, v19);
    return v14;
  }

  uint64_t v12 = v7;
  uint64_t v13 = malloc(v7);
  a4[1] = v13;
  if (!v13)
  {
    uint64_t v15 = "malloc out of memory";
    uint64_t v14 = 12LL;
    uint64_t v16 = a1;
    int v17 = 12;
    goto LABEL_8;
  }

  *a4 = v12;
  uint64_t v20 = v13;
  sub_188316A7C(*(unsigned int ***)(a2 + 56), &v20);
  return 0LL;
}

uint64_t sub_18830862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6 = 569965LL;
  if (a5 != 1) {
    return 569934LL;
  }
  uint64_t v16 = a3;
  uint64_t v9 = sub_18831692C(0LL, &v16);
  *(void *)(a6 + 56) = v9;
  if (v9)
  {
    uint64_t v6 = 0LL;
    *(void *)(a6 + memset(&v6[2], 0, 40) = &unk_18A220418;
  }

  else
  {
    hx509_set_error_string(a1, 0, 569965, "Failed to parse RSA key", v10, v11, v12, v13, v15);
  }

  return v6;
}

uint64_t sub_1883086C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_188316448();
  *(void *)(a3 + 56) = v5;
  if (v5
    && (uint64_t v10 = sub_188315244(),
        sub_188315484(v10, 0x10001uLL),
        int v11 = sub_188316914(*(void *)(a3 + 56)),
        sub_188315250(v10),
        v11 == 1))
  {
    uint64_t v12 = 0LL;
    *(void *)(a3 + memset(&v6[2], 0, 40) = &unk_18A220418;
  }

  else
  {
    uint64_t v12 = 569965LL;
    hx509_set_error_string(a1, 0, 569965, "Failed to generate RSA key", v6, v7, v8, v9, v14);
  }

  return v12;
}

void *sub_18830877C(int a1, int a2, char *a3)
{
  if (!strcasecmp(a3, "rsa-modulus") || !strcasecmp(a3, "rsa-exponent")) {
    return sub_1883152B0();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1883087EC(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *(void *)(a1 + 16) = v2;
  if (!v2) {
    return 12LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = malloc(2uLL);
  v3[1] = v4;
  if (!v4)
  {
    free(v3);
    uint64_t v5 = 12LL;
    goto LABEL_8;
  }

  _WORD *v4 = 5;
  void *v3 = 2LL;
  uint64_t v5 = der_copy_oid();
  if ((_DWORD)v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      free(*(void **)(v6 + 8));
      free(*(void **)(a1 + 16));
LABEL_8:
      *(void *)(a1 + 16) = 0LL;
    }
  }

  return v5;
}

BOOL sub_188308894( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 48) != 3) {
    sub_188303AB8("internal error passing private key to wrong ops", a2, a3, a4, a5, a6, a7, a8, v11);
  }
  uint64_t v8 = 0LL;
  while (1)
  {
    uint64_t v9 = (&off_18A21E6A0)[v8];
    if (++v8 == 15) {
      return 0LL;
    }
  }

  return *((_DWORD *)v9 + 20) != 0;
}

uint64_t sub_188308910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  uint64_t v40 = 0LL;
  uint64_t v10 = *(void *)(a3 + 216);
  uint64_t v11 = *(void *)(a3 + 208) >> 3;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v12 = sub_188316D7C(0LL, &v36);
  if (v12)
  {
    int v17 = v12;
    int v18 = sub_188316744((uint64_t)v12);
    char v19 = malloc(v18);
    if (!v19)
    {
      char v31 = "out of memory";
      uint64_t v30 = 12LL;
      uint64_t v32 = a1;
      int v33 = 12;
      goto LABEL_16;
    }

    int v24 = v19;
    int v25 = sub_188316758(*a6, *((void *)a6 + 1), (uint64_t)v19, (uint64_t)v17);
    if (v25 <= 0)
    {
      uint64_t v30 = 569925LL;
      hx509_set_error_string(a1, 0, 569925, "RSA public decrypt failed: %d", v20, v21, v22, v23, v25);
      free(v24);
LABEL_17:
      sub_188313D30();
      sub_188316500(v17);
      return v30;
    }

    if (v25 > v18) {
      sub_188303AB8("internal rsa decryption failure: ret > tosize", v26, v27, v28, v20, v21, v22, v23, v35);
    }
    uint64_t v29 = v25;
    if ((*(_BYTE *)(a2 + 43) & 1) == 0)
    {
      if (*(void *)a5 == v25 && !ct_memcmp((unsigned __int8 *)v24, *(unsigned __int8 **)(a5 + 8), v25))
      {
        free(v24);
        uint64_t v30 = 0LL;
        goto LABEL_17;
      }

      uint64_t v30 = 569925LL;
      char v31 = "RSA Signature incorrect";
      goto LABEL_9;
    }

    uint64_t v30 = sub_188313CE0();
    free(v24);
    if ((_DWORD)v30)
    {
      char v31 = "Failed to decode RSA DigestInfo";
LABEL_15:
      uint64_t v32 = a1;
      int v33 = v30;
      goto LABEL_16;
    }

    if (v37 == v29)
    {
      if (*(void *)(a2 + 32) && der_heim_oid_cmp())
      {
        uint64_t v30 = 569926LL;
        char v31 = "object identifier in RSA sig mismatch";
        goto LABEL_15;
      }

      if (!(void)v39 || *(void *)v39 == 2LL && **(_WORD **)(v39 + 8) == 5)
      {
        uint64_t v30 = hx509_verify_signature_0(a1, 0LL, (uint64_t)&v38, a5, (uint64_t)&v39 + 8);
        goto LABEL_17;
      }

      uint64_t v30 = 569925LL;
      char v31 = "Extra parameters inside RSA signature";
    }

    else
    {
      uint64_t v30 = 569925LL;
      char v31 = "size from decryption mismatch";
    }

uint64_t sub_188308BA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, void *a7)
{
  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    uint64_t v14 = 7LL;
    uint64_t v13 = &unk_18A21E428;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    uint64_t v14 = 6LL;
    uint64_t v13 = &unk_18A21E440;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    uint64_t v14 = 5LL;
    uint64_t v13 = &unk_18A21E458;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    uint64_t v14 = 2LL;
    uint64_t v13 = &unk_18A21E488;
    if (!a6) {
      goto LABEL_25;
    }
LABEL_23:
    uint64_t v16 = sub_1883087EC(a6);
    if ((_DWORD)v16)
    {
      uint64_t v12 = v16;
      hx509_clear_error_string(a1);
      return v12;
    }

    goto LABEL_25;
  }

  if (!der_heim_oid_cmp() || !der_heim_oid_cmp())
  {
LABEL_18:
    char v15 = 0;
    uint64_t v14 = 4LL;
    uint64_t v13 = &unk_18A21E470;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 1;
  if (a6) {
    goto LABEL_23;
  }
LABEL_25:
  if ((v15 & 1) != 0)
  {
    unint64_t v17 = *a5;
    if (v17 > (int)sub_188316744(*(void *)(a3 + 56)))
    {
      uint64_t v12 = 569888LL;
      hx509_set_error_string(a1, 0, 569888, "RSA private decrypt failed: %d", v18, v19, v20, v21, 32);
      return v12;
    }

    __int128 v39 = *(_OWORD *)a5;
  }

  else
  {
    uint64_t v12 = sub_188306A9C(a1, 0LL, (uint64_t)v13, (uint64_t)a5, 0LL, (uint64_t)&v39);
    if ((_DWORD)v12) {
      return v12;
    }
  }

  int v22 = sub_188316744(*(void *)(a3 + 56));
  *a7 = v22;
  uint64_t v23 = malloc(v22);
  a7[1] = v23;
  if (v23)
  {
    if ((v15 & 1) != 0)
    {
      int v35 = sub_18831674C(v39, *((uint64_t *)&v39 + 1), (uint64_t)v23, *(void *)(a3 + 56));
    }

    else if (sub_18831677C( v14,  *((uint64_t *)&v39 + 1),  v39,  (uint64_t)v23,  &v38,  *(void *)(a3 + 56)) == 1)
    {
      int v35 = v38;
    }

    else
    {
      int v35 = -1;
    }

    if (a5[1] != *((void *)&v39 + 1)) {
      der_free_octet_string();
    }
    if (v35 <= 0)
    {
      uint64_t v12 = 569888LL;
      hx509_set_error_string(a1, 0, 569888, "RSA private encrypt failed: %d", v31, v32, v33, v34, 32);
    }

    else
    {
      uint64_t v12 = 0LL;
      *a7 = v35;
    }
  }

  else
  {
    if (a5[1] != *((void *)&v39 + 1)) {
      der_free_octet_string();
    }
    uint64_t v12 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v24, v25, v26, v27, v37);
  }

  return v12;
}

uint64_t sub_188308EFC()
{
  return 0LL;
}

uint64_t sub_188308F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v20 = *(void *)(a2 + 32);
  if (a6)
  {
    uint64_t v21 = sub_1883087EC(a6);
    if ((_DWORD)v21)
    {
      uint64_t v22 = v21;
      hx509_clear_error_string(a1);
LABEL_17:
      free_AlgorithmIdentifier();
      return v22;
    }

    uint64_t v23 = sub_188306A9C(a1, 0LL, v20, a5, 0LL, (uint64_t)&v40);
    if ((_DWORD)v23)
    {
      uint64_t v22 = v23;
      free_AlgorithmIdentifier();
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v22 = sub_188306A9C(a1, 0LL, *(void *)(a2 + 32), a5, 0LL, (uint64_t)&v40);
    if ((_DWORD)v22) {
      return v22;
    }
  }

  int v24 = sub_188317E18();
  *a7 = v24;
  uint64_t v25 = malloc(v24);
  a7[1] = v25;
  if (v25)
  {
    int v26 = sub_188317E00(0xFFFFFFFFLL, v41, v40, (uint64_t)v25, (uint64_t)&v39, *(void *)(a3 + 56));
    der_free_octet_string();
    if (v26 == 1)
    {
      uint64_t v22 = 0LL;
      *a7 = v39;
      return v22;
    }

    uint64_t v22 = 569888LL;
    char v38 = 32;
    uint64_t v34 = "ECDSA sign failed: %d";
    uint64_t v35 = a1;
    int v36 = 569888;
  }

  else
  {
    der_free_octet_string();
    uint64_t v34 = "out of memory";
    uint64_t v22 = 12LL;
    uint64_t v35 = a1;
    int v36 = 12;
  }

  hx509_set_error_string(v35, 0, v36, v34, v30, v31, v32, v33, v38);
  if (a6) {
    goto LABEL_17;
  }
  return v22;
}

uint64_t sub_1883090CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(int *)(a2 + 80);
  if (v10 <= 0x80 && *(void *)a6 == v10)
  {
    if (CCDigestCreate())
    {
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      if (ct_memcmp(v19, *(unsigned __int8 **)(a6 + 8), v10))
      {
        uint64_t v12 = 569923LL;
        hx509_set_error_string(a1, 0, 569923, "Bad %s sigature", v14, v15, v16, v17, *(void *)a2);
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 12LL;
    }
  }

  else
  {
    uint64_t v12 = 569925LL;
    hx509_set_error_string(a1, 0, 569925, "%s sigature have wrong length (%lu)", a5, a6, a7, a8, *(void *)a2);
  }

  return v12;
}

uint64_t sub_1883091F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, size_t *a7)
{
  *a7 = 0LL;
  a7[1] = 0LL;
  if (!CCDigestCreate()) {
    return 12LL;
  }
  if (!a6 || (uint64_t v9 = sub_1883087EC(a6), !(_DWORD)v9))
  {
    size_t v11 = CCDigestOutputSize();
    *a7 = v11;
    uint64_t v12 = malloc(v11);
    a7[1] = (size_t)v12;
    if (v12)
    {
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      return 0LL;
    }

    CCDigestDestroy();
    *a7 = 0LL;
    return 12LL;
  }

  uint64_t v10 = v9;
  CCDigestDestroy();
  return v10;
}

uint64_t sub_1883092BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 64)) {
    sub_188318E7C();
  }
  uint64_t v4 = a3;
  if (a3)
  {
    size_t v7 = sub_188313124();
    *(void *)a4 = v7;
    uint64_t v8 = malloc(v7);
    *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v8;
    if (!v8)
    {
      uint64_t v4 = 12LL;
      goto LABEL_7;
    }

    uint64_t v9 = sub_188313104();
    if ((_DWORD)v9)
    {
      uint64_t v4 = v9;
      free(*(void **)(a4 + 8));
      *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
LABEL_7:
      hx509_clear_error_string(a1);
      return v4;
    }

    if (*(void *)a4) {
      sub_188303AB8("Internal asn1 encoder failure", v10, v11, v12, v13, v14, v15, v16, v18);
    }
    return 0LL;
  }

  return v4;
}

uint64_t sub_188309384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v5 = sub_1883130E4();
  if ((_DWORD)v5) {
    hx509_clear_error_string(a1);
  }
  return v5;
}

uint64_t hx509_env_add(uint64_t a1, uint64_t *a2, const char *a3, const char *a4)
{
  uint64_t v8 = malloc(0x20uLL);
  if (!v8)
  {
    uint64_t v19 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v9, v10, v11, v12, v21);
    return v19;
  }

  uint64_t v13 = v8;
  *(_DWORD *)uint64_t v8 = 0;
  void v8[2] = 0LL;
  uint64_t v14 = strdup(a3);
  v13[1] = v14;
  if (!v14)
  {
LABEL_9:
    free(v13);
    return 12LL;
  }

  uint64_t v15 = v14;
  uint64_t v16 = strdup(a4);
  v13[3] = v16;
  if (!v16)
  {
    free(v15);
    goto LABEL_9;
  }

  uint64_t v17 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v18 = v17;
      uint64_t v17 = *(void *)(v17 + 16);
    }

    while (v17);
    uint64_t v19 = 0LL;
    *(void *)(v18 + 16) = v13;
  }

  else
  {
    uint64_t v19 = 0LL;
    *a2 = (uint64_t)v13;
  }

  return v19;
}

uint64_t hx509_env_add_binding(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = malloc(0x20uLL);
  if (v8)
  {
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v8 = 1;
    void v8[2] = 0LL;
    uint64_t v14 = strdup(a3);
    v13[1] = v14;
    if (v14)
    {
      v13[3] = a4;
      uint64_t v15 = *a2;
      if (*a2)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(void *)(v15 + 16);
        }

        while (v15);
        uint64_t v17 = 0LL;
        *(void *)(v16 + 16) = v13;
      }

      else
      {
        uint64_t v17 = 0LL;
        *a2 = (uint64_t)v13;
      }
    }

    else
    {
      free(v13);
      return 12LL;
    }
  }

  else
  {
    uint64_t v17 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v9, v10, v11, v12, v19);
  }

  return v17;
}

uint64_t hx509_env_lfind(int a1, uint64_t a2, char *__s1, size_t __n)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v6 = a2;
  while (1)
  {
    size_t v7 = *(const char **)(v6 + 8);
    if (!strncmp(__s1, v7, __n) && !v7[__n] && !*(_DWORD *)v6) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 16);
    if (!v6) {
      return 0LL;
    }
  }

  return *(void *)(v6 + 24);
}

uint64_t hx509_env_find(int a1, uint64_t a2, char *__s1)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = a2;
  while (strcmp(__s1, *(const char **)(v4 + 8)) || *(_DWORD *)v4)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0LL;
    }
  }

  return *(void *)(v4 + 24);
}

uint64_t hx509_env_find_binding(int a1, uint64_t a2, char *__s1)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = a2;
  while (strcmp(__s1, *(const char **)(v4 + 8)) || *(_DWORD *)v4 != 1)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0LL;
    }
  }

  return *(void *)(v4 + 24);
}

void hx509_env_free(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_1883096C0(v2);
  }
  *a1 = 0LL;
}

void sub_1883096C0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = v1;
      uint64_t v1 = (void *)v1[2];
      if (*(_DWORD *)v2 == 1)
      {
        sub_1883096C0(*((void *)v2 + 3));
      }

      else if (!*(_DWORD *)v2)
      {
        free(*((void **)v2 + 3));
      }

      free(*((void **)v2 + 1));
      free(v2);
    }

    while (v1);
  }

void hx509_clear_error_string(uint64_t a1)
{
  if (a1)
  {
    heim_release(*(CFTypeRef *)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
  }

void hx509_set_error_stringv(uint64_t a1, char a2, int a3, const char *a4, va_list a5)
{
  if (a1)
  {
    uint64_t v7 = heim_error_createv(a3, a4, a5);
    uint64_t v8 = v7;
    if (v7)
    {
      if ((a2 & 1) != 0) {
        heim_error_append(v7, *(CFTypeRef *)(a1 + 24));
      }
      heim_release(*(CFTypeRef *)(a1 + 24));
    }

    *(void *)(a1 + 24) = v8;
  }

void hx509_set_error_string( uint64_t a1, char a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

char *hx509_get_error_string(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v9 = 0LL;
  if (v4 && heim_error_get_code(v4) == a2)
  {
    uint64_t result = (char *)heim_error_copy_string(v4);
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = heim_string_copy_utf8((const __CFString *)result);
      heim_release(v6);
      return v7;
    }
  }

  else
  {
    uint64_t v8 = com_right_r(*(void **)(a1 + 32), a2, __dst, 0x100uLL);
    if (v8) {
      return strdup(v8);
    }
    uint64_t v8 = strerror(a2);
    if (v8)
    {
      return strdup(v8);
    }

    else if (asprintf(&v9, "<unknown error: %d>", a2) == -1)
    {
      return 0LL;
    }

    else
    {
      return v9;
    }
  }

  return result;
}

void hx509_err(uint64_t a1, int a2, int a3, char *a4, ...)
{
  error_string = hx509_get_error_string(a1, a3);
  uint64_t v8 = "no error";
  if (error_string) {
    uint64_t v8 = error_string;
  }
  errx(a2, "%s: %s", v9[0], v8);
}

uint64_t _hx509_map_file_os(const char *a1, void *a2)
{
  uint64_t result = rk_undumpdata(a1, &v5, &v6);
  uint64_t v4 = v5;
  *a2 = v6;
  a2[1] = v4;
  return result;
}

void _hx509_unmap_file_os(uint64_t a1)
{
}

uint64_t _hx509_write_file(const char *a1, char *a2, size_t a3)
{
  return 0LL;
}

uint64_t hx509_pem_write(uint64_t a1, const char *a2, uint64_t **a3, FILE *a4, uint64_t a5, unint64_t a6)
{
  for (; a3; a3 = (uint64_t **)*a3)
  {
    if (*a3) {
      uint64_t v12 = "";
    }
    else {
      uint64_t v12 = "\n";
    }
    fprintf(a4, "%s: %s\n%s", (const char *)a3[1], (const char *)a3[2], v12);
  }

  if (a6)
  {
    while (1)
    {
      uint64_t v13 = a6 >= 0x36 ? 54LL : a6;
      a6 -= v13;
      fprintf(a4, "%s\n", (const char *)v21);
      a5 += v13;
      free(v21);
      if (!a6) {
        goto LABEL_12;
      }
    }

    uint64_t v18 = 12LL;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v14, v15, v16, v17, v20);
  }

  else
  {
LABEL_12:
    fprintf(a4, "-----%s %s-----\n", "END", a2);
    return 0LL;
  }

  return v18;
}

uint64_t hx509_pem_add_header(void *a1, const char *a2, const char *a3)
{
  off_t v6 = calloc(1uLL, 0x18uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = strdup(a2);
    v7[1] = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = strdup(a3);
      void v7[2] = v10;
      if (v10)
      {
        uint64_t result = 0LL;
        void *v7 = *a1;
        *a1 = v7;
        return result;
      }

      free(v9);
    }

    free(v7);
  }

  return 12LL;
}

void hx509_pem_free_header(void **a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void **)*v1;
      free(v1[1]);
      free(v1[2]);
      free(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

uint64_t hx509_pem_find_header(uint64_t result, char *__s1)
{
  if (result)
  {
    uint64_t v3 = result;
    while (strcmp(__s1, *(const char **)(v3 + 8)))
    {
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return 0LL;
      }
    }

    return *(void *)(v3 + 16);
  }

  return result;
}

size_t hx509_pem_read( uint64_t a1, FILE *a2, uint64_t (*a3)(uint64_t, char *, void **, char *, size_t, uint64_t), uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  size_t v7 = 569965LL;
  uint64_t v33 = 0LL;
  if (fgets(__s, 1024, a2))
  {
    LODWORD(v7) = 0;
    size_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    unsigned int v32 = 569965;
    while (2)
    {
      int v11 = strcspn(__s, "\n");
      int v12 = v11;
      if (__s[v11] == 10)
      {
        __s[v11] = 0;
        int v12 = v11 - (v11 > 0);
      }

      if (__s[v12] == 13)
      {
        __s[v12] = 0;
        v12 -= v12 > 0;
      }

      switch((int)v7)
      {
        case 0:
          BOOL v13 = *(void *)__s == 0x4745422D2D2D2D2DLL && *(void *)&__s[3] == 0x204E494745422D2DLL;
          if (v13 && (v24 = strdup(v35), (uint64_t v10 = v24) != 0LL))
          {
            uint64_t v25 = strchr(v24, 45);
            if (v25) {
              *uint64_t v25 = 0;
            }
            LODWORD(v7) = 1;
          }

          else
          {
            LODWORD(v7) = 0;
          }

          goto LABEL_39;
        case 1:
          if (strchr(__s, 58)) {
            goto LABEL_14;
          }
          goto LABEL_23;
        case 2:
LABEL_14:
          if (!__s[0])
          {
            LODWORD(v7) = 3;
            goto LABEL_39;
          }

          uint64_t v14 = strchr(__s, 58);
          if (!v14) {
            goto LABEL_39;
          }
          uint64_t v15 = v14;
          char *v14 = 0;
          do
          {
            while (1)
            {
              unsigned int v17 = *++v15;
              unsigned int v16 = v17;
              if ((v17 & 0x80000000) != 0) {
                break;
              }
              if ((*(_DWORD *)(MEMORY[0x1895F8770] + 4LL * v16 + 60) & 0x4000) == 0) {
                goto LABEL_21;
              }
            }
          }

          while (__maskrune(v16, 0x4000uLL));
LABEL_21:
          goto LABEL_38;
        case 3:
LABEL_23:
          if (*(void *)__s == 0x444E452D2D2D2D2DLL && __s[8] == 32)
          {
            size_t v7 = a3(a1, v10, v33, v9, v8, a4);
          }

          else
          {
            char v19 = sub_1882FA214(v12);
            unsigned int v20 = base64_decode(__s, v19);
            if ((v20 & 0x80000000) == 0)
            {
              size_t v7 = v20;
              char v21 = v10;
              uint64_t v22 = a3;
              size_t v23 = v8;
              v8 += v20;
              uint64_t v9 = (char *)sub_1882FA258(v9, v8);
              memcpy(&v9[v23], v19, v7);
              free(v19);
              LODWORD(v7) = 3;
              a3 = v22;
              uint64_t v10 = v21;
              goto LABEL_39;
            }

            free(v19);
            size_t v7 = v32;
          }

          free(v9);
          free(v10);
          hx509_pem_free_header(v33);
          uint64_t v33 = 0LL;
          if ((_DWORD)v7) {
            return v7;
          }
          uint64_t v10 = 0LL;
          uint64_t v9 = 0LL;
          size_t v8 = 0LL;
LABEL_38:
          unsigned int v32 = 0;
LABEL_39:
          if (fgets(__s, 1024, a2)) {
            continue;
          }
          if ((_DWORD)v7)
          {
            hx509_set_error_string(a1, 0, 569965, "File ends before end of PEM end tag", v26, v27, v28, v29, (char)v35);
            unsigned int v32 = 569965;
          }

          if (v9) {
            free(v9);
          }
          if (v10) {
            free(v10);
          }
          size_t v7 = v32;
          if (v33) {
            hx509_pem_free_header(v33);
          }
          break;
        default:
          goto LABEL_39;
      }

      break;
    }
  }

  return v7;
}

void *sub_188309FA0(uint64_t a1, char **a2)
{
  uint64_t result = sub_188309FF8(a1, *a2);
  if (!result)
  {
    uint64_t result = realloc(*(void **)a1, 8LL * *(int *)(a1 + 8) + 8);
    if (result)
    {
      uint64_t v5 = *(int *)(a1 + 8);
      result[v5] = a2;
      *(void *)a1 = result;
      *(_DWORD *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v5 + 1;
    }
  }

  return result;
}

const char **sub_188309FF8(uint64_t a1, char *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  for (unint64_t i = *(const char ****)a1; ; ++i)
  {
    uint64_t v5 = *i;
    if (!strcasecmp(a2, **i)) {
      break;
    }
    if (!--v2) {
      return 0LL;
    }
  }

  return v5;
}

uint64_t hx509_certs_init(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, void *a5)
{
  size_t v8 = __s;
  *a5 = 0LL;
  uint64_t v10 = strchr(__s, 58);
  if (v10)
  {
    int v11 = v10;
    size_t v12 = v10 - v8 + 1;
    BOOL v13 = (char *)malloc(v12);
    uint64_t v14 = v13;
    if (v13) {
      strlcpy(v13, v8, v12);
    }
    int v16 = v11[1];
    uint64_t v15 = v11 + 1;
    if (v16) {
      size_t v8 = v15;
    }
    else {
      size_t v8 = 0LL;
    }
    if (!v14) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v14 = strdup("MEMORY");
    if (!v14)
    {
LABEL_14:
      hx509_clear_error_string(a1);
      return 12LL;
    }
  }

  unsigned int v17 = sub_188309FF8(a1, v14);
  if (!v17)
  {
    uint64_t v30 = 2LL;
    hx509_set_error_string(a1, 0, 2, "Keyset type %s is not supported", v18, v19, v20, v21, (char)v14);
    free(v14);
    return v30;
  }

  uint64_t v22 = v17;
  free(v14);
  uint64_t v28 = heim_uniq_alloc(0x30uLL, (uint64_t)"hx509-certs", (uint64_t)sub_18830A1C0, v23, v24, v25, v26, v27);
  if (!v28) {
    goto LABEL_14;
  }
  uint64_t v29 = (const void *)v28;
  *(void *)(v28 + 32) = v22;
  uint64_t v30 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t))v22[2])( a1,  v28,  v28 + 40,  a3,  v8,  a4);
  if ((_DWORD)v30) {
    heim_release(v29);
  }
  else {
    *a5 = v29;
  }
  return v30;
}

uint64_t sub_18830A1C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 32) + 32LL))(a1, *(void *)(a1 + 40));
}

uint64_t hx509_certs_store( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v8[3];
  if (v9) {
    return v9(a1, a2, *(void *)(a2 + 40), a3, a4);
  }
  hx509_set_error_string(a1, 0, 569966, "keystore if type %s doesn't support store operation", a5, 0LL, a7, a8, *v8);
  return 569966LL;
}

void hx509_certs_free(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      heim_release(v2);
      *a1 = 0LL;
    }
  }

uint64_t hx509_certs_start_seq( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))v8[7];
  if (v9) {
    return v9(a1, a2, *(void *)(a2 + 40), a3);
  }
  hx509_set_error_string(a1, 0, 569966, "Keyset type %s doesn't support iteration", 0LL, a6, a7, a8, *v8);
  return 569966LL;
}

uint64_t hx509_certs_next_cert(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  a3);
}

uint64_t hx509_certs_end_seq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t hx509_certs_iter_f( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v16, a4, a5, a6, a7, a8);
  if (!(_DWORD)started)
  {
    while (1)
    {
      uint64_t v15 = 0LL;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  v16,  &v15);
      if ((_DWORD)v13)
      {
        uint64_t started = v13;
        goto LABEL_8;
      }

      if (!v15) {
        break;
      }
      uint64_t started = a3(a1, a4);
      hx509_cert_free(v15);
      if ((_DWORD)started) {
        goto LABEL_8;
      }
    }

    uint64_t started = 0LL;
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72LL))( a1,  a2,  *(void *)(a2 + 40),  v16);
  }

  return started;
}

uint64_t hx509_certs_iter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_iter_f(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_18830A3D4, a3, a5, a6, a7, a8);
}

uint64_t sub_18830A3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a3);
}

uint64_t hx509_ci_print_names(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v4 = sub_188300994(a3);
  hx509_name_from_Name(v4 + 144, &v8);
  hx509_name_to_string(v8, &v7);
  hx509_name_free(&v8);
  hx509_name_from_Name(v4 + 72, &v8);
  hx509_name_to_string(v8, &v6);
  hx509_name_free(&v8);
  fprintf(a2, "subject: %s\nissuer: %s\n", (const char *)v7, (const char *)v6);
  free(v7);
  free(v6);
  return 0LL;
}

uint64_t hx509_certs_add( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))v8[5];
  if (v9) {
    return v9(a1, a2, *(void *)(a2 + 40), a3);
  }
  hx509_set_error_string(a1, 0, 2, "Keyset type %s doesn't support add operation", 0LL, a6, a7, a8, *v8);
  return 2LL;
}

uint64_t hx509_certs_find( uint64_t a1, uint64_t a2, int *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a4 = 0LL;
  size_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, int *, void *))(*(void *)(a2 + 32) + 48LL);
  if (!v12 || (uint64_t started = v12(a1, a2, *(void *)(a2 + 40), a3, a4), (_DWORD)started == 569967))
  {
    uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v19, (uint64_t)a4, a5, a6, a7, a8);
    if (!(_DWORD)started)
    {
      while (1)
      {
        uint64_t v18 = 0LL;
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  v19,  &v18);
        BOOL v15 = (_DWORD)v14 != 0;
        if ((_DWORD)v14) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = v18 == 0;
        }
        if (v16)
        {
          uint64_t started = v14;
          goto LABEL_14;
        }

        hx509_cert_free(v18);
      }

      uint64_t started = 0LL;
      BOOL v15 = 0;
      *a4 = v18;
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72LL))( a1,  a2,  *(void *)(a2 + 40),  v19);
      if (!v15)
      {
        if (v18)
        {
          return 0LL;
        }

        else
        {
          uint64_t started = 569873LL;
          hx509_clear_error_string(a1);
        }
      }
    }
  }

  return started;
}

uint64_t hx509_certs_filter(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t v13 = hx509_certs_init(a1, "MEMORY:filter-certs", 0LL, 0LL, a4);
  if ((_DWORD)v13) {
    return v13;
  }
  uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v29, v8, v9, v10, v11, v12);
  if ((_DWORD)started)
  {
    uint64_t v13 = started;
LABEL_20:
    if (a4 && *a4)
    {
      heim_release((CFTypeRef)*a4);
      *a4 = 0LL;
    }

    return v13;
  }

  uint64_t v28 = 0LL;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  v29,  &v28);
  BOOL v17 = v16 != 0;
  uint64_t v18 = v28;
  if ((_DWORD)v16) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v28 == 0;
  }
  if (v19)
  {
    uint64_t v13 = v16;
    int v20 = 0;
  }

  else
  {
    int v20 = 0;
    do
    {
      if (sub_1883034E4(a1, a3, v18))
      {
        hx509_certs_add(a1, *a4, v28, v21, v22, v23, v24, v25);
        int v20 = 1;
      }

      hx509_cert_free(v28);
      uint64_t v28 = 0LL;
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  v29,  &v28);
      BOOL v17 = v26 != 0;
      uint64_t v18 = v28;
      if ((_DWORD)v26) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v28 == 0;
      }
    }

    while (!v27);
    uint64_t v13 = v26;
  }

  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72LL))( a1,  a2,  *(void *)(a2 + 40),  v29);
  if (v17) {
    goto LABEL_20;
  }
  if (v20) {
    return 0LL;
  }
  if (a4 && *a4)
  {
    heim_release((CFTypeRef)*a4);
    *a4 = 0LL;
  }

  hx509_clear_error_string(a1);
  return 569873LL;
}

uint64_t hx509_certs_merge( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3) {
    return hx509_certs_iter_f(a1, a3, (uint64_t (*)(uint64_t, uint64_t))j__hx509_certs_add, a2, a5, a6, a7, a8);
  }
  else {
    return 0LL;
  }
}

uint64_t hx509_certs_append(uint64_t a1, uint64_t a2, uint64_t a3, char *__s)
{
  uint64_t result = hx509_certs_init(a1, __s, 0LL, a3, &v13);
  if (!(_DWORD)result)
  {
    uint64_t v11 = v13;
    if (v13)
    {
      uint64_t v12 = hx509_certs_iter_f( a1,  (uint64_t)v13,  (uint64_t (*)(uint64_t, uint64_t))j__hx509_certs_add,  a2,  v7,  v8,  v9,  v10);
      heim_release(v11);
      return v12;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t hx509_get_one_cert( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a3 = 0LL;
  uint64_t result = hx509_certs_start_seq(a1, a2, (uint64_t)&v13, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    uint64_t v12 = v13;
    *a3 = 0LL;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void *))(*(void *)(a2 + 32) + 64LL))( a1,  a2,  *(void *)(a2 + 40),  v12,  a3);
    if (!(_DWORD)result)
    {
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72LL))( a1,  a2,  *(void *)(a2 + 40),  v13);
      return 0LL;
    }
  }

  return result;
}

uint64_t hx509_certs_info( uint64_t a1, uint64_t a2, uint64_t (*a3)(FILE *a1, const char *a2), FILE *a4)
{
  unint64_t v5 = (unint64_t)a3 | (unint64_t)a4;
  if (a3) {
    off_t v6 = a3;
  }
  else {
    off_t v6 = sub_18830A94C;
  }
  if (v5) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = (FILE *)*MEMORY[0x1895F89E0];
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t (*)(FILE *, const char *), FILE *))(*(void *)(a2 + 32) + 80LL);
  if (v8) {
    return v8(a1, a2, *(void *)(a2 + 40), v6, v7);
  }
  v6(v7, "No info function for certs");
  return 0LL;
}

uint64_t sub_18830A94C(FILE *a1, const char *a2)
{
  return 0LL;
}

uint64_t _hx509_certs_keys_get(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void, void *))(*(void *)(a2 + 32) + 88LL);
  if (v3) {
    return v3(a1, a2, *(void *)(a2 + 40), a3);
  }
  *a3 = 0LL;
  return 0LL;
}

uint64_t sub_18830A99C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))v8[12];
  if (v9) {
    return v9(a1, a2, *(void *)(a2 + 40), a3);
  }
  hx509_set_error_string(a1, 0, 22, "keystore if type %s doesn't support key add operation", 0LL, a6, a7, a8, *v8);
  return 22LL;
}

void _hx509_certs_keys_free(int a1, const void **a2)
{
  if (*a2)
  {
    uint64_t v3 = a2;
    do
    {
      hx509_private_key_free(v3);
      uint64_t v4 = v3[1];
      ++v3;
    }

    while (v4);
  }

  free(a2);
}

uint64_t sub_18830AA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited = hx509_cert_init_data(a1, a5, a6, (CFTypeRef *)&v15);
  if (!(_DWORD)inited)
  {
    uint64_t inited = sub_188306214(a1, a3, v15, v8, v9, v10, v11, v12);
    hx509_cert_free(v15);
  }

  return inited;
}

uint64_t sub_18830AA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_1882FE558();
  if (!(_DWORD)v10)
  {
    v12[0] = a6;
    v12[1] = a5;
    uint64_t v10 = sub_18830621C(a1, a3, (uint64_t)&v13, 0LL, v14, (uint64_t)v12);
    sub_1882FE5A8();
  }

  return v10;
}

uint64_t sub_18830AB2C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  uint64_t header = hx509_pem_find_header(a4, "Proc-Type");
  if (!header)
  {
    *(void *)__s = a6;
    uint64_t v55 = a5;
    return sub_18830621C(a1, a3, a7, 0LL, (uint64_t *)__s, 0LL);
  }

  uint64_t v15 = (const char *)header;
  uint64_t v16 = sub_18830620C(a3);
  if (!v16)
  {
    uint64_t v26 = 569866LL;
    hx509_set_error_string( a1,  0,  569866,  "Failed to get password for password protected file %s",  v17,  v18,  v19,  v20,  a2);
    return v26;
  }

  uint64_t v21 = v16;
  if (!strcmp(v15, "4,ENCRYPTED"))
  {
    BOOL v27 = (const char *)hx509_pem_find_header(a4, "DEK-Info");
    if (v27)
    {
      unsigned int v32 = strdup(v27);
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v34 = strchr(v32, 44);
        if (!v34)
        {
          uint64_t v26 = 569965LL;
          free(v33);
          unsigned int v40 = "IV missing";
          goto LABEL_18;
        }

        *uint64_t v34 = 0;
        uint64_t v35 = v34 + 1;
        size_t v36 = strlen(v34 + 1);
        char v37 = malloc(v36);
        if (v37)
        {
          char v38 = v37;
          uint64_t cipherbyname = hc_EVP_get_cipherbyname(v33);
          if (cipherbyname)
          {
            uint64_t v39 = rk_hex_decode(v35, v38, v36);
            free(v33);
            if (v39 < 8 || v39 < (unint64_t)hc_EVP_CIPHER_iv_length(cipherbyname))
            {
              uint64_t v26 = 569965LL;
              free(v38);
              unsigned int v40 = "Salt have wrong length in private key file";
LABEL_18:
              hx509_set_error_string(a1, 0, 569965, v40, v28, v29, v30, v31, __size);
              return v26;
            }

            uint64_t v47 = (void *)nullsub_4(v21);
            if (v47 && (uint64_t v48 = v47, *v47))
            {
              uint64_t v49 = 0LL;
              while (1)
              {
                size_t v50 = strlen(*(const char **)(v48[1] + 8 * v49));
                if (!sub_18830AEF0( a1,  a3,  a7,  cipherbyname,  v38,  *(void *)(v48[1] + 8 * v49),  v50,  a5,  a6)) {
                  break;
                }
              }

              uint64_t v26 = 0LL;
            }

            else
            {
LABEL_28:
              uint64_t v26 = hx509_lock_prompt(v21);
              if (!(_DWORD)v26)
              {
                size_t v51 = strlen(__s);
                uint64_t v26 = sub_18830AEF0(a1, a3, a7, cipherbyname, v38, (uint64_t)__s, v51, a5, a6);
              }
            }

            uint64_t v46 = v38;
          }

          else
          {
            free(v38);
            uint64_t v26 = 569866LL;
            hx509_set_error_string( a1,  0,  569866,  "Private key encrypted with unsupported cipher: %s",  v42,  v43,  v44,  v45,  (char)v33);
            uint64_t v46 = v33;
          }

          free(v46);
          return v26;
        }

        hx509_clear_error_string(a1);
        free(v33);
      }

      else
      {
        hx509_clear_error_string(a1);
      }

      return 12LL;
    }

    uint64_t v26 = 569965LL;
    unsigned int v40 = "Encrypted private key missing DEK-Info";
    goto LABEL_18;
  }

  uint64_t v26 = 569965LL;
  hx509_set_error_string( a1,  0,  569965,  "Private key encrypted in unknown method %s in file %s",  v22,  v23,  v24,  v25,  (char)v15);
  hx509_clear_error_string(a1);
  return v26;
}

void *sub_18830AEAC(uint64_t a1)
{
  return sub_188309FA0(a1, &off_18C4D96B8);
}

uint64_t sub_18830AEF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, size_t __size)
{
  v33[21] = *MEMORY[0x1895F89C0];
  size_t v16 = hc_EVP_CIPHER_key_length(a4);
  uint64_t v17 = malloc(v16);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = (int *)hc_EVP_md5((uint64_t)v17);
    if ((int)sub_18831616C(a4, v19, (uint64_t)a5, a6, a7, 1LL, (char *)v18, 0LL) <= 0)
    {
      uint64_t v28 = 569920LL;
      hx509_set_error_string(a1, 0, 569920, "Failed to do string2key for private key", v20, v21, v22, v23, v30);
    }

    else
    {
      unsigned int v32 = malloc(__size);
      if (v32)
      {
        size_t v31 = __size;
        hc_EVP_CIPHER_CTX_init((uint64_t)v33);
        hc_EVP_CipherInit_ex((uint64_t)v33, a4, 0, (uint64_t)v18, a5, 0LL);
        hc_EVP_Cipher((uint64_t)v33);
        hc_EVP_CIPHER_CTX_cleanup(v33);
        uint64_t v28 = sub_18830621C(a1, a2, a3, 0LL, (uint64_t *)&v31, 0LL);
        bzero(v32, v31);
        free(v32);
      }

      else
      {
        uint64_t v28 = 12LL;
        hx509_set_error_string(a1, 0, 12, "Out of memory to decrypt for private key", v24, v25, v26, v27, v30);
      }

      bzero(v18, v16);
      free(v18);
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 12LL;
  }

  return v28;
}

uint64_t sub_18830B0C0(uint64_t a1, uint64_t a2, void *a3, int a4, const char *a5, void *a6)
{
  return sub_18830B1FC(a1, a3, a4, a5, a6, 0);
}

uint64_t sub_18830B0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = fopen(*(const char **)(a3 + 8), "w");
  uint64_t v17 = v5;
  if (v5)
  {
    rk_cloexec_file(v5);
    int v18 = *(_DWORD *)(a3 + 16);
    uint64_t v14 = hx509_certs_iter_f( a1,  *(void *)a3,  (uint64_t (*)(uint64_t, uint64_t))sub_18830B5F0,  (uint64_t)&v17,  v10,  v11,  v12,  v13);
    fclose(v17);
  }

  else
  {
    uint64_t v16 = *(void *)(a3 + 8);
    uint64_t v14 = 2LL;
    hx509_set_error_string(a1, 0, 2, "Failed to open file %s for writing", v6, v7, v8, v9, v16);
  }

  return v14;
}

uint64_t sub_18830B174(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    hx509_certs_free((const void **)a2);
    free(*(void **)(a2 + 8));
    free((void *)a2);
  }

  return 0LL;
}

uint64_t sub_18830B1B0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_18830B1BC( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_start_seq(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_18830B1C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  return hx509_certs_next_cert(a1, *a3, a4, a5);
}

uint64_t sub_18830B1D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return hx509_certs_end_seq(a1, *a3, a4);
}

uint64_t sub_18830B1E4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return _hx509_certs_keys_get(a1, *a3, a4);
}

uint64_t sub_18830B1F0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_18830A99C(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_18830B1FC(uint64_t a1, void *a2, int a3, const char *a4, void *a5, int a6)
{
  char v8 = a3;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  int v43 = a3;
  *a2 = 0LL;
  if (a5) {
    uint64_t v11 = a5;
  }
  else {
    uint64_t v11 = off_18C706738;
  }
  uint64_t v12 = calloc(1uLL, 0x18uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    *((_DWORD *)v12 + 4) = a6;
    uint64_t v14 = strdup(a4);
    v13[1] = v14;
    if (!v14)
    {
      hx509_clear_error_string(a1);
      size_t v15 = 12LL;
      goto LABEL_35;
    }

    if ((v8 & 1) != 0)
    {
      size_t v15 = hx509_certs_init(a1, "MEMORY:ks-file-create", 0LL, (uint64_t)v11, v13);
      if ((_DWORD)v15) {
        goto LABEL_35;
      }
      *a2 = v13;
    }

    else
    {
      size_t v15 = sub_18830612C(a1, (uint64_t)v11, &v44);
      if ((_DWORD)v15) {
        goto LABEL_35;
      }
      uint64_t v16 = (const char *)v13[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = strchr(v16, 44);
          int v18 = v17;
          if (v17)
          {
            *uint64_t v17 = 0;
            int v18 = v17 + 1;
          }

          uint64_t v19 = fopen(v16, "r");
          if (!v19)
          {
            size_t v36 = __error();
            strerror(*v36);
            size_t v15 = 2LL;
            hx509_set_error_string(a1, 0, 2, "Failed to open PEM file %s: %s", v37, v38, v39, v40, (char)v16);
            goto LABEL_35;
          }

          uint64_t v20 = v19;
          rk_cloexec_file(v19);
          size_t v15 = hx509_pem_read( a1,  v20,  (uint64_t (*)(uint64_t, char *, void **, char *, size_t, uint64_t))sub_18830B4DC,  (uint64_t)&v43);
          fclose(v20);
          if ((_DWORD)v15)
          {
            if ((_DWORD)v15 != 569965) {
              goto LABEL_35;
            }
            uint64_t v21 = rk_undumpdata(v16, &v41, &v42);
            if ((_DWORD)v21)
            {
              size_t v15 = v21;
LABEL_34:
              hx509_clear_error_string(a1);
LABEL_35:
              uint64_t v34 = (void *)v13[1];
              if (v34) {
                free(v34);
              }
              free(v13);
              goto LABEL_38;
            }

            uint64_t v22 = 0LL;
            while (1)
            {
              uint64_t v23 = (uint64_t (*)(void))(&off_18C4D9588)[v22 + 2];
              uint64_t v24 = v23 ? v23() : 0LL;
              uint64_t v25 = ((uint64_t (*)(uint64_t, const char *, void *, void, void *, off_t, uint64_t))(&off_18C4D9588)[v22 + 1])( a1,  v16,  v44,  0LL,  v41,  v42,  v24);
              if (!(_DWORD)v25) {
                break;
              }
              size_t v15 = v25;
              v22 += 3LL;
              if (v22 == 12)
              {
                j__free(v41);
                goto LABEL_34;
              }
            }

            j__free(v41);
          }

          uint64_t v16 = v18;
        }

        while (v18);
      }

      size_t v15 = sub_1883063A0(a1, (uint64_t *)v44, v13);
      if ((_DWORD)v15) {
        goto LABEL_35;
      }
      size_t v15 = sub_1883065E8(a1, (uint64_t)v44, &v45);
      if ((_DWORD)v15) {
        goto LABEL_35;
      }
      size_t v31 = (const void **)v45;
      uint64_t v32 = *(void *)v45;
      if (*(void *)v45)
      {
        uint64_t v33 = 8LL;
        do
        {
          sub_18830A99C(a1, *v13, v32, v26, v27, v28, v29, v30);
          size_t v31 = (const void **)v45;
          uint64_t v32 = *(void *)((char *)v45 + v33);
          v33 += 8LL;
        }

        while (v32);
      }

      _hx509_certs_keys_free(a1, v31);
      size_t v15 = 0LL;
      *a2 = v13;
LABEL_38:
      if (v44) {
        sub_1883066D8((char *)v44);
      }
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 12LL;
  }

  return v15;
}

uint64_t sub_18830B4DC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0LL;
  while (strcasecmp(a2, (&off_18C4D9588)[v12]))
  {
    v12 += 3LL;
    if (v12 == 12)
    {
      uint64_t v17 = 569966LL;
      hx509_set_error_string(a1, 0, 569966, "Found no matching PEM format for %s", v13, v14, v15, v16, (char)a2);
      return v17;
    }
  }

  int v18 = &(&off_18C4D9588)[v12];
  uint64_t v19 = (uint64_t (*)(void))v18[2];
  if (v19) {
    uint64_t v20 = v19();
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v17 = ((uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))v18[1])( a1,  0LL,  *(void *)(a6 + 8),  a3,  a4,  a5,  v20);
  if ((_DWORD)v17)
  {
    if ((*(_BYTE *)a6 & 2) != 0) {
      hx509_set_error_string(a1, 1, v17, "Failed parseing PEM format %s", v21, v22, v23, v24, (char)a2);
    }
    else {
      return 0LL;
    }
  }

  return v17;
}

uint64_t sub_18830B5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = hx509_cert_binary(a1, a3, (uint64_t)&v11);
  if (!(_DWORD)v6)
  {
    int v8 = *(_DWORD *)(a2 + 8);
    if (v8)
    {
      if (v8 != 1) {
        return v6;
      }
      fwrite(v12, v11, 1uLL, *(FILE **)a2);
    }

    else
    {
      hx509_pem_write(a1, "CERTIFICATE", 0LL, *(FILE **)a2, (uint64_t)v12, v11);
      free(v12);
      uint64_t v9 = _hx509_cert_private_key(a3);
      uint64_t v10 = (const char *)sub_188307330(v9);
      hx509_pem_write(a1, v10, 0LL, *(FILE **)a2, (uint64_t)v12, v11);
    }

    free(v12);
  }

  return v6;
}

uint64_t sub_18830B6E0(uint64_t a1, uint64_t a2, void *a3, int a4, const char *a5, void *a6)
{
  return sub_18830B1FC(a1, a3, a4, a5, a6, 1);
}

uint64_t sub_18830B6F8()
{
  return 1LL;
}

uint64_t sub_18830B700(int a1, const UInt8 *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_18831663C(a4);
  if (a5 != 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  size_t v11 = (__SecKey *)sub_18830B800(*(void *)v9, *(const void **)(v9 + 16));
  uint64_t v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a1);
  DecryptedData = SecKeyCreateDecryptedData(v11, (SecKeyAlgorithm)*MEMORY[0x18960BCC8], v12, 0LL);
  uint64_t v14 = DecryptedData;
  if (DecryptedData)
  {
    unint64_t Length = CFDataGetLength(DecryptedData);
    if (Length <= v10)
    {
      size_t v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      memcpy(a3, BytePtr, v16);
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  size_t v16 = 0xFFFFFFFFLL;
  if (v11) {
LABEL_5:
  }
    CFRelease(v11);
LABEL_6:
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v16;
}

uint64_t sub_18830B800(uint64_t a1, const void *a2)
{
  uint64_t Duplicate = SecKeyCreateDuplicate();
  if (!a2 || (CFTypeID v4 = CFGetTypeID(a2), v4 != CFBooleanGetTypeID()) || !CFBooleanGetValue((CFBooleanRef)a2)) {
    SecKeySetParameter();
  }
  return Duplicate;
}

uint64_t sub_18830B894()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18830B89C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18830B8A4()
{
  return 1LL;
}

uint64_t sub_18830B8AC()
{
  return 1LL;
}

uint64_t sub_18830B8B4(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)sub_188317DF8(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    CFRelease(*v1);
    CFTypeRef v3 = v2[2];
    if (v3) {
      CFRelease(v3);
    }
    free(v2);
  }

  return 1LL;
}

uint64_t sub_18830B8F8(uint64_t a1, const UInt8 *a2, unsigned int a3, void *a4, _DWORD *a5, uint64_t a6)
{
  unint64_t v10 = (uint64_t *)sub_188317DF8(a6);
  unint64_t v12 = v10[1];
  size_t v11 = (const void *)v10[2];
  uint64_t v13 = *v10;
  CFErrorRef error = 0LL;
  uint64_t v14 = (const __CFString *)*MEMORY[0x18960BC40];
  uint64_t v15 = (__SecKey *)sub_18830B800(v13, v11);
  size_t v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a3);
  uint64_t v17 = SecKeyCreateSignature(v15, v14, v16, &error);
  int v18 = v17;
  if (!v17 || (unint64_t Length = CFDataGetLength(v17), Length > v12))
  {
    uint64_t v20 = 0xFFFFFFFFLL;
    if (!v15) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  size_t v22 = Length;
  *a5 = Length;
  BytePtr = CFDataGetBytePtr(v18);
  memcpy(a4, BytePtr, v22);
  uint64_t v20 = 1LL;
  if (v15) {
LABEL_4:
  }
    CFRelease(v15);
LABEL_5:
  if (v16) {
    CFRelease(v16);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (error) {
    CFRelease(error);
  }
  return v20;
}

uint64_t sub_18830BA18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  int v8 = calloc(1uLL, 4uLL);
  if (v8)
  {
    if (a5 && *a5)
    {
      free(v8);
      char v15 = (char)a5;
      uint64_t v9 = 2LL;
      hx509_set_error_string(a1, 0, 2, "Unknown subtype %s", v10, v11, v12, v13, v15);
    }

    else
    {
      uint64_t v9 = 0LL;
      *a3 = v8;
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 12LL;
  }

  return v9;
}

uint64_t sub_18830BAAC(int a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    free(a2);
  }

  return 0LL;
}

uint64_t sub_18830BAD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v5 = 569873LL;
  uint64_t v28 = 0LL;
  CFTypeRef result = 0LL;
  if ((*a4 & 0x1000040) == 0) {
    return 569967LL;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  unsigned int v10 = *a4;
  if ((~*a4 & 0x40040) == 0 && !strcmp(*((const char **)a4 + 9), "O=System Identity,CN=com.apple.kerberos.kdc"))
  {
    char v12 = 0;
    *a4 = v10 & 0xFFFFFFBF;
    uint64_t v11 = (const void **)MEMORY[0x18960BB40];
  }

  else
  {
    uint64_t v11 = (const void **)MEMORY[0x18960BB40];
    if ((v10 & 0x1000000) == 0) {
      uint64_t v11 = (const void **)MEMORY[0x18960BB50];
    }
    char v12 = 1;
  }

  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x18960BB38], *v11);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x18960BE30], (const void *)*MEMORY[0x189604DE8]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x18960BDA0], (const void *)*MEMORY[0x18960BDA8]);
  if ((*((_BYTE *)a4 + 3) & 1) != 0)
  {
    CFDataRef v13 = CFDataCreateWithBytesNoCopy( 0LL,  *(const UInt8 **)(*((void *)a4 + 16) + 8LL),  **((void **)a4 + 16),  (CFAllocatorRef)*MEMORY[0x189604DC8]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x18960BE80], v13);
    CFRelease(v13);
  }

  OSStatus v14 = SecItemCopyMatching(Mutable, &result);
  CFRelease(Mutable);
  if (v14 || !result) {
    goto LABEL_22;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(result)) {
    heim_abort( "return value not an array:CFArrayGetTypeID() == CFGetTypeID(identities)",  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v28);
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)result);
  if (Count < 1)
  {
LABEL_18:
    if ((v12 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  CFIndex v24 = Count;
  CFIndex v25 = 0LL;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)result, v25);
LABEL_17:
    if (v24 == ++v25) {
      goto LABEL_18;
    }
  }

  if (!sub_1883034E4(a1, (int *)a4, v28))
  {
    hx509_cert_free(v28);
    goto LABEL_17;
  }

  *a5 = v28;
  if ((v12 & 1) == 0) {
LABEL_19:
  }
    *a4 |= 0x40u;
LABEL_20:
  CFRelease(result);
  if (!*a5)
  {
LABEL_22:
    hx509_clear_error_string(a1);
    return v5;
  }

  return 0LL;
}

uint64_t sub_18830BD48(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef **a4)
{
  keys[3] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v6 = (CFTypeRef *)calloc(1uLL, 0x20uLL);
  if (v6)
  {
    uint64_t v11 = v6;
    char v12 = (void *)*MEMORY[0x18960BE30];
    keys[0] = *(void **)MEMORY[0x18960BB38];
    keys[1] = v12;
    keys[2] = *(void **)MEMORY[0x18960BDA0];
    CFDataRef v13 = (void *)*MEMORY[0x189604DE8];
    values[0] = *(void **)MEMORY[0x18960BB40];
    values[1] = v13;
    values[2] = *(void **)MEMORY[0x18960BDA8];
    OSStatus v14 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  3LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    OSStatus v15 = SecItemCopyMatching(v14, v11 + 2);
    CFRelease(v14);
    if (v15)
    {
      free(v11);
      return 12LL;
    }

    else
    {
      uint64_t v16 = 0LL;
      *a4 = v11;
    }
  }

  else
  {
    uint64_t v16 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v18);
  }

  return v16;
}

uint64_t sub_18830BE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(void *)a4) {
    return hx509_certs_next_cert(a1, *(void *)a4, *(void *)(a4 + 8), a5);
  }
  *a5 = 0LL;
  CFIndex v9 = *(void *)(a4 + 24);
  if (v9 >= CFArrayGetCount(*(CFArrayRef *)(a4 + 16)))
  {
    unsigned int inited = 0;
  }

  else
  {
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), *(void *)(a4 + 24));
      unsigned int inited = hx509_cert_init_SecFrameworkAuth(a1, ValueAtIndex, a5, 0LL);
      CFIndex v12 = *(void *)(a4 + 24) + 1LL;
      *(void *)(a4 + 24) = v12;
    }

    while (inited && v12 < CFArrayGetCount(*(CFArrayRef *)(a4 + 16)));
  }

  uint64_t v13 = *(void *)(a4 + 24);
  if (v13 == CFArrayGetCount(*(CFArrayRef *)(a4 + 16))) {
    return 0LL;
  }
  else {
    return inited;
  }
}

uint64_t sub_18830BF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4)
  {
    hx509_certs_end_seq(a1, *(void *)a4, *(void *)(a4 + 8));
    hx509_certs_free((const void **)a4);
  }

  else
  {
    CFRelease(*(CFTypeRef *)(a4 + 16));
  }

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  free((void *)a4);
  return 0LL;
}

void *sub_18830BFA8(uint64_t a1)
{
  return sub_188309FA0(a1, &off_18C4D9720);
}

uint64_t hx509_cert_init_SecFrameworkAuth(uint64_t a1, CFTypeRef cf, uint64_t *a3, const void *a4)
{
  uint64_t v6 = (void *)cf;
  v92[3] = *(const void **)MEMORY[0x1895F89C0];
  CFTypeID v8 = CFGetTypeID(cf);
  SecKeyRef privateKeyRef = 0LL;
  CFTypeRef result = 0LL;
  if (a3) {
    *a3 = 0LL;
  }
  if (CFDataGetTypeID() == v8)
  {
    CFIndex v9 = (void *)*MEMORY[0x18960BE30];
    keys[0] = *(void **)MEMORY[0x18960BB38];
    keys[1] = v9;
    uint64_t v10 = (const void *)*MEMORY[0x18960BE80];
    keys[2] = *(void **)MEMORY[0x18960BDA0];
    v92[0] = v10;
    uint64_t v11 = (void *)*MEMORY[0x189604DE8];
    values[0] = *(void **)MEMORY[0x18960BB50];
    values[1] = v11;
    values[2] = *(void **)MEMORY[0x18960BDB0];
    values[3] = v6;
    CFIndex v12 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  4LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    OSStatus v13 = SecItemCopyMatching(v12, &result);
    CFRelease(v12);
    if (v13 || !result)
    {
      uint64_t inited = 569969LL;
      hx509_set_error_string( a1,  0,  569969,  "Failed to turn persistent reference into a certifiate: %d",  v14,  v15,  v16,  v17,  v13);
      return inited;
    }

    CFTypeID v8 = CFGetTypeID(result);
    uint64_t v6 = (void *)result;
  }

  if (SecIdentityGetTypeID() == v8)
  {
    OSStatus v18 = SecIdentityCopyCertificate((SecIdentityRef)v6, &certificateRef);
    if (v18)
    {
      char v23 = v18;
      if (result) {
        CFRelease(result);
      }
      uint64_t inited = 569969LL;
      hx509_set_error_string( a1,  0,  569969,  "Failed to convert the identity to a certificate: %d",  v19,  v20,  v21,  v22,  v23);
      return inited;
    }
  }

  else
  {
    if (SecCertificateGetTypeID() != v8)
    {
      if (result) {
        CFRelease(result);
      }
      uint64_t inited = 569969LL;
      hx509_set_error_string( a1,  0,  569969,  "Data from persistent ref not a identity or certificate",  v25,  v26,  v27,  v28,  v85);
      return inited;
    }

    SecCertificateRef certificateRef = (SecCertificateRef)v6;
    CFRetain(v6);
  }

  uint64_t v29 = SecCertificateCopyData(certificateRef);
  if (v29)
  {
    uint64_t v30 = v29;
    BytePtr = CFDataGetBytePtr(v29);
    CFIndex Length = CFDataGetLength(v30);
    uint64_t inited = hx509_cert_init_data(a1, (uint64_t)BytePtr, Length, (CFTypeRef *)&v86);
    CFRelease(v30);
    if ((_DWORD)inited)
    {
      if (result) {
        CFRelease(result);
      }
      CFRelease(certificateRef);
      return inited;
    }

    if (SecIdentityGetTypeID() == v8) {
      SecIdentityCopyPrivateKey((SecIdentityRef)v6, &privateKeyRef);
    }
    if (!privateKeyRef) {
      goto LABEL_55;
    }
    uint64_t v34 = SecCertificateCopyKey(certificateRef);
    if (v34)
    {
      uint64_t v40 = v34;
      uint64_t v41 = SecKeyCopyAttributes(v34);
      CFRelease(v40);
      if (v41)
      {
        Value = CFDictionaryGetValue(v41, (const void *)*MEMORY[0x18960B998]);
        if (Value)
        {
          int v43 = Value;
          CFRetain(Value);
          CFRelease(v41);
          int v44 = CFEqual(v43, (CFTypeRef)*MEMORY[0x18960B9B0]);
          CFRelease(v43);
          if (v44)
          {
            uint64_t v45 = v86;
            SecKeyRef v46 = privateKeyRef;
            hx509_set_error_string(a1, 0, 12, "kc4", v36, v37, v38, v39, v85);
            uint64_t v47 = (int *)sub_188306784();
            if (!v47)
            {
              hx509_clear_error_string(a1);
              goto LABEL_54;
            }

            if (!sub_188306F58((uint64_t)keys, v47, 0LL, v48, v49, v50, v51, v52))
            {
              size_t v53 = (SecKeyRef *)calloc(1uLL, 0x18uLL);
              if (v53)
              {
                uint64_t v61 = v53;
                CFRetain(v46);
                *uint64_t v61 = v46;
                v61[1] = (SecKeyRef)72;
                if (a4)
                {
                  CFRetain(a4);
                  v61[2] = (SecKeyRef)a4;
                }

                char v62 = sub_188317C70();
                if (v62)
                {
                  uint64_t v63 = (uint64_t)v62;
                  sub_188317D9C((uint64_t)v62, (uint64_t)&off_18A21ECB0);
                  sub_188300994(v45);
                  sub_188307388((uint64_t)keys[0], v63);
                  _hx509_cert_set_key(v45, (uint64_t)keys[0]);
                  size_t v71 = keys;
                  goto LABEL_52;
                }
              }

LABEL_59:
              sub_188303AB8("out of memory", v54, v55, v56, v57, v58, v59, v60, v85);
            }

            goto LABEL_54;
          }
        }

        else
        {
          CFRelease(v41);
        }
      }
    }

    uint64_t v72 = v86;
    SecKeyRef v73 = privateKeyRef;
    if (!sub_188306F58((uint64_t)values, 0LL, 0LL, v35, v36, v37, v38, v39))
    {
      uint64_t v74 = (SecKeyRef *)calloc(1uLL, 0x18uLL);
      if (!v74) {
        goto LABEL_59;
      }
      uint64_t v75 = v74;
      CFRetain(v73);
      *uint64_t v75 = v73;
      if (a4)
      {
        CFRetain(a4);
        _OWORD v75[2] = (SecKeyRef)a4;
      }

      char v76 = sub_188316448();
      if (!v76) {
        goto LABEL_59;
      }
      uint64_t v77 = (uint64_t)v76;
      sub_1883165E0((uint64_t)v76, (uint64_t)&off_18A21ED00);
      sub_188300994(v72);
      if (!sub_188313C20())
      {
        *(void *)(v77 + 32) = sub_188306748((const void **)keys);
        *(void *)(v77 + memset(&v6[2], 0, 40) = sub_188306748(v92);
        sub_188313C70();
        v75[1] = (SecKeyRef)(int)sub_188315334(*(unsigned int **)(v77 + 32));
        sub_18830733C((uint64_t)values[0], v77);
        _hx509_cert_set_key(v72, (uint64_t)values[0]);
        size_t v71 = values;
LABEL_52:
        hx509_private_key_free((const void **)v71);
        goto LABEL_54;
      }

      sub_188316500((_DWORD *)v77);
    }

void sub_18830C4E8(int a1, CFTypeRef cf)
{
}

uint64_t hx509_cert_init_SecFramework(uint64_t a1, const void *a2, uint64_t *a3)
{
  return hx509_cert_init_SecFrameworkAuth(a1, a2, a3, 0LL);
}

uint64_t sub_18830C4F8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18830C500()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18830C508(int a1, const UInt8 *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_18831663C(a4);
  if (a5 != 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = (__SecKey *)sub_18830B800(*(void *)v9, *(const void **)(v9 + 16));
  CFIndex v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a1);
  Signature = SecKeyCreateSignature(v11, (SecKeyAlgorithm)*MEMORY[0x18960BD48], v12, 0LL);
  uint64_t v14 = Signature;
  if (Signature)
  {
    unint64_t Length = CFDataGetLength(Signature);
    if (Length <= v10)
    {
      size_t v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      memcpy(a3, BytePtr, v16);
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  size_t v16 = 0xFFFFFFFFLL;
  if (v11) {
LABEL_5:
  }
    CFRelease(v11);
LABEL_6:
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v16;
}

uint64_t sub_18830C608()
{
  return 1LL;
}

uint64_t sub_18830C610(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)sub_18831663C(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    CFRelease(*v1);
    CFTypeRef v3 = v2[2];
    if (v3) {
      CFRelease(v3);
    }
    free(v2);
  }

  return 1LL;
}

uint64_t sub_18830C654(int a1, const UInt8 *a2, unsigned int a3, void *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v11 = sub_18831663C(a6);
  int v12 = a1 - 2;
  unint64_t v15 = *(void *)(v11 + 8);
  size_t v16 = (const __CFString *)**((void **)&unk_18A21ED70 + v12);
  uint64_t v17 = (__SecKey *)sub_18830B800(*(void *)v11, *(const void **)(v11 + 16));
  OSStatus v18 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a3);
  Signature = SecKeyCreateSignature(v17, v16, v18, 0LL);
  uint64_t v20 = Signature;
  if (Signature)
  {
    unint64_t Length = CFDataGetLength(Signature);
    if (Length <= v15)
    {
      size_t v22 = Length;
      *a5 = Length;
      BytePtr = CFDataGetBytePtr(v20);
      memcpy(a4, BytePtr, v22);
      uint64_t v13 = 1LL;
      if (!v17) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }

  uint64_t v13 = 0xFFFFFFFFLL;
  if (v17) {
LABEL_8:
  }
    CFRelease(v17);
LABEL_9:
  if (v18) {
    CFRelease(v18);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v13;
}

void *sub_18830C784(uint64_t a1)
{
  return sub_188309FA0(a1, &off_18C4D9788);
}

uint64_t sub_18830C790(uint64_t a1, uint64_t a2, char ***a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = (char **)calloc(1uLL, 0x20uLL);
  if (v7)
  {
    CFTypeID v8 = v7;
    if (!a5 || !*a5) {
      a5 = "anonymous";
    }
    uint64_t v9 = strdup(a5);
    void *v8 = v9;
    if (v9)
    {
      uint64_t result = 0LL;
      *a3 = v8;
      return result;
    }

    free(v8);
  }

  return 12LL;
}

uint64_t sub_18830C808(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    unint64_t v3 = 0LL;
    do
      hx509_cert_free(*(void *)(*(void *)(a2 + 16) + 8 * v3++));
    while (v3 < *(void *)(a2 + 8));
  }

  free(*(void **)(a2 + 16));
  CFTypeID v4 = *(char **)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = 0LL;
    do
    {
      if (!*(void *)&v4[v5]) {
        break;
      }
      hx509_private_key_free((const void **)&v4[v5]);
      CFTypeID v4 = *(char **)(a2 + 24);
      v5 += 8LL;
    }

    while (v4);
  }

  free(v4);
  free(*(void **)a2);
  free((void *)a2);
  return 0LL;
}

uint64_t sub_18830C898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = realloc(*(void **)(a3 + 16), 8LL * *(void *)(a3 + 8) + 8);
  if (!v6) {
    return 12LL;
  }
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = hx509_cert_ref(a4);
  uint64_t result = 0LL;
  uint64_t v9 = *(void *)(a3 + 8);
  *(void *)(*(void *)(a3 + 16) + 8 * v9) = v7;
  *(void *)(a3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v9 + 1;
  return result;
}

uint64_t sub_18830C8F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = malloc(8uLL);
  if (!v5) {
    return 12LL;
  }
  uint64_t v6 = v5;
  uint64_t result = 0LL;
  *uint64_t v6 = 0LL;
  *a4 = v6;
  return result;
}

uint64_t sub_18830C938(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  if (*a4 >= *(void *)(a3 + 8))
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = hx509_cert_ref(*(void *)(*(void *)(a3 + 16) + 8LL * *a4));
    ++*a4;
  }

  *a5 = v7;
  return 0LL;
}

uint64_t sub_18830C990(int a1, int a2, int a3, void *a4)
{
  return 0LL;
}

uint64_t sub_18830C9AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    uint64_t v8 = 0LL;
    while (*(void *)(v7 + 8 * v8++))
      ;
    size_t v10 = v8;
  }

  else
  {
    size_t v10 = 1LL;
  }

  uint64_t v11 = calloc(v10, 8uLL);
  *a4 = v11;
  unint64_t v12 = *(void *)(a3 + 24);
  if (v12 && (unint64_t v12 = *(void *)v12) != 0)
  {
    uint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v14 = v13;
      *(void *)(*a4 + 8 * v13) = _hx509_private_key_ref(v12);
      uint64_t v11 = (void *)*a4;
      if (!*(void *)(*a4 + 8 * v14)) {
        break;
      }
      uint64_t v19 = *(void *)(a3 + 24);
      if (v19)
      {
        unint64_t v12 = *(void *)(v19 + 8 * v14 + 8);
        uint64_t v13 = v14 + 1;
        if (v12) {
          continue;
        }
      }

      unint64_t v12 = (v14 + 1);
      goto LABEL_13;
    }

    if ((_DWORD)v14)
    {
      uint64_t v22 = v14 + 1;
      do
        hx509_private_key_free((const void **)(*a4 + 8LL * (v22-- - 2)));
      while (v22 > 1);
    }

    uint64_t v20 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v15, v16, v17, v18, v23);
  }

  else
  {
LABEL_13:
    uint64_t v20 = 0LL;
    v11[v12] = 0LL;
  }

  return v20;
}

uint64_t sub_18830CAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(a3 + 24);
  if (v7)
  {
    unsigned int v8 = -1;
    uint64_t v9 = *(uint64_t **)(a3 + 24);
    do
    {
      uint64_t v10 = *v9++;
      ++v8;
    }

    while (v10);
  }

  else
  {
    unsigned int v8 = 0;
  }

  uint64_t v11 = realloc(v7, 8LL * (v8 + 2));
  if (v11)
  {
    *(void *)(a3 + 24) = v11;
    uint64_t v16 = _hx509_private_key_ref(a4);
    uint64_t v17 = 0LL;
    *(void *)(*(void *)(a3 + 24) + 8LL * vinit_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v16;
    *(void *)(*(void *)(a3 + 24) + 8LL * (v8 + 1)) = 0LL;
  }

  else
  {
    uint64_t v17 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v12, v13, v14, v15, v19);
  }

  return v17;
}

uint64_t sub_18830CB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7 = sub_18830CFF0(a5);
  uint64_t v8 = sub_1882FE558();
  if (!(_DWORD)v8)
  {
    if (v7) {
      uint64_t v9 = (uint64_t)(v7 + 4);
    }
    else {
      uint64_t v9 = 0LL;
    }
    sub_18830621C(a1, a2, (uint64_t)&v11, 0LL, v12, v9);
    sub_1882FE5A8();
  }

  return v8;
}

uint64_t sub_18830CBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v17 = 0LL;
  uint64_t v8 = sub_1882FE5B8();
  if (!(_DWORD)v8)
  {
    uint64_t v9 = sub_18830620C(a2);
    uint64_t v8 = sub_188307C28(a1, v9, (uint64_t)&v15, (uint64_t)&v16 + 8, v14, v10, v11, v12);
    sub_1882FE5D8();
    if (!(_DWORD)v8)
    {
      uint64_t v8 = sub_18830CB50(a1, a2, v14[1], v14[0], a5);
      der_free_octet_string();
    }
  }

  return v8;
}

uint64_t sub_18830CCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t inited = sub_1882FE708();
  if (!(_DWORD)inited)
  {
    if (der_heim_oid_cmp())
    {
      sub_1882FE758();
      return 0LL;
    }

    uint64_t inited = sub_1882FE768();
    sub_1882FE758();
    if (!(_DWORD)inited)
    {
      uint64_t inited = hx509_cert_init_data(a1, (uint64_t)v18[2], (uint64_t)v18[1], v18);
      der_free_octet_string();
      if (!(_DWORD)inited)
      {
        uint64_t v14 = sub_188306214(a1, a2, (uint64_t)v18[0], v9, v10, v11, v12, v13);
        if ((_DWORD)v14)
        {
          uint64_t inited = v14;
          hx509_cert_free(v18[0]);
          return inited;
        }

        char v16 = 1;
        do
        {
          char v17 = v16;
          if (sub_18830CFF0(a5)) {
            sub_188302EC8(a1, (uint64_t)v18[0]);
          }
          char v16 = 0;
        }

        while ((v17 & 1) != 0);
        hx509_cert_free(v18[0]);
        return 0LL;
      }
    }
  }

  return inited;
}

uint64_t sub_18830CDEC()
{
  uint64_t v0 = sub_1882FE768();
  if (!(_DWORD)v0)
  {
    uint64_t v0 = sub_18830D064();
    der_free_octet_string();
  }

  return v0;
}

uint64_t sub_18830CE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  uint64_t v7 = sub_18830620C(a2);
  uint64_t v8 = hx509_cms_decrypt_encrypted(a1, v7, a3, a4, (uint64_t)v10, &v11);
  if (!(_DWORD)v8)
  {
    else {
      uint64_t v8 = sub_18830D064();
    }
    der_free_octet_string();
    der_free_oid();
  }

  return v8;
}

uint64_t sub_18830CF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  uint64_t v7 = sub_18830620C(a2);
  uint64_t v8 = sub_188300D60(v7);
  uint64_t v9 = hx509_cms_unenvelope(a1, v8, 0, a3, a4, 0LL, 0LL, v17, &v18);
  if ((_DWORD)v9)
  {
    uint64_t v14 = v9;
    hx509_set_error_string(a1, 1, v9, "PKCS12 failed to unenvelope", v10, v11, v12, v13, v16);
  }

  else
  {
    else {
      uint64_t v14 = sub_18830D064();
    }
    der_free_octet_string();
    der_free_oid();
  }

  return v14;
}

void *sub_18830CFE4(uint64_t a1)
{
  return sub_188309FA0(a1, &off_18C4D9850);
}

unsigned int *sub_18830CFF0(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      uint64_t v2 = 0LL;
      unint64_t v3 = 0LL;
      while (der_heim_oid_cmp())
      {
        ++v3;
        v2 += 32LL;
        if (v3 >= *v1) {
          return 0LL;
        }
      }

      return (unsigned int *)(*((void *)v1 + 1) + v2);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18830D064()
{
  uint64_t result = sub_1882FE6D8();
  if (!(_DWORD)result)
  {
    sub_1882FE6F8();
    return 0LL;
  }

  return result;
}

uint64_t sub_18830D100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 0LL; i != 96; i += 16LL)
  {
    uint64_t result = der_heim_oid_cmp();
    if (!(_DWORD)result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&off_18C4D97F0 + i + 8))( a1,  a2,  a4,  a5,  a6);
    }
  }

  return result;
}

uint64_t sub_18830D190(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, const char *a5, void *a6)
{
  *a3 = 0LL;
  if (a6) {
    uint64_t v10 = a6;
  }
  else {
    uint64_t v10 = off_18C706738;
  }
  uint64_t v11 = sub_18830612C(a1, (uint64_t)v10, &v32);
  if ((_DWORD)v11) {
    return v11;
  }
  char v16 = (uint64_t *)calloc(1uLL, 0x10uLL);
  if (!v16 || (char v17 = strdup(a5), (v16[1] = (uint64_t)v17) == 0))
  {
    char v19 = "out of memory";
    uint64_t v11 = 12LL;
    uint64_t v20 = a1;
    int v21 = 12;
LABEL_12:
    hx509_set_error_string(v20, 0, v21, v19, v12, v13, v14, v15, v31);
    goto LABEL_13;
  }

  if ((a4 & 1) != 0)
  {
    uint64_t v24 = hx509_certs_init(a1, "MEMORY:ks-file-create", 0LL, (uint64_t)v10, v16);
    goto LABEL_22;
  }

  uint64_t v18 = rk_undumpdata(a5, &v36, &v37);
  if (!(_DWORD)v18)
  {
    uint64_t v11 = sub_1882FE618();
    j__free(v36);
    if ((_DWORD)v11)
    {
      hx509_set_error_string(a1, 0, v11, "Failed to decode the PFX in %s", v25, v26, v27, v28, (char)a5);
      goto LABEL_13;
    }

    if (der_heim_oid_cmp())
    {
      sub_1882FE668();
      char v19 = "PKCS PFX isn't a pkcs7-data container";
LABEL_28:
      uint64_t v11 = 22LL;
      uint64_t v20 = a1;
      int v21 = 22;
      goto LABEL_12;
    }

    if (!v35)
    {
      sub_1882FE668();
      char v19 = "PKCS PFX missing data";
      goto LABEL_28;
    }

    uint64_t v11 = sub_1882FE768();
    sub_1882FE668();
    if ((_DWORD)v11) {
      goto LABEL_10;
    }
    uint64_t v11 = sub_1882FE678();
    der_free_octet_string();
    if ((_DWORD)v11) {
      goto LABEL_10;
    }
    if (v33)
    {
      uint64_t v29 = 0LL;
      for (unint64_t i = 0LL; i < v33; ++i)
      {
        sub_18830D100( a1,  (uint64_t)v32,  v34 + v29,  *(void *)(*(void *)(v34 + v29 + 16) + 8LL),  **(void **)(v34 + v29 + 16),  0LL);
        v29 += 24LL;
      }
    }

    sub_1882FE6C8();
    uint64_t v24 = sub_1883063A0(a1, (uint64_t *)v32, v16);
LABEL_22:
    uint64_t v11 = v24;
    if (!(_DWORD)v24) {
      *a3 = v16;
    }
    goto LABEL_13;
  }

  uint64_t v11 = v18;
LABEL_10:
  hx509_clear_error_string(a1);
LABEL_13:
  sub_1883066D8((char *)v32);
  if (v16 && (_DWORD)v11)
  {
    uint64_t v22 = (void *)v16[1];
    if (v22) {
      free(v22);
    }
    if (*v16) {
      hx509_certs_free((const void **)v16);
    }
    free(v16);
  }

  return v11;
}

uint64_t sub_18830D404( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v27 = 0LL;
  uint64_t v9 = hx509_certs_iter_f( a1,  *(void *)a3,  (uint64_t (*)(uint64_t, uint64_t))sub_18830D668,  (uint64_t)v23,  a5,  a6,  a7,  a8);
  if ((_DWORD)v9) {
    goto LABEL_2;
  }
  size_t v20 = sub_1882FE6B8();
  uint64_t v10 = malloc(v20);
  uint64_t v22 = v10;
  if (!v10)
  {
    uint64_t v9 = 12LL;
    goto LABEL_7;
  }

  uint64_t v11 = v10;
  uint64_t v12 = sub_1882FE698();
  if ((_DWORD)v12)
  {
    uint64_t v9 = v12;
    free(v11);
LABEL_7:
    sub_1882FE6C8();
    return v9;
  }

  sub_1882FE6C8();
  uint64_t v14 = der_parse_hex_heim_integer();
  if ((_DWORD)v14)
  {
    uint64_t v9 = v14;
    uint64_t v15 = v11;
  }

  else
  {
    *((void *)&v26 + 1) = calloc(1uLL, 0x10uLL);
    size_t v16 = sub_1882FE7A8();
    uint64_t v17 = *((void *)&v26 + 1);
    **((void **)&v26 + 1) = v16;
    uint64_t v18 = malloc(v16);
    *(void *)(v17 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v18;
    if (v18)
    {
      uint64_t v19 = sub_1882FE788();
      if ((_DWORD)v19)
      {
        uint64_t v9 = v19;
        free(*(void **)(*((void *)&v26 + 1) + 8LL));
        *(void *)(*((void *)&v26 + 1) + 8LL) = 0LL;
      }

      else
      {
        free(v22);
        uint64_t v9 = der_copy_oid();
        if ((_DWORD)v9) {
          goto LABEL_2;
        }
        size_t v21 = sub_1882FE658();
        uint64_t v22 = malloc(v21);
        if (!v22)
        {
          uint64_t v9 = 12LL;
          goto LABEL_2;
        }

        uint64_t v9 = sub_1882FE638();
        if ((_DWORD)v9)
        {
          free(v22);
          goto LABEL_2;
        }

        rk_dumpdata(*(const char **)(a3 + 8), (char *)v22, v21);
      }
    }

    else
    {
      uint64_t v9 = 12LL;
    }

    uint64_t v15 = v22;
  }

  free(v15);
LABEL_2:
  sub_1882FE6C8();
  sub_1882FE668();
  return v9;
}

uint64_t sub_18830D5FC(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t sub_18830D634( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_18830D640( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_start_seq(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_18830D64C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  return hx509_certs_next_cert(a1, *a3, a4, a5);
}

uint64_t sub_18830D65C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return hx509_certs_end_seq(a1, *a3, a4);
}

uint64_t sub_18830D668(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v6 = hx509_cert_binary(a1, a3, (uint64_t)&v16);
  if (!(_DWORD)v6)
  {
    size_t v15 = sub_1882FE7A8();
    uint64_t v7 = malloc(v15);
    if (!v7)
    {
      uint64_t v6 = 12LL;
      goto LABEL_6;
    }

    uint64_t v8 = v7;
    uint64_t v9 = sub_1882FE788();
    if ((_DWORD)v9)
    {
      uint64_t v6 = v9;
      free(v8);
LABEL_6:
      free(v17);
      return v6;
    }

    free(v17);
    uint64_t v10 = der_copy_oid();
    if ((_DWORD)v10)
    {
      uint64_t v6 = v10;
LABEL_9:
      sub_1882FE758();
      return v6;
    }

    uint64_t v16 = sub_1882FE748();
    uint64_t v17 = malloc(v16);
    if (!v17)
    {
      uint64_t v6 = 12LL;
      goto LABEL_9;
    }

    uint64_t v12 = sub_1882FE728();
    if ((_DWORD)v12)
    {
      uint64_t v6 = v12;
      free(v17);
      uint64_t v17 = 0LL;
      goto LABEL_9;
    }

    sub_1882FE758();
    uint64_t v6 = sub_18830D8CC(a1, a2, (uint64_t)&unk_18A21D0E0, (uint64_t)v17, v16);
    if (sub_188301BFC(a3))
    {
      _hx509_cert_private_key(a3);
      uint64_t v6 = der_parse_hex_heim_integer();
      if (!(_DWORD)v6)
      {
        uint64_t v6 = sub_1883073D4(a1);
        if (!(_DWORD)v6)
        {
          uint64_t v13 = _hx509_cert_private_key(a3);
          uint64_t v6 = sub_188307438(a1, v13);
          if (!(_DWORD)v6)
          {
            uint64_t v16 = sub_1882FE598();
            uint64_t v17 = malloc(v16);
            if (v17)
            {
              uint64_t v14 = sub_1882FE578();
              if (!(_DWORD)v14)
              {
                sub_1882FE5A8();
                return sub_18830D8CC(a1, a2, (uint64_t)&unk_18A21D0C0, (uint64_t)v17, v16);
              }

              uint64_t v6 = v14;
              free(v17);
              uint64_t v17 = 0LL;
            }

            else
            {
              uint64_t v6 = 12LL;
            }
          }
        }

        sub_1882FE5A8();
      }
    }
  }

  return v6;
}

uint64_t sub_18830D8CC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = realloc(*((void **)a2 + 1), 24LL * (*a2 + 1));
  if (!v9)
  {
    uint64_t v16 = "out of memory";
LABEL_8:
    uint64_t v15 = 12LL;
    uint64_t v17 = a1;
    int v18 = 12;
    goto LABEL_9;
  }

  *((void *)a2 + 1) = v9;
  uint64_t v14 = der_copy_oid();
  if ((_DWORD)v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = "out of memory";
    uint64_t v17 = a1;
    int v18 = v15;
LABEL_9:
    hx509_set_error_string(v17, 0, v18, v16, v10, v11, v12, v13, v22);
    return v15;
  }

  uint64_t v19 = calloc(1uLL, 0x10uLL);
  int v20 = *a2;
  *(void *)(*((void *)a2 + 1) + 24LL * *a2 + 16) = v19;
  if (!v19)
  {
    der_free_oid();
    uint64_t v16 = "malloc out of memory";
    goto LABEL_8;
  }

  uint64_t v15 = 0LL;
  *uint64_t v19 = a5;
  v19[1] = a4;
  *a2 = v20 + 1;
  return v15;
}

uint64_t hx509_lock_init(uint64_t a1, void *a2)
{
  *a2 = 0LL;
  CFTypeID v4 = calloc(1uLL, 0x28uLL);
  if (!v4) {
    return 12LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = hx509_certs_init(a1, "MEMORY:locks-internal", 0LL, 0LL, (void *)v4 + 2);
  if ((_DWORD)v6) {
    free(v5);
  }
  else {
    *a2 = v5;
  }
  return v6;
}

uint64_t hx509_lock_add_password(uint64_t *a1, char *__s1)
{
  unint64_t v3 = strdup(__s1);
  if (v3)
  {
    CFTypeID v4 = v3;
    uint64_t v5 = realloc((void *)a1[1], 8 * *a1 + 8);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0LL;
      uint64_t v8 = *a1;
      v6[*a1] = v4;
      *a1 = v8 + 1;
      a1[1] = (uint64_t)v6;
      return result;
    }

    free(v4);
  }

  return 12LL;
}

void hx509_lock_reset_passwords(uint64_t a1)
{
  if (*(void *)a1)
  {
    unint64_t v2 = 0LL;
    do
      free(*(void **)(*(void *)(a1 + 8) + 8 * v2++));
    while (v2 < *(void *)a1);
  }

  free(*(void **)(a1 + 8));
  *(void *)a1 = 0LL;
  *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
}

uint64_t hx509_lock_add_cert( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_lock_add_certs( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_merge(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

void hx509_lock_reset_certs(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 + 16);
  unint64_t v3 = *(const void **)(a2 + 16);
  CFTypeID v4 = v3;
  else {
    hx509_certs_free(&v4);
  }
}

uint64_t hx509_lock_set_prompter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return 0LL;
}

uint64_t hx509_lock_reset_promper(uint64_t result)
{
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  return result;
}

uint64_t hx509_lock_prompt(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 24);
  if (v1) {
    return v1(*(void *)(a1 + 32));
  }
  else {
    return 569927LL;
  }
}

void hx509_lock_free(const void **a1)
{
  if (a1)
  {
    hx509_certs_free(a1 + 2);
    hx509_lock_reset_passwords((uint64_t)a1);
    a1[4] = 0LL;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }

BOOL hx509_prompt_hidden(int a1)
{
  return a1 == 1;
}

uint64_t hx509_lock_command_string(uint64_t *a1, char *a2)
{
  if (!strncasecmp(a2, "PASS:", 5uLL))
  {
    hx509_lock_add_password(a1, a2 + 5);
    return 0LL;
  }

  else
  {
    uint64_t result = strcasecmp(a2, "PROMPT");
    if ((_DWORD)result)
    {
      return 569874LL;
    }

    else
    {
      a1[3] = (uint64_t)sub_18830DC64;
      a1[4] = 0LL;
    }
  }

  return result;
}

uint64_t sub_18830DC64(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 24);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
  }

  else
  {
    CFTypeID v4 = (FILE **)MEMORY[0x1895F89E0];
    fputs(*(const char **)a2, (FILE *)*MEMORY[0x1895F89E0]);
    fflush(*v4);
    if (fgets(*(char **)(a2 + 24), *(_DWORD *)(a2 + 16), (FILE *)*MEMORY[0x1895F89D8]))
    {
      v3[strcspn(v3, "\n")] = 0;
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_18830DD10(uint64_t a1, void **a2)
{
  uint64_t v44 = 0LL;
  uint64_t v6 = strdup("");
  *a2 = v6;
  if (!v6) {
    return 12LL;
  }
  uint64_t v43 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v43)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      --v43;
      if (*(_DWORD *)(v7 + 16 * v43))
      {
        unint64_t v8 = 0LL;
        while (1)
        {
          uint64_t v9 = 0LL;
          uint64_t v10 = *(void *)(v7 + 16 * v43 + 8);
          uint64_t v11 = (_DWORD *)(v10 + 40 * v8 + 16);
          do
          {
            if (!der_heim_oid_cmp())
            {
              uint64_t v19 = strdup((&off_18A21EDB0)[v9]);
              goto LABEL_12;
            }

            v9 += 3LL;
          }

          while (v9 != 39);
          else {
            uint64_t v19 = (char *)v45;
          }
LABEL_12:
          switch(*v11)
          {
            case 0:
              sub_188303AB8("unknown directory type: %d", v12, v13, v14, v15, v16, v17, v18, 0);
            case 1:
            case 3:
              uint64_t v20 = v10 + 40 * v8;
              unint64_t v3 = *(void *)(v20 + 24);
              unint64_t v2 = *(char **)(v20 + 32);
              goto LABEL_23;
            case 2:
            case 5:
              unint64_t v2 = *(char **)(v10 + 40 * v8 + 24);
              unint64_t v3 = strlen(v2);
              goto LABEL_23;
            case 4:
              uint64_t v21 = v10 + 40 * v8;
              uint64_t v23 = *(void *)(v21 + 24);
              char v22 = *(unsigned int **)(v21 + 32);
              uint64_t v24 = sub_1882FD030(v22, v23, &v45);
              if ((_DWORD)v24) {
                return v24;
              }
              __int128 v25 = (char *)malloc(++v45);
              if (!v25) {
                goto LABEL_35;
              }
              unint64_t v2 = v25;
              uint64_t v33 = wind_ucs4utf8(v22, v23, v25, &v45);
              if ((_DWORD)v33) {
                goto LABEL_33;
              }
              goto LABEL_22;
            case 6:
              uint64_t v34 = v10 + 40 * v8;
              uint64_t v36 = *(void *)(v34 + 24);
              uint64_t v35 = *(unsigned __int16 **)(v34 + 32);
              uint64_t v24 = wind_ucs2utf8_length(v35, v36, &v45);
              if ((_DWORD)v24) {
                return v24;
              }
              off_t v37 = (char *)malloc(v45 + 1);
              if (!v37) {
LABEL_35:
              }
                sub_188303AB8("allocation failure", v26, v27, v28, v29, v30, v31, v32, v42);
              unint64_t v2 = v37;
              uint64_t v33 = wind_ucs2utf8(v35, v36, v37, &v45);
              if ((_DWORD)v33)
              {
LABEL_33:
                uint64_t v40 = v33;
                free(v2);
                return v40;
              }

void sub_18830E030(void **a1, uint64_t *a2, _BYTE *a3, size_t a4, int a5)
{
  size_t v5 = a4;
  if (a5)
  {
    uint64_t v9 = malloc(3 * a4 + 1);
    if (v9)
    {
      unint64_t v28 = 3 * v5 + 1;
      if (v5)
      {
        uint64_t v10 = 0LL;
        size_t v11 = 0LL;
        while (1)
        {
          uint64_t v12 = a3[v10];
          if (v10 || (byte_18C706740[v12] & 4) == 0)
          {
            if (++v10 == v5 && (byte_18C706740[v12] & 8) != 0)
            {
              uint64_t v16 = &v9[v11];
              *uint64_t v16 = 92;
              v11 += 2LL;
              v16[1] = v12;
              goto LABEL_21;
            }

            uint64_t v14 = &v9[v11];
            if ((byte_18C706740[v12] & 0x10) == 0)
            {
              if ((byte_18C706740[v12] & 0x20) != 0)
              {
                uint64_t v15 = snprintf(v14, 3 * v5 - v11, "#%02x", v12);
              }

              else
              {
                char *v14 = v12;
                uint64_t v15 = 1LL;
              }

              goto LABEL_15;
            }

            char *v14 = 92;
            v14[1] = v12;
          }

          else
          {
            uint64_t v13 = &v9[v11];
            _BYTE *v13 = 92;
            v13[1] = v12;
            uint64_t v10 = 1LL;
          }

          uint64_t v15 = 2LL;
LABEL_15:
          v11 += v15;
          if (v10 == v5) {
            goto LABEL_21;
          }
        }
      }

      size_t v11 = 0LL;
LABEL_21:
      v9[v11] = 0;
      size_t v5 = v11;
      if (v11 >= v28) {
        sub_188318EA4();
      }
    }
  }

  else
  {
    uint64_t v9 = a3;
  }

  uint64_t v17 = (char *)realloc(*a1, v5 + *a2 + 1);
  if (!v17) {
    sub_188303AB8("allocation failure", v18, v19, v20, v21, v22, v23, v24, v27);
  }
  __int128 v25 = v17;
  uint64_t v26 = *a2;
  memcpy(&v17[*a2], v9, v5);
  if (v9 != a3)
  {
    free(v9);
    uint64_t v26 = *a2;
  }

  v25[v26 + v5] = 0;
  *a1 = v25;
  *a2 = v26 + v5;
}

uint64_t sub_18830E1D8( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = sub_18830E298(a1, &v27, &v25, a4, a5, a6, a7, a8);
  if (!(_DWORD)v15)
  {
    uint64_t v16 = sub_18830E298(a2, &v26, &v24, v10, v11, v12, v13, v14);
    if ((_DWORD)v16)
    {
      uint64_t v15 = v16;
      uint64_t v17 = v27;
    }

    else
    {
      if (v25 == v24)
      {
        uint64_t v17 = v26;
        uint64_t v18 = v27;
        if (v25)
        {
          uint64_t v19 = 0LL;
          size_t v20 = v25 - 1;
          do
          {
            int v21 = v18[v19] - v17[v19];
            *a3 = v21;
            if (v21) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = v20 == v19;
            }
            ++v19;
          }

          while (!v22);
        }
      }

      else
      {
        *a3 = v25 - v24;
        uint64_t v17 = v26;
        uint64_t v18 = v27;
      }

      free(v18);
      uint64_t v15 = 0LL;
    }

    free(v17);
  }

  return v15;
}

uint64_t sub_18830E298( uint64_t a1, void *a2, size_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0LL;
  *a3 = 0LL;
  switch(*(_DWORD *)a1)
  {
    case 0:
      sub_188303AB8("unknown directory type: %d", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, 0);
    case 1:
      size_t v9 = *(void *)(a1 + 8);
      uint64_t v13 = malloc(4 * v9);
      if (!v13) {
        return 12LL;
      }
      unint64_t v8 = v13;
      if (v9)
      {
        uint64_t v14 = 0LL;
        uint64_t v15 = *(void *)(a1 + 16);
        do
        {
          *((_DWORD *)v13 + v14) = *(unsigned __int8 *)(v15 + v14);
          ++v14;
        }

        while (v9 != v14);
      }

      goto LABEL_28;
    case 2:
      uint64_t v16 = *(const char **)(a1 + 8);
      size_t v9 = strlen(v16);
      uint64_t v17 = malloc(4 * v9);
      if (!v17) {
        return 12LL;
      }
      unint64_t v8 = v17;
      if (v9)
      {
        for (uint64_t i = 0LL; i != v9; ++i)
          *((_DWORD *)v17 + i) = v16[i];
      }

      goto LABEL_28;
    case 3:
      size_t v9 = *(void *)(a1 + 8);
      uint64_t v19 = malloc(4 * v9);
      if (!v19) {
        return 12LL;
      }
      unint64_t v8 = v19;
      if (v9)
      {
        uint64_t v20 = 0LL;
        uint64_t v21 = *(void *)(a1 + 16);
        do
        {
          *((_DWORD *)v19 + v20) = *(unsigned __int8 *)(v21 + v20);
          ++v20;
        }

        while (v9 != v20);
      }

      goto LABEL_28;
    case 4:
      size_t v9 = *(void *)(a1 + 8);
      BOOL v22 = malloc(4 * v9);
      if (!v22) {
        return 12LL;
      }
      unint64_t v8 = v22;
      if (v9) {
        memcpy(v22, *(const void **)(a1 + 16), 4 * v9);
      }
      goto LABEL_28;
    case 5:
      uint64_t v23 = sub_1882FCE78(*(char **)(a1 + 8), &v31);
      if ((_DWORD)v23) {
        return v23;
      }
      size_t v24 = malloc(4 * v31);
      if (!v24) {
        return 12LL;
      }
      unint64_t v8 = v24;
      uint64_t v25 = wind_utf8ucs4(*(char **)(a1 + 8), (uint64_t)v24, &v31);
      if ((_DWORD)v25)
      {
        uint64_t v23 = v25;
        free(v8);
      }

      else
      {
        size_t v9 = v31;
LABEL_28:
        uint64_t v29 = malloc(4 * v9);
        *a2 = v29;
        if (v29)
        {
          memcpy(v29, v8, 4 * v9);
          *a3 = v9;
          free(v8);
          return 0LL;
        }

        else
        {
          free(v8);
          *a2 = 0LL;
          *a3 = 0LL;
          return 12LL;
        }
      }

      return v23;
    case 6:
      size_t v9 = *(void *)(a1 + 8);
      uint64_t v26 = malloc(4 * v9);
      if (!v26) {
        return 12LL;
      }
      unint64_t v8 = v26;
      if (v9)
      {
        uint64_t v27 = 0LL;
        uint64_t v28 = *(void *)(a1 + 16);
        do
        {
          *((_DWORD *)v26 + v27) = *(unsigned __int16 *)(v28 + 2 * v27);
          ++v27;
        }

        while (v9 != v27);
      }

      goto LABEL_28;
    default:
      goto LABEL_28;
  }

uint64_t sub_18830E4C8(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a2 + 24);
  *a3 = v3;
  if (!v3)
  {
    if (!*(_DWORD *)(a1 + 24))
    {
LABEL_12:
      uint64_t result = 0LL;
      *a3 = 0;
      return result;
    }

    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      int v9 = *(_DWORD *)(v8 + 16 * v7) - *(_DWORD *)(*(void *)(a2 + 32) + 16 * v7);
      *a3 = v9;
      if (v9) {
        break;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      if (*(_DWORD *)(v8 + 16 * v7))
      {
        unint64_t v10 = 0LL;
        uint64_t v11 = 16LL;
        do
        {
          int v12 = der_heim_oid_cmp();
          *a3 = v12;
          if (v12) {
            return 0LL;
          }
          uint64_t result = sub_18830E1D8( *(void *)(*(void *)(a1 + 32) + 16 * v7 + 8) + v11,  *(void *)(*(void *)(a2 + 32) + 16 * v7 + 8) + v11,  a3,  v13,  v14,  v15,  v16,  v17);
          if ((_DWORD)result) {
            return result;
          }
          if (*a3) {
            return 0LL;
          }
          ++v10;
          uint64_t v8 = *(void *)(a1 + 32);
          v11 += 40LL;
        }

        while (v10 < *(unsigned int *)(v8 + 16 * v7));
      }
    }
  }

  return 0LL;
}

uint64_t hx509_name_cmp(uint64_t a1, uint64_t a2)
{
  LODWORD(result) = sub_18830E4C8(a1, a2, (int *)&v3);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v3;
  }
}

uint64_t sub_18830E610(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, void **a5)
{
  if (a5) {
    *a5 = 0LL;
  }
  if (*(_DWORD *)(a1 + 24) <= a2) {
    return 34LL;
  }
  unint64_t v8 = *a4;
  if (v8 >= *(_DWORD *)(*(void *)(a1 + 32) + 16LL * a2))
  {
LABEL_8:
    if (a5) {
      return 569879LL;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = 40 * v8;
    uint64_t v11 = 16LL * a2;
    while (der_heim_oid_cmp())
    {
      ++v8;
      v10 += 40LL;
    }

    *a4 = v8 + 1;
    if (a5)
    {
      uint64_t v17 = sub_18830E298( *(void *)(*(void *)(a1 + 32) + 16 * v9 + 8) + v10 + 16,  &v23,  (size_t *)&v25,  v12,  v13,  v14,  v15,  v16);
      if (!(_DWORD)v17)
      {
        uint64_t v19 = v23;
        uint64_t v20 = v25;
        uint64_t v21 = sub_1882FD030(v23, v25, &v24);
        if ((_DWORD)v21)
        {
          uint64_t v17 = v21;
          free(v19);
        }

        else
        {
          BOOL v22 = malloc(++v24);
          *a5 = v22;
          uint64_t v17 = wind_ucs4utf8(v19, v20, v22, &v24);
          free(v19);
          if ((_DWORD)v17)
          {
            free(*a5);
            *a5 = 0LL;
          }
        }
      }
    }

    else
    {
      return 569879LL;
    }
  }

  return v17;
}

uint64_t hx509_name_from_Name(uint64_t a1, void **a2)
{
  unsigned int v3 = calloc(1uLL, 0x28uLL);
  *a2 = v3;
  if (!v3) {
    return 12LL;
  }
  uint64_t v4 = hx509_name_to_Name_0();
  if ((_DWORD)v4)
  {
    free(*a2);
    *a2 = 0LL;
  }

  return v4;
}

uint64_t sub_18830E7F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9 = (char *)realloc(*(void **)(a2 + 32), 16LL * (*(_DWORD *)(a2 + 24) + 1));
  if (v9)
  {
    *(void *)(a2 + 32) = v9;
    if (a3)
    {
      uint64_t v14 = &v9[16 * *(unsigned int *)(a2 + 24)];
    }

    else
    {
      memmove(v9 + 16, v9, 16LL * *(unsigned int *)(a2 + 24));
      uint64_t v14 = *(char **)(a2 + 32);
    }

    uint64_t v16 = malloc(0x28uLL);
    *((void *)v14 + 1) = v16;
    if (!v16) {
      return 12LL;
    }
    *(_DWORD *)uint64_t v14 = 1;
    uint64_t v15 = der_copy_oid();
    if (!(_DWORD)v15)
    {
      uint64_t v17 = *((void *)v14 + 1);
      *(_DWORD *)(v17 + 16) = 5;
      *(void *)(v17 + 24) = strdup(a5);
      if (*(void *)(*((void *)v14 + 1) + 24LL))
      {
        uint64_t v15 = 0LL;
        ++*(_DWORD *)(a2 + 24);
        return v15;
      }

      return 12LL;
    }
  }

  else
  {
    uint64_t v15 = 12LL;
    hx509_set_error_string(a1, 0, 12, "Out of memory", v10, v11, v12, v13, v19);
  }

  return v15;
}

uint64_t hx509_parse_name(uint64_t a1, const char *a2, void *a3)
{
  unsigned int v3 = a3;
  *a3 = 0LL;
  uint64_t v6 = calloc(1uLL, 0x28uLL);
  uint64_t v42 = (uint64_t)v6;
  if (!v6) {
    goto LABEL_30;
  }
  uint64_t v11 = v6;
  v6[4] = 1;
  uint64_t v12 = strdup(a2);
  if (!v12)
  {
    free(v11);
LABEL_30:
    uint64_t v33 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v38);
    return v33;
  }

  uint64_t v13 = v12;
  int v14 = *v12;
  if (!*v12)
  {
LABEL_28:
    free(v13);
    uint64_t v33 = 0LL;
    void *v3 = v11;
    return v33;
  }

  unint64_t v39 = v3;
  uint64_t v15 = &v12[strlen(v12)];
  uint64_t v40 = v13;
  while (2)
  {
    size_t v16 = 0LL;
    for (unint64_t i = ~(unint64_t)v13; ; --i)
    {
      if (v14 == 92)
      {
        if (v13[v16 + 1])
        {
          memmove(&v13[v16], &v13[v16 + 1], (size_t)&v15[i]);
          *--uint64_t v15 = 0;
        }

        goto LABEL_12;
      }

      if (!v14) {
        break;
      }
      if (v14 == 44)
      {
        uint64_t v18 = 1LL;
        goto LABEL_14;
      }

void hx509_name_free(void **a1)
{
  unint64_t v2 = *a1;
  v2[4] = 0LL;
  *(_OWORD *)unint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  free(*a1);
  *a1 = 0LL;
}

uint64_t hx509_name_copy(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = calloc(1uLL, 0x28uLL);
  *a3 = v4;
  if (v4)
  {
    uint64_t result = hx509_name_to_Name_0();
    if (!(_DWORD)result) {
      return result;
    }
    free(*a3);
    *a3 = 0LL;
  }

  return 12LL;
}

uint64_t hx509_name_normalize()
{
  return 0LL;
}

uint64_t hx509_name_expand( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    unint64_t v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = *(void *)(a2 + 32);
      while (!*(_DWORD *)(v13 + 16 * v12))
      {
LABEL_24:
        uint64_t v36 = 0LL;
        if (++v12 >= v10) {
          return v36;
        }
      }

      unint64_t v14 = 0LL;
      while (1)
      {
        uint64_t v15 = *(void *)(v13 + 16 * v12 + 8);
        if (*(_DWORD *)(v15 + 40 * v14 + 16) != 5) {
          break;
        }
        uint64_t v16 = v15 + 40 * v14;
        char v19 = *(const char **)(v16 + 24);
        uint64_t v17 = (void **)(v16 + 24);
        uint64_t v18 = v19;
        uint64_t v20 = strstr(v19, "${");
        uint64_t v21 = v20;
        if (v20)
        {
          uint64_t v22 = rk_strpoolprintf(0LL, "%.*s", (int)v20 - (int)v18, v18);
          if (v22)
          {
            while (1)
            {
              if (!v21) {
                goto LABEL_20;
              }
              uint64_t v23 = strchr(v21, 125);
              if (!v23) {
                break;
              }
              uint64_t v28 = v23;
              int v29 = v21 + 2;
              char v30 = (_BYTE)v23 - (_BYTE)v29;
              size_t v31 = (const char *)hx509_env_lfind(a1, a3, v29, v23 - v29);
              if (!v31)
              {
                uint64_t v41 = "variable %.*s missing";
                char v42 = v30;
                goto LABEL_34;
              }

              int v32 = rk_strpoolprintf(v22, "%s", v31);
              if (v32)
              {
                uint64_t v33 = v32;
                uint64_t v21 = strstr(v28 + 1, "${");
                uint64_t v34 = v21 ? rk_strpoolprintf(v33, "%.*s") : rk_strpoolprintf(v33, "%s");
                uint64_t v22 = v34;
                if (v34) {
                  continue;
                }
              }

              goto LABEL_29;
            }

            uint64_t v41 = "missing }";
LABEL_34:
            uint64_t v36 = 22LL;
            hx509_set_error_string(a1, 0, 22, v41, v24, v25, v26, v27, v42);
            sub_1882FAD7C(v22);
            return v36;
          }

uint64_t hx509_unparse_der_name(uint64_t a1, uint64_t a2, void **a3)
{
  *a3 = 0LL;
  uint64_t v4 = sub_18831336C();
  if (!(_DWORD)v4)
  {
    uint64_t v4 = sub_18830DD10((uint64_t)v6, a3);
    sub_1883133BC();
  }

  return v4;
}

uint64_t hx509_name_binary(uint64_t a1, uint64_t a2)
{
  size_t v3 = sub_1883133AC();
  *(void *)a2 = v3;
  uint64_t v4 = malloc(v3);
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v4;
  if (!v4) {
    return 12LL;
  }
  uint64_t v5 = sub_18831338C();
  if ((_DWORD)v5)
  {
    uint64_t v13 = v5;
    free(*(void **)(a2 + 8));
    *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  }

  else
  {
    if (*(void *)a2) {
      sub_188303AB8("internal ASN.1 encoder error", v6, v7, v8, v9, v10, v11, v12, v15);
    }
    return 0LL;
  }

  return v13;
}

uint64_t sub_18830EFEC(uint64_t a1, void **a2)
{
  uint64_t result = hx509_name_from_Name(a1, (void **)&v5);
  if (!(_DWORD)result)
  {
    uint64_t v4 = sub_18830DD10(v5, a2);
    hx509_name_free((void **)&v5);
    return v4;
  }

  return result;
}

BOOL hx509_name_is_null_p(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 0;
}

uint64_t hx509_general_name_unparse(int *a1, char **a2)
{
  *a2 = 0LL;
  int v2 = *a1;
  uint64_t result = 22LL;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      hx509_oid_sprint();
      if (!v19[0]) {
        return 12LL;
      }
      uint64_t v6 = rk_strpoolprintf(0LL, "otherName: %s");
      goto LABEL_18;
    case 2:
      uint64_t v16 = *((void *)a1 + 1);
      uint64_t v17 = *((void *)a1 + 2);
      uint64_t v7 = "rfc822Name: %.*s\n";
      goto LABEL_9;
    case 3:
      uint64_t v16 = *((void *)a1 + 1);
      uint64_t v17 = *((void *)a1 + 2);
      uint64_t v7 = "dNSName: %.*s\n";
      goto LABEL_9;
    case 4:
      v19[1] = 0LL;
      uint64_t v20 = 0LL;
      v19[0] = 0LL;
      LODWORD(v20) = a1[2];
      __int128 v21 = *((_OWORD *)a1 + 1);
      uint64_t result = sub_18830EFEC((uint64_t)v19, (void **)&v18);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v8 = v18;
      uint64_t v9 = (uint64_t *)rk_strpoolprintf(0LL, "directoryName: %s", v18);
      uint64_t v10 = (char *)v8;
      goto LABEL_19;
    case 5:
      uint64_t v16 = *((void *)a1 + 1);
      uint64_t v17 = *((void *)a1 + 2);
      uint64_t v7 = "URI: %.*s";
LABEL_9:
      uint64_t v11 = rk_strpoolprintf(0LL, v7, v16, v17);
      goto LABEL_10;
    case 6:
      uint64_t v12 = (unsigned __int8 *)*((void *)a1 + 2);
      uint64_t v13 = rk_strpoolprintf(0LL, "IPAddress: ");
      if (!v13) {
        return 12LL;
      }
      uint64_t v14 = *((void *)a1 + 1);
      if (v14 == 16)
      {
        uint64_t v11 = rk_strpoolprintf( v13,  "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X",  *v12,  v12[1],  v12[2],  v12[3],  v12[4]);
      }

      else if (v14 == 4)
      {
        uint64_t v11 = rk_strpoolprintf(v13, "%d.%d.%d.%d");
      }

      else
      {
        uint64_t v11 = rk_strpoolprintf(v13, "unknown IP address of length %lu");
      }

uint64_t hx509_peer_info_alloc(uint64_t a1, void *a2)
{
  uint64_t v4 = calloc(1uLL, 0x18uLL);
  *a2 = v4;
  if (v4) {
    return 0LL;
  }
  uint64_t v9 = 12LL;
  hx509_set_error_string(a1, 0, 12, "out of memory", v5, v6, v7, v8, v11);
  return v9;
}

void hx509_peer_info_free(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      hx509_cert_free(v2);
    }
    sub_18830F320((uint64_t)a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    free(a1);
  }

void sub_18830F320(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        free_AlgorithmIdentifier();
        ++v5;
        v4 += 24LL;
      }

      while (v5 < *(void *)(a1 + 16));
      uint64_t v2 = *(void **)v3;
    }

    free(v2);
    *(void *)uint64_t v3 = 0LL;
    *(void *)(v3 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  }

uint64_t hx509_peer_info_set_cert(void *a1, uint64_t a2)
{
  if (*a1) {
    hx509_cert_free();
  }
  *a1 = hx509_cert_ref(a2);
  return 0LL;
}

uint64_t hx509_peer_info_add_cms_alg(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = realloc(*(void **)(a2 + 8), 24LL * *(void *)(a2 + 16) + 24);
  if (v4)
  {
    *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v4;
    uint64_t v9 = copy_AlgorithmIdentifier();
    if (!(_DWORD)v9)
    {
      ++*(void *)(a2 + 16);
      return v9;
    }

    uint64_t v10 = a1;
    int v11 = v9;
  }

  else
  {
    uint64_t v9 = 12LL;
    uint64_t v10 = a1;
    int v11 = 12;
  }

  hx509_set_error_string(v10, 0, v11, "out of memory", v5, v6, v7, v8, v13);
  return v9;
}

uint64_t hx509_peer_info_set_cms_algs(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v7 = calloc(a4, 0x18uLL);
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v7;
  if (v7)
  {
    *(void *)(a2 + 16) = a4;
    if (a4)
    {
      for (uint64_t i = 0LL; ; i += 24LL)
      {
        uint64_t v13 = copy_AlgorithmIdentifier();
        if ((_DWORD)v13) {
          break;
        }
        if (!--a4) {
          return 0LL;
        }
      }

      uint64_t v14 = v13;
      hx509_clear_error_string(a1);
      sub_18830F320(a2);
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    *(void *)(a2 + 16) = 0LL;
    uint64_t v14 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v8, v9, v10, v11, v16);
  }

  return v14;
}

uint64_t hx509_print_stdout(FILE *a1, const char *a2, va_list a3)
{
  if (!a1) {
    a1 = (FILE *)*MEMORY[0x1895F89E0];
  }
  return vfprintf(a1, a2, a3);
}

uint64_t hx509_oid_sprint()
{
  return der_print_heim_oid();
}

void hx509_oid_print(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *), uint64_t a3)
{
}

uint64_t sub_18830F5B4( uint64_t (*a1)(uint64_t, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a1(a2, a3, &a9);
}

uint64_t hx509_bitstring_print( uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_18830F5B4(a2, a3, (uint64_t)"\tlength: %d\n\t", a4, a5, a6, a7, a8, *a1);
  if ((unint64_t)(*a1 + 7) >= 8)
  {
    unint64_t v17 = 0LL;
    do
      uint64_t result = sub_18830F5B4(a2, a3, (uint64_t)"%02x%s%s", v12, v13, v14, v15, v16, *(unsigned __int8 *)(a1[1] + v17++));
    while (v17 < (unint64_t)(*a1 + 7) >> 3);
  }

  return result;
}

uint64_t hx509_cert_keyusage_print(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  *a3 = 0LL;
  uint64_t v5 = sub_18830392C(a1, a2, &v14);
  if (!(_DWORD)v5)
  {
    int v6 = sub_1883138FC(v14);
    unparse_flags(v6, (uint64_t)off_18C706D10, __s1, 0x100uLL);
    uint64_t v7 = strdup(__s1);
    *a3 = v7;
    if (v7)
    {
      return 0LL;
    }

    else
    {
      uint64_t v5 = 12LL;
      hx509_set_error_string(a1, 0, 12, "out of memory", v8, v9, v10, v11, v13);
    }
  }

  return v5;
}

uint64_t sub_18830F7BC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1882FE868();
  if ((_DWORD)v4)
  {
    uint64_t v20 = v4;
    uint64_t v10 = "Decoding kerberos name in SAN failed: %d";
LABEL_11:
    uint64_t v18 = 1LL;
    sub_1883106FC(a1, 1, (uint64_t)v10, v5, v6, v7, v8, v9, v20);
    return v18;
  }

  if (v21 != *a2)
  {
    uint64_t v10 = "Decoding kerberos name have extra bits on the end";
    goto LABEL_11;
  }

  if (v23)
  {
    unint64_t v11 = 0LL;
    do
    {
      sub_1883106FC(a1, 2, (uint64_t)"%s", v5, v6, v7, v8, v9, *(void *)(v24 + 8 * v11++));
      unint64_t v12 = v23;
      if (v11 < v23)
      {
        sub_1883106FC(a1, 2, (uint64_t)"/", v5, v6, v7, v8, v9, v20);
        unint64_t v12 = v23;
      }
    }

    while (v11 < v12);
  }

  sub_1883106FC(a1, 2, (uint64_t)"@", v5, v6, v7, v8, v9, v20);
  sub_1883106FC(a1, 2, (uint64_t)"%s", v13, v14, v15, v16, v17, v22);
  sub_1882FE8B8();
  return 0LL;
}

uint64_t sub_18830F8E0(uint64_t a1)
{
  uint64_t v2 = sub_188313E58();
  if ((_DWORD)v2)
  {
    uint64_t v8 = 1LL;
    sub_1883106FC(a1, 1, (uint64_t)"Decoding JID in SAN failed: %d", v3, v4, v5, v6, v7, v2);
  }

  else
  {
    sub_1883106FC(a1, 2, (uint64_t)"%s", v3, v4, v5, v6, v7, v10);
    sub_188313EA8();
    return 0LL;
  }

  return v8;
}

uint64_t sub_18830F964()
{
  return 0LL;
}

uint64_t sub_18830F96C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a3)
  {
    case 1:
      if (!*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical not set on SHOULD\n";
        goto LABEL_10;
      }

      break;
    case 2:
      if (*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical set on SHOULD NOT\n";
        goto LABEL_10;
      }

      break;
    case 3:
      if (!*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical not set on MUST\n";
        goto LABEL_10;
      }

      break;
    case 4:
      if (*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical set on MUST NOT\n";
LABEL_10:
        sub_1883106FC(a1, 1, (uint64_t)v9, a4, a5, a6, a7, a8, v8);
      }

      break;
    default:
      return 0LL;
  }

  return 0LL;
}

uint64_t sub_18830F9F8( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 0x20u;
  sub_18830F96C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = sub_188313964();
  if ((_DWORD)v10)
  {
    uint64_t v25 = v10;
    uint64_t v16 = "Decoding SubjectKeyIdentifier failed: %d";
LABEL_12:
    uint64_t v23 = 1LL;
    sub_1883106FC(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v25);
    return v23;
  }

  if (v26[1] != *(void **)(a4 + 24))
  {
    uint64_t v16 = "Decoding SKI ahve extra bits on the end";
    goto LABEL_12;
  }

  unint64_t v17 = v27;
  if (!v27)
  {
    sub_1883106FC(a1, 1, (uint64_t)"SKI is too short (0 bytes)", v11, v12, v13, v14, v15, v25);
    unint64_t v17 = 0LL;
  }

  if (v17 >= 0x15)
  {
    sub_1883106FC(a1, 1, (uint64_t)"SKI is too long", v11, v12, v13, v14, v15, v25);
    unint64_t v17 = v27;
  }

  rk_hex_encode(v28, v17, v26);
  if (v26[0])
  {
    sub_1883106FC(a1, 2, (uint64_t)"\tsubject key id: %s\n", v18, v19, v20, v21, v22, (uint64_t)v26[0]);
    free(v26[0]);
  }

  sub_1883139B4();
  return 0LL;
}

uint64_t sub_18830FB04( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 8u;
  return sub_1883107C4(a1, (uint64_t)a2, (uint64_t)"subject", a3, a4, a6, a7, a8);
}

uint64_t sub_18830FB24( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 0x10u;
  return sub_1883107C4(a1, (uint64_t)a2, (uint64_t)"issuer", a3, a4, a6, a7, a8);
}

uint64_t sub_18830FB44( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = sub_1883139D8();
  if (v11)
  {
    printf("\tret = %d while decoding BasicConstraints\n", v11);
  }

  else
  {
    if (v25 != *(void *)(a4 + 24)) {
      puts("\tlength of der data isn't same as extension");
    }
    unint64_t v17 = "NOT ";
    if (v26 && *v26) {
      unint64_t v17 = "";
    }
    sub_1883106FC(a1, 2, (uint64_t)"\tis %sa CA\n", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (v27) {
      sub_1883106FC(a1, 2, (uint64_t)"\tpathLenConstraint: %d\n", v18, v19, v20, v21, v22, *v27);
    }
    if (v26)
    {
      if (*v26)
      {
        if (!*(void *)(a4 + 16)) {
          sub_1883106FC(a1, 1, (uint64_t)"Is a CA and not BasicConstraints CRITICAL\n", v18, v19, v20, v21, v22, v24);
        }
        *a2 |= 2u;
      }

      else
      {
        sub_1883106FC(a1, 1, (uint64_t)"cA is FALSE, not allowed to be\n", v18, v19, v20, v21, v22, v24);
      }
    }

    sub_188313A28();
  }

  return 0LL;
}

uint64_t sub_18830FC7C( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_188313B4C();
  if (!(_DWORD)v10)
  {
    sub_1883106FC(a1, 2, (uint64_t)"CRL Distribution Points:\n", v11, v12, v13, v14, v15, v37);
    unint64_t v17 = v43;
    if (!v43)
    {
LABEL_26:
      sub_188313B9C();
      uint64_t v16 = 0LL;
      *a2 |= 0x80u;
      return v16;
    }

    uint64_t v18 = 0LL;
    while (!*(void *)(v44 + 24 * v18))
    {
LABEL_25:
      if (++v18 >= v17) {
        goto LABEL_26;
      }
    }

    uint64_t v19 = sub_188313ADC();
    if ((_DWORD)v19)
    {
      sub_1883106FC(a1, 1, (uint64_t)"Failed to parse CRL Distribution Point Name: %d\n", v20, v21, v22, v23, v24, v19);
LABEL_24:
      unint64_t v17 = v43;
      goto LABEL_25;
    }

    if (v40)
    {
      if (v40 != 2)
      {
        if (v40 == 1)
        {
          sub_1883106FC(a1, 2, (uint64_t)"Fullname:\n", v20, v21, v22, v23, v24, v38);
          if (v41)
          {
            uint64_t v25 = 0LL;
            for (unint64_t i = 0LL; i < v41; ++i)
            {
              else {
                BOOL v32 = v39 == 0LL;
              }
              if (!v32)
              {
                sub_1883106FC(a1, 2, (uint64_t)"   %s\n", v27, v28, v29, v30, v31, (uint64_t)v39);
                free(v39);
              }

              v25 += 40LL;
            }
          }
        }

        goto LABEL_23;
      }

      uint64_t v33 = a1;
      int v34 = 2;
      uint64_t v35 = "Unknown nameRelativeToCRLIssuer";
    }

    else
    {
      uint64_t v33 = a1;
      int v34 = 1;
      uint64_t v35 = "Unknown DistributionPointName";
    }

    sub_1883106FC(v33, v34, (uint64_t)v35, v20, v21, v22, v23, v24, v38);
LABEL_23:
    sub_188313B2C();
    goto LABEL_24;
  }

  uint64_t v16 = 1LL;
  sub_1883106FC(a1, 1, (uint64_t)"Decoding CRL Distribution Points failed: %d\n", v11, v12, v13, v14, v15, v10);
  return v16;
}

uint64_t sub_18830FE64( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 0x40u;
  sub_18830F96C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = sub_188313904();
  if ((_DWORD)v10)
  {
    uint64_t v24 = v10;
    uint64_t v16 = "Decoding AuthorityKeyIdentifier failed: %d";
LABEL_9:
    uint64_t v22 = 1LL;
    sub_1883106FC(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v24);
    return v22;
  }

  if (v25[1] != *(void **)(a4 + 24))
  {
    uint64_t v16 = "Decoding SKI ahve extra bits on the end";
    goto LABEL_9;
  }

  if (v26)
  {
    rk_hex_encode(*(unsigned __int8 **)(v26 + 8), *(void *)v26, v25);
    if (v25[0])
    {
      sub_1883106FC(a1, 2, (uint64_t)"\tauthority key id: %s\n", v17, v18, v19, v20, v21, (uint64_t)v25[0]);
      free(v25[0]);
    }
  }

  return 0LL;
}

uint64_t sub_18830FF30( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_188313A7C();
  if (!(_DWORD)v10)
  {
    if (v24 == *(void *)(a4 + 24))
    {
      if (!v25)
      {
        uint64_t v16 = "ExtKeyUsage length is 0";
        goto LABEL_3;
      }

      uint64_t v18 = 0LL;
      unint64_t v19 = 0LL;
      while (!der_print_heim_oid())
      {
        sub_1883106FC(a1, 2, (uint64_t)"\teku-%d: %s\n", v11, v12, v13, v14, v15, v19);
        free(v23);
        ++v19;
        v18 += 16LL;
        if (v19 >= v25)
        {
          sub_188313ACC();
          return 0LL;
        }
      }

      uint64_t v22 = v19;
      uint64_t v20 = "\tEKU: failed to print oid %d";
    }

    else
    {
      uint64_t v20 = "Padding data in EKU";
    }

    uint64_t v17 = 1LL;
    sub_1883106FC(a1, 1, (uint64_t)v20, v11, v12, v13, v14, v15, v22);
    sub_188313ACC();
    return v17;
  }

  uint64_t v22 = v10;
  uint64_t v16 = "Decoding ExtKeyUsage failed: %d";
LABEL_3:
  uint64_t v17 = 1LL;
  sub_1883106FC(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v22);
  return v17;
}

uint64_t sub_18831005C( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 4u;
  return 0LL;
}

uint64_t sub_18831008C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_188313EB8();
  if (v9)
  {
    printf("\tret = %d while decoding AuthorityInfoAccessSyntax\n", v9);
  }

  else
  {
    if (v25)
    {
      uint64_t v15 = 0LL;
      for (unint64_t i = 0LL; i < v25; ++i)
      {
        sub_1883106FC(a1, 2, (uint64_t)"\ttype: ", v10, v11, v12, v13, v14, v23);
        hx509_oid_print(v26 + v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_1883107B0, a1);
        hx509_general_name_unparse((int *)(v26 + v15 + 16), (char **)&v24);
        sub_1883106FC(a1, 2, (uint64_t)"\n\tdirname: %s\n", v17, v18, v19, v20, v21, (uint64_t)v24);
        free(v24);
        v15 += 56LL;
      }
    }

    sub_188313ED8();
  }

  return 0LL;
}

uint64_t hx509_validate_ctx_init(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc(0x18uLL);
  *a2 = v3;
  if (!v3) {
    return 12LL;
  }
  uint64_t v4 = v3;
  uint64_t result = 0LL;
  void *v4 = 0LL;
  v4[1] = 0LL;
  v4[2] = 0LL;
  return result;
}

uint64_t hx509_validate_ctx_set_print(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

_DWORD *hx509_validate_ctx_add_flags(_DWORD *result, int a2)
{
  *result |= a2;
  return result;
}

uint64_t hx509_validate_cert(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_188300994(a3);
  int v80 = 0;
  uint64_t v11 = (_DWORD *)v5[2];
  if ((!v11 || *v11 <= 1u) && v5[30]) {
    sub_1883106FC((uint64_t)a2, 1, (uint64_t)"Not version 3 certificate with extensions\n", v6, v7, v8, v9, v10, v75);
  }
  if (hx509_cert_get_subject(a3, (void **)&v82)
    || (hx509_name_to_string(v82, &v81),
        sub_1883106FC((uint64_t)a2, 2, (uint64_t)"subject name: %s\n", v17, v18, v19, v20, v21, (uint64_t)v81),
        free(v81),
        hx509_cert_get_issuer(a3, (void **)&v83)))
  {
    abort();
  }

  hx509_name_to_string(v83, &v81);
  sub_1883106FC((uint64_t)a2, 2, (uint64_t)"issuer name: %s\n", v22, v23, v24, v25, v26, (uint64_t)v81);
  free(v81);
  if (!hx509_name_cmp(v82, v83))
  {
    LOBYTE(v80) = v80 | 1;
    sub_1883106FC((uint64_t)a2, 2, (uint64_t)"\tis a self-signed certificate\n", v27, v28, v29, v30, v31, v76);
  }

  sub_1883106FC((uint64_t)a2, 2, (uint64_t)"Validity:\n", v27, v28, v29, v30, v31, v76);
  sub_188310744((uint64_t)(v5 + 14), (char **)&v81);
  sub_1883106FC((uint64_t)a2, 2, (uint64_t)"\tnotBefore %s\n", v32, v33, v34, v35, v36, (uint64_t)v81);
  free(v81);
  sub_188310744((uint64_t)(v5 + 16), (char **)&v81);
  sub_1883106FC((uint64_t)a2, 2, (uint64_t)"\tnotAfter  %s\n", v37, v38, v39, v40, v41, (uint64_t)v81);
  free(v81);
  uint64_t v47 = (_DWORD *)v5[30];
  if (v47)
  {
    if (*v47
      || (sub_1883106FC( (uint64_t)a2,  3,  (uint64_t)"The empty extensions list is not allowed by PKIX\n",  v42,  v43,  v44,  v45,  v46,  v77),  *(_DWORD *)v5[30]))
    {
      uint64_t v48 = 0LL;
      while (1)
      {
        if (!off_18C4D9930) {
          goto LABEL_24;
        }
        uint64_t v49 = 0LL;
        uint64_t v50 = (uint64_t *)&off_18C4D9930;
LABEL_22:
        if (!*v50) {
          goto LABEL_24;
        }
        sub_1883106FC((uint64_t)a2, 3, (uint64_t)"checking extention: %s\n", v42, v43, v44, v45, v46, *v50);
        ((void (*)(_DWORD *, int *, void, uint64_t))(&off_18C4D9930)[4 * v49 + 2])( a2,  &v80,  LODWORD((&off_18C4D9930)[4 * v49 + 3]),  *(void *)(v5[30] + 8LL) + 40 * v48);
LABEL_32:
      }

      while (v50[4])
      {
        v50 += 4;
        ++v49;
      }

uint64_t sub_1883106FC( uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(_DWORD *)result & a2) != 0)
  {
    uint64_t v9 = *(uint64_t (**)(void, uint64_t, uint64_t *))(result + 8);
    if (v9) {
      return v9(*(void *)(result + 16), a3, &a9);
    }
  }

  return result;
}

char *sub_188310744(uint64_t a1, char **a2)
{
  *a2 = 0LL;
  time_t v6 = sub_188301B10(a1);
  uint64_t v3 = gmtime(&v6);
  uint64_t result = (char *)malloc(0x1EuLL);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (char *)strftime(result, 0x1EuLL, "%Y-%m-%d %H:%M:%S", v3);
    *a2 = v5;
  }

  return result;
}

uint64_t sub_1883107B0(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 8);
  if (v1) {
    return v1(*(void *)(result + 16));
  }
  return result;
}

uint64_t sub_1883107C4( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a5 + 24))
  {
    uint64_t v16 = sub_1883137D8();
    if ((_DWORD)v16)
    {
      uint64_t v40 = v16;
      uint64_t v17 = "\tret = %d while decoding %s GeneralNames\n";
    }

    else
    {
      if (v44)
      {
        uint64_t v20 = 0LL;
        while (1)
        {
          uint64_t v21 = (int *)(v45 + 40 * v20);
          if ((*v21 - 2) >= 6)
          {
            if (*v21 == 1)
            {
              sub_1883106FC(a1, 2, (uint64_t)"%sAltName otherName ", v11, v12, v13, v14, v15, a3);
              uint64_t v23 = 0LL;
              while (1)
              {
                uint64_t v24 = &(&off_18C4D98B8)[v23];
                v23 += 3LL;
                if (v23 == 15)
                {
                  hx509_oid_print( v45 + 40 * v20 + 8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_1883107B0,  a1);
                  sub_1883106FC(a1, 2, (uint64_t)" unknown", v30, v31, v32, v33, v34, v41);
                  goto LABEL_20;
                }
              }

              sub_1883106FC(a1, 2, (uint64_t)"%s: ", v25, v26, v27, v28, v29, (uint64_t)*v24);
              ((void (*)(uint64_t, uint64_t))v24[2])(a1, v45 + 40 * v20 + 24);
LABEL_20:
              sub_1883106FC(a1, 2, (uint64_t)"\n", v35, v36, v37, v38, v39, v42);
            }
          }

          else
          {
            uint64_t v22 = hx509_general_name_unparse(v21, (char **)&v43);
            if ((_DWORD)v22)
            {
              uint64_t v40 = v22;
              uint64_t v17 = "ret = %d unparsing GeneralName\n";
              goto LABEL_5;
            }

            sub_1883106FC(a1, 2, (uint64_t)"%s\n", v11, v12, v13, v14, v15, (uint64_t)v43);
            free(v43);
          }

          if (++v20 >= (unint64_t)v44)
          {
            sub_188313828();
            return 0LL;
          }
        }
      }

      uint64_t v40 = a3;
      uint64_t v17 = "%sAltName generalName empty, not allowed\n";
    }
  }

  else
  {
    uint64_t v40 = a3;
    uint64_t v17 = "%sAltName empty, not allowed";
  }

uint64_t hx509_request_init(uint64_t a1, void *a2)
{
  uint64_t v3 = calloc(1uLL, 0x50uLL);
  *a2 = v3;
  if (v3) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

void hx509_request_free(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*v2) {
    hx509_name_free(v2);
  }
  free_SubjectPublicKeyInfo();
  sub_188313ACC();
  sub_188313828();
  uint64_t v3 = *a1;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  _OWORD *v3 = 0u;
  free(*a1);
  *a1 = 0LL;
}

uint64_t hx509_request_set_name(uint64_t a1, void **a2, uint64_t a3)
{
  if (*a2) {
    hx509_name_free(a2);
  }
  if (!a3) {
    return 0LL;
  }
  uint64_t result = hx509_name_copy(a1, a3, a2);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t hx509_request_get_name( uint64_t a1, uint64_t *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (v8) {
    return hx509_name_copy(a1, v8, a3);
  }
  hx509_set_error_string(a1, 0, 22, "Request have no name", a5, a6, a7, a8, vars0);
  return 22LL;
}

uint64_t hx509_request_set_SubjectPublicKeyInfo()
{
  return copy_SubjectPublicKeyInfo();
}

uint64_t hx509_request_get_SubjectPublicKeyInfo()
{
  return copy_SubjectPublicKeyInfo();
}

uint64_t _hx509_request_add_dns_name(int a1, uint64_t a2, char *__s)
{
  return sub_188313838((unsigned int *)(a2 + 64));
}

uint64_t _hx509_request_add_email(int a1, uint64_t a2, char *__s)
{
  return sub_188313838((unsigned int *)(a2 + 64));
}

uint64_t _hx509_request_to_pkcs10( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a2)
  {
    uint64_t v31 = 0LL;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v28 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    *a4 = 0LL;
    a4[1] = 0LL;
    LODWORD(v23) = 0;
    uint64_t v11 = hx509_name_to_Name_0();
    if ((_DWORD)v11) {
      goto LABEL_16;
    }
    uint64_t v11 = copy_SubjectPublicKeyInfo();
    if ((_DWORD)v11) {
      goto LABEL_16;
    }
    *((void *)&v28 + 1) = calloc(1uLL, 0x10uLL);
    if (*((void *)&v28 + 1))
    {
      uint64_t v12 = (void *)sub_188313204();
      v21[0] = v12;
      uint64_t v13 = malloc((size_t)v12);
      v21[1] = v13;
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = sub_1883131E4();
        if ((_DWORD)v15)
        {
          uint64_t v11 = v15;
          uint64_t v16 = v14;
LABEL_8:
          free(v16);
          v21[1] = 0LL;
LABEL_16:
          sub_188313264();
          return v11;
        }

        if (v12) {
LABEL_20:
        }
          abort();
        uint64_t v11 = sub_188306A9C(a1, a3, (uint64_t)off_18C706720, (uint64_t)v21, (uint64_t)&v29, (uint64_t)v20);
        free(v21[1]);
        if ((_DWORD)v11) {
          goto LABEL_16;
        }
        *((void *)&v30 + 1) = 8LL * v20[0];
        uint64_t v31 = v20[1];
        v21[0] = (void *)sub_188313254();
        v21[1] = malloc((size_t)v21[0]);
        if (v21[1])
        {
          uint64_t v17 = sub_188313234();
          if ((_DWORD)v17)
          {
            uint64_t v11 = v17;
            uint64_t v16 = v21[1];
            goto LABEL_8;
          }

          if (!v21[0])
          {
            uint64_t v11 = 0LL;
            *(_OWORD *)a4 = *(_OWORD *)v21;
            goto LABEL_16;
          }

          goto LABEL_20;
        }
      }
    }

    uint64_t v11 = 12LL;
    goto LABEL_16;
  }

  uint64_t v11 = 22LL;
  hx509_set_error_string(a1, 0, 22, "PKCS10 needs to have a subject", a5, a6, a7, a8, v19);
  return v11;
}

uint64_t _hx509_request_parse(uint64_t a1, char *__s1, void ***a3)
{
  if (strncmp(__s1, "PKCS10:", 7uLL))
  {
    uint64_t v10 = 569966LL;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
    return v10;
  }

  uint64_t v11 = __s1 + 7;
  uint64_t v12 = rk_undumpdata(v11, &v22, &v23);
  if ((_DWORD)v12)
  {
    uint64_t v10 = v12;
    char v21 = (char)v11;
    uint64_t v17 = "Failed to map file %s";
LABEL_7:
    hx509_set_error_string(a1, 0, v10, v17, v13, v14, v15, v16, v21);
    return v10;
  }

  uint64_t v10 = sub_188313214();
  j__free(v22);
  if ((_DWORD)v10)
  {
    char v21 = (char)v11;
    uint64_t v17 = "Failed to decode %s";
    goto LABEL_7;
  }

  char v19 = (void **)calloc(1uLL, 0x50uLL);
  *a3 = v19;
  if (v19)
  {
    free_SubjectPublicKeyInfo();
    uint64_t v20 = copy_SubjectPublicKeyInfo();
    if ((_DWORD)v20 || (uint64_t v20 = hx509_name_from_Name((uint64_t)&v25, (void **)&v24), (_DWORD)v20))
    {
      uint64_t v10 = v20;
      sub_188313264();
    }

    else
    {
      uint64_t v10 = hx509_request_set_name(a1, *a3, v24);
      hx509_name_free((void **)&v24);
      sub_188313264();
      if (!(_DWORD)v10) {
        return v10;
      }
    }

    hx509_request_free((void **)a3);
  }

  else
  {
    sub_188313264();
    return 12LL;
  }

  return v10;
}

uint64_t _hx509_request_print(uint64_t a1, void *a2, FILE *a3)
{
  if (!*a2) {
    return 0LL;
  }
  uint64_t v9 = hx509_name_to_string(*a2, &v12);
  if ((_DWORD)v9)
  {
    hx509_set_error_string(a1, 0, v9, "Failed to print name", v5, v6, v7, v8, v11);
  }

  else
  {
    fprintf(a3, "name: %s\n", (const char *)v12);
    free(v12);
  }

  return v9;
}

uint64_t hx509_revoke_init( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = heim_uniq_alloc(0x40uLL, (uint64_t)"hx509-revoke", (uint64_t)sub_188311060, a4, a5, a6, a7, a8);
  *a2 = v9;
  if (!v9) {
    return 12LL;
  }
  uint64_t v10 = v9;
  uint64_t result = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + memset(&v6[2], 0, 40) = 0LL;
  uint64_t v12 = *a2;
  *(void *)(v12 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  *(void *)(v12 + 56) = 0LL;
  return result;
}

void sub_188311060(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      free(*(void **)(*(void *)(a1 + 32) + v2));
      sub_188313DD4();
      ++v3;
      v2 += 192LL;
    }

    while (v3 < *(void *)(a1 + 40));
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    do
    {
      sub_1883124DC(*(void *)(a1 + 48) + v4);
      ++v5;
      v4 += 184LL;
    }

    while (v5 < *(void *)(a1 + 56));
  }

  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 32));
}

void hx509_revoke_free(CFTypeRef *a1)
{
  if (a1)
  {
    heim_release(*a1);
    *a1 = 0LL;
  }

uint64_t hx509_revoke_add_ocsp(uint64_t a1, uint64_t a2, char *__s1)
{
  if (!strncmp(__s1, "FILE:", 5uLL))
  {
    char v11 = __s1 + 5;
    uint64_t v12 = *(const char ***)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    if (v13 && !strcmp(*v12, v11))
    {
      return 0LL;
    }

    else
    {
      uint64_t v14 = realloc(v12, 184 * v13 + 184);
      if (!v14) {
        goto LABEL_9;
      }
      *(void *)(a2 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v14;
      uint64_t v15 = (uint64_t)v14 + 184 * *(void *)(a2 + 56);
      *(_OWORD *)uint64_t v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(void *)(v15 + 176) = 0LL;
      uint64_t v16 = strdup(v11);
      *(void *)uint64_t v15 = v16;
      if (v16)
      {
        uint64_t v10 = sub_188311274(a1, v15);
        if ((_DWORD)v10) {
          free(*(void **)(*(void *)(a2 + 48) + 184LL * *(void *)(a2 + 56)));
        }
        else {
          ++*(void *)(a2 + 56);
        }
      }

      else
      {
LABEL_9:
        hx509_clear_error_string(a1);
        return 12LL;
      }
    }
  }

  else
  {
    uint64_t v10 = 569966LL;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
  }

  return v10;
}

uint64_t sub_188311274(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = 0LL;
  uint64_t v4 = rk_undumpdata(*(const char **)a2, &v26, &v28);
  if (!(_DWORD)v4)
  {
    if (stat(*(const char **)a2, &v27))
    {
      return *__error();
    }

    else
    {
      uint64_t v4 = sub_18831276C((uint64_t)v26, v28, (uint64_t)v30);
      j__free(v26);
      if (!(_DWORD)v4)
      {
        if (v31)
        {
          uint64_t v9 = hx509_certs_init(a1, "MEMORY:ocsp-certs", 0LL, 0LL, &v29);
          if ((_DWORD)v9)
          {
            uint64_t v4 = v9;
            sub_1883131D4();
            return v4;
          }

          uint64_t v15 = v31;
          if (*v31)
          {
            uint64_t v16 = 0LL;
            unint64_t v17 = 0LL;
            do
            {
              if (!hx509_cert_init( a1,  *((void *)v15 + 1) + v16,  (CFTypeRef *)&v25,  v10,  v11,  v12,  v13,  v14))
              {
                hx509_certs_add(a1, v29, v25, v10, v11, v12, v13, v14);
                hx509_cert_free(v25);
              }

              ++v17;
              uint64_t v15 = v31;
              v16 += 288LL;
            }

            while (v17 < *v31);
          }
        }

        *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v27.st_mtimespec.tv_sec;
        sub_1883131D4();
        hx509_certs_free((const void **)(a2 + 168));
        hx509_cert_free(*(void *)(a2 + 176));
        uint64_t v4 = 0LL;
        uint64_t v18 = v29;
        *(void *)(a2 + 160) = v31;
        *(void *)(a2 + 16init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v18;
        __int128 v19 = v30[7];
        *(_OWORD *)(a2 + 112) = v30[6];
        *(_OWORD *)(a2 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v19;
        *(_OWORD *)(a2 + 144) = v30[8];
        __int128 v20 = v30[3];
        *(_OWORD *)(a2 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v30[2];
        *(_OWORD *)(a2 + 64) = v20;
        __int128 v21 = v30[5];
        *(_OWORD *)(a2 + 80) = v30[4];
        *(_OWORD *)(a2 + 96) = v21;
        __int128 v22 = v30[1];
        *(_OWORD *)(a2 + 16) = v30[0];
        *(_OWORD *)(a2 + 32) = v22;
        *(void *)(a2 + 176) = 0LL;
        return v4;
      }

      hx509_set_error_string(a1, 0, v4, "Failed to parse OCSP response", v5, v6, v7, v8, v24);
    }
  }

  return v4;
}

uint64_t hx509_revoke_add_crl(uint64_t a1, uint64_t a2, char *__s1)
{
  if (!strncmp(__s1, "FILE:", 5uLL))
  {
    uint64_t v11 = __s1 + 5;
    uint64_t v12 = *(const char ***)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 40);
    if (v13 && !strcmp(*v12, v11))
    {
      return 0LL;
    }

    else
    {
      uint64_t v14 = (char *)realloc(v12, 192 * v13 + 192);
      if (!v14) {
        goto LABEL_9;
      }
      uint64_t v15 = v14;
      *(void *)(a2 + 32) = v14;
      uint64_t v16 = *(void *)(a2 + 40);
      unint64_t v17 = &v14[192 * v16];
      *(_OWORD *)unint64_t v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_OWORD *)v17 + 7) = 0u;
      *((_OWORD *)v17 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
      *((_OWORD *)v17 + 9) = 0u;
      *((_OWORD *)v17 + 10) = 0u;
      *((_OWORD *)v17 + 11) = 0u;
      uint64_t v18 = strdup(v11);
      *(void *)unint64_t v17 = v18;
      if (v18)
      {
        uint64_t v10 = sub_188311588(v11, (__darwin_time_t *)&v15[192 * v16 + 8], (uint64_t)&v15[192 * v16 + 16]);
        if ((_DWORD)v10) {
          free(*(void **)(*(void *)(a2 + 32) + 192LL * *(void *)(a2 + 40)));
        }
        else {
          ++*(void *)(a2 + 40);
        }
      }

      else
      {
LABEL_9:
        hx509_clear_error_string(a1);
        return 12LL;
      }
    }
  }

  else
  {
    uint64_t v10 = 569966LL;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
  }

  return v10;
}

uint64_t sub_188311588(const char *a1, __darwin_time_t *a2, uint64_t a3)
{
  *(void *)(a3 + 160) = 0LL;
  *(_OWORD *)(a3 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = rk_undumpdata(a1, &v8, &v10);
  if (!(_DWORD)v6)
  {
    if (stat(a1, &v9))
    {
      return *__error();
    }

    else
    {
      *a2 = v9.st_mtimespec.tv_sec;
      uint64_t v6 = sub_188313D84();
      j__free(v8);
      if (!(_DWORD)v6)
      {
        if ((*(_BYTE *)(a3 + 152) & 7) != 0)
        {
          sub_188313DD4();
          return 569925LL;
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return v6;
}

uint64_t hx509_revoke_verify(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v111 = sub_188300994(a5);
  uint64_t v113 = a6;
  uint64_t v9 = sub_188300994(a6);
  hx509_clear_error_string(a1);
  if (a2[7])
  {
    unint64_t v14 = 0LL;
    int v109 = 569859;
    do
    {
      uint64_t v15 = a2[6];
      if (!stat(*(const char **)(v15 + 184 * v14), &v115)
        && *(void *)(v15 + 184 * v14 + 8) != v115.st_mtimespec.tv_sec
        && sub_188311274(a1, v15 + 184 * v14))
      {
        goto LABEL_42;
      }

      uint64_t v16 = v15 + 184 * v14;
      uint64_t v18 = *(void *)(v16 + 176);
      unint64_t v17 = (void *)(v16 + 176);
      if (v18) {
        goto LABEL_7;
      }
      v121[0] = 0LL;
      sub_1883031CC((uint64_t)&v119);
      v119.st_dev = 4;
      v119.st_mtimespec.__darwin_time_t tv_sec = sub_188300994(v113) + 72;
      int v30 = *(_DWORD *)(v15 + 184 * v14 + 40);
      switch(v30)
      {
        case 0:
          goto LABEL_42;
        case 2:
          dev_t v31 = v119.st_dev | 0x100000;
          p_off_t st_size = &v119.st_size;
          break;
        case 1:
          dev_t v31 = v119.st_dev | 8;
          p_off_t st_size = &v119.st_mtimespec.tv_nsec;
          break;
        default:
          goto LABEL_28;
      }

      v119.st_dev = v31;
      *p_off_t st_size = v15 + 184 * v14 + 48;
LABEL_28:
      if (hx509_certs_find(a1, a3, &v119.st_dev, v121, v10, v11, v12, v13))
      {
        uint64_t v33 = *(void *)(v15 + 184 * v14 + 168);
      }

      if (hx509_cert_cmp(v121[0], v113))
      {
        uint64_t v110 = sub_188300994(v113);
        uint64_t v34 = sub_188300994(v121[0]);
        if (sub_188301270(v34, v110, 0))
        {
          uint64_t v35 = a1;
          char v36 = 0;
          int v37 = v109;
          uint64_t v38 = "Revoke OCSP signer is doesn't have CA as signer certificate";
LABEL_39:
          hx509_set_error_string(v35, v36, v37, v38, v10, v11, v12, v13, v108);
LABEL_40:
          if (v121[0]) {
            hx509_cert_free(v121[0]);
          }
          goto LABEL_42;
        }

        int v39 = sub_188302C20(a1, v113, v34 + 248, v34, (void *)(v34 + 272), v11, v12, v13);
        if (v39)
        {
          int v37 = v39;
          uint64_t v35 = a1;
          char v36 = 1;
          uint64_t v38 = "OCSP signer signature invalid";
          goto LABEL_39;
        }
      }

      int v40 = sub_188302C20( a1,  v121[0],  v15 + 184 * v14 + 120,  v15 + 184 * v14 + 16,  (void *)(v15 + 184 * v14 + 144),  v11,  v12,  v13);
      if (v40)
      {
        int v37 = v40;
        uint64_t v35 = a1;
        char v36 = 1;
        uint64_t v38 = "OCSP signature invalid";
        goto LABEL_39;
      }

      *unint64_t v17 = v121[0];
LABEL_7:
      uint64_t v19 = v15 + 184 * v14;
      int v21 = *(_DWORD *)(v19 + 96);
      __int128 v20 = (unsigned int *)(v19 + 96);
      if (v21)
      {
        uint64_t v22 = 0LL;
        unint64_t v23 = 0LL;
        char v24 = (void *)(v15 + 184 * v14 + 104);
        do
        {
          if (!der_heim_integer_cmp()
            && !hx509_verify_signature_0(a1, 0LL, *v24 + (v14 << 7), v111 + 72, *v24 + (v14 << 7) + 24))
          {
            __darwin_ino64_t v25 = *(void *)(v9 + 216);
            *(void *)&v119.st_dev = *(void *)(v9 + 208) >> 3;
            v119.st_ino = v25;
            if (!hx509_verify_signature_0(a1, 0LL, *v24 + v22, (uint64_t)&v119, *v24 + v22 + 40))
            {
              int v26 = *(_DWORD *)(*v24 + v22 + 80);
              if (v26 != 3)
              {
                if (v26 == 2 || v26 == 0)
                {
                  hx509_set_error_string( a1,  0,  569955,  "Certificate revoked by issuer in OCSP",  v10,  v11,  v12,  v13,  v108);
                  return 569955LL;
                }

                uint64_t v28 = *v24 + v22;
                if (*(void *)(v28 + 104) <= *(int *)(a1 + 16) + a4)
                {
                  uint64_t v29 = *(uint64_t **)(v28 + 112);
                  if (!v29 || *v29 >= a4) {
                    return 0LL;
                  }
                }
              }
            }
          }

          ++v23;
          v22 += 128LL;
        }

        while (v23 < *v20);
      }

LABEL_84:
  hx509_cert_free(v121[0]);
  *uint64_t v62 = 1;
LABEL_85:
  uint64_t v98 = *(unsigned int **)(v46 + 120);
  if (v98)
  {
    uint64_t v99 = *v98;
    if ((_DWORD)v99)
    {
      uint64_t v100 = (void *)(*((void *)v98 + 1) + 16LL);
      while (!*v100)
      {
        v100 += 5;
        if (!--v99) {
          goto LABEL_90;
        }
      }

      uint64_t v93 = 569957LL;
      uint64_t v94 = "Unknown CRL extension";
      uint64_t v95 = a1;
      char v96 = 0;
LABEL_81:
      int v97 = v93;
LABEL_82:
      hx509_set_error_string(v95, v96, v97, v94, v10, v11, v12, v13, v108);
      return v93;
    }
  }

LABEL_90:
  uint64_t v101 = *(_DWORD **)(v46 + 112);
  if (!v101 || !*v101) {
    return 0LL;
  }
  uint64_t v102 = 0LL;
  for (uint64_t i = 40LL;
        der_heim_integer_cmp() || sub_188301B10(*(void *)(*(void *)(v46 + 112) + 8LL) + i - 16) > a4;
        i += 48LL)
  {
  }

  uint64_t v105 = *(unsigned int **)(*(void *)(*(void *)(v46 + 112) + 8LL) + i);
  uint64_t v93 = 569955LL;
  if (!v105 || (uint64_t v106 = *v105, !(_DWORD)v106))
  {
LABEL_104:
    uint64_t v94 = "Certificate revoked by issuer in CRL";
    uint64_t v95 = a1;
    char v96 = 0;
    int v97 = 569955;
    goto LABEL_82;
  }

  uint64_t v107 = (void *)(*((void *)v105 + 1) + 16LL);
  while (!*v107)
  {
    v107 += 5;
    if (!--v106) {
      goto LABEL_104;
    }
  }

  return 569957LL;
}

uint64_t hx509_ocsp_request( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = 0LL;
  memset(v32, 0, sizeof(v32));
  __int128 v33 = 0u;
  uint64_t v10 = off_18C706728;
  if (a5) {
    uint64_t v10 = (void *)a5;
  }
  v29[0] = v32;
  v29[1] = a3;
  void v29[2] = v10;
  uint64_t v30 = 0LL;
  uint64_t v11 = hx509_certs_iter_f( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))sub_18831205C,  (uint64_t)v29,  a5,  a6,  a7,  a8);
  hx509_cert_free(v30);
  if ((_DWORD)v11) {
    goto LABEL_19;
  }
  if (!a7) {
    goto LABEL_14;
  }
  uint64_t v12 = calloc(1uLL, 0x10uLL);
  *(void *)&__int128 v33 = v12;
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  _DWORD *v12 = 1;
  unint64_t v14 = calloc(1uLL, 0x28uLL);
  *((void *)v13 + 1) = v14;
  if (!v14)
  {
    _DWORD *v13 = 0;
    goto LABEL_12;
  }

  uint64_t v11 = der_copy_oid();
  if ((_DWORD)v11)
  {
LABEL_19:
    sub_188313174();
    return v11;
  }

  uint64_t v15 = malloc(0xAuLL);
  uint64_t v16 = *((void *)v13 + 1);
  *(void *)(v16 + 32) = v15;
  if (!v15) {
    goto LABEL_12;
  }
  *(void *)(v16 + 24) = 10LL;
  if (CCRandomGenerateBytes(v15, 0xAuLL))
  {
    uint64_t v11 = 569920LL;
    goto LABEL_19;
  }

  if (der_copy_octet_string())
  {
LABEL_12:
    uint64_t v11 = 12LL;
    goto LABEL_19;
  }

uint64_t sub_18831205C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v25 = 0LL;
  uint64_t v5 = sub_188300994(a3);
  uint64_t v6 = realloc(*(void **)(*a2 + 40), 88LL * (*(_DWORD *)(*a2 + 32) + 1));
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = *a2;
  *(void *)(v7 + memset(&v6[2], 0, 40) = v6;
  uint64_t v8 = (uint64_t)v6 + 88 * *(unsigned int *)(v7 + 32);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 80) = 0LL;
  sub_1883031CC((uint64_t)&v22);
  v22 |= 1u;
  uint64_t v23 = v5;
  uint64_t v13 = hx509_certs_find(a1, a2[1], &v22, &v25, v9, v10, v11, v12);
  if (!(_DWORD)v13)
  {
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (hx509_cert_cmp(v15, v25))
      {
        uint64_t v13 = 569959LL;
        hx509_set_error_string( a1,  0,  569959,  "Not same parent certifate as last certificate in request",  v16,  v17,  v18,  v19,  v22);
        goto LABEL_3;
      }
    }

    else
    {
      a2[3] = hx509_cert_ref(v25);
    }

    uint64_t v20 = sub_188300994(v25);
    uint64_t v13 = copy_AlgorithmIdentifier();
    if (!(_DWORD)v13)
    {
      uint64_t v13 = sub_188306A9C(a1, 0LL, v8, v5 + 72, 0LL, v8 + 24);
      if (!(_DWORD)v13)
      {
        uint64_t v21 = *(void *)(v20 + 216);
        v24[0] = *(void *)(v20 + 208) >> 3;
        v24[1] = v21;
        uint64_t v13 = sub_188306A9C(a1, 0LL, v8, (uint64_t)v24, 0LL, v8 + 40);
        if (!(_DWORD)v13)
        {
          uint64_t v13 = sub_188313440();
          if (!(_DWORD)v13)
          {
            ++*(_DWORD *)(*a2 + 32);
            hx509_cert_free(v25);
            return v13;
          }
        }
      }
    }
  }

LABEL_3:
  hx509_cert_free(v25);
  sub_188313134();
  *(void *)(v8 + 80) = 0LL;
  *(_OWORD *)(v8 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  return v13;
}

uint64_t hx509_revoke_ocsp_print(uint64_t a1, char *__s1, FILE *a3)
{
  uint64_t v5 = (FILE *)*MEMORY[0x1895F89E0];
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = v5;
  }
  __int128 v30 = 0uLL;
  __int128 v31 = 0uLL;
  __int128 v32 = 0uLL;
  __int128 v33 = 0uLL;
  __int128 v34 = 0uLL;
  __int128 v35 = 0uLL;
  __int128 v36 = 0uLL;
  __int128 v37 = 0uLL;
  __int128 v38 = 0uLL;
  uint64_t v27 = strdup(__s1);
  if (v27)
  {
    uint64_t v7 = sub_188311274(a1, (uint64_t)&v27);
    if ((_DWORD)v7)
    {
LABEL_24:
      sub_1883124DC((uint64_t)&v27);
      return v7;
    }

    fwrite("signer: ", 8uLL, 1uLL, v6);
    switch((_DWORD)v30)
    {
      case 1:
        hx509_name_from_Name((uint64_t)&v30 + 8, &v26);
        hx509_name_to_string(v26, &v25);
        hx509_name_free(&v26);
        fprintf(v6, " byName: %s\n", v25);
        uint64_t v15 = v25;
        break;
      case 2:
        rk_hex_encode((unsigned __int8 *)v31, *((uint64_t *)&v30 + 1), &v26);
        fprintf(v6, " byKey: %s\n", (const char *)v26);
        uint64_t v15 = (char *)v26;
        break;
      case 0:
        sub_188303AB8("choice_OCSPResponderID unknown", v8, v9, v10, v11, v12, v13, v14, v24);
      default:
        goto LABEL_14;
    }

    free(v15);
LABEL_14:
    sub_188312514(v33);
    fprintf(v6, "producedAt: %s\n", byte_18C707630);
    fprintf(v6, "replies: %d\n", DWORD2(v33));
    if (DWORD2(v33))
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = 0LL;
      do
      {
        uint64_t v18 = *(int *)(v34 + v16 + 80);
        fprintf(v6, "\t%zu. status: %s\n", v17, v3);
        sub_188312514(*(void *)(v34 + v16 + 104));
        fprintf(v6, "\tthisUpdate: %s\n", byte_18C707630);
        if (*(void *)(v34 + v16 + 112))
        {
          sub_188312514(*(void *)(v34 + v16 + 104));
          fprintf(v6, "\tproducedAt: %s\n", byte_18C707630);
        }

        ++v17;
        v16 += 128LL;
      }

      while (v17 < DWORD2(v33));
    }

    fwrite("appended certs:\n", 0x10uLL, 1uLL, v6);
    if ((void)v38) {
      uint64_t v7 = hx509_certs_iter_f( a1,  v38,  (uint64_t (*)(uint64_t, uint64_t))hx509_ci_print_names,  (uint64_t)v6,  v19,  v20,  v21,  v22);
    }
    else {
      uint64_t v7 = 0LL;
    }
    goto LABEL_24;
  }

  return 12LL;
}

uint64_t sub_1883124DC(uint64_t a1)
{
  return hx509_cert_free(*(void *)(a1 + 176));
}

uint64_t sub_188312514(time_t a1)
{
  time_t v2 = a1;
  if (!ctime(&v2)) {
    return __strlcpy_chk();
  }
  uint64_t result = __strlcpy_chk();
  byte_18C707644 = 0;
  return result;
}

uint64_t hx509_ocsp_verify(uint64_t a1, time_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, time_t *a7)
{
  uint64_t v13 = sub_188300994(a3);
  if (!a2) {
    a2 = time(0LL);
  }
  *a7 = 0LL;
  uint64_t v14 = sub_18831276C(a5, a6, (uint64_t)v36);
  if ((_DWORD)v14)
  {
    uint64_t v19 = v14;
    hx509_set_error_string(a1, 0, v14, "Failed to parse OCSP response", v15, v16, v17, v18, v33);
  }

  else if (v37)
  {
    uint64_t v20 = 0LL;
    unint64_t v21 = 0LL;
    uint64_t v22 = v13 + 72;
    while (1)
    {
      if (!der_heim_integer_cmp()
        && !hx509_verify_signature_0(a1, 0LL, v38 + v20, v22, v38 + v20 + 24))
      {
        unsigned int v23 = *(_DWORD *)(v38 + v20 + 80);
        BOOL v24 = v23 > 3 || v23 == 1;
        if (v24 && *(void *)(v38 + v20 + 104) <= a2 + *(int *)(a1 + 16))
        {
          uint64_t v25 = *(time_t **)(v38 + v20 + 112);
          if (!v25) {
            goto LABEL_19;
          }
          time_t v26 = *v25;
          if (v26 >= a2) {
            break;
          }
        }
      }

      ++v21;
      v20 += 128LL;
      if (v21 >= v37) {
        goto LABEL_20;
      }
    }

    a2 = v26;
LABEL_19:
    *a7 = a2;
    sub_1883131D4();
    return 0LL;
  }

  else
  {
LABEL_20:
    uint64_t v19 = 569960LL;
    sub_1883131D4();
    if (hx509_cert_get_subject(a3, &v35)
      || (int v27 = hx509_name_to_string(v35, &v34), hx509_name_free(&v35), v27))
    {
      hx509_clear_error_string(a1);
    }

    else
    {
      hx509_set_error_string( a1,  0,  569960,  "Certificate %s not in OCSP response or not good",  v28,  v29,  v30,  v31,  (char)v34);
      free(v34);
    }
  }

  return v19;
}

uint64_t sub_18831276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 144) = 0LL;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v4 = sub_188313184();
  if ((_DWORD)v4) {
    return v4;
  }
  if (v8 != a2)
  {
    uint64_t v4 = 1859794442LL;
    goto LABEL_7;
  }

  if (v9 <= 6 && ((1 << v9) & 0x6E) != 0) {
    goto LABEL_5;
  }
  if (!v10)
  {
    sub_1883131A4();
    return 22LL;
  }

  if (der_heim_oid_cmp())
  {
LABEL_5:
    uint64_t v4 = 569958LL;
LABEL_7:
    sub_1883131A4();
    return v4;
  }

  uint64_t v6 = sub_1883131B4();
  if ((_DWORD)v6)
  {
    uint64_t v4 = v6;
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(v10 + 16);
  sub_1883131A4();
  if (v8 == v7) {
    return 0LL;
  }
  uint64_t v4 = 1859794442LL;
  sub_1883131D4();
  return v4;
}

uint64_t hx509_crl_alloc(uint64_t a1, void *a2)
{
  uint64_t v4 = calloc(1uLL, 0x10uLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v9 = hx509_certs_init(a1, "MEMORY:crl", 0LL, 0LL, v4);
    uint64_t v10 = (void *)*a2;
    if ((_DWORD)v9)
    {
      free(v10);
      *a2 = 0LL;
    }

    else
    {
      v10[1] = 0LL;
    }
  }

  else
  {
    uint64_t v9 = 12LL;
    hx509_set_error_string(a1, 0, 12, "out of memory", v5, v6, v7, v8, v12);
  }

  return v9;
}

uint64_t hx509_crl_add_revoked_certs( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_merge(a1, *a2, a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_crl_lifetime(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = time(0LL) + a3;
  return 0LL;
}

void hx509_crl_free(uint64_t a1, const void ***a2)
{
  if (*a2)
  {
    hx509_certs_free(*a2);
    unint64_t v3 = *a2;
    const char *v3 = 0LL;
    v3[1] = 0LL;
    free(*a2);
    *a2 = 0LL;
  }

uint64_t hx509_crl_sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = off_18C706720;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  uint64_t v55 = 0LL;
  uint64_t v9 = _hx509_cert_private_key(a2);
  if (!v9)
  {
    uint64_t v17 = 569865LL;
    uint64_t v18 = "Private key missing for CRL signing";
    uint64_t v19 = a1;
    int v20 = 569865;
LABEL_9:
    hx509_set_error_string(v19, 0, v20, v18, v10, v11, v12, v13, v44);
    return v17;
  }

  uint64_t v14 = v9;
  uint64_t v15 = malloc(4uLL);
  *(void *)&__int128 v46 = v15;
  if (!v15)
  {
    uint64_t v18 = "out of memory";
    uint64_t v17 = 12LL;
    uint64_t v19 = a1;
    int v20 = 12;
    goto LABEL_9;
  }

  _DWORD *v15 = 1;
  uint64_t v16 = copy_AlgorithmIdentifier();
  if (!(_DWORD)v16)
  {
    sub_188300994(a2);
    uint64_t v16 = hx509_name_to_Name_0();
    if (!(_DWORD)v16)
    {
      DWORD2(v50) = 2;
      *(void *)&__int128 v51 = time(0LL) - 86400;
      uint64_t v22 = malloc(0x10uLL);
      *((void *)&v51 + 1) = v22;
      if (!v22) {
        goto LABEL_21;
      }
      time_t v27 = a3[1];
      if (!v27)
      {
        time_t v27 = time(0LL) + 31536000;
        uint64_t v22 = (void *)*((void *)&v51 + 1);
      }

      *(_DWORD *)uint64_t v22 = 2;
      v22[1] = v27;
      v52[0] = calloc(1uLL, 0x10uLL);
      if (!v52[0])
      {
LABEL_21:
        uint64_t v38 = "out of memory";
        uint64_t v17 = 12LL;
        uint64_t v39 = a1;
        int v40 = 12;
LABEL_22:
        hx509_set_error_string(v39, 0, v40, v38, v23, v24, v25, v26, v44);
        goto LABEL_6;
      }

      v52[1] = 0LL;
      uint64_t v17 = hx509_certs_iter_f(a1, *a3, sub_188312CD8, (uint64_t)&v45, v23, v24, v25, v26);
      if ((_DWORD)v17) {
        goto LABEL_6;
      }
      if (!*(_DWORD *)v52[0])
      {
        free(v52[0]);
        v52[0] = 0LL;
      }

      size_t v28 = sub_188313D74();
      *(void *)a4 = v28;
      uint64_t v29 = malloc(v28);
      *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v29;
      if (!v29)
      {
        uint64_t v17 = 12LL;
        goto LABEL_24;
      }

      uint64_t v30 = sub_188313D54();
      if ((_DWORD)v30)
      {
        uint64_t v17 = v30;
        free(*(void **)(a4 + 8));
        *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
LABEL_24:
        uint64_t v38 = "failed to encode tbsCRL";
LABEL_25:
        uint64_t v39 = a1;
        int v40 = v17;
        goto LABEL_22;
      }

      if (!*(void *)a4)
      {
        uint64_t v17 = sub_188306BB4(a1, v14, (uint64_t)v8, a4, (uint64_t)&v53, (void *)&v54 + 1);
        free(*(void **)(a4 + 8));
        if ((_DWORD)v17)
        {
          uint64_t v38 = "Failed to sign CRL";
          goto LABEL_25;
        }

        size_t v41 = sub_188313DC4();
        *(void *)a4 = v41;
        uint64_t v42 = malloc(v41);
        *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v42;
        if (!v42)
        {
          uint64_t v17 = 12LL;
          goto LABEL_33;
        }

        uint64_t v43 = sub_188313DA4();
        if ((_DWORD)v43)
        {
          uint64_t v17 = v43;
          free(*(void **)(a4 + 8));
          *(void *)(a4 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
LABEL_33:
          uint64_t v38 = "failed to encode CRL";
          goto LABEL_25;
        }

        if (!*(void *)a4)
        {
          sub_188313DD4();
          return 0LL;
        }
      }

      sub_188303AB8("internal ASN.1 encoder error", v31, v32, v33, v34, v35, v36, v37, v44);
    }
  }

  uint64_t v17 = v16;
  hx509_clear_error_string(a1);
LABEL_6:
  sub_188313DD4();
  return v17;
}

uint64_t sub_188312CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a2 + 112);
  uint64_t v5 = *(unsigned int *)v4;
  uint64_t v6 = realloc(v4[1], 48LL * (v5 + 1));
  if (v6)
  {
    *(void *)(*(void *)(a2 + 112) + 8LL) = v6;
    uint64_t serialnumber = hx509_cert_get_serialnumber();
    if ((_DWORD)serialnumber)
    {
      hx509_clear_error_string(a1);
    }

    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a2 + 112) + 8LL) + 48 * v5 + 24) = 2;
      *(void *)(*(void *)(*(void *)(a2 + 112) + 8LL) + 48 * v5 + 32) = time(0LL) - 86400;
      uint64_t v8 = *(void *)(a2 + 112);
      *(void *)(*(void *)(v8 + 8) + 48 * v5 + memset(&v6[2], 0, 40) = 0LL;
      ++*(_DWORD *)v8;
    }
  }

  else
  {
    hx509_clear_error_string(a1);
    return 12LL;
  }

  return serialnumber;
}

uint64_t sub_188312DB8(unsigned int *a1)
{
  time_t v2 = realloc(*((void **)a1 + 1), 24LL * *a1 + 24);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_188312E2C()
{
  return _asn1_decode_top();
}

uint64_t sub_188312E4C()
{
  return _asn1_encode();
}

uint64_t sub_188312E6C()
{
  return _asn1_length();
}

uint64_t sub_188312E7C()
{
  return _asn1_decode_top();
}

uint64_t sub_188312E9C()
{
  return _asn1_encode();
}

uint64_t sub_188312EBC()
{
  return _asn1_length();
}

uint64_t sub_188312ECC()
{
  return _asn1_decode_top();
}

uint64_t encode_ContentInfo()
{
  return _asn1_encode();
}

uint64_t length_ContentInfo()
{
  return _asn1_length();
}

uint64_t free_ContentInfo()
{
  return _asn1_free_top();
}

uint64_t sub_188312F2C()
{
  return _asn1_copy_top();
}

uint64_t decode_IssuerAndSerialNumber()
{
  return _asn1_decode_top();
}

uint64_t encode_IssuerAndSerialNumber()
{
  return _asn1_encode();
}

uint64_t length_IssuerAndSerialNumber()
{
  return _asn1_length();
}

uint64_t free_IssuerAndSerialNumber()
{
  return _asn1_free_top();
}

uint64_t copy_IssuerAndSerialNumber()
{
  return _asn1_copy_top();
}

uint64_t sub_188312FB4()
{
  return _asn1_encode();
}

uint64_t sub_188312FD4()
{
  return _asn1_length();
}

uint64_t sub_188312FE4()
{
  return _asn1_free_top();
}

uint64_t sub_188312FF4()
{
  return _asn1_decode_top();
}

uint64_t sub_188313014()
{
  return _asn1_encode();
}

uint64_t sub_188313034()
{
  return _asn1_length();
}

uint64_t sub_188313044()
{
  return _asn1_free_top();
}

uint64_t sub_188313054()
{
  return _asn1_decode_top();
}

uint64_t sub_188313074()
{
  return _asn1_free_top();
}

uint64_t sub_188313084()
{
  return _asn1_decode_top();
}

uint64_t sub_1883130A4()
{
  return _asn1_encode();
}

uint64_t sub_1883130C4()
{
  return _asn1_length();
}

uint64_t sub_1883130D4()
{
  return _asn1_free_top();
}

uint64_t sub_1883130E4()
{
  return _asn1_decode_top();
}

uint64_t sub_188313104()
{
  return _asn1_encode();
}

uint64_t sub_188313124()
{
  return _asn1_length();
}

uint64_t sub_188313134()
{
  return _asn1_free_top();
}

uint64_t sub_188313144()
{
  return _asn1_encode();
}

uint64_t sub_188313164()
{
  return _asn1_length();
}

uint64_t sub_188313174()
{
  return _asn1_free_top();
}

uint64_t sub_188313184()
{
  return _asn1_decode_top();
}

uint64_t sub_1883131A4()
{
  return _asn1_free_top();
}

uint64_t sub_1883131B4()
{
  return _asn1_decode_top();
}

uint64_t sub_1883131D4()
{
  return _asn1_free_top();
}

uint64_t sub_1883131E4()
{
  return _asn1_encode();
}

uint64_t sub_188313204()
{
  return _asn1_length();
}

uint64_t sub_188313214()
{
  return _asn1_decode_top();
}

uint64_t sub_188313234()
{
  return _asn1_encode();
}

uint64_t sub_188313254()
{
  return _asn1_length();
}

uint64_t sub_188313264()
{
  return _asn1_free_top();
}

uint64_t decode_AlgorithmIdentifier()
{
  return _asn1_decode_top();
}

uint64_t encode_AlgorithmIdentifier()
{
  return _asn1_encode();
}

uint64_t length_AlgorithmIdentifier()
{
  return _asn1_length();
}

uint64_t free_AlgorithmIdentifier()
{
  return _asn1_free_top();
}

uint64_t copy_AlgorithmIdentifier()
{
  return _asn1_copy_top();
}

uint64_t sub_1883132E8()
{
  return _asn1_decode_top();
}

uint64_t sub_188313308()
{
  return _asn1_encode();
}

uint64_t sub_188313328()
{
  return _asn1_length();
}

uint64_t sub_188313338()
{
  return _asn1_free_top();
}

uint64_t sub_188313348()
{
  return _asn1_copy_top();
}

uint64_t sub_18831335C()
{
  return _asn1_free_top();
}

uint64_t sub_18831336C()
{
  return _asn1_decode_top();
}

uint64_t sub_18831338C()
{
  return _asn1_encode();
}

uint64_t sub_1883133AC()
{
  return _asn1_length();
}

uint64_t sub_1883133BC()
{
  return _asn1_free_top();
}

uint64_t hx509_name_to_Name_0()
{
  return _asn1_copy_top();
}

uint64_t sub_1883133E0()
{
  return _asn1_decode_top();
}

uint64_t sub_188313400()
{
  return _asn1_encode();
}

uint64_t sub_188313420()
{
  return _asn1_length();
}

uint64_t sub_188313430()
{
  return _asn1_free_top();
}

uint64_t sub_188313440()
{
  return _asn1_copy_top();
}

uint64_t decode_SubjectPublicKeyInfo()
{
  return _asn1_decode_top();
}

uint64_t encode_SubjectPublicKeyInfo()
{
  return _asn1_encode();
}

uint64_t length_SubjectPublicKeyInfo()
{
  return _asn1_length();
}

uint64_t free_SubjectPublicKeyInfo()
{
  return _asn1_free_top();
}

uint64_t copy_SubjectPublicKeyInfo()
{
  return _asn1_copy_top();
}

uint64_t sub_1883134C8()
{
  return _asn1_free_top();
}

uint64_t sub_1883134D8()
{
  return _asn1_decode_top();
}

uint64_t sub_1883134F8()
{
  return _asn1_encode();
}

uint64_t sub_188313518()
{
  return _asn1_length();
}

uint64_t sub_188313528()
{
  return _asn1_free_top();
}

uint64_t sub_188313538()
{
  return _asn1_copy_top();
}

uint64_t sub_18831354C(unsigned int *a1)
{
  time_t v2 = realloc(*((void **)a1 + 1), 40LL * *a1 + 40);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_1883135C0()
{
  return _asn1_encode();
}

uint64_t sub_1883135E0()
{
  return _asn1_length();
}

uint64_t sub_1883135F0()
{
  return _asn1_decode_top();
}

uint64_t sub_188313610()
{
  return _asn1_encode();
}

uint64_t sub_188313630()
{
  return _asn1_length();
}

uint64_t sub_188313640()
{
  return _asn1_free_top();
}

uint64_t sub_188313650()
{
  return _asn1_copy_top();
}

uint64_t decode_DomainParameters()
{
  return _asn1_decode_top();
}

uint64_t sub_188313684()
{
  return _asn1_encode();
}

uint64_t sub_1883136A4()
{
  return _asn1_length();
}

uint64_t free_DomainParameters()
{
  return _asn1_free_top();
}

uint64_t sub_1883136C4()
{
  return _asn1_encode();
}

uint64_t sub_1883136E4()
{
  return _asn1_length();
}

uint64_t sub_1883136F4()
{
  return _asn1_free_top();
}

uint64_t decode_DHPublicKey()
{
  return _asn1_decode_top();
}

uint64_t encode_DHPublicKey()
{
  return _asn1_encode();
}

uint64_t length_DHPublicKey()
{
  return _asn1_length();
}

uint64_t sub_188313754()
{
  return _asn1_free_top();
}

uint64_t decode_GeneralName()
{
  return _asn1_decode_top();
}

uint64_t encode_GeneralName()
{
  return _asn1_encode();
}

uint64_t length_GeneralName()
{
  return _asn1_length();
}

uint64_t free_GeneralName()
{
  return _asn1_free_top();
}

uint64_t copy_GeneralName()
{
  return _asn1_copy_top();
}

uint64_t sub_1883137D8()
{
  return _asn1_decode_top();
}

uint64_t sub_1883137F8()
{
  return _asn1_encode();
}

uint64_t sub_188313818()
{
  return _asn1_length();
}

uint64_t sub_188313828()
{
  return _asn1_free_top();
}

uint64_t sub_188313838(unsigned int *a1)
{
  time_t v2 = realloc(*((void **)a1 + 1), 40LL * *a1 + 40);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_1883138AC()
{
  return _asn1_decode_top();
}

uint64_t sub_1883138CC()
{
  return _asn1_encode();
}

uint64_t sub_1883138EC()
{
  return _asn1_length();
}

uint64_t sub_1883138FC(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t sub_188313904()
{
  return _asn1_decode_top();
}

uint64_t sub_188313924()
{
  return _asn1_encode();
}

uint64_t sub_188313944()
{
  return _asn1_length();
}

uint64_t sub_188313954()
{
  return _asn1_free_top();
}

uint64_t sub_188313964()
{
  return _asn1_decode_top();
}

uint64_t sub_188313984()
{
  return _asn1_encode();
}

uint64_t sub_1883139A4()
{
  return _asn1_length();
}

uint64_t sub_1883139B4()
{
  return _asn1_free_top();
}

uint64_t sub_1883139C4()
{
  return _asn1_copy_top();
}

uint64_t sub_1883139D8()
{
  return _asn1_decode_top();
}

uint64_t sub_1883139F8()
{
  return _asn1_encode();
}

uint64_t sub_188313A18()
{
  return _asn1_length();
}

uint64_t sub_188313A28()
{
  return _asn1_free_top();
}

uint64_t sub_188313A38()
{
  return _asn1_decode_top();
}

uint64_t sub_188313A58()
{
  return _asn1_free_top();
}

uint64_t sub_188313A68()
{
  return _asn1_copy_top();
}

uint64_t sub_188313A7C()
{
  return _asn1_decode_top();
}

uint64_t sub_188313A9C()
{
  return _asn1_encode();
}

uint64_t sub_188313ABC()
{
  return _asn1_length();
}

uint64_t sub_188313ACC()
{
  return _asn1_free_top();
}

uint64_t sub_188313ADC()
{
  return _asn1_decode_top();
}

uint64_t sub_188313AFC()
{
  return _asn1_encode();
}

uint64_t sub_188313B1C()
{
  return _asn1_length();
}

uint64_t sub_188313B2C()
{
  return _asn1_free_top();
}

uint64_t sub_188313B3C()
{
  return _asn1_free_top();
}

uint64_t sub_188313B4C()
{
  return _asn1_decode_top();
}

uint64_t sub_188313B6C()
{
  return _asn1_encode();
}

uint64_t sub_188313B8C()
{
  return _asn1_length();
}

uint64_t sub_188313B9C()
{
  return _asn1_free_top();
}

uint64_t sub_188313BAC(unsigned int *a1)
{
  time_t v2 = realloc(*((void **)a1 + 1), 24LL * *a1 + 24);
  if (!v2) {
    return 12LL;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!(_DWORD)result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_188313C20()
{
  return _asn1_decode_top();
}

uint64_t sub_188313C40()
{
  return _asn1_encode();
}

uint64_t sub_188313C60()
{
  return _asn1_length();
}

uint64_t sub_188313C70()
{
  return _asn1_free_top();
}

uint64_t sub_188313C80()
{
  return _asn1_decode_top();
}

uint64_t sub_188313CA0()
{
  return _asn1_encode();
}

uint64_t sub_188313CC0()
{
  return _asn1_length();
}

uint64_t sub_188313CD0()
{
  return _asn1_free_top();
}

uint64_t sub_188313CE0()
{
  return _asn1_decode_top();
}

uint64_t sub_188313D00()
{
  return _asn1_encode();
}

uint64_t sub_188313D20()
{
  return _asn1_length();
}

uint64_t sub_188313D30()
{
  return _asn1_free_top();
}

uint64_t sub_188313D40()
{
  return _asn1_copy_top();
}

uint64_t sub_188313D54()
{
  return _asn1_encode();
}

uint64_t sub_188313D74()
{
  return _asn1_length();
}

uint64_t sub_188313D84()
{
  return _asn1_decode_top();
}

uint64_t sub_188313DA4()
{
  return _asn1_encode();
}

uint64_t sub_188313DC4()
{
  return _asn1_length();
}

uint64_t sub_188313DD4()
{
  return _asn1_free_top();
}

uint64_t sub_188313DE4()
{
  return _asn1_decode_top();
}

uint64_t sub_188313E04()
{
  return _asn1_encode();
}

uint64_t sub_188313E24()
{
  return _asn1_length();
}

uint64_t sub_188313E34()
{
  return _asn1_free_top();
}

uint64_t sub_188313E44()
{
  return _asn1_copy_top();
}

uint64_t sub_188313E58()
{
  return _asn1_decode_top();
}

uint64_t sub_188313E78()
{
  return _asn1_encode();
}

uint64_t sub_188313E98()
{
  return _asn1_length();
}

uint64_t sub_188313EA8()
{
  return _asn1_free_top();
}

uint64_t sub_188313EB8()
{
  return _asn1_decode_top();
}

uint64_t sub_188313ED8()
{
  return _asn1_free_top();
}

uint64_t sub_188313EE8()
{
  return _asn1_decode_top();
}

uint64_t sub_188313F08()
{
  return _asn1_encode();
}

uint64_t sub_188313F28()
{
  return _asn1_length();
}

uint64_t sub_188313F38()
{
  return _asn1_free_top();
}

uint64_t sub_188313F48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  specific = (dispatch_source_t *)dispatch_get_specific(sub_188313F48);
  uint64_t v13 = specific;
  if ((_DWORD)a3)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
  }

  else
  {
    if (a7)
    {
      uint64_t v14 = a7;
      uint64_t v17 = a6;
    }

    else
    {
      uint64_t v14 = a5;
      uint64_t v17 = a4;
    }

    uint64_t v16 = v14;
  }

  ((void (*)(dispatch_source_t, uint64_t, uint64_t *, void))specific[3])(specific[4], a3, &v16, 0LL);
  if (a7) {
    MEMORY[0x1895C207C](*MEMORY[0x1895FBBE0], a6, a7);
  }
  dispatch_source_cancel(v13[1]);
  return 0LL;
}

uint64_t sub_188314000(const char *a1, uint64_t *a2)
{
  if (qword_18C7076B0 != -1) {
    dispatch_once(&qword_18C7076B0, &unk_18A221BA8);
  }
  uint64_t result = bootstrap_look_up2();
  if (!(_DWORD)result)
  {
    uint64_t v5 = malloc(0x10uLL);
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      _DWORD *v5 = name;
      uint64_t v7 = strdup(a1);
      *(void *)(v6 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v7;
      if (v7)
      {
        uint64_t result = 0LL;
        *a2 = v6;
        return result;
      }

      sub_1883140DC(v6);
    }

    else
    {
      mach_port_mod_refs(*MEMORY[0x1895FBBE0], name, 0, -1);
    }

    return 12LL;
  }

  return result;
}

uint64_t sub_1883140DC(uint64_t a1)
{
  if (*(_DWORD *)a1) {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], *(_DWORD *)a1);
  }
  free(*(void **)(a1 + 8));
  free((void *)a1);
  return 0LL;
}

uint64_t sub_188314124()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  unint64_t v3 = v2;
  uint64_t v4 = v0;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  *(void *)dataCnt = 0LL;
  vm_offset_t data = 0LL;
  __int128 __src = 0LL;
  unsigned int v27 = -1;
  unsigned int v28 = 0;
  vm_size_t v5 = *v1;
  if (*v1 > 0x7FF)
  {
    if (vm_read(*MEMORY[0x1895FBBE0], v1[1], v5, &data, &dataCnt[1])) {
      return 12LL;
    }
    uint64_t v19 = v3;
    LODWORD(v5) = 0;
  }

  else
  {
    uint64_t v19 = v2;
    __memcpy_chk();
  }

  char v7 = 1;
  uint64_t v8 = MEMORY[0x1895F87A8];
  while (1)
  {
    char v9 = v7;
    uint64_t v24 = 0LL;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2000000000LL;
    block[0] = v8;
    block[1] = 0x40000000LL;
    block[2] = sub_188314B10;
    block[3] = &unk_18A221BD0;
    void block[4] = &v24;
    void block[5] = v4;
    dispatch_sync((dispatch_queue_t)qword_18C7076C0, block);
    uint64_t v10 = sub_188314C34(*((_DWORD *)v25 + 6), (uint64_t)v33, v5, data, dataCnt[1], &v27, v32, dataCnt, &__src, &v28);
    if ((_DWORD)v10 != -308 && (_DWORD)v10 != 268435459) {
      break;
    }
    uint64_t v12 = bootstrap_look_up2();
    if ((_DWORD)v12)
    {
      uint64_t v6 = v12;
      goto LABEL_20;
    }

    v20[0] = v8;
    v20[1] = 0x40000000LL;
    void v20[2] = sub_188314B24;
    krb5_kt_cursor v20[3] = &unk_18A221BF8;
    v20[4] = &v24;
    v20[5] = v4;
    int v21 = v22;
    dispatch_sync((dispatch_queue_t)qword_18C7076C0, v20);
    _Block_object_dispose(&v24, 8);
    char v7 = 0;
    if ((v9 & 1) == 0) {
      return 22LL;
    }
  }

  uint64_t v6 = v10;
  if ((_DWORD)v10)
  {
LABEL_20:
    _Block_object_dispose(&v24, 8);
    return v6;
  }

  _Block_object_dispose(&v24, 8);
  uint64_t v6 = v27;
  size_t v13 = v28;
  if (!v27)
  {
    if (v28)
    {
      uint64_t v15 = malloc(v28);
      v19[1] = (size_t)v15;
      if (v15)
      {
        uint64_t v16 = __src;
        memcpy(v15, __src, v13);
        *uint64_t v19 = v13;
        MEMORY[0x1895C207C](*MEMORY[0x1895FBBE0], v16, v13);
        return 0LL;
      }

      MEMORY[0x1895C207C](*MEMORY[0x1895FBBE0], __src, v13);
    }

    else
    {
      size_t v17 = dataCnt[0];
      uint64_t v18 = malloc(dataCnt[0]);
      v19[1] = (size_t)v18;
      if (v18)
      {
        memcpy(v18, v32, v17);
        uint64_t v6 = 0LL;
        *uint64_t v19 = v17;
        return v6;
      }
    }

    return 12LL;
  }

  if (v28)
  {
    MEMORY[0x1895C207C](*MEMORY[0x1895FBBE0], __src, v28);
    return v27;
  }

  return v6;
}

uint64_t sub_18831442C(mach_port_name_t *a1, vm_size_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  vm_offset_t data = 0LL;
  mach_msg_type_number_t dataCnt = 0;
  uint64_t v8 = (mach_port_name_t *)malloc(0x28uLL);
  if (!v8) {
    return 12LL;
  }
  char v9 = v8;
  uint64_t v10 = (vm_map_t *)MEMORY[0x1895FBBE0];
  if (mach_port_allocate(*MEMORY[0x1895FBBE0], 1u, v8))
  {
    free(v9);
    return 22LL;
  }

  uint64_t v12 = dispatch_queue_create("heim-ipc-async-client", 0LL);
  *((void *)v9 + 2) = v12;
  *((void *)v9 + 1) = dispatch_source_create(MEMORY[0x1895F8B40], *v9, 0LL, v12);
  dispatch_queue_set_specific(*((dispatch_queue_t *)v9 + 2), sub_188313F48, v9, 0LL);
  uint64_t v13 = MEMORY[0x1895F87A8];
  uint64_t v14 = (dispatch_source_s *)*((void *)v9 + 1);
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 0x40000000LL;
  handler[2] = sub_188314B84;
  handler[3] = &unk_18A221C18;
  handler[4] = v9;
  dispatch_source_set_event_handler(v14, handler);
  uint64_t v15 = (dispatch_source_s *)*((void *)v9 + 1);
  v26[0] = v13;
  v26[1] = 0x40000000LL;
  size_t v26[2] = sub_188314B9C;
  v26[3] = &unk_18A221C38;
  v26[4] = v9;
  dispatch_source_set_cancel_handler(v15, v26);
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 4) = a3;
  dispatch_resume(*((dispatch_object_t *)v9 + 1));
  vm_size_t v16 = *a2;
  if (*a2 <= 0x7FF)
  {
    __memcpy_chk();
    goto LABEL_10;
  }

  if (vm_read(*v10, a2[1], *a2, &data, &dataCnt)) {
    return 12LL;
  }
  LODWORD(v16) = 0;
LABEL_10:
  for (char i = 1; ; char i = 0)
  {
    char v18 = i;
    uint64_t v23 = 0LL;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x2000000000LL;
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 0x40000000LL;
    void v22[2] = sub_188314BF4;
    v22[3] = &unk_18A221C60;
    v22[4] = &v23;
    v22[5] = a1;
    dispatch_sync((dispatch_queue_t)qword_18C7076C0, v22);
    uint64_t v19 = sub_188314EC8(*((_DWORD *)v24 + 6), *v9, (uint64_t)v30, v16, data, dataCnt);
    if ((_DWORD)v19 != 268435459) {
      break;
    }
    uint64_t v20 = bootstrap_look_up2();
    if ((_DWORD)v20)
    {
      uint64_t v11 = v20;
      goto LABEL_18;
    }

    mach_port_deallocate(*v10, *a1);
    *a1 = *((_DWORD *)v24 + 6);
    _Block_object_dispose(&v23, 8);
    if ((v18 & 1) == 0)
    {
      dispatch_source_cancel(*((dispatch_source_t *)v9 + 1));
      return 22LL;
    }
  }

  uint64_t v11 = v19;
  if (!(_DWORD)v19) {
    goto LABEL_19;
  }
LABEL_18:
  dispatch_source_cancel(*((dispatch_source_t *)v9 + 1));
LABEL_19:
  _Block_object_dispose(&v23, 8);
  return v11;
}

uint64_t sub_188314708(const char *a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = malloc(0x10uLL);
  if (!v4) {
    return 12LL;
  }
  vm_size_t v5 = v4;
  v4[2] = -1;
  asprintf((char **)v4, "/var/run/.heim_%s-%s", a1, "socket");
  *a2 = (uint64_t)v5;
  v9.int sa_family = 1;
  __strlcpy_chk();
  int v6 = socket(1, 1, 0);
  void v5[2] = v6;
  if ((v6 & 0x80000000) == 0)
  {
    sub_1882FA158(v6);
    rk_socket_set_nopipe(v5[2], 1);
    if (!connect(v5[2], &v9, 0x6Au)) {
      return 0LL;
    }
    close(v5[2]);
    void v5[2] = -1;
  }

  uint64_t v7 = *__error();
  if ((_DWORD)v7) {
    sub_18831482C(*a2);
  }
  return v7;
}

uint64_t sub_18831482C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  free(*(void **)a1);
  free((void *)a1);
  return 0LL;
}

uint64_t sub_188314868(uint64_t a1, uint64_t a2, size_t *a3, void *a4)
{
  unsigned int __buf = bswap32(*(_DWORD *)a2);
  if (a4) {
    *a4 = 0LL;
  }
  *a3 = 0LL;
  a3[1] = 0LL;
  if (sub_1882FA4E0(*(_DWORD *)(a1 + 8), (char *)&__buf, 4uLL) != 4
    || sub_1882FA4E0(*(_DWORD *)(a1 + 8), *(char **)(a2 + 8), *(void *)a2) != *(void *)a2
    || sub_1882FA460(*(_DWORD *)(a1 + 8), (char *)&__buf, 4uLL) != 4
    || sub_1882FA460(*(_DWORD *)(a1 + 8), (char *)&v12, 4uLL) != 4)
  {
    return 0xFFFFFFFFLL;
  }

  unsigned int v7 = v12;
  size_t v8 = bswap32(__buf);
  *a3 = v8;
  if (v8 > 0x20000)
  {
    *a3 = 0LL;
    return 22LL;
  }

  uint64_t v10 = (char *)malloc(v8);
  a3[1] = (size_t)v10;
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = bswap32(v7);
  if (sub_1882FA460(*(_DWORD *)(a1 + 8), v10, v8) == *a3) {
    return v11;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t heim_ipc_init_context(const char *a1, void *a2)
{
  uint64_t v3 = 0LL;
  int v4 = 0;
  vm_size_t v5 = a1 + 1;
  for (char i = 1; ; char i = 0)
  {
    char v7 = i;
    size_t v8 = (const char **)&(&off_18C4D9C90)[5 * v3];
    size_t v9 = strlen(*v8);
    if (!strncmp(*v8, a1, v9) && a1[v9] == 58) {
      break;
    }
    if (!strncmp("ANY:", a1, 4uLL))
    {
      int v4 = 1;
      size_t v9 = 3LL;
      break;
    }

void heim_ipc_free_context(void *a1)
{
}

uint64_t heim_ipc_call(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    *a4 = 0LL;
  }
  return (*(uint64_t (**)(void))(*a1 + 24LL))(a1[1]);
}

dispatch_queue_t sub_188314AD4()
{
  qword_18C7076B8 = (uint64_t)dispatch_get_global_queue(0LL, 0LL);
  dispatch_queue_t result = dispatch_queue_create("heim-ipc-syncq", 0LL);
  qword_18C7076C0 = (uint64_t)result;
  return result;
}

uint64_t sub_188314B10(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t sub_188314B24(uint64_t a1)
{
  mach_port_name_t v2 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  int v3 = **(_DWORD **)(a1 + 40);
  ipc_space_t v4 = *MEMORY[0x1895FBBE0];
  if (v2 != v3) {
    return mach_port_deallocate(v4, *(_DWORD *)(a1 + 48));
  }
  uint64_t result = mach_port_deallocate(v4, v2);
  **(_DWORD **)(a1 + memset(&v6[2], 0, 40) = *(_DWORD *)(a1 + 48);
  return result;
}

uint64_t sub_188314B84()
{
  return dispatch_mig_server();
}

void sub_188314B9C(uint64_t a1)
{
}

uint64_t sub_188314BF4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = **(_DWORD **)(result + 40);
  return result;
}

void heim_ipc_free_data(void *a1)
{
  mach_port_name_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t sub_188314C34( mach_port_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unsigned int *a6, void *a7, _DWORD *a8, void *a9, _DWORD *a10)
{
  *(void *)&__n_4[2060] = *MEMORY[0x1895F89C0];
  int v26 = 1;
  uint64_t v27 = a4;
  int v28 = 16777472;
  int v29 = a5;
  uint64_t v30 = *MEMORY[0x1895F8468];
  if (a3 > 0x800) {
    return 4294966989LL;
  }
  __memcpy_chk();
  unsigned int v31 = a3;
  uint64_t v17 = (a3 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v18 = v17 + 60;
  *(_DWORD *)((char *)&v25 + v17 + 56) = a5;
  mach_port_t reply_port = mig_get_reply_port();
  v25.msgh_remote_port = a1;
  v25.msgh_local_port = reply_port;
  v25.msgh_bits = -2147478253;
  *(void *)&v25.msgh_voucher_port = 0x100000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v25);
    mach_port_t reply_port = v25.msgh_local_port;
  }

  uint64_t v20 = mach_msg(&v25, 3, v18, 0x848u, reply_port, 0, 0);
  uint64_t v10 = v20;
  if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v25.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v20)
    {
      if (v25.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (v25.msgh_id == 101)
      {
        if ((v25.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996LL;
          if (v26 == 1 && v25.msgh_size >= 0x40 && v25.msgh_size <= 0x840 && !v25.msgh_remote_port && HIBYTE(v28) == 1)
          {
            size_t v21 = __n;
            if (__n <= 0x800 && v25.msgh_size - 64 >= __n)
            {
              unsigned int v22 = (__n + 3) & 0xFFFFFFFC;
              if (v25.msgh_size == v22 + 64)
              {
                uint64_t v23 = (char *)&v25 + v22 - 2048;
                if (v29 == *((_DWORD *)v23 + 527))
                {
                  *a6 = v31;
                  memcpy(a7, __n_4, v21);
                  uint64_t v10 = 0LL;
                  *a8 = v21;
                  *a9 = v27;
                  *a10 = *((_DWORD *)v23 + 527);
                  return v10;
                }
              }
            }
          }
        }

        else if (v25.msgh_size == 36)
        {
          uint64_t v10 = 4294966996LL;
          if (HIDWORD(v27))
          {
            if (v25.msgh_remote_port) {
              uint64_t v10 = 4294966996LL;
            }
            else {
              uint64_t v10 = HIDWORD(v27);
            }
          }
        }

        else
        {
          uint64_t v10 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

      mach_msg_destroy(&v25);
      return v10;
    }

    mig_dealloc_reply_port(v25.msgh_local_port);
  }

  return v10;
}

uint64_t sub_188314EC8(mach_port_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v13 = 2;
  int v14 = a2;
  int v15 = 1376256;
  uint64_t v16 = a5;
  int v17 = 16777472;
  int v18 = a6;
  uint64_t v19 = *MEMORY[0x1895F8468];
  if (a4 > 0x800) {
    return 4294966989LL;
  }
  __memcpy_chk();
  uint64_t v10 = (a4 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v11 = v10 + 72;
  *(_DWORD *)((char *)&v12 + v10 + 6init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = a6;
  v12.msgh_bits = -2147483629;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = 0;
  unsigned int v20 = a4;
  v12.msgh_voucher_port = 0;
  v12.msgh_krb5_ccache id = 2;
  if (MEMORY[0x1895FD5F8]) {
    voucher_mach_msg_set(&v12);
  }
  return mach_msg(&v12, 1, v11, 0, 0, 0, 0);
}

void sub_188314FF0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v2 = -304;
  if (*(_DWORD *)(a1 + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if (*(_BYTE *)(a1 + 39) != 1) {
    goto LABEL_16;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  if (v5 > 0x800)
  {
LABEL_2:
    int v2 = -304;
    goto LABEL_3;
  }

  int v2 = -304;
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v4 != v6 + 64) {
    goto LABEL_3;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a1 + v6 + 60))
  {
LABEL_16:
    int v2 = -300;
    goto LABEL_3;
  }

  uint64_t v8 = ((v4 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v8 && *(_DWORD *)(v8 + 4) > 0x1Fu)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 12);
    uint64_t v10 = *(unsigned int *)(a1 + 52);
    uint64_t v11 = *(void *)(a1 + 28);
    __int128 v12 = *(_OWORD *)(v8 + 36);
    v13[0] = *(_OWORD *)(v8 + 20);
    v13[1] = v12;
    *(_DWORD *)(a2 + 32) = sub_188313F48(v9, (uint64_t)v13, v10, a1 + 60, v5, v11, v7);
    mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(void *)(a1 + 2init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
    *(_DWORD *)(a1 + memset(&v6[2], 0, 40) = 0;
    return;
  }

  int v2 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v2;
  *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
}

uint64_t sub_18831511C(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 201)
  {
    sub_188314FF0((uint64_t)a1, a2);
    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
    *(_DWORD *)(a2 + 32) = -303;
  }

  return result;
}

uint64_t sub_188315184(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result + *(void *)a2;
  *(void *)uint64_t result = v2;
  int v3 = *(_DWORD *)(result + 8) + *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v3;
  if (v3 < 0)
  {
    int v4 = 1000000;
    uint64_t v5 = -1LL;
  }

  else
  {
    int v4 = -1000000;
    uint64_t v5 = 1LL;
  }

  *(void *)uint64_t result = v5 + v2;
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v4 + v3;
  return result;
}

uint64_t sub_1883151E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result - *(void *)a2;
  *(void *)uint64_t result = v2;
  int v3 = *(_DWORD *)(result + 8) - *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v3;
  if (v3 < 0)
  {
    int v4 = 1000000;
    uint64_t v5 = -1LL;
  }

  else
  {
    int v4 = -1000000;
    uint64_t v5 = 1LL;
  }

  *(void *)uint64_t result = v5 + v2;
  *(_DWORD *)(result + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v4 + v3;
  return result;
}

void *sub_188315244()
{
  return calloc(1uLL, 0x18uLL);
}

void sub_188315250(void *a1)
{
}

void sub_188315274(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    bzero(v2, *(void *)a1);
    free(*(void **)(a1 + 8));
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
}

void *sub_1883152B0()
{
  uint64_t v0 = calloc(1uLL, 0x18uLL);
  if (der_copy_heim_integer())
  {
    sub_188315274((uint64_t)v0);
    free(v0);
    return 0LL;
  }

  return v0;
}

uint64_t sub_188315304(uint64_t a1)
{
  if (*(void *)a1) {
    return byte_18831B1D8[**(unsigned __int8 **)(a1 + 8)] + 8 * *(void *)a1 - 8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188315334(unsigned int *a1)
{
  return *a1;
}

void *sub_18831533C(const void *a1, size_t __size, void *a3)
{
  if ((__size & 0x80000000) != 0) {
    return 0LL;
  }
  unsigned int v4 = __size;
  unsigned int v6 = a3;
  if (a3 || (unsigned int v6 = calloc(1uLL, 0x18uLL)) != 0LL)
  {
    if (v6[1]) {
      sub_188315274((uint64_t)v6);
    }
    *((_DWORD *)v6 + 4) = 0;
    unsigned int v7 = malloc(v4);
    v6[1] = v7;
    if (!v4 || v7)
    {
      *unsigned int v6 = v4;
      memcpy(v7, a1, v4);
      return v6;
    }

    if (!a3)
    {
      sub_188315274((uint64_t)v6);
      free(v6);
    }

    return 0LL;
  }

  return v6;
}

uint64_t sub_1883153EC(const void **a1, void *__dst)
{
  return *(unsigned int *)a1;
}

uint64_t sub_18831541C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2 != 0;
  return result;
}

BOOL sub_188315430(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

uint64_t sub_188315440(void *a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0LL;
  }
  unint64_t v2 = a2 >> 3;
  if (*a1 <= v2) {
    return 0LL;
  }
  else {
    return (byte_18831B2D8[a2 & 7] & *(_BYTE *)(a1[1] + *a1 + ~v2));
  }
}

BOOL sub_188315484(void *a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v2 = -1LL;
    unint64_t v3 = a2;
    do
    {
      ++v2;
      BOOL v4 = v3 >= 0x100;
      v3 >>= 8;
    }

    while (v4);
    size_t v5 = v2 + 1;
    do
    {
      v8[v2] = a2;
      a2 >>= 8;
      unint64_t v6 = v2-- + 1;
    }

    while (v6 > 1);
  }

  else
  {
    size_t v5 = 0LL;
  }

  return sub_18831533C(v8, v5, a1) != 0LL;
}

uint64_t sub_188315528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 16) && *(_DWORD *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v7 = *(void *)a2;
  unint64_t v8 = *(void *)a3;
  if (*(void *)a2 <= *(void *)a3) {
    size_t v9 = *(void *)a3;
  }
  else {
    size_t v9 = *(void *)a2;
  }
  uint64_t result = (uint64_t)malloc(v9 + 1);
  if (result)
  {
    uint64_t v10 = result;
    if (v7 >= v8) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = a3;
    }
    if (v7 >= v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v7;
    }
    int v13 = (unsigned __int8 *)(v9 + *(void *)(v11 + 8) - 1);
    int v14 = (_BYTE *)(result + v9);
    if (v12 < 1)
    {
      BOOL v16 = 0;
    }

    else
    {
      uint64_t v15 = 0LL;
      BOOL v16 = 0;
      if (v7 >= v8) {
        uint64_t v17 = a3;
      }
      else {
        uint64_t v17 = a2;
      }
      uint64_t v18 = v12 + *(void *)(v17 + 8) - 1;
      do
      {
        unsigned int v19 = v16 + v13[v15] + *(unsigned __int8 *)(v18 + v15);
        v14[v15] = v19;
        BOOL v16 = v19 > 0xFF;
        --v15;
      }

      while ((unint64_t)(v12 + v15 + 1) > 1);
      v13 += v15;
      v14 += v15;
    }

    uint64_t v20 = v9 - v12;
    if (v20 >= 1)
    {
      unint64_t v21 = v20 + 1;
      do
      {
        int v22 = *v13--;
        unsigned int v23 = v16 + v22;
        *v14-- = v23;
        BOOL v16 = v23 > 0xFF;
        --v21;
      }

      while (v21 > 1);
    }

    if (v16)
    {
      _BYTE *v14 = 1;
      ++v9;
    }

    else
    {
      memmove(v14, v14 + 1, v9);
    }

    sub_188315274(a1);
    *(void *)a1 = v9;
    *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v10;
    uint64_t result = 1LL;
    *(_DWORD *)(a1 + 16) = 0;
  }

  return result;
}

void *sub_188315684()
{
  return sub_18831568C(0LL);
}

void *sub_18831568C(_DWORD *a1)
{
  uint64_t v2 = calloc(1uLL, 0x90uLL);
  unint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 26) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[17] = a1;
      uint64_t default_DH = (uint64_t)a1;
    }

    else
    {
      uint64_t default_DH = hc_ENGINE_get_default_DH();
      v3[17] = default_DH;
      if (!default_DH)
      {
        DH = (char **)v3[16];
        if (!DH)
        {
          DH = off_18C706FD8[0];
          v3[16] = off_18C706FD8[0];
        }

void sub_18831573C(_DWORD *a1)
{
  int v1 = a1[26];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[26] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 16) + 40LL))(a1);
    BOOL v4 = (void *)*((void *)a1 + 17);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    size_t v5 = (void *)*((void *)a1 + 1);
    if (v5) {
      sub_188315250(v5);
    }
    unint64_t v6 = (void *)*((void *)a1 + 2);
    if (v6) {
      sub_188315250(v6);
    }
    unint64_t v7 = (void *)*((void *)a1 + 4);
    if (v7) {
      sub_188315250(v7);
    }
    unint64_t v8 = (void *)*((void *)a1 + 5);
    if (v8) {
      sub_188315250(v8);
    }
    size_t v9 = (void *)*((void *)a1 + 8);
    if (v9) {
      sub_188315250(v9);
    }
    uint64_t v10 = (void *)*((void *)a1 + 9);
    if (v10) {
      sub_188315250(v10);
    }
    uint64_t v11 = (void *)*((void *)a1 + 12);
    if (v11) {
      sub_188315250(v11);
    }
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }

uint64_t sub_18831580C(uint64_t a1)
{
  return sub_188315334(*(unsigned int **)(a1 + 8));
}

uint64_t sub_188315814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 112) = a3;
  return 1LL;
}

uint64_t sub_188315820(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t sub_188315828(uint64_t a1, void *a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v5 = 0LL;
  if (!sub_188315430((uint64_t)a2))
  {
    unint64_t v6 = sub_188315244();
    if (v6)
    {
      unint64_t v7 = v6;
      if (!sub_188315484(v6, 1uLL)) {
        goto LABEL_17;
      }
      unint64_t v8 = sub_188315244();
      if (v8)
      {
        size_t v9 = v8;
        sub_188315528((uint64_t)v8, (uint64_t)a2, (uint64_t)v7);
        if (sub_188315484(v7, 2uLL))
        {
          unsigned int v10 = sub_188315304((uint64_t)a2);
          unsigned int v11 = 0;
          unsigned int v12 = 0;
          do
          {
            ++v12;
          }

          while (v12 <= v10);
          if (v11 > 1)
          {
LABEL_19:
            uint64_t v5 = 1LL;
          }

          else
          {
            uint64_t v5 = 0LL;
            *a3 |= 1u;
          }
        }

        else
        {
          uint64_t v5 = 0LL;
        }

        sub_188315250(v7);
      }

      else
      {
LABEL_17:
        uint64_t v5 = 0LL;
        size_t v9 = v7;
      }

      sub_188315250(v9);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_188315984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 128) + 8LL))();
}

uint64_t sub_188315990(uint64_t a1, void *a2, uint64_t a3)
{
  else {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(a3 + 128) + 16LL))(a1, a2, a3);
  }
}

uint64_t sub_188315A08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(void (**)(uint64_t *))(v2 + 40);
    if (v3) {
      v3(a1);
    }
    else {
      bzero((void *)a1[2], *(int *)(v2 + 8));
    }
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  free((void *)a1[2]);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return 1LL;
}

uint64_t sub_188315A64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    sub_188318ECC();
  }
  uint64_t v4 = a2;
  if (*a1 == a2 && a1[1] == a3)
  {
    uint64_t result = a1[2];
  }

  else
  {
    sub_188315A08(a1);
    *a1 = v4;
    a1[1] = a3;
    uint64_t result = (uint64_t)calloc(1uLL, *(int *)(v4 + 8));
    a1[2] = result;
    if (!result) {
      return result;
    }
    uint64_t v4 = *a1;
  }

  (*(void (**)(uint64_t))(v4 + 16))(result);
  return 1LL;
}

void *hc_EVP_md5(uint64_t a1)
{
  return sub_188317F94();
}

void *hc_EVP_md_null()
{
  return &unk_18A221C80;
}

uint64_t hc_EVP_CIPHER_block_size(uint64_t a1)
{
  return *(int *)(a1 + 4);
}

uint64_t hc_EVP_CIPHER_key_length(uint64_t a1)
{
  return *(int *)(a1 + 8);
}

uint64_t hc_EVP_CIPHER_iv_length(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

double hc_EVP_CIPHER_CTX_init(uint64_t a1)
{
  *(void *)(a1 + 160) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 12init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t hc_EVP_CIPHER_CTX_cleanup(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    size_t v3 = *(int *)(v1 + 48);
    uint64_t v4 = (void *)a1[15];
    uint64_t v5 = *(void (**)(uint64_t *))(v1 + 40);
    if (v5) {
      v5(a1);
    }
    if (v4)
    {
      bzero(v4, v3);
      free(v4);
    }

    a1[20] = 0LL;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }

  return 1LL;
}

uint64_t hc_EVP_CIPHER_CTX_set_key_length(_DWORD *a1, int a2)
{
  uint64_t result = 0LL;
  if (a2 >= 1 && (*(void *)(*(void *)a1 + 16LL) & 8) != 0)
  {
    a1[26] = a2;
    return 1LL;
  }

  return result;
}

uint64_t hc_EVP_CIPHER_CTX_cipher(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t hc_EVP_CIPHER_CTX_block_size(uint64_t a1)
{
  return *(int *)(*(void *)a1 + 4LL);
}

uint64_t hc_EVP_CIPHER_CTX_key_length(uint64_t a1)
{
  return *(int *)(*(void *)a1 + 8LL);
}

uint64_t hc_EVP_CIPHER_CTX_iv_length(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 12LL);
}

uint64_t hc_EVP_CIPHER_CTX_flags(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16LL);
}

uint64_t hc_EVP_CIPHER_CTX_mode(uint64_t a1)
{
  return *(_DWORD *)(*(void *)a1 + 16LL) & 7;
}

uint64_t hc_EVP_CIPHER_CTX_get_app_data(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t hc_EVP_CIPHER_CTX_set_app_data(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t hc_EVP_CipherInit_ex(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *__src, uint64_t a6)
{
  uint64_t v8 = a2;
  *(_DWORD *)(a1 + 20) = 0;
  if ((_DWORD)a6 == -1)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 16);
  }

  else
  {
    uint64_t v10 = a6;
    *(_DWORD *)(a1 + 16) = a6 != 0;
  }

  uint64_t v11 = *(void *)a1;
  if (a2)
  {
    if (v11 != a2)
    {
      hc_EVP_CIPHER_CTX_cleanup((uint64_t *)a1);
      *(void *)a1 = v8;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 8);
      unsigned int v12 = calloc(1uLL, *(int *)(v8 + 48));
      *(void *)(a1 + 120) = v12;
      if (!v12 && *(_DWORD *)(v8 + 48)) {
        return 0LL;
      }
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 4) - 1;
      uint64_t v8 = *(void *)a1;
    }
  }

  else
  {
    uint64_t v8 = *(void *)a1;
    if (!v11) {
      return 0LL;
    }
  }

  int v13 = *(_DWORD *)(v8 + 16) & 7;
  if (v13) {
    BOOL v14 = v13 == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (v13 == 2)
    {
      size_t v16 = *(unsigned int *)(v8 + 12);
      if (__src)
      {
        memcpy((void *)(a1 + 24), __src, v16);
        size_t v16 = *(unsigned int *)(v8 + 12);
      }

      uint64_t v15 = (void *)(a1 + 40);
      uint64_t v17 = (const void *)(a1 + 24);
      goto LABEL_21;
    }

    return 0LL;
  }

  if (!__src) {
    goto LABEL_22;
  }
  uint64_t v15 = (void *)(a1 + 40);
  size_t v16 = *(unsigned int *)(v8 + 12);
  uint64_t v17 = __src;
LABEL_21:
  memcpy(v15, v17, v16);
LABEL_22:
  if (a4 || (*(_BYTE *)(v8 + 16) & 0x20) != 0) {
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(v8 + 24))(a1, a4, __src, v10);
  }
  return 1LL;
}

uint64_t hc_EVP_CipherUpdate(int *a1, uint64_t a2, _DWORD *a3, char *__src, size_t __n)
{
  size_t v5 = __n;
  unint64_t v6 = __src;
  uint64_t v8 = a2;
  *a3 = 0;
  uint64_t v10 = a1[5];
  if (!(_DWORD)v10)
  {
    uint64_t v15 = *(void *)a1;
    if ((a1[33] & __n) == 0)
    {
      uint64_t v18 = (*(uint64_t (**)(int *, uint64_t, char *, size_t))(v15 + 32))(a1, a2, __src, __n);
      if ((_DWORD)v18 == 1) {
        int v19 = v5;
      }
      else {
        int v19 = 0;
      }
      *a3 = v19;
      return v18;
    }

    if (*(_DWORD *)(v15 + 4))
    {
      if (!__n) {
        return 1LL;
      }
      goto LABEL_8;
    }

uint64_t hc_EVP_CipherFinal_ex(int *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v3 = a1[5];
  if (!(_DWORD)v3) {
    return 1LL;
  }
  size_t v6 = *(int *)(*(void *)a1 + 4LL);
  bzero((char *)a1 + v3 + 56, (v6 - v3));
  uint64_t v8 = (*(uint64_t (**)(int *, uint64_t, int *, size_t))(*(void *)a1 + 32LL))(a1, a2, a1 + 14, v6);
  bzero(a1 + 14, v6);
  if ((_DWORD)v8 == 1) {
    *a3 += v6;
  }
  return v8;
}

uint64_t hc_EVP_Cipher(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

void *hc_EVP_enc_null()
{
  return &unk_18A221CB0;
}

uint64_t sub_188316000()
{
  return 1LL;
}

uint64_t sub_188316008(int a1, void *__dst, void *__src, size_t __len)
{
  return 1LL;
}

uint64_t sub_188316030()
{
  return 1LL;
}

void *hc_EVP_rc4(uint64_t a1)
{
  return sub_188317FA8();
}

void *hc_EVP_des_cbc(uint64_t a1)
{
  return sub_188317F18();
}

void *hc_EVP_des_ede3_cbc(uint64_t a1)
{
  return sub_188317E50();
}

void *hc_EVP_aes_128_cbc(uint64_t a1)
{
  return sub_188317F48();
}

void *hc_EVP_aes_192_cbc(uint64_t a1)
{
  return sub_188317F7C();
}

void *hc_EVP_aes_256_cbc(uint64_t a1)
{
  return sub_188317F88();
}

uint64_t hc_EVP_aes_128_cfb8()
{
  return 0LL;
}

uint64_t hc_EVP_aes_192_cfb8()
{
  return 0LL;
}

uint64_t hc_EVP_aes_256_cfb8()
{
  return 0LL;
}

uint64_t sub_1883160C8(uint64_t a1)
{
  return sub_188317FA0();
}

uint64_t sub_1883160DC(uint64_t a1)
{
  return sub_188317FA0();
}

uint64_t sub_1883160F0(uint64_t a1)
{
  return sub_188317FA0();
}

uint64_t hc_EVP_get_cipherbyname(char *a1)
{
  uint64_t v2 = 0LL;
  while (strcasecmp((&off_18A221D08)[v2], a1))
  {
    v2 += 2LL;
    if (v2 == 20) {
      return 0LL;
    }
  }

  return ((uint64_t (*)(void))(&off_18A221D08)[v2 + 1])();
}

uint64_t sub_18831616C( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char *a8)
{
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (a4)
  {
    uint64_t v12 = a4;
    unsigned int v16 = *(_DWORD *)(a1 + 12);
    size_t v17 = (char *)malloc(*a2);
    if (!v17) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v18 = v17;
    uint64_t v32 = a3;
    v33[0] = 0LL;
    uint64_t v28 = a1;
    LODWORD(a3) = 0;
    char v19 = 0;
    v33[1] = 0LL;
    uint64_t v34 = 0LL;
    int v31 = a6 - 1;
    while (1)
    {
      sub_188315A64(v33, (uint64_t)a2, 0LL);
      if ((v19 & 1) != 0) {
        (*(void (**)(uint64_t, char *, void))(v33[0] + 24))(v34, v18, a3);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33[0] + 24))(v34, v12, a5);
      if (v32) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33[0] + 24))(v34, v32, 8LL);
      }
      (*(void (**)(char *, uint64_t))(v33[0] + 32))(v18, v34);
      a3 = *(unsigned int *)v33[0];
      if (*a2 != a3) {
        sub_188318F94();
      }
      int v20 = v31;
      if (a6 >= 2)
      {
        do
        {
          sub_188315A64(v33, (uint64_t)a2, 0LL);
          (*(void (**)(uint64_t, char *, void))(v33[0] + 24))(v34, v18, a3);
          (*(void (**)(char *, uint64_t))(v33[0] + 32))(v18, v34);
          a3 = *(unsigned int *)v33[0];
          if (*a2 != a3) {
            sub_188318F6C();
          }
          --v20;
        }

        while (v20);
      }

      if ((_DWORD)v8) {
        break;
      }
      LODWORD(vinit_error_table((uint64_t)off_18C704B10, 1859794432LL, 21) = 0;
      if (v16) {
        goto LABEL_21;
      }
LABEL_29:
      char v19 = 1;
      if (!(v8 | v16))
      {
        sub_188315A08(v33);
        free(v18);
        return *(unsigned int *)(v28 + 8);
      }
    }

    else {
      size_t v21 = v8;
    }
    if (a7)
    {
      memcpy(a7, v18, v21);
      a7 += v21;
    }

    LODWORD(vinit_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v8 - v21;
    if (!v16) {
      goto LABEL_29;
    }
LABEL_21:
    unsigned int v22 = a3 - v21;
    if (a3 > v21)
    {
      int v29 = a7;
      uint64_t v23 = v12;
      uint64_t v24 = a5;
      uint64_t v25 = a6;
      if (v16 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v16;
      }
      if (a8)
      {
        memcpy(a8, &v18[v21], v26);
        a8 += v26;
      }

      else
      {
        a8 = 0LL;
      }

      v16 -= v26;
      a6 = v25;
      a5 = v24;
      uint64_t v12 = v23;
      a7 = v29;
    }

    goto LABEL_29;
  }

  return v8;
}

uint64_t hc_EVP_CIPHER_CTX_rand_key(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)a1 + 17LL) & 2) == 0) {
    return CCRandomCopyBytes() == 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 72LL);
  if (v2) {
    return v2();
  }
  else {
    return 0LL;
  }
}

uint64_t hc_EVP_CIPHER_CTX_ctrl(uint64_t a1)
{
  else {
    return 0LL;
  }
}

void *sub_188316448()
{
  return sub_188316450(0LL);
}

void *sub_188316450(_DWORD *a1)
{
  uint64_t v2 = calloc(1uLL, 0xA8uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 2init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[3] = a1;
      uint64_t default_RSA = (uint64_t)a1;
    }

    else
    {
      uint64_t default_RSA = hc_ENGINE_get_default_RSA();
      v3[3] = default_RSA;
      if (!default_RSA)
      {
        RSA = (char **)v3[2];
        if (!RSA)
        {
          RSA = off_18C706FE0;
          v3[2] = off_18C706FE0;
        }

void sub_188316500(_DWORD *a1)
{
  int v1 = a1[28];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[28] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 2) + 64LL))(a1);
    uint64_t v4 = (void *)*((void *)a1 + 3);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    size_t v5 = (void *)*((void *)a1 + 4);
    if (v5) {
      sub_188315250(v5);
    }
    size_t v6 = (void *)*((void *)a1 + 5);
    if (v6) {
      sub_188315250(v6);
    }
    int v7 = (void *)*((void *)a1 + 6);
    if (v7) {
      sub_188315250(v7);
    }
    uint64_t v8 = (void *)*((void *)a1 + 7);
    if (v8) {
      sub_188315250(v8);
    }
    size_t v9 = (void *)*((void *)a1 + 8);
    if (v9) {
      sub_188315250(v9);
    }
    uint64_t v10 = (void *)*((void *)a1 + 9);
    if (v10) {
      sub_188315250(v10);
    }
    size_t v11 = (void *)*((void *)a1 + 10);
    if (v11) {
      sub_188315250(v11);
    }
    uint64_t v12 = (void *)*((void *)a1 + 11);
    if (v12) {
      sub_188315250(v12);
    }
    *((void *)a1 + 20) = 0LL;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }

uint64_t sub_1883165E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    hc_ENGINE_finish(v4);
    *(void *)(a1 + 24) = 0LL;
  }

  *(void *)(a1 + 16) = a2;
  (*(void (**)(uint64_t))(a2 + 56))(a1);
  return 1LL;
}

uint64_t sub_188316630(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = a2;
  return 1LL;
}

uint64_t sub_18831663C(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

BOOL sub_188316644(void *a1)
{
  if (!a1[6] || (uint64_t v2 = (unsigned int *)a1[4]) == 0LL)
  {
    if (!a1[7] || a1[8] || !a1[9] || !a1[10] || !a1[11]) {
      return 0LL;
    }
    uint64_t v2 = (unsigned int *)a1[4];
  }

  int v3 = sub_188315334(v2);
  uint64_t v4 = (unsigned __int8 *)malloc(v3);
  if (!v4) {
    return 0LL;
  }
  size_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, const char *, unsigned __int8 *, void *, uint64_t))(a1[2] + 24LL))( 14LL,  "hello, world!",  v4,  a1,  1LL);
  BOOL v7 = (_DWORD)v6 != -1
    && (*(unsigned int (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, void *, uint64_t))(a1[2] + 16LL))( v6,  v5,  v5,  a1,  1LL) == 14 && !ct_memcmp(v5, "hello, world!", 14LL);
  free(v5);
  return v7;
}

uint64_t sub_188316744(uint64_t a1)
{
  return sub_188315334(*(unsigned int **)(a1 + 32));
}

uint64_t sub_18831674C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 24LL))();
}

uint64_t sub_188316758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 16LL))();
}

uint64_t sub_188316764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 8LL))();
}

uint64_t sub_188316770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 32LL))();
}

uint64_t sub_18831677C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 + 16);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(v9 + 88);
  if (v10) {
    return v10(a1, a2, a3, a4, a5, a6);
  }
  if (!*(void *)(v9 + 24)) {
    return 0LL;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
  switch((int)a1)
  {
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
      size_t v13 = sub_188313D20();
      size_t v14 = malloc(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = sub_188313D00();
        if ((_DWORD)v16)
        {
          uint64_t v12 = v16;
          free(v15);
        }

        else
        {
          if (v13) {
            abort();
          }
          int v17 = (*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 16) + 24LL))( 0LL,  v15,  a4,  a6,  1LL);
          free(v15);
          if (v17 < 1) {
            return 0LL;
          }
          *a5 = v17;
          uint64_t v12 = 1LL;
        }
      }

      else
      {
        uint64_t v12 = 12LL;
      }

      break;
    default:
      return v12;
  }

  return v12;
}

uint64_t sub_188316914(uint64_t a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(a1 + 16) + 104LL);
  if (v1) {
    return v1();
  }
  else {
    return 0LL;
  }
}

void *sub_18831692C(void *a1, void *a2)
{
  *a2 += v5;
  if (!a1)
  {
    a1 = sub_188316450(0LL);
    if (!a1)
    {
      sub_188313CD0();
      return a1;
    }
  }

  a1[4] = sub_1883180D4(&v6, 0LL);
  a1[5] = sub_1883180D4(&v7, 0LL);
  a1[6] = sub_1883180D4(&v8, 0LL);
  a1[7] = sub_1883180D4(&v9, 0LL);
  a1[8] = sub_1883180D4(&v10, 0LL);
  a1[9] = sub_1883180D4(&v11, 0LL);
  a1[10] = sub_1883180D4(&v12, 0LL);
  a1[11] = sub_1883180D4(&v13, 0LL);
  sub_188313CD0();
  if (!a1[4] || !a1[5] || !a1[6] || !a1[7] || !a1[8] || !a1[9] || !a1[10] || !a1[11])
  {
    sub_188316500(a1);
    return 0LL;
  }

  return a1;
}

uint64_t sub_188316A7C(unsigned int **a1, void *a2)
{
  int v3 = a1[4];
  if (!v3 || !a1[5] || !a1[6] || !a1[7] || !a1[8] || !a1[9] || !a1[10] || !a1[11]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = 0LL;
  __int128 v21 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  int v5 = sub_188318074(v3, (uint64_t)v17 + 8);
  int v6 = sub_188318074(a1[5], (uint64_t)v18) | v5;
  int v7 = sub_188318074(a1[6], (uint64_t)&v18[1] + 8);
  int v8 = v6 | v7 | sub_188318074(a1[7], (uint64_t)v19);
  int v9 = sub_188318074(a1[8], (uint64_t)&v19[1] + 8);
  int v10 = v9 | sub_188318074(a1[9], (uint64_t)v20);
  int v11 = v8 | v10 | sub_188318074(a1[10], (uint64_t)&v20[1] + 8);
  size_t v14 = sub_188313CC0();
  size_t v12 = v14;
  if (!a2)
  {
    sub_188313CD0();
    return v12;
  }

  uint64_t v15 = malloc(v14);
  if (!v15)
  {
LABEL_10:
    sub_188313CD0();
    return 0xFFFFFFFFLL;
  }

  uint64_t v16 = v15;
  if (sub_188313CA0())
  {
    free(v16);
    goto LABEL_10;
  }

  sub_188313CD0();
  if (v12) {
    abort();
  }
  free(v16);
  size_t v12 = 0LL;
  *a2 = *a2;
  return v12;
}

uint64_t sub_188316C70(uint64_t a1, void *a2)
{
  if (sub_188318074(*(unsigned int **)(a1 + 32), (uint64_t)v9)
    || sub_188318074(*(unsigned int **)(a1 + 40), (uint64_t)&v9[1] + 8))
  {
    goto LABEL_3;
  }

  size_t v6 = sub_188313C60();
  size_t v4 = v6;
  if (!a2)
  {
    sub_188313C70();
    return v4;
  }

  int v7 = malloc(v6);
  if (!v7) {
    goto LABEL_3;
  }
  int v8 = v7;
  if (sub_188313C40())
  {
    free(v8);
LABEL_3:
    sub_188313C70();
    return 0xFFFFFFFFLL;
  }

  sub_188313C70();
  if (v4) {
    abort();
  }
  free(v8);
  size_t v4 = 0LL;
  *a2 = *a2;
  return v4;
}

void *sub_188316D7C(void *a1, void *a2)
{
  *a2 += v5;
  if (!a1)
  {
    a1 = sub_188316450(0LL);
    if (!a1)
    {
      sub_188313C70();
      return a1;
    }
  }

  a1[4] = sub_1883180D4(&v6, 0LL);
  a1[5] = sub_1883180D4(&v7, 0LL);
  sub_188313C70();
  if (!a1[4] || !a1[5])
  {
    sub_188316500(a1);
    return 0LL;
  }

  return a1;
}

uint64_t hc_UI_UTIL_read_pw_string(char *a1, int a2, const char *a3, int a4)
{
  size_t v7 = a2;
  uint64_t v8 = sub_188316EFC("", a3, a1, a2);
  if (!(_DWORD)v8)
  {
    if (a4)
    {
      int v10 = (char *)malloc(v7);
      if (v10)
      {
        int v11 = v10;
        uint64_t v8 = sub_188316EFC("Verify password - ", a3, v10, v7);
        if (!(_DWORD)v8) {
          uint64_t v8 = strcmp(v11, a1) != 0;
        }
        free(v11);
      }

      else
      {
        return 1LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v8;
}

uint64_t sub_188316EFC(const char *a1, const char *a2, _BYTE *a3, uint64_t a4)
{
  v33[62] = *MEMORY[0x1895F89C0];
  memset(v32, 0, 128);
  *(void *)&v29.sa_mask = 0LL;
  for (uint64_t i = 1LL; i != 32; ++i)
  {
    uint64_t v7 = 0LL;
    v29.sa_krb5_flags flags = 0;
    v29.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1883171EC;
    char v8 = 1;
    while (2)
    {
      int v9 = (char *)&unk_18C706FE8 + 8 * v7++;
      int v10 = v9 + 4;
      while (1)
      {
        if (*(v10 - 1) == (_DWORD)i)
        {
          if (!*v10)
          {
            v29.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
            v29.sa_krb5_flags flags = 2;
            goto LABEL_9;
          }

          if (*v10 == 1) {
            break;
          }
        }

void sub_1883171EC()
{
}

uint64_t hc_ENGINE_finish(void *a1)
{
  int v1 = (*(_DWORD *)a1)--;
  if (v1 <= 0) {
    abort();
  }
  if (v1 == 1)
  {
    int v3 = (void *)a1[1];
    if (v3) {
      free(v3);
    }
    size_t v4 = (void *)a1[2];
    if (v4) {
      free(v4);
    }
    uint64_t v5 = (void (*)(void *))a1[3];
    if (v5) {
      v5(a1);
    }
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }

  return 1LL;
}

uint64_t hc_ENGINE_up_ref(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0) {
    abort();
  }
  ++*a1;
  return 1LL;
}

BOOL hc_ENGINE_set_id(uint64_t a1, char *__s1)
{
  int v3 = strdup(__s1);
  *(void *)(a1 + 16) = v3;
  return v3 != 0LL;
}

BOOL hc_ENGINE_set_name(uint64_t a1, char *__s1)
{
  int v3 = strdup(__s1);
  *(void *)(a1 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v3;
  return v3 != 0LL;
}

uint64_t hc_ENGINE_set_destroy_function(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 1LL;
}

uint64_t hc_ENGINE_get_id(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t hc_ENGINE_get_name(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t hc_ENGINE_get_RSA(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_188317328(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t hc_ENGINE_get_DH(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t hc_ENGINE_get_RAND(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t hc_ENGINE_get_default_RSA()
{
  uint64_t result = qword_18C7076D0;
  if (qword_18C7076D0)
  {
    if ((*(_DWORD *)qword_18C7076D0 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_18C7076D0;
  }

  return result;
}

uint64_t sub_188317370()
{
  uint64_t result = qword_18C7076D8;
  if (qword_18C7076D8)
  {
    if ((*(_DWORD *)qword_18C7076D8 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_18C7076D8;
  }

  return result;
}

uint64_t hc_ENGINE_get_default_DH()
{
  uint64_t result = qword_18C7076E0;
  if (qword_18C7076E0)
  {
    if ((*(_DWORD *)qword_18C7076E0 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_18C7076E0;
  }

  return result;
}

uint64_t hc_ENGINE_load_builtin_engines()
{
  uint64_t v0 = calloc(1uLL, 0x40uLL);
  *(_DWORD *)uint64_t v0 = 1;
  v0[2] = strdup("builtin");
  v0[1] = strdup("Heimdal crypto builtin engine version 1.3.99");
  v0[4] = sub_188317A00();
  v0[6] = sub_1883183E4();
  uint64_t result = sub_18831744C((uint64_t)v0);
  if (!(_DWORD)result) {
    return hc_ENGINE_finish(v0);
  }
  return result;
}

uint64_t sub_18831744C(uint64_t a1)
{
  uint64_t v3 = dword_18C7076E8;
  int v4 = dword_18C7076E8 + 1;
  uint64_t v5 = realloc((void *)qword_18C7076F0, 8LL * (dword_18C7076E8 + 1));
  if (!v5) {
    return 1LL;
  }
  size_t v6 = v5;
  qword_18C7076F0 = (uint64_t)v5;
  dword_18C7076E8 = v4;
  uint64_t result = 1LL;
  v6[v3] = a1;
  return result;
}

_DWORD *hc_ENGINE_by_dso(const char *a1, uint64_t a2)
{
  int v4 = calloc(1uLL, 0x40uLL);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = dlopen(a1, 2);
  if (!v5)
  {
LABEL_11:
    free(v4);
    return 0LL;
  }

  size_t v6 = v5;
  uint64_t v7 = (uint64_t (*)(uint64_t))dlsym(v5, "v_check");
  if (!v7
    || !v7(0x20000LL)
    || (char v8 = dlsym(v6, "bind_engine")) == 0LL
    || ((unsigned int (*)(_DWORD *, uint64_t, void))v8)(v4, a2, 0LL) != 1)
  {
    dlclose(v6);
    goto LABEL_11;
  }

  if ((*v4 & 0x80000000) != 0) {
    abort();
  }
  ++*v4;
  if (!sub_18831744C((uint64_t)v4))
  {
    dlclose(v6);
    hc_ENGINE_finish(v4);
    return 0LL;
  }

  return v4;
}

_DWORD *hc_ENGINE_by_id(char *__s1)
{
  uint64_t v1 = dword_18C7076E8;
  if (!dword_18C7076E8) {
    return 0LL;
  }
  for (uint64_t i = qword_18C7076F0; ; i += 8LL)
  {
    int v4 = *(_DWORD **)i;
    if (!--v1) {
      return 0LL;
    }
  }

  if ((*v4 & 0x80000000) != 0) {
    abort();
  }
  ++*v4;
  return v4;
}

uint64_t sub_188317630(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  int v10 = (__SecKey *)sub_188317A0C(a4, 1);
  size_t cipherTextLen = (int)sub_188316744((uint64_t)a4);
  uint64_t result = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyEncrypt(v10, 1u, a2, a1, a3, &cipherTextLen);
    CFRelease(v10);
    if (v12)
    {
      return 0xFFFFFFFFLL;
    }

    else
    {
      size_t v13 = cipherTextLen;
      return cipherTextLen;
    }
  }

  return result;
}

uint64_t sub_1883176F4(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  int v10 = (__SecKey *)sub_188317A0C(a4, 1);
  size_t plainTextLen = (int)sub_188316744((uint64_t)a4);
  uint64_t v11 = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyDecrypt(v10, 0, a2, a1, a3, &plainTextLen);
    CFRelease(v10);
    if (!v12)
    {
      size_t v14 = plainTextLen;
      size_t v15 = plainTextLen;
      if (plainTextLen)
      {
        if (*a3 == 1)
        {
          uint64_t v16 = 1LL;
          while (plainTextLen != v16)
          {
            int v17 = a3[v16++];
            if (v17 != 255)
            {
              if (v17) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v11 = plainTextLen - v16;
              plainTextLen -= v16;
              memmove(a3, &a3[v16], v15 - v16);
              return v11;
            }
          }
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v11;
}

uint64_t sub_18831780C(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  int v10 = (__SecKey *)sub_188317A0C(a4, 0);
  size_t cipherTextLen = (int)sub_188316744((uint64_t)a4);
  uint64_t result = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyEncrypt(v10, 1u, a2, a1, a3, &cipherTextLen);
    CFRelease(v10);
    if (v12)
    {
      return 0xFFFFFFFFLL;
    }

    else
    {
      size_t v13 = cipherTextLen;
      return cipherTextLen;
    }
  }

  return result;
}

uint64_t sub_1883178D0(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  int v10 = (__SecKey *)sub_188317A0C(a4, 0);
  size_t plainTextLen = (int)sub_188316744((uint64_t)a4);
  uint64_t v11 = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyDecrypt(v10, 0, a2, a1, a3, &plainTextLen);
    CFRelease(v10);
    if (!v12)
    {
      size_t v14 = plainTextLen;
      size_t v15 = plainTextLen;
      if (plainTextLen)
      {
        if (*a3 == 1)
        {
          uint64_t v16 = 1LL;
          while (plainTextLen != v16)
          {
            int v17 = a3[v16++];
            if (v17 != 255)
            {
              if (v17) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v11 = plainTextLen - v16;
              plainTextLen -= v16;
              memmove(a3, &a3[v16], v15 - v16);
              return v11;
            }
          }
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v11;
}

uint64_t sub_1883179E8()
{
  return 1LL;
}

uint64_t sub_1883179F0()
{
  return 1LL;
}

uint64_t sub_1883179F8()
{
  return 0xFFFFFFFFLL;
}

char **sub_188317A00()
{
  return &off_18A221E30;
}

uint64_t sub_188317A0C(unsigned int **a1, int a2)
{
  uint64_t v18 = 0LL;
  if (!a2)
  {
    uint64_t v17 = 0LL;
    __int128 v16 = 0uLL;
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    __int128 v11 = 0uLL;
    __int128 v12 = 0uLL;
    LODWORD(v11) = 1;
    if (!sub_188318074(a1[4], (uint64_t)&v11 + 8)
      && !sub_188318074(a1[5], (uint64_t)v13)
      && !sub_188318074(a1[6], (uint64_t)&v13[1] + 8)
      && !sub_188318074(a1[7], (uint64_t)v14)
      && !sub_188318074(a1[8], (uint64_t)&v14[1] + 8)
      && !sub_188318074(a1[9], (uint64_t)v15)
      && !sub_188318074(a1[10], (uint64_t)&v15[1] + 8)
      && !sub_188318074(a1[11], (uint64_t)&v16))
    {
      size_t v9 = sub_188313CC0();
      int v10 = malloc(v9);
      if (v10)
      {
        uint64_t v7 = v10;
        if (!sub_188313CA0())
        {
          sub_188313CD0();
          if (v18 == v9)
          {
            uint64_t v8 = MEMORY[0x18960B4A0](0LL, v7, v9, 1LL);
            goto LABEL_21;
          }

BOOL hc_PKCS5_PBKDF2_HMAC_SHA1( const char *a1, size_t passwordLen, uint8_t *salt, size_t saltLen, unsigned int rounds, size_t derivedKeyLen, uint8_t *derivedKey)
{
  if (a1) {
    __int128 v12 = a1;
  }
  else {
    __int128 v12 = "";
  }
  return CCKeyDerivationPBKDF(2u, v12, passwordLen, salt, saltLen, 1u, rounds, derivedKey, derivedKeyLen) == 0;
}

void *sub_188317C70()
{
  return sub_188317C78(0LL);
}

void *sub_188317C78(_DWORD *a1)
{
  uint64_t v2 = calloc(1uLL, 0x38uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 12) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[3] = a1;
      uint64_t v4 = (uint64_t)a1;
    }

    else
    {
      uint64_t v4 = sub_188317370();
      v3[3] = v4;
      if (!v4)
      {
        size_t v5 = (char **)v3[2];
        if (!v5)
        {
          size_t v5 = off_18C707008;
          v3[2] = off_18C707008;
        }

void sub_188317D28(_DWORD *a1)
{
  int v1 = a1[12];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[12] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 2) + 48LL))(a1);
    uint64_t v4 = (void *)*((void *)a1 + 3);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    *((void *)a1 + 6) = 0LL;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }

uint64_t sub_188317D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    hc_ENGINE_finish(v4);
    *(void *)(a1 + 24) = 0LL;
  }

  *(void *)(a1 + 16) = a2;
  (*(void (**)(uint64_t))(a2 + 40))(a1);
  return 1LL;
}

uint64_t sub_188317DEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  return 1LL;
}

uint64_t sub_188317DF8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_188317E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v6 = *(uint64_t (**)(void))(*(void *)(a6 + 16) + 64LL);
  if (v6) {
    return v6();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188317E18()
{
  return 72LL;
}

uint64_t sub_188317E20()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_188317E28()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_188317E30()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_188317E38()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_188317E40()
{
  return 1LL;
}

uint64_t sub_188317E48()
{
  return 1LL;
}

void *sub_188317E50()
{
  return &unk_18A221EF0;
}

BOOL sub_188317E5C(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_188317FD8(a4, 2u, 0, key, 0x18uLL, iv, *(CCCryptorRef **)(a1 + 120));
}

BOOL sub_188317E80(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  size_t v6 = *(CCCryptorRef **)(a1 + 120);
  size_t v7 = __n;
  memcpy(__dst, __src, __n);
  return !CCCryptorUpdate(*v6, __src, v7, __dst, v7, &dataOutMoved) && dataOutMoved == v7;
}

uint64_t sub_188317EF4(uint64_t a1)
{
  int v1 = **(_CCCryptor ***)(a1 + 120);
  if (v1) {
    CCCryptorRelease(v1);
  }
  return 1LL;
}

void *sub_188317F18()
{
  return &unk_18A221F48;
}

BOOL sub_188317F24(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_188317FD8(a4, 1u, 0, key, 8uLL, iv, *(CCCryptorRef **)(a1 + 120));
}

void *sub_188317F48()
{
  return &unk_18A221FA0;
}

BOOL sub_188317F54(CCCryptorRef **a1, void *key, void *iv, int a4)
{
  return sub_188317FD8(a4, 0, 0, key, *((int *)*a1 + 2), iv, a1[15]);
}

void *sub_188317F7C()
{
  return &unk_18A221FF8;
}

void *sub_188317F88()
{
  return &unk_18A222050;
}

void *sub_188317F94()
{
  return &unk_18A2220A8;
}

uint64_t sub_188317FA0()
{
  return 0LL;
}

void *sub_188317FA8()
{
  return &unk_18A2220D8;
}

BOOL sub_188317FB4(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_188317FD8(a4, 4u, 0, key, *(int *)(a1 + 104), iv, *(CCCryptorRef **)(a1 + 120));
}

BOOL sub_188317FD8( int a1, CCAlgorithm alg, CCOptions options, void *key, size_t keyLength, void *iv, CCCryptorRef *cryptorRef)
{
  CCOperation v13 = a1 == 0;
  size_t v14 = *cryptorRef;
  if (*cryptorRef)
  {
    if (!key && iv)
    {
      CCCryptorReset(v14, iv);
      return 1LL;
    }

    CCCryptorRelease(v14);
  }

  return CCCryptorCreate(v13, alg, options, key, keyLength, iv, cryptorRef) == 0;
}

uint64_t sub_188318074(unsigned int *a1, uint64_t a2)
{
  int v4 = sub_188315334(a1);
  *(void *)a2 = v4;
  size_t v5 = malloc(v4);
  *(void *)(a2 + init_error_table((uint64_t)off_18C705C00, -1750206208LL, 8) = v5;
  if (!v5) {
    return 12LL;
  }
  sub_1883153EC((const void **)a1, v5);
  BOOL v6 = sub_188315430((uint64_t)a1);
  uint64_t result = 0LL;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

void *sub_1883180D4(const void **a1, void *a2)
{
  int v3 = sub_18831533C(a1[1], *(unsigned int *)a1, a2);
  int v4 = v3;
  if (v3) {
    sub_18831541C((uint64_t)v3, *((_DWORD *)a1 + 4));
  }
  return v4;
}

unsigned int *sub_188318118(uint64_t a1)
{
  uint64_t v2 = (void *)sub_188315820(a1);
  size_t v11 = 0LL;
  uint64_t result = *(unsigned int **)(a1 + 8);
  if (!result) {
    return result;
  }
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  if (sub_188318074(result, (uint64_t)v9)
    || sub_188318074(*(unsigned int **)(a1 + 16), (uint64_t)&v9[1] + 8)
    || (v10 = 0LL, v4 = sub_1883136E4(), v12 = v4, (size_t v5 = malloc(v4)) == 0LL))
  {
LABEL_5:
    sub_1883136F4();
    return 0LL;
  }

  BOOL v6 = v5;
  if (sub_1883136C4())
  {
    free(v6);
    goto LABEL_5;
  }

  sub_1883136F4();
  if (v11 != v4) {
    abort();
  }
  if (*v2)
  {
    SecDHDestroy();
    void *v2 = 0LL;
  }

  if (!SecDHCreateFromParameters())
  {
    free(v6);
    size_t v12 = (int)sub_188315334(*(unsigned int **)(a1 + 8));
    size_t v7 = malloc(v11);
    if (!v7) {
      goto LABEL_16;
    }
    BOOL v6 = v7;
    if (!SecDHGenerateKeypair())
    {
      uint64_t v8 = sub_18831533C(v6, v12, 0LL);
      *(void *)(a1 + 32) = v8;
      if (v8)
      {
        free(v6);
        return (unsigned int *)1;
      }
    }
  }

  free(v6);
LABEL_16:
  if (*v2) {
    SecDHDestroy();
  }
  uint64_t result = 0LL;
  void *v2 = 0LL;
  return result;
}

void *sub_1883182A8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v9 = sub_188315334(*(unsigned int **)(a3 + 8));
  int v5 = sub_188315334(a2);
  uint64_t result = malloc(v5);
  if (result)
  {
    size_t v7 = result;
    sub_1883153EC((const void **)a2, result);
    int v8 = SecDHComputeKey();
    free(v7);
    if (v8) {
      return 0LL;
    }
    else {
      return (void *)v9;
    }
  }

  return result;
}

uint64_t sub_188318360(uint64_t a1)
{
  uint64_t result = (uint64_t)calloc(1uLL, 8uLL);
  if (result)
  {
    sub_188315814(a1, 0LL, result);
    return 1LL;
  }

  return result;
}

uint64_t sub_1883183A0(uint64_t a1)
{
  int v1 = (void *)sub_188315820(a1);
  if (*v1) {
    SecDHDestroy();
  }
  free(v1);
  return 1LL;
}

uint64_t sub_1883183DC()
{
  return 0LL;
}

char **sub_1883183E4()
{
  return &off_18A222130;
}

void heim_abort( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_18831840C(char *a1, va_list a2)
{
  int v3 = 0LL;
  if (vasprintf(&v3, a1, a2) >= 1 && v3 != 0LL)
  {
    syslog(3, "heim_abort: %s", v3);
    __crashreporter_info__ = (uint64_t)v3;
  }

  abort();
}

void heim_warn_blocking(void *a1, dispatch_once_t *a2)
{
  if (byte_18C707700 && pthread_is_threaded_np())
  {
    if (pthread_main_np()) {
      heim_base_once_f(a2, a1, (dispatch_function_t)sub_1883184D0);
    }
  }

void sub_1883184D0(const char *a1)
{
}

uint64_t sub_1883184FC()
{
  uint64_t result = vproc_swap_integer();
  byte_18C707700 = 0;
  return result;
}

void heim_base_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  if (*predicate != -1) {
    dispatch_once_f(predicate, context, function);
  }
}

CFTypeRef heim_retain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void heim_release(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeID heim_get_tid(const void *a1)
{
  return CFGetTypeID(a1);
}

CFMutableArrayRef heim_array_create()
{
  return CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
}

uint64_t heim_array_append_value(__CFArray *a1, const void *a2)
{
  return 0LL;
}

CFIndex heim_array_iterate_f( const __CFArray *a1, uint64_t a2, uint64_t (*a3)(const void *, int *, uint64_t))
{
  CFIndex result = CFArrayGetCount(a1);
  int v11 = 0;
  if (result >= 1)
  {
    CFIndex v7 = result;
    CFIndex v8 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      CFIndex result = a3(ValueAtIndex, &v11, a2);
      ++v8;
      if (v11) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v8 < v7;
      }
    }

    while (v10);
  }

  return result;
}

CFIndex heim_array_iterate(const __CFArray *a1, uint64_t a2)
{
  CFIndex result = CFArrayGetCount(a1);
  int v9 = 0;
  if (result >= 1)
  {
    CFIndex v5 = result;
    CFIndex v6 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      CFIndex result = (*(uint64_t (**)(uint64_t, const void *, int *))(a2 + 16))(a2, ValueAtIndex, &v9);
      ++v6;
      if (v9) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = v6 < v5;
      }
    }

    while (v8);
  }

  return result;
}

const void *heim_array_copy_value(const __CFArray *a1, CFIndex a2)
{
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  int v3 = ValueAtIndex;
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
  return v3;
}

CFIndex heim_array_filter(const __CFArray *a1, uint64_t a2)
{
  CFIndex result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    CFIndex v5 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      else {
        ++v5;
      }
      CFIndex result = CFArrayGetCount(a1);
    }

    while (v5 < result);
  }

  return result;
}

uint64_t sub_18831877C(const __CFArray *a1, const void *a2)
{
  v5.CFIndex length = CFArrayGetCount(a1);
  v5.location = 0LL;
  return CFArrayContainsValue(a1, v5, a2);
}

CFMutableDictionaryRef heim_dict_create()
{
  return CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
}

CFTypeID heim_dict_get_type_id()
{
  return CFDictionaryGetTypeID();
}

const void *heim_dict_copy_value(const __CFDictionary *a1, const void *a2)
{
  Value = CFDictionaryGetValue(a1, a2);
  int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v3;
}

uint64_t heim_dict_set_value(__CFDictionary *a1, const void *a2, const void *a3)
{
  return 0LL;
}

void sub_188318830(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_18831885C, v3);
}

uint64_t sub_18831885C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))a3)(a1, a2, *(void *)(a3 + 8));
}

void heim_dict_iterate(const __CFDictionary *a1, uint64_t a2)
{
  v2[0] = a2;
  v2[1] = 0LL;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_188318890, v2);
}

uint64_t sub_188318890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 16LL))();
}

CFStringRef heim_string_create(char *cStr)
{
  return CFStringCreateWithCString(0LL, cStr, 0x8000100u);
}

CFTypeID heim_string_get_type_id()
{
  return CFStringGetTypeID();
}

char *heim_string_copy_utf8(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr) {
    return strdup(CStringPtr);
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFIndex v6 = malloc(v5);
  if (v6)
  {
    if (!CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0LL;
    }
  }

  return (char *)v6;
}

CFDataRef heim_data_create(UInt8 *bytes, CFIndex length)
{
  return CFDataCreate(0LL, bytes, length);
}

CFTypeID heim_data_get_type_id()
{
  return CFDataGetTypeID();
}

uint64_t heim_uniq_alloc( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_18C4D9D10 != -1) {
    dispatch_once(&qword_18C4D9D10, &unk_18A222198);
  }
  if (a1 <= 0x1F) {
    heim_abort("uniq: size too small:size >= sizeof(struct heim_base_uniq)", a2, a3, a4, a5, a6, a7, a8, v12);
  }
  uint64_t result = qword_18C4D9D08;
  if (qword_18C4D9D08)
  {
    uint64_t result = sub_188318A20(qword_18C4D9D08, a1, (uint64_t)"base-uniq", a4, a5, a6, a7, a8);
    if (result)
    {
      *(void *)(result + 16) = a2;
      *(void *)(result + 24) = a3;
    }
  }

  return result;
}

uint64_t sub_188318A20( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 <= 0xF) {
    heim_abort("cf runtime size too small:size >= sizeof(CFRuntimeBase)", a2, a3, a4, a5, a6, a7, a8, v12);
  }
  size_t v8 = a2 - 16;
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance) {
    bzero((void *)(Instance + 16), v8);
  }
  return v10;
}

uint64_t heim_error_createv(int a1, const char *a2, va_list a3)
{
  if (qword_18C4D9D20 != -1) {
    dispatch_once(&qword_18C4D9D20, &unk_18A222238);
  }
  uint64_t v6 = qword_18C4D9D18;
  if (!qword_18C4D9D18) {
    return 0LL;
  }
  CFIndex v7 = (char *)malloc(0x400uLL);
  if (!v7) {
    return 0LL;
  }
  size_t v8 = v7;
  if (vsnprintf(v7, 0x400uLL, a2, a3) < 0)
  {
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = sub_188318A20(v6, 0x28uLL, (uint64_t)"heim-error", v9, v10, v11, v12, v13);
    if (v14)
    {
      CFStringRef v15 = CFStringCreateWithCString(0LL, v8, 0x8000100u);
      *(_DWORD *)(v14 + 16) = a1;
      *(void *)(v14 + 24) = v15;
      *(void *)(v14 + 32) = 0LL;
    }
  }

  free(v8);
  return v14;
}

uint64_t heim_error_copy_string(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    CFRetain(*(CFTypeRef *)(a1 + 24));
  }
  return v1;
}

uint64_t heim_error_get_code(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t heim_error_append(uint64_t a1, CFTypeRef cf)
{
  size_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 32) = cf;
  return a1;
}

CFNumberRef heim_number_create(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
}

CFTypeID heim_number_get_type_id()
{
  return CFNumberGetTypeID();
}

uint64_t heim_number_get_int(const __CFNumber *a1)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  return valuePtr;
}

dispatch_queue_t sub_188318C40(const char *a1)
{
  return dispatch_queue_create(a1, 0LL);
}

void sub_188318C48(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

uint64_t sub_188318C5C(dispatch_semaphore_s *a1, uint64_t a2)
{
  dispatch_time_t v3 = dispatch_time(0LL, 1000000000 * a2);
  return dispatch_semaphore_wait(a1, v3);
}

uint64_t sub_188318C94()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_18C4D9D08 = result;
  return result;
}

uint64_t sub_188318CB8(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 24);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_188318CC8()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_18C4D9D18 = result;
  return result;
}

void sub_188318CEC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  dispatch_time_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_188318D28()
{
  __assert_rtn("_krb5_decrypt_tkt_with_subkey", "tkt.c", 391, "usage == 0");
}

void sub_188318D50(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1882BB000, a2, OS_LOG_TYPE_DEBUG, "%{public}s", (uint8_t *)&v2, 0xCu);
}

void sub_188318DC4()
{
}

void sub_188318DDC()
{
  __assert_rtn("check_basic_constraints", "cert.c", 875, "ret == 0");
}

void sub_188318E04()
{
  __assert_rtn("match_general_name", "cert.c", 1801, "c->element == n->element");
}

void sub_188318E2C()
{
}

void sub_188318E54()
{
  __assert_rtn("hx509_crypto_encrypt", "crypto.c", 2690, "(size_t)EVP_CIPHER_iv_length(crypto->c) == ivec->length");
}

void sub_188318E7C()
{
  __assert_rtn("CMSCBCParam_get", "crypto.c", 2254, "crypto->param == NULL");
}

void sub_188318EA4()
{
}

void sub_188318ECC()
{
  __assert_rtn("hc_EVP_DigestInit_ex", "evp.c", 252, "md != NULL");
}

void sub_188318EF4()
{
  __assert_rtn("hc_EVP_CipherInit_ex", "evp.c", 791, "EVP_CIPHER_CTX_iv_length(ctx) <= sizeof(ctx->iv)");
}

void sub_188318F1C()
{
}

void sub_188318F44()
{
}

void sub_188318F6C()
{
  __assert_rtn("hc_EVP_BytesToKey", "evp.c", 1391, "mds == EVP_MD_size(md)");
}

void sub_188318F94()
{
  __assert_rtn("hc_EVP_BytesToKey", "evp.c", 1385, "mds == EVP_MD_size(md)");
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x18960DAA0]();
}

CCCryptorStatus CCCrypt( CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1895F8090]( *(void *)&op,  *(void *)&alg,  *(void *)&options,  key,  keyLength,  iv,  dataIn,  dataInLength);
}

CCCryptorStatus CCCryptorCreate( CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1895F80B0](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorCreateWithMode( CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1895F80B8]( *(void *)&op,  *(void *)&mode,  *(void *)&alg,  *(void *)&padding,  iv,  key,  keyLength,  tweak);
}

CCCryptorStatus CCCryptorFinal( CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1895F80C0](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1895F8120](cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return MEMORY[0x1895F8128](cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate( CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1895F8130](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDesIsWeakKey()
{
  return MEMORY[0x1895F8140]();
}

uint64_t CCDesSetOddParity()
{
  return MEMORY[0x1895F8148]();
}

uint64_t CCDigest()
{
  return MEMORY[0x1895F8150]();
}

uint64_t CCDigestCreate()
{
  return MEMORY[0x1895F8158]();
}

uint64_t CCDigestDestroy()
{
  return MEMORY[0x1895F8160]();
}

uint64_t CCDigestFinal()
{
  return MEMORY[0x1895F8168]();
}

uint64_t CCDigestOutputSize()
{
  return MEMORY[0x1895F8180]();
}

uint64_t CCDigestReset()
{
  return MEMORY[0x1895F8188]();
}

uint64_t CCDigestUpdate()
{
  return MEMORY[0x1895F8190]();
}

int CCKeyDerivationPBKDF( CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return MEMORY[0x1895F81F8]( *(void *)&algorithm,  password,  passwordLen,  salt,  saltLen,  *(void *)&prf,  *(void *)&rounds,  derivedKey);
}

uint64_t CCRandomCopyBytes()
{
  return MEMORY[0x1895F8220]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1895F8228](bytes, count);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602630](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x189602690]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x189602880](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1896028D0](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1896028D8](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1896028F0]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy( CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x189602A80](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x189602AF0](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x189602B90](theDict, key);
}

CFDictionaryRef CFDictionaryCreate( CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x189602BA8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy( CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BC8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x189602C48](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x189602C58](err);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues( CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x189602C68](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x189602C70](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x189602F68](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue( CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x189602F88](key, applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream( CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x189603000](allocator, stream, streamLength, options, format, error);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x189603060](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x189603098](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x189603490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments( CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x189603498](alloc, formatOptions, format, arguments);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x189603500](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x189603548](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x189603558](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1896036D0](url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation( CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x189603780](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath( CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1896037C0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation( CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x189603818](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x189603880](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1896038A0]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1896038B0](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x1895F83C0](sdRef);
}

uint64_t DNSServiceCreateDelegateConnection()
{
  return MEMORY[0x1895F83C8]();
}

DNSServiceErrorType DNSServiceGetAddrInfo( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, const char *hostname, DNSServiceGetAddrInfoReply callBack, void *context)
{
  return MEMORY[0x1895F83E0]( sdRef,  *(void *)&flags,  *(void *)&interfaceIndex,  *(void *)&protocol,  hostname,  callBack,  context);
}

DNSServiceErrorType DNSServiceQueryRecord( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, DNSServiceQueryRecordReply callBack, void *context)
{
  return MEMORY[0x1895F8400]( sdRef,  *(void *)&flags,  *(void *)&interfaceIndex,  fullname,  rrtype,  rrclass,  callBack,  context);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x1895F8448](service, queue);
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1895F8470]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x18960B260](certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x18960B290](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x18960B2E8](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x18960B320]();
}

uint64_t SecDHComputeKey()
{
  return MEMORY[0x18960B380]();
}

uint64_t SecDHCreateFromParameters()
{
  return MEMORY[0x18960B390]();
}

uint64_t SecDHDestroy()
{
  return MEMORY[0x18960B398]();
}

uint64_t SecDHGenerateKeypair()
{
  return MEMORY[0x18960B3A0]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x18960B3D8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x18960B3E0](identityRef, privateKeyRef);
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x18960B3F0]();
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x18960B400](query, result);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x18960B420](key);
}

CFDataRef SecKeyCreateDecryptedData( SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x18960B480](key, algorithm, ciphertext, error);
}

uint64_t SecKeyCreateDuplicate()
{
  return MEMORY[0x18960B488]();
}

CFDataRef SecKeyCreateSignature( SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x18960B4C0](key, algorithm, dataToSign, error);
}

OSStatus SecKeyDecrypt( SecKeyRef key, SecPadding padding, const uint8_t *cipherText, size_t cipherTextLen, uint8_t *plainText, size_t *plainTextLen)
{
  return MEMORY[0x18960B4D0](key, *(void *)&padding, cipherText, cipherTextLen, plainText, plainTextLen);
}

OSStatus SecKeyEncrypt( SecKeyRef key, SecPadding padding, const uint8_t *plainText, size_t plainTextLen, uint8_t *cipherText, size_t *cipherTextLen)
{
  return MEMORY[0x18960B4D8](key, *(void *)&padding, plainText, plainTextLen, cipherText, cipherTextLen);
}

uint64_t SecKeySetParameter()
{
  return MEMORY[0x18960B508]();
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x18960B570]();
}

OSStatus SecRequirementCreateWithString(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement)
{
  return MEMORY[0x18960B608](text, *(void *)&flags, requirement);
}

OSStatus SecStaticCodeCheckValidity( SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement)
{
  return MEMORY[0x18960B610](staticCode, *(void *)&flags, requirement);
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x18960B620](path, *(void *)&flags, staticCode);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x18960B6B8](certificates, policies, trust);
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x18960B6C8](trust, result);
}

SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
{
  return (SecCertificateRef)MEMORY[0x18960B6E8](trust, ix);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x18960B6F0](trust);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x189604550]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x189604568]();
}

uint64_t _CFURLRequestSetAllowedProtocolTypes()
{
  return MEMORY[0x189602070]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x189604828]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x189604838]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1895F8880](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1895F8918](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1895F8A00]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1895F8A28](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1895F8A30](*(void *)&a1);
}

uint64_t _asn1_copy_top()
{
  return MEMORY[0x1896151E8]();
}

uint64_t _asn1_decode_top()
{
  return MEMORY[0x1896151F0]();
}

uint64_t _asn1_encode()
{
  return MEMORY[0x1896151F8]();
}

uint64_t _asn1_free_top()
{
  return MEMORY[0x189615200]();
}

uint64_t _asn1_length()
{
  return MEMORY[0x189615208]();
}

void _os_log_debug_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1895F9328](a1, *(void *)&a2);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1895F94C0]();
}

void asl_close(asl_object_t obj)
{
}

void asl_free(asl_object_t obj)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1895F9510](client, msg, *(void *)&level, format);
}

asl_object_t asl_new(uint32_t type)
{
  return (asl_object_t)MEMORY[0x1895F9518](*(void *)&type);
}

asl_object_t asl_open(const char *ident, const char *facility, uint32_t opts)
{
  return (asl_object_t)MEMORY[0x1895F9520](ident, facility, *(void *)&opts);
}

int asl_set(asl_object_t obj, const char *key, const char *value)
{
  return MEMORY[0x1895F9530](obj, key, value);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1895F95A0](a1);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1895F9620]();
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

uint64_t ccDRBGGetRngState()
{
  return MEMORY[0x1895F9740]();
}

uint64_t cccurve25519_make_key_pair()
{
  return MEMORY[0x1895F9870]();
}

uint64_t cccurve25519_with_rng()
{
  return MEMORY[0x1895F9890]();
}

uint64_t ccdh_ccn_size()
{
  return MEMORY[0x1895F9A28]();
}

uint64_t ccdh_gp_n()
{
  return MEMORY[0x1895F9A60]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x1895F9A98]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x1895F9AA0]();
}

uint64_t ccec_compute_key()
{
  return MEMORY[0x1895F9AF8]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1895F9B10]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1895F9B68]();
}

uint64_t ccec_generate_key_fips()
{
  return MEMORY[0x1895F9B90]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1895F9BA8]();
}

uint64_t ccpbkdf2_hmac()
{
  return MEMORY[0x1895FA0F8]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t ccsrp_client_process_challenge()
{
  return MEMORY[0x1895FA328]();
}

uint64_t ccsrp_client_start_authentication()
{
  return MEMORY[0x1895FA330]();
}

uint64_t ccsrp_client_verify_session()
{
  return MEMORY[0x1895FA338]();
}

uint64_t ccsrp_ctx_init()
{
  return MEMORY[0x1895FA340]();
}

uint64_t ccsrp_generate_verifier()
{
  return MEMORY[0x1895FA360]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1895FA4B8]();
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1895FA5A8](a1);
}

void closelog(void)
{
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1895FA5F0](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t csops()
{
  return MEMORY[0x1895FAAA0]();
}

char *__cdecl ctime(const time_t *a1)
{
  return (char *)MEMORY[0x1895FAAB8](a1);
}

uint64_t der_copy_bit_string()
{
  return MEMORY[0x189615228]();
}

uint64_t der_copy_heim_integer()
{
  return MEMORY[0x189615230]();
}

uint64_t der_copy_octet_string()
{
  return MEMORY[0x189615238]();
}

uint64_t der_copy_oid()
{
  return MEMORY[0x189615240]();
}

uint64_t der_free_bit_string()
{
  return MEMORY[0x189615248]();
}

uint64_t der_free_heim_integer()
{
  return MEMORY[0x189615250]();
}

uint64_t der_free_octet_string()
{
  return MEMORY[0x189615258]();
}

uint64_t der_free_oid()
{
  return MEMORY[0x189615260]();
}

uint64_t der_heim_bit_string_cmp()
{
  return MEMORY[0x189615290]();
}

uint64_t der_heim_integer_cmp()
{
  return MEMORY[0x189615298]();
}

uint64_t der_heim_octet_string_cmp()
{
  return MEMORY[0x1896152A0]();
}

uint64_t der_heim_oid_cmp()
{
  return MEMORY[0x1896152A8]();
}

uint64_t der_ia5_string_cmp()
{
  return MEMORY[0x1896152B0]();
}

uint64_t der_length_len()
{
  return MEMORY[0x1896152C0]();
}

uint64_t der_parse_heim_oid()
{
  return MEMORY[0x1896152D0]();
}

uint64_t der_parse_hex_heim_integer()
{
  return MEMORY[0x1896152D8]();
}

uint64_t der_print_heim_oid()
{
  return MEMORY[0x1896152E0]();
}

uint64_t der_print_hex_heim_integer()
{
  return MEMORY[0x1896152E8]();
}

uint64_t der_printable_string_cmp()
{
  return MEMORY[0x1896152F0]();
}

uint64_t der_put_length_and_tag()
{
  return MEMORY[0x189615308]();
}

int dirfd(DIR *dirp)
{
  return MEMORY[0x1895FAAD8](dirp);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1895FAC48](key);
}

uint64_t dispatch_mig_server()
{
  return MEMORY[0x1895FAD40]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

void dispatch_queue_set_specific( dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FAE00](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE08](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1895FAE50](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1895FAEE8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1895FAF50](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

void dns_free(dns_handle_t dns)
{
}

dns_handle_t dns_open(const char *name)
{
  return (dns_handle_t)MEMORY[0x189617060](name);
}

int32_t dns_search( dns_handle_t dns, const char *name, uint32_t dnsclass, uint32_t dnstype, char *buf, uint32_t len, sockaddr *from, uint32_t *fromlen)
{
  return MEMORY[0x189617068](dns, name, *(void *)&dnsclass, *(void *)&dnstype, buf, *(void *)&len, from, fromlen);
}

void dns_set_debug(dns_handle_t dns, uint32_t flag)
{
}

int dup(int a1)
{
  return MEMORY[0x1895FAFA8](*(void *)&a1);
}

void errx(int a1, const char *a2, ...)
{
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1895FB228](*(void *)&a1, a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1895FB250](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1895FB268](a1);
}

int fgetc(FILE *a1)
{
  return MEMORY[0x1895FB280](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1895FB290](a1, *(void *)&a2, a3);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1895FB2A0](a1);
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  return MEMORY[0x1895FB340](a1, a2, *(void *)&a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1895FB378](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB388](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1895FB468](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1895FB480](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x1895FB4D8](*(void *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1895FB4E0](a1, a2, a3, a4);
}

int getaudit_addr(auditinfo_addr *a1, int a2)
{
  return MEMORY[0x1895FB508](a1, *(void *)&a2);
}

int getc(FILE *a1)
{
  return MEMORY[0x1895FB518](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1895FB540]();
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x1895FB588](a1);
}

int gethostname(char *a1, size_t a2)
{
  return MEMORY[0x1895FB590](a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1895FB5A0](a1);
}

char *getlogin(void)
{
  return (char *)MEMORY[0x1895FB5C0]();
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return MEMORY[0x1895FB5D8](a1, *(void *)&a2, a3, *(void *)&a4, a5, *(void *)&a6, *(void *)&a7);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895FB610](*(void *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1895FB638]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1895FB660](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1895FB670](*(void *)&a1);
}

servent *__cdecl getservbyname(const char *a1, const char *a2)
{
  return (servent *)MEMORY[0x1895FB6B8](a1, a2);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895FB6D0](*(void *)&a1, a2, a3);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1895FB6E8]();
}

tm *__cdecl gmtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1895FB720](a1);
}

uint64_t heim_any_cmp()
{
  return MEMORY[0x189615318]();
}

int inet_aton(const char *a1, in_addr *a2)
{
  return MEMORY[0x1895FB820](a1, a2);
}

char *__cdecl inet_ntoa(in_addr a1)
{
  return (char *)MEMORY[0x1895FB830](*(void *)&a1.s_addr);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1895FB838](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1895FB840](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1895FB850](*(void *)&a1, a2);
}

int issetugid(void)
{
  return MEMORY[0x1895FB870]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1895FBA18](a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1895FBA80](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FBA88](a1, a2);
}

mach_msg_return_t mach_msg( mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1895FBAE8]( msg,  *(void *)&option,  *(void *)&send_size,  *(void *)&rcv_size,  *(void *)&rcv_name,  *(void *)&timeout,  *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1895FBB10](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1895FBB28](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_mod_refs( ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1895FBB78](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

int mbr_identifier_to_uuid(int id_type, const void *identifier, size_t identifier_size, uuid_t uu)
{
  return MEMORY[0x1895FBD88](*(void *)&id_type, identifier, identifier_size, uu);
}

void *__cdecl memchr(const void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1895FBE00](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1895FBE98]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkstemp(char *a1)
{
  return MEMORY[0x1895FBF38](a1);
}

uint64_t ne_session_service_get_dns_service_id()
{
  return MEMORY[0x1895FC058]();
}

uint64_t ne_session_set_socket_attributes()
{
  return MEMORY[0x1895FC078]();
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1895FC190](*(void *)&token, check);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1895FC1B8](name, out_token);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x189609520](hostname, port);
}

uint32_t nw_interface_get_index(nw_interface_t interface)
{
  return MEMORY[0x189609800](interface);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1896099E8]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x189609B30]();
}

uint64_t nw_parameters_set_pid()
{
  return MEMORY[0x189609BD0]();
}

uint64_t nw_path_copy_scoped_interface()
{
  return MEMORY[0x189609D28]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x189609D50]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x189609D70]();
}

uint64_t nw_path_get_vpn_config_id()
{
  return MEMORY[0x189609E88]();
}

uint64_t nw_path_is_flow_divert()
{
  return MEMORY[0x189609EB0]();
}

uint64_t nw_path_is_per_app_vpn()
{
  return MEMORY[0x189609EC0]();
}

void nw_release(void *obj)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1896165E8]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1895FC278](a1);
}

void openlog(const char *a1, int a2, int a3)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

void os_release(void *object)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1895FC890](a1);
}

int pthread_is_threaded_np(void)
{
  return MEMORY[0x1895FCA50]();
}

int pthread_main_np(void)
{
  return MEMORY[0x1895FCA78]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA88](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1895FCB98](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1895FCC40](a1);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCCA8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int remove(const char *a1)
{
  return MEMORY[0x1895FCD08](a1);
}

int rename(const char *__old, const char *__new)
{
  return MEMORY[0x1895FCD50](__old, __new);
}

int res_9_dn_expand(const u_char *a1, const u_char *a2, const u_char *a3, char *a4, int a5)
{
  return MEMORY[0x189617078](a1, a2, a3, a4, *(void *)&a5);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1895FCE10](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCE30](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1895FCEC8](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1895FCF48](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1895FCFA0](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return MEMORY[0x1895FCFA8](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1895FD030](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1895FD070](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1895FD088](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1895FD090](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0A0](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1895FD0D0](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F0](__dst, __src, __n);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1895FD128](__stringp, __delim);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1895FD178](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

int strvisx(char *a1, const char *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FD1F0](a1, a2, a3, *(void *)&a4);
}

void syslog(int a1, const char *a2, ...)
{
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x1895FD380](*(void *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x1895FD390](*(void *)&a1, *(void *)&a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD510](a1, a2, a3);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD528](a1, a2, a3);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1895FD558](*(void *)&target_task, address, size);
}

kern_return_t vm_read( vm_map_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt)
{
  return MEMORY[0x1895FD5A8](*(void *)&target_task, address, size, data, dataCnt);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1895FD5F8](msg);
}

uint64_t vproc_swap_integer()
{
  return MEMORY[0x1895FD600]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1895FD610](__str, __size, __format, a4);
}

void warnx(const char *a1, ...)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1895FD7C8](xarray, applier);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1895FD808](xarray);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1895FD850](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1895FD8C0](xBOOL);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1895FD968](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1895FD9F0](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FDB98](keys, values, count);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1895FDC58](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC68](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1895FDE70](object);
}

void xpc_release(xpc_object_t object)
{
}