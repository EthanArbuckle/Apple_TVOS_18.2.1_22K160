void connect_loopback_sync()
{
  uint64_t v0;
  void *v1;
  dispatch_semaphore_t v2;
  dispatch_queue_t v3;
  dispatch_semaphore_s *v4;
  dispatch_semaphore_t v5;
  remote_control_detach_loopback();
  remote_control_attach_loopback();
  remote_control_connect_loopback();
  v0 = remote_device_copy_unique_of_type();
  if (!v0) {
    connect_loopback_sync_cold_1();
  }
  v1 = (void *)v0;
  v2 = dispatch_semaphore_create(0LL);
  v3 = dispatch_queue_create("loopback connect", 0LL);
  v5 = v2;
  v4 = v2;
  remote_device_set_connected_callback();
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

void __connect_loopback_sync_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t XPCFileTransfer_open(const char *a1, int a2, void *a3, int a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  v11 = v10;
  if (v9)
  {
    if (XPCFileTransfer_open_once[0] != -1) {
      dispatch_once(XPCFileTransfer_open_once, &__block_literal_global);
    }
    [(id)XPCFileTransfer_open_protectionTypes objectForKeyedSubscript:v9];
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12) {
      int v14 = [v12 intValue];
    }
    else {
      int v14 = -1;
    }

    if (v11) {
      goto LABEL_10;
    }
  }

  else
  {
    int v14 = -1;
    if (v10)
    {
LABEL_10:
      uint64_t v15 = [v11 intValue];
      goto LABEL_11;
    }
  }

  uint64_t v15 = 438LL;
LABEL_11:
  uint64_t v16 = open_dprotected_np(a1, a2, v14, a4, v15);

  return v16;
}

uint64_t XPCTypeGetMachSendOnce()
{
  return MEMORY[0x1895F9298];
}

uint64_t XPCErrorGetPeerCodeSigningRequirement()
{
  uint64_t v0 = MEMORY[0x1895F91B8];
  id v1 = MEMORY[0x1895F91B8];
  return v0;
}

void initializeXPCShim()
{
  XPCErrorKeyDescription = *MEMORY[0x1895F91A8];
  XPCEventKeyName = *MEMORY[0x1895F91D8];
}

uint64_t XPCaudit_token_to_auid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_auid(&v3);
}

uint64_t XPCaudit_token_to_euid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_euid(&v3);
}

uint64_t XPCaudit_token_to_egid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_egid(&v3);
}

uint64_t XPCaudit_token_to_ruid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_ruid(&v3);
}

uint64_t XPCaudit_token_to_rgid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_rgid(&v3);
}

uint64_t XPCaudit_token_to_pid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pid(&v3);
}

uint64_t XPCaudit_token_to_asid(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_asid(&v3);
}

uint64_t XPCaudit_token_to_pidversion(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pidversion(&v3);
}

uint64_t sub_188336918(uint64_t (*a1)(void))
{
  return a1(*(void *)(v1 + 16));
}

uint64_t XPCEndpoint.deinit()
{
  return v0;
}

uint64_t XPCEndpoint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t XPCPeerEndpoint.deinit()
{
  return v0;
}

uint64_t _s7Mercury15XPCPeerEndpointCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t SystemXPCListenerConnection.createEndpoint()()
{
  xpc_endpoint_t v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t type metadata accessor for XPCPeerEndpoint()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for XPCEndpoint()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCEndpoint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t type metadata accessor for XPCListenerEndpoint()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for XPCReplyProviding(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy8192_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_188336AC4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188336AE8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

void type metadata accessor for URLFileProtection(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_188337404(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188337424(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for pollfd(uint64_t a1)
{
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
}

void type metadata accessor for remote_device_state_t(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1883374AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1883374CC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for termios(uint64_t a1)
{
}

uint64_t sub_18833751C()
{
  xpc_endpoint_t v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

_DWORD *sub_188337554@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_188337564(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_188337570(uint64_t a1, uint64_t a2)
{
  return sub_188337838(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1896070D8]);
}

uint64_t sub_18833757C(uint64_t a1, id *a2)
{
  uint64_t result = sub_188386848();
  *a2 = 0LL;
  return result;
}

uint64_t sub_1883375F0(uint64_t a1, id *a2)
{
  char v3 = sub_188386854();
  *a2 = 0LL;
  return v3 & 1;
}

uint64_t sub_18833766C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18838683C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1883376AC(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1883376B8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1883376CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18838683C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_188337710@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_188386860();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_188337738()
{
  return sub_188386D04();
}

uint64_t sub_1883377A4()
{
  return sub_1883377EC(&qword_18C707C68, (uint64_t)&unk_188388244);
}

uint64_t sub_1883377C8()
{
  return sub_1883377EC(&qword_18C707C70, (uint64_t)&unk_188388218);
}

uint64_t sub_1883377EC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URLFileProtection(255LL);
    uint64_t result = MEMORY[0x1895C375C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_18833782C(uint64_t a1, uint64_t a2)
{
  return sub_188337838(a1, a2, MEMORY[0x189617F88]);
}

uint64_t sub_188337838(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_188386860();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_188337874()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1883378B4()
{
  uint64_t v0 = sub_188387268();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_188337924()
{
  uint64_t v0 = sub_188386860();
  uint64_t v2 = v1;
  if (v0 == sub_188386860() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_188386FD4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1883379AC()
{
  return sub_1883377EC(&qword_18C707C78, (uint64_t)&unk_1883882B4);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1883379E4(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_188337A40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

void sub_188337AA8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t XPCObjectEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  swift_retain();
  uint64_t v9 = MEMORY[0x18961AFE8];
  unint64_t v10 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v11 = type metadata accessor for _XPCObjectEncoder();
  v12 = (void *)swift_allocObject();
  v12[2] = 0LL;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  uint64_t v19 = v11;
  uint64_t v20 = sub_188343FE8(&qword_18C4E7D70, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_188388A28);
  unint64_t v17 = (unint64_t)v12;
  swift_retain();
  sub_1883867D0();
  if (v4)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v17);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v17);
    a3 = v12[2];
    if (a3)
    {
      swift_unknownObjectRetain();
    }

    else
    {
      a3 = sub_188386C44();
      swift_allocError();
      uint64_t v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
      v15[3] = a2;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v15);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_0Tm,  a1,  a2);
      unint64_t v17 = 0LL;
      unint64_t v18 = 0xE000000000000000LL;
      sub_188386BB4();
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xD000000000000029LL;
      unint64_t v18 = 0x800000018838AFD0LL;
      sub_1883872E0();
      sub_1883868E4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(a3 - 8) + 104LL))( v15,  *MEMORY[0x1896193B8],  a3);
      swift_willThrow();
    }

    swift_release();
  }

  return a3;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MEMORY[0x1895C3C6C](a2) == XPCTypeDictionary)
  {
    uint64_t result = XPCObjectEncoder.encode<A>(_:)(a1, a3, a4);
    if (!v4)
    {
      v13 = (void *)result;
      if (MEMORY[0x1895C3C6C]() == XPCTypeDictionary)
      {
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = a2;
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = sub_188343F58;
        *(void *)(v18 + 24) = v17;
        v21[4] = sub_188343F8C;
        v21[5] = v18;
        v21[0] = MEMORY[0x1895F87A0];
        v21[1] = 1107296256LL;
        v21[2] = sub_188338060;
        v21[3] = &block_descriptor;
        uint64_t v19 = _Block_copy(v21);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v13, v19);
        swift_unknownObjectRelease();
        _Block_release(v19);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0) {
          __break(1u);
        }
      }

      else
      {
        uint64_t v14 = sub_188386C44();
        swift_allocError();
        uint64_t v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
        v16[3] = swift_getObjectType();
        *uint64_t v16 = a2;
        swift_unknownObjectRetain();
        sub_188386C14();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x1896193B8],  v14);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }

  else
  {
    uint64_t v9 = sub_188386C44();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
    v11[3] = swift_getObjectType();
    void *v11 = a2;
    swift_unknownObjectRetain();
    sub_188386C14();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  *MEMORY[0x1896193B8],  v9);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_188338014(char *key, xpc_object_t value, xpc_object_t xdict)
{
  return 1LL;
}

uint64_t sub_18833803C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t sub_188338060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v7, a3, a4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_18833812C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = XPCObjectEncoder.encode<A>(_:)(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

unint64_t sub_188338158(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8348);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  char v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C707D70);
  uint64_t v6 = sub_188386CEC();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }

  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_188344D68(v12, (uint64_t)v5, &qword_18C4E8348);
    unint64_t result = sub_1883718CC((uint64_t)v5);
    if ((v15 & 1) != 0) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_188386C98();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16,  v5,  v18);
    unint64_t result = (unint64_t)sub_188344D58(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1883382F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78A8);
  uint64_t v2 = sub_188386CEC();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_188344D68(v6, (uint64_t)&v15, &qword_18C4E77F0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_18837191C(v15, v16);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_188344D58(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_188338428(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7898);
  uint64_t v2 = (void *)sub_188386CEC();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_18837191C(v5, v6);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_188338548(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707D58);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C707D60);
  uint64_t v6 = sub_188386CEC();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }

  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_188344D68(v12, (uint64_t)v5, &qword_18C707D58);
    unint64_t result = sub_1883719E4((uint64_t)v5);
    if ((v15 & 1) != 0) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for RemoteDevice.Identity();
    unint64_t result = sub_188344D14((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1883386D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C707D50);
  uint64_t v2 = (void *)sub_188386CEC();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_18837191C(v5, v6);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1883387F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t result = swift_unknownObjectRelease();
  if (*(void *)(v3 + 16))
  {
    uint64_t v8 = type metadata accessor for XPCObjectKeyedEncodingContainer(0LL, a2, a3, v7);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x1895C375C](&unk_1883886A8, v8);
    return sub_188386E18();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1883388BC@<X0>(void *a1@<X8>)
{
  *(void *)(v1 + 16) = xpc_array_create(0LL, 0LL);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
    a1[4] = sub_188344554();
    *a1 = v1;
    a1[1] = v4;
    a1[2] = v5;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_18833893C()
{
  return swift_deallocClassInstance();
}

uint64_t sub_188338978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1883387F4(a1, a2, a3);
}

uint64_t sub_188338998@<X0>(void *a1@<X8>)
{
  return sub_1883388BC(a1);
}

uint64_t sub_1883389B8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  a1[4] = sub_188344510();
  *a1 = v3;
  a1[1] = v4;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_188338A08()
{
  uint64_t v1 = *(void **)(v0 + 8);
  sub_1883872B0();
  uint64_t v2 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v1, (const char *)(v2 + 32), 0LL);
  return swift_release();
}

uint64_t sub_188338A70(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_BOOL(v3, (const char *)(v4 + 32), a1 & 1);
  return swift_release();
}

uint64_t sub_188338AE4()
{
  uint64_t v1 = *(void **)(v0 + 8);
  sub_1883872B0();
  uint64_t v2 = sub_1883868A8();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1883868A8();
  xpc_dictionary_set_string(v1, (const char *)(v2 + 32), (const char *)(v3 + 32));
  swift_release();
  return swift_release();
}

uint64_t sub_188338B74(double a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338BE8(float a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338C60(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338CD8(__int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338D50(int a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338DC8(unsigned __int8 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338E40(unsigned __int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338EB8(unsigned int a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1883872B0();
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_188338F30(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(v4 + 8);
  sub_1883872B0();
  uint64_t v8 = sub_1883868A8();
  swift_bridgeObjectRelease();
  a4(v7, v8 + 32, a1);
  return swift_release();
}

uint64_t sub_188338FA8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  v84 = a5;
  uint64_t v89 = a3;
  uint64_t v92 = a2;
  uint64_t v88 = a1;
  v95[12] = *MEMORY[0x1895F89C8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v6);
  uint64_t v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = sub_18838662C();
  *(void *)&__int128 v85 = *(void *)(v86 - 8);
  MEMORY[0x1895F8860](v86);
  v81 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950);
  uint64_t v11 = MEMORY[0x1895F8860](v10);
  uint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *((void *)a4 - 1);
  uint64_t v15 = MEMORY[0x1895F8860](v11);
  v82 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8860](v15);
  v83 = (char *)&v81 - v18;
  uint64_t v19 = MEMORY[0x1895F8860](v17);
  uint64_t v21 = (char *)&v81 - v20;
  MEMORY[0x1895F8860](v19);
  v23 = (char *)&v81 - v22;
  uint64_t v24 = sub_1883865D8();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1895F8860](v24);
  v27 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28 = *(void (**)(char *, uint64_t, char *))(v14 + 16);
  v29 = a4;
  uint64_t v30 = v88;
  v87 = v28;
  v28(v23, v88, v29);
  int v31 = swift_dynamicCast();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  if (v31)
  {
    v32(v13, 0LL, 1LL, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1LL, v24) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v13, v24);
      v33 = (void *)v91[1];
      swift_unknownObjectRetain();
      sub_1883872B0();
      int64_t v34 = sub_188352560();
      uint64_t v35 = sub_1883868A8();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_date(v33, (const char *)(v35 + 32), v34);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      return swift_release();
    }
  }

  else
  {
    v32(v13, 1LL, 1LL, v24);
  }

  sub_188344660((uint64_t)v13, (uint64_t *)&unk_18C4E7950);
  v36 = v87;
  v87(v21, v30, v29);
  uint64_t v37 = v86;
  int v38 = swift_dynamicCast();
  uint64_t v39 = v85;
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
  if (v38)
  {
    v40(v8, 0LL, 1LL, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v8, 1LL, v37) != 1)
    {
      v41 = v81;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v81, v8, v37);
      uint64_t v93 = sub_188386614();
      LOWORD(v94) = v42;
      BYTE2(v94) = v43;
      BYTE3(v94) = v44;
      BYTE4(v94) = v45;
      BYTE5(v94) = v46;
      BYTE6(v94) = v47;
      HIBYTE(v94) = v48;
      sub_188339B10((const unsigned __int8 *)&v93, (uint64_t)v95, (uint64_t)v91);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v37);
    }
  }

  else
  {
    v40(v8, 1LL, 1LL, v37);
  }

  sub_188344660((uint64_t)v8, &qword_18C4E7960);
  v36(v83, v30, v29);
  uint64_t v50 = swift_dynamicCast();
  if ((_DWORD)v50)
  {
    unint64_t v51 = v94;
    MEMORY[0x1895F8860](v50);
    v52 = *(char **)(v89 + 24);
    *(&v81 - 6) = *(char **)(v89 + 16);
    *(&v81 - 5) = v29;
    v53 = v84;
    *(&v81 - 4) = v52;
    *(&v81 - 3) = v53;
    v79 = v91;
    uint64_t v80 = v92;
    __asm { BR              X10 }
  }

  v36(v82, v30, v29);
  if (swift_dynamicCast())
  {
    v54 = (void *)v93;
    v55 = (void *)v91[1];
    swift_unknownObjectRetain();
    sub_1883872B0();
    uint64_t v56 = sub_1883868A8();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v55, (const char *)(v56 + 32), v54);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }

  else
  {
    uint64_t v57 = *(void *)(*v91 + 24LL);
    uint64_t v58 = v91[2];
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    __int128 v85 = xmmword_1883883A0;
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    uint64_t v60 = v89;
    uint64_t v61 = *(void *)(v89 + 16);
    *(void *)(inited + 56) = v61;
    uint64_t v89 = *(void *)(v60 + 24);
    *(void *)(inited + 64) = v89;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    v83 = *(char **)(*(void *)(v61 - 8) + 16LL);
    ((void (*)(uint64_t *, uint64_t, uint64_t))v83)(boxed_opaque_existential_0Tm, v92, v61);
    uint64_t v93 = v58;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1883860B4(inited);
    uint64_t v63 = v93;
    unint64_t v64 = sub_188338158(MEMORY[0x18961AFE8]);
    uint64_t v65 = type metadata accessor for _XPCObjectEncoder();
    v66 = (void *)swift_allocObject();
    v66[2] = 0LL;
    v66[3] = v57;
    v66[4] = v63;
    v66[5] = v64;
    v95[1] = v65;
    v95[2] = sub_188343FE8(&qword_18C4E7D70, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_188388A28);
    uint64_t v93 = (uint64_t)v66;
    swift_retain();
    uint64_t v67 = v90;
    sub_1883867D0();
    if (v67)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
    }

    uint64_t v68 = v89;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v93);
    v69 = (void *)v66[2];
    if (v69)
    {
      v70 = (void *)v91[1];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1883872B0();
      uint64_t v71 = sub_1883868A8();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_value(v70, (const char *)(v71 + 32), v69);
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
    }

    else
    {
      uint64_t v72 = sub_188386C44();
      uint64_t v90 = swift_allocError();
      v74 = v73;
      v84 = (char *)v73 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0) + 48);
      v74[3] = (uint64_t)v29;
      v75 = __swift_allocate_boxed_opaque_existential_0Tm(v74);
      v87((char *)v75, v30, v29);
      uint64_t v76 = v91[2];
      uint64_t v77 = swift_initStackObject();
      *(_OWORD *)(v77 + 16) = v85;
      *(void *)(v77 + 56) = v61;
      *(void *)(v77 + 64) = v68;
      v78 = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v77 + 32));
      ((void (*)(uint64_t *, uint64_t, uint64_t))v83)(v78, v92, v61);
      uint64_t v93 = v76;
      swift_bridgeObjectRetain();
      sub_1883860B4(v77);
      uint64_t v93 = 0LL;
      unint64_t v94 = 0xE000000000000000LL;
      sub_188386BB4();
      swift_bridgeObjectRelease();
      uint64_t v93 = 0xD00000000000001FLL;
      unint64_t v94 = 0x800000018838B250LL;
      sub_1883872E0();
      sub_1883868E4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v72 - 8) + 104LL))( v74,  *MEMORY[0x1896193B8],  v72);
      swift_willThrow();
    }
  }

  return swift_release();
}

uint64_t sub_188339B10(const unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  uint64_t result = sub_1883872B0();
  if (a1)
  {
    uint64_t v6 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_uuid(v4, (const char *)(v6 + 32), a1);
    swift_unknownObjectRelease();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188339BA4(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  uint64_t result = sub_1883872B0();
  if (a1)
  {
    uint64_t v7 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_data(v5, (const char *)(v7 + 32), a1, a2 - (void)a1);
    swift_unknownObjectRelease();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188339C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v12 = *(void **)(v6 + 8);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  sub_1883872B0();
  uint64_t v15 = sub_1883868A8();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v12, (const char *)(v15 + 32), v11);
  swift_unknownObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 56) = v13;
  *(void *)(inited + 64) = v14;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))( boxed_opaque_existential_0Tm,  a2,  v13);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  uint64_t v19 = type metadata accessor for XPCObjectKeyedEncodingContainer(0LL, a4, a5, v18);
  MEMORY[0x1895C375C](&unk_1883886A8, v19);
  sub_188386E18();
  return swift_unknownObjectRelease();
}

uint64_t sub_188339DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  xpc_object_t v8 = xpc_array_create(0LL, 0LL);
  uint64_t v9 = (void *)v4[1];
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  sub_1883872B0();
  uint64_t v12 = sub_1883868A8();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v9, (const char *)(v12 + 32), v8);
  swift_release();
  uint64_t v13 = *v4;
  uint64_t v14 = v4[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v11;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_0Tm,  a1,  v10);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  a3[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a3[4] = sub_188344554();
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v13;
  a3[1] = v8;
  a3[2] = v14;
  return result;
}

void sub_188339F58()
{
}

void sub_188339FB0()
{
}

uint64_t sub_18833A008()
{
  return sub_188338A08();
}

uint64_t sub_18833A01C(char a1)
{
  return sub_188338A70(a1);
}

uint64_t sub_18833A030()
{
  return sub_188338AE4();
}

uint64_t sub_18833A044(double a1)
{
  return sub_188338B74(a1);
}

uint64_t sub_18833A058(float a1)
{
  return sub_188338BE8(a1);
}

uint64_t sub_18833A06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188338F30(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1895FDCE8]);
}

uint64_t sub_18833A088(char a1)
{
  return sub_188338C60(a1);
}

uint64_t sub_18833A09C(__int16 a1)
{
  return sub_188338CD8(a1);
}

uint64_t sub_18833A0B0(int a1)
{
  return sub_188338D50(a1);
}

uint64_t sub_18833A0C4()
{
  return sub_18838719C();
}

uint64_t sub_18833A0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188338F30(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1895FDD20]);
}

uint64_t sub_18833A0F4(unsigned __int8 a1)
{
  return sub_188338DC8(a1);
}

uint64_t sub_18833A108(unsigned __int16 a1)
{
  return sub_188338E40(a1);
}

uint64_t sub_18833A11C(unsigned int a1)
{
  return sub_188338EB8(a1);
}

uint64_t sub_18833A130()
{
  return sub_1883871A8();
}

uint64_t sub_18833A144(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  return sub_188338FA8(a1, a2, a5, a3, a4);
}

uint64_t sub_18833A168()
{
  return sub_188387190();
}

uint64_t sub_18833A190()
{
  return sub_188387124();
}

uint64_t sub_18833A1A4()
{
  return sub_188387118();
}

uint64_t sub_18833A1B8()
{
  return sub_188387130();
}

uint64_t sub_18833A1D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A334(a1, a2, a3, a4, MEMORY[0x18961A238]);
}

uint64_t sub_18833A1EC()
{
  return sub_18838713C();
}

uint64_t sub_18833A204(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A2BC(a1, a2, a3, a4, MEMORY[0x18961A258]);
}

uint64_t sub_18833A220(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A2F8(a1, a2, a3, a4, MEMORY[0x18961A260]);
}

uint64_t sub_18833A23C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A334(a1, a2, a3, a4, MEMORY[0x18961A268]);
}

uint64_t sub_18833A258()
{
  return sub_188387160();
}

uint64_t sub_18833A270()
{
  return sub_18838716C();
}

uint64_t sub_18833A288()
{
  return sub_188387148();
}

uint64_t sub_18833A2A0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A2BC(a1, a2, a3, a4, MEMORY[0x18961A278]);
}

uint64_t sub_18833A2BC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_18833A2DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A2F8(a1, a2, a3, a4, MEMORY[0x18961A288]);
}

uint64_t sub_18833A2F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_18833A318(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18833A334(a1, a2, a3, a4, MEMORY[0x18961A290]);
}

uint64_t sub_18833A334( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_18833A35C()
{
  return sub_188387178();
}

uint64_t sub_18833A374()
{
  return sub_188387184();
}

uint64_t sub_18833A38C()
{
  return sub_188387154();
}

uint64_t sub_18833A3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188339C44(a1, a2, a5, a3, a4);
}

uint64_t sub_18833A3D4()
{
  uint64_t v1 = sub_188386C44();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
  *(void *)(v3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D28);
  *(_BYTE *)uint64_t v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  size_t count = xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v5 = swift_allocObject();
  *(void *)(inited + 32) = v5;
  *(void *)(v5 + 16) = 0x207865646E49LL;
  *(void *)(v5 + 24) = 0xE600000000000000LL;
  *(void *)(v5 + 32) = count;
  *(_BYTE *)(v5 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  sub_188386C14();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v3,  *MEMORY[0x1896193B8],  v1);
  return swift_willThrow();
}

uint64_t sub_18833A5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v81[1] = a3;
  uint64_t v90 = a1;
  uint64_t v96 = *MEMORY[0x1895F89C8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v4);
  uint64_t v6 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = sub_18838662C();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x1895F8860](v86);
  v82 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950);
  uint64_t v9 = MEMORY[0x1895F8860](v8);
  uint64_t v11 = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = MEMORY[0x1895F8860](v9);
  v83 = (void *)((char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = MEMORY[0x1895F8860](v13);
  *(void *)&__int128 v84 = (char *)v81 - v16;
  uint64_t v17 = MEMORY[0x1895F8860](v15);
  uint64_t v19 = (char *)v81 - v18;
  MEMORY[0x1895F8860](v17);
  uint64_t v21 = (char *)v81 - v20;
  uint64_t v22 = sub_1883865D8();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1895F8860](v22);
  uint64_t v25 = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void (**)(void, uint64_t, uint64_t))(v12 + 16);
  uint64_t v27 = a2;
  uint64_t v28 = v90;
  v87 = v26;
  v26(v21, v90, v27);
  int v29 = swift_dynamicCast();
  uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  if (v29)
  {
    v30(v11, 0LL, 1LL, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1LL, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v11, v22);
      int v31 = (void *)v89[1];
      swift_unknownObjectRetain();
      int64_t v32 = sub_188352560();
      xpc_object_t v33 = xpc_date_create(v32);
      xpc_array_append_value(v31, v33);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    }
  }

  else
  {
    v30(v11, 1LL, 1LL, v22);
  }

  sub_188344660((uint64_t)v11, (uint64_t *)&unk_18C4E7950);
  uint64_t v35 = v87;
  v87(v19, v28, v27);
  uint64_t v36 = v86;
  int v37 = swift_dynamicCast();
  uint64_t v38 = v85;
  uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56);
  if (v37)
  {
    v39(v6, 0LL, 1LL, v36);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v6, 1LL, v36) != 1)
    {
      v40 = v82;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v82, v6, v36);
      *(void *)uuid = sub_188386614();
      LOWORD(v93) = v41;
      BYTE2(v93) = v42;
      BYTE3(v93) = v43;
      BYTE4(v93) = v44;
      BYTE5(v93) = v45;
      BYTE6(v93) = v46;
      HIBYTE(v93) = v47;
      char v48 = (void *)v89[1];
      swift_unknownObjectRetain();
      xpc_object_t v49 = xpc_uuid_create(uuid);
      xpc_array_append_value(v48, v49);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v36);
    }
  }

  else
  {
    v39(v6, 1LL, 1LL, v36);
  }

  sub_188344660((uint64_t)v6, &qword_18C4E7960);
  v35(v84, v28, v27);
  if (swift_dynamicCast()) {
    __asm { BR              X10 }
  }

  v35(v83, v28, v27);
  if (swift_dynamicCast())
  {
    xpc_array_append_value((xpc_object_t)v89[1], *(xpc_object_t *)uuid);
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v86 = *(void *)(*v89 + 24);
    uint64_t v50 = v89[2];
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    __int128 v84 = xmmword_1883883A0;
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v52 = (void *)swift_unknownObjectRetain();
    size_t count = xpc_array_get_count(v52);
    *(void *)uuid = 0x207865646E49LL;
    unint64_t v93 = 0xE600000000000000LL;
    size_t v91 = count;
    sub_188386E24();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    uint64_t v54 = v27;
    xpc_object_t v55 = *(xpc_object_t *)uuid;
    unint64_t v56 = v93;
    *(void *)(inited + 56) = &type metadata for CodableIndexKey;
    unint64_t v57 = sub_188344CD0();
    *(void *)(inited + 64) = v57;
    uint64_t v58 = swift_allocObject();
    *(void *)(inited + 32) = v58;
    *(void *)(v58 + 16) = v55;
    *(void *)(v58 + 24) = v56;
    *(void *)(v58 + 32) = count;
    *(_BYTE *)(v58 + 40) = 0;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    *(void *)uuid = v50;
    sub_1883860B4(inited);
    xpc_object_t v59 = *(xpc_object_t *)uuid;
    unint64_t v60 = sub_188338158(MEMORY[0x18961AFE8]);
    uint64_t v61 = type metadata accessor for _XPCObjectEncoder();
    v62 = (void *)swift_allocObject();
    uint64_t v63 = v86;
    v62[2] = 0LL;
    v62[3] = v63;
    uint64_t v64 = v90;
    v62[4] = v59;
    v62[5] = v60;
    uint64_t v65 = v54;
    uint64_t v94 = v61;
    uint64_t v95 = sub_188343FE8(&qword_18C4E7D70, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_188388A28);
    *(void *)uuid = v62;
    swift_retain();
    uint64_t v66 = v88;
    sub_1883867D0();
    if (v66)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    }

    else
    {
      unint64_t v67 = v57;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
      uint64_t v68 = (void *)v62[2];
      if (v68)
      {
        xpc_array_append_value((xpc_object_t)v89[1], v68);
      }

      else
      {
        uint64_t v86 = sub_188386C44();
        uint64_t v88 = swift_allocError();
        v70 = v69;
        uint64_t v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0) + 48);
        v83 = v70;
        v82 = (char *)v70 + v71;
        v70[3] = v65;
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v70);
        v87(boxed_opaque_existential_0Tm, v64, v65);
        v73 = v89;
        uint64_t v74 = v89[2];
        uint64_t v75 = swift_initStackObject();
        *(_OWORD *)(v75 + 16) = v84;
        uint64_t v90 = *v73;
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v76 = (void *)swift_unknownObjectRetain();
        size_t v77 = xpc_array_get_count(v76);
        *(void *)uuid = 0x207865646E49LL;
        unint64_t v93 = 0xE600000000000000LL;
        size_t v91 = v77;
        sub_188386E24();
        sub_1883868E4();
        swift_bridgeObjectRelease();
        uint64_t v89 = (uint64_t *)v65;
        xpc_object_t v78 = *(xpc_object_t *)uuid;
        unint64_t v79 = v93;
        *(void *)(v75 + 56) = &type metadata for CodableIndexKey;
        *(void *)(v75 + 64) = v67;
        uint64_t v80 = swift_allocObject();
        *(void *)(v75 + 32) = v80;
        *(void *)(v80 + 16) = v78;
        *(void *)(v80 + 24) = v79;
        *(void *)(v80 + 32) = v77;
        *(_BYTE *)(v80 + 40) = 0;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        *(void *)uuid = v74;
        sub_1883860B4(v75);
        *(void *)uuid = 0LL;
        unint64_t v93 = 0xE000000000000000LL;
        sub_188386BB4();
        swift_bridgeObjectRelease();
        *(void *)uuid = 0xD00000000000001FLL;
        unint64_t v93 = 0x800000018838B250LL;
        sub_1883872E0();
        sub_1883868E4();
        swift_bridgeObjectRelease();
        sub_188386C14();
        (*(void (**)(uint64_t *, void))(*(void *)(v86 - 8) + 104LL))( v83,  *MEMORY[0x1896193B8]);
        swift_willThrow();
      }

      return swift_release();
    }
  }

uint64_t sub_18833B0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v7 = *(void **)(v3 + 8);
  xpc_array_append_value(v7, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  swift_unknownObjectRetain();
  swift_retain();
  size_t count = xpc_array_get_count(v7);
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v9 = swift_allocObject();
  *(void *)(inited + 32) = v9;
  *(void *)(v9 + 16) = 0x207865646E49LL;
  *(void *)(v9 + 24) = 0xE600000000000000LL;
  *(void *)(v9 + 32) = count;
  *(_BYTE *)(v9 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  uint64_t v11 = type metadata accessor for XPCObjectKeyedEncodingContainer(0LL, a2, a3, v10);
  MEMORY[0x1895C375C](&unk_1883886A8, v11);
  sub_188386E18();
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B2C0@<X0>(void *a1@<X8>)
{
  xpc_object_t v3 = xpc_array_create(0LL, 0LL);
  uint64_t v4 = (void *)v1[1];
  xpc_array_append_value(v4, v3);
  uint64_t v5 = *v1;
  uint64_t v6 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  swift_unknownObjectRetain();
  swift_retain();
  size_t count = xpc_array_get_count(v4);
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v8 = swift_allocObject();
  *(void *)(inited + 32) = v8;
  *(void *)(v8 + 16) = 0x207865646E49LL;
  *(void *)(v8 + 24) = 0xE600000000000000LL;
  *(void *)(v8 + 32) = count;
  *(_BYTE *)(v8 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a1[4] = sub_188344554();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v5;
  a1[1] = v3;
  a1[2] = v6;
  return result;
}

size_t sub_18833B450()
{
  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_18833B458()
{
  return sub_18833A3D4();
}

uint64_t sub_18833B46C(char a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_BOOL_create(a1 & 1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B4B8()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = sub_1883868A8();
  xpc_object_t v3 = xpc_string_create((const char *)(v2 + 32));
  swift_release();
  xpc_array_append_value(v1, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B514(double a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B55C(float a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833B7BC(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1895FDEB8]);
}

uint64_t sub_18833B5C4(char a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B610(__int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B65C(int a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B6A8()
{
  return sub_188386F98();
}

uint64_t sub_18833B6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833B7BC(a1, a2, a3, (uint64_t (*)(void))MEMORY[0x1895FE0C8]);
}

uint64_t sub_18833B6D8(unsigned __int8 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B724(unsigned __int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B770(uint64_t value)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(value);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)(v4 + 8);
  uint64_t v6 = (void *)a4();
  xpc_array_append_value(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_18833B804()
{
  return sub_188386FA4();
}

uint64_t sub_18833B818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833A5B0(a1, a2, a3);
}

uint64_t sub_18833B82C()
{
  return sub_188386EC0();
}

uint64_t sub_18833B854()
{
  return sub_188386EE4();
}

uint64_t sub_18833B87C()
{
  return sub_188386ED8();
}

uint64_t sub_18833B8A4()
{
  return sub_188386EF0();
}

uint64_t sub_18833B8CC()
{
  return sub_188386EFC();
}

uint64_t sub_18833B8F4()
{
  return sub_188386F08();
}

uint64_t sub_18833B91C()
{
  return sub_188386F20();
}

uint64_t sub_18833B944()
{
  return sub_188386F2C();
}

uint64_t sub_18833B96C()
{
  return sub_188386F38();
}

uint64_t sub_18833B994()
{
  return sub_188386F44();
}

uint64_t sub_18833B9BC()
{
  return sub_188386F5C();
}

uint64_t sub_18833B9E4()
{
  return sub_188386F14();
}

uint64_t sub_18833BA0C()
{
  return sub_188386F50();
}

uint64_t sub_18833BA34()
{
  return sub_188386F68();
}

uint64_t sub_18833BA5C()
{
  return sub_188386F74();
}

uint64_t sub_18833BA84()
{
  return sub_188386F80();
}

uint64_t sub_18833BAAC()
{
  return sub_188386F8C();
}

uint64_t sub_18833BAD4()
{
  return sub_188386ECC();
}

void sub_18833BB0C()
{
}

uint64_t sub_18833BB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = a1;
  v65[1] = a3;
  uint64_t v80 = *MEMORY[0x1895F89C8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v5);
  v69 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18838662C();
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  MEMORY[0x1895F8860](v7);
  uint64_t v66 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950);
  uint64_t v10 = MEMORY[0x1895F8860](v9);
  uint64_t v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a2 - 8);
  uint64_t v14 = MEMORY[0x1895F8860](v10);
  unint64_t v67 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  uint64_t v68 = (char *)v65 - v17;
  uint64_t v18 = MEMORY[0x1895F8860](v16);
  uint64_t v20 = (char *)v65 - v19;
  MEMORY[0x1895F8860](v18);
  uint64_t v22 = (char *)v65 - v21;
  uint64_t v23 = sub_1883865D8();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8860](v23);
  uint64_t v26 = (char *)v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v73 = v3;
  if (*(void *)(*v3 + 16LL))
  {
    __break(1u);
    JUMPOUT(0x18833C394LL);
  }

  uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v72(v22, v75, a2);
  int v27 = swift_dynamicCast();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v29 = a2;
  if (v27)
  {
    v28(v12, 0LL, 1LL, v23);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1LL, v23);
    int v31 = v73;
    if (v30 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v12, v23);
      uint64_t v32 = *v31;
      int64_t v33 = sub_188352560();
      xpc_object_t v34 = xpc_date_create(v33);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
LABEL_9:
      *(void *)(v32 + 16) = v34;
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    v28(v12, 1LL, 1LL, v23);
    int v31 = v73;
  }

  sub_188344660((uint64_t)v12, (uint64_t *)&unk_18C4E7950);
  uint64_t v35 = v75;
  uint64_t v36 = v72;
  v72(v20, v75, a2);
  uint64_t v37 = (uint64_t)v69;
  uint64_t v38 = v71;
  int v39 = swift_dynamicCast();
  uint64_t v40 = v70;
  __int16 v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
  if (v39)
  {
    v41(v37, 0LL, 1LL, v38);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1LL, v38) != 1)
    {
      char v42 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v66, v37, v38);
      uint64_t v32 = *v31;
      *(void *)uuid = sub_188386614();
      LOWORD(v77) = v43;
      BYTE2(v77) = v44;
      BYTE3(v77) = v45;
      BYTE4(v77) = v46;
      BYTE5(v77) = v47;
      BYTE6(v77) = v48;
      HIBYTE(v77) = v49;
      xpc_object_t v34 = xpc_uuid_create(uuid);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
      goto LABEL_9;
    }
  }

  else
  {
    v41(v37, 1LL, 1LL, v38);
  }

  sub_188344660(v37, &qword_18C4E7960);
  v36(v68, v35, a2);
  if (swift_dynamicCast()) {
    __asm { BR              X10 }
  }

  v36(v67, v35, a2);
  int v50 = swift_dynamicCast();
  uint64_t v51 = v74;
  if (v50)
  {
    *(void *)(*v31 + 16LL) = *(void *)uuid;
  }

  else
  {
    uint64_t v52 = v31[1];
    uint64_t v53 = *(void *)(*v31 + 24LL);
    uint64_t v54 = *(void *)(*v31 + 40LL);
    uint64_t v55 = type metadata accessor for _XPCObjectEncoder();
    uint64_t v56 = v29;
    unint64_t v57 = (void *)swift_allocObject();
    v57[2] = 0LL;
    v57[3] = v53;
    v57[4] = v52;
    v57[5] = v54;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v78 = v55;
    uint64_t v58 = v75;
    uint64_t v79 = sub_188343FE8(&qword_18C4E7D70, type metadata accessor for _XPCObjectEncoder, (uint64_t)&unk_188388A28);
    *(void *)uuid = v57;
    swift_retain();
    sub_1883867D0();
    if (v51)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
    uint64_t v60 = v57[2];
    if (!v60)
    {
      uint64_t v61 = sub_188386C44();
      swift_allocError();
      uint64_t v63 = v62;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
      v63[3] = v56;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v63);
      v72((char *)boxed_opaque_existential_0Tm, v58, v56);
      *(void *)uuid = 0LL;
      unint64_t v77 = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      *(void *)uuid = 0xD00000000000001FLL;
      unint64_t v77 = 0x800000018838B250LL;
      sub_1883872E0();
      sub_1883868E4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v61 - 8) + 104LL))( v63,  *MEMORY[0x1896193B8],  v61);
      swift_willThrow();
      return swift_release();
    }

    swift_unknownObjectRetain();
    swift_release();
    *(void *)(*v31 + 16LL) = v60;
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_18833C3B8()
{
  return swift_bridgeObjectRetain();
}

void sub_18833C3C0()
{
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 16) = xpc_null_create();
    swift_unknownObjectRelease();
  }

uint64_t sub_18833C404(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_BOOL_create(result & 1);
    return swift_unknownObjectRelease();
  }

  return result;
}

void sub_18833C44C()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 16))
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = sub_1883868A8();
    xpc_object_t v3 = xpc_string_create((const char *)(v2 + 32));
    swift_release();
    *(void *)(v1 + 16) = v3;
    swift_unknownObjectRelease();
  }

void sub_18833C4AC(double a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }

void sub_18833C4F0(float a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }

void sub_18833C538(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_18833C554(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((char)result);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833C59C(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((__int16)result);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833C5E4(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((int)result);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833C62C()
{
  return sub_188387010();
}

void sub_18833C640(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_18833C65C(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create(result);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833C6A4(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create((unsigned __int16)result);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833C6EC(uint64_t value)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create(value);
    return swift_unknownObjectRelease();
  }

  return value;
}

void sub_18833C734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v5 + 16) = a4();
    swift_unknownObjectRelease();
  }

uint64_t sub_18833C778()
{
  return sub_18838701C();
}

uint64_t sub_18833C78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833BB64(a1, a2, a3);
}

uint64_t XPCObjectDecoder.underlyingConnection.getter()
{
  return swift_retain();
}

uint64_t XPCObjectDecoder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t XPCObjectDecoder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0LL;
  return result;
}

uint64_t XPCObjectDecoder.__allocating_init(underlyingConnection:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t XPCObjectDecoder.init(underlyingConnection:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfC_0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  objc_opt_self();
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 72) = 0LL;
    *(void *)(v5 + 48) = 0LL;
    *(void *)(v5 + 56) = 0LL;
    *(_BYTE *)(v5 + 64) = 0;
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    *(void *)(v5 + 24) = v4;
  }

  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    *(void *)(v5 + 24) = a1;
  }

  *(void *)(v5 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v2 + 16) = v5;
  return v2;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfc_0(uint64_t a1)
{
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 72) = 0LL;
    *(void *)(v5 + 48) = 0LL;
    *(void *)(v5 + 56) = 0LL;
    *(_BYTE *)(v5 + 64) = 0;
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    *(void *)(v5 + 24) = v4;
  }

  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    *(void *)(v5 + 24) = a1;
  }

  *(void *)(v5 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v1 + 16) = v5;
  return v1;
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v5 = MEMORY[0x18961AFE8];
  unint64_t v6 = sub_188338158(MEMORY[0x18961AFE8]);
  type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a2;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  sub_188343FE8( (unint64_t *)&unk_18C4E7CA0,  type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
  return sub_188386A28();
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_188344024);
}

uint64_t XPCObjectDecoder.deinit()
{
  return v0;
}

uint64_t _s7Mercury16XPCObjectEncoderCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_18833CAD8(uint64_t a1, uint64_t *a2)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, *a2);
}

uint64_t sub_18833CAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](*(void *)(v3 + 16)) == XPCTypeDictionary)
  {
    uint64_t v11 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a2, a3, v6);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x1895C375C](&unk_188388B14, v11);
    return sub_188386DA0();
  }

  else
  {
    uint64_t v7 = sub_188386C2C();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
    *uint64_t v9 = a2;
    swift_bridgeObjectRetain();
    sub_188386C14();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619358],  v7);
    return swift_willThrow();
  }

uint64_t sub_18833CC58@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (MEMORY[0x1895C3C6C](v3) == XPCTypeArray)
  {
    uint64_t v8 = *(void *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1883445DC();
    uint64_t v9 = (void *)swift_allocObject();
    *a1 = v9;
    v9[2] = v1;
    v9[3] = v3;
    v9[4] = v8;
    v9[5] = 0LL;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v4 = sub_188386C2C();
    swift_allocError();
    uint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
    *uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707D28);
    swift_bridgeObjectRetain();
    sub_188386C14();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104LL))( v6,  *MEMORY[0x189619358],  v4);
    return swift_willThrow();
  }

uint64_t sub_18833CD9C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18833CDA8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18833CDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833CAFC(a1, a2, a3);
}

uint64_t sub_18833CDD4@<X0>(void *a1@<X8>)
{
  return sub_18833CC58(a1);
}

uint64_t sub_18833CDF4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  a1[4] = sub_188344598();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18833CE68()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18833CE94@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  return result;
}

uint64_t sub_18833CEC4()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18833CED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0x207865646E49LL;
  *(void *)(a2 + 8) = 0xE600000000000000LL;
  *(void *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_18833CF54()
{
  return sub_1883872C8();
}

uint64_t sub_18833CF7C()
{
  return sub_1883872D4();
}

uint64_t sub_18833CFA4(uint64_t a1, void *a2)
{
  uint64_t v9 = MEMORY[0x18961AFE8];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &v9;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1883455C4;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_188345708;
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x1895F87A0];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_188338060;
  aBlock[3] = &block_descriptor_79;
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a2, v5);
  _Block_release(v5);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    aBlock[0] = v9;
    MEMORY[0x1895F8860](v9);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7810);
    sub_18834563C();
    uint64_t v7 = sub_18838695C();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }

  return result;
}

uint64_t sub_18833D168(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t result = sub_188386824();
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t v8 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_188371260(0LL, v8[2] + 1LL, 1, v8);
      *a3 = v8;
    }

    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_188371260((void *)(v10 > 1), v11 + 1, 1, v8);
      *a3 = v8;
    }

    v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    v12[4] = v6;
    v12[5] = v7;
    return 1LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

xpc_object_t sub_18833D224( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_object_t v16 = xpc_dictionary_get_value(a5, (const char *)(v15 + 32));
  swift_release();
  if (v16)
  {
    if (MEMORY[0x1895C3C6C](v16) != a2)
    {
      v27[3] = swift_getObjectType();
      v27[0] = v16;
      sub_188386C2C();
      swift_allocError();
      uint64_t v18 = v17;
      uint64_t v20 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a7, a9, v19);
      swift_unknownObjectRetain();
      MEMORY[0x1895C375C](&unk_188388B14, v20);
      static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)( a1,  (uint64_t)v27,  a3,  0LL,  v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  else
  {
    v27[0] = a4;
    v27[1] = a5;
    v27[2] = a6;
    sub_188386C2C();
    swift_allocError();
    uint64_t v22 = v21;
    uint64_t v24 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a7, a9, v23);
    MEMORY[0x1895C375C](&unk_188388B14, v24);
    static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a3, 0LL, 0LL, v22);
    swift_willThrow();
  }

  return v16;
}

xpc_object_t sub_18833D408@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11, uint64_t (*a12)(void), void (*a13)(uint64_t))
{
  char v46 = a4;
  uint64_t v52 = a5;
  uint64_t v41 = a9;
  uint64_t v19 = sub_188386B24();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8860](v19);
  __int16 v43 = (char *)&v36 - v21;
  uint64_t v22 = *a11;
  uint64_t v44 = a1;
  uint64_t v23 = a3;
  uint64_t v24 = a2;
  uint64_t v25 = a2;
  uint64_t v26 = v23;
  uint64_t v27 = v45;
  uint64_t v42 = a7;
  xpc_object_t result = sub_18833D224(a1, v22, v25, v23, v46, v52, a6, a7, a8);
  if (!v27)
  {
    uint64_t v37 = v20;
    uint64_t v38 = v19;
    uint64_t v39 = a6;
    uint64_t v40 = a8;
    uint64_t v45 = v24;
    uint64_t v29 = a12();
    uint64_t v30 = swift_unknownObjectRelease();
    uint64_t v49 = v29;
    a13(v30);
    int v31 = v43;
    uint64_t v32 = v42;
    sub_188386A34();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v38);
      uint64_t v49 = v26;
      int v50 = v46;
      uint64_t v51 = v52;
      unint64_t v47 = 0LL;
      unint64_t v48 = 0xE000000000000000LL;
      sub_188386BB4();
      swift_bridgeObjectRelease();
      unint64_t v47 = 0xD000000000000015LL;
      unint64_t v48 = 0x800000018838B4A0LL;
      sub_1883872E0();
      sub_1883868E4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      uint64_t v35 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, v39, v40, v34);
      MEMORY[0x1895C375C](&unk_188388B14, v35);
      sub_188386C08();
      swift_bridgeObjectRelease();
      return (xpc_object_t)swift_willThrow();
    }

    else
    {
      return (xpc_object_t)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v41, v31, v32);
    }
  }

  return result;
}

BOOL sub_18833D684(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_object_t v5 = xpc_dictionary_get_value(a3, (const char *)(v4 + 32));
  swift_release();
  if (v5) {
    swift_unknownObjectRelease();
  }
  return v5 != 0LL;
}

BOOL sub_18833D700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_188386C2C();
  uint64_t v23 = *(void *)(v13 - 8);
  MEMORY[0x1895F8860](v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D28);
  sub_18833D224(v16, XPCTypeNull, a1, a2, a3, a4, a5, v16, a6);
  if (!v6)
  {
    swift_unknownObjectRelease();
    return v6 == 0LL;
  }

  id v24 = v6;
  id v17 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v6 == 0LL;
  }

  uint64_t v18 = v23;
  if ((*(unsigned int (**)(char *, uint64_t))(v23 + 88))(v15, v13) != *MEMORY[0x189619358])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v13);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v18 + 96))(v15, v13);
  uint64_t v19 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20) + 48)];
  uint64_t v20 = sub_188386C20();
  (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v19, v20);

  return v6 == 0LL;
}

BOOL sub_18833D8C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t v8 = sub_18833D224(MEMORY[0x1896184C8], XPCTypeBool, a1, a2, a3, a4, a5, MEMORY[0x1896184C8], a6);
  if (!v6)
  {
    BOOL value = xpc_BOOL_get_value(v8);
    swift_unknownObjectRelease();
  }

  return value;
}

uint64_t sub_18833D944(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t v8 = sub_18833D224(MEMORY[0x189617FA8], XPCTypeString, a1, a2, a3, a4, a5, MEMORY[0x189617FA8], a6);
  if (!v6)
  {
    uint64_t v9 = v8;
    xpc_string_get_string_ptr(v8);
    xpc_string_get_length(v9);
    uint64_t v7 = sub_1883868C0();
    swift_unknownObjectRelease();
  }

  return v7;
}

xpc_object_t sub_18833D9FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t result = sub_18833D224(MEMORY[0x189618560], XPCTypeDouble, a1, a2, a3, a4, a5, MEMORY[0x189618560], a6);
  if (!v6)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }

  return result;
}

void *sub_18833DA80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t result = sub_18833D224(MEMORY[0x189618560], XPCTypeDouble, a1, a2, a3, a4, a5, MEMORY[0x189618560], a6);
  if (!v6)
  {
    double value = xpc_double_get_value(result);
    xpc_object_t result = (void *)swift_unknownObjectRelease();
    float v11 = value;
    if (value != v11)
    {
      sub_188386C2C();
      swift_allocError();
      uint64_t v13 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a5, a6, v12);
      MEMORY[0x1895C375C](&unk_188388B14, v13);
      sub_188386C08();
      return (void *)swift_willThrow();
    }
  }

  return result;
}

xpc_object_t sub_18833DBCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_18834552C();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A350],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A350],  a6,  (uint64_t)&v15,  v13,  &XPCTypeInt64,  (uint64_t (*)(void))MEMORY[0x1895FDEC0],  (void (*)(uint64_t))sub_188345460);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833DC8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1883454E8();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A408],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A408],  a6,  (uint64_t)&v15,  v13,  &XPCTypeInt64,  (uint64_t (*)(void))MEMORY[0x1895FDEC0],  (void (*)(uint64_t))sub_188345460);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833DD4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1883454A4();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A458],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A458],  a6,  (uint64_t)&v15,  v13,  &XPCTypeInt64,  (uint64_t (*)(void))MEMORY[0x1895FDEC0],  (void (*)(uint64_t))sub_188345460);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833DE0C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v16 = a7();
  xpc_object_t result = sub_18833D408( a8,  a1,  a2,  a3,  a4,  a5,  a8,  a6,  (uint64_t)&v18,  v16,  &XPCTypeInt64,  (uint64_t (*)(void))MEMORY[0x1895FDEC0],  (void (*)(uint64_t))sub_188345460);
  if (!v8) {
    return (xpc_object_t)v18;
  }
  return result;
}

xpc_object_t sub_18833DECC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_188345394();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A610],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A610],  a6,  (uint64_t)&v15,  v13,  &XPCTypeUInt64,  (uint64_t (*)(void))MEMORY[0x1895FE0D8],  (void (*)(uint64_t))sub_1883452C8);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833DF8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_188345350();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A800],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A800],  a6,  (uint64_t)&v15,  v13,  &XPCTypeUInt64,  (uint64_t (*)(void))MEMORY[0x1895FE0D8],  (void (*)(uint64_t))sub_1883452C8);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833E04C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_18834530C();
  xpc_object_t result = sub_18833D408( MEMORY[0x18961A860],  a1,  a2,  a3,  a4,  a5,  MEMORY[0x18961A860],  a6,  (uint64_t)&v15,  v13,  &XPCTypeUInt64,  (uint64_t (*)(void))MEMORY[0x1895FE0D8],  (void (*)(uint64_t))sub_1883452C8);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_18833E10C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v16 = a7();
  xpc_object_t result = sub_18833D408( a8,  a1,  a2,  a3,  a4,  a5,  a8,  a6,  (uint64_t)&v18,  v16,  &XPCTypeUInt64,  (uint64_t (*)(void))MEMORY[0x1895FE0D8],  (void (*)(uint64_t))sub_1883452C8);
  if (!v8) {
    return (xpc_object_t)v18;
  }
  return result;
}

void *sub_18833E1CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  v52[1] = a1;
  v52[2] = a9;
  uint64_t v60 = *MEMORY[0x1895F89C8];
  uint64_t v14 = sub_18838662C();
  MEMORY[0x1895F8860](v14);
  uint64_t v16 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1883865D8();
  MEMORY[0x1895F8860](v17);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v18 = v53;
    xpc_object_t result = sub_18833D224(v17, XPCTypeDate, a2, a3, a4, v54, v55, v17, a8);
    if (v18) {
      return result;
    }
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1883865C0();
    return (void *)swift_dynamicCast();
  }

  v52[0] = v16;
  uint64_t v20 = a4;
  uint64_t v22 = v54;
  uint64_t v21 = v55;
  if (swift_dynamicCastMetatype())
  {
    uint64_t v23 = v53;
    xpc_object_t result = sub_18833D224(v14, XPCTypeUUID, a2, a3, v20, v22, v21, v14, a8);
    if (v23) {
      return result;
    }
    bytes = xpc_uuid_get_bytes(result);
    xpc_object_t result = (void *)swift_unknownObjectRelease();
    if (bytes)
    {
      sub_188386608();
      return (void *)swift_dynamicCast();
    }

    __break(1u);
    goto LABEL_25;
  }

  if (swift_dynamicCastMetatype())
  {
    uint64_t v25 = v53;
    xpc_object_t result = sub_18833D224(MEMORY[0x189606D70], XPCTypeData, a2, a3, v20, v22, v21, MEMORY[0x189606D70], a8);
    if (v25) {
      return result;
    }
    uint64_t v26 = result;
    if ((uint64_t)xpc_data_get_length(result) < 1)
    {
      swift_unknownObjectRelease();
      __int128 v56 = xmmword_1883883B0;
      return (void *)swift_dynamicCast();
    }

    xpc_object_t result = (void *)xpc_data_get_bytes_ptr(v26);
    if (result)
    {
      uint64_t v27 = result;
      size_t length = xpc_data_get_length(v26);
      uint64_t v29 = sub_18835DBB0(v27, length);
      uint64_t v31 = v30;
      swift_unknownObjectRelease();
      *(void *)&__int128 v56 = v29;
      *((void *)&v56 + 1) = v31;
      return (void *)swift_dynamicCast();
    }

LABEL_25:
    __break(1u);
    return result;
  }

  v52[0] = a7;
  uint64_t v32 = swift_dynamicCastMetatype();
  uint64_t v33 = a2;
  uint64_t v34 = v21;
  sub_1883872B0();
  uint64_t v35 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_object_t v36 = xpc_dictionary_get_value(v20, (const char *)(v35 + 32));
  swift_release();
  if (v32)
  {
    if (v36)
    {
      *(void *)&__int128 v56 = v36;
      return (void *)swift_dynamicCast();
    }

    *(void *)&__int128 v56 = a3;
    *((void *)&v56 + 1) = v20;
    uint64_t v57 = v22;
  }

  else
  {
    xpc_object_t v37 = v36;
    uint64_t v38 = a3;
    if (v37)
    {
      xpc_object_t v39 = v37;
      uint64_t v40 = *(void *)(v38 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1883883A0;
      *(void *)(inited + 56) = v34;
      *(void *)(inited + 64) = a8;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16LL))( boxed_opaque_existential_0Tm,  v33,  v34);
      *(void *)&__int128 v56 = v22;
      swift_retain();
      xpc_object_t v43 = v39;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1883860B4(inited);
      uint64_t v44 = v56;
      uint64_t v45 = *(void *)(v38 + 40);
      uint64_t v46 = type metadata accessor for _XPCObjectDecoder();
      unint64_t v47 = (void *)swift_allocObject();
      v47[2] = v43;
      v47[3] = v40;
      v47[4] = v44;
      v47[5] = v45;
      uint64_t v58 = v46;
      uint64_t v59 = sub_188343FE8( (unint64_t *)&unk_18C4E7CA0,  type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
      *(void *)&__int128 v56 = v47;
      swift_bridgeObjectRetain();
      sub_188386A28();
      return (void *)swift_unknownObjectRelease();
    }

    *(void *)&__int128 v56 = a3;
    *((void *)&v56 + 1) = v20;
    uint64_t v57 = v22;
  }

  sub_188386C2C();
  swift_allocError();
  uint64_t v49 = v48;
  uint64_t v51 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, v34, a8, v50);
  MEMORY[0x1895C375C](&unk_188388B14, v51);
  static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(v33, 0LL, 0LL, v49);
  return (void *)swift_willThrow();
}

  sub_1883871CC();
  __break(1u);
LABEL_26:
  sub_188386BB4();
  sub_1883868E4();
  sub_188386C8C();
  sub_1883868E4();
  sub_188386CB0();
  __break(1u);
}

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_188352244(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_188344D58(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    xpc_object_t result = (void *)swift_bridgeObjectRetain();
  }

  id v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    xpc_object_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v21 - 1) & v21;
    uint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    uint64_t v19 = 8 * v17;
    sub_188344D68(*(void *)(v6 + 56) + v19, (uint64_t)v26, &qword_18C707DE0);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v18, v5, v2);
    xpc_object_t result = (void *)sub_1883493F8((uint64_t)v26, *(void *)(v8 + 56) + v19, &qword_18C707DE0);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_26:
    xpc_object_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_28;
  }

  uint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    uint64_t v12 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v26 + 72) * v18;
    sub_1883731EC(*(void *)(v5 + 48) + v19, (uint64_t)v4);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    sub_188344D14((uint64_t)v4, *(void *)(v7 + 48) + v19);
    *(void *)(*(void *)(v7 + 56) + v20) = v21;
    xpc_object_t result = (void *)swift_retain();
  }

  id v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    xpc_object_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
    uint64_t v12 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v9 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_188349220(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    xpc_object_t result = (void *)sub_188352384(v22, *(void *)(v4 + 56) + v18);
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v19 = *(void *)(v17 + 16);
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t v20 = 16 * v15;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    uint64_t v22 = *(_OWORD *)(*(void *)(v2 + 56) + v20);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v17;
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v20) = v22;
    swift_bridgeObjectRetain();
    xpc_object_t result = (void *)swift_retain();
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  id v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

xpc_object_t sub_18833E718( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xpc_object_t result = sub_18833D224(a7, XPCTypeDictionary, a2, a3, a4, a5, a6, a7, a8);
  if (!v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a8;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))( boxed_opaque_existential_0Tm,  a2,  a6);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1883860B4(inited);
    uint64_t v18 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a7, a9, v17);
    MEMORY[0x1895C375C](&unk_188388B14, v18);
    sub_188386DA0();
    return (xpc_object_t)swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_18833E8A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707D28);
  uint64_t result = (uint64_t)sub_18833D224(v15, XPCTypeArray, a1, a2, a3, a4, a5, v15, a6);
  if (!v7)
  {
    uint64_t v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(void *)(inited + 56) = a5;
    *(void *)(inited + 64) = a6;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_0Tm,  a1,  a5);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1883860B4(inited);
    uint64_t v20 = a4;
    a7[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a7[4] = sub_1883445DC();
    uint64_t v21 = (void *)swift_allocObject();
    *a7 = v21;
    uint64_t result = swift_unknownObjectRelease();
    v21[2] = a2;
    v21[3] = v17;
    v21[4] = v20;
    v21[5] = 0LL;
  }

  return result;
}

uint64_t sub_18833EA2C()
{
  uint64_t v0 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v1 = sub_188386C2C();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
  *uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  sub_188386C14();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v3,  *MEMORY[0x189619368],  v1);
  return swift_willThrow();
}

uint64_t sub_18833EAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = v9;
  uint64_t v12 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a5, a6, v11);
  MEMORY[0x1895C375C](&unk_188388B14, v12);
  static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)( a1,  0xD000000000000016LL,  0x800000018838B460LL,  v10);
  return swift_willThrow();
}

uint64_t sub_18833EBBC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18833EBC4()
{
  return sub_18833CFA4(*(void *)v0, *(void **)(v0 + 8));
}

BOOL sub_18833EBD8(uint64_t a1)
{
  return sub_18833D684(a1, *(void *)v1, *(void **)(v1 + 8));
}

uint64_t sub_18833EBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EC2C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833D700) & 1;
}

uint64_t sub_18833EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EC2C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833D8C0) & 1;
}

uint64_t sub_18833EC2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_18833EC58(uint64_t a1, uint64_t a2)
{
  return sub_18833D944( a1,  *(void *)v2,  *(void **)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

xpc_object_t sub_18833EC7C(uint64_t a1, uint64_t a2)
{
  return sub_18833D9FC( a1,  *(void *)v2,  *(void **)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

void *sub_18833ECA0(uint64_t a1, uint64_t a2)
{
  return sub_18833DA80( a1,  *(void *)v2,  *(void **)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t sub_18833ECC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EE58( a1,  a2,  a3,  (uint64_t)sub_188345570,  MEMORY[0x189618740],  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_18833DE0C);
}

uint64_t sub_18833ECF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833DBCC);
}

uint64_t sub_18833ED0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833DC8C);
}

uint64_t sub_18833ED28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833DD4C);
}

uint64_t sub_18833ED44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EE58( a1,  a2,  a3,  (uint64_t)sub_18834541C,  MEMORY[0x18961A4C0],  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_18833DE0C);
}

uint64_t sub_18833ED70()
{
  return sub_1883870DC();
}

uint64_t sub_18833ED84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EE58( a1,  a2,  a3,  (uint64_t)sub_1883453D8,  MEMORY[0x189618CD8],  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_18833E10C);
}

uint64_t sub_18833EDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833DECC);
}

uint64_t sub_18833EDCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_18833EDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833DF8C);
}

uint64_t sub_18833EE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EDCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833E04C);
}

uint64_t sub_18833EE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833EE58( a1,  a2,  a3,  (uint64_t)sub_188345284,  MEMORY[0x18961A8C8],  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_18833E10C);
}

uint64_t sub_18833EE58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))
{
  return a6(a1, *v6, v6[1], v6[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5);
}

uint64_t sub_18833EE88()
{
  return sub_1883870E8();
}

uint64_t sub_18833EE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_18833F164( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_18833E1CC);
}

uint64_t sub_18833EEB8()
{
  return sub_188387088();
}

uint64_t sub_18833EECC()
{
  return sub_18838707C();
}

uint64_t sub_18833EEE0()
{
  uint64_t result = sub_188387094();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_18833EF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F090(a1, a2, a3, MEMORY[0x18961A180]);
}

uint64_t sub_18833EF1C()
{
  uint64_t result = sub_1883870A0();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_18833EF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F008(a1, a2, a3, MEMORY[0x18961A1A0]);
}

uint64_t sub_18833EF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F04C(a1, a2, a3, MEMORY[0x18961A1A8]);
}

uint64_t sub_18833EF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F090(a1, a2, a3, MEMORY[0x18961A1B0]);
}

uint64_t sub_18833EF90()
{
  uint64_t result = sub_1883870C4();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_18833EFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F0FC(a1, a2, a3, MEMORY[0x18961A1C8]);
}

uint64_t sub_18833EFCC()
{
  uint64_t result = sub_1883870AC();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_18833EFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F008(a1, a2, a3, MEMORY[0x18961A1C0]);
}

uint64_t sub_18833F008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_18833F030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F04C(a1, a2, a3, MEMORY[0x18961A1D0]);
}

uint64_t sub_18833F04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_18833F074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F090(a1, a2, a3, MEMORY[0x18961A1D8]);
}

uint64_t sub_18833F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_18833F0C0()
{
  uint64_t result = sub_1883870D0();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_18833F0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F0FC(a1, a2, a3, MEMORY[0x18961A1E8]);
}

uint64_t sub_18833F0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_18833F120()
{
  return sub_1883870B8();
}

uint64_t sub_18833F148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_18833F164( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_18833E718);
}

uint64_t sub_18833F164( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_18833F1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F1FC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))sub_18833E8A4);
}

uint64_t sub_18833F1BC()
{
  return sub_18833EA2C();
}

uint64_t sub_18833F1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18833F1FC(a1, a2, a3, sub_18833EAF8);
}

uint64_t sub_18833F1FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

xpc_object_t sub_18833F224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x1896184C8],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_188386C2C();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x1896184C8],  (uint64_t)v17,  v18,  0LL,  v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v6;
}

xpc_object_t sub_18833F438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189617FA8],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_188386C2C();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189617FA8],  (uint64_t)v17,  v18,  0LL,  v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v6;
}

xpc_object_t sub_18833F64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189618560],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_188386C2C();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189618560],  (uint64_t)v17,  v18,  0LL,  v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v6;
}

xpc_object_t sub_18833F860(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  xpc_object_t v6 = *(void **)(a2 + 8);
  int64_t v7 = *(void *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    xpc_object_t v8 = *(xpc_object_t *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v22 = sub_1883445DC();
    uint64_t v15 = (void *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_188386C2C();
    swift_allocError();
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( v5,  v20,  0x800000018838B480LL,  v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v7 + 1;
    }

    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      xpc_object_t v9 = *(xpc_object_t *)a2;
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v22 = sub_1883445DC();
      uint64_t v11 = (void *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_188386C2C();
      swift_allocError();
      unint64_t v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0LL, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v8;
}

xpc_object_t sub_18833FA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189606D70],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_188386C2C();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189606D70],  (uint64_t)v17,  v18,  0LL,  v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v6;
}

xpc_object_t sub_18833FC94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  xpc_object_t v6 = *(void **)(a2 + 8);
  int64_t v7 = *(void *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    xpc_object_t v8 = *(xpc_object_t *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v22 = sub_1883445DC();
    uint64_t v15 = (void *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_188386C2C();
    swift_allocError();
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( v5,  v20,  0x800000018838B480LL,  v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1895C3C6C]() == a1)
    {
      *(void *)(a2 + 24) = v7 + 1;
    }

    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      xpc_object_t v9 = *(xpc_object_t *)a2;
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v22 = sub_1883445DC();
      uint64_t v11 = (void *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_188386C2C();
      swift_allocError();
      unint64_t v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0LL, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v8;
}

uint64_t sub_18833FEB4( uint64_t a1, uint64_t a2, void (*a3)(void, void *, void, int64_t, xpc_object_t))
{
  uint64_t v5 = v3;
  xpc_object_t v9 = (void *)v3[1];
  int64_t v10 = v5[3];
  if (v10 >= (uint64_t)xpc_array_get_count(v9))
  {
    uint64_t v18 = *v5;
    uint64_t v19 = a1;
    uint64_t v20 = v5[2];
    uint64_t v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v27 = sub_1883445DC();
    uint64_t v21 = (void *)swift_allocObject();
    v25[0] = v21;
    v21[2] = v18;
    v21[3] = v9;
    v21[4] = v20;
    v21[5] = v10;
    sub_188386C2C();
    swift_allocError();
    uint64_t v23 = v22;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( v19,  v25,  0x800000018838B480LL,  v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    return swift_willThrow();
  }

  else
  {
    uint64_t v28 = a1;
    xpc_object_t v11 = xpc_array_get_value(v9, v10);
    if (MEMORY[0x1895C3C6C]() == a2)
    {
      a3(*v5, v9, v5[2], v10, v11);
      uint64_t result = swift_unknownObjectRelease();
      if (!v4) {
        v5[3] = v10 + 1;
      }
    }

    else
    {
      v24[3] = swift_getObjectType();
      v24[0] = v11;
      uint64_t v12 = *v5;
      uint64_t v13 = v5[2];
      uint64_t v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v27 = sub_1883445DC();
      uint64_t v14 = (void *)swift_allocObject();
      v25[0] = v14;
      v14[2] = v12;
      v14[3] = v9;
      v14[4] = v13;
      v14[5] = v10;
      sub_188386C2C();
      swift_allocError();
      uint64_t v16 = v15;
      swift_unknownObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v28, (uint64_t)v24, v25, 0LL, v16);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t sub_188340118()
{
  uint64_t v1 = XPCTypeInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189618740],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }

  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1895C3C6C]() == v1)
    {
      int64_t value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      int64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_188386C2C();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189618740],  (uint64_t)v17,  v18,  0LL,  v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }

void *sub_188340348()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A350],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188340C50(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A350],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

void *sub_188340590()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A408],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188340D64(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A408],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

void *sub_1883407D8()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A458],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188340E78(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A458],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

uint64_t sub_188340A20()
{
  uint64_t v1 = XPCTypeInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A4C0],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }

  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1895C3C6C]() == v1)
    {
      int64_t value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_188386C2C();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A4C0],  (uint64_t)v17,  v18,  0LL,  v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }

int64_t sub_188340C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (char)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

int64_t sub_188340D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (__int16)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

int64_t sub_188340E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (int)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_188340F8C()
{
  uint64_t v1 = XPCTypeUInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189618CD8],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }

  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1895C3C6C]() == v1)
    {
      uint64_t value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_188386C2C();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189618CD8],  (uint64_t)v17,  v18,  0LL,  v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }

void *sub_1883411BC()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A610],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188341AC4(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A610],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

void *sub_188341404()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A800],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188341BD8(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A800],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

void *sub_18834164C()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A860],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      int64_t v3 = (void *)sub_188341CEC(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A860],  (uint64_t)v17,  v18,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }

  return v3;
}

uint64_t sub_188341894()
{
  uint64_t v1 = XPCTypeUInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1883445DC();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x18961A8C8],  v18,  0x800000018838B480LL,  v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }

  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1895C3C6C]() == v1)
    {
      uint64_t value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }

    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1883445DC();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_188386C2C();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x18961A8C8],  (uint64_t)v17,  v18,  0LL,  v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }

uint64_t sub_188341AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (result > 0xFF)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_188341BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (result >> 16)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_188341CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (HIDWORD(result))
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1883445DC();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_188386C2C();
    swift_allocError();
    sub_188386BFC();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_188341E00()
{
  uint64_t v2 = sub_188386C2C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18833FC94(XPCTypeNull, v0, &qword_18C4E6D28);
  if (!v1)
  {
    swift_unknownObjectRelease();
    return v1 == 0LL;
  }

  id v13 = v1;
  id v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  if (!swift_dynamicCast())
  {
LABEL_8:

    return v1 == 0LL;
  }

  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) != *MEMORY[0x189619358])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_8;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 96))(v5, v2);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    int64_t v10 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20) + 48)];
    *(void *)(v0 + 24) = v9;
    uint64_t v11 = sub_188386C20();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);

    return v1 == 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_188341F7C()
{
  xpc_object_t v3 = sub_18833F438(XPCTypeString, v0);
  if (!v1)
  {
    uint64_t v4 = v3;
    xpc_string_get_string_ptr(v3);
    xpc_string_get_length(v4);
    uint64_t v2 = sub_1883868C0();
    swift_unknownObjectRelease();
  }

  return v2;
}

void *sub_188342008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = a3;
  uint64_t v50 = a1;
  uint64_t v51 = a4;
  uint64_t v57 = *MEMORY[0x1895F89C8];
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_18838662C();
  MEMORY[0x1895F8860](v10);
  uint64_t v11 = sub_1883865D8();
  MEMORY[0x1895F8860](v11);
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_18833F860(XPCTypeDate, v4, (uint64_t (*)(void))MEMORY[0x189606E60]);
    if (v5) {
      return result;
    }
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1883865C0();
    return (void *)swift_dynamicCast();
  }

  uint64_t v47 = v7;
  unint64_t v48 = v9;
  uint64_t v13 = v4;
  uint64_t v14 = v50;
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_18833F860(XPCTypeUUID, v4, (uint64_t (*)(void))MEMORY[0x189606F20]);
    if (v5) {
      return result;
    }
    bytes = xpc_uuid_get_bytes(result);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (bytes)
    {
      sub_188386608();
      return (void *)swift_dynamicCast();
    }

    __break(1u);
    goto LABEL_23;
  }

  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_18833FA80(XPCTypeData, v4);
    if (v5) {
      return result;
    }
    uint64_t v16 = result;
    uint64_t result = (void *)xpc_data_get_bytes_ptr(result);
    if (result)
    {
      uint64_t v17 = result;
      size_t length = xpc_data_get_length(v16);
      uint64_t v19 = sub_18835DBB0(v17, length);
      unint64_t v21 = v20;
      swift_unknownObjectRelease();
      uint64_t v53 = v19;
      unint64_t v54 = v21;
      return (void *)swift_dynamicCast();
    }

LABEL_23:
    __break(1u);
    return result;
  }

  uint64_t v22 = swift_dynamicCastMetatype();
  uint64_t v23 = *(void **)(v4 + 8);
  int64_t v24 = *(void *)(v13 + 24);
  if (v22)
  {
    if (v24 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v13 + 8)))
    {
      uint64_t v36 = *(void *)v13;
      uint64_t v37 = *(void *)(v13 + 16);
      uint64_t v55 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v56 = sub_1883445DC();
      uint64_t v38 = (void *)swift_allocObject();
      uint64_t v53 = (uint64_t)v38;
      v38[2] = v36;
      v38[3] = v23;
      v38[4] = v37;
      v38[5] = v24;
      sub_188386C2C();
      swift_allocError();
      uint64_t v40 = v39;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( v14,  &v53,  0x800000018838B480LL,  v40);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
      return (void *)swift_willThrow();
    }

    id v25 = xpc_array_get_value(v23, v24);
    *(void *)(v13 + 24) = v24 + 1;
    uint64_t v53 = (uint64_t)v25;
    return (void *)swift_dynamicCast();
  }

  xpc_object_t v43 = xpc_array_get_value(*(xpc_object_t *)(v13 + 8), *(void *)(v13 + 24));
  uint64_t v46 = *(void *)v13;
  uint64_t v45 = *(void *)(v46 + 24);
  uint64_t v44 = *(void *)(v13 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  uint64_t v53 = 0x207865646E49LL;
  unint64_t v54 = 0xE600000000000000LL;
  int64_t v52 = v24;
  swift_retain();
  swift_unknownObjectRetain();
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  uint64_t v27 = v53;
  unint64_t v28 = v54;
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v29 = swift_allocObject();
  *(void *)(inited + 32) = v29;
  *(void *)(v29 + 16) = v27;
  *(void *)(v29 + 24) = v28;
  int64_t v42 = v24;
  *(void *)(v29 + 32) = v24;
  *(_BYTE *)(v29 + 40) = 0;
  uint64_t v53 = v44;
  swift_bridgeObjectRetain();
  sub_1883860B4(inited);
  uint64_t v30 = v53;
  uint64_t v31 = *(void *)(v46 + 40);
  uint64_t v32 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v45;
  v33[2] = v43;
  v33[3] = v34;
  v33[4] = v30;
  v33[5] = v31;
  uint64_t v55 = (ValueMetadata *)v32;
  unint64_t v56 = sub_188343FE8( (unint64_t *)&unk_18C4E7CA0,  type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
  uint64_t v53 = (uint64_t)v33;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v35 = v48;
  sub_188386A28();
  swift_release();
  uint64_t result = (void *)swift_unknownObjectRelease();
  if (!v5)
  {
    if (__OFADD__(v42, 1LL)) {
      __break(1u);
    }
    *(void *)(v13 + 24) = v42 + 1;
    return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v51, v35, a2);
  }

  return result;
}

    __break(1u);
    goto LABEL_24;
  }

  sub_188384178(v13, a2 & 1);
  uint64_t v15 = sub_188371A98(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    uint64_t v10 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v17 = (void *)swift_allocError();
    swift_willThrow();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_26;
  }

  __break(1u);
LABEL_24:
  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_1883425E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = XPCTypeDictionary;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7820);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = v8;
  sub_18833FEB4(a2, v7, (void (*)(void, void *, void, int64_t, xpc_object_t))sub_1883451E8);
  uint64_t result = swift_release();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    uint64_t v12 = *(void *)(v3 + 24);
    swift_retain();
    sub_188386E24();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &type metadata for CodableIndexKey;
    *(void *)(inited + 64) = sub_188344CD0();
    uint64_t v13 = swift_allocObject();
    *(void *)(inited + 32) = v13;
    *(void *)(v13 + 16) = 0x207865646E49LL;
    *(void *)(v13 + 24) = 0xE600000000000000LL;
    *(void *)(v13 + 32) = v12;
    *(_BYTE *)(v13 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1883860B4(inited);
    uint64_t v15 = type metadata accessor for XPCObjectKeyedDecodingContainer(0LL, a2, a3, v14);
    MEMORY[0x1895C375C](&unk_188388B14, v15);
    return sub_188386DA0();
  }

  return result;
}

void *sub_188342814@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_18833FC94(XPCTypeArray, (uint64_t)v1, &qword_18C707D28);
  if (!v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *v1;
    uint64_t v7 = v1[2];
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    uint64_t v9 = v1[3];
    swift_retain();
    sub_188386E24();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &type metadata for CodableIndexKey;
    *(void *)(inited + 64) = sub_188344CD0();
    uint64_t v10 = swift_allocObject();
    *(void *)(inited + 32) = v10;
    *(void *)(v10 + 16) = 0x207865646E49LL;
    *(void *)(v10 + 24) = 0xE600000000000000LL;
    *(void *)(v10 + 32) = v9;
    *(_BYTE *)(v10 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1883860B4(inited);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1883445DC();
    uint64_t result = (void *)swift_allocObject();
    *a1 = result;
    result[2] = v6;
    result[3] = v5;
    result[4] = v7;
    result[5] = 0LL;
  }

  return result;
}

size_t sub_1883429B8()
{
  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

BOOL sub_1883429D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  return v1 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_188342A00()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_188342A08()
{
  return sub_188341E00() & 1;
}

BOOL sub_188342A20()
{
  xpc_object_t v3 = sub_18833F224(XPCTypeBool, v0);
  if (!v1)
  {
    BOOL value = xpc_BOOL_get_value(v3);
    swift_unknownObjectRelease();
  }

  return value;
}

uint64_t sub_188342A78()
{
  return sub_188341F7C();
}

xpc_object_t sub_188342A8C()
{
  xpc_object_t result = sub_18833F64C(XPCTypeDouble, v0);
  if (!v1)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }

  return result;
}

float sub_188342AE4()
{
  return sub_18834487C();
}

uint64_t sub_188342AF8()
{
  return sub_188340118();
}

void *sub_188342B0C()
{
  return sub_188340348();
}

void *sub_188342B20()
{
  return sub_188340590();
}

void *sub_188342B34()
{
  return sub_1883407D8();
}

uint64_t sub_188342B48()
{
  return sub_188340A20();
}

uint64_t sub_188342B5C()
{
  return sub_188386EA8();
}

uint64_t sub_188342B70()
{
  return sub_188340F8C();
}

void *sub_188342B84()
{
  return sub_1883411BC();
}

void *sub_188342B98()
{
  return sub_188341404();
}

void *sub_188342BAC()
{
  return sub_18834164C();
}

uint64_t sub_188342BC0()
{
  return sub_188341894();
}

uint64_t sub_188342BD4()
{
  return sub_188386EB4();
}

void *sub_188342BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_188342008(a1, a2, a3, a4);
}

uint64_t sub_188342BFC()
{
  return sub_188386E54();
}

uint64_t sub_188342C10()
{
  return sub_188386E48();
}

uint64_t sub_188342C24()
{
  uint64_t result = sub_188386E60();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_188342C44(uint64_t a1, uint64_t a2)
{
  return sub_188342DD4(a1, a2, MEMORY[0x189619DA8]);
}

uint64_t sub_188342C60()
{
  uint64_t result = sub_188386E6C();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_188342C80(uint64_t a1, uint64_t a2)
{
  return sub_188342D4C(a1, a2, MEMORY[0x189619DC8]);
}

uint64_t sub_188342C9C(uint64_t a1, uint64_t a2)
{
  return sub_188342D90(a1, a2, MEMORY[0x189619DD0]);
}

uint64_t sub_188342CB8(uint64_t a1, uint64_t a2)
{
  return sub_188342DD4(a1, a2, MEMORY[0x189619DD8]);
}

uint64_t sub_188342CD4()
{
  uint64_t result = sub_188386E90();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_188342CF4(uint64_t a1, uint64_t a2)
{
  return sub_188342E40(a1, a2, MEMORY[0x189619DF0]);
}

uint64_t sub_188342D10()
{
  uint64_t result = sub_188386E78();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_188342D30(uint64_t a1, uint64_t a2)
{
  return sub_188342D4C(a1, a2, MEMORY[0x189619DE8]);
}

uint64_t sub_188342D4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_188342D74(uint64_t a1, uint64_t a2)
{
  return sub_188342D90(a1, a2, MEMORY[0x189619DF8]);
}

uint64_t sub_188342D90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_188342DB8(uint64_t a1, uint64_t a2)
{
  return sub_188342DD4(a1, a2, MEMORY[0x189619E00]);
}

uint64_t sub_188342DD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_188342E04()
{
  uint64_t result = sub_188386E9C();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_188342E24(uint64_t a1, uint64_t a2)
{
  return sub_188342E40(a1, a2, MEMORY[0x189619E10]);
}

uint64_t sub_188342E40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_188342E64()
{
  return sub_188386E84();
}

uint64_t sub_188342E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1883425E0(a1, a2, a3);
}

void *sub_188342EA0@<X0>(void *a1@<X8>)
{
  return sub_188342814(a1);
}

uint64_t sub_188342EB4()
{
  uint64_t v0 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v1 = sub_188386C2C();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
  *uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  sub_188386C14();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v3,  *MEMORY[0x189619368],  v1);
  return swift_willThrow();
}

void *sub_188342F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_188348778(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(char)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }

  return result;
}

void *sub_18834308C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_18834886C(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(__int16)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }

  return result;
}

void *sub_188343198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_188348960(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(int)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }

  return result;
}

void *sub_1883432A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_188348C3C(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_uint64_get_value(result);
    if ((unint64_t)result > 0xFF)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }

  return result;
}

unint64_t sub_1883433B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_188348D30(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    unint64_t result = xpc_uint64_get_value((xpc_object_t)result);
    if (result >> 16)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }

  return result;
}

unint64_t sub_1883434BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_188348E24(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    unint64_t result = xpc_uint64_get_value((xpc_object_t)result);
    if (HIDWORD(result))
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_188344598();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }

  return result;
}

uint64_t sub_1883435C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1883483A8(XPCTypeString, a1, a2);
  if (!v2)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = (void *)swift_unknownObjectRetain();
    xpc_string_get_string_ptr(v6);
    xpc_string_get_length(v5);
    uint64_t v3 = sub_1883868C0();
    swift_unknownObjectRelease();
  }

  return v3;
}

void *sub_188343660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_18838662C();
  MEMORY[0x1895F8860](v8);
  uint64_t v9 = sub_1883865D8();
  MEMORY[0x1895F8860](v9);
  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_1883480A8(XPCTypeDate, a2, a3, a4);
    if (v4) {
      return result;
    }
    xpc_date_get_value(result);
    sub_1883865C0();
    return (void *)swift_dynamicCast();
  }

  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_18834808C(XPCTypeUUID, a2, a3, a4);
    if (v4) {
      return result;
    }
    unint64_t result = (void *)xpc_uuid_get_bytes(result);
    if (result)
    {
      sub_188386608();
      return (void *)swift_dynamicCast();
    }

    __break(1u);
    goto LABEL_18;
  }

  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_1883481C0(XPCTypeData, a2, a3);
    if (v4) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t v12 = (void *)swift_unknownObjectRetain();
    unint64_t result = (void *)xpc_data_get_bytes_ptr(v12);
    if (result)
    {
      uint64_t v13 = result;
      size_t length = xpc_data_get_length(v11);
      sub_18835DBB0(v13, length);
      swift_unknownObjectRelease();
      return (void *)swift_dynamicCast();
    }

LABEL_18:
    __break(1u);
    return result;
  }

  if (swift_dynamicCastMetatype())
  {
    swift_unknownObjectRetain();
    return (void *)swift_dynamicCast();
  }

  else
  {
    uint64_t v15 = *(void *)(a2 + 24);
    uint64_t v16 = *(void *)(a2 + 40);
    type metadata accessor for _XPCObjectDecoder();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = a3;
    v17[3] = v15;
    void v17[4] = a4;
    v17[5] = v16;
    sub_188343FE8( (unint64_t *)&unk_18C4E7CA0,  type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)sub_188386A28();
  }

    v31(v22, a2);
    uint64_t v33 = v73;
    goto LABEL_19;
  }

  if (v36 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    sub_1883871B4();
    uint64_t v60 = v69;
    sub_188386FBC();
    uint64_t v61 = sub_18838680C();
    v31(v60, a2);
    v62 = v66;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v66, v22, a2);
    uint64_t v33 = v73;
    if ((v61 & 1) != 0)
    {
      v31(v62, a2);
    }

    else
    {
      uint64_t v63 = v62;
      uint64_t v68 = v75;
      uint64_t v64 = sub_188386B6C();
      v31(v63, a2);
      if (v64 >= v68) {
        goto LABEL_19;
      }
    }

  swift_bridgeObjectRelease();
  sub_188386A64();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1883883A0;
  uint64_t v11 = MEMORY[0x189618D10];
  *(void *)(v10 + 56) = MEMORY[0x189618CD8];
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 32) = v1 & ~(v1 >> 63);
  sub_188352280(0LL, (unint64_t *)&qword_18C708530);
  uint64_t v12 = (void *)sub_188386B18();
  sub_18838668C();
  swift_bridgeObjectRelease();

  return swift_slowAlloc();
}

BOOL sub_188343998()
{
  return MEMORY[0x1895C3C6C](*(void *)(v0 + 8)) == XPCTypeNull;
}

uint64_t sub_1883439C4()
{
  uint64_t v2 = sub_1883482B4(XPCTypeBool, *v0, v0[1]);
  if (!v1) {
    LOBYTE(v2) = xpc_BOOL_get_value((xpc_object_t)v2);
  }
  return v2 & 1;
}

uint64_t sub_188343A10()
{
  return sub_1883435C8(*v0, v0[1]);
}

double sub_188343A2C()
{
  uint64_t v2 = (void *)sub_18834849C(XPCTypeDouble, *v0, v0[1]);
  if (!v1) {
    return xpc_double_get_value(v2);
  }
  return result;
}

void sub_188343A6C()
{
}

uint64_t sub_188343A88(uint64_t a1, uint64_t a2)
{
  return sub_188343C14( a1,  a2,  &XPCTypeInt64,  (uint64_t (*)(void, void, void, void))sub_188348684,  MEMORY[0x1895FDEC0]);
}

uint64_t sub_188343AB4(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_188342F80);
}

uint64_t sub_188343AD0(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_18834308C);
}

uint64_t sub_188343AEC(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_188343198);
}

uint64_t sub_188343B08(uint64_t a1, uint64_t a2)
{
  return sub_188343C14( a1,  a2,  &XPCTypeInt64,  (uint64_t (*)(void, void, void, void))sub_188348A54,  MEMORY[0x1895FDEC0]);
}

uint64_t sub_188343B34()
{
  return sub_188386FF8();
}

uint64_t sub_188343B48(uint64_t a1, uint64_t a2)
{
  return sub_188343C14( a1,  a2,  &XPCTypeUInt64,  (uint64_t (*)(void, void, void, void))sub_188348B48,  MEMORY[0x1895FE0D8]);
}

uint64_t sub_188343B74(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_1883432A4);
}

uint64_t sub_188343B90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, v3[1], v3[2]);
}

uint64_t sub_188343BB0(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_1883433B0);
}

uint64_t sub_188343BCC(uint64_t a1, uint64_t a2)
{
  return sub_188343B90(a1, a2, (uint64_t (*)(void, void, void))sub_1883434BC);
}

uint64_t sub_188343BE8(uint64_t a1, uint64_t a2)
{
  return sub_188343C14( a1,  a2,  &XPCTypeUInt64,  (uint64_t (*)(void, void, void, void))sub_188348F18,  MEMORY[0x1895FE0D8]);
}

uint64_t sub_188343C14( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(*a3, *v5, v5[1], v5[2]);
  if (!v6) {
    return a5(result);
  }
  return result;
}

uint64_t sub_188343C58()
{
  return sub_188387004();
}

void *sub_188343C6C(uint64_t a1)
{
  return sub_188343660(a1, *v1, v1[1], v1[2]);
}

uint64_t (*XPCObjectContainer.object.modify())()
{
  return nullsub_1;
}

uint64_t XPCObjectContainer.init(wrappedValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void XPCObjectContainer.init(from:)()
{
}

void XPCObjectContainer.encode(to:)()
{
}

uint64_t XPCObjectContainer.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t XPCObjectContainer.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*XPCObjectContainer.wrappedValue.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_unknownObjectRetain();
  return sub_188343DC4;
}

uint64_t sub_188343DC4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v3 = v2;
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v2;
  }

  return result;
}

void sub_188343E24()
{
}

void sub_188343E7C()
{
}

uint64_t type metadata accessor for _XPCObjectEncoder()
{
  return objc_opt_self();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895C3744]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_188343F34()
{
  return swift_deallocObject();
}

uint64_t sub_188343F58(char *key, xpc_object_t value)
{
  return 1LL;
}

uint64_t sub_188343F7C()
{
  return swift_deallocObject();
}

uint64_t sub_188343F8C()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for _XPCObjectDecoder()
{
  return objc_opt_self();
}

uint64_t sub_188343FE8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2();
    uint64_t result = MEMORY[0x1895C375C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_188344024(uint64_t a1)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, a1);
}

uint64_t sub_18834404C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_188344058(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for XPCObjectEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCObjectEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for XPCObjectDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCObjectDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init(underlyingConnection:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for XPCObjectContainer()
{
  return &type metadata for XPCObjectContainer;
}

uint64_t sub_188344118()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for XPCObjectKeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for XPCObjectKeyedEncodingContainer);
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueDecodingContainer()
{
  return &type metadata for XPCObjectSingleValueDecodingContainer;
}

uint64_t destroy for XPCObjectSingleValueEncodingContainer()
{
  return swift_bridgeObjectRelease();
}

void *_s7Mercury37XPCObjectSingleValueEncodingContainerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCObjectSingleValueEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for XPCObjectSingleValueEncodingContainer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueEncodingContainer()
{
  return &type metadata for XPCObjectSingleValueEncodingContainer;
}

uint64_t destroy for CodableIndexKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableIndexKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableIndexKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CodableIndexKey()
{
  return &type metadata for CodableIndexKey;
}

unint64_t sub_188344484()
{
  unint64_t result = qword_18C707D08;
  if (!qword_18C707D08)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388658, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_18C707D08);
  }

  return result;
}

unint64_t sub_1883444CC()
{
  unint64_t result = qword_18C707D10;
  if (!qword_18C707D10)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388680, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_18C707D10);
  }

  return result;
}

unint64_t sub_188344510()
{
  unint64_t result = qword_18C4E7788;
  if (!qword_18C4E7788)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_1883888D8, &type metadata for XPCObjectSingleValueEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_18C4E7788);
  }

  return result;
}

unint64_t sub_188344554()
{
  unint64_t result = qword_18C707D20;
  if (!qword_18C707D20)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388E04, &type metadata for XPCObjectUnkeyedEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_18C707D20);
  }

  return result;
}

unint64_t sub_188344598()
{
  unint64_t result = qword_18C4E8338;
  if (!qword_18C4E8338)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388820, &type metadata for XPCObjectSingleValueDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_18C4E8338);
  }

  return result;
}

unint64_t sub_1883445DC()
{
  unint64_t result = qword_18C707D30;
  if (!qword_18C707D30)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388C94, &type metadata for XPCObjectUnkeyedDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_18C707D30);
  }

  return result;
}

uint64_t sub_188344620()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for XPCObjectKeyedDecodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for XPCObjectKeyedDecodingContainer);
}

uint64_t sub_188344660(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_18834469C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1883446E0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_188344724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_18838647C();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = sub_188386494();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_188386488();
  if (!v8)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  uint64_t v12 = *(void **)(a4 + 8);
  swift_unknownObjectRetain();
  xpc_object_t v13 = xpc_data_create(v8, v11);
  xpc_array_append_value(v12, v13);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1883447DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_18838647C();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_188386494();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v7 += a1 - result;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = sub_188386488();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return a3(v7, v13);
}

float sub_18834487C()
{
  uint64_t v2 = XPCTypeDouble;
  uint64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v12 = *v0;
    uint64_t v13 = v0[2];
    int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v25 = sub_1883445DC();
    uint64_t v14 = (void *)swift_allocObject();
    v23[0] = v14;
    v14[2] = v12;
    v14[3] = v3;
    v14[4] = v13;
    v14[5] = v4;
    sub_188386C2C();
    swift_allocError();
    uint64_t v16 = v15;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)( MEMORY[0x189618620],  v23,  0x800000018838B480LL,  v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_willThrow();
  }

  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1895C3C6C]() == v2)
    {
      uint64_t v18 = *v0;
      uint64_t v19 = v0[2];
      double value = xpc_double_get_value(v5);
      float v1 = value;
      if (value == v1)
      {
        swift_unknownObjectRelease();
        v0[3] = v4 + 1;
        return v1;
      }

      int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v25 = sub_1883445DC();
      unint64_t v21 = (void *)swift_allocObject();
      v23[0] = v21;
      v21[2] = v18;
      v21[3] = v3;
      v21[4] = v19;
      v21[5] = v4;
      sub_188386C2C();
      swift_allocError();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_188386BFC();
      uint64_t v11 = v23;
    }

    else
    {
      v22[3] = swift_getObjectType();
      v22[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v25 = sub_1883445DC();
      BOOL v8 = (void *)swift_allocObject();
      v23[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      void v8[5] = v4;
      sub_188386C2C();
      swift_allocError();
      uint64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)( MEMORY[0x189618620],  (uint64_t)v22,  v23,  0LL,  v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      uint64_t v11 = v22;
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
    swift_unknownObjectRelease();
  }

  return v1;
}

void sub_188344B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)sub_188348590(XPCTypeDouble, a1, a2);
  if (!v3)
  {
    double value = xpc_double_get_value(v7);
    float v9 = value;
    if (value != v9)
    {
      v10[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v10[0] = a1;
      v10[1] = a2;
      v10[4] = sub_188344598();
      v10[2] = a3;
      sub_188386C2C();
      swift_allocError();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_188386BF0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      swift_willThrow();
    }
  }

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  float v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t sub_188344CB0(const void *a1, uint64_t a2)
{
  return sub_188339BA4(a1, a2, *(void *)(v2 + 48));
}

unint64_t sub_188344CD0()
{
  unint64_t result = qword_18C707D40;
  if (!qword_18C707D40)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188388990, &type metadata for CodableIndexKey);
    atomic_store(result, (unint64_t *)&qword_18C707D40);
  }

  return result;
}

uint64_t sub_188344D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_188344D58(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_188344D68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1895C36F0](a1, v6, a5);
}

void *initializeWithCopy for XPCObjectUnkeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCObjectUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for XPCObjectUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCReplyProviding(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCReplyProviding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedDecodingContainer()
{
  return &type metadata for XPCObjectUnkeyedDecodingContainer;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwxx_0()
{
  return swift_bridgeObjectRelease();
}

void *_s7Mercury37XPCObjectSingleValueDecodingContainerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s7Mercury37XPCObjectSingleValueDecodingContainerVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCDictionary(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedEncodingContainer()
{
  return &type metadata for XPCObjectUnkeyedEncodingContainer;
}

uint64_t sub_18834516C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_188345174()
{
  return swift_deallocObject();
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *sub_1883451B8()
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t sub_1883451E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_188345214()
{
  return swift_deallocObject();
}

uint64_t sub_188345224()
{
  return swift_dynamicCast();
}

unint64_t sub_188345284()
{
  unint64_t result = qword_18C4E7930;
  if (!qword_18C4E7930)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A8E0], MEMORY[0x18961A8C8]);
    atomic_store(result, (unint64_t *)&qword_18C4E7930);
  }

  return result;
}

unint64_t sub_1883452C8()
{
  unint64_t result = qword_18C4E7940;
  if (!qword_18C4E7940)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A8F0], MEMORY[0x18961A8C8]);
    atomic_store(result, (unint64_t *)&qword_18C4E7940);
  }

  return result;
}

unint64_t sub_18834530C()
{
  unint64_t result = qword_18C707D80;
  if (!qword_18C707D80)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A878], MEMORY[0x18961A860]);
    atomic_store(result, (unint64_t *)&qword_18C707D80);
  }

  return result;
}

unint64_t sub_188345350()
{
  unint64_t result = qword_18C707D88;
  if (!qword_18C707D88)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A810], MEMORY[0x18961A800]);
    atomic_store(result, (unint64_t *)&qword_18C707D88);
  }

  return result;
}

unint64_t sub_188345394()
{
  unint64_t result = qword_18C707D90;
  if (!qword_18C707D90)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A630], MEMORY[0x18961A610]);
    atomic_store(result, (unint64_t *)&qword_18C707D90);
  }

  return result;
}

unint64_t sub_1883453D8()
{
  unint64_t result = qword_18C707D98;
  if (!qword_18C707D98)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618CE8], MEMORY[0x189618CD8]);
    atomic_store(result, (unint64_t *)&qword_18C707D98);
  }

  return result;
}

unint64_t sub_18834541C()
{
  unint64_t result = qword_18C707DA0;
  if (!qword_18C707DA0)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A4E0], MEMORY[0x18961A4C0]);
    atomic_store(result, (unint64_t *)&qword_18C707DA0);
  }

  return result;
}

unint64_t sub_188345460()
{
  unint64_t result = qword_18C707DA8;
  if (!qword_18C707DA8)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A4F0], MEMORY[0x18961A4C0]);
    atomic_store(result, (unint64_t *)&qword_18C707DA8);
  }

  return result;
}

unint64_t sub_1883454A4()
{
  unint64_t result = qword_18C707DB0;
  if (!qword_18C707DB0)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A470], MEMORY[0x18961A458]);
    atomic_store(result, (unint64_t *)&qword_18C707DB0);
  }

  return result;
}

unint64_t sub_1883454E8()
{
  unint64_t result = qword_18C707DB8;
  if (!qword_18C707DB8)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A418], MEMORY[0x18961A408]);
    atomic_store(result, (unint64_t *)&qword_18C707DB8);
  }

  return result;
}

unint64_t sub_18834552C()
{
  unint64_t result = qword_18C707DC0;
  if (!qword_18C707DC0)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961A360], MEMORY[0x18961A350]);
    atomic_store(result, (unint64_t *)&qword_18C707DC0);
  }

  return result;
}

unint64_t sub_188345570()
{
  unint64_t result = qword_18C707DC8;
  if (!qword_18C707DC8)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C707DC8);
  }

  return result;
}

uint64_t sub_1883455B4()
{
  return swift_deallocObject();
}

uint64_t sub_1883455C4(uint64_t a1, uint64_t a2)
{
  return sub_18833D168(a1, a2, *(void ***)(v2 + 16));
}

uint64_t sub_1883455CC()
{
  return swift_deallocObject();
}

uint64_t sub_1883455DC()
{
  return sub_1883872BC();
}

unint64_t sub_18834563C()
{
  unint64_t result = qword_18C4E7818;
  if (!qword_18C4E7818)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7810);
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C4E7818);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895C3750](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_188345718(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v39 = *MEMORY[0x1895F89C8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_18838662C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8860](v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  if (*(void *)(*v3 + 16LL)) {
    __break(1u);
  }
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    *(void *)uuid = sub_188386614();
    LOWORD(v36) = v20;
    BYTE2(v36) = v21;
    BYTE3(v36) = v22;
    BYTE4(v36) = v23;
    BYTE5(v36) = v24;
    BYTE6(v36) = v25;
    HIBYTE(v36) = v26;
    xpc_object_t v27 = xpc_uuid_create(uuid);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(v12 + 16) = v27;
    return swift_unknownObjectRelease();
  }

  uint64_t v34 = (void (*)(uint64_t *, uint64_t, uint64_t))v13;
  sub_188344660((uint64_t)v7, &qword_18C4E7960);
  uint64_t v14 = v3[1];
  uint64_t v15 = *(void *)(*v3 + 24LL);
  uint64_t v16 = *(void *)(*v3 + 40LL);
  uint64_t v17 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0LL;
  void v18[3] = v15;
  v18[4] = v14;
  v18[5] = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v17;
  uint64_t v38 = sub_188349470( &qword_18C4E7D70,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder,  (uint64_t)&unk_188388A28);
  *(void *)uuid = v18;
  sub_188349470(&qword_18C707DE8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F38]);
  swift_retain();
  sub_1883867D0();
  if (v2)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  uint64_t v28 = v18[2];
  if (v28)
  {
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(*v3 + 16LL) = v28;
    return swift_unknownObjectRelease();
  }

  uint64_t v29 = sub_188386C44();
  swift_allocError();
  uint64_t v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
  v31[3] = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v31);
  v34(boxed_opaque_existential_0Tm, a1, v8);
  *(void *)uuid = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  swift_bridgeObjectRetain();
  sub_188386BB4();
  swift_bridgeObjectRelease();
  sub_188386C14();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v31,  *MEMORY[0x1896193B8],  v29);
  swift_willThrow();
  return swift_release();
}

id sub_188345B04()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1896079F8]), sel_init);
  qword_18C4E7790 = (uint64_t)result;
  return result;
}

uint64_t sub_188345B34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_18838662C();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8860](v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_188344D68(a1, (uint64_t)v6, &qword_18C4E7960);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    uint64_t v11 = sub_188344660((uint64_t)v6, &qword_18C4E7960);
    uint64_t v12 = *v2;
    uint64_t v13 = v2[2];
    MEMORY[0x1895F8860](v11);
    *(void *)&v18[-32] = v12;
    *(void *)&v18[-24] = v14;
    *(void *)&v18[-16] = v13;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_18835ABB4( (void *(*)(uint64_t *__return_ptr, void *))sub_188349454,  (uint64_t)&v18[-48],  0xD00000000000001FLL,  0x800000018838B6F0LL);
    swift_unknownObjectRelease();
    sub_188344660(a1, &qword_18C4E7960);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_1883865F0();
    uint64_t v16 = *v2;
    uint64_t v17 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v16, "XPCSideChannel.uniqueIdentifier", (const char *)(v17 + 32));
    swift_release();
    sub_188344660(a1, &qword_18C4E7960);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }

uint64_t sub_188345D28()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_188345D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_188345D28();
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_188345D80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x1895C38E8](v1);
  *a1 = result;
  return result;
}

void sub_188345DA8()
{
  off_18C4E6D70 = (_UNKNOWN *)MEMORY[0x18961AFF0];
}

void *static XPCSideChannel.makeActiveSideChannelIterator()()
{
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  if (qword_18C4E6D78 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (char *)off_18C4E6D70;
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *((_BYTE *)off_18C4E6D70 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  uint64_t v4 = v2 & *((void *)off_18C4E6D70 + 8);
  uint64_t v5 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C707DD0);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v1;
  void v6[3] = v1 + 64;
  v6[4] = v5;
  v6[5] = 0LL;
  v6[6] = v4;
  v6[7] = sub_188345F08;
  v6[8] = 0LL;
  v6[9] = sub_188348068;
  v6[10] = 0LL;
  v6[11] = sub_188348078;
  v6[12] = 0LL;
  swift_bridgeObjectRetain();
  objc_msgSend(v0, sel_unlock);
  return v6;
}

uint64_t sub_188345F0C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_188344660(a1, &qword_18C4E6E00);
    sub_188347AB4(a2, (uint64_t)v9);
    uint64_t v4 = sub_18838662C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a2, v4);
    return sub_188344660((uint64_t)v9, &qword_18C4E6E00);
  }

  else
  {
    sub_1883493F8(a1, (uint64_t)v9, &qword_18C707DE0);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_18837D8C8((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_18838662C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a2, v7);
  }

uint64_t XPCSideChannel.__allocating_init(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18834900C(a1, a2);
  swift_release();
  return v4;
}

uint64_t static XPCSideChannel.anonymousListener()()
{
  return sub_18834900C(0LL, 0LL);
}

uint64_t XPCSideChannel.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  if (qword_18C4E6D78 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_188347AB4(v1 + v2, (uint64_t)v6);
  swift_endAccess();
  sub_188344660((uint64_t)v6, &qword_18C4E6E00);
  objc_msgSend(v3, sel_unlock);
  uint64_t v4 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v1 + v2, v4);
  swift_release();
  swift_release();
  return v1;
}

uint64_t XPCSideChannel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id XPCSideChannel.setEventHandler(_:)(uint64_t a1, uint64_t a2)
{
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  uint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_retain();
  swift_release();
  return objc_msgSend(v5, sel_unlock);
}

BOOL XPCSideChannel.isAnonymousListener.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection) == 0LL;
}

uint64_t XPCSideChannel.send(message:)(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t result = MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v12 = sub_18838662C();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0LL, 1LL, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188345B34((uint64_t)v6);
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v14 = *(void (**)(uint64_t *))(*(void *)v7 + 168LL);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCSideChannel.sendSync(message:)(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t result = MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v12 = sub_18838662C();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0LL, 1LL, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188345B34((uint64_t)v6);
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v14 = *(void (**)(uint64_t *))(*(void *)v7 + 176LL);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCSideChannel.send(message:replyQueue:replyHandler:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t result = MEMORY[0x1895F8860](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v12)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    uint64_t v15 = a1[2];
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    uint64_t v23 = v15;
    uint64_t v16 = v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v17 = sub_18838662C();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v11, 0LL, 1LL, v17);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188345B34((uint64_t)v11);
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    uint64_t v23 = v15;
    uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160LL);
    swift_retain();
    v19(&v21, a2, a3, v20);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_18834669C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (qword_18C4E6D78 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = off_18C4E6D70;
  if (!*((void *)off_18C4E6D70 + 2) || (unint64_t v5 = sub_188371980(a1), (v6 & 1) == 0))
  {
    uint64_t v13 = 0LL;
    char v14 = 1;
    sub_188344660((uint64_t)&v13, &qword_18C4E6E00);
    uint64_t result = swift_endAccess();
    uint64_t Strong = 0LL;
    goto LABEL_8;
  }

  sub_188344D68(v4[7] + 8 * v5, (uint64_t)&v13, &qword_18C707DE0);
  char v14 = 0;
  uint64_t Strong = swift_weakLoadStrong();
  sub_188344660((uint64_t)&v13, &qword_18C4E6E00);
  uint64_t result = swift_endAccess();
  if (!Strong)
  {
LABEL_8:
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_9;
  }

  uint64_t v10 = *(void *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  uint64_t result = swift_retain();
  uint64_t v12 = sub_1883493C8;
LABEL_9:
  *a2 = Strong;
  a2[1] = (uint64_t)v12;
  a2[2] = v11;
  return result;
}

uint64_t sub_1883467F4(uint64_t a1, uint64_t a2, void **a3)
{
  void (*v18)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v30;
  uint64_t v32;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  char v37;
  char v38[8];
  if (qword_18C4E6D78 != -1) {
LABEL_45:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v30 = (char *)off_18C4E6D70 + 64;
  uint64_t v3 = -1LL << *((_BYTE *)off_18C4E6D70 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *((void *)off_18C4E6D70 + 8);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  int64_t v7 = 0LL;
  uint64_t v8 = &qword_18C4E6E00;
  uint64_t v32 = swift_bridgeObjectRetain();
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v7 << 6);
LABEL_10:
      sub_188344D68(*(void *)(v32 + 56) + 8 * v11, (uint64_t)&v36, &qword_18C707DE0);
      char v12 = 0;
      goto LABEL_20;
    }

    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_45;
    }

    if (v13 < v6)
    {
      unint64_t v14 = *(void *)&v30[8 * v13];
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v6)
      {
        ++v7;
      }

      else
      {
        unint64_t v14 = *(void *)&v30[8 * v15];
        if (v14) {
          goto LABEL_17;
        }
        uint64_t v28 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_40;
        }
        unint64_t v14 = *(void *)&v30[8 * v28];
        if (v14) {
          goto LABEL_30;
        }
        int64_t v15 = v7 + 4;
        if (v7 + 4 >= v6)
        {
LABEL_41:
          int64_t v7 = v28;
          goto LABEL_19;
        }

        unint64_t v14 = *(void *)&v30[8 * v15];
        if (v14)
        {
LABEL_17:
          int64_t v13 = v15;
LABEL_14:
          unint64_t v5 = (v14 - 1) & v14;
          unint64_t v11 = __clz(__rbit64(v14)) + (v13 << 6);
          int64_t v7 = v13;
          goto LABEL_10;
        }

        uint64_t v28 = v7 + 5;
        if (v7 + 5 >= v6)
        {
LABEL_40:
          int64_t v7 = v15;
        }

        else
        {
          unint64_t v14 = *(void *)&v30[8 * v28];
          if (v14)
          {
LABEL_30:
            int64_t v13 = v28;
            goto LABEL_14;
          }

          int64_t v13 = v7 + 6;
          if (v7 + 6 >= v6) {
            goto LABEL_41;
          }
          unint64_t v14 = *(void *)&v30[8 * v13];
          if (v14) {
            goto LABEL_14;
          }
          while (v6 - 7 != v7)
          {
            unint64_t v14 = *(void *)(v32 + 120 + 8 * v7++);
            if (v14)
            {
              int64_t v13 = v7 + 6;
              goto LABEL_14;
            }
          }

          int64_t v7 = v6 - 1;
        }
      }
    }

LABEL_19:
    unint64_t v5 = 0LL;
    unint64_t v36 = 0LL;
    char v12 = 1;
LABEL_20:
    uint64_t v37 = v12;
    sub_1883493F8((uint64_t)&v36, (uint64_t)v35, v8);
    if ((v35[8] & 1) != 0) {
      return sub_1883493F0();
    }
    sub_1883493F8((uint64_t)v35, (uint64_t)v38, &qword_18C707DE0);
    sub_188346C00((uint64_t)v38, &v34);
    uint64_t v16 = v34;
    sub_188344660((uint64_t)v38, &qword_18C707DE0);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      if (!v17
        || (uint64_t v18 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)a1 + 208LL),
            swift_retain(),
            v18(&v36, sub_18834943C, v17, MEMORY[0x1896184C8]),
            swift_release(),
            (v36 & 1) != 0))
      {
        uint64_t v19 = v7;
        uint64_t v20 = v8;
        uint64_t v21 = *(void *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
        uint64_t v22 = *(void *)(v16 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = v21;
        *(void *)(v23 + 24) = v22;
        char v24 = *a3;
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v24 = sub_18837136C(0LL, v24[2] + 1LL, 1, v24);
          *a3 = v24;
        }

        xpc_object_t v27 = v24[2];
        char v26 = v24[3];
        if (v27 >= v26 >> 1) {
          char v24 = sub_18837136C((void *)(v26 > 1), v27 + 1, 1, v24);
        }
        v24[2] = v27 + 1;
        uint64_t v9 = &v24[3 * v27];
        v9[4] = v16;
        v9[5] = sub_1883494B4;
        v9[6] = v23;
        *a3 = v24;
        uint64_t v8 = v20;
        int64_t v7 = v19;
      }

      swift_release();
    }
  }

    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_20;
  }

  if (!v9)
  {
    swift_release();
    goto LABEL_19;
  }

  unint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  swift_release();
LABEL_20:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t sub_188346C00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = sub_188344660((uint64_t)v5, &qword_18C707DE0);
  *a2 = Strong;
  return result;
}

uint64_t XPCSideChannel.encode(to:)(uint64_t a1)
{
  if (swift_dynamicCast())
  {
    uint64_t v2 = v15;
    uint64_t v3 = *(void *)(v15 + 24);
    if (v3 && (swift_conformsToProtocol2() ? (uint64_t v4 = v3) : (uint64_t v4 = 0LL), v4))
    {
      uint64_t v5 = *(void *)(v2 + 32);
      v14[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
      v14[4] = sub_188344510();
      v14[0] = v2;
      v14[1] = v5;
      uint64_t v6 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
      __swift_mutable_project_boxed_opaque_existential_1( (uint64_t)v14,  (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_188345718(v6);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    }

    else
    {
      uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      swift_retain();
      unint64_t v12 = sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_1883491B4();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064LL, 0x800000018838B500LL, v11, v12, v13);
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_release();
    }
  }

  else
  {
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    swift_retain();
    unint64_t v9 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x800000018838B4C0LL, v8, v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

uint64_t XPCSideChannel.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  XPCSideChannel.init(from:)(a1);
  return v2;
}

const uint8_t *XPCSideChannel.init(from:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v1;
  uint64_t v6 = sub_18838662C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8860](v6);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v8);
  unint64_t v12 = (char *)&v35 - v11;
  int64_t v13 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  void *v13 = nullsub_1;
  v13[1] = 0LL;
  sub_188349220(a1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708990);
  type metadata accessor for _XPCObjectDecoder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    unint64_t v24 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x800000018838B570LL, 0LL, v24, v25);
    swift_bridgeObjectRelease();
    swift_willThrow();
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_15;
  }

  uint64_t v40 = v7;
  uint64_t v14 = v41;
  uint64_t v15 = *(void *)(v41 + 24);
  if (!v15
    || ((uint64_t v16 = swift_conformsToProtocol2()) != 0 ? (v17 = v16) : (v17 = 0LL), v16 ? (v18 = v15) : (v18 = 0LL), !v18))
  {
    unint64_t v26 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064LL, 0x800000018838B5B0LL, 0LL, v26, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    goto LABEL_14;
  }

  uint64_t v36 = v18;
  uint64_t v37 = v17;
  uint64_t v38 = v6;
  uint64_t v39 = v5;
  uint64_t v19 = *(void *)(v14 + 16);
  uint64_t v20 = *(void *)(v14 + 32);
  v42[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  unint64_t v21 = sub_188344598();
  v42[0] = v14;
  v42[1] = v19;
  v42[4] = v21;
  v42[2] = v20;
  uint64_t v22 = XPCTypeUUID;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_1883480C4(v22, v14, v19, v20, (uint64_t (*)(void))MEMORY[0x189606F20]);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
LABEL_15:
    swift_release();
    swift_deallocPartialClassInstance();
    return (const uint8_t *)v1;
  }

  uint64_t result = xpc_uuid_get_bytes(v23);
  if (result)
  {
    sub_188386608();
    uint64_t v29 = v40;
    uint64_t v30 = v38;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v12, v10, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))( (uint64_t)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier,  v12,  v30);
    uint64_t v31 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    uint64_t v32 = v37;
    *uint64_t v31 = v36;
    v31[1] = v32;
    uint64_t v33 = qword_18C4E77A0;
    swift_retain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = (void *)qword_18C4E7790;
    objc_msgSend((id)qword_18C4E7790, sel_lock);
    sub_188347340((uint64_t)v1);
    objc_msgSend(v34, sel_unlock);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v30);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return (const uint8_t *)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_188347340(uint64_t a1)
{
  uint64_t v2 = sub_18838662C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C4E6D78 != -1) {
    swift_once();
  }
  uint64_t v6 = a1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  swift_beginAccess();
  uint64_t v7 = off_18C4E6D70;
  if (*((void *)off_18C4E6D70 + 2) && (unint64_t v8 = sub_188371980(v6), (v9 & 1) != 0))
  {
    sub_188344D68(v7[7] + 8 * v8, (uint64_t)&v13, &qword_18C707DE0);
    char v14 = 0;
    uint64_t Strong = swift_weakLoadStrong();
    sub_188344660((uint64_t)&v13, &qword_18C4E6E00);
    swift_endAccess();
    swift_release();
    if (Strong)
    {
      sub_188386C2C();
      swift_allocError();
      sub_188386BF0();
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t v13 = 0LL;
    char v14 = 1;
    sub_188344660((uint64_t)&v13, &qword_18C4E6E00);
    swift_endAccess();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_weakInit();
  char v14 = 0;
  swift_beginAccess();
  sub_188345F0C((uint64_t)&v13, (uint64_t)v5);
  return swift_endAccess();
}

BOOL static XPCSideChannel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t XPCSideChannel.hash(into:)()
{
  return sub_188387250();
}

uint64_t XPCSideChannel.hashValue.getter()
{
  return sub_188387268();
}

const uint8_t *sub_1883475B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCSideChannel.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_188347608(uint64_t a1)
{
  return XPCSideChannel.encode(to:)(a1);
}

uint64_t sub_188347628()
{
  return sub_188387268();
}

uint64_t sub_18834766C()
{
  return sub_188387250();
}

uint64_t sub_188347694()
{
  return sub_188387268();
}

BOOL sub_1883476D4(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1883476E8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78A8);
  uint64_t v2 = sub_188386CEC();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_188344D68(v6, (uint64_t)&v15, &qword_18C4E77F0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_18834781C(v15, v16);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_188344D58(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18834781C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188387268();
  return sub_188347880(a1, a2, v4);
}

unint64_t sub_188347880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_188386FD4() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_188386FD4() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if ((sub_188386FD4() & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

double sub_1883479C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_18837191C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1883847C8();
      uint64_t v11 = v13;
    }

    swift_bridgeObjectRelease();
    sub_188344D58((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_188347BB0(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_188347AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_188371980(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1883849AC();
      uint64_t v11 = v14;
    }

    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = sub_18838662C();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v6,  v13);
    sub_1883493F8(*(void *)(v11 + 56) + 8 * v6, a2, &qword_18C707DE0);
    sub_188347D84(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)a2 = 0LL;
  }

  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

unint64_t sub_188347BB0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_188386B9C();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_188387244();
        swift_bridgeObjectRetain();
        sub_1883868D8();
        uint64_t v10 = sub_188387268();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          __int128 v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            __int128 v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

unint64_t sub_188347D84(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18838662C();
  uint64_t v33 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1895F8860](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_188386B9C();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v32 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v33 + 72);
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v31(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        sub_188349470( (unint64_t *)&qword_18C707DF0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        uint64_t v18 = sub_1883867E8();
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            if (v15 * a1 < v16 || result >= v22 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }

            if (a1 < (uint64_t)v10 || *(void *)(a2 + 56) + 8 * a1 >= *(void *)(a2 + 56) + 8 * v10 + 8)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_18C707DE0);
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v13 = v17;
            }

            else
            {
              BOOL v23 = a1 == v10;
              a1 = v10;
              uint64_t v13 = v17;
              if (!v23)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_18C707DE0);
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v13 = v17;
                a1 = v10;
              }
            }
          }
        }

        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        unint64_t v10 = (v10 + 1) & v13;
        uint64_t v8 = v14;
        uint64_t v12 = v15;
      }

      while (((*(void *)(v14 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1LL << a1) - 1;
  }

  *unint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

BOOL sub_188348068(void *a1)
{
  return *a1 != 0LL;
}

uint64_t sub_188348078@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_18834808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883480C4(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x189606F20]);
}

uint64_t sub_1883480A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883480C4(a1, a2, a3, a4, (uint64_t (*)(void))MEMORY[0x189606E60]);
}

uint64_t sub_1883480C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0LL);
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v11[3] = swift_getObjectType();
    v11[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v9 = v8;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(v7, (uint64_t)v11, 0LL, v9);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_1883481C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189606D70],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_1883482B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x1896184C8],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_1883483A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189617FA8],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_18834849C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189618560],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189618620],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189618740],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A350],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_18834886C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A408],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A458],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A4C0],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x189618CD8],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A610],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A800],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A860],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_188348F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_188386C2C();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( MEMORY[0x18961A8C8],  (uint64_t)v7,  0LL,  v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }

  return a3;
}

uint64_t sub_18834900C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_18838662C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) + 16;
  unint64_t v10 = (void *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *unint64_t v10 = nullsub_1;
  v10[1] = 0LL;
  sub_188386620();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))( v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier,  v9,  v6);
  uint64_t v11 = (void *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  void *v11 = a1;
  v11[1] = a2;
  uint64_t v12 = qword_18C4E77A0;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  if (qword_18C4E6D78 != -1) {
    swift_once();
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))( v9,  v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier,  v6);
  swift_weakInit();
  v16[8] = 0;
  swift_beginAccess();
  sub_188345F0C((uint64_t)v16, (uint64_t)v9);
  swift_endAccess();
  objc_msgSend(v13, sel_unlock);
  return v3;
}

unint64_t sub_1883491B4()
{
  unint64_t result = qword_18C4E8370;
  if (!qword_18C4E8370)
  {
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_18C4E8370);
  }

  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_188349220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_188349264()
{
  return sub_188349470( &qword_18C707DD8,  (uint64_t (*)(uint64_t))type metadata accessor for XPCSideChannel,  (uint64_t)&protocol conformance descriptor for XPCSideChannel);
}

uint64_t type metadata accessor for XPCSideChannel()
{
  uint64_t result = qword_18C4E6E08;
  if (!qword_18C4E6E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1883492CC()
{
  return type metadata accessor for XPCSideChannel();
}

uint64_t sub_1883492D4()
{
  uint64_t result = sub_18838662C();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for XPCSideChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCSideChannel.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_18834937C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for XPCSideChannel.Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCSideChannel.Weak);
}

uint64_t sub_1883493A4()
{
  return swift_deallocObject();
}

uint64_t sub_1883493C8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(a1, *a2, a2[1]);
}

uint64_t sub_1883493F0()
{
  return swift_release();
}

uint64_t sub_1883493F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_18834943C(uint64_t a1)
{
  return sub_188361950(a1, v1);
}

void sub_188349454(char *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_188349470(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x1895C375C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t RemoteDeviceBrowser.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t RemoteDeviceBrowser.deviceType.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

id RemoteDeviceBrowser.targetQueue.getter()
{
  return *(id *)(v0 + 40);
}

uint64_t sub_18834950C()
{
  return sub_1883495A8();
}

uint64_t sub_188349518@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_188362240(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_188349584@<X0>(void *a1@<X8>)
{
  return sub_188349518(a1);
}

uint64_t sub_18834959C()
{
  return sub_1883495A8();
}

uint64_t sub_1883495A8()
{
  return v1;
}

uint64_t sub_188349604@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_188362240(v2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x18961AFE8];
  if ((v3 & 0x8000000000000000LL) == 0 && (v3 & 0x4000000000000000LL) == 0)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5) {
      goto LABEL_4;
    }
LABEL_15:
    uint64_t result = swift_release();
    uint64_t v7 = MEMORY[0x18961AFE8];
LABEL_16:
    *a1 = v7;
    return result;
  }

  swift_bridgeObjectRetain();
  uint64_t v5 = sub_188386CBC();
  uint64_t result = swift_release();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_4:
  if (v5 >= 1)
  {
    swift_beginAccess();
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        MEMORY[0x1895C29AC](i, v3);
      }
      else {
        swift_retain();
      }
      if (remote_device_get_state() == dword_18C708554)
      {
        sub_188386C5C();
        sub_188386C74();
        sub_188386C80();
        sub_188386C68();
      }

      else
      {
        swift_release();
      }
    }

    uint64_t result = swift_release();
    uint64_t v7 = v8;
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_1883497AC@<X0>(void *a1@<X8>)
{
  return sub_188349604(a1);
}

uint64_t RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)( a1,  a2,  a3 | ((HIDWORD(a3) & 1) << 32),  a4,  a5,  a6);
  return v12;
}

uint64_t RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v28 = a4;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v8 = sub_188386AC4();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8860](v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_188386AB8();
  MEMORY[0x1895F8860](v12);
  uint64_t v13 = sub_18838674C();
  MEMORY[0x1895F8860](v13);
  sub_188349AC0();
  sub_188386740();
  uint64_t v34 = MEMORY[0x18961AFE8];
  unint64_t v14 = sub_188349AFC();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707E08);
  v26[1] = sub_188349B44();
  v26[2] = v15;
  v26[3] = v14;
  sub_188386B90();
  uint64_t v16 = *MEMORY[0x18961B900];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  uint64_t v27 = v8;
  v17(v11, v16, v8);
  uint64_t v18 = sub_188386AF4();
  uint64_t v19 = MEMORY[0x18961AFE8];
  *(void *)(v7 + 48) = v18;
  *(void *)(v7 + 72) = 0LL;
  unint64_t v20 = sub_188338548(v19);
  uint64_t v21 = v28;
  uint64_t v22 = v29;
  *(void *)(v7 + 80) = v20;
  *(_BYTE *)(v7 + 88) = 0;
  uint64_t v23 = v30;
  *(void *)(v7 + 16) = v22;
  *(void *)(v7 + 24) = v23;
  BYTE4(v23) = BYTE4(v31);
  *(_DWORD *)(v7 + 32) = v31;
  *(_BYTE *)(v7 + 36) = BYTE4(v23) & 1;
  if (!v21)
  {
    sub_188386740();
    uint64_t v34 = v19;
    sub_188386B90();
    v17(v11, v16, v27);
    uint64_t v21 = sub_188386AF4();
  }

  *(void *)(v7 + 40) = v21;
  uint64_t v24 = v33;
  *(void *)(v7 + 56) = v32;
  *(void *)(v7 + 64) = v24;
  return v7;
}

unint64_t sub_188349AC0()
{
  unint64_t result = qword_18C4E8380;
  if (!qword_18C4E8380)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C4E8380);
  }

  return result;
}

unint64_t sub_188349AFC()
{
  unint64_t result = qword_18C707E00;
  if (!qword_18C707E00)
  {
    uint64_t v1 = sub_188386AB8();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961B8C0], v1);
    atomic_store(result, (unint64_t *)&qword_18C707E00);
  }

  return result;
}

unint64_t sub_188349B44()
{
  unint64_t result = qword_18C707E10;
  if (!qword_18C707E10)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C707E08);
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C707E10);
  }

  return result;
}

void sub_188349B90()
{
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 48);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_18834A3CC;
  *(void *)(v2 + 24) = v0;
  uint64_t v18 = sub_18834A3E4;
  uint64_t v19 = v2;
  uint64_t v3 = MEMORY[0x1895F87A0];
  uint64_t aBlock = MEMORY[0x1895F87A0];
  uint64_t v15 = 1107296256LL;
  uint64_t v16 = sub_188349F74;
  uint64_t v17 = &block_descriptor_0;
  uint64_t v4 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v1 & 1) == 0)
  {
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    if (*(void *)(v0 + 24))
    {
      xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
      uint64_t v7 = sub_1883868A8();
      xpc_dictionary_set_string(v6, "AvailableService", (const char *)(v7 + 32));
      swift_release();
      if ((*(_BYTE *)(v0 + 36) & 1) != 0)
      {
LABEL_4:
        xpc_dictionary_set_value(v6, "DeviceType", 0LL);
LABEL_9:
        uint64_t v18 = sub_18834A440;
        uint64_t v19 = v5;
        uint64_t aBlock = v3;
        uint64_t v15 = 1107296256LL;
        uint64_t v16 = sub_18834A448;
        uint64_t v17 = &block_descriptor_9;
        uint64_t v12 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        uint64_t started = remote_device_start_browsing_matching();
        _Block_release(v12);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v10 = *(void **)(v0 + 72);
        *(void *)(v0 + 72) = started;
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_10;
      }
    }

    else
    {
      if ((*(_BYTE *)(v0 + 36) & 1) != 0)
      {
        swift_beginAccess();
        uint64_t v18 = sub_18834A440;
        uint64_t v19 = v5;
        uint64_t aBlock = v3;
        uint64_t v15 = 1107296256LL;
        uint64_t v16 = sub_18834A448;
        uint64_t v17 = &block_descriptor_6;
        uint64_t v8 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v9 = remote_device_start_browsing();
        _Block_release(v8);
        uint64_t v10 = *(void **)(v0 + 72);
        *(void *)(v0 + 72) = v9;
        swift_release();
LABEL_10:
        swift_release();

        return;
      }

      xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
      xpc_dictionary_set_value(v6, "AvailableService", 0LL);
      if ((*(_BYTE *)(v0 + 36) & 1) != 0) {
        goto LABEL_4;
      }
    }

    remote_device_type_get_description();
    sub_1883868F0();
    uint64_t v11 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v6, "DeviceType", (const char *)(v11 + 32));
    swift_release();
    goto LABEL_9;
  }

  __break(1u);
}

uint64_t sub_188349F00(uint64_t result)
{
  if ((*(_BYTE *)(result + 88) & 1) != 0)
  {
    unint64_t result = sub_188386CB0();
    __break(1u);
  }

  else
  {
    *(_BYTE *)(result + 88) = 1;
  }

  return result;
}

uint64_t sub_188349F74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_188349F94(void *a1, char a2)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if ((a2 & 1) != 0)
    {
      xpc_object_t v6 = *(void (**)(void *))(Strong + 56);
      aBlock[0] = 0LL;
      v6(aBlock);
    }

    if (a1)
    {
      uint64_t v7 = *(void **)(v5 + 40);
      uint64_t v8 = swift_allocObject();
      swift_weakInit();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      *(void *)(v9 + 24) = a1;
      aBlock[4] = sub_18834A7A0;
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x1895F87A0];
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_188353444;
      aBlock[3] = &block_descriptor_16;
      uint64_t v10 = _Block_copy(aBlock);
      id v11 = a1;
      id v12 = v7;
      swift_release();
      remote_device_set_connected_callback();
      _Block_release(v10);
      swift_release();
    }

    else
    {
      swift_release();
    }
  }

uint64_t sub_18834A0E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    int state = remote_device_get_state();
    swift_beginAccess();
    if (state == dword_18C708554)
    {
      type metadata accessor for RemoteDevice();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = a3;
      uint64_t v8 = *(dispatch_queue_s **)(v5 + 48);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v5;
      *(void *)(v9 + 24) = v7;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_18834A7D4;
      *(void *)(v10 + 24) = v9;
      v15[4] = sub_18834A828;
      v15[5] = v10;
      v15[0] = MEMORY[0x1895F87A0];
      v15[1] = 1107296256LL;
      v15[2] = sub_188349F74;
      v15[3] = &block_descriptor_26;
      id v11 = _Block_copy(v15);
      id v12 = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v8, v11);
      _Block_release(v11);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        unint64_t v14 = *(void (**)(void *))(v5 + 56);
        v15[0] = v7;
        swift_retain();
        v14(v15);
        swift_release();
        swift_release();
        return swift_release_n();
      }
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_18834A2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1895F8860](v4);
  xpc_object_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188353A68((uint64_t)v6);
  remote_device_get_name();
  uint64_t v7 = sub_1883868F0();
  uint64_t v8 = (uint64_t *)&v6[*(int *)(v4 + 20)];
  *uint64_t v8 = v7;
  v8[1] = v9;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0x8000000000000000LL;
  sub_18837DA38(a2, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease();
  sub_18834A7EC((uint64_t)v6);
  return swift_endAccess();
}

uint64_t sub_18834A3CC()
{
  return sub_188349F00(v0);
}

uint64_t sub_18834A3D4()
{
  return swift_deallocObject();
}

uint64_t sub_18834A3E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_18834A41C()
{
  return swift_deallocObject();
}

void sub_18834A440(void *a1, char a2)
{
}

void sub_18834A448(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a2, a3);
  swift_release();
}

void sub_18834A4A8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    *(void *)(v0 + 72) = 0LL;
    id v2 = v1;
    remote_device_browser_cancel();
  }

id *RemoteDeviceBrowser.deinit()
{
  id v1 = v0[9];
  if (v1)
  {
    v0[9] = 0LL;
    remote_device_browser_cancel();
  }

  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteDeviceBrowser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RemoteDeviceBrowser()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteDeviceBrowser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.discoveredDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.connectedDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v3 + 232))( a1,  a2,  a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of RemoteDeviceBrowser.startBrowsing()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

void *initializeBufferWithCopyOfBuffer for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RemoteDeviceBrowser.Event()
{
  return swift_release();
}

void *assignWithCopy for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDeviceBrowser.Event(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RemoteDeviceBrowser.Event( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

uint64_t sub_18834A72C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_18834A744(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteDeviceBrowser.Event()
{
  return &type metadata for RemoteDeviceBrowser.Event;
}

uint64_t sub_18834A774()
{
  return swift_deallocObject();
}

uint64_t sub_18834A7A0(uint64_t a1)
{
  return sub_18834A0E4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_18834A7A8()
{
  return swift_deallocObject();
}

uint64_t sub_18834A7D4()
{
  return sub_18834A2D0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_18834A7DC()
{
  return swift_deallocObject();
}

uint64_t sub_18834A7EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t XPCFileDescriptor.__allocating_init(forReadingFileAt:)(char *a1)
{
  return sub_18834DACC(a1);
}

uint64_t sub_18834A864(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    uint64_t result = sub_1883866D4();
    *a2 = result;
  }

  else
  {
    unint64_t v4 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010LL, 0x800000018838BAB0LL, 0LL, v4, v5);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  return result;
}

id XPCFileDescriptor.WriteOptions.fileProtection.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileProtection.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileProtection.modify())()
{
  return nullsub_1;
}

void *XPCFileDescriptor.WriteOptions.fileSecurity.getter()
{
  id v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileSecurity.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileSecurity.modify())()
{
  return nullsub_1;
}

void XPCFileDescriptor.WriteOptions.init()(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

void XPCFileDescriptor.__allocating_init(forWritingFileAt:options:)(char *a1, uint64_t a2)
{
}

void sub_18834A9DC(const char *a1@<X0>, void *a2@<X1>, __CFFileSecurity *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x1895F89C8];
  uint64_t v8 = sub_188386434();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](v8);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8860](v10);
  unint64_t v14 = &v19[-v13];
  if (a1)
  {
    if (a3)
    {
      mode_t mode = 0;
      if (CFFileSecurityGetMode(a3, &mode)) {
        a3 = (__CFFileSecurity *)sub_188387280();
      }
      else {
        a3 = 0LL;
      }
    }

    int v17 = XPCFileTransfer_open(a1, 1537, a2, 0, a3);

    if ((v17 & 0x80000000) == 0)
    {
      *a4 = v17;
      return;
    }

    int v18 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v18)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v12);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v14, v12, v8);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v14);
    }

    sub_18838641C();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  }

  else
  {
    unint64_t v15 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010LL, 0x800000018838BAB0LL, 0LL, v15, v16);
    swift_bridgeObjectRelease();
  }

  swift_willThrow();
}

uint64_t XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)(int a1, char a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = j__read;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = j__write;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + 48) = j__poll;
  *(void *)(result + 56) = 0LL;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(result + 64) = a1;
    *(_BYTE *)(result + 68) = a2 & 1;
  }

  return result;
}

uint64_t XPCFileDescriptor.init(fileDescriptor:closeWhenDone:)(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = j__read;
  *(void *)(v2 + 24) = 0LL;
  *(void *)(v2 + 32) = j__write;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 48) = j__poll;
  *(void *)(v2 + 56) = 0LL;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v2 + 64) = result;
    *(_BYTE *)(v2 + 68) = a2 & 1;
    return v2;
  }

  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicatingFileDescriptor:)(int a1)
{
  uint64_t result = sub_18834AD04(a1);
  int v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0LL;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0LL;
    if (v3 < 0)
    {
      __break(1u);
    }

    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(_BYTE *)(result + 68) = 1;
    }
  }

  return result;
}

uint64_t sub_18834AD04(int a1)
{
  uint64_t v2 = sub_188386434();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8860](v2);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v4);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = dup(a1);
  if ((v9 & 0x80000000) != 0)
  {
    int v10 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v6);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v6, v2);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_willThrow();
  }

  return v9;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(uint64_t a1)
{
  int v3 = sub_18834AD04(*(_DWORD *)(a1 + 64));
  if (v1)
  {
    swift_release();
    return v2;
  }

  int v4 = v3;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = j__read;
  *(void *)(v2 + 24) = 0LL;
  *(void *)(v2 + 32) = j__write;
  *(void *)(v2 + 40) = 0LL;
  uint64_t result = swift_release();
  *(void *)(v2 + 48) = j__poll;
  *(void *)(v2 + 56) = 0LL;
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(v2 + 64) = v4;
    *(_BYTE *)(v2 + 68) = 1;
    return v2;
  }

  __break(1u);
  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  int v3 = sub_18834AD04((int)objc_msgSend(a1, sel_fileDescriptor));
  if (v1)
  {
  }

  else
  {
    int v4 = v3;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = j__read;
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = j__write;
    *(void *)(v5 + 40) = 0LL;

    *(void *)(v5 + 48) = j__poll;
    *(void *)(v5 + 56) = 0LL;
    if (v4 < 0)
    {
      __break(1u);
    }

    else
    {
      *(_DWORD *)(v5 + 64) = v4;
      *(_BYTE *)(v5 + 68) = 1;
    }
  }

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  uint64_t result = MEMORY[0x1895C3C6C]();
  if (result == XPCTypeFD)
  {
    int v3 = xpc_fd_dup(a1);
    if (v3 < 0)
    {
      unint64_t v5 = sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_1883491B4();
      swift_allocError();
      static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x800000018838B910LL, 0LL, v5, v6);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_unknownObjectRelease();
    }

    else
    {
      int v4 = v3;
      swift_unknownObjectRelease();
      type metadata accessor for XPCFileDescriptor();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = j__read;
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 32) = j__write;
      *(void *)(result + 40) = 0LL;
      *(void *)(result + 48) = j__poll;
      *(void *)(result + 56) = 0LL;
      *(_DWORD *)(result + 64) = v4;
      *(_BYTE *)(result + 68) = 1;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(int a1)
{
  uint64_t result = sub_18834AD04(a1);
  int v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0LL;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0LL;
    if (v3 < 0)
    {
      __break(1u);
    }

    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(_BYTE *)(result + 68) = 1;
    }
  }

  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(__CFFileDescriptor *a1)
{
  CFFileDescriptorNativeDescriptor NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  int v4 = sub_18834AD04(NativeDescriptor);
  if (v1)
  {
  }

  else
  {
    int v5 = v4;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = j__read;
    *(void *)(v6 + 24) = 0LL;
    *(void *)(v6 + 32) = j__write;
    *(void *)(v6 + 40) = 0LL;

    *(void *)(v6 + 48) = j__poll;
    *(void *)(v6 + 56) = 0LL;
    if (v5 < 0)
    {
      __break(1u);
    }

    else
    {
      *(_DWORD *)(v6 + 64) = v5;
      *(_BYTE *)(v6 + 68) = 1;
    }
  }

uint64_t static XPCFileDescriptor.createPipe()()
{
  return sub_18834D8D4();
}

char *static XPCFileDescriptor.createPseudoterminal(terminalParameters:windowSize:)( uint64_t a1, tcflag_t a2, int a3)
{
  int v64 = a3;
  tcflag_t v62 = a2;
  uint64_t v75 = *MEMORY[0x1895F89C8];
  sub_18834DED0(a1, (uint64_t)v70);
  tcflag_t v58 = v70[1];
  tcflag_t v59 = v70[0];
  uint64_t v4 = v70[4];
  tcflag_t v56 = v70[3];
  tcflag_t v57 = v70[2];
  uint64_t v6 = v70[5];
  int v5 = v71;
  speed_t v60 = v73;
  speed_t v61 = v72;
  uint64_t v63 = sub_188386434();
  uint64_t v65 = *(void *)(v63 - 8);
  uint64_t v7 = MEMORY[0x1895F8860](v63);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8860](v7);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = MEMORY[0x1895F8860](v10);
  unint64_t v15 = (char *)&v52 - v14;
  uint64_t v16 = MEMORY[0x1895F8860](v13);
  int v18 = (char *)&v52 - v17;
  uint64_t v19 = MEMORY[0x1895F8860](v16);
  uint64_t v53 = (uint64_t)&v52 - v20;
  uint64_t v21 = MEMORY[0x1895F8860](v19);
  uint64_t v55 = (char *)&v52 - v22;
  uint64_t v23 = MEMORY[0x1895F8860](v21);
  uint64_t v52 = (uint64_t)&v52 - v24;
  MEMORY[0x1895F8860](v23);
  unint64_t v54 = (char *)&v52 - v25;
  sub_18834DED0(a1, (uint64_t)v74);
  if ((v74[72] & 1) == 0)
  {
    v69.int c_iflag = v59;
    v69.c_oflag = v58;
    v69.c_cflag = v57;
    v69.c_lflag = v56;
    *(void *)v69.c_cc = v4;
    *(void *)&v69.c_cc[8] = v6;
    *(_DWORD *)&v69.c_cc[16] = v5;
    v69.c_ispeed = v61;
    v69.c_ospeed = v60;
    if ((v64 & 1) != 0)
    {
      LODWORD(v67) = -1;
      int v68 = -1;
      int v37 = openpty((int *)&v67, &v68, 0LL, &v69, 0LL);
      uint64_t v12 = (char *)v63;
      uint64_t v30 = v65;
      if (!v37) {
        goto LABEL_26;
      }
      int v38 = MEMORY[0x1895C24B4]();
      sub_1883476E8(MEMORY[0x18961AFE8]);
      if (v38)
      {
        uint64_t v39 = v53;
        POSIXError.init(uncheckedCode:userInfo:)(v38, v53);
        int v18 = v55;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v55, v39, v12);
        goto LABEL_36;
      }

      int v18 = v55;
    }

    else
    {
      tcflag_t v67 = v62;
      int v68 = -1;
      int v66 = -1;
      int v29 = openpty(&v68, &v66, 0LL, &v69, (winsize *)&v67);
      uint64_t v12 = (char *)v63;
      uint64_t v30 = v65;
      if (!v29) {
        goto LABEL_20;
      }
      int v31 = MEMORY[0x1895C24B4]();
      sub_1883476E8(MEMORY[0x18961AFE8]);
      if (v31)
      {
        uint64_t v32 = v52;
        POSIXError.init(uncheckedCode:userInfo:)(v31, v52);
        int v18 = v54;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v54, v32, v12);
LABEL_36:
        sub_18838641C();
        uint64_t v50 = *(void (**)(char *, char *))(v30 + 8);
LABEL_37:
        v50(v18, v12);
LABEL_38:
        swift_willThrow();
        return v12;
      }

      int v18 = v54;
    }

    POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v18);
    goto LABEL_36;
  }

  if ((v64 & 1) != 0)
  {
    LODWORD(v69.c_iflag) = -1;
    LODWORD(v67) = -1;
    int v33 = openpty((int *)&v69, (int *)&v67, 0LL, 0LL, 0LL);
    uint64_t v34 = v65;
    if (v33)
    {
      int v35 = MEMORY[0x1895C24B4]();
      sub_1883476E8(MEMORY[0x18961AFE8]);
      if (v35)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v35, (uint64_t)v9);
        uint64_t v36 = v63;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v9, v63);
      }

      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v12);
        uint64_t v36 = v63;
      }

      sub_18838641C();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v36);
      goto LABEL_38;
    }

    goto LABEL_23;
  }

  v69.int c_iflag = v62;
  LODWORD(v67) = -1;
  int v68 = -1;
  int v26 = openpty((int *)&v67, &v68, 0LL, 0LL, (winsize *)&v69);
  uint64_t v27 = v65;
  if (v26)
  {
    int v28 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v28)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v28, (uint64_t)v15);
      uint64_t v12 = (char *)v63;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v18, v15, v63);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v18);
      uint64_t v12 = (char *)v63;
    }

    sub_18838641C();
    uint64_t v50 = *(void (**)(char *, char *))(v27 + 8);
    goto LABEL_37;
  }

  int v40 = v67;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = j__read;
  *(void *)(v41 + 24) = 0LL;
  *(void *)(v41 + 32) = j__write;
  *(void *)(v41 + 40) = 0LL;
  *(void *)(v41 + 48) = j__poll;
  *(void *)(v41 + 56) = 0LL;
  if (v40 < 0)
  {
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v12 = (char *)v41;
  *(_DWORD *)(v41 + 64) = v40;
  *(_BYTE *)(v41 + 68) = 1;
  int v42 = v68;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = j__read;
  *(void *)(v43 + 24) = 0LL;
  *(void *)(v43 + 32) = j__write;
  *(void *)(v43 + 40) = 0LL;
  *(void *)(v43 + 48) = j__poll;
  *(void *)(v43 + 56) = 0LL;
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_20:
  int v44 = v68;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = j__read;
  *(void *)(v45 + 24) = 0LL;
  *(void *)(v45 + 32) = j__write;
  *(void *)(v45 + 40) = 0LL;
  *(void *)(v45 + 48) = j__poll;
  *(void *)(v45 + 56) = 0LL;
  if (v44 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v12 = (char *)v45;
  *(_DWORD *)(v45 + 64) = v44;
  *(_BYTE *)(v45 + 68) = 1;
  int v42 = v66;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = j__read;
  *(void *)(v43 + 24) = 0LL;
  *(void *)(v43 + 32) = j__write;
  *(void *)(v43 + 40) = 0LL;
  *(void *)(v43 + 48) = j__poll;
  *(void *)(v43 + 56) = 0LL;
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_23:
  int c_iflag = v69.c_iflag;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = j__read;
  *(void *)(v47 + 24) = 0LL;
  *(void *)(v47 + 32) = j__write;
  *(void *)(v47 + 40) = 0LL;
  *(void *)(v47 + 48) = j__poll;
  *(void *)(v47 + 56) = 0LL;
  if (c_iflag < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v12 = (char *)v47;
  *(_DWORD *)(v47 + 64) = c_iflag;
  *(_BYTE *)(v47 + 68) = 1;
  int v42 = v67;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = j__read;
  *(void *)(v43 + 24) = 0LL;
  *(void *)(v43 + 32) = j__write;
  *(void *)(v43 + 40) = 0LL;
  *(void *)(v43 + 48) = j__poll;
  *(void *)(v43 + 56) = 0LL;
  if (v42 < 0)
  {
    __break(1u);
LABEL_26:
    int v48 = v67;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = j__read;
    *(void *)(v49 + 24) = 0LL;
    *(void *)(v49 + 32) = j__write;
    *(void *)(v49 + 40) = 0LL;
    *(void *)(v49 + 48) = j__poll;
    *(void *)(v49 + 56) = 0LL;
    if ((v48 & 0x80000000) == 0)
    {
      uint64_t v12 = (char *)v49;
      *(_DWORD *)(v49 + 64) = v48;
      *(_BYTE *)(v49 + 68) = 1;
      int v42 = v68;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = j__read;
      *(void *)(v43 + 24) = 0LL;
      *(void *)(v43 + 32) = j__write;
      *(void *)(v43 + 40) = 0LL;
      *(void *)(v43 + 48) = j__poll;
      *(void *)(v43 + 56) = 0LL;
      if ((v42 & 0x80000000) == 0) {
        goto LABEL_28;
      }
LABEL_44:
      __break(1u);
    }

LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

LABEL_28:
  *(_DWORD *)(v43 + 64) = v42;
  *(_BYTE *)(v43 + 68) = 1;
  return v12;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t XPCFileDescriptor.deinit()
{
  if (*(_BYTE *)(v0 + 68) == 1) {
    close(*(_DWORD *)(v0 + 64));
  }
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t XPCFileDescriptor.__deallocating_deinit()
{
  if (*(_BYTE *)(v0 + 68) == 1) {
    close(*(_DWORD *)(v0 + 64));
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_18834B924@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_18834E494;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_18834B998(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 16) = sub_18834E490;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_18834BA1C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t sub_18834BA64(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*sub_18834BAB4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_18834BAF4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_18834E494;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_18834BB68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 32) = sub_18834E490;
  *(void *)(v6 + 40) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_18834BBEC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t sub_18834BC34(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_release();
}

uint64_t (*sub_18834BC84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_18834BCC4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_18834E45C;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_18834BD38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 48) = sub_18834E418;
  *(void *)(v6 + 56) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_18834BDBC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t sub_18834BE04(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_release();
}

uint64_t (*sub_18834BE54())()
{
  return j__swift_endAccess;
}

uint64_t sub_18834BE94(uint64_t (*a1)(void))
{
  return a1(*(unsigned int *)(v1 + 64));
}

uint64_t sub_18834BEBC()
{
  uint64_t v1 = sub_188386434();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8860](v1);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = dup(*(_DWORD *)(v0 + 64));
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v1);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v7);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    swift_willThrow();
  }

  return v8;
}

uint64_t sub_18834BFD0()
{
  uint64_t v1 = sub_188386434();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8860](v1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8860](v3);
  uint64_t v8 = (char *)&v10 - v7;
  if ((*(_BYTE *)(v0 + 68) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = close(*(_DWORD *)(v0 + 64));
    if ((_DWORD)result)
    {
      int v9 = MEMORY[0x1895C24B4]();
      sub_1883476E8(MEMORY[0x18961AFE8]);
      if (v9)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v5, v1);
      }

      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
      }

      sub_18838641C();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      return swift_willThrow();
    }
  }

  return result;
}

uint64_t sub_18834C0E0(uint64_t a1)
{
  uint64_t v3 = sub_188386434();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  int v9 = (char *)v12 - v8;
  uint64_t result = MEMORY[0x1895C24C0](*(unsigned int *)(v1 + 64), 4LL, a1);
  if ((_DWORD)result)
  {
    int v11 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_18834C1F8(unsigned __int8 *a1)
{
  int v1 = *a1;
  int v2 = sub_188386704();
  if (v1 == 1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_18834C0E0(v3);
}

uint64_t sub_18834C26C()
{
  return (sub_188386704() >> 2) & 1;
}

uint64_t sub_18834C28C(char a1)
{
  int v2 = sub_188386704();
  if ((a1 & 1) != 0) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_18834C0E0(v3);
}

uint64_t (*sub_18834C2F8(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 64);
  *(_BYTE *)(a1 + 12) = (sub_188386704() & 4) != 0;
  return sub_18834C33C;
}

uint64_t sub_18834C33C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 12);
  int v2 = sub_188386704();
  if (v1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_18834C0E0(v3);
}

uint64_t sub_18834C3B4(char a1)
{
  int v2 = sub_188386704();
  if ((a1 & 1) != 0) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_18834C0E0(v3);
}

BOOL sub_18834C3F8()
{
  return sub_188386704() == 0;
}

void sub_18834C41C(char a1)
{
  uint64_t v3 = sub_188386434();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](v3);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8860](v5);
  int v9 = &v12[-v8];
  if (MEMORY[0x1895C24C0](*(unsigned int *)(v1 + 64), 73LL, (a1 & 1) == 0))
  {
    int v10 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v7);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v9, v7, v3);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }

    int v11 = (void *)sub_18838641C();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
    swift_willThrow();
  }

void (*sub_18834C530(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_188386704() == 0;
  return sub_18834C574;
}

void sub_18834C574(uint64_t a1)
{
}

uint64_t sub_18834C598(char a1)
{
  uint64_t v3 = sub_188386434();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  int v9 = (char *)v12 - v8;
  uint64_t result = MEMORY[0x1895C24C0](*(unsigned int *)(v1 + 64), 73LL, (a1 & 1) == 0);
  if ((_DWORD)result)
  {
    int v11 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_18834C6B4@<X0>(char *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D38);
  MEMORY[0x1895F8860](v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(unsigned int *)(v1 + 64);
  uint64_t v7 = swift_slowAlloc();
  int v8 = MEMORY[0x1895C24CC](v6, 50LL, v7);
  uint64_t v9 = sub_18838656C();
  int v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  if (v8 == -1)
  {
    v10(a1, 1LL, 1LL, v9);
    JUMPOUT(0x1895C3834LL);
  }

  v10(v5, 1LL, 1LL, v9);
  sub_188386554();
  sub_18834DF18((uint64_t)v5);
  v10(a1, 0LL, 1LL, v9);
  return MEMORY[0x1895C3834](v7, -1LL, -1LL);
}

uint64_t sub_18834C7EC(uint64_t a1)
{
  if (!swift_dynamicCast())
  {
    unint64_t v5 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003DLL, 0x800000018838B940LL, 0LL, v5, v6);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v2 = *(void *)(v14 + 24);
  if (v2)
  {
    type metadata accessor for RemoteXPCConnection();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      unint64_t v3 = sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_1883491B4();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000006FLL, 0x800000018838B9C0LL, v2, v3, v4);
LABEL_10:
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
  }

  int v8 = *(_DWORD *)(v1 + 64);
  swift_retain();
  xpc_object_t v9 = xpc_fd_create(v8);
  if (!v9)
  {
    unint64_t v12 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000003DLL, 0x800000018838B980LL, v2, v12, v13);
    goto LABEL_10;
  }

  xpc_object_t v10 = v9;
  uint64_t v11 = *(void *)(v14 + 32);
  v15[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  v15[4] = sub_188344510();
  v15[0] = v14;
  v15[1] = v11;
  uint64_t result = __swift_mutable_project_boxed_opaque_existential_1( (uint64_t)v15,  (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
  if (*(void *)(*(void *)result + 16LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(*(void *)result + 16LL) = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }

  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileDescriptor.init(from:)(a1);
  return v2;
}

uint64_t XPCFileDescriptor.init(from:)(void *a1)
{
  *(void *)(v1 + 16) = j__read;
  *(void *)(v1 + 24) = 0LL;
  *(void *)(v1 + 32) = j__write;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 48) = j__poll;
  *(void *)(v1 + 56) = 0LL;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18838728C();
  if (v2) {
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  sub_18834DF7C();
  sub_188386FEC();
  uint64_t v4 = MEMORY[0x1895C3C6C](v14[0]);
  if (v4 != XPCTypeFD)
  {
    unint64_t v5 = (const _xpc_type_s *)v4;
    sub_188349220((uint64_t)a1, (uint64_t)v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708990);
    type metadata accessor for _XPCObjectDecoder();
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v6 = *(void *)(v15[6] + 24LL);
      swift_retain();
      swift_release();
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    unint64_t v9 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.invalidType(_:expecting:from:userInfo:)(v5, 0LL, v6, v9, v10);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
    goto LABEL_10;
  }

  int v7 = xpc_fd_dup(v14[0]);
  if (v7 < 0)
  {
    unint64_t v12 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x800000018838B910LL, 0LL, v12, v13);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_11:
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for XPCFileDescriptor();
    swift_deallocPartialClassInstance();
    goto LABEL_12;
  }

  int v8 = v7;
  swift_unknownObjectRelease();
  *(_DWORD *)(v1 + 64) = v8;
  *(_BYTE *)(v1 + 68) = 1;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_12:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

uint64_t sub_18834CD60()
{
  uint64_t v1 = *v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D38);
  uint64_t v3 = MEMORY[0x1895F8860](v2);
  unint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v3);
  int v7 = (char *)v31 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_188389170;
  v31[1] = v1;
  swift_getMetatypeMetadata();
  uint64_t v9 = sub_18838689C();
  uint64_t v11 = v10;
  uint64_t v12 = MEMORY[0x189617FA8];
  *(void *)(v8 + 56) = MEMORY[0x189617FA8];
  unint64_t v13 = sub_18834DFC0();
  unint64_t v14 = v13;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  uint64_t v15 = MEMORY[0x189619430];
  *(void *)(v8 + 96) = MEMORY[0x189619420];
  *(void *)(v8 + 104) = v15;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = v0;
  uint64_t v16 = *((unsigned int *)v0 + 16);
  uint64_t v17 = MEMORY[0x18961A4A0];
  *(void *)(v8 + 136) = MEMORY[0x18961A458];
  *(void *)(v8 + 144) = v17;
  *(_DWORD *)(v8 + 112) = v16;
  uint64_t v18 = 1702195828LL;
  if (!*((_BYTE *)v0 + 68)) {
    uint64_t v18 = 0x65736C6166LL;
  }
  unint64_t v19 = 0xE500000000000000LL;
  if (*((_BYTE *)v0 + 68)) {
    unint64_t v19 = 0xE400000000000000LL;
  }
  *(void *)(v8 + 176) = v12;
  *(void *)(v8 + 184) = v13;
  *(void *)(v8 + 152) = v18;
  *(void *)(v8 + 160) = v19;
  uint64_t v20 = swift_slowAlloc();
  int v21 = MEMORY[0x1895C24CC](v16, 50LL, v20);
  uint64_t v22 = sub_18838656C();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v21 == -1)
  {
    uint64_t v25 = 1LL;
  }

  else
  {
    v24(v5, 1LL, 1LL, v22);
    sub_188386554();
    sub_18834DF18((uint64_t)v5);
    uint64_t v25 = 0LL;
  }

  v24(v7, v25, 1LL, v22);
  MEMORY[0x1895C3834](v20, -1LL, -1LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1LL, v22) == 1)
  {
    sub_18834DF18((uint64_t)v7);
    int v26 = (uint64_t *)(v8 + 192);
    *(void *)(v8 + 216) = v12;
    *(void *)(v8 + 224) = v14;
LABEL_12:
    *int v26 = 0x29656E6F6E28LL;
    unint64_t v29 = 0xE600000000000000LL;
    goto LABEL_13;
  }

  uint64_t v27 = sub_188386560();
  unint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
  int v26 = (uint64_t *)(v8 + 192);
  *(void *)(v8 + 216) = v12;
  *(void *)(v8 + 224) = v14;
  if (!v29) {
    goto LABEL_12;
  }
  *int v26 = v27;
LABEL_13:
  *(void *)(v8 + 200) = v29;
  return sub_18838686C();
}

uint64_t sub_18834CFF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCFileDescriptor.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_18834D04C(uint64_t a1)
{
  return sub_18834C7EC(a1);
}

uint64_t sub_18834D06C()
{
  return sub_18834CD60();
}

uint64_t sub_18834D08C(uint64_t a1, char a2, char a3, uint64_t a4, int a5)
{
  int v45 = a5;
  uint64_t v10 = sub_188386434();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8860](v10);
  uint64_t v37 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8860](v12);
  uint64_t v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0) {
    int v17 = 251;
  }
  else {
    int v17 = 56;
  }
  if ((a3 & 1) != 0) {
    v17 |= 0x104u;
  }
  int64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = (void *)MEMORY[0x18961AFE8];
  if (v18)
  {
    uint64_t v38 = a4;
    uint64_t v39 = v5;
    int v40 = (char *)&v37 - v15;
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    uint64_t v43 = (void *)MEMORY[0x18961AFE8];
    int v44 = v17;
    uint64_t result = sub_1883722E4(0, v18, 0);
    __int16 v20 = v44;
    uint64_t v21 = 0LL;
    unint64_t v19 = v43;
    uint64_t v22 = a1 + 32;
    uint64_t v23 = v43[2];
    uint64_t v24 = v23;
    do
    {
      int v25 = *(_DWORD *)(v22 + 4 * v21);
      uint64_t v43 = v19;
      unint64_t v26 = v19[3];
      uint64_t v27 = v23 + v21 + 1;
      if (v23 + v21 >= v26 >> 1)
      {
        uint64_t result = sub_1883722E4(v26 > 1, v23 + v21 + 1, 1);
        __int16 v20 = v44;
        unint64_t v19 = v43;
      }

      ++v21;
      v19[2] = v27;
      unint64_t v28 = &v19[v24];
      *((_DWORD *)v28 + 8) = v25;
      *((_WORD *)v28 + 18) = v20;
      *((_WORD *)v28 + 19) = 0;
      ++v24;
    }

    while (v18 != v21);
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    uint64_t v5 = v39;
    uint64_t v16 = v40;
    a4 = v38;
  }

  if ((v45 & 1) == 0)
  {
    double v29 = *(double *)&a4 * 1000.0;
    if ((~COERCE__INT64(*(double *)&a4 * 1000.0) & 0x7FF0000000000000LL) != 0)
    {
      if (v29 > -2147483650.0)
      {
        if (v29 < 2147483650.0)
        {
          uint64_t v30 = (int)v29;
          goto LABEL_18;
        }

LABEL_31:
        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_31;
  }

  uint64_t v30 = 100LL;
LABEL_18:
  swift_beginAccess();
  int v31 = *(uint64_t (**)(void *, unint64_t, uint64_t))(v5 + 48);
  unint64_t v32 = v19[2];
  if (HIDWORD(v32))
  {
    swift_retain();
    unint64_t v32 = 0xFFFFFFFFLL;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_20:
  }
    unint64_t v19 = sub_188371490(0LL, v19[2], 0, v19);
LABEL_21:
  swift_bridgeObjectRetain();
  int v33 = v31(v19 + 4, v32, v30);
  swift_bridgeObjectRelease();
  swift_release();
  if (v33 < 0)
  {
    uint64_t v34 = swift_bridgeObjectRelease();
    int v35 = MEMORY[0x1895C24B4](v34);
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v35)
    {
      uint64_t v36 = v37;
      POSIXError.init(uncheckedCode:userInfo:)(v35, v37);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v16, v36, v10);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v16);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    swift_willThrow();
  }

  return (uint64_t)v19;
}

void *XPCFileDescriptor.read(into:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18834D614( a1,  a2,  a3,  (void *(*)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_18834D3CC);
}

uint64_t sub_18834D3CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v27 = a5;
  unint64_t v28 = a6;
  uint64_t v26 = sub_188386434();
  uint64_t v10 = *(void *)(v26 - 8);
  uint64_t v11 = MEMORY[0x1895F8860](v26);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t result = swift_beginAccess();
  if (a3)
  {
    int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16);
    swift_retain();
    uint64_t v18 = v17(a1, a3, a4 - a3);
    uint64_t result = swift_release();
    if (!v18)
    {
      uint64_t v19 = 0LL;
      goto LABEL_6;
    }

    if ((v18 & 0x8000000000000000LL) == 0)
    {
      uint64_t v19 = v18;
LABEL_6:
      __int16 v20 = v28;
      *unint64_t v28 = v19;
      *((_BYTE *)v20 + 8) = v18 == 0;
      return result;
    }

    if ((v27 & 1) != 0 && ((uint64_t result = MEMORY[0x1895C24B4](result), (_DWORD)result == 35) || (_DWORD)result == 4))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708890);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1883883A0;
      *(_DWORD *)(inited + 32) = a1;
      uint64_t v22 = v29;
      sub_18834D08C(inited, 1, 0, 0LL, 1);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_setDeallocating();
        uint64_t v19 = 0LL;
        goto LABEL_6;
      }

      return swift_setDeallocating();
    }

    else
    {
      int v23 = MEMORY[0x1895C24B4](result);
      sub_1883476E8(MEMORY[0x18961AFE8]);
      if (v23)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v23, (uint64_t)v13);
        uint64_t v24 = v26;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v26);
      }

      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v15);
        uint64_t v24 = v26;
      }

      sub_18838641C();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v24);
      return swift_willThrow();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *XPCFileDescriptor.write(from:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18834D614( a1,  a2,  a3,  (void *(*)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_18834D660);
}

void *sub_18834D614( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  uint64_t result = a4(&v7, *(unsigned int *)(v4 + 64), v4, a1, a2, a3, *(void *)v4);
  if (!v5) {
    return (void *)v7;
  }
  return result;
}

uint64_t sub_18834D660@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = sub_188386434();
  uint64_t v10 = *(void *)(v32 - 8);
  uint64_t v11 = MEMORY[0x1895F8860](v32);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t result = swift_beginAccess();
  if (!a3) {
    goto LABEL_28;
  }
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  swift_retain();
  uint64_t v18 = v17(a1, a3, a4 - a3);
  uint64_t result = swift_release();
  if (!v18)
  {
    LOBYTE(v19) = 1;
    goto LABEL_6;
  }

  if ((v18 & 0x8000000000000000LL) == 0)
  {
    LOBYTE(v19) = 0;
LABEL_6:
    __int16 v20 = v34;
    *uint64_t v34 = v18;
    *((_BYTE *)v20 + 8) = v19;
    return result;
  }

  if ((v33 & 1) != 0 && ((uint64_t result = MEMORY[0x1895C24B4](result), (_DWORD)result == 35) || (_DWORD)result == 4))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708890);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(_DWORD *)(inited + 32) = a1;
    uint64_t v22 = v35;
    uint64_t v23 = sub_18834D08C(inited, 0, 1, 0LL, 1);
    uint64_t result = swift_setDeallocating();
    if (!v22)
    {
      uint64_t v24 = *(void *)(v23 + 16);
      if (!v24) {
        goto LABEL_15;
      }
      if ((*(_WORD *)(v23 + 38) & 0x10) != 0)
      {
        LOBYTE(v19) = 1;
        goto LABEL_21;
      }

      if (v24 == 1)
      {
LABEL_15:
        LOBYTE(v19) = 0;
LABEL_21:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = 0LL;
        goto LABEL_6;
      }

      int v27 = (unsigned __int16 *)(v23 + 46);
      uint64_t v28 = 1LL;
      while (1)
      {
        uint64_t v29 = v28 + 1;
        if (__OFADD__(v28, 1LL)) {
          break;
        }
        unsigned int v30 = *v27;
        v27 += 4;
        int v19 = (v30 >> 4) & 1;
        if ((v30 & 0x10) == 0)
        {
          ++v28;
          if (v29 != v24) {
            continue;
          }
        }

        goto LABEL_21;
      }

      __break(1u);
LABEL_28:
      __break(1u);
    }
  }

  else
  {
    int v25 = MEMORY[0x1895C24B4](result);
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v25)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v25, (uint64_t)v13);
      uint64_t v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v32);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v15);
      uint64_t v26 = v32;
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v26);
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_18834D8D4()
{
  uint64_t v0 = sub_188386434();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8860](v0);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v2);
  uint64_t v6 = (char *)v14 - v5;
  uint64_t v7 = sub_1883869F8();
  *(void *)(v7 + 16) = 2LL;
  *(void *)(v7 + 32) = -1LL;
  uint64_t result = pipe((int *)(v7 + 32));
  if ((_DWORD)result)
  {
    int v9 = MEMORY[0x1895C24B4]();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v4);
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v4, v0);
    }

    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v6);
    }

    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_13;
  }

  int v11 = *(_DWORD *)(v7 + 32);
  type metadata accessor for XPCFileDescriptor();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = j__read;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = j__write;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + 48) = j__poll;
  *(void *)(result + 56) = 0LL;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = (char *)result;
  *(_DWORD *)(result + 64) = v11;
  *(_BYTE *)(result + 68) = 1;
  if (v10 < 2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  int v12 = *(_DWORD *)(v7 + 36);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = j__read;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = j__write;
  *(void *)(v13 + 40) = 0LL;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v13 + 48) = j__poll;
  *(void *)(v13 + 56) = 0LL;
  if ((v12 & 0x80000000) == 0)
  {
    *(_DWORD *)(v13 + 64) = v12;
    *(_BYTE *)(v13 + 68) = 1;
    return (uint64_t)v6;
  }

LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_18834DACC(char *a1)
{
  uint64_t v22 = sub_188386434();
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = MEMORY[0x1895F8860](v22);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = sub_18838656C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8860](v9);
  int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  char v13 = sub_18838653C();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t result = v14(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  int v23 = -1;
  MEMORY[0x1895F8860](result);
  *(&v21 - 2) = (uint64_t)&v23;
  uint64_t v16 = sub_188386548();
  if (v1) {
    return v14(a1, v9);
  }
  if ((v23 & 0x80000000) == 0)
  {
    v14(a1, v9);
    int v17 = v23;
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0LL;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0LL;
    if ((v17 & 0x80000000) == 0)
    {
      *(_DWORD *)(result + 64) = v17;
      *(_BYTE *)(result + 68) = 1;
      return result;
    }

    goto LABEL_12;
  }

  int v18 = MEMORY[0x1895C24B4](v16);
  sub_1883476E8(MEMORY[0x18961AFE8]);
  if (v18)
  {
    POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v6);
    int v19 = v6;
    uint64_t v20 = v22;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v19, v22);
  }

  else
  {
    POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    uint64_t v20 = v22;
  }

  sub_18838641C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v20);
  swift_willThrow();
  return v14(a1, v9);
}

void sub_18834DD30(char *a1, uint64_t a2)
{
  uint64_t v5 = sub_18838656C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void **)a2;
  uint64_t v9 = *(void **)(a2 + 8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, v5);
  LOBYTE(a2) = sub_18838653C();
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v12 = v11(v8, v5);
  if ((a2 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }

  MEMORY[0x1895F8860](v12);
  *(void *)&v15[-4] = v10;
  *(void *)&v15[-2] = v9;
  sub_188386548();
  if (v2)
  {
    v11(a1, v5);

    return;
  }

  v11(a1, v5);

  int v13 = v15[3];
  type metadata accessor for XPCFileDescriptor();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = j__read;
  *(void *)(v14 + 24) = 0LL;
  *(void *)(v14 + 32) = j__write;
  *(void *)(v14 + 40) = 0LL;
  *(void *)(v14 + 48) = j__poll;
  *(void *)(v14 + 56) = 0LL;
  if (v13 < 0) {
    goto LABEL_8;
  }
  *(_DWORD *)(v14 + 64) = v13;
  *(_BYTE *)(v14 + 68) = 1;
}

uint64_t type metadata accessor for XPCFileDescriptor()
{
  return objc_opt_self();
}

uint64_t sub_18834DED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_18834DF18(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_18834DF7C()
{
  unint64_t result = qword_18C708980;
  if (!qword_18C708980)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCObjectContainer,  &type metadata for XPCObjectContainer);
    atomic_store(result, (unint64_t *)&qword_18C708980);
  }

  return result;
}

unint64_t sub_18834DFC0()
{
  unint64_t result = qword_18C4E77D0;
  if (!qword_18C4E77D0)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189607190], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C4E77D0);
  }

  return result;
}

uint64_t sub_18834E01C@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = sub_188386704();
  *a1 = (result & 4) != 0;
  return result;
}

uint64_t sub_18834E054@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = sub_188386704();
  *a1 = (_DWORD)result == 0;
  return result;
}

void sub_18834E08C(char *a1)
{
}

uint64_t method lookup function for XPCFileDescriptor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.withUnsafeUnderlyingFileDescriptor<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.duplicate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setBlocking(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setSignalling(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.url.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of XPCFileDescriptor.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

void *initializeBufferWithCopyOfBuffer for XPCFileDescriptor.WriteOptions(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for XPCFileDescriptor.WriteOptions(id *a1)
{
}

uint64_t assignWithCopy for XPCFileDescriptor.WriteOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for XPCFileDescriptor.WriteOptions(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileDescriptor.WriteOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileDescriptor.WriteOptions( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCFileDescriptor.WriteOptions()
{
  return &type metadata for XPCFileDescriptor.WriteOptions;
}

uint64_t sub_18834E3F4()
{
  return swift_deallocObject();
}

uint64_t sub_18834E418(uint64_t a1, int a2, int a3)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *, int *, char *);
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *, int *, char *))(v3 + 16);
  uint64_t v8 = a1;
  HIDWORD(v6) = a3;
  uint64_t v7 = a2;
  v4(&v6, &v8, &v7, (char *)&v6 + 4);
  return v6;
}

uint64_t sub_18834E45C@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_18834E498(int a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *))(v3 + 16);
  id v9 = a1;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v4(&v6, &v9, &v8, &v7);
  return v6;
}

uint64_t sub_18834E4DC@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

void sub_18834E510(const char *a1@<X0>, _DWORD *a2@<X8>)
{
}

uint64_t sub_18834E528(uint64_t a1)
{
  return sub_18834A864(a1, *(_DWORD **)(v1 + 16));
}

uint64_t static TypeUtils.typeName(_:)()
{
  return sub_1883872E0();
}

BOOL static TypeUtils.NominalTypeKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TypeUtils.NominalTypeKind.hash(into:)()
{
  return sub_188387250();
}

uint64_t TypeUtils.NominalTypeKind.hashValue.getter()
{
  return sub_188387268();
}

BOOL sub_18834E5E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18834E5F8()
{
  return sub_188387268();
}

uint64_t sub_18834E63C()
{
  return sub_188387250();
}

uint64_t sub_18834E664()
{
  return sub_188387268();
}

unint64_t sub_18834E6A8()
{
  unint64_t result = qword_18C7080F0;
  if (!qword_18C7080F0)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for TypeUtils.NominalTypeKind,  &type metadata for TypeUtils.NominalTypeKind);
    atomic_store(result, (unint64_t *)&qword_18C7080F0);
  }

  return result;
}

ValueMetadata *type metadata accessor for TypeUtils()
{
  return &type metadata for TypeUtils;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TypeUtils.NominalTypeKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    uint64_t v12 = objc_msgSend( objc_allocWithZone(MEMORY[0x189607AB8]),  sel_initWithUUIDBytes_,  xpc_uuid_get_bytes((xpc_object_t)isEscapingClosureAtFileLocation));
    uint64_t aBlock = 0LL;
    uint64_t v26 = 0xE000000000000000LL;
    sub_188386BB4();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0x72756372654D5F5FLL;
    uint64_t v26 = 0xEF5F444955555F79LL;
    int v13 = objc_msgSend(v12, sel_UUIDString);
    sub_188386860();

    sub_1883868E4();
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_18838683C();

    swift_bridgeObjectRelease();
    return (id)v14;
  }

  unint64_t result = (id)xpc_string_get_string_ptr((xpc_object_t)isEscapingClosureAtFileLocation);
  if (result)
  {
    char isEscapingClosureAtFileLocation = (uint64_t)result;
    sub_188386878();
    uint64_t v10 = sub_188386884();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = objc_msgSend( objc_allocWithZone(NSString),  sel_initWithCString_encoding_,  isEscapingClosureAtFileLocation,  v10);
    if (v11) {
      return v11;
    }
    __break(1u);
    goto LABEL_17;
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  swift_bridgeObjectRetain();
  int v4 = sub_188386CBC();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_5:
  if (v4 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0LL; i != v4; ++i)
  {
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      unsigned int v6 = MEMORY[0x1895C29AC](i, v2);
    }

    else
    {
      unsigned int v6 = *(void *)(v2 + 8 * i + 32);
      swift_retain();
    }

    BOOL v7 = *(_DWORD *)(v6 + 64);
    memset(&v14, 0, 28);
    memset(&v14.st_atimespec, 0, 112);
    int v8 = fstat(v7, &v14);
    swift_release();
    st_blksize = v14.st_blksize;
    if (v1 > v14.st_blksize) {
      st_blksize = v1;
    }
    if (!v8) {
      uint64_t v1 = st_blksize;
    }
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeUtils.NominalTypeKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18834E7E4 + 4 * byte_18838927D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18834E818 + 4 * asc_188389278[v4]))();
}

uint64_t sub_18834E818(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18834E820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18834E828LL);
  }
  return result;
}

uint64_t sub_18834E834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18834E83CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18834E840(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18834E848(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18834E854(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_18834E85C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TypeUtils.NominalTypeKind()
{
  return &type metadata for TypeUtils.NominalTypeKind;
}

uint64_t NSFileHandle.url.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D38);
  MEMORY[0x1895F8860](v3);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = objc_msgSend(v1, sel_fileDescriptor);
  uint64_t v7 = swift_slowAlloc();
  int v8 = MEMORY[0x1895C24CC](v6, 50LL, v7);
  uint64_t v9 = sub_18838656C();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  if (v8 == -1)
  {
    v10(a1, 1LL, 1LL, v9);
    JUMPOUT(0x1895C3834LL);
  }

  v10(v5, 1LL, 1LL, v9);
  sub_188386554();
  sub_18834DF18((uint64_t)v5);
  v10(a1, 0LL, 1LL, v9);
  return MEMORY[0x1895C3834](v7, -1LL, -1LL);
}

uint64_t sub_18834E9BC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18834E9E8 + 4 * byte_188389330[*v0]))( 0x6E69616D6F64LL,  0xE600000000000000LL);
}

uint64_t sub_18834E9E8()
{
  return 1701080931LL;
}

uint64_t sub_18834E9F8()
{
  return 0x6F666E4972657375LL;
}

unint64_t sub_18834EA10()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_18834EA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_18835200C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18834EA50()
{
  return 0LL;
}

void sub_18834EA5C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_18834EA68()
{
  return sub_1883872C8();
}

uint64_t sub_18834EA90()
{
  return sub_1883872D4();
}

uint64_t sub_18834EAB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_18834EAC0(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t sub_18834EAC8()
{
  return sub_1883872C8();
}

uint64_t sub_18834EAF0()
{
  return sub_1883872D4();
}

uint64_t sub_18834EB18(uint64_t a1)
{
  v225[4] = *MEMORY[0x1895F89C8];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v3);
  v181 = &v167[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_18838662C();
  uint64_t v178 = *(void *)(v5 - 8);
  uint64_t v179 = v5;
  MEMORY[0x1895F8860](v5);
  v173 = &v167[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D38);
  MEMORY[0x1895F8860](v7);
  v180 = &v167[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_18838656C();
  uint64_t v183 = *(void *)(v9 - 8);
  uint64_t v184 = v9;
  MEMORY[0x1895F8860](v9);
  v174 = &v167[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E78D0);
  uint64_t v11 = *(void *)(v195 - 8);
  MEMORY[0x1895F8860](v195);
  v196 = &v167[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v13 = objc_msgSend(v1, sel_userInfo);
  uint64_t v14 = sub_188386788();

  unint64_t v197 = v14;
  *(void *)&__int128 v210 = v1;
  sub_188352280(0LL, (unint64_t *)&qword_18C4E7888);
  swift_bridgeObjectRetain();
  id v15 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D30);
  int v16 = swift_dynamicCast();
  uint64_t v175 = v11;
  if (v16)
  {
    sub_188352384(&v220, (uint64_t)&v223);
    uint64_t v17 = sub_188386860();
    uint64_t v19 = v18;
    uint64_t v20 = sub_188386860();
    if (*(void *)(v14 + 16) && (unint64_t v22 = sub_18837191C(v20, v21), (v23 & 1) != 0))
    {
      sub_188352244(*(void *)(v14 + 56) + 32 * v22, (uint64_t)&v216);
    }

    else
    {
      __int128 v216 = 0u;
      __int128 v217 = 0u;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_188349220((uint64_t)&v223, (uint64_t)&v220);
    if (*((void *)&v217 + 1))
    {
      sub_188344D58(&v216, &v218);
    }

    else
    {
      __swift_project_boxed_opaque_existential_1(&v220, *((uint64_t *)&v221 + 1));
      uint64_t v24 = sub_1883864C4();
      if (v25)
      {
        *((void *)&v219 + 1) = MEMORY[0x189617FA8];
        *(void *)&__int128 v218 = v24;
        *((void *)&v218 + 1) = v25;
      }

      else
      {
        __int128 v218 = 0u;
        __int128 v219 = 0u;
      }

      sub_188344660((uint64_t)&v216, &qword_18C4E7948);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
    if (*((void *)&v219 + 1))
    {
      sub_188344D58(&v218, &v210);
      unint64_t v26 = v197;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__int128 v204 = v26;
      unint64_t v197 = 0x8000000000000000LL;
      sub_18837D648(&v210, v17, v19, isUniquelyReferenced_nonNull_native);
      unint64_t v197 = v204;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_188344660((uint64_t)&v218, &qword_18C4E7948);
      sub_1883479C4(v17, v19, &v210);
      swift_bridgeObjectRelease();
      sub_188344660((uint64_t)&v210, &qword_18C4E7948);
    }

    uint64_t v28 = sub_188386860();
    uint64_t v30 = v29;
    uint64_t v31 = sub_188386860();
    unint64_t v33 = v197;
    if (*(void *)(v197 + 16) && (unint64_t v34 = sub_18837191C(v31, v32), (v35 & 1) != 0))
    {
      sub_188352244(*(void *)(v33 + 56) + 32 * v34, (uint64_t)&v212);
    }

    else
    {
      __int128 v212 = 0u;
      __int128 v213 = 0u;
    }

    swift_bridgeObjectRelease();
    sub_188349220((uint64_t)&v223, (uint64_t)&v210);
    if (*((void *)&v213 + 1))
    {
      sub_188344D58(&v212, &v214);
    }

    else
    {
      __swift_project_boxed_opaque_existential_1(&v210, *((uint64_t *)&v211 + 1));
      uint64_t v36 = sub_1883864B8();
      if (v37)
      {
        *((void *)&v215 + 1) = MEMORY[0x189617FA8];
        *(void *)&__int128 v214 = v36;
        *((void *)&v214 + 1) = v37;
      }

      else
      {
        __int128 v214 = 0u;
        __int128 v215 = 0u;
      }

      sub_188344660((uint64_t)&v212, &qword_18C4E7948);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v210);
    if (*((void *)&v215 + 1))
    {
      sub_188344D58(&v214, &v204);
      unint64_t v38 = v197;
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v197 = 0x8000000000000000LL;
      *(void *)&__int128 v198 = v38;
      sub_18837D648(&v204, v28, v30, v39);
      unint64_t v197 = v198;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_188344660((uint64_t)&v214, &qword_18C4E7948);
      sub_1883479C4(v28, v30, &v204);
      swift_bridgeObjectRelease();
      sub_188344660((uint64_t)&v204, &qword_18C4E7948);
    }

    uint64_t v40 = sub_188386860();
    uint64_t v42 = v41;
    uint64_t v43 = sub_188386860();
    unint64_t v45 = v197;
    if (*(void *)(v197 + 16) && (unint64_t v46 = sub_18837191C(v43, v44), (v47 & 1) != 0))
    {
      sub_188352244(*(void *)(v45 + 56) + 32 * v46, (uint64_t)&v206);
    }

    else
    {
      __int128 v206 = 0u;
      __int128 v207 = 0u;
    }

    swift_bridgeObjectRelease();
    sub_188349220((uint64_t)&v223, (uint64_t)&v204);
    if (*((void *)&v207 + 1))
    {
      sub_188344D58(&v206, &v208);
    }

    else
    {
      __swift_project_boxed_opaque_existential_1(&v204, v205);
      uint64_t v48 = sub_1883864D0();
      if (v49)
      {
        *((void *)&v209 + 1) = MEMORY[0x189617FA8];
        *(void *)&__int128 v208 = v48;
        *((void *)&v208 + 1) = v49;
      }

      else
      {
        __int128 v208 = 0u;
        __int128 v209 = 0u;
      }

      sub_188344660((uint64_t)&v206, &qword_18C4E7948);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v204);
    if (*((void *)&v209 + 1))
    {
      sub_188344D58(&v208, &v198);
      unint64_t v50 = v197;
      char v51 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__int128 v202 = v50;
      unint64_t v197 = 0x8000000000000000LL;
      sub_18837D648(&v198, v40, v42, v51);
      unint64_t v197 = v202;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_188344660((uint64_t)&v208, &qword_18C4E7948);
      sub_1883479C4(v40, v42, &v198);
      swift_bridgeObjectRelease();
      sub_188344660((uint64_t)&v198, &qword_18C4E7948);
    }

    uint64_t v52 = sub_188386860();
    uint64_t v54 = v53;
    uint64_t v55 = sub_188386860();
    unint64_t v57 = v197;
    if (*(void *)(v197 + 16) && (unint64_t v58 = sub_18837191C(v55, v56), (v59 & 1) != 0))
    {
      sub_188352244(*(void *)(v57 + 56) + 32 * v58, (uint64_t)&v200);
    }

    else
    {
      __int128 v200 = 0u;
      __int128 v201 = 0u;
    }

    swift_bridgeObjectRelease();
    sub_188349220((uint64_t)&v223, (uint64_t)&v198);
    if (*((void *)&v201 + 1))
    {
      sub_188344D58(&v200, &v202);
    }

    else
    {
      __swift_project_boxed_opaque_existential_1(&v198, v199);
      uint64_t v60 = sub_1883864AC();
      if (v61)
      {
        *((void *)&v203 + 1) = MEMORY[0x189617FA8];
        *(void *)&__int128 v202 = v60;
        *((void *)&v202 + 1) = v61;
      }

      else
      {
        __int128 v202 = 0u;
        __int128 v203 = 0u;
      }

      sub_188344660((uint64_t)&v200, &qword_18C4E7948);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v198);
    if (*((void *)&v203 + 1))
    {
      sub_188344D58(&v202, &v198);
      unint64_t v62 = v197;
      char v63 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__int128 v200 = v62;
      unint64_t v197 = 0x8000000000000000LL;
      sub_18837D648(&v198, v52, v54, v63);
      unint64_t v197 = v200;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_188344660((uint64_t)&v202, &qword_18C4E7948);
      sub_1883479C4(v52, v54, &v198);
      swift_bridgeObjectRelease();
      sub_188344660((uint64_t)&v198, &qword_18C4E7948);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v223);
  }

  else
  {
    *(void *)&__int128 v222 = 0LL;
    __int128 v220 = 0u;
    __int128 v221 = 0u;
    swift_bridgeObjectRelease();
    sub_188344660((uint64_t)&v220, &qword_18C708180);
  }

  unint64_t v64 = v197;
  if (*(void *)(v197 + 16))
  {
    LOBYTE(v223) = 2;
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78C8);
    uint64_t v66 = sub_188352344(&qword_18C4E78C0, &qword_18C4E78C8, MEMORY[0x189619C88]);
    sub_1883521EC();
    uint64_t v170 = v65;
    uint64_t v171 = a1;
    uint64_t v169 = v66;
    sub_1883870F4();
    uint64_t v67 = *(void *)(v64 + 64);
    unint64_t v185 = v64 + 64;
    uint64_t v68 = 1LL << *(_BYTE *)(v64 + 32);
    uint64_t v69 = -1LL;
    if (v68 < 64) {
      uint64_t v69 = ~(-1LL << v68);
    }
    unint64_t v70 = v69 & v67;
    v192 = &v221;
    v194 = v225;
    uint64_t v190 = *MEMORY[0x189607798];
    int64_t v187 = (unint64_t)(v68 + 63) >> 6;
    int64_t v168 = v187 - 1;
    swift_bridgeObjectRetain();
    int64_t v71 = 0LL;
    uint64_t v193 = MEMORY[0x18961AFC0] + 8LL;
    unint64_t v186 = (unint64_t)"Unsupported type";
    unint64_t v188 = 0x800000018838BC80LL;
    __int128 v189 = xmmword_1883883A0;
    __int128 v176 = xmmword_1883895E0;
    __int128 v177 = xmmword_1883895D0;
    uint64_t v172 = 0x800000018838BC60LL;
    unint64_t v182 = v64;
    while (v70)
    {
      unint64_t v79 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      unint64_t v80 = v79 | (v71 << 6);
LABEL_63:
      uint64_t v81 = *(void *)(v64 + 56);
      v82 = (void *)(*(void *)(v64 + 48) + 16 * v80);
      uint64_t v83 = v82[1];
      *(void *)&__int128 v220 = *v82;
      *((void *)&v220 + 1) = v83;
      sub_188352244(v81 + 32 * v80, (uint64_t)v192);
      swift_bridgeObjectRetain();
LABEL_73:
      sub_1883522B8((uint64_t)&v220, (uint64_t)&v223);
      unint64_t v86 = v224;
      if (!v224)
      {
        swift_release();
        (*(void (**)(_BYTE *, uint64_t))(v175 + 8))(v196, v195);
        v150 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        uint64_t v151 = MEMORY[0x189617FA8];
        v152 = (void *)sub_18838677C();
        swift_bridgeObjectRelease();
        id v223 = 0LL;
        id v153 = objc_msgSend(v150, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v152, 1, &v223);

        id v154 = v223;
        if (v153)
        {
          v155 = (void *)sub_18838659C();
          unint64_t v157 = v156;

          id v223 = v155;
          unint64_t v224 = v157;
          LOBYTE(v220) = 3;
          sub_188352300();
          sub_18838710C();
          sub_18834469C((uint64_t)v155, v157);
        }

        else
        {
          v158 = v154;
          v159 = (void *)sub_188386518();

          swift_willThrow();
          sub_188386A70();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
          uint64_t v160 = swift_allocObject();
          *(_OWORD *)(v160 + 16) = v189;
          id v223 = v159;
          id v161 = v159;
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
          uint64_t v162 = sub_18838689C();
          uint64_t v164 = v163;
          *(void *)(v160 + 56) = v151;
          *(void *)(v160 + 64) = sub_18834DFC0();
          *(void *)(v160 + 32) = v162;
          *(void *)(v160 + 40) = v164;
          sub_188352280(0LL, (unint64_t *)&qword_18C708530);
          v165 = (void *)sub_188386B18();
          sub_18838668C();
          swift_bridgeObjectRelease();
        }

        return swift_bridgeObjectRelease();
      }

      id v87 = v223;
      sub_188344D58(v194, &v220);
      sub_188352244((uint64_t)&v220, (uint64_t)&v210);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(void *)&__int128 v210 = v87;
        *((void *)&v210 + 1) = v86;
        sub_188386DB8();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
        swift_bridgeObjectRelease();
        goto LABEL_100;
      }

      sub_188352244((uint64_t)&v220, (uint64_t)&v210);
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(void *)&__int128 v210 = v87;
        *((void *)&v210 + 1) = v86;
        sub_188386DC4();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
LABEL_100:
        swift_bridgeObjectRelease_n();
      }

      else
      {
        sub_188352244((uint64_t)&v220, (uint64_t)&v210);
        sub_188352280(0LL, &qword_18C708158);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v102 = (void *)v204;
          if (CFNumberIsFloatType((CFNumberRef)v204))
          {
            objc_msgSend(v102, sel_doubleValue);
            *(void *)&__int128 v210 = v87;
            *((void *)&v210 + 1) = v86;
            sub_188386DD0();
          }

          else
          {
            v135 = (void *)sub_188386B0C();
            id v136 = objc_msgSend(v102, sel_compare_, v135);

            if (v136 == (id)-1LL)
            {
              objc_msgSend(v102, sel_longLongValue);
              *(void *)&__int128 v210 = v87;
              *((void *)&v210 + 1) = v86;
              sub_188386DF4();
            }

            else
            {
              objc_msgSend(v102, sel_unsignedLongLongValue);
              *(void *)&__int128 v210 = v87;
              *((void *)&v210 + 1) = v86;
              sub_188386E00();
            }
          }

          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
          swift_bridgeObjectRelease_n();
        }

        else
        {
          int64_t v191 = v71;
          sub_188352244((uint64_t)&v220, (uint64_t)&v210);
          uint64_t v111 = (uint64_t)v180;
          uint64_t v112 = v184;
          char v113 = swift_dynamicCast();
          uint64_t v114 = v183;
          v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v183 + 56);
          uint64_t v116 = (uint64_t)v181;
          if ((v113 & 1) != 0)
          {
            v115(v111, 0LL, 1LL, v112);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v111, 1LL, v112) != 1)
            {
              uint64_t v117 = v183;
              v118 = v174;
              uint64_t v119 = v111;
              uint64_t v120 = v184;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v183 + 32))(v174, v119, v184);
              *(void *)&__int128 v210 = v87;
              *((void *)&v210 + 1) = v86;
              v121 = (unint64_t *)&unk_18C708198;
              v122 = (uint64_t (*)(uint64_t))MEMORY[0x189606A90];
              uint64_t v123 = MEMORY[0x189606AB0];
LABEL_105:
              sub_188349470(v121, v122, v123);
              sub_188386DE8();
              swift_bridgeObjectRelease();
              (*(void (**)(_BYTE *, uint64_t))(v117 + 8))(v118, v120);
              goto LABEL_117;
            }
          }

          else
          {
            v115(v111, 1LL, 1LL, v112);
          }

          sub_188344660(v111, &qword_18C4E6D38);
          sub_188352244((uint64_t)&v220, (uint64_t)&v210);
          uint64_t v124 = v179;
          int v125 = swift_dynamicCast();
          uint64_t v126 = v178;
          v127 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
          if (v125)
          {
            v127(v116, 0LL, 1LL, v124);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v116, 1LL, v124) != 1)
            {
              uint64_t v117 = v178;
              uint64_t v120 = v179;
              v118 = v173;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v178 + 32))(v173, v116, v179);
              *(void *)&__int128 v210 = v87;
              *((void *)&v210 + 1) = v86;
              v121 = &qword_18C707DE8;
              v122 = (uint64_t (*)(uint64_t))MEMORY[0x189606F20];
              uint64_t v123 = MEMORY[0x189606F38];
              goto LABEL_105;
            }
          }

          else
          {
            v127(v116, 1LL, 1LL, v124);
          }

          sub_188344660(v116, &qword_18C4E7960);
          sub_188352244((uint64_t)&v220, (uint64_t)&v210);
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
          if (swift_dynamicCast())
          {
            v137 = (void *)v204;
            v138 = (void *)sub_18838650C();
            *(void *)&__int128 v210 = v87;
            *((void *)&v210 + 1) = v86;
            *(void *)&__int128 v204 = v138;
            sub_188352344(&qword_18C708190, (uint64_t *)&unk_18C4E78D0, MEMORY[0x189619C88]);
            sub_188350A7C();
            sub_18838710C();
            swift_bridgeObjectRelease();

LABEL_117:
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
            swift_bridgeObjectRelease();
            int64_t v71 = v191;
          }

          else
          {
            swift_bridgeObjectRelease();
            unint64_t v139 = sub_1883476E8(MEMORY[0x18961AFE8]);
            sub_1883491B4();
            v140 = (void *)swift_allocError();
            static XPCError.unknown(_:from:userInfo:)(0xD000000000000010LL, v172, 0LL, v139, v141);
            swift_bridgeObjectRelease();
            swift_willThrow();
            uint64_t v142 = v191;
            if (v87 == (id)0xD00000000000001DLL && v86 == v188 || (sub_188386FD4() & 1) != 0)
            {
              id v88 = v140;
              swift_bridgeObjectRelease();
              uint64_t v89 = sub_188386860();
              unint64_t v91 = v197;
              if (*(void *)(v197 + 16) && (unint64_t v92 = sub_18837191C(v89, v90), (v93 & 1) != 0))
              {
                sub_188352244(*(void *)(v91 + 56) + 32 * v92, (uint64_t)&v210);
              }

              else
              {
                __int128 v210 = 0u;
                __int128 v211 = 0u;
              }

              swift_bridgeObjectRelease();
              uint64_t v94 = *((void *)&v211 + 1);
              sub_188344660((uint64_t)&v210, &qword_18C4E7948);
              if (v94)
              {
                sub_188386A88();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
                uint64_t v72 = swift_allocObject();
                *(_OWORD *)(v72 + 16) = v189;
                *(void *)&__int128 v210 = v140;
                id v73 = v140;
                __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
                uint64_t v74 = sub_18838689C();
                int64_t v75 = v142;
                uint64_t v77 = v76;
                *(void *)(v72 + 56) = MEMORY[0x189617FA8];
                *(void *)(v72 + 64) = sub_18834DFC0();
                *(void *)(v72 + 32) = v74;
                *(void *)(v72 + 40) = v77;
                int64_t v71 = v75;
                sub_188352280(0LL, (unint64_t *)&qword_18C708530);
                uint64_t v78 = (void *)sub_188386B18();
                sub_18838668C();
                swift_bridgeObjectRelease();

                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
              }

              else
              {
                unint64_t v95 = v197;
                if (!*(void *)(v197 + 16)
                  || (unint64_t v96 = sub_18837191C(0xD00000000000001DLL, v186 | 0x8000000000000000LL), (v97 & 1) == 0)
                  || (sub_188352244(*(void *)(v95 + 56) + 32 * v96, (uint64_t)&v210),
                      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708188),
                      (swift_dynamicCast() & 1) == 0))
                {
                  int64_t v104 = v142;
                  goto LABEL_96;
                }

                if (*(void *)(v204 + 16))
                {
                  int64_t v191 = v142;
                  v98 = *(void **)(v204 + 32);
                  id v99 = v98;
                  swift_bridgeObjectRelease();
                  v100 = (void *)sub_18838650C();
                  *(void *)&__int128 v210 = sub_188386860();
                  *((void *)&v210 + 1) = v101;
                  *(void *)&__int128 v204 = v100;
                  sub_188352344(&qword_18C708190, (uint64_t *)&unk_18C4E78D0, MEMORY[0x189619C88]);
                  sub_188350A7C();
                  sub_18838710C();
                  swift_bridgeObjectRelease();

                  sub_188386A88();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
                  uint64_t v144 = swift_allocObject();
                  *(_OWORD *)(v144 + 16) = v189;
                  *(void *)&__int128 v210 = v140;
                  id v145 = v140;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
                  uint64_t v146 = sub_18838689C();
                  uint64_t v148 = v147;
                  *(void *)(v144 + 56) = MEMORY[0x189617FA8];
                  *(void *)(v144 + 64) = sub_18834DFC0();
                  *(void *)(v144 + 32) = v146;
                  *(void *)(v144 + 40) = v148;
                  sub_188352280(0LL, (unint64_t *)&qword_18C708530);
                  v149 = (void *)sub_188386B18();
                  sub_18838668C();

                  swift_bridgeObjectRelease();
                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
                  int64_t v71 = v191;
                }

                else
                {
                  int64_t v104 = v142;
                  swift_bridgeObjectRelease();
LABEL_96:
                  sub_188386A70();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
                  uint64_t v105 = swift_allocObject();
                  *(_OWORD *)(v105 + 16) = v189;
                  *(void *)&__int128 v210 = v140;
                  id v106 = v140;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
                  uint64_t v107 = sub_18838689C();
                  uint64_t v109 = v108;
                  *(void *)(v105 + 56) = MEMORY[0x189617FA8];
                  *(void *)(v105 + 64) = sub_18834DFC0();
                  *(void *)(v105 + 32) = v107;
                  *(void *)(v105 + 40) = v109;
                  sub_188352280(0LL, (unint64_t *)&qword_18C708530);
                  v110 = (void *)sub_188386B18();
                  sub_18838668C();
                  swift_bridgeObjectRelease();

                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
                  int64_t v71 = v104;
                }
              }
            }

            else
            {
              int64_t v191 = v142;
              sub_188352244((uint64_t)&v220, (uint64_t)&v210);
              id v103 = v140;
              sub_18838689C();
              *(void *)&__int128 v210 = v87;
              *((void *)&v210 + 1) = v86;
              swift_bridgeObjectRetain();
              sub_188386DB8();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_188386A88();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
              uint64_t v128 = swift_allocObject();
              *(_OWORD *)(v128 + 16) = v176;
              uint64_t v129 = MEMORY[0x189617FA8];
              *(void *)(v128 + 56) = MEMORY[0x189617FA8];
              unint64_t v130 = sub_18834DFC0();
              *(void *)(v128 + 64) = v130;
              *(void *)(v128 + 32) = v87;
              *(void *)(v128 + 40) = v86;
              *(void *)&__int128 v210 = v140;
              id v131 = v140;
              __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
              uint64_t v132 = sub_18838689C();
              *(void *)(v128 + 96) = v129;
              *(void *)(v128 + 104) = v130;
              *(void *)(v128 + 72) = v132;
              *(void *)(v128 + 80) = v133;
              sub_188352280(0LL, (unint64_t *)&qword_18C708530);
              v134 = (void *)sub_188386B18();
              sub_18838668C();
              swift_bridgeObjectRelease();

              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v220);
              unint64_t v64 = v182;
              int64_t v71 = v191;
            }
          }
        }
      }
    }

    int64_t v84 = v71 + 1;
    if (__OFADD__(v71, 1LL))
    {
      __break(1u);
LABEL_134:
      __break(1u);
    }

    if (v84 >= v187) {
      goto LABEL_72;
    }
    unint64_t v85 = *(void *)(v185 + 8 * v84);
    if (v85)
    {
LABEL_67:
      unint64_t v70 = (v85 - 1) & v85;
      unint64_t v80 = __clz(__rbit64(v85)) + (v84 << 6);
      int64_t v71 = v84;
      goto LABEL_63;
    }

    v71 += 2LL;
    if (v84 + 1 >= v187)
    {
      int64_t v71 = v84;
LABEL_72:
      unint64_t v70 = 0LL;
      __int128 v221 = 0u;
      __int128 v222 = 0u;
      __int128 v220 = 0u;
      goto LABEL_73;
    }

    unint64_t v85 = *(void *)(v185 + 8 * v71);
    if (v85)
    {
LABEL_70:
      int64_t v84 = v71;
      goto LABEL_67;
    }

    int64_t v143 = v84 + 2;
    if (v84 + 2 >= v187) {
      goto LABEL_72;
    }
    unint64_t v85 = *(void *)(v185 + 8 * v143);
    if (!v85)
    {
      int64_t v71 = v84 + 3;
      if (v84 + 3 >= v187)
      {
        int64_t v71 = v84 + 2;
        goto LABEL_72;
      }

      unint64_t v85 = *(void *)(v185 + 8 * v71);
      if (v85) {
        goto LABEL_70;
      }
      int64_t v143 = v84 + 4;
      if (v84 + 4 >= v187) {
        goto LABEL_72;
      }
      unint64_t v85 = *(void *)(v185 + 8 * v143);
      if (!v85)
      {
        while (1)
        {
          int64_t v84 = v143 + 1;
          if (__OFADD__(v143, 1LL)) {
            goto LABEL_134;
          }
          if (v84 >= v187) {
            break;
          }
          unint64_t v85 = *(void *)(v185 + 8 * v84);
          ++v143;
          if (v85) {
            goto LABEL_67;
          }
        }

        int64_t v71 = v168;
        goto LABEL_72;
      }
    }

    int64_t v84 = v143;
    goto LABEL_67;
  }

  return swift_bridgeObjectRelease();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return sub_18838710C();
}

uint64_t NSError.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78C8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_188350AC0();
  sub_1883872A4();
  id v9 = objc_msgSend(v3, sel_domain);
  sub_188386860();

  v11[15] = 0;
  sub_188386DB8();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_code);
    v11[14] = 1;
    sub_188386DDC();
    sub_18834EB18((uint64_t)v8);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }

void *KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188350DFC( a1,  a2,  a3,  a4,  (void *(*)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))MEMORY[0x18961A158]);
}

void *NSError.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708108);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_188350AC0();
  sub_188387298();
  if (!v1)
  {
    char v15 = 0;
    sub_188386D34();
    char v14 = 1;
    uint64_t v13 = sub_188386D58();
    sub_188350FB0();
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v10 = (void *)sub_18838683C();
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)sub_18838677C();
    swift_bridgeObjectRelease();
    uint64_t v7 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, v13, v11);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

id NSErrorContainer.rawValue.getter()
{
  return *v0;
}

void NSErrorContainer.rawValue.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NSErrorContainer.rawValue.modify())()
{
  return nullsub_1;
}

void __swiftcall NSErrorContainer.init(rawValue:)(Mercury::NSErrorContainer *__return_ptr retstr, NSError *rawValue)
{
  retstr->rawValue.super.isa = (Class)rawValue;
}

unint64_t sub_188350A7C()
{
  unint64_t result = qword_18C7080F8;
  if (!qword_18C7080F8)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for NSErrorContainer,  &type metadata for NSErrorContainer);
    atomic_store(result, (unint64_t *)&qword_18C7080F8);
  }

  return result;
}

unint64_t sub_188350AC0()
{
  unint64_t result = qword_18C4E7828;
  if (!qword_18C4E7828)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_1883894B4, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_18C4E7828);
  }

  return result;
}

unint64_t sub_188350B04()
{
  unint64_t result = qword_18C708100;
  if (!qword_18C708100)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for NSErrorContainer,  &type metadata for NSErrorContainer);
    atomic_store(result, (unint64_t *)&qword_18C708100);
  }

  return result;
}

uint64_t NSErrorContainer.encode(to:)(void *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t NSErrorContainer.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = NSError.init(from:)(v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void *sub_188350BEC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_188350BF8@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_188350C04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = NSError.init(from:)(v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_188350C88(void *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return sub_188387100();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  uint64_t result = sub_188387058();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t TopLevelEncoder.encode(_:)()
{
  return sub_188386728();
}

void *TopLevelDecoder.decode(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188350DFC(a1, a2, a3, a4, MEMORY[0x1896022C0]);
}

void *sub_188350DFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = sub_188350B04();
  uint64_t result = a5(&v12, &type metadata for NSErrorContainer, a2, &type metadata for NSErrorContainer, v10, a3, a4);
  if (!v5) {
    return (void *)v12;
  }
  return result;
}

uint64_t sub_188350E70()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1883895F0;
  *(void *)(v0 + 32) = sub_188352280(0LL, &qword_18C708148);
  *(void *)(v0 + 40) = sub_188352280(0LL, &qword_18C708150);
  *(void *)(v0 + 48) = sub_188352280(0LL, &qword_18C708510);
  *(void *)(v0 + 56) = sub_188352280(0LL, &qword_18C708158);
  *(void *)(v0 + 64) = sub_188352280(0LL, &qword_18C708160);
  *(void *)(v0 + 72) = sub_188352280(0LL, &qword_18C708168);
  *(void *)(v0 + 80) = sub_188352280(0LL, &qword_18C708170);
  *(void *)(v0 + 88) = sub_188352280(0LL, &qword_18C708178);
  *(void *)(v0 + 96) = sub_188352280(0LL, (unint64_t *)&qword_18C4E7888);
  return v0;
}

unint64_t sub_188350FB0()
{
  uint64_t v52 = *MEMORY[0x1895F89C8];
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708118);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8860](v0);
  unint64_t v46 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LOBYTE(v48) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708108);
  sub_188352344(&qword_18C708120, &qword_18C708108, MEMORY[0x189619B88]);
  sub_1883521A8();
  sub_188387058();
  uint64_t v45 = v0;
  unint64_t v13 = *((void *)&v50 + 1);
  if (*((void *)&v50 + 1) >> 60 != 15LL)
  {
    uint64_t v14 = v50;
    sub_188352280(0LL, (unint64_t *)&unk_18C7084B0);
    sub_188350E70();
    sub_188386AA0();
    swift_bridgeObjectRelease();
    if (MetatypeMetadata)
    {
      sub_188344D58(&v48, &v50);
      sub_188352244((uint64_t)&v50, (uint64_t)&v48);
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708138);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_188352230(v14, v13);
        uint64_t v11 = v47;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
        return (unint64_t)v11;
      }

      __swift_project_boxed_opaque_existential_1(&v50, v51);
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
      *(void *)&__int128 v48 = DynamicType;
      sub_188386C2C();
      uint64_t v37 = (void *)swift_allocError();
      uint64_t v43 = v39;
      uint64_t v44 = v14;
      uint64_t v40 = sub_18838704C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8358);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1883883A0;
      *(void *)(inited + 56) = &_s10_CodingKeyON;
      *(void *)(inited + 64) = sub_188350AC0();
      *(_BYTE *)(inited + 32) = 3;
      char v47 = (void *)v40;
      sub_1883860B4(inited);
      static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)( v36,  (uint64_t)&v48,  0LL,  v43);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v48);
      swift_willThrow();
      sub_188352230(v44, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
    }

    else
    {
      sub_188344660((uint64_t)&v48, &qword_18C4E7948);
      LOBYTE(v50) = 3;
      sub_188386C2C();
      uint64_t v37 = (void *)swift_allocError();
      sub_188386C08();
      swift_willThrow();
      sub_188352230(v14, v13);
    }

    sub_188386A70();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1883883A0;
    *(void *)&__int128 v50 = v37;
    id v4 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    uint64_t v5 = sub_18838689C();
    uint64_t v7 = v6;
    *(void *)(v3 + 56) = MEMORY[0x189617FA8];
    *(void *)(v3 + 64) = sub_18834DFC0();
    *(void *)(v3 + 32) = v5;
    *(void *)(v3 + 40) = v7;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v8 = (void *)sub_188386B18();
    sub_18838668C();
    swift_bridgeObjectRelease();

    uint64_t v0 = v45;
  }

  LOBYTE(v50) = 2;
  char v9 = sub_188387070();
  unint64_t v10 = v46;
  if ((v9 & 1) == 0) {
    return sub_1883382F4(MEMORY[0x18961AFE8]);
  }
  LOBYTE(v50) = 2;
  sub_1883521EC();
  sub_188387040();
  uint64_t v44 = v1;
  char v15 = (void *)sub_188386D88();
  uint64_t v16 = v15[2];
  uint64_t v43 = v15;
  if (!v16)
  {
    uint64_t v11 = (void *)MEMORY[0x18961AFF0];
LABEL_27:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v0);
    return (unint64_t)v11;
  }

  uint64_t v17 = v15 + 5;
  uint64_t v11 = (void *)MEMORY[0x18961AFF0];
  while (1)
  {
    uint64_t v20 = *v17;
    *(void *)&__int128 v50 = *(v17 - 1);
    uint64_t v19 = v50;
    *((void *)&v50 + 1) = v20;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_188386D34();
    uint64_t v51 = MEMORY[0x189617FA8];
    *(void *)&__int128 v50 = v21;
    *((void *)&v50 + 1) = v22;
    sub_188344D58(&v50, &v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v47 = v11;
    unint64_t v25 = sub_18837191C(v19, v20);
    uint64_t v26 = v11[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
      __break(1u);
LABEL_31:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
    }

    char v29 = v24;
    if (v11[3] < v28) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1883847C8();
    }
LABEL_19:
    uint64_t v0 = v45;
    uint64_t v11 = v47;
    if ((v29 & 1) != 0)
    {
      uint64_t v18 = (_OWORD *)(v47[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      sub_188344D58(&v48, v18);
    }

    else
    {
      v47[(v25 >> 6) + 8] |= 1LL << v25;
      uint64_t v32 = (uint64_t *)(v11[6] + 16 * v25);
      *uint64_t v32 = v19;
      v32[1] = v20;
      sub_188344D58(&v48, (_OWORD *)(v11[7] + 32 * v25));
      uint64_t v33 = v11[2];
      BOOL v34 = __OFADD__(v33, 1LL);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_31;
      }
      void v11[2] = v35;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = v46;
    v17 += 2;
    if (!--v16) {
      goto LABEL_27;
    }
  }

  sub_188383740(v28, isUniquelyReferenced_nonNull_native);
  unint64_t v30 = sub_18837191C(v19, v20);
  if ((v29 & 1) == (v31 & 1))
  {
    unint64_t v25 = v30;
    goto LABEL_19;
  }

  unint64_t result = sub_1883871CC();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for NSErrorContainer()
{
  return &type metadata for NSErrorContainer;
}

uint64_t _s10_CodingKeyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_188351EB4 + 4 * byte_188389339[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_188351EE8 + 4 * byte_188389334[v4]))();
}

uint64_t sub_188351EE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_188351EF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x188351EF8LL);
  }
  return result;
}

uint64_t sub_188351F04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x188351F0CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_188351F10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_188351F18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10_CodingKeyOMa()
{
  return &_s10_CodingKeyON;
}

unint64_t sub_188351F38()
{
  unint64_t result = qword_18C708110;
  if (!qword_18C708110)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838948C, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_18C708110);
  }

  return result;
}

unint64_t sub_188351F80()
{
  unint64_t result = qword_18C4E7838;
  if (!qword_18C4E7838)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_1883893FC, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_18C4E7838);
  }

  return result;
}

unint64_t sub_188351FC8()
{
  unint64_t result = qword_18C4E7830;
  if (!qword_18C4E7830)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188389424, &_s10_CodingKeyON);
    atomic_store(result, (unint64_t *)&qword_18C4E7830);
  }

  return result;
}

uint64_t sub_18835200C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E69616D6F64LL && a2 == 0xE600000000000000LL;
  if (v2 || (sub_188386FD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1701080931 && a2 == 0xE400000000000000LL || (sub_188386FD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6F666E4972657375LL && a2 == 0xE800000000000000LL || (sub_188386FD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000018838BAD0LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = sub_188386FD4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t sub_1883521A8()
{
  unint64_t result = qword_18C708128;
  if (!qword_18C708128)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189606DA0], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C708128);
  }

  return result;
}

unint64_t sub_1883521EC()
{
  unint64_t result = qword_18C4E7840;
  if (!qword_18C4E7840)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188389574, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_18C4E7840);
  }

  return result;
}

uint64_t sub_188352230(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_18834469C(a1, a2);
  }
  return a1;
}

uint64_t sub_188352244(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_188352280(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1883522B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E77E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_188352300()
{
  unint64_t result = qword_18C4E6D40;
  if (!qword_18C4E6D40)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189606D88], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C4E6D40);
  }

  return result;
}

uint64_t sub_188352344(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895C375C](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_188352384(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *_s18_UserInfoCodingKeyVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s18_UserInfoCodingKeyVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s18_UserInfoCodingKeyVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18_UserInfoCodingKeyVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18_UserInfoCodingKeyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s18_UserInfoCodingKeyVMa()
{
  return &_s18_UserInfoCodingKeyVN;
}

unint64_t sub_1883524D0()
{
  unint64_t result = qword_18C4E7850;
  if (!qword_18C4E7850)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_188389524, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_18C4E7850);
  }

  return result;
}

unint64_t sub_188352518()
{
  unint64_t result = qword_18C4E7848;
  if (!qword_18C4E7848)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838954C, &_s18_UserInfoCodingKeyVN);
    atomic_store(result, (unint64_t *)&qword_18C4E7848);
  }

  return result;
}

uint64_t sub_188352560()
{
  uint64_t v1 = sub_1883865D8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8860](v1);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v3);
  uint64_t v7 = (char *)v28 - v6;
  sub_1883865CC();
  if (v8 < -9223372040.0)
  {
    if (qword_18C7079A0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1883866B0();
    __swift_project_value_buffer(v9, (uint64_t)qword_18C7081A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0, v1);
    unint64_t v10 = (os_log_s *)sub_188386698();
    os_log_type_t v11 = sub_188386A70();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v30 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_188353130();
      uint64_t v14 = sub_188386E24();
      uint64_t v29 = sub_188352A68(v14, v15, &v30);
      sub_188386B30();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      _os_log_impl( &dword_18832C000,  v10,  v11,  "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '1677-09-21 00:12:44'.",  v12,  0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895C3834](v13, -1LL, -1LL);
      MEMORY[0x1895C3834](v12, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    }

    return 0x8000000000000000LL;
  }

  sub_1883865CC();
  if (v16 > 9223372040.0)
  {
    if (qword_18C7079A0 != -1) {
      swift_once();
    }
    uint64_t v17 = 0x7FFFFFFFC4653800LL;
    uint64_t v18 = sub_1883866B0();
    __swift_project_value_buffer(v18, (uint64_t)qword_18C7081A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0, v1);
    uint64_t v19 = (os_log_s *)sub_188386698();
    os_log_type_t v20 = sub_188386A70();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      v28[1] = v21 + 4;
      sub_188353130();
      uint64_t v23 = sub_188386E24();
      uint64_t v29 = sub_188352A68(v23, v24, &v30);
      sub_188386B30();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      _os_log_impl( &dword_18832C000,  v19,  v20,  "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '2262-04-11 23:47:15'.",  v21,  0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895C3834](v22, -1LL, -1LL);
      MEMORY[0x1895C3834](v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }

    return v17;
  }

  uint64_t result = sub_1883865CC();
  double v27 = v26 * 1000000000.0;
  if ((~*(void *)&v27 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  if (v27 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v27 < 9.22337204e18) {
    return (uint64_t)v27;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_18835298C()
{
  uint64_t v0 = sub_1883866B0();
  __swift_allocate_value_buffer(v0, qword_18C7081A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C7081A0);
  return sub_1883866A4();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_188352A24(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_188352A34( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_188352A68(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_188352B38(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_188352244((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = MEMORY[0x1896191F8];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_188352244((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_188352B38(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_188386B3C();
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_188352CF0(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = sub_188386C50();
  if (!v8)
  {
    sub_188386CA4();
    __break(1u);
LABEL_17:
    uint64_t result = sub_188386CF8();
    __break(1u);
    return result;
  }

    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1LL << v10;
    *(void *)(v19[6] + 8 * v10) = v7;
    sub_188352384(v37, v19[7] + 40 * v10);
    os_log_type_t v20 = v19[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v19[2] = v22;
    uint64_t v23 = v4 - 1;
    if (!v23)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }

    unint64_t v24 = a1 + 80;
    while (1)
    {
      sub_1883731A4(v24, (uint64_t)&v38);
      unint64_t v25 = v38;
      uint64_t v40 = v38;
      sub_188352384(v39, (uint64_t)v37);
      double v26 = (void *)*a3;
      double v27 = sub_188371A98(v25);
      uint64_t v29 = v26[2];
      uint64_t v30 = (v28 & 1) == 0;
      uint64_t v21 = __OFADD__(v29, v30);
      char v31 = v29 + v30;
      if (v21) {
        break;
      }
      uint64_t v32 = v28;
      if (v26[3] < v31)
      {
        sub_188384178(v31, 1);
        double v27 = sub_188371A98(v25);
        if ((v32 & 1) != (v33 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v32 & 1) != 0) {
        goto LABEL_10;
      }
      BOOL v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
      *(void *)(v34[6] + 8 * v27) = v25;
      sub_188352384(v37, v34[7] + 40 * v27);
      uint64_t v35 = v34[2];
      uint64_t v21 = __OFADD__(v35, 1LL);
      uint64_t v36 = v35 + 1;
      if (v21) {
        goto LABEL_24;
      }
      v34[2] = v36;
      v24 += 48LL;
      if (!--v23) {
        goto LABEL_22;
      }
    }

  if (result == -1)
  {
    uint64_t result = 0LL;
    uint64_t v10 = 1;
  }

  else
  {
    uint64_t v10 = 0;
  }

  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_188352CF0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_188352D84(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_188352FD4(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_188352FD4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_188352D84(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_188352EF8(v2, 0LL);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_188386BC0();
      if ((v6 & 1) != 0) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_188386CA4();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1883868FC();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    sub_188386CF8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_188386CA4();
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

void *sub_188352EF8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7081C0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_188352F5C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_188386938();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x1895C26E8](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t sub_188352FD4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C7081C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

LABEL_30:
  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

    uint64_t v10 = (v23 - 1) & v23;
    os_log_type_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v20);
    uint64_t v30 = *v29;
    char v31 = v29[1];
    uint64_t v33 = v29[2];
    uint64_t v32 = v29[3];
    char v39 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }

    sub_188387244();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E77B0);
    sub_18838689C();
    sub_1883868D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1883868D8();
    swift_bridgeObjectRelease();
    uint64_t result = sub_188387268();
    uint64_t v14 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    double v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      double v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        double v27 = v16 == v26;
        if (v16 == v26) {
          double v16 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }

      while (v28 == -1);
      uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 32 * v17);
    *uint64_t v18 = v30;
    v18[1] = v31;
    v18[2] = v33;
    void v18[3] = v32;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v39;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  char v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  BOOL v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v22 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

_BYTE **sub_188353120(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_188353130()
{
  unint64_t result = qword_18C7081B8;
  if (!qword_18C7081B8)
  {
    uint64_t v1 = sub_1883865D8();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189606EA8], v1);
    atomic_store(result, (unint64_t *)&qword_18C7081B8);
  }

  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }

  return a2;
}

uint64_t sub_1883531BC()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1883531E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1] = *(pthread_t *)MEMORY[0x1895F89C8];
  uint64_t v6 = sub_188386434();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  int64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 16) = 0LL;
  type metadata accessor for POSIXThread.Context();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  v14[0] = 0LL;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = pthread_create(v14, 0LL, (void *(__cdecl *)(void *))sub_18835337C, v10);
  if ((_DWORD)result)
  {
    int v12 = result;
    swift_release();
    swift_release();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    POSIXError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v9);
    sub_18838641C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_willThrow();
    swift_release();
    swift_release();
    return v3;
  }

  pthread_t v13 = v14[0];
  if (v14[0])
  {
    swift_release();
    swift_release();
    *(void *)(v3 + 16) = v13;
    return v3;
  }

  __break(1u);
  return result;
}

uint64_t sub_18835337C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 24);
  uint64_t v2 = swift_retain();
  v1(v2);
  swift_release();
  swift_release();
  return 0LL;
}

uint64_t sub_1883533C4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for POSIXThread()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for POSIXThread.Context()
{
  return objc_opt_self();
}

uint64_t RemoteDevice.__allocating_init(underlyingDevice:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void sub_188353444(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t RemoteDevice.Identity.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t static RemoteDevice.Identity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_1883865FC() & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for RemoteDevice.Identity() + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1]) {
    return 1LL;
  }
  else {
    return sub_188386FD4();
  }
}

uint64_t RemoteDevice.Identity.hashValue.getter()
{
  return sub_188387268();
}

uint64_t sub_18835362C()
{
  return sub_188387268();
}

uint64_t sub_1883536D0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_188353758()
{
  return sub_188387268();
}

uint64_t sub_1883537F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1883865FC() & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  int64_t v9 = (void *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1]) {
    return 1LL;
  }
  else {
    return sub_188386FD4();
  }
}

uint64_t static RemoteDevice.loopbackDevice()()
{
  uint64_t result = remote_device_copy_unique_of_type();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for RemoteDevice();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
  }

  return result;
}

uint64_t RemoteDevice.init(underlyingDevice:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t type metadata accessor for RemoteDevice.Identity()
{
  uint64_t result = qword_18C708470;
  if (!qword_18C708470) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for RemoteDevice()
{
  return objc_opt_self();
}

BOOL sub_188353934()
{
  int state = remote_device_get_state();
  swift_beginAccess();
  return state == dword_18C708554;
}

uint64_t sub_188353988()
{
  return remote_device_get_state();
}

uint64_t sub_188353990@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1883868F0();
  uint64_t v4 = v3;
  uint64_t result = type metadata accessor for RemoteDevice.Identity();
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(result + 20));
  *uint64_t v6 = v2;
  v6[1] = v4;
  return result;
}

uint64_t sub_1883539E0()
{
  return sub_1883868F0();
}

uint64_t sub_1883539F8()
{
  uint64_t v0 = (void *)remote_device_copy_property();
  if (!v0) {
    return 0LL;
  }
  if (!xpc_string_get_string_ptr(v0))
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v1 = sub_1883868F0();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_188353A68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v43 = *MEMORY[0x1895F89C8];
  uint64_t v1 = sub_18838662C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8860](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188386620();
  unint64_t v5 = sub_188386614();
  char v6 = v5;
  char v8 = v7;
  unint64_t v9 = v5 >> 8;
  unint64_t v10 = v5 >> 16;
  unint64_t v11 = v5 >> 24;
  unint64_t v12 = HIDWORD(v5);
  unint64_t v13 = v5 >> 40;
  unint64_t v18 = HIWORD(v5);
  unint64_t v19 = HIBYTE(v5);
  unint64_t v20 = v7 >> 8;
  unint64_t v21 = v7 >> 16;
  unint64_t v22 = v7 >> 24;
  unint64_t v23 = HIDWORD(v7);
  unint64_t v24 = v7 >> 40;
  unint64_t v25 = HIWORD(v7);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  unint64_t v15 = HIBYTE(v7);
  v14(v4, v1);
  char v27 = v6;
  char v28 = v9;
  char v29 = v10;
  char v30 = v11;
  char v31 = v12;
  char v32 = v13;
  char v33 = v18;
  char v34 = v19;
  char v35 = v8;
  char v36 = v20;
  char v37 = v21;
  char v38 = v22;
  char v39 = v23;
  char v40 = v24;
  char v41 = v25;
  char v42 = v15;
  remote_device_copy_uuid();
  return sub_188386608();
}

void sub_188353C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  uint64_t v14 = sub_188353EA4;
  uint64_t v15 = v5;
  uint64_t v6 = MEMORY[0x1895F87A0];
  uint64_t v10 = MEMORY[0x1895F87A0];
  uint64_t v11 = 1107296256LL;
  unint64_t v12 = sub_188353444;
  unint64_t v13 = &block_descriptor_1;
  unint64_t v7 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  remote_device_set_connected_callback();
  _Block_release(v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v14 = sub_188353EC4;
  uint64_t v15 = v8;
  uint64_t v10 = v6;
  uint64_t v11 = 1107296256LL;
  unint64_t v12 = sub_188353444;
  unint64_t v13 = &block_descriptor_6_0;
  unint64_t v9 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  remote_device_set_disconnected_callback();
  _Block_release(v9);
}

uint64_t sub_188353D68(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t state = remote_device_get_state();
  uint64_t result = swift_beginAccess();
  if ((_DWORD)state == dword_18C708554) {
    return a2(state);
  }
  return result;
}

uint64_t sub_188353DD0()
{
  uint64_t v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = xpc_remote_connection_create_with_remote_service();

  return v1;
}

uint64_t RemoteDevice.deinit()
{
  return v0;
}

uint64_t RemoteDevice.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_188353E80()
{
  return swift_deallocObject();
}

uint64_t sub_188353EA4(uint64_t a1)
{
  return sub_188353D68(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_188353EC4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  swift_beginAccess();
  return v1(dword_18C708558);
}

uint64_t sub_188353F14()
{
  return sub_188349470( &qword_18C708328,  (uint64_t (*)(uint64_t))type metadata accessor for RemoteDevice.Identity,  (uint64_t)&protocol conformance descriptor for RemoteDevice.Identity);
}

uint64_t method lookup function for RemoteDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteDevice.__allocating_init(underlyingDevice:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RemoteDevice.connected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of RemoteDevice.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of RemoteDevice.identity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of RemoteDevice.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of RemoteDevice.model.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of RemoteDevice.uuid.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of RemoteDevice.setDeviceStateHandler(queue:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of RemoteDevice.remoteConnection(forService:handlerQueue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of RemoteDevice.withUnsafeUnderlyingRemoteDevice<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteDevice.Identity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_18838662C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for RemoteDevice.Identity(uint64_t a1)
{
  uint64_t v2 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18838662C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDevice.Identity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_188354264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18838662C();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteDevice.Identity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1883542F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_18838662C();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_18835436C()
{
  uint64_t result = sub_18838662C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t sub_1883543E8(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v5 = MEMORY[0x18961AFE8];
  unint64_t v6 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v7 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0LL;
  v8[3] = v4;
  v8[4] = v5;
  void v8[5] = v6;
  v13[3] = v7;
  v13[4] = sub_188349470( &qword_18C4E7D70,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder,  (uint64_t)&unk_188388A28);
  v13[0] = v8;
  swift_retain();
  NSError.encode(to:)(v13);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
    uint64_t v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v5 = sub_188386C44();
      swift_allocError();
      uint64_t v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
      v11[3] = &type metadata for NSErrorContainer;
      void *v11 = a1;
      v13[0] = 0LL;
      v13[1] = 0xE000000000000000LL;
      id v12 = a1;
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104LL))( v11,  *MEMORY[0x1896193B8],  v5);
      swift_willThrow();
    }

    swift_release();
  }

  return v5;
}

uint64_t sub_1883545C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v5 = MEMORY[0x18961AFE8];
  unint64_t v6 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v7 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0LL;
  v8[3] = v4;
  v8[4] = v5;
  void v8[5] = v6;
  uint64_t v12[3] = v7;
  v12[4] = sub_188349470( &qword_18C4E7D70,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder,  (uint64_t)&unk_188388A28);
  v12[0] = v8;
  swift_retain();
  XPCSideChannel.encode(to:)((uint64_t)v12);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    uint64_t v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v5 = sub_188386C44();
      swift_allocError();
      uint64_t v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
      v11[3] = type metadata accessor for XPCSideChannel();
      void *v11 = a1;
      v12[0] = 0LL;
      v12[1] = 0xE000000000000000LL;
      swift_retain();
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104LL))( v11,  *MEMORY[0x1896193B8],  v5);
      swift_willThrow();
    }

    swift_release();
  }

  return v5;
}

uint64_t sub_18835479C(void *a1, char a2)
{
  int v5 = a2 & 1;
  uint64_t v6 = *(void *)(v2 + 16);
  swift_retain();
  uint64_t v7 = MEMORY[0x18961AFE8];
  unint64_t v8 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v9 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0LL;
  v10[3] = v6;
  v10[4] = v7;
  void v10[5] = v8;
  v14[3] = v9;
  v14[4] = sub_188349470( &qword_18C4E7D70,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectEncoder,  (uint64_t)&unk_188388A28);
  v14[0] = v10;
  swift_retain();
  sub_18835D0C0(v14, (uint64_t)a1, v5);
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    uint64_t v7 = v10[2];
    if (v7)
    {
      swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v7 = sub_188386C44();
      swift_allocError();
      uint64_t v13 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
      *(void *)(v13 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D8);
      *(void *)uint64_t v13 = a1;
      *(_BYTE *)(v13 + 8) = v5 != 0;
      v14[0] = 0LL;
      v14[1] = 0xE000000000000000LL;
      sub_18835E4E8(a1, v5);
      sub_188386BB4();
      swift_bridgeObjectRelease();
      sub_188386C14();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v13,  *MEMORY[0x1896193B8],  v7);
      swift_willThrow();
    }

    swift_release();
  }

  return v7;
}

uint64_t XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(uint64_t (*a1)(void))
{
  return a1(*v1);
}

const uint8_t *sub_1883549C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v4 = MEMORY[0x18961AFE8];
  unint64_t v5 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v6 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  void v7[4] = v4;
  void v7[5] = v5;
  v9[3] = v6;
  v9[4] = sub_188349470( (unint64_t *)&unk_18C4E7CA0,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
  v9[0] = v7;
  type metadata accessor for XPCSideChannel();
  swift_allocObject();
  return XPCSideChannel.init(from:)((uint64_t)v9);
}

uint64_t sub_188354AA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v19 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v10 = MEMORY[0x18961AFE8];
  unint64_t v11 = sub_188338158(MEMORY[0x18961AFE8]);
  type metadata accessor for _XPCObjectDecoder();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a1;
  uint64_t v12[3] = v9;
  v12[4] = v10;
  void v12[5] = v11;
  sub_188354BF0();
  if (v3) {
    return swift_release();
  }
  uint64_t v13 = v19;
  char v20 = 0;
  uint64_t v14 = sub_188386D34();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = swift_release();
  uint64_t *v13 = v14;
  v13[1] = v16;
  return result;
}

uint64_t sub_188354BF0()
{
  if (MEMORY[0x1895C3C6C](*(void *)(v0 + 16)) == XPCTypeDictionary)
  {
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4E76F8);
    sub_188352344(&qword_18C4E76F0, qword_18C4E76F8, (uint64_t)&unk_188388B14);
    return sub_188386DA0();
  }

  else
  {
    uint64_t v1 = sub_188386C2C();
    swift_allocError();
    uint64_t v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
    *uint64_t v3 = &type metadata for DynamicCodableContainerCodingKeys;
    swift_bridgeObjectRetain();
    sub_188386C14();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v3,  *MEMORY[0x189619358],  v1);
    return swift_willThrow();
  }

uint64_t XPCDictionary.subscript.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v1, v2);
  swift_release();
  if (string) {
    uint64_t string = sub_1883868F0();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return string;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return 2LL;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  return 0LL;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  return 2LL;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    XPCDictionary.underlyingConnection.getter();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    swift_unknownObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }

  return 0LL;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a2)
  {
    uint64_t v4 = sub_1883868A8();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v3, (const char *)(v4 + 32), (const char *)(v5 + 32));
    swift_release();
  }

  else
  {
    uint64_t v6 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v3, (const char *)(v6 + 32), 0LL);
  }

  return swift_release();
}

void *XPCDictionary.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  v5[1] = *(_OWORD *)v2;
  uint64_t v6 = v3;
  return sub_18835ABEC( (void *(*)(uint64_t *__return_ptr, void *))sub_18835AB4C,  (uint64_t)v5,  a1,  a2,  (uint64_t *)&unk_18C708540);
}

uint64_t sub_188354F00@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  char v27 = a1;
  uint64_t v24 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1895F8860])();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8860](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v16);
  char v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    }
    uint64_t v22 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a6, v22, 1LL);
}

uint64_t XPCDictionary.createReply()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t v4 = MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v4);
  unint64_t v8 = (char *)v15 - v7;
  xpc_object_t v9 = *v1;
  uint64_t result = (uint64_t)xpc_dictionary_create_reply(*v1);
  if (!result)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    return result;
  }

  uint64_t v11 = result;
  v15[1] = result;
  v15[2] = 0xD000000000000019LL;
  v15[3] = 0x800000018838B7A0LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v9, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1883868F0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1883865E4();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_18838662C();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1LL, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v8, v6, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    sub_188344660((uint64_t)v6, &qword_18C4E7960);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

  uint64_t v14 = sub_18838662C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v8, 1LL, 1LL, v14);
LABEL_9:
  sub_188345B34((uint64_t)v8);
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v11;
  a1[1] = 0xD000000000000019LL;
  a1[2] = 0x800000018838B7A0LL;
  return result;
}

Swift::Bool __swiftcall XPCDictionary.sendReply()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = xpc_dictionary_get_remote_connection(v1);
  if (v2)
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass()) {
      xpc_remote_connection_send_message();
    }
    else {
      xpc_connection_send_message(v2, v1);
    }
    swift_unknownObjectRelease();
  }

  return v2 != 0LL;
}

xpc_object_t XPCDictionary.init()@<X0>(void *a1@<X8>)
{
  xpc_object_t result = xpc_dictionary_create(0LL, 0LL, 0LL);
  *a1 = result;
  a1[1] = 0xD000000000000019LL;
  a1[2] = 0x800000018838B7A0LL;
  return result;
}

void *sub_18835534C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v4 = MEMORY[0x18961AFE8];
  unint64_t v5 = sub_188338158(MEMORY[0x18961AFE8]);
  uint64_t v6 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  void v7[4] = v4;
  void v7[5] = v5;
  v11[3] = v6;
  void v11[4] = sub_188349470( (unint64_t *)&unk_18C4E7CA0,  (uint64_t (*)(uint64_t))type metadata accessor for _XPCObjectDecoder,  (uint64_t)&unk_1883889E0);
  v11[0] = v7;
  sub_188352280(0LL, (unint64_t *)&qword_18C4E7888);
  sub_188349220((uint64_t)v11, (uint64_t)v10);
  unint64_t v8 = NSError.init(from:)(v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v8;
}

uint64_t XPCDictionary.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0xD000000000000019LL;
  a2[2] = 0x800000018838B7A0LL;
  return result;
}

xpc_connection_t XPCDictionary.underlyingConnection.getter()
{
  xpc_connection_t result = xpc_dictionary_get_remote_connection(*v0);
  if (result)
  {
    xpc_connection_t v2 = result;
    objc_opt_self();
    uint64_t v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for RemoteXPCPeerConnection();
      xpc_connection_t result = (xpc_connection_t)swift_allocObject();
      *((void *)result + 9) = 0LL;
      *((void *)result + 6) = 0LL;
      *((void *)result + 7) = 0LL;
      *((_BYTE *)result + 64) = 0;
      *((void *)result + 4) = 0LL;
      *((void *)result + 5) = 0LL;
      *((void *)result + 3) = v4;
    }

    else
    {
      type metadata accessor for SystemXPCPeerConnection();
      xpc_connection_t result = (xpc_connection_t)swift_allocObject();
      *((void *)result + 4) = 0LL;
      *((void *)result + 5) = 0LL;
      *((void *)result + 3) = v2;
    }

    *((void *)result + 2) = MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t XPCDictionary.withUnsafeUnderlyingConnection<A>(_:)(void (*a1)(void))
{
  uint64_t v3 = xpc_dictionary_get_remote_connection(*v1);
  a1();
  return swift_unknownObjectRelease();
}

uint64_t XPCDictionary.auditToken.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C8];
  xpc_dictionary_get_audit_token();
  memset(v3, 0, sizeof(v3));
  uint64_t result = XPCaudit_token_to_pid(v3);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = (_DWORD)result == 0;
  return result;
}

xpc_object_t XPCDictionary.entitlements.getter@<X0>(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x1895F89C8];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_dictionary_get_audit_token();
  memset(v4, 0, sizeof(v4));
  int v1 = XPCaudit_token_to_pid(v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    if (xpc_copy_entitlements_data_for_token())
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }
  }

  xpc_object_t result = xpc_dictionary_create(0LL, 0LL, 0LL);
  *a1 = result;
  a1[1] = 0xD000000000000019LL;
  a1[2] = 0x800000018838B7A0LL;
  return result;
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v5 = *v2;
  int v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

{
  void **v2;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  int v5 = *v2;
  int v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL, a1);
}

xpc_object_t XPCDictionary.subscript.getter()
{
  int v1 = *v0;
  uint64_t v2 = sub_1883868A8();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, (const char *)(v2 + 32));
  swift_release();
  return v3;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;
  int v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1883566EC( a1,  a2,  a3,  a4,  a5,  (uint64_t)sub_18835E6DC,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

{
  return sub_1883566EC( a1,  a2,  a3,  a4,  a5,  (uint64_t)sub_18835E6C0,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

{
  return sub_1883566EC( a1,  a2,  a3,  a4,  a5,  (uint64_t)sub_18835E6A4,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_188354F00);
}

xpc_object_t sub_188355AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v73 = a4;
  int64_t v68 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8860](AssociatedTypeWitness);
  v65[1] = (char *)v65 - v8;
  uint64_t v9 = MEMORY[0x1895F8860](v7);
  uint64_t v66 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8860](v9);
  uint64_t v13 = (char *)v65 - v12;
  uint64_t v14 = MEMORY[0x1895F8860](v11);
  unint64_t v70 = (char *)v65 - v15;
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  int64_t v71 = (char *)v65 - v17;
  uint64_t v18 = MEMORY[0x1895F8860](v16);
  uint64_t v69 = (char *)v65 - v19;
  uint64_t v20 = MEMORY[0x1895F8860](v18);
  uint64_t v22 = (char *)v65 - v21;
  uint64_t v23 = MEMORY[0x1895F8860](v20);
  uint64_t v25 = (char *)v65 - v24;
  MEMORY[0x1895F8860](v23);
  char v27 = (char *)v65 - v26;
  uint64_t v72 = v28;
  char v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29((char *)v65 - v26, a1, a2);
  LOBYTE(a1) = sub_188386B84();
  v29(v25, (uint64_t)v27, a2);
  uint64_t v67 = v13;
  BOOL v30 = (a1 & 1) != 0 && sub_188386B78() > 64;
  char v31 = *(void (**)(char *, uint64_t))(v72 + 8);
  v31(v25, a2);
  v29(v22, (uint64_t)v27, a2);
  if (!v30) {
    goto LABEL_18;
  }
  int64_t v75 = 0x8000000000000000LL;
  if ((sub_188386B84() & 1) != 0)
  {
    uint64_t v32 = sub_188386B78();
    char v33 = v73;
    if (v32 >= 64)
    {
      sub_188345460();
      char v39 = v69;
      sub_188386B54();
      char v40 = sub_18838680C();
      v31(v39, a2);
      v31(v22, a2);
      if ((v40 & 1) != 0) {
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v34 = sub_188386B6C();
      v31(v22, a2);
      if (v34 < v75) {
        goto LABEL_37;
      }
    }

    goto LABEL_19;
  }

  char v35 = sub_188386B84();
  uint64_t v36 = sub_188386B78();
  if ((v35 & 1) == 0)
  {
    if (v36 < 64)
    {
      uint64_t v41 = sub_188386B6C();
      v31(v22, a2);
      char v33 = v73;
      if (v41 < v75) {
        goto LABEL_37;
      }
      goto LABEL_19;
    }

LABEL_37:
    v31(v27, a2);
    xpc_object_t result = 0LL;
    goto LABEL_38;
  }

  sub_188345460();
  char v37 = v69;
  sub_188386B54();
  char v38 = sub_18838680C();
  v31(v37, a2);
  v31(v22, a2);
  char v33 = v73;
  if ((v38 & 1) != 0) {
    goto LABEL_37;
  }
LABEL_19:
  uint64_t v42 = sub_188386B78();
  uint64_t v43 = v71;
  v29(v71, (uint64_t)v27, a2);
  if (v42 < 65)
  {
    uint64_t v46 = sub_188386B78();
    v31(v43, a2);
    if (v46 != 64)
    {
      uint64_t v55 = v70;
      v29(v70, (uint64_t)v27, a2);
      uint64_t v45 = v55;
      goto LABEL_29;
    }

    char v47 = sub_188386B84();
    __int128 v48 = v70;
    v29(v70, (uint64_t)v27, a2);
    uint64_t v45 = v48;
    if ((v47 & 1) != 0)
    {
LABEL_29:
      v31(v45, a2);
      goto LABEL_30;
    }
  }

  else
  {
    v31(v43, a2);
    uint64_t v44 = v70;
    v29(v70, (uint64_t)v27, a2);
    uint64_t v45 = v44;
  }

  int64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
  char v49 = sub_188386B84();
  uint64_t v50 = sub_188386B78();
  if ((v49 & 1) != 0)
  {
    if (v50 > 64)
    {
      sub_188345460();
      uint64_t v51 = v69;
      sub_188386B54();
      char v52 = sub_18838680C();
      uint64_t v53 = v51;
      char v33 = v73;
      v31(v53, a2);
      uint64_t v54 = v45;
      goto LABEL_32;
    }

    goto LABEL_27;
  }

  if (v50 <= 63)
  {
LABEL_27:
    sub_188386B6C();
    goto LABEL_29;
  }

  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v58 = v69;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v45, a2);
  sub_188345460();
  char v59 = v67;
  sub_188386B54();
  char v52 = sub_18838680C();
  v31(v59, a2);
  uint64_t v54 = v58;
  char v33 = v73;
LABEL_32:
  v31(v54, a2);
  if ((v52 & 1) != 0) {
    goto LABEL_37;
  }
LABEL_30:
  int64_t v56 = sub_188386B6C();
  v31(v27, a2);
  xpc_object_t result = xpc_int64_create(v56);
LABEL_38:
  void *v33 = result;
  return result;
}

uint64_t sub_18835620C@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8860](v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v16);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1)
{
  if (a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_xpc_object.type.getter();
  }

  uint64_t v2 = *v1;
  uint64_t v3 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v2, (const char *)(v3 + 32), 0LL);
  swift_release();
  return swift_unknownObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v2 = sub_1883865D8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950);
  MEMORY[0x1895F8860](v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188344D68(a1, (uint64_t)v8, (uint64_t *)&unk_18C4E7950);
  uint64_t v9 = 0LL;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_1883865B4();
  uint64_t result = xpc_date_create_absolute();
  if (result)
  {
    uint64_t v9 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_4:
    XPCDictionary.subscript.setter(v9);
    return sub_188344660(a1, (uint64_t *)&unk_18C4E7950);
  }

  __break(1u);
  return result;
}

void (*XPCDictionary.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  void *v11 = a2;
  uint64_t v12 = sub_188386B24();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_18835658C;
}

{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  void *v11 = a2;
  uint64_t v12 = sub_188386B24();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_188356CEC;
}

{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  void *v11 = a2;
  uint64_t v12 = sub_188386B24();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  XPCDictionary.subscript.getter(a4, (uint64_t)v15);
  return sub_1883571FC;
}

void sub_18835658C(uint64_t **a1, char a2)
{
  sub_188356D00( a1,  a2,  (uint64_t)sub_18835E6DC,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

uint64_t _s7Mercury13XPCDictionaryVyxSgSScSZRzluig_0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18835663C( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v7, v8, v5, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1883566EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  uint64_t v8 = sub_188386B24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
}

xpc_object_t sub_188356734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v55 = a4;
  uint64_t v53 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8860](AssociatedTypeWitness);
  char v52 = (char *)&v49 - v8;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](v7);
  uint64_t v50 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8860](v10);
  int64_t v56 = (char *)&v49 - v13;
  uint64_t v14 = MEMORY[0x1895F8860](v12);
  uint64_t v54 = (char *)&v49 - v15;
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  uint64_t v18 = (char *)&v49 - v17;
  MEMORY[0x1895F8860](v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21((char *)&v49 - v19, a1, a2);
  LOBYTE(a1) = sub_188386B84();
  unint64_t v57 = v20;
  v21(v18, (uint64_t)v20, a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v51 = *(void (**)(char *, uint64_t))(v9 + 8);
    v51(v18, a2);
    goto LABEL_6;
  }

  swift_getAssociatedConformanceWitness();
  uint64_t v49 = AssociatedTypeWitness;
  sub_1883871B4();
  uint64_t v22 = v54;
  sub_188386FBC();
  char v23 = sub_18838680C();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v22, a2);
  v24(v18, a2);
  if ((v23 & 1) == 0)
  {
    uint64_t v51 = v24;
LABEL_6:
    uint64_t v27 = v57;
    uint64_t v28 = sub_188386B78();
    uint64_t v29 = v56;
    v21(v56, (uint64_t)v27, a2);
    if (v28 <= 63)
    {
      BOOL v30 = v29;
      uint64_t v31 = a2;
      uint64_t v32 = v51;
LABEL_8:
      v32(v30, v31);
      uint64_t v26 = v55;
LABEL_9:
      char v33 = v57;
      uint64_t v34 = sub_188386B6C();
      v32(v33, a2);
      xpc_object_t result = xpc_uint64_create(v34);
      goto LABEL_20;
    }

    unint64_t v58 = -1LL;
    char v35 = sub_188386B84();
    uint64_t v36 = sub_188386B78();
    if ((v35 & 1) != 0)
    {
      if (v36 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_1883871B4();
        char v37 = v54;
        sub_188386FBC();
        char v38 = v56;
        char v39 = sub_188386800();
        uint64_t v32 = v51;
        v51(v37, a2);
        unint64_t v40 = v58;
        uint64_t v41 = v50;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v38, a2);
        if ((v39 & 1) == 0)
        {
          BOOL v30 = v41;
          uint64_t v31 = a2;
          goto LABEL_8;
        }

        unint64_t v42 = sub_188386B6C();
        v32(v41, a2);
        BOOL v43 = v40 >= v42;
        goto LABEL_18;
      }
    }

    else if (v36 < 65)
    {
      char v47 = v56;
      unint64_t v48 = sub_188386B6C();
      uint64_t v32 = v51;
      v51(v47, a2);
      BOOL v43 = v58 >= v48;
LABEL_18:
      uint64_t v26 = v55;
      if (v43) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }

    sub_1883452C8();
    uint64_t v44 = v54;
    sub_188386B54();
    uint64_t v45 = v56;
    char v46 = sub_18838680C();
    uint64_t v32 = v51;
    v51(v44, a2);
    v32(v45, a2);
    uint64_t v26 = v55;
    if ((v46 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    v32(v57, a2);
    xpc_object_t result = 0LL;
    goto LABEL_20;
  }

  v24(v57, a2);
  xpc_object_t result = 0LL;
  uint64_t v26 = v55;
LABEL_20:
  *uint64_t v26 = result;
  return result;
}

void sub_188356CEC(uint64_t **a1, char a2)
{
  sub_188356D00( a1,  a2,  (uint64_t)sub_18835E6C0,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

void sub_188356D00( uint64_t **a1, char a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[7];
  uint64_t v6 = (void *)(*a1)[8];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = (*a1)[3];
  uint64_t v11 = (*a1)[1];
  uint64_t v10 = (*a1)[2];
  uint64_t v12 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[7], v6, v7);
    swift_bridgeObjectRetain();
    sub_18835DC5C((uint64_t)v5, v12, v11, v10, v9, a3, a4);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v8 + 8);
    v13(v5, v7);
  }

  else
  {
    swift_bridgeObjectRetain();
    sub_18835DC5C((uint64_t)v6, v12, v11, v10, v9, a3, a4);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v8 + 8);
  }

  v13(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

uint64_t XPCDictionary.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return sub_18835721C( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter,  a8);
}

{
  return sub_18835721C( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter,  a8);
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return swift_unknownObjectRelease();
}

xpc_object_t sub_188357070@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = xpc_double_create(*(double *)&v6[1]);
  *a2 = result;
  return result;
}

void sub_1883571FC(uint64_t **a1, char a2)
{
  sub_188356D00( a1,  a2,  (uint64_t)sub_18835E6A4,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_188354F00);
}

uint64_t sub_18835721C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  uint64_t v28 = a9;
  uint64_t v14 = sub_188386B24();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8860](v14);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  uint64_t v29 = *v9;
  uint64_t v30 = v18;
  uint64_t v31 = v19;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v27(a1, a2, a3, a6, v26);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v20 = *(void *)(a6 - 8);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1LL, a6);
  if ((_DWORD)v21 != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v28, v17, a6);
  }
  v25(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_188357610@<X0>(_BYTE *a1@<X8>)
{
  char v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_188357690(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    xpc_object_t v2 = 0LL;
  }

  else
  {
    BOOL v3 = v1 & 1;
    swift_bridgeObjectRetain();
    xpc_object_t v2 = xpc_BOOL_create(v3);
  }

  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.setter(char a1)
{
  if (a1 == 2) {
    xpc_object_t v1 = 0LL;
  }
  else {
    xpc_object_t v1 = xpc_BOOL_create(a1 & 1);
  }
  return XPCDictionary.subscript.setter((uint64_t)v1);
}

uint64_t (*XPCDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 24) = XPCDictionary.subscript.getter();
  return sub_18835779C;
}

uint64_t sub_18835779C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    xpc_object_t v2 = 0LL;
  }

  else
  {
    BOOL v3 = v1 & 1;
    swift_bridgeObjectRetain();
    xpc_object_t v2 = xpc_BOOL_create(v3);
  }

  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  swift_bridgeObjectRelease_n();
  uint64_t v8 = swift_unknownObjectRelease_n();
  return a3(v8) & 1;
}

uint64_t XPCDictionary.subscript.getter@<X0>(void *a1@<X8>)
{
  BOOL v3 = *v1;
  uint64_t v4 = sub_1883868A8();
  xpc_object_t v5 = xpc_dictionary_get_dictionary(v3, (const char *)(v4 + 32));
  uint64_t result = swift_release();
  unint64_t v7 = 0xD000000000000019LL;
  if (!v5) {
    unint64_t v7 = 0LL;
  }
  unint64_t v8 = 0x800000018838B7A0LL;
  if (!v5) {
    unint64_t v8 = 0LL;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  BOOL v3 = *v1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v5 = xpc_dictionary_get_dictionary(v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v7 = 0xD000000000000019LL;
  if (!v5) {
    unint64_t v7 = 0LL;
  }
  unint64_t v8 = 0x800000018838B7A0LL;
  if (!v5) {
    unint64_t v8 = 0LL;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

double sub_188357A6C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_188357AF8(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = *a2;
  if (*a1) {
    swift_unknownObjectRetain();
  }
  uint64_t v4 = sub_1883868A8();
  xpc_dictionary_set_value(v3, (const char *)(v4 + 32), v2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t XPCDictionary.subscript.setter(void **a1)
{
  uint64_t v2 = *a1;
  BOOL v3 = *v1;
  if (*a1)
  {
    uint64_t v4 = swift_unknownObjectRetain();
    sub_18835DD0C(v4);
  }

  uint64_t v5 = sub_1883868A8();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v3, (const char *)(v5 + 32), v2);
  swift_unknownObjectRelease();
  return swift_release();
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  unint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  void v7[4] = a3;
  void v7[5] = v3;
  v7[3] = a2;
  unint64_t v8 = *v3;
  uint64_t v9 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v10 = xpc_dictionary_get_dictionary(v8, v9);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v11 = 0xD000000000000019LL;
  if (!v10) {
    unint64_t v11 = 0LL;
  }
  unint64_t v12 = 0x800000018838B7A0LL;
  if (!v10) {
    unint64_t v12 = 0LL;
  }
  *unint64_t v7 = v10;
  v7[1] = v11;
  v7[2] = v12;
  return sub_188357CC4;
}

void sub_188357CC4(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = **a1;
  uint64_t v4 = *(void **)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    if (v3) {
      swift_unknownObjectRetain();
    }
    uint64_t v5 = sub_1883868A8();
    xpc_dictionary_set_value(v4, (const char *)(v5 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
    sub_18835DD0C((uint64_t)*v2);
  }

  else
  {
    swift_bridgeObjectRetain();
    if (v3)
    {
      uint64_t v6 = swift_unknownObjectRetain();
      sub_18835DD0C(v6);
    }

    uint64_t v7 = sub_1883868A8();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v4, (const char *)(v7 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
  }

  free(v2);
}

uint64_t sub_188357E34@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  BOOL v3 = *a1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_188357ECC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1);
}

uint64_t (*XPCDictionary.subscript.modify( void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  xpc_object_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v7;
  return sub_188357FB8;
}

uint64_t sub_188357FB8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
    return swift_unknownObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    return XPCDictionary.subscript.setter(v2);
  }

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_188386890();
  MEMORY[0x1895F8860](v5);
  uint64_t v6 = *v3;
  uint64_t v7 = sub_1883868A8();
  uint64_t string = xpc_dictionary_get_string(v6, (const char *)(v7 + 32));
  swift_release();
  if (!string) {
    return 0LL;
  }
  if ((a3 & 1) == 0) {
    return sub_1883868F0();
  }
  strlen(string);
  sub_188386878();
  return sub_188386830();
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v7) {
    return 0LL;
  }
  unint64_t v8 = sub_1883584E0(v7, a3 & 1);
  swift_unknownObjectRelease();
  return v8;
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    unint64_t v8 = sub_1883584E0(v7, a3 & 1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return 0LL;
  }

  return v8;
}

uint64_t sub_188358110@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3 = *a1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v3, v4);
  swift_release();
  if (string)
  {
    uint64_t string = sub_1883868F0();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
  }

  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v7 = 0LL;
  }

  *a2 = string;
  a2[1] = v7;
  return result;
}

uint64_t sub_1883581D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1, v2);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  void v7[4] = v3;
  v7[2] = a2;
  unint64_t v8 = *v3;
  uint64_t v9 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v8, v9);
  swift_release();
  if (string)
  {
    uint64_t string = sub_1883868F0();
    uint64_t v12 = v11;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = 0LL;
  }

  *uint64_t v7 = string;
  v7[1] = v12;
  return sub_188358308;
}

{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  unint64_t v8 = sub_1883865D8();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[4] = v9;
  xpc_object_t v10 = *(void *)(v9 + 64);
  void v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  uint64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950) - 8) + 64LL);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  v7[9] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v7[10] = v12;
  XPCDictionary.subscript.getter((uint64_t)v12);
  return sub_18835A78C;
}

void sub_188358308(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  BOOL v3 = *(void ***)(*(void *)a1 + 32LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 8LL);
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (const char *)(sub_1883868A8() + 32);
      uint64_t v7 = sub_1883868A8();
      xpc_dictionary_set_string(v5, v6, (const char *)(v7 + 32));
      swift_release();
    }

    else
    {
      uint64_t v11 = *v3;
      uint64_t v12 = sub_1883868A8();
      xpc_dictionary_set_value(v11, (const char *)(v12 + 32), 0LL);
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    if (v4)
    {
      unint64_t v8 = *v3;
      uint64_t v9 = (const char *)(sub_1883868A8() + 32);
      uint64_t v10 = sub_1883868A8();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_string(v8, v9, (const char *)(v10 + 32));
      swift_release();
    }

    else
    {
      uint64_t v13 = *v3;
      uint64_t v14 = sub_1883868A8();
      xpc_dictionary_set_value(v13, (const char *)(v14 + 32), 0LL);
    }

    swift_release();
  }

  free(v2);
}

uint64_t sub_1883584E0(void *a1, char a2)
{
  uint64_t v4 = sub_188386584();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8860](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = XPCTypeData;
  if (v8 != MEMORY[0x1895C3C6C](a1)) {
    return 0LL;
  }
  bytes_ptr = xpc_data_get_bytes_ptr(a1);
  if (!bytes_ptr) {
    return 0LL;
  }
  uint64_t v12 = bytes_ptr;
  size_t length = xpc_data_get_length(a1);
  if ((a2 & 1) == 0) {
    return sub_18835DBB0(v12, length);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x189606B30], v4);
  sub_188386578();
  if (length)
  {
    sub_1883864A0();
    swift_allocObject();
    swift_retain();
    uint64_t v14 = sub_188386464();
    uint64_t v9 = sub_18835DD38(v14, length);
    swift_release();
  }

  else
  {
    uint64_t v15 = (void (*)(_BYTE *, void))sub_188386578();
    v15(v12, 0LL);
    swift_release();
    swift_release();
    uint64_t v9 = 0LL;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

_BYTE *XPCDictionary.subscript.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  uint64_t v4 = XPCTypeData;
  if (v4 != MEMORY[0x1895C3C6C](v3))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_5:
    swift_unknownObjectRelease();
    return 0LL;
  }

  bytes_ptr = xpc_data_get_bytes_ptr(v3);
  if (bytes_ptr)
  {
    size_t length = xpc_data_get_length(v3);
    bytes_ptr = (_BYTE *)sub_18835DBB0(bytes_ptr, length);
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return bytes_ptr;
}

uint64_t sub_1883587CC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = XPCDictionary.subscript.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_188358850(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  sub_18835E03C(v1, v2);
  sub_18835DE1C(v1, v2);
  return sub_188352230(v1, v2);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, unint64_t a2)
{
  return sub_188352230(a1, a2);
}

{
  sub_18835DE1C(a1, a2);
  return sub_188352230(a1, a2);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  void v7[4] = v3;
  v7[2] = a2;
  *uint64_t v7 = XPCDictionary.subscript.getter();
  v7[1] = v8;
  return sub_18835896C;
}

void sub_18835896C(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  unint64_t v5 = (*a1)[1];
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    sub_18835E03C(v4, v5);
    sub_18835DE1C(v4, v5);
    sub_188352230(v4, v5);
    uint64_t v6 = *v3;
    unint64_t v7 = v3[1];
  }

  else
  {
    sub_18835DE1C(v4, v5);
    uint64_t v6 = v4;
    unint64_t v7 = v5;
  }

  sub_188352230(v6, v7);
  free(v3);
}

uint64_t sub_188358AEC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v7 = xpc_dictionary_get_value(v4, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    uint64_t v8 = sub_1883584E0(v7, v5);
    unint64_t v10 = v9;
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xF000000000000000LL;
  }

  *a3 = v8;
  a3[1] = v10;
  return result;
}

void (*XPCDictionary.subscript.modify( void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, char a2)
{
  unint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a3;
  v9[4] = v4;
  v9[2] = a2;
  unint64_t v10 = *v4;
  uint64_t v11 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v12 = xpc_dictionary_get_value(v10, v11);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v13 = sub_1883584E0(v12, a4 & 1);
    unint64_t v15 = v14;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = 0LL;
    unint64_t v15 = 0xF000000000000000LL;
  }

  *unint64_t v9 = v13;
  v9[1] = v15;
  return sub_18835896C;
}

uint64_t sub_188359064@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1883590E4(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  id v2 = v1;
  return XPCDictionary.subscript.setter(v1);
}

uint64_t XPCDictionary.subscript.setter(void *a1)
{
  if (a1)
  {
    uint64_t v3 = (void *)sub_18838650C();
    uint64_t v4 = *v1;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    char v5 = xpc_dictionary_get_remote_connection(v4);
    sub_188359248((uint64_t)v5, v3, v1);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  else
  {
    xpc_object_t v7 = *v1;
    uint64_t v8 = sub_1883868A8();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v7, (const char *)(v8 + 32), 0LL);
    swift_unknownObjectRelease();
    return swift_release();
  }

uint64_t sub_188359248(uint64_t a1, void *a2, void **a3)
{
  if (a1)
  {
    type metadata accessor for XPCObjectEncoder();
    swift_allocObject();
    XPCObjectEncoder.init(underlyingConnection:)(a1);
  }

  else
  {
    type metadata accessor for XPCObjectEncoder();
    *(void *)(swift_allocObject() + 16) = 0LL;
  }

  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = sub_1883543E8(a2);
  if (v3)
  {

    swift_release();
    sub_188386A70();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1883883A0;
    id v9 = a2;
    id v10 = objc_msgSend(v9, sel_description);
    uint64_t v11 = sub_188386860();
    uint64_t v13 = v12;

    *(void *)(v8 + 56) = MEMORY[0x189617FA8];
    *(void *)(v8 + 64) = sub_18834DFC0();
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v13;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    unint64_t v14 = (void *)sub_188386B18();
    sub_18838668C();
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v15 = (void *)v7;
    swift_release();
    uint64_t v16 = *a3;
    uint64_t v17 = (const char *)(sub_1883868A8() + 32);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    xpc_dictionary_set_value(v16, v17, v15);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }

  return swift_release();
}

void (*XPCDictionary.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = XPCDictionary.subscript.getter();
  return sub_1883594B0;
}

void sub_1883594B0(void **a1, char a2)
{
  id v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v3 = v2;
    XPCDictionary.subscript.setter(v2);
  }

  else
  {
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
  }

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if ((v6 & 1) != 0)
    {
      uint64_t v10 = sub_18838662C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(a1, 1LL, 1LL, v10);
    }

    else
    {
      sub_188386608();
      uint64_t v7 = sub_18838662C();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, 0LL, 1LL, v7);
    }

    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = sub_18838662C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if ((v6 & 1) != 0)
    {
      id v9 = sub_18838662C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(a1, 1LL, 1LL, v9);
    }

    else
    {
      sub_188386608();
      uint64_t v7 = sub_18838662C();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, 0LL, 1LL, v7);
    }

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = sub_18838662C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(a1, 1LL, 1LL, v8);
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;
  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  char v6 = sub_1883865D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, 1LL, 1LL, v6);
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;
  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  char v6 = sub_1883865D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, 1LL, 1LL, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_188359830(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  sub_188344D68(a1, (uint64_t)v7, &qword_18C4E7960);
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter((uint64_t)v7, v9, v8);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C8];
  uint64_t v6 = sub_18838662C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  MEMORY[0x1895F8860](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188344D68(a1, (uint64_t)v12, &qword_18C4E7960);
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1LL, v6);
  xpc_object_t v14 = 0LL;
  if (v13 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    unint64_t v15 = sub_188386614();
    unsigned __int8 v16 = v15;
    unsigned __int8 v18 = v17;
    unint64_t v19 = v15 >> 8;
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    unint64_t v20 = v15 >> 16;
    unint64_t v21 = v15 >> 24;
    uint64_t v38 = a1;
    unint64_t v22 = v15 >> 40;
    unint64_t v27 = HIDWORD(v15);
    unint64_t v28 = HIWORD(v15);
    unint64_t v29 = HIBYTE(v15);
    unint64_t v30 = v17 >> 8;
    unint64_t v31 = v17 >> 16;
    unint64_t v32 = v17 >> 24;
    unint64_t v33 = HIDWORD(v17);
    unint64_t v34 = v17 >> 40;
    unint64_t v35 = HIWORD(v17);
    char v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    unint64_t v24 = HIBYTE(v17);
    v23(v9, v6);
    uuid[0] = v16;
    uuid[1] = v19;
    uuid[2] = v20;
    uuid[3] = v21;
    uuid[4] = v27;
    uuid[5] = v22;
    a1 = v38;
    uuid[6] = v28;
    uuid[7] = v29;
    unsigned __int8 uuid[8] = v18;
    uuid[9] = v30;
    uuid[10] = v31;
    uuid[11] = v32;
    uuid[12] = v33;
    uuid[13] = v34;
    uuid[14] = v35;
    uuid[15] = v24;
    xpc_object_t v14 = xpc_uuid_create(uuid);
  }

  XPCDictionary.subscript.setter((uint64_t)v14);
  return sub_188344660(a1, &qword_18C4E7960);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t v8 = sub_18838662C();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[4] = v9;
  void v7[5] = malloc(*(void *)(v9 + 64));
  size_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960) - 8) + 64LL);
  v7[6] = malloc(v10);
  v7[7] = malloc(v10);
  v7[8] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[9] = v11;
  uint64_t v12 = *v3;
  int v13 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v14 = xpc_dictionary_get_value(v12, v13);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    xpc_uuid_get_uuid(_:)(v14);
    if ((v15 & 1) != 0)
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, 1LL, 1LL, v8);
    }

    else
    {
      sub_188386608();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0LL, 1LL, v8);
    }

    swift_unknownObjectRelease();
  }

  else
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, 1LL, 1LL, v8);
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return sub_188359D48;
}

void sub_188359D48(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)(v2 + 32);
    sub_188344D68(v3, v4, &qword_18C4E7960);
    sub_188344D68(v4, v5, &qword_18C4E7960);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
    {
      swift_bridgeObjectRetain();
      xpc_object_t v8 = 0LL;
    }

    else
    {
      uint64_t v13 = *(void *)(v2 + 40);
      uint64_t v14 = *(void *)(v2 + 24);
      uint64_t v15 = *(void *)(v2 + 32);
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, *(void *)(v2 + 48), v14);
      swift_bridgeObjectRetain();
      unint64_t v16 = sub_188386614();
      char v17 = v16;
      char v19 = v18;
      unint64_t v20 = v16 >> 8;
      unint64_t v21 = v16 >> 16;
      unint64_t v22 = v16 >> 24;
      unint64_t v23 = HIDWORD(v16);
      unint64_t v44 = v16 >> 40;
      unint64_t v46 = HIWORD(v16);
      unint64_t v48 = HIBYTE(v16);
      unint64_t v50 = v18 >> 8;
      unint64_t v52 = v18 >> 16;
      unint64_t v54 = v18 >> 24;
      unint64_t v56 = HIDWORD(v18);
      unint64_t v58 = v18 >> 40;
      unint64_t v60 = HIWORD(v18);
      unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      unint64_t v25 = HIBYTE(v18);
      v24(v13, v14);
      *(_BYTE *)(v2 + 80) = v17;
      *(_BYTE *)(v2 + 81) = v20;
      *(_BYTE *)(v2 + 82) = v21;
      *(_BYTE *)(v2 + 83) = v22;
      *(_BYTE *)(v2 + 84) = v23;
      *(_BYTE *)(v2 + 85) = v44;
      *(_BYTE *)(v2 + 86) = v46;
      *(_BYTE *)(v2 + 87) = v48;
      *(_BYTE *)(v2 + 88) = v19;
      *(_BYTE *)(v2 + 89) = v50;
      *(_BYTE *)(v2 + 90) = v52;
      *(_BYTE *)(v2 + 91) = v54;
      *(_BYTE *)(v2 + 92) = v56;
      *(_BYTE *)(v2 + 93) = v58;
      *(_BYTE *)(v2 + 94) = v60;
      *(_BYTE *)(v2 + 95) = v25;
      xpc_object_t v8 = xpc_uuid_create((const unsigned __int8 *)(v2 + 80));
    }

    unint64_t v27 = *(void **)(v2 + 64);
    uint64_t v26 = *(void **)(v2 + 72);
    unint64_t v29 = *(void **)(v2 + 48);
    unint64_t v28 = *(void **)(v2 + 56);
    unint64_t v30 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v8);
    sub_188344660((uint64_t)v28, &qword_18C4E7960);
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 64);
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v11 = *(void *)(v2 + 32);
    sub_188344D68(v3, v9, &qword_18C4E7960);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
    {
      swift_bridgeObjectRetain();
      xpc_object_t v12 = 0LL;
    }

    else
    {
      uint64_t v32 = *(void *)(v2 + 32);
      uint64_t v31 = *(void *)(v2 + 40);
      uint64_t v33 = *(void *)(v2 + 24);
      (*(void (**)(uint64_t, void, uint64_t))(v32 + 32))(v31, *(void *)(v2 + 64), v33);
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_188386614();
      char v35 = v34;
      char v37 = v36;
      unint64_t v38 = v34 >> 8;
      unint64_t v39 = v34 >> 16;
      unint64_t v40 = v34 >> 24;
      unint64_t v41 = HIDWORD(v34);
      unint64_t v45 = v34 >> 40;
      unint64_t v47 = HIWORD(v34);
      unint64_t v49 = HIBYTE(v34);
      unint64_t v51 = v36 >> 8;
      unint64_t v53 = v36 >> 16;
      unint64_t v55 = v36 >> 24;
      unint64_t v57 = HIDWORD(v36);
      unint64_t v59 = v36 >> 40;
      unint64_t v61 = HIWORD(v36);
      unint64_t v42 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      unint64_t v43 = HIBYTE(v36);
      v42(v31, v33);
      *(_BYTE *)(v2 + 96) = v35;
      *(_BYTE *)(v2 + 97) = v38;
      *(_BYTE *)(v2 + 98) = v39;
      *(_BYTE *)(v2 + 99) = v40;
      *(_BYTE *)(v2 + 100) = v41;
      *(_BYTE *)(v2 + 101) = v45;
      *(_BYTE *)(v2 + 102) = v47;
      *(_BYTE *)(v2 + 103) = v49;
      *(_BYTE *)(v2 + 104) = v37;
      *(_BYTE *)(v2 + 105) = v51;
      *(_BYTE *)(v2 + 106) = v53;
      *(_BYTE *)(v2 + 107) = v55;
      *(_BYTE *)(v2 + 108) = v57;
      *(_BYTE *)(v2 + 109) = v59;
      *(_BYTE *)(v2 + 110) = v61;
      *(_BYTE *)(v2 + 111) = v43;
      xpc_object_t v12 = xpc_uuid_create((const unsigned __int8 *)(v2 + 96));
    }

    unint64_t v27 = *(void **)(v2 + 64);
    uint64_t v26 = *(void **)(v2 + 72);
    unint64_t v29 = *(void **)(v2 + 48);
    unint64_t v28 = *(void **)(v2 + 56);
    unint64_t v30 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v12);
  }

  sub_188344660((uint64_t)v26, &qword_18C4E7960);
  free(v26);
  free(v27);
  free(v28);
  free(v29);
  free(v30);
  free((void *)v2);
}

uint64_t sub_18835A334(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v5, v6);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_18835A3B8(uint64_t a1)
{
  uint64_t v2 = sub_1883865D8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7950);
  uint64_t v7 = MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v7);
  uint64_t v11 = (char *)&v14 - v10;
  sub_188344D68(a1, (uint64_t)&v14 - v10, (uint64_t *)&unk_18C4E7950);
  sub_188344D68((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_18C4E7950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1LL, v2) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0LL;
LABEL_5:
    XPCDictionary.subscript.setter(v12);
    return sub_188344660((uint64_t)v11, (uint64_t *)&unk_18C4E7950);
  }

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  swift_bridgeObjectRetain();
  sub_1883865B4();
  uint64_t result = xpc_date_create_absolute();
  if (result)
  {
    uint64_t v12 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_18835A78C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 80LL);
  if ((a2 & 1) == 0)
  {
    uint64_t v9 = v2[9];
    uint64_t v10 = v2[3];
    uint64_t v11 = v2[4];
    sub_188344D68(v3, v9, (uint64_t *)&unk_18C4E7950);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = 0LL;
    }

    else
    {
      (*(void (**)(void, void, void))(v2[4] + 32LL))(v2[6], v2[9], v2[3]);
      swift_bridgeObjectRetain();
      sub_1883865B4();
      uint64_t absolute = xpc_date_create_absolute();
      if (!absolute) {
        goto LABEL_14;
      }
      uint64_t v12 = absolute;
      (*(void (**)(void, void))(v2[4] + 8LL))(v2[6], v2[3]);
    }

    uint64_t v15 = (void *)v2[9];
    uint64_t v14 = (void *)v2[10];
    char v17 = (void *)v2[7];
    unint64_t v16 = (void *)v2[8];
    char v19 = (void *)v2[5];
    unint64_t v18 = (void *)v2[6];
    XPCDictionary.subscript.setter(v12);
    goto LABEL_12;
  }

  uint64_t v5 = v2[7];
  uint64_t v4 = v2[8];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  sub_188344D68(v3, v4, (uint64_t *)&unk_18C4E7950);
  sub_188344D68(v4, v5, (uint64_t *)&unk_18C4E7950);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0LL;
LABEL_8:
    uint64_t v15 = (void *)v2[9];
    uint64_t v14 = (void *)v2[10];
    char v17 = (void *)v2[7];
    unint64_t v16 = (void *)v2[8];
    char v19 = (void *)v2[5];
    unint64_t v18 = (void *)v2[6];
    XPCDictionary.subscript.setter(v8);
    sub_188344660((uint64_t)v16, (uint64_t *)&unk_18C4E7950);
LABEL_12:
    sub_188344660((uint64_t)v14, (uint64_t *)&unk_18C4E7950);
    free(v14);
    free(v15);
    free(v16);
    free(v17);
    free(v18);
    free(v19);
    free(v2);
    return;
  }

  (*(void (**)(void, void, void))(v2[4] + 32LL))(v2[5], v2[7], v2[3]);
  swift_bridgeObjectRetain();
  sub_1883865B4();
  uint64_t v13 = xpc_date_create_absolute();
  if (v13)
  {
    uint64_t v8 = v13;
    (*(void (**)(void, void))(v2[4] + 8LL))(v2[5], v2[3]);
    goto LABEL_8;
  }

  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t XPCDictionary.copy(into:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *v1;
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  void v6[3] = v3;
  v6[4] = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_188343F58;
  *(void *)(v7 + 24) = v6;
  v10[4] = sub_18835E08C;
  void v10[5] = v7;
  v10[0] = MEMORY[0x1895F87A0];
  v10[1] = 1107296256LL;
  v10[2] = sub_188338060;
  v10[3] = &block_descriptor_2;
  uint64_t v8 = _Block_copy(v10);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  return result;
}

void sub_18835AAE4(char *key@<X0>, xpc_object_t xdict@<X1>, void *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, key);
  xpc_dictionary_set_value(xdict, key, 0LL);
  *a3 = v6;
}

void sub_18835AB4C(char *key@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void **)(v2 + 16);
  xpc_object_t v6 = xpc_dictionary_get_value(v5, key);
  xpc_dictionary_set_value(v5, key, 0LL);
  *a2 = v6;
}

void *sub_18835ABB4( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18835ABEC(a1, a2, a3, a4, (uint64_t *)&unk_18C708540);
}

void *sub_18835ABD0( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18835ABEC(a1, a2, a3, a4, &qword_18C708508);
}

void *sub_18835ABEC( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t result = (void *)sub_188386BA8();
    if (!v5) {
      return (void *)v10[2];
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t result = a1(&v9, v10);
    if (!v5) {
      return (void *)v9;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v7 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v7 = sub_188386C50();
    }
    uint64_t result = a1(v10, (void *)v7);
    if (!v5) {
      return (void *)v10[0];
    }
  }

  return result;
}

BOOL XPCDictionary.isEmpty.getter()
{
  return xpc_dictionary_get_count(*v0) == 0;
}

size_t XPCDictionary.count.getter()
{
  return xpc_dictionary_get_count(*v0);
}

uint64_t XPCDictionary.forEach(_:)(uint64_t a1, uint64_t a2)
{
  xpc_object_t v6 = *v2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  sub_18835ADD4((uint64_t)sub_18835E0BC, v7, v6);
  if (v3) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  void v8[4];
  v8[3] = a2;
  uint64_t v4 = *v2;
  v8[2] = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_18835E0DC;
  *(void *)(v5 + 24) = v8;
  sub_18835ADD4((uint64_t)sub_18835E0DC, v5, v4);
  if (v3) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_18835ADD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = 0LL;
  xpc_object_t v6 = (void *)swift_allocObject();
  void v6[2] = a1;
  void v6[3] = a2;
  v6[4] = &v12;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_18835E688;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_18835E714;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1895F87A0];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_188338060;
  aBlock[3] = &block_descriptor_98;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a3, v8);
  _Block_release(v8);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v12)
    {
      id v10 = v12;
      swift_willThrow();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_18835AF44(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = sub_1883868F0();
  a3(v4);
  swift_bridgeObjectRelease();
  return 1LL;
}

void *sub_18835B08C(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  int64_t count = xpc_dictionary_get_count(xdict);
  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || count > v8[3] >> 1)
  {
    if (v8[2] <= count) {
      int64_t v10 = count;
    }
    else {
      int64_t v10 = v8[2];
    }
    char isUniquelyReferenced_nonNull_native = sub_188371260(isUniquelyReferenced_nonNull_native, v10, 0, v8);
    uint64_t v8 = isUniquelyReferenced_nonNull_native;
  }

  char v17 = v8;
  uint64_t v11 = MEMORY[0x1895F8860](isUniquelyReferenced_nonNull_native);
  v16[6] = &v17;
  v16[7] = a1;
  v16[8] = a2;
  MEMORY[0x1895F8860](v11);
  v16[2] = sub_18835E638;
  v16[3] = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_18835E0DC;
  *(void *)(v13 + 24) = v16;
  sub_18835ADD4((uint64_t)sub_18835E0DC, v13, xdict);
  if (v3)
  {
    swift_release();
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = (void *)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
    else {
      return v17;
    }
  }

  return result;
}

uint64_t sub_18835B220(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v16 = MEMORY[0x18961AFE8];
  size_t count = xpc_dictionary_get_count(xdict);
  sub_18835D218(count, 0);
  sub_1883869C8();
  uint64_t v13 = &v16;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  void v11[2] = sub_18835E60C;
  v11[3] = &v12;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_18835E0DC;
  *(void *)(v8 + 24) = v11;
  sub_18835ADD4((uint64_t)sub_18835E0DC, v8, xdict);
  if (v3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }

  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
    else {
      return v16;
    }
  }

  return result;
}

uint64_t XPCDictionary.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v20 = sub_188386758();
  xpc_dictionary_get_count(v7);
  sub_188386A1C();
  sub_1883869D4();
  uint64_t v16 = a3;
  char v17 = &v20;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v13 = sub_18835E100;
  uint64_t v14 = &v15;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_18835E0DC;
  *(void *)(v8 + 24) = &v12;
  sub_18835ADD4((uint64_t)sub_18835E0DC, v8, v7);
  if (v11)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }

  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
    else {
      return v20;
    }
  }

  return result;
}

uint64_t sub_18835B49C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *(*a5)(void *__return_ptr))
{
  uint64_t result = (uint64_t)a5(v14);
  if (!v5)
  {
    uint64_t v8 = v14[0];
    uint64_t v9 = v14[1];
    int64_t v10 = (void *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a4 = (uint64_t)v10;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_188371260(0LL, v10[2] + 1LL, 1, v10);
      int64_t v10 = (void *)result;
      *a4 = result;
    }

    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_188371260((void *)(v11 > 1), v12 + 1, 1, v10);
      int64_t v10 = (void *)result;
      *a4 = result;
    }

    v10[2] = v12 + 1;
    uint64_t v13 = &v10[2 * v12];
    v13[4] = v8;
    void v13[5] = v9;
  }

  return result;
}

void *sub_18835B56C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *(*a5)(uint64_t *__return_ptr))
{
  uint64_t result = a5(&v8);
  if (!v5)
  {
    MEMORY[0x1895C2784](result);
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      sub_1883869E0();
    }
    sub_188386A04();
    return (void *)sub_1883869C8();
  }

  return result;
}

uint64_t sub_18835B600(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1895F8860](a1);
  uint64_t result = v3(v2);
  if (!v1)
  {
    sub_188386A1C();
    return sub_188386A10();
  }

  return result;
}

uint64_t XPCDictionary.keys.getter()
{
  return sub_18835B6D8( (uint64_t)sub_18835B6A8,  (uint64_t (*)(uint64_t, void, void, void, void))sub_18835B08C);
}

uint64_t sub_18835B6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t XPCDictionary.values.getter()
{
  return sub_18835B6D8( (uint64_t)sub_18835B710,  (uint64_t (*)(uint64_t, void, void, void, void))sub_18835B220);
}

uint64_t sub_18835B6D8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void))
{
  return a2(a1, 0LL, *v2, v2[1], v2[2]);
}

uint64_t sub_18835B710@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_unknownObjectRetain();
}

const uint8_t *XPCDictionary.sideChannel.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1883868A8() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_release();
  if (!v3) {
    return 0LL;
  }
  xpc_connection_t v4 = XPCDictionary.underlyingConnection.getter();
  if (v4)
  {
    xpc_connection_t v5 = v4;
    type metadata accessor for XPCObjectDecoder();
    *(void *)(swift_initStackObject() + 16) = v5;
    xpc_object_t v6 = sub_1883549C4((uint64_t)v3);
    swift_release();
  }

  else
  {
    sub_1883491B4();
    swift_allocError();
    xpc_object_t v6 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(void *)(inited + 32) = sub_188386860();
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x800000018838C2D0LL;
    unint64_t v10 = sub_1883382F4(inited);
    Swift::Int32 v11 = sub_18837D3D8((ValueMetadata *)0x3E9);
    XPCError.init(code:userInfo:)(v11, (Swift::OpaquePointer)v10);
    swift_willThrow();
  }

  swift_unknownObjectRelease();
  return v6;
}

uint64_t XPCDictionary.setSideChannel(_:withUnderlyingConnection:)(uint64_t a1, uint64_t a2)
{
  xpc_object_t v6 = *v2;
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = a2;
  swift_retain();
  uint64_t v7 = sub_1883545C0(a1);
  if (!v3)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = sub_1883868A8();
    xpc_dictionary_set_value(v6, (const char *)(v9 + 32), v8);
    swift_release();
    swift_unknownObjectRelease();
  }

  return swift_release();
}

BOOL static XPCDictionary.== infix(_:_:)(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

BOOL sub_18835B9D0(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

uint64_t XPCDictionary.hash(into:)()
{
  return sub_188387250();
}

uint64_t XPCDictionary.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_188387244();
  xpc_hash(v1);
  sub_188387250();
  return sub_188387268();
}

uint64_t sub_18835BA60()
{
  uint64_t v1 = *v0;
  sub_188387244();
  xpc_hash(v1);
  sub_188387250();
  return sub_188387268();
}

uint64_t sub_18835BAA8()
{
  return sub_188387250();
}

uint64_t sub_18835BAD4()
{
  uint64_t v1 = *v0;
  sub_188387244();
  xpc_hash(v1);
  sub_188387250();
  return sub_188387268();
}

uint64_t XPCDictionary.debugDescription.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1895C3A50](*v0);
  uint64_t v2 = sub_1883868F0();
  free(v1);
  return v2;
}

uint64_t sub_18835BB60()
{
  uint64_t v1 = (void *)MEMORY[0x1895C3A50](*v0);
  uint64_t v2 = sub_1883868F0();
  free(v1);
  return v2;
}

uint64_t XPCDictionary.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  xpc_connection_t v5 = XPCDictionary.underlyingConnection.getter();
  type metadata accessor for XPCObjectDecoder();
  *(void *)(swift_allocObject() + 16) = v5;
  XPCObjectDecoder.decode<A>(_:from:)(a2, v4);
  return swift_release();
}

void XPCDictionary.init(nsDictionary:)(void *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = sub_18835BCA8(a1);

  *a2 = v4;
  a2[1] = 0xD000000000000019LL;
  a2[2] = 0x800000018838B7A0LL;
}

xpc_object_t sub_18835BCA8(id a1)
{
  uint64_t v2 = sub_188386530();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  xpc_connection_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t v6 = (unint64_t *)sub_188386890();
  uint64_t v7 = *(v6 - 1);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  objc_opt_self();
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    Swift::Int32 v11 = (void *)v10;
    a1 = a1;
    objc_msgSend(v11, sel_timeIntervalSince1970);
    double v13 = v12 * 1000000000.0;
    if ((~*(void *)&v13 & 0x7FF0000000000000LL) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          xpc_object_t v14 = xpc_date_create((uint64_t)v13);
LABEL_6:
          xpc_object_t v15 = v14;
LABEL_7:

          return v15;
        }

        goto LABEL_58;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  objc_opt_self();
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (!v17)
  {
    objc_opt_self();
    uint64_t v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      unint64_t v29 = (void *)v28;
      a1 = a1;
      unint64_t v30 = (void *)sub_1883869F8();
      v30[2] = 16LL;
      v30[5] = 0LL;
      v30[4] = 0LL;
      uint64_t v31 = (const unsigned __int8 *)(v30 + 4);
      objc_msgSend(v29, sel_getUUIDBytes_, v30 + 4);
      xpc_object_t v15 = xpc_uuid_create(v31);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    objc_opt_self();
    if (swift_dynamicCastObjCClass()) {
      return xpc_null_create();
    }
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      id v56 = a1;
      xpc_object_t v55 = xpc_array_create(0LL, 0LL);
      sub_188386B00();
      sub_188386524();
      if (v78)
      {
        xpc_object_t v6 = &qword_18C708518;
        while (1)
        {
          sub_188344D58(&v77, v75);
          sub_188352280(0LL, &qword_18C708518);
          unint64_t v57 = (void *)v73[0];
          unint64_t v58 = (void *)sub_18835BCA8(v73[0]);
          xpc_array_append_value(v55, v58);

          swift_unknownObjectRelease();
          sub_188386524();
          if (!v78) {
            goto LABEL_33;
          }
        }

        while (1)
        {
LABEL_63:
          sub_188386CB0();
          __break(1u);
LABEL_64:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
        }
      }

LABEL_33:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v55;
    }

    objc_opt_self();
    uint64_t v59 = swift_dynamicCastObjCClass();
    if (v59)
    {
      unint64_t v60 = (const __CFNumber *)v59;
      a1 = a1;
      CFNumberType Type = CFNumberGetType(v60);
      if ((unint64_t)Type <= kCFNumberCGFloatType && ((1LL << Type) & 0xCF80) == 0)
      {
        if (((1LL << Type) & 0x13060) != 0)
        {
          -[__CFNumber doubleValue](v60, sel_doubleValue);
          xpc_object_t v14 = xpc_double_create(v62);
          goto LABEL_6;
        }

        if (((1LL << Type) & 0x1E) != 0)
        {
          xpc_object_t v14 = xpc_int64_create((int64_t)-[__CFNumber longLongValue](v60, sel_longLongValue));
          goto LABEL_6;
        }
      }

      xpc_object_t v14 = xpc_uint64_create((uint64_t)-[__CFNumber unsignedLongLongValue](v60, sel_unsignedLongLongValue));
      goto LABEL_6;
    }

LABEL_45:
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      id v71 = a1;
      xpc_object_t v55 = xpc_dictionary_create(0LL, 0LL, 0LL);
      sub_188386A40();
      swift_retain();
      sub_188386A4C();
      if (v78)
      {
        xpc_object_t v6 = (unint64_t *)v74;
        while (1)
        {
          sub_188344D58(&v77, v75);
          sub_188344D58(&v79, v76);
          sub_188352244((uint64_t)v75, (uint64_t)v73);
          sub_188352244((uint64_t)v76, (uint64_t)v74);
          sub_188352280(0LL, &qword_18C708510);
          uint64_t v64 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
          sub_188352244((uint64_t)v75, (uint64_t)v73);
          sub_188352244((uint64_t)v76, (uint64_t)v74);
          sub_188352280(0LL, &qword_18C708518);
          uint64_t v65 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
          id v66 = v64;
          uint64_t v67 = (const char *)objc_msgSend(v66, sel_UTF8String);
          if (!v67) {
            goto LABEL_60;
          }
          int64_t v68 = v67;
          uint64_t v69 = (void *)sub_18835BCA8(v65);
          xpc_dictionary_set_value(v55, v68, v69);

          swift_unknownObjectRelease();
          sub_188344660((uint64_t)v75, (uint64_t *)&unk_18C708520);
          sub_188386A4C();
          if (!v78) {
            goto LABEL_52;
          }
        }

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        goto LABEL_63;
      }

LABEL_52:
      swift_release_n();
      return v55;
    }

    return xpc_null_create();
  }

  uint64_t v18 = (void *)v17;
  a1 = a1;
  uint64_t v19 = (void *)sub_18838683C();
  unsigned int v20 = objc_msgSend(v18, sel_hasPrefix_, v19);

  if (!v20)
  {
    uint64_t v32 = (void *)sub_18838683C();
    unsigned int v33 = objc_msgSend(v18, sel_hasPrefix_, v32);

    if (!v33)
    {
      unint64_t v40 = (void *)sub_18838683C();
      unsigned int v41 = objc_msgSend(v18, sel_hasPrefix_, v40);

      if (v41)
      {
        unint64_t v42 = (void *)sub_18838683C();
        unint64_t v43 = (void *)sub_18838683C();
        id v44 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v42, v43);

        uint64_t v45 = sub_188386860();
        unint64_t v47 = v46;

        uint64_t v48 = sub_18835CD88(v45, v47);
        if ((v49 & 1) == 0)
        {
          xpc_object_t v14 = xpc_uint64_create(v48);
          goto LABEL_6;
        }

        goto LABEL_61;
      }

      sub_188386878();
      uint64_t v51 = sub_188386884();
      (*(void (**)(char *, unint64_t *))(v7 + 8))(v9, v6);
      id v52 = a1;
      unint64_t v53 = (const char *)objc_msgSend(v18, sel_cStringUsingEncoding_, v51);
      id v54 = v18;
      if (!v53)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }

      xpc_object_t v55 = xpc_string_create(v53);

      return v55;
    }

    unint64_t v34 = (void *)sub_18838683C();
    char v35 = (void *)sub_18838683C();
    id v36 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v34, v35);

    uint64_t v37 = sub_188386860();
    uint64_t v39 = v38;

    if (v37 == 1702195828 && v39 == 0xE400000000000000LL || (sub_188386FD4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      BOOL v50 = 1;
LABEL_25:
      xpc_object_t v14 = xpc_BOOL_create(v50);
      goto LABEL_6;
    }

    if (v37 == 0x65736C6166LL && v39 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease();
      BOOL v50 = 0;
      goto LABEL_25;
    }

    char v63 = sub_188386FD4();
    swift_bridgeObjectRelease();
    BOOL v50 = 0;
    if ((v63 & 1) != 0) {
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_45;
  }

  unint64_t v21 = (void *)sub_18838683C();
  unint64_t v22 = (void *)sub_18838683C();
  id v23 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v21, v22);

  sub_188386860();
  id v24 = objc_allocWithZone(MEMORY[0x189607AB8]);
  unint64_t v25 = (void *)sub_18838683C();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithUUIDString_, v25);

  if (!v26) {
    goto LABEL_59;
  }
  uint64_t v27 = sub_18835BCA8(v26);

  return (xpc_object_t)v27;
}

NSDictionary_optional __swiftcall XPCDictionary.toNSDictionary()()
{
  id v1 = sub_18835C708(*v0);
  objc_opt_self();
  uint64_t v2 = (objc_class *)swift_dynamicCastObjCClass();
  if (!v2)
  {

    uint64_t v2 = 0LL;
  }

  result.value.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id sub_18835C708(uint64_t isEscapingClosureAtFileLocation)
{
  uint64_t v2 = sub_188386890();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  xpc_connection_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895C3C6C](isEscapingClosureAtFileLocation);
  if (XPCTypeDate == v6)
  {
    xpc_date_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
    id v7 = objc_allocWithZone(MEMORY[0x189603F50]);
    uint64_t v8 = sel_initWithTimeIntervalSince1970_;
    return [v7 v8];
  }

  if (XPCTypeString != v6)
  {
    if (XPCTypeUUID != v6)
    {
      if (XPCTypeBool == v6)
      {
        uint64_t aBlock = 0LL;
        unint64_t v26 = 0xE000000000000000LL;
        sub_188386BB4();
        swift_bridgeObjectRelease();
        uint64_t aBlock = 0x72756372654D5F5FLL;
        unint64_t v26 = 0xEF5F4C4F4F425F79LL;
        xpc_BOOL_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
      }

      else
      {
        if (XPCTypeNull == v6)
        {
LABEL_11:
          id v7 = objc_allocWithZone(MEMORY[0x189603FE8]);
          uint64_t v8 = sel_init;
          return [v7 v8];
        }

        if (XPCTypeInt64 == v6)
        {
          xpc_int64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
          return objc_msgSend(objc_allocWithZone(MEMORY[0x189607968]), sel_initWithLongLong_);
        }

        if (XPCTypeUInt64 != v6)
        {
          if (XPCTypeDouble == v6)
          {
            xpc_double_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
            id v7 = objc_allocWithZone(MEMORY[0x189607968]);
            uint64_t v8 = sel_initWithDouble_;
            return [v7 v8];
          }

          if (XPCTypeArray == v6)
          {
            id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603FA8]), sel_init);
            uint64_t v16 = swift_allocObject();
            *(void *)(v16 + 16) = v15;
            uint64_t v17 = swift_allocObject();
            *(void *)(v17 + 16) = sub_18835E5B8;
            *(void *)(v17 + 24) = v16;
            unint64_t v29 = sub_188343F8C;
            uint64_t v30 = v17;
            uint64_t aBlock = MEMORY[0x1895F87A0];
            unint64_t v26 = 1107296256LL;
            uint64_t v27 = sub_188338060;
            uint64_t v28 = &block_descriptor_78;
            uint64_t v18 = _Block_copy(&aBlock);
            id v11 = v15;
            swift_retain();
            swift_release();
            xpc_array_apply((xpc_object_t)isEscapingClosureAtFileLocation, v18);
            _Block_release(v18);
            char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return v11;
            }
            __break(1u);
          }

          else if (XPCTypeDictionary != v6)
          {
            goto LABEL_11;
          }

          id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603FC8]), sel_init);
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v19;
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = sub_18835E5A0;
          *(void *)(v21 + 24) = v20;
          unint64_t v29 = sub_18835E714;
          uint64_t v30 = v21;
          uint64_t aBlock = MEMORY[0x1895F87A0];
          unint64_t v26 = 1107296256LL;
          uint64_t v27 = sub_188338060;
          uint64_t v28 = &block_descriptor_69;
          unint64_t v22 = _Block_copy(&aBlock);
          id v11 = v19;
          swift_retain();
          swift_release();
          xpc_dictionary_apply((xpc_object_t)isEscapingClosureAtFileLocation, v22);
          _Block_release(v22);
          char v23 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          id result = (id)swift_release();
          if ((v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_28;
          }

          return v11;
        }

        uint64_t aBlock = 0LL;
        unint64_t v26 = 0xE000000000000000LL;
        sub_188386BB4();
        swift_bridgeObjectRelease();
        uint64_t aBlock = 0x72756372654D5F5FLL;
        unint64_t v26 = 0xEF5F746E49555F79LL;
        v24[1] = xpc_uint64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
        sub_188386E24();
      }

      sub_1883868E4();
      swift_bridgeObjectRelease();
      id v11 = (id)sub_18838683C();
      swift_bridgeObjectRelease();
      return v11;
    }

unint64_t sub_18835CD88(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = (unint64_t)sub_18835D2D4(a1, a2, 10LL);
    char v10 = v22;
    goto LABEL_39;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      id v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v7 = (unsigned __int8 *)sub_188386C50();
    }
    unint64_t v8 = (unint64_t)sub_18835D3B8(v7, v5, 10LL);
    char v10 = v9 & 1;
    goto LABEL_39;
  }

  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }

LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }

  if (a1 != 45)
  {
    unint64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      uint64_t v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        unsigned int v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v21);
        unint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      unint64_t v2 = 0LL;
      unint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          id v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            BOOL v14 = 10 * v8 >= v13;
            unint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            char v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }

        goto LABEL_38;
      }

      goto LABEL_53;
    }

LABEL_36:
    unint64_t v8 = 0LL;
    char v10 = 1;
    goto LABEL_39;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  char v10 = 1;
  unint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

uint64_t sub_18835CFE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1883868F0();
  uint64_t v7 = v6;
  unint64_t v8 = (void *)sub_18835C708(a2);
  swift_bridgeObjectRetain();
  objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v8, sub_1883871C0(), v5, v7);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return 1LL;
}

unint64_t sub_18835D07C()
{
  unint64_t result = qword_18C7084A8;
  if (!qword_18C7084A8)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618568], MEMORY[0x189618560]);
    atomic_store(result, (unint64_t *)&qword_18C7084A8);
  }

  return result;
}

uint64_t sub_18835D0C0(void *a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084E8);
  sub_188352344(&qword_18C7084F0, &qword_18C7084E8, (uint64_t)&unk_18838A328);
  sub_1883872A4();
  if ((a3 & 1) != 0)
  {
    char v14 = 0;
    sub_18835E4F4();
  }

  else
  {
    uint64_t v12 = v11;
    char v13 = 1;
    sub_18835E538();
  }

  sub_188386DE8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_18835D218(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_188386CBC();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x1895C29B8](v7, v9, a2 & 1, v5);
  *unint64_t v2 = result;
  return result;
}

unsigned __int8 *sub_18835D2D4(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_188386944();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = sub_18835D634();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_188386C50();
  }

LABEL_7:
  uint64_t v11 = sub_18835D3B8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_18835D3B8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_18835D634()
{
  unint64_t v0 = sub_188386950();
  uint64_t v4 = sub_18835D6B0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_18835D6B0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = sub_18835D7F4(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_188352EF8(v9, 0LL);
      unint64_t v12 = sub_18835D8E0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    else
    {
      unsigned int v11 = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v13 = MEMORY[0x1895C26A0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
LABEL_12:
      }
        JUMPOUT(0x1895C26A0LL);
LABEL_9:
      sub_188386C50();
      goto LABEL_12;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1895C26A0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }

unint64_t sub_18835D7F4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_188352F5C(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_188352F5C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return sub_188386920();
  }

  __break(1u);
  return result;
}

unint64_t sub_18835D8E0( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_188352F5C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = sub_18838692C();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = sub_188386C50();
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_188352F5C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_188386908();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_18835DAF0(_BYTE *__src, _BYTE *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_18835DBB0(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_18835DAF0(__src, &__src[a2]);
  }
  sub_1883864A0();
  swift_allocObject();
  sub_188386470();
  sub_188386590();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_18835DC5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  void v12[2] = a4;
  uint64_t v12[3] = a5;
  uint64_t v9 = sub_188386B24();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7820);
  a7(&v13, a6, v12, v9, MEMORY[0x18961A520], v10, MEMORY[0x18961A528]);
  return XPCDictionary.subscript.setter(v13);
}

uint64_t sub_18835DD0C(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_18835DD38(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0LL;
  }

  if (a2 > 14)
  {
    sub_188386590();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0LL;
    *(void *)(v3 + 24) = a2;
    return v3;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = (_BYTE *)sub_18838647C();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_188386488();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      unint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0LL;
      }
      uint64_t v3 = sub_18835DAF0(v4, v8);
      swift_release();
      return v3;
    }

    uint64_t result = sub_188386494();
    if (!__OFSUB__(0LL, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_18835DE1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return XPCDictionary.subscript.setter(0LL);
}

uint64_t sub_18835E03C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1883446E0(a1, a2);
  }
  return a1;
}

uint64_t sub_18835E050()
{
  return swift_deallocObject();
}

uint64_t sub_18835E07C()
{
  return swift_deallocObject();
}

uint64_t sub_18835E08C(uint64_t a1, uint64_t a2)
{
  return sub_18833803C(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_18835E0AC()
{
  return swift_deallocObject();
}

uint64_t sub_18835E0BC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18835E0DC()
{
  return sub_18835E0BC();
}

uint64_t sub_18835E0F0()
{
  return swift_deallocObject();
}

uint64_t sub_18835E100(uint64_t a1)
{
  return sub_18835B600(a1);
}

uint64_t sub_18835E11C()
{
  return swift_deallocObject();
}

unint64_t sub_18835E130()
{
  unint64_t result = qword_18C7084C0;
  if (!qword_18C7084C0)
  {
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCDictionary, &type metadata for XPCDictionary);
    atomic_store(result, (unint64_t *)&qword_18C7084C0);
  }

  return result;
}

uint64_t sub_18835E174(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_18835663C( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_18835E190(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm( a1,  a2,  a3,  a4,  (uint64_t)sub_18835E6DC,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

uint64_t sub_18835E1A4()
{
  return 16LL;
}

__n128 sub_18835E1B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18835E1BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_18835663C( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_18835E1D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm( a1,  a2,  a3,  a4,  (uint64_t)sub_18835E6C0,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_18835620C);
}

uint64_t keypath_setTm( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  uint64_t v9 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v10 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  swift_bridgeObjectRetain();
  return sub_18835DC5C(a1, v11, v12, v9, v10, a5, a6);
}

uint64_t sub_18835E260()
{
  return 16LL;
}

__n128 sub_18835E26C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18835E278(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_18835663C( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_18835E294(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm( a1,  a2,  a3,  a4,  (uint64_t)sub_18835E6A4,  (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_188354F00);
}

uint64_t sub_18835E2A8()
{
  return 16LL;
}

__n128 sub_18835E2B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18835E2C8()
{
  return 0LL;
}

uint64_t sub_18835E2E0()
{
  return 0LL;
}

uint64_t sub_18835E2F8()
{
  return 0LL;
}

uint64_t sub_18835E310()
{
  return 0LL;
}

uint64_t sub_18835E328()
{
  return 0LL;
}

uint64_t sub_18835E340()
{
  return 0LL;
}

uint64_t sub_18835E358()
{
  return 0LL;
}

uint64_t sub_18835E368(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_18835A334(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_18835E388()
{
  return 0LL;
}

uint64_t sub_18835E398(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_18835A334(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_18835E3B8()
{
  return 0LL;
}

uint64_t destroy for XPCDictionary()
{
  return swift_bridgeObjectRelease();
}

void *_s7Mercury13XPCDictionaryVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for XPCDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for XPCDictionary()
{
  return &type metadata for XPCDictionary;
}

id sub_18835E4E8(id result, char a2)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  return result;
}

unint64_t sub_18835E4F4()
{
  unint64_t result = qword_18C7084F8;
  if (!qword_18C7084F8)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for UnknownResultType,  &type metadata for UnknownResultType);
    atomic_store(result, (unint64_t *)&qword_18C7084F8);
  }

  return result;
}

unint64_t sub_18835E538()
{
  unint64_t result = qword_18C4E7290;
  if (!qword_18C4E7290)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A198, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_18C4E7290);
  }

  return result;
}

uint64_t sub_18835E57C()
{
  return swift_deallocObject();
}

uint64_t sub_18835E5A0(uint64_t a1, uint64_t a2)
{
  return sub_18835CFE4(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_18835E5A8()
{
  return swift_deallocObject();
}

uint64_t sub_18835E5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = (void *)sub_18835C708(a2);
  objc_msgSend(v3, sel_addObject_, v4);

  return 1LL;
}

uint64_t sub_18835E5FC()
{
  return swift_deallocObject();
}

void *sub_18835E60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18835B56C(a1, a2, a3, *(void **)(v3 + 16), *(void *(**)(uint64_t *__return_ptr))(v3 + 24));
}

uint64_t sub_18835E628()
{
  return swift_deallocObject();
}

uint64_t sub_18835E638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18835B49C(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *(**)(void *__return_ptr))(v3 + 24));
}

uint64_t sub_18835E654()
{
  return swift_deallocObject();
}

uint64_t sub_18835E664()
{
  return swift_deallocObject();
}

uint64_t sub_18835E688(uint64_t a1, uint64_t a2)
{
  return sub_18835AF44(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_18835E694()
{
  return swift_deallocObject();
}

xpc_object_t sub_18835E6A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_188357070(a1, a2);
}

xpc_object_t sub_18835E6C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_188356734(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

xpc_object_t sub_18835E6DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_188355AC0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t static remote_device_state_t.attached.getter()
{
  return dword_18C708550;
}

uint64_t static remote_device_state_t.attached.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708550 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.attached.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.connected.getter()
{
  return dword_18C708554;
}

uint64_t static remote_device_state_t.connected.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708554 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.connected.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.disconnected.getter()
{
  return dword_18C708558;
}

uint64_t static remote_device_state_t.disconnected.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708558 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.disconnected.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.invalidOrUnknown.getter()
{
  return dword_18C70855C;
}

uint64_t static remote_device_type_t.invalidOrUnknown.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C70855C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.invalidOrUnknown.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.loopback.getter()
{
  return dword_18C708560;
}

uint64_t static remote_device_type_t.loopback.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708560 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.loopback.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.eos.getter()
{
  return dword_18C708564;
}

uint64_t static remote_device_type_t.eos.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708564 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.eos.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoproc.getter()
{
  return dword_18C708568;
}

uint64_t static remote_device_type_t.bridgeCoproc.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708568 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoproc.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHost.getter()
{
  return dword_18C70856C;
}

uint64_t static remote_device_type_t.bridgeHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C70856C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.getter()
{
  return dword_18C708570;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708570 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoprocExternal.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHostExternal.getter()
{
  return dword_18C708574;
}

uint64_t static remote_device_type_t.bridgeHostExternal.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708574 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHostExternal.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bonjourPeer.getter()
{
  return dword_18C708578;
}

uint64_t static remote_device_type_t.bonjourPeer.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708578 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bonjourPeer.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmDevice.getter()
{
  return dword_18C70857C;
}

uint64_t static remote_device_type_t.ncmDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C70857C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmDevice.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmHost.getter()
{
  return dword_18C708580;
}

uint64_t static remote_device_type_t.ncmHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708580 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDevice.getter()
{
  return dword_18C708584;
}

uint64_t static remote_device_type_t.coreDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708584 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDevice.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceDevice.getter()
{
  return dword_18C708588;
}

uint64_t static remote_device_type_t.coreDeviceDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708588 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceDevice.modify())()
{
  return j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceHost.getter()
{
  return dword_18C70858C;
}

uint64_t static remote_device_type_t.coreDeviceHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C70858C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.max.getter()
{
  return dword_18C708590;
}

uint64_t static remote_device_type_t.max.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708590 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.max.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.any.getter()
{
  return dword_18C708594;
}

uint64_t static remote_device_type_t.any.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_18C708594 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.any.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static XPCConnection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)a1 + 208LL))( &v3,  sub_188361998,  a2,  MEMORY[0x1896184C8]);
  return v3;
}

uint64_t XPCConnection.send<A>(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for MessageWrapper(0LL, v11, v12, v13);
  uint64_t v24 = *(void *)(v14 - 8);
  MEMORY[0x1895F8860](v14);
  uint64_t v16 = (uint64_t *)((char *)&v23 - v15);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23, a2);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v10, a2, a3, a4, v16);
  uint64_t v17 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v14);
  uint64_t v18 = v25[7];
  uint64_t v19 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v16, v14, v17);
  if (v18)
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v16, v14);
    swift_setDeallocating();
    return swift_release();
  }

  else
  {
    uint64_t v21 = v19;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v16, v14);
    swift_setDeallocating();
    swift_release();
    v25[0] = v21;
    v25[1] = 0xD000000000000019LL;
    v25[2] = 0x800000018838B7A0LL;
    uint64_t v22 = *(void (**)(void *))(*(void *)v4 + 168LL);
    swift_unknownObjectRetain();
    v22(v25);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease_n();
  }

uint64_t XPCConnection.send<A, B>(value:replyQueue:replyHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v17 = sub_1883619AC();
  return XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)( a1,  a2,  (uint64_t)&type metadata for DispatcherErrorWrapper,  a3,  a4,  a5,  a6,  (uint64_t)&type metadata for DispatcherErrorWrapper,  a7,  a8,  a9,  a10,  v17);
}

uint64_t XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v38 = a3;
  uint64_t v41 = a2;
  uint64_t v42 = a1;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1895F8860](a1);
  unint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for MessageWrapper(0LL, v18, a9, a10);
  uint64_t v43 = *(void *)(v19 - 8);
  MEMORY[0x1895F8860](v19);
  uint64_t v21 = (uint64_t *)((char *)&v34 - v20);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v42, a6);
  uint64_t v42 = v13;
  swift_retain();
  uint64_t v35 = a9;
  MessageWrapper.init(value:)((uint64_t)v17, a6, a9, a10, v21);
  uint64_t v22 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v19);
  uint64_t v23 = v45;
  uint64_t v24 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v21, v19, v22);
  if (v23)
  {
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v21, v19);
    swift_setDeallocating();
    return swift_release();
  }

  else
  {
    uint64_t v26 = v24;
    uint64_t v45 = a12;
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v21, v19);
    swift_setDeallocating();
    swift_release();
    v44[0] = v26;
    v44[1] = 0xD000000000000019LL;
    v44[2] = 0x800000018838B7A0LL;
    unint64_t v27 = (void *)swift_allocObject();
    uint64_t v28 = v36;
    v27[2] = a6;
    v27[3] = v28;
    uint64_t v29 = v35;
    void v27[4] = v37;
    v27[5] = v29;
    v27[6] = a10;
    v27[7] = a11;
    v27[8] = v45;
    v27[9] = a13;
    uint64_t v30 = v42;
    uint64_t v31 = v38;
    v27[10] = v42;
    v27[11] = v31;
    uint64_t v32 = v40;
    v27[12] = v39;
    v27[13] = v32;
    unsigned int v33 = *(void (**)(void *, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v30 + 160LL);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    v33(v44, v41, sub_188361A1C, v27);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

uint64_t sub_18835FA30( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a8;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
  uint64_t v12 = sub_188387274();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8860](v12);
  uint64_t v16 = (void *)((char *)v28 - v15);
  uint64_t v18 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    sub_1883491B4();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = v18;
    v20[1] = v17;
    *uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    a4(v16);
  }

  else
  {
    v28[1] = v28;
    uint64_t v21 = *(void *)(a1 + 16);
    MEMORY[0x1895F8860](v14);
    v28[0] = a4;
    v28[-14] = a6;
    v28[-13] = a7;
    v28[-12] = v29;
    v28[-11] = v22;
    v28[-10] = v24;
    v28[-9] = v23;
    v28[-8] = v26;
    v28[-7] = v25;
    v28[-6] = v30;
    v28[-5] = v18;
    v28[-4] = v17;
    v28[-3] = v21;
    v28[-2] = v31;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_18835FF04((void (*)(_BYTE *))sub_18836256C, (uint64_t)v16);
    ((void (*)(uint64_t *))v28[0])(v16);
    sub_1883625C4(v18, v17, v21, 0);
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v16, v12);
}

void sub_18835FC04(uint64_t a1)
{
}

void sub_18835FC88(uint64_t a1)
{
  *(void *)(v6 - 136) = *(void *)(a1 - 8);
  uint64_t v8 = MEMORY[0x1895F8860](a1);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = MEMORY[0x1895F8860](v8);
  uint64_t v13 = &v23[-v12];
  MEMORY[0x1895F8860](v11);
  uint64_t v15 = &v23[-v14];
  uint64_t v16 = *(void *)(v2 + 16);
  *(_OWORD *)(v6 - 128) = *(_OWORD *)v2;
  *(void *)(v6 - 112) = v16;
  MEMORY[0x1895C375C](&protocol conformance descriptor for DispatcherResponse<A, B>, a1);
  XPCDictionary.decode<A>(_:)(a1, a1);
  if (v1)
  {
    *(void *)(v6 - 128) = 0LL;
    *(void *)(v6 - 120) = 0xE000000000000000LL;
    sub_188386BB4();
    uint64_t v17 = *(void *)(v6 - 120);
    *(void *)(v6 - 128) = *(void *)(v6 - 128);
    *(void *)(v6 - 120) = v17;
    sub_1883868E4();
    *(void *)(v6 - 72) = v1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    sub_188386C8C();
    uint64_t v18 = *(void *)(v6 - 128);
    uint64_t v19 = *(void *)(v6 - 120);
    unint64_t v20 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(v18, v19, *(void *)(v6 - 144), v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  else
  {
    uint64_t v22 = *(void *)(v6 - 136);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v15, v13, a1);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v10, v15, a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(*(void *)(v6 - 136) + 8LL))(v15, a1);
      (*(void (**)(void, _BYTE *))(*(void *)(*(void *)(v6 - 168) - 8LL) + 32LL))( *(void *)(v6 - 160),  v10);
    }

    else
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(v3, v10, v5);
      (*(void (**)(uint64_t))(*(void *)(v6 - 152) + 64LL))(v5);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      (*(void (**)(_BYTE *, uint64_t))(*(void *)(v6 - 136) + 8LL))(v15, a1);
    }
  }

uint64_t sub_18835FF04@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_188387274();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t XPCConnection.sendSync<A, B>(value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)( a1,  (uint64_t)&type metadata for DispatcherErrorWrapper,  a2,  a3,  (uint64_t)&type metadata for DispatcherErrorWrapper,  a4,  a5,  a6,  a7);
}

uint64_t XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  void (*v27)(void *__return_ptr, void *);
  void v28[5];
  uint64_t v29;
  uint64_t v30;
  void v31[3];
  void v32[8];
  void v28[2] = a5;
  v28[3] = a8;
  v28[0] = a2;
  v28[1] = a4;
  v28[4] = a9;
  uint64_t v29 = a1;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for MessageWrapper(0LL, v16, v17, v18);
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1895F8860](v19);
  uint64_t v21 = (void *)((char *)v28 - v20);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, a3);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v15, a3, a6, a7, v21);
  uint64_t v22 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v19);
  uint64_t v23 = v32[7];
  uint64_t v24 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v21, v19, v22);
  if (!v23)
  {
    uint64_t v26 = v24;
    (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v21, v19);
    swift_setDeallocating();
    swift_release();
    v31[0] = v26;
    v31[1] = 0xD000000000000019LL;
    void v31[2] = 0x800000018838B7A0LL;
    unint64_t v27 = *(void (**)(void *__return_ptr, void *))(*(void *)v9 + 176LL);
    swift_unknownObjectRetain();
    v27(v32, v31);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_18835FC04((uint64_t)v32);
  }

  (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v21, v19);
  swift_setDeallocating();
  return swift_release();
}

uint64_t XPCPeerConnection.setEventHandler<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  void v15[4] = a5;
  void v15[5] = a6;
  void v15[6] = a7;
  void v15[7] = v14;
  v15[8] = a1;
  v15[9] = a2;
  uint64_t v16 = *(void (**)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  v16(sub_188361AAC, v15, a3, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_1883603D8( uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v28 = a9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
  uint64_t v11 = sub_188387274();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8860](v11);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  int v18 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v19 = (void *)v15;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  if (v18 == 1)
  {
    sub_1883491B4();
    uint64_t v19 = (void *)swift_allocError();
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    *uint64_t v22 = v15;
    v22[1] = v16;
  }

  uint64_t v35 = v19;
  uint64_t v36 = v20;
  uint64_t v37 = v21;
  char v38 = v18;
  MEMORY[0x1895F8860](v19);
  *(&v27 - 6) = v29;
  *(&v27 - 5) = a6;
  uint64_t v23 = v32;
  *(&v27 - 4) = v31;
  *(&v27 - 3) = v23;
  uint64_t v24 = v30;
  *(&v27 - 2) = v28;
  *(&v27 - 1) = v24;
  sub_188362514(v15, v16, v17, v18);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7918);
  sub_1883607E4((void (*)(char *))sub_188362504, v25, (uint64_t)v14);
  sub_188362540(v35, v36, v37, v38);
  v34(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_188360588@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8 = type metadata accessor for MessageWrapper(0LL, a2, a3, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8860](v8);
  uint64_t v11 = &v14[-v10];
  uint64_t v12 = *(void *)(a1 + 16);
  *(_OWORD *)&v14[24] = *(_OWORD *)a1;
  uint64_t v15 = v12;
  MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v8);
  XPCDictionary.decode<A>(_:)(v8, v8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(a2 - 8) + 16LL))(a5, &v11[*(int *)(v8 + 44)], a2);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
  sub_188387274();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1883607E4@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8860](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 32LL))( a3,  v12,  *(void *)(a2 + 24));
    sub_188387274();
    return swift_storeEnumTagMultiPayload();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

uint64_t sub_188360930(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)a1 + 2);
  __int128 v6 = *a1;
  uint64_t v7 = v4;
  return (*(uint64_t (**)(__int128 *, void, uint64_t, uint64_t))(*(void *)v3 + 160LL))(&v6, 0LL, a2, a3);
}

uint64_t XPCConnection.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x18961AFE8];
  return result;
}

uint64_t XPCConnection.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x18961AFE8];
  return result;
}

uint64_t sub_1883609B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C708598);
  uint64_t v4 = swift_allocObject();
  *(_BYTE *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = sub_1883386D4(MEMORY[0x18961AFE8]);
  type metadata accessor for XPCObjectEncoder();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0LL;
  type metadata accessor for XPCObjectDecoder();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0LL;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_BYTE *)(v4 + 80) = 1;
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = v6;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = sub_188361ADC;
  *(void *)(v4 + 24) = v2;
  *(void *)(v4 + 32) = sub_188361AE4;
  *(void *)(v4 + 40) = v3;
  swift_retain();
  sub_188361AEC(v7);
  uint64_t v8 = *(void *)(v4 + 48);
  *(void *)(v4 + 48) = 0LL;
  *(void *)(v4 + 56) = 0LL;
  sub_188361B1C(v8);
  uint64_t v9 = *(void *)(v4 + 64);
  *(void *)(v4 + 64) = 0LL;
  *(void *)(v4 + 72) = 0LL;
  sub_188361B1C(v9);
  swift_release();
  *(_BYTE *)(v4 + 80) = 0;
  swift_beginAccess();
  uint64_t v10 = swift_retain();
  MEMORY[0x1895C2784](v10);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
    sub_1883869E0();
  sub_188386A04();
  sub_1883869C8();
  swift_endAccess();
  return v4;
}

uint64_t sub_188360BAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v10[0] = v3;
    v10[1] = v4;
    v10[2] = v5;
    (*(void (**)(void *__return_ptr, void *))(*(void *)result + 152LL))(v11, v10);
    uint64_t result = swift_release();
    uint64_t v7 = v11[0];
    uint64_t v8 = v11[1];
    uint64_t v9 = v11[2];
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  return result;
}

uint64_t sub_188360C54(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v5[0] = v1;
    v5[1] = v2;
    _OWORD v5[2] = v3;
    (*(void (**)(void *))(*(void *)result + 168LL))(v5);
    return swift_release();
  }

  return result;
}

void sub_188360CD4()
{
}

uint64_t sub_188360D0C(uint64_t a1)
{
  if (a1 == XPCTypeDictionary)
  {
    v7[0] = v1;
    v7[1] = 0xD000000000000019LL;
    v7[2] = 0x800000018838B7A0LL;
    swift_beginAccess();
    unint64_t v6 = *(void *)(v4 + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_188360DC8(v7, v6, v3, v2);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    LOBYTE(v7[0]) = 0;
    return v3((char *)v7);
  }

uint64_t *sub_188360DC8(uint64_t *result, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  uint64_t v7 = *result;
  uint64_t v8 = result[1];
  uint64_t v9 = result[2];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_188386CBC();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_3;
    }
LABEL_8:
    char v13 = 0;
    return (uint64_t *)a3(&v13);
  }

  if (!*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x1895C29AC](0LL, a2);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  if (*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain();
LABEL_6:
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = v10;
    void v11[3] = a3;
    void v11[4] = a4;
    void v11[5] = v7;
    v11[6] = v8;
    v11[7] = v9;
    v11[8] = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_18837411C(v7, v8, v9, (uint64_t)sub_1883624F0, (uint64_t)v11);
    swift_release();
    swift_release();
    return (uint64_t *)swift_release();
  }

  __break(1u);
  return result;
}

uint64_t sub_188360F7C( unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    LOBYTE(v25[0]) = 0;
    return a3(v25);
  }

  if ((v14 & 1) == 0)
  {
    v25[0] = a5;
    v25[1] = a6;
    v25[2] = a7;
    if ((unint64_t)a8 >> 62)
    {
      if (a8 < 0) {
        a6 = a8;
      }
      else {
        a6 = a8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t result = sub_188386CBC();
      if (result < 0)
      {
        __break(1u);
        return result;
      }

      unint64_t v16 = result;
      if (result >= 1) {
        uint64_t v17 = 1LL;
      }
      else {
        uint64_t v17 = result;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_188386CBC();
      swift_bridgeObjectRelease();
      if (v14 >= v17)
      {
        swift_bridgeObjectRetain();
        a6 = sub_188386CBC();
        swift_bridgeObjectRelease();
        __break(1u);
      }
    }

    else
    {
      unint64_t v16 = *(void *)((a8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      else {
        uint64_t v17 = *(void *)((a8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }
      swift_bridgeObjectRetain();
      if (v16 >= v17)
      {
LABEL_10:
        if ((a8 & 0xC000000000000001LL) != 0 && v16 >= 2)
        {
          uint64_t v18 = v17;
          do
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C708598);
            sub_188386BCC();
            ++v18;
          }

          while (v16 != v18);
        }

        if ((unint64_t)a8 >> 62)
        {
          swift_bridgeObjectRetain();
          a6 = sub_188386CC8();
          uint64_t v14 = v19;
          uint64_t v17 = v20;
          unint64_t v16 = v21;
          swift_bridgeObjectRelease_n();
          if ((v16 & 1) != 0) {
            goto LABEL_19;
          }
        }

        else
        {
          a6 = a8 & 0xFFFFFFFFFFFFFF8LL;
          uint64_t v14 = (a8 & 0xFFFFFFFFFFFFFF8LL) + 32;
          unint64_t v16 = (2 * v16) | 1;
          if ((v16 & 1) != 0)
          {
LABEL_19:
            sub_188387028();
            swift_unknownObjectRetain_n();
            uint64_t v23 = swift_dynamicCastClass();
            if (!v23)
            {
              swift_unknownObjectRelease();
              uint64_t v23 = MEMORY[0x18961AFE8];
            }

            uint64_t v24 = *(void *)(v23 + 16);
            swift_release();
            if (!__OFSUB__(v16 >> 1, v17))
            {
              if (v24 == (v16 >> 1) - v17)
              {
                uint64_t v22 = swift_dynamicCastClass();
                if (!v22)
                {
                  swift_unknownObjectRelease();
                  uint64_t v22 = MEMORY[0x18961AFE8];
                }

                goto LABEL_25;
              }

              goto LABEL_40;
            }

LABEL_39:
            __break(1u);
LABEL_40:
            swift_unknownObjectRelease();
          }
        }

        uint64_t v22 = sub_188362328(a6, v14, v17, v16);
LABEL_25:
        swift_unknownObjectRelease();
        sub_188360DC8(v25, v22, a3, a4);
        swift_release();
        return swift_release();
      }
    }

    __break(1u);
    goto LABEL_39;
  }

  LOBYTE(v25[0]) = 1;
  a3(v25);
  return swift_release();
}

uint64_t sub_188361248@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t v5 = MEMORY[0x1895F8860](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  uint64_t v9 = (char *)v17 - v8;
  xpc_object_t v10 = *a1;
  xpc_object_t reply = xpc_dictionary_create_reply(*a1);
  if (reply)
  {
    uint64_t v12 = (uint64_t)reply;
    v17[1] = reply;
    v17[2] = 0xD000000000000019LL;
    v17[3] = 0x800000018838B7A0LL;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1883868F0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1883865E4();
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_18838662C();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1LL, v13) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0LL, 1LL, v13);
        goto LABEL_9;
      }

      sub_188361B2C((uint64_t)v7);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    uint64_t v16 = sub_18838662C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v9, 1LL, 1LL, v16);
LABEL_9:
    sub_188345B34((uint64_t)v9);
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_10;
  }

  uint64_t result = (uint64_t)xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v12 = result;
LABEL_10:
  *a2 = v12;
  a2[1] = 0xD000000000000019LL;
  a2[2] = 0x800000018838B7A0LL;
  return result;
}

void sub_188361448()
{
}

void sub_1883614A0()
{
}

void sub_1883614F8()
{
}

uint64_t sub_188361550(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v2;
  *(_OWORD *)(v3 + 120) = *(_OWORD *)a2;
  *(void *)(v3 + 136) = *(void *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_188361578()
{
  uint64_t v1 = *(void *)(v0 + 136);
  __int128 v6 = *(_OWORD *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  *(void *)(v0 + 56) = v0 + 80;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_188361638;
  uint64_t v3 = swift_continuation_init();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  __int128 v7 = v6;
  uint64_t v8 = v1;
  (*(void (**)(__int128 *, void, uint64_t (*)(uint64_t *), uint64_t))(*(void *)v2 + 160LL))( &v7,  0LL,  sub_188361B7C,  v4);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_188361638()
{
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 48))
  {
    swift_willThrow();
  }

  else
  {
    uint64_t v2 = *(void *)(v1 + 96);
    uint64_t v3 = *(void *)(v1 + 104);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(v1 + 80);
    *(void *)(v3 + 16) = v2;
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1883616A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if ((a1[3] & 1) != 0)
  {
    sub_1883491B4();
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = v3;
    v5[1] = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    swift_allocError();
    *__int128 v6 = v4;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResumeWithError();
  }

  else
  {
    uint64_t v8 = a1[2];
    uint64_t v9 = *(void **)(*(void *)(a2 + 64) + 40LL);
    *uint64_t v9 = v3;
    v9[1] = v2;
    v9[2] = v8;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }

void sub_188361764()
{
}

void sub_1883617BC()
{
}

void sub_188361814()
{
}

void sub_18836186C()
{
}

uint64_t sub_1883618C4()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(*(void *)v0 + 208LL))( &v2,  sub_188361924,  0LL,  MEMORY[0x189618740]);
  return sub_188387250();
}

size_t sub_188361924@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  size_t result = xpc_hash(a1);
  *a2 = result;
  return result;
}

uint64_t sub_188361950(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, _BYTE *@<X8>), void *, void))(*(void *)a2 + 208LL))( sub_1883627E8,  v3,  MEMORY[0x1896184C8]);
}

uint64_t sub_188361998(uint64_t a1)
{
  return sub_188362204(a1);
}

unint64_t sub_1883619AC()
{
  unint64_t result = qword_18C4E72A0;
  if (!qword_18C4E72A0)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A3C8, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_18C4E72A0);
  }

  return result;
}

uint64_t sub_1883619F0()
{
  return swift_deallocObject();
}

uint64_t sub_188361A1C(uint64_t a1)
{
  return sub_18835FA30( a1,  *(void *)(v1 + 80),  *(void *)(v1 + 88),  *(void (**)(uint64_t *))(v1 + 96),  *(void *)(v1 + 104),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32));
}

uint64_t sub_188361A5C()
{
  return swift_deallocObject();
}

uint64_t sub_188361A80()
{
  return swift_deallocObject();
}

uint64_t sub_188361AAC(uint64_t a1)
{
  return sub_1883603D8( a1,  *(void *)(v1 + 56),  *(void (**)(char *))(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_188361ADC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_188360BAC(a1, a2);
}

uint64_t sub_188361AE4(uint64_t *a1)
{
  return sub_188360C54(a1);
}

uint64_t sub_188361AEC(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_188361B1C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_188361B2C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_188361B6C()
{
  return swift_deallocObject();
}

uint64_t sub_188361B7C(uint64_t *a1)
{
  return sub_1883616A0(a1, *(void *)(v1 + 16));
}

uint64_t sub_188361B84()
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, void *@<X8>), void, void))(*(void *)v0 + 208LL))( &v2,  sub_188361BD0,  0LL,  MEMORY[0x189617BF8]);
  return v2;
}

uint64_t sub_188361BD0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_188361BD8()
{
  uint64_t v1 = MEMORY[0x189617FA8];
  (*(void (**)(void *__return_ptr, void (*)(uint64_t *@<X8>), void, void))(*(void *)v0 + 208LL))( v11,  sub_188361CE4,  0LL,  MEMORY[0x189617FA8]);
  uint64_t v2 = v11[0];
  uint64_t v3 = v11[1];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1883895D0;
  v11[0] = *(void *)v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D50);
  uint64_t v5 = sub_18838689C();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = v1;
  unint64_t v8 = sub_18834DFC0();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  uint64_t v9 = MEMORY[0x189619430];
  *(void *)(v4 + 96) = MEMORY[0x189619420];
  *(void *)(v4 + 104) = v9;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = v0;
  *(void *)(v4 + 136) = v1;
  *(void *)(v4 + 144) = v8;
  *(void *)(v4 + 112) = v2;
  *(void *)(v4 + 120) = v3;
  return sub_18838686C();
}

void sub_188361CE4(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)MEMORY[0x1895C3A50]();
  *a1 = sub_1883868F0();
  a1[1] = v3;
  free(v2);
}

uint64_t XPCConnection.deinit()
{
  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_188361D68()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(*(void *)v0 + 208LL))( &v2,  sub_188361924,  0LL,  MEMORY[0x189618740]);
  sub_188387250();
  return sub_188387268();
}

uint64_t sub_188361DD8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248LL))();
}

uint64_t sub_188361E00()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(**(void **)v0 + 208LL))( &v2,  sub_188361924,  0LL,  MEMORY[0x189618740]);
  return sub_188387250();
}

unint64_t sub_188361E68()
{
  unint64_t result = qword_18C4E6D48;
  if (!qword_18C4E6D48)
  {
    uint64_t v1 = type metadata accessor for XPCConnection();
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCConnection, v1);
    atomic_store(result, (unint64_t *)&qword_18C4E6D48);
  }

  return result;
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self();
}

uint64_t sub_188361ECC()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(**(void **)v0 + 208LL))( &v2,  sub_188361924,  0LL,  MEMORY[0x189618740]);
  sub_188387250();
  return sub_188387268();
}

uint64_t sub_188361F3C()
{
  return MEMORY[0x189617C00];
}

void *sub_188361F48@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, void *@<X8>), void, void))(**(void **)v1 + 208LL))( &v4,  sub_188361BD0,  0LL,  MEMORY[0x189617BF8]);
  *a1 = v4;
  return result;
}

uint64_t sub_188361FA8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240LL))();
}

uint64_t sub_188361FD0(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), void, void))(**(void **)a1
                                                                                                 + 208LL))( &v3,  sub_188361998,  *a2,  MEMORY[0x1896184C8]);
  return v3;
}

uint64_t dispatch thunk of XPCListenerConnection.createEndpoint()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XPCPeerConnection.setEventHandler(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of XPCConnectionChainedDispatching.createDispatcher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for XPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t dispatch thunk of XPCConnection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCConnection.createDispatcher()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of XPCConnection.offerEventToDispatchers(event:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of XPCConnection.createReply(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of XPCConnection.send(message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of XPCConnection.sendSync(message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of XPCConnection.sendMessage(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(void *)v2 + 184LL) + *(void *)(*(void *)v2 + 184LL));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_18836212C;
  return v8(a1, a2);
}

uint64_t sub_18836212C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of XPCConnection.activate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of XPCConnection.setTargetQueue(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of XPCConnection.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of XPCConnection.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of XPCConnection.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of XPCConnection.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of XPCConnection.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t sub_1883621E4()
{
  return sub_1883609B4();
}

uint64_t sub_188362204(uint64_t a1)
{
  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, _BYTE *@<X8>), void *, void))(*(void *)v1 + 208LL))( sub_1883627E8,  v3,  MEMORY[0x1896184C8]);
}

void *sub_188362240(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7085B0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_1883625F0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1883493F0();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_188362328(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x18961AFE8];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x18961AFE8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C708598);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7085B0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_19:
  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_1883624AC()
{
  return swift_deallocObject();
}

uint64_t sub_1883624F0(unsigned __int8 *a1)
{
  return sub_188360F7C( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(void *))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_188362504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_188360588(a1, v2[3], v2[5], v2[6], a2);
}

uint64_t sub_188362514(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    swift_unknownObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

void sub_188362540(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
  }

  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

void sub_18836256C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  __int128 v2 = *(_OWORD *)(v0 + 88);
  uint64_t v3 = v1;
  sub_18835FC04((uint64_t)&v2);
}

void sub_1883625A8()
{
  if (v1) {
    *uint64_t v0 = v1;
  }
}

uint64_t sub_1883625C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1883625F0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    void *v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_1883627E8@<W0>(xpc_object_t object2@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = xpc_equal(*(xpc_object_t *)(v2 + 16), object2);
  *a2 = result;
  return result;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 72) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = 0LL;
  *(_BYTE *)(v2 + 64) = 0;
  *(void *)(v2 + 32) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v2 + 24) = a1;
  id v3 = a1;
  return v2;
}

uint64_t type metadata accessor for RemoteXPCPeerConnection()
{
  return objc_opt_self();
}

uint64_t sub_1883628B0()
{
  return xpc_remote_connection_activate();
}

void sub_1883628B8()
{
}

uint64_t sub_188362908()
{
  if ((v6 & 1) != 0)
  {
    sub_1883491B4();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    *uint64_t v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1883625C4(v3, v4, v5, 1);
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }

  return result;
}

uint64_t sub_1883629AC()
{
  return xpc_remote_connection_send_message();
}

uint64_t sub_1883629B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  swift_weakInit();
  sub_188362A2C(v8, v4, a2, (uint64_t)v10, a3, a4);
  return swift_weakDestroy();
}

uint64_t sub_188362A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 0;
  uint64_t v9 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  void v10[3] = v9;
  v10[4] = a5;
  void v10[5] = a6;
  aBlock[4] = sub_18836485C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1895F87A0];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_188362D84;
  aBlock[3] = &block_descriptor_48;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_send_message_with_reply();
  _Block_release(v11);
  return swift_release();
}

void sub_188362BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(a2 + 16);
  do
    signed __int8 v3 = __ldaxr(v2);
  while (__stlxr(v3 | 0x80, v2));
  if ((v3 & 0x80000000) == 0)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_unknownObjectRetain();
    sub_18837C1BC();
  }

  sub_188386A70();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1883895E0;
  swift_beginAccess();
  swift_weakLoadStrong();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7085E8);
  uint64_t v5 = sub_18838689C();
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x189617FA8];
  *(void *)(v4 + 56) = MEMORY[0x189617FA8];
  unint64_t v9 = sub_18834DFC0();
  *(void *)(v4 + 64) = v9;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7820);
  uint64_t v10 = sub_18838689C();
  *(void *)(v4 + 96) = v8;
  *(void *)(v4 + 104) = v9;
  *(void *)(v4 + 72) = v10;
  *(void *)(v4 + 80) = v11;
  sub_188352280(0LL, (unint64_t *)&qword_18C708530);
  int64_t v12 = (void *)sub_188386B18();
  sub_18838668C();
  swift_bridgeObjectRelease();
}

uint64_t sub_188362D84(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_188362DCC()
{
  return xpc_remote_connection_set_target_queue();
}

uint64_t sub_188362DD8(uint64_t (*a1)(void))
{
  return a1(*(void *)(v1 + 24));
}

uint64_t sub_188362E00()
{
  return xpc_remote_connection_cancel();
}

uint64_t sub_188362E08()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8378);
  MEMORY[0x1895F8860](v1);
  signed __int8 v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_188361BD8();
  uint64_t v13 = v4;
  unint64_t v14 = v5;
  if (*(void *)(v0 + 40))
  {
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    v10[0] = 0xD00000000000001CLL;
    v10[1] = 0x800000018838C510LL;
    uint64_t v6 = sub_188386638();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v3, 1LL, 1LL, v6);
    sub_188362FB8();
    swift_bridgeObjectRetain();
    sub_188386B48();
    char v8 = v7;
    sub_188362FFC((uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      unint64_t v11 = 0LL;
      unint64_t v12 = 0xE000000000000000LL;
      sub_188386BB4();
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD000000000000016LL;
      unint64_t v12 = 0x800000018838C530LL;
      sub_1883868E4();
      sub_18836303C();
      sub_1883868B4();
      swift_bridgeObjectRelease();
    }
  }

  return v13;
}

unint64_t sub_188362FB8()
{
  unint64_t result = qword_18C7085C0;
  if (!qword_18C7085C0)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189617FF0], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C7085C0);
  }

  return result;
}

uint64_t sub_188362FFC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8378);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_18836303C()
{
  unint64_t result = qword_18C7085C8;
  if (!qword_18C7085C8)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189617FE0], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C7085C8);
  }

  return result;
}

void RemoteXPCConnection.__allocating_init()()
{
}

void RemoteXPCConnection.init()()
{
}

uint64_t sub_1883630D8()
{
  return swift_bridgeObjectRelease();
}

uint64_t RemoteXPCConnection.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteXPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_188363154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 48);
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = a2;
  swift_retain();
  sub_188361B1C(v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0LL;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  unint64_t v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = v8;
  v9[4] = a1;
  void v9[5] = a2;
  v12[4] = sub_188363740;
  void v12[5] = v9;
  v12[0] = MEMORY[0x1895F87A0];
  v12[1] = 1107296256LL;
  void v12[2] = sub_188362D84;
  uint64_t v12[3] = &block_descriptor_3;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_set_event_handler();
  _Block_release(v10);
  return swift_release();
}

uint64_t sub_18836328C()
{
  return swift_deallocObject();
}

uint64_t sub_1883632B0()
{
  return swift_deallocObject();
}

uint64_t sub_1883632D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  v20[8] = a5;
  unint64_t v21 = a4;
  uint64_t v7 = sub_188386734();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8860](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_18838674C();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8860](v11);
  unint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  if (*(void *)(a2 + 16))
  {
    swift_retain();
    sub_188363F2C(a1);
    return swift_release();
  }

  v20[7] = a2 + 16;
  v20[1] = a2;
  v20[2] = v14;
  unint64_t v16 = v21;
  void v20[3] = v10;
  v20[4] = v12;
  v20[5] = v11;
  v20[6] = v8;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    objc_opt_self();
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (!v17)
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }

    uint64_t v18 = v17;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 72) = 0LL;
    *(void *)(v19 + 48) = 0LL;
    *(void *)(v19 + 56) = 0LL;
    *(_BYTE *)(v19 + 64) = 0;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 40) = 0LL;
    *(void *)(v19 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v19 + 24) = v18;
    v22[0] = v19;
    v22[1] = &protocol witness table for RemoteXPCPeerConnection;
    char v23 = 0;
    swift_unknownObjectRetain();
    v16(v22);
    swift_release();
    return swift_release();
  }

  return result;
}

void sub_1883634C8(uint64_t a1)
{
  uint64_t v6 = v1;
  if (XPCTypeError != a1)
  {
    uint64_t v7 = *(void **)(v3 + 24);
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = 0LL;
    *(void *)(v8 + 48) = 0LL;
    *(void *)(v8 + 56) = 0LL;
    *(void *)(v8 + 32) = 0LL;
    *(void *)(v8 + 40) = 0LL;
    uint64_t v9 = MEMORY[0x18961AFE8];
    *(void *)(v8 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v8 + 24) = v7;
    *(_BYTE *)(v8 + 64) = 1;
    uint64_t v10 = *(uint64_t **)(v5 - 264);
    swift_beginAccess();
    *uint64_t v10 = v8;
    id v11 = v7;
    swift_release();
    swift_beginAccess();
    uint64_t v12 = *v10;
    if (v12)
    {
      *(void *)(v5 - 232) = v12;
      *(void *)(v5 - 224) = &protocol witness table for RemoteXPCPeerConnection;
      *(_BYTE *)(v5 - 216) = 0;
      swift_retain();
      v6(v5 - 232);
      swift_release();
      uint64_t v13 = *(void **)(v3 + 64);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = *(void *)(v5 - 312);
      *(void *)(v14 + 24) = v4;
      *(void *)(v5 - 200) = sub_18836481C;
      *(void *)(v5 - 192) = v14;
      *(void *)(v5 - 232) = MEMORY[0x1895F87A0];
      *(void *)(v5 - 224) = 1107296256LL;
      *(void *)(v5 - 216) = sub_1883637C0;
      *(void *)(v5 - 208) = &block_descriptor_39;
      unint64_t v15 = _Block_copy((const void *)(v5 - 232));
      swift_unknownObjectRetain();
      id v16 = v13;
      swift_retain();
      uint64_t v17 = *(void *)(v5 - 304);
      sub_188386740();
      *(void *)(v5 - 240) = v9;
      sub_1883646E4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E77F8);
      sub_18836472C();
      uint64_t v18 = *(void *)(v5 - 296);
      sub_188386B90();
      MEMORY[0x1895C28BC](0LL, v17, v18, v15);
      _Block_release(v15);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 272) + 8LL))(v18, v2);
      (*(void (**)(uint64_t, void))(*(void *)(v5 - 288) + 8LL))(v17, *(void *)(v5 - 280));
      JUMPOUT(0x1883633ACLL);
    }

    __break(1u);
    JUMPOUT(0x188363738LL);
  }

  swift_unknownObjectRetain();
  swift_retain();
  sub_1883476E8(MEMORY[0x18961AFE8]);
  XPCError.init(_:from:userInfo:)();
}

uint64_t sub_188363740(uint64_t a1)
{
  return sub_1883632D4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void *))(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_188363764(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    sub_188363F2C(a2);
    return swift_release();
  }

  return result;
}

uint64_t sub_1883637C0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1883637EC()
{
}

uint64_t sub_18836384C(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  if (!a1)
  {
    sub_188352280(0LL, (unint64_t *)&qword_18C4E8380);
    a1 = sub_188386AD0();
  }

  uint64_t v3 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = a1;
  id v4 = v2;

  return xpc_remote_connection_set_target_queue();
}

void sub_1883638B8()
{
}

uint64_t RemoteXPCListenerConnection.deinit()
{
  swift_bridgeObjectRelease();
  sub_188361B1C(*(void *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCListenerConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_188361B1C(*(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

void sub_188363958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  swift_retain();
  sub_188361B1C(v3);
  if ((*(_BYTE *)(v2 + 64) & 1) == 0)
  {
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    v6[4] = sub_188363DF0;
    v6[5] = v4;
    v6[0] = MEMORY[0x1895F87A0];
    v6[1] = 1107296256LL;
    void v6[2] = sub_188362D84;
    void v6[3] = &block_descriptor_12;
    uint64_t v5 = _Block_copy(v6);
    swift_release();
    xpc_remote_connection_set_event_handler();
    _Block_release(v5);
  }

uint64_t sub_188363A2C(void *a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = (const char *)result;
    uint64_t v4 = XPCTypeDictionary;
    if (v4 != MEMORY[0x1895C3C6C](a1)
      || (type metadata accessor for XPCSideChannel(),
          swift_unknownObjectRetain(),
          swift_retain(),
          char v5 = sub_188375A90(a1, 0xD000000000000019LL, 0x800000018838B7A0LL, v3),
          swift_bridgeObjectRelease(),
          swift_unknownObjectRelease(),
          swift_release(),
          (v5 & 1) == 0))
    {
      swift_unknownObjectRetain();
      swift_retain();
      sub_1883476E8(MEMORY[0x18961AFE8]);
      XPCError.init(_:from:userInfo:)();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_188363DF0(void *a1)
{
  return sub_188363A2C(a1);
}

void sub_188363DF8(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = a1;
  id v3 = a1;

  if ((*(_BYTE *)(v1 + 64) & 1) == 0) {
    xpc_remote_connection_set_target_queue();
  }
}

uint64_t sub_188363E4C()
{
  if (!*(void *)(v0 + 48))
  {
    *(void *)(v0 + 48) = nullsub_1;
    *(void *)(v0 + 56) = 0LL;
    sub_188361B1C(0LL);
    if ((*(_BYTE *)(v0 + 64) & 1) == 0)
    {
      uint64_t v1 = swift_allocObject();
      swift_weakInit();
      _OWORD v4[4] = sub_188363DF0;
      v4[5] = v1;
      v4[0] = MEMORY[0x1895F87A0];
      v4[1] = 1107296256LL;
      v4[2] = sub_188362D84;
      v4[3] = &block_descriptor_17;
      uint64_t v2 = _Block_copy(v4);
      swift_release();
      xpc_remote_connection_set_event_handler();
      _Block_release(v2);
    }
  }

  return xpc_remote_connection_activate();
}

uint64_t sub_188363F2C(uint64_t a1)
{
  uint64_t v3 = sub_188386734();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18838674C();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1895F8860](v7);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void **)(v1 + 72);
  if (v12)
  {
    uint64_t v13 = swift_allocObject();
    uint64_t v20 = v4;
    uint64_t v14 = v13;
    swift_weakInit();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = a1;
    aBlock[4] = sub_1883646DC;
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1895F87A0];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1883637C0;
    aBlock[3] = &block_descriptor_24;
    id v16 = _Block_copy(aBlock);
    id v17 = v12;
    swift_retain();
    swift_unknownObjectRetain();
    sub_188386740();
    void aBlock[6] = MEMORY[0x18961AFE8];
    sub_1883646E4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E77F8);
    sub_18836472C();
    sub_188386B90();
    MEMORY[0x1895C28BC](0LL, v11, v6, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    swift_release();
    return swift_release();
  }

  else
  {
    uint64_t v18 = *(void *)(v1 + 48);
    if (v18)
    {
      swift_unknownObjectRetain();
      sub_1883646C8(v18);
      swift_retain();
      sub_18837C1BC();
    }
  }

  return result;
}

uint64_t sub_1883641B0()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 48))
    {
      sub_1883646C8(*(void *)(result + 48));
      swift_unknownObjectRetain();
      swift_retain();
      sub_18837C1BC();
    }

    return swift_release();
  }

  return result;
}

void sub_188364298()
{
}

uint64_t RemoteXPCPeerConnection.deinit()
{
  swift_bridgeObjectRelease();
  sub_188361B1C(*(void *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCPeerConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_188361B1C(*(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

void *static RemoteXPCConnection.remoteServiceListenerConnection(serviceName:targetQueue:)()
{
  uint64_t remote_service_listener = xpc_remote_connection_create_remote_service_listener();
  swift_release();
  type metadata accessor for RemoteXPCListenerConnection();
  uint64_t v1 = (void *)swift_allocObject();
  sub_188352280(0LL, (unint64_t *)&qword_18C4E8380);
  v1[6] = 0LL;
  v1[7] = 0LL;
  v1[8] = sub_188386AD0();
  v1[4] = 0LL;
  v1[5] = 0LL;
  v1[2] = MEMORY[0x18961AFE8];
  v1[3] = remote_service_listener;
  return v1;
}

uint64_t type metadata accessor for RemoteXPCListenerConnection()
{
  return objc_opt_self();
}

uint64_t static RemoteXPCConnection.connectionToRemoteService(device:serviceName:targetQueue:)()
{
  uint64_t v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = xpc_remote_connection_create_with_remote_service();

  if (!v1) {
    return 0LL;
  }
  type metadata accessor for RemoteXPCPeerConnection();
  uint64_t result = swift_allocObject();
  *(void *)(result + 72) = 0LL;
  *(void *)(result + 48) = 0LL;
  *(void *)(result + 56) = 0LL;
  *(_BYTE *)(result + 64) = 0;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + 16) = MEMORY[0x18961AFE8];
  *(void *)(result + 24) = v1;
  return result;
}

void *static RemoteXPCConnection.unsafeListener(from:)(void *a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  sub_188352280(0LL, (unint64_t *)&qword_18C4E8380);
  v2[6] = 0LL;
  v2[7] = 0LL;
  id v3 = a1;
  v2[8] = sub_188386AD0();
  v2[4] = 0LL;
  v2[5] = 0LL;
  v2[2] = MEMORY[0x18961AFE8];
  v2[3] = v3;
  return v2;
}

void *static RemoteXPCConnection.unsafeListener(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  sub_188352280(0LL, (unint64_t *)&qword_18C4E8380);
  void v6[6] = 0LL;
  v6[7] = 0LL;
  id v7 = a1;
  swift_bridgeObjectRetain();
  v6[8] = sub_188386AD0();
  v6[4] = a2;
  v6[5] = a3;
  void v6[2] = MEMORY[0x18961AFE8];
  void v6[3] = v7;
  return v6;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(void *)(v6 + 56) = 0LL;
  *(_BYTE *)(v6 + 64) = 0;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v6 + 24) = a1;
  id v7 = a1;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t type metadata accessor for RemoteXPCConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteXPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t method lookup function for RemoteXPCListenerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.setPeerConnectionHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.createEndpoint()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

uint64_t method lookup function for RemoteXPCPeerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteXPCPeerConnection.setEventHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384LL))();
}

uint64_t sub_1883646C8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1883646DC()
{
  return sub_1883641B0();
}

unint64_t sub_1883646E4()
{
  unint64_t result = qword_18C4E77C0;
  if (!qword_18C4E77C0)
  {
    uint64_t v1 = sub_188386734();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961B6B8], v1);
    atomic_store(result, (unint64_t *)&qword_18C4E77C0);
  }

  return result;
}

unint64_t sub_18836472C()
{
  unint64_t result = qword_18C4E7800;
  if (!qword_18C4E7800)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E77F8);
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C4E7800);
  }

  return result;
}

_BYTE *sub_18836477C(_BYTE *result)
{
  if ((*result & 1) == 0) {
    return (_BYTE *)sub_188363F2C(*(void *)(v1 + 24));
  }
  return result;
}

uint64_t sub_1883647A8()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_20Tm()
{
  return swift_deallocObject();
}

uint64_t sub_18836481C()
{
  return sub_188363764(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_5Tm()
{
  return swift_deallocObject();
}

void sub_18836485C(uint64_t a1)
{
}

uint64_t audit_token_t.processIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_pid);
}

uint64_t audit_token_t.auditUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_auid);
}

uint64_t audit_token_t.effectiveUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_euid);
}

uint64_t audit_token_t.effectiveGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_egid);
}

uint64_t audit_token_t.realUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_ruid);
}

uint64_t audit_token_t.realGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_rgid);
}

uint64_t audit_token_t.auditSessionIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_asid);
}

uint64_t audit_token_t.processIdentifierVersion.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1883648FC(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_pidversion);
}

uint64_t sub_1883648FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = a3;
  void v6[3] = a4;
  return a5(v6);
}

uint64_t static audit_token_t.current()()
{
  v5[1] = *MEMORY[0x1895F89C8];
  task_name_t v1 = *MEMORY[0x1895FBBE8];
  memset(v4, 0, sizeof(v4));
  uint64_t result = sub_188364CD8((integer_t *)v4, (uint64_t)v5, v1, &v3);
  if (!v0) {
    return *(void *)&v4[0];
  }
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(taskName:)( audit_token_t *__return_ptr retstr, Swift::UInt32 taskName)
{
  v4[1] = *MEMORY[0x1895F89C8];
  memset(v3, 0, sizeof(v3));
  sub_188364CD8((integer_t *)v3, (uint64_t)v4, taskName, &v2);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(processIdentifier:expectedProcessIdentifierVersion:)( audit_token_t *__return_ptr retstr, Swift::Int32 processIdentifier, Swift::Int32_optional expectedProcessIdentifierVersion)
{
  kern_return_t v14;
  int v15;
  mach_port_name_t v16;
  ipc_space_t v17;
  mach_port_name_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v4 = *(void *)&expectedProcessIdentifierVersion.value;
  uint64_t v28 = *MEMORY[0x1895F89C8];
  uint64_t v6 = sub_188386434();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_188386680();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8860](v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  HIDWORD(v27) = 0;
  uint64_t v14 = task_name_for_pid(*MEMORY[0x1895FBBE8], processIdentifier, (mach_port_name_t *)&v27 + 1);
  if (v14)
  {
    uint64_t v15 = v14;
    sub_1883476E8(MEMORY[0x18961AFE8]);
    MachError.init(uncheckedCode:userInfo:)(v15, (uint64_t)v13);
    sub_188386674();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_willThrow();
    return;
  }

  id v16 = HIDWORD(v27);
  uint64_t v25 = 0u;
  uint64_t v26 = 0u;
  sub_188364CD8((integer_t *)&v25, (uint64_t)&v27, HIDWORD(v27), &v24);
  if (v3)
  {
    id v17 = *MEMORY[0x1895FBBE8];
    uint64_t v18 = v16;
LABEL_5:
    mach_port_deallocate(v17, v18);
    return;
  }

  char v23 = v25;
  uint64_t v22 = DWORD1(v25);
  unint64_t v21 = DWORD2(v25);
  uint64_t v20 = HIDWORD(v25);
  uint64_t v19 = v26;
  if ((v4 & 0x100000000LL) == 0)
  {
    *(void *)&uint64_t v25 = __PAIR64__(v22, v23);
    *((void *)&v25 + 1) = __PAIR64__(v20, v21);
    LODWORD(v26) = v19;
    if (XPCaudit_token_to_pidversion(&v25) != (_DWORD)v4)
    {
      LODWORD(v25) = 3;
      sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_188364DFC();
      sub_188386500();
      sub_18838641C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_willThrow();
      id v17 = *MEMORY[0x1895FBBE8];
      uint64_t v18 = HIDWORD(v27);
      goto LABEL_5;
    }
  }

  mach_port_deallocate(*MEMORY[0x1895FBBE8], v16);
}

uint64_t sub_188364CD8(integer_t *a1, uint64_t a2, task_name_t a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C8];
  uint64_t v7 = sub_188386680();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8860](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  HIDWORD(v14) = 8;
  if (!a1) {
    __break(1u);
  }
  uint64_t result = task_info(a3, 0xFu, a1, (mach_msg_type_number_t *)&v14 + 1);
  if ((_DWORD)result)
  {
    int v12 = result;
    sub_1883476E8(MEMORY[0x18961AFE8]);
    MachError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v10);
    uint64_t v13 = sub_188386674();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t result = swift_willThrow();
    *a4 = v13;
  }

  return result;
}

unint64_t sub_188364DFC()
{
  unint64_t result = qword_18C708930;
  if (!qword_18C708930)
  {
    uint64_t v1 = sub_188386434();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189605FB0], v1);
    atomic_store(result, (unint64_t *)&qword_18C708930);
  }

  return result;
}

uint64_t XPCReplyProviding.init(createReply:sendReply:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(a1, a2, a3, a4, a5);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + 80) = a1;
  return result;
}

_xpc_connection_s *sub_188364EF8(xpc_object_t *a1)
{
  xpc_object_t v1 = *a1;
  uint64_t result = xpc_dictionary_get_remote_connection(*a1);
  if (result)
  {
    uint64_t v3 = result;
    objc_opt_self();
    if (swift_dynamicCastObjCClass()) {
      xpc_remote_connection_send_message();
    }
    else {
      xpc_connection_send_message(v3, v1);
    }
    return (_xpc_connection_s *)swift_unknownObjectRelease();
  }

  return result;
}

void static XPCReplyProviding.passthrough.getter(void *a1@<X8>)
{
  *a1 = sub_188364EF4;
  a1[1] = 0LL;
  a1[2] = sub_188364EF8;
  a1[3] = 0LL;
}

uint64_t XPCReplyProviding.init(sendReply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = sub_188364EF4;
  a3[1] = 0LL;
  a3[2] = result;
  a3[3] = a2;
  return result;
}

uint64_t sub_188364FA0@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t v5 = MEMORY[0x1895F8860](v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  uint64_t v9 = (char *)v16 - v8;
  xpc_object_t v10 = *a1;
  uint64_t result = (uint64_t)xpc_dictionary_create_reply(*a1);
  if (!result)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    return result;
  }

  uint64_t v12 = result;
  v16[1] = result;
  v16[2] = 0xD000000000000019LL;
  v16[3] = 0x800000018838B7A0LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1883868F0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1883865E4();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_18838662C();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1LL, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0LL, 1LL, v13);
      goto LABEL_9;
    }

    sub_188361B2C((uint64_t)v7);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

  uint64_t v15 = sub_18838662C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v9, 1LL, 1LL, v15);
LABEL_9:
  sub_188345B34((uint64_t)v9);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v12;
  a2[1] = 0xD000000000000019LL;
  a2[2] = 0x800000018838B7A0LL;
  return result;
}

uint64_t XPCReplyProviding.createReply(_:)(__int128 *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *v1;
  __int128 v5 = *a1;
  uint64_t v6 = v2;
  return v3(&v5);
}

uint64_t XPCReplyProviding.sendReply(_:)(__int128 *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *(uint64_t (**)(__int128 *))(v1 + 16);
  __int128 v5 = *a1;
  uint64_t v6 = v2;
  return v3(&v5);
}

uint64_t XPCMessageDispatchTraits.replyProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_188365CD8(v2);
}

__n128 XPCMessageDispatchTraits.replyProvider.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  sub_188361AEC(*v1);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.replyProvider.modify())()
{
  return nullsub_1;
}

uint64_t sub_18836527C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18834A3E4;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1883646C8(v3);
}

uint64_t sub_1883652E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18834A3E4;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  sub_1883646C8(v3);
  uint64_t result = sub_188361B1C(v7);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1883646C8(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_188361B1C(*(void *)(v2 + 32));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.inboundObserver.modify())()
{
  return nullsub_1;
}

uint64_t sub_1883653E0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18834A3E4;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1883646C8(v3);
}

uint64_t sub_188365444(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_18834A3E4;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a2 + 48);
  sub_1883646C8(v3);
  uint64_t result = sub_188361B1C(v7);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1883646C8(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_188361B1C(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.outboundObserver.modify())()
{
  return nullsub_1;
}

double XPCMessageDispatchTraits.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0LL;
  type metadata accessor for XPCObjectDecoder();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v2;
  *(void *)(a1 + 80) = v3;
  return result;
}

uint64_t XPCMessageDispatchTraits.isDispatchable(encodedData:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int128 v3 = v1[3];
  __int128 v9 = v1[2];
  __int128 v10 = v3;
  __int128 v11 = v1[4];
  uint64_t v12 = *((void *)v1 + 10);
  __int128 v4 = v1[1];
  __int128 v7 = *v1;
  __int128 v8 = v4;
  sub_188365608(v2, (char *)&v6);
  return v6;
}

void sub_188365608(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (v2)
  {

    char v4 = 0;
  }

  else
  {
    swift_bridgeObjectRelease();
    char v4 = 1;
  }

  *a2 = v4;
}

uint64_t *XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)@<X0>( uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  void (**v2)(void *__return_ptr, void *);
  uint64_t v3;
  uint64_t v5;
  void (*v6)(void *__return_ptr, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  void v12[3];
  void v13[5];
  uint64_t v5 = *result;
  if (*result)
  {
    v13[4] = v3;
    unsigned __int8 v6 = *v2;
    if (*v2)
    {
      __int128 v8 = result[1];
      __int128 v7 = result[2];
      v12[0] = v5;
      v12[1] = v8;
      void v12[2] = v7;
      sub_188365D08(v5);
      sub_188365CD8((uint64_t)v6);
      v6(v13, v12);
      sub_188361AEC((uint64_t)v6);
      __int128 v9 = (uint64_t *)v13[0];
      if (v13[0])
      {
        __int128 v11 = (uint64_t *)v13[1];
        __int128 v10 = (uint64_t *)v13[2];
        double result = (uint64_t *)sub_18835DD0C(v5);
        *a2 = v9;
        a2[1] = v11;
        a2[2] = v10;
      }

      else
      {
        sub_188365D34();
        swift_allocError();
        swift_willThrow();
        return (uint64_t *)sub_18835DD0C(v5);
      }
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    double result = (uint64_t *)xpc_dictionary_create(0LL, 0LL, 0LL);
    *a2 = result;
    a2[1] = (uint64_t *)0xD000000000000019LL;
    a2[2] = (uint64_t *)0x800000018838B7A0LL;
  }

  return result;
}

uint64_t XPCMessageDispatchTraits.encode<A>(value:into:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v8, a4, a5);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t XPCMessageDispatchTraits.decode<A>(encodedData:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_188365D78);
}

uint64_t XPCMessageDispatchTraits.readEncodedRequestType(from:)(uint64_t *a1)
{
  uint64_t result = sub_188354AA0(*a1, &v3);
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.sink(handlerValue:)(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = (void (*)(__int128 *))v1[2];
    uint64_t v4 = *(void *)(result + 16);
    __int128 v5 = *(_OWORD *)result;
    uint64_t v6 = v4;
    swift_retain();
    swift_retain();
    v3(&v5);
    return sub_188361AEC(v2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCMessageDispatchTraits.willDispatch(value:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 32);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.shouldPass(error:)(void *a1)
{
  if ((*(_BYTE *)(v1 + 64) & 1) != 0
    || (id v2 = a1,
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910),
        !swift_dynamicCast()))
  {
    char v3 = 0;
  }

  else
  {
    char v3 = v5 ^ 1;
  }

  return v3 & 1;
}

uint64_t XPCMessageDispatchTraits.didDispatch(value:result:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t *sub_188365A38@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)(a1, a2);
}

uint64_t sub_188365A4C(uint64_t *a1)
{
  return XPCMessageDispatchTraits.readEncodedRequestType(from:)(a1);
}

uint64_t sub_188365A60(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return XPCMessageDispatchTraits.encode<A>(value:into:)(a1, a2, a3, a3, a5);
}

uint64_t sub_188365A78()
{
  return XPCMessageDispatchTraits.decode<A>(encodedData:)();
}

uint64_t sub_188365AA8(uint64_t a1)
{
  return XPCMessageDispatchTraits.sink(handlerValue:)(a1);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.getter()
{
  uint64_t v0 = v4[4];
  uint64_t v1 = v4[6];
  uint64_t v2 = v5;
  sub_188361AEC(v4[0]);
  sub_188361B1C(v0);
  sub_188361B1C(v1);
  swift_release();
  swift_release();
  return v2;
}

void (*XPCMessageDispatcher.errorOnUnregisteredTypes.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  *((_BYTE *)v3 + 56) = XPCMessageDispatcher.errorOnUnregisteredTypes.getter() & 1;
  return sub_188365B94;
}

void sub_188365B94(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(_BYTE *)(*(void *)a1 + 56LL);
  swift_beginAccess();
  *(_BYTE *)(v1[6] + 80LL) = v2;
  free(v1);
}

uint64_t XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)a1;
  __int128 v15 = *(_OWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = CodableDispatcher.init()(a1);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v10 + 16) = v8;
  *(_OWORD *)(v10 + 24) = v15;
  *(void *)(v10 + 40) = v9;
  swift_retain();
  sub_188361AEC(v11);
  uint64_t v12 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a3;
  sub_1883646C8(a2);
  sub_188361B1C(v12);
  uint64_t v13 = *(void *)(v10 + 64);
  *(void *)(v10 + 64) = a4;
  *(void *)(v10 + 72) = a5;
  sub_188361B1C(v13);
  sub_188361B1C(a2);
  swift_release();
  return v10;
}

uint64_t sub_188365CD8(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }

  return result;
}

uint64_t sub_188365D08(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

unint64_t sub_188365D34()
{
  unint64_t result = qword_18C7085F0;
  if (!qword_18C7085F0)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCDispatchError,  &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_18C7085F0);
  }

  return result;
}

uint64_t sub_188365D78(uint64_t a1)
{
  return XPCObjectDecoder.decode<A>(_:from:)(*(void *)(v1 + 24), a1);
}

void XPCMessageDispatcher.__allocating_init()()
{
}

void XPCMessageDispatcher.init()()
{
}

uint64_t XPCMessageDispatcher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t XPCDispatchError.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t XPCDispatchError.rawValue.getter()
{
  return 0LL;
}

uint64_t sub_188365E18()
{
  return 1LL;
}

uint64_t sub_188365E20()
{
  return sub_188387268();
}

uint64_t sub_188365E60()
{
  return sub_188387250();
}

uint64_t sub_188365E84()
{
  return sub_188387268();
}

void *sub_188365EC0@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0LL;
  return result;
}

void sub_188365ED4(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_188365EDC()
{
  return sub_1883869A4();
}

uint64_t sub_188365F38()
{
  return sub_188386974();
}

uint64_t sub_188365F88()
{
  return sub_188387238();
}

void sub_188365FD4()
{
}

unint64_t sub_188366004()
{
  unint64_t result = qword_18C7085F8;
  if (!qword_18C7085F8)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCDispatchError,  &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_18C7085F8);
  }

  return result;
}

uint64_t sub_188366050()
{
  return 8LL;
}

void *sub_18836605C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_188366070()
{
  return 8LL;
}

uint64_t sub_18836607C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = XPCMessageDispatcher.errorOnUnregisteredTypes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1883660A8(char *a1)
{
  return XPCMessageDispatcher.errorOnUnregisteredTypes.setter(*a1);
}

uint64_t sub_1883660CC()
{
  return 8LL;
}

uint64_t destroy for XPCReplyProviding()
{
  return swift_release();
}

uint64_t initializeWithCopy for XPCReplyProviding(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for XPCReplyProviding(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCReplyProviding(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for XPCReplyProviding()
{
  return &type metadata for XPCReplyProviding;
}

uint64_t sub_1883661F8(void *a1)
{
  if (*a1)
  {
    swift_release();
    swift_release();
  }

  if (a1[4]) {
    swift_release();
  }
  if (a1[6]) {
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_188366258(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v4;
    swift_retain();
    swift_retain();
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }

  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  uint64_t v8 = *(void *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_188366328(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      uint64_t v6 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v6;
      swift_retain();
      swift_release();
    }

    else
    {
      sub_1883664C0(a1);
      __int128 v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
  }

  else if (v4)
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    swift_retain();
    swift_retain();
  }

  else
  {
    __int128 v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }

  uint64_t v11 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v11)
    {
      uint64_t v12 = a2[5];
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v11)
  {
    uint64_t v13 = a2[5];
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v13;
    swift_retain();
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_15:
  uint64_t v14 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v14)
    {
      uint64_t v16 = a2[7];
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v16;
      swift_retain();
      goto LABEL_22;
    }

LABEL_21:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_22;
  }

  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }

  uint64_t v15 = a2[7];
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  swift_retain();
  swift_release();
LABEL_22:
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

        __int128 v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      char v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_188344D58(v24, v35);
      }

      else
      {
        sub_188352244((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }

      sub_188387244();
      sub_1883868D8();
      uint64_t result = sub_188387268();
      uint64_t v25 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }

        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_188344D58(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

        uint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }

      uint64_t v25 = *(void *)(v6 + 72);
      uint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if ((v39 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v26, v5);
        sub_1883493F8(*(void *)(v9 + 56) + 8 * v21, (uint64_t)v40, &qword_18C707DE0);
      }

      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
        sub_188344D68(*(void *)(v9 + 56) + 8 * v21, (uint64_t)v40, &qword_18C707DE0);
      }

      sub_18838548C();
      uint64_t result = sub_1883867E8();
      uint64_t v27 = -1LL << *(_BYTE *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v16 + 8 * v29);
        }

        while (v33 == -1);
        uint64_t v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v25 * v19, v8, v5);
      uint64_t result = sub_1883493F8((uint64_t)v40, *(void *)(v11 + 56) + 8 * v19, &qword_18C707DE0);
      ++*(void *)(v11 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

    uint64_t v14 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if ((v42 & 1) != 0)
    {
      sub_188344D14(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }

    else
    {
      sub_1883731EC(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }

    sub_188387244();
    sub_18838662C();
    sub_18838548C();
    sub_1883867F4();
    swift_bridgeObjectRetain();
    sub_1883868D8();
    swift_bridgeObjectRelease();
    uint64_t result = sub_188387268();
    uint64_t v28 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = sub_188344D14((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }

  swift_release();
  uint64_t v3 = v37;
  uint64_t v22 = v39;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1LL << *(_BYTE *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v22 = -1LL << v35;
  }
  *(void *)(v8 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

        uint64_t v11 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }

      uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      uint64_t v20 = (__int128 *)(*(void *)(v5 + 56) + 40 * v15);
      if ((a2 & 1) != 0) {
        sub_188352384(v20, (uint64_t)v31);
      }
      else {
        sub_188349220((uint64_t)v20, (uint64_t)v31);
      }
      sub_188387244();
      sub_188387250();
      uint64_t result = sub_188387268();
      unint64_t v21 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v22 = result & ~v21;
      char v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            char v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = sub_188352384(v31, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1883664C0(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_188366514(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_release();
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      swift_release();
      goto LABEL_6;
    }

    sub_1883664C0(a1);
  }

  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      swift_release();
      goto LABEL_13;
    }

    swift_release();
  }

  else if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    goto LABEL_13;
  }

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_13:
  uint64_t v9 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v11;
      goto LABEL_20;
    }

uint64_t sub_188366644(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18836668C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for XPCMessageDispatchTraits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for XPCMessageDispatchTraits);
}

uint64_t sub_1883666F0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for XPCMessageDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCMessageDispatcher);
}

uint64_t method lookup function for XPCMessageDispatcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t getEnumTagSinglePayload for XPCDispatchError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for XPCDispatchError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1883667D8 + 4 * byte_188389A60[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1883667F8 + 4 * byte_188389A65[v4]))();
  }
}

_BYTE *sub_1883667D8(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_1883667F8(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_188366800(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_188366808(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_188366810(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_188366818(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_188366824()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for XPCDispatchError()
{
  return &type metadata for XPCDispatchError;
}

uint64_t sub_18836683C()
{
  return swift_deallocObject();
}

unint64_t sub_188366860()
{
  unint64_t result = qword_18C708600;
  if (!qword_18C708600)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCDispatchError,  &type metadata for XPCDispatchError);
    atomic_store(result, (unint64_t *)&qword_18C708600);
  }

  return result;
}

unint64_t sub_1883668A4()
{
  unint64_t result = qword_18C708608;
  if (!qword_18C708608)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618798], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C708608);
  }

  return result;
}

uint64_t Optional.withUnsafeMutablePointer<A>(_:)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v39 = a2;
  v41[1] = *MEMORY[0x1895F89C8];
  uint64_t v36 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x1895F8860](a1);
  char v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8860](v9);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8860](v13);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 16);
  uint64_t v37 = v22;
  v21(v15, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1LL, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a3);
    return a1(0LL);
  }

  else
  {
    uint64_t v34 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v35 = a5;
    uint64_t v24 = v34(v20, v15, v17);
    uint64_t v25 = MEMORY[0x1895F8860](v24);
    *(&v33 - 4) = v17;
    *(&v33 - 3) = a4;
    uint64_t v26 = v39;
    *(&v33 - 2) = (uint64_t)a1;
    *(&v33 - 1) = v26;
    MEMORY[0x1895F8860](v25);
    *(&v33 - 4) = v17;
    *(&v33 - 3) = a4;
    *(&v33 - 2) = (uint64_t)sub_188366E88;
    *(&v33 - 1) = v27;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    uint64_t v29 = v38;
    uint64_t v30 = v40;
    sub_188366DAC( (uint64_t)v20,  (uint64_t)sub_188366D98,  (uint64_t)(&v33 - 6),  v17,  v28,  a4,  MEMORY[0x18961A3E8],  (uint64_t)v41);
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }

    else
    {
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      uint64_t v32 = v37;
      v31((uint64_t)v37, a3);
      v34(v32, v20, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v32, 0LL, 1LL, v17);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v35, v29, a4);
    }
  }

uint64_t Optional.withUnsafePointer<A>(_:)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a5;
  v25[1] = *MEMORY[0x1895F89C8];
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](a1);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8860](v10);
  uint64_t v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v12, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1LL, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
    return a1(0LL);
  }

  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v12, v14);
    uint64_t v21 = MEMORY[0x1895F8860](v20);
    *(&v24 - 4) = v14;
    *(&v24 - 3) = a4;
    *(&v24 - 2) = (uint64_t)a1;
    *(&v24 - 1) = a2;
    MEMORY[0x1895F8860](v21);
    *(&v24 - 4) = v14;
    *(&v24 - 3) = a4;
    *(&v24 - 2) = (uint64_t)sub_188366E38;
    *(&v24 - 1) = v22;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    sub_188366DAC( (uint64_t)v17,  (uint64_t)sub_188366D98,  (uint64_t)(&v24 - 6),  v14,  v23,  a4,  MEMORY[0x18961A3E8],  (uint64_t)v25);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

uint64_t sub_188366D98(uint64_t a1, void *a2)
{
  return sub_188366E58(a1, a2);
}

uint64_t sub_188366DAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1895F8860](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_188366E38()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_188366E58(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t sub_188366E88()
{
  return sub_188366E38();
}

uint64_t MessageWrapper.init(value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = type metadata accessor for MessageWrapper(0LL, a2, a3, a4);
  uint64_t v9 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)a5 + *(int *)(v8 + 44), a1, a2);
  uint64_t v10 = sub_1883872E0();
  uint64_t v12 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a5 = v10;
  a5[1] = v12;
  return result;
}

uint64_t type metadata accessor for MessageWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageWrapper);
}

uint64_t sub_188366F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_willThrowTypedImpl();
}

BOOL static DispatchOutcome.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CodableDispatcher.init()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v2 + v7[14]) = 0;
  uint64_t v8 = *(void *)(*(void *)v2 + 120LL);
  uint64_t v9 = v7[12];
  type metadata accessor for CodableDispatcher.OperationInfo(255LL, v3, v7[11], v9);
  swift_getTupleTypeMetadata2();
  sub_1883869EC();
  *(void *)(v2 + v8) = sub_188386794();
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v3, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2 + *(void *)(*(void *)v2 + 104LL), v6, v3);
  return v2;
}

uint64_t CodableDispatcher.deinit()
{
  return v0;
}

uint64_t sub_188367124@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
}

uint64_t sub_188367188(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 40LL))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_1883671F4())()
{
  return j__swift_endAccess;
}

uint64_t sub_188367238()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 112LL));
}

uint64_t sub_188367248(uint64_t result)
{
  *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 112LL)) = result;
  return result;
}

uint64_t sub_188367258( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_188367440( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_188367280);
}

void sub_188367280( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *(void **)v11;
  if ((*(_BYTE *)(v11 + *(void *)(*(void *)v11 + 112LL)) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1883872E0();
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v12[10];
    v19[2] = v20;
    uint64_t v21 = v12[11];
    v19[3] = v21;
    void v19[4] = a4;
    v19[5] = a5;
    _BYTE v19[6] = a6;
    uint64_t v22 = v12[12];
    v19[7] = v22;
    v19[8] = a7;
    v19[9] = a8;
    v19[10] = a9;
    v19[11] = a10;
    v19[12] = a11;
    v19[13] = v18;
    v19[14] = a2;
    v19[15] = a3;
    swift_beginAccess();
    type metadata accessor for CodableDispatcher.OperationInfo(255LL, v20, v21, v22);
    sub_1883867AC();
    swift_retain();
    sub_1883867C4();
    swift_endAccess();
  }

uint64_t sub_188367418( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_188367440( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1883674D4);
}

uint64_t sub_188367440( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  unint64_t v17 = sub_1883619AC();
  return a9(v17, a1, a2, a3, a4, &type metadata for DispatcherErrorWrapper, a5, a6, a7, a8, v17);
}

void sub_1883674D4()
{
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 112LL)) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
    sub_1883619AC();
    type metadata accessor for CompositeDynamicCodableContainer();
  }

  __break(1u);
}

uint64_t sub_188367690()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  type metadata accessor for CodableDispatcher.OperationInfo(0LL, v1[10], v1[11], v1[12]);
  swift_bridgeObjectRetain();
  sub_1883872E0();
  uint64_t v2 = sub_1883867A0();
  MEMORY[0x1895C375C](MEMORY[0x189617858], v2);
  char v3 = sub_188386968();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_188367778()
{
}

uint64_t sub_188367818(uint64_t a1)
{
  *(void *)(v6 - 464) = a1;
  *(void *)(v6 - 472) = *(void *)(a1 - 8);
  MEMORY[0x1895F8860](a1);
  *(void *)(v6 - 480) = &v95[-v7];
  uint64_t v8 = v4[12];
  uint64_t v9 = v4[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_188386B24();
  *(void *)(v6 - 432) = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1895F8860](v11);
  *(void *)(v6 - 424) = &v95[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = MEMORY[0x1895F8860](v12);
  *(void *)(v6 - 416) = &v95[-v15];
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  *(void *)(v6 - 408) = &v95[-v17];
  *(void *)(v6 - 376) = AssociatedTypeWitness;
  *(void *)(v6 - 384) = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8860](v16);
  *(void *)(v6 - 456) = &v95[-v19];
  *(void *)(v6 - 328) = v2;
  *(void *)(v6 - 400) = *(void *)(v2 - 8);
  uint64_t v20 = MEMORY[0x1895F8860](v18);
  *(void *)(v6 - 336) = &v95[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = MEMORY[0x1895F8860](v20);
  *(void *)(v6 - 488) = &v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = MEMORY[0x1895F8860](v23);
  *(void *)(v6 - 496) = &v95[-v26];
  uint64_t v27 = MEMORY[0x1895F8860](v25);
  uint64_t v29 = &v95[-v28];
  MEMORY[0x1895F8860](v27);
  uint64_t v31 = &v95[-v30];
  uint64_t v32 = v4[13];
  *(void *)(v6 - 360) = v5;
  uint64_t v33 = v5 + v32;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v22 + 16))(v31, v33, v9);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 80);
  *(void *)(v6 - 392) = v8;
  LOBYTE(v33) = v34(v3, v9, v8);
  uint64_t v35 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  uint64_t v36 = v31;
  *(void *)(v6 - 368) = v35;
  v35(v31, v9);
  if ((v33 & 1) == 0)
  {
    *(void *)(v6 - 320) = v3;
    id v41 = v3;
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v43 = *(void *)(v6 - 384);
      uint64_t v44 = v6 - 176;
      uint64_t v45 = *(void *)(v6 - 432);
      if (*(_BYTE *)(v6 - 264) == 1) {
        goto LABEL_2;
      }
    }

    else
    {
      uint64_t v43 = *(void *)(v6 - 384);
      uint64_t v44 = v6 - 176;
      uint64_t v45 = *(void *)(v6 - 432);
    }

    *(void *)(v44 - 256) = v31;
    *(void *)(v6 - 320) = v3;
    unint64_t v46 = *(void (**)(uint64_t))(v1 + 56);
    id v47 = v3;
    v46(v6 - 320);
    uint64_t v48 = *(void (**)(uint64_t, void, uint64_t))(v45 + 16);
    uint64_t v49 = *(void *)(v6 - 416);
    v48(v49, *(void *)(v6 - 448), v11);
    uint64_t v50 = *(void *)(v6 - 424);
    v48(v50, *(void *)(v6 - 440), v11);
    uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    uint64_t v52 = *(void *)(v6 - 376);
    *(void *)(v6 - 440) = v51;
    if (v51(v49, 1LL, v52) == 1)
    {
      unint64_t v53 = *(uint64_t **)(v6 - 360);
      uint64_t v54 = *v53;
      uint64_t v55 = (uint64_t)v53 + *(void *)(*v53 + 104);
      swift_beginAccess();
      (*(void (**)(_BYTE *, uint64_t))(*(void *)(*(void *)(v54 + 80) - 8LL) + 16LL))(v29, v55);
      uint64_t v56 = v50;
      uint64_t v57 = *(void *)(v6 - 392);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v9, v57);
      (*(void (**)(_BYTE *, uint64_t))(v6 - 368))(v29, v9);
      unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v61(*(void *)(v6 - 424), v11);
      uint64_t v62 = *(void *)(v6 - 408);
      uint64_t v52 = *(void *)(v6 - 376);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v62, 0LL, 1LL, v52);
      v61(*(void *)(v6 - 416), v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 440))(v62, 1LL, v52) == 1)
      {
        v61(v62, v11);
        sub_188386A70();
        sub_18836E34C();
        char v63 = (void *)sub_188386B18();
        sub_18838668C();

        sub_18836E388(*(void *)(v6 - 352), v6 - 320);
        uint64_t v64 = *(uint64_t **)(v6 - 360);
        if (*(void *)(v6 - 296))
        {
          sub_18836E3D0((__int128 *)(v6 - 320), (_OWORD *)(v6 - 264));
          uint64_t v65 = *v64;
          uint64_t v66 = (uint64_t)v64 + *(void *)(*v64 + 104);
          swift_beginAccess();
          uint64_t v67 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v65 + 80) - 8LL) + 16LL);
          uint64_t v68 = *(void *)(v6 - 432);
          v67(v68, v66);
          *(void *)(v6 - 320) = v3;
          *(_BYTE *)(v6 - 272) = 1;
          uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 72);
          id v70 = v3;
          v69(v6 - 264, v6 - 320, v9, v57);
          sub_188344660(v6 - 320, (uint64_t *)&unk_18C4E7920);
          (*(void (**)(uint64_t, uint64_t))(v6 - 368))(v68, v9);
LABEL_19:
          __swift_destroy_boxed_opaque_existential_1Tm(v6 - 264);
          uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v6 - 400) + 8LL))( *(void *)(v6 - 336),  *(void *)(v6 - 328));
LABEL_21:
          unint64_t v58 = *(char **)(v6 - 344);
          char v59 = 1;
          goto LABEL_22;
        }

        goto LABEL_20;
      }

      *(void *)(v6 - 448) = v42;
      *(void *)(v6 - 440) = v3;
      unint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
    }

    else
    {
      *(void *)(v6 - 448) = v42;
      *(void *)(v6 - 440) = v3;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v50, v11);
      unint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
      uint64_t v62 = *(void *)(v6 - 408);
      v60(v62, v49, v52);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v62, 0LL, 1LL, v52);
      uint64_t v57 = *(void *)(v6 - 392);
    }

    id v71 = *(uint64_t **)(v6 - 360);
    uint64_t v72 = *(void *)(v6 - 456);
    v60(v72, v62, v52);
    uint64_t v73 = *v71;
    uint64_t v74 = (uint64_t)v71 + *(void *)(*v71 + 104);
    swift_beginAccess();
    int64_t v75 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v73 + 80) - 8LL) + 16LL);
    uint64_t v76 = *(void *)(v6 - 496);
    v75(v76, v74);
    uint64_t v77 = *(void *)(v6 - 480);
    (*(void (**)(uint64_t, void, void))(*(void *)(v6 - 400) + 16LL))( v77,  *(void *)(v6 - 336),  *(void *)(v6 - 328));
    uint64_t v78 = *(void *)(v6 - 464);
    swift_storeEnumTagMultiPayload();
    __int128 v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 48);
    uint64_t v80 = MEMORY[0x1895C375C](&protocol conformance descriptor for DispatcherResponse<A, B>, v78);
    uint64_t v81 = MEMORY[0x1895C375C](&protocol conformance descriptor for DispatcherResponse<A, B>, v78);
    v79(v77, v72, v78, v80, v81, v9, v57);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 472) + 8LL))(v77, v78);
    v82 = *(void (**)(uint64_t, uint64_t))(v6 - 368);
    v82(v76, v9);
    uint64_t v83 = *v71;
    uint64_t v84 = (uint64_t)v71 + *(void *)(*v71 + 104);
    swift_beginAccess();
    unint64_t v85 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v83 + 80) - 8LL) + 16LL);
    uint64_t v86 = *(void *)(v6 - 488);
    v85(v86, v84);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 96))(v72, v9, v57);
    uint64_t v87 = *(void *)(v6 - 352);
    v82(v86, v9);
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 384) + 8LL))(v72, *(void *)(v6 - 376));
    sub_18836E388(v87, v6 - 320);
    if (*(void *)(v6 - 296))
    {
      sub_18836E3D0((__int128 *)(v6 - 320), (_OWORD *)(v6 - 264));
      uint64_t v88 = *v71;
      uint64_t v89 = (uint64_t)v71 + *(void *)(*v71 + 104);
      swift_beginAccess();
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v88 + 80) - 8LL) + 16LL);
      uint64_t v91 = *(void *)(v6 - 432);
      v90(v91, v89);
      unint64_t v92 = *(void **)(v6 - 440);
      *(void *)(v6 - 320) = v92;
      *(_BYTE *)(v6 - 272) = 1;
      char v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 72);
      id v94 = v92;
      v93(v6 - 264, v6 - 320, v9, v57);
      sub_188344660(v6 - 320, (uint64_t *)&unk_18C4E7920);
      v82(v91, v9);
      goto LABEL_19;
    }

LABEL_20:
    (*(void (**)(void, void))(*(void *)(v6 - 400) + 8LL))(*(void *)(v6 - 336), *(void *)(v6 - 328));
    uint64_t result = sub_188344660(v6 - 320, &qword_18C7088D0);
    goto LABEL_21;
  }

LABEL_2:
  sub_18836E388(*(void *)(v6 - 352), v6 - 264);
  if (*(void *)(v6 - 240))
  {
    sub_18836E3D0((__int128 *)(v6 - 264), (_OWORD *)(v6 - 320));
    uint64_t v37 = *(uint64_t **)(v6 - 360);
    uint64_t v38 = *v37;
    uint64_t v39 = (uint64_t)v37 + *(void *)(*v37 + 104);
    swift_beginAccess();
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(*(void *)(v38 + 80) - 8LL) + 16LL))(v36, v39);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 392) + 88LL))(v6 - 320, v9);
    (*(void (**)(_BYTE *, uint64_t))(v6 - 368))(v36, v9);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v6 - 320);
  }

  else
  {
    uint64_t result = sub_188344660(v6 - 264, &qword_18C7088D0);
  }

  unint64_t v58 = *(char **)(v6 - 344);
  char v59 = 0;
LABEL_22:
  *unint64_t v58 = v59;
  return result;
}

uint64_t sub_188368330(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v50 = a4;
  uint64_t v52 = a3;
  uint64_t v45 = a2;
  uint64_t v53 = a1;
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 96);
  uint64_t v8 = *(void *)(*v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = sub_188386B24();
  uint64_t v46 = *(void *)(v47 - 8);
  uint64_t v9 = MEMORY[0x1895F8860](v47);
  uint64_t v49 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8860](v9);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x1895F8860](v11);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v15);
  uint64_t v19 = (char *)&v44 - v18;
  *((_BYTE *)v5 + *(void *)(v6 + 112)) = 1;
  uint64_t v20 = *v5;
  uint64_t v21 = (uint64_t)v5 + *(void *)(*v5 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v20 + 80) - 8LL) + 16LL))(v19, v21);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  uint64_t v51 = v7;
  LOBYTE(v21) = v22(v53, v8, v7);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t result = v23(v19, v8);
  if ((v21 & 1) != 0)
  {
    uint64_t v44 = v13;
    uint64_t v25 = *v5;
    uint64_t v26 = (uint64_t)v5 + *(void *)(*v5 + 104);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v25 + 80) - 8LL) + 16LL))(v17, v26);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 40))(v53, v8);
    uint64_t v30 = v17;
    uint64_t v32 = v31;
    v23(v30, v8);
    uint64_t v33 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 120));
    swift_beginAccess();
    uint64_t v34 = *v33;
    v54[0] = v29;
    v54[1] = v32;
    uint64_t v35 = type metadata accessor for CodableDispatcher.OperationInfo(0LL, v8, *(void *)(v6 + 88), v51);
    swift_bridgeObjectRetain();
    MEMORY[0x1895C258C](v55, v54, v34, MEMORY[0x189617FA8], v35, MEMORY[0x189617FB8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, char *(*)(char *), uint64_t))&v55[0];
    uint64_t v37 = v49;
    uint64_t v38 = v44;
    uint64_t v39 = AssociatedTypeWitness;
    if (!*(void *)&v55[0])
    {
      sub_18836C554();
      swift_allocError();
      *uint64_t v43 = 0;
      swift_willThrow();
      memset(v55, 0, 48);
      uint64_t v27 = *(void *)(v39 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v38, v53, v39);
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v28(v38, 0LL, 1LL, v39);
      v28(v37, 1LL, 1LL, v39);
      sub_1883619AC();
      sub_188367778();
    }

    uint64_t v40 = swift_allocObject();
    uint64_t v41 = (uint64_t)v52;
    uint64_t v42 = v50;
    *(void *)(v40 + 16) = v52;
    *(void *)(v40 + 24) = v42;
    sub_1883646C8((uint64_t)v36);
    sub_1883646C8(v41);
    v36(v53, v45, sub_18836C5C4, v40);
    swift_release();
    sub_188361B1C((uint64_t)v36);
    return sub_188361B1C((uint64_t)v36);
  }

  else if (v52)
  {
    LOBYTE(v55[0]) = 0;
    return v52(v55);
  }

  return result;
}

uint64_t sub_1883687E8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, void (*)(uint64_t a1), char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v129 = a7;
  uint64_t v128 = a6;
  uint64_t v106 = a5;
  uint64_t v107 = a4;
  uint64_t v104 = a3;
  uint64_t v105 = a2;
  uint64_t v140 = a1;
  uint64_t v127 = a15;
  uint64_t v126 = a10;
  uint64_t v17 = *v15;
  uint64_t v138 = *(void *)(*v15 + 96);
  uint64_t v103 = v17;
  uint64_t v141 = *(void *)(v17 + 80);
  uint64_t v18 = v141;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v101 = *(void *)(v20 + 64);
  MEMORY[0x1895F8860](AssociatedTypeWitness);
  v102 = (char *)&v100 - v21;
  uint64_t v22 = sub_188386B24();
  uint64_t v133 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8860](v22);
  v122 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8860](v23);
  uint64_t v112 = (char *)&v100 - v26;
  MEMORY[0x1895F8860](v25);
  v110 = (char *)&v100 - v27;
  uint64_t v136 = a11;
  uint64_t v116 = a12;
  uint64_t v115 = type metadata accessor for MessageWrapper(0LL, a8, a11, a12);
  uint64_t v109 = *(void *)(v115 - 8);
  uint64_t v28 = MEMORY[0x1895F8860](v115);
  uint64_t v114 = (char *)&v100 - v29;
  uint64_t v130 = *(void *)(v18 - 8);
  uint64_t v30 = MEMORY[0x1895F8860](v28);
  uint64_t v111 = (char *)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = MEMORY[0x1895F8860](v30);
  char v113 = (char *)&v100 - v33;
  MEMORY[0x1895F8860](v32);
  uint64_t v35 = (char *)&v100 - v34;
  uint64_t v36 = sub_188386B24();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x1895F8860](v36);
  v121 = (char *)&v100 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = MEMORY[0x1895F8860](v38);
  uint64_t v120 = (char *)&v100 - v41;
  uint64_t v42 = MEMORY[0x1895F8860](v40);
  uint64_t v44 = (char *)&v100 - v43;
  MEMORY[0x1895F8860](v42);
  uint64_t v46 = (char *)&v100 - v45;
  uint64_t v134 = v22;
  uint64_t v125 = swift_allocBox();
  uint64_t v135 = *(void *)(a8 - 8);
  uint64_t v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56);
  uint64_t v132 = v48;
  uint64_t v137 = a8;
  uint64_t v108 = v47;
  v47(v48, 1LL, 1LL, a8);
  uint64_t v131 = v36;
  uint64_t v124 = swift_allocBox();
  uint64_t v50 = v49;
  uint64_t v51 = v20;
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v52(v49, 1LL, 1LL, AssociatedTypeWitness);
  uint64_t v53 = *v139;
  uint64_t v54 = (uint64_t)v139 + *(void *)(*v139 + 104);
  swift_beginAccess();
  uint64_t v55 = *(void *)(v53 + 80);
  uint64_t v56 = v140;
  (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 16LL))(v35, v54);
  uint64_t v123 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  v123(v44, v56, AssociatedTypeWitness);
  v52((uint64_t)v44, 0LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v138 + 32))(v44, v141);
  uint64_t v119 = v37;
  uint64_t v118 = v50;
  uint64_t v117 = v52;
  uint64_t v100 = v51;
  uint64_t v57 = v44;
  uint64_t v58 = v131;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v57, v131);
  uint64_t v130 = *(void *)(v130 + 8);
  ((void (*)(char *, uint64_t))v130)(v35, v141);
  v52((uint64_t)v46, 0LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v50, v46, v58);
  char v59 = v139;
  uint64_t v60 = *v139;
  uint64_t v61 = (uint64_t)v139 + *(void *)(*v139 + 104);
  swift_beginAccess();
  uint64_t v62 = v113;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v60 + 80) - 8LL) + 16LL))(v113, v61);
  uint64_t v63 = v138;
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
  uint64_t v65 = v115;
  uint64_t v66 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v115);
  v64(v140, v65, v66, v141, v63);
  uint64_t v67 = v59;
  uint64_t v131 = AssociatedTypeWitness;
  uint64_t v68 = v141;
  uint64_t v69 = (void (*)(char *, uint64_t))v130;
  ((void (*)(char *, uint64_t))v130)(v62, v141);
  uint64_t v70 = v115;
  id v71 = v114;
  uint64_t v72 = v135;
  uint64_t v73 = v110;
  uint64_t v74 = v137;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v110, &v114[*(int *)(v115 + 44)], v137);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v71, v70);
  v108(v73, 0LL, 1LL, v74);
  uint64_t v75 = v133;
  uint64_t v76 = v132;
  uint64_t v77 = v134;
  (*(void (**)(char *, char *, uint64_t))(v133 + 40))(v132, v73, v134);
  uint64_t v78 = *v67;
  uint64_t v79 = (uint64_t)v67 + *(void *)(*v67 + 104);
  swift_beginAccess();
  uint64_t v80 = *(void (**)(char *, uint64_t))(*(void *)(*(void *)(v78 + 80) - 8LL) + 16LL);
  uint64_t v81 = v111;
  v80(v111, v79);
  *((void *)&v145 + 1) = v77;
  uint64_t v143 = v136;
  uint64_t v146 = MEMORY[0x1895C375C](MEMORY[0x18961AFA8], v77, &v143);
  uint64_t v142 = v116;
  uint64_t v147 = MEMORY[0x1895C375C](MEMORY[0x18961AF98], v77, &v142);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v144);
  uint64_t v83 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v75 + 16);
  v83(boxed_opaque_existential_0Tm, (uint64_t)v76, v77);
  (*(void (**)(__int128 *, uint64_t))(v138 + 64))(&v144, v68);
  v69(v81, v68);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v144);
  uint64_t v84 = v112;
  v83((uint64_t *)v112, (uint64_t)v76, v77);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48))(v84, 1LL, v74);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v86 = swift_allocObject();
    swift_weakInit();
    uint64_t v87 = v102;
    uint64_t v88 = v131;
    v123(v102, v140, v131);
    uint64_t v89 = v100;
    unint64_t v90 = (*(unsigned __int8 *)(v100 + 80) + 144LL) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    unint64_t v91 = (v101 + v90 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v92 = (char *)swift_allocObject();
    *((void *)v92 + 2) = v141;
    uint64_t v93 = v137;
    *((void *)v92 + 3) = *(void *)(v103 + 88);
    *((void *)v92 + 4) = v93;
    uint64_t v94 = v126;
    *((void *)v92 + 5) = a9;
    *((void *)v92 + 6) = v94;
    uint64_t v95 = v136;
    *((void *)v92 + 7) = v138;
    *((void *)v92 + 8) = v95;
    *((void *)v92 + 9) = v116;
    *((void *)v92 + 10) = a13;
    uint64_t v96 = v127;
    *((void *)v92 + 11) = a14;
    *((void *)v92 + 12) = v96;
    uint64_t v97 = v124;
    *((void *)v92 + 13) = v86;
    *((void *)v92 + 14) = v97;
    uint64_t v98 = v128;
    *((void *)v92 + 15) = v125;
    *((void *)v92 + 16) = v98;
    *((void *)v92 + 17) = v129;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v92[v90], v87, v88);
    *(void *)&v92[v91] = v104;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v99 = v112;
    v107(v112, v105, sub_18836E1E0, v92);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v99, v137);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_188369300(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v61 = a4;
  id v71 = a3;
  uint64_t v57 = a2;
  uint64_t v75 = a1;
  uint64_t v7 = (void *)*v5;
  uint64_t v72 = *(void *)(a5 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v64 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = v9;
  uint64_t v73 = v10;
  uint64_t v74 = v11;
  uint64_t v60 = type metadata accessor for MessageWrapper(0LL, v9, v10, v11);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1895F8860](v60);
  uint64_t v58 = (uint64_t *)((char *)&v54 - v12);
  uint64_t v13 = v7[12];
  uint64_t v14 = v7[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_188386B24();
  uint64_t v68 = *(void **)(v16 - 8);
  uint64_t v17 = MEMORY[0x1895F8860](v16);
  uint64_t v66 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8860](v17);
  uint64_t v78 = (char *)&v54 - v20;
  uint64_t v21 = MEMORY[0x1895F8860](v19);
  uint64_t v67 = (char *)&v54 - v22;
  uint64_t v23 = MEMORY[0x1895F8860](v21);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v26 = *(void *)(v14 - 8);
  uint64_t v27 = MEMORY[0x1895F8860](v23);
  uint64_t v77 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8860](v27);
  uint64_t v62 = (char *)&v54 - v30;
  uint64_t v31 = MEMORY[0x1895F8860](v29);
  uint64_t v33 = (char *)&v54 - v32;
  MEMORY[0x1895F8860](v31);
  uint64_t v35 = (char *)&v54 - v34;
  uint64_t v36 = v7[13];
  uint64_t v70 = v6;
  uint64_t v37 = (char *)v6 + v36;
  uint64_t v39 = v38;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v33, v37, v14);
  uint64_t v40 = *(void (**)(void, void, void, void))(v39 + 56);
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v76 = v40;
  v40(v25, 1LL, 1LL, AssociatedTypeWitness);
  uint64_t v41 = *(void (**)(void, void, void))(v13 + 32);
  uint64_t v63 = v35;
  uint64_t v65 = v41;
  v41(v25, v14, v13);
  uint64_t v56 = v39;
  uint64_t v42 = (void *)v68[1];
  uint64_t v54 = v16;
  uint64_t v68 = v42;
  ((void (*)(char *, uint64_t))v42)(v25, v16);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v26 + 8);
  v55(v33, v14);
  uint64_t v43 = *v70;
  uint64_t v44 = (uint64_t)v70 + *(void *)(*v70 + 104LL);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v43 + 80) - 8LL) + 16LL))(v62, v44);
  uint64_t v45 = (uint64_t)v64;
  uint64_t v46 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v64, v75, v69);
  uint64_t v47 = v58;
  MessageWrapper.init(value:)(v45, v46, v73, v74, v58);
  uint64_t v48 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v49 = v60;
  uint64_t v50 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v60);
  uint64_t v51 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v49);
  v48(v47, v63, v49, v50, v51, v14, v13);
  uint64_t v64 = 0LL;
  (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v47, v49);
  v55(v62, v14);
  uint64_t v52 = (uint64_t)v63;
  sub_188368330((uint64_t)v63, v57, v71, v61);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v52, v79);
}

uint64_t sub_188369A4C()
{
  return 0LL;
}

uint64_t sub_188369A58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_188369A84(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_188369A90()
{
  return sub_1883872C8();
}

uint64_t sub_188369AB8()
{
  return sub_1883872D4();
}

uint64_t UnknownResultType.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708618);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18836C600();
  sub_1883872A4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t UnknownResultType.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_188369BC8(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_188369BEC(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708618);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18836C600();
  sub_1883872A4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t MessageHeader.mangledTypeName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18836C644();
  sub_188387298();
  if (!v2)
  {
    char v14 = 0;
    uint64_t v9 = sub_188386D34();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_188369E00@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return MessageHeader.init(from:)(a1, a2);
}

uint64_t MessageWrapper.mangledTypeName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 44));
}

uint64_t MessageWrapper.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8350);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18836C644();
  sub_1883872A4();
  char v10 = 0;
  sub_188386DB8();
  if (!v1)
  {
    char v9 = 1;
    sub_188386DE8();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MessageWrapper.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v24 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v27 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B8);
  uint64_t v26 = *(void *)(v30 - 8);
  MEMORY[0x1895F8860](v30);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = a3;
  uint64_t v12 = type metadata accessor for MessageWrapper(0LL, a2, a3, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8860](v12);
  uint64_t v15 = (uint64_t *)((char *)&v22 - v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18836C644();
  uint64_t v29 = v11;
  uint64_t v16 = (uint64_t)v31;
  sub_188387298();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v17 = v26;
  uint64_t v18 = v27;
  uint64_t v31 = a1;
  uint64_t v23 = v13;
  char v33 = 0;
  *uint64_t v15 = sub_188386D34();
  v15[1] = v19;
  char v32 = 1;
  sub_188386D64();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v30);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v15 + *(int *)(v12 + 44), v18, a2);
  uint64_t v20 = v23;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v23 + 16))(v25, v15, v12);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 8))(v15, v12);
}

uint64_t sub_18836A1E0()
{
  uint64_t v0 = sub_188386D10();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18836A230(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x726F727265LL;
  }
  else {
    return 0x65736E6F70736572LL;
  }
}

uint64_t sub_18836A264@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MessageWrapper.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_18836A284(void *a1)
{
  return MessageWrapper.encode(to:)(a1);
}

uint64_t sub_18836A298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188387034();
}

uint64_t sub_18836A2EC(uint64_t a1)
{
  return sub_188386980();
}

uint64_t sub_18836A338()
{
  return sub_188386998();
}

uint64_t sub_18836A388()
{
  return sub_18838698C();
}

uint64_t sub_18836A3D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_18836A1E0();
  *a1 = result;
  return result;
}

uint64_t sub_18836A404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18836A230(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18836A42C()
{
  return sub_18836A230(*v0);
}

uint64_t sub_18836A434@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_18836A1E0();
  *a1 = result;
  return result;
}

uint64_t sub_18836A458@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_18836E06C();
  *a1 = result;
  return result;
}

uint64_t sub_18836A48C(uint64_t a1)
{
  return sub_1883872C8();
}

uint64_t sub_18836A4C0(uint64_t a1)
{
  return sub_1883872D4();
}

void DispatcherResponse.init(from:)( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v19 = a7;
  uint64_t v17 = sub_188386B24();
  uint64_t v21 = *(void *)(v17 - 8);
  uint64_t v13 = MEMORY[0x1895F8860](v17);
  uint64_t v22 = &v16[-v14];
  uint64_t v20 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](v13);
  uint64_t v18 = &v16[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  type metadata accessor for DispatcherResponse.CodingKeys();
}

void sub_18836A5C4(uint64_t a1)
{
  *(void *)(v7 - 144) = MEMORY[0x1895C375C](&unk_18838A328, a1);
  uint64_t v8 = sub_188386D94();
  *(void *)(v7 - 224) = *(void *)(v8 - 8);
  *(void *)(v7 - 216) = v8;
  MEMORY[0x1895F8860](v8);
  *(void *)(v7 - 192) = v6;
  *(void *)(v7 - 184) = v5;
  *(void *)(v7 - 136) = v6;
  *(void *)(v7 - 128) = v1;
  *(void *)(v7 - 176) = v4;
  *(void *)(v7 - 168) = v1;
  *(void *)(v7 - 120) = v5;
  *(void *)(v7 - 112) = v3;
  *(void *)(v7 - 104) = v4;
  *(void *)(v7 - 96) = v2;
  type metadata accessor for DispatcherResponse();
}

uint64_t sub_18836A638(uint64_t a1)
{
  *(void *)(v3 - 240) = a1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](a1);
  uint64_t v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8860](v5);
  uint64_t v9 = &v26[-v8];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(void *)(v3 - 152) = v2;
  uint64_t v10 = *(void *)(v3 - 72);
  sub_188387298();
  if (v10)
  {
    uint64_t v16 = (uint64_t)v1;
  }

  else
  {
    *(void *)(v3 - 272) = v7;
    uint64_t v11 = *(void *)(v3 - 224);
    *(void *)(v3 - 264) = v4;
    uint64_t v12 = *(void *)(v3 - 208);
    uint64_t v13 = *(void *)(v3 - 200);
    *(void *)(v3 - 144) = v9;
    *(void *)(v3 - 72) = v1;
    *(_BYTE *)(v3 - 136) = 1;
    uint64_t v14 = *(void *)(v3 - 168);
    uint64_t v15 = *(void *)(v3 - 216);
    sub_188386D1C();
    uint64_t v18 = *(void *)(v3 - 152);
    if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v12 + 48))(*(void *)(v3 - 160), 1LL, v14) == 1)
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v3 - 160), *(void *)(v3 - 256));
      *(_BYTE *)(v3 - 136) = 0;
      uint64_t v19 = *(void *)(v3 - 272);
      sub_188386D64();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v18, v15);
      uint64_t v22 = *(void *)(v3 - 240);
      swift_storeEnumTagMultiPayload();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 264) + 32LL);
      uint64_t v24 = *(void *)(v3 - 144);
      v23(v24, v19, v22);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v18, v15);
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
      uint64_t v21 = *(void *)(v3 - 248);
      v20(v21, *(void *)(v3 - 160), v14);
      uint64_t v24 = *(void *)(v3 - 144);
      v20(v24, v21, v14);
      uint64_t v22 = *(void *)(v3 - 240);
      swift_storeEnumTagMultiPayload();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 264) + 32LL);
    }

    uint64_t v25 = *(void *)(v3 - 72);
    v23(*(void *)(v3 - 232), v24, v22);
    uint64_t v16 = v25;
  }

  return __swift_destroy_boxed_opaque_existential_1Tm(v16);
}

void DispatcherResponse.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *(void *)(*(void *)(a2 + 16) - 8LL);
  uint64_t v2 = MEMORY[0x1895F8860](a1);
  uint64_t v17 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(*(void *)(v4 + 24) - 8LL);
  uint64_t v5 = MEMORY[0x1895F8860](v2);
  uint64_t v14 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v19 = v10;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  uint64_t v16 = v11;
  uint64_t v22 = v8;
  __int128 v12 = *(_OWORD *)(v7 + 40);
  __int128 v23 = v12;
  uint64_t v13 = v9;
  uint64_t v24 = v9;
  type metadata accessor for DispatcherResponse.CodingKeys();
}

uint64_t sub_18836A990(uint64_t a1)
{
  uint64_t v6 = sub_188386E0C();
  *(void *)(v5 - 144) = *(void *)(v6 - 8);
  *(void *)(v5 - 136) = v6;
  MEMORY[0x1895F8860](v6);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1883872A4();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, *(void *)(v5 - 152), v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v5 - 176);
    uint64_t v9 = *(void *)(v5 - 168);
    uint64_t v11 = *(void *)(v5 - 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v1, v11);
    *(_BYTE *)(v5 - 128) = 0;
    uint64_t v12 = *(void *)(v5 - 136);
    sub_188386DE8();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 144) + 8LL))(v8, v12);
  }

  else
  {
    uint64_t v15 = *(void *)(v5 - 200);
    uint64_t v14 = *(void *)(v5 - 192);
    uint64_t v16 = *(void *)(v5 - 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v1, v16);
    *(_BYTE *)(v5 - 128) = 1;
    uint64_t v17 = *(void *)(v5 - 136);
    sub_188386DE8();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 144) + 8LL))(v8, v17);
  }

void sub_18836AB40(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
}

  ;
}

void sub_18836AB64(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t CodableDispatchTraits.shouldPass(error:)()
{
  return 0LL;
}

uint64_t DispatchOutcome.hash(into:)()
{
  return sub_188387250();
}

uint64_t DispatchOutcome.hashValue.getter()
{
  return sub_188387268();
}

BOOL sub_18836ABF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Mercury::CodableDispatcherError_optional __swiftcall CodableDispatcherError.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (Mercury::CodableDispatcherError_optional)rawValue;
}

uint64_t CodableDispatcherError.rawValue.getter()
{
  return *v0;
}

void *sub_18836AC30@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_18836AC50(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_18836AC5C()
{
  return sub_188387238();
}

uint64_t sub_18836ACA0()
{
  return sub_1883869A4();
}

uint64_t sub_18836ACFC()
{
  return sub_188386974();
}

unint64_t sub_18836AD48()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1883883A0;
  unint64_t v1 = sub_18836DFE4();
  unint64_t result = sub_18836E028();
  *(void *)(v0 + 32) = &type metadata for CodableDispatcherError;
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = result;
  qword_18C70B4A0 = v0;
  return result;
}

uint64_t sub_18836ADAC()
{
  uint64_t result = swift_allocError();
  *unint64_t v1 = 0;
  qword_18C70B4A8 = result;
  return result;
}

uint64_t sub_18836ADE4()
{
  if (qword_18C7079A8 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

id sub_18836AE24@<X0>(void *a1@<X8>)
{
  if (qword_18C7079B0 != -1) {
    swift_once();
  }
  char v2 = (void *)qword_18C70B4A8;
  *a1 = qword_18C70B4A8;
  return v2;
}

id sub_18836AE74@<X0>(void **a1@<X8>)
{
  char v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_18836AE80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_18836C1B8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_18836AEA8(void *a1)
{
  return sub_18836AEC0(a1, *v1);
}

uint64_t sub_18836AEC0(void *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8350);
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x1895F8860](v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v7 = sub_18836C644();
  char v32 = v6;
  v29[1] = v7;
  sub_1883872A4();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  uint64_t v37 = v8;
  v36[0] = a2;
  __swift_project_boxed_opaque_existential_1(v36, v8);
  swift_getDynamicType();
  id v9 = a2;
  id v10 = a2;
  uint64_t v11 = sub_1883872E0();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
  if (qword_18C7079A8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(qword_18C70B4A0 + 16);
  if (v14)
  {
    uint64_t v30 = v4;
    swift_bridgeObjectRetain();
    uint64_t v15 = 32LL;
    while (sub_1883872E0() != v11 || v16 != v13)
    {
      char v18 = sub_188386FD4();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0) {
        goto LABEL_18;
      }
      v15 += 24LL;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v30;
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v4 = v30;
    uint64_t v20 = v32;
  }

  else
  {
LABEL_12:
    if (qword_18C7079B0 != -1) {
      swift_once();
    }
    uint64_t v19 = (void *)qword_18C70B4A8;
    uint64_t v20 = v32;
    if (!qword_18C70B4A8)
    {
      sub_18836E074();
      swift_allocError();
      *(void *)uint64_t v23 = v11;
      *(void *)(v23 + 8) = v13;
      *(_BYTE *)(v23 + 40) = 0;
      swift_willThrow();

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
    }

    id v21 = (id)qword_18C70B4A8;
    swift_bridgeObjectRelease();
    uint64_t v37 = v8;
    v36[0] = v19;
    __swift_project_boxed_opaque_existential_1(v36, v8);
    swift_getDynamicType();
    id v22 = v19;
    sub_1883872E0();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
    a2 = v19;
  }

  uint64_t v38 = a2;
  id v24 = a2;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708708);
  if (!swift_dynamicCast())
  {
    uint64_t v35 = 0LL;
    memset(v34, 0, sizeof(v34));
    swift_bridgeObjectRelease();
    sub_188344660((uint64_t)v34, &qword_18C708710);
    sub_18836E074();
    swift_allocError();
    *(void *)uint64_t v27 = a2;
    *(void *)(v27 + 24) = v8;
    *(void *)(v27 + 32) = v25;
    *(_BYTE *)(v27 + 40) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  }

  sub_188352384(v34, (uint64_t)v36);
  LOBYTE(v34[0]) = 0;
  uint64_t v26 = v31;
  sub_188386DB8();
  swift_bridgeObjectRelease();
  if (!v26)
  {
    __swift_project_boxed_opaque_existential_1(v36, v37);
    LOBYTE(v34[0]) = 1;
    sub_18837FA54();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
}

uint64_t sub_18836B2E4(uint64_t a1)
{
  uint64_t v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return sub_188367188((uint64_t)v2);
}

uint64_t CodableDispatcher.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CodableDispatcher.init()(v0);
  return v0;
}

uint64_t sub_18836B38C()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
    sub_1883619AC();
    type metadata accessor for CompositeDynamicCodableContainer();
  }

  return result;
}

uint64_t sub_18836B4BC( uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v22[1] = a4;
  uint64_t v23 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
  uint64_t v13 = sub_188387274();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8860](v13);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = *(void *)(a10 - 8);
  MEMORY[0x1895F8860](v15);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a5(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v20, a10);
  swift_storeEnumTagMultiPayload();
  v23(v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a10);
}

char *sub_18836B638(char *result, uint64_t (*a2)(char *))
{
  if (a2)
  {
    char v2 = *result;
    return (char *)a2(&v2);
  }

  return result;
}

void sub_18836B670( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  v32[22] = a7;
  v32[28] = a6;
  v32[29] = a5;
  v32[35] = a4;
  v32[31] = a1;
  v32[25] = a11;
  uint64_t v19 = sub_188386B24();
  v32[26] = *(void *)(v19 - 8);
  v32[27] = v19;
  MEMORY[0x1895F8860](v19);
  v32[19] = (char *)v32 - v20;
  v32[15] = a14;
  v32[30] = swift_getAssociatedTypeWitness();
  uint64_t v21 = sub_188386B24();
  v32[33] = *(void *)(v21 - 8);
  v32[34] = v21;
  uint64_t v22 = MEMORY[0x1895F8860](v21);
  v32[21] = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = MEMORY[0x1895F8860](v22);
  v32[20] = (char *)v32 - v25;
  uint64_t v26 = MEMORY[0x1895F8860](v24);
  v32[11] = (char *)v32 - v27;
  v32[32] = a9;
  v32[14] = *(void *)(a9 - 8);
  uint64_t v28 = MEMORY[0x1895F8860](v26);
  v32[7] = (char *)v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = MEMORY[0x1895F8860](v28);
  v32[10] = (char *)v32 - v31;
  MEMORY[0x1895F8860](v30);
  v32[36] = a12;
  v32[37] = a13;
  v32[23] = a13;
  v32[24] = a19;
  v32[8] = a17;
  v32[9] = a18;
  v32[38] = a17;
  v32[39] = a18;
  __int128 v33 = *(_OWORD *)(a19 + 8);
  type metadata accessor for DispatcherResponse();
}

uint64_t sub_18836B83C(uint64_t a1)
{
  *(void *)(v1 + 104) = *(void *)(a1 - 8);
  MEMORY[0x1895F8860](a1);
  *(void *)(v1 + 128) = &v51[-v6];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4E7910);
  uint64_t v7 = sub_188387274();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8860](v7);
  uint64_t v11 = &v51[-v10];
  *(void *)(v1 + 136) = *(void *)(v3 - 8);
  *(void *)(v1 + 144) = v3;
  MEMORY[0x1895F8860](v9);
  uint64_t v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = swift_projectBox();
  *(void *)(v1 + 280) = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    *(void *)(v1 + 32) = a1;
    *(void *)(v1 + 48) = *(void *)(v4 + 72);
    *(void *)(v1 + 40) = *(void *)(v4 + 64);
    (*(void (**)(_BYTE *, void, uint64_t))(v8 + 16))(v11, *(void *)(v1 + 248), v7);
    sub_188366F28(v7, v1 + 288, (uint64_t)v13);
    *(void *)(v1 + 96) = v16;
    uint64_t v17 = *(void *)(v1 + 144);
    uint64_t v18 = *(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v1 + 136) + 16LL);
    uint64_t v19 = v14;
    uint64_t v20 = *(void *)(v1 + 128);
    *(void *)(v1 + 24) = v13;
    *(void *)uint64_t v1 = v18;
    v18(v20, v13, v17);
    uint64_t v21 = *(void *)(v1 + 32);
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = *(void *)v16;
    uint64_t v23 = v16 + *(void *)(*(void *)v16 + 104LL);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v22 + 80) - 8LL) + 16LL))(v2, v23);
    swift_beginAccess();
    uint64_t v24 = *(void *)(v1 + 240);
    uint64_t v25 = *(void *)(v24 - 8);
    *(void *)(v1 + 8) = v25;
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    *(void *)(v1 + 248) = v19;
    *(void *)(v1 + 16) = v26;
    uint64_t result = v26(v19, 1LL, v24);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v27 = *(void *)(v1 + 120);
      uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t))(v27 + 48);
      uint64_t v29 = MEMORY[0x1895C375C](&protocol conformance descriptor for DispatcherResponse<A, B>, v21);
      uint64_t v30 = MEMORY[0x1895C375C](&protocol conformance descriptor for DispatcherResponse<A, B>, v21);
      v28(v20, *(void *)(v1 + 248), v21, v29, v30, *(void *)(v1 + 256), v27);
      swift_endAccess();
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 112) + 8LL);
      uint64_t v32 = *(void *)(v1 + 256);
      *(void *)(v1 + 112) = v31;
      v31(v2, v32);
      uint64_t v33 = *(void *)v16;
      uint64_t v34 = v16 + *(void *)(*(void *)v16 + 104LL);
      swift_beginAccess();
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v33 + 80) - 8LL) + 16LL);
      uint64_t v36 = *(void *)(v1 + 80);
      v35(v36, v34);
      uint64_t v37 = *(void *)(v1 + 248);
      swift_beginAccess();
      uint64_t v38 = *(void *)(v1 + 88);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v1 + 264) + 16LL))(v38, v37, *(void *)(v1 + 272));
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v38, 1LL, v24);
      if ((_DWORD)result != 1)
      {
        uint64_t v39 = *(void *)(v1 + 120);
        (*(void (**)(uint64_t, void, uint64_t))(v39 + 96))(v38, *(void *)(v1 + 256), v39);
        (*(void (**)(uint64_t, void))(v1 + 112))(v36, *(void *)(v1 + 256));
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 8) + 8LL))(v38, v24);
        uint64_t v40 = *(void *)v16;
        uint64_t v41 = v16 + *(void *)(*(void *)v16 + 104LL);
        swift_beginAccess();
        uint64_t v42 = *(void *)(v1 + 56);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v40 + 80) - 8LL) + 16LL))(v42, v41);
        uint64_t v43 = *(void *)(v1 + 280);
        swift_beginAccess();
        uint64_t v44 = *(void *)(v1 + 216);
        *(void *)(v1 + 416) = v44;
        *(void *)(v1 + 360) = *(void *)(v1 + 40);
        *(void *)(v1 + 424) = MEMORY[0x1895C375C](MEMORY[0x18961AFA8], v44, v1 + 360);
        *(void *)(v1 + 352) = *(void *)(v1 + 48);
        *(void *)(v1 + 432) = MEMORY[0x1895C375C](MEMORY[0x18961AF98], v44, v1 + 352);
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v1 + 392));
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v1 + 208) + 16LL))( boxed_opaque_existential_0Tm,  v43,  v44);
        uint64_t v46 = *(void *)(v1 + 144);
        uint64_t v47 = *(void *)(v1 + 64);
        *(void *)(v1 + 312) = v46;
        *(void *)(v1 + 320) = v47;
        *(void *)(v1 + 328) = *(void *)(v1 + 72);
        uint64_t v48 = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v1 + 288));
        uint64_t v49 = *(void *)(v1 + 24);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))v1)(v48, v49, v46);
        *(_BYTE *)(v1 + 336) = 0;
        uint64_t v50 = *(void *)(v1 + 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 72))(v1 + 392, v1 + 288, v50, v39);
        (*(void (**)(uint64_t, uint64_t))(v1 + 112))(v42, v50);
        sub_188344660(v1 + 288, (uint64_t *)&unk_18C4E7920);
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 392);
        *(_BYTE *)(v1 + 288) = 1;
        (*(void (**)(uint64_t))(v1 + 232))(v1 + 288);
        swift_release();
        (*(void (**)(void, void))(*(void *)(v1 + 104) + 8LL))( *(void *)(v1 + 128),  *(void *)(v1 + 32));
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 + 136) + 8LL))(v49, v46);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t CodableDispatcher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_18836BF7C@<X0>(uint64_t a1@<X8>)
{
  return sub_188367124(a1);
}

uint64_t sub_18836BF9C(uint64_t a1)
{
  return sub_188367188(a1);
}

void (*sub_18836BFBC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1883671F4();
  return sub_18836C004;
}

void sub_18836C004(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t sub_18836C030( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_188367418(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_18836C050()
{
  return sub_188367690() & 1;
}

uint64_t sub_18836C074(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), uint64_t a4)
{
  return sub_188368330(a1, a2, a3, a4);
}

uint64_t type metadata accessor for CodableDispatcher.OperationInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CodableDispatcher.OperationInfo);
}

uint64_t sub_18836C0A0()
{
  return swift_deallocObject();
}

uint64_t sub_18836C0C4()
{
  return swift_deallocObject();
}

uint64_t sub_18836C0F0()
{
  return sub_18836B38C();
}

uint64_t sub_18836C138()
{
  return swift_deallocObject();
}

uint64_t sub_18836C15C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_18836B4BC( a1,  a2,  a3,  a4,  *(void (**)(uint64_t, uint64_t))(v4 + 104),  *(void *)(v4 + 112),  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40));
}

uint64_t sub_18836C198()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_18836C1B8(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v8 = sub_18836C644();
  sub_188387298();
  if (!v1)
  {
    LOBYTE(v34[0]) = 0;
    uint64_t v9 = sub_188386D34();
    uint64_t v7 = v10;
    unint64_t v31 = v8;
    if (qword_18C7079A8 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(qword_18C70B4A0 + 16);
    if (v11)
    {
      uint64_t v28 = v4;
      uint64_t v29 = v6;
      uint64_t v30 = v3;
      uint64_t v27 = swift_bridgeObjectRetain();
      uint64_t v12 = (_OWORD *)(v27 + 40);
      while (1)
      {
        uint64_t v13 = *((void *)v12 - 1);
        __int128 v32 = *v12;
        if (sub_1883872E0() == v9 && v14 == v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_18;
        }

        char v16 = sub_188386FD4();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0) {
          break;
        }
        uint64_t v12 = (_OWORD *)((char *)v12 + 24);
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          uint64_t v6 = v29;
          uint64_t v3 = v30;
          uint64_t v4 = v28;
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_18:
      v33[0] = 1;
      uint64_t v35 = v13;
      __int128 v36 = v32;
      __swift_allocate_boxed_opaque_existential_0Tm(v34);
      uint64_t v19 = v29;
      sub_18837FAC0();
      uint64_t v20 = v30;
      sub_18836E0EC((uint64_t)v34, (uint64_t)v33);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708700);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
      if ((swift_dynamicCast() & 1) != 0)
      {
        uint64_t v7 = v37;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v20);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        return v7;
      }

      sub_18836E074();
      swift_allocError();
      uint64_t v22 = v21;
      uint64_t v23 = v35;
      uint64_t v24 = __swift_project_boxed_opaque_existential_1(v34, v35);
      *(void *)(v22 + 24) = v23;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v22);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v23 - 8) + 16LL))( boxed_opaque_existential_0Tm,  v24,  v23);
      *(void *)(v22 + 32) = v7;
      *(_BYTE *)(v22 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    }

    else
    {
LABEL_13:
      sub_18836E074();
      swift_allocError();
      *(void *)uint64_t v17 = v9;
      *(void *)(v17 + 8) = v7;
      *(_BYTE *)(v17 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

unint64_t sub_18836C554()
{
  unint64_t result = qword_18C708610;
  if (!qword_18C708610)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for CodableDispatcherError,  &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_18C708610);
  }

  return result;
}

uint64_t sub_18836C598()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

char *sub_18836C5C4(char *result)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  if (v2)
  {
    char v3 = *result;
    return (char *)v2(&v3);
  }

  return result;
}

unint64_t sub_18836C600()
{
  unint64_t result = qword_18C708620;
  if (!qword_18C708620)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A378, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C708620);
  }

  return result;
}

unint64_t sub_18836C644()
{
  unint64_t result = qword_18C4E8318;
  if (!qword_18C4E8318)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DynamicCodableContainerCodingKeys,  &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C4E8318);
  }

  return result;
}

void type metadata accessor for DispatcherResponse.CodingKeys()
{
}

void type metadata accessor for DispatcherResponse()
{
}

unint64_t sub_18836C6A4()
{
  unint64_t result = qword_18C708628;
  if (!qword_18C708628)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DispatchOutcome,  &type metadata for DispatchOutcome);
    atomic_store(result, (unint64_t *)&qword_18C708628);
  }

  return result;
}

unint64_t sub_18836C6EC()
{
  unint64_t result = qword_18C708630;
  if (!qword_18C708630)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for CodableDispatcherError,  &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_18C708630);
  }

  return result;
}

uint64_t sub_18836C730(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t sub_18836C738@<X0>(uint64_t a1@<X8>)
{
  return sub_188367124(a1);
}

uint64_t sub_18836C75C()
{
  return 24LL;
}

__n128 sub_18836C768(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType()
{
  return &type metadata for UnknownResultType;
}

ValueMetadata *type metadata accessor for MessageHeader()
{
  return &type metadata for MessageHeader;
}

uint64_t sub_18836C79C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_18836C814(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }

  return a1;
}

uint64_t sub_18836C8D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

void *sub_18836C918(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

void *sub_18836C988(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))( ((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_18836CA00(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))( ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_18836CA50(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))( ((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_18836CAB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = ((v7 + 16) & ~v7) + *(void *)(v4 + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      }
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18836CB8C + 4 * byte_188389C80[(v9 - 1)]))();
}

void sub_18836CBFC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        unsigned int v8 = 4u;
      }

      else if (v10 >= 0x100)
      {
        unsigned int v8 = 2;
      }

      else
      {
        unsigned int v8 = v10 > 1;
      }
    }

    else
    {
      unsigned int v8 = 1u;
    }
  }

  else
  {
    unsigned int v8 = 0u;
  }

  if (v6 < a2)
  {
    int v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }

        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t sub_18836CDF4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_18836CDFC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_18836CE84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return v3;
}

uint64_t sub_18836CFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    else {
      uint64_t v7 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_18836CFFC + 4 * byte_188389C93[v7]))();
  }

uint64_t sub_18836D050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_18836D124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t sub_18836D2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_18836D374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t sub_18836D4F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_18836D5B8 + 4 * byte_188389CB6[(v4 - 1)]))();
}

void sub_18836D604(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t sub_18836D7B0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_18836D7FC + 4 * byte_188389CC4[v3]))();
}

void sub_18836D844(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) <= *(void *)(*(void *)(*(void *)(a3 + 24)
                                                                                              - 8LL)
                                                                                  + 64LL))
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    else {
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    }
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }

      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }

      else
      {
        *a1 = v8;
      }
    }

    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }

  else
  {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    if (v4 <= *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL)) {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    }
    a1[v4] = a2;
  }

uint64_t dispatch thunk of CodableDispatchTraits.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CodableDispatchTraits.isDispatchable(encodedData:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CodableDispatchTraits.prepareForEncodingHandlerValue(from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CodableDispatchTraits.readEncodedRequestType(from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatchTraits.encode<A>(value:into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of CodableDispatchTraits.decode<A>(encodedData:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of CodableDispatchTraits.willDispatch(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didDispatch(value:result:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of CodableDispatchTraits.shouldPass(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didPass(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CodableDispatchTraits.sink(handlerValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

_BYTE *sub_18836D9DC(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DispatchOutcome()
{
  return &type metadata for DispatchOutcome;
}

uint64_t dispatch thunk of CodableDispatching.traits.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CodableDispatching.traits.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatching.traits.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CodableDispatching.register<A, B>(handler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 56))();
}

uint64_t dispatch thunk of CodableDispatching.hasRegistration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatching.dispatch(encodedData:context:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

ValueMetadata *type metadata accessor for CodableDispatcherError()
{
  return &type metadata for CodableDispatcherError;
}

uint64_t sub_18836DA40()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CodableDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableDispatcher);
}

uint64_t method lookup function for CodableDispatcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CodableDispatcher.traits.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of CodableDispatcher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B>(handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of CodableDispatcher.hasRegistration(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch<A>(value:context:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t sub_18836DB80()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for DynamicCodableContainerCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t _s7Mercury15DispatchOutcomeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18836DC64 + 4 * byte_188389CCE[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18836DC98 + 4 * byte_188389CC9[v4]))();
}

uint64_t sub_18836DC98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18836DCA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18836DCA8LL);
  }
  return result;
}

uint64_t sub_18836DCB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18836DCBCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18836DCC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18836DCC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType.CodingKeys()
{
  return &type metadata for UnknownResultType.CodingKeys;
}

void *sub_18836DCE4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_18836DD10()
{
  return swift_release();
}

void *sub_18836DD18(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_18836DD50(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for DispatcherErrorWrapper(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for DispatcherErrorWrapper(id *a1)
{
}

void **assignWithCopy for DispatcherErrorWrapper(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  size_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for DispatcherErrorWrapper(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DispatcherErrorWrapper()
{
  return &type metadata for DispatcherErrorWrapper;
}

void sub_18836DEB4()
{
}

void sub_18836DEC4()
{
}

void sub_18836DED4()
{
}

unint64_t sub_18836DEE8()
{
  unint64_t result = qword_18C708688;
  if (!qword_18C708688)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A1E8, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C708688);
  }

  return result;
}

unint64_t sub_18836DF30()
{
  unint64_t result = qword_18C708690;
  if (!qword_18C708690)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A210, &type metadata for UnknownResultType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C708690);
  }

  return result;
}

unint64_t sub_18836DF74(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_18836DFA0();
  unint64_t result = sub_18835E538();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_18836DFA0()
{
  unint64_t result = qword_18C4E7298;
  if (!qword_18C4E7298)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A1C0, &type metadata for DispatcherErrorWrapper);
    atomic_store(result, (unint64_t *)&qword_18C4E7298);
  }

  return result;
}

unint64_t sub_18836DFE4()
{
  unint64_t result = qword_18C7086E8;
  if (!qword_18C7086E8)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for CodableDispatcherError,  &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_18C7086E8);
  }

  return result;
}

unint64_t sub_18836E028()
{
  unint64_t result = qword_18C7086F0;
  if (!qword_18C7086F0)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for CodableDispatcherError,  &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_18C7086F0);
  }

  return result;
}

uint64_t sub_18836E06C()
{
  return 2LL;
}

unint64_t sub_18836E074()
{
  unint64_t result = qword_18C7086F8;
  if (!qword_18C7086F8)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DynamicCodableError,  &type metadata for DynamicCodableError);
    atomic_store(result, (unint64_t *)&qword_18C7086F8);
  }

  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_2(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8LL) + 80LL) & 0x20000) != 0) {
    JUMPOUT(0x1895C3834LL);
  }
  return result;
}

uint64_t sub_18836E0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18836E130()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 144LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

void sub_18836E1E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  __int128 v11 = *(_OWORD *)(v1 + 64);
  __int128 v12 = *(_OWORD *)(v1 + 24);
  __int128 v10 = *(_OWORD *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 144LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_18836B670( a1,  *(void *)(v1 + 104),  *(void *)(v1 + 112),  *(void *)(v1 + 120),  *(void *)(v1 + 128),  *(void *)(v1 + 136),  v1 + v9,  *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8LL)),  v3,  v12,  *((uint64_t *)&v12 + 1),  v4,  v5,  v6,  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v7);
}

  ;
}

unint64_t sub_18836E2C4()
{
  unint64_t result = qword_18C708718;
  if (!qword_18C708718)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for CodableDispatcherError,  &type metadata for CodableDispatcherError);
    atomic_store(result, (unint64_t *)&qword_18C708718);
  }

  return result;
}

unint64_t sub_18836E308()
{
  unint64_t result = qword_18C708720;
  if (!qword_18C708720)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for UnknownResultType,  &type metadata for UnknownResultType);
    atomic_store(result, (unint64_t *)&qword_18C708720);
  }

  return result;
}

unint64_t sub_18836E34C()
{
  unint64_t result = qword_18C708530;
  if (!qword_18C708530)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C708530);
  }

  return result;
}

uint64_t sub_18836E388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7088D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_18836E3D0(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

id sub_18836E3FC()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  qword_18C708730 = (uint64_t)result;
  return result;
}

uint64_t sub_18836E42C()
{
  uint64_t v0 = sub_18838674C();
  MEMORY[0x1895F8860](v0);
  uint64_t v1 = sub_188386AC4();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8860](v1);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_188386AB8();
  uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8860](v5);
  sub_188352280(0LL, (unint64_t *)&qword_18C4E8380);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708738);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1883883A0;
  sub_188386AAC();
  v9[1] = v7;
  sub_188349470((unint64_t *)&qword_18C707E00, v6, MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C707E08);
  sub_18836F49C((unint64_t *)&qword_18C707E10, &qword_18C707E08);
  sub_188386B90();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961B908], v1);
  sub_188386740();
  uint64_t result = sub_188386AF4();
  qword_18C70B4B0 = result;
  return result;
}

uint64_t static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    id v15 = a3;
  }

  else
  {
    if (qword_18C7079C0 != -1) {
      swift_once();
    }
    id v15 = (id)qword_18C70B4B0;
  }

  BOOL v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a6;
  void v16[4] = a7;
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  void v17[4] = a4;
  v17[5] = a5;
  v17[6] = sub_18836EA24;
  v17[7] = v16;
  v17[8] = v7;
  type metadata accessor for POSIXThread();
  swift_allocObject();
  id v18 = a3;
  swift_retain();
  id v19 = v15;
  swift_retain();
  swift_retain();
  sub_1883646C8(a4);
  swift_retain();
  sub_1883531E8((uint64_t)sub_18836EF70, (uint64_t)v17);
  swift_release();

  return swift_release();
}

uint64_t sub_18836E7F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a3;
  uint64_t v9 = sub_188386734();
  __int128 v10 = (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0];
  uint64_t v22 = *(void *)(v9 - 8);
  MEMORY[0x1895F8860](v9);
  __int128 v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_18838674C();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8860](v13);
  BOOL v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  void v17[4] = a1;
  v17[5] = a2;
  aBlock[4] = sub_18836F45C;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1895F87A0];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1883637C0;
  aBlock[3] = &block_descriptor_4;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  id v19 = a2;
  sub_188386740();
  uint64_t v24 = MEMORY[0x18961AFE8];
  sub_188349470((unint64_t *)&qword_18C4E77C0, v10, MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E77F8);
  sub_18836F49C((unint64_t *)&qword_18C4E7800, &qword_18C4E77F8);
  sub_188386B90();
  MEMORY[0x1895C28BC](0LL, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_18836E9F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18836EA24(uint64_t a1, void *a2)
{
  return sub_18836E7F8(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_18836EA30( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(uint64_t, void), uint64_t a6)
{
  uint64_t v51 = a6;
  uint64_t v52 = a5;
  uint64_t v49 = sub_188386434();
  uint64_t v10 = *(void *)(v49 - 8);
  MEMORY[0x1895F8860](v49);
  __int128 v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18836F2CC();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7085B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18838A3F0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  unint64_t v55 = inited;
  sub_1883869C8();
  unint64_t v14 = v55;
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_18836EF84(v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  sub_18836F1B8(a3, a4, 0LL);
  uint64_t v47 = a3;
  uint64_t v50 = a4;
  uint64_t v53 = v10;
  uint64_t result = XPCFileDescriptor.read(into:polling:)(v15, v17, 1LL);
  uint64_t v20 = (uint64_t)result;
  uint64_t v45 = v17;
  uint64_t v46 = a1;
  uint64_t v21 = 0LL;
  uint64_t v22 = v52;
  uint64_t v48 = v15;
  uint64_t v23 = v47;
  while ((v19 & 1) == 0)
  {
    if (!v15) {
      goto LABEL_28;
    }
    if (!v20) {
      sub_18836F1B8(v23, v50, v21);
    }
    uint64_t v24 = v15 + v20;
    uint64_t v25 = v20;
    if (v20 >= 1)
    {
      uint64_t v26 = v15;
      do
      {
        unint64_t v27 = (unint64_t)XPCFileDescriptor.write(from:polling:)(v26, v24, 1LL);
        if ((v28 & 1) != 0) {
          break;
        }
        unint64_t v29 = v27;
        uint64_t v30 = v53;
        if ((v27 & 0x8000000000000000LL) == 0)
        {
          BOOL v31 = __CFADD__(v21, v27);
          v21 += v27;
          if (v31) {
            uint64_t v21 = -1LL;
          }
        }

        v54[0] = 0;
        if (v23)
        {
          v23(v21, v54);
          if (v54[0] == 1)
          {
            LODWORD(v55) = 89;
            sub_1883476E8(MEMORY[0x18961AFE8]);
            sub_188349470( (unint64_t *)&qword_18C708930,  (uint64_t (*)(uint64_t))MEMORY[0x189605FC8],  MEMORY[0x189605FB0]);
            uint64_t v33 = v49;
            sub_188386500();
            uint64_t v34 = (void *)sub_18838641C();
            (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v33);
            swift_willThrow();
            uint64_t v35 = (void (*)(uint64_t, void *))v52;
            MEMORY[0x1895C3834](v48, -1LL, -1LL);
            sub_188386A70();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
            uint64_t v36 = swift_allocObject();
            *(_OWORD *)(v36 + 16) = xmmword_1883883A0;
            unint64_t v55 = (unint64_t)v34;
            id v37 = v34;
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
            uint64_t v38 = sub_18838689C();
            uint64_t v40 = v39;
            *(void *)(v36 + 56) = MEMORY[0x189617FA8];
            *(void *)(v36 + 64) = sub_18834DFC0();
            *(void *)(v36 + 32) = v38;
            *(void *)(v36 + 40) = v40;
            sub_188352280(0LL, (unint64_t *)&qword_18C708530);
            uint64_t v41 = (void *)sub_188386B18();
            sub_18838668C();
            swift_bridgeObjectRelease();

            id v42 = v34;
            v35(v21, v34);

            goto LABEL_20;
          }
        }

        BOOL v32 = __OFSUB__(v25, v29);
        v25 -= v29;
        if (v32)
        {
          __break(1u);
          goto LABEL_26;
        }

        v26 += v29;
        uint64_t v24 = v26 + v25;
      }

      while (v25 > 0);
    }

    uint64_t v15 = v48;
    uint64_t result = XPCFileDescriptor.read(into:polling:)(v48, v45, 1LL);
    uint64_t v20 = (uint64_t)result;
    uint64_t v22 = v52;
  }

  sub_18836F1B8(v23, v50, v21);
  sub_188386A58();
  sub_188352280(0LL, (unint64_t *)&qword_18C708530);
  uint64_t v44 = (void *)sub_188386B18();
  sub_18838668C();

  v22(v21, 0LL);
  if (v15) {
    MEMORY[0x1895C3834](v15, -1LL, -1LL);
  }
LABEL_20:
  if (qword_18C7079B8 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v43 = (void *)qword_18C708730;
  uint64_t result = objc_msgSend((id)qword_18C708730, sel_lock, v45, v46);
  if (!__OFSUB__(qword_18C708728, 1LL))
  {
    --qword_18C708728;
    return objc_msgSend(v43, sel_unlock);
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_18836EF2C()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

void *sub_18836EF70()
{
  return sub_18836EA30( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(uint64_t, char *))(v0 + 32),  *(void *)(v0 + 40),  *(void (**)(uint64_t, void))(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_18836EF84(unint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C8];
  uint64_t v3 = *MEMORY[0x1895FD588];
  if ((*MEMORY[0x1895FD588] & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  if ((unint64_t)(v3 - 0x2000000000000000LL) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v2 = a1;
  uint64_t v1 = 4 * v3;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_5;
  }

uint64_t sub_18836F1B8(uint64_t (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_188386434();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1895F8860](v5);
  uint64_t v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = 0;
  if (a1)
  {
    uint64_t result = a1(a3, &v12);
    if ((v12 & 1) != 0)
    {
      int v11 = 89;
      sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_188349470( (unint64_t *)&qword_18C708930,  (uint64_t (*)(uint64_t))MEMORY[0x189605FC8],  MEMORY[0x189605FB0]);
      sub_188386500();
      sub_18838641C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_willThrow();
    }
  }

  return result;
}

void sub_18836F2CC()
{
  if (qword_18C7079B8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_18C708730;
  objc_msgSend((id)qword_18C708730, sel_lock);
  uint64_t v1 = qword_18C708728 + 1;
  if (__OFADD__(qword_18C708728, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++qword_18C708728;
    objc_msgSend(v0, sel_unlock);
    if (v1 >= 17)
    {
      os_log_type_t v2 = sub_188386A7C();
      sub_188352280(0LL, (unint64_t *)&qword_18C708530);
      log = (os_log_s *)sub_188386B18();
      if (os_log_type_enabled(log, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v3 = 134217984;
        sub_188386B30();
        _os_log_impl( &dword_18832C000,  log,  v2,  "Unexpectedly high number of concurrent XPCFileDescriptor.splice operations: %ld",  v3,  0xCu);
        MEMORY[0x1895C3834](v3, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

uint64_t sub_18836F430()
{
  return swift_deallocObject();
}

uint64_t sub_18836F45C()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_18836F49C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895C375C](MEMORY[0x189618470], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t static xpc_event_publisher_action_t.add.getter()
{
  return 0LL;
}

uint64_t static xpc_event_publisher_action_t.remove.getter()
{
  return 1LL;
}

uint64_t static xpc_event_publisher_action_t.initialBarrier.getter()
{
  return 2LL;
}

uint64_t XPCEventPublisher.Token.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t XPCEventPublisher.Token.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*XPCEventPublisher.Token.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t XPCEventPublisher.Token.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_18836F51C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_18836F52C()
{
  return sub_188387268();
}

uint64_t sub_18836F570()
{
  return sub_18838725C();
}

uint64_t sub_18836F598()
{
  return sub_188387268();
}

uint64_t XPCEventPublisher.__allocating_init(publisher:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t XPCEventPublisher.init(publisher:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t XPCEventPublisher.__allocating_init(streamName:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  void v6[2] = a3;
  uint64_t v4 = sub_18835ABD0((void *(*)(uint64_t *__return_ptr, void *))sub_18836F694, (uint64_t)v6, a1, a2);

  swift_bridgeObjectRelease();
  if (!v4) {
    return 0LL;
  }
  type metadata accessor for XPCEventPublisher();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  return result;
}

id sub_18836F694@<X0>(void *a1@<X8>)
{
  id result = (id)xpc_event_publisher_create();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for XPCEventPublisher()
{
  return objc_opt_self();
}

uint64_t sub_18836F6EC()
{
  return xpc_event_publisher_activate();
}

void sub_18836F6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  void v6[4] = sub_18836F924;
  v6[5] = v4;
  v6[0] = MEMORY[0x1895F87A0];
  v6[1] = 1107296256LL;
  void v6[2] = sub_18836F92C;
  void v6[3] = &block_descriptor_5;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_handler();
  _Block_release(v5);
}

uint64_t sub_18836F7AC(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  if ((_DWORD)result == 2)
  {
    a2 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
    char v8 = 2;
  }

  else if ((_DWORD)result == 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
    char v8 = 1;
  }

  else
  {
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v6 = a3;
    uint64_t v7 = 0xD000000000000019LL;
    if (!a3)
    {
      id result = sub_188386CB0();
      __break(1u);
      return result;
    }

    swift_unknownObjectRetain();
    char v8 = 0;
    uint64_t v9 = 0x800000018838B7A0LL;
  }

  v10[0] = a2;
  v10[1] = v6;
  void v10[2] = v7;
  void v10[3] = v9;
  char v11 = v8;
  sub_18836FEF4(a2, v6, v7, v9, v8);
  a4(v10);
  sub_18836FF3C(a2, v6, v7, v9, v8);
  return sub_18836FF3C(a2, v6, v7, v9, v8);
}

uint64_t sub_18836F900()
{
  return swift_deallocObject();
}

uint64_t sub_18836F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18836F7AC(a1, a2, a3, *(void (**)(void *))(v3 + 16));
}

uint64_t sub_18836F92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void sub_18836F9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  void v6[4] = sub_18836FC10;
  v6[5] = v4;
  v6[0] = MEMORY[0x1895F87A0];
  v6[1] = 1107296256LL;
  void v6[2] = sub_18836FC18;
  void v6[3] = &block_descriptor_6_1;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_error_handler();
  _Block_release(v5);
}

void sub_18836FA64(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = sub_188386434();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8860](v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1883866C8();
  if ((v7 & 0x100000000LL) != 0)
  {
    uint64_t v9 = xpc_strerror();
    if (v9) {
      uint64_t v9 = sub_1883868F0();
    }
    else {
      uint64_t v10 = 0LL;
    }
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0xD00000000000001ALL;
    }
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0x800000018838C920LL;
    }
    unint64_t v13 = sub_1883476E8(MEMORY[0x18961AFE8]);
    static XPCError.unknown(_:from:userInfo:)(v11, v12, 0LL, v13, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v18[0];
    uint64_t v15 = v18[1];
    sub_1883491B4();
    uint64_t v16 = (void *)swift_allocError();
    *uint64_t v17 = v14;
    v17[1] = v15;
    a2();
  }

  else
  {
    LODWORD(v18[0]) = v7;
    sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_188364DFC();
    sub_188386500();
    char v8 = (void *)sub_18838641C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ((void (*)(void *))a2)(v8);
  }

void sub_18836FC10(uint64_t a1)
{
}

uint64_t sub_18836FC18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_18836FC54(void *a1, uint64_t *a2, char a3)
{
  uint64_t v4 = &j__xpc_event_publisher_fire_noboost;
  uint64_t v5 = *a2;
  if ((a3 & 1) != 0) {
    uint64_t v4 = &j__xpc_event_publisher_fire;
  }
  return ((uint64_t (*)(void, uint64_t, void))v4)(*(void *)(v3 + 16), v5, *a1);
}

void sub_18836FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  v9[4] = sub_18836FDFC;
  void v9[5] = v7;
  v9[0] = MEMORY[0x1895F87A0];
  v9[1] = 1107296256LL;
  void v9[2] = sub_188362D84;
  v9[3] = &block_descriptor_12_0;
  char v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  xpc_event_publisher_fire_with_reply();
  _Block_release(v8);
}

void sub_18836FD84()
{
}

uint64_t sub_18836FDB4()
{
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  char v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  void v6[2] = v10;
  char v7 = v11;
  v0(v6);
  return sub_1883625C4(v1, v2, v3, v4);
}

void sub_18836FDFC()
{
}

uint64_t XPCEventPublisher.deinit()
{
  return v0;
}

uint64_t XPCEventPublisher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_18836FE48()
{
  unint64_t result = qword_18C4E6FD0;
  if (!qword_18C4E6FD0)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCEventPublisher.Token,  &type metadata for XPCEventPublisher.Token);
    atomic_store(result, (unint64_t *)&qword_18C4E6FD0);
  }

  return result;
}

uint64_t method lookup function for XPCEventPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(publisher:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(streamName:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCEventPublisher.activate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of XPCEventPublisher.setHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of XPCEventPublisher.setErrorHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:boost:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

ValueMetadata *type metadata accessor for XPCEventPublisher.Token()
{
  return &type metadata for XPCEventPublisher.Token;
}

uint64_t sub_18836FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t destroy for XPCEventPublisher.SubscriptionAction(uint64_t a1)
{
  return sub_18836FF3C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_18836FF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_18836FEF4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_18836FEF4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_18836FF3C(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_18836FF3C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_18837012C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_188370144(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCEventPublisher.SubscriptionAction()
{
  return &type metadata for XPCEventPublisher.SubscriptionAction;
}

uint64_t XPCTypeDescriptor.type.getter()
{
  return *(void *)v0;
}

uint64_t XPCTypeDescriptor.name.getter()
{
  return sub_1883868F0();
}

uint64_t sub_1883701B0()
{
  uint64_t result = XPCTypeGetMachSendOnce();
  qword_18C708740 = result;
  return result;
}

uint64_t XPCTypeMachSendOnce.getter()
{
  if (qword_18C7079C8 != -1) {
    swift_once();
  }
  return qword_18C708740;
}

void static XPCTypeDescriptor.error.getter(void *a1@<X8>)
{
  *a1 = XPCTypeError;
}

void static XPCTypeDescriptor.bundle.getter(void *a1@<X8>)
{
  *a1 = XPCTypeBundle;
}

void static XPCTypeDescriptor.connection.getter(void *a1@<X8>)
{
  *a1 = XPCTypeConnection;
}

void static XPCTypeDescriptor.endpoint.getter(void *a1@<X8>)
{
  *a1 = XPCTypeEndpoint;
}

void static XPCTypeDescriptor.dictionary.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDictionary;
}

void static XPCTypeDescriptor.array.getter(void *a1@<X8>)
{
  *a1 = XPCTypeArray;
}

void static XPCTypeDescriptor.BOOL.getter(void *a1@<X8>)
{
  *a1 = XPCTypeBool;
}

void static XPCTypeDescriptor.data.getter(void *a1@<X8>)
{
  *a1 = XPCTypeData;
}

void static XPCTypeDescriptor.date.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDate;
}

void static XPCTypeDescriptor.double.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDouble;
}

void static XPCTypeDescriptor.fd.getter(void *a1@<X8>)
{
  *a1 = XPCTypeFD;
}

void static XPCTypeDescriptor.fileTransfer.getter(void *a1@<X8>)
{
  *a1 = XPCTypeFileTransfer;
}

void static XPCTypeDescriptor.machSend.getter(void *a1@<X8>)
{
  *a1 = XPCTypeMachSend;
}

uint64_t static XPCTypeDescriptor.machSendOnce.getter@<X0>(void *a1@<X8>)
{
  if (qword_18C7079C8 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = qword_18C708740;
  return result;
}

void static XPCTypeDescriptor.machRecv.getter(void *a1@<X8>)
{
  *a1 = XPCTypeMachRecv;
}

void static XPCTypeDescriptor.pipe.getter(void *a1@<X8>)
{
  *a1 = XPCTypePipe;
}

void static XPCTypeDescriptor.pointer.getter(void *a1@<X8>)
{
  *a1 = XPCTypePointer;
}

void static XPCTypeDescriptor.remoteConnection.getter(void *a1@<X8>)
{
  *a1 = XPCTypeRemoteConnection;
}

void static XPCTypeDescriptor.serializer.getter(void *a1@<X8>)
{
  *a1 = XPCTypeSerializer;
}

void static XPCTypeDescriptor.service.getter(void *a1@<X8>)
{
  *a1 = XPCTypeService;
}

void static XPCTypeDescriptor.serviceInstance.getter(void *a1@<X8>)
{
  *a1 = XPCTypeServiceInstance;
}

void static XPCTypeDescriptor.int64.getter(void *a1@<X8>)
{
  *a1 = XPCTypeInt64;
}

void static XPCTypeDescriptor.uint64.getter(void *a1@<X8>)
{
  *a1 = XPCTypeUInt64;
}

void static XPCTypeDescriptor.string.getter(void *a1@<X8>)
{
  *a1 = XPCTypeString;
}

void static XPCTypeDescriptor.uuid.getter(void *a1@<X8>)
{
  *a1 = XPCTypeUUID;
}

void static XPCTypeDescriptor.shmem.getter(void *a1@<X8>)
{
  *a1 = XPCTypeShmem;
}

void static XPCTypeDescriptor.null.getter(void *a1@<X8>)
{
  *a1 = XPCTypeNull;
}

void static XPCTypeDescriptor.activity.getter(void *a1@<X8>)
{
  *a1 = XPCTypeActivity;
}

uint64_t static XPCTypeDescriptor.registry.getter()
{
  if (qword_18C7079D0 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1883704B8()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18838A530;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708758);
  *(void *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 32) = XPCTypeError;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708760);
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 72) = XPCTypeBundle;
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 112) = XPCTypeConnection;
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 152) = XPCTypeEndpoint;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708768);
  *(void *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 192) = XPCTypeDictionary;
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 232) = XPCTypeActivity;
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708770);
  *(void *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 272) = XPCTypeArray;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708778);
  *(void *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 312) = XPCTypeBool;
  *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708780);
  *(void *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 352) = XPCTypeData;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708788);
  *(void *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 392) = XPCTypeDate;
  *(void *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708790);
  *(void *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 432) = XPCTypeDouble;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708798);
  *(void *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 472) = XPCTypeFD;
  *(void *)(v0 + 536) = v1;
  *(void *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 512) = XPCTypeFileTransfer;
  *(void *)(v0 + 576) = v1;
  *(void *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 552) = XPCTypeMachSend;
  *(void *)(v0 + 616) = v1;
  *(void *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 592) = XPCTypeMachRecv;
  *(void *)(v0 + 656) = v1;
  *(void *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 632) = XPCTypePipe;
  *(void *)(v0 + 696) = v1;
  *(void *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 672) = XPCTypePointer;
  *(void *)(v0 + 736) = v1;
  *(void *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 712) = XPCTypeSerializer;
  *(void *)(v0 + 776) = v1;
  *(void *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 752) = XPCTypeService;
  *(void *)(v0 + 816) = v1;
  *(void *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 792) = XPCTypeServiceInstance;
  *(void *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087A0);
  *(void *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 832) = XPCTypeInt64;
  *(void *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087A8);
  *(void *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 872) = XPCTypeUInt64;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087B0);
  *(void *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 912) = XPCTypeString;
  *(void *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087B8);
  *(void *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 952) = XPCTypeUUID;
  *(void *)(v0 + 1016) = v1;
  *(void *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 992) = XPCTypeShmem;
  *(void *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_18C7087C0);
  *(void *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 1032) = XPCTypeNull;
  if (qword_18C7079C8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C708740;
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v0 = (uint64_t)sub_188371694((void *)(v3 > 1), v4 + 1, 1, (void *)v0, &qword_18C708750, &qword_18C708868);
  }
  uint64_t v7 = v1;
  __int128 v8 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)&__int128 v6 = v2;
  *(void *)(v0 + 16) = v4 + 1;
  sub_188352384(&v6, v0 + 40 * v4 + 32);
  return v0;
}

void *static XPCTypeDescriptor.allCases.getter()
{
  uint64_t v8 = *MEMORY[0x1895F89C8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708750);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18838A530;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708758);
  *(void *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 32) = XPCTypeError;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708760);
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 72) = XPCTypeBundle;
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 112) = XPCTypeConnection;
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 152) = XPCTypeEndpoint;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708768);
  *(void *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 192) = XPCTypeDictionary;
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 232) = XPCTypeActivity;
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708770);
  *(void *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 272) = XPCTypeArray;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708778);
  *(void *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 312) = XPCTypeBool;
  *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708780);
  *(void *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 352) = XPCTypeData;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708788);
  *(void *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 392) = XPCTypeDate;
  *(void *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708790);
  *(void *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 432) = XPCTypeDouble;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708798);
  *(void *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 472) = XPCTypeFD;
  *(void *)(v0 + 536) = v1;
  *(void *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 512) = XPCTypeFileTransfer;
  *(void *)(v0 + 576) = v1;
  *(void *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 552) = XPCTypeMachSend;
  *(void *)(v0 + 616) = v1;
  *(void *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 592) = XPCTypeMachRecv;
  *(void *)(v0 + 656) = v1;
  *(void *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 632) = XPCTypePipe;
  *(void *)(v0 + 696) = v1;
  *(void *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 672) = XPCTypePointer;
  *(void *)(v0 + 736) = v1;
  *(void *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 712) = XPCTypeSerializer;
  *(void *)(v0 + 776) = v1;
  *(void *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 752) = XPCTypeService;
  *(void *)(v0 + 816) = v1;
  *(void *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 792) = XPCTypeServiceInstance;
  *(void *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087A0);
  *(void *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 832) = XPCTypeInt64;
  *(void *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087A8);
  *(void *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 872) = XPCTypeUInt64;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087B0);
  *(void *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 912) = XPCTypeString;
  *(void *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C7087B8);
  *(void *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 952) = XPCTypeUUID;
  *(void *)(v0 + 1016) = v1;
  *(void *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 992) = XPCTypeShmem;
  *(void *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_18C7087C0);
  *(void *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 1032) = XPCTypeNull;
  if (qword_18C7079C8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C708740;
  unint64_t v3 = sub_188371694((void *)1, 27LL, 1, (void *)v0, &qword_18C708750, &qword_18C708868);
  uint64_t v6 = v1;
  uint64_t v7 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)&__int128 v5 = v2;
  _OWORD v3[2] = 27LL;
  sub_188352384(&v5, (uint64_t)(v3 + 134));
  return v3;
}

void *sub_188370C88()
{
  uint64_t result = (void *)sub_188370CA4();
  off_18C708748 = result;
  return result;
}

uint64_t sub_188370CA4()
{
  uint64_t v0 = sub_1883704B8();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v19 = MEMORY[0x18961AFE8];
    sub_188372300(0, v1, 0);
    uint64_t v2 = v19;
    uint64_t v3 = v0 + 32;
    do
    {
      sub_188349220(v3, (uint64_t)&v15);
      uint64_t v4 = v16;
      uint64_t v5 = v17;
      __swift_project_boxed_opaque_existential_1(&v15, v16);
      *(void *)&v18[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_188352384(&v15, (uint64_t)v18 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_188372300(0, *(void *)(v2 + 16) + 1LL, 1);
        uint64_t v2 = v19;
      }

      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_188372300(v7 > 1, v8 + 1, 1);
        uint64_t v2 = v19;
      }

      *(void *)(v2 + 16) = v8 + 1;
      char v9 = (_OWORD *)(v2 + 48 * v8);
      __int128 v10 = v18[0];
      __int128 v11 = v18[2];
      v9[3] = v18[1];
      v9[4] = v11;
      void v9[2] = v10;
      v3 += 40LL;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease();
    if (*(void *)(v2 + 16)) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v12 = MEMORY[0x18961AFF0];
    goto LABEL_12;
  }

  swift_bridgeObjectRelease();
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
    goto LABEL_11;
  }
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708870);
  uint64_t v12 = sub_188386CEC();
LABEL_12:
  *(void *)&v18[0] = v12;
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_18837261C(v13, 1, v18);
  swift_bridgeObjectRelease();
  return *(void *)&v18[0];
}

uint64_t static XPCTypeDescriptor<>.descriptor(for:)@<X0>(xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  if (qword_18C7079D0 != -1) {
    swift_once();
  }
  uint64_t v4 = off_18C708748;
  if (*((void *)off_18C708748 + 2))
  {
    unint64_t v5 = sub_188371A98((uint64_t)type);
    if ((v6 & 1) != 0) {
      return sub_188349220(v4[7] + 40 * v5, a2);
    }
  }

  xpc_type_get_name(type);
  sub_1883868F0();
  sub_188386BB4();
  sub_1883868E4();
  sub_188386C8C();
  sub_1883868E4();
  sub_1883868E4();
  sub_1883868E4();
  uint64_t result = sub_188386CB0();
  __break(1u);
  return result;
}

xpc_object_t XPCTypeDescriptor<>.create()()
{
  return xpc_dictionary_create(0LL, 0LL, 0LL);
}

char *sub_18837101C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708890);
      __int128 v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __int128 v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v13 = (char *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_1883729B8(0LL, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_188371128(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_188371694(a1, a2, a3, a4, &qword_18C4E8358, (uint64_t *)&unk_18C4E8360);
}

void *sub_18837113C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7086E0);
      __int128 v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      __int128 v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_188372AA0(0LL, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_188371260(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78E0);
      __int128 v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __int128 v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_188372B8C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_18837136C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708858);
      __int128 v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      __int128 v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_188372C7C(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_188371490(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708888);
      __int128 v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __int128 v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_188372D88(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

char *sub_18837159C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C7081C0);
      __int128 v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      __int128 v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v12 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_188372E70(0LL, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_188371694(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      __int128 v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      __int128 v15 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_188372F54(0LL, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }

  __break(1u);
  return result;
}

void *sub_1883717C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708848);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_18837305C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

unint64_t sub_1883718CC(uint64_t a1)
{
  uint64_t v2 = sub_1883867E8();
  return sub_188371D08(a1, v2);
}

unint64_t sub_18837191C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188387268();
  return sub_188371E30(a1, a2, v4);
}

unint64_t sub_188371980(uint64_t a1)
{
  uint64_t v2 = sub_1883867E8();
  return sub_188371F10(a1, v2);
}

unint64_t sub_1883719E4(uint64_t a1)
{
  uint64_t v2 = sub_188387268();
  return sub_188372048(a1, v2);
}

unint64_t sub_188371A98(uint64_t a1)
{
  uint64_t v2 = sub_188387268();
  return sub_188372178(a1, v2);
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for XPCTypeRole()
{
  return &type metadata for XPCTypeRole;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Scalar()
{
  return &type metadata for XPCTypeRole.Scalar;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Date()
{
  return &type metadata for XPCTypeRole.Date;
}

ValueMetadata *type metadata accessor for XPCTypeRole.String()
{
  return &type metadata for XPCTypeRole.String;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Reference()
{
  return &type metadata for XPCTypeRole.Reference;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Array()
{
  return &type metadata for XPCTypeRole.Array;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Dictionary()
{
  return &type metadata for XPCTypeRole.Dictionary;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Error()
{
  return &type metadata for XPCTypeRole.Error;
}

ValueMetadata *type metadata accessor for XPCTypeRole.UUID()
{
  return &type metadata for XPCTypeRole.UUID;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Null()
{
  return &type metadata for XPCTypeRole.Null;
}

uint64_t sub_188371BA0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_188371BA8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_188371BEC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for XPCTypeDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCTypeDescriptor);
}

unint64_t sub_188371C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_188387268();
  return sub_188372214(a1, a2, a3, a4, v8);
}

unint64_t sub_188371D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = sub_188386C98();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      char v14 = sub_188386818();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_188371E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_188386FD4() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (sub_188386FD4() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_188371F10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = sub_18838662C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_188373164(&qword_18C708850, MEMORY[0x189606F58]);
      char v14 = sub_188386818();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_188372048(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1883731EC(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if ((sub_1883865FC() & 1) != 0)
      {
        uint64_t v13 = *(int *)(v5 + 20);
        uint64_t v14 = *(void *)&v8[v13];
        uint64_t v15 = *(void *)&v8[v13 + 8];
        uint64_t v16 = (void *)(a1 + v13);
        BOOL v17 = v14 == *v16 && v15 == v16[1];
        if (v17 || (sub_188386FD4() & 1) != 0) {
          break;
        }
      }

      sub_18834A7EC((uint64_t)v8);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        return v10;
      }
    }

    sub_18834A7EC((uint64_t)v8);
  }

  return v10;
}

unint64_t sub_188372178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_188372214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)(v5 + 48);
    do
    {
      uint64_t v14 = (void *)(v13 + 32 * v8);
      if (*v14 == a1)
      {
        BOOL v15 = v14[2] == a3 && v14[3] == a4;
        if (v15 || (sub_188386FD4() & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v12;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

uint64_t sub_1883722E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_18837231C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_188372300(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_188372478(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_18837231C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708888);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

LABEL_32:
  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

          sub_1883493F0();
          return (unint64_t)v2;
        }
      }
    }
  }

uint64_t sub_188372478(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708880);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708878);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

void sub_18837261C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }

  swift_bridgeObjectRetain();
  sub_1883731A4(a1 + 32, (uint64_t)&v38);
  uint64_t v7 = v38;
  uint64_t v40 = v38;
  sub_188352384(v39, (uint64_t)v37);
  uint64_t v8 = (void *)*a3;
  unint64_t v10 = sub_188371A98(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_23;
  }
  char v14 = v9;
  if (v8[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_188384E20();
      if ((v14 & 1) != 0) {
        goto LABEL_10;
      }
    }

char *sub_1883729B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)sub_188386CF8();
  __break(1u);
  return result;
}

char *sub_188372AA0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_188372B8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_188372C7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708860);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

char *sub_188372D88(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)sub_188386CF8();
  __break(1u);
  return result;
}

char *sub_188372E70(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_188372F54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }

  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_18837305C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_188386CF8();
  __break(1u);
  return result;
}

uint64_t sub_188373164(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_18838662C();
    uint64_t result = MEMORY[0x1895C375C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1883731A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1883731EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t MachError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_188386680();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1895F8860](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v9 = sub_1883866BC();
    if ((v9 & 0x100000000LL) != 0)
    {
      sub_188386860();
      id v10 = objc_allocWithZone(MEMORY[0x189607870]);
      uint64_t v11 = (void *)sub_18838683C();
      swift_bridgeObjectRelease();
      BOOL v12 = (void *)sub_18838677C();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      id v15 = v13;
      sub_1883733C0();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }

    else
    {
      v14[1] = v9;
      sub_1883733FC();
      return sub_188386500();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1883733C0()
{
  unint64_t result = qword_18C4E7888;
  if (!qword_18C4E7888)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C4E7888);
  }

  return result;
}

unint64_t sub_1883733FC()
{
  unint64_t result = qword_18C708898;
  if (!qword_18C708898)
  {
    uint64_t v1 = sub_188386680();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189606FE8], v1);
    atomic_store(result, (unint64_t *)&qword_18C708898);
  }

  return result;
}

uint64_t MachError.errorCodeComponents.getter()
{
  uint64_t v0 = sub_1883864F4();
  else {
    return 0LL;
  }
}

void *static SystemXPCConnection.unsafePeer(from:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = 0LL;
  v2[5] = 0LL;
  v2[2] = MEMORY[0x18961AFE8];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SystemXPCPeerConnection()
{
  return objc_opt_self();
}

uint64_t sub_188373528(void *a1, char a2, uint64_t a3)
{
  if (MEMORY[0x1895C3C6C](a3) == XPCTypeDictionary)
  {
    uint64_t result = sub_18835479C(a1, a2 & 1);
    if (!v3)
    {
      uint64_t v11 = (void *)result;
      if (MEMORY[0x1895C3C6C]() == XPCTypeDictionary)
      {
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = a3;
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = sub_188376E34;
        *(void *)(v16 + 24) = v15;
        void v19[4] = sub_18835E08C;
        v19[5] = v16;
        v19[0] = MEMORY[0x1895F87A0];
        v19[1] = 1107296256LL;
        v19[2] = sub_188338060;
        v19[3] = &block_descriptor_50;
        BOOL v17 = _Block_copy(v19);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v11, v17);
        swift_unknownObjectRelease();
        _Block_release(v17);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0) {
          __break(1u);
        }
      }

      else
      {
        uint64_t v12 = sub_188386C44();
        swift_allocError();
        char v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
        void v14[3] = swift_getObjectType();
        *char v14 = a3;
        swift_unknownObjectRetain();
        sub_188386C14();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x1896193B8],  v12);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }

  else
  {
    uint64_t v7 = sub_188386C44();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C7084D0);
    v9[3] = swift_getObjectType();
    *uint64_t v9 = a3;
    swift_unknownObjectRetain();
    sub_188386C14();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x1896193B8],  v7);
    return swift_willThrow();
  }

  return result;
}

void sub_188373810( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  void (*v38)(__int128 *__return_ptr, __int128 *);
  id v39;
  void *v40;
  id v41;
  xpc_object_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v10 = v9;
  uint64_t v49 = (uint64_t *)(v10 + 16);
  swift_beginAccess();
  uint64_t v56 = a1;
  uint64_t v52 = a8;
  if ((*(_BYTE *)(v10 + 80) & 1) == 0)
  {
    uint64_t v47 = a3;
    uint64_t v48 = a5;
    uint64_t v18 = *(void *)(v10 + 16);
    uint64_t v19 = *(void *)(v10 + 48);
    uint64_t v20 = *(void *)(v10 + 64);
    uint64_t v21 = *(void *)(v10 + 88);
    *(void *)&uint64_t v57 = a1;
    uint64_t v45 = v18;
    sub_188365CD8(v18);
    sub_1883646C8(v19);
    sub_1883646C8(v20);
    unint64_t v55 = v21;
    swift_retain();
    swift_retain();
    id v22 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    if (swift_dynamicCast())
    {
      sub_188361AEC(v45);
      sub_188361B1C(v19);
      sub_188361B1C(v20);
      swift_release();
      swift_release();
      a8 = v52;
      a5 = v48;
      a3 = v47;
      if ((v61 & 1) == 0)
      {
LABEL_8:
        char v24 = 0;
LABEL_25:
        *a9 = v24;
        return;
      }
    }

    else
    {
      sub_188361AEC(v45);
      sub_188361B1C(v19);
      sub_188361B1C(v20);
      swift_release();
      swift_release();
      a8 = v52;
      a5 = v48;
      a3 = v47;
    }
  }

  *(void *)&uint64_t v57 = a1;
  id v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  if ((swift_dynamicCast() & 1) != 0 && (v61 & 1) != 0) {
    goto LABEL_8;
  }
  if (!a6)
  {
    if (a3)
    {
      uint64_t v38 = *(void (**)(__int128 *__return_ptr, __int128 *))(v10 + 16);
      if (!v38) {
        goto LABEL_33;
      }
      uint64_t v44 = *(void *)(v10 + 48);
      uint64_t v46 = *(void *)(v10 + 64);
      *(void *)&uint64_t v61 = a3;
      *((void *)&v61 + 1) = a4;
      uint64_t v62 = a5;
      uint64_t v39 = a1;
      sub_188365D08(a3);
      sub_188365CD8((uint64_t)v38);
      sub_1883646C8(v44);
      sub_1883646C8(v46);
      swift_retain();
      swift_retain();
      sub_188365CD8((uint64_t)v38);
      v38(&v57, &v61);
      sub_188361AEC((uint64_t)v38);
      unint64_t v55 = v57;
      if ((void)v57)
      {
        uint64_t v53 = v58;
        uint64_t v54 = *((void *)&v57 + 1);
        sub_188361AEC((uint64_t)v38);
        sub_188361B1C(v44);
        sub_188361B1C(v46);
        swift_release();
        swift_release();
        sub_188376DD4( a3,  a4,  a5,  (void (*)(void))MEMORY[0x18961B458],  (uint64_t (*)(uint64_t))MEMORY[0x18961B108]);
        goto LABEL_11;
      }

      sub_188361AEC((uint64_t)v38);
      sub_188361B1C(v44);
      sub_188361B1C(v46);
      swift_release();
      swift_release();
      sub_188376DD4( a3,  a4,  a5,  (void (*)(void))MEMORY[0x18961B458],  (uint64_t (*)(uint64_t))MEMORY[0x18961B108]);
    }

    else
    {
      uint64_t v41 = a1;
      id v42 = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (v42)
      {
        uint64_t v54 = 0xD000000000000019LL;
        unint64_t v55 = (uint64_t)v42;
        uint64_t v53 = 0x800000018838B7A0LL;
        goto LABEL_11;
      }
    }

    sub_188386A70();
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v43 = (void *)sub_188386B18();
    sub_18838668C();

    sub_18836E388(a2, (uint64_t)&v57);
    if (v59)
    {
      sub_18836E3D0(&v57, &v61);
      uint64_t v33 = *(void *)(v10 + 16);
      uint64_t v34 = *(void *)(v10 + 48);
      uint64_t v36 = a1;
      uint64_t v35 = *(void (**)(__int128 *, __int128 *))(v10 + 64);
      goto LABEL_14;
    }

    uint64_t v40 = a1;
LABEL_21:

    sub_188344660((uint64_t)&v57, &qword_18C7088D0);
LABEL_24:
    char v24 = 1;
    goto LABEL_25;
  }

  id v25 = a1;
  uint64_t v54 = a7;
  unint64_t v55 = a6;
  uint64_t v53 = a8;
LABEL_11:
  uint64_t v26 = *(void *)(v10 + 16);
  uint64_t v27 = *(void *)(v10 + 48);
  uint64_t v28 = *(void *)(v10 + 64);
  id v29 = a1;
  sub_188365D08(a6);
  sub_188365CD8(v26);
  sub_1883646C8(v27);
  sub_1883646C8(v28);
  swift_retain();
  swift_retain();
  a6 = v53;
  sub_188365D08(v55);
  a8 = 0LL;
  sub_188373528(a1, 0, v55);
  sub_188376DD4( v55,  v54,  v53,  (void (*)(void))MEMORY[0x18961B458],  (uint64_t (*)(uint64_t))MEMORY[0x18961B108]);

  sub_188361AEC(v26);
  sub_188361B1C(v27);
  sub_188361B1C(v28);
  swift_release();
  swift_release();
  a7 = *v49;
  if (*v49)
  {
    uint64_t v30 = *(void *)(v10 + 64);
    uint64_t v31 = *(void *)(v10 + 48);
    char v32 = *(void (**)(__int128 *))(v10 + 32);
    *(void *)&uint64_t v57 = v55;
    *((void *)&v57 + 1) = v54;
    uint64_t v58 = v53;
    sub_188365CD8(a7);
    sub_1883646C8(v31);
    sub_1883646C8(v30);
    swift_retain();
    swift_retain();
    sub_188365CD8(a7);
    v32(&v57);
    sub_188361AEC(a7);
    sub_188361AEC(a7);
    sub_188361B1C(v31);
    sub_188361B1C(v30);
    swift_release();
    swift_release();
    sub_188376DD4( v55,  v54,  v53,  (void (*)(void))MEMORY[0x18961B458],  (uint64_t (*)(uint64_t))MEMORY[0x18961B108]);
    sub_18836E388(a2, (uint64_t)&v57);
    if (v59)
    {
      sub_18836E3D0(&v57, &v61);
      uint64_t v33 = *(void *)(v10 + 16);
      uint64_t v34 = *(void *)(v10 + 48);
      uint64_t v35 = *(void (**)(__int128 *, __int128 *))(v10 + 64);
      uint64_t v36 = v56;
LABEL_14:
      *(void *)&uint64_t v57 = v36;
      uint64_t v60 = 1;
      id v37 = v36;
      sub_188365CD8(v33);
      sub_1883646C8(v34);
      if (v35)
      {
        sub_1883646C8((uint64_t)v35);
        swift_retain();
        swift_retain();
        v35(&v61, &v57);
      }

      else
      {
        sub_1883646C8(0LL);
        swift_retain();
        swift_retain();
      }

      sub_188344660((uint64_t)&v57, (uint64_t *)&unk_18C4E7920);
      sub_188361AEC(v33);
      sub_188361B1C(v34);
      sub_188361B1C((uint64_t)v35);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v61);

      goto LABEL_24;
    }

    uint64_t v40 = a1;
    goto LABEL_21;
  }

  __break(1u);
LABEL_33:
  __break(1u);
  sub_188376DD4(v55, a7, a6, (void (*)(void))MEMORY[0x18961B458], (uint64_t (*)(uint64_t))MEMORY[0x18961B108]);
  *(void *)&uint64_t v57 = 0LL;
  *((void *)&v57 + 1) = 0xE000000000000000LL;
  sub_188386BB4();
  sub_1883868E4();
  *(void *)&uint64_t v61 = a8;
  sub_188386C8C();
  sub_188386CB0();
  __break(1u);
}

void sub_18837411C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  *(_BYTE *)(v5 + 104) = 1;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 64);
  sub_188365CD8(v7);
  sub_1883646C8(v8);
  sub_1883646C8(v9);
  swift_retain();
  swift_retain();
  sub_188354AA0(a1, (uint64_t *)v27);
  swift_bridgeObjectRelease();
  sub_188361AEC(v7);
  sub_188361B1C(v8);
  sub_188361B1C(v9);
  swift_release();
  swift_release();
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 64);
  sub_188365CD8(v10);
  sub_1883646C8(v11);
  sub_1883646C8(v12);
  swift_retain();
  swift_retain();
  sub_188354AA0(a1, (uint64_t *)v27);
  sub_188361AEC(v10);
  sub_188361B1C(v11);
  sub_188361B1C(v12);
  swift_release();
  swift_release();
  __int128 v13 = v27[0];
  swift_beginAccess();
  uint64_t v14 = *(void *)(v5 + 112);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_18837191C(v13, *((uint64_t *)&v13 + 1));
    uint64_t v16 = (void (*)(_OWORD *))a4;
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = *(void (**)(uint64_t *))(*(void *)(v14 + 56) + 16 * v15);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = a4;
      *(void *)(v19 + 24) = a5;
      swift_retain();
      sub_1883646C8(a4);
      v18(&v29);
      swift_release_n();
      swift_release();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = (void (*)(_OWORD *))a4;
  }

  sub_18836C554();
  uint64_t v20 = (void *)swift_allocError();
  *uint64_t v21 = 0;
  swift_willThrow();
  uint64_t v22 = v29;
  uint64_t v23 = v30;
  uint64_t v24 = v31;
  memset(v27, 0, sizeof(v27));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_188373810(v20, (uint64_t)v27, v22, v23, v24, 0LL, 0LL, 0LL, v28);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_188344660((uint64_t)v27, &qword_18C7088D0);
  if (v16)
  {
    LOBYTE(v27[0]) = v28[0];
    v16(v27);
  }
}

void sub_18837452C()
{
}

void sub_188374534(xpc_object_t *a1)
{
}

void sub_188374540(xpc_object_t *a1)
{
}

uint64_t sub_188374590()
{
  if ((v6 & 1) != 0)
  {
    sub_1883491B4();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    *uint64_t v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1883625C4(v3, v4, v5, 1);
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }

  return result;
}

uint64_t sub_188374634@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v23[1] = a5;
  uint64_t v24 = a1;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for MessageWrapper(0LL, v12, v13, v14);
  uint64_t v25 = *(void *)(v15 - 8);
  MEMORY[0x1895F8860](v15);
  char v17 = (void *)((char *)v23 - v16);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v24, a2);
  uint64_t v24 = v5;
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v11, a2, a3, a4, v17);
  uint64_t v18 = MEMORY[0x1895C375C](&protocol conformance descriptor for MessageWrapper<A>, v15);
  xpc_object_t v19 = v26[7];
  uint64_t v20 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v17, v15, v18);
  if (!v19)
  {
    uint64_t v22 = (void *)v20;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 8))(v17, v15);
    swift_setDeallocating();
    swift_release();
    v26[0] = v22;
    v26[1] = (xpc_object_t)0xD000000000000019LL;
    v26[2] = (xpc_object_t)0x800000018838B7A0LL;
    swift_unknownObjectRetain();
    sub_188374540(v26);
  }

  (*(void (**)(uint64_t *, uint64_t))(v25 + 8))(v17, v15);
  swift_setDeallocating();
  return swift_release();
}

uint64_t sub_188374810(void **a1, dispatch_queue_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a1;
  swift_weakInit();
  uint64_t v10 = *(_xpc_connection_s **)(v5 + 24);
  uint64_t v11 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a3;
  uint64_t v12[3] = a4;
  v12[4] = v11;
  void v15[4] = sub_188374A4C;
  void v15[5] = v12;
  v15[0] = MEMORY[0x1895F87A0];
  v15[1] = 1107296256LL;
  v15[2] = sub_188362D84;
  v15[3] = &block_descriptor_6;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  swift_release();
  xpc_connection_send_message_with_reply(v10, v9, a2, v13);
  _Block_release(v13);
  return swift_weakDestroy();
}

uint64_t sub_188374954()
{
  return swift_deallocObject();
}

void sub_188374978()
{
}

uint64_t sub_1883749D4()
{
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  char v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  void v6[2] = v10;
  char v7 = v11;
  v0(v6);
  return sub_1883625C4(v1, v2, v3, v4);
}

uint64_t sub_188374A20()
{
  return swift_deallocObject();
}

void sub_188374A4C()
{
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

void sub_188374A70(dispatch_queue_t targetq)
{
}

void sub_188374A7C()
{
}

void SystemXPCConnection.__allocating_init()()
{
}

void SystemXPCConnection.init()()
{
}

uint64_t sub_188374ADC()
{
  return swift_unknownObjectRelease();
}

uint64_t SystemXPCConnection.deinit()
{
  return v0;
}

uint64_t SystemXPCConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_188374B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[4];
  v2[4] = a1;
  v2[5] = a2;
  swift_retain();
  sub_188361B1C(v3);
  char v4 = (_xpc_connection_s *)v2[3];
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  void v7[4] = sub_188374DE8;
  void v7[5] = v5;
  v7[0] = MEMORY[0x1895F87A0];
  v7[1] = 1107296256LL;
  v7[2] = sub_188362D84;
  v7[3] = &block_descriptor_9_0;
  char v6 = _Block_copy(v7);
  swift_release();
  xpc_connection_set_event_handler(v4, v6);
  _Block_release(v6);
}

uint64_t sub_188374C00()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 32))
    {
      swift_getObjectType();
      swift_retain();
      OS_xpc_object.type.getter();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_188374DE8()
{
  return sub_188374C00();
}

uint64_t SystemXPCListenerConnection.deinit()
{
  return sub_18837564C((void (*)(void, void))sub_188376E84);
}

uint64_t SystemXPCListenerConnection.__deallocating_deinit()
{
  return sub_188375690((void (*)(void, void))sub_188376E84);
}

void sub_188374E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  void v3[4] = a1;
  v3[5] = a2;
  swift_retain();
  sub_188361B1C(v6);
  char v7 = (_xpc_connection_s *)v3[3];
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v8;
  v9[3] = a1;
  v9[4] = a2;
  void v11[4] = sub_188375440;
  void v11[5] = v9;
  v11[0] = MEMORY[0x1895F87A0];
  v11[1] = 1107296256LL;
  void v11[2] = sub_188362D84;
  void v11[3] = &block_descriptor_18;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v7, v10);
  _Block_release(v10);
}

uint64_t sub_188374F18(void *a1)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_unknownObjectRetain();
    sub_18837C1BC();
  }

  uint64_t v3 = (const char *)Strong;
  uint64_t v4 = XPCTypeDictionary;
  if (v4 != MEMORY[0x1895C3C6C](a1)
    || (type metadata accessor for XPCSideChannel(),
        swift_unknownObjectRetain(),
        swift_retain(),
        char v5 = sub_188376230(a1, 0xD000000000000019LL, 0x800000018838B7A0LL, v3),
        swift_bridgeObjectRelease(),
        swift_unknownObjectRelease(),
        swift_release(),
        (v5 & 1) == 0))
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_1883476E8(MEMORY[0x18961AFE8]);
    XPCError.init(_:from:userInfo:)();
  }

  return swift_release();
}

uint64_t sub_188375440(void *a1)
{
  return sub_188374F18(a1);
}

_BYTE *sub_18837544C(_BYTE *result)
{
  if ((*result & 1) == 0)
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_18837C1BC();
  }

  return result;
}

void sub_1883754E8()
{
  if (!*(void *)(v0 + 32))
  {
    *(void *)(v0 + 32) = nullsub_1;
    *(void *)(v0 + 40) = 0LL;
    sub_188361B1C(0LL);
    uint64_t v1 = *(_xpc_connection_s **)(v0 + 24);
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    uint64_t v3 = (void *)swift_allocObject();
    _OWORD v3[2] = v2;
    v3[3] = nullsub_1;
    void v3[4] = 0LL;
    v5[4] = sub_188376E80;
    v5[5] = v3;
    v5[0] = MEMORY[0x1895F87A0];
    v5[1] = 1107296256LL;
    void v5[2] = sub_188362D84;
    void v5[3] = &block_descriptor_26_0;
    uint64_t v4 = _Block_copy(v5);
    swift_release();
    xpc_connection_set_event_handler(v1, v4);
    _Block_release(v4);
  }

  xpc_connection_activate(*(xpc_connection_t *)(v0 + 24));
}

uint64_t objectdestroy_14Tm()
{
  return swift_deallocObject();
}

const char *sub_18837560C()
{
  uint64_t result = xpc_connection_get_name(*(xpc_connection_t *)(v0 + 24));
  if (result) {
    return (const char *)sub_1883868F0();
  }
  return result;
}

uint64_t sub_188375638()
{
  return sub_188361B1C(*(void *)(v0 + 32));
}

uint64_t SystemXPCPeerConnection.deinit()
{
  return sub_18837564C((void (*)(void, void))sub_188361B1C);
}

uint64_t sub_18837564C(void (*a1)(void, void))
{
  return v1;
}

uint64_t SystemXPCPeerConnection.__deallocating_deinit()
{
  return sub_188375690((void (*)(void, void))sub_188361B1C);
}

uint64_t sub_188375690(void (*a1)(void, void))
{
  return swift_deallocClassInstance();
}

void *static SystemXPCConnection.anonymousListenerConnection(targetQueue:)(dispatch_queue_t targetq)
{
  xpc_connection_t v1 = xpc_connection_create(0LL, targetq);
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = v1;
  return result;
}

uint64_t type metadata accessor for SystemXPCListenerConnection()
{
  return objc_opt_self();
}

void *static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)( uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  uint64_t v4 = sub_1883868A8();
  xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)(v4 + 32), a3, 1uLL);
  swift_release();
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = mach_service;
  return result;
}

void *static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)( uint64_t a1, uint64_t a2, char a3, dispatch_queue_s *a4)
{
  if ((a3 & 1) != 0) {
    uint64_t v5 = 2LL;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_1883868A8();
  xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)(v6 + 32), a4, v5);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = mach_service;
  return result;
}

void *static SystemXPCConnection.xpcServiceConnection(name:targetQueue:)( uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  uint64_t v4 = sub_1883868A8();
  xpc_connection_t v5 = xpc_connection_create((const char *)(v4 + 32), a3);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = v5;
  return result;
}

void *static SystemXPCConnection.unsafeListener(from:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = 0LL;
  v2[5] = 0LL;
  v2[2] = MEMORY[0x18961AFE8];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

void *XPCPeerEndpoint.createConnection()()
{
  xpc_connection_t v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = v0;
  return result;
}

void *XPCListenerEndpoint.createConnection()()
{
  xpc_connection_t v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0LL;
  result[5] = 0LL;
  result[2] = MEMORY[0x18961AFE8];
  result[3] = v0;
  return result;
}

uint64_t type metadata accessor for SystemXPCConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for SystemXPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemXPCConnection.sendSync<A>(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t method lookup function for SystemXPCListenerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for SystemXPCPeerConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t sub_188375A0C()
{
  return swift_deallocObject();
}

_BYTE *sub_188375A40(_BYTE *result)
{
  return sub_18837544C(result);
}

uint64_t sub_188375A4C()
{
  return swift_deallocObject();
}

uint64_t sub_188375A90(void *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  void (*v54)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  void (*v55)(__int128 *, void *);
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  void v64[2];
  __int128 v65;
  unint64_t v66;
  char v67;
  uint64_t v62 = a2;
  uint64_t v63 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t v7 = MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8860](v7);
  uint64_t v12 = (char *)v53 - v11;
  uint64_t v13 = MEMORY[0x1895F8860](v10);
  uint64_t v15 = (char *)v53 - v14;
  MEMORY[0x1895F8860](v13);
  char v17 = (char *)v53 - v16;
  uint64_t v18 = sub_18838662C();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8860](v18);
  uint64_t v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }

  uint64_t v60 = v12;
  uint64_t v61 = v21;
  sub_1883868F0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1883865E4();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v15, 1LL, v18) == 1)
  {
    sub_188344660((uint64_t)v15, &qword_18C4E7960);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1LL, 1LL, v18);
LABEL_6:
    sub_188344660((uint64_t)v17, &qword_18C4E7960);
    return 0LL;
  }

  uint64_t v24 = v15;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v25(v17, v24, v18);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26((uint64_t)v17, 0LL, 1LL, v18);
  if (v22(v17, 1LL, v18) == 1) {
    goto LABEL_6;
  }
  uint64_t v27 = v25;
  uint64_t v28 = (uint64_t)v61;
  uint64_t v56 = v27;
  uint64_t v57 = v26;
  v27(v61, v17, v18);
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  sub_18834669C(v28, (uint64_t *)&v65);
  objc_msgSend(v29, sel_unlock);
  uint64_t v30 = v65;
  if (!(void)v65)
  {
    uint64_t v38 = 0LL;
    uint64_t v59 = 0LL;
    goto LABEL_20;
  }

  char v32 = (void (*)(__int128 *, void *))*((void *)&v65 + 1);
  unint64_t v31 = v66;
  uint64_t v33 = swift_allocObject();
  unint64_t v55 = v32;
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v31;
  uint64_t v59 = v33;
  uint64_t v34 = *(void *)(v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v34)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(void *)&uint64_t v65 = a1;
    *((void *)&v65 + 1) = v62;
    uint64_t v66 = a3;
    uint64_t v67 = 0;
    goto LABEL_17;
  }

  v53[0] = v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  v53[1] = v31;
  uint64_t v54 = *(void (**)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)v63 + 208LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v58 = v30;
  v54(&v65, sub_18834943C, v34, MEMORY[0x1896184C8]);
  swift_release();
  if ((v65 & 1) == 0)
  {
    LODWORD(v62) = sub_188386A70();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1883895E0;
    uint64_t v65 = *(_OWORD *)v53[0];
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7088A8);
    sub_18838689C();
    uint64_t v41 = sub_18838683C();
    swift_bridgeObjectRelease();
    unint64_t v55 = (void (*)(__int128 *, void *))sub_188352280(0LL, &qword_18C708510);
    *(void *)(v40 + 56) = v55;
    unint64_t v42 = sub_188376D48();
    *(void *)(v40 + 64) = v42;
    *(void *)(v40 + 32) = v41;
    *(void *)&uint64_t v65 = v63;
    *((void *)&v65 + 1) = &protocol witness table for RemoteXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7088C0);
    sub_18838689C();
    uint64_t v43 = sub_18838683C();
    swift_bridgeObjectRelease();
    *(void *)(v40 + 96) = v55;
    *(void *)(v40 + 104) = v42;
    *(void *)(v40 + 72) = v43;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v44 = (void *)sub_188386B18();
    sub_18838668C();
    uint64_t v45 = v58;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v38 = sub_188376D44;
    uint64_t v30 = v45;
LABEL_20:
    xpc_object_t reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_188376DD4( v30,  (uint64_t)v38,  v59,  (void (*)(void))MEMORY[0x18961B3C8],  (uint64_t (*)(uint64_t))MEMORY[0x18961B3C8]);
      uint64_t v48 = v61;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v48, v18);
      return 1LL;
    }

    uint64_t v47 = reply;
    uint64_t v58 = v30;
    *(void *)&uint64_t v65 = reply;
    *((void *)&v65 + 1) = 0xD000000000000019LL;
    uint64_t v63 = "v20@?0@OS_remote_device8B16";
    uint64_t v66 = 0x800000018838B7A0LL;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1883868F0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1883865E4();
      swift_bridgeObjectRelease();
      if (v22(v9, 1LL, v18) != 1)
      {
        uint64_t v50 = (uint64_t)v60;
        v56(v60, v9, v18);
        uint64_t v49 = 0LL;
        uint64_t v48 = v61;
        goto LABEL_28;
      }

      sub_188344660((uint64_t)v9, &qword_18C4E7960);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    uint64_t v49 = 1LL;
    uint64_t v50 = (uint64_t)v60;
    uint64_t v48 = v61;
LABEL_28:
    v57(v50, v49, 1LL, v18);
    sub_188345B34(v50);
    swift_unknownObjectRelease();
    uint64_t v51 = xpc_dictionary_get_remote_connection(v47);
    if (v51)
    {
      uint64_t v52 = v51;
      objc_opt_self();
      if (swift_dynamicCastObjCClass()) {
        xpc_remote_connection_send_message();
      }
      else {
        xpc_connection_send_message(v52, v47);
      }
      swift_unknownObjectRelease();
    }

    sub_188376DD4( v58,  (uint64_t)v38,  v59,  (void (*)(void))MEMORY[0x18961B3C8],  (uint64_t (*)(uint64_t))MEMORY[0x18961B3C8]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }

  uint64_t v35 = *(const char **)v53[0];
  *(void *)&uint64_t v65 = a1;
  *((void *)&v65 + 1) = v62;
  uint64_t v66 = a3;
  uint64_t v67 = 0;
  if (!v35)
  {
LABEL_17:
    id v37 = v63;
    swift_retain();
    uint64_t v36 = &protocol witness table for RemoteXPCPeerConnection;
    goto LABEL_18;
  }

  uint64_t v36 = *(_UNKNOWN ***)(v53[0] + 8LL);
  id v37 = v35;
LABEL_18:
  uint64_t v39 = v61;
  v64[0] = v37;
  v64[1] = v36;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v55(&v65, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
  return 1LL;
}

uint64_t sub_188376230(void *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  void (*v54)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  void (*v55)(__int128 *, void *);
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  void v64[2];
  __int128 v65;
  unint64_t v66;
  char v67;
  uint64_t v62 = a2;
  uint64_t v63 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7960);
  uint64_t v7 = MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8860](v7);
  uint64_t v12 = (char *)v53 - v11;
  uint64_t v13 = MEMORY[0x1895F8860](v10);
  uint64_t v15 = (char *)v53 - v14;
  MEMORY[0x1895F8860](v13);
  char v17 = (char *)v53 - v16;
  uint64_t v18 = sub_18838662C();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8860](v18);
  uint64_t v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }

  uint64_t v60 = v12;
  uint64_t v61 = v21;
  sub_1883868F0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1883865E4();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v15, 1LL, v18) == 1)
  {
    sub_188344660((uint64_t)v15, &qword_18C4E7960);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1LL, 1LL, v18);
LABEL_6:
    sub_188344660((uint64_t)v17, &qword_18C4E7960);
    return 0LL;
  }

  uint64_t v24 = v15;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v25(v17, v24, v18);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26((uint64_t)v17, 0LL, 1LL, v18);
  if (v22(v17, 1LL, v18) == 1) {
    goto LABEL_6;
  }
  uint64_t v27 = v25;
  uint64_t v28 = (uint64_t)v61;
  uint64_t v56 = v27;
  uint64_t v57 = v26;
  v27(v61, v17, v18);
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  sub_18834669C(v28, (uint64_t *)&v65);
  objc_msgSend(v29, sel_unlock);
  uint64_t v30 = v65;
  if (!(void)v65)
  {
    uint64_t v38 = 0LL;
    uint64_t v59 = 0LL;
    goto LABEL_20;
  }

  char v32 = (void (*)(__int128 *, void *))*((void *)&v65 + 1);
  unint64_t v31 = v66;
  uint64_t v33 = swift_allocObject();
  unint64_t v55 = v32;
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v31;
  uint64_t v59 = v33;
  uint64_t v34 = *(void *)(v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v34)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(void *)&uint64_t v65 = a1;
    *((void *)&v65 + 1) = v62;
    uint64_t v66 = a3;
    uint64_t v67 = 0;
    goto LABEL_17;
  }

  v53[0] = v30 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  v53[1] = v31;
  uint64_t v54 = *(void (**)(__int128 *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)v63 + 208LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v58 = v30;
  v54(&v65, sub_18834943C, v34, MEMORY[0x1896184C8]);
  swift_release();
  if ((v65 & 1) == 0)
  {
    LODWORD(v62) = sub_188386A70();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1883895E0;
    uint64_t v65 = *(_OWORD *)v53[0];
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7088A8);
    sub_18838689C();
    uint64_t v41 = sub_18838683C();
    swift_bridgeObjectRelease();
    unint64_t v55 = (void (*)(__int128 *, void *))sub_188352280(0LL, &qword_18C708510);
    *(void *)(v40 + 56) = v55;
    unint64_t v42 = sub_188376D48();
    *(void *)(v40 + 64) = v42;
    *(void *)(v40 + 32) = v41;
    *(void *)&uint64_t v65 = v63;
    *((void *)&v65 + 1) = &protocol witness table for SystemXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C7088C0);
    sub_18838689C();
    uint64_t v43 = sub_18838683C();
    swift_bridgeObjectRelease();
    *(void *)(v40 + 96) = v55;
    *(void *)(v40 + 104) = v42;
    *(void *)(v40 + 72) = v43;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v44 = (void *)sub_188386B18();
    sub_18838668C();
    uint64_t v45 = v58;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v38 = sub_188376D44;
    uint64_t v30 = v45;
LABEL_20:
    xpc_object_t reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_188376DD4( v30,  (uint64_t)v38,  v59,  (void (*)(void))MEMORY[0x18961B3C8],  (uint64_t (*)(uint64_t))MEMORY[0x18961B3C8]);
      uint64_t v48 = v61;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v48, v18);
      return 1LL;
    }

    uint64_t v47 = reply;
    uint64_t v58 = v30;
    *(void *)&uint64_t v65 = reply;
    *((void *)&v65 + 1) = 0xD000000000000019LL;
    uint64_t v63 = "v20@?0@OS_remote_device8B16";
    uint64_t v66 = 0x800000018838B7A0LL;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1883868F0();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1883865E4();
      swift_bridgeObjectRelease();
      if (v22(v9, 1LL, v18) != 1)
      {
        uint64_t v50 = (uint64_t)v60;
        v56(v60, v9, v18);
        uint64_t v49 = 0LL;
        uint64_t v48 = v61;
        goto LABEL_28;
      }

      sub_188344660((uint64_t)v9, &qword_18C4E7960);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    uint64_t v49 = 1LL;
    uint64_t v50 = (uint64_t)v60;
    uint64_t v48 = v61;
LABEL_28:
    v57(v50, v49, 1LL, v18);
    sub_188345B34(v50);
    swift_unknownObjectRelease();
    uint64_t v51 = xpc_dictionary_get_remote_connection(v47);
    if (v51)
    {
      uint64_t v52 = v51;
      objc_opt_self();
      if (swift_dynamicCastObjCClass()) {
        xpc_remote_connection_send_message();
      }
      else {
        xpc_connection_send_message(v52, v47);
      }
      swift_unknownObjectRelease();
    }

    sub_188376DD4( v58,  (uint64_t)v38,  v59,  (void (*)(void))MEMORY[0x18961B3C8],  (uint64_t (*)(uint64_t))MEMORY[0x18961B3C8]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }

  uint64_t v35 = *(const char **)v53[0];
  *(void *)&uint64_t v65 = a1;
  *((void *)&v65 + 1) = v62;
  uint64_t v66 = a3;
  uint64_t v67 = 0;
  if (!v35)
  {
LABEL_17:
    id v37 = v63;
    swift_retain();
    uint64_t v36 = &protocol witness table for SystemXPCPeerConnection;
    goto LABEL_18;
  }

  uint64_t v36 = *(_UNKNOWN ***)(v53[0] + 8LL);
  id v37 = v35;
LABEL_18:
  uint64_t v39 = v61;
  v64[0] = v37;
  v64[1] = v36;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v55(&v65, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
  return 1LL;
}

uint64_t sub_1883769D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = (void *)MEMORY[0x18961AFE8];
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  sub_1883467F4(a3, (uint64_t)&protocol witness table for RemoteXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  uint64_t v7 = v18;
  uint64_t v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 6;
    do
    {
      uint64_t v13 = *(v9 - 2);
      uint64_t v12 = (void (*)(void *, void *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      void v16[2] = 0LL;
      char v17 = 1;
      if (*(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        uint64_t v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        uint64_t v10 = *(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }

      else
      {
        swift_retain();
        uint64_t v10 = a3;
        uint64_t v11 = &protocol witness table for RemoteXPCPeerConnection;
      }

      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_188376B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = (void *)MEMORY[0x18961AFE8];
  if (qword_18C4E77A0 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_18C4E7790;
  objc_msgSend((id)qword_18C4E7790, sel_lock);
  sub_1883467F4(a3, (uint64_t)&protocol witness table for SystemXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  uint64_t v7 = v18;
  uint64_t v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 6;
    do
    {
      uint64_t v13 = *(v9 - 2);
      uint64_t v12 = (void (*)(void *, void *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      void v16[2] = 0LL;
      char v17 = 1;
      if (*(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        uint64_t v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        uint64_t v10 = *(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }

      else
      {
        swift_retain();
        uint64_t v10 = a3;
        uint64_t v11 = &protocol witness table for SystemXPCPeerConnection;
      }

      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_188376D20()
{
  return swift_deallocObject();
}

unint64_t sub_188376D48()
{
  unint64_t result = qword_18C7088B8;
  if (!qword_18C7088B8)
  {
    uint64_t v1 = sub_188352280(255LL, &qword_18C708510);
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x18961BB20], v1);
    atomic_store(result, (unint64_t *)&qword_18C7088B8);
  }

  return result;
}

uint64_t sub_188376DA0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

char *sub_188376DCC(char *a1)
{
  return sub_18836B638(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_188376DD4( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t))
{
  if (result)
  {
    a4();
    return a5(a3);
  }

  return result;
}

uint64_t sub_188376E10()
{
  return swift_deallocObject();
}

uint64_t sub_188376E34(char *a1, void *a2)
{
  return sub_188338014(a1, a2, *(xpc_object_t *)(v2 + 16));
}

uint64_t sub_188376E3C()
{
  return swift_deallocObject();
}

uint64_t sub_188376E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, void *))(v3 + 16);
  v6[0] = a2;
  v6[1] = a3;
  return v4(a1, v6);
}

uint64_t sub_188376EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188386650();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  uint64_t v5 = MEMORY[0x1895F8860](v4);
  uint64_t v56 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v5);
  uint64_t v60 = (char *)&v54 - v7;
  uint64_t v8 = sub_188386410();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](v8);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a1 - 8);
  uint64_t v14 = MEMORY[0x1895F8860](v10);
  unint64_t v55 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  uint64_t v57 = (char *)&v54 - v17;
  uint64_t v18 = MEMORY[0x1895F8860](v16);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t v21 = MEMORY[0x1895F8860](v18);
  uint64_t v23 = (char *)&v54 - v22;
  MEMORY[0x1895F8860](v21);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v26((char *)&v54 - v24, (char *)v62, a1);
  sub_1883863EC();
  uint64_t v62 = v26;
  v26(v23, v25, a1);
  uint64_t v27 = sub_188386FB0();
  uint64_t v61 = a2;
  if (v27)
  {
    uint64_t v28 = (void *)v27;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, a1);
  }

  else
  {
    uint64_t v28 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29, v23, a1);
  }

  sub_188349470(&qword_18C708920, (uint64_t (*)(uint64_t))MEMORY[0x189605F60], MEMORY[0x189605F58]);
  char v30 = sub_1883864E8();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((v30 & 1) != 0) {
    goto LABEL_13;
  }
  int v63 = sub_188386428();
  unint64_t v31 = v62;
  v62(v20, v25, a1);
  uint64_t v32 = sub_188386FB0();
  if (v32)
  {
    uint64_t v33 = (void *)v32;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a1);
  }

  else
  {
    uint64_t v33 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v34, v20, a1);
  }

  sub_1883791A8();
  char v35 = sub_1883864E8();

  if ((v35 & 1) != 0) {
    goto LABEL_13;
  }
  sub_188386668();
  uint64_t v36 = v57;
  v31(v57, v25, a1);
  uint64_t v37 = sub_188386FB0();
  if (v37)
  {
    uint64_t v38 = (void *)v37;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v36, a1);
  }

  else
  {
    uint64_t v38 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v39, v36, a1);
  }

  sub_188349470(&qword_18C708928, (uint64_t (*)(uint64_t))MEMORY[0x189606FC8], MEMORY[0x189606FC0]);
  uint64_t v40 = v59;
  uint64_t v41 = v60;
  char v42 = sub_1883864E8();

  uint64_t v43 = *(void (**)(char *, uint64_t))(v58 + 8);
  v43(v41, v40);
  if ((v42 & 1) != 0)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v25, a1);
    char v44 = 1;
  }

  else
  {
    uint64_t v46 = v56;
    sub_188386644();
    uint64_t v47 = *(void (**)(void))(v13 + 32);
    uint64_t v48 = v13;
    uint64_t v49 = v55;
    v47();
    uint64_t v50 = sub_188386FB0();
    if (v50)
    {
      uint64_t v51 = (void *)v50;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, a1);
    }

    else
    {
      uint64_t v51 = (void *)swift_allocError();
      ((void (*)(uint64_t, char *, uint64_t))v47)(v52, v49, a1);
    }

    uint64_t v53 = v59;
    char v44 = sub_1883864E8();

    v43(v46, v53);
  }

  return v44 & 1;
}

uint64_t sub_188377364(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_188386650();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  MEMORY[0x1895F8860](v5);
  unint64_t v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_188386410();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1895F8860](v7);
  uint64_t v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8860](v8);
  uint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = *(void *)(a1 - 8);
  uint64_t v14 = MEMORY[0x1895F8860](v10);
  uint64_t v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  uint64_t v56 = (char *)&v51 - v17;
  uint64_t v18 = MEMORY[0x1895F8860](v16);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v21 = MEMORY[0x1895F8860](v18);
  uint64_t v23 = (char *)&v51 - v22;
  MEMORY[0x1895F8860](v21);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24((char *)&v51 - v25, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708910);
  if (swift_dynamicCast())
  {
    sub_188352384(&v59, (uint64_t)v62);
    __swift_project_boxed_opaque_existential_1(v62, v63);
    uint64_t v26 = sub_188386458();
    __swift_project_boxed_opaque_existential_1(v62, v63);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v28 = v64;
    *((void *)&v60 + 1) = DynamicType;
    uint64_t v61 = v64;
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v59);
    static Error<>.unknown.getter(DynamicType, v28);
    char v29 = v26 == sub_188386458();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v59);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
  }

  else
  {
    uint64_t v61 = 0LL;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    sub_188344660((uint64_t)&v59, &qword_18C708918);
    v24(v23, v2, a1);
    sub_1883863F8();
    v24(v20, (uint64_t)v23, a1);
    uint64_t v30 = sub_188386FB0();
    uint64_t v51 = a2;
    if (v30)
    {
      unint64_t v31 = (void *)v30;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a1);
    }

    else
    {
      unint64_t v31 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v32, v20, a1);
    }

    uint64_t v33 = v58;
    sub_188349470(&qword_18C708920, (uint64_t (*)(uint64_t))MEMORY[0x189605F60], MEMORY[0x189605F58]);
    char v34 = sub_1883864E8();

    char v35 = *(void (**)(char *, uint64_t))(v33 + 8);
    v35(v12, v7);
    if ((v34 & 1) != 0) {
      goto LABEL_11;
    }
    uint64_t v36 = v57;
    sub_188386404();
    uint64_t v37 = v56;
    v24(v56, (uint64_t)v23, a1);
    uint64_t v38 = sub_188386FB0();
    if (v38)
    {
      uint64_t v39 = (void *)v38;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, a1);
    }

    else
    {
      uint64_t v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v40, v37, a1);
    }

    char v41 = sub_1883864E8();

    v35(v36, v7);
    if ((v41 & 1) != 0)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v23, a1);
      char v29 = 1;
    }

    else
    {
      char v42 = v55;
      sub_18838665C();
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      char v44 = v54;
      v43(v54, v23, a1);
      uint64_t v45 = sub_188386FB0();
      if (v45)
      {
        uint64_t v46 = (void *)v45;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v44, a1);
      }

      else
      {
        uint64_t v46 = (void *)swift_allocError();
        v43(v47, v44, a1);
      }

      uint64_t v49 = v52;
      uint64_t v48 = v53;
      sub_188349470(&qword_18C708928, (uint64_t (*)(uint64_t))MEMORY[0x189606FC8], MEMORY[0x189606FC0]);
      char v29 = sub_1883864E8();

      (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v48);
    }
  }

  return v29 & 1;
}

uint64_t Error.normalized<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8860](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v15 = sub_188377994(v8, v11, v12, v13, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v10, v2, a2);
  if (v15) {
    goto LABEL_5;
  }
  v16(v7, (uint64_t)v10, a2);
  uint64_t v17 = sub_188386FB0();
  if (!v17)
  {
    uint64_t v15 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19, v7, a2);
LABEL_5:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a2);
    return v15;
  }

  uint64_t v15 = v17;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v7, a2);
  v18(v10, a2);
  return v15;
}

uint64_t sub_188377994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v97 = a5;
  uint64_t v95 = a1;
  uint64_t v90 = sub_188386434();
  uint64_t v89 = *(void *)(v90 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](v90);
  uint64_t v88 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1895F8860](v10);
  uint64_t v94 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8860](v13);
  unint64_t v92 = (char *)&v85 - v16;
  uint64_t v17 = MEMORY[0x1895F8860](v15);
  uint64_t v19 = (char *)&v85 - v18;
  uint64_t v20 = MEMORY[0x1895F8860](v17);
  uint64_t v86 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8860](v20);
  uint64_t v87 = (char *)&v85 - v23;
  uint64_t v24 = MEMORY[0x1895F8860](v22);
  unint64_t v91 = (char *)&v85 - v25;
  uint64_t v26 = MEMORY[0x1895F8860](v24);
  uint64_t v93 = (char *)&v85 - v27;
  uint64_t v28 = MEMORY[0x1895F8860](v26);
  uint64_t v96 = (char *)&v85 - v29;
  uint64_t v30 = MEMORY[0x1895F8860](v28);
  uint64_t v32 = (char *)&v85 - v31;
  uint64_t v33 = MEMORY[0x1895F8860](v30);
  char v35 = (char *)&v85 - v34;
  MEMORY[0x1895F8860](v33);
  uint64_t v98 = v36;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v37((char *)&v85 - v38, v6, a2);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, a3);
    v37(v35, v6, a2);
    uint64_t v39 = sub_188386FB0();
    if (v39)
    {
      uint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v98 + 8))(v35, a2);
      return v40;
    }

    uint64_t v40 = swift_allocError();
    uint64_t v51 = v50;
    uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v98 + 32);
    uint64_t v53 = v35;
LABEL_11:
    v52(v51, v53, a2);
    return v40;
  }

  uint64_t v85 = v12;
  uint64_t v41 = a3;
  v37(v32, v6, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7088F8);
  if (swift_dynamicCast())
  {
    sub_188352384(v99, (uint64_t)v101);
    uint64_t v42 = v102;
    uint64_t v43 = v103;
    __swift_project_boxed_opaque_existential_1(v101, v102);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 16))(v95, a3, v97, v42, v43);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v101);
  }

  else
  {
    uint64_t v100 = 0LL;
    memset(v99, 0, sizeof(v99));
    sub_188344660((uint64_t)v99, &qword_18C708900);
    char v44 = sub_188376EBC(a2, a4);
    uint64_t v45 = v96;
    v37(v96, v6, a2);
    if ((v44 & 1) != 0)
    {
      LODWORD(v101[0]) = sub_188386428();
      uint64_t v46 = v93;
      v37(v93, (uint64_t)v45, a2);
      uint64_t v47 = sub_188386FB0();
      if (v47)
      {
        uint64_t v48 = (void *)v47;
        uint64_t v49 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v46, a2);
      }

      else
      {
        uint64_t v48 = (void *)swift_allocError();
        uint64_t v49 = v98;
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v56, v46, a2);
      }

      sub_1883791A8();
      char v57 = sub_1883864E8();

      unint64_t v55 = *(void (**)(char *, uint64_t))(v49 + 8);
      v55(v96, a2);
      if ((v57 & 1) == 0)
      {
        LODWORD(v101[0]) = 89;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1883883A0;
        *(void *)(inited + 32) = sub_188386860();
        *(void *)(inited + 40) = v69;
        *(void *)(inited + 72) = a2;
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 48));
        v37((char *)boxed_opaque_existential_0Tm, v6, a2);
        sub_1883382F4(inited);
        sub_188349470( (unint64_t *)&qword_18C708930,  (uint64_t (*)(uint64_t))MEMORY[0x189605FC8],  MEMORY[0x189605FB0]);
        id v71 = v88;
        uint64_t v72 = v90;
        sub_188386500();
        uint64_t v40 = sub_18838641C();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v72);
        return v40;
      }
    }

    else
    {
      uint64_t v49 = v98;
      unint64_t v55 = *(void (**)(char *, uint64_t))(v98 + 8);
      v55(v45, a2);
    }

    if ((sub_188377364(a2, a4) & 1) != 0)
    {
      uint64_t v58 = v97;
      static Error<>.unknown.getter(v41, v97);
      __int128 v59 = v91;
      v37(v91, v6, a2);
      uint64_t v60 = sub_188386FB0();
      if (v60)
      {
        uint64_t v61 = (void *)v60;
        v55(v59, a2);
      }

      else
      {
        uint64_t v61 = (void *)swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v73, v59, a2);
      }

      uint64_t v74 = v92;
      uint64_t v75 = v94;
      _Error.wrapping(_:)((uint64_t)v61, v41, v58);

      uint64_t v76 = v85;
      uint64_t v77 = *(void (**)(char *, uint64_t))(v85 + 8);
      v77(v75, v41);
      uint64_t v78 = sub_188386FB0();
      if (v78)
      {
        uint64_t v40 = v78;
        v77(v74, v41);
      }

      else
      {
        uint64_t v40 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v81, v74, v41);
      }
    }

    else
    {
      sub_1883733C0();
      uint64_t v62 = sub_188386E24();
      uint64_t v64 = static NSError.normalizationProvider<A>(forDomain:normalizingAs:)(v62, v63, v95, v41, v97);
      swift_bridgeObjectRelease();
      if (!v64)
      {
        uint64_t v79 = v86;
        v37(v86, v6, a2);
        uint64_t v80 = sub_188386FB0();
        if (v80)
        {
          uint64_t v40 = v80;
          v55(v79, a2);
          return v40;
        }

        uint64_t v40 = swift_allocError();
        uint64_t v51 = v84;
        uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v98 + 32);
        uint64_t v53 = v79;
        goto LABEL_11;
      }

      uint64_t v65 = v87;
      v37(v87, v6, a2);
      uint64_t v66 = sub_188386FB0();
      if (v66)
      {
        uint64_t v67 = (void *)v66;
        v55(v65, a2);
      }

      else
      {
        uint64_t v67 = (void *)swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v82, v65, a2);
      }

      uint64_t v83 = (void *)sub_18838650C();

      uint64_t v40 = v64((uint64_t)v83);
      sub_188361B1C((uint64_t)v64);
    }
  }

  return v40;
}

void *Error.normalized<A>(as:fallingBackTo:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1895F8860](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_188377994(v8, v11, v12, v13, v14);
  if (v15) {
    return (void *)v15;
  }
  uint64_t v16 = (void *)a2();
  uint64_t v36 = v16;
  id v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7088D8);
  if (swift_dynamicCast())
  {
    sub_188352384(&v33, (uint64_t)v37);
    uint64_t v18 = v38;
    uint64_t v19 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a4);
    uint64_t v20 = sub_188386FB0();
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a4);
    }

    else
    {
      uint64_t v21 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22, v10, a4);
    }

    *((void *)&v34 + 1) = v18;
    uint64_t v35 = v19;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v33);
    CustomNSError.wrapping(_:)(v21, v18, (uint64_t)boxed_opaque_existential_0Tm);

    uint64_t v24 = *((void *)&v34 + 1);
    uint64_t v25 = __swift_project_boxed_opaque_existential_1(&v33, *((uint64_t *)&v34 + 1));
    uint64_t v26 = *(void *)(v24 - 8);
    MEMORY[0x1895F8860](v25);
    uint64_t v28 = (char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v26 + 16))(v28);
    uint64_t v29 = sub_188386FB0();
    if (v29)
    {
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v24);
    }

    else
    {
      uint64_t v30 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v31, v28, v24);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v33);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    return (void *)v30;
  }

  else
  {
    uint64_t v35 = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    sub_188344660((uint64_t)&v33, &qword_18C7088E0);
  }

  return v16;
}

uint64_t (*static NSError.normalizationProvider<A>(forDomain:normalizingAs:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  if (qword_18C4E7880 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_18C4E7878;
  objc_msgSend((id)qword_18C4E7878, sel_lock);
  sub_188378FE0(a3, a1, a2, a5, &v12);
  objc_msgSend(v9, sel_unlock);
  if (!(void)v12) {
    return 0LL;
  }
  __int128 v11 = v12;
  *(_OWORD *)(swift_allocObject() + 16) = v11;
  return sub_188379118;
}

void withErrorsNormalized<A, B>(as:_:)(uint64_t a1, void (*a2)(void))
{
  if (v2)
  {
    swift_getErrorValue();
    Error.normalized<A>(as:)(a1, v4);
    swift_willThrow();
  }

void withErrorsNormalized<A, B>(as:fallingBackTo:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (v4)
  {
    uint64_t ErrorValue = swift_getErrorValue();
    MEMORY[0x1895F8860](ErrorValue);
    void v10[2] = a2;
    void v10[3] = a3;
    Error.normalized<A>(as:fallingBackTo:)(a1, sub_18834A3E4, (uint64_t)v10, v9);
    swift_willThrow();
  }

uint64_t withErrorsNormalized<A, B>(as:_:)( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a5;
  v7[8] = a7;
  void v7[6] = a2;
  __int128 v11 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[9] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_188378750;
  return v11(a1);
}

uint64_t sub_188378750()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_1883787BC()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_getErrorValue();
  Error.normalized<A>(as:)(v2, *(void *)(v0 + 24));
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withErrorsNormalized<A, B>(as:fallingBackTo:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a7;
  v7[10] = v12;
  v7[7] = a3;
  v7[8] = a4;
  void v7[6] = a2;
  __int128 v11 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[11] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1883788B0;
  return v11(a1);
}

uint64_t sub_1883788B0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_18837891C()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 48);
  __int128 v6 = *(_OWORD *)(v0 + 56);
  swift_getErrorValue();
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = v6;
  Error.normalized<A>(as:fallingBackTo:)(v2, sub_18834A828, v4, v3);
  swift_task_dealloc();
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCError.normalized<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8860](a1);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (ValueMetadata *)MEMORY[0x1895F8860](v7);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v14 = *v3;
  uint64_t v13 = v3[1];
  if (v10 == &type metadata for XPCError)
  {
    sub_1883491B4();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = v14;
    v20[1] = v13;
    swift_bridgeObjectRetain();
  }

  else
  {
    static Error<>.xpcError.getter(a2, a3);
    sub_1883491B4();
    uint64_t v15 = (void *)swift_allocError();
    *uint64_t v16 = v14;
    v16[1] = v13;
    swift_bridgeObjectRetain();
    _Error.wrapping(_:)((uint64_t)v15, a2, a3);

    id v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v9, a2);
    uint64_t v18 = sub_188386FB0();
    if (v18)
    {
      uint64_t v19 = v18;
      v17(v12, a2);
    }

    else
    {
      uint64_t v19 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21, v12, a2);
    }
  }

  return v19;
}

uint64_t sub_188378B88()
{
  return sub_188387268();
}

uint64_t sub_188378C28()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_188378CB8()
{
  return sub_188387268();
}

uint64_t sub_188378D54(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  if (a1[2] == a2[2] && a1[3] == a2[3]) {
    return 1LL;
  }
  else {
    return sub_188386FD4();
  }
}

void sub_188378D9C()
{
  off_18C4E7858 = (_UNKNOWN *)MEMORY[0x18961AFF0];
}

id sub_188378DB0()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  qword_18C4E7878 = (uint64_t)result;
  return result;
}

id static NSError.setNormalizationProvider<A>(forDomain:normalizingAs:provider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (qword_18C4E7880 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)qword_18C4E7878;
  objc_msgSend((id)qword_18C4E7878, sel_lock);
  sub_188378EB4(a3, a1, a2, v8, a4, a5, a6, a7);
  return objc_msgSend(v16, sel_unlock);
}

uint64_t sub_188378EB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = qword_18C4E7868;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a6;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = off_18C4E7858;
  off_18C4E7858 = (_UNKNOWN *)0x8000000000000000LL;
  sub_18837DB8C((uint64_t)sub_18837917C, v15, a1, a8, a2, a3, isUniquelyReferenced_nonNull_native);
  off_18C4E7858 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_188378FE0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v10 = qword_18C4E7868;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = off_18C4E7858;
  if (*((void *)off_18C4E7858 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_188371C34(a1, a4, a2, a3);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = (uint64_t *)(v11[7] + 16 * v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      swift_retain();
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v15 = 0LL;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v15 = 0LL;
  }

  *a5 = v16;
  a5[1] = v15;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1883790F4()
{
  return swift_deallocObject();
}

uint64_t sub_188379118(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

unint64_t sub_188379150(uint64_t a1)
{
  unint64_t result = sub_1883491B4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _NormalizableError.normalized<A>(as:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_18837917C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1883791A8()
{
  unint64_t result = qword_18C708908;
  if (!qword_18C708908)
  {
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189607030], MEMORY[0x18961D108]);
    atomic_store(result, (unint64_t *)&qword_18C708908);
  }

  return result;
}

uint64_t _s25_NormalizationProviderKeyVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s25_NormalizationProviderKeyVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwca(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s25_NormalizationProviderKeyVMa()
{
  return &_s25_NormalizationProviderKeyVN;
}

unint64_t sub_1883792BC()
{
  unint64_t result = qword_18C4E7870;
  if (!qword_18C4E7870)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A78C, &_s25_NormalizationProviderKeyVN);
    atomic_store(result, (unint64_t *)&qword_18C4E7870);
  }

  return result;
}

uint64_t XPCFileTransfer.__allocating_init(forFileAt:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileTransfer.init(forFileAt:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(forFileAt:)(char *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_18838656C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8860](v5);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v7);
  uint64_t v11 = (char *)v20 - v10;
  *(void *)(v3 + 16) = 0LL;
  *(_BYTE *)(v3 + 24) = -1;
  *(void *)(v3 + 32) = 0LL;
  *(_BYTE *)(v3 + 40) = 1;
  *(void *)(v3 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  unint64_t v12 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  char v13 = sub_18838653C();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = v14(v11, v5);
  if ((v13 & 1) != 0)
  {
    v12(v9, a1, v5);
    uint64_t v16 = sub_18834DACC(v9);
    if (v2)
    {
      swift_release();
      v14(a1, v5);
    }

    else
    {
      uint64_t v17 = v16;
      v14(a1, v5);
      uint64_t v18 = *(void *)(v3 + 16);
      *(void *)(v3 + 16) = v17;
      unsigned __int8 v19 = *(_BYTE *)(v3 + 24);
      *(_BYTE *)(v3 + 24) = 0;
      sub_18837AE88(v18, v19);
    }

    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t XPCFileTransfer.__allocating_init(fileDescriptor:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 32) = 0LL;
  *(_BYTE *)(v2 + 40) = 1;
  *(void *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  *(void *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = 0;
  sub_18837AE88(0LL, 0xFFu);
  return v2;
}

uint64_t XPCFileTransfer.init(fileDescriptor:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = -1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  unsigned __int8 v4 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 0;
  sub_18837AE88(v3, v4);
  return v1;
}

uint64_t sub_188379594()
{
  uint64_t v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, sel_lock);
  sub_1883795F8(v0, (uint64_t)&v3);
  objc_msgSend(v1, sel_unlock);
  return v3;
}

uint64_t sub_1883795F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1895F89C8];
  if (*(_BYTE *)(a1 + 40) != 1)
  {
    uint64_t result = *(void *)(a1 + 32);
    goto LABEL_13;
  }

  int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    uint64_t result = xpc_file_transfer_get_size();
    goto LABEL_11;
  }

  int v6 = *(_DWORD *)(v5 + 64);
  memset(&v11, 0, 28);
  memset(&v11.st_atimespec, 0, 112);
  sub_18837AEAC(v5, 0);
  if (fstat(v6, &v11))
  {
    sub_18837AE88(v5, v4);
    uint64_t result = -1LL;
    goto LABEL_11;
  }

  st_mode_t mode = v11.st_mode;
  int v9 = sub_188386710() & st_mode;
  LOWORD(st_mode) = sub_18838671C();
  sub_18837AE88(v5, v4);
  if (v9 != (unsigned __int16)st_mode) {
LABEL_10:
  }
    uint64_t result = -1LL;
  else {
    uint64_t result = v11.st_size & ~(v11.st_size >> 63);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    *(void *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 40) = 0;
  }

uint64_t sub_18837976C()
{
  uint64_t v3 = v0;
  uint64_t v13 = *MEMORY[0x1895F89C8];
  int v4 = *(void **)(v0 + 48);
  objc_msgSend(v4, sel_lock);
  int v5 = *(unsigned __int8 *)(v3 + 24);
  if (v5 == 255)
  {
    uint64_t result = sub_188386CB0();
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0LL;
    *(_BYTE *)(v3 + 24) = -1;
    sub_18837AEAC(v6, v5 & 1);
    sub_18837AE88(v6, v5);
    objc_msgSend(v4, sel_unlock);
    if ((v5 & 1) == 0) {
      return v6;
    }
    uint64_t v7 = sub_18834D8D4();
    if (v1)
    {
      sub_18837AE88(v6, v5);
    }

    else
    {
      uint64_t v2 = v7;
      uint64_t v9 = sub_18834BEBC();
      int v12 = 1;
      MEMORY[0x1895C24CC](*(unsigned int *)(v2 + 64), 73LL, &v12);
      MEMORY[0x1895C24CC](v9, 73LL, &v12);
      aBlock[4] = sub_18837B514;
      aBlock[5] = v3;
      aBlock[0] = MEMORY[0x1895F87A0];
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_18836FC18;
      aBlock[3] = &block_descriptor_13;
      char v10 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_18837AE88(v6, v5);
      swift_release();
      _Block_release(v10);
    }

    return v2;
  }

  return result;
}

void sub_188379988(int a1)
{
  uint64_t v2 = sub_188386434();
  MEMORY[0x1895F8860](v2);
  int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    sub_188386A70();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = MEMORY[0x18961A458];
    *(_OWORD *)(v5 + 16) = xmmword_1883895E0;
    uint64_t v7 = MEMORY[0x18961A4A0];
    *(void *)(v5 + 56) = v6;
    *(void *)(v5 + 64) = v7;
    *(_DWORD *)(v5 + 32) = a1;
    sub_1883476E8(MEMORY[0x18961AFE8]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v4);
    uint64_t v8 = sub_18838689C();
    uint64_t v10 = v9;
    *(void *)(v5 + 96) = MEMORY[0x189617FA8];
    *(void *)(v5 + 104) = sub_18834DFC0();
    *(void *)(v5 + 72) = v8;
    *(void *)(v5 + 80) = v10;
    sub_18836E34C();
    stat v11 = (void *)sub_188386B18();
    sub_18838668C();
    swift_bridgeObjectRelease();
  }

uint64_t sub_188379ACC()
{
  uint64_t v2 = *(void **)(v0 + 48);
  objc_msgSend(v2, sel_lock);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    *(void *)(v0 + 16) = 0LL;
    *(_BYTE *)(v0 + 24) = -1;
    sub_18837AEAC(v4, v3 & 1);
    sub_18837AE88(v4, v3);
    objc_msgSend(v2, sel_unlock);
    if ((v3 & 1) == 0)
    {
      sub_18834BEBC();
      if (!v1)
      {
        aBlock[4] = nullsub_1;
        aBlock[5] = 0LL;
        aBlock[0] = MEMORY[0x1895F87A0];
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_18836FC18;
        aBlock[3] = &block_descriptor_10;
        uint64_t v5 = _Block_copy(aBlock);
        uint64_t v6 = xpc_file_transfer_create_with_fd();
        _Block_release(v5);
        if (v6)
        {
          sub_18837AE88(v4, v3);
          return v6;
        }

        unint64_t v8 = sub_1883476E8(MEMORY[0x18961AFE8]);
        sub_1883491B4();
        swift_allocError();
        static XPCError.unknown(_:from:userInfo:)(0xD000000000000023LL, 0x800000018838CCF0LL, 0LL, v8, v9);
        swift_bridgeObjectRelease();
        swift_willThrow();
      }

      sub_18837AE88(v4, v3);
    }

    return v4;
  }

  uint64_t result = sub_188386CB0();
  __break(1u);
  return result;
}

uint64_t sub_188379CBC( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, double), uint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v12 = sub_18838656C();
  MEMORY[0x1895F8860](v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void **)a2;
  uint64_t v15 = *(void **)(a2 + 8);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v14, a1);
  v23[0] = v16;
  v23[1] = v15;
  id v18 = v15;
  id v19 = v16;
  sub_18834DD30(v14, (uint64_t)v23);
  sub_188379DC8(v20, a3, a4, a5, a6);
  return swift_release();
}

void sub_188379DC8( uint64_t a1, uint64_t (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_188386434();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8860](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v16 = swift_retain();
    if ((a2(v16, 0.0) & 1) == 0)
    {
      LODWORD(aBlock[0]) = 89;
      sub_1883476E8(MEMORY[0x18961AFE8]);
      sub_188349470( (unint64_t *)&qword_18C708930,  (uint64_t (*)(uint64_t))MEMORY[0x189605FC8],  MEMORY[0x189605FB0]);
      sub_188386500();
      uint64_t v23 = (void *)sub_18838641C();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      a4(v23);
      sub_188361B1C((uint64_t)a2);

      return;
    }

    sub_188361B1C((uint64_t)a2);
  }

  uint64_t v29 = a4;
  uint64_t v17 = *(void **)(v5 + 48);
  objc_msgSend(*(id *)(v6 + 48), sel_lock);
  int v18 = *(unsigned __int8 *)(v6 + 24);
  if (v18 == 255)
  {
    sub_188386CB0();
    __break(1u);
  }

  else
  {
    uint64_t v19 = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = 0LL;
    *(_BYTE *)(v6 + 24) = -1;
    sub_18837AEAC(v19, v18 & 1);
    sub_18837AE88(v19, v18);
    objc_msgSend(v17, sel_unlock);
    if ((v18 & 1) != 0)
    {
      sub_18834BEBC();
      uint64_t v24 = (void *)swift_allocObject();
      void v24[2] = a2;
      v24[3] = a3;
      void v24[4] = v29;
      v24[5] = a5;
      v24[6] = v6;
      aBlock[4] = sub_18837AEBC;
      aBlock[5] = v24;
      aBlock[0] = MEMORY[0x1895F87A0];
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_18836FC18;
      aBlock[3] = &block_descriptor_7;
      uint64_t v25 = _Block_copy(aBlock);
      sub_1883646C8((uint64_t)a2);
      swift_retain();
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_18837AE88(v19, v18);
      _Block_release(v25);
    }

    else
    {
      uint64_t v28 = a1;
      uint64_t v20 = a5;
      if (a2)
      {
        uint64_t v21 = (void *)swift_allocObject();
        v21[2] = a2;
        v21[3] = a3;
        v21[4] = v6;
        swift_retain();
        uint64_t v22 = sub_18837AF9C;
      }

      else
      {
        uint64_t v22 = 0LL;
        uint64_t v21 = 0LL;
      }

      type metadata accessor for XPCFileDescriptor();
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = a2;
      v26[3] = a3;
      void v26[4] = v29;
      v26[5] = v20;
      v26[6] = v6;
      sub_1883646C8((uint64_t)a2);
      sub_1883646C8((uint64_t)a2);
      swift_retain();
      swift_retain();
      static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)( v19,  v28,  0LL,  (uint64_t)v22,  (uint64_t)v21,  (uint64_t)sub_18837AF24,  (uint64_t)v26);
      swift_release();
      sub_188361B1C((uint64_t)v22);
      sub_18837AE88(v19, v18);
    }
  }

uint64_t sub_18837A1DC( uint64_t result, BOOL *a2, uint64_t (*a3)(uint64_t, __n128), __n128 a4, uint64_t a5, uint64_t a6)
{
  if (!result)
  {
    a4.n128_u64[0] = 0LL;
    goto LABEL_6;
  }

  unint64_t v9 = result;
  uint64_t v10 = *(void **)(a6 + 48);
  objc_msgSend(v10, sel_lock);
  sub_1883795F8(a6, (uint64_t)&v11);
  uint64_t result = (uint64_t)objc_msgSend(v10, sel_unlock);
  if ((v12 & 1) == 0 && v11 > v9)
  {
    a4.n128_f64[0] = (double)v9 / (double)v11;
LABEL_6:
    uint64_t result = a3(result, a4);
    *a2 = (result & 1) == 0;
  }

  return result;
}

void sub_18837A290( int a1, void (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *))
{
  uint64_t v7 = sub_188386434();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8860](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    sub_1883476E8(MEMORY[0x18961AFE8]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v10);
    unint64_t v11 = (void *)sub_18838641C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a4(v11);
  }

  else
  {
    if (a2)
    {
      uint64_t v12 = swift_retain();
      a2(v12, 1.0);
      sub_188361B1C((uint64_t)a2);
    }

    a4(0LL);
  }

unint64_t sub_18837A38C()
{
  uint64_t v1 = 0x54656C6946637078LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465746365707865LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011LL;
  }
}

uint64_t sub_18837A404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_18837ACF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_18837A428(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_18837A434()
{
  return sub_1883872C8();
}

uint64_t sub_18837A45C()
{
  return sub_1883872D4();
}

id sub_18837A484(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t)v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708938);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8860](v6);
  uint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188349220(a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C708940);
  type metadata accessor for _XPCObjectEncoder();
  if (!swift_dynamicCast())
  {
    unint64_t v13 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003BLL, 0x800000018838CBE0LL, 0LL, v13, v14);
    swift_bridgeObjectRelease();
    return (id)swift_willThrow();
  }

  uint64_t v10 = v18;
  if (!*(void *)(v18 + 24))
  {
    unint64_t v16 = sub_1883476E8(MEMORY[0x18961AFE8]);
    sub_1883491B4();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000060LL, 0x800000018838CC20LL, 0LL, v16, v17);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return (id)swift_release();
  }

  swift_retain();
  *(void *)(v10 + 16) = xpc_dictionary_create(0LL, 0LL, 0LL);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 32);
    v19[0] = v10;
    v19[1] = v11;
    v19[2] = v12;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708950);
    sub_18837AFA8();
    sub_188386E18();
    uint64_t v1 = (void *)v1[6];
    objc_msgSend(*(id *)(v4 + 48), sel_lock);
    sub_1883795F8(v4, (uint64_t)v19);
    if (!v3)
    {
      objc_msgSend(v1, sel_unlock);
      LOBYTE(v19[0]) = 2;
      sub_188386DAC();
      type metadata accessor for RemoteXPCConnection();
      if (swift_dynamicCastClass())
      {
        v19[0] = sub_188379ACC();
        LOBYTE(v18) = 1;
        sub_18837AFF4();
        swift_unknownObjectRetain();
        sub_188386DE8();
        swift_release();
        swift_unknownObjectRelease_n();
        swift_release();
        return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }

      v19[0] = sub_18837976C();
      LOBYTE(v18) = 0;
      type metadata accessor for XPCFileDescriptor();
      sub_188349470( &qword_18C708960,  (uint64_t (*)(uint64_t))type metadata accessor for XPCFileDescriptor,  (uint64_t)&protocol conformance descriptor for XPCFileDescriptor);
      sub_188386DE8();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      swift_release();
      return (id)swift_release();
    }
  }

  else
  {
    __break(1u);
  }

  id result = objc_msgSend(v1, sel_unlock);
  __break(1u);
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileTransfer.init(from:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708970);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = -1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x189607910]), sel_init);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18837B038();
  sub_188387298();
  if (v2)
  {
    swift_release();
    goto LABEL_4;
  }

  LOBYTE(v19[0]) = 2;
  *(void *)(v1 + 32) = sub_188386D28();
  *(_BYTE *)(v1 + 40) = v10 & 1;
  LOBYTE(v20) = 1;
  sub_18834DF7C();
  sub_188386D1C();
  uint64_t v11 = v19[0];
  if (!v19[0])
  {
    type metadata accessor for XPCFileDescriptor();
    LOBYTE(v20) = 0;
    sub_188349470( &qword_18C708988,  (uint64_t (*)(uint64_t))type metadata accessor for XPCFileDescriptor,  (uint64_t)&protocol conformance descriptor for XPCFileDescriptor);
    sub_188386D64();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v19[0];
    unsigned __int8 v15 = *(_BYTE *)(v3 + 24);
    *(_BYTE *)(v3 + 24) = 0;
LABEL_11:
    sub_18837AE88(v14, v15);
    goto LABEL_4;
  }

  uint64_t v12 = (const _xpc_type_s *)MEMORY[0x1895C3C6C](v19[0]);
  if (v12 == (const _xpc_type_s *)XPCTypeFileTransfer)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v11;
    unsigned __int8 v15 = *(_BYTE *)(v3 + 24);
    *(_BYTE *)(v3 + 24) = 1;
    goto LABEL_11;
  }

  uint64_t v18 = v12;
  swift_release();
  sub_188349220((uint64_t)a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708990);
  type metadata accessor for _XPCObjectDecoder();
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v13 = *(void *)(v20 + 24);
    swift_retain();
    swift_release();
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  unint64_t v16 = sub_1883476E8(MEMORY[0x18961AFE8]);
  sub_1883491B4();
  swift_allocError();
  static XPCError.invalidType(_:expecting:from:userInfo:)(v18, 0LL, v13, v16, v17);
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v3;
}

uint64_t XPCFileTransfer.deinit()
{
  return v0;
}

uint64_t XPCFileTransfer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_18837AC7C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCFileTransfer.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

id sub_18837ACD0(uint64_t a1)
{
  return sub_18837A484(a1);
}

uint64_t sub_18837ACF0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011LL && a2 == 0x800000018838CCD0LL || (sub_188386FD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x54656C6946637078LL && a2 == 0xEF726566736E6172LL || (sub_188386FD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6465746365707865LL && a2 == 0xEE006874676E654CLL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v5 = sub_188386FD4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_18837AE88(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_18837AEA0(result, a2 & 1);
  }
  return result;
}

uint64_t sub_18837AEA0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_18837AEAC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_unknownObjectRetain();
  }
  else {
    return swift_retain();
  }
}

void sub_18837AEBC(int a1)
{
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t objectdestroyTm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18837AF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 32);
  if (!a2)
  {
    char v5 = *(void (**)(double))(v2 + 16);
    if (v5) {
      v5(1.0);
    }
  }

  return v4(a2);
}

uint64_t sub_18837AF70()
{
  return swift_deallocObject();
}

uint64_t sub_18837AF9C(uint64_t a1, BOOL *a2, __n128 a3)
{
  return sub_18837A1DC( a1,  a2,  *(uint64_t (**)(uint64_t, __n128))(v3 + 16),  a3,  *(void *)(v3 + 24),  *(void *)(v3 + 32));
}

unint64_t sub_18837AFA8()
{
  unint64_t result = qword_18C708958;
  if (!qword_18C708958)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C708950);
    unint64_t result = MEMORY[0x1895C375C](&unk_1883886A8, v1);
    atomic_store(result, (unint64_t *)&qword_18C708958);
  }

  return result;
}

unint64_t sub_18837AFF4()
{
  unint64_t result = qword_18C708968;
  if (!qword_18C708968)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for XPCObjectContainer,  &type metadata for XPCObjectContainer);
    atomic_store(result, (unint64_t *)&qword_18C708968);
  }

  return result;
}

unint64_t sub_18837B038()
{
  unint64_t result = qword_18C708978;
  if (!qword_18C708978)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A968, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_18C708978);
  }

  return result;
}

uint64_t type metadata accessor for XPCFileTransfer()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCFileTransfer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(forFileAt:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(fileDescriptor:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of XPCFileTransfer.expectedLength.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:options:reportingProgressUsing:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:reportingProgressUsing:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of XPCFileTransfer.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t initializeBufferWithCopyOfBuffer for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_18837AEAC(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for XPCFileTransfer.Value(uint64_t a1)
{
  return sub_18837AEA0(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_18837AEAC(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_18837AEA0(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for XPCFileTransfer.Value(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_18837AEA0(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileTransfer.Value( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_18837B2BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18837B2C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer.Value()
{
  return &type metadata for XPCFileTransfer.Value;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer._CodingKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for XPCFileTransfer._CodingKey( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18837B3BC + 4 * byte_18838A7FD[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18837B3F0 + 4 * byte_18838A7F8[v4]))();
}

uint64_t sub_18837B3F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18837B3F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18837B400LL);
  }
  return result;
}

uint64_t sub_18837B40C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18837B414LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18837B418(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18837B420(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer._CodingKey()
{
  return &type metadata for XPCFileTransfer._CodingKey;
}

unint64_t sub_18837B440()
{
  unint64_t result = qword_18C708AC0;
  if (!qword_18C708AC0)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A940, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_18C708AC0);
  }

  return result;
}

unint64_t sub_18837B488()
{
  unint64_t result = qword_18C708AC8;
  if (!qword_18C708AC8)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A8B0, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_18C708AC8);
  }

  return result;
}

unint64_t sub_18837B4D0()
{
  unint64_t result = qword_18C708AD0;
  if (!qword_18C708AD0)
  {
    unint64_t result = MEMORY[0x1895C375C](&unk_18838A8D8, &type metadata for XPCFileTransfer._CodingKey);
    atomic_store(result, (unint64_t *)&qword_18C708AD0);
  }

  return result;
}

void sub_18837B514(int a1)
{
}

uint64_t static XPCError.xpcCoderRequired(_:from:userInfo:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_188386860();
  uint64_t v12 = v11;
  uint64_t v13 = MEMORY[0x189617FA8];
  uint64_t v22 = MEMORY[0x189617FA8];
  *(void *)&__int128 v21 = a1;
  *((void *)&v21 + 1) = a2;
  sub_188344D58(&v21, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_18837D648(v20, v10, v12, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = 0xD00000000000005FLL;
  *(void *)(inited + 56) = 0x800000018838CD60LL;
  unint64_t v17 = sub_1883382F4(inited);
  XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v17);
  v20[0] = v21;
  swift_retain();
  unint64_t v18 = sub_1883382F4(MEMORY[0x18961AFE8]);
  return sub_18837CF80((uint64_t)v20, a4, a3, v18, a5);
}

uint64_t static XPCError.unknown(_:from:userInfo:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_188386860();
  uint64_t v12 = v11;
  uint64_t v13 = MEMORY[0x189617FA8];
  uint64_t v24 = MEMORY[0x189617FA8];
  *(void *)&__int128 v23 = a1;
  *((void *)&v23 + 1) = a2;
  sub_188344D58(&v23, v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v25 = 0x8000000000000000LL;
  sub_18837D648(v22, v10, v12, isUniquelyReferenced_nonNull_native);
  unint64_t v25 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v24 = type metadata accessor for XPCConnection();
    *(void *)&__int128 v23 = a3;
    sub_188344D58(&v23, v22);
    swift_retain();
    uint64_t v15 = v25;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_18837D648(v22, 0x656E6E6F43435058LL, 0xED00006E6F697463LL, v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1883479C4(0x656E6E6F43435058LL, 0xED00006E6F697463LL, &v23);
    sub_18837D778((uint64_t)&v23);
    uint64_t v15 = v25;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v18;
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = 0xD00000000000001ALL;
  *(void *)(inited + 56) = 0x800000018838C920LL;
  unint64_t v19 = sub_1883382F4(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v19);
  v22[0] = v23;
  swift_retain();
  unint64_t v20 = sub_1883382F4(MEMORY[0x18961AFE8]);
  return sub_18837CF80((uint64_t)v22, v15, a3, v20, a5);
}

uint64_t static XPCError.invalidType(_:expecting:from:userInfo:)@<X0>( const _xpc_type_s *a1@<X0>, const _xpc_type_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = sub_1883868F0();
  uint64_t v8 = MEMORY[0x189617FA8];
  uint64_t v34 = MEMORY[0x189617FA8];
  *(void *)&__int128 v33 = v7;
  *((void *)&v33 + 1) = v9;
  sub_188344D58(&v33, v32);
  swift_bridgeObjectRetain();
  unint64_t v10 = MEMORY[0x18961AFF0];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_18837D648(v32, 0x79546C6175746341LL, 0xEA00000000006570LL, isUniquelyReferenced_nonNull_native);
  unint64_t v35 = v10;
  swift_bridgeObjectRelease();
  if (a2)
  {
    xpc_type_get_name(a2);
    uint64_t v12 = sub_1883868F0();
    uint64_t v34 = MEMORY[0x189617FA8];
    *(void *)&__int128 v33 = v12;
    *((void *)&v33 + 1) = v13;
    sub_188344D58(&v33, v32);
    swift_bridgeObjectRetain();
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_18837D648(v32, 0x6465746365707845LL, 0xEC00000065707954LL, v14);
    unint64_t v35 = v10;
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_188386860();
    uint64_t v17 = v16;
    *(void *)&__int128 v33 = 0LL;
    *((void *)&v33 + 1) = 0xE000000000000000LL;
    sub_188386BB4();
    sub_1883868E4();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
    uint64_t v8 = MEMORY[0x189617FA8];
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
    uint64_t v34 = v8;
    sub_188344D58(&v33, v32);
    unint64_t v18 = v35;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = 0x8000000000000000LL;
    sub_18837D648(v32, v15, v17, v19);
  }

  else
  {
    uint64_t v20 = sub_188386860();
    uint64_t v22 = v21;
    *(void *)&__int128 v33 = 0LL;
    *((void *)&v33 + 1) = 0xE000000000000000LL;
    sub_188386BB4();
    swift_bridgeObjectRelease();
    *(void *)&__int128 v33 = 0xD000000000000010LL;
    *((void *)&v33 + 1) = 0x800000018838CDC0LL;
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
    uint64_t v34 = v8;
    sub_188344D58(&v33, v32);
    unint64_t v18 = v35;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = 0x8000000000000000LL;
    sub_18837D648(v32, v20, v22, v23);
  }

  unint64_t v35 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v34 = type metadata accessor for XPCConnection();
    *(void *)&__int128 v33 = a3;
    sub_188344D58(&v33, v32);
    swift_retain();
    uint64_t v24 = v35;
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_18837D648(v32, 0x656E6E6F43435058LL, 0xED00006E6F697463LL, v25);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1883479C4(0x656E6E6F43435058LL, 0xED00006E6F697463LL, &v33);
    sub_18837D778((uint64_t)&v33);
    uint64_t v24 = v35;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v27;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 48) = 0xD000000000000022LL;
  *(void *)(inited + 56) = 0x800000018838CE00LL;
  unint64_t v28 = sub_1883382F4(inited);
  XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v28);
  v32[0] = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_18837CF80((uint64_t)v32, a4, a3, v24, a5);
}

void XPCError.init(_:from:userInfo:)()
{
}

uint64_t sub_18837BDA8( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a1 != XPCTypeError)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t result = swift_release();
    void *v62 = 0LL;
    v62[1] = 0LL;
    return result;
  }

  if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInterrupted))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(void *)(inited + 32) = sub_188386860();
    *(void *)(inited + 40) = v69;
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x800000018838CF10LL;
    unint64_t v70 = sub_1883382F4(inited);
    Swift::Int32 v71 = 1000;
  }

  else if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInvalid))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
    uint64_t v72 = swift_initStackObject();
    *(_OWORD *)(v72 + 16) = xmmword_1883883A0;
    *(void *)(v72 + 32) = sub_188386860();
    *(void *)(v72 + 40) = v73;
    *(void *)(v72 + 72) = MEMORY[0x189617FA8];
    *(void *)(v72 + 48) = 0xD00000000000001FLL;
    *(void *)(v72 + 56) = 0x800000018838C2D0LL;
    unint64_t v70 = sub_1883382F4(v72);
    Swift::Int32 v71 = 1001;
  }

  else if (xpc_equal(v63, (xpc_object_t)XPCErrorTerminationImminent))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
    uint64_t v74 = swift_initStackObject();
    *(_OWORD *)(v74 + 16) = xmmword_1883883A0;
    *(void *)(v74 + 32) = sub_188386860();
    *(void *)(v74 + 40) = v75;
    *(void *)(v74 + 72) = MEMORY[0x189617FA8];
    *(void *)(v74 + 48) = 0xD000000000000015LL;
    *(void *)(v74 + 56) = 0x800000018838CEF0LL;
    unint64_t v70 = sub_1883382F4(v74);
    Swift::Int32 v71 = 1002;
  }

  else
  {
    if (qword_18C7079D8 != -1) {
      swift_once();
    }
    if (!xpc_equal(v63, (xpc_object_t)qword_18C708AD8))
    {
      if (xpc_dictionary_get_string(v63, (const char *)XPCErrorKeyDescription))
      {
        uint64_t v81 = sub_1883868F0();
        static XPCError.unknown(_:from:userInfo:)(v81, v82, v64, v65, (void *)(v66 - 64));
        swift_bridgeObjectRelease();
      }

      else
      {
        static XPCError.unknown(_:from:userInfo:)( 0xD000000000000010LL,  0x800000018838CE60LL,  v64,  v65,  (void *)(v66 - 64));
      }

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t result = swift_release();
      goto LABEL_14;
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
    uint64_t v76 = swift_initStackObject();
    *(_OWORD *)(v76 + 16) = xmmword_1883883A0;
    *(void *)(v76 + 32) = sub_188386860();
    *(void *)(v76 + 40) = v77;
    *(void *)(v76 + 72) = MEMORY[0x189617FA8];
    *(void *)(v76 + 48) = 0xD000000000000060LL;
    *(void *)(v76 + 56) = 0x800000018838CE80LL;
    unint64_t v70 = sub_1883382F4(v76);
    Swift::Int32 v71 = 1006;
  }

  XPCError.init(code:userInfo:)(v71, (Swift::OpaquePointer)v70);
  uint64_t v78 = *(void *)(v66 - 72);
  *(void *)(v66 - 176) = *(void *)(v66 - 80);
  *(void *)(v66 - 168) = v78;
  unint64_t v79 = sub_1883382F4(MEMORY[0x18961AFE8]);
  sub_18837CF80(v66 - 176, v65, v64, v79, (void *)(v66 - 64));
  uint64_t result = swift_unknownObjectRelease();
LABEL_14:
  uint64_t v80 = *(void *)(v66 - 56);
  void *v62 = *(void *)(v66 - 64);
  v62[1] = v80;
  return result;
}

Swift::Int static XPCError.connectionInvalid.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x800000018838C2D0LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1001, (Swift::OpaquePointer)v2).errorCode;
}

void sub_18837C1BC()
{
}

uint64_t sub_18837C1F0(uint64_t a1)
{
  uint64_t v4 = XPCTypeDictionary;
  if (XPCTypeDictionary != a1)
  {
    sub_1883382F4(MEMORY[0x18961AFE8]);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }

  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0xD000000000000019LL;
  *(void *)(v1 + 16) = 0x800000018838B7A0LL;
  *(_BYTE *)(v1 + 24) = v4 != a1;
  return result;
}

id sub_18837C30C()
{
  id result = (id)XPCErrorGetPeerCodeSigningRequirement();
  qword_18C708AD8 = (uint64_t)result;
  return result;
}

uint64_t XPCErrorPeerCodeSigningRequirement.getter()
{
  if (qword_18C7079D8 != -1) {
    swift_once();
  }
  return swift_unknownObjectRetain();
}

unint64_t static XPCError.errorDomain.getter()
{
  return 0xD000000000000017LL;
}

uint64_t XPCError.errorCode.getter()
{
  return *(void *)v0;
}

uint64_t XPCError.errorUserInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18837C39C()
{
  return sub_1883871E4();
}

uint64_t sub_18837C3C4()
{
  return sub_1883871D8();
}

Mercury::XPCError __swiftcall XPCError.init(code:userInfo:)(Swift::Int32 code, Swift::OpaquePointer userInfo)
{
  uint64_t v4 = v2;
  rawValue = userInfo._rawValue;
  if (!*((void *)userInfo._rawValue + 2))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18837191C(0x656E6E6F43435058LL, 0xED00006E6F697463LL);
  if ((v7 & 1) == 0)
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  sub_188352244(*((void *)userInfo._rawValue + 7) + 32 * v6, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_8:
    sub_18837D778((uint64_t)&v17);
    goto LABEL_9;
  }

  type metadata accessor for XPCConnection();
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(void *)&__int128 v17 = *(void *)&v16[0];
    swift_retain();
    uint64_t v8 = sub_18838689C();
    *((void *)&v18 + 1) = MEMORY[0x189617FA8];
    *(void *)&__int128 v17 = v8;
    *((void *)&v17 + 1) = v9;
    sub_188344D58(&v17, v16);
    unint64_t v10 = rawValue;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_18837D648(v16, 0xD000000000000018LL, 0x800000018838CF50LL, isUniquelyReferenced_nonNull_native);
    rawValue = v10;
    swift_release();
    swift_bridgeObjectRelease();
  }

LABEL_9:
  sub_1883479C4(0x656E6E6F43435058LL, 0xED00006E6F697463LL, &v17);
  Swift::Int v12 = sub_18837D778((uint64_t)&v17);
  char v14 = rawValue;
  *uint64_t v4 = code;
  v4[1] = v14;
  result.errorUserInfo._rawValue = v13;
  result.errorCode = v12;
  return result;
}

Swift::Int sub_18837C5A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_domain);
  uint64_t v5 = sub_188386860();
  uint64_t v7 = v6;

  if (v5 == 0xD000000000000017LL && v7 == 0x800000018838CF30LL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    unint64_t v10 = (ValueMetadata *)objc_msgSend(a1, sel_code);
    id v11 = objc_msgSend(a1, sel_userInfo);
    uint64_t v12 = sub_188386788();

    Swift::Int32 v13 = sub_18837D3D8(v10);
    return XPCError.init(code:userInfo:)(v13, (Swift::OpaquePointer)v12).errorCode;
  }

  char v8 = sub_188386FD4();
  Swift::Int result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0) {
    goto LABEL_5;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return result;
}

unint64_t sub_18837C6DC()
{
  return 0xD000000000000017LL;
}

uint64_t sub_18837C6F8()
{
  return *(void *)v0;
}

uint64_t XPCError.hashValue.getter()
{
  return sub_188387268();
}

id sub_18837C744(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_18838677C();
  swift_bridgeObjectRetain();
  int v3 = (void *)sub_18838677C();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_isEqual_, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_18837C828(uint64_t a1)
{
  return sub_18837C83C(a1);
}

uint64_t sub_18837C83C(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_188352280(0LL, (unint64_t *)&qword_18C4E7888);
  sub_188349220(a1, (uint64_t)&v31);
  uint64_t v5 = NSError.init(from:)(&v31);
  if (!v2)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_domain);
    uint64_t v8 = sub_188386860();
    uint64_t v10 = v9;

    if (v8 == 0xD000000000000017LL && v10 == 0x800000018838CF30LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v11 = sub_188386FD4();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1883883A0;
        *(void *)(inited + 32) = sub_188386860();
        *(void *)(inited + 40) = v17;
        *(void *)(inited + 72) = MEMORY[0x189617FA8];
        *(void *)(inited + 48) = 0xD00000000000002FLL;
        *(void *)(inited + 56) = 0x800000018838CFB0LL;
        unint64_t v18 = sub_1883382F4(inited);
        XPCError.init(code:userInfo:)(5, (Swift::OpaquePointer)v18);
        uint64_t v31 = 0LL;
        unint64_t v32 = 0xE000000000000000LL;
        sub_188386BB4();
        sub_1883868E4();
        uint64_t v33 = v3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C708AF8);
        sub_18838689C();
        sub_1883868E4();
        swift_bridgeObjectRelease();
        sub_1883868E4();
        uint64_t v19 = v31;
        unint64_t v20 = v32;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E78E8);
        uint64_t v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_1883883A0;
        *(void *)(v21 + 32) = sub_188386860();
        *(void *)(v21 + 40) = v22;
        *(void *)(v21 + 48) = v19;
        *(void *)(v21 + 56) = v20;
        unint64_t v23 = sub_188338428(v21);
        swift_bridgeObjectRetain();
        unint64_t v24 = sub_188382B1C(v23);
        swift_bridgeObjectRelease();
        unint64_t v25 = sub_1883476E8(MEMORY[0x18961AFE8]);
        sub_18837CE9C(v29, v30, v24, v25);
        swift_bridgeObjectRelease();
        sub_1883491B4();
        if (sub_188386FB0())
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_allocError();
          unint64_t v26 = v32;
          void *v27 = v31;
          v27[1] = v26;
        }

        swift_willThrow();
        goto LABEL_11;
      }
    }

    uint64_t v12 = (ValueMetadata *)objc_msgSend(v6, sel_code);
    id v13 = objc_msgSend(v6, sel_userInfo);
    uint64_t v14 = sub_188386788();

    Swift::Int32 v15 = sub_18837D3D8(v12);
    XPCError.init(code:userInfo:)(v15, (Swift::OpaquePointer)v14);
LABEL_11:
  }

  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

void sub_18837CBA8(void *a1)
{
}

void sub_18837CBC0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_188386FB0();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = (void *)swift_allocError();
    *uint64_t v6 = a2;
    v6[1] = a3;
  }

  id v7 = (void *)sub_18838650C();

  NSError.encode(to:)(a1);
}

uint64_t sub_18837CC8C()
{
  return sub_18837CD0C(*v0, v0[1]);
}

uint64_t sub_18837CCAC()
{
  return sub_18837CD0C(*v0, v0[1]);
}

uint64_t sub_18837CCCC()
{
  return sub_18837CD0C(*v0, v0[1]);
}

uint64_t sub_18837CCEC()
{
  return sub_18837CD0C(*v0, v0[1]);
}

uint64_t sub_18837CD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_188386860();
  uint64_t v5 = v4;
  if (!*(void *)(a2 + 16))
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  uint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_18837191C(v6, v5);
  if ((v8 & 1) == 0)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  sub_188352244(*(void *)(a2 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_11:
    sub_18837D778((uint64_t)&v11);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

Swift::Int static XPCError.xpcError.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD00000000000003CLL;
  *(void *)(inited + 56) = 0x800000018838CF70LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(3, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_18837CE9C(ValueMetadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = (void *)a3;
  sub_1883851B0(a4, (uint64_t)sub_188385424, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t *)&v14);
  uint64_t v9 = (uint64_t)v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = (void *)v9;
  sub_1883851B0(a2, (uint64_t)sub_188385424, 0LL, v10, (uint64_t *)&v14);
  v11._rawValue = v14;
  swift_bridgeObjectRelease();
  Swift::Int32 v12 = sub_18837D3D8(a1);
  XPCError.init(code:userInfo:)(v12, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18837CF80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(ValueMetadata **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v17 = a2;
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v16 = type metadata accessor for XPCConnection();
    *(void *)&__int128 v15 = a3;
    sub_188344D58(&v15, v14);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_18837D648(v14, 0x656E6E6F43435058LL, 0xED00006E6F697463LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1883479C4(0x656E6E6F43435058LL, 0xED00006E6F697463LL, &v15);
    sub_18837D778((uint64_t)&v15);
    uint64_t v10 = v17;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18837CE9C(v9, v8, v10, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v13 = *((void *)&v15 + 1);
  *a5 = v15;
  a5[1] = v13;
  return result;
}

Swift::Int static XPCError.connectionInterrupted.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x800000018838CF10LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1000, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.terminationImminent.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD000000000000015LL;
  *(void *)(inited + 56) = 0x800000018838CEF0LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1002, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.invalidType.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD000000000000022LL;
  *(void *)(inited + 56) = 0x800000018838CE00LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.xpcCoderRequired.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD00000000000005FLL;
  *(void *)(inited + 56) = 0x800000018838CD60LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.peerCodeSigningRequirement.getter()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = 0xD000000000000060LL;
  *(void *)(inited + 56) = 0x800000018838CE80LL;
  unint64_t v2 = sub_1883382F4(inited);
  return XPCError.init(code:userInfo:)(1006, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_18837D3D8(ValueMetadata *a1)
{
  uint64_t v1 = MEMORY[0x189617FA8];
  if (a1)
  {
    unint64_t v2 = a1;
    sub_188386A7C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1883895E0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708AF8);
    uint64_t v4 = sub_18838689C();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = v1;
    unint64_t v7 = sub_18834DFC0();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    uint64_t v8 = MEMORY[0x1896187B0];
    *(void *)(v3 + 96) = MEMORY[0x189618740];
    *(void *)(v3 + 104) = v8;
    *(void *)(v3 + 64) = v7;
    *(void *)(v3 + 72) = v2;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v9 = (void *)sub_188386B18();
  }

  else
  {
    sub_188386A7C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1883883A0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C708AF8);
    uint64_t v11 = sub_18838689C();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = v1;
    *(void *)(v10 + 64) = sub_18834DFC0();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v9 = (void *)sub_188386B18();
  }

  sub_18838668C();
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v15;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 48) = 0xD00000000000001ALL;
  *(void *)(inited + 56) = 0x800000018838C920LL;
  unint64_t v16 = sub_1883382F4(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v16);
  unint64_t v2 = &type metadata for XPCError;
  uint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)&type metadata for XPCError < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if ((uint64_t)&type metadata for XPCError <= 0x7FFFFFFF)
  {
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

_OWORD *sub_18837D648(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_18837191C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
        return sub_188344D58(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1883847C8();
      goto LABEL_7;
    }

    sub_188383740(v15, a4 & 1);
    unint64_t v21 = sub_18837191C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_18837DCFC(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }

  uint64_t result = (_OWORD *)sub_1883871CC();
  __break(1u);
  return result;
}

uint64_t sub_18837D778(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7948);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_18837D7B8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_18837D7E4();
  unint64_t result = sub_18837D828();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_18837D7E4()
{
  unint64_t result = qword_18C708AE0;
  if (!qword_18C708AE0)
  {
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_18C708AE0);
  }

  return result;
}

unint64_t sub_18837D828()
{
  unint64_t result = qword_18C708AE8;
  if (!qword_18C708AE8)
  {
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_18C708AE8);
  }

  return result;
}

unint64_t sub_18837D874()
{
  unint64_t result = qword_18C708AF0;
  if (!qword_18C708AF0)
  {
    unint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_18C708AF0);
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t sub_18837D8C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_18838662C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8860](v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_188371980(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        return sub_18837DEE4(a1, v20[7] + 8 * v14);
      }
      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1883849AC();
      goto LABEL_7;
    }

    sub_188383A3C(v17, a3 & 1);
    unint64_t v22 = sub_188371980(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      unint64_t v14 = v22;
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        return sub_18837DEE4(a1, v20[7] + 8 * v14);
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_18837DD64(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = sub_1883871CC();
  __break(1u);
  return result;
}

uint64_t sub_18837DA38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1895F8860](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_1883719E4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_release();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_188384C00();
    goto LABEL_7;
  }

  sub_188383DC8(v16, a3 & 1);
  unint64_t v22 = sub_1883719E4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_1883871CC();
    __break(1u);
    return result;
  }

  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1883731EC(a2, (uint64_t)v10);
  return sub_18837DE04(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_18837DB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = (void **)v7;
  BOOL v15 = (void *)*v7;
  unint64_t v17 = sub_188371C34(a3, a4, a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }

  else
  {
    char v21 = v16;
    uint64_t v22 = v15[3];
    if (v22 >= v20 && (a7 & 1) != 0)
    {
LABEL_7:
      char v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        uint64_t v24 = (uint64_t *)(v23[7] + 16 * v17);
        uint64_t result = swift_release();
        *uint64_t v24 = a1;
        v24[1] = a2;
        return result;
      }

      goto LABEL_11;
    }

    if (v22 >= v20 && (a7 & 1) == 0)
    {
      sub_188384FE4();
      goto LABEL_7;
    }

    sub_188384454(v20, a7 & 1);
    unint64_t v26 = sub_188371C34(a3, a4, a5, a6);
    if ((v21 & 1) == (v27 & 1))
    {
      unint64_t v17 = v26;
      char v23 = *v8;
      if ((v21 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_18837DE94(v17, a3, a4, a5, a6, a1, a2, v23);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = sub_1883871CC();
  __break(1u);
  return result;
}

_OWORD *sub_18837DCFC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_188344D58(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_18837DD64(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_18838662C();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t result = sub_18837DF2C(a3, a4[7] + 8 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_18837DE04(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for RemoteDevice.Identity();
  uint64_t result = sub_188344D14(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_18837DE94( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1LL << result;
  uint64_t v8 = (void *)(a8[6] + 32 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = (void *)(a8[7] + 16 * result);
  *uint64_t v9 = a6;
  v9[1] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

uint64_t sub_18837DEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_18837DF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C707DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t CustomNSError.wrapping(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_188386B24();
  uint64_t v10 = MEMORY[0x1895F8860](v9);
  uint64_t v13 = (char *)&v65 - v12;
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v71, v3, a2);
  }
  uint64_t v67 = v11;
  uint64_t v68 = v10;
  unint64_t v70 = v8;
  id v14 = a1;
  uint64_t v69 = v3;
  uint64_t v15 = sub_18838644C();
  unint64_t v78 = v15;
  uint64_t v16 = sub_188386860();
  uint64_t v18 = v17;
  if (!*(void *)(v15 + 16))
  {
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  uint64_t v19 = v16;
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_18837191C(v19, v18);
  if ((v21 & 1) == 0)
  {
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    goto LABEL_14;
  }

  sub_188352244(*(void *)(v15 + 56) + 32 * v20, (uint64_t)&v76);
  swift_bridgeObjectRelease();
  if (!*((void *)&v77 + 1))
  {
LABEL_15:
    sub_18837D778((uint64_t)&v76);
    goto LABEL_16;
  }

  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708188);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v23 = *(void **)&v73[0];
    id v24 = a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v23 = sub_1883717C0(0LL, v23[2] + 1LL, 1, v23);
    }
    unint64_t v26 = v23[2];
    unint64_t v25 = v23[3];
    if (v26 >= v25 >> 1) {
      char v23 = sub_1883717C0((void *)(v25 > 1), v26 + 1, 1, v23);
    }
    void v23[2] = v26 + 1;
    v23[v26 + 4] = a1;
    uint64_t v27 = sub_188386860();
    uint64_t v29 = v28;
    *((void *)&v77 + 1) = v22;
    *(void *)&__int128 v76 = v23;
    sub_188344D58(&v76, v73);
    unint64_t v30 = v78;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v72 = v30;
    unint64_t v78 = 0x8000000000000000LL;
    sub_18837D648(v73, v27, v29, isUniquelyReferenced_nonNull_native);
    unint64_t v78 = v72;
    goto LABEL_25;
  }

LABEL_16:
  uint64_t v33 = sub_188386860();
  if (*(void *)(v15 + 16) && (unint64_t v35 = sub_18837191C(v33, v34), (v36 & 1) != 0))
  {
    sub_188352244(*(void *)(v15 + 56) + 32 * v35, (uint64_t)&v76);
  }

  else
  {
    __int128 v76 = 0u;
    __int128 v77 = 0u;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v77 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v37 = *(void **)&v73[0];
      id v66 = *(id *)&v73[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708848);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1883895E0;
      *(void *)(v38 + 32) = v37;
      *(void *)(v38 + 40) = a1;
      uint64_t v39 = sub_188386860();
      uint64_t v41 = v40;
      id v42 = a1;
      id v43 = v37;
      sub_1883479C4(v39, v41, &v76);
      swift_bridgeObjectRelease();
      sub_18837D778((uint64_t)&v76);
      uint64_t v44 = sub_188386860();
      uint64_t v46 = v45;
      *((void *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708188);
      *(void *)&__int128 v76 = v38;
      sub_188344D58(&v76, v73);
      unint64_t v47 = v78;
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v72 = v47;
      unint64_t v78 = 0x8000000000000000LL;
      sub_18837D648(v73, v44, v46, v48);
      unint64_t v78 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_26;
    }
  }

  else
  {
    sub_18837D778((uint64_t)&v76);
  }

  uint64_t v49 = sub_188386860();
  uint64_t v51 = v50;
  swift_getErrorValue();
  uint64_t v52 = v74;
  uint64_t v53 = v75;
  *((void *)&v77 + 1) = v75;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v76);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16LL))( boxed_opaque_existential_0Tm,  v52,  v53);
  sub_188344D58(&v76, v73);
  unint64_t v55 = v78;
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v72 = v55;
  unint64_t v78 = 0x8000000000000000LL;
  sub_18837D648(v73, v49, v51, v56);
  unint64_t v78 = v72;
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  sub_188386440();
  uint64_t v57 = v69;
  uint64_t v58 = sub_188386458();
  id v59 = objc_allocWithZone(MEMORY[0x189607870]);
  uint64_t v60 = (void *)sub_18838683C();
  swift_bridgeObjectRelease();
  uint64_t v61 = (void *)sub_18838677C();
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, v58, v61);

  *(void *)&__int128 v76 = v62;
  sub_1883733C0();
  int v63 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v13, v63 ^ 1u, 1LL, a2);
  uint64_t v64 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v70, v57, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1LL, a2) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v71, v64, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v13, v68);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v64, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v71, v13, a2);
  }

uint64_t _Error.wrapping(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18837E898(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

{
  return sub_18837E898(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

uint64_t CustomNSError.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, v9, a2);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0LL;
    do
    {
      uint64_t v13 = *(void **)(a1 + 8 * v12++ + 32);
      id v14 = v13;
      CustomNSError.wrapping(_:)(v13, a2, (uint64_t)v8);

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a3, a2);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
    }

    while (v11 != v12);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t CustomNSError.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = (void *)MEMORY[0x1895F8860](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  CustomNSError.wrapping(_:)(v5, v8, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t CustomNSError.underlyingErrors.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  uint64_t v6 = sub_188386FB0();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }

  else
  {
    uint64_t v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }

  uint64_t v9 = (void *)sub_18838650C();

  id v10 = objc_msgSend(v9, sel_underlyingErrors);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  uint64_t v11 = sub_1883869BC();

  return v11;
}

uint64_t sub_18837E898(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v14 = a2;
  uint64_t v15 = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_0Tm,  v4,  a2);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  void v16[3] = v10;
  void v16[4] = v11;
  __swift_allocate_boxed_opaque_existential_0Tm(v16);
  a4(a1, v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C7088D8);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

uint64_t _Error.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8860](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Error.wrapping(_:)(v5, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t _Error.underlyingErrors.getter(uint64_t a1)
{
  return CustomNSError.underlyingErrors.getter(a1);
}

uint64_t static POSIXError.current(or:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_188386434();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8860](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v9 = MEMORY[0x1895C24B4](v6);
  sub_1883476E8(MEMORY[0x18961AFE8]);
  if (!v9) {
    return POSIXError.init(uncheckedCode:userInfo:)(a1, a2);
  }
  POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

uint64_t POSIXError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_188386434();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1895F8860](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v9 = sub_1883866C8();
    if ((v9 & 0x100000000LL) != 0)
    {
      sub_188386860();
      id v10 = objc_allocWithZone(MEMORY[0x189607870]);
      uint64_t v11 = (void *)sub_18838683C();
      swift_bridgeObjectRelease();
      uint64_t v12 = (void *)sub_18838677C();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      id v15 = v13;
      sub_1883733C0();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }

    else
    {
      v14[1] = v9;
      sub_188364DFC();
      return sub_188386500();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static POSIXError.current.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = MEMORY[0x1895C24B4]();
  if (v2)
  {
    int v3 = v2;
    sub_1883476E8(MEMORY[0x18961AFE8]);
    POSIXError.init(uncheckedCode:userInfo:)(v3, a1);
    uint64_t v4 = sub_188386434();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
    uint64_t v6 = a1;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v4 = sub_188386434();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
    uint64_t v6 = a1;
    uint64_t v7 = 1LL;
  }

  return v5(v6, v7, 1LL, v4);
}

void OS_xpc_object.type.getter()
{
}

uint64_t xpc_uuid_get_uuid(_:)(void *a1)
{
  bytes = xpc_uuid_get_bytes(a1);
  if (bytes) {
    return *(void *)bytes;
  }
  else {
    return 0LL;
  }
}

xpc_object_t xpc_uuid_create_with_uuid(_:)( unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, int a9, int a10)
{
  uint64_t v14 = *MEMORY[0x1895F89C8];
  uuid[0] = a1;
  uuid[1] = a2;
  uuid[2] = a3;
  uuid[3] = a4;
  uuid[4] = a5;
  uuid[5] = a6;
  uuid[6] = a7;
  uuid[7] = a8;
  int v12 = a9;
  int v13 = a10;
  return xpc_uuid_create(uuid);
}

uint64_t _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0@<X0>( xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  if (qword_18C7079D0 != -1) {
    swift_once();
  }
  uint64_t v4 = off_18C708748;
  if (*((void *)off_18C708748 + 2))
  {
    unint64_t v5 = sub_188371A98((uint64_t)type);
    if ((v6 & 1) != 0) {
      return sub_188349220(v4[7] + 40 * v5, a2);
    }
  }

  xpc_type_get_name(type);
  sub_1883868F0();
  sub_188386BB4();
  sub_1883868E4();
  sub_188386C8C();
  sub_1883868E4();
  sub_1883868E4();
  sub_1883868E4();
  uint64_t result = sub_188386CB0();
  __break(1u);
  return result;
}

xpc_connection_t OS_xpc_object.createConnection()()
{
  return xpc_connection_create_from_endpoint(v0);
}

uint64_t static OpaquePointer.error.getter()
{
  return XPCTypeError;
}

uint64_t static OpaquePointer.connection.getter()
{
  return XPCTypeConnection;
}

uint64_t static OpaquePointer.endpoint.getter()
{
  return XPCTypeEndpoint;
}

uint64_t static OpaquePointer.dictionary.getter()
{
  return XPCTypeDictionary;
}

uint64_t static OpaquePointer.array.getter()
{
  return XPCTypeArray;
}

uint64_t static OpaquePointer.data.getter()
{
  return XPCTypeData;
}

uint64_t static OpaquePointer.date.getter()
{
  return XPCTypeDate;
}

uint64_t static OpaquePointer.double.getter()
{
  return XPCTypeDouble;
}

uint64_t static OpaquePointer.fd.getter()
{
  return XPCTypeFD;
}

uint64_t static OpaquePointer.int64.getter()
{
  return XPCTypeInt64;
}

uint64_t static OpaquePointer.fileTransfer.getter()
{
  return XPCTypeFileTransfer;
}

uint64_t OS_xpc_object.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = (const _xpc_type_s *)MEMORY[0x1895C3C6C](v1);
  return _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0(v3, a1);
}

id NSLocking.withLock<A>(perform:)(void (*a1)(id))
{
  return objc_msgSend(v1, sel_unlock);
}

uint64_t sub_18837F050(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x65756C6176LL;
  }
  else {
    uint64_t v3 = 0x5464656C676E616DLL;
  }
  if (v2) {
    unint64_t v4 = 0xEF656D614E657079LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x65756C6176LL;
  }
  else {
    uint64_t v5 = 0x5464656C676E616DLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE500000000000000LL;
  }
  else {
    unint64_t v6 = 0xEF656D614E657079LL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_188386FD4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static DynamicCodable.defaultEncodingValue(forUnencodableValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t DynamicCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v57 = a3;
  uint64_t v55 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_188386B24();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  uint64_t v7 = MEMORY[0x1895F8860](v6);
  uint64_t v53 = (char *)v47 - v8;
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1895F8860](v7);
  uint64_t v49 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v9);
  int v12 = (char *)v47 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B8);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8860](v13);
  uint64_t v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v17 = sub_18836C644();
  uint64_t v18 = v63;
  sub_188387298();
  if (!v18)
  {
    v47[1] = v17;
    v47[0] = v12;
    uint64_t v19 = v57;
    char v48 = a1;
    uint64_t v20 = v56;
    uint64_t v63 = v14;
    LOBYTE(v59[0]) = 0;
    uint64_t v21 = sub_188386D34();
    uint64_t v22 = v13;
    uint64_t v26 = v25;
    uint64_t v27 = v21;
    uint64_t v28 = static DynamicCodable.supportedType(named:)(v21, v25, v55, v19);
    if (v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      swift_bridgeObjectRelease();
      v58[0] = 1;
      uint64_t v60 = v31;
      uint64_t v61 = v32;
      uint64_t v62 = v33;
      __swift_allocate_boxed_opaque_existential_0Tm(v59);
      sub_188386D94();
      sub_188386D64();
      sub_18836E0EC((uint64_t)v59, (uint64_t)v58);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C708700);
      unint64_t v35 = v53;
      uint64_t v36 = v20;
      char v37 = swift_dynamicCast();
      uint64_t v38 = v54;
      uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
      if ((v37 & 1) != 0)
      {
        v39(v35, 0LL, 1LL, v36);
        uint64_t v40 = v47[0];
        (*(void (**)(void, char *, uint64_t))(v38 + 32))(v47[0], v35, v36);
        uint64_t v41 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v49, v40, v36);
        (*(void (**)(char *, uint64_t, uint64_t))(v19 + 56))(v41, v55, v19);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v36);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
        uint64_t v23 = (uint64_t)v48;
        return __swift_destroy_boxed_opaque_existential_1Tm(v23);
      }

      v39(v35, 1LL, 1LL, v36);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v51);
      sub_18836E074();
      swift_allocError();
      uint64_t v43 = v42;
      uint64_t v44 = v60;
      uint64_t v45 = __swift_project_boxed_opaque_existential_1(v59, v60);
      *(void *)(v43 + 24) = v44;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v43);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v44 - 8) + 16LL))( boxed_opaque_existential_0Tm,  v45,  v44);
      *(void *)(v43 + 32) = v36;
      *(_BYTE *)(v43 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
    }

    else
    {
      sub_18836E074();
      swift_allocError();
      *(void *)uint64_t v34 = v27;
      *(void *)(v34 + 8) = v26;
      *(_BYTE *)(v34 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v22);
    }

    a1 = v48;
  }

  uint64_t v23 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1Tm(v23);
}

uint64_t DynamicCodable.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_188386B24();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v8 = MEMORY[0x1895F8860](v7);
  uint64_t v42 = (char *)&v37 - v9;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1895F8860](v8);
  uint64_t v43 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8860](v11);
  uint64_t v40 = (char *)&v37 - v14;
  MEMORY[0x1895F8860](v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E8350);
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x1895F8860](v46);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v19 = sub_18836C644();
  uint64_t v45 = v18;
  unint64_t v37 = v19;
  sub_1883872A4();
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v50 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v49);
  uint64_t v21 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
  v21(boxed_opaque_existential_0Tm, v16, AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v49, v50);
  swift_getDynamicType();
  uint64_t v22 = sub_1883872E0();
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  if (!static DynamicCodable.supportedType(named:)(v22, v24, a2, a3))
  {
    uint64_t v51 = v21;
    uint64_t v25 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v16, a2, a3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v25, 1LL, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v38 + 8))(v42, v39);
      sub_18836E074();
      swift_allocError();
      *(void *)uint64_t v26 = v22;
      *(void *)(v26 + 8) = v24;
      *(_BYTE *)(v26 + 40) = 0;
LABEL_9:
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    }

    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v27 = v40;
    v39(v40, v42, AssociatedTypeWitness);
    uint64_t v50 = AssociatedTypeWitness;
    uint64_t v28 = __swift_allocate_boxed_opaque_existential_0Tm(v49);
    uint64_t v21 = v51;
    v51(v28, v27, AssociatedTypeWitness);
    __swift_project_boxed_opaque_existential_1(v49, v50);
    swift_getDynamicType();
    sub_1883872E0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    v39(v16, v27, AssociatedTypeWitness);
  }

  v21((uint64_t *)v43, v16, AssociatedTypeWitness);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708708);
  if (!swift_dynamicCast())
  {
    uint64_t v48 = 0LL;
    memset(v47, 0, sizeof(v47));
    swift_bridgeObjectRelease();
    sub_18838008C((uint64_t)v47);
    sub_18836E074();
    swift_allocError();
    uint64_t v34 = v33;
    v33[3] = AssociatedTypeWitness;
    unint64_t v35 = __swift_allocate_boxed_opaque_existential_0Tm(v33);
    v21(v35, v16, AssociatedTypeWitness);
    v34[4] = v29;
    *((_BYTE *)v34 + 40) = 1;
    goto LABEL_9;
  }

  sub_188352384(v47, (uint64_t)v49);
  LOBYTE(v47[0]) = 0;
  uint64_t v30 = v45;
  uint64_t v31 = v46;
  uint64_t v32 = v41;
  sub_188386DB8();
  swift_bridgeObjectRelease();
  if (!v32)
  {
    __swift_project_boxed_opaque_existential_1(v49, v50);
    LOBYTE(v47[0]) = 1;
    sub_188386E0C();
    sub_188386DE8();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
}

uint64_t sub_18837FA54()
{
  return sub_188386DE8();
}

uint64_t sub_18837FAC0()
{
  return sub_188386D64();
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(rawValue:)( Swift::String rawValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_188386D10();
  result.double value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *BOOL v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(stringValue:)( Swift::String stringValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_188386D10();
  result.double value = swift_bridgeObjectRelease();
  if (v3)
  {
    if (v3 == 1) {
      char v5 = 1;
    }
    else {
      char v5 = 2;
    }
  }

  else
  {
    char v5 = 0;
  }

  *BOOL v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(intValue:)( Swift::Int intValue)
{
  *uint64_t v1 = 2;
  return (Mercury::DynamicCodableContainerCodingKeys_optional)intValue;
}

uint64_t DynamicCodableContainerCodingKeys.intValue.getter()
{
  return 0LL;
}

uint64_t DynamicCodableContainerCodingKeys.rawValue.getter()
{
  if (*v0) {
    return 0x65756C6176LL;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

uint64_t DynamicCodableContainerCodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x65756C6176LL;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

uint64_t sub_18837FCA4(char *a1, char *a2)
{
  return sub_18837F050(*a1, *a2);
}

uint64_t sub_18837FCB0()
{
  return sub_188387268();
}

uint64_t sub_18837FD38()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18837FD9C()
{
  return sub_188387268();
}

Mercury::DynamicCodableContainerCodingKeys_optional sub_18837FE20(Swift::String *a1)
{
  return DynamicCodableContainerCodingKeys.init(rawValue:)(*a1);
}

void sub_18837FE2C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x5464656C676E616DLL;
  if (*v1) {
    uint64_t v2 = 0x65756C6176LL;
  }
  unint64_t v3 = 0xEF656D614E657079LL;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_18837FE74()
{
  if (*v0) {
    return 0x65756C6176LL;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

void sub_18837FEBC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_18837FEC8()
{
  return sub_1883872C8();
}

uint64_t sub_18837FEF0()
{
  return sub_1883872D4();
}

uint64_t sub_18837FF18@<X0>(uint64_t a1@<X8>)
{
  return static DynamicCodable.defaultEncodingValue.getter(a1);
}

uint64_t static DynamicCodable.defaultEncodingValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a1,  1LL,  1LL,  AssociatedTypeWitness);
}

uint64_t static DynamicCodable.supportedType(named:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = v6 + 48; ; i += 24LL)
    {
      uint64_t v9 = *(void *)(i - 16);
      if (sub_1883872E0() == a1 && v10 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }

      char v12 = sub_188386FD4();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0) {
        break;
      }
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        return 0LL;
      }
    }

    swift_bridgeObjectRelease_n();
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v9;
}

uint64_t sub_18838008C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C708710);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL static DynamicCodable.canEncode(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( boxed_opaque_existential_0Tm,  a1,  AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v13, v14);
  swift_getDynamicType();
  uint64_t v8 = sub_1883872E0();
  uint64_t v10 = v9;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  uint64_t v11 = static DynamicCodable.supportedType(named:)(v8, v10, a2, a3);
  swift_bridgeObjectRelease();
  return v11 != 0;
}

uint64_t KeyedEncodingContainerProtocol.encode<A, B>(_:using:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = MEMORY[0x1895F8860](a1);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8860](v10);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v17 + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(a8 + 56))(v12, a5, a8);
  sub_18838710C();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a5);
}

uint64_t KeyedDecodingContainerProtocol.decode<A, B>(using:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8860](a1);
  char v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_188387064();
  if (!v7)
  {
    (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a4, a7);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }

  return result;
}

uint64_t static CompositeDynamicCodableContainer.supportedTypes.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  sub_18838624C(v8);
  return v7;
}

uint64_t static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a6;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_188386B24();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8860](v15);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1LL, a2) == 1)
  {
    (*(void (**)(char *))(v21 + 48))(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a7, v18, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a7, 0LL, 1LL, a2);
  }

uint64_t CompositeDynamicCodableContainer.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t CompositeDynamicCodableContainer.init(wrappedValue:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t CompositeDynamicCodableContainer.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v72 = a1;
  uint64_t v4 = a2[2];
  uint64_t v5 = sub_188386B24();
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  uint64_t v6 = MEMORY[0x1895F8860](v5);
  id v66 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8860](v6);
  uint64_t v69 = (char *)&v58 - v9;
  uint64_t v70 = a2[4];
  uint64_t v68 = *(void *)(v70 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](v8);
  uint64_t v63 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8860](v10);
  uint64_t v67 = (char *)&v58 - v13;
  uint64_t v73 = v4;
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v14 = MEMORY[0x1895F8860](v12);
  uint64_t v62 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8860](v14);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = MEMORY[0x1895F8860](v16);
  uint64_t v21 = (char *)&v58 - v20;
  uint64_t v22 = a2[3];
  uint64_t v71 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8860](v19);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v23);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v28 = a2[5];
  uint64_t v29 = v2;
  if (static DynamicCodable.canEncode(value:)(v2, v22, v28))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v21, v2, v73);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v21, v22, v28);
    sub_1883867D0();
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v22);
  }

  id v59 = v25;
  uint64_t v60 = v18;
  uint64_t v32 = v69;
  uint64_t v31 = v70;
  uint64_t v61 = v21;
  uint64_t v33 = v73;
  uint64_t v34 = a2[6];
  if (static DynamicCodable.canEncode(value:)(v2, v70, v34))
  {
    unint64_t v35 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v61, v2, v33);
    uint64_t v36 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 56))(v35, v31, v34);
    sub_1883867D0();
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v36, v31);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v2, v22, v28);
  uint64_t v37 = v76;
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  if (v38(v32, 1LL, v33) == 1)
  {
    uint64_t v39 = v65;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v64 + 8);
    v40(v32, v65);
    uint64_t v41 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v29, v31, v34);
    if (v38(v41, 1LL, v33) == 1)
    {
      v40(v41, v39);
      sub_18836E074();
      swift_allocError();
      uint64_t v43 = v42;
      uint64_t v75 = v33;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v74);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v76 + 16))(boxed_opaque_existential_0Tm, v29, v33);
      __swift_project_boxed_opaque_existential_1(v74, v75);
      swift_getDynamicType();
      uint64_t v45 = sub_1883872E0();
      uint64_t v47 = v46;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
      *(void *)uint64_t v43 = v45;
      *(void *)(v43 + 8) = v47;
      *(_BYTE *)(v43 + 40) = 0;
      return swift_willThrow();
    }

    uint64_t v53 = v41;
    uint64_t v54 = v76;
    uint64_t v55 = v62;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v62, v53, v33);
    uint64_t v56 = v61;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v61, v55, v33);
    uint64_t v57 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 56))(v56, v31, v34);
    sub_1883867D0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v31);
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    uint64_t v52 = v55;
  }

  else
  {
    uint64_t v48 = v60;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v60, v32, v33);
    uint64_t v49 = v61;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v61, v48, v33);
    uint64_t v50 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v49, v22, v28);
    sub_1883867D0();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v22);
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
    uint64_t v52 = v48;
  }

  return v51(v52, v33);
}

void CompositeDynamicCodableContainer.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a3;
  uint64_t v30 = a6;
  uint64_t v26 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8860](v10);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = v18;
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8860](v15);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_188349220(v19, (uint64_t)v33);
  sub_188386A28();
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a2);
LABEL_6:
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30, v21, v31);
    return;
  }

  id v34 = v6;
  id v22 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7910);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_9;
  }

  if ((v33[40] & 1) == 0)
  {

    sub_188380D54((uint64_t)v33);
    sub_188349220(a1, (uint64_t)v32);
    uint64_t v24 = v27;
    uint64_t v23 = v28;
    sub_188386A28();
    (*(void (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v23);

    goto LABEL_6;
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  sub_188380D54((uint64_t)v33);
LABEL_9:
}

uint64_t sub_188380CF0(uint64_t *a1)
{
  return static CompositeDynamicCodableContainer.supportedTypes.getter((uint64_t)a1, a1[3], a1[4], a1[5], a1[6]);
}

uint64_t sub_188380CFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)( a1,  a2[2],  a2[3],  a2[4],  a2[5],  a2[6],  a3);
}

uint64_t sub_188380D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CompositeDynamicCodableContainer.init(wrappedValue:)(a1, *(void *)(a2 + 16), a3);
}

void sub_188380D1C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_188380D40(uint64_t a1, void *a2)
{
  return CompositeDynamicCodableContainer.encode(to:)(a1, a2);
}

uint64_t sub_188380D54(uint64_t a1)
{
  return a1;
}

unint64_t sub_188380D84()
{
  unint64_t result = qword_18C708B00;
  if (!qword_18C708B00)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DynamicCodableContainerCodingKeys,  &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C708B00);
  }

  return result;
}

unint64_t sub_188380DCC()
{
  unint64_t result = qword_18C4E8328;
  if (!qword_18C4E8328)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DynamicCodableContainerCodingKeys,  &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C4E8328);
  }

  return result;
}

unint64_t sub_188380E14()
{
  unint64_t result = qword_18C4E8320;
  if (!qword_18C4E8320)
  {
    unint64_t result = MEMORY[0x1895C375C]( &protocol conformance descriptor for DynamicCodableContainerCodingKeys,  &type metadata for DynamicCodableContainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C4E8320);
  }

  return result;
}

uint64_t sub_188380E58(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = MEMORY[0x1895C375C](&protocol conformance descriptor for CompositeDynamicCodableContainer<A, B, C>);
  uint64_t result = MEMORY[0x1895C375C](&protocol conformance descriptor for CompositeDynamicCodableContainer<A, B, C>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for DynamicCodableError(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    char v6 = 1;
  }

  else
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    swift_bridgeObjectRetain();
    char v6 = 0;
  }

  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_BYTE *)(a1 + 40) = 0;
      swift_bridgeObjectRetain();
    }
  }

  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }

    else
    {
      char v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }

    *(_BYTE *)(a1 + 40) = v7;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicCodableError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DynamicCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_188381154(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t sub_188381170(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableError()
{
  return &type metadata for DynamicCodableError;
}

uint64_t storeEnumTagSinglePayload for DynamicCodableContainerCodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1883811F4 + 4 * byte_18838ABB5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_188381228 + 4 * asc_18838ABB0[v4]))();
}

uint64_t sub_188381228(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_188381230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x188381238LL);
  }
  return result;
}

uint64_t sub_188381244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18838124CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_188381250(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_188381258(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableContainerCodingKeys()
{
  return &type metadata for DynamicCodableContainerCodingKeys;
}

uint64_t dispatch thunk of static DynamicCodable.supportedTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue(forUnencodableValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DynamicCodable.init(wrappedValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DynamicCodable.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_18838129C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_188381308(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t sub_188381378(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_188381388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1883813B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1883813E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188381418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188381448(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1883814F8 + 4 * byte_18838ABBA[(v7 - 1)]))();
}

void sub_188381548(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void type metadata accessor for CompositeDynamicCodableContainer()
{
}

uint64_t sub_188381704@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unsigned int v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_188352244(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *unint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1883493F8((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&unk_18C4E77E0);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_188344660((uint64_t)v21, &qword_18C4E77D8);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t static Error<>.unknown.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(-1, 0xD00000000000001ALL, 0x800000018838C920LL, a1, a2);
}

uint64_t static Error<>.xpcError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(3, 0xD00000000000003CLL, 0x800000018838CF70LL, a1, a2);
}

uint64_t _Error.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_domain);
  uint64_t v9 = sub_188386860();
  uint64_t v11 = v10;

  if (v9 == sub_188386440() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }

  char v14 = sub_188386FD4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_8:
    id v16 = objc_msgSend(a1, sel_code);
    id v17 = objc_msgSend(a1, sel_userInfo);
    uint64_t v18 = sub_188386788();

    uint64_t v19 = sub_1883824D8((uint64_t)v16, a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v19, v18, a2, a3);
    uint64_t v15 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4,  v15,  1LL,  a2);
  }

  uint64_t v15 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a4, v15, 1LL, a2);
}

id static _Error<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1895F8860](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v7);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = sub_188386458();
  uint64_t v13 = sub_188386458();
  char v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v11, a1, a3);
  v14(v9, a2, a3);
  if (v12 == v13)
  {
    sub_18838644C();
    uint64_t v15 = (void *)sub_18838677C();
    swift_bridgeObjectRelease();
    sub_18838644C();
    id v16 = (void *)sub_18838677C();
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v15, sel_isEqual_, v16);
  }

  else
  {
    id v17 = 0LL;
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, a3);
  v18(v11, a3);
  return v17;
}

uint64_t _Error<>.hash(into:)()
{
  return sub_188387250();
}

uint64_t _Error<>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1895F8860](a1);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8860](v10);
  char v14 = (char *)&v37 - v13;
  sub_188352280(0LL, (unint64_t *)&qword_18C4E7888);
  sub_188349220(a1, (uint64_t)&v46);
  uint64_t v15 = NSError.init(from:)(&v46);
  if (v5)
  {
    uint64_t v16 = a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v16);
  }

  uint64_t v40 = a4;
  uint64_t v41 = 0LL;
  uint64_t v37 = v12;
  uint64_t v38 = v14;
  uint64_t v42 = v4;
  uint64_t v43 = a1;
  uint64_t v39 = v9;
  id v44 = v15;
  id v18 = objc_msgSend(v15, sel_domain);
  uint64_t v19 = sub_188386860();
  uint64_t v21 = v20;

  uint64_t v22 = v45;
  if (v19 == sub_188386440() && v21 == v23)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v25 = sub_188386FD4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = (uint64_t)v37;
      Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x800000018838CFB0LL, a2, v22);
      uint64_t v46 = 0LL;
      uint64_t v47 = 0xE000000000000000LL;
      sub_188386BB4();
      sub_1883868E4();
      uint64_t v48 = a2;
      swift_getMetatypeMetadata();
      sub_18838689C();
      sub_1883868E4();
      swift_bridgeObjectRelease();
      sub_1883868E4();
      uint64_t v27 = v38;
      Error<>.init(_:_:)(v26, v46, v47, a2, v22);
      uint64_t v28 = sub_188386FB0();
      uint64_t v29 = v43;
      id v30 = v44;
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v27, a2);
      }

      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v36, v27, a2);
      }

      swift_willThrow();

      uint64_t v16 = v29;
      return __swift_destroy_boxed_opaque_existential_1Tm(v16);
    }
  }

  id v31 = v44;
  id v32 = objc_msgSend(v44, sel_code);
  id v33 = objc_msgSend(v31, sel_userInfo);
  uint64_t v34 = sub_188386788();

  uint64_t v35 = sub_1883824D8((uint64_t)v32, a2, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24))(v35, v34, a2, v22);

  return __swift_destroy_boxed_opaque_existential_1Tm(v43);
}

void _Error<>.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a2);
  uint64_t v8 = sub_188386FB0();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a2);
  }

  else
  {
    uint64_t v9 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a2);
  }

  uint64_t v11 = (void *)sub_18838650C();

  NSError.encode(to:)(a1);
}

uint64_t _Error<>.errorDescription.getter()
{
  return sub_18838215C();
}

uint64_t _Error<>.failureReason.getter()
{
  return sub_18838215C();
}

uint64_t sub_18838215C()
{
  uint64_t v0 = sub_18838644C();
  uint64_t v1 = sub_188386860();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = sub_18837191C(v1, v2), (v4 & 1) == 0))
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  sub_188352244(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_9:
    sub_188344660((uint64_t)&v7, &qword_18C4E7948);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t _Error<>.recoverySuggestion.getter()
{
  return sub_18838215C();
}

uint64_t _Error<>.helpAnchor.getter()
{
  return sub_18838215C();
}

uint64_t Error<>.init(_:userInfo:defaultUserInfo:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = a2;
  sub_1883851C4(a3, (uint64_t)sub_188385424, 0LL, isUniquelyReferenced_nonNull_native, &v18);
  uint64_t v11 = v18;
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_18838644C();
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = v11;
  sub_1883851C4(v12, (uint64_t)sub_188385424, 0LL, v13, &v18);
  uint64_t v14 = v18;
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_188386458();
  uint64_t v16 = sub_1883824D8(v15, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v16, v14, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a1, a4);
}

uint64_t Error<>.init(_:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  *(void *)(inited + 32) = sub_188386860();
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  unint64_t v12 = sub_1883382F4(inited);
  uint64_t v13 = sub_1883824D8(v9, a4, a5);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a5 + 24))(v13, v12, a4, a5);
}

void sub_18838246C()
{
}

void _Error.init(code:userInfo:)()
{
}

uint64_t sub_1883824D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8860](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v7)
  {
    sub_188386A7C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1883895E0;
    uint64_t v23 = a2;
    swift_getMetatypeMetadata();
    uint64_t v11 = sub_18838689C();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = MEMORY[0x189617FA8];
    unint64_t v14 = sub_18834DFC0();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    uint64_t v15 = MEMORY[0x1896187B0];
    *(void *)(v10 + 96) = MEMORY[0x189618740];
    *(void *)(v10 + 104) = v15;
    *(void *)(v10 + 64) = v14;
    *(void *)(v10 + 72) = v5;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v16 = (void *)sub_188386B18();
  }

  else
  {
    sub_188386A7C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E7900);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1883883A0;
    uint64_t v23 = a2;
    swift_getMetatypeMetadata();
    uint64_t v18 = sub_18838689C();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = MEMORY[0x189617FA8];
    *(void *)(v17 + 64) = sub_18834DFC0();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    sub_188352280(0LL, (unint64_t *)&qword_18C708530);
    uint64_t v16 = (void *)sub_188386B18();
  }

  sub_18838668C();
  swift_bridgeObjectRelease();

  Error<>.init(_:_:)(0xFFFFFFFFLL, 0xD00000000000001ALL, 0x800000018838C920LL, a2, a3);
  uint64_t v5 = sub_188386458();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  if (v5 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v5 <= 0x7FFFFFFF)
  {
    return v5;
  }

  __break(1u);
  return result;
}

uint64_t _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1883824D8(a1, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v7, a2, a3, a4);
}

BOOL static _Error.~= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = sub_188386FB0();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  }

  else
  {
    uint64_t v8 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9, v6, a3);
  }

  BOOL v10 = static _Error.~= infix(_:_:)();

  return v10;
}

BOOL static _Error.~= infix(_:_:)()
{
  uint64_t v0 = sub_188386E24();
  uint64_t v2 = v1;
  if (v0 == sub_188386440() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }

  char v5 = sub_188386FD4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0LL;
  if ((v5 & 1) != 0)
  {
LABEL_8:
    uint64_t v7 = sub_188386458();
    swift_getErrorValue();
    return v7 == sub_1883871F0();
  }

  return result;
}

{
  return static _Error.~= infix(_:_:)();
}

uint64_t Error<>.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E78E8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1883883A0;
    *(void *)(inited + 32) = sub_188386860();
    *(void *)(inited + 40) = v15;
    *(void *)(inited + 48) = a2;
    *(void *)(inited + 56) = a3;
    uint64_t v16 = inited;
  }

  else
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
  }

  unint64_t v17 = sub_188338428(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  unint64_t v18 = sub_188382B1C(v17);
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_1883476E8(MEMORY[0x18961AFE8]);
  Error<>.init(_:userInfo:defaultUserInfo:)((uint64_t)v12, v18, v19, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
}

unint64_t sub_188382B1C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78A8);
    uint64_t v2 = (void *)sub_188386CEC();
  }

  else
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0LL;
  uint64_t v10 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v11 = MEMORY[0x189617FA8];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }

LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_188344D58(v6, v7);
    sub_188344D58(v7, v40);
    sub_188344D58(v40, &v38);
    unint64_t result = sub_18837191C(v35, v36);
    unint64_t v25 = result;
    if ((v26 & 1) != 0)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      unint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      unint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      unint64_t result = (unint64_t)sub_188344D58(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_188344D58(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t static Error<>.dataCorrupted.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x800000018838CFB0LL, a1, a2);
}

id sub_188382F48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _HandlerBox();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _Error<>.recoveryOptions.getter()
{
  uint64_t v0 = sub_18838644C();
  uint64_t v1 = sub_188386860();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = sub_18837191C(v1, v2), (v4 & 1) == 0))
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  sub_188352244(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_188344660((uint64_t)&v7, &qword_18C4E7948);
    return MEMORY[0x18961AFE8];
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E7810);
  return MEMORY[0x18961AFE8];
}

uint64_t _Error<>.attemptRecovery(optionIndex:resultHandler:)( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8860](a1);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_18838644C();
  uint64_t v14 = sub_188386860();
  if (!*(void *)(v13 + 16) || (unint64_t v16 = sub_18837191C(v14, v15), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  sub_188352244(*(void *)(v13 + 56) + 32 * v16, (uint64_t)v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v51;
  if (!v51)
  {
LABEL_8:
    char v32 = sub_1883864DC();
    return a2(v32 & 1);
  }

  uint64_t v46 = a1;
  unint64_t v19 = __swift_project_boxed_opaque_existential_1(v50, (uint64_t)v51);
  uint64_t v45 = (uint64_t)&v45;
  uint64_t v20 = *(void *)(v18 - 8);
  MEMORY[0x1895F8860](v19);
  int64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v22);
  uint64_t v23 = sub_188386FC8();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  unint64_t v25 = (void *)v23;
  v24(v22, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  if ((objc_msgSend( v25,  sel_respondsToSelector_,  sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }

  char v26 = (objc_class *)type metadata accessor for _HandlerBox();
  uint64_t v27 = (char *)objc_allocWithZone(v26);
  uint64_t v28 = &v27[OBJC_IVAR____TtC7MercuryP33_2B1830E49151A2D290BADAC81D16B73411_HandlerBox_handler];
  *(void *)uint64_t v28 = a2;
  *((void *)v28 + 1) = a3;
  v49.receiver = v27;
  v49.super_class = v26;
  swift_unknownObjectRetain();
  swift_retain();
  id v29 = objc_msgSendSuper2(&v49, sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a4);
  uint64_t v30 = sub_188386FB0();
  if (v30)
  {
    int64_t v31 = (void *)v30;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }

  else
  {
    int64_t v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v34, v12, a4);
  }

  uint64_t v51 = v26;
  v50[0] = v29;
  id v35 = v29;
  uint64_t v36 = (void *)sub_18838650C();
  sub_188344D68((uint64_t)v50, (uint64_t)v47, &qword_18C4E7948);
  uint64_t v37 = v48;
  if (v48)
  {
    __int128 v38 = __swift_project_boxed_opaque_existential_1(v47, v48);
    uint64_t v39 = v25;
    uint64_t v40 = *(void *)(v37 - 8);
    MEMORY[0x1895F8860](v38);
    uint64_t v42 = (char *)&v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v40 + 16))(v42);
    uint64_t v43 = sub_188386FC8();
    id v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    unint64_t v25 = v39;
    v44(v42, v37);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }

  else
  {
    uint64_t v43 = 0LL;
  }

  objc_msgSend( v25,  sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_,  v36,  v46,  v43,  sel_invoke::,  0);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return sub_188344660((uint64_t)v50, &qword_18C4E7948);
}

id _Error<>.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8860](a1);
  __int128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_18838644C();
  uint64_t v10 = sub_188386860();
  if (!*(void *)(v9 + 16) || (unint64_t v12 = sub_18837191C(v10, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  sub_188352244(*(void *)(v9 + 56) + 32 * v12, (uint64_t)v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v30;
  if (!v30) {
    return 0LL;
  }
  uint64_t v28 = a1;
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1895F8860](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v16 + 16))(v18);
  unint64_t v19 = (void *)sub_188386FC8();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  if ((objc_msgSend(v19, sel_respondsToSelector_, sel_attemptRecoveryFromError_optionIndex_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  swift_unknownObjectRetain();
  uint64_t v20 = sub_188386FB0();
  uint64_t v21 = v28;
  if (v20)
  {
    int64_t v22 = (void *)v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }

  else
  {
    int64_t v22 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v25, v8, a2);
  }

  char v26 = (void *)sub_18838650C();
  id v23 = objc_msgSend(v19, sel_attemptRecoveryFromError_optionIndex_, v26, v21);
  swift_unknownObjectRelease_n();

  return v23;
}

uint64_t static Error<>.unimplemented.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(1, 0xD00000000000003ALL, 0x800000018838D0F0LL, a1, a2);
}

uint64_t static Error<>.permissionDenied.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(2, 0xD000000000000047LL, 0x800000018838D130LL, a1, a2);
}

uint64_t static Error<>.networkingError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(4, 0xD00000000000001CLL, 0x800000018838D180LL, a1, a2);
}

uint64_t sub_188383740(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78A8);
  uint64_t v6 = sub_188386CE0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if ((a2 & 1) != 0)
              {
                uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v34 = -1LL << v32;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v13 = v20;
          }
        }

uint64_t sub_188383A3C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_18838662C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8860](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708B80);
  int v39 = a2;
  uint64_t v10 = sub_188386CE0();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v36 = v2;
    uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    __int128 v38 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1LL << v12);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v15 = v14 & v13;
    int64_t v37 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0LL;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }

      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v22 >= v37) {
          goto LABEL_34;
        }
        unint64_t v23 = v38[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v23 = v38[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v36;
              if ((v39 & 1) != 0)
              {
                uint64_t v34 = 1LL << *(_BYTE *)(v9 + 32);
                if (v34 >= 64) {
                  bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *__int128 v38 = -1LL << v34;
                }
                *(void *)(v9 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_41;
                }
                if (v18 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v23 = v38[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v18 = v24;
          }
        }

uint64_t sub_188383DC8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for RemoteDevice.Identity();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x1895F8860](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C707D60);
  int v42 = a2;
  uint64_t v9 = sub_188386CE0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = v2;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v21 >= v38) {
      break;
    }
    int64_t v22 = v39;
    unint64_t v23 = v39[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v23 = v39[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v23 = v39[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_43;
            }
            if (v17 >= v38) {
              goto LABEL_34;
            }
            unint64_t v23 = v39[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }

        int64_t v17 = v24;
      }
    }

uint64_t sub_188384178(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708870);
  uint64_t result = sub_188386CE0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0LL;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }

      else
      {
        int64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }

              uint64_t v28 = 1LL << *(_BYTE *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v30 = -1LL << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v8 = v18;
          }
        }

uint64_t sub_188384454(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B0);
  char v38 = a2;
  uint64_t v6 = sub_188386CE0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v24;
      }
    }

void *sub_1883847C8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_188386CD4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_1883849AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_18838662C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708B80);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_188386CD4();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  unint64_t v23 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v24 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v25) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21) {
        break;
      }
    }

void *sub_188384C00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RemoteDevice.Identity();
  uint64_t v26 = *(void *)(v2 - 8);
  MEMORY[0x1895F8860](v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C707D60);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_188386CD4();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  int64_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v16) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v9 + 8 * v12);
      if (!v23) {
        break;
      }
    }

void *sub_188384E20()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708870);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_188386CD4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_188384FE4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E78B0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_188386CD4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

uint64_t sub_1883851B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  return sub_1883851C4(a1, a2, a3, a4, a5);
}

uint64_t sub_1883851C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0LL;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_188381704(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1883493F0();
    return swift_release();
  }

  while (1)
  {
    uint64_t v15 = v34;
    sub_188344D58(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_18837191C(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if ((a4 & 1) != 0)
      {
        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }

      else
      {
        sub_1883847C8();
        if ((v22 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      sub_188383740(v21, a4 & 1);
      unint64_t v23 = sub_18837191C(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_188352244(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_188352244((uint64_t)v31, (uint64_t)v32);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
        swift_bridgeObjectRelease();
        unint64_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
        sub_188344D58(v32, v14);
        goto LABEL_7;
      }
    }

    int64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    *uint64_t v26 = v15;
    v26[1] = v12;
    sub_188344D58(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    void v25[2] = v29;
LABEL_7:
    sub_188381704(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_1883871CC();
  __break(1u);
  return result;
}

uint64_t sub_188385424@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_188352244((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for _HandlerBox()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t sub_18838548C()
{
  unint64_t result = qword_18C707DF0;
  if (!qword_18C707DF0)
  {
    uint64_t v1 = sub_18838662C();
    unint64_t result = MEMORY[0x1895C375C](MEMORY[0x189606F48], v1);
    atomic_store(result, (unint64_t *)&qword_18C707DF0);
  }

  return result;
}

uint64_t static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1895F8860](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v18 - v9;
  a4[3] = v8;
  a4[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a4);
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  v12(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  uint64_t v13 = v19;
  sub_18838704C();
  v12((uint64_t *)v10, a1, AssociatedTypeWitness);
  if (!v13)
  {
    unint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
    sub_188386BB4();
    swift_bridgeObjectRelease();
    unint64_t v20 = 0xD000000000000015LL;
    unint64_t v21 = 0x800000018838D220LL;
    sub_1883872B0();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C708B88);
  unint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  v14(v10, AssociatedTypeWitness);
  sub_188386C14();
  uint64_t v15 = *MEMORY[0x189619350];
  uint64_t v16 = sub_188386C2C();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(a4, v15, v16);
}

uint64_t static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( boxed_opaque_existential_0Tm,  a3,  AssociatedTypeWitness);
  sub_1883860B4(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  *a3 = a1;
  if (!a2)
  {
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_1883872E0();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_188386C14();
  uint64_t v4 = *MEMORY[0x189619368];
  uint64_t v5 = sub_188386C2C();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a3, v4, v5);
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v11 = sub_188386E3C();
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v9 = swift_allocObject();
  *(void *)(inited + 32) = v9;
  *(void *)(v9 + 16) = 0x207865646E49LL;
  *(void *)(v9 + 24) = 0xE600000000000000LL;
  *(void *)(v9 + 32) = v11;
  *(_BYTE *)(v9 + 40) = 0;
  sub_1883860B4(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_188386E30();
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  uint64_t v13 = sub_188386E3C();
  sub_188386E24();
  sub_1883868E4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_188344CD0();
  uint64_t v10 = swift_allocObject();
  *(void *)(inited + 32) = v10;
  *(void *)(v10 + 16) = 0x207865646E49LL;
  *(void *)(v10 + 24) = 0xE600000000000000LL;
  *(void *)(v10 + 32) = v13;
  *(_BYTE *)(v10 + 40) = 0;
  sub_1883860B4(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_188386E30();
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  *a4 = a1;
  sub_188352244(a2, (uint64_t)v9);
  if (!a3)
  {
    sub_188386BB4();
    swift_bridgeObjectRelease();
    sub_1883872E0();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    swift_getDynamicType();
    sub_1883872E0();
    sub_1883868E4();
    swift_bridgeObjectRelease();
    sub_1883868E4();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4E6D20);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  swift_bridgeObjectRetain();
  sub_188386C14();
  uint64_t v6 = *MEMORY[0x189619358];
  uint64_t v7 = sub_188386C2C();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL))(a4, v6, v7);
}

uint64_t static DecodingError.valueNotFoundError<A>(expectingValueOfType:forKey:in:debugDescription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1883883A0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( boxed_opaque_existential_0Tm,  a2,  AssociatedTypeWitness);
  sub_1883860B4(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1883860B4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_188371128(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C4E8360);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    _OWORD v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

uint64_t sub_188386228()
{
  return swift_deallocObject();
}

uint64_t sub_18838624C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_18837113C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = &v3[3 * v9 + 4];
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    _OWORD v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

void connect_loopback_sync_cold_1()
{
}

void __connect_loopback_sync_block_invoke_cold_1()
{
  __assert_rtn( "connect_loopback_sync_block_invoke",  "loopback.m",  59,  "remote_device_get_state(dev) == REMOTE_DEVICE_STATE_CONNECTED");
}

uint64_t sub_1883863EC()
{
  return MEMORY[0x189605F38]();
}

uint64_t sub_1883863F8()
{
  return MEMORY[0x189605F40]();
}

uint64_t sub_188386404()
{
  return MEMORY[0x189605F48]();
}

uint64_t sub_188386410()
{
  return MEMORY[0x189605F60]();
}

uint64_t sub_18838641C()
{
  return MEMORY[0x189605FA0]();
}

uint64_t sub_188386428()
{
  return MEMORY[0x189605FA8]();
}

uint64_t sub_188386434()
{
  return MEMORY[0x189605FC8]();
}

uint64_t sub_188386440()
{
  return MEMORY[0x1896061C0]();
}

uint64_t sub_18838644C()
{
  return MEMORY[0x1896061C8]();
}

uint64_t sub_188386458()
{
  return MEMORY[0x1896061D0]();
}

uint64_t sub_188386464()
{
  return MEMORY[0x1896061F0]();
}

uint64_t sub_188386470()
{
  return MEMORY[0x189606200]();
}

uint64_t sub_18838647C()
{
  return MEMORY[0x189606208]();
}

uint64_t sub_188386488()
{
  return MEMORY[0x189606230]();
}

uint64_t sub_188386494()
{
  return MEMORY[0x189606240]();
}

uint64_t sub_1883864A0()
{
  return MEMORY[0x189606260]();
}

uint64_t sub_1883864AC()
{
  return MEMORY[0x189606270]();
}

uint64_t sub_1883864B8()
{
  return MEMORY[0x189606278]();
}

uint64_t sub_1883864C4()
{
  return MEMORY[0x189606280]();
}

uint64_t sub_1883864D0()
{
  return MEMORY[0x189606288]();
}

uint64_t sub_1883864DC()
{
  return MEMORY[0x189606340]();
}

uint64_t sub_1883864E8()
{
  return MEMORY[0x189606390]();
}

uint64_t sub_1883864F4()
{
  return MEMORY[0x189606908]();
}

uint64_t sub_188386500()
{
  return MEMORY[0x189606910]();
}

uint64_t sub_18838650C()
{
  return MEMORY[0x189606928]();
}

uint64_t sub_188386518()
{
  return MEMORY[0x189606940]();
}

uint64_t sub_188386524()
{
  return MEMORY[0x189606958]();
}

uint64_t sub_188386530()
{
  return MEMORY[0x189606960]();
}

uint64_t sub_18838653C()
{
  return MEMORY[0x189606980]();
}

uint64_t sub_188386548()
{
  return MEMORY[0x189606A30]();
}

uint64_t sub_188386554()
{
  return MEMORY[0x189606A38]();
}

uint64_t sub_188386560()
{
  return MEMORY[0x189606A60]();
}

uint64_t sub_18838656C()
{
  return MEMORY[0x189606A90]();
}

uint64_t sub_188386578()
{
  return MEMORY[0x189606B20]();
}

uint64_t sub_188386584()
{
  return MEMORY[0x189606B48]();
}

uint64_t sub_188386590()
{
  return MEMORY[0x189606BA8]();
}

uint64_t sub_18838659C()
{
  return MEMORY[0x189606CA0]();
}

uint64_t sub_1883865A8()
{
  return MEMORY[0x189606DD0]();
}

uint64_t sub_1883865B4()
{
  return MEMORY[0x189606DD8]();
}

uint64_t sub_1883865C0()
{
  return MEMORY[0x189606E20]();
}

uint64_t sub_1883865CC()
{
  return MEMORY[0x189606E30]();
}

uint64_t sub_1883865D8()
{
  return MEMORY[0x189606E60]();
}

uint64_t sub_1883865E4()
{
  return MEMORY[0x189606EB8]();
}

uint64_t sub_1883865F0()
{
  return MEMORY[0x189606EC8]();
}

uint64_t sub_1883865FC()
{
  return MEMORY[0x189606EE8]();
}

uint64_t sub_188386608()
{
  return MEMORY[0x189606F00]();
}

uint64_t sub_188386614()
{
  return MEMORY[0x189606F08]();
}

uint64_t sub_188386620()
{
  return MEMORY[0x189606F10]();
}

uint64_t sub_18838662C()
{
  return MEMORY[0x189606F20]();
}

uint64_t sub_188386638()
{
  return MEMORY[0x189606F80]();
}

uint64_t sub_188386644()
{
  return MEMORY[0x189606FB8]();
}

uint64_t sub_188386650()
{
  return MEMORY[0x189606FC8]();
}

uint64_t sub_18838665C()
{
  return MEMORY[0x189606FD0]();
}

uint64_t sub_188386668()
{
  return MEMORY[0x189606FD8]();
}

uint64_t sub_188386674()
{
  return MEMORY[0x189606FE0]();
}

uint64_t sub_188386680()
{
  return MEMORY[0x189606FF0]();
}

uint64_t sub_18838668C()
{
  return MEMORY[0x18961D150]();
}

uint64_t sub_188386698()
{
  return MEMORY[0x18961D1D8]();
}

uint64_t sub_1883866A4()
{
  return MEMORY[0x18961D1E0]();
}

uint64_t sub_1883866B0()
{
  return MEMORY[0x18961D1F0]();
}

uint64_t sub_1883866BC()
{
  return MEMORY[0x18961B598]();
}

uint64_t sub_1883866C8()
{
  return MEMORY[0x18961D0F0]();
}

uint64_t sub_1883866D4()
{
  return MEMORY[0x18961B5C8]();
}

uint64_t sub_1883866E0()
{
  return MEMORY[0x18961D120]();
}

uint64_t sub_1883866EC()
{
  return MEMORY[0x18961B5D0]();
}

uint64_t sub_1883866F8()
{
  return MEMORY[0x18961B5D8]();
}

uint64_t sub_188386704()
{
  return MEMORY[0x18961B5E0]();
}

uint64_t sub_188386710()
{
  return MEMORY[0x18961B5F0]();
}

uint64_t sub_18838671C()
{
  return MEMORY[0x18961B618]();
}

uint64_t sub_188386728()
{
  return MEMORY[0x1896022C8]();
}

uint64_t sub_188386734()
{
  return MEMORY[0x18961B6A0]();
}

uint64_t sub_188386740()
{
  return MEMORY[0x18961B6E8]();
}

uint64_t sub_18838674C()
{
  return MEMORY[0x18961B708]();
}

uint64_t sub_188386758()
{
  return MEMORY[0x189617790]();
}

uint64_t sub_188386764()
{
  return MEMORY[0x1896177D8]();
}

uint64_t sub_188386770()
{
  return MEMORY[0x1896177F0]();
}

uint64_t sub_18838677C()
{
  return MEMORY[0x189607050]();
}

uint64_t sub_188386788()
{
  return MEMORY[0x189607078]();
}

uint64_t sub_188386794()
{
  return MEMORY[0x189617838]();
}

uint64_t sub_1883867A0()
{
  return MEMORY[0x189617848]();
}

uint64_t sub_1883867AC()
{
  return MEMORY[0x1896178E0]();
}

uint64_t sub_1883867B8()
{
  return MEMORY[0x189617900]();
}

uint64_t sub_1883867C4()
{
  return MEMORY[0x189617908]();
}

uint64_t sub_1883867D0()
{
  return MEMORY[0x189617930]();
}

uint64_t sub_1883867DC()
{
  return MEMORY[0x189617998]();
}

uint64_t sub_1883867E8()
{
  return MEMORY[0x1896179F8]();
}

uint64_t sub_1883867F4()
{
  return MEMORY[0x189617A00]();
}

uint64_t sub_188386800()
{
  return MEMORY[0x189617B38]();
}

uint64_t sub_18838680C()
{
  return MEMORY[0x189617B40]();
}

uint64_t sub_188386818()
{
  return MEMORY[0x189617C20]();
}

uint64_t sub_188386824()
{
  return MEMORY[0x189607090]();
}

uint64_t sub_188386830()
{
  return MEMORY[0x189607098]();
}

uint64_t sub_18838683C()
{
  return MEMORY[0x1896070D8]();
}

uint64_t sub_188386848()
{
  return MEMORY[0x1896070E8]();
}

uint64_t sub_188386854()
{
  return MEMORY[0x1896070F8]();
}

uint64_t sub_188386860()
{
  return MEMORY[0x189607100]();
}

uint64_t sub_18838686C()
{
  return MEMORY[0x189607138]();
}

uint64_t sub_188386878()
{
  return MEMORY[0x189607150]();
}

uint64_t sub_188386884()
{
  return MEMORY[0x189607170]();
}

uint64_t sub_188386890()
{
  return MEMORY[0x189607178]();
}

uint64_t sub_18838689C()
{
  return MEMORY[0x189617C90]();
}

uint64_t sub_1883868A8()
{
  return MEMORY[0x189617CB0]();
}

uint64_t sub_1883868B4()
{
  return MEMORY[0x189617D00]();
}

uint64_t sub_1883868C0()
{
  return MEMORY[0x189617D78]();
}

uint64_t sub_1883868CC()
{
  return MEMORY[0x189617D80]();
}

uint64_t sub_1883868D8()
{
  return MEMORY[0x189617DD8]();
}

uint64_t sub_1883868E4()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_1883868F0()
{
  return MEMORY[0x189617E90]();
}

uint64_t sub_1883868FC()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_188386908()
{
  return MEMORY[0x189617EB8]();
}

uint64_t sub_188386914()
{
  return MEMORY[0x189617ED0]();
}

uint64_t sub_188386920()
{
  return MEMORY[0x189617ED8]();
}

uint64_t sub_18838692C()
{
  return MEMORY[0x189617EE0]();
}

uint64_t sub_188386938()
{
  return MEMORY[0x189617F48]();
}

uint64_t sub_188386944()
{
  return MEMORY[0x189618070]();
}

uint64_t sub_188386950()
{
  return MEMORY[0x189618078]();
}

uint64_t sub_18838695C()
{
  return MEMORY[0x1896180D0]();
}

uint64_t sub_188386968()
{
  return MEMORY[0x189618198]();
}

uint64_t sub_188386974()
{
  return MEMORY[0x189618250]();
}

uint64_t sub_188386980()
{
  return MEMORY[0x189618290]();
}

uint64_t sub_18838698C()
{
  return MEMORY[0x189618298]();
}

uint64_t sub_188386998()
{
  return MEMORY[0x1896182A0]();
}

uint64_t sub_1883869A4()
{
  return MEMORY[0x1896182B0]();
}

uint64_t sub_1883869B0()
{
  return MEMORY[0x189618308]();
}

uint64_t sub_1883869BC()
{
  return MEMORY[0x1896071E0]();
}

uint64_t sub_1883869C8()
{
  return MEMORY[0x189618320]();
}

uint64_t sub_1883869D4()
{
  return MEMORY[0x189618348]();
}

uint64_t sub_1883869E0()
{
  return MEMORY[0x189618358]();
}

uint64_t sub_1883869EC()
{
  return MEMORY[0x189618378]();
}

uint64_t sub_1883869F8()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_188386A04()
{
  return MEMORY[0x1896183C8]();
}

uint64_t sub_188386A10()
{
  return MEMORY[0x1896183E8]();
}

uint64_t sub_188386A1C()
{
  return MEMORY[0x189618410]();
}

uint64_t sub_188386A28()
{
  return MEMORY[0x1896185D0]();
}

uint64_t sub_188386A34()
{
  return MEMORY[0x1896187C0]();
}

uint64_t sub_188386A40()
{
  return MEMORY[0x189607290]();
}

uint64_t sub_188386A4C()
{
  return MEMORY[0x1896072A0]();
}

uint64_t sub_188386A58()
{
  return MEMORY[0x18961D210]();
}

uint64_t sub_188386A64()
{
  return MEMORY[0x18961D220]();
}

uint64_t sub_188386A70()
{
  return MEMORY[0x18961D228]();
}

uint64_t sub_188386A7C()
{
  return MEMORY[0x18961D238]();
}

uint64_t sub_188386A88()
{
  return MEMORY[0x18961D248]();
}

uint64_t sub_188386A94()
{
  return MEMORY[0x1896072C8]();
}

uint64_t sub_188386AA0()
{
  return MEMORY[0x1896072D0]();
}

uint64_t sub_188386AAC()
{
  return MEMORY[0x18961B898]();
}

uint64_t sub_188386AB8()
{
  return MEMORY[0x18961B8A8]();
}

uint64_t sub_188386AC4()
{
  return MEMORY[0x18961B920]();
}

uint64_t sub_188386AD0()
{
  return MEMORY[0x18961B928]();
}

uint64_t sub_188386ADC()
{
  return MEMORY[0x18961B938]();
}

uint64_t sub_188386AE8()
{
  return MEMORY[0x18961B948]();
}

uint64_t sub_188386AF4()
{
  return MEMORY[0x18961B958]();
}

uint64_t sub_188386B00()
{
  return MEMORY[0x1896072E0]();
}

uint64_t sub_188386B0C()
{
  return MEMORY[0x1896072F8]();
}

uint64_t sub_188386B18()
{
  return MEMORY[0x18961D278]();
}

uint64_t sub_188386B24()
{
  return MEMORY[0x189618AC0]();
}

uint64_t sub_188386B30()
{
  return MEMORY[0x189618D30]();
}

uint64_t sub_188386B3C()
{
  return MEMORY[0x189618D50]();
}

uint64_t sub_188386B48()
{
  return MEMORY[0x189607348]();
}

uint64_t sub_188386B54()
{
  return MEMORY[0x189618E20]();
}

uint64_t sub_188386B60()
{
  return MEMORY[0x189618E98]();
}

uint64_t sub_188386B6C()
{
  return MEMORY[0x189618EA0]();
}

uint64_t sub_188386B78()
{
  return MEMORY[0x189618EA8]();
}

uint64_t sub_188386B84()
{
  return MEMORY[0x189618EB8]();
}

uint64_t sub_188386B90()
{
  return MEMORY[0x189619018]();
}

uint64_t sub_188386B9C()
{
  return MEMORY[0x189619020]();
}

uint64_t sub_188386BA8()
{
  return MEMORY[0x1896191C0]();
}

uint64_t sub_188386BB4()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_188386BC0()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_188386BCC()
{
  return MEMORY[0x1896192F0]();
}

uint64_t sub_188386BD8()
{
  return MEMORY[0x189619300]();
}

uint64_t sub_188386BE4()
{
  return MEMORY[0x189619308]();
}

uint64_t sub_188386BF0()
{
  return MEMORY[0x189619338]();
}

uint64_t sub_188386BFC()
{
  return MEMORY[0x189619340]();
}

uint64_t sub_188386C08()
{
  return MEMORY[0x189619348]();
}

uint64_t sub_188386C14()
{
  return MEMORY[0x189619378]();
}

uint64_t sub_188386C20()
{
  return MEMORY[0x189619390]();
}

uint64_t sub_188386C2C()
{
  return MEMORY[0x1896193A0]();
}

uint64_t sub_188386C38()
{
  return MEMORY[0x1896193C0]();
}

uint64_t sub_188386C44()
{
  return MEMORY[0x1896193D0]();
}

uint64_t sub_188386C50()
{
  return MEMORY[0x189619440]();
}

uint64_t sub_188386C5C()
{
  return MEMORY[0x1896194A0]();
}

uint64_t sub_188386C68()
{
  return MEMORY[0x1896194C0]();
}

uint64_t sub_188386C74()
{
  return MEMORY[0x1896194F8]();
}

uint64_t sub_188386C80()
{
  return MEMORY[0x189619500]();
}

uint64_t sub_188386C8C()
{
  return MEMORY[0x189619660]();
}

uint64_t sub_188386C98()
{
  return MEMORY[0x1896196E8]();
}

uint64_t sub_188386CA4()
{
  return MEMORY[0x1896198A0]();
}

uint64_t sub_188386CB0()
{
  return MEMORY[0x1896198A8]();
}

uint64_t sub_188386CBC()
{
  return MEMORY[0x189619930]();
}

uint64_t sub_188386CC8()
{
  return MEMORY[0x189619938]();
}

uint64_t sub_188386CD4()
{
  return MEMORY[0x189619948]();
}

uint64_t sub_188386CE0()
{
  return MEMORY[0x189619950]();
}

uint64_t sub_188386CEC()
{
  return MEMORY[0x189619960]();
}

uint64_t sub_188386CF8()
{
  return MEMORY[0x189619978]();
}

uint64_t sub_188386D04()
{
  return MEMORY[0x189619A08]();
}

uint64_t sub_188386D10()
{
  return MEMORY[0x189619A40]();
}

uint64_t sub_188386D1C()
{
  return MEMORY[0x189619AB0]();
}

uint64_t sub_188386D28()
{
  return MEMORY[0x189619AF0]();
}

uint64_t sub_188386D34()
{
  return MEMORY[0x189619AF8]();
}

uint64_t sub_188386D40()
{
  return MEMORY[0x189619B00]();
}

uint64_t sub_188386D4C()
{
  return MEMORY[0x189619B08]();
}

uint64_t sub_188386D58()
{
  return MEMORY[0x189619B18]();
}

uint64_t sub_188386D64()
{
  return MEMORY[0x189619B28]();
}

uint64_t sub_188386D70()
{
  return MEMORY[0x189619B38]();
}

uint64_t sub_188386D7C()
{
  return MEMORY[0x189619B50]();
}

uint64_t sub_188386D88()
{
  return MEMORY[0x189619B58]();
}

uint64_t sub_188386D94()
{
  return MEMORY[0x189619B70]();
}

uint64_t sub_188386DA0()
{
  return MEMORY[0x189619B80]();
}

uint64_t sub_188386DAC()
{
  return MEMORY[0x189619BE8]();
}

uint64_t sub_188386DB8()
{
  return MEMORY[0x189619BF0]();
}

uint64_t sub_188386DC4()
{
  return MEMORY[0x189619BF8]();
}

uint64_t sub_188386DD0()
{
  return MEMORY[0x189619C00]();
}

uint64_t sub_188386DDC()
{
  return MEMORY[0x189619C10]();
}

uint64_t sub_188386DE8()
{
  return MEMORY[0x189619C20]();
}

uint64_t sub_188386DF4()
{
  return MEMORY[0x189619C40]();
}

uint64_t sub_188386E00()
{
  return MEMORY[0x189619C60]();
}

uint64_t sub_188386E0C()
{
  return MEMORY[0x189619C70]();
}

uint64_t sub_188386E18()
{
  return MEMORY[0x189619C80]();
}

uint64_t sub_188386E24()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_188386E30()
{
  return MEMORY[0x189619D18]();
}

uint64_t sub_188386E3C()
{
  return MEMORY[0x189619D20]();
}

uint64_t sub_188386E48()
{
  return MEMORY[0x189619D90]();
}

uint64_t sub_188386E54()
{
  return MEMORY[0x189619D98]();
}

uint64_t sub_188386E60()
{
  return MEMORY[0x189619DA0]();
}

uint64_t sub_188386E6C()
{
  return MEMORY[0x189619DB0]();
}

uint64_t sub_188386E78()
{
  return MEMORY[0x189619DB8]();
}

uint64_t sub_188386E84()
{
  return MEMORY[0x189619DC0]();
}

uint64_t sub_188386E90()
{
  return MEMORY[0x189619DE0]();
}

uint64_t sub_188386E9C()
{
  return MEMORY[0x189619E08]();
}

uint64_t sub_188386EA8()
{
  return MEMORY[0x189619E18]();
}

uint64_t sub_188386EB4()
{
  return MEMORY[0x189619E20]();
}

uint64_t sub_188386EC0()
{
  return MEMORY[0x189619EA0]();
}

uint64_t sub_188386ECC()
{
  return MEMORY[0x189619EA8]();
}

uint64_t sub_188386ED8()
{
  return MEMORY[0x189619EB0]();
}

uint64_t sub_188386EE4()
{
  return MEMORY[0x189619EB8]();
}

uint64_t sub_188386EF0()
{
  return MEMORY[0x189619EC0]();
}

uint64_t sub_188386EFC()
{
  return MEMORY[0x189619EC8]();
}

uint64_t sub_188386F08()
{
  return MEMORY[0x189619ED0]();
}

uint64_t sub_188386F14()
{
  return MEMORY[0x189619ED8]();
}

uint64_t sub_188386F20()
{
  return MEMORY[0x189619EE0]();
}

uint64_t sub_188386F2C()
{
  return MEMORY[0x189619EE8]();
}

uint64_t sub_188386F38()
{
  return MEMORY[0x189619EF0]();
}

uint64_t sub_188386F44()
{
  return MEMORY[0x189619EF8]();
}

uint64_t sub_188386F50()
{
  return MEMORY[0x189619F00]();
}

uint64_t sub_188386F5C()
{
  return MEMORY[0x189619F08]();
}

uint64_t sub_188386F68()
{
  return MEMORY[0x189619F10]();
}

uint64_t sub_188386F74()
{
  return MEMORY[0x189619F18]();
}

uint64_t sub_188386F80()
{
  return MEMORY[0x189619F20]();
}

uint64_t sub_188386F8C()
{
  return MEMORY[0x189619F28]();
}

uint64_t sub_188386F98()
{
  return MEMORY[0x189619F30]();
}

uint64_t sub_188386FA4()
{
  return MEMORY[0x189619F38]();
}

uint64_t sub_188386FB0()
{
  return MEMORY[0x189619F40]();
}

uint64_t sub_188386FBC()
{
  return MEMORY[0x18961A010]();
}

uint64_t sub_188386FC8()
{
  return MEMORY[0x18961A040]();
}

uint64_t sub_188386FD4()
{
  return MEMORY[0x18961A050]();
}

uint64_t sub_188386FE0()
{
  return MEMORY[0x18961A068]();
}

uint64_t sub_188386FEC()
{
  return MEMORY[0x18961A0A0]();
}

uint64_t sub_188386FF8()
{
  return MEMORY[0x18961A0B8]();
}

uint64_t sub_188387004()
{
  return MEMORY[0x18961A0C0]();
}

uint64_t sub_188387010()
{
  return MEMORY[0x18961A108]();
}

uint64_t sub_18838701C()
{
  return MEMORY[0x18961A110]();
}

uint64_t sub_188387028()
{
  return MEMORY[0x18961A120]();
}

uint64_t sub_188387034()
{
  return MEMORY[0x18961A128]();
}

uint64_t sub_188387040()
{
  return MEMORY[0x18961A138]();
}

uint64_t sub_18838704C()
{
  return MEMORY[0x18961A140]();
}

uint64_t sub_188387058()
{
  return MEMORY[0x18961A148]();
}

uint64_t sub_188387064()
{
  return MEMORY[0x18961A158]();
}

uint64_t sub_188387070()
{
  return MEMORY[0x18961A160]();
}

uint64_t sub_18838707C()
{
  return MEMORY[0x18961A168]();
}

uint64_t sub_188387088()
{
  return MEMORY[0x18961A170]();
}

uint64_t sub_188387094()
{
  return MEMORY[0x18961A178]();
}

uint64_t sub_1883870A0()
{
  return MEMORY[0x18961A188]();
}

uint64_t sub_1883870AC()
{
  return MEMORY[0x18961A190]();
}

uint64_t sub_1883870B8()
{
  return MEMORY[0x18961A198]();
}

uint64_t sub_1883870C4()
{
  return MEMORY[0x18961A1B8]();
}

uint64_t sub_1883870D0()
{
  return MEMORY[0x18961A1E0]();
}

uint64_t sub_1883870DC()
{
  return MEMORY[0x18961A1F0]();
}

uint64_t sub_1883870E8()
{
  return MEMORY[0x18961A1F8]();
}

uint64_t sub_1883870F4()
{
  return MEMORY[0x18961A208]();
}

uint64_t sub_188387100()
{
  return MEMORY[0x18961A210]();
}

uint64_t sub_18838710C()
{
  return MEMORY[0x18961A218]();
}

uint64_t sub_188387118()
{
  return MEMORY[0x18961A220]();
}

uint64_t sub_188387124()
{
  return MEMORY[0x18961A228]();
}

uint64_t sub_188387130()
{
  return MEMORY[0x18961A230]();
}

uint64_t sub_18838713C()
{
  return MEMORY[0x18961A240]();
}

uint64_t sub_188387148()
{
  return MEMORY[0x18961A248]();
}

uint64_t sub_188387154()
{
  return MEMORY[0x18961A250]();
}

uint64_t sub_188387160()
{
  return MEMORY[0x18961A270]();
}

uint64_t sub_18838716C()
{
  return MEMORY[0x18961A280]();
}

uint64_t sub_188387178()
{
  return MEMORY[0x18961A298]();
}

uint64_t sub_188387184()
{
  return MEMORY[0x18961A2A0]();
}

uint64_t sub_188387190()
{
  return MEMORY[0x18961A2A8]();
}

uint64_t sub_18838719C()
{
  return MEMORY[0x18961A2B0]();
}

uint64_t sub_1883871A8()
{
  return MEMORY[0x18961A2B8]();
}

uint64_t sub_1883871B4()
{
  return MEMORY[0x18961A310]();
}

uint64_t sub_1883871C0()
{
  return MEMORY[0x18961A318]();
}

uint64_t sub_1883871CC()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t sub_1883871D8()
{
  return MEMORY[0x1896073A0]();
}

uint64_t sub_1883871E4()
{
  return MEMORY[0x1896073B0]();
}

uint64_t sub_1883871F0()
{
  return MEMORY[0x18961A3B0]();
}

uint64_t sub_1883871FC()
{
  return MEMORY[0x18961A3B8]();
}

uint64_t sub_188387208()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_188387214()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_188387220()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_18838722C()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_188387238()
{
  return MEMORY[0x18961A3E0]();
}

uint64_t sub_188387244()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_188387250()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_18838725C()
{
  return MEMORY[0x18961A6B0]();
}

uint64_t sub_188387268()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t sub_188387274()
{
  return MEMORY[0x18961A788]();
}

uint64_t sub_188387280()
{
  return MEMORY[0x189607420]();
}

uint64_t sub_18838728C()
{
  return MEMORY[0x18961A940]();
}

uint64_t sub_188387298()
{
  return MEMORY[0x18961A950]();
}

uint64_t sub_1883872A4()
{
  return MEMORY[0x18961A978]();
}

uint64_t sub_1883872B0()
{
  return MEMORY[0x18961AF48]();
}

uint64_t sub_1883872BC()
{
  return MEMORY[0x18961AF50]();
}

uint64_t sub_1883872C8()
{
  return MEMORY[0x18961AF60]();
}

uint64_t sub_1883872D4()
{
  return MEMORY[0x18961AF68]();
}

uint64_t sub_1883872E0()
{
  return MEMORY[0x18961AF88]();
}

CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f)
{
  return MEMORY[0x189602CB0](f);
}

Boolean CFFileSecurityGetMode(CFFileSecurityRef fileSec, mode_t *mode)
{
  return MEMORY[0x189602CF0](fileSec, mode);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x189602EF8](number);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x189602F20](number);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8718](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x18961B058]();
}

au_asid_t audit_token_to_asid(audit_token_t *atoken)
{
  return MEMORY[0x1896140D8](atoken);
}

uid_t audit_token_to_auid(audit_token_t *atoken)
{
  return MEMORY[0x1896140E8](atoken);
}

gid_t audit_token_to_egid(audit_token_t *atoken)
{
  return MEMORY[0x1896140F0](atoken);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return MEMORY[0x1896140F8](atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x189614100](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x189614108](atoken);
}

gid_t audit_token_to_rgid(audit_token_t *atoken)
{
  return MEMORY[0x189614110](atoken);
}

uid_t audit_token_to_ruid(audit_token_t *atoken)
{
  return MEMORY[0x189614118](atoken);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1895FA588](*(void *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD88](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADE8](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FADF8](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE10](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

int dup(int a1)
{
  return MEMORY[0x1895FAFB0](*(void *)&a1);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB450](*(void *)&a1, a2);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1895FBB20](*(void *)&task, *(void *)&name);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC90](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCD8](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE10](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE38](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x189616828](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1895FC258](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  return MEMORY[0x1895FC288](a1, a2, a3, a4, a5);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC478](oslog, type);
}

int pipe(int a1[2])
{
  return MEMORY[0x1895FC7A8](a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x1895FC7C0](a1, *(void *)&a2, *(void *)&a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1895FC9D0](a1, a2, a3, a4);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC30](*(void *)&a1, a2, a3);
}

uint64_t remote_control_attach_loopback()
{
  return MEMORY[0x189611E78]();
}

uint64_t remote_control_connect_loopback()
{
  return MEMORY[0x189611E80]();
}

uint64_t remote_control_detach_loopback()
{
  return MEMORY[0x189611E88]();
}

uint64_t remote_device_browser_cancel()
{
  return MEMORY[0x189611E90]();
}

uint64_t remote_device_copy_property()
{
  return MEMORY[0x189611ED0]();
}

uint64_t remote_device_copy_service()
{
  return MEMORY[0x189611EE0]();
}

uint64_t remote_device_copy_unique_of_type()
{
  return MEMORY[0x189611EF0]();
}

uint64_t remote_device_copy_uuid()
{
  return MEMORY[0x189611EF8]();
}

uint64_t remote_device_get_name()
{
  return MEMORY[0x189611F18]();
}

uint64_t remote_device_get_state()
{
  return MEMORY[0x189611F28]();
}

uint64_t remote_device_set_connected_callback()
{
  return MEMORY[0x189611F50]();
}

uint64_t remote_device_set_disconnected_callback()
{
  return MEMORY[0x189611F68]();
}

uint64_t remote_device_start_browsing()
{
  return MEMORY[0x189611F70]();
}

uint64_t remote_device_start_browsing_matching()
{
  return MEMORY[0x189611F80]();
}

uint64_t remote_device_type_get_description()
{
  return MEMORY[0x189611F98]();
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0C0](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x18961B0B8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x18961B0E8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x18961B0F0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x18961B140]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x18961BFB8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x18961BFC0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x18961BFD0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x18961BFD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x18961B198]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x18961B1A8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x18961B1D8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x18961B248]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x18961B250]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x18961B260]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x18961B2A0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x18961B2A8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x18961B2C0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x18961B2F8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x18961B338]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x18961B368]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x18961B388]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x18961B3A8]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x18961B3C0]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x18961B430]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x18961C008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x18961C018]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x18961C038]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x18961B480]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x18961B488]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x18961B490]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x18961B498]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x18961B4A0]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x18961B4A8]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x18961B4B0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x18961B4D0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x18961B4F0]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x18961B4F8]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x18961B500]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x18961B520]();
}

kern_return_t task_info( task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1895FD318](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1895FD330](*(void *)&target_tport, *(void *)&pid, tn);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD758](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1895FD7D0](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FD7E0](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1895FD800](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1895FD858](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1895FD8B8](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1895FD8C8](xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1895FD940](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1895FD958](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1895FD960](name, targetq, flags);
}

const char *__cdecl xpc_connection_get_name(xpc_connection_t connection)
{
  return (const char *)MEMORY[0x1895FD998](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply( xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1895FD9E8](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1895FDAA0](object);
}

uint64_t xpc_copy_entitlements_data_for_token()
{
  return MEMORY[0x1895FDAC0]();
}

uint64_t xpc_create_from_plist()
{
  return MEMORY[0x1895FDAD8]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1895FDAF8](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1895FDB18](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1895FDB28](xdata);
}

xpc_object_t xpc_date_create(int64_t interval)
{
  return (xpc_object_t)MEMORY[0x1895FDB40](interval);
}

uint64_t xpc_date_create_absolute()
{
  return MEMORY[0x1895FDB48]();
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return MEMORY[0x1895FDB60](xdate);
}

uint64_t xpc_date_get_value_absolute()
{
  return MEMORY[0x1895FDB68]();
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1895FDB70](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FDB90](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1895FDBA8](original);
}

uint64_t xpc_dictionary_get_audit_token()
{
  return MEMORY[0x1895FDBD8]();
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1895FDBF0](xdict);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC08](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1895FDC30](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1895FDC40](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC60](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_connection(xpc_object_t xdict, const char *key, xpc_connection_t connection)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1895FDD48](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  return result;
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1895FDD68](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1895FDD90](object1, object2);
}

uint64_t xpc_event_publisher_activate()
{
  return MEMORY[0x1895FDD98]();
}

uint64_t xpc_event_publisher_create()
{
  return MEMORY[0x1895FDDA8]();
}

uint64_t xpc_event_publisher_fire()
{
  return MEMORY[0x1895FDDB0]();
}

uint64_t xpc_event_publisher_fire_noboost()
{
  return MEMORY[0x1895FDDB8]();
}

uint64_t xpc_event_publisher_fire_with_reply()
{
  return MEMORY[0x1895FDDC0]();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return MEMORY[0x1895FDDD0]();
}

uint64_t xpc_event_publisher_set_handler()
{
  return MEMORY[0x1895FDDD8]();
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1895FDDF0](*(void *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1895FDE08](xfd);
}

uint64_t xpc_file_transfer_create_with_fd()
{
  return MEMORY[0x1895FDE20]();
}

uint64_t xpc_file_transfer_get_size()
{
  return MEMORY[0x1895FDE30]();
}

uint64_t xpc_file_transfer_write_to_fd()
{
  return MEMORY[0x1895FDE60]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1895FDE78](object);
}

size_t xpc_hash(xpc_object_t object)
{
  return MEMORY[0x1895FDE90](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1895FDEB8](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1895FDEC0](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1895FDF50]();
}

uint64_t xpc_remote_connection_activate()
{
  return MEMORY[0x189612008]();
}

uint64_t xpc_remote_connection_cancel()
{
  return MEMORY[0x189612020]();
}

uint64_t xpc_remote_connection_create_connected_pair()
{
  return MEMORY[0x189612028]();
}

uint64_t xpc_remote_connection_create_remote_service_listener()
{
  return MEMORY[0x189612030]();
}

uint64_t xpc_remote_connection_create_with_remote_service()
{
  return MEMORY[0x189612048]();
}

uint64_t xpc_remote_connection_get_version_flags()
{
  return MEMORY[0x189612060]();
}

uint64_t xpc_remote_connection_send_message()
{
  return MEMORY[0x189612078]();
}

uint64_t xpc_remote_connection_send_message_with_reply()
{
  return MEMORY[0x189612088]();
}

uint64_t xpc_remote_connection_send_message_with_reply_sync()
{
  return MEMORY[0x189612098]();
}

uint64_t xpc_remote_connection_set_event_handler()
{
  return MEMORY[0x1896120A8]();
}

uint64_t xpc_remote_connection_set_target_queue()
{
  return MEMORY[0x1896120B0]();
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1895FE038]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1895FE048](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1895FE078](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1895FE088](xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1895FE0B8](type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1895FE0C8](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1895FE0D8](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1895FE100](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1895FE108](xuuid);
}