void sub_1001CB3F8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  char *v18;
  uint64_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  os_log_s *v41;
  int v42;
  uint64_t v43;
  char **v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  os_log_s *v54;
  os_log_type_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  os_log_s *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  char **v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t v80;
  char *v81;
  os_log_s *v82;
  os_log_type_t v83;
  uint64_t v84;
  char **v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char **v95;
  int v96;
  os_log_s *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_t v101;
  uint64_t v102;
  uint64_t v103;
  os_log_t v104;
  v2 = v1;
  v4 = type metadata accessor for Logger(0LL);
  v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8 = type metadata accessor for DispatchPredicate(0LL);
  v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v12 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_11:
    v39 = sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v39, v4);
    v40 = v2;
    v41 = (os_log_s *)Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      v97 = (os_log_s *)v5;
      LODWORD(v99) = v42;
      v101 = v41;
      v102 = v4;
      v43 = swift_slowAlloc(32LL, -1LL);
      v44 = (char **)swift_slowAlloc(8LL, -1LL);
      v100 = swift_slowAlloc(64LL, -1LL);
      v103 = (uint64_t)v40;
      v104 = (os_log_t)v100;
      *(_DWORD *)v43 = 138543874;
      v45 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v43 + 4, v43 + 12);
      v98 = (uint64_t)v44;
      *v44 = v40;

      *(_WORD *)(v43 + 12) = 2082;
      v46 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      v47 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v103 = sub_10015ADC4(v46, v47, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v43 + 14, v43 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 22) = 2080;
      v48 = *(void *)&v2[v9];
      if (v48 >= 5)
      {

        v103 = v48;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for MRDFastSyncGroupSessionState,  &v103,  &type metadata for MRDFastSyncGroupSessionState,  &type metadata for Int);
        __break(1u);
      }

      else
      {
        v103 = sub_10015ADC4(*(void *)&aInitial_0[8 * v48], *(void *)&aInvalida[8 * v48 + 8], (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v43 + 24, v43 + 32);

        swift_bridgeObjectRelease();
        v49 = v101;
        _os_log_impl( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v99,  "[%{public}@]<%{public}s> Dropping handleParticipantsChanged in state: %s.",  (uint8_t *)v43,  0x20u);
        v50 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        v51 = v98;
        swift_arrayDestroy(v98, 1LL, v50);
        swift_slowDealloc(v51, -1LL, -1LL);
        v52 = v100;
        swift_arrayDestroy(v100, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);

        (*((void (**)(char *, uint64_t))v97 + 1))(v7, v102);
      }
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    return;
  }

  v9 = OBJC_IVAR___MRDFastSyncGroupSession__state;
  if (*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession__state] != 3LL)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  if (!*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession])
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    v53 = v2;
    v54 = (os_log_s *)Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(22LL, -1LL);
      v57 = (char **)swift_slowAlloc(8LL, -1LL);
      v58 = swift_slowAlloc(32LL, -1LL);
      v103 = (uint64_t)v53;
      v104 = (os_log_t)v58;
      *(_DWORD *)v56 = 138543618;
      v59 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 4, v56 + 12);
      *v57 = v53;

      *(_WORD *)(v56 + 12) = 2082;
      v60 = *(void *)&v59[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      v61 = *(void *)&v59[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v103 = sub_10015ADC4(v60, v61, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 14, v56 + 22);

      swift_bridgeObjectRelease();
      v62 = "[%{public}@]<%{public}s> Dropping handleParticipantsChanged with no session.";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v54, v55, v62, (uint8_t *)v56, 0x16u);
      v66 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v57, 1LL, v66);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);

      return;
    }

uint64_t sub_1001CC2D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  v12 = (char *)&v49 - v11;
  uint64_t v13 = Participant.id.getter(v10);
  uint64_t v14 = UUID.uuidString.getter(v13);
  uint64_t v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v12, v5);
  v18 = (void *)(a3 + OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier);
  uint64_t v19 = *(void *)(a3 + OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier + 8);
  if (!v19)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  if (v14 != *v18 || v19 != v16)
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, *v18, v19, 0LL);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) != 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v23 = Participant.handle.getter(result);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    goto LABEL_13;
  }

  uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
  v27 = (uint64_t *)(a3 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle);
  uint64_t v26 = *(void *)(a3 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8);
  if (!v26) {
    return result;
  }
  uint64_t v24 = *v27;
  uint64_t v23 = swift_bridgeObjectRetain();
LABEL_13:
  uint64_t v28 = Participant.id.getter(v23);
  uint64_t v29 = UUID.uuidString.getter(v28);
  uint64_t v31 = v30;
  v17(v9, v5);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v50 = (void *)*a1;
  v33 = v50;
  *a1 = 0x8000000000000000LL;
  unint64_t v35 = sub_10015CAD4(v24, v26);
  uint64_t v36 = v33[2];
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
    goto LABEL_28;
  }

  char v39 = v34;
  if (v33[3] >= v38)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1001E3B34();
    }
  }

  else
  {
    sub_1001E305C(v38, isUniquelyReferenced_nonNull_native);
    unint64_t v40 = sub_10015CAD4(v24, v26);
    if ((v39 & 1) != (v41 & 1))
    {
LABEL_30:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }

    unint64_t v35 = v40;
  }

  *a1 = v50;
  swift_bridgeObjectRelease();
  v42 = (void *)*a1;
  if ((v39 & 1) != 0) {
    goto LABEL_22;
  }
  v42[(v35 >> 6) + 8] |= 1LL << v35;
  v43 = (uint64_t *)(v42[6] + 16 * v35);
  uint64_t *v43 = v24;
  v43[1] = v26;
  *(void *)(v42[7] + 8 * v35) = _swiftEmptyArrayStorage;
  uint64_t v44 = v42[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v44, 1LL))
  {
    __break(1u);
    goto LABEL_30;
  }

  v42[2] = v44 + 1;
LABEL_22:
  swift_bridgeObjectRetain();
  uint64_t v24 = v42[7];
  swift_bridgeObjectRelease();
  v33 = *(void **)(v24 + 8 * v35);
  char v45 = swift_isUniquelyReferenced_nonNull_native(v33);
  *(void *)(v24 + 8 * v35) = v33;
  if ((v45 & 1) == 0)
  {
LABEL_28:
    v33 = sub_1001E1164(0LL, v33[2] + 1LL, 1, v33);
    *(void *)(v24 + 8 * v35) = v33;
  }

  unint64_t v47 = v33[2];
  unint64_t v46 = v33[3];
  if (v47 >= v46 >> 1)
  {
    v33 = sub_1001E1164((void *)(v46 > 1), v47 + 1, 1, v33);
    *(void *)(v24 + 8 * v35) = v33;
  }

  v33[2] = v47 + 1;
  v48 = &v33[2 * v47];
  v48[4] = v29;
  v48[5] = v31;
  return swift_bridgeObjectRelease();
}

id sub_1001CC604(int a1)
{
  v2 = v1;
  int v401 = a1;
  uint64_t v3 = type metadata accessor for Participants(0LL);
  uint64_t v387 = *(void *)(v3 - 8);
  uint64_t v388 = v3;
  __chkstk_darwin(v3);
  v386 = (uint64_t *)((char *)&v378 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v398 = *(void *)(v5 - 8);
  uint64_t v399 = v5;
  __chkstk_darwin(v5);
  v397 = (char *)&v378 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v395 = *(void *)(v7 - 8);
  uint64_t v396 = v7;
  __chkstk_darwin(v7);
  v394 = (char *)&v378 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t)&v378 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t)&v378 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  v385 = (char *)&v378 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v391 = (char *)&v378 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v390 = (char *)&v378 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v389 = (char *)&v378 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v400 = (char *)&v378 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v403 = (char *)&v378 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v392 = (char *)&v378 - v30;
  __chkstk_darwin(v29);
  v420 = (char *)&v378 - v31;
  uint64_t v32 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v35 = (uint64_t *)((char *)&v378 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *unint64_t v35 = v36;
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v32);
  v414 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)(v35);
  id result = (id)(*(uint64_t (**)(void *, uint64_t))(v33 + 8))(v35, v32);
  if ((v36 & 1) == 0)
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_9:
    uint64_t v48 = sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v48, v9);
    uint64_t v49 = v9;
    v50 = v2;
    v51 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.default.getter();
    int v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v54 = swift_slowAlloc(42LL, -1LL);
      uint64_t v412 = v49;
      uint64_t v55 = v54;
      uint64_t v56 = swift_slowAlloc(8LL, -1LL);
      os_log_t v425 = v51;
      v57 = (void *)v56;
      v423 = (uint64_t *)v56;
      v426 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
      os_log_t v433 = v426;
      *(_DWORD *)uint64_t v55 = 138544130;
      LODWORD(v424) = v53;
      v415 = v2;
      uint64_t v441 = (uint64_t)v50;
      uint64_t v407 = v10;
      v58 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v55 + 4, v55 + 12);
      void *v57 = v50;

      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v59 = *(void *)&v58[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v60 = *(void *)&v58[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v441 = sub_10015ADC4(v59, v60, (uint64_t *)&v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v55 + 14, v55 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 22) = 2080;
      uint64_t v441 = sub_10015ADC4(0xD000000000000037LL, 0x800000010033C070LL, (uint64_t *)&v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v55 + 24, v55 + 32);
      *(_WORD *)(v55 + 32) = 2080;
      uint64_t v61 = _s12mediaremoted23MRDFastSyncGroupSessionC13stateToStringySSAA0bcdE5StateOFZ_0(*(void *)&v415[v33]);
      uint64_t v441 = sub_10015ADC4(v61, v62, (uint64_t *)&v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v55 + 34, v55 + 42);

      swift_bridgeObjectRelease();
      os_log_t v63 = v425;
      _os_log_impl( (void *)&_mh_execute_header,  v425,  (os_log_type_t)v424,  "[%{public}@]<%{public}s> %s Dropping updateParticipants in state: %s.",  (uint8_t *)v55,  0x2Au);
      uint64_t v64 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      v65 = v423;
      swift_arrayDestroy(v423, 1LL, v64);
      swift_slowDealloc(v65, -1LL, -1LL);
      v66 = v426;
      swift_arrayDestroy(v426, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v407 + 8))(v13, v412);
    }

    else
    {

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v13, v49);
    }
  }

  if (v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1) {
    return result;
  }
  uint64_t v33 = OBJC_IVAR___MRDFastSyncGroupSession__state;
  if (*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession__state] != 3LL)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_9;
    }
    goto LABEL_155;
  }

  uint64_t v38 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v38)
  {
    uint64_t v39 = swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]);
    uint64_t v382 = GroupSession.activeParticipants.getter(v39);
    uint64_t v40 = sub_1001C785C( v382,  (uint64_t)v444,  (uint64_t (*)(void))&type metadata accessor for Participant,  (uint64_t (*)(uint64_t))&Participant.handle.getter);
    uint64_t v381 = 0LL;
    id v379 = (id)objc_opt_self(&OBJC_CLASS___MRUserSettings);
    id result = [v379 currentSettings];
    if (result)
    {
      char v41 = result;
      uint64_t v33 = v10;
      unsigned int v42 = [result supportGroupSessionLowPowerMode];

      uint64_t v380 = v38;
      if (v42)
      {
        v43 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
        uint64_t KeyPath = swift_getKeyPath(&unk_10034CF50);
        uint64_t v45 = swift_getKeyPath(&unk_10034CF78);
        id v46 = v43;
        static Published.subscript.getter(&v433, v46, KeyPath, v45);

        swift_release(KeyPath);
        swift_release(v45);
        os_log_t v47 = v433;
      }

      else
      {
        os_log_t v47 = (os_log_t)&_swiftEmptySetSingleton;
      }

      uint64_t v80 = sub_1001E80CC(v40, (uint64_t)v47);
      swift_bridgeObjectRelease();
      uint64_t v81 = sub_100156B68(&qword_1003F8620);
      uint64_t inited = swift_initStackObject(v81, v443);
      *(_OWORD *)(inited + 16) = xmmword_10034BE40;
      id result = *(id *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
      if (result)
      {
        *(void *)(inited + 32) = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
        *(void *)(inited + 40) = result;
        swift_bridgeObjectRetain();
        uint64_t v83 = sub_1001E80CC(inited, v80);
        swift_setDeallocating(inited);
        swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
        v84 = (uint64_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
        swift_beginAccess( &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v441,  0LL,  0LL);
        v393 = v84;
        uint64_t v85 = *v84;
        uint64_t v86 = *(void *)(*v84 + 64);
        os_log_t v416 = (os_log_t)(*v84 + 64);
        uint64_t v13 = 1LL << *(_BYTE *)(v85 + 32);
        if (v13 < 64) {
          uint64_t v87 = ~(-1LL << v13);
        }
        else {
          uint64_t v87 = -1LL;
        }
        v426 = (os_log_s *)(v87 & v86);
        v88 = (uint64_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap];
        uint64_t v419 = OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource;
        uint64_t v89 = v85;
        uint64_t v16 = (uint64_t)&v2[OBJC_IVAR___MRDFastSyncGroupSession_timedOutParticipantHandles];
        v384 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
        v405 = (uint64_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        v383 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_guests];
        swift_bridgeObjectRetain_n(v85, 2LL);
        v418 = (uint64_t *)v16;
        swift_beginAccess(v16, v440, 0LL, 0LL);
        __n128 v90 = swift_beginAccess(v88, v439, 0LL, 0LL);
        uint64_t v91 = 0LL;
        int64_t v417 = (unint64_t)(v13 + 63) >> 6;
        os_log_t v421 = (os_log_t)(v83 + 56);
        v404 = v432;
        v90.n128_u64[0] = 138543874LL;
        __n128 v406 = v90;
        v402 = (char *)&type metadata for Any + 8;
        uint64_t v412 = v9;
        v413 = (void *)v83;
        uint64_t v407 = v10;
        v415 = v2;
        uint64_t v422 = v89;
        v423 = v88;
LABEL_23:
        unint64_t v101 = (unint64_t)v426;
        while (1)
        {
          if (v101)
          {
            unint64_t v102 = __clz(__rbit64(v101));
            v103 = (os_log_s *)((v101 - 1) & v101);
            unint64_t v104 = v102 | (v91 << 6);
          }

          else
          {
            v105 = (char *)(v91 + 1);
            if (__OFADD__(v91, 1LL))
            {
              __break(1u);
              goto LABEL_153;
            }

            unint64_t v106 = *((void *)v416 + (void)v105);
            ++v91;
            if (!v106)
            {
              uint64_t v91 = (uint64_t)(v105 + 1);
              unint64_t v106 = *((void *)v416 + v91);
              if (!v106)
              {
                uint64_t v91 = (uint64_t)(v105 + 2);
                unint64_t v106 = *((void *)v416 + v91);
                if (!v106)
                {
                  uint64_t v91 = (uint64_t)(v105 + 3);
                  unint64_t v106 = *((void *)v416 + v91);
                  if (!v106)
                  {
                    uint64_t v91 = (uint64_t)(v105 + 4);
                    unint64_t v106 = *((void *)v416 + v91);
                    if (!v106)
                    {
                      int64_t v107 = (int64_t)(v105 + 5);
                      if (v107 >= v417)
                      {
LABEL_116:
                        swift_bridgeObjectRelease();
                        swift_release(v422);
                        uint64_t v226 = *v393;
                        v227 = v2;
                        uint64_t v228 = swift_bridgeObjectRetain();
                        uint64_t v229 = v381;
                        v230 = (void *)sub_1001E8148(v228, (uint64_t)v227);

                        if (qword_1003FF010 != -1) {
                          swift_once(&qword_1003FF010, sub_1001B2258);
                        }
                        v231 = (os_log_s *)sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
                        v232 = *(uint64_t **)(v33 + 16);
                        v233 = v400;
                        os_log_t v421 = v231;
                        v423 = v232;
                        ((void (*)(char *))v232)(v400);
                        v234 = v227;
                        swift_bridgeObjectRetain_n(v230, 2LL);
                        v235 = v234;
                        v236 = (os_log_s *)Logger.logObject.getter(v235);
                        os_log_type_t v237 = static os_log_type_t.info.getter();
                        BOOL v238 = os_log_type_enabled(v236, v237);
                        uint64_t v424 = v226;
                        os_log_t v425 = v235;
                        v426 = (os_log_s *)v230;
                        uint64_t v419 = v229;
                        if (v238)
                        {
                          uint64_t v239 = swift_slowAlloc(42LL, -1LL);
                          v240 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
                          v418 = v240;
                          v420 = (char *)swift_slowAlloc(96LL, -1LL);
                          os_log_t v433 = (os_log_t)v420;
                          *(_DWORD *)uint64_t v239 = 138544130;
                          uint64_t v431 = (uint64_t)v235;
                          v241 = v2;
                          v242 = v235;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v432, v239 + 4, v239 + 12);
                          uint64_t *v240 = (uint64_t)v241;

                          *(_WORD *)(v239 + 12) = 2082;
                          uint64_t v244 = *(void *)((char *)v242 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
                          unint64_t v243 = *(void *)((char *)v242 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8);
                          swift_bridgeObjectRetain();
                          uint64_t v431 = sub_10015ADC4(v244, v243, (uint64_t *)&v433);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v432, v239 + 14, v239 + 22);

                          swift_bridgeObjectRelease();
                          *(_WORD *)(v239 + 22) = 2080;
                          uint64_t v431 = sub_10015ADC4(0xD000000000000037LL, 0x800000010033C070LL, (uint64_t *)&v433);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v432, v239 + 24, v239 + 32);
                          *(_WORD *)(v239 + 32) = 2080;
                          v230 = v426;
                          uint64_t v245 = swift_bridgeObjectRetain();
                          uint64_t v246 = Array.description.getter(v245, &type metadata for GroupSessionParticipant);
                          unint64_t v248 = v247;
                          swift_bridgeObjectRelease();
                          uint64_t v431 = sub_10015ADC4(v246, v248, (uint64_t *)&v433);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v432, v239 + 34, v239 + 42);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          _os_log_impl( (void *)&_mh_execute_header,  v236,  v237,  "[%{public}@]<%{public}s> %s mapped participants: %s",  (uint8_t *)v239,  0x2Au);
                          uint64_t v249 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                          v250 = v418;
                          swift_arrayDestroy(v418, 1LL, v249);
                          swift_slowDealloc(v250, -1LL, -1LL);
                          v251 = v420;
                          swift_arrayDestroy(v420, 3LL, (char *)&type metadata for Any + 8);
                          swift_slowDealloc(v251, -1LL, -1LL);
                          swift_slowDealloc(v239, -1LL, -1LL);

                          v420 = *(char **)(v407 + 8);
                          ((void (*)(char *, uint64_t))v420)(v400, v412);
                          os_log_t v252 = v425;
                        }

                        else
                        {

                          swift_bridgeObjectRelease_n(v230, 2LL);
                          v420 = *(char **)(v33 + 8);
                          ((void (*)(char *, uint64_t))v420)(v233, v412);
                          os_log_t v252 = v235;
                        }

                        uint64_t v253 = v230[2];
                        if (v253)
                        {
                          os_log_t v433 = (os_log_t)_swiftEmptyArrayStorage;
                          specialized ContiguousArray.reserveCapacity(_:)(v253);
                          v254 = (unsigned __int8 *)v230 + 58;
                          do
                          {
                            v255 = *(void **)(v254 - 10);
                            uint64_t v256 = *(v254 - 2);
                            uint64_t v257 = *(v254 - 1);
                            unsigned int v258 = *v254;
                            v254 += 32;
                            id v259 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
                            swift_bridgeObjectRetain();
                            id v260 = v255;
                            NSString v261 = String._bridgeToObjectiveC()();
                            id v262 = [v259 initWithIdentifier:v261 identity:v260 connected:v256 guest:v257 hidden:v258];

                            swift_bridgeObjectRelease();
                            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v263);
                            uint64_t v264 = *((void *)v433 + 2);
                            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v264);
                            uint64_t v265 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( v264,  v262);
                            specialized ContiguousArray._endMutation()(v265);
                            --v253;
                          }

                          while (v253);
                          v266 = v433;
                          os_log_t v252 = v425;
                        }

                        else
                        {
                          v266 = _swiftEmptyArrayStorage;
                        }

                        swift_beginAccess( (char *)v252 + OBJC_IVAR___MRDFastSyncGroupSession_identities,  &v431,  0LL,  0LL);
                        uint64_t v267 = swift_bridgeObjectRetain();
                        v268 = sub_1001E59B8(v267);
                        swift_bridgeObjectRelease();
                        v269 = (void *)swift_allocObject(&unk_1003A5BA0, 40LL, 7LL);
                        v269[2] = v252;
                        v269[3] = v268;
                        v269[4] = v266;
                        v437 = sub_1001EE4D0;
                        v438 = v269;
                        os_log_t v433 = (os_log_t)_NSConcreteStackBlock;
                        uint64_t v434 = 1107296256LL;
                        v435 = sub_100157EA8;
                        v436 = &unk_1003A5BB8;
                        v270 = _Block_copy(&v433);
                        v271 = v252;
                        uint64_t v272 = swift_retain(v268);
                        v273 = v394;
                        static DispatchQoS.unspecified.getter(v272);
                        v427 = _swiftEmptyArrayStorage;
                        uint64_t v274 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                        uint64_t v275 = sub_100156B68((uint64_t *)&unk_1003F9A70);
                        uint64_t v276 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
                        v277 = v397;
                        uint64_t v278 = v275;
                        uint64_t v279 = v399;
                        dispatch thunk of SetAlgebra.init<A>(_:)(&v427, v278, v276, v399, v274);
                        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v273, v277, v270);
                        _Block_release(v270);
                        (*(void (**)(char *, uint64_t))(v398 + 8))(v277, v279);
                        (*(void (**)(char *, uint64_t))(v395 + 8))(v273, v396);
                        id result = (id)swift_release(v438);
                        uint64_t v280 = *(void *)((char *)v271 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager);
                        if (!v280) {
                          goto LABEL_161;
                        }
                        v281 = *(void (**)(uint64_t))(*(void *)v280 + 360LL);
                        swift_retain(*(void *)((char *)v271 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager));
                        uint64_t v282 = swift_bridgeObjectRetain();
                        v281(v282);
                        swift_release(v280);
                        swift_bridgeObjectRelease();
                        if ((v401 & 1) == 0)
                        {
                          swift_release(v268);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_release(v380);
                          swift_bridgeObjectRelease();
                          return (id)swift_bridgeObjectRelease();
                        }

                        v283 = v271;
                        uint64_t v284 = v382;
                        uint64_t v285 = swift_bridgeObjectRetain();
                        uint64_t v286 = sub_1001E89B4(v285, v283);

                        if (*(void *)(v286 + 16))
                        {
                          uint64_t v287 = swift_allocObject(&unk_1003A5BF0, 24LL, 7LL);
                          *(void *)(v287 + 16) = _swiftEmptyArrayStorage;
                          os_log_t v425 = (os_log_t)(v287 + 16);
                          id result = [v379 currentSettings];
                          uint64_t v288 = v412;
                          if (!result) {
                            goto LABEL_162;
                          }
                          v289 = result;
                          unsigned int v290 = [result groupSessionSynchronizePendingParticipants];

                          if (v290)
                          {
                            swift_beginAccess( (char *)v283 + OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants,  &v427,  0LL,  0LL);
                            unint64_t v291 = swift_bridgeObjectRetain();
                            v292 = sub_1001C7644(v291);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            *(void *)os_log_t v425 = v292;
                          }

                          uint64_t v293 = *(void *)(v382 + 16);
                          swift_bridgeObjectRelease();
                          if (v293 + ~*(void *)(v286 + 16) >= 1)
                          {
                            v418 = (uint64_t *)(v293 + ~*(void *)(v286 + 16));
                            v294 = v390;
                            ((void (*)(char *, os_log_t, uint64_t))v423)(v390, v421, v288);
                            v295 = v283;
                            v296 = (os_log_s *)Logger.logObject.getter(v295);
                            os_log_type_t v297 = static os_log_type_t.default.getter();
                            LODWORD(v417) = v297;
                            if (os_log_type_enabled(v296, v297))
                            {
                              uint64_t v298 = swift_slowAlloc(42LL, -1LL);
                              v299 = (char **)swift_slowAlloc(8LL, -1LL);
                              v413 = v299;
                              os_log_t v416 = (os_log_t)swift_slowAlloc(64LL, -1LL);
                              os_log_t v433 = v416;
                              *(_DWORD *)uint64_t v298 = 138544130;
                              uint64_t v419 = v286;
                              v414 = v296;
                              uint64_t v300 = v287;
                              v430 = (uint64_t *)v295;
                              v301 = v295;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v298 + 4, v298 + 12);
                              *v299 = v415;

                              *(_WORD *)(v298 + 12) = 2082;
                              uint64_t v303 = *(void *)&v301[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
                              unint64_t v302 = *(void *)&v301[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
                              swift_bridgeObjectRetain();
                              uint64_t v304 = v303;
                              uint64_t v287 = v300;
                              uint64_t v305 = v412;
                              v430 = (uint64_t *)sub_10015ADC4(v304, v302, (uint64_t *)&v433);
                              uint64_t v286 = v419;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v298 + 14, v298 + 22);

                              uint64_t v288 = v305;
                              swift_bridgeObjectRelease();

                              *(_WORD *)(v298 + 22) = 2080;
                              v430 = (uint64_t *)sub_10015ADC4( 0xD000000000000037LL,  0x800000010033C070LL,  (uint64_t *)&v433);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v298 + 24, v298 + 32);
                              *(_WORD *)(v298 + 32) = 2048;
                              v430 = v418;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v298 + 34, v298 + 42);
                              v306 = v414;
                              _os_log_impl( (void *)&_mh_execute_header,  v414,  (os_log_type_t)v417,  "[%{public}@]<%{public}s> %s Will not message %ld unmapped participants.",  (uint8_t *)v298,  0x2Au);
                              uint64_t v307 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                              v308 = v413;
                              swift_arrayDestroy(v413, 1LL, v307);
                              swift_slowDealloc(v308, -1LL, -1LL);
                              os_log_t v309 = v416;
                              swift_arrayDestroy(v416, 2LL, (char *)&type metadata for Any + 8);
                              swift_slowDealloc(v309, -1LL, -1LL);
                              swift_slowDealloc(v298, -1LL, -1LL);

                              v310 = v390;
                            }

                            else
                            {

                              v310 = v294;
                            }

                            ((void (*)(char *, uint64_t))v420)(v310, v288);
                          }

                          uint64_t v333 = *(void *)((char *)v283 + OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger);
                          if (v333)
                          {
                            uint64_t v334 = *(void *)(v287 + 16);
                            swift_retain(*(void *)((char *)v283 + OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger));
                            swift_bridgeObjectRetain();
                            uint64_t v336 = MRDFastSyncGroupSessionState.rawValue.getter(v426, v334, v268, v335);
                            v426 = (os_log_s *)sub_1002383C8(v336, v337, v338);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v339 = v391;
                            ((void (*)(char *, os_log_t, uint64_t))v423)(v391, v421, v288);
                            v340 = v283;
                            swift_retain_n(v287, 2LL);
                            v341 = v340;
                            v342 = (os_log_s *)Logger.logObject.getter(v341);
                            os_log_type_t v343 = static os_log_type_t.default.getter();
                            int v344 = v343;
                            if (os_log_type_enabled(v342, v343))
                            {
                              uint64_t v345 = swift_slowAlloc(42LL, -1LL);
                              v346 = (char *)swift_slowAlloc(8LL, -1LL);
                              v420 = v346;
                              v423 = (uint64_t *)swift_slowAlloc(96LL, -1LL);
                              v430 = v423;
                              *(_DWORD *)uint64_t v345 = 138544130;
                              os_log_t v421 = v342;
                              uint64_t v347 = v287;
                              os_log_t v433 = v341;
                              LODWORD(v418) = v344;
                              v348 = v341;
                              uint64_t v419 = v286;
                              v349 = v348;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v433, &v434, v345 + 4, v345 + 12);
                              *(void *)v346 = v415;

                              *(_WORD *)(v345 + 12) = 2082;
                              uint64_t v351 = *(void *)((char *)v349 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
                              unint64_t v350 = *(void *)((char *)v349 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8);
                              swift_bridgeObjectRetain();
                              uint64_t v352 = v351;
                              uint64_t v287 = v347;
                              os_log_t v433 = (os_log_t)sub_10015ADC4(v352, v350, (uint64_t *)&v430);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v433, &v434, v345 + 14, v345 + 22);

                              swift_bridgeObjectRelease();
                              *(_WORD *)(v345 + 22) = 2080;
                              os_log_t v433 = (os_log_t)sub_10015ADC4( 0xD000000000000037LL,  0x800000010033C070LL,  (uint64_t *)&v430);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v433, &v434, v345 + 24, v345 + 32);
                              *(_WORD *)(v345 + 32) = 2080;
                              swift_beginAccess(v425, &v433, 0LL, 0LL);
                              uint64_t v353 = swift_bridgeObjectRetain();
                              uint64_t v354 = Array.description.getter(v353, &type metadata for GroupSessionParticipant);
                              unint64_t v356 = v355;
                              swift_bridgeObjectRelease();
                              uint64_t v357 = v354;
                              uint64_t v286 = v419;
                              uint64_t v429 = sub_10015ADC4(v357, v356, (uint64_t *)&v430);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v429, &v430, v345 + 34, v345 + 42);
                              swift_release(v347);
                              swift_bridgeObjectRelease();
                              swift_release(v347);
                              os_log_t v358 = v421;
                              _os_log_impl( (void *)&_mh_execute_header,  v421,  (os_log_type_t)v418,  "[%{public}@]<%{public}s> %s Sending message with pending participants: %s",  (uint8_t *)v345,  0x2Au);
                              uint64_t v359 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                              v360 = v420;
                              swift_arrayDestroy(v420, 1LL, v359);
                              swift_slowDealloc(v360, -1LL, -1LL);
                              v361 = v423;
                              swift_arrayDestroy(v423, 3LL, (char *)&type metadata for Any + 8);
                              swift_slowDealloc(v361, -1LL, -1LL);
                              swift_slowDealloc(v345, -1LL, -1LL);

                              (*(void (**)(char *, uint64_t))(v407 + 8))(v391, v412);
                            }

                            else
                            {

                              swift_release_n(v287, 2LL);
                              ((void (*)(char *, uint64_t))v420)(v339, v288);
                            }

                            uint64_t v373 = (uint64_t)v386;
                            uint64_t *v386 = v286;
                            uint64_t v375 = v387;
                            uint64_t v374 = v388;
                            (*(void (**)(uint64_t, void, uint64_t))(v387 + 104))( v373,  enum case for Participants.only(_:),  v388);
                            v376 = v426;
                            v377 = v426;
                            sub_1001D73BC(3u, v376, v373, v333, 0LL, 0LL);
                            swift_bridgeObjectRelease();
                            swift_release(v333);

                            swift_release(v380);
                            swift_bridgeObjectRelease();
                            (*(void (**)(uint64_t, uint64_t))(v375 + 8))(v373, v374);
                          }

                          else
                          {
                            swift_release(v286);
                            swift_release(v268);
                            swift_bridgeObjectRelease();
                            v362 = v385;
                            ((void (*)(char *, os_log_t, uint64_t))v423)(v385, v421, v288);
                            v363 = v283;
                            v364 = (os_log_s *)Logger.logObject.getter(v363);
                            os_log_type_t v365 = static os_log_type_t.error.getter();
                            if (os_log_type_enabled(v364, v365))
                            {
                              uint64_t v366 = swift_slowAlloc(32LL, -1LL);
                              v367 = (char **)swift_slowAlloc(8LL, -1LL);
                              os_log_t v425 = (os_log_t)swift_slowAlloc(64LL, -1LL);
                              v426 = (os_log_s *)v287;
                              os_log_t v433 = v425;
                              *(_DWORD *)uint64_t v366 = v406.n128_u32[0];
                              v430 = (uint64_t *)v363;
                              v368 = v363;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v366 + 4, v366 + 12);
                              *v367 = v415;

                              *(_WORD *)(v366 + 12) = 2082;
                              uint64_t v370 = *(void *)&v368[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
                              unint64_t v369 = *(void *)&v368[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
                              swift_bridgeObjectRetain();
                              v430 = (uint64_t *)sub_10015ADC4(v370, v369, (uint64_t *)&v433);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v366 + 14, v366 + 22);

                              swift_bridgeObjectRelease();
                              *(_WORD *)(v366 + 22) = 2080;
                              v430 = (uint64_t *)sub_10015ADC4( 0xD000000000000037LL,  0x800000010033C070LL,  (uint64_t *)&v433);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, &v431, v366 + 24, v366 + 32);
                              _os_log_impl( (void *)&_mh_execute_header,  v364,  v365,  "[%{public}@]<%{public}s> %s Drop identity broadcast we are not ready.",  (uint8_t *)v366,  0x20u);
                              uint64_t v371 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                              swift_arrayDestroy(v367, 1LL, v371);
                              swift_slowDealloc(v367, -1LL, -1LL);
                              os_log_t v372 = v425;
                              swift_arrayDestroy(v425, 2LL, (char *)&type metadata for Any + 8);
                              swift_slowDealloc(v372, -1LL, -1LL);
                              swift_slowDealloc(v366, -1LL, -1LL);
                              swift_bridgeObjectRelease();

                              swift_release(v380);
                              swift_bridgeObjectRelease();
                              ((void (*)(char *, uint64_t))v420)(v385, v412);
                              return (id)swift_release(v426);
                            }

                            swift_release(v380);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            ((void (*)(char *, uint64_t))v420)(v362, v288);
                          }

                          return (id)swift_release(v287);
                        }

                        else
                        {
                          swift_release(v286);
                          swift_release(v268);
                          swift_bridgeObjectRelease();
                          v311 = v389;
                          uint64_t v312 = v412;
                          ((void (*)(char *, os_log_t, uint64_t))v423)(v389, v421, v412);
                          v313 = v283;
                          uint64_t v314 = swift_bridgeObjectRetain();
                          v315 = (os_log_s *)Logger.logObject.getter(v314);
                          os_log_type_t v316 = static os_log_type_t.default.getter();
                          int v317 = v316;
                          if (os_log_type_enabled(v315, v316))
                          {
                            uint64_t v318 = swift_slowAlloc(42LL, -1LL);
                            uint64_t v319 = swift_slowAlloc(8LL, -1LL);
                            LODWORD(v425) = v317;
                            v320 = (void *)v319;
                            v423 = (uint64_t *)v319;
                            v426 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
                            os_log_t v433 = v426;
                            *(_DWORD *)uint64_t v318 = 138544130;
                            v427 = v313;
                            v321 = v313;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v427, v428, v318 + 4, v318 + 12);
                            void *v320 = v415;

                            *(_WORD *)(v318 + 12) = 2082;
                            uint64_t v323 = *(void *)&v321[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
                            unint64_t v322 = *(void *)&v321[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
                            swift_bridgeObjectRetain();
                            v427 = (void *)sub_10015ADC4(v323, v322, (uint64_t *)&v433);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v427, v428, v318 + 14, v318 + 22);

                            swift_bridgeObjectRelease();
                            *(_WORD *)(v318 + 22) = 2080;
                            v427 = (void *)sub_10015ADC4(0xD000000000000037LL, 0x800000010033C070LL, (uint64_t *)&v433);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v427, v428, v318 + 24, v318 + 32);
                            *(_WORD *)(v318 + 32) = 2082;
                            uint64_t v324 = type metadata accessor for Participant(0LL);
                            uint64_t v325 = sub_100156FEC( &qword_1003F9A88,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
                            uint64_t v326 = swift_bridgeObjectRetain();
                            uint64_t v327 = Set.description.getter(v326, v324, v325);
                            unint64_t v329 = v328;
                            swift_bridgeObjectRelease();
                            v427 = (void *)sub_10015ADC4(v327, v329, (uint64_t *)&v433);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v427, v428, v318 + 34, v318 + 42);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            _os_log_impl( (void *)&_mh_execute_header,  v315,  (os_log_type_t)v425,  "[%{public}@]<%{public}s> %s No mapped participants to sync participants to. activeFastSync Participants: %{public}s",  (uint8_t *)v318,  0x2Au);
                            uint64_t v330 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                            v331 = v423;
                            swift_arrayDestroy(v423, 1LL, v330);
                            swift_slowDealloc(v331, -1LL, -1LL);
                            v332 = v426;
                            swift_arrayDestroy(v426, 3LL, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v332, -1LL, -1LL);
                            swift_slowDealloc(v318, -1LL, -1LL);
                            swift_bridgeObjectRelease();

                            swift_release(v380);
                            swift_bridgeObjectRelease();
                            return (id)(*(uint64_t (**)(char *, uint64_t))(v407 + 8))(v389, v412);
                          }

                          else
                          {

                            swift_release(v380);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease_n(v284, 2LL);

                            swift_bridgeObjectRelease();
                            return (id)((uint64_t (*)(char *, uint64_t))v420)(v311, v312);
                          }
                        }
                      }

                      unint64_t v106 = *((void *)v416 + v107);
                      if (!v106)
                      {
                        while (1)
                        {
                          uint64_t v91 = v107 + 1;
                          if (__OFADD__(v107, 1LL)) {
                            break;
                          }
                          if (v91 >= v417) {
                            goto LABEL_116;
                          }
                          unint64_t v106 = *((void *)v416 + v91);
                          ++v107;
                          if (v106) {
                            goto LABEL_43;
                          }
                        }

                        __break(1u);
                        goto LABEL_157;
                      }

                      uint64_t v91 = v107;
                    }
                  }
                }
              }
            }

void *sub_1001CF668(uint64_t a1)
{
  v2 = v1;
  uint64_t v4 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v75 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }

  id result = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession__state];
  if (result == (void *)4) {
    return result;
  }
  *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession__state] = 4LL;
  sub_1001B29A0(result);
  uint64_t v18 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  uint64_t v19 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  uint64_t v20 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8];
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = 0LL;
  sub_100162944(v19, v20);
  uint64_t v21 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables], v81, 1LL, 0LL);
  *(void *)uint64_t v21 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v22 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_cancellables];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_cancellables], v80, 1LL, 0LL);
  *(void *)uint64_t v22 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_presenceTask];
  if (v23)
  {
    swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_presenceTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v23);
  }

  uint64_t v24 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask];
  uint64_t v14 = v75;
  if (v24)
  {
    swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v24);
  }

  uint64_t v25 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask];
  if (v25)
  {
    swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v25);
  }

  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v26 = v8;
  unint64_t v27 = sub_1001E8078();
  uint64_t v28 = swift_allocError(&type metadata for FastSyncSessionError, v27, 0LL, 0LL);
  *uint64_t v29 = 5LL;
  swift_errorRetain(a1);
  uint64_t v30 = (void *)_convertErrorToNSError(_:)(v28);
  uint64_t v31 = (void *)_convertErrorToNSError(_:)(a1);
  sub_10016083C(0LL, &qword_1003FA128, &OBJC_CLASS___NSError_ptr);
  char v32 = static NSObject.== infix(_:_:)(v30);

  swift_errorRelease(v28);
  if ((v32 & 1) != 0)
  {
    swift_errorRelease(a1);
    uint64_t v8 = v26;
LABEL_12:
    uint64_t v33 = sub_1001B2928();
    uint64_t v34 = sub_1001B27AC();
    uint64_t v35 = swift_release(v33);
    (*(void (**)(uint64_t))((swift_isaMask & *v34) + 0xD0LL))(v35);

    uint64_t v77 = sub_1001B2928();
    uint64_t v36 = type metadata accessor for SessionTimingEvents();
    sub_1002047D4(v36, (uint64_t)&off_1003A5598);
    uint64_t v37 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings];
    *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings] = v77;
    swift_release(v37);
    goto LABEL_14;
  }

  uint64_t v77 = sub_1001B28A4();
  uint64_t v38 = type metadata accessor for JoinTimingEvents();
  sub_1002050AC(a1, v38, (uint64_t)&off_1003A55E0);
  uint64_t v39 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings];
  *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = v77;
  swift_release(v39);
  uint64_t v77 = sub_1001B2928();
  uint64_t v40 = type metadata accessor for SessionTimingEvents();
  sub_1002050AC(a1, v40, (uint64_t)&off_1003A5598);
  uint64_t v41 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings];
  *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings] = v77;
  swift_release(v41);
  swift_errorRelease(a1);
  uint64_t v8 = v26;
LABEL_14:
  if (qword_1003FF010 != -1) {
LABEL_26:
  }
    swift_once(&qword_1003FF010, sub_1001B2258);
  uint64_t v42 = sub_10015ADAC(v7, (uint64_t)qword_1003FF018);
  (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v14, v42, v7);
  v43 = v2;
  swift_errorRetain(a1);
  uint64_t v44 = v43;
  swift_errorRetain(a1);
  uint64_t v45 = v44;
  id v46 = (os_log_s *)Logger.logObject.getter(v45);
  int v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, (os_log_type_t)v47))
  {
    int v70 = v47;
    uint64_t v73 = v8;
    uint64_t v74 = v7;
    v69 = v6;
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v72;
    *(_DWORD *)uint64_t v48 = 138543874;
    uint64_t v77 = (uint64_t)v45;
    v50 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v48 + 4, v48 + 12);
    int v71 = v49;
    *uint64_t v49 = v45;

    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v51 = *(void *)&v50[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v52 = *(void *)&v50[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_10015ADC4(v51, v52, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v48 + 14, v48 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 22) = 2082;
    unint64_t v53 = 0xE000000000000000LL;
    if (a1)
    {
      uint64_t v77 = 0LL;
      unint64_t v78 = 0xE000000000000000LL;
      swift_errorRetain(a1);
      v54._countAndFlagsBits = 0x7265206874697720LL;
      v54._object = (void *)0xED0000203A726F72LL;
      String.append(_:)(v54);
      uint64_t v76 = a1;
      uint64_t v55 = sub_100156B68(&qword_1003F86D0);
      _print_unlocked<A, B>(_:_:)( &v76,  &v77,  v55,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      swift_errorRelease(a1);
      uint64_t v56 = v77;
      unint64_t v53 = v78;
    }

    else
    {
      uint64_t v56 = 0LL;
    }

    uint64_t v6 = v69;
    v57 = v75;
    uint64_t v77 = sub_10015ADC4(v56, v53, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v48 + 24, v48 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v46,  (os_log_type_t)v70,  "[%{public}@]<%{public}s> invalidate%{public}s.",  (uint8_t *)v48,  0x20u);
    uint64_t v58 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v59 = v71;
    swift_arrayDestroy(v71, 1LL, v58);
    swift_slowDealloc(v59, -1LL, -1LL);
    uint64_t v60 = v72;
    swift_arrayDestroy(v72, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v74);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    (*(void (**)(void *, uint64_t))(v8 + 8))(v14, v7);
  }

  uint64_t v61 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_provider];
  unint64_t v62 = *(void **)&v45[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
  uint64_t v63 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  swift_retain(v61);
  id v64 = v62;
  if (v63)
  {
    swift_retain(v63);
    GroupSession.end()();
    swift_release(v63);
  }

  uint64_t v65 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))(v6, 1LL, 1LL, v65);
  v66 = (void *)swift_allocObject(&unk_1003A60C8, 48LL, 7LL);
  v66[2] = 0LL;
  v66[3] = 0LL;
  v66[4] = v61;
  v66[5] = v62;
  uint64_t v67 = sub_10015AA50((uint64_t)v6, (uint64_t)&unk_1003FA120, (uint64_t)v66);
  return (void *)swift_release(v67);
}

uint64_t sub_1001CFEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001CFEBC, 0LL, 0LL);
}

uint64_t sub_1001CFEBC(uint64_t a1)
{
  *(void *)(v1 + 32) = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(a1);
  v2 = (void *)swift_task_alloc(async function pointer to NearbyGroup.leave()[1]);
  *(void *)(v1 + 40) = v2;
  void *v2 = v1;
  v2[1] = sub_1001CFF14;
  return NearbyGroup.leave()();
}

uint64_t sub_1001CFF14()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 40));
  swift_release(v3);
  if (v0) {
    swift_errorRelease(v0);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to GroupSessionProvider.leave()[1]);
  *(void *)(v2 + 48) = v5;
  uint64_t v6 = sub_100156B68(&qword_1003F9950);
  uint64_t v7 = sub_1001604E8( &qword_1003F9FA8,  &qword_1003F9950,  (uint64_t)&protocol conformance descriptor for NearbyGroupSessionProvider<A>);
  *uint64_t v5 = v4;
  v5[1] = sub_1001CFFCC;
  return GroupSessionProvider.leave()(v6, v7);
}

uint64_t sub_1001CFFCC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 48));
  if (v0) {
    swift_errorRelease(v0);
  }
  uint64_t v4 = (void *)swift_task_alloc(dword_1003F9E44);
  *(void *)(v2 + 56) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001D0060;
  uint64_t v5 = *(void *)(v2 + 24);
  v4[23] = v5;
  v4[24] = swift_getObjectType(v5, v6);
  return swift_task_switch(sub_1001DF41C, 0LL, 0LL);
}

uint64_t sub_1001D0060()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  if (v0) {
    swift_errorRelease(v0);
  }
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001D00B4()
{
  uint64_t v1 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100156B68(&qword_1003F9F78);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)&v0[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    v75 = v7;
    uint64_t v76 = v5;
    uint64_t v77 = v4;
    uint64_t v5 = *(void *)&v0[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    uint64_t v7 = *(char **)&v0[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    uint64_t v15 = qword_1003FF010;
    swift_bridgeObjectRetain();
    if (v15 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v16, (uint64_t)qword_1003FF018);
  swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v17 = v0;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v78 = v5;
  id v74 = v13;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v73 = v3;
    uint64_t v22 = v21;
    uint64_t v23 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    v81[0] = v72;
    *(_DWORD *)uint64_t v22 = 138543618;
    uint64_t v79 = (uint64_t)v17;
    uint64_t v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v22 + 4, v22 + 12);
    *uint64_t v23 = v17;

    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v79 = sub_10015ADC4(v78, (unint64_t)v7, v81);
    uint64_t v5 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[%{public}@]<%{public}s> Bind presence data source to nearby group.",  (uint8_t *)v22,  0x16u);
    uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v23, 1LL, v25);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v26 = v72;
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v22;
    uint64_t v3 = v73;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v28 = OBJC_IVAR___MRDFastSyncGroupSession_provider;
  uint64_t v29 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_provider];
  uint64_t v30 = swift_retain(v29);
  uint64_t v31 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v30);
  uint64_t v32 = swift_release(v29);
  uint64_t v33 = v75;
  NearbyGroup.$members.getter(v32);
  swift_release(v31);
  uint64_t v34 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v34 + 16, v17);
  uint64_t v35 = (void *)swift_allocObject(&unk_1003A5990, 40LL, 7LL);
  v35[2] = v34;
  v35[3] = v5;
  v35[4] = v7;
  uint64_t v36 = sub_1001604E8( &qword_1003F9F80,  &qword_1003F9F78,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  swift_bridgeObjectRetain();
  uint64_t v37 = v77;
  uint64_t v38 = Publisher<>.sink(receiveValue:)(sub_1001ED95C, v35, v77, v36);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v33, v37);
  uint64_t v39 = &v17[OBJC_IVAR___MRDFastSyncGroupSession_cancellables];
  swift_beginAccess(&v17[OBJC_IVAR___MRDFastSyncGroupSession_cancellables], v81, 33LL, 0LL);
  AnyCancellable.store(in:)(v39);
  swift_endAccess(v81);
  swift_release(v38);
  uint64_t v40 = *(void *)&v17[v28];
  uint64_t v41 = (char *)*(id *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
  uint64_t v42 = swift_retain(v40);
  uint64_t v43 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v42);
  uint64_t v44 = swift_release(v40);
  uint64_t v45 = NearbyGroup.members.getter(v44);
  swift_release(v43);
  id v46 = (void *)sub_1001C785C( v45,  (uint64_t)v80,  (uint64_t (*)(void))&type metadata accessor for NearbyGroup.Member,  (uint64_t (*)(uint64_t))&NearbyGroup.Member.handle.getter);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
  if (v48)
  {
    uint64_t v49 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
    swift_bridgeObjectRetain_n(*(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8], 2LL);
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0) {
      uint64_t v51 = sub_1001E1164(0LL, v46[2] + 1LL, 1, v46);
    }
    unint64_t v53 = v51[2];
    unint64_t v52 = v51[3];
    if (v53 >= v52 >> 1) {
      uint64_t v51 = sub_1001E1164((void *)(v52 > 1), v53 + 1, 1, v51);
    }
    v51[2] = v53 + 1;
    Swift::String v54 = &v51[2 * v53];
    v54[4] = v49;
    v54[5] = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = sub_1001A6418((uint64_t)v51);
    swift_bridgeObjectRelease();
    uint64_t v56 = *(void *)&v41[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members];
    *(void *)&v41[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members] = v55;
    sub_1001DD1E8(v56, v57);

    swift_bridgeObjectRelease();
    uint64_t v58 = type metadata accessor for TaskPriority(0LL);
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL);
    v59(v3, 1LL, 1LL, v58);
    uint64_t v60 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v60 + 16, v17);
    uint64_t v61 = (void *)swift_allocObject(&unk_1003A59B8, 64LL, 7LL);
    v61[2] = 0LL;
    v61[3] = 0LL;
    uint64_t v62 = v78;
    v61[4] = v60;
    v61[5] = v62;
    uint64_t v63 = v74;
    v61[6] = v7;
    v61[7] = v63;
    id v64 = v63;
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_1001669DC((uint64_t)v3, (uint64_t)&unk_1003F9F90, (uint64_t)v61);
    uint64_t v66 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_presenceTask];
    *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_presenceTask] = v65;
    swift_release(v66);
    v59(v3, 1LL, 1LL, v58);
    uint64_t v67 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v67 + 16, v17);
    uint64_t v68 = (void *)swift_allocObject(&unk_1003A59E0, 56LL, 7LL);
    v68[2] = 0LL;
    v68[3] = 0LL;
    v68[4] = v67;
    v68[5] = v62;
    v68[6] = v7;
    uint64_t v69 = sub_1001669DC((uint64_t)v3, (uint64_t)&unk_1003F9FA0, (uint64_t)v68);
    uint64_t v70 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask];
    *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask] = v69;
    return swift_release(v70);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001D07C0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v47 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9);
  uint64_t v42 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  uint64_t v12 = a2 + 16;
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v13, (uint64_t)qword_1003FF018);
  swift_retain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v14 = swift_bridgeObjectRetain_n(v11, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v41 = v7;
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v40;
    *(_DWORD *)uint64_t v17 = 138543874;
    swift_beginAccess(a2 + 16, v49, 0LL, 0LL);
    uint64_t v39 = a2 + 16;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    uint64_t v20 = Strong;
    if (Strong) {
      uint64_t v52 = Strong;
    }
    else {
      uint64_t v52 = 0LL;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 4, v17 + 12);
    uint64_t *v18 = v20;
    swift_release_n(a2, 2LL);
    *(_WORD *)(v17 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v52 = sub_10015ADC4(v47, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v17 + 22) = 2080;
    uint64_t v21 = type metadata accessor for NearbyGroup.Member(0LL);
    uint64_t v22 = sub_100156FEC( &qword_1003F9FE0,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroup.Member,  (uint64_t)&protocol conformance descriptor for NearbyGroup.Member);
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = Set.description.getter(v23, v21, v22);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v52 = sub_10015ADC4(v24, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%{public}@]<%{public}s> NearbyGroup members changed: %s.",  (uint8_t *)v17,  0x20u);
    uint64_t v27 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v18, 1LL, v27);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v28 = v40;
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    uint64_t v7 = v41;
    uint64_t v12 = v39;
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_release_n(a2, 2LL);
  }

  swift_beginAccess(v12, &v52, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v12);
  if (result)
  {
    uint64_t v30 = (void *)result;
    uint64_t v31 = (void *)swift_allocObject(&unk_1003A5B00, 48LL, 7LL);
    v31[2] = v11;
    v31[3] = v30;
    v31[4] = v47;
    v31[5] = a4;
    aBlock[4] = (uint64_t)sub_1001EDC38;
    uint64_t v51 = v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A5B18;
    uint64_t v32 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v33 = v30;
    uint64_t v34 = v42;
    static DispatchQoS.unspecified.getter(v33);
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v35 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v36 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v37 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v38 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v36, v37, v7, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v38, v32);
    _Block_release(v32);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v7);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v44);

    return swift_release(v51);
  }

  return result;
}

uint64_t sub_1001D0D28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbyGroup.Member(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v33 = a1 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0LL;
  uint64_t v32 = _swiftEmptyArrayStorage;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v14 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v8,  *(void *)(a1 + 48) + *(void *)(v3 + 72) * i,  v2);
    uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    uint64_t v18 = NearbyGroup.Member.tokenDestination.getter(v17);
    uint64_t v20 = v19;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (v20)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v32);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001E1164(0LL, v32[2] + 1LL, 1, v32);
        uint64_t v32 = (void *)result;
      }

      unint64_t v25 = v32[2];
      unint64_t v24 = v32[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        unint64_t v30 = v32[2];
        unint64_t v31 = v25 + 1;
        uint64_t result = (uint64_t)sub_1001E1164((void *)(v24 > 1), v25 + 1, 1, v32);
        unint64_t v25 = v30;
        unint64_t v26 = v31;
        uint64_t v32 = (void *)result;
      }

      uint64_t v27 = v32;
      v32[2] = v26;
      uint64_t v28 = &v27[2 * v25];
      v28[4] = v18;
      v28[5] = v20;
      if (v12) {
        goto LABEL_4;
      }
    }

    else if (v12)
    {
      goto LABEL_4;
    }

void sub_1001D0FEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
    unint64_t v7 = sub_1001ED348();
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v42, v5, v6, v7);
    uint64_t v3 = v42[0];
    uint64_t v39 = v42[1];
    uint64_t v9 = v42[2];
    int64_t v10 = v42[3];
    uint64_t v11 = v42[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    uint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    int64_t v10 = 0LL;
  }

  uint64_t v36 = v9;
  int64_t v38 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v47 = (char *)&type metadata for Any + 8;
LABEL_11:
  int64_t v15 = v10;
  unint64_t v16 = v11;
  while (v3 < 0)
  {
    uint64_t v18 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v18) {
      goto LABEL_56;
    }
    uint64_t v19 = v18;
    *(void *)&__int128 v45 = v18;
    uint64_t v20 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(v44, &v45, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v21 = (id)v44[0];
    swift_unknownObjectRelease(v19);
    int64_t v10 = v15;
    uint64_t v11 = v16;
    if (!v21) {
      goto LABEL_56;
    }
LABEL_30:
    id v24 = objc_msgSend(v21, "presencePayload", v36);
    id v25 = [v24 payloadDictionary];

    if (!v25)
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
LABEL_40:
      sub_1001603DC((uint64_t)&v45, &qword_1003F9EE0);
LABEL_41:
      uint64_t v40 = 0LL;
      uint64_t v41 = 0LL;
      if (v2)
      {
LABEL_55:

        sub_10016031C(v3);
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_42;
    }

    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v25,  &type metadata for AnyHashable,  v47,  &protocol witness table for AnyHashable);

    v43[0] = 25705LL;
    v43[1] = 0xE200000000000000LL;
    AnyHashable.init<A>(_:)(v43, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v26 + 16) && (unint64_t v27 = sub_10015CAA4((uint64_t)v44), (v28 & 1) != 0))
    {
      sub_100160800(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v45);
    }

    else
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
    }

    swift_bridgeObjectRelease();
    sub_100160990((uint64_t)v44);
    if (!*((void *)&v46 + 1)) {
      goto LABEL_40;
    }
    if (v2) {
      goto LABEL_55;
    }
LABEL_42:

    uint64_t v29 = v41;
    int64_t v15 = v10;
    unint64_t v16 = v11;
    if (v41)
    {
      uint64_t v31 = v40;
      uint64_t v32 = v37;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001E1164(0LL, v37[2] + 1LL, 1, v37);
        uint64_t v32 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v34 = v32[2];
      unint64_t v33 = v32[3];
      if (v34 >= v33 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001E1164((void *)(v33 > 1), v34 + 1, 1, v32);
        uint64_t v32 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v32[2] = v34 + 1;
      uint64_t v37 = v32;
      uint64_t v35 = &v32[2 * v34];
      v35[4] = v31;
      v35[5] = v29;
      goto LABEL_11;
    }
  }

  if (v16)
  {
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v17 = __clz(__rbit64(v16)) | (v15 << 6);
    int64_t v10 = v15;
LABEL_29:
    id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_30;
  }

  int64_t v10 = v15 + 1;
  if (!__OFADD__(v15, 1LL))
  {
    if (v10 >= v38) {
      goto LABEL_56;
    }
    unint64_t v22 = *(void *)(v39 + 8 * v10);
    if (!v22)
    {
      int64_t v23 = v15 + 2;
      if (v15 + 2 >= v38) {
        goto LABEL_56;
      }
      unint64_t v22 = *(void *)(v39 + 8 * v23);
      if (v22) {
        goto LABEL_27;
      }
      int64_t v23 = v15 + 3;
      if (v15 + 3 >= v38) {
        goto LABEL_56;
      }
      unint64_t v22 = *(void *)(v39 + 8 * v23);
      if (v22) {
        goto LABEL_27;
      }
      int64_t v23 = v15 + 4;
      if (v15 + 4 >= v38) {
        goto LABEL_56;
      }
      unint64_t v22 = *(void *)(v39 + 8 * v23);
      if (v22)
      {
LABEL_27:
        int64_t v10 = v23;
      }

      else
      {
        int64_t v10 = v15 + 5;
        if (v15 + 5 >= v38) {
          goto LABEL_56;
        }
        unint64_t v22 = *(void *)(v39 + 8 * v10);
        if (!v22)
        {
          int64_t v30 = v15 + 6;
          while (v38 != v30)
          {
            unint64_t v22 = *(void *)(v39 + 8 * v30++);
            if (v22)
            {
              int64_t v10 = v30 - 1;
              goto LABEL_28;
            }
          }

LABEL_56:
          sub_10016031C(v3);
          return;
        }
      }
    }

uint64_t sub_1001D14A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[60] = a6;
  v7[61] = a7;
  v7[58] = a4;
  v7[59] = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v7[62] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[63] = v9;
  v7[64] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  v7[65] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[66] = v11;
  v7[67] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003F9FB0);
  v7[68] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AddressableMember(0LL);
  v7[69] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[70] = v14;
  v7[71] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001D15AC, 0LL, 0LL);
}

uint64_t sub_1001D15AC()
{
  uint64_t v1 = v0 + 128;
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v3 = (void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 576) = sub_10015ADAC(v5, (uint64_t)qword_1003FF018);
  swift_retain_n(v4, 2LL);
  uint64_t v6 = swift_bridgeObjectRetain_n(v2, 2LL);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v114 = (uint64_t *)(v0 + 456);
    uint64_t v9 = *v3 + 16LL;
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = v12;
    *(_DWORD *)uint64_t v10 = 138543618;
    swift_beginAccess(v9, v0 + 152, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      *uint64_t v114 = Strong;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v0 + 464, v10 + 4, v10 + 12);
      uint64_t v14 = v0 + 448;
    }

    else
    {
      *(void *)(v0 + 440) = 0LL;
      uint64_t v14 = v0 + 448;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v10 + 4, v10 + 12);
    }

    uint64_t v17 = *(void *)(v0 + 472);
    unint64_t v16 = *(void *)(v0 + 480);
    uint64_t v18 = *(void *)(v0 + 464);
    *uint64_t v11 = Strong;
    swift_release_n(v18, 2LL);
    *(_WORD *)(v10 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 448) = sub_10015ADC4(v17, v16, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, v114, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%{public}@]<%{public}s> Asserting presence.",  (uint8_t *)v10,  0x16u);
    uint64_t v19 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v11, 1LL, v19);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    uint64_t v3 = (void *)(v0 + 464);
    uint64_t v1 = v0 + 128;
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 480);
    swift_release_n(*(void *)(v0 + 464), 2LL);
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  uint64_t v20 = *v3 + 16LL;
  swift_beginAccess(v20, v1, 0LL, 0LL);
  uint64_t v21 = swift_unknownObjectWeakLoadStrong(v20);
  if (!v21)
  {
    *(void *)(v0 + 96) = 0LL;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    goto LABEL_17;
  }

  unint64_t v22 = (void *)v21;
  uint64_t v23 = *(void *)(v21 + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  swift_retain(v23);

  dispatch thunk of NearbyGroupSessionProvider.localMember.getter();
  swift_release(v23);
  if (!*(void *)(v0 + 88))
  {
LABEL_17:
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    uint64_t v48 = *(void *)(v0 + 544);
    sub_1001603DC(v0 + 64, &qword_1003F9FB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v48, 1LL, 1LL, v47);
    goto LABEL_18;
  }

  uint64_t v24 = *(void *)(v0 + 560);
  uint64_t v25 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v27 = sub_100156B68(&qword_1003F9FC0);
  int v28 = swift_dynamicCast(v26, v0 + 64, v27, v25, 6LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v26, v28 ^ 1u, 1LL, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1LL, v25) == 1)
  {
LABEL_18:
    uint64_t v49 = (const void *)(v0 + 16);
    uint64_t v50 = *(void *)(v0 + 480);
    uint64_t v51 = *(void *)(v0 + 464);
    sub_1001603DC(*(void *)(v0 + 544), &qword_1003F9FB0);
    swift_retain_n(v51, 2LL);
    uint64_t v52 = swift_bridgeObjectRetain_n(v50, 2LL);
    unint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = *v3 + 16LL;
      uint64_t v56 = swift_slowAlloc(22LL, -1LL);
      uint64_t v57 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v116 = v58;
      *(_DWORD *)uint64_t v56 = 138543618;
      swift_beginAccess(v55, v0 + 176, 0LL, 0LL);
      uint64_t v59 = swift_unknownObjectWeakLoadStrong(v55);
      if (v59)
      {
        uint64_t v60 = v0 + 352;
        uint64_t v61 = v56 + 12;
        *(void *)(v0 + 352) = v59;
        uint64_t v62 = v0 + 360;
      }

      else
      {
        uint64_t v61 = v56 + 12;
        *(void *)(v0 + 400) = 0LL;
        uint64_t v60 = v0 + 400;
        uint64_t v62 = v0 + 408;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v62, v56 + 4, v61);
      uint64_t v65 = *(void *)(v0 + 472);
      unint64_t v64 = *(void *)(v0 + 480);
      uint64_t v66 = *(void *)(v0 + 464);
      uint64_t *v57 = v59;
      swift_release_n(v66, 2LL);
      *(_WORD *)(v56 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 392) = sub_10015ADC4(v65, v64, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease_n(v64, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "[%{public}@]<%{public}s> No local handle to assert presence with.",  (uint8_t *)v56,  0x16u);
      uint64_t v67 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v57, 1LL, v67);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);

      uint64_t v49 = (const void *)(v0 + 16);
    }

    else
    {
      uint64_t v63 = *(void *)(v0 + 480);
      swift_release_n(*(void *)(v0 + 464), 2LL);
      swift_bridgeObjectRelease_n(v63, 2LL);
    }

    uint64_t v68 = *(void *)(v0 + 536);
    uint64_t v110 = *(void *)(v0 + 528);
    uint64_t v112 = *(void *)(v0 + 520);
    uint64_t v69 = *(void *)(v0 + 512);
    uint64_t v109 = *(void *)(v0 + 504);
    uint64_t v70 = *(void *)(v0 + 496);
    uint64_t v71 = *(void *)(v0 + 464) + 16LL;
    uint64_t v72 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_beginAccess(v71, v0 + 104, 0LL, 0LL);
    uint64_t v73 = (void *)swift_unknownObjectWeakLoadStrong(v71);
    swift_unknownObjectWeakInit(v72 + 16, v73);

    *(void *)(v0 + 48) = sub_1001EDAAC;
    *(void *)(v0 + 56) = v72;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_100157EA8;
    *(void *)(v0 + 40) = &unk_1003A59F8;
    id v74 = _Block_copy(v49);
    uint64_t v75 = swift_retain(v72);
    static DispatchQoS.unspecified.getter(v75);
    *(void *)(v0 + 432) = _swiftEmptyArrayStorage;
    uint64_t v76 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v77 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v78 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 432, v77, v78, v70, v76);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v68, v69, v74);
    _Block_release(v74);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v69, v70);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v68, v112);
    swift_release(*(void *)(v0 + 56));
    swift_release(v72);
    goto LABEL_25;
  }

  uint64_t v29 = *(void *)(v0 + 464) + 16LL;
  (*(void (**)(void, void, void))(*(void *)(v0 + 560) + 32LL))( *(void *)(v0 + 568),  *(void *)(v0 + 544),  *(void *)(v0 + 552));
  swift_beginAccess(v29, v0 + 272, 0LL, 0LL);
  uint64_t v30 = swift_unknownObjectWeakLoadStrong(v29);
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    uint64_t v32 = sub_1001B28A4();

    unint64_t v33 = (void *)sub_1001B2548();
    uint64_t v34 = swift_release(v32);
    (*(void (**)(uint64_t))((swift_isaMask & *v33) + 0xC0LL))(v34);
  }

  uint64_t v35 = *v3 + 16LL;
  swift_beginAccess(v35, v0 + 296, 0LL, 0LL);
  uint64_t v36 = swift_unknownObjectWeakLoadStrong(v35);
  if (v36)
  {
    uint64_t v37 = (void *)v36;
    int64_t v38 = *(void **)(v36 + OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource);
    *(void *)(v0 + 584) = v38;
    id v39 = v38;

    uint64_t v40 = AddressableMember.handle.getter();
    uint64_t v42 = v41;
    *(void *)(v0 + 592) = v41;
    uint64_t v43 = (void *)swift_task_alloc(dword_1003F9E3C);
    *(void *)(v0 + 600) = v43;
    void *v43 = v0;
    v43[1] = sub_1001D2198;
    v43[39] = v42;
    v43[40] = v39;
    v43[38] = v40;
    v43[41] = swift_getObjectType(v39, v44);
    return swift_task_switch(sub_1001DEAB8, 0LL, 0LL);
  }

  uint64_t v82 = *v3 + 16LL;
  swift_beginAccess(v82, v0 + 224, 0LL, 0LL);
  uint64_t v83 = swift_unknownObjectWeakLoadStrong(v82);
  if (v83)
  {
    v84 = (void *)v83;
    uint64_t v85 = sub_1001B28A4();

    uint64_t v86 = (void *)sub_1001B2548();
    uint64_t v87 = swift_release(v85);
    (*(void (**)(uint64_t))((swift_isaMask & *v86) + 0xD0LL))(v87);
  }

  uint64_t v88 = *(void *)(v0 + 480);
  swift_retain_n(*(void *)(v0 + 464), 2LL);
  uint64_t v89 = swift_bridgeObjectRetain_n(v88, 2LL);
  __n128 v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = *v3 + 16LL;
    uint64_t v93 = swift_slowAlloc(22LL, -1LL);
    v94 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v95 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = v95;
    *(_DWORD *)uint64_t v93 = 138543618;
    swift_beginAccess(v92, v0 + 200, 0LL, 0LL);
    uint64_t v96 = swift_unknownObjectWeakLoadStrong(v92);
    uint64_t v97 = v96;
    if (v96)
    {
      *(void *)(v0 + 424) = v96;
      uint64_t v98 = v0 + 424;
      uint64_t v99 = v0 + 432;
    }

    else
    {
      uint64_t v98 = v0 + 408;
      *(void *)(v0 + 408) = 0LL;
      uint64_t v99 = v0 + 416;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v98, v99, v93 + 4, v93 + 12);
    uint64_t v115 = *(void *)(v0 + 568);
    uint64_t v111 = *(void *)(v0 + 560);
    uint64_t v113 = *(void *)(v0 + 552);
    uint64_t v106 = *(void *)(v0 + 472);
    unint64_t v105 = *(void *)(v0 + 480);
    uint64_t v107 = *(void *)(v0 + 464);
    uint64_t *v94 = v97;
    swift_release_n(v107, 2LL);
    *(_WORD *)(v93 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = sub_10015ADC4(v106, v105, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v93 + 14, v93 + 22);
    swift_bridgeObjectRelease_n(v105, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "[%{public}@]<%{public}s> Asserted presence.",  (uint8_t *)v93,  0x16u);
    uint64_t v108 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v94, 1LL, v108);
    swift_slowDealloc(v94, -1LL, -1LL);
    swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_slowDealloc(v93, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v113);
  }

  else
  {
    uint64_t v100 = *(void *)(v0 + 568);
    uint64_t v101 = *(void *)(v0 + 560);
    uint64_t v102 = *(void *)(v0 + 552);
    uint64_t v103 = *(void *)(v0 + 480);
    uint64_t v104 = *(void *)(v0 + 464);

    swift_bridgeObjectRelease_n(v103, 2LL);
    swift_release_n(v104, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
  }

uint64_t sub_1001D2198()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 600LL);
  uint64_t v3 = *(void **)(*(void *)v1 + 584LL);
  *(void *)(*(void *)v1 + 608LL) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1001D25A4;
  }
  else {
    uint64_t v4 = sub_1001D225C;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001D225C()
{
  uint64_t v1 = *(void *)(v0 + 464) + 16LL;
  swift_beginAccess(v1, v0 + 224, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    uint64_t v4 = sub_1001B28A4();

    uint64_t v5 = (void *)sub_1001B2548();
    uint64_t v6 = swift_release(v4);
    (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xD0LL))(v6);
  }

  uint64_t v7 = *(void *)(v0 + 480);
  swift_retain_n(*(void *)(v0 + 464), 2LL);
  uint64_t v8 = swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = *(void *)(v0 + 464) + 16LL;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v14;
    *(_DWORD *)uint64_t v12 = 138543618;
    swift_beginAccess(v11, v0 + 200, 0LL, 0LL);
    uint64_t v15 = swift_unknownObjectWeakLoadStrong(v11);
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = v12 + 12;
      *(void *)(v0 + 424) = v15;
      uint64_t v18 = v0 + 432;
      uint64_t v19 = v0 + 424;
    }

    else
    {
      uint64_t v19 = v0 + 408;
      uint64_t v17 = v12 + 12;
      *(void *)(v0 + 408) = 0LL;
      uint64_t v18 = v0 + 416;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v18, v12 + 4, v17);
    uint64_t v33 = *(void *)(v0 + 560);
    uint64_t v34 = *(void *)(v0 + 552);
    uint64_t v35 = *(void *)(v0 + 568);
    uint64_t v26 = *(void *)(v0 + 472);
    unint64_t v25 = *(void *)(v0 + 480);
    uint64_t v27 = *(void *)(v0 + 464);
    *uint64_t v13 = v16;
    swift_release_n(v27, 2LL);
    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = sub_10015ADC4(v26, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(v25, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[%{public}@]<%{public}s> Asserted presence.",  (uint8_t *)v12,  0x16u);
    uint64_t v28 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v13, 1LL, v28);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 568);
    uint64_t v21 = *(void *)(v0 + 560);
    uint64_t v22 = *(void *)(v0 + 552);
    uint64_t v23 = *(void *)(v0 + 480);
    uint64_t v24 = *(void *)(v0 + 464);

    swift_bridgeObjectRelease_n(v23, 2LL);
    swift_release_n(v24, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  uint64_t v29 = *(void *)(v0 + 544);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v31 = *(void *)(v0 + 512);
  swift_task_dealloc(*(void *)(v0 + 568));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D25A4()
{
  uint64_t v1 = v0 + 320;
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 464);
  (*(void (**)(void, void))(*(void *)(v0 + 560) + 8LL))(*(void *)(v0 + 568), *(void *)(v0 + 552));
  swift_retain(v3);
  swift_bridgeObjectRetain();
  swift_errorRetain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v33 = v0 + 376;
    uint64_t v7 = *(void *)(v0 + 464) + 16LL;
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(16LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v34;
    *(_DWORD *)uint64_t v8 = 138543874;
    swift_beginAccess(v7, v0 + 248, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v7);
    uint64_t v11 = Strong;
    if (Strong)
    {
      uint64_t v12 = v8 + 12;
      *(void *)(v0 + 384) = Strong;
      uint64_t v13 = v0 + 392;
      uint64_t v14 = v0 + 384;
    }

    else
    {
      uint64_t v14 = v0 + 360;
      uint64_t v12 = v8 + 12;
      *(void *)(v0 + 360) = 0LL;
      uint64_t v13 = v0 + 368;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, v13, v8 + 4, v12);
    uint64_t v17 = *(void *)(v0 + 608);
    uint64_t v18 = *(void *)(v0 + 472);
    unint64_t v19 = *(void *)(v0 + 480);
    uint64_t v20 = *(void *)(v0 + 464);
    uint64_t *v9 = v11;
    swift_release_n(v20, 2LL);
    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 368) = sub_10015ADC4(v18, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v33, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v19, 3LL);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain(v17);
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v17);
    *(void *)(v0 + 376) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v0 + 384, v8 + 24, v8 + 32);
    v9[1] = v21;
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[%{public}@]<%{public}s> Error asserting presence %{public}@. Low-power mode will not function.",  (uint8_t *)v8,  0x20u);
    uint64_t v22 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v9, 2LL, v22);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v1 = v0 + 320;
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 608);
    uint64_t v16 = *(void *)(v0 + 480);
    swift_release_n(*(void *)(v0 + 464), 2LL);
    swift_bridgeObjectRelease_n(v16, 2LL);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  uint64_t v23 = *(void *)(v0 + 464) + 16LL;
  swift_beginAccess(v23, v1, 0LL, 0LL);
  uint64_t v24 = swift_unknownObjectWeakLoadStrong(v23);
  uint64_t v25 = *(void *)(v0 + 608);
  if (v24)
  {
    uint64_t v26 = (char *)v24;
    *(void *)(v0 + 344) = sub_1001B28A4();
    uint64_t v27 = type metadata accessor for JoinTimingEvents();
    sub_1002050AC(v25, v27, (uint64_t)&off_1003A55E0);
    uint64_t v28 = *(void *)&v26[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings];
    *(void *)&v26[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = *(void *)(v0 + 344);
    swift_release(v28);
    swift_errorRelease(v25);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 608));
  }

  uint64_t v29 = *(void *)(v0 + 544);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v31 = *(void *)(v0 + 512);
  swift_task_dealloc(*(void *)(v0 + 568));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D2980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[27] = a5;
  v6[28] = a6;
  v6[26] = a4;
  return swift_task_switch(sub_1001D29E8, 0LL, 0LL);
}

uint64_t sub_1001D29E8()
{
  uint64_t v1 = v0 + 16;
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v2 = v0 + 40;
  uint64_t v3 = (void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 232) = sub_10015ADAC(v6, (uint64_t)qword_1003FF018);
  swift_retain_n(v4, 2LL);
  uint64_t v7 = swift_bridgeObjectRetain_n(v5, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v62 = (uint64_t *)(v0 + 200);
    uint64_t v10 = *v3 + 16LL;
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = v13;
    *(_DWORD *)uint64_t v11 = 138543618;
    swift_beginAccess(v10, v0 + 136, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v10);
    if (Strong)
    {
      uint64_t v15 = v0 + 200;
      *uint64_t v62 = Strong;
      uint64_t v16 = v0 + 208;
    }

    else
    {
      uint64_t v16 = v0 + 192;
      uint64_t v15 = v0 + 184;
      *(void *)(v0 + 184) = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v11 + 4, v11 + 12);
    uint64_t v19 = *(void *)(v0 + 216);
    unint64_t v18 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 208);
    uint64_t *v12 = Strong;
    swift_release_n(v20, 2LL);
    *(_WORD *)(v11 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 192) = sub_10015ADC4(v19, v18, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v62, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease_n(v18, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[%{public}@]<%{public}s> Joining provider.",  (uint8_t *)v11,  0x16u);
    uint64_t v21 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v12, 1LL, v21);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    uint64_t v1 = v0 + 16;
    uint64_t v2 = v0 + 40;
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 224);
    swift_release_n(*(void *)(v0 + 208), 2LL);
    swift_bridgeObjectRelease_n(v17, 2LL);
  }

  uint64_t v22 = *v3 + 16LL;
  swift_beginAccess(v22, v1, 0LL, 0LL);
  uint64_t v23 = swift_unknownObjectWeakLoadStrong(v22);
  if (v23)
  {
    uint64_t v24 = (void *)v23;
    uint64_t v25 = sub_1001B28A4();

    uint64_t v26 = sub_1001B254C();
    uint64_t v27 = swift_release(v25);
    (*(void (**)(uint64_t))((swift_isaMask & *v26) + 0xC0LL))(v27);
  }

  uint64_t v28 = *v3 + 16LL;
  swift_beginAccess(v28, v2, 0LL, 0LL);
  uint64_t v29 = swift_unknownObjectWeakLoadStrong(v28);
  if (v29)
  {
    uint64_t v30 = (void *)v29;
    uint64_t v31 = *(void *)(v29 + OBJC_IVAR___MRDFastSyncGroupSession_provider);
    *(void *)(v0 + 240) = v31;
    swift_retain(v31);

    uint64_t v32 = (void *)swift_task_alloc(async function pointer to GroupSessionProvider.join()[1]);
    *(void *)(v0 + 248) = v32;
    uint64_t v33 = sub_100156B68(&qword_1003F9950);
    uint64_t v34 = sub_1001604E8( &qword_1003F9FA8,  &qword_1003F9950,  (uint64_t)&protocol conformance descriptor for NearbyGroupSessionProvider<A>);
    *uint64_t v32 = v0;
    v32[1] = sub_1001D30A0;
    return GroupSessionProvider.join()(v33, v34);
  }

  else
  {
    uint64_t v36 = v0 + 88;
    uint64_t v37 = *v3 + 16LL;
    swift_beginAccess(v37, v0 + 64, 0LL, 0LL);
    uint64_t v38 = swift_unknownObjectWeakLoadStrong(v37);
    if (v38)
    {
      id v39 = (void *)v38;
      uint64_t v40 = sub_1001B28A4();

      uint64_t v41 = sub_1001B254C();
      uint64_t v42 = swift_release(v40);
      (*(void (**)(uint64_t))((swift_isaMask & *v41) + 0xD0LL))(v42);
    }

    uint64_t v43 = *(void *)(v0 + 224);
    swift_retain_n(*(void *)(v0 + 208), 2LL);
    uint64_t v44 = swift_bridgeObjectRetain_n(v43, 2LL);
    __int128 v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v63 = (uint64_t *)(v0 + 168);
      uint64_t v47 = *v3 + 16LL;
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = v61;
      *(_DWORD *)uint64_t v48 = 138543618;
      swift_beginAccess(v47, v0 + 112, 0LL, 0LL);
      uint64_t v50 = swift_unknownObjectWeakLoadStrong(v47);
      if (v50)
      {
        uint64_t v51 = v0 + 168;
        *uint64_t v63 = v50;
        uint64_t v52 = v0 + 176;
      }

      else
      {
        *(void *)(v0 + 176) = 0LL;
        uint64_t v51 = v0 + 176;
        uint64_t v52 = v0 + 184;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v48 + 4, v48 + 12);
      uint64_t v36 = v0 + 88;
      uint64_t v55 = *(void *)(v0 + 216);
      unint64_t v54 = *(void *)(v0 + 224);
      uint64_t v56 = *(void *)(v0 + 208);
      *uint64_t v49 = v50;
      swift_release_n(v56, 2LL);
      *(_WORD *)(v48 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 160) = sub_10015ADC4(v55, v54, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v63, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease_n(v54, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "[%{public}@]<%{public}s> Joined provider.",  (uint8_t *)v48,  0x16u);
      uint64_t v57 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v49, 1LL, v57);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      uint64_t v53 = *(void *)(v0 + 224);
      swift_release_n(*(void *)(v0 + 208), 2LL);
      swift_bridgeObjectRelease_n(v53, 2LL);
    }

    uint64_t v58 = *v3 + 16LL;
    swift_beginAccess(v58, v36, 0LL, 0LL);
    uint64_t v59 = swift_unknownObjectWeakLoadStrong(v58);
    if (v59)
    {
      uint64_t v60 = (void *)v59;
      sub_1001B6458();
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001D30A0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 248);
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1001D3470;
  }

  else
  {
    swift_release(*(void *)(v2 + 240));
    uint64_t v4 = sub_1001D3158;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001D3158()
{
  uint64_t v1 = v0 + 88;
  uint64_t v2 = *(void *)(v0 + 208) + 16LL;
  swift_beginAccess(v2, v0 + 64, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = sub_1001B28A4();

    uint64_t v6 = sub_1001B254C();
    uint64_t v7 = swift_release(v5);
    (*(void (**)(uint64_t))((swift_isaMask & *v6) + 0xD0LL))(v7);
  }

  uint64_t v8 = *(void *)(v0 + 224);
  swift_retain_n(*(void *)(v0 + 208), 2LL);
  uint64_t v9 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(void *)(v0 + 208) + 16LL;
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v15;
    *(_DWORD *)uint64_t v13 = 138543618;
    swift_beginAccess(v12, v0 + 112, 0LL, 0LL);
    uint64_t v16 = swift_unknownObjectWeakLoadStrong(v12);
    uint64_t v17 = v16;
    if (v16)
    {
      *(void *)(v0 + 168) = v16;
      uint64_t v18 = v0 + 168;
      uint64_t v19 = v0 + 176;
    }

    else
    {
      *(void *)(v0 + 176) = 0LL;
      uint64_t v19 = v0 + 184;
      uint64_t v18 = v0 + 176;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v13 + 4, v13 + 12);
    uint64_t v22 = *(void *)(v0 + 216);
    unint64_t v21 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 208);
    *uint64_t v14 = v17;
    swift_release_n(v23, 2LL);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 160) = sub_10015ADC4(v22, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v21, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%{public}@]<%{public}s> Joined provider.",  (uint8_t *)v13,  0x16u);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v14, 1LL, v24);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    uint64_t v1 = v0 + 88;
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 224);
    swift_release_n(*(void *)(v0 + 208), 2LL);
    swift_bridgeObjectRelease_n(v20, 2LL);
  }

  uint64_t v25 = *(void *)(v0 + 208) + 16LL;
  swift_beginAccess(v25, v1, 0LL, 0LL);
  uint64_t v26 = swift_unknownObjectWeakLoadStrong(v25);
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    sub_1001B6458();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D3470()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001D34D0(os_log_s *a1)
{
  uint64_t v2 = v1;
  v209 = a1;
  uint64_t v194 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v193 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  unint64_t v192 = (char *)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v183 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v202 = type metadata accessor for UUID(0LL);
  uint64_t v196 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  uint64_t v204 = (char *)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v205 = type metadata accessor for Participant(0LL);
  uint64_t v195 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v203 = (char *)&v183 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v210 = sub_100156B68(&qword_1003F9F58);
  uint64_t v7 = *(void *)(v210 - 8);
  uint64_t v8 = __chkstk_darwin(v210);
  char v201 = (uint64_t *)((char *)&v183 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v206 = (char *)&v183 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v183 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v183 - v16;
  __chkstk_darwin(v15);
  uint64_t v208 = (char *)&v183 - v18;
  uint64_t v19 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  uint64_t v25 = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_37:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_4:
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10015ADAC(v27, (uint64_t)qword_1003FF018);
    uint64_t v29 = *(void (**)(char *, os_log_s *, uint64_t))(v7 + 16);
    uint64_t v30 = v17;
    v29(v17, v209, v210);
    v207 = v2;
    uint64_t v197 = v28;
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v207);
    uint64_t v32 = v7;
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v31, v33);
    uint64_t v198 = v25;
    char v200 = (void (*)(char *, char *, uint64_t))v29;
    unint64_t v187 = v14;
    if (v34)
    {
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = (void *)swift_slowAlloc(8LL, -1LL);
      char v185 = v36;
      uint64_t v186 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v186;
      *(_DWORD *)uint64_t v35 = 138543874;
      unint64_t v199 = (void (*)(void, void))v30;
      uint64_t v37 = v207;
      v213 = v207;
      uint64_t v188 = v32;
      uint64_t v38 = v207;
      os_log_t v184 = v31;
      id v39 = v14;
      uint64_t v40 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v35 + 4, v35 + 12);
      *uint64_t v36 = v37;

      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v41 = *(void *)&v40[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v42 = *(void *)&v40[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v213 = (void *)sub_10015ADC4(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v35 + 14, v35 + 22);

      uint64_t v43 = v210;
      uint64_t v25 = v198;
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 22) = 2082;
      uint64_t v44 = v199;
      v29(v39, (os_log_s *)v199, v43);
      uint64_t v45 = String.init<A>(describing:)(v39, v43);
      v213 = (void *)sub_10015ADC4(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v35 + 24, v35 + 32);
      swift_bridgeObjectRelease();
      uint64_t v47 = v188;
      unint64_t v199 = *(void (**)(void, void))(v188 + 8);
      v199(v44, v43);
      os_log_t v48 = v184;
      _os_log_impl( (void *)&_mh_execute_header,  v184,  v33,  "[%{public}@]<%{public}s> GroupSession.State changed: %{public}s.",  (uint8_t *)v35,  0x20u);
      uint64_t v49 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v50 = v185;
      swift_arrayDestroy(v185, 1LL, v49);
      swift_slowDealloc(v50, -1LL, -1LL);
      uint64_t v51 = v186;
      swift_arrayDestroy(v186, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      uint64_t v52 = v35;
      uint64_t v53 = v208;
      swift_slowDealloc(v52, -1LL, -1LL);

      uint64_t v54 = v47;
      uint64_t v56 = v204;
      uint64_t v55 = v205;
      uint64_t v57 = v203;
    }

    else
    {
      uint64_t v69 = v207;

      unint64_t v199 = *(void (**)(void, void))(v32 + 8);
      v199(v17, v210);

      uint64_t v54 = v32;
      uint64_t v56 = v204;
      uint64_t v55 = v205;
      uint64_t v57 = v203;
      uint64_t v53 = v208;
    }

    uint64_t v70 = sub_1001604E8( &qword_1003F9F60,  &qword_1003F9F58,  (uint64_t)&protocol conformance descriptor for GroupSession<A>.State);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v209, v53, v210, v70) & 1) == 0)
    {
      uint64_t v71 = v200;
      v200(v206, v53, v210);
      uint64_t v72 = v207;
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v76 = swift_slowAlloc(8LL, -1LL);
        uint64_t v188 = v54;
        uint64_t v77 = (void *)v76;
        char v185 = (void *)v76;
        uint64_t v186 = swift_slowAlloc(64LL, -1LL);
        aBlock[0] = v186;
        *(_DWORD *)uint64_t v75 = 138543874;
        v213 = v72;
        uint64_t v78 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v75 + 4, v75 + 12);
        *uint64_t v77 = v72;

        *(_WORD *)(v75 + 12) = 2082;
        uint64_t v79 = *(void *)&v78[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v80 = *(void *)&v78[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        v213 = (void *)sub_10015ADC4(v79, v80, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v75 + 14, v75 + 22);

        uint64_t v81 = v210;
        uint64_t v25 = v198;
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 22) = 2082;
        uint64_t v82 = v187;
        uint64_t v83 = v206;
        v71(v187, v206, v81);
        uint64_t v84 = String.init<A>(describing:)(v82, v81);
        v213 = (void *)sub_10015ADC4(v84, v85, aBlock);
        uint64_t v86 = v204;
        uint64_t v55 = v205;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v75 + 24, v75 + 32);
        uint64_t v57 = v203;
        swift_bridgeObjectRelease();
        uint64_t v87 = v81;
        uint64_t v56 = v86;
        v199(v83, v87);
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "[%{public}@]<%{public}s> GroupSession.State change differs from session: %{public}s.",  (uint8_t *)v75,  0x20u);
        uint64_t v88 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v89 = v185;
        swift_arrayDestroy(v185, 1LL, v88);
        uint64_t v54 = v188;
        swift_slowDealloc(v89, -1LL, -1LL);
        uint64_t v90 = v186;
        swift_arrayDestroy(v186, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1LL, -1LL);
        uint64_t v91 = v75;
        uint64_t v53 = v208;
        swift_slowDealloc(v91, -1LL, -1LL);
      }

      else
      {

        v199(v206, v210);
      }
    }

    uint64_t v92 = v201;
    uint64_t v93 = v210;
    v200((char *)v201, (char *)v209, v210);
    int v94 = (*(uint64_t (**)(uint64_t *, uint64_t))(v54 + 88))(v92, v93);
    uint64_t v95 = v202;
    if (v94 == enum case for GroupSession.State.invalidated<A>(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v54 + 96))(v92, v210);
      uint64_t v96 = *v92;
      uint64_t v97 = v207;
      swift_errorRetain(v96);
      uint64_t v98 = v97;
      uint64_t v99 = swift_errorRetain(v96);
      uint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
      os_log_type_t v101 = static os_log_type_t.error.getter();
      v209 = v100;
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = swift_slowAlloc(32LL, -1LL);
        uint64_t v103 = (char *)swift_slowAlloc(8LL, -1LL);
        v207 = v103;
        uint64_t v104 = swift_slowAlloc(64LL, -1LL);
        aBlock[0] = v104;
        *(_DWORD *)uint64_t v102 = 138543874;
        v213 = v98;
        unint64_t v105 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v102 + 4, v102 + 12);
        *(void *)uint64_t v103 = v98;

        *(_WORD *)(v102 + 12) = 2082;
        uint64_t v107 = *(void *)&v105[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v106 = *(void *)&v105[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        v213 = (void *)sub_10015ADC4(v107, v106, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v102 + 14, v102 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v102 + 22) = 2082;
        v213 = (void *)v96;
        swift_errorRetain(v96);
        uint64_t v108 = sub_100156B68(&qword_1003F86D0);
        uint64_t v109 = String.init<A>(describing:)(&v213, v108);
        v213 = (void *)sub_10015ADC4(v109, v110, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v102 + 24, v102 + 32);
        uint64_t v53 = v208;
        swift_bridgeObjectRelease();
        swift_errorRelease(v96);
        swift_errorRelease(v96);
        uint64_t v111 = v209;
        _os_log_impl( (void *)&_mh_execute_header,  v209,  v101,  "[%{public}@]<%{public}s> GroupSession.State invalidated with error: %{public}s.",  (uint8_t *)v102,  0x20u);
        uint64_t v112 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v113 = v207;
        swift_arrayDestroy(v207, 1LL, v112);
        swift_slowDealloc(v113, -1LL, -1LL);
        swift_arrayDestroy(v104, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v104, -1LL, -1LL);
        uint64_t v114 = v102;
        uint64_t v25 = v198;
        swift_slowDealloc(v114, -1LL, -1LL);
      }

      else
      {

        swift_errorRelease(v96);
        swift_errorRelease(v96);
      }

      swift_errorRetain(v96);
      sub_1001CF668(v96);
      swift_release(v25);
      swift_errorRelease(v96);
      swift_errorRelease(v96);
      v199(v53, v210);
      return;
    }

    if (v94 == enum case for GroupSession.State.waiting<A>(_:))
    {
      v199(v53, v210);
      swift_release(v25);
      return;
    }

    if (v94 != enum case for GroupSession.State.joined<A>(_:))
    {
      uint64_t v145 = v210;
      uint64_t v146 = (void (*)(uint64_t *, uint64_t))v199;
      v199(v53, v210);
      swift_release(v25);
      v146(v92, v145);
      return;
    }

    uint64_t v115 = v207;
    uint64_t v116 = *(void **)&v207[OBJC_IVAR___MRDFastSyncGroupSession__state];
    *(void *)&v207[OBJC_IVAR___MRDFastSyncGroupSession__state] = 3LL;
    uint64_t v117 = sub_1001B29A0(v116);
    uint64_t v118 = GroupSession.localParticipant.getter(v117);
    Participant.id.getter(v118);
    uint64_t v119 = v56;
    uint64_t v120 = *(uint64_t (**)(char *, uint64_t))(v195 + 8);
    uint64_t v121 = v120(v57, v55);
    uint64_t v122 = UUID.uuidString.getter(v121);
    uint64_t v124 = v123;
    v209 = *(os_log_s **)(v196 + 8);
    ((void (*)(char *, uint64_t))v209)(v119, v95);
    os_log_type_t v125 = (uint64_t *)&v115[OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier];
    *os_log_type_t v125 = v122;
    v125[1] = v124;
    swift_bridgeObjectRelease();
    uint64_t v126 = sub_1001B28A4();
    v127 = sub_1001B2604();
    uint64_t v128 = swift_release(v126);
    (*(void (**)(uint64_t))((swift_isaMask & *v127) + 0xD0LL))(v128);

    if (v115[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] == 1)
    {
      uint64_t v188 = v54;
      uint64_t v130 = GroupSession.localParticipant.getter(v129);
      Participant.id.getter(v130);
      uint64_t v131 = v120(v57, v205);
      uint64_t v132 = UUID.uuidString.getter(v131);
      uint64_t v134 = v133;
      ((void (*)(char *, uint64_t))v209)(v119, v202);
      os_log_t v135 = v207;
      uint64_t v136 = (uint64_t *)&v207[OBJC_IVAR___MRDFastSyncGroupSession_leaderFastSyncIdentifier];
      *uint64_t v136 = v132;
      v136[1] = v134;
      swift_bridgeObjectRelease();
      uint64_t v137 = (uint64_t *)&v135[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
      uint64_t v138 = *(void *)&v135[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
      if (v138)
      {
        uint64_t v139 = *v137;
        BOOL v140 = (uint64_t *)&v207[OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier];
        uint64_t v141 = *(void *)&v207[OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier];
        uint64_t v142 = *(void *)&v207[OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier + 8];
        unint64_t v143 = &v207[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
        swift_beginAccess( &v207[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  aBlock,  33LL,  0LL);
        swift_bridgeObjectRetain();
        if (v142)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v143);
          v213 = *(void **)v143;
          *(void *)unint64_t v143 = 0x8000000000000000LL;
          sub_1001E3F10(v141, v142, v139, v138, isUniquelyReferenced_nonNull_native);
          *(void *)unint64_t v143 = v213;
        }

        else
        {
          sub_1001E21CC(v139, v138);
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess(aBlock);
        uint64_t v150 = v140[1];
        if (v150)
        {
          uint64_t v151 = *v140;
          uint64_t v152 = OBJC_IVAR___MRDFastSyncGroupSession_localIdentity;
          char v153 = v207;
          uint64_t v154 = *(void **)&v207[OBJC_IVAR___MRDFastSyncGroupSession_localIdentity];
          swift_bridgeObjectRetain();
          id v155 = [v154 identifier];
          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
          uint64_t v158 = v157;

          v159 = &v153[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
          swift_beginAccess(&v153[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], aBlock, 33LL, 0LL);
          char v160 = swift_isUniquelyReferenced_nonNull_native(*(void *)v159);
          v213 = *(void **)v159;
          *(void *)v159 = 0x8000000000000000LL;
          sub_1001E3F10(v156, v158, v151, v150, v160);
          *(void *)v159 = v213;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(aBlock);
          id v161 = [*(id *)&v153[v152] identifier];
          uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
          uint64_t v164 = v163;

          os_log_type_t v165 = *(void **)&v153[v152];
          int v166 = &v153[OBJC_IVAR___MRDFastSyncGroupSession_identities];
          swift_beginAccess(&v153[OBJC_IVAR___MRDFastSyncGroupSession_identities], aBlock, 33LL, 0LL);
          id v167 = v165;
          char v168 = swift_isUniquelyReferenced_nonNull_native(*(void *)v166);
          v213 = *(void **)v166;
          *(void *)int v166 = 0x8000000000000000LL;
          sub_1001E431C((uint64_t)v167, v162, v164, v168, (uint64_t *)&unk_1003F9F68);
          *(void *)int v166 = v213;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(aBlock);
          uint64_t v169 = swift_allocObject(&unk_1003A58F0, 24LL, 7LL);
          *(void *)(v169 + 16) = v153;
          aBlock[4] = (uint64_t)sub_1001ED91C;
          uint64_t v212 = v169;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = (uint64_t)sub_100157EA8;
          aBlock[3] = (uint64_t)&unk_1003A5908;
          v170 = _Block_copy(aBlock);
          v171 = v153;
          unint64_t v172 = v189;
          static DispatchQoS.unspecified.getter(v171);
          v213 = _swiftEmptyArrayStorage;
          uint64_t v173 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v174 = sub_100156B68((uint64_t *)&unk_1003F9A70);
          uint64_t v175 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
          os_log_t v176 = v192;
          uint64_t v177 = v174;
          uint64_t v178 = v194;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v213, v177, v175, v194, v173);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v172, v176, v170);
          _Block_release(v170);
          (*(void (**)(char *, uint64_t))(v193 + 8))(v176, v178);
          (*(void (**)(char *, uint64_t))(v190 + 8))(v172, v191);
          swift_release(v212);
          aBlock[0] = sub_1001B28A4();
          uint64_t v179 = type metadata accessor for JoinTimingEvents();
          sub_1002047D4(v179, (uint64_t)&off_1003A55E0);
          uint64_t v180 = *(void *)&v171[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings];
          *(void *)&v171[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = aBlock[0];
          uint64_t v129 = swift_release(v180);
          uint64_t v53 = v208;
          uint64_t v54 = v188;
LABEL_35:
          uint64_t v181 = v198;
          uint64_t v182 = GroupSession.activeParticipants.getter(v129);
          sub_1001CB3F8(v182);
          swift_bridgeObjectRelease();
          swift_release(v181);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v210);
          return;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      return;
    }

    if (!*(void *)&v207[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8])
    {
      uint64_t v147 = sub_1001B28A4();
      char v148 = sub_1001B2660();
      uint64_t v149 = swift_release(v147);
      (*(void (**)(uint64_t))((swift_isaMask & *v148) + 0xC0LL))(v149);

      sub_1001D6B6C();
    }

    goto LABEL_35;
  }

  uint64_t v25 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v25)
  {
    uint64_t v26 = swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]);
    GroupSession.state.getter(v26);
    if (qword_1003FF010 == -1) {
      goto LABEL_4;
    }
    goto LABEL_37;
  }

  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v58, (uint64_t)qword_1003FF018);
  uint64_t v59 = v2;
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v64;
    *(_DWORD *)uint64_t v62 = 138543618;
    v213 = v59;
    uint64_t v65 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v62 + 4, v62 + 12);
    *uint64_t v63 = v59;

    *(_WORD *)(v62 + 12) = 2082;
    uint64_t v66 = *(void *)&v65[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v67 = *(void *)&v65[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v213 = (void *)sub_10015ADC4(v66, v67, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v62 + 14, v62 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "[%{public}@]<%{public}s> State changed without group session.",  (uint8_t *)v62,  0x16u);
    uint64_t v68 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v63, 1LL, v68);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  else
  {
  }

void sub_1001D48B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68(&qword_1003F9F38);
  uint64_t v67 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for GroupSessionMessenger.DeliveryMode(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  uint64_t v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v66 = v2;
  uint64_t v2 = OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger;
  if (*(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]) {
    return;
  }
  uint64_t v15 = *(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v15)
  {
    uint64_t v16 = qword_1003FF010;
    swift_retain(*(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]);
    if (v16 == -1)
    {
LABEL_5:
      uint64_t v17 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v17, (uint64_t)qword_1003FF018);
      uint64_t v18 = v1;
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.info.getter();
      int v21 = v20;
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v65 = v18;
        uint64_t v23 = v22;
        uint64_t v24 = swift_slowAlloc(8LL, -1LL);
        uint64_t v62 = v2;
        uint64_t v25 = (void *)v24;
        uint64_t v59 = v24;
        uint64_t v63 = swift_slowAlloc(32LL, -1LL);
        v68[0] = v63;
        *(_DWORD *)uint64_t v23 = 138543618;
        int v61 = v21;
        os_log_t v60 = v19;
        uint64_t v69 = (uint64_t)v65;
        uint64_t v58 = v4;
        uint64_t v26 = v65;
        uint64_t v64 = v15;
        uint64_t v27 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 4, v23 + 12);
        *uint64_t v25 = v65;
        uint64_t v2 = v62;

        *(_WORD *)(v23 + 12) = 2082;
        uint64_t v57 = v23 + 14;
        uint64_t v29 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v28 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_10015ADC4(v29, v28, v68);
        uint64_t v4 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v57, v23 + 22);

        uint64_t v15 = v64;
        swift_bridgeObjectRelease();
        os_log_t v30 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  (os_log_type_t)v61,  "[%{public}@]<%{public}s> Configuring messenger.",  (uint8_t *)v23,  0x16u);
        uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v32 = v59;
        swift_arrayDestroy(v59, 1LL, v31);
        swift_slowDealloc(v32, -1LL, -1LL);
        uint64_t v33 = v63;
        swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1LL, -1LL);
        uint64_t v34 = v23;
        uint64_t v18 = v65;
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      else
      {
      }

      (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for GroupSessionMessenger.DeliveryMode.reliable(_:),  v5);
      uint64_t v46 = type metadata accessor for GroupSessionMessenger(0LL);
      swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      uint64_t v47 = swift_retain(v15);
      uint64_t v48 = GroupSessionMessenger.init<A>(session:deliveryMode:)(v47, v8);
      GroupSessionMessenger.receive(_:)();
      uint64_t v49 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v49 + 16, v18);
      uint64_t v50 = swift_allocObject(&unk_1003A57D8, 32LL, 7LL);
      *(void *)(v50 + 16) = sub_1001ED770;
      *(void *)(v50 + 24) = v49;
      uint64_t v51 = sub_1001604E8( &qword_1003F9F40,  &qword_1003F9F38,  (uint64_t)&protocol conformance descriptor for GroupSessionMessenger.MessageStream<A>);
      uint64_t v52 = v66;
      uint64_t v53 = Publisher<>.sink(receiveValue:)(sub_1001ED79C, v50, v66, v51);
      swift_release(v50);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v4, v52);
      uint64_t v54 = &v18[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables];
      swift_beginAccess(&v18[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables], v68, 33LL, 0LL);
      AnyCancellable.store(in:)(v54);
      swift_endAccess(v68);
      swift_release(v53);
      uint64_t v55 = *(void *)&v1[v2];
      *(void *)&v1[v2] = v48;
      swift_release(v15);
      swift_release(v55);
      return;
    }

void sub_1001D4F98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  a4 += 16LL;
  swift_beginAccess(a4, v59, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v17 = (char *)Strong;
    sub_100160874(a1, a2);
    uint64_t v18 = sub_100236AC4(a1, a2);
    if (v18 == 11LL)
    {
      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v21, (uint64_t)qword_1003FF018);
      uint64_t v22 = v17;
      uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc(22LL, -1LL);
        uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v55;
        *(_DWORD *)uint64_t v25 = 138543618;
        uint64_t v58 = v22;
        uint64_t v27 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v25 + 4, v25 + 12);
        *uint64_t v26 = v17;

        *(_WORD *)(v25 + 12) = 2082;
        uint64_t v28 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v29 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v58 = (void *)sub_10015ADC4(v28, v29, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v25 + 14, v25 + 22);

        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%{public}@]<%{public}s> Error decoding message.",  (uint8_t *)v25,  0x16u);
        uint64_t v30 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v26, 1LL, v30);
        swift_slowDealloc(v26, -1LL, -1LL);
        uint64_t v31 = v55;
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v25, -1LL, -1LL);
      }

      else
      {
      }
    }

    else
    {
      uint64_t v32 = v18;
      uint64_t v50 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      uint64_t v48 = v12;
      uint64_t v34 = v19;
      unint64_t v35 = v20;
      v33((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), a3, v13);
      uint64_t v36 = *(unsigned __int8 *)(v14 + 80);
      uint64_t v37 = (v36 + 48) & ~v36;
      uint64_t v38 = swift_allocObject(&unk_1003A5800, v37 + v15, v36 | 7);
      *(void *)(v38 + 16) = v17;
      *(_BYTE *)(v38 + 24) = v32;
      *(void *)(v38 + 32) = v34;
      *(void *)(v38 + 40) = v35;
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))( v38 + v37,  (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v13);
      aBlock[4] = (uint64_t)sub_1001ED7F4;
      uint64_t v57 = v38;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100157EA8;
      aBlock[3] = (uint64_t)&unk_1003A5818;
      uint64_t v39 = _Block_copy(aBlock);
      uint64_t v49 = v17;
      uint64_t v40 = v34;
      uint64_t v41 = sub_1001ED800(v32, v34, v35);
      unint64_t v42 = v48;
      static DispatchQoS.unspecified.getter(v41);
      uint64_t v58 = _swiftEmptyArrayStorage;
      uint64_t v43 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v44 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v45 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v46 = v51;
      uint64_t v47 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v44, v45, v55, v43);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v42, v46, v39);
      _Block_release(v39);
      sub_1001ED81C(v32, v40, v35);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v46, v47);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);

      swift_release(v57);
    }
  }

uint64_t sub_1001D54A4(char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Participant(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v72 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v69 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  if (*(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession__state] == 3LL)
  {
    GroupSessionMessenger.MessageContext.source.getter(v20);
    sub_1001C319C(a2, a3, a4, (uint64_t)v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  else
  {
    uint64_t v61 = v22;
    uint64_t v62 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v63 = v21;
    uint64_t v64 = v20;
    uint64_t v60 = a5;
    int v59 = a2;
    uint64_t v65 = a3;
    unint64_t v66 = a4;
    uint64_t v67 = v17;
    uint64_t v68 = v16;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v24, (uint64_t)qword_1003FF018);
    uint64_t v25 = a1;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      unint64_t v29 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = (uint64_t)v25;
      aBlock[0] = v58;
      *(_DWORD *)uint64_t v28 = 138543618;
      uint64_t v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v28 + 4, v28 + 12);
      *unint64_t v29 = v25;

      *(_WORD *)(v28 + 12) = 2082;
      uint64_t v32 = *(void *)&v30[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v31 = *(void *)&v30[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v73 = sub_10015ADC4(v32, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v28 + 14, v28 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "[%{public}@]<%{public}s> Got message when not joined. Will attempt to correct ordering.",  (uint8_t *)v28,  0x16u);
      uint64_t v33 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v29, 1LL, v33);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v34 = v58;
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v36 = v65;
    unint64_t v35 = v66;
    char v37 = v59;
    uint64_t v38 = v60;
    sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v39 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v41 = v62;
    uint64_t v40 = v63;
    uint64_t v42 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v38, v64);
    uint64_t v43 = *(unsigned __int8 *)(v40 + 80);
    uint64_t v44 = (v43 + 48) & ~v43;
    uint64_t v45 = swift_allocObject(&unk_1003A5850, v44 + v61, v43 | 7);
    *(void *)(v45 + 16) = v25;
    *(_BYTE *)(v45 + 24) = v37;
    *(void *)(v45 + 32) = v36;
    *(void *)(v45 + 40) = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v45 + v44, v41, v42);
    aBlock[4] = (uint64_t)sub_1001ED83C;
    uint64_t v75 = v45;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A5868;
    uint64_t v46 = _Block_copy(aBlock);
    uint64_t v47 = v75;
    uint64_t v48 = v25;
    sub_100160874(v36, v35);
    uint64_t v49 = swift_release(v47);
    uint64_t v50 = v69;
    static DispatchQoS.unspecified.getter(v49);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v51 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v52 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v53 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v54 = v68;
    uint64_t v55 = v52;
    uint64_t v56 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v55, v53, v72, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v50, v54, v46);
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v56);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v50, v67);
  }

uint64_t sub_1001D5A00(char *a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v31 = a4;
  int v30 = a2;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, a5, v13);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 48) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_1003A58A0, v18 + v15, v17 | 7);
  *(void *)(v19 + 16) = a1;
  *(_BYTE *)(v19 + 24) = v30;
  unint64_t v20 = v31;
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = v20;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(v19 + v18, v16, v13);
  aBlock[4] = sub_1001ED8C8;
  uint64_t v39 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A58B8;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = a1;
  uint64_t v23 = sub_100160874(a3, v20);
  static DispatchQoS.unspecified.getter(v23);
  char v37 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v26 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v25, v26, v33, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v21);
  _Block_release(v21);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v9, v27);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v12, v35);
  return swift_release(v39);
}

uint64_t sub_1001D5C94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = type metadata accessor for Participant(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  GroupSessionMessenger.MessageContext.source.getter(v9);
  sub_1001C319C(a2, a3, a4, (uint64_t)v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_1001D5D44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Participants(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_4;
  }

  if (v1[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1) {
    return;
  }
  if (qword_1003FF010 != -1) {
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v13, (uint64_t)qword_1003FF018);
  uint64_t v14 = v1;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(8LL, -1LL);
    uint64_t v54 = v3;
    uint64_t v19 = (void *)v18;
    uint64_t v51 = v18;
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = (uint64_t)v14;
    uint64_t v57 = v52;
    *(_DWORD *)uint64_t v17 = 138543618;
    uint64_t v53 = v5;
    unint64_t v20 = v14;
    uint64_t v55 = v2;
    uint64_t v21 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v17 + 4, v17 + 12);
    *uint64_t v19 = v14;

    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v23 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v22 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v24 = v23;
    uint64_t v5 = v53;
    uint64_t v56 = sub_10015ADC4(v24, v22, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v17 + 14, v17 + 22);

    uint64_t v2 = v55;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%{public}@]<%{public}s> Broadcast leader discovery.",  (uint8_t *)v17,  0x16u);
    uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v26 = v51;
    swift_arrayDestroy(v51, 1LL, v25);
    uint64_t v3 = v54;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v52;
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
  }

  if (*(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession__state] == 3LL)
  {
    uint64_t v28 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v28)
    {
      swift_retain(*(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]);
      v29._countAndFlagsBits = 0LL;
      v29._object = (void *)0xC000000000000000LL;
      ActivityController.endRouteRecommendationActivity(for:)(v29);
      uint64_t v31 = v30;
      unint64_t v33 = v32;
      id v34 = sub_100237494(v30, v32);
      sub_1001608B8(v31, v33);
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Participants.all(_:), v2);
      id v35 = v34;
      sub_1001D73BC(0, v34, (uint64_t)v5, v28, 0LL, 0LL);
      swift_release(v28);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return;
    }

    uint64_t v36 = v14;
    char v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = (uint64_t)v36;
      uint64_t v57 = v41;
      *(_DWORD *)uint64_t v39 = 138543618;
      uint64_t v46 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 4, v39 + 12);
      *uint64_t v40 = v36;

      *(_WORD *)(v39 + 12) = 2082;
      uint64_t v47 = *(void *)&v46[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v48 = *(void *)&v46[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_10015ADC4(v47, v48, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 14, v39 + 22);

      swift_bridgeObjectRelease();
      uint64_t v45 = "[%{public}@]<%{public}s> No messenger to send leader message.";
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v36 = v14;
    char v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = (uint64_t)v36;
      uint64_t v57 = v41;
      *(_DWORD *)uint64_t v39 = 138543618;
      uint64_t v42 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 4, v39 + 12);
      *uint64_t v40 = v36;

      *(_WORD *)(v39 + 12) = 2082;
      uint64_t v43 = *(void *)&v42[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v44 = *(void *)&v42[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_10015ADC4(v43, v44, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 14, v39 + 22);

      swift_bridgeObjectRelease();
      uint64_t v45 = "[%{public}@]<%{public}s> Drop leader message because we are not joined.";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v37, v38, v45, (uint8_t *)v39, 0x16u);
      uint64_t v49 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v40, 1LL, v49);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      return;
    }
  }
}

void sub_1001D63F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Participants(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (uint64_t **)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v12 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *id v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_6:
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v17, (uint64_t)qword_1003FF018);
    uint64_t v18 = v2;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      unint64_t v22 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = (uint64_t)v18;
      uint64_t v68 = v23;
      *(_DWORD *)uint64_t v21 = 138412546;
      uint64_t v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v21 + 4, v21 + 12);
      *unint64_t v22 = v18;

      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v25 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v26 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_10015ADC4(v25, v26, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v21 + 14, v21 + 22);

      swift_bridgeObjectRelease();
      uint64_t v27 = "[%@]<%{public}s> Skip identity share because we are entering low power.";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v27, (uint8_t *)v21, 0x16u);
      uint64_t v57 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v22, 1LL, v57);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      return;
    }

void sub_1001D6B6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68(&qword_1003F9F28);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v11 = (char *)&v52 - v10;
  char v12 = (char *)OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer;
  if (!*(void *)&v0[OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer])
  {
    uint64_t v13 = sub_1001B2928();
    uint64_t v14 = sub_1001B27AC();
    uint64_t v15 = swift_release(v13);
    (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0x68LL))(v15);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_1001603DC((uint64_t)v4, &qword_1003F9F28);
    }

    else
    {
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v16(v11, v4, v5);
      uint64_t v17 = sub_1001B28A4();
      swift_beginAccess(v17 + 16, v56, 0LL, 0LL);
      int v18 = *(unsigned __int8 *)(v17 + 16);
      swift_release(v17);
      if (v18 == 1)
      {
        uint64_t v55 = (char *)kMREventGroupSessionLeaderLost;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
        uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
        os_log_type_t v20 = v12;
        uint64_t v21 = (v19 + 16) & ~v19;
        uint64_t v22 = swift_allocObject(&unk_1003A5760, v21 + v7, v19 | 7);
        uint64_t v23 = v22 + v21;
        char v12 = v20;
        v16((char *)v23, v9, v5);
        id v62 = sub_1001ED6C0;
        uint64_t v63 = v22;
        aBlock = _NSConcreteStackBlock;
        uint64_t v59 = 1107296256LL;
        os_log_t v60 = sub_100169A74;
        uint64_t v61 = &unk_1003A5778;
        uint64_t v24 = _Block_copy(&aBlock);
        uint64_t v25 = v63;
        unint64_t v26 = v55;
        swift_release(v25);
        MRAnalyticsSendEvent(v26, 0LL, v24);
        _Block_release(v24);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }

    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v27, (uint64_t)qword_1003FF018);
    uint64_t v28 = v1;
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v53 = v32;
      uint64_t v54 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v57 = (uint64_t)v28;
      aBlock = v54;
      *(_DWORD *)uint64_t v31 = 138412546;
      uint64_t v55 = v12;
      uint64_t v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &aBlock, v31 + 4, v31 + 12);
      *uint64_t v32 = v28;

      *(_WORD *)(v31 + 12) = 2082;
      uint64_t v35 = *(void *)&v33[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v34 = *(void *)&v33[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_10015ADC4(v35, v34, (uint64_t *)&aBlock);
      char v12 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &aBlock, v31 + 14, v31 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "[%@]<%{public}s> Start leader discovery timer.",  (uint8_t *)v31,  0x16u);
      uint64_t v36 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v37 = v53;
      swift_arrayDestroy(v53, 1LL, v36);
      swift_slowDealloc(v37, -1LL, -1LL);
      os_log_type_t v38 = v54;
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
    }

    id v39 = [(id)objc_opt_self(MRUserSettings) currentSettings];
    if (v39)
    {
      os_log_type_t v40 = v39;
      [v39 groupSessionLeaderDiscoveryInterval];
      double v42 = v41;

      uint64_t v43 = *(void **)&v28[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
      uint64_t v44 = swift_allocObject(&unk_1003A5710, 24LL, 7LL);
      *(void *)(v44 + 16) = v28;
      id v45 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
      id v62 = sub_1001ED3A4;
      uint64_t v63 = v44;
      aBlock = _NSConcreteStackBlock;
      uint64_t v59 = 1107296256LL;
      os_log_t v60 = sub_100157EA8;
      uint64_t v61 = &unk_1003A5728;
      uint64_t v46 = _Block_copy(&aBlock);
      uint64_t v47 = v63;
      os_log_t v48 = v28;
      id v49 = v43;
      swift_release(v47);
      id v50 = [v45 initWithInterval:0 repeats:v49 queue:v46 block:v42];

      _Block_release(v46);
      uint64_t v51 = *(void **)&v12[(void)v1];
      *(void *)&v12[(void)v1] = v50;
    }

    else
    {
      __break(1u);
    }
  }

void sub_1001D712C()
{
  uint64_t v1 = OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer];
  if (v2)
  {
    [v2 invalidate];
    uint64_t v3 = *(void **)&v0[v1];
    *(void *)&v0[v1] = 0LL;

    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    uint64_t v14 = v0;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v8 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v16 = v9;
      *(_DWORD *)uint64_t v7 = 138412546;
      uint64_t v15 = (uint64_t)v14;
      uint64_t v10 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
      *uint64_t v8 = v14;

      *(_WORD *)(v7 + 12) = 2082;
      uint64_t v11 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v12 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_10015ADC4(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[%@]<%{public}s> Stop leader discovery timer.",  (uint8_t *)v7,  0x16u);
      uint64_t v13 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v8, 1LL, v13);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1001D73BC(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = a5;
  uint64_t v101 = a6;
  id v109 = a2;
  uint64_t v110 = a3;
  unsigned int v106 = a1;
  uint64_t v8 = type metadata accessor for Participants(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v94 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v111 = (char *)&v86 - v12;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v107 = *(void *)(v13 - 8);
  uint64_t v108 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  os_log_type_t v20 = *(void **)&v6[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v19 = v20;
  uint64_t v21 = *(void (**)(void *))(v17 + 104);
  unsigned int v104 = enum case for DispatchPredicate.onQueue(_:);
  v21(v19);
  id v102 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  uint64_t v103 = *(void (**)(void *, uint64_t))(v17 + 8);
  v103(v19, v16);
  if ((v20 & 1) != 0)
  {
    uint64_t v96 = v19;
    uint64_t v98 = (void (*)(void *, void, uint64_t))v21;
    uint64_t v99 = a4;
    unint64_t v105 = v15;
    if (qword_1003FF010 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_3:
  uint64_t v22 = v108;
  uint64_t v23 = sub_10015ADAC(v108, (uint64_t)qword_1003FF018);
  uint64_t v24 = v107;
  uint64_t v25 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v105, v23, v22);
  uint64_t v26 = v110;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v92(v111, v110, v8);
  id v27 = v109;
  id v28 = v109;
  uint64_t v29 = v6;
  id v30 = v28;
  uint64_t v97 = v9;
  id v31 = v30;
  uint64_t v32 = v29;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  int v93 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v33, (os_log_type_t)v93);
  uint64_t v95 = v32;
  if (v34)
  {
    os_log_t v91 = v33;
    id v87 = v31;
    uint64_t v88 = v16;
    uint64_t v35 = swift_slowAlloc(52LL, -1LL);
    uint64_t v36 = (char **)swift_slowAlloc(16LL, -1LL);
    uint64_t v37 = swift_slowAlloc(96LL, -1LL);
    uint64_t v112 = (uint64_t)v32;
    uint64_t v113 = v37;
    *(_DWORD *)uint64_t v35 = 138413314;
    unsigned __int8 v38 = v106;
    id v39 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 4, v35 + 12);
    uint64_t v89 = v36;
    *uint64_t v36 = v32;

    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v40 = *(void *)&v39[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v41 = *(void *)&v39[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v112 = sub_10015ADC4(v40, v41, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 14, v35 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 22) = 2080;
    uint64_t v42 = sub_100236970(v38);
    uint64_t v112 = sub_10015ADC4(v42, v43, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 24, v35 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 32) = 2080;
    uint64_t v44 = (uint64_t *)v94;
    v92(v94, (uint64_t)v111, v8);
    uint64_t v45 = v97;
    int v46 = (*(uint64_t (**)(uint64_t *, uint64_t))(v97 + 88))(v44, v8);
    uint64_t v90 = v37;
    if (v46 == enum case for Participants.only(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v44, v8);
      uint64_t v47 = *v44;
      uint64_t v48 = type metadata accessor for Participant(0LL);
      uint64_t v49 = sub_100156FEC( &qword_1003F9A88,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
      uint64_t v50 = Set.description.getter(v47, v48, v49);
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v16 = v88;
      uint64_t v53 = v105;
    }

    else
    {
      uint64_t v53 = v105;
      if (v46 == enum case for Participants.all(_:))
      {
        unint64_t v52 = 0xE300000000000000LL;
        uint64_t v50 = 7105633LL;
      }

      else
      {
        (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v44, v8);
        unint64_t v52 = 0xE700000000000000LL;
        uint64_t v50 = 0x6E776F6E6B6E75LL;
      }

      uint64_t v16 = v88;
    }

    uint64_t v112 = sub_10015ADC4(v50, v52, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 34, v35 + 42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v111, v8);
    *(_WORD *)(v35 + 42) = 2112;
    unint64_t v56 = (char *)v109;
    if (v109)
    {
      id v31 = v87;
      uint64_t v112 = (uint64_t)v87;
      id v57 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 44, v35 + 52);
    }

    else
    {
      uint64_t v112 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 44, v35 + 52);
      id v31 = v87;
    }

    id v58 = v89;
    v89[1] = v56;

    os_log_t v59 = v91;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v93,  "[%@]<%{public}s> Sending message type: %s to: %s with payload: %@",  (uint8_t *)v35,  0x34u);
    uint64_t v60 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v58, 2LL, v60);
    swift_slowDealloc(v58, -1LL, -1LL);
    uint64_t v61 = v90;
    swift_arrayDestroy(v90, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v107 + 8))(v53, v108);
    uint64_t v55 = v110;
    if (!v56) {
      goto LABEL_18;
    }
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v97 + 8))(v111, v8);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v22);
    uint64_t v55 = v26;
    if (!v27) {
      goto LABEL_18;
    }
  }

  id v62 = [v31 data];
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
    unint64_t v66 = v65;

    goto LABEL_19;
  }

void sub_1001D7B78(uint64_t a1, void *a2, void (*a3)(uint64_t), uint64_t a4)
{
  if (!a1)
  {
LABEL_6:
    if (!a3) {
      return;
    }
    goto LABEL_7;
  }

  swift_errorRetain(a1);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v8, (uint64_t)qword_1003FF018);
  id v9 = a2;
  swift_errorRetain(a1);
  id v10 = v9;
  swift_errorRetain(a1);
  id v11 = v10;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = (uint64_t)v11;
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v14 = 138412802;
    log = v12;
    uint64_t v16 = (char *)v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4, v14 + 12);
    *uint64_t v15 = v11;

    *(_WORD *)(v14 + 12) = 2082;
    uint64_t v17 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v18 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_10015ADC4(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14, v14 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2112;
    swift_errorRetain(a1);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v23 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 24, v14 + 32);
    v15[1] = v19;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v13,  "[%@]<%{public}s> Message send error %@.",  (uint8_t *)v14,  0x20u);
    uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v15, 2LL, v20);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    swift_errorRelease(a1);
    goto LABEL_6;
  }

  swift_errorRelease(a1);

  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (!a3) {
    return;
  }
LABEL_7:
  swift_retain(a4);
  a3(a1);
  sub_100162944((uint64_t)a3, a4);
}

void sub_1001D7E84(os_log_s *a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  v128[1] = a5;
  uint64_t v129 = a4;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  id v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (void *)((char *)v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *os_log_type_t v13 = v14;
  (*((void (**)(void *, void, uint64_t))v11 + 13))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*((void (**)(void *, uint64_t))v11 + 1))(v13, v10);
  if ((v14 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_9:
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v46, (uint64_t)qword_1003FF018);
    uint64_t v47 = v11;
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      unint64_t v51 = (char **)swift_slowAlloc(8LL, -1LL);
      char v148 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
      uint64_t v149 = (uint64_t)v47;
      v153[0] = (uint64_t)v148;
      *(_DWORD *)uint64_t v50 = 138412546;
      unint64_t v52 = a1;
      uint64_t v53 = v47;
      unint64_t v146 = v6;
      uint64_t v54 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v50 + 4, v50 + 12);
      void *v51 = v47;

      *(_WORD *)(v50 + 12) = 2082;
      uint64_t v55 = *(void *)&v54[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v56 = *(void *)&v54[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v57 = v55;
      a1 = v52;
      uint64_t v149 = sub_10015ADC4(v57, v56, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v50 + 14, v50 + 22);

      unint64_t v6 = v146;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "[%@]<%{public}s> Cannot send message before identity exchange.",  (uint8_t *)v50,  0x16u);
      uint64_t v58 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v51, 1LL, v58);
      swift_slowDealloc(v51, -1LL, -1LL);
      uint64_t v59 = (uint64_t)v148;
      swift_arrayDestroy(v148, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v60 = v129;
    unint64_t v61 = sub_1001E8078();
    uint64_t v62 = swift_allocError(&type metadata for FastSyncSessionError, v61, 0LL, 0LL);
    *uint64_t v63 = 3LL;
    v60();
    swift_errorRelease(v62);
LABEL_45:
    sub_1001608B8((uint64_t)a1, v6);
    return;
  }

  sub_100160874((uint64_t)a1, a2);
  os_log_t v144 = a1;
  int v135 = MRDFastSyncGroupSessionState.rawValue.getter(5LL, a1, a2, v16);
  a1 = v17;
  unint64_t v6 = v18;
  id v11 = v5;
  if (!*(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipantIdentifier + 8])
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }

  unint64_t v142 = a2;
  swift_beginAccess( &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  v153,  0LL,  0LL);
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  unint64_t v20 = 0LL;
  uint64_t v21 = sub_1001ED00C(v19, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = &off_1003F9000;
  uint64_t v24 = "@36@0:8@16B24@?28" + 17;
  BOOL v25 = *(void *)(v21 + 16) == *(void *)(a3 + 16);
  uint64_t v134 = v21;
  uint64_t v133 = v5;
  if (!v25)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v26, (uint64_t)qword_1003FF018);
    id v27 = v5;
    swift_bridgeObjectRetain_n(a3, 2LL);
    swift_retain_n(v21, 2LL);
    id v28 = v27;
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc(42LL, -1LL);
      LODWORD(v145) = v31;
      uint64_t v33 = v32;
      BOOL v34 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v143 = (uint64_t)v34;
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      unint64_t v146 = v35;
      *(_DWORD *)uint64_t v33 = 138413058;
      char v148 = a1;
      uint64_t v149 = v35;
      uint64_t v151 = (uint64_t)v28;
      uint64_t v36 = v28;
      unint64_t v147 = 0LL;
      unint64_t v37 = v6;
      unsigned __int8 v38 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v33 + 4, v33 + 12);
      *BOOL v34 = v28;

      *(_WORD *)(v33 + 12) = 2082;
      uint64_t v39 = *(void *)&v38[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v40 = *(void *)&v38[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v151 = sub_10015ADC4(v39, v40, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v33 + 14, v33 + 22);

      unint64_t v6 = v37;
      unint64_t v20 = v147;
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 22) = 2048;
      uint64_t v41 = *(void *)(a3 + 16);
      swift_bridgeObjectRelease();
      uint64_t v151 = v41;
      uint64_t v21 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v33 + 24, v33 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 32) = 2048;
      a1 = v148;
      uint64_t v42 = *(void *)(v21 + 16);
      swift_release(v21);
      uint64_t v151 = v42;
      id v11 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v33 + 34, v33 + 42);
      swift_release(v21);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v145,  "[%@]<%{public}s> Not all participant identifiers mapped to send message. Provided: %ld, Mapped: %ld.",  (uint8_t *)v33,  0x2Au);
      uint64_t v43 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v44 = v143;
      swift_arrayDestroy(v143, 1LL, v43);
      swift_slowDealloc(v44, -1LL, -1LL);
      unint64_t v45 = v146;
      swift_arrayDestroy(v146, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      uint64_t v23 = &off_1003F9000;
      uint64_t v24 = "@36@0:8@16B24@?28" + 17;
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_release_n(v21, 2LL);
      uint64_t v24 = "";
      uint64_t v23 = &off_1003F9000;
    }
  }

  unint64_t v64 = 0LL;
  uint64_t v65 = *(void *)(v21 + 64);
  uint64_t v136 = v21 + 64;
  uint64_t v66 = 1LL << *(_BYTE *)(v21 + 32);
  uint64_t v67 = -1LL;
  if (v66 < 64) {
    uint64_t v67 = ~(-1LL << v66);
  }
  unint64_t v68 = v67 & v65;
  uint64_t v132 = (uint64_t *)((char *)v23[297] + (void)v11);
  uint64_t v143 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
  int64_t v137 = (unint64_t)(v66 + 63) >> 6;
  *(void *)&__int128 v22 = *((void *)v24 + 204);
  __int128 v131 = v22;
  uint64_t v130 = (char *)&type metadata for Any + 8;
  if (!v68) {
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v145 = (v68 - 1) & v68;
  unint64_t v146 = v64;
  for (unint64_t i = __clz(__rbit64(v68)) | (v64 << 6); ; unint64_t i = __clz(__rbit64(v72)) + (v71 << 6))
  {
    uint64_t v74 = 16 * i;
    uint64_t v75 = *(void *)(v21 + 56);
    unint64_t v76 = (uint64_t *)(*(void *)(v21 + 48) + v74);
    unint64_t v77 = v76[1];
    char v148 = (os_log_s *)*v76;
    id v78 = (uint64_t *)(v75 + v74);
    uint64_t v79 = v78[1];
    uint64_t v140 = *v78;
    uint64_t v80 = qword_1003FF010;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v80 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v81 = type metadata accessor for Logger(0LL);
    uint64_t v82 = sub_10015ADAC(v81, (uint64_t)qword_1003FF018);
    uint64_t v83 = v11;
    swift_bridgeObjectRetain();
    sub_100160874((uint64_t)a1, v6);
    uint64_t v84 = v83;
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_100160874((uint64_t)a1, v6);
    uint64_t v141 = v82;
    uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    os_log_type_t v87 = static os_log_type_t.info.getter();
    BOOL v88 = os_log_type_enabled(v86, v87);
    unint64_t v147 = v79;
    if (v88)
    {
      uint64_t v89 = swift_slowAlloc(42LL, -1LL);
      uint64_t v90 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v138 = v90;
      uint64_t v139 = swift_slowAlloc(96LL, -1LL);
      uint64_t v151 = v139;
      *(_DWORD *)uint64_t v89 = v131;
      *(void *)(v89 + 4) = v84;
      *uint64_t v90 = v11;

      *(_WORD *)(v89 + 12) = 2082;
      unint64_t v91 = v20;
      unint64_t v92 = v6;
      uint64_t v93 = (uint64_t)a1;
      uint64_t v95 = *v132;
      unint64_t v94 = v132[1];
      swift_bridgeObjectRetain();
      uint64_t v96 = v95;
      unint64_t v6 = v92;
      unint64_t v20 = v91;
      *(void *)(v89 + 14) = sub_10015ADC4(v96, v94, &v151);

      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 22) = 2080;
      LOBYTE(v149) = v135;
      v150[0] = v93;
      v150[1] = v6;
      sub_100160874(v93, v6);
      uint64_t v97 = String.init<A>(describing:)(&v149, &type metadata for FastSyncMessage);
      *(void *)(v89 + 24) = sub_10015ADC4(v97, v98, &v151);
      a1 = (os_log_s *)v93;
      id v11 = v133;
      swift_bridgeObjectRelease();
      sub_1001608B8((uint64_t)a1, v6);
      sub_1001608B8((uint64_t)a1, v6);
      *(_WORD *)(v89 + 32) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v89 + 34) = sub_10015ADC4((uint64_t)v148, v77, &v151);
      swift_bridgeObjectRelease_n(v77, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "[%@]<%{public}s> Enqueue message %s for handle: %s.",  (uint8_t *)v89,  0x2Au);
      uint64_t v99 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v100 = v138;
      swift_arrayDestroy(v138, 1LL, v99);
      swift_slowDealloc(v100, -1LL, -1LL);
      uint64_t v101 = v139;
      swift_arrayDestroy(v139, 3LL, v130);
      swift_slowDealloc(v101, -1LL, -1LL);
      uint64_t v102 = v89;
      uint64_t v21 = v134;
      swift_slowDealloc(v102, -1LL, -1LL);
    }

    else
    {

      sub_1001608B8((uint64_t)a1, v6);
      sub_1001608B8((uint64_t)a1, v6);

      swift_bridgeObjectRelease_n(v77, 2LL);
    }

    uint64_t v103 = *(void *)&v11[v143];
    if (!v103)
    {
      __break(1u);
      return;
    }

    unsigned int v104 = *(void (**)(os_log_t, unint64_t, os_log_s *, unint64_t))(*(void *)v103 + 440LL);
    swift_retain(*(void *)&v11[v143]);
    v104(v144, v142, v148, v77);
    if (v20) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v103);
    unint64_t v68 = v145;
    unint64_t v64 = v146;
    if (v145) {
      goto LABEL_17;
    }
LABEL_18:
    BOOL v70 = __OFADD__(v64, 1LL);
    int64_t v71 = v64 + 1;
    if (v70)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if (v71 >= v137) {
      goto LABEL_44;
    }
    unint64_t v72 = *(void *)(v136 + 8 * v71);
    if (!v72)
    {
      int64_t v73 = v71 + 1;
      if (v71 + 1 >= v137) {
        goto LABEL_44;
      }
      unint64_t v72 = *(void *)(v136 + 8 * v73);
      if (!v72)
      {
        int64_t v73 = v71 + 2;
        if (v71 + 2 >= v137) {
          goto LABEL_44;
        }
        unint64_t v72 = *(void *)(v136 + 8 * v73);
        if (!v72)
        {
          int64_t v73 = v71 + 3;
          if (v71 + 3 >= v137)
          {
LABEL_44:
            swift_release(v21);
            goto LABEL_45;
          }

          unint64_t v72 = *(void *)(v136 + 8 * v73);
          if (!v72)
          {
            while (1)
            {
              int64_t v71 = v73 + 1;
              if (__OFADD__(v73, 1LL)) {
                goto LABEL_49;
              }
              if (v71 >= v137) {
                goto LABEL_44;
              }
              unint64_t v72 = *(void *)(v136 + 8 * v71);
              ++v73;
              if (v72) {
                goto LABEL_28;
              }
            }
          }
        }
      }

      int64_t v71 = v73;
    }

void sub_1001D8D30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v236 = a4;
  uint64_t v233 = a1;
  v232 = (os_log_s *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v230 = *((void *)v232 - 1);
  __chkstk_darwin(v232);
  uint64_t v229 = (void **)((char *)&v226 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v231 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v228 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v227 = (char *)&v226 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100156B68(&qword_1003F9A90);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v226 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.Encoding(0LL);
  v234 = *(void ***)(v13 - 8);
  v235 = (void **)v13;
  __chkstk_darwin(v13);
  id v15 = (char *)&v226 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v226 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v20 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  uint64_t v22 = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    static String.Encoding.utf8.getter(v22);
    uint64_t v23 = String.init(data:encoding:)(a2, a3, v15);
    BOOL v25 = (void *)v236;
    if (v24)
    {
      uint64_t v26 = v23;
      uint64_t v27 = v24;
      id v28 = sub_100236904();
      uint64_t v29 = v28[1];
      if (v26 == *v28 && v27 == v29)
      {
        uint64_t v23 = swift_bridgeObjectRelease();
        goto LABEL_7;
      }

      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, *v28, v29, 0LL);
      uint64_t v23 = swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
      {
LABEL_7:
        unsigned __int8 v31 = (*(uint64_t (**)(uint64_t))(*v25 + 168LL))(v23);
        if ((sub_10023E6D4(v31, 0) & 1) == 0)
        {
          uint64_t v46 = v25[2];
          uint64_t v47 = v25[3];
          swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_expectedRealtimeParticipants], &aBlock, 33LL, 0LL);
          swift_bridgeObjectRetain();
          sub_10015B404((uint64_t *)&v244, v46, v47);
          swift_endAccess(&aBlock);
          swift_bridgeObjectRelease();
          return;
        }

        uint64_t v32 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_provider];
        uint64_t v33 = swift_retain(v32);
        uint64_t v34 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v33);
        uint64_t v35 = swift_release(v32);
        uint64_t v36 = NearbyGroup.members.getter(v35);
        swift_release(v34);
        swift_retain(v25);
        sub_1001B95E0( v36,  (uint64_t)v25,  (uint64_t (*)(void))&type metadata accessor for NearbyGroup.Member,  (uint64_t (*)(uint64_t))&NearbyGroup.Member.handle.getter,  v12);
        swift_bridgeObjectRelease();
        uint64_t v37 = type metadata accessor for NearbyGroup.Member(0LL);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v12, 1LL, v37);
        if ((_DWORD)v39 == 1)
        {
          sub_1001603DC((uint64_t)v12, &qword_1003F9A90);
        }

        else
        {
          v232 = (os_log_s *)NearbyGroup.Member.tokenDestination.getter(v39);
          uint64_t v117 = v12;
          uint64_t v119 = v118;
          (*(void (**)(char *, uint64_t))(v38 + 8))(v117, v37);
          if (v119) {
            goto LABEL_40;
          }
        }

        uint64_t v119 = v25[3];
        v232 = (os_log_s *)v25[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_40:
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        uint64_t v120 = type metadata accessor for Logger(0LL);
        sub_10015ADAC(v120, (uint64_t)qword_1003FF018);
        uint64_t v121 = v5;
        swift_retain_n(v25, 2LL);
        uint64_t v122 = v121;
        swift_bridgeObjectRetain_n(v119, 2LL);
        uint64_t v123 = v122;
        uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
        os_log_type_t v125 = static os_log_type_t.info.getter();
        int v126 = v125;
        BOOL v127 = os_log_type_enabled(v124, v125);
        uint64_t v128 = &off_1003F9000;
        uint64_t v230 = 0LL;
        uint64_t v231 = v119;
        if (v127)
        {
          uint64_t v129 = swift_slowAlloc(42LL, -1LL);
          uint64_t v130 = (char *)swift_slowAlloc(8LL, -1LL);
          v227 = v130;
          uint64_t v229 = (void **)swift_slowAlloc(96LL, -1LL);
          aBlock = v229;
          *(_DWORD *)uint64_t v129 = 138413058;
          LODWORD(v228) = v126;
          uint64_t v244 = v123;
          __int128 v131 = v123;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v129 + 4, v129 + 12);
          *(void *)uint64_t v130 = v123;

          *(_WORD *)(v129 + 12) = 2082;
          uint64_t v132 = v123;
          uint64_t v134 = *(void *)&v131[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
          unint64_t v133 = *(void *)&v131[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
          swift_bridgeObjectRetain();
          uint64_t v244 = (void *)sub_10015ADC4(v134, v133, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v129 + 14, v129 + 22);

          unint64_t v135 = v231;
          swift_bridgeObjectRelease();
          *(_WORD *)(v129 + 22) = 2080;
          uint64_t v136 = *(void *)(v236 + 16);
          unint64_t v137 = *(void *)(v236 + 24);
          swift_bridgeObjectRetain();
          uint64_t v138 = v136;
          uint64_t v123 = v132;
          uint64_t v244 = (void *)sub_10015ADC4(v138, v137, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v129 + 24, v129 + 32);
          swift_release_n(v236, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v129 + 32) = 2080;
          BOOL v25 = (void *)v236;
          swift_bridgeObjectRetain();
          uint64_t v244 = (void *)sub_10015ADC4((uint64_t)v232, v135, (uint64_t *)&aBlock);
          uint64_t v128 = &off_1003F9000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v129 + 34, v129 + 42);
          swift_bridgeObjectRelease_n(v135, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v228,  "[%@]<%{public}s> Send transportMigrationReply push to: %s, dst: %s.",  (uint8_t *)v129,  0x2Au);
          uint64_t v139 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
          uint64_t v140 = v227;
          swift_arrayDestroy(v227, 1LL, v139);
          swift_slowDealloc(v140, -1LL, -1LL);
          uint64_t v141 = v229;
          swift_arrayDestroy(v229, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v141, -1LL, -1LL);
          swift_slowDealloc(v129, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v119, 2LL);
          swift_release_n(v25, 2LL);
        }

        unint64_t v142 = *(void **)&v123[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
        if (v142)
        {
          uint64_t v236 = (uint64_t)v123;
          uint64_t v143 = sub_100156B68((uint64_t *)&unk_1003F9AA0);
          uint64_t inited = swift_initStackObject(v143, &v238);
          *(_OWORD *)(inited + 16) = xmmword_10034C930;
          uint64_t v229 = v142;
          uint64_t v145 = sub_1002368B0();
          unint64_t v147 = *(void ***)v145;
          uint64_t v146 = *((void *)v145 + 1);
          aBlock = v147;
          uint64_t v247 = v146;
          uint64_t v228 = v146;
          swift_bridgeObjectRetain_n(v146, 2LL);
          AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
          char v148 = (uint64_t *)sub_100236910();
          uint64_t v150 = *v148;
          uint64_t v149 = v148[1];
          *(void *)(inited + 96) = &type metadata for String;
          *(void *)(inited + 72) = v150;
          *(void *)(inited + 80) = v149;
          swift_bridgeObjectRetain();
          uint64_t v151 = sub_1002368C8();
          char v153 = *(void ***)v151;
          uint64_t v152 = (char *)*((void *)v151 + 1);
          aBlock = v153;
          uint64_t v247 = (uint64_t)v152;
          v227 = v152;
          swift_bridgeObjectRetain_n(v152, 2LL);
          AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
          uint64_t v154 = *v148;
          uint64_t v155 = v148[1];
          uint64_t v156 = swift_bridgeObjectRetain();
          static String.Encoding.utf8.getter(v156);
          uint64_t v157 = String.data(using:allowLossyConversion:)(v15, 0LL, v154, v155);
          unint64_t v159 = v158;
          swift_bridgeObjectRelease();
          ((void (*)(char *, void **))v234[1])(v15, v235);
          if (v159 >> 60 != 15)
          {
            *(void *)(inited + 168) = &type metadata for Data;
            *(void *)(inited + 144) = v157;
            *(void *)(inited + 152) = v159;
            char v160 = sub_1002368D4();
            uint64_t v161 = *((void *)v160 + 1);
            aBlock = *(void ***)v160;
            uint64_t v247 = v161;
            swift_bridgeObjectRetain_n(v161, 2LL);
            uint64_t v162 = AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
            uint64_t v163 = (*(uint64_t (**)(uint64_t))(*v25 + 216LL))(v162);
            *(void *)(inited + 240) = &type metadata for Int;
            *(void *)(inited + 216) = v163;
            uint64_t v164 = (void ***)sub_1002368E0();
            os_log_type_t v165 = v25;
            uint64_t v166 = (uint64_t)v164[1];
            aBlock = *v164;
            uint64_t v247 = v166;
            swift_bridgeObjectRetain_n(v166, 2LL);
            AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
            id v167 = (char *)v128[297];
            uint64_t v168 = v236;
            uint64_t v169 = &v167[v236];
            uint64_t v171 = *(void *)v169;
            uint64_t v170 = *((void *)v169 + 1);
            *(void *)(inited + 312) = &type metadata for String;
            *(void *)(inited + 288) = v171;
            *(void *)(inited + 296) = v170;
            swift_bridgeObjectRetain();
            unint64_t v172 = sub_1002368BC();
            uint64_t v173 = *((void *)v172 + 1);
            aBlock = *(void ***)v172;
            uint64_t v247 = v173;
            swift_bridgeObjectRetain_n(v173, 2LL);
            AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
            uint64_t v175 = v165[2];
            uint64_t v174 = (void **)v165[3];
            *(void *)(inited + 384) = &type metadata for String;
            v234 = v174;
            v235 = (void **)v175;
            *(void *)(inited + 360) = v175;
            *(void *)(inited + 368) = v174;
            swift_bridgeObjectRetain();
            os_log_t v176 = sub_1002368A4();
            uint64_t v177 = *((void *)v176 + 1);
            aBlock = *(void ***)v176;
            uint64_t v247 = v177;
            swift_bridgeObjectRetain_n(v177, 2LL);
            AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
            uint64_t v178 = *(void *)(v168 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8);
            if (v178)
            {
              uint64_t v179 = *(void *)(v168 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v51 = (char *)&type metadata for String;
              *(void *)(inited + 456) = &type metadata for String;
              *(void *)(inited + 432) = v179;
              *(void *)(inited + 440) = v178;
              sub_100159DBC(inited);
              Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              uint64_t v181 = sub_100156B68(&qword_1003F8620);
              uint64_t v182 = swift_initStackObject(v181, &v237);
              *(_OWORD *)(v182 + 16) = xmmword_10034BE40;
              *(void *)(v182 + 32) = v232;
              *(void *)(v182 + 40) = v231;
              sub_1001EA538(v182);
              swift_setDeallocating(v182);
              swift_arrayDestroy(v182 + 32, 1LL, &type metadata for String);
              Class v183 = Set._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              os_log_t v184 = v229;
              [v229 sendMessage:isa toDestinations:v183];

              uint64_t v185 = v230;
              (*(void (**)(void, void **, void **))(*(void *)v233 + 392LL))(0LL, v235, v234);
              if (!v185) {
                return;
              }
              swift_unexpectedError(v185, "mediaremoted/FastSyncSessions.swift", 35LL, 1LL, 1728LL);
              __break(1u);
              goto LABEL_50;
            }

            goto LABEL_71;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }

    static String.Encoding.utf8.getter(v23);
    uint64_t v40 = String.init(data:encoding:)(a2, a3, v15);
    if (v41)
    {
      uint64_t v42 = v40;
      uint64_t v43 = v41;
      uint64_t v44 = sub_100236910();
      uint64_t v45 = v44[1];
      if (v42 == *v44 && v43 == v45)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }

      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, *v44, v45, 0LL);
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
      {
LABEL_16:
        if (qword_1003FF010 == -1) {
          goto LABEL_17;
        }
        goto LABEL_66;
      }
    }

    uint64_t v62 = v25[2];
    unint64_t v63 = v25[3];
    if (v5[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] == 1)
    {
      unint64_t v64 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
      swift_beginAccess( &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v244,  0LL,  0LL);
      uint64_t v65 = *(void *)v64;
      if (*(void *)(v65 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v66 = sub_10015CAD4(v62, v63);
        if ((v67 & 1) != 0)
        {
          unint64_t v68 = (uint64_t *)(*(void *)(v65 + 56) + 16 * v66);
          uint64_t v62 = *v68;
          BOOL v25 = (void *)v68[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v69 = (uint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests];
          swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests], &v242, 0LL, 0LL);
          uint64_t v70 = *v69;
          swift_bridgeObjectRetain();
          int v71 = sub_100158DD4(v62, (uint64_t)v25, v70);
          swift_bridgeObjectRelease();
          unint64_t v72 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
          swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], v241, 0LL, 0LL);
          uint64_t v73 = *(void *)v72;
          if (*(void *)(v73 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v74 = sub_10015CAD4(v62, (uint64_t)v25);
            if ((v75 & 1) == 0)
            {
LABEL_75:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __break(1u);
              goto LABEL_76;
            }

            unint64_t v76 = (uint64_t *)(*(void *)(v73 + 56) + 16 * v74);
            uint64_t v77 = *v76;
            uint64_t v78 = v76[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v79 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_identities];
            swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_identities], v240, 0LL, 0LL);
            uint64_t v80 = *(void *)v79;
            if (!*(void *)(v80 + 16))
            {
LABEL_76:
              swift_bridgeObjectRelease();
              __break(1u);
              goto LABEL_77;
            }

            LODWORD(v236) = v71;
            swift_bridgeObjectRetain();
            unint64_t v81 = sub_10015CAD4(v77, v78);
            if ((v82 & 1) == 0)
            {
LABEL_77:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __break(1u);
              return;
            }

            id v83 = *(id *)(*(void *)(v80 + 56) + 8 * v81);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v84 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
            NSString v85 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v86 = [v84 initWithIdentifier:v85 identity:v83 connected:1 guest:v236 & 1];

            os_log_type_t v87 = (void *)swift_allocObject(&unk_1003A5460, 48LL, 7LL);
            v87[2] = v5;
            v87[3] = a2;
            v87[4] = a3;
            v87[5] = v86;
            v250 = sub_1001E7FC4;
            v251 = v87;
            aBlock = _NSConcreteStackBlock;
            uint64_t v247 = 1107296256LL;
            unint64_t v248 = sub_100157EA8;
            uint64_t v249 = &unk_1003A5478;
            BOOL v88 = _Block_copy(&aBlock);
            uint64_t v89 = v5;
            sub_100160874(a2, a3);
            id v90 = v86;
            unint64_t v91 = v227;
            static DispatchQoS.unspecified.getter(v90);
            uint64_t v239 = _swiftEmptyArrayStorage;
            uint64_t v92 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v93 = sub_100156B68((uint64_t *)&unk_1003F9A70);
            uint64_t v94 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v95 = v229;
            uint64_t v96 = v93;
            uint64_t v97 = v232;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v239, v96, v94, v232, v92);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v91, v95, v88);
            _Block_release(v88);

            (*(void (**)(void **, os_log_s *))(v230 + 8))(v95, v97);
            (*(void (**)(char *, uint64_t))(v228 + 8))(v91, v231);
LABEL_32:
            swift_release(v251);
            return;
          }

          __break(1u);
          goto LABEL_68;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v200 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v200, (uint64_t)qword_1003FF018);
      char v201 = v5;
      swift_retain_n(v25, 2LL);
      uint64_t v202 = v201;
      uint64_t v203 = (os_log_s *)Logger.logObject.getter(v202);
      os_log_type_t v204 = static os_log_type_t.error.getter();
      int v205 = v204;
      if (os_log_type_enabled(v203, v204))
      {
        uint64_t v206 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v233) = v205;
        uint64_t v207 = v206;
        uint64_t v231 = swift_slowAlloc(8LL, -1LL);
        v232 = v203;
        uint64_t v208 = (void *)v231;
        v234 = (void **)swift_slowAlloc(64LL, -1LL);
        aBlock = v234;
        *(_DWORD *)uint64_t v207 = 138412802;
        v235 = (void **)v62;
        uint64_t v242 = (uint64_t)v202;
        v209 = v202;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v207 + 4, v207 + 12);
        *uint64_t v208 = v202;

        *(_WORD *)(v207 + 12) = 2082;
        uint64_t v210 = *(void *)&v209[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v211 = *(void *)&v209[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v242 = sub_10015ADC4(v210, v211, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v207 + 14, v207 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v207 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v242 = sub_10015ADC4((uint64_t)v235, v63, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v207 + 24, v207 + 32);
        swift_release_n(v25, 2LL);
        swift_bridgeObjectRelease();
        uint64_t v212 = "[%@]<%{public}s> Received message but no mapped participant for connection manager participant: %s.";
LABEL_62:
        os_log_t v222 = v232;
        _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v233, v212, (uint8_t *)v207, 0x20u);
        uint64_t v223 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v224 = v231;
        swift_arrayDestroy(v231, 1LL, v223);
        swift_slowDealloc(v224, -1LL, -1LL);
        uint64_t v225 = v234;
        swift_arrayDestroy(v234, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v225, -1LL, -1LL);
        swift_slowDealloc(v207, -1LL, -1LL);

        return;
      }

LABEL_63:
      swift_release_n(v25, 2LL);
      return;
    }

    unint64_t v98 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
    uint64_t v99 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8];
    if (!v99)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }

    if (v62 == *(void *)v98 && v99 == v63
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v25[2], v25[3], *(void *)v98, v99, 0LL) & 1) != 0)
    {
      uint64_t v100 = (void *)swift_allocObject(&unk_1003A5410, 40LL, 7LL);
      v100[2] = v5;
      v100[3] = a2;
      v100[4] = a3;
      v250 = sub_1001E7EBC;
      v251 = v100;
      aBlock = _NSConcreteStackBlock;
      uint64_t v247 = 1107296256LL;
      unint64_t v248 = sub_100157EA8;
      uint64_t v249 = &unk_1003A5428;
      uint64_t v101 = _Block_copy(&aBlock);
      uint64_t v102 = v5;
      uint64_t v103 = sub_100160874(a2, a3);
      unsigned int v104 = v227;
      static DispatchQoS.unspecified.getter(v103);
      uint64_t v244 = _swiftEmptyArrayStorage;
      uint64_t v105 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v106 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v107 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v108 = v229;
      uint64_t v109 = v106;
      os_log_type_t v110 = v232;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v244, v109, v107, v232, v105);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v104, v108, v101);
      _Block_release(v101);
      (*(void (**)(void **, os_log_s *))(v230 + 8))(v108, v110);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v104, v231);
      goto LABEL_32;
    }

    if (qword_1003FF010 == -1)
    {
LABEL_60:
      uint64_t v213 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v213, (uint64_t)qword_1003FF018);
      os_log_type_t v214 = v5;
      swift_retain_n(v25, 2LL);
      uint64_t v202 = v214;
      uint64_t v203 = (os_log_s *)Logger.logObject.getter(v202);
      os_log_type_t v215 = static os_log_type_t.error.getter();
      int v216 = v215;
      if (os_log_type_enabled(v203, v215))
      {
        uint64_t v217 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v233) = v216;
        uint64_t v207 = v217;
        uint64_t v231 = swift_slowAlloc(8LL, -1LL);
        v232 = v203;
        v218 = (void *)v231;
        v234 = (void **)swift_slowAlloc(64LL, -1LL);
        aBlock = v234;
        *(_DWORD *)uint64_t v207 = 138412802;
        v235 = (void **)v62;
        uint64_t v244 = v202;
        unint64_t v219 = v202;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v207 + 4, v207 + 12);
        void *v218 = v202;

        *(_WORD *)(v207 + 12) = 2082;
        uint64_t v220 = *(void *)&v219[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v221 = *(void *)&v219[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v244 = (void *)sub_10015ADC4(v220, v221, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v207 + 14, v207 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v207 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v244 = (void *)sub_10015ADC4((uint64_t)v235, v63, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v207 + 24, v207 + 32);
        swift_release_n(v25, 2LL);
        swift_bridgeObjectRelease();
        uint64_t v212 = "[%@]<%{public}s> Received message from connection manager participant that does not match leader: %s.";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

LABEL_68:
    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_60;
  }

  __break(1u);
LABEL_66:
  swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_17:
  uint64_t v49 = type metadata accessor for Logger(0LL);
  uint64_t v50 = sub_10015ADAC(v49, (uint64_t)qword_1003FF018);
  unint64_t v51 = v5;
  uint64_t v236 = v50;
  unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v55 = (void **)swift_slowAlloc(8LL, -1LL);
    v234 = v55;
    v235 = (void **)swift_slowAlloc(32LL, -1LL);
    aBlock = v235;
    *(_DWORD *)uint64_t v54 = 138412546;
    uint64_t v244 = v51;
    unint64_t v56 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v54 + 4, v54 + 12);
    *uint64_t v55 = v51;

    *(_WORD *)(v54 + 12) = 2082;
    uint64_t v58 = *(void *)&v56[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v57 = *(void *)&v56[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v244 = (void *)sub_10015ADC4(v58, v57, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v54 + 14, v54 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "[%@]<%{public}s> Received transportMigrationReply push.",  (uint8_t *)v54,  0x16u);
    uint64_t v59 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v60 = v234;
    swift_arrayDestroy(v234, 1LL, v59);
    swift_slowDealloc(v60, -1LL, -1LL);
    uint64_t v61 = (uint64_t)v235;
    swift_arrayDestroy(v235, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v111 = *(void (**)(void))&v51[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  if (v111)
  {
    uint64_t v112 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
    if (v112)
    {
      uint64_t v113 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
      if (v113)
      {
        uint64_t v114 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8];
        uint64_t v115 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
        uint64_t v116 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v112 + 392LL);
        sub_1001E80BC(*(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion], v114);
        swift_retain(v112);
        swift_bridgeObjectRetain();
        v116(0LL, v115, v113);
        swift_release(v112);
        swift_bridgeObjectRelease();
        v111(0LL);
        sub_100162944((uint64_t)v111, v114);
        return;
      }

      goto LABEL_73;
    }

  v435 = (char *)v266;
  v266 = v275 & 0xC000000000000001LL;
  uint64_t v278 = 4LL;
  while (1)
  {
    if (v266) {
      uint64_t v279 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v278 - 4, v275);
    }
    else {
      uint64_t v279 = *(id *)(v275 + 8 * v278);
    }
    unint64_t v98 = v279;
    uint64_t v280 = v278 - 3;
    if (__OFADD__(v278 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_130;
    }

    ++v278;
    if (v280 == v277) {
      goto LABEL_134;
    }
  }

  swift_bridgeObjectRelease_n(v275, 2LL);
  v313 = [v98 options];
  if (!v313) {
    goto LABEL_100;
  }
  uint64_t v314 = v313;
  v315 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v313,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  v466 = v258;
  os_log_type_t v316 = v439;
  AnyHashable.init<A>(_:)(&v466, v440, v438);
  if (*(void *)(v315 + 16) && (int v317 = sub_10015CAA4((uint64_t)aBlock), (v318 & 1) != 0))
  {
    sub_100160800(*(void *)(v315 + 56) + 32 * v317, (uint64_t)&v467);
  }

  else
  {
    v467 = 0u;
    v468 = 0u;
  }

  sub_100160990((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v468 + 1)) {
    goto LABEL_101;
  }
  if ((swift_dynamicCast(aBlock, &v467, (char *)&type metadata for Any + 8, v437, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_135;
  }

  swift_bridgeObjectRelease();
  v452 = (void *)aBlock[0];
  v448 = (char *)*((void *)v446 + 2);
  if (v448)
  {
    v332 = 0LL;
    v440 = (uint64_t)(v446 + 32);
    uint64_t v333 = v452[2];
    v439 = (char *)(v452 + 7);
    while (1)
    {
      if (v333)
      {
        uint64_t v334 = (uint64_t *)(v440 + 16 * v332);
        uint64_t v336 = *v334;
        uint64_t v335 = v334[1];
        uint64_t v337 = v452[4];
        uint64_t v338 = v452[5];
        v339 = v337 == *v334 && v338 == v335;
        if (v339 || (_stringCompareWithSmolCheck(_:_:expecting:)(v337, v338, v336, v335, 0LL) & 1) != 0)
        {
LABEL_120:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v346 = [objc_allocWithZone(MRPlaybackSessionRequest) init];
          uint64_t v347 = v445;
          v348 = v93;
          v349 = String._bridgeToObjectiveC()();
          [v346 setRequestIdentifier:v349];

          unint64_t v350 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v460 = (uint64_t *)v346;
          [v346 setType:v350];

          uint64_t v351 = [objc_allocWithZone(MRPlaybackSessionMigrateRequest) init];
          uint64_t v352 = String._bridgeToObjectiveC()();
          [v351 setRequestID:v352];

          [v351 setPlaybackSessionRequest:v346];
          [v351 setEndpointOptions:0];
          objc_msgSend(v351, "setPlayerOptions:", (unint64_t)objc_msgSend(v351, "playerOptions") | 8);
          uint64_t v353 = [v451 activePlayerPath];
          uint64_t v354 = [(id)objc_opt_self(MROrigin) localOrigin];
          unint64_t v355 = objc_allocWithZone(&OBJC_CLASS___MRPlayerPath);
          unint64_t v356 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v458 = [v355 initWithOrigin:v354 bundleIdentifier:v356 player:0];

          uint64_t v357 = v455;
          os_log_t v358 = (void *)(*(uint64_t (**)(void))(*(void *)v455 + 280LL))();
          uint64_t v359 = (void *)swift_allocObject(&unk_1003AC1D8, 96LL, 7LL);
          v359[2] = v347;
          v359[3] = v348;
          v360 = v456;
          v359[4] = v351;
          v359[5] = v360;
          v361 = v457;
          v359[6] = v457;
          v359[7] = v353;
          v362 = v459;
          v359[8] = v358;
          v359[9] = v362;
          v363 = v444;
          v359[10] = v357;
          v359[11] = v363;
          v464 = sub_100290B58;
          v465 = v359;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = (uint64_t)sub_100157E54;
          aBlock[3] = (uint64_t)&unk_1003AC1F0;
          v364 = _Block_copy(aBlock);
          os_log_type_t v365 = v465;
          uint64_t v366 = v351;
          v367 = v353;
          v368 = v358;
          swift_retain(v362);
          unint64_t v369 = v366;
          uint64_t v370 = v367;
          uint64_t v371 = v368;
          os_log_t v372 = v458;
          swift_retain(v361);
          swift_retain(v357);
          swift_release(v365);
          MRMediaRemotePlaybackSessionMigrateForPlayer(v369, v370, v372, v371, v364);
          swift_release(v454);

          _Block_release(v364);
          return;
        }

        if (v333 != 1) {
          break;
        }
      }

    swift_bridgeObjectRelease();
    id v262 = [v239 deviceInfo];
    uint64_t v263 = [v262 systemPodcastApplication];

    if (!v263) {
      goto LABEL_88;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v263);

LABEL_71:
    uint64_t v264 = String._bridgeToObjectiveC()();
    uint64_t v265 = [v239 defaultSupportedCommandsForClient:v264];

    v266 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v265, (char *)&type metadata for Any + 8);
    uint64_t v107 = (uint64_t)sub_100197300(v266);
    swift_bridgeObjectRelease();
    if (!v107)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v474(v460, v473, v233);
      swift_bridgeObjectRetain_n(v489, 2LL);
      uint64_t v286 = swift_bridgeObjectRetain();
      uint64_t v287 = (os_log_s *)Logger.logObject.getter(v286);
      uint64_t v288 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v287, v288))
      {
        v289 = swift_slowAlloc(32LL, -1LL);
        unsigned int v290 = swift_slowAlloc(96LL, -1LL);
        aBlock[0] = v290;
        *(_DWORD *)v289 = 136315650;
        unint64_t v291 = _typeName(_:qualified:)(v485, 0LL);
        *(void *)&v494 = sub_10015ADC4(v291, v292, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v289 + 4, v289 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v289 + 12) = 2080;
        uint64_t v293 = v488;
        swift_bridgeObjectRetain();
        *(void *)&v494 = sub_10015ADC4(v469, v293, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v289 + 14, v289 + 22);
        swift_bridgeObjectRelease_n(v293, 3LL);
        *(_WORD *)(v289 + 22) = 2080;
        v294 = v489;
        swift_bridgeObjectRetain();
        *(void *)&v494 = sub_10015ADC4(v487, v294, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v289 + 24, v289 + 32);
        swift_bridgeObjectRelease_n(v294, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v287,  v288,  "[%s] handoffFromApplication<%s> - failing because no destination supported commands found for: %s",  (uint8_t *)v289,  0x20u);
        swift_arrayDestroy(v290, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v290, -1LL, -1LL);
        swift_slowDealloc(v289, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v489, 2LL);
        swift_bridgeObjectRelease_n(v488, 2LL);
      }

      v79(v460, v483);
      goto LABEL_110;
    }

    v480 = v79;
    uint64_t v267 = v107 & 0xFFFFFFFFFFFFFF8LL;
    v268 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    for (; v268; v268 = _CocoaArrayWrapper.endIndex.getter(v450))
    {
      v269 = 4LL;
      while (1)
      {
        v270 = (v107 & 0xC000000000000001LL) != 0
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v269 - 4, v107)
             : *(id *)(v107 + 8 * v269);
        uint64_t v112 = v270;
        v271 = v269 - 3;
        if (__OFADD__(v269 - 4, 1LL)) {
          break;
        }

        ++v269;
        if (v271 == v268) {
          goto LABEL_81;
        }
      }

      __break(1u);
LABEL_146:
      if (v107 >= 0) {
        v450 = v267;
      }
      else {
        v450 = v107;
      }
      swift_bridgeObjectRetain();
    }

LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

void sub_1001DA69C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v100 = a4;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v92 = *(void *)(v10 - 8);
  uint64_t v93 = v10;
  __chkstk_darwin(v10);
  unint64_t v91 = &v82[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for Participants(0LL);
  uint64_t v89 = *(void *)(v12 - 8);
  uint64_t v90 = v12;
  __chkstk_darwin(v12);
  uint64_t v94 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_100156B68(&qword_1003F9AB0);
  __chkstk_darwin(v14);
  uint64_t v16 = &v82[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = type metadata accessor for Participant(0LL);
  uint64_t v98 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  id v84 = &v82[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = __chkstk_darwin(v18);
  id v86 = &v82[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v95 = &v82[-v23];
  __chkstk_darwin(v22);
  BOOL v25 = &v82[-v24];
  uint64_t v99 = (void *)type metadata accessor for Logger(0LL);
  unint64_t v97 = *(v99 - 1);
  __chkstk_darwin(v99);
  uint64_t v96 = &v82[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = sub_100156B68(&qword_1003F9A90);
  __chkstk_darwin(v27);
  if ((a5 & 1) != 0)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v103[0] = 0LL;
    id v37 = -[objc_class compressedDataUsingAlgorithm:error:](isa, "compressedDataUsingAlgorithm:error:", 0LL, v103);

    id v38 = v103[0];
    if (v37)
    {
      uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v41 = v40;
    }

    else
    {
      uint64_t v58 = v38;
      uint64_t v59 = _convertNSErrorToError(_:)(v38);

      swift_willThrow(v60);
      swift_errorRelease(v59);
      uint64_t v39 = 0LL;
      unint64_t v41 = 0xF000000000000000LL;
    }

    uint64_t v104 = v39;
    unint64_t v105 = v41;
    sub_100236898();
    if (v41 >> 60 == 15)
    {
      uint64_t v104 = a2;
      unint64_t v105 = a3;
      sub_100160874(a2, a3);
      uint64_t v61 = sub_10023688C();
      uint64_t v63 = *(void *)v61;
      uint64_t v62 = (_BYTE *)*((void *)v61 + 1);
      uint64_t v93 = v63;
      uint64_t v94 = v62;
      swift_bridgeObjectRetain();
      __asm { BR              X10 }
    }

    __asm { BR              X11 }
  }

  unint64_t v97 = a3;
  uint64_t v85 = a2;
  uint64_t v28 = *(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  uint64_t v29 = v6;
  if (v28)
  {
    BOOL v88 = v25;
    uint64_t v30 = swift_retain(v28);
    uint64_t v31 = GroupSession.activeParticipants.getter(v30);
    swift_release(v28);
    uint64_t v32 = (uint64_t)v100;
    swift_retain(v100);
    sub_1001B95E0( v31,  v32,  (uint64_t (*)(void))&type metadata accessor for Participant,  (uint64_t (*)(uint64_t))&Participant.handle.getter,  v16);
    swift_bridgeObjectRelease();
    uint64_t v33 = v98;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v16, 1LL, v17) != 1)
    {
      uint64_t v34 = v88;
      (*(void (**)(_BYTE *, char *, uint64_t))(v33 + 32))(v88, v16, v17);
      if (*(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger])
      {
        uint64_t v35 = (char *)&loc_1001DA97C + *((int *)qword_1001DC938 + (v97 >> 62));
        uint64_t v87 = v17;
        __asm { BR              X9 }
      }

      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      sub_10015ADAC((uint64_t)v99, (uint64_t)qword_1003FF018);
      unint64_t v64 = v84;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 16))(v84, v34, v17);
      id v65 = v29;
      unint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.error.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v69 = swift_slowAlloc(32LL, -1LL);
        uint64_t v70 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v100 = (void *)swift_slowAlloc(64LL, -1LL);
        v103[0] = v100;
        *(_DWORD *)uint64_t v69 = 138412802;
        LODWORD(v99) = v68;
        uint64_t v101 = (uint64_t)v65;
        int v71 = (char *)v65;
        uint64_t v87 = v17;
        unint64_t v72 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v69 + 4, v69 + 12);
        *uint64_t v70 = v65;

        *(_WORD *)(v69 + 12) = 2082;
        uint64_t v73 = *(void *)&v72[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v74 = *(void *)&v72[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v101 = sub_10015ADC4(v73, v74, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v69 + 14, v69 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 22) = 2080;
        uint64_t v75 = sub_100156FEC( &qword_1003F9AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
        uint64_t v17 = v87;
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v87, v75);
        uint64_t v101 = sub_10015ADC4(v76, v77, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v69 + 24, v69 + 32);
        swift_bridgeObjectRelease();
        uint64_t v78 = *(void (**)(_BYTE *, uint64_t))(v98 + 8);
        v78(v64, v17);
        _os_log_impl( (void *)&_mh_execute_header,  v66,  (os_log_type_t)v99,  "[%@]<%{public}s> No messenger to send message to participant: %s.",  (uint8_t *)v69,  0x20u);
        uint64_t v79 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v70, 1LL, v79);
        swift_slowDealloc(v70, -1LL, -1LL);
        uint64_t v80 = v100;
        swift_arrayDestroy(v100, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);

        unint64_t v81 = v88;
      }

      else
      {

        uint64_t v78 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
        v78(v64, v17);

        unint64_t v81 = v34;
      }

      v78(v81, v17);
      return;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v16, 1LL, 1LL, v17);
  }

  sub_1001603DC((uint64_t)v16, &qword_1003F9AB0);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  sub_10015ADAC((uint64_t)v99, (uint64_t)qword_1003FF018);
  uint64_t v42 = v6;
  uint64_t v43 = v100;
  swift_retain_n(v100, 2LL);
  uint64_t v44 = v42;
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.error.getter();
  int v47 = v46;
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    LODWORD(v98) = v47;
    uint64_t v49 = v48;
    uint64_t v50 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v99 = (void *)swift_slowAlloc(64LL, -1LL);
    v103[0] = v99;
    *(_DWORD *)uint64_t v49 = 138412802;
    uint64_t v101 = (uint64_t)v44;
    unint64_t v51 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v49 + 4, v49 + 12);
    char *v50 = v44;

    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v52 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v53 = *(void *)&v51[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v101 = sub_10015ADC4(v52, v53, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v49 + 14, v49 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 22) = 2080;
    uint64_t v54 = v43[2];
    unint64_t v55 = v43[3];
    swift_bridgeObjectRetain();
    uint64_t v101 = sub_10015ADC4(v54, v55, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v49 + 24, v49 + 32);
    swift_release_n(v43, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v98,  "[%@]<%{public}s> No active participant to send message to connection manager participant: %s.",  (uint8_t *)v49,  0x20u);
    uint64_t v56 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v50, 1LL, v56);
    swift_slowDealloc(v50, -1LL, -1LL);
    unint64_t v57 = v99;
    swift_arrayDestroy(v99, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v43, 2LL);
  }

uint64_t MRDFastSyncGroupSession.sendRemoteControlMessage(_:to:completion:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v17 = (void *)swift_allocObject(&unk_1003A5500, 64LL, 7LL);
  v17[2] = v5;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  v17[7] = a5;
  aBlock[4] = sub_1001EA728;
  uint64_t v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A5518;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v5;
  sub_100160874(a1, a2);
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v23 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  return swift_release(v30);
}

void MRDFastSyncGroupSession.init()()
{
}

uint64_t sub_1001DCCC8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x698LL))();
}

uint64_t sub_1001DCCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))((swift_isaMask & *v5) + 0x6A0LL))( a1,  a2,  a3,  a4,  a5 & 1);
}

uint64_t static TimeoutError.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

Swift::Int TimeoutError.hashValue.getter()
{
  return Hasher._finalize()();
}

void TimeoutError.hash(into:)()
{
}

Swift::Int sub_1001DCD70(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001DCDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_1001ED1C0(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1001DCDDC()
{
  return 0LL;
}

void sub_1001DCDE8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1001DCDF4(uint64_t a1)
{
  unint64_t v2 = sub_1001EAB70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001DCE1C(uint64_t a1)
{
  unint64_t v2 = sub_1001EAB70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001DCE44()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_1001DCE68(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100156B68(&qword_1003F9F20);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1001865C4(a1, v8);
  unint64_t v10 = sub_1001EAB70();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RemoteControlActivity.CodingKeys,  &type metadata for RemoteControlActivity.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = *(void *)(v2 + 16);
  uint64_t v12 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)(v11, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DCF60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100156B68(&qword_1003F9E78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1001865C4(a1, v9);
  unint64_t v11 = sub_1001EAB70();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RemoteControlActivity.CodingKeys,  &type metadata for RemoteControlActivity.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    uint64_t v13 = type metadata accessor for RemoteControlActivity();
    swift_deallocPartialClassInstance(v1, v13, 32LL, 7LL);
  }

  else
  {
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)(v3 + 16) = v15;
    *(void *)(v3 + 24) = v17;
  }

  sub_1001607E0(a1);
  return v3;
}

unint64_t sub_1001DD098()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1001DD0B4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = type metadata accessor for GroupActivityMetadata.ActivityType(0LL);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001DD10C, 0LL, 0LL);
}

uint64_t sub_1001DD10C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  GroupActivityMetadata.init()();
  uint64_t v2 = GroupActivityMetadata.supportsContinuationOnTV.setter(0LL);
  static GroupActivityMetadata.ActivityType.generic.getter(v2);
  GroupActivityMetadata.type.setter(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DD164@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *a1 = *(void *)(*(void *)v1 + 16LL);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1001DD174@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for RemoteControlActivity();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  uint64_t result = sub_1001DCF60(a1);
  if (!v2) {
    *a2 = v6;
  }
  return result;
}

uint64_t sub_1001DD1C8(void *a1)
{
  return sub_1001DCE68(a1);
}

uint64_t sub_1001DD1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v6 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members;
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members];
  swift_bridgeObjectRetain();
  char v11 = sub_10019F320(a1, v10);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    uint64_t v60 = v8;
    uint64_t v13 = *(void *)&v3[v9];
    uint64_t v14 = qword_1003FF010;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
    uint64_t v17 = swift_bridgeObjectRetain_n(v13, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v61 = ObjectType;
    uint64_t v62 = v3;
    if (v20)
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      uint64_t v22 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v22;
      *(_DWORD *)uint64_t v21 = 136446466;
      uint64_t v23 = _typeName(_:qualified:)(ObjectType, 0LL);
      uint64_t v63 = sub_10015ADC4(v23, v24, aBlock);
      v59[1] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, aBlock, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = Set.description.getter(v25, &type metadata for String, &protocol witness table for String);
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v29 = v26;
      uint64_t ObjectType = v61;
      uint64_t v63 = sub_10015ADC4(v29, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, aBlock, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease_n(v13, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] New members: %{public}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    if (*(void *)(v13 + 16) <= *(void *)(a1 + 16) >> 3)
    {
      aBlock[0] = a1;
      swift_bridgeObjectRetain();
      sub_10015C4A8(v13);
      uint64_t v30 = (unint64_t *)aBlock[0];
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_10015C63C(v13, a1);
    }

    if (*(void *)(a1 + 16) <= *(void *)(v13 + 16) >> 3)
    {
      aBlock[0] = v13;
      sub_10015C4A8(a1);
      uint64_t v31 = (unint64_t *)aBlock[0];
    }

    else
    {
      uint64_t v31 = sub_10015C63C(a1, v13);
    }

    swift_bridgeObjectRetain_n(v31, 2LL);
    uint64_t v32 = swift_bridgeObjectRetain_n(v30, 2LL);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v36;
      *(_DWORD *)uint64_t v35 = 136446722;
      uint64_t v37 = _typeName(_:qualified:)(ObjectType, 0LL);
      uint64_t v63 = sub_10015ADC4(v37, v38, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, aBlock, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = Set.description.getter(v39, &type metadata for String, &protocol witness table for String);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_10015ADC4(v40, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, aBlock, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease_n(v31, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 22) = 2082;
      uint64_t v43 = swift_bridgeObjectRetain();
      uint64_t v44 = Set.description.getter(v43, &type metadata for String, &protocol witness table for String);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_10015ADC4(v44, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, aBlock, v35 + 24, v35 + 32);
      swift_bridgeObjectRelease_n(v30, 2LL);
      uint64_t ObjectType = v61;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "[%{public}s] Updating members with added: %{public}s, removed: %{public}s",  (uint8_t *)v35,  0x20u);
      swift_arrayDestroy(v36, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v30, 2LL);
      swift_bridgeObjectRelease_n(v31, 2LL);
    }

    int v47 = v62;
    uint64_t v48 = (uint64_t)v60;
    uint64_t v49 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v48, 1LL, 1LL, v49);
    uint64_t v50 = (void *)swift_allocObject(&unk_1003A5A30, 64LL, 7LL);
    v50[2] = 0LL;
    v50[3] = 0LL;
    v50[4] = v30;
    v50[5] = v47;
    v50[6] = v31;
    v50[7] = ObjectType;
    unint64_t v51 = v47;
    uint64_t v52 = sub_1001669DC(v48, (uint64_t)&unk_1003F9FD0, (uint64_t)v50);
    swift_release(v52);
    unint64_t v53 = *(dispatch_queue_s **)&v51[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_queue];
    uint64_t v54 = swift_allocObject(&unk_1003A5A58, 24LL, 7LL);
    *(void *)(v54 + 16) = v51;
    uint64_t v55 = swift_allocObject(&unk_1003A5A80, 32LL, 7LL);
    *(void *)(v55 + 16) = sub_1001EDBC8;
    *(void *)(v55 + 24) = v54;
    aBlock[4] = (uint64_t)sub_1001EFCC4;
    uint64_t v65 = v55;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001B2FA0;
    aBlock[3] = (uint64_t)&unk_1003A5A98;
    uint64_t v56 = _Block_copy(aBlock);
    uint64_t v57 = v65;
    uint64_t v58 = v51;
    swift_retain(v55);
    swift_release(v57);
    dispatch_sync(v53, v56);
    _Block_release(v56);
    LOBYTE(v51) = swift_isEscapingClosureAtFileLocation(v55, "", 121LL, 1903LL, 24LL, 1LL);
    swift_release(v54);
    uint64_t result = swift_release(v55);
  }

  return result;
}

uint64_t sub_1001DD894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[25] = a6;
  v7[26] = a7;
  v7[23] = a4;
  v7[24] = a5;
  return swift_task_switch(sub_1001DD8B0, 0LL, 0LL);
}

uint64_t sub_1001DD8B0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_1001A5B74(v1);
    int64_t v4 = result;
    int v6 = v5;
    char v8 = v7 & 1;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(v1 + 32))
    {
      if (*(_DWORD *)(v1 + 36) != v6) {
        goto LABEL_21;
      }
      uint64_t v9 = v42[23];
      id v10 = objc_allocWithZone(&OBJC_CLASS___SKHandle);
      swift_bridgeObjectRetain();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v10 initWithString:v11];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      uint64_t result = sub_10015E644(v4, v6, v8 & 1, v9);
      int64_t v4 = result;
      int v6 = v16;
      char v8 = v17 & 1;
      if (!--v2)
      {
        uint64_t v18 = v42 + 2;
        sub_100160324(result, v16, v17 & 1);
        sub_10016083C(0LL, &qword_1003F9FD8, &OBJC_CLASS___SKHandle_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        v42[27] = isa;
        swift_release(_swiftEmptyArrayStorage);
        v42[2] = v42;
        v42[3] = sub_1001DDD3C;
        v42[22] = swift_continuation_init(v42 + 2, 1LL);
        v42[18] = _NSConcreteStackBlock;
        v42[19] = 0x40000000LL;
        v42[20] = sub_10015A9DC;
        v42[21] = &unk_1003A5AC0;
        [v39 removeInvitedHandles:isa completion:v0 + 144];
        return swift_continuation_await(v18);
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v21 = *(void *)(v20 + 16);
    if (!v21) {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    uint64_t v41 = v0 + 144;
    uint64_t v43 = (void *)v0;
    specialized ContiguousArray.reserveCapacity(_:)(v21);
    uint64_t result = sub_1001A5B74(v20);
    int64_t v22 = result;
    int v24 = v23;
    char v26 = v25 & 1;
    while ((v22 & 0x8000000000000000LL) == 0 && v22 < 1LL << *(_BYTE *)(v20 + 32))
    {
      if (*(_DWORD *)(v20 + 36) != v24) {
        goto LABEL_24;
      }
      uint64_t v27 = *(void *)(v0 + 200);
      id v28 = objc_allocWithZone(&OBJC_CLASS___SKHandle);
      swift_bridgeObjectRetain();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v30 = [v28 initWithString:v29];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
      uint64_t v32 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
      uint64_t v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      specialized ContiguousArray._endMutation()(v33);
      uint64_t result = sub_10015E644(v22, v24, v26 & 1, v27);
      int64_t v22 = result;
      int v24 = v34;
      char v26 = v35 & 1;
      if (!--v21)
      {
        uint64_t v18 = (void *)(v0 + 80);
        uint64_t v36 = *(void *)(v0 + 192);
        sub_100160324(result, v34, v35 & 1);
        sub_10016083C(0LL, &qword_1003F9FD8, &OBJC_CLASS___SKHandle_ptr);
        Class v37 = Array._bridgeToObjectiveC()().super.isa;
        v43[29] = v37;
        swift_release(_swiftEmptyArrayStorage);
        uint64_t v38 = *(void *)(v36
                        + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_localHandle);
        v43[10] = v43;
        v43[11] = sub_1001DE204;
        v43[22] = swift_continuation_init(v43 + 10, 1LL);
        v43[18] = _NSConcreteStackBlock;
        v43[19] = 0x40000000LL;
        v43[20] = sub_10015A9DC;
        v43[21] = &unk_1003A5AD8;
        [v40 inviteHandles:v37 fromSenderHandle:v38 completion:v41];
        return swift_continuation_await(v18);
      }
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1001DDD3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 224LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1001DE48C;
  }
  else {
    uint64_t v2 = sub_1001DDD9C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DDD9C()
{
  uint64_t v1 = v0 + 144;

  if (qword_1003FF010 != -1) {
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v3, (uint64_t)qword_1003FF018);
    uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
    int v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 184);
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v10 = v1;
      uint64_t v11 = _typeName(_:qualified:)(v7, 0LL);
      *(void *)(v0 + 144) = sub_10015ADC4(v11, v12, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 152, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = Set.description.getter(v13, &type metadata for String, &protocol witness table for String);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v17 = v14;
      uint64_t v1 = v10;
      *(void *)(v0 + 144) = sub_10015ADC4(v17, v16, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v0 + 152, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v8, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[%{public}s] Removed handles: %{public}s",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 184), 2LL);
    }

    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v18 + 16);
    if (!v19) {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    uint64_t v40 = v1;
    unint64_t v42 = (void *)v0;
    uint64_t v43 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v19);
    int64_t v20 = sub_1001A5B74(v18);
    int v22 = v21;
    uint64_t v1 = v23 & 1;
    uint64_t v0 = v18 + 56;
    while ((v20 & 0x8000000000000000LL) == 0 && v20 < 1LL << *(_BYTE *)(v18 + 32))
    {
      if (*(_DWORD *)(v18 + 36) != v22) {
        goto LABEL_16;
      }
      uint64_t v24 = v42[25];
      id v25 = objc_allocWithZone(&OBJC_CLASS___SKHandle);
      swift_bridgeObjectRetain();
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v27 = [v25 initWithString:v26];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      uint64_t v29 = v43[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      uint64_t v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
      specialized ContiguousArray._endMutation()(v30);
      int64_t v31 = sub_10015E644(v20, v22, v1 & 1, v24);
      int64_t v20 = v31;
      int v22 = v32;
      uint64_t v1 = v33 & 1;
      if (!--v19)
      {
        uint64_t v34 = v42[24];
        sub_100160324(v31, v32, v33 & 1);
        char v35 = v43;
        sub_10016083C(0LL, &qword_1003F9FD8, &OBJC_CLASS___SKHandle_ptr);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        v42[29] = isa;
        swift_release(v35);
        uint64_t v37 = *(void *)(v34
                        + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_localHandle);
        v42[10] = v42;
        v42[11] = sub_1001DE204;
        v42[22] = swift_continuation_init(v42 + 10, 1LL);
        v42[18] = _NSConcreteStackBlock;
        v42[19] = 0x40000000LL;
        v42[20] = sub_10015A9DC;
        v42[21] = &unk_1003A5AD8;
        [v39 inviteHandles:isa fromSenderHandle:v37 completion:v40];
        return swift_continuation_await(v42 + 10);
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_once(&qword_1003FF010, sub_1001B2258);
  }

uint64_t sub_1001DE204()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 24Hasher.init(_seed:)(v1, 0LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1001DE4CC;
  }
  else {
    uint64_t v2 = sub_1001DE264;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DE264()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v2, (uint64_t)qword_1003FF018);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v17 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v10 = _typeName(_:qualified:)(v7, 0LL);
    *(void *)(v0 + 144) = sub_10015ADC4(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = Set.description.getter(v12, &type metadata for String, &protocol witness table for String);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 144) = sub_10015ADC4(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v6, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] Invited handles: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 200), 2LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DE48C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DE4CC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DE50C()
{
  return sub_1001DE534((uint64_t)&unk_10034CF08, (uint64_t)&unk_10034CF30);
}

uint64_t sub_1001DE520()
{
  return sub_1001DE534((uint64_t)&unk_10034CF50, (uint64_t)&unk_10034CF78);
}

uint64_t sub_1001DE534(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(a1);
  uint64_t v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

char *sub_1001DE59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v5 = sub_100156B68(&qword_1003F9F18);
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  unint64_t v51 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003F9F10);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_queue;
  v45[1] = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = v4;
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100156FEC( (unint64_t *)&qword_1003FB950,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003FA190);
  uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FB960,  (uint64_t *)&unk_1003FA190,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v20, v21, v12, v19);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v47);
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000012LL,  0x800000010034CCA0LL,  v17,  v14,  v11,  0LL);
  *(void *)(v45[2] + v46) = v22;
  *(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members] = &_swiftEmptySetSingleton;
  char v23 = &_swiftEmptySetSingleton;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      sub_1001E5F90((uint64_t)_swiftEmptyArrayStorage);
    }
    else {
      char v23 = &_swiftEmptySetSingleton;
    }
  }

  uint64_t v24 = &v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource__presentDevices];
  uint64_t v59 = v23;
  uint64_t v25 = sub_100156B68(&qword_1003F9E50);
  NSString v26 = v48;
  Published.init(initialValue:)(&v59, v25);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v24, v26, v50);
  id v27 = &v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource__presentHandles];
  uint64_t v59 = &_swiftEmptySetSingleton;
  uint64_t v28 = sub_100156B68(qword_1003F9E60);
  uint64_t v29 = v51;
  Published.init(initialValue:)(&v59, v28);
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v27, v29, v53);
  id v30 = objc_allocWithZone(&OBJC_CLASS___SKHandle);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v32 = [v30 initWithString:v31];

  *(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_localHandle] = v32;
  char v33 = &v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presenceIdentifier];
  uint64_t v34 = v57;
  *(void *)char v33 = v56;
  *((void *)v33 + 1) = v34;
  id v35 = objc_allocWithZone(&OBJC_CLASS___SKPresenceOptions);
  swift_bridgeObjectRetain();
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v35 initWithServiceIdentifier:v36];

  [v37 setIsPersonal:0];
  id v38 = objc_allocWithZone(&OBJC_CLASS___SKPresence);
  id v39 = v37;
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v41 = [v38 initWithPresenceIdentifier:v40 options:v39];

  *(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence] = v41;
  unint64_t v42 = (objc_class *)type metadata accessor for PresenceDataSource(0LL);
  v58.receiver = v18;
  v58.super_class = v42;
  uint64_t v43 = (char *)objc_msgSendSuper2(&v58, "init");
  [*(id *)&v43[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence] addDelegate:v43 queue:*(void *)&v43[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_queue]];

  return v43;
}

uint64_t sub_1001DEA70(uint64_t a1, uint64_t a2)
{
  v3[39] = a2;
  v3[40] = v2;
  v3[38] = a1;
  v3[41] = swift_getObjectType(v2, a2);
  return swift_task_switch(sub_1001DEAB8, 0LL, 0LL);
}

uint64_t sub_1001DEAB8()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[38];
  uint64_t v5 = sub_100156B68(&qword_1003F9EF8);
  uint64_t inited = swift_initStackObject(v5, v0 + 18);
  *(_OWORD *)(inited + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = 25705LL;
  *(void *)(inited + 40) = 0xE200000000000000LL;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1001B7AA8(inited);
  v0[42] = v7;
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence);
  v0[43] = v8;
  sub_1001DF01C(v7);
  id v9 = objc_allocWithZone(&OBJC_CLASS___SKPresencePayload);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithDictionary:isa];
  v0[44] = v11;

  v0[2] = v0;
  v0[3] = sub_1001DEC20;
  uint64_t v12 = swift_continuation_init(v0 + 2, 1LL);
  v0[26] = _NSConcreteStackBlock;
  uint64_t v13 = v0 + 26;
  v13[1] = 0x40000000LL;
  v13[2] = sub_10015A9DC;
  v13[3] = &unk_1003A56A8;
  v13[4] = v12;
  [v8 assertPresenceWithPresencePayload:v11 completion:v13];
  return swift_continuation_await(v1);
}

uint64_t sub_1001DEC20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 36Hasher.init(_seed:)(v1, 0LL) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001DEFA0;
  }

  else
  {
    uint64_t v2 = sub_1001DEC88;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DEC88()
{
  uint64_t v1 = v0 + 80;
  uint64_t v2 = *(void **)(v0 + 344);

  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 88) = sub_1001DED18;
  uint64_t v3 = swift_continuation_init(v0 + 80, 1LL);
  *(void *)(v0 + 248) = _NSConcreteStackBlock;
  uint64_t v4 = (void *)(v0 + 248);
  v4[1] = 0x40000000LL;
  v4[2] = sub_10015A9DC;
  v4[3] = &unk_1003A56C0;
  v4[4] = v3;
  [v2 retainTransientSubscriptionAssertionWithCompletion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1001DED18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 368LL) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001DEFE0;
  }

  else
  {
    uint64_t v2 = sub_1001DED80;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DED80()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v1, (uint64_t)qword_1003FF018);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 336);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v17 = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v10 = _typeName(_:qualified:)(v7, 0LL);
    *(void *)(v0 + 288) = sub_10015ADC4(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = Dictionary.description.getter( v12,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 296) = sub_10015ADC4(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v6, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "[%{public}s] Done asserting presence with payload: %s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 336), 2LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DEFA0()
{
  uint64_t v1 = *(void **)(v0 + 352);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DEFE0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DF01C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100156B68(&qword_1003F9F00);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v31) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1001DF3D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 184) = v2;
  *(void *)(v3 + 192) = swift_getObjectType(v2, a2);
  return swift_task_switch(sub_1001DF41C, 0LL, 0LL);
}

uint64_t sub_1001DF41C()
{
  uint64_t v1 = *(void **)(v0[23]
                + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence);
  uint64_t v2 = v0 + 2;
  v0[25] = v1;
  v0[2] = v0;
  v0[3] = sub_1001DF4B8;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[18] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 18;
  v4[1] = 0x40000000LL;
  v4[2] = sub_10015A9DC;
  v4[3] = &unk_1003A5678;
  v4[4] = v3;
  [v1 releaseTransientSubscriptionAssertionWithCompletion:v4];
  return swift_continuation_await(v2);
}

uint64_t sub_1001DF4B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 208LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1001DF78C;
  }
  else {
    uint64_t v2 = sub_1001DF518;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DF518()
{
  uint64_t v1 = v0 + 10;
  uint64_t v2 = (void *)v0[25];
  v0[10] = v0;
  v0[11] = sub_1001DF5A4;
  uint64_t v3 = swift_continuation_init(v0 + 10, 1LL);
  v0[18] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 18;
  v4[1] = 0x40000000LL;
  v4[2] = sub_10015A9DC;
  v4[3] = &unk_1003A5690;
  v4[4] = v3;
  [v2 releasePresenceWithCompletion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1001DF5A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 216LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1001DF7C8;
  }
  else {
    uint64_t v2 = sub_1001DF604;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001DF604()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10015ADAC(v1, (uint64_t)qword_1003FF018);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 192);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = v7;
    *(_DWORD *)unint64_t v6 = 136446210;
    uint64_t v8 = _typeName(_:qualified:)(v5, 0LL);
    *(void *)(v0 + 144) = sub_10015ADC4(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] Done releasing presence.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DF78C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DF7C8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001DF858(char *a1, uint64_t a2)
{
  os_log_type_t v4 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void **)&v4[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_queue];
  *(void *)uint64_t v9 = v10;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_55;
  }

  id v12 = [a1 presentDevices];
  uint64_t v9 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v9);

  uint64_t v3 = sub_1001E8C50(v13);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath(&unk_10034CF08);
  uint64_t v15 = swift_getKeyPath(&unk_10034CF30);
  static Published.subscript.getter(v125, v4, KeyPath, v15);
  swift_release(KeyPath);
  swift_release(v15);
  a1 = (char *)v125[0];
  sub_1001E0D00(v3, v125[0]);
  LOBYTE(v15) = v16;
  swift_bridgeObjectRelease();
  uint64_t v124 = v3;
  uint64_t v122 = v4;
  if ((v15 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v17 = swift_getKeyPath(&unk_10034CF08);
  uint64_t v18 = swift_getKeyPath(&unk_10034CF30);
  v125[0] = v3;
  swift_bridgeObjectRetain();
  a1 = v4;
  static Published.subscript.setter(v125, a1, v17, v18);
  if (qword_1003FF030 != -1) {
    goto LABEL_56;
  }
  while (1)
  {
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v19, (uint64_t)qword_1003FF038);
    uint64_t v20 = a1;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(64LL, -1LL);
      v125[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446466;
      uint64_t v25 = _typeName(_:qualified:)(ObjectType, 0LL);
      uint64_t v126 = sub_10015ADC4(v25, v26, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      a1 = (char *)(v23 + 14);
      uint64_t v27 = swift_getKeyPath(&unk_10034CF08);
      uint64_t v28 = swift_getKeyPath(&unk_10034CF30);
      static Published.subscript.getter(&v126, v20, v27, v28);
      swift_release(v27);
      swift_release(v28);
      uint64_t v29 = v126;
      unint64_t v30 = sub_1001ED348();
      uint64_t v31 = Set.description.getter(v29, v9, v30);
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t v126 = sub_10015ADC4(v31, v33, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v23 + 14, v23 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[%{public}s] Present devices updated: %s",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      uint64_t v34 = v23;
      uint64_t v3 = v124;
      swift_slowDealloc(v34, -1LL, -1LL);

LABEL_6:
      unint64_t v35 = v3 & 0xC000000000000001LL;
      if ((v3 & 0xC000000000000001LL) == 0)
      {
LABEL_12:
        uint64_t v9 = *(void *)(v3 + 16);
        goto LABEL_13;
      }
    }

    else
    {

      unint64_t v35 = v3 & 0xC000000000000001LL;
      if ((v3 & 0xC000000000000001LL) == 0) {
        goto LABEL_12;
      }
    }

    uint64_t v36 = v3 < 0 ? v3 : v3 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v9 = __CocoaSet.count.getter(v36);
LABEL_13:
    uint64_t v3 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v9)
    {
LABEL_36:
      sub_1001D0FEC(v124);
      uint64_t v69 = v68;
      swift_bridgeObjectRelease();
      uint64_t v70 = *(void *)(v3 + 16);
      uint64_t v71 = *(void *)(v69 + 16);
      swift_bridgeObjectRelease();
      if (v70 != v71)
      {
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        uint64_t v72 = type metadata accessor for Logger(0LL);
        uint64_t v73 = sub_10015ADAC(v72, (uint64_t)qword_1003FF018);
        unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v77 = swift_slowAlloc(32LL, -1LL);
          v125[0] = v77;
          *(_DWORD *)uint64_t v76 = 136446210;
          uint64_t v78 = _typeName(_:qualified:)(ObjectType, 0LL);
          uint64_t v126 = sub_10015ADC4(v78, v79, v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v76 + 4, v76 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "[%{public}s] Some devices are missing payload.",  v76,  0xCu);
          swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v77, -1LL, -1LL);
          swift_slowDealloc(v76, -1LL, -1LL);
        }
      }

      uint64_t v80 = swift_bridgeObjectRetain();
      uint64_t v81 = sub_1001A6418(v80);
      swift_bridgeObjectRelease();
      char v82 = v122;
      uint64_t v83 = swift_bridgeObjectRetain();
      Swift::Int v84 = sub_1001E5104(v83, v81);
      swift_bridgeObjectRelease();
      uint64_t v85 = swift_getKeyPath(&unk_10034CF50);
      uint64_t v86 = swift_getKeyPath(&unk_10034CF78);
      static Published.subscript.getter(v125, v82, v85, v86);
      swift_release(v85);
      swift_release(v86);
      LOBYTE(v86) = sub_10019F320(v84, v125[0]);
      swift_bridgeObjectRelease();
      if ((v86 & 1) != 0)
      {
        swift_release(v84);
      }

      else
      {
        uint64_t v87 = swift_getKeyPath(&unk_10034CF50);
        uint64_t v88 = swift_getKeyPath(&unk_10034CF78);
        v125[0] = v84;
        id v89 = v82;
        static Published.subscript.setter(v125, v89, v87, v88);
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        uint64_t v90 = type metadata accessor for Logger(0LL);
        uint64_t v91 = sub_10015ADAC(v90, (uint64_t)qword_1003FF018);
        id v92 = v89;
        uint64_t v124 = v91;
        uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
        os_log_type_t v94 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = swift_slowAlloc(22LL, -1LL);
          uint64_t v96 = swift_slowAlloc(64LL, -1LL);
          v125[0] = v96;
          *(_DWORD *)uint64_t v95 = 136446466;
          uint64_t v97 = _typeName(_:qualified:)(ObjectType, 0LL);
          uint64_t v126 = sub_10015ADC4(v97, v98, v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v95 + 4, v95 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v95 + 12) = 2082;
          uint64_t v123 = v95 + 14;
          uint64_t v99 = swift_getKeyPath(&unk_10034CF50);
          uint64_t v100 = v70;
          uint64_t v101 = swift_getKeyPath(&unk_10034CF78);
          static Published.subscript.getter(&v126, v92, v99, v101);
          swift_release(v99);
          swift_release(v101);
          uint64_t v102 = Set.description.getter(v126, &type metadata for String, &protocol witness table for String);
          unint64_t v104 = v103;
          swift_bridgeObjectRelease();
          uint64_t v105 = v102;
          uint64_t v70 = v100;
          uint64_t v126 = sub_10015ADC4(v105, v104, v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v123, v95 + 22);

          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "[%{public}s] Present handles updated: %{public}s",  (uint8_t *)v95,  0x16u);
          swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1LL, -1LL);
          swift_slowDealloc(v95, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v106 = swift_bridgeObjectRetain();
        uint64_t v107 = sub_1001A6418(v106);
        swift_bridgeObjectRelease();
        uint64_t v108 = *(void *)(v107 + 16);
        swift_bridgeObjectRelease();
        if (v108 != v70)
        {
          uint64_t v109 = swift_bridgeObjectRetain();
          os_log_type_t v110 = (os_log_s *)Logger.logObject.getter(v109);
          os_log_type_t v111 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v110, v111))
          {
            uint64_t v112 = swift_slowAlloc(22LL, -1LL);
            uint64_t v113 = swift_slowAlloc(64LL, -1LL);
            v125[0] = v113;
            *(_DWORD *)uint64_t v112 = 136446466;
            uint64_t v114 = _typeName(_:qualified:)(ObjectType, 0LL);
            uint64_t v126 = sub_10015ADC4(v114, v115, v125);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v112 + 4, v112 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v112 + 12) = 2082;
            uint64_t v116 = swift_bridgeObjectRetain();
            uint64_t v117 = Array.description.getter(v116, &type metadata for String);
            unint64_t v119 = v118;
            swift_bridgeObjectRelease();
            uint64_t v126 = sub_10015ADC4(v117, v119, v125);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v112 + 14, v112 + 22);
            swift_bridgeObjectRelease_n(v3, 2LL);
            swift_bridgeObjectRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "[%{public}s] Handle collision. Handles: %{public}s",  (uint8_t *)v112,  0x16u);
            swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v113, -1LL, -1LL);
            swift_slowDealloc(v112, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v3, 2LL);
          }

          return;
        }
      }

      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v129 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v9 & ~(v9 >> 63), 0);
    if (v35)
    {
      uint64_t v37 = v124;
      uint64_t v38 = v124 < 0 ? v124 : v124 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v39 = __CocoaSet.startIndex.getter(v38);
      char v41 = 1;
    }

    else
    {
      uint64_t v37 = v124;
      uint64_t v39 = sub_10015E990(v124);
      char v41 = v42 & 1;
    }

    uint64_t v126 = v39;
    uint64_t v127 = v40;
    char v128 = v41;
    if ((v9 & 0x8000000000000000LL) == 0) {
      break;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    swift_once(&qword_1003FF030, sub_1001B226C);
  }

  uint64_t v43 = v37 & 0xFFFFFFFFFFFFFF8LL;
  if (v37 < 0) {
    uint64_t v43 = v37;
  }
  uint64_t v123 = v43;
  while (1)
  {
    while (1)
    {
      int64_t v50 = v126;
      uint64_t v49 = v127;
      char v51 = v128;
      sub_1001E5B28(v126, v127, v128, v37);
      uint64_t v53 = v52;
      id v54 = [v52 handle];
      id v55 = [v54 handleString];

      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      uint64_t v58 = v57;

      uint64_t v59 = v129;
      if ((swift_isUniquelyReferenced_nonNull_native(v129) & 1) == 0)
      {
        sub_10015DCE8(0, v59[2] + 1LL, 1);
        uint64_t v59 = v129;
      }

      unint64_t v61 = v59[2];
      unint64_t v60 = v59[3];
      if (v61 >= v60 >> 1)
      {
        sub_10015DCE8(v60 > 1, v61 + 1, 1);
        uint64_t v59 = v129;
      }

      void v59[2] = v61 + 1;
      uint64_t v62 = &v59[2 * v61];
      v62[4] = v56;
      v62[5] = v58;
      if (v35) {
        break;
      }
      uint64_t v37 = v124;
      int64_t v44 = sub_10015E644(v50, v49, v51, v124);
      uint64_t v46 = v45;
      char v48 = v47;
      sub_100160324(v50, v49, v51);
      uint64_t v126 = v44;
      uint64_t v127 = v46;
      char v128 = v48 & 1;
      if (!--v9) {
        goto LABEL_35;
      }
    }

    uint64_t v37 = v124;
    if ((v51 & 1) == 0) {
      break;
    }
    uint64_t v63 = __CocoaSet.Index.handleBitPattern.getter(v50, v49);
    if (v63) {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
    }
    else {
      uint64_t isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v65 = sub_100156B68(&qword_1003F9EC8);
    unint64_t v66 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v125, v65);
    __CocoaSet.formIndex(after:isUnique:)(v67, isUniquelyReferenced_nonNull_native, v123);
    v66(v125, 0LL);
    if (!--v9)
    {
LABEL_35:
      sub_100160324(v126, v127, v128);
      uint64_t v3 = (uint64_t)v129;
      goto LABEL_36;
    }
  }

  __break(1u);
}

id sub_1001E04F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceDataSource(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E05E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001B2548();
  *a1 = result;
  return result;
}

void sub_1001E0610(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 24LL);
  *(void *)(*(void *)a2 + 24LL) = *a1;
  id v3 = v2;
}

id sub_1001E0644@<X0>(void *a1@<X8>)
{
  id result = sub_1001B254C();
  *a1 = result;
  return result;
}

void sub_1001E066C(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 32LL);
  *(void *)(*(void *)a2 + 32LL) = *a1;
  id v3 = v2;
}

id sub_1001E06A0@<X0>(void *a1@<X8>)
{
  id result = sub_1001B25A8();
  *a1 = result;
  return result;
}

void sub_1001E06C8(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 40LL);
  *(void *)(*(void *)a2 + 4Hasher.init(_seed:)(v1, 0LL) = *a1;
  id v3 = v2;
}

id sub_1001E06FC@<X0>(void *a1@<X8>)
{
  id result = sub_1001B2604();
  *a1 = result;
  return result;
}

void sub_1001E0724(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 48LL);
  *(void *)(*(void *)a2 + 48LL) = *a1;
  id v3 = v2;
}

id sub_1001E0758@<X0>(void *a1@<X8>)
{
  id result = sub_1001B2660();
  *a1 = result;
  return result;
}

void sub_1001E0780(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 56LL);
  *(void *)(*(void *)a2 + 56LL) = *a1;
  id v3 = v2;
}

uint64_t sub_1001E07B4()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0LL, 0LL);
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_1001E07F0(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess(v3 + 16, v5, 1LL, 0LL);
  *(_BYTE *)(v3 + 16) = a1;
  return result;
}

uint64_t (*sub_1001E0830(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1001E0870()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoin);
}

unint64_t sub_1001E0884()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, &v7);
  *(_OWORD *)(inited + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionIsHostKey);
  *(void *)(inited + 40) = v4;
  char v5 = *(_BYTE *)(v1 + 64);
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = v5;
  return sub_1001B7BC8(inited);
}

uint64_t (*sub_1001E0900(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1001E0940()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionEnd);
}

unint64_t sub_1001E0950()
{
  return sub_1001B7CFC((uint64_t)_swiftEmptyArrayStorage, &qword_1003F9EB0, &qword_1003F9EB8);
}

unint64_t sub_1001E097C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, &v7);
  *(_OWORD *)(inited + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionIsHostKey);
  *(void *)(inited + 40) = v4;
  char v5 = *(_BYTE *)(v1 + 32);
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = v5;
  return sub_1001B7BC8(inited);
}

id sub_1001E09F4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = a5;
  uint64_t v24 = a6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001E0B34;
  aBlock[3] = &unk_1003A6838;
  uint64_t v17 = _Block_copy(aBlock);
  v21[4] = a7;
  uint64_t v22 = a8;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_1001B06D8;
  v21[3] = &unk_1003A6860;
  uint64_t v18 = _Block_copy(v21);
  id v19 = [v9 initWithService:a1 handle:v16 queue:a4 messageHandler:v17 errorHandler:v18];

  _Block_release(v17);
  _Block_release(v18);
  swift_release(v22);
  swift_release(v24);
  return v19;
}

uint64_t sub_1001E0B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v8 = v7;
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  swift_retain(v4);
  v5(v6, v8, v9);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1001E0BC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001E0C04(a1, (uint64_t)&unk_10034CF08, (uint64_t)&unk_10034CF30, a2);
}

uint64_t sub_1001E0BDC(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1001E0C90(a1, a2, a3, a4, (uint64_t)&unk_10034CF08, (uint64_t)&unk_10034CF30);
}

uint64_t sub_1001E0BF0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001E0C04(a1, (uint64_t)&unk_10034CF50, (uint64_t)&unk_10034CF78, a2);
}

uint64_t sub_1001E0C04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t KeyPath = swift_getKeyPath(a2);
  uint64_t v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  uint64_t result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1001E0C7C(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1001E0C90(a1, a2, a3, a4, (uint64_t)&unk_10034CF50, (uint64_t)&unk_10034CF78);
}

uint64_t sub_1001E0C90(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(a5);
  uint64_t v10 = swift_getKeyPath(a6);
  uint64_t v12 = v7;
  swift_bridgeObjectRetain(v7);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

void sub_1001E0D00(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    if (v4)
    {
      if (a2 < 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      __CocoaSet.isEqual(to:)(v6, v5);
      return;
    }

    uint64_t v7 = v5;
    uint64_t v8 = a2;
LABEL_16:
    sub_1001E1014(v7, v8);
    return;
  }

  if (v4)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = a1;
    goto LABEL_16;
  }

  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v29 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
  int64_t v12 = 0LL;
  int64_t v30 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_42;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_52;
    }

    if (v16 >= v30) {
      return;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v30) {
        return;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v30) {
          return;
        }
        unint64_t v17 = *(void *)(v29 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v30) {
            return;
          }
          unint64_t v17 = *(void *)(v29 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }

LABEL_52:
  __break(1u);
}

void sub_1001E1014(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter()) {
    return;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_6:
    id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v11);
    char v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) == 0) {
      return;
    }
  }

  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v14 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  ++v4;
  if (v15) {
    goto LABEL_19;
  }
  int64_t v4 = v14 + 1;
  if (v14 + 1 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }

  int64_t v16 = v14 + 2;
  if (v16 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }

void *sub_1001E1164(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100156B68(&qword_1003F8620);
      unint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      int64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      int64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1001E8B60(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

unint64_t sub_1001E1270(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1001E1FEC(a1, v4);
}

unint64_t sub_1001E12A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = sub_100156B68(a2);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v5, v6, &protocol witness table for AnyKeyPath);
  return sub_1001E2104(a1, v7, a2);
}

uint64_t sub_1001E131C(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v30 = v9;
      uint64_t v10 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_1001E15B8(v7, result + 1);
    Swift::Int v31 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v28 = v24 + 1;
      id v29 = v8;
      sub_1001E17AC(v28);
      uint64_t v25 = v31;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_1001B101C((uint64_t)v8, v25);
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        Swift::Int v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        id v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v31 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_1001E1A48((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }

  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1LL;
}

Swift::Int sub_1001E15B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100156B68((uint64_t *)&unk_1003F9EE8);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_1001E17AC(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_1001E17AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68((uint64_t *)&unk_1003F9EE8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

void sub_1001E1A48(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001E17AC(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1001E1BCC();
      goto LABEL_14;
    }

    sub_1001E1D74(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

id sub_1001E1BCC()
{
  uint64_t v1 = v0;
  sub_100156B68((uint64_t *)&unk_1003F9EE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1001E1D74(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68((uint64_t *)&unk_1003F9EE8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

unint64_t sub_1001E1FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1001E2104(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = a1;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a2 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v7 = v3;
    uint64_t v8 = ~v5;
    uint64_t v9 = sub_100156B68(a3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(v7 + 48) + 8 * v6);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, v9, &protocol witness table for AnyKeyPath) & 1) != 0) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v8;
    }

    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

uint64_t sub_1001E21CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001E3448();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100181080(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001E22B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001E398C(&qword_1003FA008);
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001B1630(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001E2384(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1001E1270(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001E37E4();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1001E3CE8(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Int sub_1001E2448(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9F08);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_1001E276C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9F00);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

Swift::Int sub_1001E2A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FA040);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1001E2D54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100156B68(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  uint64_t v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          unint64_t v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1001E305C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FA018);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t *sub_1001E3370(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v9 = *(void *)(*a3 + 48) + 8 * a4;
      uint64_t v10 = sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
      swift_arrayDestroy(v9, 1LL, v10);
      sub_1001E3CE8(a4, *a3);
    }

    return (uint64_t *)swift_bridgeObjectRetain();
  }

  uint64_t v8 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    *(void *)(v8[7] + 8 * a4) = v7;
    return (uint64_t *)swift_bridgeObjectRetain();
  }

  v8[(a4 >> 6) + 8] |= 1LL << a4;
  uint64_t v11 = 8 * a4;
  *(void *)(v8[6] + v11) = a5;
  *(void *)(v8[7] + v11) = v7;
  uint64_t v12 = v8[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    v8[2] = v14;
    id v15 = a5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }

  __break(1u);
  return result;
}

void *sub_1001E3448()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F9F08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_1001E3600()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F9F00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_1001E37E4()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FA040);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_1001E398C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100156B68(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void *sub_1001E3B34()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FA018);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_1001E3CE8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            unint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

_OWORD *sub_1001E3E98(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  id result = sub_100160944(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1001E3F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10015CAD4(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001E3448();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }

_OWORD *sub_1001E4084(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10015CAA4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_1001607E0(v17);
        return sub_100160944(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001E3600();
      goto LABEL_7;
    }

    sub_1001E276C(v13, a3 & 1);
    unint64_t v19 = sub_10015CAA4(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100160954(a2, (uint64_t)v21);
      return sub_1001E3E98(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

id sub_1001E41BC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1001E1270((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001E37E4();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }

void sub_1001E431C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10015CAD4(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001E398C(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

uint64_t sub_1001E4490(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E44AC(a1, a2, a3, *v3);
  *int64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001E44AC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F9FE8);
    BOOL v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  size_t v16 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

unint64_t *sub_1001E4610(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = sub_1001E4760((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, (uint64_t)v2);
    if (v1) {
      swift_willThrow(v8);
    }
    else {
      return v8;
    }
  }

  else
  {
    uint64_t v9 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v9, v7);
    uint64_t v2 = sub_1001E4760((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

unint64_t *sub_1001E4760(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v13 >= v10) {
      return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }

Swift::Int sub_1001E48B0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100156B68(&qword_1003FA018);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

Swift::Int sub_1001E4B48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100156B68(&qword_1003F9F08);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v41 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v40) {
        return v9;
      }
      unint64_t v16 = v39[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v40) {
          return v9;
        }
        unint64_t v16 = v39[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v40) {
            return v9;
          }
          unint64_t v16 = v39[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v40) {
              return v9;
            }
            unint64_t v16 = v39[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_41;
                }
                if (v17 >= v40) {
                  return v9;
                }
                unint64_t v16 = v39[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v17 = v11 + 4;
          }
        }
      }

uint64_t sub_1001E4E04(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Participant(0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  uint64_t v40 = v9;
  sub_100156B68(&qword_1003F9FF0);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  int64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0LL;
  uint64_t v16 = result + 56;
  uint64_t v17 = v40;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v15 << 6);
    }

    else
    {
      uint64_t v20 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }

      unint64_t v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        uint64_t v15 = v20 + 1;
        if (v20 + 1 >= v39) {
          goto LABEL_37;
        }
        unint64_t v21 = v38[v15];
        if (!v21)
        {
          uint64_t v15 = v20 + 2;
          if (v20 + 2 >= v39) {
            goto LABEL_37;
          }
          unint64_t v21 = v38[v15];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v39) {
              goto LABEL_37;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v15 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v39) {
                  goto LABEL_37;
                }
                unint64_t v21 = v38[v15];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v15 = v22;
          }
        }
      }

Swift::Int sub_1001E5104(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  size_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    Swift::Int v9 = sub_1001E5284((Swift::Int)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7, a2, v3);
    swift_release(a2);
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v10, v8);
    Swift::Int v9 = sub_1001E5284((Swift::Int)v10, v7, a2, v3);
    swift_release(a2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v9;
}

Swift::Int sub_1001E5284(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v63 = (unint64_t *)result;
  unint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void *)(a4 + 16);
  uint64_t v72 = a4;
  if (v7 < v6)
  {
    int64_t v8 = 0LL;
    uint64_t v64 = a4 + 56;
    uint64_t v9 = 1LL << *(_BYTE *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v65 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v67 = 0LL;
    uint64_t v12 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v11)
        {
          unint64_t v13 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
          int64_t v68 = v8;
          unint64_t v14 = v13 | (v8 << 6);
        }

        else
        {
          int64_t v15 = v8 + 1;
          if (__OFADD__(v8, 1LL))
          {
            __break(1u);
            goto LABEL_81;
          }

          if (v15 >= v65) {
            goto LABEL_79;
          }
          unint64_t v16 = *(void *)(v64 + 8 * v15);
          int64_t v17 = v8 + 1;
          if (!v16)
          {
            int64_t v17 = v8 + 2;
            if (v8 + 2 >= v65) {
              goto LABEL_79;
            }
            unint64_t v16 = *(void *)(v64 + 8 * v17);
            if (!v16)
            {
              int64_t v17 = v8 + 3;
              if (v8 + 3 >= v65) {
                goto LABEL_79;
              }
              unint64_t v16 = *(void *)(v64 + 8 * v17);
              if (!v16)
              {
                uint64_t v18 = v8 + 4;
                if (v8 + 4 >= v65) {
                  goto LABEL_79;
                }
                unint64_t v16 = *(void *)(v64 + 8 * v18);
                if (!v16)
                {
                  while (1)
                  {
                    int64_t v17 = v18 + 1;
                    if (__OFADD__(v18, 1LL)) {
                      goto LABEL_83;
                    }
                    if (v17 >= v65) {
                      goto LABEL_79;
                    }
                    unint64_t v16 = *(void *)(v64 + 8 * v17);
                    ++v18;
                    if (v16) {
                      goto LABEL_22;
                    }
                  }
                }

                int64_t v17 = v8 + 4;
              }
            }
          }

LABEL_62:
    unint64_t v41 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v38 << 6);
LABEL_63:
    char v48 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    Hasher.init(_seed:)(v71, *(void *)(v4 + 40));
    swift_bridgeObjectRetain();
    String.hash(into:)(v71, v50, v49);
    Swift::Int v51 = Hasher._finalize()();
    uint64_t v52 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v53 = v51 & ~v52;
    if (((*(void *)(v42 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v54 = *(void *)(v72 + 48);
    id v55 = (void *)(v54 + 16 * v53);
    uint64_t v56 = v55[1];
    BOOL v57 = *v55 == v50 && v56 == v49;
    if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v55, v56, v50, v49, 0LL) & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v63 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v44;
      BOOL v37 = __OFADD__(v67++, 1LL);
      uint64_t v5 = a3;
      uint64_t v4 = v72;
      if (v37)
      {
        __break(1u);
LABEL_79:
        swift_retain(v5);
        return sub_10015D15C(v63, a2, v67, v5);
      }
    }

    else
    {
      uint64_t v58 = ~v52;
      while (1)
      {
        unint64_t v53 = (v53 + 1) & v58;
        if (((*(void *)(v42 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0) {
          break;
        }
        uint64_t v59 = (void *)(v54 + 16 * v53);
        uint64_t v60 = v59[1];
        BOOL v61 = *v59 == v50 && v60 == v49;
        if (v61 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v59, v60, v50, v49, 0LL) & 1) != 0) {
          goto LABEL_76;
        }
      }

LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = v72;
    }
  }

  int64_t v47 = v45 + 3;
  if (v47 >= v69) {
    goto LABEL_79;
  }
  unint64_t v46 = *(void *)(v66 + 8 * v47);
  if (v46)
  {
    int64_t v38 = v47;
    goto LABEL_62;
  }

  while (1)
  {
    int64_t v38 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v38 >= v69) {
      goto LABEL_79;
    }
    unint64_t v46 = *(void *)(v66 + 8 * v38);
    ++v47;
    if (v46) {
      goto LABEL_62;
    }
  }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v111) {
        break;
      }
    }

    swift_bridgeObjectRelease();

    uint64_t v2 = i;
LABEL_47:
    uint64_t v42 = objc_msgSend(v2, "members", v56);
    if (!v42)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }

    unint64_t v43 = v42;
    uint64_t v62 = 0LL;
    unint64_t v44 = sub_10016083C(0LL, &qword_1003FBA18, &OBJC_CLASS____MRUserIdentityProtobuf_ptr);
    static Array._forceBridgeFromObjectiveC(_:result:)(v43, &v62, v44);
    int64_t v45 = (uint64_t)v62;
    if (!v62)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    unint64_t v46 = v45 & 0xFFFFFFFFFFFFFF8LL;
    int64_t v47 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v47)
    {
LABEL_65:
      swift_bridgeObjectRelease();

      return;
    }

    while (1)
    {
      uint64_t v62 = v1;
      uint64_t v2 = &v62;
      specialized ContiguousArray.reserveCapacity(_:)(v47);
      if (v47 < 0) {
        break;
      }
      char v48 = 0LL;
      while (v47 != v48)
      {
        if ((v45 & 0xC000000000000001LL) != 0) {
          uint64_t v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v45);
        }
        else {
          uint64_t v49 = *(id *)(v45 + 8 * v48 + 32);
        }
        uint64_t v50 = v49;
        Swift::Int v51 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v49];
        if (!v51) {
          goto LABEL_70;
        }
        uint64_t v1 = v51;
        ++v48;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v52);
        unint64_t v53 = v62[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v53);
        uint64_t v54 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v1);
        uint64_t v2 = &v62;
        specialized ContiguousArray._endMutation()(v54);
        if (v47 == v48)
        {
          swift_bridgeObjectRelease();

          return;
        }
      }

      __break(1u);
LABEL_61:
      if (v45 >= 0) {
        id v55 = v46;
      }
      else {
        id v55 = v45;
      }
      swift_bridgeObjectRetain();
      int64_t v47 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease();
      if (!v47) {
        goto LABEL_65;
      }
    }

    __break(1u);
    goto LABEL_67;
  }

LABEL_84:
  __break(1u);
  return result;
}

void *sub_1001E57C0(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *sub_1001E59B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100156B68(&qword_1003F8310);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  uint64_t v7 = sub_1001E57C0(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain();
  sub_10016031C(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1001E5AA0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_1001E5B28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v21 = v11;
        uint64_t v12 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v4 = v22;
        swift_unknownObjectRelease(v11);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v14 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v13 & ~v14;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            uint64_t v17 = ~v14;
            do
            {
              unint64_t v7 = (v7 + 1) & v17;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v18 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v19 = static NSObject.== infix(_:_:)(v18);
            }

            while ((v19 & 1) == 0);
          }

LABEL_20:
          id v20 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

void *sub_1001E5D90(void *a1)
{
  return sub_1001E1164(0LL, a1[2], 0, a1);
}

unint64_t sub_1001E5DA4(unint64_t result)
{
  if (result > 7) {
    return 0LL;
  }
  return result;
}

unint64_t sub_1001E5DB4(unint64_t result)
{
  if (result > 4) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1001E5DC4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001E5DE8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___MRDFastSyncGroupSession__state);
  *(_BYTE *)(v1 + 8) = 0;
}

uint64_t sub_1001E5E04()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001E5E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001E5E24(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1001E5E2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier + 8);
  if (v2)
  {
    uint64_t v3 = *(void ***)(v0 + 24);
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier);
    char v5 = (uint64_t *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_guests);
    swift_beginAccess(v1 + OBJC_IVAR___MRDFastSyncGroupSession_guests, v14, 0LL, 0LL);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v7 = sub_100158DD4(v4, v2, v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localIdentity);
    id v9 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
    id v10 = v8;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v9 initWithIdentifier:v11 identity:v10 connected:1 guest:v7 & 1];

    Swift::Int v13 = *v3;
    *uint64_t v3 = v12;
  }

uint64_t sub_1001E5F40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for RemoteControlActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE21RemoteControlActivity);
}

uint64_t type metadata accessor for MRDFastSyncGroupSession()
{
  return objc_opt_self(&OBJC_CLASS___MRDFastSyncGroupSession);
}

void sub_1001E5F90(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      sub_100156B68((uint64_t *)&unk_1003F9EE8);
      uint64_t v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    return;
  }
LABEL_15:
  uint64_t v8 = (char *)(v4 + 7);
  uint64_t v45 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v43 = v1;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        BOOL v11 = __OFADD__(v9++, 1LL);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v12 = v10;
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v4[5]);
        uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
        unint64_t v15 = v13 & ~v14;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
        uint64_t v18 = 1LL << v15;
        if (((1LL << v15) & v17) != 0) {
          break;
        }
LABEL_26:
        *(void *)&v8[8 * v16] = v18 | v17;
        *(void *)(v4[6] + 8 * v15) = v12;
        uint64_t v24 = v4[2];
        BOOL v11 = __OFADD__(v24, 1LL);
        uint64_t v25 = v24 + 1;
        if (v11) {
          goto LABEL_43;
        }
        v4[2] = v25;
        if (v9 == v5) {
          return;
        }
      }

      sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
      id v19 = *(id *)(v4[6] + 8 * v15);
      char v20 = static NSObject.== infix(_:_:)(v19);

      if ((v20 & 1) == 0)
      {
        uint64_t v21 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v21;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          id v22 = *(id *)(v4[6] + 8 * v15);
          char v23 = static NSObject.== infix(_:_:)(v22);

          if ((v23 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = v43;
        uint64_t v5 = v45;
        goto LABEL_26;
      }

uint64_t _s12mediaremoted23MRDFastSyncGroupSessionC13stateToStringySSAA0bcdE5StateOFZ_0(unint64_t a1)
{
  if (a1 < 5) {
    return *(void *)&aInitial_0[8 * a1];
  }
  unint64_t v2 = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for MRDFastSyncGroupSessionState,  &v2,  &type metadata for MRDFastSyncGroupSessionState,  &type metadata for Int);
  __break(1u);
  return result;
}

void sub_1001E634C()
{
}

void *sub_1001E6354()
{
  return sub_1001CF668(0LL);
}

void *sub_1001E6378()
{
  return sub_1001B71D4(*(char **)(v0 + 16));
}

void sub_1001E6384()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  unint64_t v4 = v0[4];
  uint64_t v3 = (void *)v0[5];
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v5, (uint64_t)qword_1003FF018);
  id v6 = v1;
  swift_bridgeObjectRetain_n(v4, 2LL);
  id v7 = v3;
  uint64_t v8 = (char *)v6;
  id v9 = v7;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(42LL, -1LL);
    uint64_t v47 = v2;
    Swift::Int v13 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v46 = swift_slowAlloc(64LL, -1LL);
    v52[0] = v46;
    *(_DWORD *)uint64_t v12 = 138544130;
    uint64_t v50 = (uint64_t)v8;
    log = v10;
    uint64_t v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 4, v12 + 12);
    *Swift::Int v13 = v8;

    *(_WORD *)(v12 + 12) = 2082;
    os_log_type_t type = v11;
    uint64_t v16 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v15 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_10015ADC4(v16, v15, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_10015ADC4(v47, v4, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease_n(v4, 3LL);
    *(_WORD *)(v12 + 32) = 2112;
    uint64_t v50 = (uint64_t)v9;
    id v17 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 34, v12 + 42);
    v13[1] = v9;

    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%{public}@]<%{public}s> Prewarm identifier: %{public}s for identity: %@.",  (uint8_t *)v12,  0x2Au);
    uint64_t v18 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v13, 2LL, v18);
    id v19 = v13;
    uint64_t v2 = v47;
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  char v20 = &v8[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  swift_beginAccess(v20, v52, 0LL, 0LL);
  if (!*(void *)v20) {
    goto LABEL_27;
  }
  if (!*(void *)(*(void *)v20 + 16LL)
    || (id v21 = v9,
        swift_bridgeObjectRetain(),
        sub_1001E1270((uint64_t)v21),
        char v23 = v22,
        swift_bridgeObjectRelease(),
        v21,
        (v23 & 1) == 0))
  {
    swift_beginAccess(v20, &v50, 33LL, 0LL);
    uint64_t v24 = *(void *)v20;
    if (!*(void *)v20)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    id v25 = v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    uint64_t v49 = *(void *)v20;
    *(void *)char v20 = 0x8000000000000000LL;
    sub_1001E41BC((uint64_t)_swiftEmptyArrayStorage, v25, isUniquelyReferenced_nonNull_native);
    *(void *)char v20 = v49;
    swift_bridgeObjectRelease();

    swift_endAccess(&v50);
  }

  swift_beginAccess(v20, &v50, 33LL, 0LL);
  uint64_t v27 = *(void *)v20;
  if (!*(void *)v20)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  swift_bridgeObjectRetain();
  id v28 = v9;
  uint64_t v29 = swift_isUniquelyReferenced_nonNull_native(v27);
  uint64_t v49 = *(void *)v20;
  uint64_t v30 = v49;
  *(void *)char v20 = 0x8000000000000000LL;
  id v31 = v28;
  unint64_t v33 = sub_1001E1270((uint64_t)v31);
  uint64_t v34 = *(void *)(v30 + 16);
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
    goto LABEL_24;
  }

  char v37 = v32;
  if (*(void *)(v30 + 24) >= v36)
  {
    if ((v29 & 1) != 0)
    {
      if ((v32 & 1) != 0) {
        goto LABEL_19;
      }
    }

    else
    {
      sub_1001E37E4();
      if ((v37 & 1) != 0) {
        goto LABEL_19;
      }
    }

uint64_t sub_1001E6904()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001E6918()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001E694C()
{
  uint64_t v1 = v0[2];
  uint64_t v70 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  if (qword_1003FF010 != -1) {
LABEL_51:
  }
    swift_once(&qword_1003FF010, sub_1001B2258);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
  id v5 = (id)v1;
  swift_bridgeObjectRetain_n(v3, 2LL);
  id v6 = (id)v2;
  id v7 = (char *)v5;
  uint64_t v8 = (char *)v6;
  uint64_t v2 = Logger.logObject.getter(v8);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v2, v9))
  {
    uint64_t v10 = swift_slowAlloc(42LL, -1LL);
    unint64_t v71 = v3;
    os_log_type_t v11 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v68 = swift_slowAlloc(64LL, -1LL);
    v78[0] = v68;
    *(_DWORD *)uint64_t v10 = 138544130;
    os_log_type_t v75 = v7;
    uint64_t v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v10 + 4, v10 + 12);
    *os_log_type_t v11 = v7;

    *(_WORD *)(v10 + 12) = 2082;
    os_log_type_t type = v9;
    uint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    os_log_type_t v75 = (char *)sub_10015ADC4(v14, v13, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 22) = 2082;
    swift_bridgeObjectRetain();
    os_log_type_t v75 = (char *)sub_10015ADC4(v70, v71, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease_n(v71, 3LL);
    *(_WORD *)(v10 + 32) = 2112;
    os_log_type_t v75 = v8;
    unint64_t v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v10 + 34, v10 + 42);
    v11[1] = v8;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  type,  "[%{public}@]<%{public}s> Cancel prewarming identifier: %{public}s for identity: %@.",  (uint8_t *)v10,  0x2Au);
    uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v11, 2LL, v16);
    id v17 = v11;
    uint64_t v3 = v71;
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  uint64_t v18 = &v7[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  swift_beginAccess(&v7[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers], v78, 0LL, 0LL);
  if (!*(void *)v18)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (*(void *)(*(void *)v18 + 16LL))
  {
    uint64_t v1 = v8;
    swift_bridgeObjectRetain();
    sub_1001E1270(v1);
    uint64_t v2 = v19;
    swift_bridgeObjectRelease();

    if ((v2 & 1) != 0)
    {
      swift_beginAccess(v18, &v75, 33LL, 0LL);
      char v20 = *(void **)v18;
      if (!*(void *)v18) {
        goto LABEL_62;
      }
      swift_bridgeObjectRetain();
      id v21 = (id)v1;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      uint64_t v77 = *(void **)v18;
      uint64_t v23 = (uint64_t)v77;
      *(void *)uint64_t v18 = 0x8000000000000000LL;
      id v24 = v21;
      uint64_t v2 = sub_1001E1270((uint64_t)v24);
      uint64_t v26 = *(void *)(v23 + 16);
      BOOL v27 = (v25 & 1) == 0;
      uint64_t v28 = v26 + v27;
      uint64_t v29 = v70;
      if (__OFADD__(v26, v27)) {
        goto LABEL_53;
      }
      LOBYTE(v1) = v25;
      if (*(void *)(v23 + 24) < v28)
      {
        sub_1001E2A80(v28, isUniquelyReferenced_nonNull_native);
        unint64_t v30 = sub_1001E1270((uint64_t)v24);
        if ((v1 & 1) != (v31 & 1)) {
          goto LABEL_66;
        }
        uint64_t v2 = v30;
        if ((v1 & 1) != 0) {
          goto LABEL_20;
        }
        goto LABEL_58;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_57;
      }
      if ((v25 & 1) == 0)
      {
LABEL_58:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }

      while (1)
      {
LABEL_20:
        uint64_t v45 = *(void **)(v77[7] + 8 * v2);
        unint64_t v74 = v45;
        uint64_t v46 = sub_1001E8DA8((uint64_t)v45, v29, v3);
        if ((v47 & 1) != 0) {
          goto LABEL_25;
        }
        uint64_t v1 = v46;
        unint64_t v48 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_59;
        }
        unint64_t v49 = v45[2];
        os_log_t log = (os_log_t)v2;
        if (v48 != v49)
        {
          if ((v48 & 0x8000000000000000LL) != 0) {
            goto LABEL_60;
          }
          uint64_t v2 = 16 * v46;
          id v73 = v24;
          while (1)
          {
            if (v48 >= v49)
            {
              __break(1u);
              goto LABEL_51;
            }

            uint64_t v58 = (char *)v45 + v2;
            uint64_t v59 = *(void *)((char *)v45 + v2 + 48);
            uint64_t v60 = *(void *)((char *)v45 + v2 + 56);
            BOOL v61 = v59 == v29 && v60 == v3;
            if (!v61 && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v29, v3, 0LL) & 1) == 0)
            {
              if (v48 != v1)
              {
                if (v1 >= v49) {
                  goto LABEL_55;
                }
                uint64_t v29 = v3;
                uint64_t v62 = &v45[2 * v1 + 4];
                uint64_t v3 = *v62;
                uint64_t v63 = v62[1];
                id v24 = (id)*((void *)v58 + 6);
                uint64_t v64 = *((void *)v58 + 7);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0) {
                  uint64_t v45 = sub_1001E5D90(v45);
                }
                int64_t v65 = &v45[2 * v1];
                v65[4] = v24;
                v65[5] = v64;
                swift_bridgeObjectRelease();
                if (v48 >= v45[2]) {
                  goto LABEL_56;
                }
                uint64_t v56 = (char *)v45 + v2;
                *((void *)v56 + 6) = v3;
                *((void *)v56 + 7) = v63;
                swift_bridgeObjectRelease();
                unint64_t v74 = v45;
                uint64_t v3 = v29;
                uint64_t v29 = v70;
                id v24 = v73;
              }

              if (__OFADD__(v1++, 1LL)) {
                break;
              }
            }

            ++v48;
            unint64_t v49 = v45[2];
            v2 += 16LL;
            if (v48 == v49) {
              goto LABEL_23;
            }
          }

          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }

LABEL_65:
            __break(1u);
LABEL_66:
            swift_bridgeObjectRelease();
            uint64_t v66 = sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v66);
            __break(1u);
            return;
          }

uint64_t sub_1001E7238()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001E7248()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession__state) == 1LL
    && !*(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_presenceTask))
  {
    return sub_1001D00B4();
  }

  return result;
}

uint64_t sub_1001E728C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001E72B8()
{
  uint64_t v2 = (char *)v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = (_BYTE *)v0[4];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_identities], v29, 0LL, 0LL);
  id v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  LOBYTE(v1) = sub_1001E8FA0(v5, v4);

  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    uint64_t v6 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_removedParticipantIdentityIdentifiers];
    swift_bridgeObjectRetain();
    id v7 = [v4 identifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    LOBYTE(v7) = sub_100158DD4(v8, v10, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v11, (uint64_t)qword_1003FF018);
      uint64_t v12 = v2;
      id v13 = v4;
      uint64_t v14 = v12;
      id v15 = v13;
      uint64_t v16 = v14;
      id v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc(32LL, -1LL);
        char v20 = (char **)swift_slowAlloc(16LL, -1LL);
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        uint64_t v27 = (uint64_t)v16;
        v28[0] = v26;
        *(_DWORD *)uint64_t v19 = 138543874;
        id v21 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v19 + 4, v19 + 12);
        *char v20 = v16;

        *(_WORD *)(v19 + 12) = 2082;
        uint64_t v22 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v23 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_10015ADC4(v22, v23, v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v19 + 14, v19 + 22);
        swift_bridgeObjectRelease();

        *(_WORD *)(v19 + 22) = 2112;
        uint64_t v27 = (uint64_t)v15;
        id v24 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v19 + 24, v19 + 32);
        v20[1] = (char *)v15;

        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "[%{public}@]<%{public}s> Auto-approving pre-authorized identity: %@",  (uint8_t *)v19,  0x20u);
        uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v20, 2LL, v25);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
      }

      *uint64_t v3 = 1;
    }
  }

uint64_t sub_1001E7614()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001E7624()
{
  return sub_1001EF87C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001E7630()
{
}

uint64_t sub_1001E763C()
{
  return sub_1001EF9C0((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1001E7648()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = [*(id *)(v0 + 24) identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  swift_beginAccess(v1 + OBJC_IVAR___MRDFastSyncGroupSession_guests, v7, 33LL, 0LL);
  sub_10015B404(&v8, v3, v5);
  swift_endAccess(v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E76E4()
{
  return sub_1001EF9C0((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_1001E76F0()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_1003FF018);
  id v4 = v2;
  swift_unknownObjectRetain_n(v1, 2LL);
  uint64_t v5 = (char *)v4;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    unint64_t v23 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v25 = (uint64_t)v5;
    v26[0] = v24;
    *(_DWORD *)uint64_t v8 = 138543874;
    uint64_t v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v8 + 4, v8 + 12);
    *unint64_t v23 = v5;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10015ADC4(v11, v10, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 22) = 2080;
    id v12 = [v1 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v15 = v14;

    uint64_t v25 = sub_10015ADC4(v13, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n(v1, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%{public}@]<%{public}s> Adding pending participant: %s",  (uint8_t *)v8,  0x20u);
    uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v23, 1LL, v16);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n(v1, 2LL);
  }

  id v17 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants], v26, 33LL, 0LL);
  uint64_t v18 = swift_unknownObjectRetain(v1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
  unint64_t v20 = *(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v19 = *(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v20 >= v19 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
  }
  uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v1);
  specialized Array._endMutation()(v21);
  swift_endAccess(v26);
  return sub_1001CC604(1);
}

uint64_t sub_1001E7A34()
{
  return sub_1001EF9C0((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_1001E7A40()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_1003FF018);
  id v4 = v2;
  swift_unknownObjectRetain_n(v1, 2LL);
  uint64_t v5 = (char *)v4;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    unint64_t v23 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v25 = (uint64_t)v5;
    v27[0] = v24;
    *(_DWORD *)uint64_t v8 = 138543874;
    uint64_t v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v8 + 4, v8 + 12);
    *unint64_t v23 = v5;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10015ADC4(v11, v10, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 22) = 2080;
    id v12 = [v1 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v15 = v14;

    uint64_t v25 = sub_10015ADC4(v13, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n(v1, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%{public}@]<%{public}s> Removing pending participant: %s",  (uint8_t *)v8,  0x20u);
    uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v23, 1LL, v16);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n(v1, 2LL);
  }

  id v17 = (uint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants], v27, 33LL, 0LL);
  swift_unknownObjectRetain(v1);
  uint64_t v18 = sub_1001E9E5C(v17, v1);
  id result = (id)swift_unknownObjectRelease(v1);
  uint64_t v20 = *v17;
  if ((unint64_t)*v17 >> 62)
  {
    if (v20 < 0) {
      uint64_t v22 = *v17;
    }
    else {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v22);
    id result = (id)swift_bridgeObjectRelease();
    if (v21 >= v18) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v21 >= v18)
    {
LABEL_8:
      sub_1001EA23C(v18, v21);
      swift_endAccess(v27);
      return sub_1001CC604(1);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1001E7DBC()
{
  return sub_1001EF9C0((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_1001E7DC8()
{
}

uint64_t sub_1001E7DEC()
{
  return sub_1001EF9C0((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_1001E7DF8()
{
}

uint64_t sub_1001E7E1C()
{
  return sub_1001EF87C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001E7E28()
{
}

uint64_t sub_1001E7E34()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001E7E58()
{
}

uint64_t sub_1001E7E60()
{
  return sub_1001EF87C((void (*)(void))&_swift_release);
}

uint64_t sub_1001E7E6C()
{
  return sub_1001BBE14(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001E7E78()
{
  return sub_1001EF87C((void (*)(void))&_swift_release);
}

uint64_t sub_1001E7E84()
{
  return sub_1001BE7A8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001E7E90()
{
  sub_1001608B8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001E7EBC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8LL))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2A0LL))();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      [v3 session:v1 didReceiveRemoteControlMessage:isa from:v4];
      swift_unknownObjectRelease(v3);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_1001E7F90()
{
  sub_1001608B8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001E7FC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x2B8LL))();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v5 session:v2 didReceiveRemoteControlMessage:isa from:v3];
    swift_unknownObjectRelease(v5);
  }

unint64_t sub_1001E8078()
{
  unint64_t result = qword_1003F9A98;
  if (!qword_1003F9A98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CA28, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003F9A98);
  }

  return result;
}

uint64_t sub_1001E80BC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_1001E80CC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      sub_10015B404(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return a2;
}

uint64_t sub_1001E8148(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v4 = a1;
  uint64_t v63 = _swiftEmptyArrayStorage;
  sub_1001E4490(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v6 = sub_1001E5AA0(v4);
  uint64_t v7 = 0LL;
  uint64_t v8 = v4 + 64;
  char v9 = *(_BYTE *)(v4 + 32);
  uint64_t v51 = v4 + 80;
  int64_t v52 = v2;
  uint64_t v54 = v4 + 64;
  uint64_t v55 = v4;
  int v53 = v5;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << v9)
  {
    unint64_t v13 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(v4 + 36) != v5) {
      goto LABEL_36;
    }
    uint64_t v57 = v7;
    uint64_t v58 = v3;
    unint64_t v14 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v6);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    id v17 = (uint64_t *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_guests);
    swift_bridgeObjectRetain();
    swift_beginAccess(v17, v62, 0LL, 0LL);
    uint64_t v18 = *v17;
    swift_bridgeObjectRetain();
    sub_100158DD4(v15, v16, v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = (void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipantIdentifier);
    uint64_t v20 = *(void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipantIdentifier + 8);
    if (v20)
    {
      if (v15 != *v19 || v20 != v16) {
        _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v19, v20, 0LL);
      }
    }

    uint64_t v22 = (uint64_t *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap);
    swift_beginAccess(a2 + OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap, v61, 0LL, 0LL);
    uint64_t v23 = *v22;
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v24) {
      goto LABEL_43;
    }
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_10015CAD4(v15, v16);
    if ((v27 & 1) == 0) {
      goto LABEL_42;
    }
    uint64_t v28 = (uint64_t *)(*(void *)(v23 + 56) + 16 * v26);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v31 = (void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_identities);
    swift_beginAccess(a2 + OBJC_IVAR___MRDFastSyncGroupSession_identities, v60, 0LL, 0LL);
    uint64_t v3 = (void *)*v31;
    if (!v3[2]) {
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
    unint64_t v32 = sub_10015CAD4(v29, v30);
    if ((v33 & 1) == 0) {
      goto LABEL_40;
    }
    id v34 = *(id *)(v3[7] + 8 * v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100237734();
    if (v56)
    {
      swift_release(v58);
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }

    uint64_t v39 = v35;
    uint64_t v40 = v36;
    uint64_t v41 = v37;
    int v42 = v38;
    swift_bridgeObjectRelease();
    uint64_t v3 = v58;
    uint64_t v63 = v58;
    unint64_t v44 = v58[2];
    unint64_t v43 = v58[3];
    if (v44 >= v43 >> 1)
    {
      sub_1001E4490(v43 > 1, v44 + 1, 1);
      uint64_t v3 = v63;
    }

    v3[2] = v44 + 1;
    uint64_t v45 = &v3[4 * v44];
    v45[4] = v39;
    v45[5] = v40;
    v45[6] = v41;
    *((_BYTE *)v45 + 56) = v42 & 1;
    *((_BYTE *)v45 + 57) = BYTE1(v42) & 1;
    *((_BYTE *)v45 + 58) = BYTE2(v42) & 1;
    uint64_t v4 = v55;
    char v9 = *(_BYTE *)(v55 + 32);
    unint64_t v10 = 1LL << v9;
    if (v6 >= 1LL << v9) {
      goto LABEL_37;
    }
    uint64_t v8 = v54;
    uint64_t v46 = *(void *)(v54 + 8 * v13);
    if ((v46 & (1LL << v6)) == 0) {
      goto LABEL_38;
    }
    int v5 = v53;
    if (*(_DWORD *)(v55 + 36) != v53) {
      goto LABEL_39;
    }
    unint64_t v47 = v46 & (-2LL << (v6 & 0x3F));
    if (v47)
    {
      unint64_t v10 = __clz(__rbit64(v47)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v11 = v52;
      uint64_t v12 = v57;
    }

    else
    {
      unint64_t v48 = v13 + 1;
      unint64_t v49 = (v10 + 63) >> 6;
      int64_t v11 = v52;
      uint64_t v12 = v57;
      if (v13 + 1 < v49)
      {
        unint64_t v50 = *(void *)(v54 + 8 * v48);
        if (v50)
        {
LABEL_31:
          unint64_t v10 = __clz(__rbit64(v50)) + (v48 << 6);
        }

        else
        {
          while (v49 - 2 != v13)
          {
            unint64_t v50 = *(void *)(v51 + 8 * v13++);
            if (v50)
            {
              unint64_t v48 = v13 + 1;
              goto LABEL_31;
            }
          }
        }
      }
    }

    uint64_t v7 = v12 + 1;
    uint64_t v6 = v10;
    if (v7 == v11) {
      return (uint64_t)v3;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_bridgeObjectRelease();
LABEL_41:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_42:
  uint64_t result = swift_bridgeObjectRelease();
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1001E8570(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a2;
  int64_t v52 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Participant(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v62 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v51 - v12;
  uint64_t v61 = a3;
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v58 = a3 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v54 = (void *)(a4 + OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier);
  uint64_t v60 = a4 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap;
  uint64_t result = swift_beginAccess( a4 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap,  v63,  0LL,  0LL);
  uint64_t v53 = 0LL;
  int64_t v19 = 0LL;
  int64_t v59 = (unint64_t)(v15 + 63) >> 6;
  while (v17)
  {
    unint64_t v22 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    int64_t v64 = v19;
    unint64_t v23 = v22 | (v19 << 6);
LABEL_23:
    unint64_t v28 = *(void *)(v61 + 48) + *(void *)(v9 + 72) * v23;
    uint64_t v29 = v9;
    uint64_t v30 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v31 = v8;
    uint64_t v32 = v30(v13, v28, v8);
    uint64_t v33 = Participant.handle.getter(v32);
    uint64_t v35 = v34;
    if (!*(void *)(*(void *)v60 + 16LL))
    {
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v20 = v62;
      uint64_t v8 = v31;
      v30(v62, (unint64_t)v13, v31);
      uint64_t v9 = v29;
      uint64_t v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v20, v31);
      goto LABEL_6;
    }

    uint64_t v36 = v33;
    swift_bridgeObjectRetain();
    sub_10015CAD4(v36, v35);
    char v38 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v39 = v30(v62, (unint64_t)v13, v31);
    uint64_t v40 = v55;
    uint64_t v41 = Participant.id.getter(v39);
    uint64_t v42 = UUID.uuidString.getter(v41);
    uint64_t v44 = v43;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v57);
    uint64_t v45 = v54[1];
    if (v45)
    {
      uint64_t v9 = v29;
      if (v42 == *v54 && v45 == v44)
      {
        uint64_t v21 = *(void (**)(char *, uint64_t))(v29 + 8);
        uint64_t v8 = v31;
        v21(v62, v31);
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v13, v8);
        int64_t v19 = v64;
      }

      else
      {
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, *v54, v45, 0LL);
        unint64_t v47 = *(void (**)(char *, uint64_t))(v29 + 8);
        v47(v62, v31);
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v13, v31);
        uint64_t v8 = v31;
        int64_t v19 = v64;
        if ((v46 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }

    else
    {
      uint64_t v9 = v29;
      unint64_t v48 = *(void (**)(char *, uint64_t))(v29 + 8);
      uint64_t v8 = v31;
      v48(v62, v31);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v13, v31);
      int64_t v19 = v64;
LABEL_32:
      *(unint64_t *)((char *)v52 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
      if (__OFADD__(v53++, 1LL))
      {
        __break(1u);
LABEL_35:
        uint64_t v50 = v61;
        swift_retain(v61);
        return sub_1001E4E04(v52, v51, v53, v50);
      }
    }
  }

  int64_t v24 = v19 + 1;
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v24 >= v59) {
    goto LABEL_35;
  }
  unint64_t v25 = *(void *)(v58 + 8 * v24);
  int64_t v26 = v19 + 1;
  if (v25) {
    goto LABEL_22;
  }
  int64_t v26 = v19 + 2;
  if (v19 + 2 >= v59) {
    goto LABEL_35;
  }
  unint64_t v25 = *(void *)(v58 + 8 * v26);
  if (v25) {
    goto LABEL_22;
  }
  int64_t v26 = v19 + 3;
  if (v19 + 3 >= v59) {
    goto LABEL_35;
  }
  unint64_t v25 = *(void *)(v58 + 8 * v26);
  if (v25)
  {
LABEL_22:
    unint64_t v17 = (v25 - 1) & v25;
    int64_t v64 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
    goto LABEL_23;
  }

  uint64_t v27 = v19 + 4;
  if (v19 + 4 >= v59) {
    goto LABEL_35;
  }
  unint64_t v25 = *(void *)(v58 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v19 + 4;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v26 >= v59) {
      goto LABEL_35;
    }
    unint64_t v25 = *(void *)(v58 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_22;
    }
  }

LABEL_37:
  __break(1u);
  return result;
}

  if (v7 < 0) {
    unint64_t v25 = v7;
  }
  else {
    unint64_t v25 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *uint64_t v3 = v7;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  unint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v4);
  uint64_t v15 = sub_100156B68(&qword_1003FA150);
  uint64_t v16 = swift_arrayDestroy(v14, v5, v15);
  if (!v6) {
    return specialized Array._endMutation()(v16);
  }
  unint64_t v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    int64_t v19 = v18 - v2;
    if (!__OFSUB__(v18, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v17 < 0) {
    uint64_t v27 = *v3;
  }
  else {
    uint64_t v27 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  uint64_t v16 = swift_bridgeObjectRelease();
  int64_t v19 = v28 - v2;
  if (__OFSUB__(v28, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v20 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v20[8 * v19]) {
      uint64_t v16 = (uint64_t)memmove(v14, v20, 8 * v19);
    }
    int64_t v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v21 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v22 = v21 + v6;
      if (!__OFADD__(v21, v6))
      {
LABEL_27:
        *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v22;
        return specialized Array._endMutation()(v16);
      }

      goto LABEL_58;
    }

        sub_100164B5C((uint64_t)&v75);
        goto LABEL_38;
      }
    }
  }

  if (v7 < 0) {
    unint64_t v25 = v7;
  }
  else {
    unint64_t v25 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *uint64_t v3 = v7;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  unint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v4);
  uint64_t v15 = type metadata accessor for RoutingTimeline.Observer();
  uint64_t v16 = swift_arrayDestroy(v14, v5, v15);
  if (!v6) {
    return specialized Array._endMutation()(v16);
  }
  unint64_t v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    int64_t v19 = v18 - v2;
    if (!__OFSUB__(v18, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v17 < 0) {
    uint64_t v27 = *v3;
  }
  else {
    uint64_t v27 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  uint64_t v16 = swift_bridgeObjectRelease();
  int64_t v19 = v28 - v2;
  if (__OFSUB__(v28, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v20 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v20[8 * v19]) {
      uint64_t v16 = (uint64_t)memmove(v14, v20, 8 * v19);
    }
    int64_t v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v21 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v22 = v21 + v6;
      if (!__OFADD__(v21, v6))
      {
LABEL_27:
        *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v22;
        return specialized Array._endMutation()(v16);
      }

      goto LABEL_58;
    }

  __break(1u);
}

          swift_bridgeObjectRelease();
LABEL_6:
          ++v24;
          break;
        default:
          goto LABEL_5;
      }
    }

    __break(1u);
LABEL_39:
    if (a3 < 0) {
      uint64_t v58 = a3;
    }
    else {
      uint64_t v58 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    unint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease();
  }

    uint64_t v33 = 0;
  }

  return v33 & 1;
}

uint64_t sub_1001E89B4(uint64_t a1, void *a2)
{
  char v4 = *(_BYTE *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1LL << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (char *)&v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0LL);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = sub_1001E8570((unint64_t *)v9, v6, a1, (uint64_t)v10);
    swift_release(a1);

    if (v2) {
      swift_willThrow(v12);
    }
  }

  else
  {
    unint64_t v13 = (void *)swift_slowAlloc(8 * v6, -1LL);
    bzero(v13, 8 * v6);
    id v14 = v8;
    uint64_t v11 = sub_1001E8570((unint64_t *)v13, v6, a1, (uint64_t)v14);
    swift_release(a1);

    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v11;
}

uint64_t sub_1001E8B60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001E8C50(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
  unint64_t v5 = sub_1001ED348();
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        id v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_1001E131C((Swift::Int *)&v14, v10);
      }
    }

    else
    {
      uint64_t v11 = (void **)(a1 + 32);
      do
      {
        uint64_t v12 = *v11++;
        sub_1001E131C((Swift::Int *)&v14, v12);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001E8DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    uint64_t v8 = *(i - 1);
    uint64_t v9 = *i;
    BOOL v10 = v8 == a2 && v9 == a3;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, a2, a3, 0LL) & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0LL;
    }
  }

  return v6;
}

void *sub_1001E8E38(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1001E1164(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for String);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      void *v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_1001E8FA0(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_21;
    }

    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v9 >= v26) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v26) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v25 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v26) {
            goto LABEL_29;
          }
          unint64_t v10 = *(void *)(v25 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v26)
            {
LABEL_29:
              swift_release(a1);
              return 0LL;
            }

            unint64_t v10 = *(void *)(v25 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1001E9210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a3;
  uint64_t v57 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v51 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Participant(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v47 - v14;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v48 = a1 + 56;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v50 = (void *)(a4 + OBJC_IVAR___MRDFastSyncGroupSession_leaderFastSyncIdentifier);
  int64_t v49 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v56 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v20) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v27 = i + 1;
  if (__OFADD__(i, 1LL))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }

  if (v27 >= v49) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v48 + 8 * v27);
  ++i;
  if (v28) {
    goto LABEL_22;
  }
  int64_t i = v27 + 1;
  if (v27 + 1 >= v49) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v48 + 8 * i);
  if (v28) {
    goto LABEL_22;
  }
  int64_t i = v27 + 2;
  if (v27 + 2 >= v49) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v48 + 8 * i);
  if (v28) {
    goto LABEL_22;
  }
  int64_t i = v27 + 3;
  if (v27 + 3 >= v49) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v48 + 8 * i);
  if (v28) {
    goto LABEL_22;
  }
  int64_t v29 = v27 + 4;
  if (v29 >= v49)
  {
LABEL_34:
    swift_release(v56);
    return 0LL;
  }

  unint64_t v28 = *(void *)(v48 + 8 * v29);
  for (int64_t i = v29; !v28; ++v29)
  {
    int64_t i = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      goto LABEL_37;
    }
    if (i >= v49) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v48 + 8 * i);
  }

uint64_t sub_1001E9630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  id v15 = (void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle);
  int64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v17 + 1;
  if (__OFADD__(v17, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v21 >= v31) {
    goto LABEL_29;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v21);
  ++v17;
  if (!v22)
  {
    int64_t v17 = v21 + 1;
    if (v21 + 1 >= v31) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v30 + 8 * v17);
    if (!v22)
    {
      int64_t v17 = v21 + 2;
      if (v21 + 2 >= v31) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void *)(v30 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 3;
        if (v21 + 3 >= v31) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v30 + 8 * v17);
        if (!v22)
        {
          int64_t v23 = v21 + 4;
          if (v23 < v31)
          {
            unint64_t v22 = *(void *)(v30 + 8 * v23);
            int64_t v17 = v23;
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  break;
                }
                if (v17 >= v31) {
                  goto LABEL_29;
                }
                unint64_t v22 = *(void *)(v30 + 8 * v17);
                ++v23;
                if (v22) {
                  goto LABEL_22;
                }
              }

LABEL_29:
          swift_release(v32);
          return 0LL;
        }
      }
    }
  }

uint64_t sub_1001E9900(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0LL;
  uint64_t v7 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(result + 64);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v12 >= v23) {
      return 0LL;
    }
    unint64_t v13 = *(void *)(v22 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v23) {
        return 0LL;
      }
      unint64_t v13 = *(void *)(v22 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v23) {
          return 0LL;
        }
        unint64_t v13 = *(void *)(v22 + 8 * v6);
        if (!v13)
        {
          int64_t v6 = v12 + 3;
          if (v12 + 3 >= v23) {
            return 0LL;
          }
          unint64_t v13 = *(void *)(v22 + 8 * v6);
          if (!v13) {
            break;
          }
        }
      }
    }

void *sub_1001E9B04(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v7;
    unint64_t v25 = v7 & 0xC000000000000001LL;
    uint64_t v4 = 4LL;
    while (1)
    {
      uint64_t v9 = v4 - 4;
      if (!v25) {
        break;
      }
      unint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      uint64_t v11 = v4 - 3;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_20;
      }
LABEL_9:
      uint64_t v12 = v8;
      unint64_t v13 = v10;
      uint64_t v14 = a3;
      id v15 = objc_msgSend(v10, "identifier", v23);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      a3 = v14;
      BOOL v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0LL);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      swift_unknownObjectRelease(v13);
      ++v4;
      uint64_t v8 = v12;
      BOOL v19 = v11 == v12;
      uint64_t v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0LL;
      }
    }

    unint64_t v10 = (void *)swift_unknownObjectRetain(*(void *)(v7 + 8 * v4));
    uint64_t v11 = v4 - 3;
    if (!__OFADD__(v9, 1LL)) {
      goto LABEL_9;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }

  swift_bridgeObjectRelease(v7);
  return 0LL;
}

uint64_t sub_1001E9CAC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v20 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }

      else
      {
        uint64_t v7 = *(void **)(a1 + 8 * v6 + 32);
        swift_unknownObjectRetain(v7);
      }

      id v8 = objc_msgSend(v7, "identifier", v20);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v11 = v10;

      id v12 = [a2 identifier];
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v14 = v13;

      if (v9 == v3 && v11 == v14)
      {
        swift_unknownObjectRelease(v7);
        swift_bridgeObjectRelease_n(v11, 2LL);
        return v6;
      }

      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v3, v14, 0LL);
      swift_unknownObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) != 0) {
        return v6;
      }
      uint64_t v17 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        break;
      }
      ++v6;
      if (v17 == v5) {
        return 0LL;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t sub_1001E9E5C(uint64_t *a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v6 = swift_bridgeObjectRetain();
  id v43 = a2;
  unint64_t v44 = sub_1001E9CAC(v6, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v42 = v2;
  if (v2) {
    return v44;
  }
  if ((v8 & 1) == 0)
  {
    id v9 = (id)(v44 + 1);
    if (__OFADD__(v44, 1LL)) {
      goto LABEL_63;
    }
    unint64_t v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000LL) != 0LL) {
        uint64_t v38 = v5;
      }
      else {
        uint64_t v38 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
      if (v9 != (id)v39) {
        goto LABEL_6;
      }
    }

    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v44 + 5; ; ++i)
      {
        unint64_t v5 = i - 4;
        unint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          id v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }

        else
        {
          if ((v5 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }

          if (v5 >= *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          id v12 = *(void **)(v11 + 8 * i);
          swift_unknownObjectRetain(v12);
        }

        id v13 = objc_msgSend(v12, "identifier", v42);
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v16 = v15;

        id v9 = [v43 identifier];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v19 = v18;

        if (v14 == v17 && v16 == v19)
        {
          swift_unknownObjectRelease(v12);
          swift_bridgeObjectRelease_n(v16, 2LL);
          goto LABEL_38;
        }

        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v19, 0LL);
        swift_unknownObjectRelease(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0) {
          goto LABEL_38;
        }
        if (v5 != v44) {
          break;
        }
LABEL_35:
        if (__OFADD__(v44, 1LL)) {
          goto LABEL_56;
        }
        ++v44;
LABEL_38:
        id v9 = (id)(i - 3);
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_55;
        }
        uint64_t v33 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v33 < 0) {
            uint64_t v35 = *a1;
          }
          else {
            uint64_t v35 = v33 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v35);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v9 == (id)v34) {
          return v44;
        }
      }

      uint64_t v22 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, *a1);
        uint64_t v22 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000LL) != 0) {
            goto LABEL_59;
          }
          if (v5 >= *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_60;
          }
          uint64_t v24 = *(void *)(v22 + 8 * i);
          swift_unknownObjectRetain(v24);
          goto LABEL_24;
        }
      }

      else
      {
        if ((v44 & 0x8000000000000000LL) != 0) {
          goto LABEL_57;
        }
        if (v44 >= *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_58;
        }
        uint64_t v23 = *(void *)(v22 + 8 * v44 + 32);
        swift_unknownObjectRetain(v23);
        if ((v22 & 0xC000000000000001LL) == 0) {
          goto LABEL_21;
        }
      }

      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v22);
      uint64_t v22 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v22);
      *a1 = v22;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v22 < 0 || (v22 & 0x4000000000000000LL) != 0)
      {
        uint64_t v22 = sub_1001A3618(v22);
        *a1 = v22;
      }

      uint64_t v26 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8LL) + 8 * v44 + 0x20);
      *(void *)((v22 & 0xFFFFFFFFFFFFFF8LL) + 8 * v44 + 0x2sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v24;
      uint64_t v27 = swift_unknownObjectRelease(v26);
      specialized Array._endMutation()(v27);
      uint64_t v28 = *a1;
      int v29 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v28;
      if (!v29 || v28 < 0 || (v28 & 0x4000000000000000LL) != 0)
      {
        uint64_t v28 = sub_1001A3618(v28);
        *a1 = v28;
      }

      if ((v5 & 0x8000000000000000LL) != 0) {
        goto LABEL_61;
      }
      uint64_t v30 = v28 & 0xFFFFFFFFFFFFFF8LL;
      if (v5 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_62;
      }
      uint64_t v31 = *(void *)(v30 + 8 * i);
      *(void *)(v30 + 8 * i) = v23;
      uint64_t v32 = swift_unknownObjectRelease(v31);
      specialized Array._endMutation()(v32);
      goto LABEL_35;
    }

    return v44;
  }

  uint64_t v36 = *a1;
  if (v36 < 0) {
    uint64_t v40 = v36;
  }
  else {
    uint64_t v40 = v36 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_1001EA23C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v5;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0) {
      uint64_t v26 = v7;
    }
    else {
      uint64_t v26 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    uint64_t v7 = *v3;
    goto LABEL_15;
  }

LABEL_53:
    if (v2 < 0) {
      uint64_t v29 = v2;
    }
    else {
      uint64_t v29 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v22 = v30 + v6;
    if (!__OFADD__(v30, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  char v31 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1046LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
    JUMPOUT(0x1001F7878LL);
  }

  uint64_t v66 = v158;
  uint64_t v67 = v166;
  v160(v158, v159, v166);
  swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v68 = swift_retain_n(v65, 2LL);
  int64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
  uint64_t v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    unint64_t v71 = v60;
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    id v73 = swift_slowAlloc(96LL, -1LL);
    uint64_t v169 = v73;
    *(_DWORD *)uint64_t v72 = 136315650;
    unint64_t v74 = _typeName(_:qualified:)(v71, 0LL);
    uint64_t v179 = sub_10015ADC4(v74, v75, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v72 + 4, v72 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v72 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v179 = sub_10015ADC4(v163, (unint64_t)v21, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v72 + 14, v72 + 22);
    uint64_t v76 = swift_bridgeObjectRelease_n(v21, 3LL);
    *(_WORD *)(v72 + 22) = 2080;
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*v168 + 192LL))(v76);
    uint64_t v179 = sub_10015ADC4(v77, v78, &v169);
    int64_t v65 = v168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v72 + 24, v72 + 32);
    swift_release_n(v65, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "[%s] rebuild<%s> - before advancing: %s",  (uint8_t *)v72,  0x20u);
    swift_arrayDestroy(v73, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);

    unint64_t v79 = v66;
    uint64_t v80 = v166;
  }

  else
  {

    swift_release_n(v65, 2LL);
    swift_bridgeObjectRelease_n(v21, 2LL);
    unint64_t v79 = v66;
    uint64_t v80 = v67;
  }

  v165(v79, v80);
  sub_1001F942C();
  uint64_t v81 = v65[4];
  if (*(void *)(v81 + 16) && *(void *)(v81 + 32) == v162)
  {
    do
    {
      uint64_t v60 = *(void *)(v81 + 32);
      uint64_t v87 = *(uint64_t (**)(uint64_t))(*(void *)v60 + 128LL);
      uint64_t v88 = swift_retain(v60);
      id v89 = v87(v88);
      if ((unint64_t)(v89 - 1) >= 2)
      {
        if (!v89)
        {
          uint64_t v126 = v155;
          uint64_t v127 = v166;
          v160(v155, v159, v166);
          swift_retain_n(v65, 2LL);
          char v128 = swift_bridgeObjectRetain();
          uint64_t v129 = (os_log_s *)Logger.logObject.getter(v128);
          uint64_t v130 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v129, v130))
          {
            __int128 v131 = swift_slowAlloc(32LL, -1LL);
            uint64_t v132 = swift_slowAlloc(96LL, -1LL);
            uint64_t v169 = v132;
            *(_DWORD *)__int128 v131 = 136315650;
            unint64_t v133 = _typeName(_:qualified:)(v164, 0LL);
            os_log_t v176 = sub_10015ADC4(v133, v134, &v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v131 + 4, v131 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v131 + 12) = 2080;
            swift_bridgeObjectRetain();
            os_log_t v176 = sub_10015ADC4(v163, (unint64_t)v21, &v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v131 + 14, v131 + 22);
            unint64_t v135 = swift_bridgeObjectRelease_n(v21, 3LL);
            *(_WORD *)(v131 + 22) = 2080;
            uint64_t v136 = (*(uint64_t (**)(uint64_t))(*v65 + 192LL))(v135);
            os_log_t v176 = sub_10015ADC4(v136, v137, &v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v131 + 24, v131 + 32);
            swift_release_n(v65, 2LL);
            swift_bridgeObjectRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v129,  v130,  "[%s] rebuild<%s> - advanced: %s",  (uint8_t *)v131,  0x20u);
            swift_arrayDestroy(v132, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v132, -1LL, -1LL);
            swift_slowDealloc(v131, -1LL, -1LL);

            swift_release(v60);
            uint64_t v124 = v155;
            os_log_type_t v125 = v166;
          }

          else
          {

            swift_release(v60);
            swift_release_n(v65, 2LL);
            swift_bridgeObjectRelease_n(v21, 2LL);
            uint64_t v124 = v126;
            os_log_type_t v125 = v127;
          }

          return ((uint64_t (*)(_BYTE *, uint64_t))v165)(v124, v125);
        }

        uint64_t v93 = v90;
        os_log_type_t v94 = v91;
        uint64_t v95 = v92;
        swift_errorRelease(v89);
        sub_100156BA8(v93, v94, v95);
      }

      swift_beginAccess(v54, &v176, 33LL, 0LL);
      uint64_t v96 = v65[4];
      if (!*(void *)(v96 + 16))
      {
        __break(1u);
LABEL_48:
        __break(1u);
        JUMPOUT(0x1001F75C0LL);
      }

      uint64_t v97 = *v54;
      if (*v54)
      {
        unint64_t v98 = v97 + 16;
        uint64_t v99 = *(void *)(v96 + 32);
        Hasher.init(_seed:)(&v169, *(void *)(v97 + 16));
        uint64_t v100 = *(void (**)(uint64_t *))(*(void *)v99 + 192LL);
        swift_retain(v97);
        swift_retain(v99);
        v100(&v169);
        uint64_t v101 = Hasher._finalize()();
        uint64_t v102 = 1LL << *(void *)(v97 + 16);
        unint64_t v103 = __OFSUB__(v102, 1LL);
        unint64_t v104 = v102 - 1;
        if (v103) {
          goto LABEL_48;
        }
        uint64_t v105 = v97 + 32;
        uint64_t v85 = v104 & v101;
        uint64_t v106 = _HashTable.UnsafeHandle._startIterator(bucket:)(v104 & v101, v97 + 16, v97 + 32);
        a1 = v107;
        uint64_t v21 = v108;
        uint64_t v109 = swift_release(v99);
        uint64_t v169 = v97 + 16;
        uint64_t v170 = v97 + 32;
        uint64_t v171 = v85;
        unint64_t v172 = v106;
        uint64_t v173 = a1;
        uint64_t v174 = v21;
        uint64_t v175 = 0;
        int64_t v65 = v168;
        if (!v106)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }

        os_log_type_t v110 = 0;
        while (1)
        {
          uint64_t v179 = v98;
          v180[0] = v105;
          v180[1] = v85;
          v180[2] = v106;
          v180[3] = a1;
          v180[4] = v21;
          uint64_t v181 = v110 & 1;
          os_log_type_t v111 = _HashTable.BucketIterator.currentValue.getter(v109);
          if ((v112 & 1) == 0 && !v111) {
            break;
          }
          _HashTable.BucketIterator.advance()();
          unint64_t v98 = v169;
          uint64_t v105 = v170;
          uint64_t v85 = v171;
          uint64_t v106 = v172;
          a1 = v173;
          uint64_t v21 = v174;
          os_log_type_t v110 = v175;
          if (!v172) {
            goto LABEL_49;
          }
        }

        swift_release(v97);
        uint64_t v21 = v167;
      }

      else
      {
        uint64_t v85 = 0LL;
      }

      uint64_t v86 = sub_1001FA340(0LL, v85);
      swift_endAccess(&v176);
      swift_release(v86);
      sub_1001F942C();
      swift_release(v60);
      uint64_t v81 = v65[4];
    }

    while (*(void *)(v81 + 16));
  }

  char v82 = v161;
  sub_10017434C(v156, (uint64_t)v161);
  uint64_t v83 = v166;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v157)(v82, 1LL, v166) == 1)
  {
    swift_bridgeObjectRelease();
    return sub_1001FB770((uint64_t)v82);
  }

  else
  {
    swift_retain_n(v65, 2LL);
    uint64_t v113 = swift_bridgeObjectRetain();
    uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    unint64_t v115 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      uint64_t v117 = swift_slowAlloc(96LL, -1LL);
      uint64_t v169 = v117;
      *(_DWORD *)uint64_t v116 = 136315650;
      unint64_t v118 = _typeName(_:qualified:)(v164, 0LL);
      os_log_t v176 = sub_10015ADC4(v118, v119, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v116 + 4, v116 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v116 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v176 = sub_10015ADC4(v163, (unint64_t)v21, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v116 + 14, v116 + 22);
      uint64_t v120 = swift_bridgeObjectRelease_n(v21, 3LL);
      *(_WORD *)(v116 + 22) = 2080;
      uint64_t v121 = (*(uint64_t (**)(uint64_t))(*v65 + 192LL))(v120);
      os_log_t v176 = sub_10015ADC4(v121, v122, &v169);
      char v82 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v116 + 24, v116 + 32);
      swift_release_n(v65, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "[%s] rebuild<%s> - after fully advancing: %s",  (uint8_t *)v116,  0x20u);
      swift_arrayDestroy(v117, 3LL, (char *)&type metadata for Any + 8);
      uint64_t v123 = v117;
      uint64_t v83 = v166;
      swift_slowDealloc(v123, -1LL, -1LL);
      swift_slowDealloc(v116, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v65, 2LL);
      swift_bridgeObjectRelease_n(v21, 2LL);
    }

    uint64_t v124 = v82;
    os_log_type_t v125 = v83;
    return ((uint64_t (*)(_BYTE *, uint64_t))v165)(v124, v125);
  }

    if (v2 < 0) {
      uint64_t v29 = v2;
    }
    else {
      uint64_t v29 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v22 = v30 + v6;
    if (!__OFADD__(v30, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  char v31 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1046LL,  0);
  __break(1u);
  return result;
}

      swift_release(v948);
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }

    if (v146 == v857)
    {
      v23[12](v144, v125);
      a4 = *v144;
      unint64_t v197 = v144[1];
      uint64_t v198 = (uint64_t)v973;
      swift_bridgeObjectRetain();
      unint64_t v199 = sub_1002103C0(a4, v197, v198);
      swift_bridgeObjectRelease();
      if (v199)
      {
        swift_bridgeObjectRelease();
        swift_release(v948);
        swift_release(v199);
        v919 = a4;
        v916 = v197;
      }

      else
      {
        swift_bridgeObjectRelease();
        v348 = sub_1001741A8();
        (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v897, v348, v918);
        v349 = swift_allocObject(&unk_1003A8A58, 24LL, 7LL);
        *(void *)(v349 + 16) = v907;
        a4 = swift_allocObject(&unk_1003A8A80, 32LL, 7LL);
        *(void *)(a4 + 16) = sub_100212BD0;
        unint64_t v350 = v948;
        *(void *)(a4 + 24) = v948;
        uint64_t v351 = swift_retain(v350);
        v877 = (os_log_t)Logger.logObject.getter(v351);
        LODWORD(v876) = static os_log_type_t.error.getter();
        uint64_t v112 = swift_allocObject(&unk_1003A8AA8, 17LL, 7LL);
        *(_BYTE *)(v112 + 16) = 32;
        uint64_t v352 = swift_allocObject(&unk_1003A8AD0, 17LL, 7LL);
        unint64_t v115 = 8LL;
        *(_BYTE *)(v352 + 16) = 8;
        uint64_t v353 = swift_allocObject(&unk_1003A8AF8, 32LL, 7LL);
        *(void *)(v353 + 16) = sub_100212BE0;
        *(void *)(v353 + 24) = v349;
        uint64_t v354 = swift_allocObject(&unk_1003A8B20, 32LL, 7LL);
        *(void *)(v354 + 16) = sub_1002119EC;
        *(void *)(v354 + 24) = v353;
        uint64_t v116 = swift_allocObject(&unk_1003A8B48, 32LL, 7LL);
        *(void *)(v116 + 16) = sub_1001EFCC4;
        *(void *)(v116 + 24) = v354;
        unint64_t v355 = swift_allocObject(&unk_1003A8B70, 17LL, 7LL);
        *(_BYTE *)(v355 + 16) = 32;
        uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8B98, 17LL, 7LL);
        *((_BYTE *)v23 + 16) = 8;
        unint64_t v356 = swift_allocObject(&unk_1003A8BC0, 32LL, 7LL);
        *(void *)(v356 + 16) = sub_100212BD4;
        *(void *)(v356 + 24) = a4;
        os_log_type_t v125 = swift_allocObject(&unk_1003A8BE8, 32LL, 7LL);
        *(void *)(v125 + 16) = sub_1001EFCC4;
        *(void *)(v125 + 24) = v356;
        uint64_t v357 = sub_100156B68(&qword_1003FABA0);
        os_log_t v358 = swift_allocObject(v357, 128LL, 7LL);
        *(_OWORD *)(v358 + 16) = v895;
        *(void *)(v358 + 32) = sub_100212DA8;
        *(void *)(v358 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v112;
        *(void *)(v358 + 48) = sub_100212DA8;
        *(void *)(v358 + 56) = v352;
        *(void *)(v358 + 64) = sub_100212BDC;
        *(void *)(v358 + 72) = v116;
        *(void *)(v358 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212DA8;
        *(void *)(v358 + 88) = v355;
        *(void *)(v358 + 96) = sub_100212DA8;
        *(void *)(v358 + 104) = v23;
        *(void *)(v358 + 112) = sub_100212BDC;
        *(void *)(v358 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v125;
        swift_retain(v112);
        swift_retain(v352);
        swift_retain(v116);
        swift_retain(v355);
        swift_retain(v23);
        swift_retain(v125);
        uint64_t v359 = v877;
        swift_bridgeObjectRelease();
        if (!os_log_type_enabled(v359, (os_log_type_t)v876))
        {
          swift_release(v948);
          swift_release(v112);
          swift_release(v352);
          swift_release(v116);
          swift_release(v355);
          swift_release(v23);
          swift_release(v125);

          (*(void (**)(char *, uint64_t))(v917 + 8))(v897, v918);
          goto LABEL_113;
        }

        a4 = swift_slowAlloc(22LL, -1LL);
        v360 = swift_slowAlloc(64LL, -1LL);
        v970 = 0LL;
        v968[0] = v360;
        *(_WORD *)a4 = 514;
        *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
        unint64_t v115 = v955;
        if (v955) {
          goto LABEL_360;
        }
        v361 = v360;
        swift_release(v112);
        *(_BYTE *)(a4 + 3) = *(_BYTE *)(v352 + 16);
        v963 = (_BYTE *)(a4 + 4);
        swift_release(v352);
        sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
        swift_release(v116);
        v362 = v963;
        *v963 = *(_BYTE *)(v355 + 16);
        swift_release(v355);
        v362[1] = *((_BYTE *)v23 + 16);
        v963 = v362 + 2;
        uint64_t v116 = v903;
        swift_release(v23);
        sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
        a1 = v929;
        char v128 = v910;
        swift_release(v125);
        unint64_t v115 = (uint64_t)v877;
        _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v876,  "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.",  (uint8_t *)a4,  0x16u);
        swift_arrayDestroy(v361, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v361, -1LL, -1LL);
        swift_slowDealloc(a4, -1LL, -1LL);

        swift_release(v948);
        (*(void (**)(char *, uint64_t))(v917 + 8))(v897, v918);
      }

      goto LABEL_98;
    }

    if (v146 == v853)
    {
      v254 = v23[12](v144, v125);
      uint64_t v256 = *v144;
      v255 = v144[1];
      unint64_t v115 = (uint64_t)v911;
      RoutingSessionConfiguration.context.getter(v254);
      uint64_t v257 = sub_100255494();
      unsigned int v258 = (*(uint64_t (**)(uint64_t, uint64_t))(v912 + 8))(v115, v913);
      if ((v257 & 1) == 0)
      {
        swift_release(v948);
        swift_bridgeObjectRelease();
        goto LABEL_98;
      }

      unint64_t v115 = v948;
      a4 = (uint64_t)v888;
      (*(void (**)(uint64_t))(*(void *)v948 + 176LL))(v258);
      id v259 = (*(uint64_t (**)(uint64_t))(*(void *)v891 + 264LL))(a4);
      NSString v261 = v260;
      (*(void (**)(uint64_t, uint64_t))(v889 + 8))(a4, v890);
      if (v261)
      {
        swift_bridgeObjectRetain();
        v919 = v259;
        sub_10015B404((uint64_t *)&v963, v259, v261);
        swift_bridgeObjectRelease();
        id v262 = (uint64_t)v973;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v263 = v955;
        uint64_t v264 = sub_100211E80(v262, v256, v255);
        uint64_t v112 = v263;
        swift_bridgeObjectRelease();
        if (sub_100210400(v264) <= 1)
        {
          uint64_t v267 = v928;
        }

        else
        {
          v955 = v263;
          uint64_t v265 = sub_100174330();
          v266 = v883;
          sub_1001A8360(v265, v883, (uint64_t *)&unk_1003FBBE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v917 + 48))(v266, 1LL, v918) == 1)
          {
            sub_1001603DC(v266, (uint64_t *)&unk_1003FBBE0);
            uint64_t v267 = v928;
            uint64_t v112 = v955;
          }

          else
          {
            v839 = (void *)v256;
            uint64_t v419 = swift_allocObject(&unk_1003A87B0, 24LL, 7LL);
            *(void *)(v419 + 16) = v907;
            v420 = swift_allocObject(&unk_1003A87D8, 32LL, 7LL);
            os_log_t v421 = v948;
            *(void *)(v420 + 16) = sub_100212BD0;
            *(void *)(v420 + 24) = v421;
            uint64_t v422 = swift_allocObject(&unk_1003A8800, 24LL, 7LL);
            *(void *)(v422 + 16) = v264;
            v423 = swift_allocObject(&unk_1003A8828, 32LL, 7LL);
            v841 = v423;
            *(void *)(v423 + 16) = sub_100212DA4;
            *(void *)(v423 + 24) = v422;
            swift_retain(v421);
            v842 = v264;
            uint64_t v424 = swift_bridgeObjectRetain();
            v852 = (os_log_t)Logger.logObject.getter(v424);
            LODWORD(v85sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = static os_log_type_t.info.getter();
            v876 = (uint8_t *)swift_allocObject(&unk_1003A8850, 17LL, 7LL);
            v876[16] = 32;
            v854 = swift_allocObject(&unk_1003A8878, 17LL, 7LL);
            *(_BYTE *)(v854 + 16) = 8;
            os_log_t v425 = swift_allocObject(&unk_1003A88A0, 32LL, 7LL);
            *(void *)(v425 + 16) = sub_100212BE0;
            *(void *)(v425 + 24) = v419;
            v426 = swift_allocObject(&unk_1003A88C8, 32LL, 7LL);
            *(void *)(v426 + 16) = sub_1002119EC;
            *(void *)(v426 + 24) = v425;
            v427 = swift_allocObject(&unk_1003A88F0, 32LL, 7LL);
            *(void *)(v427 + 16) = sub_1001EFCC4;
            *(void *)(v427 + 24) = v426;
            v428 = (os_log_s *)swift_allocObject(&unk_1003A8918, 17LL, 7LL);
            *((_BYTE *)v428 + 16) = 32;
            uint64_t v429 = v428;
            v877 = v428;
            v844 = swift_allocObject(&unk_1003A8940, 17LL, 7LL);
            *(_BYTE *)(v844 + 16) = 8;
            v430 = swift_allocObject(&unk_1003A8968, 32LL, 7LL);
            *(void *)(v430 + 16) = sub_100212BD4;
            *(void *)(v430 + 24) = v420;
            uint64_t v431 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8990, 32LL, 7LL);
            v431[2] = (uint64_t (*)(uint64_t *, unint64_t))sub_1001EFCC4;
            v431[3] = (uint64_t (*)(uint64_t *, unint64_t))v430;
            v845 = swift_allocObject(&unk_1003A89B8, 17LL, 7LL);
            *(_BYTE *)(v845 + 16) = 32;
            v432 = swift_allocObject(&unk_1003A89E0, 17LL, 7LL);
            *(_BYTE *)(v432 + 16) = 8;
            os_log_t v433 = swift_allocObject(&unk_1003A8A08, 32LL, 7LL);
            uint64_t v434 = v841;
            *(void *)(v433 + 16) = sub_100212BD8;
            *(void *)(v433 + 24) = v434;
            v435 = swift_allocObject(&unk_1003A8A30, 32LL, 7LL);
            *(void *)(v435 + 16) = sub_1001EFCC4;
            *(void *)(v435 + 24) = v433;
            v436 = v427;
            v843 = v427;
            v437 = sub_100156B68(&qword_1003FABA0);
            v438 = swift_allocObject(v437, 176LL, 7LL);
            *(_OWORD *)(v438 + 16) = v856;
            *(void *)(v438 + 32) = sub_100212DA8;
            v439 = v876;
            *(void *)(v438 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v876;
            *(void *)(v438 + 48) = sub_100212DA8;
            v440 = v854;
            *(void *)(v438 + 56) = v854;
            *(void *)(v438 + 64) = sub_100212BDC;
            *(void *)(v438 + 72) = v436;
            *(void *)(v438 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212DA8;
            *(void *)(v438 + 88) = v429;
            *(void *)(v438 + 96) = sub_100212DA8;
            uint64_t v441 = v844;
            v442 = v845;
            *(void *)(v438 + 104) = v844;
            *(void *)(v438 + 112) = sub_100212BDC;
            *(void *)(v438 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v431;
            *(void *)(v438 + 128) = sub_100212DA8;
            *(void *)(v438 + 136) = v442;
            *(void *)(v438 + 144) = sub_100212DA8;
            *(void *)(v438 + 152) = v432;
            *(void *)(v438 + 16sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212BDC;
            *(void *)(v438 + 168) = v435;
            swift_retain(v439);
            v443 = v440;
            v444 = v843;
            swift_retain(v443);
            swift_retain(v444);
            swift_retain(v877);
            swift_retain(v441);
            v840 = v431;
            swift_retain(v431);
            swift_retain(v442);
            v841 = v432;
            swift_retain(v432);
            swift_retain(v435);
            v445 = v852;
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v445, (os_log_type_t)v851))
            {
              v446 = v854;
              v447 = (uint64_t (**)(void))v840;
              uint64_t v116 = v841;
              v838 = (uint64_t (**)(void))v435;
              v448 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
              v449 = swift_slowAlloc(96LL, -1LL);
              v970 = 0LL;
              v837 = v449;
              v968[0] = v449;
              *(_WORD *)v448 = 770;
              v450 = v876;
              v448[2] = v876[16];
              uint64_t v112 = v955;
              if (v955) {
                goto LABEL_366;
              }
              swift_release(v450);
              v448[3] = *(_BYTE *)(v446 + 16);
              v876 = v448;
              v963 = v448 + 4;
              uint64_t v264 = v842;
              uint64_t v256 = (uint64_t)v839;
              v451 = v447;
              swift_release(v446);
              v452 = v843;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v843 + 16));
              swift_release(v452);
              v453 = v877;
              v454 = v963;
              *v963 = *((_BYTE *)v877 + 16);
              swift_release(v453);
              v455 = v844;
              v454[1] = *(_BYTE *)(v844 + 16);
              v963 = v454 + 2;
              uint64_t v267 = v928;
              swift_release(v455);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, v451[2]);
              swift_release(v451);
              v456 = v845;
              v457 = v963;
              *v963 = *(_BYTE *)(v845 + 16);
              swift_release(v456);
              v457[1] = *(_BYTE *)(v116 + 16);
              v963 = v457 + 2;
              swift_release(v116);
              v458 = v838;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, v838[2]);
              v459 = v852;
              swift_release(v458);
              v460 = v876;
              _os_log_impl( (void *)&_mh_execute_header,  v459,  (os_log_type_t)v851,  "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s -> continuing",  v876,  0x20u);
              v461 = v837;
              swift_arrayDestroy(v837, 3LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v461, -1LL, -1LL);
              swift_slowDealloc(v460, -1LL, -1LL);

              v462 = v883;
            }

            else
            {

              swift_release(v876);
              swift_release(v854);
              swift_release(v444);
              swift_release(v877);
              swift_release(v441);
              swift_release(v840);
              swift_release(v442);
              swift_release(v841);
              swift_release(v435);
              uint64_t v267 = v928;
              v462 = v883;
              uint64_t v112 = v955;
              uint64_t v264 = v842;
              uint64_t v256 = (uint64_t)v839;
            }

            (*(void (**)(uint64_t, uint64_t))(v917 + 8))(v462, v918);
            uint64_t v116 = v903;
          }
        }

        swift_bridgeObjectRetain();
        unint64_t v115 = v112;
        sub_100212204(v264, v256, v255);
        v955 = v112;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v490 = v934;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v927 + 56))(v934, 1LL, 1LL, v267);
        swift_bridgeObjectRetain_n(v261, 2LL);
        a4 = v919;
        v491 = sub_100211BB4(v919, v261, v256, v255, v490);
        sub_100207EE4((uint64_t)v491, a4, v261);
        swift_bridgeObjectRelease();
        swift_release(v948);
        v916 = v261;
        goto LABEL_78;
      }

      swift_release(v115);
LABEL_54:
      swift_bridgeObjectRelease();
LABEL_79:
      uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
LABEL_80:
      char v128 = v910;
      os_log_type_t v125 = (unint64_t)v937;
      goto LABEL_116;
    }

    if (v146 == v849)
    {
      v23[12](v144, v125);
      a4 = *v144;
      uint64_t v324 = *(void *)(*v144 + 24);
      v877 = *(os_log_t *)(*v144 + 16);
      uint64_t v112 = *(void *)(a4 + 32);
      uint64_t v325 = *(void *)(a4 + 40);
      uint64_t v326 = *(uint8_t **)(a4 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v327 = swift_retain(v326);
      unint64_t v115 = (uint64_t)v911;
      RoutingSessionConfiguration.context.getter(v327);
      unint64_t v328 = sub_100255494();
      (*(void (**)(uint64_t, uint64_t))(v912 + 8))(v115, v913);
      if ((v328 & 1) != 0)
      {
        v854 = v324;
        v876 = v326;
        unint64_t v329 = (uint64_t *)sub_100249E64();
        uint64_t v330 = *v329;
        v331 = v329[1];
        v332 = v112 == *v329;
        unint64_t v115 = v948;
        uint64_t v333 = v112;
        v852 = (os_log_t)a4;
        if (v332 && v325 == v331 || (_stringCompareWithSmolCheck(_:_:expecting:)(v112, v325, v330, v331, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v334 = (uint64_t *)sub_10024B258();
          uint64_t v335 = *v334;
          uint64_t v336 = v334[1];
          uint64_t v337 = (uint64_t)v973;
          swift_bridgeObjectRetain();
          uint64_t v112 = sub_1002103C0(v335, v336, v337);
          swift_bridgeObjectRelease();
          if (v112)
          {
            uint64_t v338 = sub_1002103C0((uint64_t)v877, v854, v337);
            swift_bridgeObjectRelease();
            if (v338)
            {
              v339 = v338
                   + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
              swift_beginAccess( v338 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo,  &v961,  0LL,  0LL);
              v340 = v339;
              a4 = v875;
              sub_1001A8360(v340, v875, &qword_1003F9450);
              swift_release(v338);
              v341 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v927 + 48))(a4, 1LL, v928);
              uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
              v342 = (void **)v881;
              os_log_type_t v125 = (unint64_t)v937;
              uint64_t v116 = v903;
              if (v341 != 1)
              {
                sub_1001A81D4(a4, v881, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                int v344 = *v342;
                os_log_type_t v343 = v342[1];
                swift_bridgeObjectRetain();
                uint64_t v345 = sub_100255AB4();
                if (v343)
                {
                  if (v344 == v345 && v343 == v346)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v347 = v870;
                    sub_1001A80F8(v881, (uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                    goto LABEL_201;
                  }

                  v595 = _stringCompareWithSmolCheck(_:_:expecting:)(v344, v343, v345, v346, 0LL);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v347 = v870;
                  sub_1001A80F8(v881, (uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  if ((v595 & 1) != 0)
                  {
LABEL_201:
                    sub_1001A813C((uint64_t)v347, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_215:
                    v919 = v112;
                    a4 = sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
                    v645 = *(void *)(v881 + 32);
                    v646 = *(unsigned int *)(v881 + 40);
                    v647 = *(unsigned __int8 *)(v881 + 44);
                    sub_1001A8278(v645, v646, *(_BYTE *)(v881 + 44));
                    v829 = v829 & 0xFFFFFF0000000000LL | v646 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v647 << 32);
                    v648 = sub_10024F830(v645);
                    v650 = v649;
                    sub_1001A0918(v645, v646, v647);
                    LOBYTE(v648) = sub_1002A2758(v648, v650);
                    v651 = swift_bridgeObjectRelease();
                    if ((v648 & 1) != 0)
                    {
                      v652 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v651);
                      v654 = sub_1002A2758(v652, v653);
                      swift_bridgeObjectRelease();
                      if ((v654 & 1) != 0) {
                        goto LABEL_219;
                      }
                    }

                    sub_1001A8278(v645, v646, v647);
                    v828 = v828 & 0xFFFFFF0000000000LL | (v647 << 32) | v646;
                    v655 = sub_10024F830(v645);
                    v657 = v656;
                    sub_1001A0918(v645, v646, v647);
                    LOBYTE(v655) = sub_1002A2764(v655, v657);
                    v658 = swift_bridgeObjectRelease();
                    if ((v655 & 1) == 0) {
                      goto LABEL_220;
                    }
                    v659 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v658);
                    v661 = sub_1002A2764(v659, v660);
                    swift_bridgeObjectRelease();
                    if ((v661 & 1) != 0)
                    {
LABEL_219:
                      v662 = v934;
                      sub_1001A81D4(v881, v934, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v927 + 56))(v662, 0LL, 1LL, v928);
                      a4 = v861;
                      sub_100212430(v662, v861);
                      uint64_t v112 = v919;
                      v663 = v919
                           + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
                      swift_beginAccess( v919 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo,  &v963,  33LL,  0LL);
                      sub_100212478(a4, v663);
                      swift_endAccess(&v963);
                      uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
                      os_log_type_t v125 = (unint64_t)v937;
                      uint64_t v116 = v903;
                    }

                    else
                    {
LABEL_220:
                      sub_1001A813C(v881, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                      uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
                      os_log_type_t v125 = (unint64_t)v937;
                      uint64_t v116 = v903;
                      uint64_t v112 = v919;
                    }

                    goto LABEL_151;
                  }
                }

                else
                {
                  swift_bridgeObjectRelease();
                  uint64_t v347 = v870;
                  sub_1001A80F8( (uint64_t)v342,  (uint64_t)v870,  type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                }

                v596 = *v347;
                a4 = v347[1];
                v597 = swift_bridgeObjectRetain();
                v598 = RoutingInteraction.Action.HandoffContext.mediaTitle.getter(v597);
                if (a4)
                {
                  if (v596 == v598 && a4 == v599)
                  {
                    swift_bridgeObjectRelease();
                    sub_1001A813C((uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                    swift_bridgeObjectRelease();
                    goto LABEL_215;
                  }

                  v644 = _stringCompareWithSmolCheck(_:_:expecting:)(v596, a4, v598, v599, 0LL);
                  swift_bridgeObjectRelease();
                  sub_1001A813C((uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  swift_bridgeObjectRelease();
                  if ((v644 & 1) != 0) {
                    goto LABEL_215;
                  }
                }

                else
                {
                  sub_1001A813C((uint64_t)v347, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  swift_bridgeObjectRelease();
                }

                sub_1001A813C(v881, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                os_log_type_t v125 = (unint64_t)v937;
LABEL_151:
                v489 = v334[1];
                v919 = *v334;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_release(v115);
                swift_release(v876);
                swift_release(v112);
                swift_release(v852);
                v916 = v489;
                a1 = v929;
                char v128 = v910;
                goto LABEL_116;
              }
            }

            else
            {
              a4 = v875;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v927 + 56))(v875, 1LL, 1LL, v928);
              uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
              os_log_type_t v125 = (unint64_t)v937;
              uint64_t v116 = v903;
            }

            sub_1001603DC(a4, &qword_1003F9450);
            goto LABEL_151;
          }

          swift_bridgeObjectRelease();
          v463 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v880, v463, v918);
          v464 = swift_allocObject(&unk_1003A85F8, 24LL, 7LL);
          *(void *)(v464 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A8620, 32LL, 7LL);
          *(void *)(a4 + 16) = sub_100212BD0;
          *(void *)(a4 + 24) = v115;
          v465 = swift_retain(v115);
          v877 = (os_log_t)Logger.logObject.getter(v465);
          LODWORD(v854) = static os_log_type_t.error.getter();
          uint64_t v112 = swift_allocObject(&unk_1003A8648, 17LL, 7LL);
          *(_BYTE *)(v112 + 16) = 32;
          v466 = swift_allocObject(&unk_1003A8670, 17LL, 7LL);
          unint64_t v115 = 8LL;
          *(_BYTE *)(v466 + 16) = 8;
          v467 = swift_allocObject(&unk_1003A8698, 32LL, 7LL);
          *(void *)(v467 + 16) = sub_100212BE0;
          *(void *)(v467 + 24) = v464;
          v468 = swift_allocObject(&unk_1003A86C0, 32LL, 7LL);
          *(void *)(v468 + 16) = sub_1002119EC;
          *(void *)(v468 + 24) = v467;
          uint64_t v116 = swift_allocObject(&unk_1003A86E8, 32LL, 7LL);
          *(void *)(v116 + 16) = sub_1001EFCC4;
          *(void *)(v116 + 24) = v468;
          v469 = swift_allocObject(&unk_1003A8710, 17LL, 7LL);
          *(_BYTE *)(v469 + 16) = 32;
          uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8738, 17LL, 7LL);
          *((_BYTE *)v23 + 16) = 8;
          v470 = swift_allocObject(&unk_1003A8760, 32LL, 7LL);
          *(void *)(v470 + 16) = sub_100212BD4;
          *(void *)(v470 + 24) = a4;
          os_log_type_t v125 = swift_allocObject(&unk_1003A8788, 32LL, 7LL);
          *(void *)(v125 + 16) = sub_1001EFCC4;
          *(void *)(v125 + 24) = v470;
          v471 = sub_100156B68(&qword_1003FABA0);
          v472 = swift_allocObject(v471, 128LL, 7LL);
          *(_OWORD *)(v472 + 16) = v895;
          *(void *)(v472 + 32) = sub_100212DA8;
          *(void *)(v472 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v112;
          *(void *)(v472 + 48) = sub_100212DA8;
          *(void *)(v472 + 56) = v466;
          *(void *)(v472 + 64) = sub_100212BDC;
          *(void *)(v472 + 72) = v116;
          *(void *)(v472 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212DA8;
          *(void *)(v472 + 88) = v469;
          *(void *)(v472 + 96) = sub_100212DA8;
          *(void *)(v472 + 104) = v23;
          *(void *)(v472 + 112) = sub_100212BDC;
          *(void *)(v472 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v125;
          swift_retain(v112);
          swift_retain(v466);
          swift_retain(v116);
          swift_retain(v469);
          swift_retain(v23);
          swift_retain(v125);
          v473 = v877;
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v473, (os_log_type_t)v854))
          {
            swift_release(v948);
            swift_release(v876);
            swift_release(v112);
            swift_release(v466);
            swift_release(v116);
            swift_release(v469);
            swift_release(v23);
            swift_release(v125);

            (*(void (**)(char *, uint64_t))(v917 + 8))(v880, v918);
            goto LABEL_156;
          }

          a4 = swift_slowAlloc(22LL, -1LL);
          v474 = swift_slowAlloc(64LL, -1LL);
          v970 = 0LL;
          v968[0] = v474;
          *(_WORD *)a4 = 514;
          *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
          unint64_t v115 = v955;
          if (v955) {
            goto LABEL_360;
          }
          v475 = v474;
          swift_release(v112);
          *(_BYTE *)(a4 + 3) = *(_BYTE *)(v466 + 16);
          v963 = (_BYTE *)(a4 + 4);
          swift_release(v466);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
          swift_release(v116);
          v476 = v963;
          *v963 = *(_BYTE *)(v469 + 16);
          swift_release(v469);
          v476[1] = *((_BYTE *)v23 + 16);
          v963 = v476 + 2;
          uint64_t v116 = v903;
          swift_release(v23);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
          a1 = v929;
          char v128 = v910;
          swift_release(v125);
          unint64_t v115 = (uint64_t)v877;
          _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v854,  "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.",  (uint8_t *)a4,  0x16u);
          swift_arrayDestroy(v475, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v475, -1LL, -1LL);
          swift_slowDealloc(a4, -1LL, -1LL);
          swift_release(v876);

          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v880, v918);
          goto LABEL_136;
        }

        v477 = sub_10024B258();
        v478 = *((void *)v477 + 1);
        if ((v877 != *(os_log_t *)v477 || v854 != v478)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v877, v854, *(void *)v477, v478, 0LL) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v581 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v865, v581, v918);
          v582 = swift_allocObject(&unk_1003A8198, 24LL, 7LL);
          *(void *)(v582 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A81C0, 32LL, 7LL);
          *(void *)(a4 + 16) = sub_100212BD0;
          *(void *)(a4 + 24) = v115;
          v583 = swift_retain(v115);
          v877 = (os_log_t)Logger.logObject.getter(v583);
          LODWORD(v854) = static os_log_type_t.fault.getter();
          uint64_t v112 = swift_allocObject(&unk_1003A81E8, 17LL, 7LL);
          *(_BYTE *)(v112 + 16) = 32;
          v584 = swift_allocObject(&unk_1003A8210, 17LL, 7LL);
          unint64_t v115 = 8LL;
          *(_BYTE *)(v584 + 16) = 8;
          v585 = swift_allocObject(&unk_1003A8238, 32LL, 7LL);
          *(void *)(v585 + 16) = sub_100212BE0;
          *(void *)(v585 + 24) = v582;
          v586 = swift_allocObject(&unk_1003A8260, 32LL, 7LL);
          *(void *)(v586 + 16) = sub_1002119EC;
          *(void *)(v586 + 24) = v585;
          uint64_t v116 = swift_allocObject(&unk_1003A8288, 32LL, 7LL);
          *(void *)(v116 + 16) = sub_1001EFCC4;
          *(void *)(v116 + 24) = v586;
          v587 = swift_allocObject(&unk_1003A82B0, 17LL, 7LL);
          *(_BYTE *)(v587 + 16) = 32;
          uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A82D8, 17LL, 7LL);
          *((_BYTE *)v23 + 16) = 8;
          v588 = swift_allocObject(&unk_1003A8300, 32LL, 7LL);
          *(void *)(v588 + 16) = sub_100212BD4;
          *(void *)(v588 + 24) = a4;
          os_log_type_t v125 = swift_allocObject(&unk_1003A8328, 32LL, 7LL);
          *(void *)(v125 + 16) = sub_1001EFCC4;
          *(void *)(v125 + 24) = v588;
          v589 = sub_100156B68(&qword_1003FABA0);
          v590 = swift_allocObject(v589, 128LL, 7LL);
          *(_OWORD *)(v590 + 16) = v895;
          *(void *)(v590 + 32) = sub_100212DA8;
          *(void *)(v590 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v112;
          *(void *)(v590 + 48) = sub_100212DA8;
          *(void *)(v590 + 56) = v584;
          *(void *)(v590 + 64) = sub_100212BDC;
          *(void *)(v590 + 72) = v116;
          *(void *)(v590 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212DA8;
          *(void *)(v590 + 88) = v587;
          *(void *)(v590 + 96) = sub_100212DA8;
          *(void *)(v590 + 104) = v23;
          *(void *)(v590 + 112) = sub_100212BDC;
          *(void *)(v590 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v125;
          swift_retain(v112);
          swift_retain(v584);
          swift_retain(v116);
          swift_retain(v587);
          swift_retain(v23);
          swift_retain(v125);
          v591 = v877;
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v591, (os_log_type_t)v854))
          {
            swift_release(v948);
            swift_release(v876);
            swift_release(v112);
            swift_release(v584);
            swift_release(v116);
            swift_release(v587);
            swift_release(v23);
            swift_release(v125);

            (*(void (**)(char *, uint64_t))(v917 + 8))(v865, v918);
LABEL_156:
            v492 = v852;
            goto LABEL_208;
          }

          a4 = swift_slowAlloc(22LL, -1LL);
          v592 = swift_slowAlloc(64LL, -1LL);
          v970 = 0LL;
          v968[0] = v592;
          *(_WORD *)a4 = 514;
          *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
          unint64_t v115 = v955;
          if (v955) {
            goto LABEL_360;
          }
          v593 = v592;
          swift_release(v112);
          *(_BYTE *)(a4 + 3) = *(_BYTE *)(v584 + 16);
          v963 = (_BYTE *)(a4 + 4);
          swift_release(v584);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
          swift_release(v116);
          v594 = v963;
          *v963 = *(_BYTE *)(v587 + 16);
          swift_release(v587);
          v594[1] = *((_BYTE *)v23 + 16);
          v963 = v594 + 2;
          uint64_t v116 = v903;
          swift_release(v23);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
          a1 = v929;
          char v128 = v910;
          swift_release(v125);
          unint64_t v115 = (uint64_t)v877;
          _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v854,  "[%s] optimisticSessions - Inconsistency when applying event: %s. Handoff does not match push or pull action -> skipping",  (uint8_t *)a4,  0x16u);
          swift_arrayDestroy(v593, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v593, -1LL, -1LL);
          swift_slowDealloc(a4, -1LL, -1LL);
          swift_release(v876);

          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v865, v918);
LABEL_136:
          swift_release(v852);
LABEL_98:
          uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
          os_log_type_t v125 = (unint64_t)v937;
          goto LABEL_116;
        }

        a4 = (uint64_t)v888;
        (*(void (**)(void))(*(void *)v115 + 176LL))();
        v479 = (*(uint64_t (**)(uint64_t))(*(void *)v891 + 264LL))(a4);
        v481 = v480;
        (*(void (**)(uint64_t, uint64_t))(v889 + 8))(a4, v890);
        if (v481)
        {
          swift_bridgeObjectRetain();
          v919 = v479;
          sub_10015B404((uint64_t *)&v963, v479, v481);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v482 = swift_bridgeObjectRetain();
          v483 = v955;
          v484 = (os_log_s *)sub_100211E80(v482, v112, v325);
          swift_bridgeObjectRelease();
          v851 = v484;
          v485 = sub_100210400((uint64_t)v484);
          v844 = v481;
          v955 = v483;
          if (v485 <= 1) {
            goto LABEL_147;
          }
          v486 = sub_100174330();
          v487 = v863;
          sub_1001A8360(v486, v863, (uint64_t *)&unk_1003FBBE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v917 + 48))(v487, 1LL, v918) == 1)
          {
            sub_1001603DC(v487, (uint64_t *)&unk_1003FBBE0);
LABEL_147:
            v488 = v928;
          }

          else
          {
            v600 = swift_allocObject(&unk_1003A8350, 24LL, 7LL);
            *(void *)(v600 + 16) = v907;
            v601 = swift_allocObject(&unk_1003A8378, 32LL, 7LL);
            v602 = v948;
            *(void *)(v601 + 16) = sub_100212BD0;
            *(void *)(v601 + 24) = v602;
            v603 = swift_allocObject(&unk_1003A83A0, 24LL, 7LL);
            *(void *)(v603 + 16) = v851;
            v604 = swift_allocObject(&unk_1003A83C8, 32LL, 7LL);
            v831 = v604;
            *(void *)(v604 + 16) = sub_100212DA4;
            *(void *)(v604 + 24) = v603;
            swift_retain(v602);
            v605 = swift_bridgeObjectRetain();
            v840 = (uint64_t (**)(uint64_t *, unint64_t))Logger.logObject.getter(v605);
            LODWORD(v839) = static os_log_type_t.info.getter();
            v842 = swift_allocObject(&unk_1003A83F0, 17LL, 7LL);
            *(_BYTE *)(v842 + 16) = 32;
            v606 = swift_allocObject(&unk_1003A8418, 17LL, 7LL);
            *(_BYTE *)(v606 + 16) = 8;
            v607 = swift_allocObject(&unk_1003A8440, 32LL, 7LL);
            *(void *)(v607 + 16) = sub_100212BE0;
            *(void *)(v607 + 24) = v600;
            v608 = swift_allocObject(&unk_1003A8468, 32LL, 7LL);
            *(void *)(v608 + 16) = sub_1002119EC;
            *(void *)(v608 + 24) = v607;
            v609 = swift_allocObject(&unk_1003A8490, 32LL, 7LL);
            *(void *)(v609 + 16) = sub_1001EFCC4;
            *(void *)(v609 + 24) = v608;
            v610 = swift_allocObject(&unk_1003A84B8, 17LL, 7LL);
            *(_BYTE *)(v610 + 16) = 32;
            v611 = v610;
            v843 = v610;
            v841 = swift_allocObject(&unk_1003A84E0, 17LL, 7LL);
            *(_BYTE *)(v841 + 16) = 8;
            v612 = swift_allocObject(&unk_1003A8508, 32LL, 7LL);
            *(void *)(v612 + 16) = sub_100212BD4;
            *(void *)(v612 + 24) = v601;
            v613 = swift_allocObject(&unk_1003A8530, 32LL, 7LL);
            v837 = v613;
            *(void *)(v613 + 16) = sub_1001EFCC4;
            *(void *)(v613 + 24) = v612;
            v614 = swift_allocObject(&unk_1003A8558, 17LL, 7LL);
            *(_BYTE *)(v614 + 16) = 32;
            v615 = v614;
            v838 = (uint64_t (**)(void))v614;
            v845 = swift_allocObject(&unk_1003A8580, 17LL, 7LL);
            *(_BYTE *)(v845 + 16) = 8;
            v616 = swift_allocObject(&unk_1003A85A8, 32LL, 7LL);
            v617 = v831;
            *(void *)(v616 + 16) = sub_100212378;
            *(void *)(v616 + 24) = v617;
            v618 = swift_allocObject(&unk_1003A85D0, 32LL, 7LL);
            *(void *)(v618 + 16) = sub_1001EFCC4;
            *(void *)(v618 + 24) = v616;
            v619 = sub_100156B68(&qword_1003FABA0);
            v620 = swift_allocObject(v619, 176LL, 7LL);
            *(_OWORD *)(v620 + 16) = v856;
            *(void *)(v620 + 32) = sub_100212DA8;
            v621 = v842;
            *(void *)(v620 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v842;
            *(void *)(v620 + 48) = sub_100212DA8;
            *(void *)(v620 + 56) = v606;
            *(void *)(v620 + 64) = sub_100212BDC;
            *(void *)(v620 + 72) = v609;
            *(void *)(v620 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212DA8;
            *(void *)(v620 + 88) = v611;
            *(void *)(v620 + 96) = sub_100212DA8;
            v622 = v841;
            *(void *)(v620 + 104) = v841;
            *(void *)(v620 + 112) = sub_100212BDC;
            v623 = v837;
            *(void *)(v620 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v837;
            *(void *)(v620 + 128) = sub_100212DA8;
            *(void *)(v620 + 136) = v615;
            *(void *)(v620 + 144) = sub_100212DA8;
            v624 = v845;
            *(void *)(v620 + 152) = v845;
            *(void *)(v620 + 16sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100212BDC;
            *(void *)(v620 + 168) = v618;
            swift_retain(v621);
            v830 = v606;
            swift_retain(v606);
            v831 = v609;
            swift_retain(v609);
            swift_retain(v843);
            v625 = v838;
            swift_retain(v622);
            swift_retain(v623);
            swift_retain(v625);
            swift_retain(v624);
            swift_retain(v618);
            swift_bridgeObjectRelease();
            v626 = (os_log_t)v840;
            if (os_log_type_enabled((os_log_t)v840, (os_log_type_t)v839))
            {
              uint64_t v116 = v830;
              v627 = v841;
              v628 = swift_slowAlloc(32LL, -1LL);
              v629 = swift_slowAlloc(96LL, -1LL);
              v970 = 0LL;
              v825 = v629;
              v968[0] = v629;
              *(_WORD *)v628 = 770;
              v630 = v842;
              *(_BYTE *)(v628 + 2) = *(_BYTE *)(v842 + 16);
              uint64_t v112 = v955;
              if (v955) {
                goto LABEL_366;
              }
              swift_release(v630);
              *(_BYTE *)(v628 + 3) = *(_BYTE *)(v116 + 16);
              v963 = (_BYTE *)(v628 + 4);
              v631 = v116;
              v632 = (uint8_t *)v628;
              swift_release(v631);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v831 + 16));
              swift_release(v831);
              v633 = v843;
              v634 = v963;
              *v963 = *(_BYTE *)(v843 + 16);
              swift_release(v633);
              v635 = v627;
              v634[1] = *(_BYTE *)(v627 + 16);
              v963 = v634 + 2;
              v636 = v863;
              swift_release(v635);
              v637 = v837;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v837 + 16));
              swift_release(v637);
              v638 = v838;
              v639 = v963;
              *v963 = *((_BYTE *)v838 + 16);
              swift_release(v638);
              v640 = v845;
              v639[1] = *(_BYTE *)(v845 + 16);
              v963 = v639 + 2;
              v488 = v928;
              swift_release(v640);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v618 + 16));
              v641 = (os_log_s *)v840;
              swift_release(v618);
              v642 = v632;
              _os_log_impl( (void *)&_mh_execute_header,  v641,  (os_log_type_t)v839,  "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s -> continuing",  v632,  0x20u);
              v643 = v825;
              swift_arrayDestroy(v825, 3LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v643, -1LL, -1LL);
              swift_slowDealloc(v642, -1LL, -1LL);
            }

            else
            {

              swift_release(v842);
              swift_release(v830);
              swift_release(v831);
              swift_release(v843);
              swift_release(v841);
              swift_release(v623);
              swift_release(v625);
              swift_release(v845);
              swift_release(v618);
              v488 = v928;
              v636 = v863;
            }

            (*(void (**)(uint64_t, uint64_t))(v917 + 8))(v636, v918);
            a1 = v929;
          }

          v845 = v333;
          v664 = v927;
          v665 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v927 + 56);
          v665(v871, 1LL, 1LL, v488);
          v666 = sub_1002103C0((uint64_t)v877, v854, (uint64_t)v973);
          swift_bridgeObjectRelease();
          if (v666)
          {
            v667 = v666
                 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
            swift_beginAccess( v666 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo,  &v962,  0LL,  0LL);
            v668 = v667;
            v669 = v864;
            sub_1001A8360(v668, v864, &qword_1003F9450);
            swift_release(v666);
            v670 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v664 + 48))(v669, 1LL, v488);
            uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
            os_log_type_t v125 = (unint64_t)v937;
            if (v670 != 1)
            {
              v671 = (void **)v866;
              sub_1001A81D4(v669, v866, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              v673 = *v671;
              v672 = v671[1];
              swift_bridgeObjectRetain();
              v674 = sub_100255AB4();
              if (v672)
              {
                if (v673 == v674 && v672 == v675)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v676 = v862;
                  sub_1001A80F8(v866, (uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  goto LABEL_234;
                }

                v677 = _stringCompareWithSmolCheck(_:_:expecting:)(v673, v672, v674, v675, 0LL);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v676 = v862;
                sub_1001A80F8(v866, (uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                if ((v677 & 1) != 0)
                {
LABEL_234:
                  sub_1001A813C((uint64_t)v676, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_241:
                  sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
                  v684 = *(void *)(v866 + 32);
                  v685 = *(unsigned int *)(v866 + 40);
                  v686 = *(unsigned __int8 *)(v866 + 44);
                  sub_1001A8278(v684, v685, *(_BYTE *)(v866 + 44));
                  v827 = v827 & 0xFFFFFF0000000000LL | v685 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v686 << 32);
                  v687 = sub_10024F830(v684);
                  v689 = v688;
                  sub_1001A0918(v684, v685, v686);
                  LOBYTE(v687) = sub_1002A2758(v687, v689);
                  v690 = swift_bridgeObjectRelease();
                  if ((v687 & 1) != 0)
                  {
                    v691 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v690);
                    v693 = sub_1002A2758(v691, v692);
                    swift_bridgeObjectRelease();
                    if ((v693 & 1) != 0) {
                      goto LABEL_245;
                    }
                  }

                  sub_1001A8278(v684, v685, v686);
                  v826 = v826 & 0xFFFFFF0000000000LL | (v686 << 32) | v685;
                  v694 = sub_10024F830(v684);
                  v696 = v695;
                  sub_1001A0918(v684, v685, v686);
                  LOBYTE(v694) = sub_1002A2764(v694, v696);
                  v697 = swift_bridgeObjectRelease();
                  if ((v694 & 1) == 0) {
                    goto LABEL_246;
                  }
                  v698 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v697);
                  v700 = sub_1002A2764(v698, v699);
                  swift_bridgeObjectRelease();
                  if ((v700 & 1) != 0)
                  {
LABEL_245:
                    v701 = v871;
                    sub_1001603DC(v871, &qword_1003F9450);
                    sub_1001A81D4(v866, v701, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                    v665(v701, 0LL, 1LL, v928);
                    a1 = v929;
                    uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
                    os_log_type_t v125 = (unint64_t)v937;
                  }

                  else
                  {
LABEL_246:
                    sub_1001A813C(v866, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                    a1 = v929;
                    uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
                    os_log_type_t v125 = (unint64_t)v937;
                  }

                  goto LABEL_248;
                }
              }

              else
              {
                swift_bridgeObjectRelease();
                v676 = v862;
                sub_1001A80F8(v866, (uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              }

              v679 = *v676;
              v678 = v676[1];
              v680 = swift_bridgeObjectRetain();
              v681 = RoutingInteraction.Action.HandoffContext.mediaTitle.getter(v680);
              if (v678)
              {
                if (v679 == v681 && v678 == v682)
                {
                  swift_bridgeObjectRelease();
                  sub_1001A813C((uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  swift_bridgeObjectRelease();
                  goto LABEL_241;
                }

                v683 = _stringCompareWithSmolCheck(_:_:expecting:)(v679, v678, v681, v682, 0LL);
                swift_bridgeObjectRelease();
                sub_1001A813C((uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                swift_bridgeObjectRelease();
                if ((v683 & 1) != 0) {
                  goto LABEL_241;
                }
              }

              else
              {
                sub_1001A813C((uint64_t)v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                swift_bridgeObjectRelease();
              }

              sub_1001A813C(v866, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_248:
              v702 = v325;
              swift_bridgeObjectRetain();
              uint64_t v112 = v845;
              v703 = v955;
              sub_100212204((uint64_t)v851, v845, v325);
              v955 = v703;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v115 = v871;
              v704 = v934;
              sub_1001A8360(v871, v934, &qword_1003F9450);
              v705 = v844;
              swift_bridgeObjectRetain_n(v844, 2LL);
              a4 = v919;
              v706 = sub_100211BB4(v919, v705, v112, v702, v704);
              sub_100207EE4((uint64_t)v706, a4, v705);
              swift_release(v876);
              swift_release(v948);
              swift_bridgeObjectRelease();
              sub_1001603DC(v115, &qword_1003F9450);
              swift_release(v852);
              v916 = v705;
              char v128 = v910;
              goto LABEL_115;
            }
          }

          else
          {
            v669 = v864;
            v665(v864, 1LL, 1LL, v488);
            uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
            os_log_type_t v125 = (unint64_t)v937;
          }

          sub_1001603DC(v669, &qword_1003F9450);
          goto LABEL_248;
        }

        swift_release(v115);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(v876);
        swift_release(v852);
      }

      else
      {
        swift_release(v948);
        swift_release(v326);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(a4);
      }

      goto LABEL_79;
    }

    if (v146 != v848) {
      goto LABEL_362;
    }
    v23[12](v144, v125);
    v877 = (os_log_t)*v144;
    uint64_t v399 = swift_projectBox(v877);
    v400 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v893 + 16))(v896, v399, v894);
    int v401 = v911;
    RoutingSessionConfiguration.context.getter(v400);
    v402 = sub_100255494();
    v403 = (*(uint64_t (**)(char *, uint64_t))(v912 + 8))(v401, v913);
    uint64_t v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
    if ((v402 & 1) != 0) {
      goto LABEL_159;
    }
    a4 = (uint64_t)v884;
    RoutingControl.target.getter(v403);
    unint64_t v115 = v886;
    uint64_t v112 = *(void *)(v886 + 88);
    v404 = v892;
    v405 = ((uint64_t (*)(uint64_t, uint64_t))v112)(a4, v892);
    if (v405 == v847)
    {
      (*(void (**)(uint64_t, uint64_t))(v115 + 96))(a4, v404);
      unint64_t v115 = *(void *)a4;
      __n128 v406 = *(void *)(a4 + 8);
      uint64_t v407 = sub_10024B258();
      uint64_t v408 = *(void *)v407;
      os_log_t v409 = *((void *)v407 + 1);
      if (v115 != *(void *)v407 || v406 != v409)
      {
        v410 = v115;
        goto LABEL_158;
      }
    }

    else
    {
      uint64_t v412 = a4;
      a4 = *(void *)(v115 + 8);
      v413 = ((uint64_t (*)(uint64_t, uint64_t))a4)(v412, v404);
      v414 = v878;
      RoutingControl.target.getter(v413);
      v415 = v892;
      os_log_t v416 = ((uint64_t (*)(uint64_t *, uint64_t))v112)(v414, v892);
      if (v416 != v836)
      {
        v403 = ((uint64_t (*)(uint64_t *, uint64_t))a4)(v414, v415);
        goto LABEL_159;
      }

      (*(void (**)(uint64_t *, uint64_t))(v115 + 96))(v414, v415);
      a4 = sub_10024A2D0(*v414, v414[1]);
      __n128 v406 = v417;
      swift_bridgeObjectRelease();
      v418 = sub_10024B258();
      uint64_t v408 = *(void *)v418;
      os_log_t v409 = *((void *)v418 + 1);
      if (a4 != *(void *)v418 || v406 != v409)
      {
        v410 = a4;
LABEL_158:
        a4 = _stringCompareWithSmolCheck(_:_:expecting:)(v410, v406, v408, v409, 0LL);
        v403 = swift_bridgeObjectRelease();
        if ((a4 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
          swift_release(v948);
LABEL_178:
          uint64_t v161 = v877;
          goto LABEL_25;
        }

  swift_release(v183);
  uint64_t v96 = 1LL << *(_BYTE *)(v191 + 32);
  uint64_t v97 = -1LL;
  if (v96 < 64) {
    uint64_t v97 = ~(-1LL << v96);
  }
  unint64_t v98 = v97 & *(void *)(v191 + 56);
  uint64_t v180 = (unint64_t)(v96 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v99 = 0LL;
  uint64_t v100 = (uint64_t)v177;
  uint64_t v101 = v182;
  while (2)
  {
    if (v98)
    {
      uint64_t v105 = __clz(__rbit64(v98));
      v98 &= v98 - 1;
      uint64_t v106 = v105 | (v99 << 6);
LABEL_74:
      os_log_type_t v110 = *(void *)(v191 + 48);
      os_log_t v184 = *(char **)(v10 + 72);
      os_log_type_t v111 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      uint64_t v112 = v181;
      v111(v181, v110 + (void)v184 * v106, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v100, v112, v9);
      if (*(void *)(*v101 + 16))
      {
        swift_bridgeObjectRetain();
        sub_10028C468(v100);
        uint64_t v114 = v113;
        swift_bridgeObjectRelease();
        if ((v114 & 1) != 0)
        {
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v100, v9);
          continue;
        }
      }

      os_log_type_t v188 = v98;
      uint64_t v189 = v99;
      unint64_t v115 = v10;
      uint64_t v116 = (uint64_t)v187;
      v111(v187, v100, v9);
      type metadata accessor for RoutingItemDataSource(0LL);
      v111(v21, v100, v9);
      uint64_t v117 = v101;
      unint64_t v118 = (uint64_t)v186;
      unint64_t v119 = *(void *)((char *)v186 + v185);
      swift_retain(v119);
      uint64_t v120 = sub_100175D44();
      swift_unknownObjectRetain(v118);
      uint64_t v121 = sub_100175D5C(v21, v119, v118, (uint64_t)&off_1003AB878, v120);
      swift_beginAccess(v117, &v195, 33LL, 0LL);
      uint64_t v122 = swift_isUniquelyReferenced_nonNull_native(*v117);
      uint64_t v194 = (void *)*v117;
      uint64_t v123 = (uint64_t)v194;
      *uint64_t v117 = 0x8000000000000000LL;
      os_log_type_t v125 = sub_10028C468(v116);
      uint64_t v126 = *(void *)(v123 + 16);
      uint64_t v127 = (v124 & 1) == 0;
      char v128 = v126 + v127;
      if (__OFADD__(v126, v127))
      {
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }

      uint64_t v129 = v124;
      if (*(void *)(v123 + 24) >= v128)
      {
        uint64_t v10 = v115;
        if ((v122 & 1) != 0)
        {
          uint64_t v132 = v194;
          if ((v124 & 1) == 0) {
            goto LABEL_84;
          }
        }

        else
        {
          sub_10028DE40();
          uint64_t v132 = v194;
          if ((v129 & 1) == 0) {
            goto LABEL_84;
          }
        }
      }

      else
      {
        sub_10028CCB0(v128, v122);
        uint64_t v130 = sub_10028C468((uint64_t)v187);
        if ((v129 & 1) != (v131 & 1)) {
          goto LABEL_116;
        }
        os_log_type_t v125 = v130;
        uint64_t v10 = v115;
        uint64_t v132 = v194;
        if ((v129 & 1) == 0)
        {
LABEL_84:
          v132[(v125 >> 6) + 8] |= 1LL << v125;
          v111((char *)(v132[6] + v125 * (void)v184), (unint64_t)v187, v9);
          *(void *)(v132[7] + 8 * v125) = v121;
          unint64_t v133 = v132[2];
          uint64_t v134 = __OFADD__(v133, 1LL);
          unint64_t v135 = v133 + 1;
          if (v134) {
            goto LABEL_111;
          }
          v132[2] = v135;
          goto LABEL_57;
        }
      }

      uint64_t v102 = v132[7];
      unint64_t v103 = 8 * v125;
      swift_release(*(void *)(v102 + v103));
      *(void *)(v102 + v103) = v121;
LABEL_57:
      uint64_t v101 = v182;
      *uint64_t v182 = (uint64_t)v132;
      swift_bridgeObjectRelease();
      unint64_t v104 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v104((uint64_t)v187, v9);
      swift_endAccess(&v195);
      uint64_t v100 = (uint64_t)v177;
      unint64_t v98 = v188;
      uint64_t v99 = v189;
      v104((uint64_t)v177, v9);
      continue;
    }

    break;
  }

  uint64_t v107 = v99 + 1;
  if (__OFADD__(v99, 1LL)) {
    goto LABEL_110;
  }
  if (v107 >= v180)
  {
LABEL_88:
    swift_release(v191);
    if (*(void *)(*(void *)((char *)v186 + v160) + 16LL))
    {
      uint64_t v136 = v186;
      swift_beginAccess(v186 + 2, &v195, 0LL, 0LL);
      unint64_t v137 = v136[2];
      if ((v137 & 0xC000000000000001LL) != 0)
      {
        if (v137 < 0) {
          uint64_t v138 = v137;
        }
        else {
          uint64_t v138 = v137 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v139 = __CocoaSet.count.getter(v138);
        swift_bridgeObjectRelease();
        if (v139) {
          goto LABEL_94;
        }
LABEL_101:
        sub_10026DE84();
        return swift_bridgeObjectRelease();
      }

      if (!*(void *)(v137 + 16)) {
        goto LABEL_101;
      }
    }

Swift::Int sub_1001EA538(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100156B68(&qword_1003F81F8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
      swift_bridgeObjectRetain();
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1001EA6DC(uint64_t a1)
{
}

uint64_t sub_1001EA6EC()
{
  sub_1001608B8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_1001EA728()
{
}

unint64_t sub_1001EA758()
{
  unint64_t result = qword_1003F9AC0;
  if (!qword_1003F9AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C988, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003F9AC0);
  }

  return result;
}

unint64_t sub_1001EA7A0()
{
  unint64_t result = qword_1003F9AC8;
  if (!qword_1003F9AC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CAB0, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003F9AC8);
  }

  return result;
}

unint64_t sub_1001EA7E8()
{
  unint64_t result = qword_1003F9AD0;
  if (!qword_1003F9AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C9B0, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003F9AD0);
  }

  return result;
}

unint64_t sub_1001EA830()
{
  unint64_t result = qword_1003F9AD8;
  if (!qword_1003F9AD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C9F0, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003F9AD8);
  }

  return result;
}

unint64_t sub_1001EA87C()
{
  unint64_t result = qword_1003F9AE8;
  if (!qword_1003F9AE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MRDFastSyncGroupSessionState,  &type metadata for MRDFastSyncGroupSessionState);
    atomic_store(result, (unint64_t *)&qword_1003F9AE8);
  }

  return result;
}

ValueMetadata *type metadata accessor for FastSyncSessionError()
{
  return &type metadata for FastSyncSessionError;
}

ValueMetadata *type metadata accessor for MRDFastSyncGroupSessionState()
{
  return &type metadata for MRDFastSyncGroupSessionState;
}

uint64_t type metadata accessor for JoinTimingEvents()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE16JoinTimingEvents);
}

uint64_t type metadata accessor for SessionTimingEvents()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE19SessionTimingEvents);
}

uint64_t sub_1001EA920()
{
  return type metadata accessor for PresenceDataSource(0LL);
}

uint64_t type metadata accessor for PresenceDataSource(uint64_t a1)
{
  uint64_t result = qword_1003FF4E0;
  if (!qword_1003FF4E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PresenceDataSource);
  }
  return result;
}

void sub_1001EA964(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = &unk_10034CCD8;
  v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1001EAA34(319LL, &qword_1003F9E48, &qword_1003F9E50);
  if (v3 <= 0x3F)
  {
    v6[5] = *(void *)(v2 - 8) + 64LL;
    sub_1001EAA34(319LL, &qword_1003F9E58, qword_1003F9E60);
    if (v5 <= 0x3F)
    {
      v6[6] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 7LL, v6, a1 + 80);
    }
  }

void sub_1001EAA34(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = sub_100160358(a3);
    unint64_t v6 = type metadata accessor for Published(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *sub_1001EAA80()
{
  return &protocol witness table for String;
}

uint64_t sub_1001EAA8C()
{
  return sub_1001EAB1C(&qword_1003FF670, (uint64_t)&unk_10034CD38);
}

uint64_t sub_1001EAAB0()
{
  return sub_1001EAB1C(qword_1003FF678, (uint64_t)&unk_10034CD10);
}

uint64_t sub_1001EAAD4()
{
  return sub_1001EAB1C(&qword_1003FF700, (uint64_t)&unk_10034CD98);
}

uint64_t sub_1001EAAF8()
{
  return sub_1001EAB1C(qword_1003FF708, (uint64_t)&unk_10034CD60);
}

uint64_t sub_1001EAB1C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for RemoteControlActivity();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_1001EAB58()
{
  return &protocol witness table for String;
}

void *sub_1001EAB64()
{
  return &protocol witness table for String;
}

unint64_t sub_1001EAB70()
{
  unint64_t result = qword_1003FF790[0];
  if (!qword_1003FF790[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D05C, &type metadata for RemoteControlActivity.CodingKeys);
    atomic_store(result, qword_1003FF790);
  }

  return result;
}

uint64_t sub_1001EABB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Participant(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v27 = a1;
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v25 = a2 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v26 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0LL;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v13,  *(void *)(a2 + 48) + *(void *)(v8 + 72) * i,  v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    sub_1001CC2D4(&v27, (uint64_t)v11, a3);
    if (v3)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      return swift_release(a2);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v22 >= v26) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v26) {
        goto LABEL_25;
      }
      unint64_t v23 = *(void *)(v25 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v26) {
          goto LABEL_25;
        }
        unint64_t v23 = *(void *)(v25 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v26) {
            goto LABEL_25;
          }
          unint64_t v23 = *(void *)(v25 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }

uint64_t sub_1001EAE28(uint64_t a1)
{
  uint64_t v47 = a1;
  uint64_t v2 = type metadata accessor for Participant(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char **)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *unint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_4;
  }

  if ((v1[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0)
  {
    unint64_t v27 = sub_1001E8078();
    uint64_t v28 = swift_allocError(&type metadata for FastSyncSessionError, v27, 0LL, 0LL);
    *uint64_t v29 = 5LL;
    sub_1001CF668(v28);
    return swift_errorRelease(v28);
  }

  if (qword_1003FF010 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v46 = v3;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
  uint64_t v16 = v1;
  unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    unint64_t v44 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(8LL, -1LL);
    uint64_t v45 = v2;
    int64_t v22 = (void *)v21;
    *(_DWORD *)unint64_t v20 = 138543362;
    int64_t v49 = v16;
    unint64_t v23 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v20 + 4, v20 + 12);
    *int64_t v22 = v16;

    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "[%{public}@] Leader should not receive session end messages.",  v20,  0xCu);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v22, 1LL, v24);
    uint64_t v25 = v22;
    uint64_t v2 = v45;
    swift_slowDealloc(v25, -1LL, -1LL);
    int64_t v26 = v20;
    uint64_t v5 = v44;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    unint64_t v17 = (os_log_s *)v16;
  }

  uint64_t v32 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
  uint64_t v31 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
  uint64_t v33 = type metadata accessor for TaskPriority(0LL);
  uint64_t v34 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v48, 1LL, 1LL, v33);
  uint64_t v35 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v35 + 16, v16);
  uint64_t v36 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v5, v47, v2);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v38 = v5;
  uint64_t v39 = (v37 + 40) & ~v37;
  unint64_t v40 = (v4 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v41 = (char *)swift_allocObject(&unk_1003A5E20, v40 + 16, v37 | 7);
  *((void *)v41 + 2) = 0LL;
  *((void *)v41 + 3) = 0LL;
  *((void *)v41 + 4) = v35;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v41[v39], v38, v2);
  uint64_t v42 = &v41[v40];
  *(void *)uint64_t v42 = v32;
  *((void *)v42 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v31;
  swift_bridgeObjectRetain();
  uint64_t v43 = sub_10015AA50(v34, (uint64_t)&unk_1003FA070, (uint64_t)v41);
  return swift_release(v43);
}

void sub_1001EB200(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v125 = a1;
  uint64_t v3 = type metadata accessor for Participant(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v123 = v3;
  uint64_t v124 = v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v120 = &v116[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v116[-v8];
  __chkstk_darwin(v7);
  unint64_t v11 = &v116[-v10];
  uint64_t v12 = type metadata accessor for Participants(0LL);
  uint64_t v121 = *(void *)(v12 - 8);
  uint64_t v122 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v116[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = &v116[-v17];
  __chkstk_darwin(v16);
  unint64_t v20 = &v116[-v19];
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = &v116[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  uint64_t v27 = (*(uint64_t (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }

  if (v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1)
  {
    if (qword_1003FF010 == -1)
    {
LABEL_7:
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v34, (uint64_t)qword_1003FF018);
      uint64_t v35 = v2;
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v39 = (char **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v38 = 138543362;
        char v128 = v35;
        unint64_t v40 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v38 + 4, v38 + 12);
        *uint64_t v39 = v35;

        _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "[%{public}@] Participant should not receive transport migration messages.",  v38,  0xCu);
        uint64_t v41 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v39, 1LL, v41);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);

        return;
      }

      goto LABEL_22;
    }

void sub_1001EC050(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v113 = type metadata accessor for DispatchWorkItemFlags(0LL);
  os_log_t v112 = *(os_log_t *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  id v108 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Participant(0LL);
  id v114 = *(void (***)(char *, os_log_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v103 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (void (**)(char *, os_log_t))((char *)&v103 - v13);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (uint64_t *)((char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  uint64_t v21 = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v22 = Participant.handle.getter(v21);
  uint64_t v24 = v23;
  uint64_t v25 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess( &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  v123,  0LL,  0LL);
  uint64_t v26 = *(void *)v25;
  if (!*(void *)(v26 + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v6;
    goto LABEL_12;
  }

  swift_bridgeObjectRetain();
  unint64_t v27 = sub_10015CAD4(v22, v24);
  uint64_t v16 = v6;
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v14 = v114;
    if (qword_1003FF010 == -1)
    {
LABEL_13:
      uint64_t v48 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v48, (uint64_t)qword_1003FF018);
      ((void (*)(char *, uint64_t, uint64_t))v14[2])(v9, a1, v16);
      int64_t v49 = v2;
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = swift_slowAlloc(32LL, -1LL);
        uint64_t v53 = (char **)swift_slowAlloc(8LL, -1LL);
        uint64_t v113 = swift_slowAlloc(64LL, -1LL);
        aBlock[0] = v113;
        *(_DWORD *)uint64_t v52 = 138543874;
        os_log_t v112 = (os_log_t)v16;
        uint64_t v121 = (uint64_t)v49;
        uint64_t v54 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v52 + 4, v52 + 12);
        *uint64_t v53 = v49;

        *(_WORD *)(v52 + 12) = 2080;
        uint64_t v121 = sub_10015ADC4(0xD00000000000002CLL, 0x800000010033C170LL, aBlock);
        uint64_t v55 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v52 + 14, v52 + 22);
        *(_WORD *)(v52 + 22) = 2082;
        uint64_t v56 = Participant.handle.getter(v55);
        uint64_t v121 = sub_10015ADC4(v56, v57, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v52 + 24, v52 + 32);
        swift_bridgeObjectRelease();
        v114[1](v9, v112);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "[%{public}@] %s message received from unknown handle: %{public}s",  (uint8_t *)v52,  0x20u);
        uint64_t v58 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v53, 1LL, v58);
        swift_slowDealloc(v53, -1LL, -1LL);
        uint64_t v59 = v113;
        swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      else
      {

        v14[1](v9, (os_log_t)v16);
      }

      return;
    }

uint64_t sub_1001ECD20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  char v34 = (unint64_t *)result;
  uint64_t v35 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v6 = a3 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = 1LL << *(_BYTE *)(v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & v7;
  uint64_t v37 = v6;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v41 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      if (*(void *)(v4 + 16)) {
        goto LABEL_23;
      }
    }

    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v14 >= v38) {
      return sub_1001E4B48(v34, a2, v35, a3);
    }
    unint64_t v15 = *(void *)(v37 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v38) {
        return sub_1001E4B48(v34, a2, v35, a3);
      }
      unint64_t v15 = *(void *)(v37 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v38) {
          return sub_1001E4B48(v34, a2, v35, a3);
        }
        unint64_t v15 = *(void *)(v37 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_1001ED00C(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001ECD20((uint64_t)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7, a1, a2);
    uint64_t v11 = swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow(v11);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    unint64_t v12 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001ECD20((uint64_t)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return v10;
}

uint64_t sub_1001ED1C0(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_1001ED22C()
{
  return 25705LL;
}

unint64_t sub_1001ED238()
{
  uint64_t v0 = sub_100156B68(&qword_1003F9E98);
  uint64_t inited = swift_initStackObject(v0, v8);
  *(_OWORD *)(inited + 16) = xmmword_10034BD10;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034CE40);
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinPresenceAssertionDurationKey);
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034CE68);
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinProviderJoinDurationKey);
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = swift_getKeyPath(&unk_10034CE90);
  *(void *)(inited + 88) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinSessionYieldDurationKey);
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034CEB8);
  *(void *)(inited + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinStateJoinedDurationKey);
  *(void *)(inited + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v5;
  *(void *)(inited + 128) = swift_getKeyPath(&unk_10034CEE0);
  *(void *)(inited + 136) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinStateConnectedDurationKey);
  *(void *)(inited + 144) = v6;
  return sub_1001B7CFC(inited, &qword_1003F9EA0, &qword_1003F9EA8);
}

unint64_t sub_1001ED348()
{
  unint64_t result = qword_1003F9ED0;
  if (!qword_1003F9ED0)
  {
    uint64_t v1 = sub_10016083C(255LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1003F9ED0);
  }

  return result;
}

uint64_t sub_1001ED3A4()
{
  uint64_t v1 = *(char **)(v0 + 16);
  uint64_t v2 = *(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (!v2
    || (uint64_t v3 = swift_retain(*(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]),
        uint64_t v4 = GroupSession.activeParticipants.getter(v3),
        swift_release(v2),
        uint64_t v5 = v1,
        char v6 = sub_1001E9630(v4, (uint64_t)v5),
        v5,
        uint64_t result = swift_bridgeObjectRelease(),
        (v6 & 1) == 0))
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v8, (uint64_t)qword_1003FF018);
    uint64_t v9 = v1;
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      unint64_t v13 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = (uint64_t)v9;
      v23[0] = v21;
      *(_DWORD *)uint64_t v12 = 138412546;
      uint64_t v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 4, v12 + 12);
      *unint64_t v13 = v9;

      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v16 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v15 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_10015ADC4(v16, v15, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();

      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%@]<%{public}s> Leader remains undiscovered.",  (uint8_t *)v12,  0x16u);
      uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v13, 1LL, v17);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v18 = sub_1001E8078();
    uint64_t v19 = swift_allocError(&type metadata for FastSyncSessionError, v18, 0LL, 0LL);
    *Swift::Int v20 = 4LL;
    sub_1001CF668(v19);
    return swift_errorRelease(v19);
  }

  return result;
}

uint64_t sub_1001ED660()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

unint64_t sub_1001ED6C0()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + 16) = xmmword_10034BE40;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventDurationKey);
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v3;
  Date.timeIntervalSinceNow.getter(v2);
  *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
  return sub_10016995C(inited);
}

uint64_t sub_1001ED74C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001ED770(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001ED778()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001ED79C(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = sub_100156B68(&qword_1003F9F48);
  return v3(v4, v5, &a1[*(int *)(v6 + 48)]);
}

uint64_t sub_1001ED7F4()
{
  return sub_1001ED8D4((uint64_t (*)(void, void, void, void, uint64_t))sub_1001D54A4);
}

uint64_t sub_1001ED800(uint64_t result, uint64_t a2, unint64_t a3)
{
  return result;
}

uint64_t sub_1001ED81C(uint64_t result, uint64_t a2, unint64_t a3)
{
  return result;
}

uint64_t sub_1001ED83C()
{
  return sub_1001ED8D4((uint64_t (*)(void, void, void, void, uint64_t))sub_1001D5A00);
}

uint64_t sub_1001ED84C()
{
  uint64_t v1 = type metadata accessor for GroupSessionMessenger.MessageContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  sub_1001608B8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001ED8C8()
{
  return sub_1001ED8D4((uint64_t (*)(void, void, void, void, uint64_t))sub_1001D5C94);
}

uint64_t sub_1001ED8D4(uint64_t (*a1)(void, void, void, void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for GroupSessionMessenger.MessageContext(0LL) - 8) + 80LL);
  return a1( *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  v1 + ((v2 + 48) & ~v2));
}

uint64_t sub_1001ED920()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_1001ED944()
{
  return sub_1001EEFF4((SEL *)&selRef_session_didChangeState_);
}

uint64_t sub_1001ED950()
{
  return sub_1001EF6D8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001ED95C(uint64_t *a1)
{
  return sub_1001D07C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001ED968()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001ED9A4()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = (void *)swift_task_alloc(dword_1003F9F8C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100160A04;
  return sub_1001D14A8((uint64_t)v6, v7, v8, v2, v3, v5, v4);
}

uint64_t sub_1001EDA08()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001EDA3C()
{
  __int128 v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1003F9F9C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100160A04;
  *(void *)(v3 + 224) = v2;
  *(_OWORD *)(v3 + 208) = v5;
  return swift_task_switch(sub_1001D29E8, 0LL, 0LL);
}

void sub_1001EDAAC()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    unint64_t v3 = sub_1001E8078();
    uint64_t v4 = swift_allocError(&type metadata for FastSyncSessionError, v3, 0LL, 0LL);
    *__int128 v5 = 0LL;
    sub_1001CF668(v4);
    swift_errorRelease(v4);
  }

uint64_t sub_1001EDB28()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001EDB64()
{
  uint64_t v2 = swift_task_alloc(dword_1003F9FCC);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10015FD10;
  *(_OWORD *)(v2 + 20sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v4;
  *(_OWORD *)(v2 + 184) = v3;
  return swift_task_switch(sub_1001DD8B0, 0LL, 0LL);
}

void sub_1001EDBC8(uint64_t a1, uint64_t a2)
{
  sub_1001DF858( *(char **)(*(void *)(v2 + 16)
             + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence),
    a2);
}

uint64_t sub_1001EDBF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001EDC04()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001EDC38()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v4 = v0[4];
  unint64_t v3 = v0[5];
  uint64_t v5 = sub_1001D0D28(v2);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v6, (uint64_t)qword_1003FF018);
  id v7 = v1;
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v8 = (char *)v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v38 = v4;
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    os_log_t log = v10;
    unint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = (uint64_t)v8;
    v42[0] = v40;
    *(_DWORD *)uint64_t v12 = 138543874;
    uint64_t v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v12 + 4, v12 + 12);
    unint64_t v15 = v13;
    *unint64_t v13 = v8;

    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_10015ADC4(v38, v3, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(v3, 3LL);
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = Array.description.getter(v16, &type metadata for String);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_10015ADC4(v17, v19, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v5, 2LL);
    uint64_t v10 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v11,  "[%{public}@]<%{public}s> NearbyGroup tokens: %s",  (uint8_t *)v12,  0x20u);
    uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v15, 1LL, v20);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  uint64_t v21 = sub_1001C785C( v2,  (uint64_t)v42,  (uint64_t (*)(void))&type metadata accessor for NearbyGroup.Member,  (uint64_t (*)(uint64_t))&NearbyGroup.Member.handle.getter);
  uint64_t v22 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
  if (v22)
  {
    unint64_t v23 = (void *)v21;
    uint64_t v24 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
    swift_bridgeObjectRetain_n(*(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8], 2LL);
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0) {
      uint64_t v26 = sub_1001E1164(0LL, v23[2] + 1LL, 1, v23);
    }
    unint64_t v28 = v26[2];
    unint64_t v27 = v26[3];
    if (v28 >= v27 >> 1) {
      uint64_t v26 = sub_1001E1164((void *)(v27 > 1), v28 + 1, 1, v26);
    }
    v26[2] = v28 + 1;
    uint64_t v29 = &v26[2 * v28];
    _BYTE v29[4] = v24;
    v29[5] = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = (char *)*(id *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = sub_1001A6418(v31);
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)&v30[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members];
    *(void *)&v30[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members] = v32;
    sub_1001DD1E8(v33, v34);
    swift_bridgeObjectRelease();

    if (v8[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1)
    {
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v35 = *(void **)&v8[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
    if (v35)
    {
      id v36 = v35;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v36 updateAllowedDestinations:isa];

      sub_1001CC604(0);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1001EE0A8()
{
  return sub_1001EF6D8((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001EE0B4()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v3 = v0[2] + 16LL;
  swift_beginAccess(v3, v28, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = Strong + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap;
    swift_beginAccess( Strong + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap,  v27,  0LL,  0LL);
    if (*(void *)(*(void *)v6 + 16LL))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10015CAD4(v1, v2);
      char v8 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        uint64_t v9 = type metadata accessor for Logger(0LL);
        sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
        id v10 = v5;
        swift_bridgeObjectRetain_n(v2, 2LL);
        os_log_type_t v11 = (char *)v10;
        uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          os_log_type_t type = v13;
          uint64_t v14 = swift_slowAlloc(32LL, -1LL);
          uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v23 = swift_slowAlloc(64LL, -1LL);
          uint64_t v24 = v11;
          v26[0] = v23;
          *(_DWORD *)uint64_t v14 = 138543874;
          unint64_t v15 = v11;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
          *uint64_t v21 = v5;

          *(_WORD *)(v14 + 12) = 2082;
          uint64_t v16 = v11;
          uint64_t v18 = *(void *)&v15[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
          unint64_t v17 = *(void *)&v15[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
          swift_bridgeObjectRetain();
          uint64_t v24 = (char *)sub_10015ADC4(v18, v17, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 14, v14 + 22);
          os_log_type_t v11 = v16;
          swift_bridgeObjectRelease();

          *(_WORD *)(v14 + 22) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v24 = (char *)sub_10015ADC4(v1, v2, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 24, v14 + 32);
          swift_bridgeObjectRelease_n(v2, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v12,  type,  "[%{public}@]<%{public}s> Lost handle: %{public}s timed out.",  (uint8_t *)v14,  0x20u);
          uint64_t v19 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
          swift_arrayDestroy(v21, 1LL, v19);
          swift_slowDealloc(v21, -1LL, -1LL);
          swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v23, -1LL, -1LL);
          swift_slowDealloc(v14, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v2, 2LL);
        }

        swift_beginAccess(v6, v26, 33LL, 0LL);
        swift_bridgeObjectRetain();
        uint64_t v20 = (void *)sub_1001E22B0(v1, v2);
        swift_endAccess(v26);
        swift_bridgeObjectRelease();

        swift_beginAccess(&v11[OBJC_IVAR___MRDFastSyncGroupSession_timedOutParticipantHandles], v26, 33LL, 0LL);
        swift_bridgeObjectRetain();
        sub_10015B404((uint64_t *)&v24, v1, v2);
        swift_endAccess(v26);
        swift_bridgeObjectRelease();
        sub_1001CC604(0LL);
      }
    }
  }

uint64_t sub_1001EE49C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001EE4D0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  unint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8LL);
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v4 session:v1 didUpdateMembers:isa];
    swift_unknownObjectRelease(v4);
  }

  uint64_t v6 = v2();
  if (v6)
  {
    char v7 = (void *)v6;
    sub_10016083C(0LL, &qword_1003FA000, off_100397320);
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    [v7 session:v1 didUpdateParticipants:v8];
    swift_unknownObjectRelease(v7);
  }

uint64_t sub_1001EE5EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_1001EE614()
{
  return sub_1001EE674((SEL *)&selRef_session_didReceiveRemoteRemoveRequestForParticipant_from_);
}

void *sub_1001EE624()
{
  return sub_1001EE674((SEL *)&selRef_session_didReceiveRemoteRejectionForPendingParticipant_from_);
}

uint64_t sub_1001EE634()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void *sub_1001EE668()
{
  return sub_1001EE674((SEL *)&selRef_session_didReceiveRemoteApprovalForPendingParticipant_from_);
}

void *sub_1001EE674(SEL *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x2B8LL))();
  if (result)
  {
    Class v8 = result;
    objc_msgSend(result, *a1, v4, v5, v6);
    return (void *)swift_unknownObjectRelease(v8);
  }

  return result;
}

uint64_t sub_1001EE6FC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1001EE710(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1001EE728()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1003FA024);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100160A04;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return swift_task_switch(sub_1001C445C, 0LL, 0LL);
}

uint64_t sub_1001EE7C8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001EE804()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8LL);
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v4 session:v1 didUpdateMembers:isa];
    swift_unknownObjectRelease(v4);
  }

  uint64_t v6 = v2();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    sub_10016083C(0LL, &qword_1003FA000, off_100397320);
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    [v7 session:v1 didUpdateParticipants:v8];
    swift_unknownObjectRelease(v7);
  }

  uint64_t v9 = v2();
  if (v9)
  {
    id v10 = (void *)v9;
    sub_10016083C(0LL, &qword_1003FA000, off_100397320);
    Class v11 = Array._bridgeToObjectiveC()().super.isa;
    [v10 session:v1 didUpdatePendingParticipants:v11];
    swift_unknownObjectRelease(v10);
  }

void *sub_1001EE97C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8LL))();
  if (result)
  {
    uint64_t v3 = result;
    [result sessionDidCompleteIdentityShare:v1];
    return (void *)swift_unknownObjectRelease(v3);
  }

  return result;
}

void sub_1001EE9DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

    swift_bridgeObjectRelease(a6);
  }

uint64_t sub_1001EEA28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_1001EEA70(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    swift_errorRetain(a1);
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    id v5 = v3;
    swift_errorRetain(a1);
    id v6 = v5;
    swift_errorRetain(a1);
    id v7 = v6;
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      id v10 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v18 = (uint64_t)v7;
      uint64_t v19 = v11;
      *(_DWORD *)uint64_t v9 = 138543874;
      uint64_t v12 = (char *)v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4, v9 + 12);
      *id v10 = v7;

      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_10015ADC4(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();

      *(_WORD *)(v9 + 22) = 2114;
      swift_errorRetain(a1);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v18 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 24, v9 + 32);
      v10[1] = v15;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v8,  "[%{public}@]<%{public}s> IdentityShareReplyMessage send error %{public}@.",  (uint8_t *)v9,  0x20u);
      uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v10, 2LL, v16);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

uint64_t sub_1001EED54()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  id v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1003FA04C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100160A04;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return swift_task_switch(sub_1001C445C, 0LL, 0LL);
}

unint64_t sub_1001EEDF4()
{
  unint64_t result = qword_1003FA058;
  if (!qword_1003FA058)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ED58, &type metadata for FastSyncMessageType);
    atomic_store(result, (unint64_t *)&qword_1003FA058);
  }

  return result;
}

unint64_t sub_1001EEE38()
{
  unint64_t result = qword_1003FA060;
  if (!qword_1003FA060)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034EDF8, &type metadata for FastSyncMessageType);
    atomic_store(result, &qword_1003FA060);
  }

  return result;
}

uint64_t sub_1001EEE80()
{
  uint64_t v1 = type metadata accessor for Participant(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001EEF1C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1003FA06C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_10015FD10;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return swift_task_switch(sub_1001C81B8, 0LL, 0LL);
}

uint64_t sub_1001EEFBC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_1001EEFE8()
{
  return sub_1001EEFF4((SEL *)&selRef_session_didReceiveRemoteRemoveAllRequestFromParticipant_);
}

void *sub_1001EEFF4(SEL *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  unint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x2B8LL))();
  if (result)
  {
    uint64_t v7 = result;
    objc_msgSend(result, *a1, v4, v5);
    return (void *)swift_unknownObjectRelease(v7);
  }

  return result;
}

uint64_t sub_1001EF06C()
{
  return sub_1001EF9C0((void (*)(void))&_swift_release);
}

void sub_1001EF078()
{
}

uint64_t sub_1001EF080(uint64_t *a1)
{
  return sub_1001C12A0(a1, v1);
}

uint64_t sub_1001EF088(uint64_t a1)
{
  return sub_1001C179C(a1, v1);
}

uint64_t sub_1001EF090()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9F58);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001EF108()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100156B68(&qword_1003F9F58) - 8) + 80LL);
  sub_1001D34D0((os_log_s *)(v0 + ((v1 + 24) & ~v1)));
}

uint64_t sub_1001EF14C()
{
  return sub_1001EF9C0((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001EF158()
{
}

uint64_t sub_1001EF17C()
{
  return sub_1001B6474(*(void **)(v0 + 16));
}

uint64_t sub_1001EF184()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001EF1B0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1003FA0CC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100160A04;
  return sub_1001B67EC((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1001EF1FC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v2, (uint64_t)qword_1003FF018);
  uint64_t v3 = v1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = (uint64_t)v3;
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v6 = 138543618;
    uint64_t v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v6 + 4, v6 + 12);
    *uint64_t v7 = v3;

    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v9 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_10015ADC4(v10, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%{public}@]<%{public}s> Timed out waiting for session.",  (uint8_t *)v6,  0x16u);
    uint64_t v11 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v7, 1LL, v11);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v12 = sub_1001E8078();
  uint64_t v13 = swift_allocError(&type metadata for FastSyncSessionError, v12, 0LL, 0LL);
  *unint64_t v14 = 1LL;
  uint64_t v22 = sub_1001B28A4();
  uint64_t v15 = type metadata accessor for JoinTimingEvents();
  sub_1002050AC(v13, v15, (uint64_t)&off_1003A55E0);
  uint64_t v16 = *(void *)&v3[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings];
  *(void *)&v3[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = v22;
  swift_release(v16);
  swift_errorRelease(v13);
  uint64_t v17 = swift_allocError(&type metadata for FastSyncSessionError, v12, 0LL, 0LL);
  void *v18 = 1LL;
  sub_1001CF668(v17);
  return swift_errorRelease(v17);
}

uint64_t sub_1001EF4D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001EF4F4(uint64_t a1)
{
}

unint64_t sub_1001EF4FC()
{
  unint64_t result = qword_1003FA108;
  if (!qword_1003FA108)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CA68, &type metadata for FastSyncSessionError);
    atomic_store(result, (unint64_t *)&qword_1003FA108);
  }

  return result;
}

uint64_t sub_1001EF540()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001EF574()
{
  uint64_t v2 = swift_task_alloc(dword_1003FA11C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100160A04;
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_1001CFEBC, 0LL, 0LL);
}

uint64_t sub_1001EF5D4()
{
  return sub_1001EF71C(6LL);
}

uint64_t sub_1001EF5DC()
{
  return sub_1001EF6D8((void (*)(void))&_swift_release);
}

uint64_t sub_1001EF5E8(uint64_t a1)
{
  return sub_1001BF978(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001EF5F8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  os_log_type_t v5 = (void *)swift_task_alloc(dword_1003FA134);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *os_log_type_t v5 = v1;
  v5[1] = sub_100160A04;
  return sub_1001BFD88((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1001EF660()
{
  return sub_1001EF9C0((void (*)(void))&_swift_errorRelease);
}

void *sub_1001EF66C()
{
  return sub_1001CF668(*(void *)(v0 + 24));
}

uint64_t sub_1001EF690()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0LL);
}

uint64_t sub_1001EF6B8()
{
  return sub_1001EF71C(2LL);
}

uint64_t sub_1001EF6C0()
{
  return sub_1001EF71C(3LL);
}

uint64_t sub_1001EF6CC()
{
  return sub_1001EF6D8((void (*)(void))&_swift_release);
}

uint64_t sub_1001EF6D8(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_1001EF710(uint64_t a1)
{
}

uint64_t sub_1001EF71C(uint64_t a1)
{
  uint64_t v3 = *(void (**)(void))(v1 + 16);
  unint64_t v4 = sub_1001E8078();
  uint64_t v5 = swift_allocError(&type metadata for FastSyncSessionError, v4, 0LL, 0LL);
  *uint64_t v6 = a1;
  v3();
  return swift_errorRelease(v5);
}

uint64_t sub_1001EF774()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001EF7A8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003FA144);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return sub_1001BD63C((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1001EF80C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1001EF838()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001EF864()
{
  return sub_1001EF9C0((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001EF870()
{
  return sub_1001EF87C((void (*)(void))&_swift_release);
}

uint64_t sub_1001EF87C(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_1001EF8B4()
{
  return sub_1001BE0EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001EF8C0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001EF8FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc(dword_1003FA15C);
  __int128 v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100160A04;
  *(_OWORD *)(v4 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v5;
  *(void *)(v4 + 64) = v2;
  *(void *)(v4 + 72) = v3;
  return swift_task_switch(sub_1001B98D4, 0LL, 0LL);
}

uint64_t sub_1001EF96C(uint64_t a1)
{
  return sub_1001B7600(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001EF978()
{
  if (*(void *)(v0 + 24)) {
    swift_release(*(void *)(v0 + 32));
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001EF9AC(uint64_t a1)
{
  return sub_1001B5F34(a1, v1);
}

uint64_t sub_1001EF9B4()
{
  return sub_1001EF9C0((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001EF9C0(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_1001EF9F8(uint64_t *a1)
{
  return sub_1001B4CBC(a1, v1);
}

void sub_1001EFA00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3 + 16;
  swift_beginAccess(v5, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_1001C1DD4(a3);
  }

void sub_1001EFA7C(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1001C1A38(a1);
  }

id sub_1001EFAD4()
{
  return sub_1001CC604(0);
}

uint64_t getEnumTagSinglePayload for ConceptualRouteType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for RemoteControlActivity.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001EFB8C + 4 * byte_10034C970[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001EFBAC + 4 * byte_10034C975[v4]))();
  }
}

_BYTE *sub_1001EFB8C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001EFBAC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001EFBB4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001EFBBC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001EFBC4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001EFBCC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RemoteControlActivity.CodingKeys()
{
  return &type metadata for RemoteControlActivity.CodingKeys;
}

unint64_t sub_1001EFBEC()
{
  unint64_t result = qword_1003FF8E0[0];
  if (!qword_1003FF8E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D034, &type metadata for RemoteControlActivity.CodingKeys);
    atomic_store(result, qword_1003FF8E0);
  }

  return result;
}

unint64_t sub_1001EFC34()
{
  unint64_t result = qword_1003FF9F0;
  if (!qword_1003FF9F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CFA4, &type metadata for RemoteControlActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003FF9F0);
  }

  return result;
}

unint64_t sub_1001EFC7C()
{
  unint64_t result = qword_1003FF9F8[0];
  if (!qword_1003FF9F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CFCC, &type metadata for RemoteControlActivity.CodingKeys);
    atomic_store(result, qword_1003FF9F8);
  }

  return result;
}

uint64_t sub_1001EFF5C()
{
  return sub_1001C83BC();
}

unint64_t sub_1001EFFB4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD00000000000002ELL;
  }
  else {
    return 0xD00000000000002FLL;
  }
}

uint64_t sub_1001EFFF0(char *a1, char *a2)
{
  return sub_1001F0234(*a1, *a2);
}

uint64_t sub_1001EFFFC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD000000000000018LL;
  }
  else {
    unint64_t v3 = 0xD000000000000019LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010033C580LL;
  }
  else {
    unint64_t v4 = 0x800000010033C5A0LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD000000000000018LL;
  }
  else {
    unint64_t v5 = 0xD000000000000019LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010033C5A0LL;
  }
  else {
    unint64_t v6 = 0x800000010033C580LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1001F00A4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1001F00F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001F0174 + 4 * byte_10034D105[a2]))(0xD000000000000011LL);
}

uint64_t sub_1001F0174(uint64_t a1)
{
  unint64_t v2 = 0x800000010033C550LL;
  if (a1 == 0xD000000000000011LL && v1 == 0x800000010033C550LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000011LL, 0x800000010033C550LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1001F0234(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v3 = 0xD00000000000002FLL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010033C4E0LL;
  }
  else {
    unint64_t v4 = 0x800000010033C510LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v5 = 0xD00000000000002FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010033C510LL;
  }
  else {
    unint64_t v6 = 0x800000010033C4E0LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1001F02DC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1003A6B40;
  return sub_1001F09CC(v2, a1, a2);
}

void sub_1001F02E8(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v2 = 0xD00000000000002FLL;
  }
  unint64_t v3 = 0x800000010033C4E0LL;
  if (*v1) {
    unint64_t v3 = 0x800000010033C510LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001F032C()
{
  return sub_1001F0334(*v0);
}

Swift::Int sub_1001F0334(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v2 = 0xD00000000000002FLL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x800000010033C510LL;
  }
  else {
    unint64_t v3 = 0x800000010033C4E0LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1001F03B8(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1001F0408()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001F0494(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xD000000000000018LL;
  }
  else {
    unint64_t v2 = 0xD000000000000019LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x800000010033C5A0LL;
  }
  else {
    unint64_t v3 = 0x800000010033C580LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001F0518(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v2 = 0xD00000000000002FLL;
  }
  if (*v1) {
    unint64_t v3 = 0x800000010033C510LL;
  }
  else {
    unint64_t v3 = 0x800000010033C4E0LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

void sub_1001F0578(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1001F05B8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010033C550LL);
}

Swift::Int sub_1001F0630(uint64_t a1)
{
  return sub_1001F0638(a1, *v1);
}

Swift::Int sub_1001F0638(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v3 = 0xD00000000000002FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0x800000010033C510LL;
  }
  else {
    unint64_t v4 = 0x800000010033C4E0LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1001F06B8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1001F0704()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001F0790(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD000000000000018LL;
  }
  else {
    unint64_t v3 = 0xD000000000000019LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0x800000010033C5A0LL;
  }
  else {
    unint64_t v4 = 0x800000010033C580LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F0810(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F0844 + 4 * byte_10034D119[a1]))( 0x65707954415347LL,  0xE700000000000000LL);
}

unint64_t sub_1001F0844()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1001F086C()
{
  return 0x4474736575716572LL;
}

uint64_t sub_1001F088C()
{
  return 0x7461446E656B6F74LL;
}

void sub_1001F08A8(char *a1)
{
}

unint64_t sub_1001F08B4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001F0AD8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F08E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001F0810(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1001F0908()
{
}

void sub_1001F0910(uint64_t a1)
{
}

void sub_1001F0918(uint64_t a1)
{
}

uint64_t sub_1001F0920(Swift::String a1)
{
  v1._rawValue = &off_1003A6C28;
  return sub_1001F092C(a1, v1);
}

uint64_t sub_1001F092C(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0LL;
  }
}

unint64_t sub_1001F0978(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000018LL;
  }
  else {
    return 0xD000000000000019LL;
  }
}

uint64_t sub_1001F09B4(char *a1, char *a2)
{
  return sub_1001EFFFC(*a1, *a2);
}

uint64_t sub_1001F09C0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1003A6C28;
  return sub_1001F09CC(v2, a1, a2);
}

uint64_t sub_1001F09CC@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  v4._countAndFlagsBits = *a2;
  Swift::Int v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_1001F0A24(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000018LL;
  }
  else {
    unint64_t v2 = 0xD000000000000019LL;
  }
  unint64_t v3 = 0x800000010033C580LL;
  if (*v1) {
    unint64_t v3 = 0x800000010033C5A0LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001F0A68()
{
  return sub_1001F0494(*v0);
}

uint64_t sub_1001F0A70(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000018LL;
  }
  else {
    unint64_t v2 = 0xD000000000000019LL;
  }
  if (*v1) {
    unint64_t v3 = 0x800000010033C5A0LL;
  }
  else {
    unint64_t v3 = 0x800000010033C580LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001F0AD0(uint64_t a1)
{
  return sub_1001F0790(a1, *v1);
}

unint64_t sub_1001F0AD8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003A6B90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1001F0B24()
{
  unint64_t result = qword_1003FA1B0;
  if (!qword_1003FA1B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D134, &type metadata for GroupSessionAuthorizationEventIDs);
    atomic_store(result, (unint64_t *)&qword_1003FA1B0);
  }

  return result;
}

unint64_t sub_1001F0B6C()
{
  unint64_t result = qword_1003FA1B8;
  if (!qword_1003FA1B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D1D4, &type metadata for GroupSessionAuthorizationMessageKeys);
    atomic_store(result, (unint64_t *)&qword_1003FA1B8);
  }

  return result;
}

unint64_t sub_1001F0BB4()
{
  unint64_t result = qword_1003FA1C0;
  if (!qword_1003FA1C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D274, &type metadata for GroupSessionAuthorizationMessageType);
    atomic_store(result, (unint64_t *)&qword_1003FA1C0);
  }

  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationEventIDs()
{
  return &type metadata for GroupSessionAuthorizationEventIDs;
}

uint64_t getEnumTagSinglePayload for GroupSessionAuthorizationMessageKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for GroupSessionAuthorizationMessageKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001F0CEC + 4 * byte_10034D123[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001F0D20 + 4 * byte_10034D11E[v4]))();
}

uint64_t sub_1001F0D20(uint64_t result)
{
  *(_BYTE *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1001F0D28(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (a2) {
    JUMPOUT(0x1001F0D30LL);
  }
  return result;
}

uint64_t sub_1001F0D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001F0D44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001F0D48(uint64_t result)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1001F0D50(uint64_t result)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

_BYTE *sub_1001F0D5C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationMessageKeys()
{
  return &type metadata for GroupSessionAuthorizationMessageKeys;
}

uint64_t _s12mediaremoted33GroupSessionAuthorizationEventIDsOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001F0DC0 + 4 * byte_10034D12D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001F0DF4 + 4 * byte_10034D128[v4]))();
}

uint64_t sub_1001F0DF4(uint64_t result)
{
  *(_BYTE *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1001F0DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (a2) {
    JUMPOUT(0x1001F0E04LL);
  }
  return result;
}

uint64_t sub_1001F0E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001F0E18LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001F0E1C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1001F0E24(uint64_t result)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationMessageType()
{
  return &type metadata for GroupSessionAuthorizationMessageType;
}

uint64_t sub_1001F0E48()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FFF08);
  sub_10015ADAC(v0, (uint64_t)qword_1003FFF08);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t sub_1001F0EE8()
{
  uint64_t v1 = v0 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate;
  swift_beginAccess(v0 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1001F0F80(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_1001F0FD8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1001B33BC;
}

id sub_1001F1048()
{
  return sub_1001F1098( &OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___messageQueue,  0x6567617373656D2DLL,  (void *)0xE800000000000000LL,  (uint64_t (*)(void))&_MRGroupSessionSubsystemGetNotificationQueue);
}

id sub_1001F1070()
{
  return sub_1001F1098( &OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___serialQueue,  0x6C61697265732DLL,  (void *)0xE700000000000000LL,  (uint64_t (*)(void))&_MRGroupSessionSubsystemGetQueue);
}

id sub_1001F1098(uint64_t *a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v35 = a4;
  uint64_t v8 = v4;
  uint64_t ObjectType = swift_getObjectType(v4, a2);
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v10 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *a1;
  uint64_t v20 = *(void **)(v8 + v19);
  if (v20)
  {
    id v21 = *(id *)(v8 + v19);
  }

  else
  {
    uint64_t v37 = (void *)_typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v38 = v22;
    unint64_t v34 = sub_1001F3AA4();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    uint64_t v32 = v38;
    uint64_t v33 = v37;
    uint64_t v35 = (uint64_t (*)(void))(id)v35();
    static DispatchQoS.unspecified.getter(v35);
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_100156FEC( (unint64_t *)&qword_1003FB950,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FA190);
    uint64_t v26 = sub_1001F3AE0((unint64_t *)&qword_1003FB960, (uint64_t *)&unk_1003FA190);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v25, v26, v13, v24);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v36);
    unint64_t v27 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( v33,  v32,  v18,  v15,  v12,  v35);
    unint64_t v28 = *(void **)(v8 + v19);
    *(void *)(v8 + v19) = v27;
    id v21 = v27;

    uint64_t v20 = 0LL;
  }

  id v29 = v20;
  return v21;
}

char *sub_1001F12C8(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1001F12F8(a1, v4);
}

char *sub_1001F12F8(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = &v2[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate];
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate], 0LL);
  *(void *)&v2[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___messageQueue] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___serialQueue] = 0LL;
  uint64_t v6 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_linkClient;
  id v7 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
  uint64_t v8 = v2;
  *(void *)&v2[v6] = [v7 init];
  *(void *)&v8[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID] = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_lock;
  type metadata accessor for Lock();
  *(void *)&v8[v9] = sub_100236794();
  swift_beginAccess(v5, v22, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v5, a1);

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for GroupSessionProxyAuthorizationListener();
  uint64_t v10 = (char *)objc_msgSendSuper2(&v21, "init");
  uint64_t v11 = *(void **)&v10[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_linkClient];
  unint64_t v12 = (void *)swift_allocObject(&unk_1003A6E90, 40LL, 7LL);
  v12[2] = v11;
  v12[3] = v10;
  v12[4] = ObjectType;
  aBlock[4] = sub_1001F1524;
  uint64_t v20 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157E54;
  aBlock[3] = &unk_1003A6EA8;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v20;
  uint64_t v15 = v10;
  id v16 = v11;
  uint64_t v17 = v15;
  swift_release(v14);
  [v16 activateWithCompletion:v13];

  swift_unknownObjectRelease(a1);
  _Block_release(v13);

  return v17;
}

uint64_t type metadata accessor for GroupSessionProxyAuthorizationListener()
{
  return objc_opt_self(&OBJC_CLASS___MRDGroupSessionProxyAuthorizationListener);
}

uint64_t sub_1001F14F8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001F1524(uint64_t a1)
{
  uint64_t v2 = v1[4];
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1003FFF00 != -1) {
      swift_once(&qword_1003FFF00, sub_1001F0E48);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v4, (uint64_t)qword_1003FFF08);
    swift_errorRetain(a1);
    uint64_t v5 = swift_errorRetain(a1);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v9 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v9;
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v10 = _typeName(_:qualified:)(v2, 0LL);
      uint64_t v33 = sub_10015ADC4(v10, v11, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &aBlock, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2112;
      swift_errorRetain(a1);
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v33 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &aBlock, v7 + 14, v7 + 22);
      *uint64_t v8 = v12;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v6,  "[%s] Failed to activate rapport listener: %@",  (uint8_t *)v7,  0x16u);
      uint64_t v13 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v8, 1LL, v13);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

  else
  {
    uint64_t v14 = (void *)v1[2];
    uint64_t v15 = v1[3];
    if (qword_1003FFF00 != -1) {
      swift_once(&qword_1003FFF00, sub_1001F0E48);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10015ADAC(v16, (uint64_t)qword_1003FFF08);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      objc_super v21 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v22 = _typeName(_:qualified:)(v2, 0LL);
      uint64_t v33 = sub_10015ADC4(v22, v23, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &aBlock, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] Registering rapport events", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    sub_1001EFFB4(0);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v25 = swift_allocObject(&unk_1003A7098, 24LL, 7LL);
    swift_unknownObjectWeakInit(v25 + 16, v15);
    uint64_t v26 = swift_allocObject(&unk_1003A70C0, 32LL, 7LL);
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    *(void *)(v26 + 24) = v2;
    uint64_t v38 = sub_1001F3B68;
    uint64_t v39 = v26;
    aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256LL;
    uint64_t v36 = sub_1001F1A50;
    uint64_t v37 = &unk_1003A70D8;
    unint64_t v27 = _Block_copy(&aBlock);
    swift_release(v39);
    [v14 registerEventID:v24 options:0 handler:v27];
    _Block_release(v27);

    sub_1001EFFB4(1);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v29 = swift_allocObject(&unk_1003A7098, 24LL, 7LL);
    swift_unknownObjectWeakInit(v29 + 16, v15);
    uint64_t v30 = swift_allocObject(&unk_1003A7110, 32LL, 7LL);
    *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
    *(void *)(v30 + 24) = v2;
    uint64_t v38 = sub_1001F3B88;
    uint64_t v39 = v30;
    aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256LL;
    uint64_t v36 = sub_1001F1A50;
    uint64_t v37 = &unk_1003A7128;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_release(v39);
    [v14 registerEventID:v28 options:0 handler:v31];
    _Block_release(v31);
  }

uint64_t sub_1001F1A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  swift_retain(v4);
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(a3);
}

void sub_1001F1AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2)
  {
    __int128 v46 = 0u;
    __int128 v47 = 0u;
LABEL_13:
    sub_100164B5C((uint64_t)&v46);
    uint64_t v44 = 0LL;
    uint64_t v19 = 0LL;
    goto LABEL_14;
  }

  *(void *)&__int128 v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderID);
  *((void *)&v46 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v14;
  AnyHashable.init<A>(_:)(&v46, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a2 + 16) && (unint64_t v15 = sub_10015CAA4((uint64_t)v45), (v16 & 1) != 0))
  {
    sub_100160800(*(void *)(a2 + 56) + 32 * v15, (uint64_t)&v46);
  }

  else
  {
    __int128 v46 = 0u;
    __int128 v47 = 0u;
  }

  sub_100160990((uint64_t)v45);
  if (!*((void *)&v47 + 1)) {
    goto LABEL_13;
  }
  int v17 = swift_dynamicCast(v45, &v46, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  uint64_t v18 = v45[0];
  if (!v17) {
    uint64_t v18 = 0LL;
  }
  uint64_t v44 = v18;
  if (v17) {
    uint64_t v19 = v45[1];
  }
  else {
    uint64_t v19 = 0LL;
  }
LABEL_14:
  uint64_t v20 = a3 + 16;
  if (qword_1003FFF00 != -1) {
    swift_once(&qword_1003FFF00, sub_1001F0E48);
  }
  uint64_t v21 = sub_10015ADAC(v10, (uint64_t)qword_1003FFF08);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain_n(a1, 2LL);
  unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = a5;
    uint64_t v26 = v25;
    uint64_t v40 = swift_slowAlloc(96LL, -1LL);
    v45[0] = v40;
    *(_DWORD *)uint64_t v26 = 136315650;
    uint64_t v43 = v11;
    uint64_t v27 = _typeName(_:qualified:)(a4, 0LL);
    uint64_t v42 = v10;
    uint64_t v28 = a1;
    *(void *)&__int128 v46 = sub_10015ADC4(v27, v29, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    if (v19) {
      uint64_t v30 = v44;
    }
    else {
      uint64_t v30 = 0x4E574F4E4B4E55LL;
    }
    if (v19) {
      unint64_t v31 = v19;
    }
    else {
      unint64_t v31 = 0xE700000000000000LL;
    }
    uint64_t v44 = v20;
    swift_bridgeObjectRetain();
    *(void *)&__int128 v46 = sub_10015ADC4(v30, v31, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(v19, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = Dictionary.description.getter( v32,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v46 = sub_10015ADC4(v33, v35, v45);
    a1 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v26 + 24, v26 + 32);
    swift_bridgeObjectRelease_n(v28, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v41, (uint8_t *)v26, 0x20u);
    uint64_t v36 = v40;
    uint64_t v20 = v44;
    swift_arrayDestroy(v40, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v42);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease_n(v19, 2LL);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  swift_beginAccess(v20, v45, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v20);
  if (Strong)
  {
    uint64_t v39 = (void *)Strong;
    sub_1001F1F6C(a1, v38);
  }

uint64_t sub_1001F1F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F1F34(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1001F1F6C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  v73._uint64_t countAndFlagsBits = sub_1001F0810(0);
  v73._object = v5;
  AnyHashable.init<A>(_:)(&v73, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_10015CAA4((uint64_t)v74), (v7 & 1) != 0))
  {
    sub_100160800(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v75);
  }

  else
  {
    __int128 v75 = 0u;
    __int128 v76 = 0u;
  }

  sub_100160990((uint64_t)v74);
  if (!*((void *)&v76 + 1))
  {
    sub_100164B5C((uint64_t)&v75);
    return;
  }

  if ((swift_dynamicCast(&v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    char v8 = sub_1001F0920(v73);
    if (v8 != 2)
    {
      int v9 = v8 & 1;
      LOBYTE(v74[0]) = 0;
      LOBYTE(v75) = v8 & 1;
      unint64_t v10 = sub_1001F0BB4();
      if ((dispatch thunk of static Equatable.== infix(_:_:)( v74,  &v75,  &type metadata for GroupSessionAuthorizationMessageType,  v10) & 1) != 0 || (LOBYTE(v74[0]) = 1,  LOBYTE(v75) = v9,  (dispatch thunk of static Equatable.== infix(_:_:)( v74,  &v75,  &type metadata for GroupSessionAuthorizationMessageType,  v10) & 1) != 0))
      {
        v73._uint64_t countAndFlagsBits = sub_1001F0810(2u);
        v73._object = v11;
        AnyHashable.init<A>(_:)(&v73, &type metadata for String, &protocol witness table for String);
        if (*(void *)(a1 + 16) && (unint64_t v12 = sub_10015CAA4((uint64_t)v74), (v13 & 1) != 0))
        {
          sub_100160800(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v75);
        }

        else
        {
          __int128 v75 = 0u;
          __int128 v76 = 0u;
        }

        sub_100160990((uint64_t)v74);
        if (*((void *)&v76 + 1))
        {
          if ((swift_dynamicCast(&v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
          {
LABEL_38:
            if (qword_1003FFF00 != -1) {
              swift_once(&qword_1003FFF00, sub_1001F0E48);
            }
            uint64_t v33 = type metadata accessor for Logger(0LL);
            sub_10015ADAC(v33, (uint64_t)qword_1003FFF08);
            uint64_t v34 = swift_bridgeObjectRetain_n(a1, 2LL);
            unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
            os_log_type_t v36 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v35, v36))
            {
              uint64_t v37 = swift_slowAlloc(22LL, -1LL);
              uint64_t v38 = swift_slowAlloc(64LL, -1LL);
              v74[0] = v38;
              *(_DWORD *)uint64_t v37 = 136315394;
              uint64_t v39 = _typeName(_:qualified:)(ObjectType, 0LL);
              *(void *)&__int128 v75 = sub_10015ADC4(v39, v40, v74);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v37 + 4, v37 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v37 + 12) = 2080;
              uint64_t v41 = swift_bridgeObjectRetain();
              uint64_t v42 = Dictionary.description.getter( v41,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
              *(void *)&__int128 v75 = sub_10015ADC4(v42, v44, v74);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v37 + 14, v37 + 22);
              swift_bridgeObjectRelease_n(a1, 2LL);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "[%s] Failed to parse message: %s",  (uint8_t *)v37,  0x16u);
              swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v38, -1LL, -1LL);
              swift_slowDealloc(v37, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(a1, 2LL);
            }

            return;
          }

          uint64_t countAndFlagsBits = v73._countAndFlagsBits;
          object = v73._object;
          v73._uint64_t countAndFlagsBits = sub_1001F0810(1u);
          v73._object = v16;
          AnyHashable.init<A>(_:)(&v73, &type metadata for String, &protocol witness table for String);
          if (*(void *)(a1 + 16) && (unint64_t v17 = sub_10015CAA4((uint64_t)v74), (v18 & 1) != 0))
          {
            sub_100160800(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v75);
          }

          else
          {
            __int128 v75 = 0u;
            __int128 v76 = 0u;
          }

          sub_100160990((uint64_t)v74);
          if (*((void *)&v76 + 1))
          {
            v73._uint64_t countAndFlagsBits = sub_1001F0810(3u);
            v73._object = v19;
            AnyHashable.init<A>(_:)(&v73, &type metadata for String, &protocol witness table for String);
            if (*(void *)(a1 + 16) && (unint64_t v20 = sub_10015CAA4((uint64_t)v74), (v21 & 1) != 0))
            {
              sub_100160800(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v75);
            }

            else
            {
              __int128 v75 = 0u;
              __int128 v76 = 0u;
            }

            sub_100160990((uint64_t)v74);
            if (*((void *)&v76 + 1))
            {
              if ((swift_dynamicCast(&v73, &v75, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
              {
                uint64_t v70 = countAndFlagsBits;
                uint64_t v23 = v73._countAndFlagsBits;
                uint64_t v22 = v73._object;
                id v24 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionJoinRequestProtobuf);
                sub_100160874(v23, (unint64_t)v22);
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_1001608B8(v23, (unint64_t)v22);
                id v26 = [v24 initWithData:isa];

                if (v26)
                {
                  uint64_t v27 = v26;
                  unint64_t v71 = (unint64_t)v22;
                  uint64_t v72 = v23;
                  id v28 = [v26 identity];
                  id v29 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v28];

                  if (v29)
                  {
                    v73._uint64_t countAndFlagsBits = sub_1001F0810(4u);
                    v73._object = v30;
                    AnyHashable.init<A>(_:)(&v73, &type metadata for String, &protocol witness table for String);
                    if (*(void *)(a1 + 16) && (unint64_t v31 = sub_10015CAA4((uint64_t)v74), (v32 & 1) != 0))
                    {
                      sub_100160800(*(void *)(a1 + 56) + 32 * v31, (uint64_t)&v75);
                    }

                    else
                    {
                      __int128 v75 = 0u;
                      __int128 v76 = 0u;
                    }

                    sub_100160990((uint64_t)v74);
                    if (*((void *)&v76 + 1))
                    {
                      if ((swift_dynamicCast( &v73,  &v75,  (char *)&type metadata for Any + 8,  &type metadata for Data,  6LL) & 1) != 0)
                      {
                        uint64_t v66 = v29;
                        unint64_t v69 = v27;
                        uint64_t v48 = v73._countAndFlagsBits;
                        __int128 v47 = v73._object;
                        id v49 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionTokenProtobuf);
                        sub_100160874(v48, (unint64_t)v47);
                        Class v50 = Data._bridgeToObjectiveC()().super.isa;
                        uint64_t v67 = v48;
                        unint64_t v68 = (unint64_t)v47;
                        sub_1001608B8(v48, (unint64_t)v47);
                        id v51 = [v49 initWithData:v50];

                        if (v51)
                        {
                          id v52 = [objc_allocWithZone(MRGroupSessionToken) initWithProtobuf:v51];
                          id v53 = objc_allocWithZone((Class)&OBJC_CLASS___MRDGroupSessionJoinRequest);
                          id v54 = v66;
                          NSString v55 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          Class v56 = Array._bridgeToObjectiveC()().super.isa;
                          id v57 = [v53 initWithIdentifier:v55 identity:v54 oobKeys:v56];

                          if (v9)
                          {
                            sub_1001F354C(v57, v52);
                            sub_1001608B8(v72, v71);

                            sub_1001608B8(v67, v68);
                            swift_bridgeObjectRelease();
                          }

                          else
                          {
                            sub_1001F2950(v57, v70, (uint64_t)object, v52);
                            sub_1001608B8(v72, v71);

                            sub_1001608B8(v67, v68);
                            swift_bridgeObjectRelease();
                          }
                        }

                        else
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (qword_1003FFF00 != -1) {
                            swift_once(&qword_1003FFF00, sub_1001F0E48);
                          }
                          uint64_t v58 = type metadata accessor for Logger(0LL);
                          uint64_t v59 = sub_10015ADAC(v58, (uint64_t)qword_1003FFF08);
                          uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
                          os_log_type_t v61 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v60, v61))
                          {
                            unint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                            uint64_t v63 = swift_slowAlloc(32LL, -1LL);
                            v74[0] = v63;
                            *(_DWORD *)unint64_t v62 = 136315138;
                            uint64_t v64 = _typeName(_:qualified:)(ObjectType, 0LL);
                            *(void *)&__int128 v75 = sub_10015ADC4(v64, v65, v74);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v62 + 4, v62 + 12);
                            swift_bridgeObjectRelease();
                            _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "[%s] Failed to parse join token",  v62,  0xCu);
                            swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v63, -1LL, -1LL);
                            swift_slowDealloc(v62, -1LL, -1LL);

                            sub_1001608B8(v48, v68);
                            sub_1001608B8(v72, (unint64_t)v22);
                          }

                          else
                          {
                            sub_1001608B8(v72, (unint64_t)v22);

                            sub_1001608B8(v48, v68);
                          }
                        }

                        return;
                      }

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1001608B8(v72, (unint64_t)v22);
                      goto LABEL_38;
                    }

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1001608B8(v72, (unint64_t)v22);
                    goto LABEL_37;
                  }

                  unint64_t v46 = (unint64_t)v22;
                  uint64_t v45 = v72;
                }

                else
                {
                  uint64_t v45 = v23;
                  unint64_t v46 = (unint64_t)v22;
                }

                sub_1001608B8(v45, v46);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_38;
              }

              swift_bridgeObjectRelease();
LABEL_44:
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }

            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease();
        }

uint64_t sub_1001F2950(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v42 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = sub_1001F1048();
  uint64_t v14 = (void *)swift_allocObject(&unk_1003A6EE0, 40LL, 7LL);
  v14[2] = v4;
  v14[3] = a1;
  v14[4] = a4;
  Class v50 = sub_1001F2DC8;
  id v51 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256LL;
  uint64_t v48 = sub_100157EA8;
  id v49 = &unk_1003A6EF8;
  unint64_t v15 = _Block_copy(&aBlock);
  id v40 = v4;
  id v16 = a1;
  id v39 = a4;
  static DispatchQoS.unspecified.getter(v39);
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v19 = sub_1001F3AE0((unint64_t *)&qword_1003FADC0, (uint64_t *)&unk_1003F9A70);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v41);
  swift_release(v51);
  id v20 = [v16 identifier];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  id v24 = (void *)swift_allocObject(&unk_1003A6F30, 56LL, 7LL);
  id v26 = v39;
  uint64_t v25 = v40;
  _OWORD v24[2] = v40;
  v24[3] = v16;
  uint64_t v27 = v44;
  v24[4] = v43;
  v24[5] = v27;
  v24[6] = v26;
  Class v50 = sub_1001F2F0C;
  id v51 = v24;
  aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256LL;
  uint64_t v48 = sub_100157EA8;
  id v49 = &unk_1003A6F48;
  id v28 = _Block_copy(&aBlock);
  id v29 = v51;
  uint64_t v30 = v25;
  id v31 = v16;
  id v32 = v26;
  swift_bridgeObjectRetain();
  swift_release(v29);
  id v33 = [(id)objc_opt_self(MSVTimer) timerWithInterval:0 repeats:v28 block:60.0];
  _Block_release(v28);
  uint64_t v34 = &v30[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID];
  swift_beginAccess( &v30[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID],  &aBlock,  33LL,  0LL);
  if (v33)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v34);
    uint64_t v45 = *(void **)v34;
    *(void *)uint64_t v34 = 0x8000000000000000LL;
    sub_1001F3240((uint64_t)v33, v21, v23, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v34 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    os_log_type_t v36 = (void *)sub_1001E22B0(v21, v23);
    swift_bridgeObjectRelease();
  }

  return swift_endAccess(&aBlock);
}

id sub_1001F2D1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupSessionProxyAuthorizationListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1001F2DC8()
{
  uint64_t v1 = v0;
  objc_super v2 = *(void **)(v0 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x80LL))();
  if (v5)
  {
    unint64_t v6 = (void *)v5;
    uint64_t v7 = swift_allocObject(&unk_1003A6FD0, 32LL, 7LL);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    *(void *)(v7 + 24) = v4;
    v12[4] = sub_1001F37F4;
    uint64_t v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256LL;
    v12[2] = sub_10015ACC0;
    v12[3] = &unk_1003A6FE8;
    uint64_t v8 = _Block_copy(v12);
    uint64_t v9 = v13;
    uint64_t v10 = v2;
    id v11 = v4;
    swift_release(v9);
    [v6 groupSessionProxyAuthorizationListener:v10 didReceiveJoinRequest:v11 withSessionToken:v3 handler:v8];
    swift_unknownObjectRelease(v6);
    _Block_release(v8);
  }

uint64_t sub_1001F2ED0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001F2F0C()
{
  return sub_1001F354C(*(void **)(v0 + 24), *(void **)(v0 + 48));
}

Swift::Int sub_1001F2F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FA008);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  os_log_type_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

void sub_1001F3240(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001F339C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

id sub_1001F339C()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FA008);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1001F354C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = sub_1001F1048();
  unint64_t v12 = (void *)swift_allocObject(&unk_1003A6F80, 40LL, 7LL);
  v12[2] = v2;
  v12[3] = a1;
  v12[4] = a2;
  aBlock[4] = sub_1001F374C;
  uint64_t v25 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A6F98;
  int64_t v13 = _Block_copy(aBlock);
  id v14 = v2;
  id v15 = a1;
  static DispatchQoS.unspecified.getter(a2);
  unint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v18 = sub_1001F3AE0((unint64_t *)&qword_1003FADC0, (uint64_t *)&unk_1003F9A70);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release(v25);
}

void *sub_1001F374C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  id result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x80LL))();
  if (result)
  {
    uint64_t v6 = result;
    [result groupSessionProxyAuthorizationListener:v2 didCancelJoinRequest:v3 withSessionToken:v4];
    return (void *)swift_unknownObjectRelease(v6);
  }

  return result;
}

uint64_t sub_1001F37C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001F37F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = (dispatch_queue_s *)sub_1001F1070();
  uint64_t v5 = swift_allocObject(&unk_1003A7020, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject(&unk_1003A7048, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001F3934;
  *(void *)(v6 + 24) = v5;
  v12[4] = sub_1001840B4;
  uint64_t v13 = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_1001B2FA0;
  v12[3] = &unk_1003A7060;
  unint64_t v7 = _Block_copy(v12);
  uint64_t v8 = v13;
  id v9 = v2;
  id v10 = v3;
  swift_retain(v6);
  swift_release(v8);
  dispatch_sync(v4, v7);

  _Block_release(v7);
  LODWORD(v2) = swift_isEscapingClosureAtFileLocation(v6, "", 154LL, 100LL, 39LL, 1LL);
  swift_release(v6);
  uint64_t result = swift_release(v5);
  if ((_DWORD)v2) {
    __break(1u);
  }
  return result;
}

void sub_1001F3934()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  id v3 = [v1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  unint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID);
  swift_beginAccess( v2 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID,  v18,  0LL,  0LL);
  uint64_t v8 = *v7;
  if (*(void *)(*v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_10015CAD4(v4, v6);
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    id v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v11 = 0LL;
  }

  swift_bridgeObjectRelease();
  [v11 invalidate];

LABEL_7:
  id v12 = [v1 identifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  swift_beginAccess(v7, v17, 33LL, 0LL);
  uint64_t v16 = (void *)sub_1001E22B0(v13, v15);
  swift_endAccess(v17);
  swift_bridgeObjectRelease();
}

uint64_t sub_1001F3A94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1001F3AA4()
{
  unint64_t result = qword_1003F9F50;
  if (!qword_1003F9F50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003F9F50);
  }

  return result;
}

uint64_t sub_1001F3AE0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100160358(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001F3B20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001F3B44()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001F3B68(uint64_t a1, uint64_t a2)
{
}

void sub_1001F3B88(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001F3BE8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FFF28);
  sub_10015ADAC(v0, (uint64_t)qword_1003FFF28);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t sub_1001F3C40()
{
  id v1 = (void *)(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager_currentSession);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager_currentSession, v3, 0LL, 0LL);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_1001F3C88(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager_currentSession);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_unknownObjectRelease(v4);
}

uint64_t (*sub_1001F3CD8(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1001F3D1C()
{
  uint64_t v1 = OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender);
  }

  else
  {
    uint64_t v4 = v0;
    type metadata accessor for GroupSessionProxyAuthorizationSender();
    uint64_t v3 = sub_10015AC08();
    uint64_t v5 = *(void *)(v0 + v1);
    *(void *)(v4 + vsub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v3;
    swift_retain(v3);
    swift_release(v5);
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  return v3;
}

uint64_t sub_1001F3D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender);
  *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender) = a1;
  return swift_release(v2);
}

uint64_t (*sub_1001F3DA0(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_1001F3D1C();
  return sub_1001F3DD4;
}

uint64_t sub_1001F3DD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender);
  *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender) = v2;
  return swift_release(v3);
}

void sub_1001F3DEC(void *a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  unint64_t v7 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x60LL))();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 remoteParticipants];
    uint64_t v10 = sub_100156B68(&qword_1003FA150);
    uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        uint64_t v33 = v11;
      }
      else {
        uint64_t v33 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease();
    if (v12 < 1)
    {
      id v21 = [(id)objc_opt_self(MRSharedSettings) currentSettings];
      unsigned int v22 = [v21 supportGroupSessionHomePodBoop];

      if (v22)
      {
        if (qword_1003FFF20 != -1) {
          swift_once(&qword_1003FFF20, sub_1001F3BE8);
        }
        uint64_t v23 = type metadata accessor for Logger(0LL);
        sub_10015ADAC(v23, (uint64_t)qword_1003FFF28);
        id v24 = a1;
        uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
        os_log_type_t v26 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v26))
        {
          os_log_type_t type = v26;
          uint64_t v27 = swift_slowAlloc(22LL, -1LL);
          id v34 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v36 = swift_slowAlloc(32LL, -1LL);
          uint64_t v38 = v36;
          *(_DWORD *)uint64_t v27 = 136315394;
          uint64_t v28 = _typeName(_:qualified:)(ObjectType, 0LL);
          uint64_t v37 = sub_10015ADC4(v28, v29, &v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4, v27 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2112;
          uint64_t v37 = (uint64_t)v24;
          id v30 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14, v27 + 22);
          *id v34 = v24;

          _os_log_impl( (void *)&_mh_execute_header,  v25,  type,  "[%s] Requesting to notify nearby devices for join request: %@",  (uint8_t *)v27,  0x16u);
          uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
          swift_arrayDestroy(v34, 1LL, v31);
          swift_slowDealloc(v34, -1LL, -1LL);
          swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v27, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v32 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x78LL))();
        (*(void (**)(id, void *))(*(void *)v32 + 232LL))(v24, v8);
        swift_release(v32);
      }

      a2(1LL);
      swift_unknownObjectRelease(v8);
    }

    else
    {
      if (qword_1003FFF20 != -1) {
        swift_once(&qword_1003FFF20, sub_1001F3BE8);
      }
      uint64_t v13 = type metadata accessor for Logger(0LL);
      uint64_t v14 = sub_10015ADAC(v13, (uint64_t)qword_1003FFF28);
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v18 = swift_slowAlloc(32LL, -1LL);
        uint64_t v38 = v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v19 = _typeName(_:qualified:)(ObjectType, 0LL);
        uint64_t v37 = sub_10015ADC4(v19, v20, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%s] Participants are present in session - Not notifying nearby devices",  v17,  0xCu);
        swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_unknownObjectRelease(v8);
      }

      else
      {

        swift_unknownObjectRelease(v8);
      }
    }
  }

uint64_t sub_1001F4348(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x60LL))();
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [(id)objc_opt_self(MRSharedSettings) currentSettings];
    unsigned int v6 = [v5 supportGroupSessionHomePodBoop];

    if (v6)
    {
      uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78LL))();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 240LL))(a1, v4);
      swift_release(v7);
    }

    return swift_unknownObjectRelease(v4);
  }

  return result;
}

void sub_1001F4490(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  if (a3)
  {
    type metadata accessor for MRGroupSessionError(0LL);
    uint64_t v5 = v4;
    uint64_t v8 = 9LL;
    uint64_t v6 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    sub_1001FC09C((uint64_t)&v8, 0xD00000000000001FLL, 0x800000010033C870LL, 0LL, v5, v6, (uint64_t)&v9);
    uint64_t v7 = v9;
    a3(v9);
  }

void sub_1001F4640(void (*a1)(void *))
{
  if (a1)
  {
    type metadata accessor for MRGroupSessionError(0LL);
    uint64_t v3 = v2;
    uint64_t v6 = 9LL;
    uint64_t v4 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    sub_1001FC09C((uint64_t)&v6, 0xD00000000000001FLL, 0x800000010033C870LL, 0LL, v3, v4, (uint64_t)&v7);
    uint64_t v5 = v7;
    a1(v7);
  }

uint64_t sub_1001F47E0(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x68LL);
  uint64_t v2 = swift_unknownObjectRetain(a1);
  return v4(v2);
}

uint64_t sub_1001F4894()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68LL))(0LL);
}

id sub_1001F4908()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HomePodUIManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HomePodUIManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted16HomePodUIManager);
}

uint64_t sub_1001F4990()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001F49B4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1001F49C4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_1001F49E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a1)
  {
    case 0LL:
      return 0x72676F72506E692ELL;
    case 2LL:
      return 0x6C6C65636E61632ELL;
    case 1LL:
      return 0x646565636375732ELL;
  }

  swift_errorRetain(a1);
  sub_100156A2C(a2, a3, a4);
  unint64_t v9 = sub_100184894();
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for RoutingEvent.Error,  v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  swift_errorRelease(a1);
  sub_100156BA8(a2, a3, a4);
  return 0x2864656C6961662ELL;
}

uint64_t sub_1001F4B20(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (*a1)
  {
    if (v2 == 1)
    {
      if (v3 == 1) {
        return 1LL;
      }
    }

    else if (v2 == 2)
    {
      if (v3 == 2) {
        return 1LL;
      }
    }

    else if (v3 >= 3)
    {
      return 1LL;
    }
  }

  else if (!v3)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_1001F4B70()
{
  return sub_1001F49E8(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1001F4B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F4BC4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  swift_beginAccess(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v4, 0LL, 0LL);
  unint64_t v2 = *(void *)v1;
  sub_1001F4C3C(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
  return v2;
}

unint64_t sub_1001F4C3C(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result >= 3)
  {
    swift_errorRetain(result);
    return sub_100156A2C(a2, a3, a4);
  }

  return result;
}

unint64_t sub_1001F4C84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  swift_beginAccess(v9, v15, 1LL, 0LL);
  unint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(void *)(v9 + sub_100183478(v0 + 16) = a3;
  unsigned __int8 v13 = *(_BYTE *)(v9 + 24);
  *(_BYTE *)(v9 + 24) = a4;
  return sub_1001A70C8(v10, v11, v12, v13);
}

uint64_t sub_1001F4D00()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[0] = 60LL;
  v24[1] = 0xE100000000000000LL;
  v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v2, 0LL);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 60LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v1 + 160LL))();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 8254LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  uint64_t v11 = (*(uint64_t (**)(void))(*v1 + 128LL))();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unsigned __int8 v17 = v16;
  v18._uint64_t countAndFlagsBits = sub_1001F49E8(v11, v12, v14, v16);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  sub_1001A70C8(v11, v13, v15, v17);
  v19._uint64_t countAndFlagsBits = 8236LL;
  v19._object = (void *)0xE200000000000000LL;
  String.append(_:)(v19);
  (*(void (**)(void))(*v1 + 168LL))();
  uint64_t v20 = sub_100156FEC( &qword_1003F7F88,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action,  (uint64_t)&protocol conformance descriptor for RoutingInteraction.Action);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v22._uint64_t countAndFlagsBits = 62LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  return v24[0];
}

uint64_t sub_1001F4EB4()
{
  return j___s12MediaControl18RoutingInteractionV10identifierSSvg();
}

uint64_t sub_1001F4EDC()
{
  return j___s12MediaControl18RoutingInteractionV6actionAC6ActionOvg();
}

uint64_t sub_1001F4F04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
  uint64_t v4 = type metadata accessor for RoutingInteraction(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1001F4F48(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(void *)(v3 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = 0LL;
  uint64_t v4 = v3 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  *(void *)(v4 + 8) = 0LL;
  *(void *)(v4 + sub_100183478(v0 + 16) = 0LL;
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 24) = 0;
  sub_1001F4FB4(a1, v3 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent);
  return v3;
}

uint64_t sub_1001F4FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F4FF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingEvent(0LL);
  uint64_t v3 = sub_100156FEC(&qword_1003FA308, type metadata accessor for RoutingEvent, (uint64_t)&unk_10034BC20);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t sub_1001F5060()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

Swift::Int sub_1001F50BC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F5100()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t sub_1001F5128()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t sub_1001F5150()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

Swift::Int sub_1001F5178(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001F51BC(uint64_t *a1, uint64_t *a2)
{
  return sub_1001FAEE4(*a1, *a2);
}

void *sub_1001F51C8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v5 = (*(uint64_t (**)(uint64_t))(*v0 + 120LL))(v3);
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  char v6 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    swift_beginAccess(v0 + 3, v20, 0LL, 0LL);
    uint64_t v1 = v0[4];
    Swift::String v19 = _swiftEmptyArrayStorage;
    if ((v1 & 0x8000000000000000LL) == 0 && (v1 & 0x4000000000000000LL) == 0)
    {
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t result = (void *)swift_retain(v1);
      if (v7) {
        goto LABEL_5;
      }
LABEL_17:
      swift_release(v1);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v18 = swift_retain(v1);
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v18);
  uint64_t v7 = (uint64_t)result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_5:
  if (v7 < 1)
  {
    __break(1u);
  }

  else
  {
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }

      else
      {
        uint64_t v12 = *(void *)(v1 + 8 * i + 32);
        swift_retain(v12);
      }

      unint64_t v13 = (*(uint64_t (**)(void))(*(void *)v12 + 128LL))();
      unint64_t v17 = sub_1001A70C8(v13, v14, v15, v16);
      if (v13)
      {
        swift_release(v12);
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        uint64_t v10 = v19[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v12);
        specialized ContiguousArray._endMutation()(v11);
      }
    }

    swift_release(v1);
    return v19;
  }

  return result;
}

uint64_t sub_1001F5394()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v5 = (*(uint64_t (**)(uint64_t))(*v0 + 120LL))(v3);
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  char v6 = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    swift_beginAccess(v0 + 3, v9, 0LL, 0LL);
    return swift_retain(v0[4]);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001F5468()
{
  uint64_t v1 = (void *)(v0 + 24);
  swift_beginAccess(v0 + 24, v24, 0LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *v1;
    swift_retain(*v1);
    uint64_t result = swift_retain(v2);
    unint64_t v6 = 0LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v6 < *(void *)(v2 + 16))
    {
      uint64_t v8 = *(void *)(v2 + 8 * v6 + 32);
      Swift::String v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 152LL);
      uint64_t v10 = swift_retain(v8);
      uint64_t v11 = v9(v10);
      uint64_t v13 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = sub_1001E1164(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1) {
        uint64_t v7 = sub_1001E1164((void *)(v14 > 1), v15 + 1, 1, v7);
      }
      ++v6;
      v7[2] = v15 + 1;
      unsigned __int8 v16 = &v7[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      uint64_t result = swift_release(v8);
      if (v3 == v6)
      {
        swift_release(v2);
        swift_release(v4);
        goto LABEL_10;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_10:
    uint64_t v17 = sub_100156B68(&qword_1003FA010);
    uint64_t v18 = sub_1001604E8( (unint64_t *)&qword_1003F8950,  &qword_1003FA010,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)(0xA7C0A7C0ALL, 0xE500000000000000LL, v17, v18);
    Swift::String v21 = v20;
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = 10LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    return 10LL;
  }

  return result;
}

uint64_t sub_1001F566C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v8);
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  char v11 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v13 = type metadata accessor for RoutingTimeline.Observer();
  uint64_t v6 = swift_allocObject(v13, 32LL, 7LL);
  *(void *)(v6 + 24) = 0LL;
  uint64_t v14 = swift_unknownObjectWeakInit(v6 + 16, 0LL);
  *(void *)(v6 + 24) = a2;
  swift_unknownObjectWeakAssign(v14, a1);
  swift_beginAccess(v3 + 40, v20, 33LL, 0LL);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  uint64_t v16 = *(void *)(v3 + 40) & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v3 = *(void *)(v16 + 0x10);
  unint64_t v12 = *(void *)(v16 + 24);
  if (v3 >= v12 >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v3 + 1, 1LL);
  uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v6);
  specialized Array._endMutation()(v17);
  return swift_endAccess(v20);
}

uint64_t sub_1001F57C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  void *v9 = (*(uint64_t (**)(uint64_t))(*v2 + 120))(v7);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  char v10 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_6:
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    uint64_t result = swift_bridgeObjectRelease();
    if (v12 >= a2) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }

  swift_beginAccess(v2 + 5, v15, 33LL, 0LL);
  swift_unknownObjectRetain(a1);
  a2 = sub_1001FB018(v2 + 5, a1);
  uint64_t result = swift_unknownObjectRelease(a1);
  a1 = v2[5];
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v12 >= a2)
  {
LABEL_4:
    sub_1001FB3E8(a2, v12);
    return swift_endAccess(v15);
  }

uint64_t sub_1001F5938(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v72 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RoutingEvent(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v71 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v67 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v67 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v21 = (void **)((char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v68 = v4;
  *Swift::String v21 = (*(uint64_t (**)(uint64_t))(v4 + 120))(v19);
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  LOBYTE(v4) = _dispatchPreconditionTest(_:)(v21);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if ((v4 & 1) != 0)
  {
    sub_1001F4B80(a1, (uint64_t)v16);
    uint64_t v23 = type metadata accessor for RoutingTimeline.Event(0LL);
    uint64_t v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    *(void *)(v24 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = 0LL;
    uint64_t v25 = v24 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
    *(void *)(v25 + 8) = 0LL;
    *(void *)(v25 + sub_100183478(v0 + 16) = 0LL;
    *(void *)uint64_t v25 = 0LL;
    *(_BYTE *)(v25 + 24) = 0;
    sub_1001F4FB4((uint64_t)v16, v24 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent);
    v76[0] = *(void *)(a1 + *(int *)(v10 + 24));
    uint64_t v26 = v76[0];
    uint64_t v27 = swift_allocObject(&unk_1003A7188, 24LL, 7LL);
    swift_weakInit(v27 + 16, v2);
    uint64_t v28 = swift_allocObject(&unk_1003A71B0, 32LL, 7LL);
    *(void *)(v28 + sub_100183478(v0 + 16) = v27;
    *(void *)(v28 + 24) = v24;
    swift_retain(v26);
    swift_retain(v24);
    uint64_t v29 = sub_100156B68(&qword_1003F8EB0);
    uint64_t v30 = sub_1001604E8(&qword_1003F8EB8, &qword_1003F8EB0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v31 = Publisher<>.sink(receiveValue:)(sub_1001FB768, v28, v29, v30);
    swift_release(v28);
    swift_release(v76[0]);
    uint64_t v32 = *(void *)(v24 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer);
    *(void *)(v24 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = v31;
    swift_release(v32);
    uint64_t v33 = sub_1001741A8();
    uint64_t v34 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v74, v33, v8);
    uint64_t v69 = a1;
    uint64_t v35 = sub_1001F4B80(a1, v73);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v70 = v8;
    if (v38)
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v67 = v2;
      uint64_t v40 = v39;
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      v76[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315394;
      uint64_t v42 = _typeName(_:qualified:)(v68, 0LL);
      uint64_t v75 = sub_10015ADC4(v42, v43, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v40 + 4, v40 + 12);
      uint64_t v44 = swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v45 = v73;
      uint64_t v46 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v44);
      uint64_t v75 = sub_10015ADC4(v46, v47, v76);
      uint64_t v34 = v72;
      uint64_t v8 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease();
      sub_1001FAFBC(v45);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%s] addEvent<%s>", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      uint64_t v48 = v40;
      unint64_t v2 = v67;
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      sub_1001FAFBC(v73);
    }

    id v49 = *(void (**)(char *, uint64_t))(v34 + 8);
    v49(v74, v8);
    swift_beginAccess(v2 + 3, v76, 33LL, 0LL);
    sub_1001F9B7C(v24);
    swift_endAccess(v76);
    uint64_t v50 = sub_1001744D4();
    sub_10017434C(v50, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v7, 1LL, v8) == 1)
    {
      sub_1001FB770((uint64_t)v7);
    }

    else
    {
      sub_1001F4B80(v69, v71);
      uint64_t v51 = swift_retain_n(v2, 2LL);
      uint64_t v74 = v7;
      id v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = swift_slowAlloc(96LL, -1LL);
        uint64_t v57 = v71;
        uint64_t v73 = v56;
        v76[0] = v56;
        *(_DWORD *)uint64_t v55 = 136315650;
        uint64_t v58 = _typeName(_:qualified:)(v68, 0LL);
        uint64_t v75 = sub_10015ADC4(v58, v59, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v55 + 4, v55 + 12);
        uint64_t v60 = swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        uint64_t v61 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v60);
        uint64_t v75 = sub_10015ADC4(v61, v62, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v55 + 14, v55 + 22);
        swift_bridgeObjectRelease();
        uint64_t v63 = sub_1001FAFBC(v57);
        *(_WORD *)(v55 + 22) = 2080;
        uint64_t v64 = (*(uint64_t (**)(uint64_t))(*v2 + 192LL))(v63);
        uint64_t v75 = sub_10015ADC4(v64, v65, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v55 + 24, v55 + 32);
        swift_release_n(v2, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "[%s] addEvent<%s> - updated timeline:%s",  (uint8_t *)v55,  0x20u);
        uint64_t v66 = v73;
        swift_arrayDestroy(v73, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {

        sub_1001FAFBC(v71);
        swift_release_n(v2, 2LL);
      }

      v49(v74, v70);
    }

    sub_1001F942C();
    return swift_release(v24);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001F6018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  a2 += 16LL;
  unsigned __int8 v13 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(a2, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v15 = result;
    void *v9 = (*(uint64_t (**)(uint64_t))(*(void *)result + 120LL))(result);
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
    char v16 = _dispatchPreconditionTest(_:)(v9);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    if ((v16 & 1) != 0)
    {
      sub_1001F6140(a3, v10, v11, v12, v13);
      return swift_release(v15);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

unint64_t sub_1001F6140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v11 = *v5;
  uint64_t v12 = *(uint64_t (**)(void))(*(void *)a1 + 128LL);
  unint64_t result = v12();
  if (result != 2)
  {
    unint64_t v17 = sub_1001A70C8(result, v14, v15, v16);
    unint64_t v18 = ((uint64_t (*)(unint64_t))v12)(v17);
    if (v18)
    {
      sub_1001A70C8(v18, v19, v20, v21);
      v37[0] = 0LL;
      v37[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(52LL);
      v30._uint64_t countAndFlagsBits = 91LL;
      v30._object = (void *)0xE100000000000000LL;
      String.append(_:)(v30);
      v31._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v11, 0LL);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 0xD000000000000017LL;
      v32._object = (void *)0x800000010033CD00LL;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)a1 + 160LL))();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._object = (void *)0x800000010033CD20LL;
      v34._uint64_t countAndFlagsBits = 0xD000000000000016LL;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)a1 + 152LL))();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  150LL,  0);
      __break(1u);
    }

    else
    {
      uint64_t v22 = a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
      swift_beginAccess(a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v37, 1LL, 0LL);
      if (a2)
      {
        uint64_t v23 = *(void *)(v22 + 8);
        unint64_t v36 = *(void *)v22;
        uint64_t v24 = *(void *)(v22 + 16);
        *(void *)uint64_t v22 = a2;
        *(void *)(v22 + 8) = a3;
        *(void *)(v22 + sub_100183478(v0 + 16) = a4;
        unsigned __int8 v25 = *(_BYTE *)(v22 + 24);
        *(_BYTE *)(v22 + 24) = a5;
        swift_errorRetain(a2);
        sub_100156A2C(a3, a4, a5);
        unint64_t v26 = v36;
        uint64_t v27 = v23;
        uint64_t v28 = v24;
        unsigned __int8 v29 = v25;
      }

      else
      {
        unint64_t v26 = *(void *)v22;
        uint64_t v27 = *(void *)(v22 + 8);
        uint64_t v28 = *(void *)(v22 + 16);
        *(void *)(v22 + 8) = 0LL;
        *(void *)(v22 + sub_100183478(v0 + 16) = 0LL;
        *(void *)uint64_t v22 = 1LL;
        unsigned __int8 v29 = *(_BYTE *)(v22 + 24);
        *(_BYTE *)(v22 + 24) = 0;
      }

      sub_1001A70C8(v26, v27, v28, v29);
      return sub_1001F638C(a1);
    }
  }

  return result;
}

uint64_t sub_1001F638C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v161 = &v154[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v9 = &v154[-v8];
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v155 = &v154[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v158 = &v154[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = &v154[-v17];
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(v16);
  unsigned __int8 v21 = v20;
  uint64_t v22 = sub_1001741A8();
  uint64_t v162 = v11;
  uint64_t v23 = *(void (**)(void))(v11 + 16);
  uint64_t v159 = v22;
  char v160 = (void (*)(_BYTE *, uint64_t, uint64_t))v23;
  v23(v18);
  swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v24 = swift_retain_n(a1, 2LL);
  unsigned __int8 v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter();
  int v27 = v26;
  BOOL v28 = os_log_type_enabled(v25, v26);
  uint64_t v166 = v10;
  id v167 = v21;
  uint64_t v168 = v2;
  uint64_t v164 = v4;
  uint64_t v163 = v19;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v157 = v9;
    uint64_t v30 = a1;
    uint64_t v31 = v29;
    uint64_t v32 = swift_slowAlloc(96LL, -1LL);
    uint64_t v169 = v32;
    *(_DWORD *)uint64_t v31 = 136315650;
    LODWORD(v165) = v27;
    uint64_t v33 = _typeName(_:qualified:)(v4, 0LL);
    uint64_t v179 = sub_10015ADC4(v33, v34, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v179 = sub_10015ADC4(v19, (unint64_t)v21, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v21, 3LL);
    *(_WORD *)(v31 + 22) = 2080;
    Swift::String v35 = *(uint64_t (**)(uint64_t))(*(void *)v30 + 152LL);
    uint64_t v36 = swift_retain(v30);
    uint64_t v37 = v35(v36);
    unint64_t v39 = v38;
    swift_release(v30);
    uint64_t v179 = sub_10015ADC4(v37, v39, &v169);
    unint64_t v2 = v168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v31 + 24, v31 + 32);
    swift_release_n(v30, 2LL);
    unsigned __int8 v21 = v167;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v165,  "[%s] rebuild<%s> - rebuild for event: %s",  (uint8_t *)v31,  0x20u);
    swift_arrayDestroy(v32, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v32;
    uint64_t v10 = v166;
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v41 = v31;
    a1 = v30;
    uint64_t v9 = v157;
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease_n(v21, 2LL);
  }

  uint64_t v42 = v162;
  os_log_type_t v165 = *(void (**)(_BYTE *, uint64_t))(v162 + 8);
  v165(v18, v10);
  uint64_t v156 = sub_1001744D4();
  sub_10017434C(v156, (uint64_t)v9);
  uint64_t v157 = *(_BYTE **)(v42 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v157)(v9, 1LL, v10) == 1)
  {
    sub_1001FB770((uint64_t)v9);
  }

  else
  {
    swift_bridgeObjectRetain_n(v21, 2LL);
    uint64_t v43 = swift_retain_n(v2, 2LL);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = swift_slowAlloc(96LL, -1LL);
      uint64_t v169 = v47;
      *(_DWORD *)uint64_t v46 = 136315650;
      uint64_t v48 = _typeName(_:qualified:)(v164, 0LL);
      uint64_t v179 = sub_10015ADC4(v48, v49, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v179 = sub_10015ADC4(v163, (unint64_t)v21, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v46 + 14, v46 + 22);
      uint64_t v50 = swift_bridgeObjectRelease_n(v21, 3LL);
      *(_WORD *)(v46 + 22) = 2080;
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*v168 + 192LL))(v50);
      uint64_t v179 = sub_10015ADC4(v51, v52, &v169);
      unint64_t v2 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v46 + 24, v46 + 32);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%s] rebuild<%s> - current: %s", (uint8_t *)v46, 0x20u);
      swift_arrayDestroy(v47, 3LL, (char *)&type metadata for Any + 8);
      uint64_t v53 = v47;
      uint64_t v10 = v166;
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease_n(v21, 2LL);
    }

    v165(v9, v10);
  }

  id v54 = v2 + 3;
  swift_beginAccess(v2 + 3, v178, 0LL, 0LL);
  uint64_t v56 = v2[3];
  uint64_t v55 = v2[4];
  uint64_t v57 = *(void *)(v55 + 16);
  swift_retain(v55);
  if (v56)
  {
    swift_retain(v56);
    sub_1001FA118(a1, v55 + 32, v57, (void *)(v56 + 16), v56 + 32);
  }

  else
  {
    sub_1001F9FAC(a1, v55 + 32, v57);
  }

  char v59 = v58;
  uint64_t v60 = v164;
  swift_release(v55);
  uint64_t v61 = swift_release(v56);
  if ((v59 & 1) != 0)
  {
LABEL_50:
    uint64_t v169 = 0LL;
    unint64_t v170 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(64LL);
    v138._uint64_t countAndFlagsBits = 91LL;
    v138._object = (void *)0xE100000000000000LL;
    String.append(_:)(v138);
    v139._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v60, 0LL);
    String.append(_:)(v139);
    swift_bridgeObjectRelease();
    v140._uint64_t countAndFlagsBits = 0x6C6975626572205DLL;
    v140._object = (void *)0xEA00000000003C64LL;
    String.append(_:)(v140);
    v141._uint64_t countAndFlagsBits = v163;
    v141._object = v21;
    String.append(_:)(v141);
    swift_bridgeObjectRelease();
    v142._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v142._object = (void *)0x800000010033CC20LL;
    String.append(_:)(v142);
    v143._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)a1 + 152LL))();
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v169,  v170,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  213LL,  0);
    goto LABEL_53;
  }

  unint64_t v62 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL);
  uint64_t v162 = a1;
  uint64_t v63 = v62(v61);
  unint64_t v65 = v168;
  if (v63 != 1)
  {
    if (v63)
    {
      if (v63 != 2) {
        __asm { BR              X10 }
      }

      uint64_t v169 = 0LL;
      unint64_t v170 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(58LL);
      v149._uint64_t countAndFlagsBits = 91LL;
      v149._object = (void *)0xE100000000000000LL;
      String.append(_:)(v149);
      v150._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v60, 0LL);
      String.append(_:)(v150);
      swift_bridgeObjectRelease();
      v151._uint64_t countAndFlagsBits = 0x6C6975626572205DLL;
      v151._object = (void *)0xEA00000000003C64LL;
      String.append(_:)(v151);
      v152._uint64_t countAndFlagsBits = v163;
      v152._object = v21;
      String.append(_:)(v152);
      swift_bridgeObjectRelease();
      v153._object = (void *)0x800000010033CC80LL;
      v153._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
      String.append(_:)(v153);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v169,  v170,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  218LL,  0);
    }

    else
    {
      uint64_t v169 = 0LL;
      unint64_t v170 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(60LL);
      v144._uint64_t countAndFlagsBits = 91LL;
      v144._object = (void *)0xE100000000000000LL;
      String.append(_:)(v144);
      v145._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v60, 0LL);
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
      v146._uint64_t countAndFlagsBits = 0x6C6975626572205DLL;
      v146._object = (void *)0xEA00000000003C64LL;
      String.append(_:)(v146);
      v147._uint64_t countAndFlagsBits = v163;
      v147._object = v21;
      String.append(_:)(v147);
      swift_bridgeObjectRelease();
      v148._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v148._object = (void *)0x800000010033CC50LL;
      String.append(_:)(v148);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v169,  v170,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  220LL,  0);
    }

void sub_1001F788C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v148 = a8;
  uint64_t v162 = a7;
  uint64_t v149 = a5;
  uint64_t v13 = type metadata accessor for RoutingControl.Target(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for RoutingControl(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  unint64_t v137 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v160 = *(void *)(v18 - 8);
  uint64_t v161 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v136 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v155 = (char *)&v126 - v21;
  uint64_t v22 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v158 = v22;
  uint64_t v159 = v23;
  __chkstk_darwin(v22);
  uint64_t v163 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v25 = swift_beginAccess(a4 + 24, v169, 0LL, 0LL);
  uint64_t v26 = *(void *)(*(void *)(a4 + 32) + 16LL);
  if (v26 <= a3) {
    return;
  }
  int v156 = enum case for RoutingInteraction.Action.add(_:);
  int v150 = enum case for RoutingInteraction.Action.remove(_:);
  int v141 = enum case for RoutingInteraction.Action.set(_:);
  int v140 = enum case for RoutingInteraction.Action.setActiveSession(_:);
  int v135 = enum case for RoutingInteraction.Action.setActiveItem(_:);
  int v133 = enum case for RoutingInteraction.Action.handoff(_:);
  Swift::String v145 = v166;
  int v130 = enum case for RoutingInteraction.Action.control(_:);
  int v129 = enum case for RoutingControl.Target.session(_:);
  Swift::String v142 = (char *)&type metadata for Any + 8;
  v25.n128_u64[0] = 136315906LL;
  __n128 v144 = v25;
  unint64_t v27 = a3;
  uint64_t v146 = a4;
  uint64_t v147 = a3;
  Swift::String v143 = a6;
  uint64_t v154 = a2;
  uint64_t v153 = a1;
  uint64_t v132 = v13;
  uint64_t v131 = v14;
  unint64_t v134 = (uint64_t *)v16;
  uint64_t v157 = v26;
  while ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v33 = *(void *)(a4 + 32);
    if (v27 >= *(void *)(v33 + 16)) {
      goto LABEL_49;
    }
    uint64_t v34 = *(void *)(v33 + 8 * v27 + 32);
    Swift::String v35 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 128LL);
    uint64_t v36 = swift_retain(v34);
    unint64_t v37 = v35(v36);
    if (v37)
    {
      sub_1001A70C8(v37, v38, v39, v40);
      goto LABEL_11;
    }

    uint64_t v42 = v163;
    (*(void (**)(void))(*(void *)v34 + 168LL))();
    uint64_t v44 = v158;
    uint64_t v43 = v159;
    int v45 = (*(uint64_t (**)(char *, uint64_t))(v159 + 88))(v42, v158);
    if (v45 == v156)
    {
      (*(void (**)(char *, uint64_t))(v43 + 96))(v42, v44);
      goto LABEL_17;
    }

    if (v45 == v150)
    {
      uint64_t v42 = v163;
      (*(void (**)(char *, uint64_t))(v43 + 96))(v163, v44);
LABEL_17:
      uint64_t v46 = *((void *)v42 + 2);
      uint64_t v47 = *((void *)v42 + 3);
LABEL_18:
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }

    if (v45 == v141)
    {
      uint64_t v74 = v44;
      unint64_t v75 = v163;
      (*(void (**)(char *, uint64_t))(v43 + 96))(v163, v74);
      uint64_t v46 = *((void *)v75 + 2);
      uint64_t v47 = *((void *)v75 + 3);
      goto LABEL_18;
    }

    if (v45 == v140)
    {
      uint64_t v76 = v44;
      uint64_t v77 = v163;
      (*(void (**)(char *, uint64_t))(v43 + 96))(v163, v76);
      uint64_t v46 = *(void *)v77;
      uint64_t v47 = *((void *)v77 + 1);
    }

    else
    {
      if (v45 == v135)
      {
        unint64_t v78 = v163;
        swift_release(v34);
        (*(void (**)(char *, uint64_t))(v43 + 96))(v78, v44);
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }

      if (v45 != v133)
      {
        uint64_t v82 = v131;
        uint64_t v26 = v157;
        if (v45 != v130) {
          goto LABEL_50;
        }
        uint64_t v83 = v44;
        uint64_t v84 = (uint64_t *)v163;
        (*(void (**)(char *, uint64_t))(v159 + 96))(v163, v83);
        uint64_t v152 = *v84;
        uint64_t v85 = swift_projectBox(v152);
        uint64_t v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v137, v85, v139);
        RoutingControl.target.getter(v86);
        uint64_t v87 = v132;
        int v88 = (*(uint64_t (**)(uint64_t *, uint64_t))(v82 + 88))(v134, v132);
        if (v88 == v129)
        {
          uint64_t v89 = *(void (**)(uint64_t *, uint64_t))(v82 + 96);
          uint64_t v90 = v134;
          v89(v134, v87);
          uint64_t v91 = *v90;
          uint64_t v92 = v90[1];
          if (v91 == a1 && v92 == a2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }

          char v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v92, a1, a2, 0LL);
          swift_bridgeObjectRelease();
          if ((v93 & 1) != 0)
          {
LABEL_41:
            uint64_t v94 = sub_1001741A8();
            unsigned __int8 v95 = v136;
            (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v136, v94, v161);
            swift_retain_n(v34, 2LL);
            swift_bridgeObjectRetain_n(a6, 2LL);
            uint64_t v96 = swift_retain_n(v162, 2LL);
            uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
            os_log_type_t v98 = static os_log_type_t.info.getter();
            Swift::String v151 = v97;
            int v128 = v98;
            if (os_log_type_enabled(v97, v98))
            {
              uint64_t v99 = swift_slowAlloc(42LL, -1LL);
              uint64_t v127 = swift_slowAlloc(128LL, -1LL);
              uint64_t v167 = v127;
              *(_DWORD *)uint64_t v99 = v144.n128_u32[0];
              uint64_t v100 = _typeName(_:qualified:)(v148, 0LL);
              uint64_t v165 = sub_10015ADC4(v100, v101, &v167);
              uint64_t v102 = v145;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v145, v99 + 4, v99 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v99 + 12) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v165 = sub_10015ADC4(v149, (unint64_t)a6, &v167);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v102, v99 + 14, v99 + 22);
              swift_bridgeObjectRelease_n(a6, 3LL);
              *(_WORD *)(v99 + 22) = 2080;
              uint64_t v103 = v162;
              uint64_t v104 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 152LL);
              uint64_t v105 = swift_retain(v34);
              uint64_t v106 = v104(v105);
              unint64_t v108 = v107;
              swift_release(v34);
              uint64_t v165 = sub_10015ADC4(v106, v108, &v167);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v102, v99 + 24, v99 + 32);
              swift_release_n(v34, 2LL);
              swift_bridgeObjectRelease();
              *(_WORD *)(v99 + 32) = 2080;
              uint64_t v109 = *(uint64_t (**)(uint64_t))(*(void *)v103 + 152LL);
              uint64_t v110 = swift_retain(v103);
              uint64_t v111 = v109(v110);
              unint64_t v113 = v112;
              swift_release(v103);
              uint64_t v165 = sub_10015ADC4(v111, v113, &v167);
              uint64_t v26 = v157;
              a3 = v147;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v102, v99 + 34, v99 + 42);
              swift_release_n(v103, 2LL);
              a4 = v146;
              swift_bridgeObjectRelease();
              id v114 = v151;
              _os_log_impl( (void *)&_mh_execute_header,  v151,  (os_log_type_t)v128,  "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s",  (uint8_t *)v99,  0x2Au);
              uint64_t v115 = v127;
              swift_arrayDestroy(v127, 4LL, (char *)&type metadata for Any + 8);
              a2 = v154;
              swift_slowDealloc(v115, -1LL, -1LL);
              uint64_t v116 = v99;
              a1 = v153;
              swift_slowDealloc(v116, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v160 + 8))(v136, v161);
            }

            else
            {
              swift_bridgeObjectRelease_n(a6, 2LL);
              swift_release_n(v34, 2LL);
              swift_release_n(v162, 2LL);

              (*(void (**)(char *, uint64_t))(v160 + 8))(v95, v161);
            }

            (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
            uint64_t v117 = v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
            swift_beginAccess(v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v166, 1LL, 0LL);
            unint64_t v118 = *(void *)v117;
            uint64_t v119 = *(void *)(v117 + 8);
            uint64_t v120 = *(void *)(v117 + 16);
            *(void *)(v117 + 8) = 0LL;
            *(void *)(v117 + sub_100183478(v0 + 16) = 0LL;
            *(void *)uint64_t v117 = 2LL;
            unsigned __int8 v121 = *(_BYTE *)(v117 + 24);
            *(_BYTE *)(v117 + 24) = 0;
            sub_1001A70C8(v118, v119, v120, v121);
          }

          else
          {
            (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
          }

          swift_release(v152);
LABEL_11:
          uint64_t v41 = v34;
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
          swift_release(v34);
          (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v134, v87);
          uint64_t v41 = v152;
        }

        swift_release(v41);
        goto LABEL_6;
      }

      uint64_t v79 = *(void (**)(char *, uint64_t))(v43 + 96);
      uint64_t v80 = v163;
      v79(v163, v44);
      uint64_t v81 = *(void *)v80;
      uint64_t v46 = *(void *)(*(void *)v80 + 16LL);
      uint64_t v47 = *(void *)(v81 + 24);
      swift_bridgeObjectRetain();
      a3 = v147;
      swift_release(v81);
    }

void sub_1001F8644( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v138 = a8;
  uint64_t v151 = a7;
  uint64_t v152 = a6;
  uint64_t v139 = a5;
  uint64_t v147 = a2;
  uint64_t v153 = a1;
  unint64_t v10 = type metadata accessor for RoutingControl.Target(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for RoutingControl(0LL);
  uint64_t v130 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v129 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  unint64_t v17 = *(void *)(v16 - 8);
  uint64_t v149 = v16;
  unint64_t v150 = v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  Swift::String v145 = (char *)&v118 - v21;
  uint64_t v154 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v22 = *(void *)(v154 - 8);
  uint64_t v23 = __chkstk_darwin(v154);
  int v128 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v148 = (unint64_t *)((char *)&v118 - v25);
  __n128 v26 = swift_beginAccess(a4 + 24, v161, 0LL, 0LL);
  uint64_t v155 = *(void *)(*(void *)(a4 + 32) + 16LL);
  if (v155 <= a3) {
    return;
  }
  int v146 = enum case for RoutingInteraction.Action.add(_:);
  int v140 = enum case for RoutingInteraction.Action.remove(_:);
  int v132 = enum case for RoutingInteraction.Action.set(_:);
  int v131 = enum case for RoutingInteraction.Action.setActiveSession(_:);
  int v127 = enum case for RoutingInteraction.Action.setActiveItem(_:);
  int v125 = enum case for RoutingInteraction.Action.handoff(_:);
  int v135 = v158;
  int v121 = enum case for RoutingInteraction.Action.control(_:);
  int v120 = enum case for RoutingControl.Target.item(_:);
  int v133 = (char *)&type metadata for Any + 8;
  v26.n128_u64[0] = 136315906LL;
  __n128 v134 = v26;
  unint64_t v27 = a3;
  uint64_t v137 = v22;
  uint64_t v136 = a4;
  uint64_t v144 = a3;
  Swift::String v143 = v20;
  unint64_t v124 = v10;
  uint64_t v123 = v11;
  Swift::String v122 = (uint64_t *)v13;
  uint64_t v126 = v14;
  while ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v33 = *(void *)(a4 + 32);
    if (v27 >= *(void *)(v33 + 16)) {
      goto LABEL_43;
    }
    uint64_t v34 = *(void *)(v33 + 8 * v27 + 32);
    Swift::String v35 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 128LL);
    uint64_t v36 = swift_retain(v34);
    unint64_t v37 = v35(v36);
    if (!v37)
    {
      unint64_t v10 = *(void *)(*(void *)v34 + 168LL);
      uint64_t v42 = v148;
      ((void (*)(void))v10)();
      int v43 = (*(uint64_t (**)(unint64_t *, uint64_t))(v22 + 88))(v42, v154);
      if (v43 == v146 || v43 == v140 || v43 == v132)
      {
        (*(void (**)(unint64_t *, uint64_t))(v22 + 96))(v42, v154);
        uint64_t v44 = v42;
        unint64_t v45 = *v42;
        unint64_t v46 = v44[1];
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }

      if (v43 == v131)
      {
        swift_release(v34);
        (*(void (**)(unint64_t *, uint64_t))(v22 + 96))(v42, v154);
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }

      if (v43 == v127)
      {
        (*(void (**)(unint64_t *, uint64_t))(v22 + 96))(v42, v154);
        uint64_t v72 = v42;
        unint64_t v45 = *v42;
        unint64_t v46 = v72[1];
        goto LABEL_16;
      }

      if (v43 == v125)
      {
        (*(void (**)(unint64_t *, uint64_t))(v22 + 96))(v42, v154);
        unint64_t v10 = *v42;
        unint64_t v45 = *(void *)(*v42 + 32);
        unint64_t v46 = *(void *)(v10 + 40);
        swift_bridgeObjectRetain();
        swift_release(v10);
LABEL_16:
        if (v45 == v153 && v46 == v147)
        {
          swift_bridgeObjectRelease();
LABEL_20:
          uint64_t v48 = sub_1001741A8();
          uint64_t v49 = v149;
          unint64_t v10 = v150;
          uint64_t v50 = v145;
          (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v145, v48, v149);
          swift_retain_n(v34, 2LL);
          swift_bridgeObjectRetain_n(v152, 2LL);
          uint64_t v51 = swift_retain_n(v151, 2LL);
          unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
          os_log_type_t v53 = static os_log_type_t.info.getter();
          int v54 = v53;
          if (os_log_type_enabled(v52, v53))
          {
            uint64_t v55 = swift_slowAlloc(42LL, -1LL);
            uint64_t v142 = swift_slowAlloc(128LL, -1LL);
            uint64_t v159 = v142;
            *(_DWORD *)uint64_t v55 = v134.n128_u32[0];
            int v141 = v54;
            uint64_t v56 = _typeName(_:qualified:)(v138, 0LL);
            uint64_t v57 = v151;
            uint64_t v157 = sub_10015ADC4(v56, v58, &v159);
            unint64_t v10 = (unint64_t)v135;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v135, v55 + 4, v55 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v55 + 12) = 2080;
            unint64_t v59 = (unint64_t)v152;
            swift_bridgeObjectRetain();
            uint64_t v157 = sub_10015ADC4(v139, v59, &v159);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v10, v55 + 14, v55 + 22);
            swift_bridgeObjectRelease_n(v59, 3LL);
            *(_WORD *)(v55 + 22) = 2080;
            unint64_t v60 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 152LL);
            uint64_t v61 = swift_retain(v34);
            uint64_t v62 = v60(v61);
            unint64_t v64 = v63;
            swift_release(v34);
            uint64_t v157 = sub_10015ADC4(v62, v64, &v159);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v10, v55 + 24, v55 + 32);
            swift_release_n(v34, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v55 + 32) = 2080;
            unint64_t v65 = *(uint64_t (**)(uint64_t))(*(void *)v57 + 152LL);
            uint64_t v66 = swift_retain(v57);
            uint64_t v67 = v65(v66);
            unint64_t v69 = v68;
            swift_release(v57);
            uint64_t v157 = sub_10015ADC4(v67, v69, &v159);
            uint64_t v70 = v57;
            a4 = v136;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v10, v55 + 34, v55 + 42);
            swift_release_n(v70, 2LL);
            swift_bridgeObjectRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v141,  "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s",  (uint8_t *)v55,  0x2Au);
            uint64_t v71 = v142;
            swift_arrayDestroy(v142, 4LL, v133);
            uint64_t v22 = v137;
            swift_slowDealloc(v71, -1LL, -1LL);
            swift_slowDealloc(v55, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v150 + 8))(v50, v149);
          }

          else
          {

            swift_release_n(v151, 2LL);
            swift_release_n(v34, 2LL);
            swift_bridgeObjectRelease_n(v152, 2LL);
            (*(void (**)(char *, uint64_t))(v10 + 8))(v50, v49);
          }

          uint64_t v28 = v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
          swift_beginAccess(v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v156, 1LL, 0LL);
          unint64_t v29 = *(void *)v28;
          uint64_t v30 = *(void *)(v28 + 8);
          uint64_t v31 = *(void *)(v28 + 16);
          *(void *)(v28 + 8) = 0LL;
          *(void *)(v28 + sub_100183478(v0 + 16) = 0LL;
          *(void *)uint64_t v28 = 2LL;
          unsigned __int8 v32 = *(_BYTE *)(v28 + 24);
          *(_BYTE *)(v28 + 24) = 0;
          sub_1001A70C8(v29, v30, v31, v32);
          swift_release(v34);
          a3 = v144;
          uint64_t v20 = v143;
          goto LABEL_5;
        }

        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v153, v147, 0LL);
        swift_bridgeObjectRelease();
        if ((v47 & 1) != 0) {
          goto LABEL_20;
        }
        goto LABEL_10;
      }

      if (v43 != v121) {
        goto LABEL_44;
      }
      (*(void (**)(unint64_t *, uint64_t))(v22 + 96))(v42, v154);
      uint64_t v73 = *v42;
      uint64_t v74 = swift_projectBox(*v42);
      uint64_t v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v74, v126);
      uint64_t v76 = v122;
      RoutingControl.target.getter(v75);
      uint64_t v77 = v123;
      unint64_t v10 = v124;
      int v78 = (*(uint64_t (**)(uint64_t *, unint64_t))(v123 + 88))(v76, v124);
      if (v78 != v120)
      {
        (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v126);
        swift_release(v34);
        (*(void (**)(uint64_t *, unint64_t))(v77 + 8))(v76, v10);
        uint64_t v41 = v73;
        goto LABEL_11;
      }

      uint64_t v142 = v73;
      (*(void (**)(uint64_t *, unint64_t))(v77 + 96))(v76, v10);
      uint64_t v79 = *v76;
      uint64_t v80 = v76[1];
      if (v79 == v153 && v80 == v147)
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }

      char v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v153, v147, 0LL);
      swift_bridgeObjectRelease();
      if ((v81 & 1) != 0)
      {
LABEL_35:
        uint64_t v82 = sub_1001741A8();
        uint64_t v83 = v149;
        (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v20, v82, v149);
        swift_retain_n(v34, 2LL);
        swift_bridgeObjectRetain_n(v152, 2LL);
        uint64_t v84 = swift_retain_n(v151, 2LL);
        uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
        os_log_type_t v86 = static os_log_type_t.info.getter();
        int v141 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc(42LL, -1LL);
          uint64_t v119 = swift_slowAlloc(128LL, -1LL);
          uint64_t v159 = v119;
          *(_DWORD *)uint64_t v87 = v134.n128_u32[0];
          os_log_t v118 = v85;
          uint64_t v88 = _typeName(_:qualified:)(v138, 0LL);
          uint64_t v157 = sub_10015ADC4(v88, v89, &v159);
          uint64_t v90 = v135;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v135, v87 + 4, v87 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 12) = 2080;
          unint64_t v91 = (unint64_t)v152;
          swift_bridgeObjectRetain();
          uint64_t v157 = sub_10015ADC4(v139, v91, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v90, v87 + 14, v87 + 22);
          swift_bridgeObjectRelease_n(v91, 3LL);
          *(_WORD *)(v87 + 22) = 2080;
          uint64_t v92 = v151;
          char v93 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 152LL);
          uint64_t v94 = swift_retain(v34);
          uint64_t v95 = v93(v94);
          unint64_t v97 = v96;
          swift_release(v34);
          uint64_t v157 = sub_10015ADC4(v95, v97, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v90, v87 + 24, v87 + 32);
          swift_release_n(v34, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 32) = 2080;
          os_log_type_t v98 = *(uint64_t (**)(uint64_t))(*(void *)v92 + 152LL);
          uint64_t v99 = swift_retain(v92);
          uint64_t v100 = v98(v99);
          unint64_t v10 = v101;
          swift_release(v92);
          uint64_t v157 = sub_10015ADC4(v100, v10, &v159);
          uint64_t v20 = v143;
          uint64_t v22 = v137;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v90, v87 + 34, v87 + 42);
          swift_release_n(v92, 2LL);
          a4 = v136;
          swift_bridgeObjectRelease();
          os_log_t v102 = v118;
          _os_log_impl( (void *)&_mh_execute_header,  v118,  (os_log_type_t)v141,  "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s",  (uint8_t *)v87,  0x2Au);
          uint64_t v103 = v119;
          swift_arrayDestroy(v119, 4LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1LL, -1LL);
          uint64_t v104 = v87;
          a3 = v144;
          swift_slowDealloc(v104, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v150 + 8))(v20, v149);
        }

        else
        {
          swift_bridgeObjectRelease_n(v152, 2LL);
          swift_release_n(v34, 2LL);
          swift_release_n(v151, 2LL);

          (*(void (**)(char *, uint64_t))(v150 + 8))(v20, v83);
        }

        (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v126);
        uint64_t v105 = v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
        swift_beginAccess(v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v158, 1LL, 0LL);
        unint64_t v106 = *(void *)v105;
        uint64_t v107 = *(void *)(v105 + 8);
        uint64_t v108 = *(void *)(v105 + 16);
        *(void *)(v105 + 8) = 0LL;
        *(void *)(v105 + sub_100183478(v0 + 16) = 0LL;
        *(void *)uint64_t v105 = 2LL;
        unsigned __int8 v109 = *(_BYTE *)(v105 + 24);
        *(_BYTE *)(v105 + 24) = 0;
        sub_1001A70C8(v106, v107, v108, v109);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v126);
      }

      swift_release(v142);
      goto LABEL_10;
    }

    sub_1001A70C8(v37, v38, v39, v40);
LABEL_10:
    uint64_t v41 = v34;
LABEL_11:
    swift_release(v41);
LABEL_5:
    if (v155 == ++v27) {
      return;
    }
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t v159 = 0LL;
  unint64_t v160 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(47LL);
  swift_bridgeObjectRelease();
  uint64_t v159 = 91LL;
  unint64_t v160 = 0xE100000000000000LL;
  v110._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v138, 0LL);
  String.append(_:)(v110);
  swift_bridgeObjectRelease();
  v111._uint64_t countAndFlagsBits = 0x6C6975626572205DLL;
  v111._object = (void *)0xEA00000000003C64LL;
  String.append(_:)(v111);
  v112._uint64_t countAndFlagsBits = v139;
  v112._object = v152;
  String.append(_:)(v112);
  v113._object = (void *)0x800000010033CCB0LL;
  v113._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v113);
  id v114 = v128;
  ((void (*)(void))v10)();
  uint64_t v115 = sub_100156FEC( &qword_1003F7F88,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action,  (uint64_t)&protocol conformance descriptor for RoutingInteraction.Action);
  uint64_t v116 = v154;
  v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v154, v115);
  String.append(_:)(v117);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v114, v116);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v159,  v160,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  206LL,  0);
  __break(1u);
}

uint64_t sub_1001F942C()
{
  uint64_t v2 = v0;
  unint64_t v3 = (uint64_t *)(v0 + 40);
  swift_beginAccess(v3, v41, 33LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v9 = *v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v9 < 0) {
        uint64_t v38 = *v3;
      }
      else {
        uint64_t v38 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v6 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    goto LABEL_12;
  }

LABEL_87:
    if (v6 < 0) {
      unint64_t v3 = (uint64_t *)v6;
    }
    else {
      unint64_t v3 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (!v4) {
      return swift_bridgeObjectRelease();
    }
LABEL_16:
    if (v4 >= 1) {
      break;
    }
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    if (v4 < 0) {
      uint64_t v39 = v4;
    }
    else {
      uint64_t v39 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
    if (v1 != v40) {
      goto LABEL_28;
    }
  }

  for (uint64_t i = 0LL; i != v4; ++i)
  {
    if ((v6 & 0xC000000000000001LL) != 0)
    {
      uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    }

    else
    {
      uint64_t v16 = *(void *)(v6 + 8 * i + 32);
      swift_retain(v16);
    }

    uint64_t v17 = swift_unknownObjectWeakLoadStrong(v16 + 16);
    if (v17)
    {
      uint64_t v13 = v17;
      uint64_t v14 = *(void *)(v16 + 24);
      uint64_t ObjectType = swift_getObjectType(v17, v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(v2, ObjectType, v14);
      swift_release(v16);
      swift_unknownObjectRelease(v13);
    }

    else
    {
      swift_release(v16);
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F9934()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 32));
  swift_release(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

void *sub_1001F9978()
{
  uint64_t v1 = (void *)swift_allocObject(v0, 48LL, 7LL);
  uint64_t v2 = sub_100216E68();
  unint64_t v3 = (void *)*v2;
  v1[2] = *v2;
  id v4 = v3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  v1[3] = 0LL;
  v1[4] = v5;
  v1[5] = _swiftEmptyArrayStorage;
  return v1;
}

unint64_t sub_1001F99E4()
{
  uint64_t v1 = swift_bridgeObjectRelease(0xE000000000000000LL);
  v2._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192LL))(v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000011LL;
}

unint64_t sub_1001F9A68()
{
  return sub_1001F99E4();
}

void *sub_1001F9A88(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      id v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100156B68(&qword_1003F8310);
      id v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain();
    sub_1001FAC10((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

uint64_t sub_1001F9B7C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v3 + 32;
  uint64_t v6 = *(void *)(v3 + 16);
  if (*v1)
  {
    swift_retain(*v1);
    sub_1001FA118(a1, v5, v6, (void *)(v4 + 16), v4 + 32);
    char v8 = v7;
    uint64_t v10 = v9;
    swift_release(v4);
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
    return 0LL;
  }

  sub_1001F9FAC(a1, v3 + 32, *(void *)(v3 + 16));
  if ((v11 & 1) == 0) {
    return 0LL;
  }
  uint64_t v10 = 0LL;
LABEL_7:
  sub_1001F9C48(a1, v10);
  return 1LL;
}

uint64_t sub_1001F9C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 1;
  uint64_t v7 = swift_retain(a1);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  uint64_t v8 = *(void *)(v3[1] + 16);
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, a1);
  uint64_t result = specialized ContiguousArray._endMutation()(v9);
  uint64_t v11 = *v3;
  uint64_t v12 = *(void *)(v3[1] + 16);
  if (*v3)
  {
    swift_beginAccess(v11 + 16, v17, 0LL, 0LL);
    if (static _HashTable.maximumCapacity(forScale:)(*(void *)(v11 + 16) & 0x3FLL) >= v12)
    {
      uint64_t result = swift_isUniquelyReferenced_native(*v3);
      uint64_t v13 = *v3;
      if (!(_DWORD)result)
      {
        if (!v13)
        {
LABEL_12:
          __break(1u);
          return result;
        }

        uint64_t v13 = _HashTable.copy()(*v3);
        uint64_t result = swift_release(*v3);
        *uint64_t v3 = v13;
      }

      if (v13)
      {
        uint64_t v15 = *(void *)(v13 + 16);
        uint64_t v14 = v13 + 16;
        uint64_t v16 = *(void *)(*v6 + 16LL) + ~(*(uint64_t *)(v14 + 8) >> 6);
        return _HashTable.UnsafeHandle.subscript.setter( (-1LL << v15) ^ ~(((v16 >> 63) & ~(-1LL << v15)) + v16),  a2,  v14,  v14 + 16);
      }

      __break(1u);
      goto LABEL_12;
    }
  }

  else if ((unint64_t)v12 < 0x10)
  {
    return result;
  }

  return sub_1001F9D70();
}

uint64_t sub_1001F9D70()
{
  uint64_t v1 = *v0;
  Swift::Int v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess(v1 + 16, v9, 0LL, 0LL);
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = *(void *)(v2 + 16);
  }

  if (v4 < 0x10)
  {
    uint64_t v5 = 0LL;
    goto LABEL_11;
  }

uint64_t sub_1001F9E10(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = static _HashTable.scale(forCapacity:)(*(void *)(a1 + 16));
  uint64_t v9 = 0LL;
  if ((a3 & 1) != 0) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = _HashTable.init(scale:reservedScale:)();
    sub_1001F9E94(a1, (void *)(v9 + 16), v9 + 32);
  }

  return v9;
}

Swift::Int sub_1001F9E94(Swift::Int result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = 0LL;
    Swift::Int v7 = result + 32;
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      Hasher.init(_seed:)(v19, *a2);
      uint64_t v9 = *(void (**)(void *))(*(void *)v8 + 192LL);
      swift_retain(v8);
      v9(v19);
      uint64_t result = Hasher._finalize()();
      uint64_t v10 = 1LL << *a2;
      BOOL v11 = __OFSUB__(v10, 1LL);
      uint64_t v12 = v10 - 1;
      if (v11) {
        break;
      }
      Swift::Int v13 = v12 & result;
      uint64_t v14 = _HashTable.UnsafeHandle._startIterator(bucket:)(v12 & result, a2, a3);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      swift_release(v8);
      v19[0] = a2;
      v19[1] = a3;
      v19[2] = v13;
      uint64_t v20 = v14;
      uint64_t v21 = v16;
      uint64_t v22 = v18;
      char v23 = 0;
      while (v20)
        _HashTable.BucketIterator.advance()();
      uint64_t result = _HashTable.BucketIterator.currentValue.setter(v6++, 0LL);
      if (v6 == v3) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1001F9FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = 0LL;
    uint64_t v6 = a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8 * v5);
      uint64_t v8 = v7 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
      swift_retain(v7);
      if ((j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ(v8, v6) & 1) != 0) {
        break;
      }
      swift_release(v7);
LABEL_4:
      if (v3 == ++v5) {
        return 0LL;
      }
    }

    uint64_t v9 = v6;
    uint64_t v10 = a2;
    unint64_t v11 = (*(uint64_t (**)(void))(*(void *)v7 + 128LL))();
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    unsigned __int8 v17 = v16;
    unint64_t v18 = (*(uint64_t (**)(void))(*(void *)a1 + 128LL))();
    unint64_t v22 = v18;
    if (v11)
    {
      if (v11 == 1)
      {
        if (v18 == 1) {
          goto LABEL_18;
        }
      }

      else
      {
        if (v11 != 2)
        {
          sub_1001A70C8(v18, v19, v20, v21);
          sub_1001A70C8(v11, v13, v15, v17);
          if (v22 >= 3)
          {
LABEL_18:
            swift_release(v7);
            return v5;
          }

          goto LABEL_16;
        }

        if (v18 == 2) {
          goto LABEL_18;
        }
      }
    }

    else if (!v18)
    {
      goto LABEL_18;
    }

    sub_1001A70C8(v18, v19, v20, v21);
LABEL_16:
    swift_release(v7);
    a2 = v10;
    uint64_t v6 = v9;
    uint64_t v3 = a3;
    goto LABEL_4;
  }

  return 0LL;
}

Swift::Int sub_1001FA118(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v39 = a1;
  (*(void (**)(__int128 *))(*(void *)a1 + 192LL))(&v44);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = 1LL << *a4;
  BOOL v11 = __OFSUB__(v10, 1LL);
  uint64_t v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    return result;
  }

  Swift::Int v13 = v12 & result;
  uint64_t v14 = _HashTable.UnsafeHandle._startIterator(bucket:)(v12 & result, a4, a5);
  *(void *)&__int128 v44 = a4;
  *((void *)&v44 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
  *(void *)&__int128 v45 = v13;
  *((void *)&v45 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v14;
  *(void *)&__int128 v46 = v15;
  *((void *)&v46 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v16;
  char v47 = 0;
  uint64_t v17 = _HashTable.BucketIterator.currentValue.getter(v14);
  __int128 v40 = v44;
  __int128 v41 = v45;
  __int128 v42 = v46;
  char v43 = v47;
  if ((v18 & 1) != 0) {
    return v17;
  }
  uint64_t v19 = &unk_100405000;
  uint64_t v20 = a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
  uint64_t v38 = a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
  while (1)
  {
    uint64_t v23 = *(void *)(a2 + 8 * v17);
    uint64_t v24 = v23 + v19[391];
    swift_retain(v23);
    if ((j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ(v24, v20) & 1) != 0) {
      break;
    }
    swift_release(v23);
LABEL_5:
    _HashTable.BucketIterator.advance()();
    __int128 v48 = v40;
    __int128 v49 = v41;
    __int128 v50 = v42;
    char v51 = v43;
    uint64_t v17 = _HashTable.BucketIterator.currentValue.getter(v21);
    if ((v22 & 1) != 0) {
      return v17;
    }
  }

  uint64_t v25 = a2;
  unint64_t v26 = (*(uint64_t (**)(void))(*(void *)v23 + 128LL))();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  unsigned __int8 v32 = v31;
  unint64_t v33 = (*(uint64_t (**)(void))(*(void *)v39 + 128LL))();
  unint64_t v37 = v33;
  switch(v26)
  {
    case 0uLL:
      if (!v33) {
        goto LABEL_19;
      }
      goto LABEL_15;
    case 1uLL:
      if (v33 == 1) {
        goto LABEL_19;
      }
      goto LABEL_15;
    case 2uLL:
      if (v33 == 2) {
        goto LABEL_19;
      }
LABEL_15:
      sub_1001A70C8(v33, v34, v35, v36);
LABEL_17:
      swift_release(v23);
      a2 = v25;
      uint64_t v19 = (void *)&unk_100405000;
      uint64_t v20 = v38;
      goto LABEL_5;
  }

  sub_1001A70C8(v33, v34, v35, v36);
  sub_1001A70C8(v26, v28, v30, v32);
  if (v37 < 3) {
    goto LABEL_17;
  }
LABEL_19:
  swift_release(v23);
  return v17;
}

unint64_t sub_1001FA340(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  uint64_t v5 = *v2;
  if (!*v2)
  {
    if (v4) {
      return sub_1001FA4B0(a1);
    }
    goto LABEL_15;
  }

  __n128 v7 = swift_beginAccess(v5 + 16, v12, 0LL, 0LL);
  if ((*(void *)(v5 + 16) & 0x3FLL) == (*(void *)(v5 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_15;
    }
  }

  else if (v4 <= static _HashTable.minimumCapacity(forScale:)(v7))
  {
LABEL_15:
    uint64_t v11 = sub_1001FA4B0(a1);
    sub_1001F9D70();
    return v11;
  }

  unint64_t result = swift_isUniquelyReferenced_native(*v2);
  uint64_t v9 = *v2;
  if (!(_DWORD)result)
  {
    if (!v9) {
      goto LABEL_20;
    }
    uint64_t v9 = _HashTable.copy()(*v2);
    unint64_t result = swift_release(*v2);
    uint64_t *v2 = v9;
  }

  if (v9)
  {
    swift_retain(v9);
    unint64_t result = sub_1001FA584(a2, (void *)(v9 + 16), v9 + 32, (uint64_t)v2);
    if (__OFADD__(a1, 1LL))
    {
      __break(1u);
    }

    else if (a1 + 1 >= a1)
    {
      uint64_t v10 = v2[1];
      swift_retain(v10);
      sub_1001FA758(a1, a1 + 1, v10, (void *)(v9 + 16), v9 + 32);
      swift_release(v9);
      swift_release(v10);
      return sub_1001FA4B0(a1);
    }

    __break(1u);
  }

  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1001FA4B0(unint64_t a1)
{
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_1001FABFC(v3);
    uint64_t *v1 = v3;
  }

  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      uint64_t v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + sub_100183478(v0 + 16) = v6;
      specialized ContiguousArray._endMutation()(v10);
      return v9;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

unint64_t sub_1001FA584(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  *(void *)&__int128 v31 = a2;
  *((void *)&v31 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a3;
  uint64_t v32 = a1;
  uint64_t v33 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  char v36 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v10 = v33;
  if (!v33) {
    return _HashTable.UnsafeHandle.subscript.setter(0LL, v7, a2, a3);
  }
  char v11 = v36;
  uint64_t v12 = v34;
  uint64_t v13 = v35;
  uint64_t v14 = v32;
  uint64_t v15 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  __int128 v16 = v31;
  uint64_t v17 = v15;
  while (1)
  {
    __int128 v37 = v16;
    uint64_t v38 = v14;
    uint64_t v39 = v10;
    uint64_t v40 = v12;
    uint64_t v41 = v13;
    char v42 = v11 & 1;
    unint64_t result = ((uint64_t (*)(void))_HashTable.BucketIterator.currentValue.getter)();
    if ((v20 & 1) != 0) {
      break;
    }
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      break;
    }

    uint64_t v21 = *(void *)(a4 + 8);
    if (result >= *(void *)(v21 + 16)) {
      goto LABEL_19;
    }
    uint64_t v22 = *(void *)(v21 + 8 * result + 32);
    Hasher.init(_seed:)(v30, *a2);
    uint64_t v23 = *(void (**)(void *))(*(void *)v22 + 192LL);
    swift_retain(v22);
    v23(v30);
    Swift::Int v24 = Hasher._finalize()();
    unint64_t result = swift_release(v22);
    uint64_t v25 = 1LL << *a2;
    uint64_t v26 = v25 - 1;
    if (__OFSUB__(v25, 1LL)) {
      goto LABEL_20;
    }
    Swift::Int v27 = v26 & v24;
    if (v7 >= v17)
    {
      if (v27 < v17) {
        goto LABEL_5;
      }
    }

    else if (v27 >= v17)
    {
      goto LABEL_15;
    }

    if (v7 >= v27)
    {
LABEL_15:
      uint64_t v28 = _HashTable.BucketIterator.currentValue.getter(result);
      if ((v29 & 1) != 0) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = ((v26 & ((v28 - ((uint64_t)a2[1] >> 6)) >> 63)) + v28 - ((uint64_t)a2[1] >> 6)) ^ v26;
      }
      _HashTable.UnsafeHandle.subscript.setter(v18, v7, a2, a3);
      uint64_t v7 = v14;
    }

void sub_1001FA758(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (v6 >= 1)
  {
    unint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = v11 - v6;
    if (a1 < v12 >> 1)
    {
      if (static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }

        if (v11 < a1)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }

        if (a1)
        {
          uint64_t v13 = a3 + 32;
          uint64_t v63 = a3;
          swift_retain(a3);
          uint64_t v14 = 0LL;
          while (1)
          {
            uint64_t v15 = *(void *)(v13 + 8 * v14);
            Hasher.init(_seed:)(&v65, *a4);
            __int128 v16 = *(void (**)(__int128 *))(*(void *)v15 + 192LL);
            swift_retain(v15);
            v16(&v65);
            Swift::Int v17 = Hasher._finalize()();
            uint64_t v18 = 1LL << *a4;
            BOOL v19 = __OFSUB__(v18, 1LL);
            uint64_t v20 = v18 - 1;
            if (v19) {
              break;
            }
            Swift::Int v21 = v20 & v17;
            uint64_t v22 = _HashTable.UnsafeHandle._startIterator(bucket:)(v20 & v17, a4, a5);
            *(void *)&__int128 v65 = a4;
            *((void *)&v65 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
            Swift::Int v66 = v21;
            *(void *)&__int128 v67 = v22;
            *((void *)&v67 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v23;
            uint64_t v68 = v24;
            char v69 = 0;
            if (v22)
            {
              char v25 = 0;
              uint64_t v26 = a4;
              uint64_t v27 = a5;
              do
              {
                *(void *)&__int128 v70 = v26;
                *((void *)&v70 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v27;
                Swift::Int v71 = v21;
                *(void *)&__int128 v72 = v22;
                *((void *)&v72 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v23;
                uint64_t v73 = v24;
                char v74 = v25 & 1;
                uint64_t v28 = _HashTable.BucketIterator.currentValue.getter(v22);
                if ((v29 & 1) == 0 && v28 == v14) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
                uint64_t v27 = *((void *)&v65 + 1);
                uint64_t v26 = (void *)v65;
                Swift::Int v21 = v66;
                uint64_t v23 = *((void *)&v67 + 1);
                uint64_t v22 = v67;
                uint64_t v24 = v68;
                char v25 = v69;
              }

              while ((void)v67);
            }

            uint64_t v30 = v14 + v6;
            if (__OFADD__(v14, v6)) {
              goto LABEL_56;
            }
            ++v14;
            _HashTable.BucketIterator.currentValue.setter(v30, 0LL);
            swift_release(v15);
            if (v14 == a1)
            {
              swift_release(v63);
              goto LABEL_20;
            }
          }

          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }

        goto LABEL_20;
      }

      uint64_t v35 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a4, a5);
      *(void *)&__int128 v70 = a4;
      *((void *)&v70 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
      Swift::Int v71 = 0LL;
      *(void *)&__int128 v72 = v35;
      *((void *)&v72 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v36;
      uint64_t v73 = v37;
      char v74 = 0;
      __int128 v65 = v70;
      Swift::Int v66 = 0LL;
      __int128 v67 = v72;
      uint64_t v68 = v73;
      char v69 = v74;
      uint64_t v38 = _HashTable.BucketIterator.currentValue.getter(v35);
      if ((v39 & 1) != 0 || v38 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        uint64_t v31 = a4[1];
        if (__OFSUB__(v31 >> 6, v6))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }

        uint64_t v32 = 1LL << *a4;
        BOOL v19 = __OFSUB__(v32, 1LL);
        uint64_t v33 = v32 - 1;
        if (v19)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }

        uint64_t v34 = (v33 & (((v31 >> 6) - v6) >> 63)) + (v31 >> 6) - v6;
        if (v34 < v33) {
          uint64_t v33 = 0LL;
        }
        a4[1] = a4[1] & 0x3FLL | ((v34 - v33) << 6);
        return;
      }

      BOOL v19 = __OFADD__(v38, v6);
      uint64_t v40 = v38 + v6;
      if (!v19)
      {
        _HashTable.BucketIterator.currentValue.setter(v40, 0LL);
        goto LABEL_32;
      }

      __break(1u);
LABEL_38:
      uint64_t v41 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a4, a5);
      *(void *)&__int128 v70 = a4;
      *((void *)&v70 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
      Swift::Int v71 = 0LL;
      *(void *)&__int128 v72 = v41;
      *((void *)&v72 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v42;
      uint64_t v73 = v43;
      char v74 = 0;
      __int128 v65 = v70;
      Swift::Int v66 = 0LL;
      __int128 v67 = v72;
      uint64_t v68 = v73;
      char v69 = v74;
      uint64_t v44 = _HashTable.BucketIterator.currentValue.getter(v41);
      if ((v45 & 1) == 0 && v44 >= v5)
      {
        BOOL v19 = __OFSUB__(v44, v6);
        uint64_t v46 = v44 - v6;
        if (v19)
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

        _HashTable.BucketIterator.currentValue.setter(v46, 0LL);
      }

      _HashTable.BucketIterator.advance()();
      return;
    }

    uint64_t v5 = a2;
    if (__OFSUB__(v11, a2))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    if ((uint64_t)v11 < v5)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    if (v5 < 0)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v11 != v5)
    {
      if (v11 <= v5)
      {
LABEL_68:
        __break(1u);
        return;
      }

      uint64_t v47 = a3 + 32;
      uint64_t v64 = a3;
      swift_retain(a3);
      while (1)
      {
        uint64_t v48 = *(void *)(v47 + 8 * v5);
        Hasher.init(_seed:)(&v65, *a4);
        __int128 v49 = *(void (**)(__int128 *))(*(void *)v48 + 192LL);
        swift_retain(v48);
        v49(&v65);
        Swift::Int v50 = Hasher._finalize()();
        uint64_t v51 = 1LL << *a4;
        BOOL v19 = __OFSUB__(v51, 1LL);
        uint64_t v52 = v51 - 1;
        if (v19) {
          goto LABEL_58;
        }
        Swift::Int v53 = v52 & v50;
        uint64_t v54 = _HashTable.UnsafeHandle._startIterator(bucket:)(v52 & v50, a4, a5);
        *(void *)&__int128 v65 = a4;
        *((void *)&v65 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
        Swift::Int v66 = v53;
        *(void *)&__int128 v67 = v54;
        *((void *)&v67 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v55;
        uint64_t v68 = v56;
        char v69 = 0;
        if (v54)
        {
          char v57 = 0;
          unint64_t v58 = a4;
          uint64_t v59 = a5;
          do
          {
            *(void *)&__int128 v70 = v58;
            *((void *)&v70 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v59;
            Swift::Int v71 = v53;
            *(void *)&__int128 v72 = v54;
            *((void *)&v72 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v55;
            uint64_t v73 = v56;
            char v74 = v57 & 1;
            uint64_t v60 = _HashTable.BucketIterator.currentValue.getter(v54);
            if ((v61 & 1) == 0 && v60 == v5) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v59 = *((void *)&v65 + 1);
            unint64_t v58 = (void *)v65;
            Swift::Int v53 = v66;
            uint64_t v55 = *((void *)&v67 + 1);
            uint64_t v54 = v67;
            uint64_t v56 = v68;
            char v57 = v69;
          }

          while ((void)v67);
        }

        uint64_t v62 = v5 - v6;
        if (__OFSUB__(v5, v6)) {
          goto LABEL_59;
        }
        ++v5;
        _HashTable.BucketIterator.currentValue.setter(v62, 0LL);
        swift_release(v48);
        if (v5 == v11)
        {
          swift_release(v64);
          return;
        }
      }
    }
  }

uint64_t sub_1001FABFC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

uint64_t sub_1001FAC10(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001604E8(&qword_1003FA628, &qword_1003FA620, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100156B68(&qword_1003FA620);
          uint64_t v13 = sub_1001FAE1C(v18, i, a3);
          uint64_t v15 = *v14;
          swift_retain(*v14);
          ((void (*)(uint64_t **, void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_24;
    }

void (*sub_1001FAE1C(uint64_t **a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1001FAE70(v6, a2, a3);
  return sub_100179FC0;
}

uint64_t *sub_1001FAE70(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
LABEL_5:
    *uint64_t v3 = v4;
    return (uint64_t *)sub_1001FAEDC;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001FAEDC(void *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1001FAEE4(uint64_t a1, uint64_t a2)
{
  if ((j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ( a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent,  a2 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent) & 1) == 0) {
    return 0LL;
  }
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)a1 + 128LL))();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unsigned __int8 v10 = v9;
  unint64_t v11 = (*(uint64_t (**)(void))(*(void *)a2 + 128LL))();
  if (v4)
  {
    if (v4 != 1)
    {
      if (v4 != 2)
      {
        BOOL v15 = v11 > 2;
        sub_1001A70C8(v11, v12, v13, v14);
        sub_1001A70C8(v4, v6, v8, v10);
        return v15;
      }

      if (v11 == 2) {
        return 1LL;
      }
      goto LABEL_8;
    }

    if (v11 != 1)
    {
LABEL_8:
      sub_1001A70C8(v11, v12, v13, v14);
      return 0LL;
    }
  }

  else if (v11)
  {
    goto LABEL_8;
  }

  return 1LL;
}

uint64_t sub_1001FAFBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingEvent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RoutingTimeline.Observer()
{
  return objc_opt_self(&OBJC_CLASS____TtCC12mediaremoted15RoutingTimelineP33_943B3CBC172923E21FAFEEFC39380C3C8Observer);
}

uint64_t sub_1001FB018(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
LABEL_3:
    unint64_t v6 = 0LL;
    while (1)
    {
      if ((v4 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }

      else
      {
        uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
        swift_retain(v7);
      }

      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v7 + 16);
      swift_release(v7);
      if (Strong)
      {
        swift_unknownObjectRelease(Strong);
        if (Strong == a2) {
          break;
        }
      }

      unint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1LL))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        if (v4 < 0) {
          uint64_t v33 = v4;
        }
        else {
          uint64_t v33 = v4 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v33);
        if (!v5) {
          goto LABEL_11;
        }
        goto LABEL_3;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    unint64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = *a1;
      if (!((unint64_t)*a1 >> 62))
      {
        if (v12 != *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_17:
          for (unint64_t i = v6 + 5; ; ++i)
          {
            uint64_t v4 = i - 4;
            uint64_t v14 = *a1;
            if ((*a1 & 0xC000000000000001LL) != 0)
            {
              uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v14);
            }

            else
            {
              if (v4 < 0) {
                goto LABEL_57;
              }
              uint64_t v15 = *(void *)(v14 + 8 * i);
              swift_retain(v15);
            }

            uint64_t v16 = swift_unknownObjectWeakLoadStrong(v15 + 16);
            swift_release(v15);
            if (v16)
            {
              swift_unknownObjectRelease(v16);
              if (v16 == a2) {
                goto LABEL_44;
              }
            }

            if (v4 != v6) {
              break;
            }
LABEL_43:
            if (__OFADD__(v6++, 1LL)) {
              goto LABEL_60;
            }
LABEL_44:
            unint64_t v29 = i - 3;
            if (__OFADD__(v4, 1LL)) {
              goto LABEL_59;
            }
            uint64_t v30 = *a1;
            if ((unint64_t)*a1 >> 62)
            {
              if (v30 < 0) {
                uint64_t v32 = *a1;
              }
              else {
                uint64_t v32 = v30 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain();
              uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v32);
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            }

            if (v29 == v31) {
              return v6;
            }
          }

          uint64_t v17 = *a1;
          if ((*a1 & 0xC000000000000001LL) != 0)
          {
            uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *a1);
            uint64_t v17 = *a1;
            if ((*a1 & 0xC000000000000001LL) == 0)
            {
LABEL_29:
              if (v4 < 0) {
                goto LABEL_63;
              }
              uint64_t v19 = *(void *)(v17 + 8 * i);
              swift_retain(v19);
              goto LABEL_32;
            }
          }

          else
          {
            if ((v6 & 0x8000000000000000LL) != 0) {
              goto LABEL_61;
            }
            if (v6 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_62;
            }
            uint64_t v18 = *(void *)(v17 + 8 * v6 + 32);
            swift_retain(v18);
            if ((v17 & 0xC000000000000001LL) == 0) {
              goto LABEL_29;
            }
          }

          uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v17);
          uint64_t v17 = *a1;
LABEL_32:
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v17);
          *a1 = v17;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000LL) != 0)
          {
            uint64_t v17 = sub_1001A3618(v17);
            *a1 = v17;
          }

          uint64_t v21 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 8 * v6 + 0x20);
          *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 8 * v6 + 0x2sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v19;
          uint64_t v22 = swift_release(v21);
          specialized Array._endMutation()(v22);
          uint64_t v23 = *a1;
          int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
          *a1 = v23;
          if (!v24 || v23 < 0 || (v23 & 0x4000000000000000LL) != 0)
          {
            uint64_t v23 = sub_1001A3618(v23);
            *a1 = v23;
          }

          if (v4 < 0) {
            goto LABEL_65;
          }
          uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8LL;
          uint64_t v26 = *(void *)(v25 + 8 * i);
          *(void *)(v25 + 8 * i) = v18;
          uint64_t v27 = swift_release(v26);
          specialized Array._endMutation()(v27);
          goto LABEL_43;
        }

        return v6;
      }
    }

    if (v4 < 0) {
      uint64_t v36 = v4;
    }
    else {
      uint64_t v36 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease();
    if (v12 != v37) {
      goto LABEL_17;
    }
    return v6;
  }

uint64_t sub_1001FB3E8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v5;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0) {
      uint64_t v26 = v7;
    }
    else {
      uint64_t v26 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    uint64_t v7 = *v3;
    goto LABEL_15;
  }

uint64_t type metadata accessor for RoutingTimeline.Event(uint64_t a1)
{
  uint64_t result = qword_100400250;
  if (!qword_100400250) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoutingTimeline.Event);
  }
  return result;
}

uint64_t sub_1001FB718()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001FB73C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001FB768(uint64_t a1)
{
  return sub_1001F6018(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001FB770(uint64_t a1)
{
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001FB7B0()
{
  return sub_100156FEC(&qword_1003FA310, type metadata accessor for RoutingTimeline.Event, (uint64_t)&unk_10034D4B8);
}

uint64_t type metadata accessor for RoutingTimeline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted15RoutingTimeline);
}

uint64_t sub_1001FB7FC()
{
  return type metadata accessor for RoutingTimeline.Event(0LL);
}

uint64_t sub_1001FB804(uint64_t a1)
{
  uint64_t result = type metadata accessor for RoutingEvent(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = &unk_10034D590;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t destroy for RoutingTimeline.Event.State(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_errorRelease(result);
    return sub_100156BA8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
  }

  return result;
}

uint64_t initializeWithCopy for RoutingTimeline.Event.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }

  else
  {
    swift_errorRetain(*a2);
    *(void *)a1 = v4;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    unsigned __int8 v7 = *((_BYTE *)a2 + 24);
    sub_100156A2C(v5, v6, v7);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a1 + 24) = v7;
  }

  return a1;
}

uint64_t assignWithCopy for RoutingTimeline.Event.State(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      swift_errorRetain(*a2);
      *(void *)a1 = v5;
      uint64_t v13 = a2[1];
      uint64_t v14 = a2[2];
      unsigned __int8 v15 = *((_BYTE *)a2 + 24);
      sub_100156A2C(v13, v14, v15);
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v14;
      *(_BYTE *)(a1 + 24) = v15;
      return a1;
    }

uint64_t assignWithTake for RoutingTimeline.Event.State(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_errorRelease(v4);
    sub_100156BA8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  swift_errorRelease(v4);
  char v5 = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  unsigned __int8 v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_100156BA8(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingTimeline.Event.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 25)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RoutingTimeline.Event.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }

  return result;
}

uint64_t sub_1001FBB70(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

uint64_t sub_1001FBB88(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RoutingTimeline.Event.State()
{
  return &type metadata for RoutingTimeline.Event.State;
}

uint64_t sub_1001FBBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t result = a6();
  if (v6)
  {
    sub_1001FBC6C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain(v6);
    id v13 = sub_1001FBCA8(a1, a2, a3, a4, a5, v6);
    swift_willThrow(v13);
    return swift_errorRelease(v6);
  }

  return result;
}

unint64_t sub_1001FBC6C()
{
  unint64_t result = qword_1003FA128;
  if (!qword_1003FA128)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1003FA128);
  }

  return result;
}

id sub_1001FBCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v37 = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  if (a5)
  {
    uint64_t v36 = &type metadata for String;
    *(void *)&__int128 v35 = a4;
    *((void *)&v35 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a5;
    sub_100160944(&v35, v31);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    uint64_t v37 = (void *)0x8000000000000000LL;
    sub_1001FCB20(v31, v14, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v37 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1001FC560(v12, v13, &v35);
    swift_bridgeObjectRelease();
    sub_100164B5C((uint64_t)&v35);
  }

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  if (a6)
  {
    swift_getErrorValue(a6, v34, &v32);
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    uint64_t v36 = v33;
    uint64_t v23 = sub_1001627AC(&v35);
    (*(void (**)(void *, uint64_t, void *))(*(v22 - 1) + 16LL))(v23, v21, v22);
    sub_100160944(&v35, v31);
    uint64_t v24 = v37;
    char v25 = swift_isUniquelyReferenced_nonNull_native(v37);
    uint64_t v37 = (void *)0x8000000000000000LL;
    sub_1001FCB20(v31, v19, v20, v25);
    uint64_t v37 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1001FC560(v17, v18, &v35);
    swift_bridgeObjectRelease();
    sub_100164B5C((uint64_t)&v35);
  }

  id v26 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = [v26 initWithDomain:v27 code:a3 userInfo:isa];
  swift_errorRelease(a6);

  return v29;
}

uint64_t sub_1001FBF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  v7[5] = a5;
  v7[6] = a6;
  v7[3] = a3;
  v7[4] = a4;
  v7[2] = a2;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)a7 + *a7);
  unsigned __int8 v9 = (void *)swift_task_alloc(a7[1]);
  v7[7] = v9;
  void *v9 = v7;
  v9[1] = sub_1001FBF88;
  return v11(a1);
}

uint64_t sub_1001FBF88()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1001FBFF4, 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_1001FBFF4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  sub_1001FBC6C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  id v7 = sub_1001FBCA8(v6, v5, v4, v3, v2, v1);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FC09C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v12 = sub_1001FBC6C();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a6, a5, &unk_10037F028, &unk_10037F038);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a6,  a5,  AssociatedTypeWitness,  &unk_10037F028,  &unk_10037F030);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
  id v18 = sub_1001FBCA8(v13, v15, v22, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  uint64_t v22 = (uint64_t)v18;
  return swift_dynamicCast(a7, &v22, v12, a5, 7LL);
}

uint64_t sub_1001FC1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 24))(a6, a8);
  uint64_t v12 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a8, a6, &unk_10037F028, &unk_10037F038);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a8,  a6,  AssociatedTypeWitness,  &unk_10037F028,  &unk_10037F030);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_1001FBBBC(v10, v12, v18, a2, a3, sub_1001FCC50);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FC2D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v10;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  v8[3] = a1;
  return swift_task_switch(sub_1001FC300, 0LL, 0LL);
}

uint64_t sub_1001FC300()
{
  uint64_t v1 = *(void *)(v0 + 88);
  __int128 v14 = *(_OWORD *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 72);
  __int128 v15 = *(_OWORD *)(v0 + 56);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v2, v1);
  uint64_t v5 = v4;
  *(void *)(v0 + 96) = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v1, v2, &unk_10037F028, &unk_10037F038);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &unk_10037F028,  &unk_10037F030);
  dispatch thunk of RawRepresentable.rawValue.getter( (void *)(v0 + 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = swift_task_alloc(64LL);
  *(void *)(v0 + 104) = v9;
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v9 + 32) = v1;
  *(_OWORD *)(v9 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v15;
  uint64_t v10 = swift_task_alloc(dword_1003FA634);
  *(void *)(v0 + 112) = v10;
  *(void *)uint64_t v10 = v0;
  *(void *)(v10 + 8) = sub_1001FC464;
  uint64_t v11 = *(void *)(v0 + 24);
  *(_OWORD *)(v10 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 24) = v5;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)&__int128 v15 = (char *)&dword_1003FA648 + dword_1003FA648;
  uint64_t v12 = (uint64_t *)swift_task_alloc(unk_1003FA64C);
  *(void *)(v10 + 56) = v12;
  uint64_t *v12 = v10;
  v12[1] = (uint64_t)sub_1001FBF88;
  return ((uint64_t (*)(uint64_t))v15)(v11);
}

uint64_t sub_1001FC464()
{
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v2 = *(void *)(*v1 + 112);
  uint64_t v4 = *v1;
  *(void *)(v4 + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(sub_1001FC4F0, 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_1001FC4F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FC4FC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10015FD10;
  return v6(a1);
}

double sub_1001FC560@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001FCD60();
      uint64_t v11 = v13;
    }

    swift_bridgeObjectRelease();
    sub_100160944((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1001FC94C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_1001FC650(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68((uint64_t *)&unk_1003FB780);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

unint64_t sub_1001FC94C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          __int128 v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *__int128 v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          int64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *int64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

_OWORD *sub_1001FCB20(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        int64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_1001607E0(v19);
        return sub_100160944(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001FCD60();
      goto LABEL_7;
    }

    sub_1001FC650(v15, a4 & 1);
    unint64_t v21 = sub_10015CAD4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1001FCCF8(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001FCC50()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_1001FCC70(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc(dword_1003FA644);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10015FD10;
  unint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  unint64_t v6 = (void *)swift_task_alloc(v4[1]);
  v5[2] = v6;
  *unint64_t v6 = v5;
  v6[1] = sub_10015FD10;
  return v8(a1);
}

_OWORD *sub_1001FCCF8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100160944(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1001FCD60()
{
  uint64_t v1 = v0;
  sub_100156B68((uint64_t *)&unk_1003FB780);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  BOOL v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_1001FCF44()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 16);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

void *sub_1001FCF88()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 24);
  }

  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
    *(void *)(v0 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

void *sub_1001FCFCC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 48);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 48) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

double sub_1001FD010(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 64LL, 7LL);
  double result = 0.0;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(void *)(v3 + 48) = 0LL;
  *(void *)(v3 + 56) = a1;
  return result;
}

uint64_t sub_1001FD048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)(v3 + 56);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (*((void *)sub_1001FCF44() + 2) && (sub_10015CAD4(a1, a2), (v12 & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_1001A8998();
      uint64_t v15 = v14;
      uint64_t v16 = sub_1001FCF44();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      BOOL v25 = v16;
      sub_1001E3F10(v13, v15, a1, a2, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v3 + swift_weakDestroy(v0 + 16) = v18;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1001FCF44();
    if (v19[2])
    {
      unint64_t v20 = sub_10015CAD4(a1, a2);
      if ((v21 & 1) != 0)
      {
        uint64_t v22 = *(void *)(v19[7] + 16 * v20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v22;
      }
    }
  }

  else
  {
    __break(1u);
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001FD22C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + 56);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = sub_1001FCFCC();
    if (v10[2] && (unint64_t v11 = sub_10018036C(a1), (v12 & 1) != 0))
    {
      uint64_t v13 = *(void *)(v10[7] + 16 * v11);
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    swift_bridgeObjectRelease();
    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001FD32C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v99 = *v1;
  uint64_t v4 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v12 = (void *)v2[7];
  *unint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v98 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v13, 0);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v16 = *(void *)(v5 + 72);
    uint64_t v14 = (void *)aBlock[0];
    do
    {
      sub_100200404(v15, (uint64_t)v7);
      uint64_t v18 = *v7;
      uint64_t v17 = v7[1];
      swift_bridgeObjectRetain();
      sub_100200448((uint64_t)v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10015DCE8(0, v14[2] + 1LL, 1);
        uint64_t v14 = (void *)aBlock[0];
      }

      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_10015DCE8(v19 > 1, v20 + 1, 1);
        uint64_t v14 = (void *)aBlock[0];
      }

      v14[2] = v20 + 1;
      char v21 = &v14[2 * v20];
      v21[4] = v18;
      void v21[5] = v17;
      v15 += v16;
      --v13;
    }

    while (v13);
  }

  uint64_t v22 = sub_1001A6418((uint64_t)v14);
  swift_bridgeObjectRelease();
  v2[3] = v22;
  swift_bridgeObjectRelease();
  unint64_t v23 = sub_1001FCF88();
  uint64_t v24 = v23;
  int64_t v25 = 0LL;
  uint64_t v26 = 1LL << v23[32];
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v23 + 56;
  unint64_t v29 = v27 & *((void *)v23 + 7);
  int64_t v30 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      unint64_t v31 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v32 = v31 | (v25 << 6);
      goto LABEL_28;
    }

    int64_t v33 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    if (v33 >= v30) {
      goto LABEL_35;
    }
    unint64_t v34 = *(void *)&v28[8 * v33];
    ++v25;
    if (!v34)
    {
      int64_t v25 = v33 + 1;
      if (v33 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v34 = *(void *)&v28[8 * v25];
      if (!v34)
      {
        int64_t v25 = v33 + 2;
        if (v33 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v34 = *(void *)&v28[8 * v25];
        if (!v34) {
          break;
        }
      }
    }

void *sub_1001FDBC8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_10015DCE8(0, v1, 0);
  uint64_t result = (void *)sub_1001E5AA0(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = v2 + 64;
  uint64_t v28 = v2 + 80;
  int64_t v29 = v1;
  int v30 = v4;
  uint64_t v31 = v2 + 64;
  uint64_t v32 = v2;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v33 = v6;
    uint64_t v11 = *(void *)(v2 + 56);
    char v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v14 = *v12;
    int64_t v13 = (void *)v12[1];
    uint64_t v15 = (uint64_t *)(v11 + 16 * v5);
    uint64_t v16 = (void *)v15[1];
    uint64_t v34 = *v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v13;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    v18._object = (void *)0x800000010033CDC0LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v34;
    v19._object = v16;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v21 = _swiftEmptyArrayStorage[2];
    unint64_t v20 = _swiftEmptyArrayStorage[3];
    if (v21 >= v20 >> 1) {
      uint64_t result = (void *)sub_10015DCE8(v20 > 1, v21 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v21 + 1;
    uint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
    v22[4] = 0xD000000000000015LL;
    v22[5] = 0x800000010033CEE0LL;
    uint64_t v2 = v32;
    int64_t v8 = 1LL << *(_BYTE *)(v32 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v31;
    uint64_t v23 = *(void *)(v31 + 8 * v10);
    if ((v23 & (1LL << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v30;
    if (*(_DWORD *)(v32 + 36) != v30) {
      goto LABEL_27;
    }
    unint64_t v24 = v23 & (-2LL << (v5 & 0x3F));
    if (v24)
    {
      int64_t v8 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v29;
    }

    else
    {
      unint64_t v25 = v10 + 1;
      unint64_t v26 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v29;
      if (v10 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v31 + 8 * v25);
        if (v27)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v27)) + (v25 << 6);
        }

        else
        {
          while (v26 - 2 != v10)
          {
            unint64_t v27 = *(void *)(v28 + 8 * v10++);
            if (v27)
            {
              unint64_t v25 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v6 = v33 + 1;
    uint64_t v5 = v8;
    if (v33 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1001FDE8C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v40, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v16 = result;
    char v39 = sub_100187D24();
    Swift::String v17 = (void *)sub_1001E22B0(a2, a3);
    *(void *)(v16 + 32) = v39;
    swift_bridgeObjectRelease();
    if (v17
      && (v17,
          Swift::String v18 = sub_1001FCF88(),
          char v19 = sub_100158DD4(a2, a3, (uint64_t)v18),
          swift_bridgeObjectRelease(),
          (v19 & 1) == 0))
    {
      uint64_t v20 = sub_100174330();
      sub_10017434C(v20, (uint64_t)v14);
      uint64_t v21 = type metadata accessor for Logger(0LL);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1LL, v21) == 1)
      {
        sub_1001603DC((uint64_t)v14, (uint64_t *)&unk_1003FBBE0);
      }

      else
      {
        swift_bridgeObjectRetain_n(a3, 2LL);
        uint64_t v23 = swift_bridgeObjectRetain_n(a5, 2LL);
        unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.default.getter();
        int v37 = v25;
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc(32LL, -1LL);
          uint64_t v36 = v22;
          uint64_t v27 = v26;
          int64_t v35 = (void *)swift_slowAlloc(96LL, -1LL);
          char v39 = v35;
          *(_DWORD *)uint64_t v27 = 136315650;
          uint64_t v33 = v27 + 4;
          uint64_t v28 = _typeName(_:qualified:)(a6, 0LL);
          uint64_t v38 = sub_10015ADC4(v28, v29, (uint64_t *)&v39);
          os_log_t v34 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v33, v27 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v38 = sub_10015ADC4(a2, a3, (uint64_t *)&v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v27 + 14, v27 + 22);
          swift_bridgeObjectRelease_n(a3, 3LL);
          *(_WORD *)(v27 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v38 = sub_10015ADC4(a4, a5, (uint64_t *)&v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v27 + 24, v27 + 32);
          swift_bridgeObjectRelease_n(a5, 3LL);
          os_log_t v30 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  (os_log_type_t)v37,  "[%s] expirationTimer - remove session identifier: %s for lost groupIdentifier: %s",  (uint8_t *)v27,  0x20u);
          uint64_t v31 = v35;
          swift_arrayDestroy(v35, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v31, -1LL, -1LL);
          uint64_t v32 = v27;
          uint64_t v22 = v36;
          swift_slowDealloc(v32, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(a5, 2LL);
          swift_bridgeObjectRelease_n(a3, 2LL);
        }

        (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
      }

      swift_bridgeObjectRetain();
      char v39 = sub_1001FCF44();
      sub_1001E21CC(a4, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v39;
      swift_release(v16);
      return swift_bridgeObjectRelease();
    }

    else
    {
      return swift_release(v16);
    }
  }

  return result;
}

uint64_t sub_1001FE23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = v3;
  uint64_t v79 = a1;
  uint64_t v70 = *v3;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v77 = *(void *)(v7 - 8);
  uint64_t v78 = v7;
  __chkstk_darwin(v7);
  uint64_t v76 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v75 = &v65[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v11);
  id v72 = &v65[-v14];
  uint64_t v74 = v15;
  __chkstk_darwin(v13);
  Swift::String v17 = &v65[-v16];
  uint64_t v18 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = &v65[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = (void *)v4[7];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v73 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    unint64_t v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
    v24(v17, a3, v9);
    swift_bridgeObjectRetain();
    os_log_type_t v25 = sub_1001FCFCC();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    aBlock[0] = (uint64_t)v25;
    sub_100200028(v79, a2, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    uint64_t v27 = aBlock[0];
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v28(v17, v9);
    Swift::Int v71 = v4;
    v4[6] = v27;
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_1001741A8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v77 + 16))(v76, v29, v78);
    os_log_t v30 = v72;
    v24(v72, a3, v9);
    uint64_t v31 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v24)(v75, a3, v9);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = a2;
      uint64_t v36 = v35;
      uint64_t v67 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v67;
      *(_DWORD *)uint64_t v36 = 136315650;
      int v66 = v34;
      uint64_t v37 = _typeName(_:qualified:)(v70, 0LL);
      uint64_t v70 = a3;
      uint64_t v68 = v10;
      uint64_t v80 = sub_10015ADC4(v37, v38, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, aBlock, v36 + 4, v36 + 12);
      uint64_t v39 = swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v40 = RoutingInteraction.identifier.getter(v39);
      uint64_t v80 = sub_10015ADC4(v40, v41, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, aBlock, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      v28(v30, v9);
      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v42 = sub_1002007D4(&qword_1003F88F8, (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      uint64_t v43 = v75;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v9, v42);
      uint64_t v80 = sub_10015ADC4(v44, v45, aBlock);
      uint64_t v10 = v68;
      a3 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, aBlock, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease();
      v28(v43, v9);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v66,  "[%s] prewarmSessionIdentifier<%s> - interaction: %s",  (uint8_t *)v36,  0x20u);
      uint64_t v46 = v67;
      swift_arrayDestroy(v67, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      uint64_t v47 = v36;
      a2 = v69;
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
      v28(v30, v9);
      v28(v75, v9);
    }

    (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v76, v78);
    uint64_t v48 = swift_allocObject(&unk_1003A7408, 24LL, 7LL);
    uint64_t v49 = v71;
    swift_weakInit(v48 + 16, v71);
    v24(v17, a3, v9);
    uint64_t v50 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v51 = (v50 + 40) & ~v50;
    unint64_t v52 = (char *)swift_allocObject(&unk_1003A7480, v51 + v74, v50 | 7);
    uint64_t v53 = v79;
    *((void *)v52 + 2) = v48;
    *((void *)v52 + 3) = v53;
    *((void *)v52 + 4) = a2;
    (*(void (**)(char *, _BYTE *, uint64_t))(v10 + 32))(&v52[v51], v17, v9);
    id v54 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
    aBlock[4] = (uint64_t)sub_100200638;
    char v82 = v52;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A7498;
    int64_t v55 = _Block_copy(aBlock);
    uint64_t v56 = v82;
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v57 = v53;
    id v58 = v73;
    swift_retain(v48);
    swift_release(v56);
    id v59 = [v54 initWithInterval:0 repeats:v58 queue:v55 block:120.0];

    _Block_release(v55);
    swift_release(v48);
    uint64_t v60 = sub_100187D68();
    aBlock[0] = (uint64_t)v60;
    if (v59)
    {
      uint64_t v61 = (uint64_t)v60;
      char v62 = swift_isUniquelyReferenced_nonNull_native(v60);
      uint64_t v80 = v61;
      sub_1001F3240((uint64_t)v59, v57, a2, v62);
      uint64_t v63 = v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      char v64 = (void *)sub_1001E22B0(v57, a2);
      swift_bridgeObjectRelease();

      uint64_t v63 = aBlock[0];
    }

    v49[5] = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return v57;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001FE854(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v99 = a5;
  uint64_t v102 = a4;
  uint64_t v104 = a1;
  unint64_t v105 = a2;
  uint64_t v96 = *v5;
  uint64_t v103 = type metadata accessor for Logger(0LL);
  uint64_t v100 = *(void *)(v103 - 8);
  uint64_t v7 = __chkstk_darwin(v103);
  uint64_t v9 = &v88[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  int64_t v101 = &v88[-v10];
  uint64_t v11 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v94 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v97 = &v88[-v16];
  __chkstk_darwin(v15);
  uint64_t v18 = &v88[-v17];
  uint64_t v19 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = &v88[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v106 = v5;
  uint64_t v23 = (void *)v5[7];
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v95 = v9;
  id v98 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
  v98(v18, a3, v11);
  os_log_type_t v25 = sub_1001FCFCC();
  uint64_t v20 = v11;
  if (!v25[2])
  {
LABEL_26:
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v18, v20);
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v26 = sub_10018036C((uint64_t)v18);
  unint64_t v27 = v105;
  uint64_t v28 = v101;
  if ((v29 & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v18, v20);
    __break(1u);
    return result;
  }

  os_log_t v30 = (uint64_t *)(v25[7] + 16 * v26);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v32 == v104 && v31 == v27) {
    char v34 = 0;
  }
  else {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, v104, v27, 0LL) ^ 1;
  }
  uint64_t v35 = v100;
  uint64_t v36 = v97;
  uint64_t v37 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v37(v18, v20);
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v38 = sub_1001741A8();
  uint64_t v39 = *(void (**)(void))(v35 + 16);
  uint64_t v91 = v38;
  uint64_t v40 = v103;
  unint64_t v97 = v39;
  v39(v28);
  v98(v36, a3, v20);
  unint64_t v41 = v36;
  unint64_t v42 = v99;
  uint64_t v43 = swift_bridgeObjectRetain_n(v99, 2LL);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.default.getter();
  int v46 = v45;
  BOOL v47 = os_log_type_enabled(v44, v45);
  uint64_t v92 = v20;
  uint64_t v93 = a3;
  uint64_t v90 = v37;
  if (v47)
  {
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    v108[0] = swift_slowAlloc(96LL, -1LL);
    uint64_t v49 = v108[0];
    *(_DWORD *)uint64_t v48 = 136315650;
    int v89 = v46;
    uint64_t v50 = _typeName(_:qualified:)(v96, 0LL);
    uint64_t v107 = sub_10015ADC4(v50, v51, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v48 + 4, v48 + 12);
    uint64_t v52 = swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    uint64_t v53 = RoutingInteraction.identifier.getter(v52);
    uint64_t v107 = sub_10015ADC4(v53, v54, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease();
    v37(v41, v20);
    *(_WORD *)(v48 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v107 = sub_10015ADC4(v102, v42, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v48 + 24, v48 + 32);
    swift_bridgeObjectRelease_n(v42, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v89,  "[%s] commitPrewarmedIdentifier<%s> - groupIdentifier: %s",  (uint8_t *)v48,  0x20u);
    swift_arrayDestroy(v49, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v55 = v48;
    uint64_t v56 = v42;
    swift_slowDealloc(v55, -1LL, -1LL);

    uint64_t v57 = *(void (**)(_BYTE *, uint64_t))(v100 + 8);
    v57(v101, v103);
  }

  else
  {
    v37(v41, v20);

    swift_bridgeObjectRelease_n(v42, 2LL);
    uint64_t v57 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
    v57(v28, v40);
    uint64_t v56 = v42;
  }

  id v58 = sub_1001FCF44();
  uint64_t v59 = v105;
  swift_bridgeObjectRetain();
  uint64_t v60 = v104;
  uint64_t v61 = sub_1001E9900((uint64_t)v58, v104, v59);
  unint64_t v63 = v62;
  char v65 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v66 = v102;
  if (v63)
  {
    if (v61 == v102 && v63 == v56 || (_stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v102, v56, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v67 = v103;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v97)(v95, v91, v103);
      uint64_t v68 = v94;
      uint64_t v69 = v92;
      v98(v94, v93, v92);
      swift_bridgeObjectRetain_n(v59, 2LL);
      swift_bridgeObjectRetain_n(v63, 2LL);
      uint64_t v70 = swift_bridgeObjectRetain_n(v65, 2LL);
      Swift::Int v71 = v65;
      id v72 = (os_log_s *)Logger.logObject.getter(v70);
      os_log_type_t v73 = static os_log_type_t.fault.getter();
      LODWORD(v10sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v73;
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc(42LL, -1LL);
        uint64_t v100 = swift_slowAlloc(128LL, -1LL);
        v108[0] = v100;
        *(_DWORD *)uint64_t v74 = 136315906;
        uint64_t v75 = _typeName(_:qualified:)(v96, 0LL);
        id v98 = v71;
        uint64_t v107 = sub_10015ADC4(v75, v76, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v74 + 4, v74 + 12);
        uint64_t v77 = swift_bridgeObjectRelease();
        *(_WORD *)(v74 + 12) = 2080;
        uint64_t v78 = RoutingInteraction.identifier.getter(v77);
        uint64_t v107 = sub_10015ADC4(v78, v79, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v74 + 14, v74 + 22);
        swift_bridgeObjectRelease();
        v90(v68, v69);
        *(_WORD *)(v74 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v107 = sub_10015ADC4(v104, v105, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v74 + 24, v74 + 32);
        swift_bridgeObjectRelease_n(v105, 3LL);
        *(_WORD *)(v74 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v107 = sub_10015ADC4(v61, v63, v108);
        uint64_t v66 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v74 + 34, v74 + 42);
        swift_bridgeObjectRelease_n(v98, 2LL);
        swift_bridgeObjectRelease_n(v63, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v72,  (os_log_type_t)v101,  "[%s] commitPrewarmedIdentifier<%s> - identifier: %s already mapped to groupIdentifier: %s -> unmapping",  (uint8_t *)v74,  0x2Au);
        uint64_t v80 = v100;
        swift_arrayDestroy(v100, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        uint64_t v81 = v74;
        uint64_t v59 = v105;
        swift_slowDealloc(v81, -1LL, -1LL);

        v57(v95, v103);
      }

      else
      {
        v90(v68, v69);

        swift_bridgeObjectRelease_n(v71, 2LL);
        swift_bridgeObjectRelease_n(v63, 2LL);
        swift_bridgeObjectRelease_n(v59, 2LL);
        v57(v95, v67);
      }

      char v82 = v106;
      v108[0] = (uint64_t)sub_1001FCF44();
      sub_1001E21CC(v61, v63);
      swift_bridgeObjectRelease();
      v82[2] = v108[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v56 = v99;
      uint64_t v60 = v104;
    }
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v83 = v106;
  char v84 = sub_1001FCF44();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
  v108[0] = (uint64_t)v84;
  sub_1001E3F10(v60, v59, v66, v56, isUniquelyReferenced_nonNull_native);
  uint64_t v86 = v108[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v83[2] = v86;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FF118()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_1001FF164()
{
  uint64_t v96 = sub_100156B68(&qword_1003FA670);
  uint64_t v1 = __chkstk_darwin(v96);
  uint64_t v95 = (char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v94 = (uint64_t)&v85 - v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v93 = (char *)&v85 - v6;
  __chkstk_darwin(v5);
  uint64_t v92 = (uint64_t)&v85 - v7;
  unint64_t v103 = 0xD000000000000019LL;
  unint64_t v104 = 0x800000010033CD40LL;
  v102._uint64_t countAndFlagsBits = 0LL;
  v102._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease();
  strcpy((char *)&v102, "Identifiers:\n");
  HIWORD(v102._object) = -4864;
  uint64_t v8 = sub_1001FCF44();
  uint64_t v9 = sub_1001FDBC8((uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v99 = (uint64_t)v9;
  uint64_t v10 = sub_100156B68(&qword_1003FA010);
  unint64_t v11 = sub_100200720();
  uint64_t v87 = v10;
  unint64_t v86 = v11;
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v10, v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 10LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  String.append(_:)(v102);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0LL;
  v102._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v102._object = (void *)0x800000010033CD60LL;
  uint64_t v17 = sub_1001FCF88();
  int64_t v18 = v17[2];
  if (v18)
  {
    int64_t v97 = v0;
    int64_t v101 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v18, 0);
    uint64_t v19 = v101;
    uint64_t result = sub_1001A5B74((uint64_t)v17);
    int64_t v21 = result;
    int v23 = v22;
    char v25 = v24 & 1;
    id v98 = (char *)(v17 + 7);
    while ((v21 & 0x8000000000000000LL) == 0 && v21 < 1LL << *((_BYTE *)v17 + 32))
    {
      if (*((_DWORD *)v17 + 9) != v23) {
        goto LABEL_29;
      }
      unint64_t v26 = (uint64_t *)(v17[6] + 16 * v21);
      uint64_t v27 = *v26;
      uint64_t v28 = (void *)v26[1];
      uint64_t v99 = 538976288LL;
      unint64_t v100 = 0xE400000000000000LL;
      swift_bridgeObjectRetain();
      v29._uint64_t countAndFlagsBits = v27;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v30 = v99;
      unint64_t v31 = v100;
      int64_t v101 = v19;
      unint64_t v33 = v19[2];
      unint64_t v32 = v19[3];
      if (v33 >= v32 >> 1)
      {
        sub_10015DCE8(v32 > 1, v33 + 1, 1);
        uint64_t v19 = v101;
      }

      v19[2] = v33 + 1;
      char v34 = &v19[2 * v33];
      v34[4] = v30;
      v34[5] = v31;
      uint64_t result = sub_10015E644(v21, v23, v25 & 1, (uint64_t)v17);
      int64_t v21 = result;
      int v23 = v35;
      char v25 = v36 & 1;
      if (!--v18)
      {
        sub_100160324(result, v35, v36 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  swift_bridgeObjectRelease();
  uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_12:
  uint64_t v99 = (uint64_t)v19;
  uint64_t v37 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v87, v86);
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 10LL;
  v41._object = (void *)0xE100000000000000LL;
  String.append(_:)(v41);
  String.append(_:)(v102);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0LL;
  v102._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v102._object = (void *)0x800000010033CD80LL;
  unint64_t v42 = sub_1001FCFCC();
  int64_t v43 = v42[2];
  if (v43)
  {
    int64_t v101 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v43, 0);
    uint64_t v44 = sub_1001E5AA0((uint64_t)v42);
    int v46 = v45;
    char v88 = (char *)(v42 + 8);
    char v48 = v47 & 1;
    int64_t v97 = v43 - 1;
    unint64_t v91 = 0xD000000000000011LL;
    unint64_t v90 = 0x800000010033CDA0LL;
    int v89 = (void *)0x800000010033CDC0LL;
    while (1)
    {
      uint64_t v49 = v96;
      uint64_t v50 = v92;
      unint64_t v51 = (uint64_t *)(v92 + *(int *)(v96 + 48));
      id v98 = v46;
      uint64_t v52 = sub_100200484(v92, v44, (int)v46, v48 & 1, (uint64_t)v42);
      uint64_t v54 = v53;
      uint64_t *v51 = v52;
      v51[1] = v53;
      uint64_t v55 = type metadata accessor for RoutingInteraction(0LL);
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
      id v58 = v93;
      v57(v93, v50, v55);
      uint64_t v59 = (uint64_t *)&v58[*(int *)(v49 + 48)];
      *uint64_t v59 = v52;
      v59[1] = v54;
      uint64_t v60 = (uint64_t)v58;
      uint64_t v61 = v94;
      sub_10020076C(v60, v94);
      swift_bridgeObjectRetain();
      sub_1001603DC(v50, &qword_1003FA670);
      uint64_t v99 = 0LL;
      unint64_t v100 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(44LL);
      swift_bridgeObjectRelease();
      uint64_t v99 = v91;
      unint64_t v100 = v90;
      uint64_t v62 = *(int *)(v49 + 48);
      unint64_t v63 = v95;
      char v64 = (uint64_t *)&v95[v62];
      char v65 = (Swift::String *)(v61 + v62);
      uint64_t v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v57)(v95, v61, v55);
      object = v65->_object;
      *char v64 = v65->_countAndFlagsBits;
      v64[1] = (uint64_t)object;
      uint64_t v68 = RoutingInteraction.identifier.getter(v66);
      uint64_t v70 = v69;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v63, v55);
      v71._uint64_t countAndFlagsBits = v68;
      v71._object = v70;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      v72._uint64_t countAndFlagsBits = 0xD000000000000017LL;
      v72._object = v89;
      String.append(_:)(v72);
      String.append(_:)(*v65);
      uint64_t v73 = v99;
      unint64_t v74 = v100;
      sub_1001603DC(v61, &qword_1003FA670);
      uint64_t v75 = v101;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v101);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_10015DCE8(0, v75[2] + 1LL, 1);
        uint64_t v75 = v101;
      }

      unint64_t v77 = v75[2];
      unint64_t v76 = v75[3];
      if (v77 >= v76 >> 1)
      {
        uint64_t result = sub_10015DCE8(v76 > 1, v77 + 1, 1);
        uint64_t v75 = v101;
      }

      v75[2] = v77 + 1;
      uint64_t v78 = &v75[2 * v77];
      v78[4] = v73;
      v78[5] = v74;
      if (v44 < 0 || v44 >= -(-1LL << *((_BYTE *)v42 + 32))) {
        break;
      }
      if (*((_DWORD *)v42 + 9) != (_DWORD)v98) {
        goto LABEL_32;
      }
      uint64_t v79 = _HashTable.occupiedBucket(after:)(v44);
      if (!v97)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }

      uint64_t v44 = v79;
      char v48 = 0;
      int v46 = (char *)*((unsigned int *)v42 + 9);
      --v97;
    }

uint64_t sub_1001FF8EC()
{
  return sub_1001FF164();
}

uint64_t sub_1001FF90C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10018036C(a1);
  LOBYTE(asub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100200194();
    uint64_t v7 = v12;
  }

  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4,  v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1001FFD9C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001FF9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FA7E0);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  os_log_type_t v45 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v43 = v2;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v44) {
      break;
    }
    char v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v44) {
              goto LABEL_36;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

unint64_t sub_1001FFD9C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v37 + 72);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v12;
        int64_t v15 = v12 * v10;
        uint64_t v16 = v13;
        v35(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v17 = *(void *)(a2 + 40);
        uint64_t v18 = sub_1002007D4(&qword_1003F7F98, (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        uint64_t v13 = v16;
        unint64_t v20 = v19 & v16;
        if (a1 >= (uint64_t)v36)
        {
          if (v20 >= v36 && a1 >= (uint64_t)v20)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 48);
            unint64_t result = v23 + v14 * a1;
            uint64_t v24 = v23 + v15;
            if (v14 * a1 < v15 || (uint64_t v12 = v14, result >= v24 + v14))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v24, 1LL, v4);
LABEL_22:
              uint64_t v13 = v16;
              uint64_t v12 = v14;
            }

            else if (v14 * a1 != v15)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_22;
            }

            uint64_t v25 = *(void *)(a2 + 56);
            int64_t v26 = (_OWORD *)(v25 + 16 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 1))
            {
              *int64_t v26 = *v27;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v20 >= v36 || a1 >= (uint64_t)v20)
        {
          goto LABEL_17;
        }

        uint64_t v12 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  *unint64_t v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100200028(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10018036C(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      unint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *unint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100200194();
    goto LABEL_7;
  }

  sub_1001FF9F8(v18, a4 & 1);
  unint64_t v25 = sub_10018036C(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v25;
  unint64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100181E58(v15, (uint64_t)v12, a1, v28, v21);
}

void *sub_100200194()
{
  uint64_t v36 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v1 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003FA7E0);
  BOOL v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v38 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release(v3);
    uint64_t v30 = v38;
    uint64_t v29 = v32;
LABEL_28:
    *uint64_t v29 = v30;
    return result;
  }

  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, v34, 8 * v8);
    uint64_t v6 = v38;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v37 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v35;
  uint64_t v14 = v36;
  uint64_t v16 = v38;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v37;
      goto LABEL_12;
    }

    int64_t v26 = v10 + 1;
    uint64_t v19 = v37;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *((void *)v34 + v26);
    ++v10;
    if (!v27)
    {
      int64_t v10 = v26 + 1;
      if (v26 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v27 = *((void *)v34 + v10);
      if (!v27) {
        break;
      }
    }

uint64_t sub_100200404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSourceSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100200448(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HostedRoutingSourceSession(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100200484(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))( v7,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a2,  v9);
    int64_t v10 = (uint64_t *)(*(void *)(a5 + 56) + 16 * a2);
    uint64_t v11 = *v10;
    swift_bridgeObjectRetain(v10[1]);
    return v11;
  }

uint64_t sub_10020053C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100200560()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100200594()
{
  return sub_1001FDE8C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_1002005A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002005B4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002005BC()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100200638()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RoutingInteraction(0LL) - 8) + 80LL);
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2] + 16LL;
  swift_beginAccess(v4, v9, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_100187D68();

    *(void *)(v6 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v7;
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1001FCFCC();
    sub_1001FF90C((uint64_t)v0 + ((v1 + 40) & ~v1));
    swift_bridgeObjectRelease();
    *(void *)(v6 + 48) = v8;
    swift_release(v6);
    return swift_bridgeObjectRelease();
  }

  return result;
}

unint64_t sub_100200720()
{
  unint64_t result = qword_1003F8950;
  if (!qword_1003F8950)
  {
    uint64_t v1 = sub_100160358(&qword_1003FA010);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003F8950);
  }

  return result;
}

uint64_t sub_10020076C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FA670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SessionIdentifierStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted22SessionIdentifierStore);
}

uint64_t sub_1002007D4(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for RoutingInteraction(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

id sub_10020081C()
{
  return sub_1002018D4(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon);
}

id sub_100200828@<X0>(void *a1@<X8>)
{
  id result = sub_10020081C();
  *a1 = result;
  return result;
}

void sub_100200850(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon) = *a1;
  id v3 = v2;
}

id sub_10020088C()
{
  return sub_1002018D4(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect);
}

id sub_100200898@<X0>(void *a1@<X8>)
{
  id result = sub_10020088C();
  *a1 = result;
  return result;
}

void sub_1002008C0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect) = *a1;
  id v3 = v2;
}

id sub_100200AD4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v5 = sub_1002023A0(a1, v4);

  return v5;
}

uint64_t sub_100200C08()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100200C50(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked);
}

uint64_t (*sub_100200C5C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100200CA4(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_eventName);
}

uint64_t sub_100200CB0(uint64_t a1, uint64_t a2)
{
  return sub_1002012F4(a1, a2, &OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_propertyMap);
}

unint64_t sub_100200CBC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, v10);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventJoinSessionModeKey);
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v4;
  id v5 = (void **)(v1 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_joinMode);
  swift_beginAccess(v5, v9, 0LL, 0LL);
  uint64_t v6 = *v5;
  *(void *)(inited + 72) = sub_100174C5C();
  *(void *)(inited + 48) = v6;
  id v7 = v6;
  return sub_1001B7BC8(inited);
}

uint64_t sub_100200D58()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034D870;
  *(void *)(v1 + 32) = sub_1002018D4(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___request);
  *(void *)(v1 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_10020081C();
  id v2 = sub_10020088C();
  *(void *)(v1 + 48) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

id sub_100200DD4()
{
  return sub_1002018D4(&OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup);
}

id sub_100200DE0@<X0>(void *a1@<X8>)
{
  id result = sub_100200DD4();
  *a1 = result;
  return result;
}

void sub_100200E08(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup) = *a1;
  id v3 = v2;
}

id sub_100200E44()
{
  return sub_1002018D4(&OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation);
}

id sub_100200E50@<X0>(void *a1@<X8>)
{
  id result = sub_100200E44();
  *a1 = result;
  return result;
}

void sub_100200E78(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation) = *a1;
  id v3 = v2;
}

id sub_100201008(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100201038(a1, v4);
}

id sub_100201038(char a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v3[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked] = 0;
  uint64_t v6 = &v3[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_eventName];
  *uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionCreate);
  v6[1] = v7;
  uint64_t v8 = OBJC_IVAR___MRDGroupSessionCreateTimingEvents_propertyMap;
  uint64_t v9 = sub_100156B68(&qword_1003FA838);
  uint64_t inited = swift_initStackObject(v9, v16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
  *(void *)(inited + 32) = swift_getKeyPath("X.\v");
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventSessionCreatedNearbyGroupDurationKey);
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = swift_getKeyPath(" .\v");
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventSessionCreatedNearbyInvitationDurationKey);
  *(void *)(inited + 72) = v12;
  unint64_t v13 = v3;
  *(void *)&v3[v8] = sub_1001B7CFC(inited, &qword_1003FA958, &qword_1003FA960);
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup] = 0LL;
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation] = 0LL;
  v13[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_routeType] = a1;

  v15.receiver = v13;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t sub_100201240()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100201288(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked);
}

uint64_t (*sub_100201294(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1002012DC(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDGroupSessionCreateTimingEvents_eventName);
}

uint64_t sub_1002012E8(uint64_t a1, uint64_t a2)
{
  return sub_1002012F4(a1, a2, &OBJC_IVAR___MRDGroupSessionCreateTimingEvents_propertyMap);
}

uint64_t sub_1002012F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(*v3 + *a3);
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v4);
}

unint64_t sub_10020133C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, v9);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventSessionCreatedRouteKey);
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v4;
  id v5 = (_BYTE *)(v1 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents_routeType);
  swift_beginAccess(v5, v8, 0LL, 0LL);
  LOBYTE(v5) = *v5;
  type metadata accessor for MRGroupSessionRouteType();
  *(void *)(inited + 72) = v6;
  *(_BYTE *)(inited + 48) = (_BYTE)v5;
  return sub_1001B7BC8(inited);
}

uint64_t sub_1002013D4()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034D880;
  *(void *)(v1 + 32) = sub_100200DD4();
  id v2 = sub_100200E44();
  *(void *)(v1 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

id sub_100201628()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext);
}

id sub_100201634@<X0>(void *a1@<X8>)
{
  id result = sub_100201628();
  *a1 = result;
  return result;
}

void sub_10020165C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext) = *a1;
  id v3 = v2;
}

id sub_100201698()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice);
}

id sub_1002016A4@<X0>(void *a1@<X8>)
{
  id result = sub_100201698();
  *a1 = result;
  return result;
}

void sub_1002016CC(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice) = *a1;
  id v3 = v2;
}

id sub_100201708()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice);
}

id sub_100201714@<X0>(void *a1@<X8>)
{
  id result = sub_100201708();
  *a1 = result;
  return result;
}

void sub_10020173C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice) = *a1;
  id v3 = v2;
}

id sub_100201778()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo);
}

id sub_100201784@<X0>(void *a1@<X8>)
{
  id result = sub_100201778();
  *a1 = result;
  return result;
}

void sub_1002017AC(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo) = *a1;
  id v3 = v2;
}

id sub_1002017E8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward);
}

id sub_1002017F4@<X0>(void *a1@<X8>)
{
  id result = sub_1002017E8();
  *a1 = result;
  return result;
}

void sub_10020181C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward) = *a1;
  id v3 = v2;
}

id sub_100201858()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint);
}

id sub_100201864@<X0>(void *a1@<X8>)
{
  id result = sub_100201858();
  *a1 = result;
  return result;
}

void sub_10020188C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint) = *a1;
  id v3 = v2;
}

id sub_1002018C8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions);
}

id sub_1002018D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }

  else
  {
    uint64_t v5 = v1;
    type metadata accessor for TimingEvent(0LL);
    id v6 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v7 = *(void **)(v1 + v2);
    *(void *)(v5 + v2) = v6;
    id v4 = v6;

    id v3 = 0LL;
  }

  id v8 = v3;
  return v4;
}

id sub_10020193C@<X0>(void *a1@<X8>)
{
  id result = sub_1002018C8();
  *a1 = result;
  return result;
}

void sub_100201964(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions) = *a1;
  id v3 = v2;
}

uint64_t sub_1002019A0()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 88LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034D890;
  *(void *)(v1 + 32) = sub_100201628();
  *(void *)(v1 + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = sub_100201698();
  *(void *)(v1 + 48) = sub_100201708();
  *(void *)(v1 + 56) = sub_100201778();
  *(void *)(v1 + 64) = sub_1002017E8();
  *(void *)(v1 + 72) = sub_100201858();
  id v2 = sub_1002018C8();
  *(void *)(v1 + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

unint64_t sub_100201A30()
{
  uint64_t v1 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v1, v12);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  *(void *)(inited + 32) = 0xD000000000000017LL;
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = 0x800000010033CF90LL;
  id v3 = (_BYTE *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_discoverableGroupLeader);
  swift_beginAccess(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_discoverableGroupLeader, v11, 0LL, 0LL);
  *(_BYTE *)(inited + 48) = *v3;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = 0x5472657473756C63LL;
  *(void *)(inited + 88) = 0xEB00000000657079LL;
  id v4 = (_DWORD *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType);
  swift_beginAccess(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType, v10, 0LL, 0LL);
  *(_DWORD *)(inited + 96) = *v4;
  *(void *)(inited + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = &type metadata for UInt32;
  *(void *)(inited + 128) = 0x44496C65646F6DLL;
  *(void *)(inited + 136) = 0xE700000000000000LL;
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_modelID);
  swift_beginAccess(v5, v9, 0LL, 0LL);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = v6;
  swift_bridgeObjectRetain();
  return sub_1001B7BC8(inited);
}

void sub_100201E40(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a1, a2);
  int64_t v10 = a1;
  id v8 = a1;
  id v9 = a3;
  sub_1002050AC((uint64_t)v9, ObjectType, a4);
}

void sub_100201EC8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a1, a2);
  id v6 = a1;
  sub_1002047D4(ObjectType, a3);
}

id sub_100201F2C(int a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100201F74(a1, a2, a3);
}

id sub_100201F74(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_discoverableGroupLeader] = 0;
  id v8 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType];
  *id v8 = 0;
  id v9 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_modelID];
  void *v9 = 0LL;
  v9[1] = 0xE000000000000000LL;
  int64_t v10 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_eventName];
  *int64_t v10 = 0xD00000000000002CLL;
  v10[1] = 0x800000010033CF60LL;
  v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint] = 0LL;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions] = 0LL;
  swift_beginAccess(v8, v15, 1LL, 0LL);
  *id v8 = a1;
  swift_beginAccess(v9, v14, 1LL, 0LL);
  uint64_t v11 = v9[1];
  void *v9 = a2;
  v9[1] = a3;
  swift_bridgeObjectRelease(v11);
  v13.receiver = v3;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

id sub_100202134(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100202218()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100202260(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked);
}

uint64_t sub_10020226C(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (_BYTE *)(*v4 + *a4);
  uint64_t result = swift_beginAccess(v6, v8, 1LL, 0LL);
  *id v6 = a1;
  return result;
}

uint64_t (*sub_1002022B4(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1002022FC(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_eventName);
}

uint64_t sub_100202308(uint64_t a1, uint64_t a2, void *a3)
{
  objc_super v4 = (uint64_t *)(*v3 + *a3);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  return v5;
}

unint64_t sub_100202360()
{
  return sub_100201A30();
}

uint64_t sub_100202380()
{
  return sub_1002019A0();
}

id sub_1002023A0(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v3[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked] = 0;
  id v6 = &v3[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_eventName];
  *id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinAttempt);
  v6[1] = v7;
  uint64_t v8 = OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_propertyMap;
  uint64_t v9 = sub_100156B68(&qword_1003FA7F8);
  uint64_t inited = swift_initStackObject(v9, v17);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034D8A8);
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinAttemptWHAReconDurationKey);
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034D8E0);
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinAttemptWHAConnectionDurationKey);
  *(void *)(inited + 72) = v12;
  objc_super v13 = v3;
  *(void *)&v3[v8] = sub_1001B7CFC(inited, &qword_1003FA968, &qword_1003FA970);
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___request] = 0LL;
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon] = 0LL;
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect] = 0LL;
  *(void *)&v13[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_joinMode] = a1;
  id v14 = a1;

  v16.receiver = v13;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, "init");
}

unint64_t sub_1002024F4()
{
  uint64_t v0 = sub_100156B68(&qword_1003FA940);
  uint64_t inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C940;
  *(void *)(inited + 32) = swift_getKeyPath("x,\v");
  *(void *)(inited + 4sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = 0xD000000000000013LL;
  *(void *)(inited + 48) = 0x800000010034DA10LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034DB30);
  *(void *)(inited + 64) = 0xD000000000000011LL;
  *(void *)(inited + 72) = 0x800000010034DA30LL;
  *(void *)(inited + 8sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = swift_getKeyPath(&unk_10034DB58);
  strcpy((char *)(inited + 88), "addLocalDevice");
  *(_BYTE *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034DB80);
  *(void *)(inited + 112) = 0xD000000000000010LL;
  *(void *)(inited + 12sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = 0x800000010034DA60LL;
  *(void *)(inited + 128) = swift_getKeyPath(&unk_10034DBA8);
  strcpy((char *)(inited + 136), "originForward");
  *(_WORD *)(inited + 15sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0) = -4864;
  *(void *)(inited + 152) = swift_getKeyPath(&unk_10034DBD0);
  strcpy((char *)(inited + 160), "findEndpoint");
  *(_BYTE *)(inited + 173) = 0;
  *(_WORD *)(inited + 174) = -5120;
  *(void *)(inited + 176) = swift_getKeyPath(&unk_10034DBF8);
  *(void *)(inited + 184) = 0x7075727265746E69LL;
  *(void *)(inited + 192) = 0xE900000000000074LL;
  return sub_1001B7CFC(inited, &qword_1003FA948, &qword_1003FA950);
}

uint64_t type metadata accessor for GroupSessionJoinAttemptAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDGroupSessionJoinAttemptAnalytics);
}

uint64_t type metadata accessor for GroupSessionCreateTimingEvents()
{
  return objc_opt_self(&OBJC_CLASS___MRDGroupSessionCreateTimingEvents);
}

uint64_t type metadata accessor for NowPlayingAirPlaySessionEvents()
{
  return objc_opt_self(&OBJC_CLASS___MRDNowPlayingAirPlaySessionEvents);
}

void type metadata accessor for MRAVOutputDeviceClusterType(uint64_t a1)
{
}

id sub_100202704()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___MRDMediaAppInFocusMonitor);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 isRemoteControllableApp:v1];

  return v2;
}

uint64_t sub_10020276C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))() & 1;
}

uint64_t type metadata accessor for MediaAppInFocusMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted22MediaAppInFocusMonitor);
}

uint64_t sub_100202810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  id v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  uint64_t v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }

  else
  {
    uint64_t v9 = swift_allocError(a1, a2, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }

  uint64_t v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  uint64_t result = kMRMediaRemoteFrameworkErrorDomain;
  if (kMRMediaRemoteFrameworkErrorDomain)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteFrameworkErrorDomain);
    uint64_t v15 = v14;
    id v16 = [v11 domain];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    if (v17 == v13 && v19 == v15)
    {
      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v13, v15, 0LL);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v15);
      if ((v21 & 1) == 0) {
        goto LABEL_13;
      }
    }

    if ((uint64_t)[v11 code] < 200)
    {
LABEL_13:

      return 0LL;
    }

    uint64_t v22 = (uint64_t)[v11 code];

    return v22 < 300;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002029CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100202A38(&OBJC_IVAR___MRDTimingEvent_startDate, a1);
}

uint64_t sub_1002029D8(uint64_t a1)
{
  return sub_100202A98(a1, &OBJC_IVAR___MRDTimingEvent_startDate);
}

uint64_t sub_1002029E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100202A2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100202A38(&OBJC_IVAR___MRDTimingEvent_endDate, a1);
}

uint64_t sub_100202A38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return sub_1001A8360(v4, a2, &qword_1003F9F28);
}

uint64_t sub_100202A8C(uint64_t a1)
{
  return sub_100202A98(a1, &OBJC_IVAR___MRDTimingEvent_endDate);
}

uint64_t sub_100202A98(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess(v4, v6, 33LL, 0LL);
  sub_1002029E4(a1, v4);
  return swift_endAccess(v6);
}

uint64_t sub_100202B5C()
{
  NSString v1 = (uint64_t *)(v0 + OBJC_IVAR___MRDTimingEvent_error);
  swift_beginAccess(v0 + OBJC_IVAR___MRDTimingEvent_error, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_errorRetain(v2);
  return v2;
}

uint64_t sub_100202C0C(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR___MRDTimingEvent_error);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_errorRelease(v4);
}

uint64_t (*sub_100202C5C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100202CA0()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9F28);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  id v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v22 - v13;
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x80LL))(v12);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1LL, v7) == 1)
  {
    uint64_t v16 = (uint64_t)v6;
LABEL_5:
    sub_1001603DC(v16, &qword_1003F9F28);
    return 0LL;
  }

  uint64_t v17 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v18 = v17(v14, v6, v7);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x68LL))(v18);
  if (v15(v4, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    uint64_t v16 = (uint64_t)v4;
    goto LABEL_5;
  }

  v17(v11, v4, v7);
  double v20 = Date.timeIntervalSince(_:)(v11);
  char v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  v21(v14, v7);
  return *(void *)&v20;
}

NSNumber sub_100202EE8()
{
  if ((v1 & 1) != 0) {
    return 0LL;
  }
  else {
    return Double._bridgeToObjectiveC()();
  }
}

BOOL sub_100202F2C()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9F28);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v15[-v6 - 8];
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x68LL))(v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8);
  uint64_t v11 = sub_1001603DC((uint64_t)v7, &qword_1003F9F28);
  if (v10 == 1)
  {
    Date.init()(v11);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0LL, 1LL, v8);
    uint64_t v12 = (uint64_t)v0 + OBJC_IVAR___MRDTimingEvent_startDate;
    swift_beginAccess(v12, v15, 33LL, 0LL);
    sub_1002029E4((uint64_t)v4, v12);
    swift_endAccess(v15);
  }

  return v10 == 1;
}

BOOL sub_1002030A4(id a1)
{
  uint64_t v3 = sub_100156B68(&qword_1003F9F28);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v21[-1] - v8;
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x80LL))(v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  uint64_t v13 = sub_1001603DC((uint64_t)v9, &qword_1003F9F28);
  if (v12 == 1)
  {
    Date.init()(v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0LL, 1LL, v10);
    uint64_t v14 = (uint64_t)v1 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess((char *)v1 + OBJC_IVAR___MRDTimingEvent_endDate, v21, 33LL, 0LL);
    sub_1002029E4((uint64_t)v6, v14);
    swift_endAccess(v21);
    if (a1)
    {
      v21[0] = a1;
      swift_errorRetain(a1);
      uint64_t v15 = sub_100156B68(&qword_1003F86D0);
      uint64_t v16 = sub_10016083C(0LL, &qword_1003FA128, &OBJC_CLASS___NSError_ptr);
      if ((swift_dynamicCast(&v20, v21, v15, v16, 6LL) & 1) != 0
        && (id v17 = v20,
            id v18 = [v20 recursiveUnderlyingError],
            v17,
            v18))
      {
        a1 = v18;
      }

      else
      {
        swift_errorRetain(a1);
      }
    }

    (*(void (**)(id))((swift_isaMask & *v1) + 0xA0LL))(a1);
  }

  return v12 == 1;
}

uint64_t sub_1002032E8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8LL))(0LL);
}

uint64_t type metadata accessor for TimingEvent(uint64_t a1)
{
  uint64_t result = qword_1004007B8;
  if (!qword_1004007B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimingEvent);
  }
  return result;
}

id sub_100203434()
{
  return sub_100185D08(0LL, (uint64_t (*)(void))type metadata accessor for TimingEvent);
}

void MRDTimingEvents.orderedEvents.getter()
{
}

NSNumber MRDTimingEvents.objC_totalDuration.getter()
{
  id v1 = v0;
  sub_1002035B8();

  return Double._bridgeToObjectiveC()();
}

uint64_t sub_1002035B8()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9F28);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v50 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v45 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v45 - v8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v52 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v48 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v46 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x50LL);
  unint64_t v15 = v46(v13);
  int64_t v16 = v15;
  os_log_type_t v45 = v6;
  int v47 = v0;
  uint64_t v49 = (uint64_t)v11;
  if (!(v15 >> 62))
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n(v16, 2LL);
    uint64_t v25 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v49, 1LL, 1LL, v52);
    return sub_1001603DC(v25, &qword_1003F9F28);
  }

uint64_t sub_100203A38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100156B68(&qword_1003F9F28);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v50 = (char *)&v45 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v47 = a1;
  uint64_t v48 = v2;
  uint64_t v49 = a2;
  int v46 = v19;
  unint64_t v20 = v19(a1, a2);
  int64_t v21 = v20;
  os_log_type_t v45 = v8;
  uint64_t v54 = v16;
  uint64_t v52 = (uint64_t)v15;
  if (!(v20 >> 62))
  {
    uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v51 = v18;
    if (v22) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n(v21, 2LL);
    uint64_t v29 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, 1LL, 1LL, v54);
    return sub_1001603DC(v29, &qword_1003F9F28);
  }

uint64_t MRDTimingEvents.objC_firstError.getter()
{
  id v1 = v0;
  uint64_t v2 = sub_100203F50();

  return v2;
}

uint64_t sub_100203F50()
{
  unint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x50LL))();
  uint64_t v2 = v1;
  if (v1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v4 = 4LL;
    while (1)
    {
      uint64_t v5 = (v2 & 0xC000000000000001LL) != 0
         ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2)
         : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL)) {
        break;
      }
      uint64_t v8 = *(uint64_t (**)(void))((swift_isaMask & *v5) + 0x98LL);
      uint64_t v9 = v8();
      swift_errorRelease(v9);
      if (v9)
      {
        uint64_t v11 = swift_bridgeObjectRelease_n(v2, 2LL);
        uint64_t v12 = ((uint64_t (*)(uint64_t))v8)(v11);

        return v12;
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (v2 < 0) {
      uint64_t v13 = v2;
    }
    else {
      uint64_t v13 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
  }

uint64_t sub_100204084(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 8))();
  uint64_t v3 = v2;
  if (v2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v2);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      uint64_t v6 = (v3 & 0xC000000000000001LL) != 0
         ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3)
         : *(id *)(v3 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      uint64_t v9 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x98LL);
      uint64_t v10 = v9();
      swift_errorRelease(v10);
      if (v10)
      {
        uint64_t v12 = swift_bridgeObjectRelease_n(v3, 2LL);
        uint64_t v13 = ((uint64_t (*)(uint64_t))v9)(v12);

        return v13;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (v3 < 0) {
      uint64_t v14 = v3;
    }
    else {
      uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
  }

unint64_t MRDTimingEvents.objC_condensedEvent.getter()
{
  id v1 = v0;
  unint64_t v2 = sub_10020420C();

  return v2;
}

unint64_t sub_10020420C()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9F28);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v22[-v6 - 8];
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x50LL))(v5);
  uint64_t v9 = v8;
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v10) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (v8 < 0) {
    uint64_t v20 = v8;
  }
  else {
    uint64_t v20 = v8 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_17;
  }
LABEL_3:
  unint64_t result = (unint64_t)[objc_allocWithZone((Class)type metadata accessor for TimingEvent(0)) init];
  uint64_t v12 = (void *)result;
  if ((v9 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }

    uint64_t v13 = *(id *)(v9 + 32);
  }

  (*(void (**)(void))((swift_isaMask & *v13) + 0x68LL))();

  uint64_t v14 = (uint64_t)v12 + OBJC_IVAR___MRDTimingEvent_startDate;
  swift_beginAccess((char *)v12 + OBJC_IVAR___MRDTimingEvent_startDate, v22, 33LL, 0LL);
  sub_1002029E4((uint64_t)v7, v14);
  swift_endAccess(v22);
  unint64_t result = v10 - 1;
  if (__OFSUB__(v10, 1LL))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((v9 & 0xC000000000000001LL) != 0)
  {
    unint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v9);
LABEL_12:
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0x80LL))(v17);

    uint64_t v18 = (uint64_t)v12 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess((char *)v12 + OBJC_IVAR___MRDTimingEvent_endDate, v22, 33LL, 0LL);
    sub_1002029E4((uint64_t)v4, v18);
    swift_endAccess(v22);
    uint64_t v19 = sub_100203F50();
    (*(void (**)(uint64_t))((swift_isaMask & *v12) + 0xA0LL))(v19);
    return (unint64_t)v12;
  }

  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_22;
  }
  if (result < *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    unint64_t v15 = *(id *)(v9 + 8 * result + 32);
    goto LABEL_12;
  }

unint64_t sub_10020448C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9F28);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v24[-v8 - 8];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v11 = v10;
  if (!((unint64_t)v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (v10 < 0) {
    uint64_t v22 = v10;
  }
  else {
    uint64_t v22 = v10 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_3:
  unint64_t result = (unint64_t)[objc_allocWithZone((Class)type metadata accessor for TimingEvent(0)) init];
  uint64_t v14 = (void *)result;
  if ((v11 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }

    unint64_t v15 = *(id *)(v11 + 32);
  }

  (*(void (**)(void))((swift_isaMask & *v15) + 0x68LL))();

  uint64_t v16 = (uint64_t)v14 + OBJC_IVAR___MRDTimingEvent_startDate;
  swift_beginAccess((char *)v14 + OBJC_IVAR___MRDTimingEvent_startDate, v24, 33LL, 0LL);
  sub_1002029E4((uint64_t)v9, v16);
  swift_endAccess(v24);
  unint64_t result = v12 - 1;
  if (__OFSUB__(v12, 1LL))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((v11 & 0xC000000000000001LL) != 0)
  {
    uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v11);
LABEL_12:
    uint64_t v18 = v17;
    uint64_t v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v18) + 0x80LL))(v19);

    uint64_t v20 = (uint64_t)v14 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess((char *)v14 + OBJC_IVAR___MRDTimingEvent_endDate, v24, 33LL, 0LL);
    sub_1002029E4((uint64_t)v7, v20);
    swift_endAccess(v24);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0xA0LL))(v21);
    return (unint64_t)v14;
  }

  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_22;
  }
  if (result < *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v17 = *(id *)(v11 + 8 * result + 32);
    goto LABEL_12;
  }

id MRDTimingEvents.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MRDTimingEvents();
  return objc_msgSendSuper2(&v2, "init");
}

id MRDTimingEvents.__deallocating_deinit(uint64_t a1)
{
  return sub_100185D08(a1, type metadata accessor for MRDTimingEvents);
}

uint64_t sub_10020479C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x50LL))();
}

void sub_1002047D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 24))(1LL, a1, a2);
  uint64_t v6 = swift_allocObject(&unk_1003A7680, 24LL, 7LL);
  uint64_t v7 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v7, v70);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventDurationKey);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v9;
  uint64_t v59 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t))(v59 + 16))(a1);
  *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
  unint64_t v63 = sub_10016995C(inited);
  uint64_t v65 = v6;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v63;
  uint64_t v60 = a1;
  uint64_t v62 = a2;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  int64_t v11 = 0LL;
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v67 = v10 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v66 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v12) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v16 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v11 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v10 + 48) + 8 * i);
    uint64_t v19 = (uint64_t *)(*(void *)(v10 + 56) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_retain(v18);
    swift_bridgeObjectRetain();
    uint64_t v22 = v3;
    uint64_t v23 = swift_getAtKeyPath(aBlock, v3, v18);
    int v24 = (void *)aBlock[0];
    (*(void (**)(void *))((swift_isaMask & *(void *)aBlock[0]) + 0xB0LL))(v23);
    char v26 = v25;

    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release(v18);
      uint64_t v3 = v22;
      if (v15) {
        goto LABEL_5;
      }
    }

    else
    {
      v61.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
      aBlock[0] = *(void *)(v65 + 16);
      uint64_t v31 = aBlock[0];
      *(void *)(v65 + swift_weakDestroy(v0 + 16) = 0x8000000000000000LL;
      unint64_t v33 = sub_10015CAD4(v20, v21);
      uint64_t v34 = *(void *)(v31 + 16);
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        goto LABEL_41;
      }
      if (*(void *)(v31 + 24) >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v48 = v32;
          sub_100205978();
          char v32 = v48;
        }
      }

      else
      {
        char v64 = v32;
        sub_10020566C(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v37 = sub_10015CAD4(v20, v21);
        int v39 = v38 & 1;
        char v32 = v64;
        if ((v64 & 1) != v39) {
          goto LABEL_43;
        }
        unint64_t v33 = v37;
      }

      uint64_t v3 = v22;
      uint64_t v40 = (void *)aBlock[0];
      if ((v32 & 1) != 0)
      {
        uint64_t v41 = *(void *)(aBlock[0] + 56LL);
        uint64_t v42 = 8 * v33;
        uint64_t v43 = (void *)aBlock[0];

        *(NSNumber *)(v41 + v42) = v61;
      }

      else
      {
        *(void *)(aBlock[0] + 8 * (v33 >> 6) + 64) |= 1LL << v33;
        uint64_t v44 = (uint64_t *)(v40[6] + 16 * v33);
        *uint64_t v44 = v20;
        v44[1] = v21;
        *(NSNumber *)(v40[7] + 8 * v33) = v61;
        uint64_t v45 = v40[2];
        BOOL v46 = __OFADD__(v45, 1LL);
        uint64_t v47 = v45 + 1;
        if (v46) {
          goto LABEL_42;
        }
        v40[2] = v47;
        uint64_t v43 = v40;
        swift_bridgeObjectRetain();
      }

      unint64_t v63 = (unint64_t)v43;
      *(void *)(v65 + swift_weakDestroy(v0 + 16) = v43;
      swift_release(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_5;
      }
    }

void sub_100204D18(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100156B68((uint64_t *)&unk_1003F86A0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v38 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  uint64_t v7 = &v45;
  int64_t v37 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v9 = (uint64_t *)&unk_1003FAA70;
  uint64_t v10 = &qword_1003F9F30;
  int64_t v11 = &OBJC_CLASS___NSObject_ptr;
  while (1)
  {
    if (v6)
    {
      uint64_t v40 = (v6 - 1) & v6;
      int64_t v41 = v8;
      unint64_t v20 = __clz(__rbit64(v6)) | (v8 << 6);
    }

    else
    {
      int64_t v21 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_36;
      }
      if (v21 >= v37)
      {
LABEL_33:
        sub_10016031C(v1);
        return;
      }

      unint64_t v22 = *(void *)(v38 + 8 * v21);
      int64_t v23 = v8 + 1;
      if (!v22)
      {
        int64_t v23 = v8 + 2;
        if (v8 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v8 + 3;
          if (v8 + 3 >= v37) {
            goto LABEL_33;
          }
          unint64_t v22 = *(void *)(v38 + 8 * v23);
          if (!v22)
          {
            int64_t v23 = v8 + 4;
            if (v8 + 4 >= v37) {
              goto LABEL_33;
            }
            unint64_t v22 = *(void *)(v38 + 8 * v23);
            if (!v22)
            {
              uint64_t v24 = v8 + 5;
              if (v8 + 5 >= v37) {
                goto LABEL_33;
              }
              unint64_t v22 = *(void *)(v38 + 8 * v24);
              if (!v22)
              {
                while (1)
                {
                  int64_t v23 = v24 + 1;
                  if (__OFADD__(v24, 1LL)) {
                    goto LABEL_37;
                  }
                  if (v23 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v22 = *(void *)(v38 + 8 * v23);
                  ++v24;
                  if (v22) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v23 = v8 + 5;
            }
          }
        }
      }

void sub_1002050AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100156B68(&qword_1003F9F28);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v10 + 8);
  uint64_t v27 = v10;
  uint64_t v11 = v26(a2);
  uint64_t v30 = a2;
  uint64_t v31 = v3;
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  for (unint64_t i = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; unint64_t i = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    while (!__OFSUB__(i--, 1LL))
    {
      if ((v11 & 0xC000000000000001LL) != 0)
      {
        uint64_t v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
      }

      else
      {
        if ((i & 0x8000000000000000LL) != 0) {
          goto LABEL_24;
        }
        if (i >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_25;
        }
        uint64_t v14 = *(id *)(v11 + 32 + 8 * i);
      }

      uint64_t v15 = v14;
      (*(void (**)(void))((swift_isaMask & *v14) + 0x68LL))();
      uint64_t v16 = type metadata accessor for Date(0LL);
      int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v9, 1LL, v16);
      sub_1001603DC((uint64_t)v9, &qword_1003F9F28);

      if (v17 != 1)
      {
        uint64_t v18 = (void *)sub_100205330(i, v11);
        goto LABEL_14;
      }

      if (!i) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    if (v11 < 0) {
      uint64_t v25 = v11;
    }
    else {
      uint64_t v25 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

unint64_t sub_100205330(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0) {
    return specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
  }
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
  {
    return (unint64_t)*(id *)(a2 + 8 * result + 32);
  }

  __break(1u);
  return result;
}

uint64_t sub_100205388(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  uint64_t v14 = (void *)*a5;
  unint64_t v16 = sub_10015CAD4(v8, v9);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  char v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      int64_t v23 = (void *)*a5;
      if ((v15 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      sub_100205978();
      int64_t v23 = (void *)*a5;
      if ((v20 & 1) != 0) {
        goto LABEL_9;
      }
    }

Swift::Int sub_10020566C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68((uint64_t *)&unk_1003F86A0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

id sub_100205978()
{
  uint64_t v1 = v0;
  sub_100156B68((uint64_t *)&unk_1003F86A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t type metadata accessor for MRDTimingEvents()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted15MRDTimingEvents);
}

uint64_t sub_100205B48()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_100205B6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain(v2);
  return v4;
}

uint64_t sub_100205BA4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100205BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100205BE8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100205BF0()
{
  return type metadata accessor for TimingEvent(0LL);
}

void sub_100205BF8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = "\b";
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_100205C70(uint64_t a1)
{
  if (!qword_1003FAA40)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1003FAA40);
    }
  }

void sub_100205CC4()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    unint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }

  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      unint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          unint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v0[3] = v4;
    v0[4] = 0LL;
  }

uint64_t sub_100205E50()
{
  uint64_t v0 = type metadata accessor for MediaControlActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  static MediaControlActor.shared = v1;
  return result;
}

uint64_t sub_100205E88()
{
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  swift_defaultActor_initialize();
  return v1;
}

uint64_t *MediaControlActor.shared.unsafeMutableAddressor()
{
  if (qword_1004007D0 != -1) {
    swift_once(&qword_1004007D0, sub_100205E50);
  }
  return &static MediaControlActor.shared;
}

uint64_t static MediaControlActor.shared.getter()
{
  if (qword_1004007D0 != -1) {
    swift_once(&qword_1004007D0, sub_100205E50);
  }
  swift_beginAccess(&static MediaControlActor.shared, v1, 0LL, 0LL);
  return swift_retain(static MediaControlActor.shared);
}

uint64_t static MediaControlActor.shared.setter(uint64_t a1)
{
  if (qword_1004007D0 != -1) {
    swift_once(&qword_1004007D0, sub_100205E50);
  }
  swift_beginAccess(&static MediaControlActor.shared, v4, 1LL, 0LL);
  uint64_t v2 = static MediaControlActor.shared;
  static MediaControlActor.shared = a1;
  return swift_release(v2);
}

uint64_t (*static MediaControlActor.shared.modify(uint64_t a1))(void)
{
  if (qword_1004007D0 != -1) {
    swift_once(&qword_1004007D0, sub_100205E50);
  }
  swift_beginAccess(&static MediaControlActor.shared, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t MediaControlActor.deinit()
{
  return v0;
}

uint64_t MediaControlActor.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t MediaControlActor.unownedExecutor.getter()
{
  return v0;
}

unint64_t sub_100206090()
{
  unint64_t result = qword_1003FAA78;
  if (!qword_1003FAA78)
  {
    uint64_t v1 = type metadata accessor for MediaControlActor();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MediaControlActor, v1);
    atomic_store(result, (unint64_t *)&qword_1003FAA78);
  }

  return result;
}

uint64_t type metadata accessor for MediaControlActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted17MediaControlActor);
}

uint64_t sub_1002060F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MediaControlActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_100206118()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t withTimeout<A>(duration:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100156B68(&qword_1003FAB28);
  uint64_t inited = swift_initStackObject(v11, v6 + 2);
  v6[8] = inited;
  *(void *)(inited + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v13 = sub_100156B68(&qword_1003FAB30);
  uint64_t v14 = swift_initStackObject(v13, v6 + 5);
  void v6[9] = v14;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v15 = sub_100156B68(&qword_1003FAB38);
  uint64_t v16 = swift_allocObject(v15, 17LL, 7LL);
  v6[10] = v16;
  *(_BYTE *)(v16 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v17 = sub_100156B68(&qword_1003FCE80);
  uint64_t v18 = swift_allocObject(v17, 20LL, 7LL);
  v6[11] = v18;
  *(_DWORD *)(v18 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v19 = (void *)swift_task_alloc(96LL);
  v6[12] = v19;
  v19[2] = a6;
  void v19[3] = a4;
  v19[4] = a5;
  v19[5] = v18;
  v19[6] = v16;
  v19[7] = inited;
  v19[8] = a2;
  v19[9] = a3;
  v19[10] = v14;
  uint64_t v20 = swift_task_alloc(32LL);
  v6[13] = v20;
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = inited;
  *(void *)(v20 + 24) = v14;
  unint64_t v21 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:)[1]);
  v6[14] = v21;
  *unint64_t v21 = v6;
  v21[1] = sub_1002062BC;
  return withTaskCancellationHandler<A>(operation:onCancel:)(a1, &unk_1003FAB48, v19, sub_100207124, v20, a6);
}

uint64_t sub_1002062BC()
{
  uint64_t v1 = *(void *)(*v0 + 104);
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v5 = *(void *)(*v0 + 72);
  uint64_t v4 = *(void *)(*v0 + 80);
  uint64_t v6 = *(void *)(*v0 + 64);
  uint64_t v8 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 112));
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_100206358( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_100206388, 0LL, 0LL);
}

uint64_t sub_100206388()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  __int128 v9 = *(_OWORD *)(v0 + 56);
  uint64_t v4 = swift_task_alloc(96LL);
  *(void *)(v0 + 96) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 24);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v6;
  *(_OWORD *)(v4 + 56) = v9;
  *(void *)(v4 + 72) = v3;
  *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  unint64_t v7 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 104) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100206458;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD000000000000018LL,  0x800000010033D530LL,  sub_10020737C,  v4,  *(void *)(v0 + 88));
}

uint64_t sub_100206458()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1002064CC, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 96));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1002064CC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100206500(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  __int128 v9 = *(_OWORD *)(v1 + 72);
  __int128 v10 = *(_OWORD *)(v1 + 56);
  uint64_t v5 = swift_task_alloc(dword_1003FAB44);
  __int128 v6 = *(_OWORD *)(v1 + 24);
  __int128 v7 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10015FD10;
  *(void *)(v5 + 88) = v4;
  *(_OWORD *)(v5 + 72) = v9;
  *(_OWORD *)(v5 + 56) = v10;
  *(_OWORD *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100206388, 0LL, 0LL);
}

uint64_t sub_10020659C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v58 = a6;
  uint64_t v59 = a8;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v14 = sub_100160358(&qword_1003F86D0);
  uint64_t v60 = a10;
  uint64_t v15 = type metadata accessor for CheckedContinuation( 0LL,  a10,  v14,  &protocol self-conformance witness table for Error);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v20 = sub_100156B68(&qword_1003F86B0);
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Task<>.checkCancellation()(v21);
  uint64_t v55 = a9;
  uint64_t v24 = type metadata accessor for TaskPriority(0LL);
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL);
  uint64_t v53 = v24;
  v52(v23, 1LL, 1LL, v24);
  int64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v50 = a1;
  unint64_t v51 = v25;
  v25(v19, a1, v15);
  uint64_t v54 = a7;
  uint64_t v26 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v27 = (v26 + 72) & ~v26;
  uint64_t v49 = v26 | 7;
  BOOL v28 = (void *)swift_allocObject(&unk_1003A78A0, v27 + v17, v26 | 7);
  uint64_t v29 = a5;
  uint64_t v30 = (uint64_t)v28;
  uint64_t v28[2] = 0LL;
  v28[3] = 0LL;
  uint64_t v31 = v56;
  uint64_t v32 = v57;
  v28[4] = v60;
  v28[5] = v31;
  v28[6] = v32;
  v28[7] = a4;
  uint64_t v48 = a4;
  v28[8] = v29;
  uint64_t v33 = v19;
  uint64_t v34 = v29;
  uint64_t v35 = (char *)v28 + v27;
  uint64_t v36 = *(void (**)(char *))(v16 + 32);
  int64_t v37 = v33;
  v36(v35);
  swift_retain(v32);
  swift_retain(a4);
  swift_retain(v34);
  uint64_t v38 = sub_10015AA50((uint64_t)v23, (uint64_t)&unk_1003FAB68, v30);
  uint64_t v39 = *(void *)(v58 + 16);
  *(void *)(v58 + swift_weakDestroy(v0 + 16) = v38;
  swift_retain(v38);
  swift_release(v39);
  v52(v23, 1LL, 1LL, v53);
  v51(v37, v50, v15);
  uint64_t v40 = (v26 + 80) & ~v26;
  int64_t v41 = (void *)swift_allocObject(&unk_1003A78C8, v40 + v17, v49);
  _OWORD v41[2] = 0LL;
  v41[3] = 0LL;
  uint64_t v42 = v54;
  v41[4] = v60;
  v41[5] = v42;
  v41[6] = v59;
  v41[7] = v38;
  uint64_t v43 = v48;
  v41[8] = v48;
  void v41[9] = v34;
  ((void (*)(char *, char *, uint64_t))v36)((char *)v41 + v40, v37, v15);
  swift_retain(v43);
  swift_retain(v34);
  uint64_t v44 = sub_1001669DC((uint64_t)v23, (uint64_t)&unk_1003FAB78, (uint64_t)v41);
  uint64_t v45 = *(void *)(v55 + 16);
  *(void *)(v55 + swift_weakDestroy(v0 + 16) = v44;
  return swift_release(v45);
}

uint64_t sub_100206850( uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[4] = a8;
  v8[5] = v22;
  v8[2] = a6;
  v8[3] = a7;
  uint64_t v10 = sub_100160358(&qword_1003F86D0);
  uint64_t v11 = ((uint64_t (*)(void, uint64_t, void *))type metadata accessor for CheckedContinuation)( 0LL,  v10,  &protocol self-conformance witness table for Error);
  v8[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[7] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v8[8] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[9] = swift_task_alloc(v14);
  v8[10] = swift_task_alloc(v14);
  uint64_t v15 = *(void *)(v22 - 8);
  v8[11] = v15;
  uint64_t v16 = *(void *)(v15 + 64);
  v8[12] = v16;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[13] = swift_task_alloc(v17);
  uint64_t v18 = swift_task_alloc(v17);
  v8[14] = v18;
  uint64_t v21 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v19 = (void *)swift_task_alloc(a4[1]);
  v8[15] = v19;
  *uint64_t v19 = v8;
  v19[1] = sub_100206954;
  return v21(v18);
}

uint64_t sub_100206954()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100206B8C;
  }
  else {
    uint64_t v3 = sub_1002069B8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002069B8()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v24 = *(void *)(v0 + 24);
  int64_t v25 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v26 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 16))(v5, *(void *)(v0 + 32), v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = (v6 + v12 + v11) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1003A7940, v13 + v3, v10 | v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v14 + v11, v5, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v14 + v13, v2, v9);
  uint64_t v15 = (void *)swift_task_alloc(48LL);
  v15[2] = v24;
  v15[3] = sub_100207CA8;
  v15[4] = v14;
  uint64_t v16 = swift_task_alloc(32LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = sub_100207A4C;
  *(void *)(v16 + 24) = v15;
  os_unfair_lock_lock(v25 + 4);
  (*(void (**)(void))(v16 + 16))();
  os_unfair_lock_unlock(v25 + 4);
  if (v26) {
    return swift_task_dealloc(v16);
  }
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v19 = *(void *)(v0 + 88);
  uint64_t v20 = *(void *)(v0 + 40);
  swift_release(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100206B8C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v18 = *(os_unfair_lock_s **)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 16))(v3, *(void *)(v0 + 32), v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  unint64_t v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_1003A7918, v10 + 8, v8 | 7);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v9, v3, v4);
  *(void *)(v11 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v1;
  uint64_t v12 = (void *)swift_task_alloc(48LL);
  v12[2] = v7;
  v12[3] = sub_100207B38;
  v12[4] = v11;
  uint64_t v13 = swift_task_alloc(32LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100207A4C;
  *(void *)(v13 + 24) = v12;
  swift_errorRetain(v1);
  os_unfair_lock_lock(v18 + 4);
  (*(void (**)(void))(v13 + 16))();
  os_unfair_lock_unlock(v18 + 4);
  swift_errorRelease(*(void *)(v0 + 128));
  swift_release(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100206D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v6 + 16))(v5);
  uint64_t v7 = sub_100160358(&qword_1003F86D0);
  uint64_t v8 = type metadata accessor for CheckedContinuation(0LL, a3, v7, &protocol self-conformance witness table for Error);
  return CheckedContinuation.resume(returning:)(v5, v8);
}

uint64_t sub_100206DA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v16;
  v8[8] = v17;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = sub_100160358(&qword_1003F86D0);
  uint64_t v10 = ((uint64_t (*)(void, uint64_t, void *))type metadata accessor for CheckedContinuation)( 0LL,  v9,  &protocol self-conformance witness table for Error);
  v8[9] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[10] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v8[11] = v12;
  v8[12] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ContinuousClock(0LL);
  v8[13] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[14] = v14;
  v8[15] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100206E60, 0LL, 0LL);
}

uint64_t sub_100206E60(uint64_t a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003FAB80 + dword_1003FAB80);
  uint64_t v2 = (void *)swift_task_alloc(unk_1003FAB84);
  v1[16] = v2;
  void *v2 = v1;
  v2[1] = sub_100206ED8;
  return v4(v1[2], v1[3], 0LL, 0LL, 1);
}

uint64_t sub_100206ED8()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0) {
    uint64_t v6 = sub_1002070E4;
  }
  else {
    uint64_t v6 = sub_100206F58;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100206F58()
{
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  Task.cancel()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1003A78F0, v10 + v2, v9 | 7);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v10, v1, v3);
  uint64_t v12 = (void *)swift_task_alloc(48LL);
  v12[2] = v8;
  v12[3] = sub_100207998;
  v12[4] = v11;
  uint64_t v13 = swift_task_alloc(32LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100207A4C;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = v7 + 4;
  os_unfair_lock_lock(v7 + 4);
  (*(void (**)(void))(v13 + 16))();
  if (v18)
  {
    os_unfair_lock_unlock(v14);
    return swift_task_dealloc(v13);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 96);
    os_unfair_lock_unlock(v14);
    swift_release(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002070E4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100207124()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    swift_retain(*(void *)(v1 + 16));
    Task.cancel()();
    uint64_t result = swift_release(v3);
  }

  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    swift_retain(*(void *)(v2 + 16));
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    return swift_release(v5);
  }

  return result;
}

unint64_t sub_1002071CC()
{
  unint64_t result = qword_1003FAB50;
  if (!qword_1003FAB50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_1003FAB50);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TimeoutError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100207250 + 4 * asc_10034DD80[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100207270 + 4 * byte_10034DD85[v4]))();
  }
}

_BYTE *sub_100207250(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100207270(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100207278(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100207280(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100207288(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100207290(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_1002072AC(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100173DC8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Reference);
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_1003FAB58)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1003A7878);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, &qword_1003FAB58);
    }
  }

uint64_t sub_10020737C(uint64_t a1)
{
  return sub_10020659C(a1, v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[2]);
}

uint64_t sub_1002073B0()
{
  uint64_t v1 = *((void *)v0 + 4);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 72) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 6));
  swift_release(*((void *)v0 + 7));
  swift_release(*((void *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v6], v3);
  return swift_deallocObject(v0, v7, v8);
}

uint64_t sub_10020745C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = sub_100160358(&qword_1003F86D0);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CheckedContinuation( 0LL,  v2,  v3,  &protocol self-conformance witness table for Error)
                                      - 8)
                          + 80LL);
  uint64_t v5 = (int *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (uint64_t)v0 + ((v4 + 72) & ~v4);
  uint64_t v10 = (void *)swift_task_alloc(dword_1003FAB64);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_10015FD10;
  return sub_100206850((uint64_t)v10, v11, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_10020750C()
{
  uint64_t v1 = *((void *)v0 + 4);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 80) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 7));
  swift_release(*((void *)v0 + 8));
  swift_release(*((void *)v0 + 9));
  (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v6], v3);
  return swift_deallocObject(v0, v7, v8);
}

uint64_t sub_1002075B8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = sub_100160358(&qword_1003F86D0);
  type metadata accessor for CheckedContinuation(0LL, v2, v3, &protocol self-conformance witness table for Error);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = (void *)swift_task_alloc(dword_1003FAB74);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100160A04;
  return sub_100206DA8((uint64_t)v9, v10, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_100207674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100207718, 0LL, 0LL);
}

uint64_t sub_100207718()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = sub_100156FEC( &qword_1003FAB90,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = sub_100156FEC( &qword_1003FAB98,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100207830;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100207830()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(sub_1002078DC, 0LL, 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1002078DC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100207918()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  return swift_deallocObject(v0, v7, v8);
}

uint64_t sub_100207998()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  unint64_t v3 = sub_100207A60();
  uint64_t v7 = swift_allocError(&type metadata for TimeoutError, v3, 0LL, 0LL);
  uint64_t v4 = sub_100160358(&qword_1003F86D0);
  uint64_t v5 = type metadata accessor for CheckedContinuation(0LL, v1, v4, &protocol self-conformance witness table for Error);
  return CheckedContinuation.resume(throwing:)(&v7, v5);
}

uint64_t sub_100207A4C()
{
  return sub_100207D1C();
}

unint64_t sub_100207A60()
{
  unint64_t result = qword_1003FAB88;
  if (!qword_1003FAB88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_1003FAB88);
  }

  return result;
}

uint64_t sub_100207AA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v5 | 7;
  unint64_t v8 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  swift_errorRelease(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v7);
}

uint64_t sub_100207B38()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = *(void *)(type metadata accessor for CheckedContinuation( 0LL,  v1,  v2,  &protocol self-conformance witness table for Error)
                 - 8);
  uint64_t v7 = *(void *)(v0
                 + ((*(void *)(v3 + 64)
  swift_errorRetain(v7);
  uint64_t v4 = sub_100160358(&qword_1003F86D0);
  uint64_t v5 = type metadata accessor for CheckedContinuation(0LL, v1, v4, &protocol self-conformance witness table for Error);
  return CheckedContinuation.resume(throwing:)(&v7, v5);
}

uint64_t sub_100207BF4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = *(void *)(v1 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v6 + *(void *)(v4 + 64) + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v5 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100207CA8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100160358(&qword_1003F86D0);
  uint64_t v3 = *(void *)(type metadata accessor for CheckedContinuation( 0LL,  v1,  v2,  &protocol self-conformance witness table for Error)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  return sub_100206D14(v0 + v4, v0 + ((v4 + *(void *)(v3 + 64) + v5) & ~v5), v1);
}

uint64_t sub_100207D1C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 24);
    *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = 1;
    return v2();
  }

  return result;
}

uint64_t (*sub_100207D5C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100207DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  if ((a1 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_10015CAD4(a2, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v13 = *v3;
      uint64_t v16 = *v4;
      *unint64_t v4 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002112A0();
        uint64_t v13 = v16;
      }

      swift_bridgeObjectRelease();
      sub_100210E1C(v9, v13);
      *unint64_t v4 = v13;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    float v7 = *(float *)&a1;
    char v8 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100210FF0(a2, a3, v8, v7);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100207EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100211144(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_10015CAD4(a2, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      char v12 = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v13 = *v3;
      uint64_t v17 = *v4;
      *unint64_t v4 = 0x8000000000000000LL;
      if ((v12 & 1) == 0)
      {
        sub_10021144C();
        uint64_t v13 = v17;
      }

      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 8 * v9);
      sub_1001B1630(v9, v13);
      *unint64_t v4 = v13;
      swift_release(v14);
      swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10020802C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v6);
  char v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v26[0] = 0LL;
  v26[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(49LL);
  swift_bridgeObjectRelease();
  uint64_t v27 = 60LL;
  unint64_t v28 = 0xE100000000000000LL;
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x746E656469202D20LL;
  v10._object = (void *)0xEF203A7265696669LL;
  String.append(_:)(v10);
  uint64_t v11 = v0[2];
  char v12 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x3A736D657469202CLL;
  v14._object = (void *)0xE900000000000020LL;
  String.append(_:)(v14);
  swift_beginAccess(v0 + 4, v26, 0LL, 0LL);
  uint64_t v15 = swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = Set.description.getter(v15, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x616C50776F6E202CLL;
  v17._object = (void *)0xEE00203A676E6979LL;
  String.append(_:)(v17);
  uint64_t v18 = (uint64_t)v0
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  swift_beginAccess(v18, v25, 0LL, 0LL);
  sub_1001A8360(v18, (uint64_t)v8, &qword_1003F9450);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2))
  {
    sub_1001603DC((uint64_t)v8, &qword_1003F9450);
    uint64_t v19 = (void *)0xE300000000000000LL;
    uint64_t v20 = 7104878LL;
  }

  else
  {
    sub_1001A80F8((uint64_t)v8, (uint64_t)v5, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    sub_1001603DC((uint64_t)v8, &qword_1003F9450);
    uint64_t v20 = sub_10024FCC8();
    uint64_t v19 = v21;
    sub_1001A813C((uint64_t)v5, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  v22._uint64_t countAndFlagsBits = v20;
  v22._object = v19;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 15913LL;
  v23._object = (void *)0xE200000000000000LL;
  String.append(_:)(v23);
  return v27;
}

uint64_t sub_1002082D4(uint64_t a1)
{
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a1, 0LL);
  object = v1._object;
  String.append(_:)(v1);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_100208300(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7 = a2(0LL);
  uint64_t v8 = sub_100156FEC(a3, a2, a4);
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100208374()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1002083C4()
{
  return sub_10020802C();
}

uint64_t sub_1002083E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v891 = a7;
  v914 = a5;
  uint64_t v919 = a3;
  uint64_t v957 = a2;
  uint64_t v10 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v10);
  uint64_t v943 = (uint64_t)&v824 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v925 = type metadata accessor for RoutingControls(0LL);
  uint64_t v924 = *(void *)(v925 - 8);
  __chkstk_darwin(v925);
  v942 = (char *)&v824 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v923 = type metadata accessor for Date(0LL);
  uint64_t v922 = *(void *)(v923 - 8);
  uint64_t v13 = __chkstk_darwin(v923);
  v940 = (char *)&v824 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v921 = (char *)&v824 - v15;
  uint64_t v16 = sub_100156B68(&qword_1003F8918);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v824 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v946 = (uint64_t)&v824 - v21;
  __chkstk_darwin(v20);
  Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))((char *)&v824 - v22);
  uint64_t v959 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v958 = *(void *)(v959 - 8);
  uint64_t v24 = __chkstk_darwin(v959);
  uint64_t v949 = (uint64_t)&v824 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v944 = (uint64_t)&v824 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v956 = (uint64_t (**)(uint64_t *, unint64_t))((char *)&v824 - v29);
  __chkstk_darwin(v28);
  v945 = (uint64_t *)((char *)&v824 - v30);
  uint64_t v31 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v868 = *(void *)(v31 - 8);
  uint64_t v869 = v31;
  __chkstk_darwin(v31);
  v867 = (char *)&v824 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v885 = type metadata accessor for RoutingControl.RoutingControlType(0LL);
  uint64_t v887 = *(void *)(v885 - 8);
  __chkstk_darwin(v885);
  uint64_t v34 = (char *)&v824 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v892 = type metadata accessor for RoutingControl.Target(0LL);
  uint64_t v886 = *(void *)(v892 - 8);
  uint64_t v35 = __chkstk_darwin(v892);
  v860 = (char *)&v824 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v35);
  v882 = (uint64_t *)((char *)&v824 - v38);
  uint64_t v39 = __chkstk_darwin(v37);
  v878 = (uint64_t *)((char *)&v824 - v40);
  __chkstk_darwin(v39);
  v884 = (char *)&v824 - v41;
  uint64_t v894 = type metadata accessor for RoutingControl(0LL);
  uint64_t v893 = *(void *)(v894 - 8);
  __chkstk_darwin(v894);
  v896 = (char *)&v824 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v928 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v927 = *(void *)(v928 - 8);
  uint64_t v43 = __chkstk_darwin(v928);
  uint64_t v909 = (uint64_t)&v824 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v43);
  v862 = (uint64_t *)((char *)&v824 - v46);
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v866 = (uint64_t)&v824 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v870 = (uint64_t *)((char *)&v824 - v50);
  __chkstk_darwin(v49);
  uint64_t v881 = (uint64_t)&v824 - v51;
  uint64_t v890 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v889 = *(void *)(v890 - 8);
  __chkstk_darwin(v890);
  v888 = (char *)&v824 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v918 = type metadata accessor for Logger(0LL);
  uint64_t v917 = *(void *)(v918 - 8);
  uint64_t v53 = __chkstk_darwin(v918);
  v901 = (char *)&v824 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = __chkstk_darwin(v53);
  v874 = (char *)&v824 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v873 = (char *)&v824 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v879 = (char *)&v824 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v872 = (char *)&v824 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v865 = (char *)&v824 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v880 = (char *)&v824 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v897 = (char *)&v824 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v899 = (char *)&v824 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v902 = (char *)&v824 - v72;
  __chkstk_darwin(v71);
  v906 = (char *)&v824 - v73;
  uint64_t v74 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  uint64_t v75 = __chkstk_darwin(v74);
  uint64_t v863 = (uint64_t)&v824 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = __chkstk_darwin(v75);
  uint64_t v883 = (uint64_t)&v824 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  uint64_t v898 = (uint64_t)&v824 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v900 = (uint64_t)&v824 - v82;
  __chkstk_darwin(v81);
  uint64_t v904 = (uint64_t)&v824 - v83;
  uint64_t v913 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v912 = *(void *)(v913 - 8);
  __chkstk_darwin(v913);
  v911 = (char *)&v824 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v931 = type metadata accessor for RoutingInteraction.Action(0LL);
  v930 = *(uint64_t (***)(uint64_t *, unint64_t))(v931 - 8);
  uint64_t v85 = __chkstk_darwin(v931);
  v859 = (char *)&v824 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v85);
  *(void *)&__int128 v915 = (char *)&v824 - v87;
  uint64_t v88 = sub_100156B68(&qword_1003F9450);
  uint64_t v89 = __chkstk_darwin(v88);
  uint64_t v939 = (uint64_t)&v824 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = __chkstk_darwin(v89);
  v926 = (char *)&v824 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  uint64_t v932 = (uint64_t)&v824 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  uint64_t v864 = (uint64_t)&v824 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  uint64_t v871 = (uint64_t)&v824 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  uint64_t v861 = (uint64_t)&v824 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  uint64_t v875 = (uint64_t)&v824 - v102;
  __chkstk_darwin(v101);
  uint64_t v934 = (uint64_t)&v824 - v103;
  uint64_t v933 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v936 = *(void *)(v933 - 8);
  uint64_t v104 = __chkstk_darwin(v933);
  v938 = (uint64_t *)((char *)&v824 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v106 = __chkstk_darwin(v104);
  uint64_t v920 = (uint64_t)&v824 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v941 = (uint64_t *)((char *)&v824 - v109);
  uint64_t v110 = __chkstk_darwin(v108);
  uint64_t v112 = (uint64_t)&v824 - v111;
  uint64_t v113 = __chkstk_darwin(v110);
  uint64_t v115 = (uint64_t)&v824 - v114;
  uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 112LL))(v113);
  uint64_t v117 = swift_bridgeObjectRetain();
  LOBYTE(a6) = sub_100210360(v117);
  swift_bridgeObjectRelease();
  if ((a6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }

  v937 = (void *)v116;
  uint64_t v916 = a4;
  v973 = &_swiftEmptyDictionarySingleton;
  uint64_t v118 = a1[2];
  v950 = v19;
  v929 = a1;
  uint64_t v947 = (uint64_t)v23;
  v954 = (uint64_t *)v112;
  uint64_t v935 = v118;
  uint64_t v119 = (unsigned int *)v34;
  v910 = (unsigned int *)v34;
  if (v118)
  {
    uint64_t v955 = v115 + *(int *)(v933 + 28);
    uint64_t v120 = (uint64_t)a1 + ((*(unsigned __int8 *)(v936 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v936 + 80));
    uint64_t v953 = *(void *)(v936 + 72);
    swift_bridgeObjectRetain();
    a4 = v935;
    uint64_t v121 = v934;
    do
    {
      sub_1001A80F8(v120, v115, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v122 = *(void *)v115;
      uint64_t v116 = *(void *)(v115 + 8);
      uint64_t v112 = *(void *)(v115 + 32);
      sub_1001A8360(v955, v121, &qword_1003F9450);
      swift_bridgeObjectRetain_n(v116, 2LL);
      swift_bridgeObjectRetain();
      sub_1001A813C(v115, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v123 = type metadata accessor for RoutingOptimisticEngine.ItemSet(0LL);
      uint64_t v124 = swift_allocObject(v123, *(unsigned int *)(v123 + 48), *(unsigned __int16 *)(v123 + 52));
      sub_100211600(v122, v116, v112, v121);
      swift_bridgeObjectRelease();
      sub_100207EE4(v124, v122, v116);
      v120 += v953;
      --a4;
    }

    while (a4);
    a1 = v929;
    swift_bridgeObjectRelease();
    Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
    uint64_t v119 = v910;
  }

  v972 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  unint64_t v125 = (unint64_t)v937;
  uint64_t v126 = sub_100210400((uint64_t)v937);
  if (v126)
  {
    uint64_t v116 = v126;
    uint64_t v955 = 0LL;
    int v908 = enum case for RoutingInteraction.Action.add(_:);
    int v905 = enum case for RoutingInteraction.Action.remove(_:);
    int v858 = enum case for RoutingInteraction.Action.set(_:);
    int v857 = enum case for RoutingInteraction.Action.setActiveSession(_:);
    int v853 = enum case for RoutingInteraction.Action.setActiveItem(_:);
    int v848 = enum case for RoutingInteraction.Action.control(_:);
    int v849 = enum case for RoutingInteraction.Action.handoff(_:);
    int v847 = enum case for RoutingControl.Target.session(_:);
    int v836 = enum case for RoutingControl.Target.item(_:);
    __int128 v895 = xmmword_10034C930;
    __int128 v856 = xmmword_10034C4D0;
    __int128 v850 = xmmword_10034DEB0;
    int v846 = enum case for RoutingControl.RoutingControlType.absoluteVolume(_:);
    int v834 = enum case for RoutingControl.RoutingControlType.pause(_:);
    int v835 = enum case for RoutingControl.RoutingControlType.play(_:);
    unsigned int v832 = enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.paused(_:);
    unsigned int v833 = enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:);
    v951 = (void *)(v125 & 0xC000000000000001LL);
    uint64_t v127 = 4LL;
    v855 = (char *)&type metadata for Any + 8;
    uint64_t v903 = v126;
    int v128 = v119;
    while (1)
    {
      uint64_t v129 = v127 - 4;
      uint64_t v953 = v127;
      if (v951)
      {
        uint64_t v115 = specialized _ArrayBuffer._getElementSlowPath(_:)(v127 - 4, v125);
        uint64_t v130 = v129 + 1;
        if (__OFADD__(v129, 1LL)) {
          goto LABEL_354;
        }
      }

      else
      {
        uint64_t v115 = *(void *)(v125 + 8 * v127);
        swift_retain(v115);
        uint64_t v130 = v129 + 1;
        if (__OFADD__(v129, 1LL)) {
          goto LABEL_354;
        }
      }

      uint64_t v952 = v130;
      a4 = *(void *)(*(void *)v115 + 128LL);
      unint64_t v131 = ((uint64_t (*)(void))a4)();
      if (v131 != 2) {
        break;
      }
      swift_release(v115);
LABEL_116:
      uint64_t v411 = v952;
LABEL_117:
      uint64_t v127 = v953 + 1;
      if (v411 == v116) {
        goto LABEL_250;
      }
    }

    unint64_t v135 = sub_1001A70C8(v131, v132, v133, v134);
    unint64_t v136 = ((uint64_t (*)(unint64_t))a4)(v135);
    uint64_t v140 = v137;
    a4 = v138;
    unsigned __int8 v141 = v139;
    if (v136 >= 3)
    {
      swift_errorRelease(v136);
      sub_100156BA8(v140, a4, v141);
      os_log_t v161 = (os_log_t)v115;
LABEL_25:
      swift_release(v161);
      unint64_t v125 = (unint64_t)v937;
      goto LABEL_116;
    }

    unint64_t v142 = sub_1001A70C8(v136, v137, v138, v139);
    a4 = *(void *)(*(void *)v115 + 168LL);
    Swift::String v143 = (uint64_t *)v915;
    ((void (*)(unint64_t))a4)(v142);
    uint64_t v144 = v143;
    Swift::String v23 = v930;
    Swift::String v145 = v143;
    unint64_t v125 = v931;
    int v146 = v930[11](v145, v931);
    uint64_t v948 = v115;
    if (v146 == v908)
    {
      uint64_t v147 = v23[12](v144, v125);
      uint64_t v148 = *v144;
      unint64_t v125 = v144[1];
      uint64_t v149 = v144[2];
      a4 = v144[3];
      uint64_t v115 = (uint64_t)v911;
      RoutingSessionConfiguration.context.getter(v147);
      char v150 = sub_100255494();
      (*(void (**)(uint64_t, uint64_t))(v912 + 8))(v115, v913);
      if ((v150 & 1) != 0
        || (v151 = sub_10024B258(), uint64_t v152 = *((void *)v151 + 1), v149 == *(void *)v151) && a4 == v152
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v149, a4, *(void *)v151, v152, 0LL) & 1) != 0)
      {
        uint64_t v153 = (uint64_t)v973;
        uint64_t v154 = (uint64_t (**)(uint64_t *, unint64_t))sub_1002103C0(v149, a4, (uint64_t)v973);
        swift_bridgeObjectRelease();
        if (!v154)
        {
          swift_bridgeObjectRelease();
          uint64_t v182 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v906, v182, v918);
          uint64_t v183 = swift_allocObject(&unk_1003A9570, 24LL, 7LL);
          *(void *)(v183 + swift_weakDestroy(v0 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A9598, 32LL, 7LL);
          *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
          uint64_t v184 = v948;
          *(void *)(a4 + 24) = v948;
          uint64_t v185 = swift_retain(v184);
          os_log_t v877 = (os_log_t)Logger.logObject.getter(v185);
          LODWORD(v876) = static os_log_type_t.error.getter();
          uint64_t v112 = swift_allocObject(&unk_1003A95C0, 17LL, 7LL);
          *(_BYTE *)(v112 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v186 = swift_allocObject(&unk_1003A95E8, 17LL, 7LL);
          uint64_t v115 = 8LL;
          *(_BYTE *)(v186 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v187 = swift_allocObject(&unk_1003A9610, 32LL, 7LL);
          *(void *)(v187 + swift_weakDestroy(v0 + 16) = sub_1002127EC;
          *(void *)(v187 + 24) = v183;
          uint64_t v188 = swift_allocObject(&unk_1003A9638, 32LL, 7LL);
          *(void *)(v188 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
          *(void *)(v188 + 24) = v187;
          uint64_t v116 = swift_allocObject(&unk_1003A9660, 32LL, 7LL);
          *(void *)(v116 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v116 + 24) = v188;
          uint64_t v189 = swift_allocObject(&unk_1003A9688, 17LL, 7LL);
          *(_BYTE *)(v189 + swift_weakDestroy(v0 + 16) = 32;
          Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A96B0, 17LL, 7LL);
          *((_BYTE *)v23 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v190 = swift_allocObject(&unk_1003A96D8, 32LL, 7LL);
          *(void *)(v190 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
          *(void *)(v190 + 24) = a4;
          unint64_t v125 = swift_allocObject(&unk_1003A9700, 32LL, 7LL);
          *(void *)(v125 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v125 + 24) = v190;
          uint64_t v191 = sub_100156B68(&qword_1003FABA0);
          uint64_t v192 = swift_allocObject(v191, 128LL, 7LL);
          *(_OWORD *)(v192 + swift_weakDestroy(v0 + 16) = v895;
          *(void *)(v192 + 32) = sub_100212DA8;
          *(void *)(v192 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
          *(void *)(v192 + 48) = sub_100212DA8;
          *(void *)(v192 + 56) = v186;
          *(void *)(v192 + 64) = sub_100212BDC;
          *(void *)(v192 + 72) = v116;
          *(void *)(v192 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
          *(void *)(v192 + 88) = v189;
          *(void *)(v192 + 96) = sub_100212DA8;
          *(void *)(v192 + 104) = v23;
          *(void *)(v192 + 112) = sub_100212BDC;
          *(void *)(v192 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v125;
          swift_retain(v112);
          swift_retain(v186);
          swift_retain(v116);
          swift_retain(v189);
          swift_retain(v23);
          swift_retain(v125);
          os_log_t v193 = v877;
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v193, (os_log_type_t)v876))
          {
            swift_release(v948);
            swift_release(v112);
            swift_release(v186);
            swift_release(v116);
            swift_release(v189);
            swift_release(v23);
            swift_release(v125);

            (*(void (**)(char *, uint64_t))(v917 + 8))(v906, v918);
            goto LABEL_113;
          }

          a4 = swift_slowAlloc(22LL, -1LL);
          uint64_t v194 = swift_slowAlloc(64LL, -1LL);
          uint64_t v970 = 0LL;
          v968[0] = v194;
          *(_WORD *)a4 = 514;
          *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
          uint64_t v115 = v955;
          if (v955) {
            goto LABEL_360;
          }
          uint64_t v195 = v194;
          swift_release(v112);
          *(_BYTE *)(a4 + 3) = *(_BYTE *)(v186 + 16);
          v963 = (_BYTE *)(a4 + 4);
          swift_release(v186);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
          swift_release(v116);
          uint64_t v196 = v963;
          _BYTE *v963 = *(_BYTE *)(v189 + 16);
          swift_release(v189);
          v196[1] = *((_BYTE *)v23 + 16);
          v963 = v196 + 2;
          uint64_t v116 = v903;
          swift_release(v23);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
          a1 = v929;
          int v128 = v910;
          swift_release(v125);
          uint64_t v115 = (uint64_t)v877;
          _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v876,  "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.",  (uint8_t *)a4,  0x16u);
          swift_arrayDestroy(v195, 2LL, v855);
          swift_slowDealloc(v195, -1LL, -1LL);
          swift_slowDealloc(a4, -1LL, -1LL);

          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v906, v918);
          goto LABEL_98;
        }

        sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
        id v155 = sub_1002A8918();
        NSString v156 = String._bridgeToObjectiveC()();
        uint64_t v112 = (uint64_t)[v155 matchesUID:v156];

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v157 = v955;
        uint64_t v158 = sub_100211E80(v153, v148, v125);
        a4 = v157;
        swift_bridgeObjectRelease();
        if (sub_100210400(v158) >= 2 && (v112 & 1) == 0)
        {
          uint64_t v159 = sub_100174330();
          uint64_t v160 = v904;
          sub_1001A8360(v159, v904, (uint64_t *)&unk_1003FBBE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v917 + 48))(v160, 1LL, v918) == 1)
          {
            sub_1001603DC(v160, (uint64_t *)&unk_1003FBBE0);
          }

          else
          {
            v839 = (void *)v148;
            v840 = v154;
            uint64_t v844 = v157;
            LODWORD(v845) = v112;
            uint64_t v216 = swift_allocObject(&unk_1003A9728, 24LL, 7LL);
            *(void *)(v216 + swift_weakDestroy(v0 + 16) = v907;
            uint64_t v217 = swift_allocObject(&unk_1003A9750, 32LL, 7LL);
            uint64_t v218 = v948;
            *(void *)(v217 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
            *(void *)(v217 + 24) = v218;
            uint64_t v219 = swift_allocObject(&unk_1003A9778, 24LL, 7LL);
            *(void *)(v219 + swift_weakDestroy(v0 + 16) = v158;
            uint64_t v220 = swift_allocObject(&unk_1003A97A0, 32LL, 7LL);
            uint64_t v843 = v220;
            *(void *)(v220 + swift_weakDestroy(v0 + 16) = sub_100212DA4;
            *(void *)(v220 + 24) = v219;
            swift_retain(v218);
            uint64_t v842 = v158;
            uint64_t v221 = swift_bridgeObjectRetain();
            os_log_t v852 = (os_log_t)Logger.logObject.getter(v221);
            LODWORD(v85sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = static os_log_type_t.info.getter();
            v876 = (uint8_t *)swift_allocObject(&unk_1003A97C8, 17LL, 7LL);
            v876[16] = 32;
            uint64_t v854 = swift_allocObject(&unk_1003A97F0, 17LL, 7LL);
            *(_BYTE *)(v854 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v222 = swift_allocObject(&unk_1003A9818, 32LL, 7LL);
            *(void *)(v222 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
            *(void *)(v222 + 24) = v216;
            uint64_t v223 = swift_allocObject(&unk_1003A9840, 32LL, 7LL);
            *(void *)(v223 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
            *(void *)(v223 + 24) = v222;
            uint64_t v224 = swift_allocObject(&unk_1003A9868, 32LL, 7LL);
            *(void *)(v224 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v224 + 24) = v223;
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A9890, 17LL, 7LL);
            *((_BYTE *)v23 + swift_weakDestroy(v0 + 16) = 32;
            os_log_t v877 = (os_log_t)swift_allocObject(&unk_1003A98B8, 17LL, 7LL);
            *((_BYTE *)v877 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v225 = swift_allocObject(&unk_1003A98E0, 32LL, 7LL);
            *(void *)(v225 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
            *(void *)(v225 + 24) = v217;
            uint64_t v226 = swift_allocObject(&unk_1003A9908, 32LL, 7LL);
            *(void *)(v226 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v226 + 24) = v225;
            uint64_t v227 = swift_allocObject(&unk_1003A9930, 17LL, 7LL);
            *(_BYTE *)(v227 + swift_weakDestroy(v0 + 16) = 32;
            uint64_t v228 = v227;
            uint64_t v955 = swift_allocObject(&unk_1003A9958, 17LL, 7LL);
            *(_BYTE *)(v955 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v229 = swift_allocObject(&unk_1003A9980, 32LL, 7LL);
            uint64_t v230 = v843;
            *(void *)(v229 + swift_weakDestroy(v0 + 16) = sub_100212BD8;
            *(void *)(v229 + 24) = v230;
            uint64_t v231 = swift_allocObject(&unk_1003A99A8, 32LL, 7LL);
            *(void *)(v231 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v231 + 24) = v229;
            uint64_t v232 = sub_100156B68(&qword_1003FABA0);
            uint64_t v233 = swift_allocObject(v232, 176LL, 7LL);
            *(_OWORD *)(v233 + swift_weakDestroy(v0 + 16) = v856;
            *(void *)(v233 + 32) = sub_100212DA8;
            v234 = v876;
            os_log_t v235 = v877;
            *(void *)(v233 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v876;
            *(void *)(v233 + 48) = sub_100212DA8;
            uint64_t v236 = v854;
            *(void *)(v233 + 56) = v854;
            *(void *)(v233 + 64) = sub_100212BDC;
            *(void *)(v233 + 72) = v224;
            *(void *)(v233 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
            *(void *)(v233 + 88) = v23;
            *(void *)(v233 + 96) = sub_100212DA8;
            *(void *)(v233 + 104) = v235;
            *(void *)(v233 + 112) = sub_100212BDC;
            *(void *)(v233 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v226;
            *(void *)(v233 + 128) = sub_100212DA8;
            *(void *)(v233 + 136) = v228;
            *(void *)(v233 + 144) = sub_100212DA8;
            *(void *)(v233 + 152) = v955;
            *(void *)(v233 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212BDC;
            *(void *)(v233 + 168) = v231;
            swift_retain(v234);
            swift_retain(v236);
            uint64_t v837 = v224;
            swift_retain(v224);
            v838 = (uint64_t (**)(void))v23;
            swift_retain(v23);
            swift_retain(v235);
            uint64_t v841 = v226;
            swift_retain(v226);
            uint64_t v843 = v228;
            swift_retain(v228);
            swift_retain(v955);
            swift_retain(v231);
            swift_bridgeObjectRelease();
            os_log_t v237 = v852;
            if (os_log_type_enabled(v852, (os_log_type_t)v851))
            {
              uint64_t v112 = v854;
              uint64_t v831 = v231;
              uint64_t v238 = v837;
              uint64_t v116 = (uint64_t)v838;
              uint64_t v239 = swift_slowAlloc(32LL, -1LL);
              uint64_t v240 = swift_slowAlloc(96LL, -1LL);
              uint64_t v970 = 0LL;
              uint64_t v830 = v240;
              v968[0] = v240;
              *(_WORD *)uint64_t v239 = 770;
              v241 = v876;
              *(_BYTE *)(v239 + 2) = v876[16];
              a4 = v844;
              if (v844) {
                goto LABEL_361;
              }
              swift_release(v241);
              *(_BYTE *)(v239 + 3) = *(_BYTE *)(v112 + 16);
              v963 = (_BYTE *)(v239 + 4);
              uint64_t v158 = v842;
              uint64_t v148 = (uint64_t)v839;
              uint64_t v154 = v840;
              uint64_t v242 = v112;
              unint64_t v243 = (uint8_t *)v239;
              swift_release(v242);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v238 + 16));
              swift_release(v238);
              uint64_t v244 = v963;
              _BYTE *v963 = *(_BYTE *)(v116 + 16);
              swift_release(v116);
              os_log_t v245 = v877;
              v244[1] = *((_BYTE *)v877 + 16);
              v963 = v244 + 2;
              uint64_t v246 = v831;
              swift_release(v245);
              uint64_t v247 = v841;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v841 + 16));
              swift_release(v247);
              uint64_t v248 = v843;
              uint64_t v249 = v963;
              _BYTE *v963 = *(_BYTE *)(v843 + 16);
              swift_release(v248);
              uint64_t v250 = v955;
              v249[1] = *(_BYTE *)(v955 + 16);
              v963 = v249 + 2;
              swift_release(v250);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v246 + 16));
              uint64_t v251 = v904;
              swift_release(v246);
              os_log_t v252 = v852;
              _os_log_impl( (void *)&_mh_execute_header,  v852,  (os_log_type_t)v851,  "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s. Continuing.",  v243,  0x20u);
              uint64_t v253 = v830;
              swift_arrayDestroy(v830, 3LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v253, -1LL, -1LL);
              swift_slowDealloc(v243, -1LL, -1LL);
            }

            else
            {

              swift_release(v876);
              swift_release(v854);
              swift_release(v837);
              swift_release(v838);
              swift_release(v877);
              swift_release(v841);
              swift_release(v843);
              swift_release(v955);
              swift_release(v231);
              uint64_t v251 = v904;
              a4 = v844;
              uint64_t v158 = v842;
              uint64_t v148 = (uint64_t)v839;
              uint64_t v154 = v840;
            }

            (*(void (**)(uint64_t, uint64_t))(v917 + 8))(v251, v918);
            uint64_t v116 = v903;
            uint64_t v112 = v845;
          }
        }

        swift_bridgeObjectRetain();
        uint64_t v115 = a4;
        sub_100211CEC(v158, v112, v148, v125);
        uint64_t v955 = a4;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess(v154 + 4, &v963, 33LL, 0LL);
        goto LABEL_76;
      }

      goto LABEL_53;
    }

    if (v146 == v905)
    {
      uint64_t v162 = v23[12](v144, v125);
      uint64_t v163 = *v144;
      a4 = v144[1];
      uint64_t v164 = v144[2];
      uint64_t v165 = v144[3];
      uint64_t v115 = (uint64_t)v911;
      RoutingSessionConfiguration.context.getter(v162);
      char v166 = sub_100255494();
      (*(void (**)(uint64_t, uint64_t))(v912 + 8))(v115, v913);
      if ((v166 & 1) == 0)
      {
        uint64_t v167 = sub_10024B258();
        uint64_t v168 = *((void *)v167 + 1);
        if ((v164 != *(void *)v167 || v165 != v168)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v164, v165, *(void *)v167, v168, 0LL) & 1) == 0)
        {
          swift_release(v948);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_79;
        }
      }

      uint64_t v169 = sub_1002103C0(v164, v165, (uint64_t)v973);
      swift_bridgeObjectRelease();
      uint64_t v115 = v948;
      if (!v169)
      {
        swift_bridgeObjectRelease();
        uint64_t v200 = sub_1001741A8();
        (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v902, v200, v918);
        uint64_t v201 = swift_allocObject(&unk_1003A9070, 24LL, 7LL);
        *(void *)(v201 + swift_weakDestroy(v0 + 16) = v907;
        a4 = swift_allocObject(&unk_1003A9098, 32LL, 7LL);
        *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
        *(void *)(a4 + 24) = v115;
        uint64_t v202 = swift_retain(v115);
        os_log_t v877 = (os_log_t)Logger.logObject.getter(v202);
        LODWORD(v876) = static os_log_type_t.error.getter();
        uint64_t v112 = swift_allocObject(&unk_1003A90C0, 17LL, 7LL);
        *(_BYTE *)(v112 + swift_weakDestroy(v0 + 16) = 32;
        uint64_t v203 = swift_allocObject(&unk_1003A90E8, 17LL, 7LL);
        uint64_t v115 = 8LL;
        *(_BYTE *)(v203 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v204 = swift_allocObject(&unk_1003A9110, 32LL, 7LL);
        *(void *)(v204 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
        *(void *)(v204 + 24) = v201;
        uint64_t v205 = swift_allocObject(&unk_1003A9138, 32LL, 7LL);
        *(void *)(v205 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
        *(void *)(v205 + 24) = v204;
        uint64_t v116 = swift_allocObject(&unk_1003A9160, 32LL, 7LL);
        *(void *)(v116 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
        *(void *)(v116 + 24) = v205;
        uint64_t v206 = swift_allocObject(&unk_1003A9188, 17LL, 7LL);
        *(_BYTE *)(v206 + swift_weakDestroy(v0 + 16) = 32;
        Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A91B0, 17LL, 7LL);
        *((_BYTE *)v23 + swift_weakDestroy(v0 + 16) = 8;
        uint64_t v207 = swift_allocObject(&unk_1003A91D8, 32LL, 7LL);
        *(void *)(v207 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
        *(void *)(v207 + 24) = a4;
        unint64_t v125 = swift_allocObject(&unk_1003A9200, 32LL, 7LL);
        *(void *)(v125 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
        *(void *)(v125 + 24) = v207;
        uint64_t v208 = sub_100156B68(&qword_1003FABA0);
        uint64_t v209 = swift_allocObject(v208, 128LL, 7LL);
        *(_OWORD *)(v209 + swift_weakDestroy(v0 + 16) = v895;
        *(void *)(v209 + 32) = sub_100212DA8;
        *(void *)(v209 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
        *(void *)(v209 + 48) = sub_100212DA8;
        *(void *)(v209 + 56) = v203;
        *(void *)(v209 + 64) = sub_100212BDC;
        *(void *)(v209 + 72) = v116;
        *(void *)(v209 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
        *(void *)(v209 + 88) = v206;
        *(void *)(v209 + 96) = sub_100212DA8;
        *(void *)(v209 + 104) = v23;
        *(void *)(v209 + 112) = sub_100212BDC;
        *(void *)(v209 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v125;
        swift_retain(v112);
        swift_retain(v203);
        swift_retain(v116);
        swift_retain(v206);
        swift_retain(v23);
        swift_retain(v125);
        os_log_t v210 = v877;
        swift_bridgeObjectRelease();
        if (!os_log_type_enabled(v210, (os_log_type_t)v876))
        {
          swift_release(v948);
          swift_release(v112);
          swift_release(v203);
          swift_release(v116);
          swift_release(v206);
          swift_release(v23);
          swift_release(v125);

          (*(void (**)(char *, uint64_t))(v917 + 8))(v902, v918);
          goto LABEL_113;
        }

        a4 = swift_slowAlloc(22LL, -1LL);
        uint64_t v211 = swift_slowAlloc(64LL, -1LL);
        uint64_t v970 = 0LL;
        v968[0] = v211;
        *(_WORD *)a4 = 514;
        *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
        uint64_t v115 = v955;
        if (v955) {
          goto LABEL_360;
        }
        uint64_t v212 = v211;
        swift_release(v112);
        *(_BYTE *)(a4 + 3) = *(_BYTE *)(v203 + 16);
        v963 = (_BYTE *)(a4 + 4);
        swift_release(v203);
        sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
        swift_release(v116);
        uint64_t v213 = v963;
        _BYTE *v963 = *(_BYTE *)(v206 + 16);
        swift_release(v206);
        v213[1] = *((_BYTE *)v23 + 16);
        v963 = v213 + 2;
        uint64_t v116 = v903;
        swift_release(v23);
        sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
        a1 = v929;
        int v128 = v910;
        swift_release(v125);
        uint64_t v115 = (uint64_t)v877;
        _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v876,  "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.",  (uint8_t *)a4,  0x16u);
        swift_arrayDestroy(v212, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v212, -1LL, -1LL);
        swift_slowDealloc(a4, -1LL, -1LL);

        swift_release(v948);
        (*(void (**)(char *, uint64_t))(v917 + 8))(v902, v918);
        goto LABEL_98;
      }

      swift_beginAccess(v169 + 32, &v960, 0LL, 0LL);
      uint64_t v170 = *(void *)(v169 + 32);
      swift_bridgeObjectRetain();
      char v171 = sub_100158DD4(v163, a4, v170);
      swift_bridgeObjectRelease();
      if ((v171 & 1) == 0)
      {
        uint64_t v214 = sub_100174330();
        uint64_t v215 = v900;
        sub_1001A8360(v214, v900, (uint64_t *)&unk_1003FBBE0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v917 + 48))(v215, 1LL, v918) != 1)
        {
          uint64_t v283 = swift_allocObject(&unk_1003A9228, 24LL, 7LL);
          *(void *)(v283 + swift_weakDestroy(v0 + 16) = v907;
          uint64_t v284 = swift_allocObject(&unk_1003A9250, 32LL, 7LL);
          *(void *)(v284 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
          *(void *)(v284 + 24) = v115;
          uint64_t v285 = swift_allocObject(&unk_1003A9278, 32LL, 7LL);
          *(void *)(v285 + swift_weakDestroy(v0 + 16) = sub_1002126AC;
          *(void *)(v285 + 24) = v169;
          uint64_t v286 = swift_allocObject(&unk_1003A92A0, 32LL, 7LL);
          v839 = (void *)v286;
          *(void *)(v286 + swift_weakDestroy(v0 + 16) = v163;
          *(void *)(v286 + 24) = a4;
          swift_retain(v115);
          uint64_t v287 = swift_retain(v169);
          v876 = (uint8_t *)Logger.logObject.getter(v287);
          LODWORD(v84_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = static os_log_type_t.info.getter();
          uint64_t v843 = swift_allocObject(&unk_1003A92C8, 17LL, 7LL);
          *(_BYTE *)(v843 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v842 = swift_allocObject(&unk_1003A92F0, 17LL, 7LL);
          *(_BYTE *)(v842 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v288 = swift_allocObject(&unk_1003A9318, 32LL, 7LL);
          *(void *)(v288 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
          *(void *)(v288 + 24) = v283;
          uint64_t v289 = swift_allocObject(&unk_1003A9340, 32LL, 7LL);
          *(void *)(v289 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
          *(void *)(v289 + 24) = v288;
          uint64_t v290 = swift_allocObject(&unk_1003A9368, 32LL, 7LL);
          *(void *)(v290 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v290 + 24) = v289;
          uint64_t v291 = v290;
          uint64_t v844 = swift_allocObject(&unk_1003A9390, 17LL, 7LL);
          *(_BYTE *)(v844 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v845 = swift_allocObject(&unk_1003A93B8, 17LL, 7LL);
          *(_BYTE *)(v845 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v292 = swift_allocObject(&unk_1003A93E0, 32LL, 7LL);
          *(void *)(v292 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
          *(void *)(v292 + 24) = v284;
          uint64_t v293 = swift_allocObject(&unk_1003A9408, 32LL, 7LL);
          *(void *)(v293 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v293 + 24) = v292;
          uint64_t v294 = v293;
          uint64_t v841 = v293;
          v851 = (os_log_s *)swift_allocObject(&unk_1003A9430, 17LL, 7LL);
          *((_BYTE *)v851 + swift_weakDestroy(v0 + 16) = 32;
          os_log_t v852 = (os_log_t)swift_allocObject(&unk_1003A9458, 17LL, 7LL);
          *((_BYTE *)v852 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v295 = swift_allocObject(&unk_1003A9480, 32LL, 7LL);
          *(void *)(v295 + swift_weakDestroy(v0 + 16) = sub_1002126B8;
          *(void *)(v295 + 24) = v285;
          uint64_t v296 = swift_allocObject(&unk_1003A94A8, 32LL, 7LL);
          *(void *)(v296 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v296 + 24) = v295;
          uint64_t v854 = v296;
          os_log_t v877 = (os_log_t)swift_allocObject(&unk_1003A94D0, 17LL, 7LL);
          *((_BYTE *)v877 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v837 = swift_allocObject(&unk_1003A94F8, 17LL, 7LL);
          *(_BYTE *)(v837 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v297 = swift_allocObject(&unk_1003A9520, 32LL, 7LL);
          uint64_t v298 = v839;
          *(void *)(v297 + swift_weakDestroy(v0 + 16) = sub_100212730;
          *(void *)(v297 + 24) = v298;
          uint64_t v299 = swift_allocObject(&unk_1003A9548, 32LL, 7LL);
          *(void *)(v299 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v299 + 24) = v297;
          uint64_t v300 = sub_100156B68(&qword_1003FABA0);
          uint64_t v301 = swift_allocObject(v300, 224LL, 7LL);
          *(_OWORD *)(v301 + swift_weakDestroy(v0 + 16) = v850;
          *(void *)(v301 + 32) = sub_100212DA8;
          a4 = v842;
          uint64_t v302 = v843;
          *(void *)(v301 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v843;
          *(void *)(v301 + 48) = sub_100212DA8;
          *(void *)(v301 + 56) = a4;
          *(void *)(v301 + 64) = sub_100212BDC;
          uint64_t v303 = (void *)v291;
          *(void *)(v301 + 72) = v291;
          *(void *)(v301 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
          v838 = (uint64_t (**)(void))v169;
          uint64_t v304 = v844;
          uint64_t v115 = v845;
          *(void *)(v301 + 88) = v844;
          *(void *)(v301 + 96) = sub_100212DA8;
          *(void *)(v301 + 104) = v115;
          *(void *)(v301 + 112) = sub_100212BDC;
          *(void *)(v301 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v294;
          *(void *)(v301 + 128) = sub_100212DA8;
          v306 = v851;
          os_log_t v305 = v852;
          *(void *)(v301 + 136) = v851;
          *(void *)(v301 + 144) = sub_100212DA8;
          *(void *)(v301 + 152) = v305;
          *(void *)(v301 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212BDC;
          *(void *)(v301 + 168) = v296;
          *(void *)(v301 + 176) = sub_100212DA8;
          *(void *)(v301 + 184) = v877;
          *(void *)(v301 + 192) = sub_100212DA8;
          uint64_t v112 = v837;
          *(void *)(v301 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v837;
          *(void *)(v301 + 208) = sub_100212BDC;
          *(void *)(v301 + 2swift_weakDestroy(v0 + 16) = v299;
          swift_retain(v302);
          swift_retain(a4);
          v839 = v303;
          swift_retain(v303);
          swift_retain(v304);
          swift_retain(v115);
          swift_retain(v841);
          swift_retain(v306);
          swift_retain(v305);
          swift_retain(v854);
          swift_retain(v877);
          swift_retain(v112);
          swift_retain(v299);
          swift_bridgeObjectRelease();
          if (os_log_type_enabled((os_log_t)v876, (os_log_type_t)v840))
          {
            unint64_t v125 = (unint64_t)v838;
            uint64_t v307 = v839;
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v841;
            uint64_t v308 = v842;
            uint64_t v116 = (uint64_t)v877;
            uint64_t v831 = v299;
            os_log_t v309 = (uint8_t *)swift_slowAlloc(42LL, -1LL);
            uint64_t v310 = swift_slowAlloc(128LL, -1LL);
            uint64_t v970 = 0LL;
            uint64_t v830 = v310;
            v968[0] = v310;
            *(_WORD *)os_log_t v309 = 1026;
            uint64_t v311 = v843;
            v309[2] = *(_BYTE *)(v843 + 16);
            a4 = v955;
            if (v955) {
              goto LABEL_361;
            }
            swift_release(v311);
            uint64_t v312 = v308;
            v309[3] = *(_BYTE *)(v308 + 16);
            v963 = v309 + 4;
            int v128 = v910;
            v313 = (uint64_t (**)(void))v23;
            swift_release(v312);
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, (uint64_t (*)(void))v307[2]);
            swift_release(v307);
            uint64_t v314 = v844;
            v315 = v963;
            _BYTE *v963 = *(_BYTE *)(v844 + 16);
            uint64_t v115 = v948;
            swift_release(v314);
            uint64_t v316 = v845;
            v315[1] = *(_BYTE *)(v845 + 16);
            v963 = v315 + 2;
            swift_release(v316);
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, v313[2]);
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
            swift_release(v313);
            int v317 = v851;
            uint64_t v318 = v963;
            _BYTE *v963 = *((_BYTE *)v851 + 16);
            swift_release(v317);
            os_log_t v319 = v852;
            v318[1] = *((_BYTE *)v852 + 16);
            v963 = v318 + 2;
            swift_release(v319);
            uint64_t v320 = v854;
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v854 + 16));
            swift_release(v320);
            v321 = v963;
            _BYTE *v963 = *(_BYTE *)(v116 + 16);
            swift_release(v116);
            v321[1] = *(_BYTE *)(v112 + 16);
            v963 = v321 + 2;
            uint64_t v116 = v903;
            swift_release(v112);
            uint64_t v322 = v831;
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v831 + 16));
            uint64_t v323 = v900;
            swift_release(v322);
            a4 = (uint64_t)v876;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v876,  (os_log_type_t)v840,  "[%s] optimisticSessions - Potential inconsistency when applying event: %s. Target set: %s does not contain item: %s. Skipping.",  v309,  0x2Au);
            uint64_t v112 = v830;
            swift_arrayDestroy(v830, 4LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v112, -1LL, -1LL);
            swift_slowDealloc(v309, -1LL, -1LL);
            swift_release(v115);

            swift_release(v125);
            a1 = v929;
          }

          else
          {
            swift_release(v948);

            swift_release(v838);
            swift_release(v843);
            swift_release(v842);
            swift_release(v839);
            swift_release(v844);
            swift_release(v845);
            swift_release(v841);
            swift_release(v851);
            swift_release(v852);
            swift_release(v854);
            swift_release(v877);
            swift_release(v112);
            swift_release(v299);
            a1 = v929;
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
            int v128 = v910;
            uint64_t v323 = v900;
            uint64_t v116 = v903;
          }

          (*(void (**)(uint64_t, uint64_t))(v917 + 8))(v323, v918);
          unint64_t v125 = (unint64_t)v937;
          goto LABEL_116;
        }

        swift_release(v115);
        swift_bridgeObjectRelease();
        swift_release(v169);
        sub_1001603DC(v215, (uint64_t *)&unk_1003FBBE0);
LABEL_78:
        a1 = v929;
        goto LABEL_79;
      }

      swift_beginAccess(v169 + 32, &v963, 33LL, 0LL);
      sub_10015CCDC(v163, a4);
      swift_endAccess(&v963);
      swift_release(v169);
      swift_release(v115);
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }

    if (v146 == v858)
    {
      uint64_t v172 = v23[12](v144, v125);
      uint64_t v148 = *v144;
      unint64_t v125 = v144[1];
      uint64_t v173 = v144[2];
      a4 = v144[3];
      uint64_t v115 = (uint64_t)v911;
      RoutingSessionConfiguration.context.getter(v172);
      char v174 = sub_100255494();
      (*(void (**)(uint64_t, uint64_t))(v912 + 8))(v115, v913);
      if ((v174 & 1) != 0
        || (v175 = sub_10024B258(), uint64_t v176 = *((void *)v175 + 1), v173 == *(void *)v175) && a4 == v176
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v173, a4, *(void *)v175, v176, 0LL) & 1) != 0)
      {
        uint64_t v177 = (uint64_t)v973;
        uint64_t v154 = (uint64_t (**)(uint64_t *, unint64_t))sub_1002103C0(v173, a4, (uint64_t)v973);
        swift_bridgeObjectRelease();
        if (!v154)
        {
          swift_bridgeObjectRelease();
          uint64_t v268 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v899, v268, v918);
          uint64_t v269 = swift_allocObject(&unk_1003A8C10, 24LL, 7LL);
          *(void *)(v269 + swift_weakDestroy(v0 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A8C38, 32LL, 7LL);
          *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
          uint64_t v270 = v948;
          *(void *)(a4 + 24) = v948;
          uint64_t v271 = swift_retain(v270);
          os_log_t v877 = (os_log_t)Logger.logObject.getter(v271);
          LODWORD(v876) = static os_log_type_t.error.getter();
          uint64_t v112 = swift_allocObject(&unk_1003A8C60, 17LL, 7LL);
          *(_BYTE *)(v112 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v272 = swift_allocObject(&unk_1003A8C88, 17LL, 7LL);
          uint64_t v115 = 8LL;
          *(_BYTE *)(v272 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v273 = swift_allocObject(&unk_1003A8CB0, 32LL, 7LL);
          *(void *)(v273 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
          *(void *)(v273 + 24) = v269;
          uint64_t v274 = swift_allocObject(&unk_1003A8CD8, 32LL, 7LL);
          *(void *)(v274 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
          *(void *)(v274 + 24) = v273;
          uint64_t v116 = swift_allocObject(&unk_1003A8D00, 32LL, 7LL);
          *(void *)(v116 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v116 + 24) = v274;
          uint64_t v275 = swift_allocObject(&unk_1003A8D28, 17LL, 7LL);
          *(_BYTE *)(v275 + swift_weakDestroy(v0 + 16) = 32;
          Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8D50, 17LL, 7LL);
          *((_BYTE *)v23 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v276 = swift_allocObject(&unk_1003A8D78, 32LL, 7LL);
          *(void *)(v276 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
          *(void *)(v276 + 24) = a4;
          unint64_t v125 = swift_allocObject(&unk_1003A8DA0, 32LL, 7LL);
          *(void *)(v125 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v125 + 24) = v276;
          uint64_t v277 = sub_100156B68(&qword_1003FABA0);
          uint64_t v278 = swift_allocObject(v277, 128LL, 7LL);
          *(_OWORD *)(v278 + swift_weakDestroy(v0 + 16) = v895;
          *(void *)(v278 + 32) = sub_100212DA8;
          *(void *)(v278 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
          *(void *)(v278 + 48) = sub_100212DA8;
          *(void *)(v278 + 56) = v272;
          *(void *)(v278 + 64) = sub_100212BDC;
          *(void *)(v278 + 72) = v116;
          *(void *)(v278 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
          *(void *)(v278 + 88) = v275;
          *(void *)(v278 + 96) = sub_100212DA8;
          *(void *)(v278 + 104) = v23;
          *(void *)(v278 + 112) = sub_100212BDC;
          *(void *)(v278 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v125;
          swift_retain(v112);
          swift_retain(v272);
          swift_retain(v116);
          swift_retain(v275);
          swift_retain(v23);
          swift_retain(v125);
          os_log_t v279 = v877;
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v279, (os_log_type_t)v876))
          {
            swift_release(v948);
            swift_release(v112);
            swift_release(v272);
            swift_release(v116);
            swift_release(v275);
            swift_release(v23);
            swift_release(v125);

            (*(void (**)(char *, uint64_t))(v917 + 8))(v899, v918);
            goto LABEL_113;
          }

          a4 = swift_slowAlloc(22LL, -1LL);
          uint64_t v280 = swift_slowAlloc(64LL, -1LL);
          uint64_t v970 = 0LL;
          v968[0] = v280;
          *(_WORD *)a4 = 514;
          *(_BYTE *)(a4 + 2) = *(_BYTE *)(v112 + 16);
          uint64_t v115 = v955;
          if (v955) {
            goto LABEL_360;
          }
          uint64_t v281 = v280;
          swift_release(v112);
          *(_BYTE *)(a4 + 3) = *(_BYTE *)(v272 + 16);
          v963 = (_BYTE *)(a4 + 4);
          swift_release(v272);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v116 + 16));
          swift_release(v116);
          uint64_t v282 = v963;
          _BYTE *v963 = *(_BYTE *)(v275 + 16);
          swift_release(v275);
          v282[1] = *((_BYTE *)v23 + 16);
          v963 = v282 + 2;
          uint64_t v116 = v903;
          swift_release(v23);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v125 + 16));
          a1 = v929;
          int v128 = v910;
          swift_release(v125);
          uint64_t v115 = (uint64_t)v877;
          _os_log_impl( (void *)&_mh_execute_header,  v877,  (os_log_type_t)v876,  "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.",  (uint8_t *)a4,  0x16u);
          swift_arrayDestroy(v281, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v281, -1LL, -1LL);
          swift_slowDealloc(a4, -1LL, -1LL);

          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v899, v918);
          goto LABEL_98;
        }

        sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
        id v178 = sub_1002A8918();
        a4 = (uint64_t)String._bridgeToObjectiveC()();
        uint64_t v112 = (uint64_t)[v178 matchesUID:a4];

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v115 = v955;
        uint64_t v179 = sub_100211E80(v177, v148, v125);
        swift_bridgeObjectRelease();
        if (sub_100210400(v179) >= 2)
        {
          LODWORD(v955) = v112;
          uint64_t v180 = sub_100174330();
          uint64_t v181 = v898;
          sub_1001A8360(v180, v898, (uint64_t *)&unk_1003FBBE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v917 + 48))(v181, 1LL, v918) == 1)
          {
            sub_1001603DC(v181, (uint64_t *)&unk_1003FBBE0);
          }

          else
          {
            v839 = v154;
            uint64_t v841 = v148;
            uint64_t v844 = v115;
            uint64_t v363 = swift_allocObject(&unk_1003A8DC8, 24LL, 7LL);
            *(void *)(v363 + swift_weakDestroy(v0 + 16) = v907;
            v364 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8DF0, 32LL, 7LL);
            v840 = v364;
            uint64_t v365 = v948;
            v364[2] = (uint64_t (*)(uint64_t *, unint64_t))sub_100212BD0;
            v364[3] = (uint64_t (*)(uint64_t *, unint64_t))v365;
            uint64_t v366 = swift_allocObject(&unk_1003A8E18, 24LL, 7LL);
            *(void *)(v366 + swift_weakDestroy(v0 + 16) = v179;
            uint64_t v367 = swift_allocObject(&unk_1003A8E40, 32LL, 7LL);
            uint64_t v843 = v367;
            *(void *)(v367 + swift_weakDestroy(v0 + 16) = sub_1002125E0;
            *(void *)(v367 + 24) = v366;
            swift_retain(v365);
            uint64_t v842 = v179;
            uint64_t v368 = swift_bridgeObjectRetain();
            v851 = (os_log_s *)Logger.logObject.getter(v368);
            LODWORD(v845) = static os_log_type_t.info.getter();
            uint64_t v854 = swift_allocObject(&unk_1003A8E68, 17LL, 7LL);
            *(_BYTE *)(v854 + swift_weakDestroy(v0 + 16) = 32;
            os_log_t v852 = (os_log_t)swift_allocObject(&unk_1003A8E90, 17LL, 7LL);
            *((_BYTE *)v852 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v369 = swift_allocObject(&unk_1003A8EB8, 32LL, 7LL);
            *(void *)(v369 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
            *(void *)(v369 + 24) = v363;
            uint64_t v370 = swift_allocObject(&unk_1003A8EE0, 32LL, 7LL);
            *(void *)(v370 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
            *(void *)(v370 + 24) = v369;
            uint64_t v371 = swift_allocObject(&unk_1003A8F08, 32LL, 7LL);
            *(void *)(v371 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v371 + 24) = v370;
            uint64_t v372 = v371;
            v876 = (uint8_t *)v371;
            uint64_t v373 = swift_allocObject(&unk_1003A8F30, 17LL, 7LL);
            *(_BYTE *)(v373 + swift_weakDestroy(v0 + 16) = 32;
            os_log_t v877 = (os_log_t)swift_allocObject(&unk_1003A8F58, 17LL, 7LL);
            *((_BYTE *)v877 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v374 = swift_allocObject(&unk_1003A8F80, 32LL, 7LL);
            uint64_t v375 = v840;
            *(void *)(v374 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
            *(void *)(v374 + 24) = v375;
            uint64_t v376 = swift_allocObject(&unk_1003A8FA8, 32LL, 7LL);
            *(void *)(v376 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v376 + 24) = v374;
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))swift_allocObject(&unk_1003A8FD0, 17LL, 7LL);
            *((_BYTE *)v23 + swift_weakDestroy(v0 + 16) = 32;
            uint64_t v377 = swift_allocObject(&unk_1003A8FF8, 17LL, 7LL);
            *(_BYTE *)(v377 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v378 = swift_allocObject(&unk_1003A9020, 32LL, 7LL);
            uint64_t v379 = v843;
            *(void *)(v378 + swift_weakDestroy(v0 + 16) = sub_100212BD8;
            *(void *)(v378 + 24) = v379;
            uint64_t v380 = swift_allocObject(&unk_1003A9048, 32LL, 7LL);
            *(void *)(v380 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v380 + 24) = v378;
            uint64_t v381 = sub_100156B68(&qword_1003FABA0);
            uint64_t v382 = swift_allocObject(v381, 176LL, 7LL);
            *(_OWORD *)(v382 + swift_weakDestroy(v0 + 16) = v856;
            *(void *)(v382 + 32) = sub_100212DA8;
            uint64_t v383 = v854;
            *(void *)(v382 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v854;
            *(void *)(v382 + 48) = sub_100212DA8;
            os_log_t v384 = v852;
            *(void *)(v382 + 56) = v852;
            *(void *)(v382 + 64) = sub_100212BDC;
            *(void *)(v382 + 72) = v372;
            *(void *)(v382 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
            *(void *)(v382 + 88) = v373;
            *(void *)(v382 + 96) = sub_100212DA8;
            a4 = (uint64_t)v877;
            *(void *)(v382 + 104) = v877;
            *(void *)(v382 + 112) = sub_100212BDC;
            *(void *)(v382 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v376;
            *(void *)(v382 + 128) = sub_100212DA8;
            *(void *)(v382 + 136) = v23;
            *(void *)(v382 + 144) = sub_100212DA8;
            *(void *)(v382 + 152) = v377;
            *(void *)(v382 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212BDC;
            *(void *)(v382 + 168) = v380;
            swift_retain(v383);
            swift_retain(v384);
            swift_retain(v876);
            swift_retain(v373);
            swift_retain(a4);
            swift_retain(v376);
            swift_retain(v23);
            swift_retain(v377);
            uint64_t v843 = v380;
            swift_retain(v380);
            swift_bridgeObjectRelease();
            os_log_t v385 = v851;
            if (os_log_type_enabled(v851, (os_log_type_t)v845))
            {
              uint64_t v112 = (uint64_t)v852;
              uint64_t v837 = v377;
              v838 = (uint64_t (**)(void))v373;
              v840 = v23;
              uint64_t v116 = swift_slowAlloc(32LL, -1LL);
              uint64_t v386 = swift_slowAlloc(96LL, -1LL);
              uint64_t v970 = 0LL;
              uint64_t v831 = v386;
              v968[0] = v386;
              *(_WORD *)uint64_t v116 = 770;
              uint64_t v387 = v854;
              *(_BYTE *)(v116 + 2) = *(_BYTE *)(v854 + 16);
              uint64_t v115 = v844;
              if (v844) {
                goto LABEL_360;
              }
              swift_release(v387);
              *(_BYTE *)(v116 + 3) = *(_BYTE *)(v112 + 16);
              v963 = (_BYTE *)(v116 + 4);
              uint64_t v388 = v376;
              uint64_t v148 = v841;
              uint64_t v179 = v842;
              uint64_t v154 = (uint64_t (**)(uint64_t *, unint64_t))v839;
              swift_release(v112);
              v389 = v876;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *((uint64_t (**)(void))v876 + 2));
              swift_release(v389);
              v390 = v838;
              v391 = v963;
              _BYTE *v963 = *((_BYTE *)v838 + 16);
              swift_release(v390);
              os_log_t v392 = v877;
              v391[1] = *((_BYTE *)v877 + 16);
              v963 = v391 + 2;
              swift_release(v392);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v388 + 16));
              a4 = v898;
              swift_release(v388);
              v393 = v840;
              v394 = v963;
              _BYTE *v963 = *((_BYTE *)v840 + 16);
              swift_release(v393);
              uint64_t v395 = v837;
              v394[1] = *(_BYTE *)(v837 + 16);
              v963 = v394 + 2;
              swift_release(v395);
              uint64_t v396 = v843;
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v843 + 16));
              swift_release(v396);
              os_log_t v397 = v851;
              _os_log_impl( (void *)&_mh_execute_header,  v851,  (os_log_type_t)v845,  "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s. Continuing.",  (uint8_t *)v116,  0x20u);
              uint64_t v398 = v831;
              swift_arrayDestroy(v831, 3LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v398, -1LL, -1LL);
              swift_slowDealloc(v116, -1LL, -1LL);
            }

            else
            {

              swift_release(v854);
              swift_release(v852);
              swift_release(v876);
              swift_release(v373);
              swift_release(v877);
              swift_release(v376);
              swift_release(v23);
              swift_release(v377);
              swift_release(v843);
              a4 = v898;
              uint64_t v115 = v844;
              uint64_t v148 = v841;
              uint64_t v179 = v842;
              uint64_t v154 = (uint64_t (**)(uint64_t *, unint64_t))v839;
            }

            (*(void (**)(uint64_t, uint64_t))(v917 + 8))(a4, v918);
            uint64_t v116 = v903;
          }

          uint64_t v112 = v955;
        }

        swift_bridgeObjectRetain();
        sub_100211CEC(v179, v112, v148, v125);
        uint64_t v955 = v115;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess(v154 + 4, &v963, 33LL, 0LL);
        swift_bridgeObjectRelease();
        v154[4] = (uint64_t (*)(uint64_t *, unint64_t))&_swiftEmptySetSingleton;
LABEL_76:
        sub_10015B404(&v970, v148, v125);
        swift_endAccess(&v963);
        swift_release(v154);
        swift_release(v948);
LABEL_77:
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }

LABEL_159:
        RoutingControl.type.getter(v403);
        uint64_t v115 = v887;
        uint64_t v493 = v885;
        int v494 = (*(uint64_t (**)(unsigned int *, uint64_t))(v887 + 88))(v128, v885);
        if (v494 == v846)
        {
          uint64_t v495 = (*(uint64_t (**)(unsigned int *, uint64_t))(v115 + 96))(v128, v493);
          uint64_t v496 = *v128;
          v497 = v882;
          RoutingControl.target.getter(v495);
          uint64_t v498 = v886;
          uint64_t v499 = v892;
          int v500 = (*(uint64_t (**)(uint64_t *, uint64_t))(v886 + 88))(v497, v892);
          if (v500 != v847)
          {
            uint64_t v115 = v948;
            if (v500 != v836)
            {
              v963 = 0LL;
              unint64_t v964 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(52LL);
              v816._uint64_t countAndFlagsBits = 91LL;
              v816._object = (void *)0xE100000000000000LL;
              DefaultStringInterpolation.appendLiteral(_:)(v816);
              sub_1002082D4(v907);
              v817._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
              v817._object = (void *)0x800000010033D5B0LL;
              DefaultStringInterpolation.appendLiteral(_:)(v817);
              uint64_t v818 = (uint64_t)v860;
              RoutingControl.target.getter(v819);
              sub_100208300( v818,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl.Target,  &qword_1003F8D10,  (uint64_t)&protocol conformance descriptor for RoutingControl.Target);
              (*(void (**)(uint64_t, uint64_t))(v498 + 8))(v818, v499);
              v530 = &v963;
              v820._uint64_t countAndFlagsBits = 0LL;
              v820._object = (void *)0xE000000000000000LL;
              DefaultStringInterpolation.appendLiteral(_:)(v820);
              _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v963,  v964,  "mediaremoted/RoutingOptimisticEngine.swift",  42LL,  2LL,  234LL,  0);
LABEL_364:
              __break(1u);
LABEL_365:
              swift_errorRelease(v530);
              __break(1u);
LABEL_366:
              swift_errorRelease(v112);
              __break(1u);
              goto LABEL_367;
            }

            (*(void (**)(uint64_t *, uint64_t))(v498 + 96))(v497, v499);
            a4 = *v497;
            uint64_t v507 = v497[1];
            uint64_t v508 = sub_10024A2D0(*v497, v507);
            uint64_t v510 = sub_1002103C0(v508, v509, (uint64_t)v973);
            swift_bridgeObjectRelease();
            if (!v510)
            {
              swift_bridgeObjectRelease();
              uint64_t v549 = sub_1001741A8();
              (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v874, v549, v918);
              uint64_t v550 = swift_allocObject(&unk_1003A7AB8, 24LL, 7LL);
              *(void *)(v550 + swift_weakDestroy(v0 + 16) = v907;
              a4 = swift_allocObject(&unk_1003A7AE0, 32LL, 7LL);
              *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
              *(void *)(a4 + 24) = v115;
              uint64_t v551 = swift_retain(v115);
              v876 = (uint8_t *)Logger.logObject.getter(v551);
              uint64_t v115 = static os_log_type_t.error.getter();
              uint64_t v552 = swift_allocObject(&unk_1003A7B08, 17LL, 7LL);
              *(_BYTE *)(v552 + swift_weakDestroy(v0 + 16) = 32;
              uint64_t v553 = swift_allocObject(&unk_1003A7B30, 17LL, 7LL);
              *(_BYTE *)(v553 + swift_weakDestroy(v0 + 16) = 8;
              uint64_t v554 = swift_allocObject(&unk_1003A7B58, 32LL, 7LL);
              *(void *)(v554 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
              *(void *)(v554 + 24) = v550;
              uint64_t v555 = swift_allocObject(&unk_1003A7B80, 32LL, 7LL);
              *(void *)(v555 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
              *(void *)(v555 + 24) = v554;
              uint64_t v556 = swift_allocObject(&unk_1003A7BA8, 32LL, 7LL);
              *(void *)(v556 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
              *(void *)(v556 + 24) = v555;
              uint64_t v557 = swift_allocObject(&unk_1003A7BD0, 17LL, 7LL);
              *(_BYTE *)(v557 + swift_weakDestroy(v0 + 16) = 32;
              uint64_t v116 = swift_allocObject(&unk_1003A7BF8, 17LL, 7LL);
              *(_BYTE *)(v116 + swift_weakDestroy(v0 + 16) = 8;
              uint64_t v558 = swift_allocObject(&unk_1003A7C20, 32LL, 7LL);
              *(void *)(v558 + swift_weakDestroy(v0 + 16) = sub_100211A08;
              *(void *)(v558 + 24) = a4;
              uint64_t v112 = swift_allocObject(&unk_1003A7C48, 32LL, 7LL);
              *(void *)(v112 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
              *(void *)(v112 + 24) = v558;
              uint64_t v559 = sub_100156B68(&qword_1003FABA0);
              uint64_t inited = swift_initStackObject(v559, &v965);
              *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v895;
              *(void *)(inited + 32) = sub_100212DA8;
              *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v552;
              *(void *)(inited + 48) = sub_100212DA8;
              *(void *)(inited + 56) = v553;
              *(void *)(inited + 64) = sub_100212BDC;
              *(void *)(inited + 72) = v556;
              *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
              *(void *)(inited + 88) = v557;
              *(void *)(inited + 96) = sub_100212DA8;
              *(void *)(inited + 104) = v116;
              *(void *)(inited + 112) = sub_100212BDC;
              *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
              swift_retain(v552);
              swift_retain(v553);
              swift_retain(v556);
              swift_retain(v557);
              swift_retain(v116);
              swift_retain(v112);
              v561 = (os_log_s *)v876;
              swift_bridgeObjectRelease();
              LODWORD(v854) = v115;
              if (os_log_type_enabled(v561, (os_log_type_t)v115))
              {
                a4 = swift_slowAlloc(22LL, -1LL);
                uint64_t v562 = swift_slowAlloc(64LL, -1LL);
                uint64_t v970 = 0LL;
                v968[0] = v562;
                *(_WORD *)a4 = 514;
                *(_BYTE *)(a4 + 2) = *(_BYTE *)(v552 + 16);
                v530 = (_BYTE **)v955;
                if (v955) {
                  goto LABEL_365;
                }
                uint64_t v115 = v562;
                swift_release(v552);
                *(_BYTE *)(a4 + 3) = *(_BYTE *)(v553 + 16);
                v963 = (_BYTE *)(a4 + 4);
                swift_release(v553);
                sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v556 + 16));
                swift_release(v556);
                v563 = v963;
                _BYTE *v963 = *(_BYTE *)(v557 + 16);
                Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
                swift_release(v557);
                v563[1] = *(_BYTE *)(v116 + 16);
                v963 = v563 + 2;
                int v128 = v910;
                swift_release(v116);
                sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v112 + 16));
                a1 = v929;
                v532 = v874;
                goto LABEL_191;
              }

              swift_release(v112);
              swift_release(v116);
              swift_release(v557);
              swift_release(v556);
              swift_release(v553);
              swift_release(v552);
              swift_release(v948);
              (*(void (**)(char *, uint64_t))(v917 + 8))(v874, v918);
LABEL_207:
              (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
              os_log_t v492 = v877;
LABEL_208:
              swift_release(v492);
LABEL_113:
              a1 = v929;
              Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
              int v128 = v910;
              goto LABEL_114;
            }

            swift_beginAccess(v510 + 40, &v963, 33LL, 0LL);
            LOBYTE(v97_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0;
            sub_100207DA0(v496, a4, v507);
            swift_endAccess(&v963);
            swift_release(v510);
            swift_release(v115);
            (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
            swift_release(v877);
            goto LABEL_79;
          }

          (*(void (**)(uint64_t *, uint64_t))(v498 + 96))(v497, v499);
          a4 = v497[1];
          uint64_t v501 = sub_1002103C0(*v497, a4, (uint64_t)v973);
          swift_bridgeObjectRelease();
          uint64_t v115 = v948;
          if (!v501)
          {
            uint64_t v516 = sub_1001741A8();
            (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v873, v516, v918);
            uint64_t v517 = swift_allocObject(&unk_1003A7C70, 24LL, 7LL);
            *(void *)(v517 + swift_weakDestroy(v0 + 16) = v907;
            a4 = swift_allocObject(&unk_1003A7C98, 32LL, 7LL);
            *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
            *(void *)(a4 + 24) = v115;
            uint64_t v518 = swift_retain(v115);
            v876 = (uint8_t *)Logger.logObject.getter(v518);
            uint64_t v115 = static os_log_type_t.error.getter();
            uint64_t v519 = swift_allocObject(&unk_1003A7CC0, 17LL, 7LL);
            *(_BYTE *)(v519 + swift_weakDestroy(v0 + 16) = 32;
            uint64_t v520 = swift_allocObject(&unk_1003A7CE8, 17LL, 7LL);
            *(_BYTE *)(v520 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v521 = swift_allocObject(&unk_1003A7D10, 32LL, 7LL);
            *(void *)(v521 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
            *(void *)(v521 + 24) = v517;
            uint64_t v522 = swift_allocObject(&unk_1003A7D38, 32LL, 7LL);
            *(void *)(v522 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
            *(void *)(v522 + 24) = v521;
            uint64_t v523 = swift_allocObject(&unk_1003A7D60, 32LL, 7LL);
            *(void *)(v523 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v523 + 24) = v522;
            uint64_t v524 = swift_allocObject(&unk_1003A7D88, 17LL, 7LL);
            *(_BYTE *)(v524 + swift_weakDestroy(v0 + 16) = 32;
            uint64_t v116 = swift_allocObject(&unk_1003A7DB0, 17LL, 7LL);
            *(_BYTE *)(v116 + swift_weakDestroy(v0 + 16) = 8;
            uint64_t v525 = swift_allocObject(&unk_1003A7DD8, 32LL, 7LL);
            *(void *)(v525 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
            *(void *)(v525 + 24) = a4;
            uint64_t v112 = swift_allocObject(&unk_1003A7E00, 32LL, 7LL);
            *(void *)(v112 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
            *(void *)(v112 + 24) = v525;
            uint64_t v526 = sub_100156B68(&qword_1003FABA0);
            uint64_t v527 = swift_allocObject(v526, 128LL, 7LL);
            *(_OWORD *)(v527 + swift_weakDestroy(v0 + 16) = v895;
            *(void *)(v527 + 32) = sub_100212DA8;
            *(void *)(v527 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v519;
            *(void *)(v527 + 48) = sub_100212DA8;
            *(void *)(v527 + 56) = v520;
            *(void *)(v527 + 64) = sub_100212BDC;
            *(void *)(v527 + 72) = v523;
            *(void *)(v527 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
            *(void *)(v527 + 88) = v524;
            *(void *)(v527 + 96) = sub_100212DA8;
            *(void *)(v527 + 104) = v116;
            *(void *)(v527 + 112) = sub_100212BDC;
            *(void *)(v527 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
            swift_retain(v519);
            swift_retain(v520);
            swift_retain(v523);
            swift_retain(v524);
            swift_retain(v116);
            swift_retain(v112);
            v528 = (os_log_s *)v876;
            swift_bridgeObjectRelease();
            LODWORD(v854) = v115;
            if (os_log_type_enabled(v528, (os_log_type_t)v115))
            {
              a4 = swift_slowAlloc(22LL, -1LL);
              uint64_t v529 = swift_slowAlloc(64LL, -1LL);
              uint64_t v970 = 0LL;
              v968[0] = v529;
              *(_WORD *)a4 = 514;
              *(_BYTE *)(a4 + 2) = *(_BYTE *)(v519 + 16);
              v530 = (_BYTE **)v955;
              if (v955) {
                goto LABEL_365;
              }
              uint64_t v115 = v529;
              swift_release(v519);
              *(_BYTE *)(a4 + 3) = *(_BYTE *)(v520 + 16);
              v963 = (_BYTE *)(a4 + 4);
              swift_release(v520);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v523 + 16));
              swift_release(v523);
              v531 = v963;
              _BYTE *v963 = *(_BYTE *)(v524 + 16);
              Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
              swift_release(v524);
              v531[1] = *(_BYTE *)(v116 + 16);
              v963 = v531 + 2;
              int v128 = v910;
              swift_release(v116);
              sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v112 + 16));
              a1 = v929;
              v532 = v873;
              goto LABEL_191;
            }

            swift_release(v112);
            swift_release(v116);
            swift_release(v524);
            swift_release(v523);
            swift_release(v520);
            swift_release(v519);
            swift_release(v948);
            (*(void (**)(char *, uint64_t))(v917 + 8))(v873, v918);
            goto LABEL_207;
          }

          (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
          swift_release(v115);
          swift_release(v877);
          swift_release(v501);
          goto LABEL_80;
        }

        if (v494 == v835)
        {
          uint64_t v502 = RoutingControl.sessionIdentifier.getter();
          a4 = sub_1002103C0(v502, v503, (uint64_t)v973);
          swift_bridgeObjectRelease();
          if (a4)
          {
            v504 = sub_100207D5C((uint64_t)&v963);
            uint64_t v115 = v928;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v927 + 48))(v505, 1LL, v928))
            {
              v506 = v867;
              (*(void (**)(char *, void, uint64_t))(v868 + 104))(v867, v833, v869);
              goto LABEL_175;
            }

            goto LABEL_176;
          }

          uint64_t v533 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v872, v533, v918);
          uint64_t v534 = swift_allocObject(&unk_1003A7FE0, 24LL, 7LL);
          *(void *)(v534 + swift_weakDestroy(v0 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A8008, 32LL, 7LL);
          *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
          uint64_t v535 = v948;
          *(void *)(a4 + 24) = v948;
          uint64_t v536 = swift_retain(v535);
          v876 = (uint8_t *)Logger.logObject.getter(v536);
          uint64_t v115 = static os_log_type_t.error.getter();
          uint64_t v537 = swift_allocObject(&unk_1003A8030, 17LL, 7LL);
          *(_BYTE *)(v537 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v538 = swift_allocObject(&unk_1003A8058, 17LL, 7LL);
          *(_BYTE *)(v538 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v539 = swift_allocObject(&unk_1003A8080, 32LL, 7LL);
          *(void *)(v539 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
          *(void *)(v539 + 24) = v534;
          uint64_t v540 = swift_allocObject(&unk_1003A80A8, 32LL, 7LL);
          *(void *)(v540 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
          *(void *)(v540 + 24) = v539;
          uint64_t v541 = swift_allocObject(&unk_1003A80D0, 32LL, 7LL);
          *(void *)(v541 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v541 + 24) = v540;
          uint64_t v542 = swift_allocObject(&unk_1003A80F8, 17LL, 7LL);
          *(_BYTE *)(v542 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v116 = swift_allocObject(&unk_1003A8120, 17LL, 7LL);
          *(_BYTE *)(v116 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v543 = swift_allocObject(&unk_1003A8148, 32LL, 7LL);
          *(void *)(v543 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
          *(void *)(v543 + 24) = a4;
          uint64_t v112 = swift_allocObject(&unk_1003A8170, 32LL, 7LL);
          *(void *)(v112 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v112 + 24) = v543;
          uint64_t v544 = sub_100156B68(&qword_1003FABA0);
          uint64_t v545 = swift_allocObject(v544, 128LL, 7LL);
          *(_OWORD *)(v545 + swift_weakDestroy(v0 + 16) = v895;
          *(void *)(v545 + 32) = sub_100212DA8;
          *(void *)(v545 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v537;
          *(void *)(v545 + 48) = sub_100212DA8;
          *(void *)(v545 + 56) = v538;
          *(void *)(v545 + 64) = sub_100212BDC;
          *(void *)(v545 + 72) = v541;
          *(void *)(v545 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
          *(void *)(v545 + 88) = v542;
          *(void *)(v545 + 96) = sub_100212DA8;
          *(void *)(v545 + 104) = v116;
          *(void *)(v545 + 112) = sub_100212BDC;
          *(void *)(v545 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
          swift_retain(v537);
          swift_retain(v538);
          swift_retain(v541);
          swift_retain(v542);
          swift_retain(v116);
          swift_retain(v112);
          v546 = (os_log_s *)v876;
          swift_bridgeObjectRelease();
          LODWORD(v854) = v115;
          if (os_log_type_enabled(v546, (os_log_type_t)v115))
          {
            a4 = swift_slowAlloc(22LL, -1LL);
            uint64_t v547 = swift_slowAlloc(64LL, -1LL);
            uint64_t v970 = 0LL;
            v968[0] = v547;
            *(_WORD *)a4 = 514;
            *(_BYTE *)(a4 + 2) = *(_BYTE *)(v537 + 16);
            v530 = (_BYTE **)v955;
            if (v955) {
              goto LABEL_365;
            }
            uint64_t v115 = v547;
            swift_release(v537);
            *(_BYTE *)(a4 + 3) = *(_BYTE *)(v538 + 16);
            v963 = (_BYTE *)(a4 + 4);
            swift_release(v538);
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v541 + 16));
            swift_release(v541);
            v548 = v963;
            _BYTE *v963 = *(_BYTE *)(v542 + 16);
            Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
            swift_release(v542);
            v548[1] = *(_BYTE *)(v116 + 16);
            v963 = v548 + 2;
            int v128 = v910;
            swift_release(v116);
            sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v112 + 16));
            a1 = v929;
            v532 = v872;
            goto LABEL_191;
          }

          swift_release(v112);
          swift_release(v116);
          swift_release(v542);
          swift_release(v541);
          swift_release(v538);
          swift_release(v537);
          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v872, v918);
          goto LABEL_207;
        }

        v511 = v879;
        if (v494 == v834)
        {
          uint64_t v512 = RoutingControl.sessionIdentifier.getter();
          a4 = sub_1002103C0(v512, v513, (uint64_t)v973);
          swift_bridgeObjectRelease();
          if (a4)
          {
            v504 = sub_100207D5C((uint64_t)&v963);
            uint64_t v115 = v928;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v927 + 48))(v514, 1LL, v928))
            {
              v506 = v867;
              (*(void (**)(char *, void, uint64_t))(v868 + 104))(v867, v832, v869);
LABEL_175:
              v515 = v506;
              int v128 = v910;
              RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.setter(v515);
            }

LABEL_176:
            ((void (*)(_BYTE **, void))v504)(&v963, 0LL);
            uint64_t v411 = v952;
            swift_release(a4);
            swift_release(v948);
            (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
            swift_release(v877);
            unint64_t v125 = (unint64_t)v937;
            goto LABEL_117;
          }

          uint64_t v564 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v511, v564, v918);
          uint64_t v565 = swift_allocObject(&unk_1003A7E28, 24LL, 7LL);
          *(void *)(v565 + swift_weakDestroy(v0 + 16) = v907;
          a4 = swift_allocObject(&unk_1003A7E50, 32LL, 7LL);
          *(void *)(a4 + swift_weakDestroy(v0 + 16) = sub_100212BD0;
          uint64_t v566 = v948;
          *(void *)(a4 + 24) = v948;
          uint64_t v567 = swift_retain(v566);
          v876 = (uint8_t *)Logger.logObject.getter(v567);
          uint64_t v115 = static os_log_type_t.error.getter();
          uint64_t v568 = swift_allocObject(&unk_1003A7E78, 17LL, 7LL);
          *(_BYTE *)(v568 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v569 = swift_allocObject(&unk_1003A7EA0, 17LL, 7LL);
          *(_BYTE *)(v569 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v570 = swift_allocObject(&unk_1003A7EC8, 32LL, 7LL);
          *(void *)(v570 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
          *(void *)(v570 + 24) = v565;
          uint64_t v571 = swift_allocObject(&unk_1003A7EF0, 32LL, 7LL);
          *(void *)(v571 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
          *(void *)(v571 + 24) = v570;
          uint64_t v572 = swift_allocObject(&unk_1003A7F18, 32LL, 7LL);
          *(void *)(v572 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v572 + 24) = v571;
          uint64_t v573 = swift_allocObject(&unk_1003A7F40, 17LL, 7LL);
          *(_BYTE *)(v573 + swift_weakDestroy(v0 + 16) = 32;
          uint64_t v116 = swift_allocObject(&unk_1003A7F68, 17LL, 7LL);
          *(_BYTE *)(v116 + swift_weakDestroy(v0 + 16) = 8;
          uint64_t v574 = swift_allocObject(&unk_1003A7F90, 32LL, 7LL);
          *(void *)(v574 + swift_weakDestroy(v0 + 16) = sub_100212BD4;
          *(void *)(v574 + 24) = a4;
          uint64_t v112 = swift_allocObject(&unk_1003A7FB8, 32LL, 7LL);
          *(void *)(v112 + swift_weakDestroy(v0 + 16) = sub_1001EFCC4;
          *(void *)(v112 + 24) = v574;
          uint64_t v575 = sub_100156B68(&qword_1003FABA0);
          uint64_t v576 = swift_allocObject(v575, 128LL, 7LL);
          *(_OWORD *)(v576 + swift_weakDestroy(v0 + 16) = v895;
          *(void *)(v576 + 32) = sub_100212DA8;
          *(void *)(v576 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v568;
          *(void *)(v576 + 48) = sub_100212DA8;
          *(void *)(v576 + 56) = v569;
          *(void *)(v576 + 64) = sub_100212BDC;
          *(void *)(v576 + 72) = v572;
          *(void *)(v576 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_100212DA8;
          *(void *)(v576 + 88) = v573;
          *(void *)(v576 + 96) = sub_100212DA8;
          *(void *)(v576 + 104) = v116;
          *(void *)(v576 + 112) = sub_100212BDC;
          *(void *)(v576 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v112;
          swift_retain(v568);
          swift_retain(v569);
          swift_retain(v572);
          swift_retain(v573);
          swift_retain(v116);
          swift_retain(v112);
          v577 = v876;
          swift_bridgeObjectRelease();
          LODWORD(v854) = v115;
          if (!os_log_type_enabled((os_log_t)v577, (os_log_type_t)v115))
          {

            swift_release(v112);
            swift_release(v116);
            swift_release(v573);
            swift_release(v572);
            swift_release(v569);
            swift_release(v568);
            swift_release(v948);
            (*(void (**)(char *, uint64_t))(v917 + 8))(v879, v918);
            goto LABEL_207;
          }

          a4 = swift_slowAlloc(22LL, -1LL);
          uint64_t v578 = swift_slowAlloc(64LL, -1LL);
          uint64_t v970 = 0LL;
          v968[0] = v578;
          *(_WORD *)a4 = 514;
          *(_BYTE *)(a4 + 2) = *(_BYTE *)(v568 + 16);
          v530 = (_BYTE **)v955;
          if (v955) {
            goto LABEL_365;
          }
          uint64_t v115 = v578;
          swift_release(v568);
          *(_BYTE *)(a4 + 3) = *(_BYTE *)(v569 + 16);
          v963 = (_BYTE *)(a4 + 4);
          swift_release(v569);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v572 + 16));
          swift_release(v572);
          v579 = v963;
          _BYTE *v963 = *(_BYTE *)(v573 + 16);
          Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
          swift_release(v573);
          v579[1] = *(_BYTE *)(v116 + 16);
          v963 = v579 + 2;
          int v128 = v910;
          swift_release(v116);
          sub_100210794((uint64_t *)&v963, (uint64_t)&v970, v968, *(uint64_t (**)(void))(v112 + 16));
          a1 = v929;
          v532 = v879;
LABEL_191:
          swift_release(v112);
          v580 = v876;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v876,  (os_log_type_t)v854,  "[%s] optimisticSessions - No item set found to apply event: %s -> skipping",  (uint8_t *)a4,  0x16u);
          swift_arrayDestroy(v115, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v115, -1LL, -1LL);
          swift_slowDealloc(a4, -1LL, -1LL);

          swift_release(v948);
          (*(void (**)(char *, uint64_t))(v917 + 8))(v532, v918);
          (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
          swift_release(v877);
LABEL_114:
          unint64_t v125 = (unint64_t)v937;
LABEL_115:
          uint64_t v116 = v903;
          goto LABEL_116;
        }

        (*(void (**)(char *, uint64_t))(v893 + 8))(v896, v894);
        swift_release(v948);
        (*(void (**)(unsigned int *, uint64_t))(v887 + 8))(v128, v493);
        goto LABEL_178;
      }
    }

    uint64_t v403 = swift_bridgeObjectRelease();
    goto LABEL_159;
  }

  uint64_t v955 = 0LL;
LABEL_250:
  swift_bridgeObjectRelease();
  v971 = _swiftEmptyArrayStorage;
  if (!v935)
  {
    LODWORD(v953) = enum case for RoutingItem.SelectionIndicator.selected(_:);
LABEL_300:
    uint64_t v772 = v972[7];
    v937 = v972 + 7;
    uint64_t v773 = 1LL << *((_BYTE *)v972 + 32);
    if (v773 < 64) {
      uint64_t v774 = ~(-1LL << v773);
    }
    else {
      uint64_t v774 = -1LL;
    }
    unint64_t v775 = v774 & v772;
    uint64_t v944 = (unint64_t)(v773 + 63) >> 6;
    v945 = v972;
    swift_bridgeObjectRetain();
    uint64_t v776 = 0LL;
    while (1)
    {
      if (v775)
      {
        uint64_t v947 = (v775 - 1) & v775;
        uint64_t v948 = v776;
        unint64_t v788 = __clz(__rbit64(v775)) | (v776 << 6);
        uint64_t v789 = (uint64_t)v950;
        uint64_t v115 = v955;
      }

      else
      {
        BOOL v739 = __OFADD__(v776, 1LL);
        uint64_t v790 = v776 + 1;
        uint64_t v789 = (uint64_t)v950;
        uint64_t v115 = v955;
        if (v739) {
          goto LABEL_356;
        }
        if (v790 >= v944)
        {
LABEL_348:
          swift_release(v945);
          swift_bridgeObjectRelease();
          a1 = v971;
          swift_bridgeObjectRelease();
          return (uint64_t)a1;
        }

        unint64_t v791 = v937[v790];
        if (!v791)
        {
          uint64_t v792 = v790 + 1;
          if (v790 + 1 >= v944) {
            goto LABEL_348;
          }
          unint64_t v791 = v937[v792];
          if (!v791)
          {
            uint64_t v792 = v790 + 2;
            if (v790 + 2 >= v944) {
              goto LABEL_348;
            }
            unint64_t v791 = v937[v792];
            if (!v791)
            {
              uint64_t v792 = v790 + 3;
              if (v790 + 3 >= v944) {
                goto LABEL_348;
              }
              unint64_t v791 = v937[v792];
              if (!v791)
              {
                while (1)
                {
                  uint64_t v790 = v792 + 1;
                  if (__OFADD__(v792, 1LL)) {
                    goto LABEL_357;
                  }
                  if (v790 >= v944) {
                    goto LABEL_348;
                  }
                  unint64_t v791 = v937[v790];
                  ++v792;
                  if (v791) {
                    goto LABEL_317;
                  }
                }
              }
            }
          }

          uint64_t v790 = v792;
        }

LABEL_317:
        uint64_t v947 = (v791 - 1) & v791;
        uint64_t v948 = v790;
        unint64_t v788 = __clz(__rbit64(v791)) + (v790 << 6);
      }

      v793 = (unint64_t *)(v945[6] + 16 * v788);
      unint64_t v125 = *v793;
      a4 = v793[1];
      uint64_t v794 = (uint64_t)v973;
      swift_bridgeObjectRetain_n(a4, 2LL);
      v951 = (void *)v125;
      uint64_t v795 = sub_1002103C0(v125, a4, v794);
      uint64_t v952 = a4;
      swift_bridgeObjectRelease();
      if (!v795) {
        goto LABEL_358;
      }
      v969 = _swiftEmptyArrayStorage;
      swift_beginAccess(v795 + 32, v968, 0LL, 0LL);
      uint64_t v946 = v795;
      uint64_t v116 = *(void *)(v795 + 32);
      uint64_t v796 = *(void *)(v116 + 56);
      v954 = (uint64_t *)(v116 + 56);
      uint64_t v797 = 1LL << *(_BYTE *)(v116 + 32);
      if (v797 < 64) {
        uint64_t v798 = ~(-1LL << v797);
      }
      else {
        uint64_t v798 = -1LL;
      }
      unint64_t v125 = v798 & v796;
      uint64_t v955 = (unint64_t)(v797 + 63) >> 6;
      swift_bridgeObjectRetain();
      a4 = 0LL;
      while (v125)
      {
        while (1)
        {
          unint64_t v804 = __clz(__rbit64(v125));
          v125 &= v125 - 1;
          unint64_t v805 = v804 | (a4 << 6);
LABEL_337:
          v808 = (uint64_t *)(*(void *)(v116 + 48) + 16 * v805);
          uint64_t v809 = *v808;
          Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v808[1];
          swift_bridgeObjectRetain_n(v23, 2LL);
          sub_10021045C(v957, v809, (uint64_t)v23, v789);
          swift_bridgeObjectRelease();
          uint64_t v810 = v959;
          uint64_t v112 = v949;
          sub_1001A81D4(v789, v949, type metadata accessor for HostedRoutingItem);
          uint64_t v799 = v952;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v112 + swift_weakDestroy(v0 + 16) = v951;
          *(void *)(v112 + 24) = v799;
          *(_BYTE *)(v112 + *(int *)(v810 + 36)) = 1;
          uint64_t v800 = v112 + *(int *)(v810 + 32);
          sub_1001603DC(v800, &qword_1003F8920);
          uint64_t v801 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
          uint64_t v802 = *(void *)(v801 - 8);
          (*(void (**)(uint64_t, void, uint64_t))(v802 + 104))(v800, v953, v801);
          v803 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v802 + 56);
          uint64_t v789 = (uint64_t)v950;
          v803(v800, 0LL, 1LL, v801);
          Swift::String v23 = v956;
          sub_1001A80F8(v112, (uint64_t)v956, type metadata accessor for HostedRoutingItem);
          sub_1002105D0((uint64_t)v23, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
          sub_1001A813C(v112, type metadata accessor for HostedRoutingItem);
          if (!v125) {
            goto LABEL_326;
          }
        }

        sub_1001603DC(v789, &qword_1003F8918);
      }

LABEL_326:
      BOOL v739 = __OFADD__(a4++, 1LL);
      if (v739)
      {
        __break(1u);
        goto LABEL_351;
      }

      if (a4 < v955)
      {
        unint64_t v806 = v954[a4];
        if (v806) {
          goto LABEL_336;
        }
        uint64_t v807 = a4 + 1;
        if (a4 + 1 < v955)
        {
          unint64_t v806 = v954[v807];
          if (v806) {
            goto LABEL_335;
          }
          uint64_t v807 = a4 + 2;
          if (a4 + 2 < v955)
          {
            unint64_t v806 = v954[v807];
            if (v806) {
              goto LABEL_335;
            }
            uint64_t v807 = a4 + 3;
            if (a4 + 3 < v955) {
              break;
            }
          }
        }
      }

LABEL_304:
      uint64_t v955 = v115;
      swift_release(v116);
      uint64_t v777 = (uint64_t)v969;
      uint64_t v778 = v946;
      uint64_t v779 = v946
           + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
      swift_beginAccess( v946 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo,  v967,  0LL,  0LL);
      uint64_t v780 = v939;
      uint64_t v781 = sub_1001A8360(v779, v939, &qword_1003F9450);
      uint64_t v112 = (uint64_t)v940;
      static Date.now.getter(v781);
      uint64_t v782 = type metadata accessor for RoutingSession.HostInfo(0LL);
      uint64_t v783 = v943;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v782 - 8) + 56LL))(v943, 1LL, 1LL, v782);
      Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
      uint64_t v116 = (uint64_t)variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
      uint64_t v784 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
      char v785 = v784;
      uint64_t v786 = (uint64_t)v942;
      j___s12MediaControl15RoutingControlsVACycfC(v784);
      v966[84] = 1;
      uint64_t v823 = v783;
      a4 = (uint64_t)v938;
      sub_10024E3B8( (uint64_t)v951,  v952,  v777,  v780,  (uint64_t)v23,  v116,  v112,  v785 & 1,  v938,  0,  1,  v786,  1397702987LL,  0xE400000000000000LL,  v823);
      v787 = v941;
      unint64_t v125 = (unint64_t)type metadata accessor for HostedRoutingSourceSession;
      sub_1001A80F8(a4, (uint64_t)v941, type metadata accessor for HostedRoutingSourceSession);
      sub_1002105D0((uint64_t)v787, &qword_1003F8EC8, type metadata accessor for HostedRoutingSourceSession);
      swift_release(v778);
      sub_1001A813C(a4, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v776 = v948;
      unint64_t v775 = v947;
    }

    unint64_t v806 = v954[v807];
    if (v806)
    {
LABEL_335:
      a4 = v807;
LABEL_336:
      unint64_t v125 = (v806 - 1) & v806;
      unint64_t v805 = __clz(__rbit64(v806)) + (a4 << 6);
      goto LABEL_337;
    }

    while (1)
    {
      a4 = v807 + 1;
      if (__OFADD__(v807, 1LL)) {
        break;
      }
      if (a4 >= v955) {
        goto LABEL_304;
      }
      unint64_t v806 = v954[a4];
      ++v807;
      if (v806) {
        goto LABEL_336;
      }
    }

LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
LABEL_360:
    swift_errorRelease(v115);
    __break(1u);
LABEL_361:
    swift_errorRelease(a4);
    __break(1u);
    swift_errorRelease(v955);
    __break(1u);
LABEL_362:
    v963 = 0LL;
    unint64_t v964 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    v812._uint64_t countAndFlagsBits = 91LL;
    v812._object = (void *)0xE100000000000000LL;
    DefaultStringInterpolation.appendLiteral(_:)(v812);
    sub_1002082D4(v907);
    v813._object = (void *)0x800000010033D580LL;
    v813._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    DefaultStringInterpolation.appendLiteral(_:)(v813);
    uint64_t v814 = (uint64_t)v859;
    ((void (*)(void))a4)();
    sub_100208300( v814,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action,  &qword_1003F7F88,  (uint64_t)&protocol conformance descriptor for RoutingInteraction.Action);
    v23[1]((uint64_t *)v814, v125);
    v530 = &v963;
    v815._uint64_t countAndFlagsBits = 0LL;
    v815._object = (void *)0xE000000000000000LL;
    DefaultStringInterpolation.appendLiteral(_:)(v815);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v963,  v964,  "mediaremoted/RoutingOptimisticEngine.swift",  42LL,  2LL,  241LL,  0);
    goto LABEL_364;
  }

  uint64_t v931 = (uint64_t)a1 + ((*(unsigned __int8 *)(v936 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v936 + 80));
  LODWORD(v953) = enum case for RoutingItem.SelectionIndicator.selected(_:);
  swift_bridgeObjectRetain();
  unint64_t v125 = 0LL;
  v707 = type metadata accessor for HostedRoutingSourceSession;
  __int128 v915 = xmmword_10034C4E0;
  v914 = (char *)&type metadata for Any + 8;
  uint64_t v116 = (uint64_t)v954;
  while (1)
  {
    if (a1[2] <= v125) {
      goto LABEL_355;
    }
    uint64_t v112 = (uint64_t)a1;
    sub_1001A80F8(v931 + *(void *)(v936 + 72) * v125, v116, v707);
    uint64_t v708 = (uint64_t)v972;
    v709 = v707;
    a4 = *(void *)v116;
    uint64_t v710 = *(void *)(v116 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v115 = v116;
    uint64_t v116 = sub_100158DD4(a4, v710, v708);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v116 & 1) == 0) {
      break;
    }
    sub_1001A813C(v115, v709);
    v707 = v709;
    a1 = (void *)v112;
    uint64_t v116 = v115;
LABEL_253:
    if (++v125 == v935)
    {
      swift_bridgeObjectRelease();
      goto LABEL_300;
    }
  }

  uint64_t v711 = (uint64_t)v973;
  swift_bridgeObjectRetain();
  v712 = (void *)sub_1002103C0(a4, v710, v711);
  swift_bridgeObjectRelease();
  if (!v712) {
    goto LABEL_359;
  }
  a4 = (uint64_t)(v712 + 4);
  swift_beginAccess(v712 + 4, &v963, 0LL, 0LL);
  uint64_t v713 = *(void *)(v712[4] + 16LL);
  v930 = (uint64_t (**)(uint64_t *, unint64_t))v125;
  v937 = v712;
  if (v713) {
    goto LABEL_267;
  }
  a1 = (void *)v112;
  uint64_t v116 = v115;
  uint64_t v714 = v712[2];
  uint64_t v715 = v712[3];
  if (v714 == v919 && v715 == v916) {
    goto LABEL_267;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v714, v715, v919, v916, 0LL) & 1) != 0) {
    goto LABEL_267;
  }
  if ((sub_10024B254() & 1) == 0)
  {
    v707 = type metadata accessor for HostedRoutingSourceSession;
    sub_1001A813C(v115, type metadata accessor for HostedRoutingSourceSession);
    swift_release(v937);
    goto LABEL_253;
  }

  uint64_t v716 = sub_1001741A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v917 + 16))(v901, v716, v918);
  uint64_t v717 = swift_allocObject(&unk_1003A79C8, 24LL, 7LL);
  *(void *)(v717 + swift_weakDestroy(v0 + 16) = v907;
  v718 = (void *)Logger.logObject.getter(v717);
  int v719 = static os_log_type_t.error.getter();
  uint64_t v720 = swift_allocObject(&unk_1003A79F0, 17LL, 7LL);
  *(_BYTE *)(v720 + swift_weakDestroy(v0 + 16) = 32;
  uint64_t v721 = swift_allocObject(&unk_1003A7A18, 17LL, 7LL);
  *(_BYTE *)(v721 + swift_weakDestroy(v0 + 16) = 8;
  uint64_t v722 = swift_allocObject(&unk_1003A7A40, 32LL, 7LL);
  *(void *)(v722 + swift_weakDestroy(v0 + 16) = sub_100212BE0;
  *(void *)(v722 + 24) = v717;
  uint64_t v116 = swift_allocObject(&unk_1003A7A68, 32LL, 7LL);
  *(void *)(v116 + swift_weakDestroy(v0 + 16) = sub_1002119EC;
  *(void *)(v116 + 24) = v722;
  uint64_t v112 = swift_allocObject(&unk_1003A7A90, 32LL, 7LL);
  *(void *)(v112 + swift_weakDestroy(v0 + 16) = sub_1001840B4;
  *(void *)(v112 + 24) = v116;
  uint64_t v723 = sub_100156B68(&qword_1003FABA0);
  uint64_t v724 = swift_initStackObject(v723, v966);
  *(_OWORD *)(v724 + swift_weakDestroy(v0 + 16) = v915;
  *(void *)(v724 + 32) = sub_1002119C8;
  *(void *)(v724 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v720;
  *(void *)(v724 + 48) = sub_100212DA8;
  *(void *)(v724 + 56) = v721;
  *(void *)(v724 + 64) = sub_1002119F0;
  *(void *)(v724 + 72) = v112;
  swift_retain(v720);
  swift_retain(v721);
  swift_retain(v112);
  swift_bridgeObjectRelease();
  LODWORD(v952) = v719;
  if (!os_log_type_enabled((os_log_t)v718, (os_log_type_t)v719))
  {
    swift_release(v720);
    swift_release(v721);
    swift_release(v112);

    (*(void (**)(char *, uint64_t))(v917 + 8))(v901, v918);
    goto LABEL_267;
  }

  uint64_t v725 = v918;
  v726 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  v727 = (void *)swift_slowAlloc(32LL, -1LL);
  v967[0] = 0LL;
  v951 = v727;
  v969 = v727;
  *(_WORD *)v726 = 258;
  v726[2] = *(_BYTE *)(v720 + 16);
  uint64_t v116 = v955;
  if (!v955)
  {
    swift_release(v720);
    v726[3] = *(_BYTE *)(v721 + 16);
    v968[0] = (uint64_t)(v726 + 4);
    swift_release(v721);
    sub_100210794(v968, (uint64_t)v967, (uint64_t *)&v969, *(uint64_t (**)(void))(v112 + 16));
    uint64_t v728 = v917;
    v729 = v901;
    swift_release(v112);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v718,  (os_log_type_t)v952,  "[%s] optimisticSessions - Local item set is empty",  v726,  0xCu);
    uint64_t v116 = (uint64_t)v951;
    swift_arrayDestroy(v951, 1LL, v914);
    swift_slowDealloc(v116, -1LL, -1LL);
    swift_slowDealloc(v726, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v728 + 8))(v729, v725);
LABEL_267:
    v968[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v730 = *(void *)a4;
    uint64_t v731 = *(void *)(*(void *)a4 + 56LL);
    uint64_t v948 = *(void *)a4 + 56LL;
    uint64_t v732 = 1LL << *(_BYTE *)(v730 + 32);
    if (v732 < 64) {
      uint64_t v733 = ~(-1LL << v732);
    }
    else {
      uint64_t v733 = -1LL;
    }
    unint64_t v125 = v733 & v731;
    v951 = (void *)((unint64_t)(v732 + 63) >> 6);
    uint64_t v952 = v730;
    swift_bridgeObjectRetain();
    uint64_t v734 = 0LL;
    while (1)
    {
      if (v125)
      {
        unint64_t v737 = __clz(__rbit64(v125));
        v125 &= v125 - 1;
        unint64_t v738 = v737 | (v734 << 6);
        uint64_t v115 = v955;
      }

      else
      {
        BOOL v739 = __OFADD__(v734++, 1LL);
        uint64_t v115 = v955;
        if (v739)
        {
LABEL_351:
          __break(1u);
          goto LABEL_352;
        }

        uint64_t v112 = (uint64_t)v954;
        if (v734 >= (uint64_t)v951)
        {
LABEL_294:
          uint64_t v753 = v927;
          uint64_t v754 = (uint64_t)v926;
          uint64_t v755 = v932;
          uint64_t v756 = v934;
          swift_release(v952);
          sub_1001A8360(v112 + *(int *)(v933 + 28), v755, &qword_1003F9450);
          uint64_t v757 = (uint64_t)v937
               + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
          swift_beginAccess( (char *)v937 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo,  &v970,  0LL,  0LL);
          sub_1001A8360(v757, v754, &qword_1003F9450);
          uint64_t v758 = v928;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v753 + 48))(v754, 1LL, v928) == 1)
          {
            sub_1001603DC(v754, &qword_1003F9450);
          }

          else
          {
            sub_1001603DC(v755, &qword_1003F9450);
            uint64_t v759 = v909;
            sub_1001A81D4(v754, v909, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            sub_1001A81D4(v759, v755, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v753 + 56))(v755, 0LL, 1LL, v758);
          }

          uint64_t v760 = *(void *)(v112 + 8);
          uint64_t v952 = *(void *)v112;
          v951 = (void *)v968[0];
          sub_1001A8360(v755, v756, &qword_1003F9450);
          v761 = (int *)v933;
          uint64_t v762 = (uint64_t)v921;
          (*(void (**)(char *, uint64_t, uint64_t))(v922 + 16))(v921, v112 + *(int *)(v933 + 60), v923);
          uint64_t v763 = v761[12];
          LODWORD(v948) = *(unsigned __int8 *)(v112 + v761[13]);
          uint64_t v764 = *(unsigned int *)(v112 + v763);
          unsigned __int8 v765 = *(_BYTE *)(v112 + v763 + 4);
          v766 = v942;
          (*(void (**)(char *, uint64_t, uint64_t))(v924 + 16))(v942, v112 + v761[8], v925);
          uint64_t v767 = *(void *)(v112 + 16);
          uint64_t v112 = v954[3];
          uint64_t v768 = (uint64_t)v954 + v761[14];
          uint64_t v769 = v943;
          sub_1001A8360(v768, v943, &qword_1003F9448);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v770 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
          v771 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
          LOBYTE(v967[0]) = v765;
          uint64_t v822 = (uint64_t)v766;
          uint64_t v116 = (uint64_t)v954;
          unint64_t v821 = v764 | ((unint64_t)v765 << 32);
          uint64_t v115 = (uint64_t)v941;
          sub_10024E3B8( v952,  v760,  (uint64_t)v951,  v934,  (uint64_t)v770,  (uint64_t)v771,  v762,  v948,  v941,  v821,  SBYTE4(v821),  v822,  v767,  v112,  v769);
          a4 = v920;
          sub_1001A80F8(v115, v920, type metadata accessor for HostedRoutingSourceSession);
          sub_1002105D0(a4, &qword_1003F8EC8, type metadata accessor for HostedRoutingSourceSession);
          v707 = type metadata accessor for HostedRoutingSourceSession;
          swift_release(v937);
          sub_1001A813C(v115, type metadata accessor for HostedRoutingSourceSession);
          sub_1001603DC(v932, &qword_1003F9450);
          sub_1001A813C(v116, type metadata accessor for HostedRoutingSourceSession);
          a1 = v929;
          Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
          unint64_t v125 = (unint64_t)v930;
          goto LABEL_253;
        }

        unint64_t v740 = *(void *)(v948 + 8 * v734);
        if (!v740)
        {
          uint64_t v741 = v734 + 1;
          unint64_t v740 = *(void *)(v948 + 8 * v741);
          if (!v740)
          {
            uint64_t v741 = v734 + 2;
            unint64_t v740 = *(void *)(v948 + 8 * v741);
            if (!v740)
            {
              uint64_t v741 = v734 + 3;
              unint64_t v740 = *(void *)(v948 + 8 * v741);
              if (!v740)
              {
                while (1)
                {
                  uint64_t v734 = v741 + 1;
                  if (__OFADD__(v741, 1LL)) {
                    goto LABEL_353;
                  }
                  unint64_t v740 = *(void *)(v948 + 8 * v734);
                  ++v741;
                  if (v740) {
                    goto LABEL_284;
                  }
                }
              }
            }
          }

          uint64_t v734 = v741;
        }

LABEL_284:
        unint64_t v125 = (v740 - 1) & v740;
        unint64_t v738 = __clz(__rbit64(v740)) + (v734 << 6);
      }

      v742 = (uint64_t *)(*(void *)(v952 + 48) + 16 * v738);
      uint64_t v744 = *v742;
      uint64_t v743 = v742[1];
      swift_bridgeObjectRetain_n(v743, 2LL);
      uint64_t v745 = swift_bridgeObjectRetain();
      sub_10021045C(v745, v744, v743, (uint64_t)v23);
      swift_bridgeObjectRelease();
      uint64_t v116 = *(void *)(v958 + 48);
      uint64_t v112 = v959;
      if (((unsigned int (*)(uint64_t (**)(uint64_t *, unint64_t), uint64_t, uint64_t))v116)( v23,  1LL,  v959) == 1)
      {
        a4 = (uint64_t)&qword_1003F8918;
        sub_1001603DC((uint64_t)v23, &qword_1003F8918);
        swift_bridgeObjectRetain();
        uint64_t v746 = v946;
        sub_10021045C(v957, v744, v743, v946);
        uint64_t v955 = v115;
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v116)(v746, 1LL, v112) == 1)
        {
          sub_1001603DC(v746, &qword_1003F8918);
        }

        else
        {
          uint64_t v747 = v944;
          a4 = (uint64_t)type metadata accessor for HostedRoutingItem;
          sub_1001A81D4(v746, v944, type metadata accessor for HostedRoutingItem);
          uint64_t v749 = *v954;
          uint64_t v748 = v954[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v747 + swift_weakDestroy(v0 + 16) = v749;
          *(void *)(v747 + 24) = v748;
          *(_BYTE *)(v747 + *(int *)(v112 + 36)) = 1;
          uint64_t v750 = v747 + *(int *)(v112 + 32);
          sub_1001603DC(v750, &qword_1003F8920);
          uint64_t v751 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
          uint64_t v116 = *(void *)(v751 - 8);
          (*(void (**)(uint64_t, void, uint64_t))(v116 + 104))(v750, v953, v751);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v116 + 56))(v750, 0LL, 1LL, v751);
          uint64_t v752 = (uint64_t)v956;
          sub_1001A80F8(v747, (uint64_t)v956, type metadata accessor for HostedRoutingItem);
          sub_1002105D0(v752, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
          sub_1001A813C(v747, type metadata accessor for HostedRoutingItem);
        }

        Swift::String v23 = (uint64_t (**)(uint64_t *, unint64_t))v947;
      }

      else
      {
        uint64_t v955 = v115;
        swift_bridgeObjectRelease();
        uint64_t v735 = (uint64_t)v945;
        a4 = (uint64_t)type metadata accessor for HostedRoutingItem;
        sub_1001A81D4((uint64_t)v23, (uint64_t)v945, type metadata accessor for HostedRoutingItem);
        uint64_t v736 = (uint64_t)v956;
        sub_1001A80F8(v735, (uint64_t)v956, type metadata accessor for HostedRoutingItem);
        sub_1002105D0(v736, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
        sub_1001A813C(v735, type metadata accessor for HostedRoutingItem);
      }
    }
  }

LABEL_367:
  uint64_t result = swift_errorRelease(v116);
  __break(1u);
  return result;
}

BOOL sub_100210360(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return v2 == 0;
}

uint64_t sub_1002103C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_10015CAD4(a1, a2), (v5 & 1) != 0)) {
    return swift_retain(*(void *)(*(void *)(a3 + 56) + 8 * v4));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100210400(uint64_t a1)
{
  if (a1 < 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
  swift_bridgeObjectRelease(a1);
  return v4;
}

uint64_t sub_10021045C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v21 = v11;
    uint64_t v22 = a4;
    uint64_t v23 = v4;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A80F8(v15, (uint64_t)v13, type metadata accessor for HostedRoutingItem);
      uint64_t v17 = v13[1];
      BOOL v18 = *v13 == a2 && v17 == a3;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v17, a2, a3, 0LL) & 1) != 0) {
        break;
      }
      sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingItem);
      v15 += v16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = 1LL;
        uint64_t v11 = v21;
        a4 = v22;
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease();
    a4 = v22;
    sub_1001A81D4((uint64_t)v13, v22, type metadata accessor for HostedRoutingItem);
    uint64_t v19 = 0LL;
    uint64_t v11 = v21;
  }

  else
  {
    uint64_t v19 = 1LL;
  }

uint64_t sub_1002105D0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  unint64_t v7 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native(*v3) & 1) == 0) {
    unint64_t v7 = sub_10019F720(0, *(void *)(v7 + 16) + 1LL, 1, v7, a2, a3);
  }
  unint64_t v9 = *(void *)(v7 + 16);
  unint64_t v8 = *(void *)(v7 + 24);
  if (v9 >= v8 >> 1) {
    unint64_t v7 = sub_10019F720(v8 > 1, v9 + 1, 1, v7, a2, a3);
  }
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v9 + 1;
  uint64_t v10 = a3(0LL);
  uint64_t result = sub_1001A81D4( a1,  v7 + ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
           + *(void *)(*(void *)(v10 - 8) + 72LL) * v9,
             a3);
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002106B4(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1 = type metadata accessor for RoutingTimeline.Event(0LL);
  uint64_t v2 = sub_100156FEC(&qword_1003FAD80, type metadata accessor for RoutingTimeline.Event, (uint64_t)&unk_10034D450);
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  swift_release(v5);
  return v3;
}

uint64_t sub_100210730(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1 = v5;
  uint64_t v2 = type metadata accessor for RoutingOptimisticEngine.ItemSet(0LL);
  uint64_t v3 = Array.description.getter(v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100210794(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_10015ADC4(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9, v10);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

Swift::Int sub_100210804(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FAD78);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_100210B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FAD88);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_100210E1C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_DWORD *)(v17 + 4 * v3);
          unint64_t v19 = (_DWORD *)(v17 + 4 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            _DWORD *v18 = *v19;
            int64_t v3 = v6;
          }
        }

uint64_t sub_100210FF0(uint64_t a1, uint64_t a2, char a3, float a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002112A0();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }

uint64_t sub_100211144(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10021144C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void *sub_1002112A0()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FAD78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10021144C()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FAD88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_100211600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = (uint64_t)v4
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  v4[2] = a1;
  void v4[3] = a2;
  unint64_t v15 = sub_100197884(a3);
  uint64_t v16 = sub_1001A6418((uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v47 = v4;
  v4[4] = v16;
  swift_beginAccess(v13, v49, 33LL, 0LL);
  uint64_t v46 = a4;
  sub_100212B88(a4, v13);
  swift_endAccess(v49);
  uint64_t v17 = *(void *)(a3 + 16);
  if (!v17)
  {
    unint64_t v21 = &_swiftEmptyDictionarySingleton;
LABEL_23:
    sub_1001603DC(v46, &qword_1003F9450);
    uint64_t result = (uint64_t)v47;
    v47[5] = v21;
    return result;
  }

  uint64_t v18 = (char *)v12 + *(int *)(v9 + 48);
  uint64_t v19 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v20 = *(void *)(v10 + 72);
  unint64_t v21 = &_swiftEmptyDictionarySingleton;
  uint64_t v48 = v12;
  while (1)
  {
    sub_1001A80F8(v19, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
    uint64_t v23 = *v12;
    uint64_t v22 = v12[1];
    int v24 = *(_DWORD *)v18;
    char v25 = v18[4];
    swift_bridgeObjectRetain();
    sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingItem);
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v26 = sub_10015CAD4(v23, v22);
      char v28 = v27;
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
        v49[0] = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002112A0();
          unint64_t v21 = (void *)v49[0];
        }

        swift_bridgeObjectRelease();
        sub_100210E1C(v26, (uint64_t)v21);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      goto LABEL_4;
    }

    uint64_t v30 = v18;
    uint64_t v31 = v20;
    uint64_t v32 = swift_isUniquelyReferenced_nonNull_native(v21);
    v49[0] = v21;
    unint64_t v34 = sub_10015CAD4(v23, v22);
    uint64_t v35 = v21[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v21[3] >= v37)
    {
      if ((v32 & 1) != 0)
      {
        unint64_t v21 = (void *)v49[0];
        if ((v33 & 1) == 0) {
          goto LABEL_14;
        }
      }

      else
      {
        sub_1002112A0();
        unint64_t v21 = (void *)v49[0];
        if ((v38 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }

    else
    {
      sub_100210804(v37, v32);
      unint64_t v39 = sub_10015CAD4(v23, v22);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_26;
      }
      unint64_t v34 = v39;
      unint64_t v21 = (void *)v49[0];
      if ((v38 & 1) == 0)
      {
LABEL_14:
        v21[(v34 >> 6) + 8] |= 1LL << v34;
        uint64_t v41 = (uint64_t *)(v21[6] + 16 * v34);
        *uint64_t v41 = v23;
        v41[1] = v22;
        *(_DWORD *)(v21[7] + 4 * v34) = v24;
        uint64_t v42 = v21[2];
        BOOL v43 = __OFADD__(v42, 1LL);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_25;
        }
        v21[2] = v44;
        swift_bridgeObjectRetain();
        goto LABEL_19;
      }
    }

    *(_DWORD *)(v21[7] + 4 * v34) = v24;
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v31;
    uint64_t v18 = v30;
    unint64_t v12 = v48;
LABEL_4:
    v19 += v20;
    if (!--v17) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RoutingOptimisticEngine.ItemSet(uint64_t a1)
{
  uint64_t result = qword_100400AE8;
  if (!qword_100400AE8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoutingOptimisticEngine.ItemSet);
  }
  return result;
}

uint64_t sub_1002119A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002119B8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_BYTE **sub_1002119C8(_BYTE **result)
{
  uint64_t v2 = *result;
  _BYTE *v2 = *(_BYTE *)(v1 + 16);
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_1002119DC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002119F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100210794(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002119F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100211A08()
{
  return sub_1002106B4(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100211A10()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A20()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A30()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A40()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A50()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100211A60()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A70()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A80()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211A90()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211AA0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100211AB0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100211AD4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211AE4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211AF4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B04()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B14()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100211B24()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B34()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B44()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B54()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B64()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100211B74()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B84()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211B94()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100211BA4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void *sub_100211BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for RoutingOptimisticEngine.ItemSet(0LL);
  uint64_t v11 = (void *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v12 = (uint64_t)v11
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  uint64_t v13 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  v11[2] = a1;
  v11[3] = a2;
  uint64_t v14 = sub_100156B68(&qword_1003F8620);
  uint64_t inited = swift_initStackObject(v14, v19);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a4;
  uint64_t v16 = sub_1001A6418(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
  v11[4] = v16;
  swift_beginAccess(v12, v18, 33LL, 0LL);
  sub_100212B88(a5, v12);
  swift_endAccess(v18);
  sub_1001603DC(a5, &qword_1003F9450);
  v11[5] = &_swiftEmptyDictionarySingleton;
  return v11;
}

uint64_t sub_100211CEC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v8 = i - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      uint64_t v10 = i - 3;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_20;
      }
LABEL_12:
      if ((a2 & 1) != 0)
      {
        uint64_t v12 = *(void *)(v9 + 16);
        uint64_t v11 = *(void *)(v9 + 24);
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_10024B258();
        uint64_t v14 = *((void *)v13 + 1);
        if (v12 == *(void *)v13 && v11 == v14) {
          goto LABEL_5;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, *(void *)v13, v14, 0LL);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          swift_release(v9);
          goto LABEL_6;
        }
      }

      swift_beginAccess(v9 + 32, v20, 33LL, 0LL);
      sub_10015CCDC(a3, v21);
      swift_endAccess(v20);
LABEL_5:
      swift_release(v9);
      swift_bridgeObjectRelease();
LABEL_6:
      if (v10 == v6) {
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t v9 = *(void *)(a1 + 8 * i);
    swift_retain(v9);
    uint64_t v10 = i - 3;
    if (!__OFADD__(v8, 1LL)) {
      goto LABEL_12;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v17);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100211E80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  int64_t v5 = 0LL;
  uint64_t v42 = &_swiftEmptyArrayStorage;
  uint64_t v36 = result;
  uint64_t v37 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v38 = (unint64_t)(v6 + 63) >> 6;
LABEL_6:
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v5 << 6);
LABEL_19:
    uint64_t v14 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
    uint64_t result = swift_beginAccess(v14 + 32, v41, 0LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 32);
    if (*(void *)(v15 + 16))
    {
      Hasher.init(_seed:)(v40, *(void *)(v15 + 40));
      swift_retain(v14);
      swift_bridgeObjectRetain(v15);
      String.hash(into:)(v40, v3, a3);
      Swift::Int v16 = Hasher._finalize()();
      uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
      unint64_t v18 = v16 & ~v17;
      uint64_t v19 = v15 + 56;
      if (((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0)
      {
        uint64_t v20 = *(void *)(v15 + 48);
        uint64_t v21 = (void *)(v20 + 16 * v18);
        uint64_t v22 = v21[1];
        if (*v21 == v3 && v22 == a3)
        {
LABEL_27:
          uint64_t v24 = swift_bridgeObjectRelease(v15);
          uint64_t v4 = v36;
LABEL_28:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
          uint64_t v25 = v42[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
          uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v14);
          uint64_t result = specialized ContiguousArray._endMutation()(v26);
        }

        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v3, a3, 0LL) & 1) != 0)
          {
            uint64_t v24 = swift_bridgeObjectRelease(v15);
            uint64_t v3 = a2;
            uint64_t v4 = v36;
            goto LABEL_28;
          }

          uint64_t v27 = ~v17;
          unint64_t v28 = (v18 + 1) & v27;
          if (((*(void *)(v19 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) != 0)
          {
            uint64_t v29 = a3;
            uint64_t v3 = a2;
            while (1)
            {
              uint64_t v30 = (void *)(v20 + 16 * v28);
              uint64_t v31 = v30[1];
              if (*v30 == a2 && v31 == v29) {
                goto LABEL_27;
              }
              char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, a2, a3, 0LL);
              uint64_t v29 = a3;
              if ((v33 & 1) != 0) {
                goto LABEL_27;
              }
              unint64_t v28 = (v28 + 1) & v27;
              if (((*(void *)(v19 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0)
              {
                swift_release(v14);
                uint64_t result = swift_bridgeObjectRelease(v15);
                uint64_t v4 = v36;
                goto LABEL_6;
              }
            }
          }

          swift_release(v14);
          uint64_t result = swift_bridgeObjectRelease(v15);
          uint64_t v3 = a2;
          uint64_t v4 = v36;
        }
      }

      else
      {
        swift_release(v14);
        uint64_t result = swift_bridgeObjectRelease(v15);
      }
    }
  }

  if (__OFADD__(v5++, 1LL))
  {
    __break(1u);
    goto LABEL_48;
  }

  if (v5 >= v38) {
    goto LABEL_46;
  }
  unint64_t v12 = *(void *)(v37 + 8 * v5);
  if (v12)
  {
LABEL_18:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
    goto LABEL_19;
  }

  int64_t v13 = v5 + 1;
  if (v5 + 1 >= v38) {
    goto LABEL_46;
  }
  unint64_t v12 = *(void *)(v37 + 8 * v13);
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v5 + 2;
  if (v5 + 2 >= v38) {
    goto LABEL_46;
  }
  unint64_t v12 = *(void *)(v37 + 8 * v13);
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v5 + 3;
  if (v5 + 3 >= v38) {
    goto LABEL_46;
  }
  unint64_t v12 = *(void *)(v37 + 8 * v13);
  if (v12)
  {
LABEL_17:
    int64_t v5 = v13;
    goto LABEL_18;
  }

  int64_t v34 = v5 + 4;
  if (v5 + 4 >= v38)
  {
LABEL_46:
    swift_release(v4);
    return (uint64_t)v42;
  }

  unint64_t v12 = *(void *)(v37 + 8 * v34);
  v5 += 4LL;
  if (v12) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v5 >= v38) {
      goto LABEL_46;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v5);
    ++v34;
    if (v12) {
      goto LABEL_18;
    }
  }

uint64_t sub_100212204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v8)
  {
    uint64_t v15 = v4;
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v10 = i - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      uint64_t v4 = i - 3;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_11;
      }
LABEL_9:
      swift_beginAccess(v11 + 32, v14, 33LL, 0LL);
      sub_10015CCDC(a2, a3);
      swift_endAccess(v14);
      swift_release(v11);
      swift_bridgeObjectRelease();
      if (v4 == v8) {
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t v11 = *(void *)(a1 + 8 * i);
    swift_retain(v11);
    uint64_t v4 = i - 3;
    if (!__OFADD__(v10, 1LL)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v12);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100212344()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100212354()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100212378()
{
  return sub_100210730(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100212380()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212390()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002123A0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002123B0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002123C0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002123D0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002123E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002123F0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212400()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212410()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212420()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100212478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002124C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002124D0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002124E0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002124F0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212500()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212510()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212520()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212530()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100212540()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212550()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212560()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212570()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212580()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100212590()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002125A0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002125B0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002125C0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002125D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002125E0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1002125EC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002125FC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021260C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021261C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021262C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021263C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021264C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10021265C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021266C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021267C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021268C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021269C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002126AC@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain(v1);
}

uint64_t sub_1002126B8()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v4);
  uint64_t v1 = v4;
  uint64_t v2 = sub_10020802C();
  swift_release(v1);
  return v2;
}

uint64_t sub_10021270C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100212730()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10021275C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021276C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021277C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021278C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10021279C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002127AC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002127BC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002127CC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002127DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002127EC()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1002127F4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212804()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212814()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212824()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212834()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100212844()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212854()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212864()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 16))();
  return _typeName(_:qualified:)(v1, 0LL);
}

uint64_t sub_100212888()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100212898()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002128A8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002128B8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t type metadata accessor for RoutingOptimisticEngine()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted23RoutingOptimisticEngine);
}

uint64_t sub_1002128E8()
{
  return type metadata accessor for RoutingOptimisticEngine.ItemSet(0LL);
}

void sub_1002128F0(uint64_t a1)
{
  v4[0] = &unk_10034DEF8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100212978(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void sub_100212978(uint64_t a1)
{
  if (!qword_1003FAC70)
  {
    uint64_t v2 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1003FAC70);
    }
  }

uint64_t destroy for RoutingOptimisticEngine.OptimisticState(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s12mediaremoted23RoutingOptimisticEngineC15OptimisticStateVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for RoutingOptimisticEngine.OptimisticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for HostedRoutingSessionDataSource.SessionElements(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for RoutingOptimisticEngine.OptimisticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingOptimisticEngine.OptimisticState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingOptimisticEngine.OptimisticState( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RoutingOptimisticEngine.OptimisticState()
{
  return &type metadata for RoutingOptimisticEngine.OptimisticState;
}

uint64_t sub_100212B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void sub_100212DAC()
{
  id v1 = [v0 sortingHint];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 doubleValue];
  }

uint64_t sub_100212E1C()
{
  return sub_1002139EC(&OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate);
}

uint64_t sub_100212E34(uint64_t a1)
{
  return sub_100213A94(a1, &OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate);
}

void (*sub_100212E40(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_100212EB0;
}

id sub_100212EB4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_100212F0C(a1, a2, a3, a4);
}

id sub_100212F0C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v9 = &v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate];
  uint64_t v10 = swift_unknownObjectWeakInit(&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate], 0LL);
  swift_beginAccess(v10, v20, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v9, a1);
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_queue] = a2;
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommender] = a3;
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore] = a4;
  v19.receiver = v4;
  v19.super_class = (Class)type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider();
  id v11 = a2;
  swift_unknownObjectRetain(a3);
  id v12 = a4;
  id v13 = objc_msgSendSuper2(&v19, "init");
  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v15 = v13;
  id v16 = [v14 defaultCenter];
  id v17 = v15;
  [v16 addObserver:v17 selector:"update" name:@"MRRouteRecommenderDidReceiveNewRecommendationsNotification" object:0];

  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);

  return v17;
}

uint64_t sub_1002130EC()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[1] = *(void *)((char *)v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_queue);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x70LL))(v6);
  uint64_t v10 = swift_allocObject(&unk_1003A9A60, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v9;
  aBlock[4] = sub_100214374;
  uint64_t v21 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A9A78;
  id v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_unknownObjectRetain(v9);
  static DispatchQoS.unspecified.getter(v12);
  objc_super v19 = _swiftEmptyArrayStorage;
  unint64_t v13 = sub_1002143A4();
  uint64_t v14 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v15 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v3, v11);
  _Block_release(v11);
  swift_unknownObjectRelease(v9);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return swift_release(v21);
}

uint64_t sub_100213370()
{
  id v1 =  [*(id *)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore) recommendedRoutes];
  uint64_t v2 = sub_100156B68(&qword_1003FBEC0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    goto LABEL_17;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_48;
  }

  for (uint64_t i = 0LL; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001LL) != 0)
    {
      uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
    }

    else
    {
      uint64_t v8 = *(void **)(v3 + 8 * i + 32);
      swift_unknownObjectRetain(v8);
    }

    id v9 = [v8 isLockScreenControl];
    if ((_DWORD)v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      uint64_t v6 = *(void *)(v38 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
      specialized ContiguousArray._endMutation()(v7);
    }

    else
    {
      swift_unknownObjectRelease(v8);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v10 = v38;
LABEL_18:
  swift_bridgeObjectRetain();
  if ((v10 & 0x8000000000000000LL) != 0 || (uint64_t v12 = (void *)v10, (v10 & 0x4000000000000000LL) != 0))
  {
    uint64_t v12 = sub_1002143EC(v10);
    swift_release(v10);
  }

  unint64_t v38 = (unint64_t)v12;
  sub_1002144E0((uint64_t *)&v38);
  swift_release(v10);
  uint64_t v13 = v38;
  if ((v38 & 0x8000000000000000LL) == 0 && (v38 & 0x4000000000000000LL) == 0)
  {
    uint64_t v14 = *(void *)(v38 + 16);
    if (v14) {
      goto LABEL_23;
    }
LABEL_44:
    swift_release(v13);
    id v16 = _swiftEmptyArrayStorage;
    uint64_t v26 = _swiftEmptyArrayStorage[2];
    if (v26)
    {
LABEL_32:
      uint64_t v27 = v16 + 5;
      unint64_t v28 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v33 = *(v27 - 1);
        uint64_t v32 = *v27;
        uint64_t v34 = HIBYTE(*v27) & 0xF;
        if ((*v27 & 0x2000000000000000LL) == 0) {
          uint64_t v34 = v33 & 0xFFFFFFFFFFFFLL;
        }
        if (v34)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
          unint64_t v38 = (unint64_t)v28;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10015DCE8(0, v28[2] + 1LL, 1);
            unint64_t v28 = (void *)v38;
          }

          unint64_t v30 = v28[2];
          unint64_t v29 = v28[3];
          if (v30 >= v29 >> 1)
          {
            sub_10015DCE8(v29 > 1, v30 + 1, 1);
            unint64_t v28 = (void *)v38;
          }

          uint64_t v28[2] = v30 + 1;
          uint64_t v31 = &v28[2 * v30];
          v31[4] = v33;
          v31[5] = v32;
        }

        v27 += 2;
        --v26;
      }

      while (v26);
      goto LABEL_46;
    }

id sub_100213768()
{
  uint64_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (void *)*sub_100173E44();
  uint64_t v3 = sub_100156B68(&qword_1003FADD0);
  uint64_t v4 = swift_allocObject(v3, 112LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
  id v18 = *(void **)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommender);
  uint64_t v5 = v18;
  id v6 = v2;
  swift_unknownObjectRetain(v18);
  uint64_t v7 = sub_100156B68(&qword_1003FADD8);
  uint64_t v8 = String.init<A>(describing:)(&v18, v7);
  uint64_t v10 = v9;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v11 = sub_1002157E0();
  *(void *)(v4 + 64) = v11;
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v10;
  id v12 = *(id *)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore);
  id v13 = [v12 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v11;
  *(void *)(v4 + 72) = v14;
  *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v16;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v6, ">>+ Requesting current context %@ %@", 36LL, 2LL, v4);

  swift_bridgeObjectRelease();
  return [v5 requestCurrentContext];
}

id sub_10021392C()
{
  return sub_1002142B8(type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider);
}

id sub_10021399C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return (id)swift_unknownObjectWeakLoadStrong(v3);
}

uint64_t sub_1002139E0()
{
  return sub_1002139EC(&OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate);
}

uint64_t sub_1002139EC(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v2);
}

uint64_t sub_100213A3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1 + *a4;
  swift_beginAccess(v5, v7, 1LL, 0LL);
  return swift_unknownObjectWeakAssign(v5, a3);
}

uint64_t sub_100213A88(uint64_t a1)
{
  return sub_100213A94(a1, &OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate);
}

uint64_t sub_100213A94(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess(v4, v6, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_100213AE8(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_100212EB0;
}

uint64_t sub_100213BC0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers);
  swift_beginAccess(v0 + OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100213C6C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100213CBC(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_100213D00(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100213D40(a1, a2);
}

id sub_100213D40(uint64_t a1, void *a2)
{
  id v5 = &v2[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate];
  uint64_t v6 = swift_unknownObjectWeakInit(&v2[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate], 0LL);
  swift_beginAccess(v6, v22, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v5, a1);
  *(void *)&v2[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_queue] = a2;
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___MRUserSettings);
  uint64_t v8 = v2;
  id v9 = a2;
  id result = [v7 currentSettings];
  if (result)
  {
    unint64_t v11 = result;
    id v12 = [result nearbyDeviceIdentifiers];

    if (v12)
    {
      id v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);
    }

    else
    {
      id v13 = _swiftEmptyArrayStorage;
    }

    *(void *)&v8[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers] = v13;

    v21.receiver = v8;
    v21.super_class = (Class)type metadata accessor for UserDefaultsLockScreenRoutingProvider();
    id v14 = objc_msgSendSuper2(&v21, "init");
    uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    id v16 = v14;
    id v17 = [v15 defaultCenter];
    id v18 = v16;
    id result = [v7 currentSettings];
    if (result)
    {
      id v19 = result;
      id v20 = [result nearbyDeviceIdentifiersDidChangeNotification];

      [v17 addObserver:v18 selector:"update" name:v20 object:0];
      swift_unknownObjectRelease(a1);

      return v18;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_100213F7C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v23 - 8);
  uint64_t v5 = __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x80LL))(v5);
  id result = [(id)objc_opt_self(MRUserSettings) currentSettings];
  if (result)
  {
    uint64_t v10 = result;
    id v11 = [result nearbyDeviceIdentifiers];

    if (v11)
    {
      id v12 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String);
    }

    else
    {
      id v12 = _swiftEmptyArrayStorage;
    }

    id v13 = *(void (**)(uint64_t))((swift_isaMask & *v0) + 0x88LL);
    uint64_t v14 = swift_bridgeObjectRetain();
    v13(v14);
    LOBYTE(v13) = sub_1001AE868(v8, v12);
    swift_bridgeObjectRelease();
    id result = (id)swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      uint64_t v15 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x68LL))(result);
      uint64_t v16 = swift_allocObject(&unk_1003A9AB0, 24LL, 7LL);
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v15;
      aBlock[4] = sub_100215844;
      uint64_t v27 = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100157EA8;
      aBlock[3] = &unk_1003A9AC8;
      id v17 = _Block_copy(aBlock);
      uint64_t v18 = swift_unknownObjectRetain(v15);
      static DispatchQoS.unspecified.getter(v18);
      uint64_t v25 = _swiftEmptyArrayStorage;
      unint64_t v19 = sub_1002143A4();
      uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v1, v19);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v17);
      _Block_release(v17);
      swift_unknownObjectRelease(v15);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v1);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v23);
      return (id)swift_release(v27);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1002142AC()
{
  return sub_1002142B8(type metadata accessor for UserDefaultsLockScreenRoutingProvider);
}

id sub_1002142B8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider()
{
  return objc_opt_self(&OBJC_CLASS___MRDIntelligentRoutingLockScreenRoutingProvider);
}

uint64_t sub_100214350()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_100214374()
{
  id result = *(id *)(v0 + 16);
  if (result) {
    return [result devicesUpdated];
  }
  return result;
}

uint64_t sub_10021438C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10021439C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1002143A4()
{
  unint64_t result = qword_1003FADB0;
  if (!qword_1003FADB0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1003FADB0);
  }

  return result;
}

void *sub_1002143EC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100156B68(&qword_1003F8310);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain();
    sub_10021556C((uint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

uint64_t sub_1002144E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001FABFC(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  uint64_t v5 = sub_100214558(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_100214558(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_175;
    }
    if (v3) {
      return sub_100214EFC(0LL, v3, 1LL, v2);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_174;
  }
  uint64_t v121 = result;
  uint64_t v128 = v1;
  uint64_t v118 = v2;
  if (v3 <= 1)
  {
    id v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v129 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v127 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_140:
      if (v13 >= 2)
      {
        uint64_t v110 = *v118;
        do
        {
          unint64_t v111 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_169;
          }
          if (!v110) {
            goto LABEL_182;
          }
          uint64_t v112 = *(void *)&v9[16 * v111 + 32];
          uint64_t v113 = *(void *)&v9[16 * v13 + 24];
          uint64_t result = sub_1002150D0( (void **)(v110 + 8 * v112),  (void **)(v110 + 8LL * *(void *)&v9[16 * v13 + 16]),  (void **)(v110 + 8 * v113),  v127);
          if (v128) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_170;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v9);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1001A5B60((uint64_t)v9);
            id v9 = (char *)result;
          }

          if (v111 >= *((void *)v9 + 2)) {
            goto LABEL_171;
          }
          uint64_t v114 = &v9[16 * v111 + 32];
          *(void *)uint64_t v114 = v112;
          *((void *)v114 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v113;
          unint64_t v115 = *((void *)v9 + 2);
          if (v13 > v115) {
            goto LABEL_172;
          }
          uint64_t result = (uint64_t)memmove(&v9[16 * v13 + 16], &v9[16 * v13 + 32], 16 * (v115 - v13));
          *((void *)v9 + 2) = v115 - 1;
          unint64_t v13 = v115 - 1;
        }

        while (v115 > 2);
      }

LABEL_151:
      uint64_t v116 = swift_bridgeObjectRelease();
      *(void *)((v129 & 0xFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0LL;
      specialized Array._endMutation()(v116);
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_100156B68(&qword_1003FBEC0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)((result & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v7;
    uint64_t v2 = v6;
    uint64_t v127 = (void **)((result & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v129 = result;
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *v2;
  uint64_t v119 = *v2 - 8;
  uint64_t v120 = *v2 + 16;
  id v9 = (char *)_swiftEmptyArrayStorage;
  id v12 = &selRef_alertMessage;
  Swift::Int v126 = v3;
  while (2)
  {
    Swift::Int v14 = v10 + 1;
    Swift::Int v124 = v10;
    if (v10 + 1 >= v3) {
      goto LABEL_58;
    }
    uint64_t v15 = *(void **)(v11 + 8 * v14);
    uint64_t v16 = *(void **)(v11 + 8 * v10);
    id v17 = v12[174];
    swift_unknownObjectRetain(v15);
    swift_unknownObjectRetain(v16);
    if ([v15 v17] == (id)1) {
      uint64_t v18 = -1LL;
    }
    else {
      uint64_t v18 = (uint64_t)[v15 v12[174]];
    }
    if ([v16 v12[174]] == (id)1)
    {
      if (v18 != -1)
      {
LABEL_21:
        if ([v15 v12[174]] == (id)1) {
          uint64_t v19 = -1LL;
        }
        else {
          uint64_t v19 = (uint64_t)[v15 v12[174]];
        }
        if ([v16 v12[174]] == (id)1) {
          uint64_t v24 = -1LL;
        }
        else {
          uint64_t v24 = (uint64_t)[v16 v12[174]];
        }
        swift_unknownObjectRelease(v15);
        uint64_t result = swift_unknownObjectRelease(v16);
        int v122 = v24 < v19;
        id v12 = &selRef_alertMessage;
        goto LABEL_30;
      }
    }

    else if ((id)v18 != [v16 v12[174]])
    {
      goto LABEL_21;
    }

    sub_100212DAC();
    double v21 = v20;
    sub_100212DAC();
    double v23 = v22;
    swift_unknownObjectRelease(v15);
    uint64_t result = swift_unknownObjectRelease(v16);
    int v122 = v23 < v21;
LABEL_30:
    Swift::Int v14 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_50;
    }
    uint64_t v25 = (void *)(v120 + 8 * v10);
    do
    {
      Swift::Int v26 = v14;
      uint64_t v27 = (void *)*(v25 - 1);
      unint64_t v28 = (void *)*v25;
      unint64_t v29 = v12[174];
      swift_unknownObjectRetain(*v25);
      swift_unknownObjectRetain(v27);
      if ([v28 v29] == (id)1) {
        uint64_t v30 = -1LL;
      }
      else {
        uint64_t v30 = (uint64_t)[v28 v12[174]];
      }
      if ([v27 v12[174]] == (id)1)
      {
        if (v30 == -1) {
          goto LABEL_40;
        }
      }

      else if ((id)v30 == [v27 v12[174]])
      {
LABEL_40:
        sub_100212DAC();
        double v33 = v32;
        sub_100212DAC();
        double v35 = v34;
        swift_unknownObjectRelease(v28);
        uint64_t result = swift_unknownObjectRelease(v27);
        int v36 = v35 < v33;
        goto LABEL_46;
      }

      if ([v28 v12[174]] == (id)1) {
        uint64_t v31 = -1LL;
      }
      else {
        uint64_t v31 = (uint64_t)[v28 v12[174]];
      }
      if ([v27 v12[174]] == (id)1) {
        uint64_t v37 = -1LL;
      }
      else {
        uint64_t v37 = (uint64_t)[v27 v12[174]];
      }
      swift_unknownObjectRelease(v28);
      uint64_t result = swift_unknownObjectRelease(v27);
      int v36 = v37 < v31;
      id v12 = &selRef_alertMessage;
LABEL_46:
      Swift::Int v14 = v26;
      if (v122 != v36) {
        goto LABEL_49;
      }
      Swift::Int v14 = v26 + 1;
      ++v25;
    }

    while (v3 != v26 + 1);
    Swift::Int v14 = v3;
LABEL_49:
    Swift::Int v10 = v124;
LABEL_50:
    if (v122)
    {
      if (v14 < v10) {
        goto LABEL_176;
      }
      if (v10 < v14)
      {
        unint64_t v38 = (uint64_t *)(v119 + 8 * v14);
        Swift::Int v39 = v14;
        Swift::Int v40 = v10;
        uint64_t v41 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v40 != --v39)
          {
            if (!v11) {
              goto LABEL_181;
            }
            uint64_t v42 = *v41;
            *uint64_t v41 = *v38;
            *unint64_t v38 = v42;
          }

          ++v40;
          --v38;
          ++v41;
        }

        while (v40 < v39);
      }
    }

LABEL_58:
    if (v14 >= v3) {
      goto LABEL_91;
    }
    if (__OFSUB__(v14, v10)) {
      goto LABEL_173;
    }
    if (v14 - v10 >= v121) {
      goto LABEL_91;
    }
    if (__OFADD__(v10, v121)) {
      goto LABEL_177;
    }
    if (v10 + v121 >= v3) {
      Swift::Int v43 = v3;
    }
    else {
      Swift::Int v43 = v10 + v121;
    }
    if (v43 >= v10)
    {
      if (v14 == v43) {
        goto LABEL_91;
      }
      uint64_t v117 = v9;
      uint64_t v44 = v119 + 8 * v14;
      Swift::Int v123 = v43;
      while (2)
      {
        uint64_t v45 = *(void **)(v11 + 8 * v14);
        uint64_t v46 = v44;
        while (2)
        {
          Swift::Int v47 = v14;
          uint64_t v48 = *(void **)v46;
          uint64_t v49 = v12[174];
          swift_unknownObjectRetain(v45);
          swift_unknownObjectRetain(v48);
          if ([v45 v49] == (id)1) {
            uint64_t v50 = -1LL;
          }
          else {
            uint64_t v50 = (uint64_t)[v45 v12[174]];
          }
          if (objc_msgSend(v48, v12[174], v117) == (id)1)
          {
            if (v50 != -1) {
              goto LABEL_76;
            }
LABEL_79:
            sub_100212DAC();
            double v53 = v52;
            sub_100212DAC();
            double v55 = v54;
            swift_unknownObjectRelease(v45);
            uint64_t result = swift_unknownObjectRelease(v48);
            if (v55 >= v53) {
              break;
            }
            goto LABEL_87;
          }

          if ((id)v50 == [v48 v12[174]]) {
            goto LABEL_79;
          }
LABEL_76:
          if ([v45 v12[174]] == (id)1) {
            uint64_t v51 = -1LL;
          }
          else {
            uint64_t v51 = (uint64_t)[v45 v12[174]];
          }
          if ([v48 v12[174]] == (id)1) {
            uint64_t v56 = -1LL;
          }
          else {
            uint64_t v56 = (uint64_t)[v48 v12[174]];
          }
          swift_unknownObjectRelease(v45);
          uint64_t result = swift_unknownObjectRelease(v48);
          BOOL v90 = v56 < v51;
          id v12 = &selRef_alertMessage;
          if (v90)
          {
LABEL_87:
            if (!v11) {
              goto LABEL_179;
            }
            Swift::Int v14 = v47;
            uint64_t v57 = *(void **)v46;
            uint64_t v45 = *(void **)(v46 + 8);
            *(void *)uint64_t v46 = v45;
            *(void *)(v46 + 8) = v57;
            v46 -= 8LL;
            if (v47 == ++v10) {
              goto LABEL_69;
            }
            continue;
          }

          break;
        }

        Swift::Int v14 = v47;
LABEL_69:
        ++v14;
        v44 += 8LL;
        Swift::Int v10 = v124;
        if (v14 != v123) {
          continue;
        }
        break;
      }

      Swift::Int v14 = v123;
      id v9 = v117;
      Swift::Int v3 = v126;
LABEL_91:
      if (v14 < v10) {
        goto LABEL_168;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v9);
      Swift::Int v125 = v14;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001A595C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
        id v9 = (char *)result;
      }

      unint64_t v59 = *((void *)v9 + 2);
      unint64_t v58 = *((void *)v9 + 3);
      unint64_t v13 = v59 + 1;
      if (v59 >= v58 >> 1)
      {
        uint64_t result = (uint64_t)sub_1001A595C((char *)(v58 > 1), v59 + 1, 1, v9);
        id v9 = (char *)result;
      }

      *((void *)v9 + 2) = v13;
      uint64_t v60 = v9 + 32;
      uint64_t v61 = &v9[16 * v59 + 32];
      *(void *)uint64_t v61 = v10;
      *((void *)v61 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v125;
      if (v59)
      {
        while (2)
        {
          unint64_t v62 = v13 - 1;
          if (v13 >= 4)
          {
            uint64_t v67 = &v60[2 * v13];
            uint64_t v68 = *(v67 - 8);
            uint64_t v69 = *(v67 - 7);
            BOOL v73 = __OFSUB__(v69, v68);
            uint64_t v70 = v69 - v68;
            if (v73) {
              goto LABEL_157;
            }
            uint64_t v72 = *(v67 - 6);
            uint64_t v71 = *(v67 - 5);
            BOOL v73 = __OFSUB__(v71, v72);
            uint64_t v65 = v71 - v72;
            char v66 = v73;
            if (v73) {
              goto LABEL_158;
            }
            unint64_t v74 = v13 - 2;
            uint64_t v75 = &v60[2 * v13 - 4];
            uint64_t v77 = *v75;
            uint64_t v76 = v75[1];
            BOOL v73 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v73) {
              goto LABEL_159;
            }
            BOOL v73 = __OFADD__(v65, v78);
            uint64_t v79 = v65 + v78;
            if (v73) {
              goto LABEL_161;
            }
            if (v79 >= v70)
            {
              uint64_t v97 = &v60[2 * v62];
              uint64_t v99 = *v97;
              uint64_t v98 = v97[1];
              BOOL v73 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              if (v73) {
                goto LABEL_167;
              }
              BOOL v90 = v65 < v100;
            }

            else
            {
LABEL_110:
              if ((v66 & 1) != 0) {
                goto LABEL_160;
              }
              unint64_t v74 = v13 - 2;
              uint64_t v80 = &v60[2 * v13 - 4];
              uint64_t v82 = *v80;
              uint64_t v81 = v80[1];
              BOOL v83 = __OFSUB__(v81, v82);
              uint64_t v84 = v81 - v82;
              char v85 = v83;
              if (v83) {
                goto LABEL_162;
              }
              uint64_t v86 = &v60[2 * v62];
              uint64_t v88 = *v86;
              uint64_t v87 = v86[1];
              BOOL v73 = __OFSUB__(v87, v88);
              uint64_t v89 = v87 - v88;
              if (v73) {
                goto LABEL_164;
              }
              if (__OFADD__(v84, v89)) {
                goto LABEL_166;
              }
              if (v84 + v89 < v65) {
                goto LABEL_122;
              }
              BOOL v90 = v65 < v89;
            }

            if (v90) {
              unint64_t v62 = v74;
            }
          }

          else
          {
            if (v13 == 3)
            {
              uint64_t v64 = *((void *)v9 + 4);
              uint64_t v63 = *((void *)v9 + 5);
              BOOL v73 = __OFSUB__(v63, v64);
              uint64_t v65 = v63 - v64;
              char v66 = v73;
              goto LABEL_110;
            }

            uint64_t v91 = *((void *)v9 + 4);
            uint64_t v92 = *((void *)v9 + 5);
            BOOL v73 = __OFSUB__(v92, v91);
            uint64_t v84 = v92 - v91;
            char v85 = v73;
LABEL_122:
            if ((v85 & 1) != 0) {
              goto LABEL_163;
            }
            uint64_t v93 = &v60[2 * v62];
            uint64_t v95 = *v93;
            uint64_t v94 = v93[1];
            BOOL v73 = __OFSUB__(v94, v95);
            uint64_t v96 = v94 - v95;
            if (v73) {
              goto LABEL_165;
            }
            if (v96 < v84) {
              goto LABEL_14;
            }
          }

          unint64_t v101 = v62 - 1;
          if (v62 - 1 >= v13)
          {
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
            goto LABEL_178;
          }

          if (!v11) {
            goto LABEL_180;
          }
          uint64_t v102 = v9;
          uint64_t v103 = &v60[2 * v101];
          uint64_t v104 = *v103;
          uint64_t v105 = v60;
          unint64_t v106 = v62;
          uint64_t v107 = &v60[2 * v62];
          uint64_t v108 = v107[1];
          uint64_t result = sub_1002150D0( (void **)(v11 + 8 * *v103),  (void **)(v11 + 8LL * *v107),  (void **)(v11 + 8 * v108),  v127);
          if (v128) {
            goto LABEL_151;
          }
          if (v108 < v104) {
            goto LABEL_154;
          }
          if (v106 > *((void *)v102 + 2)) {
            goto LABEL_155;
          }
          uint64_t *v103 = v104;
          v105[2 * v101 + 1] = v108;
          unint64_t v109 = *((void *)v102 + 2);
          if (v106 >= v109) {
            goto LABEL_156;
          }
          id v9 = v102;
          unint64_t v13 = v109 - 1;
          uint64_t result = (uint64_t)memmove(v107, v107 + 2, 16 * (v109 - 1 - v106));
          uint64_t v60 = v105;
          *((void *)v102 + 2) = v109 - 1;
          Swift::Int v3 = v126;
          id v12 = &selRef_alertMessage;
          if (v109 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }

      unint64_t v13 = 1LL;
LABEL_14:
      Swift::Int v10 = v125;
      if (v125 >= v3) {
        goto LABEL_140;
      }
      continue;
    }

    break;
  }

  __break(1u);
LABEL_59:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
  return result;
}

uint64_t sub_100214EFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = v19;
    uint64_t v20 = v6;
    while (1)
    {
      id v9 = *(void **)v6;
      swift_unknownObjectRetain(v7);
      swift_unknownObjectRetain(v9);
      if ([v7 classification] == (id)1) {
        uint64_t v10 = -1LL;
      }
      else {
        uint64_t v10 = (uint64_t)[v7 classification];
      }
      if ([v9 classification] == (id)1)
      {
        if (v10 == -1) {
          goto LABEL_14;
        }
      }

      else if ((id)v10 == [v9 classification])
      {
LABEL_14:
        sub_100212DAC();
        double v13 = v12;
        sub_100212DAC();
        double v15 = v14;
        swift_unknownObjectRelease(v7);
        uint64_t result = swift_unknownObjectRelease(v9);
        if (v15 >= v13) {
          goto LABEL_4;
        }
        goto LABEL_21;
      }

      if ([v7 classification] == (id)1) {
        uint64_t v11 = -1LL;
      }
      else {
        uint64_t v11 = (uint64_t)[v7 classification];
      }
      if ([v9 classification] == (id)1) {
        uint64_t v16 = -1LL;
      }
      else {
        uint64_t v16 = (uint64_t)[v9 classification];
      }
      swift_unknownObjectRelease(v7);
      uint64_t result = swift_unknownObjectRelease(v9);
      if (v16 >= v11)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v20 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

uint64_t sub_1002150D0(void **__dst, void **__src, void **a3, void **a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 7;
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)__src;
  uint64_t v12 = (char *)a3 - (char *)__src + 7;
  uint64_t v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 8 * v13);
    }
    double v14 = &v4[v13];
    if (v7 >= v6 || v11 < 8) {
      goto LABEL_70;
    }
    uint64_t v31 = &selRef_alertMessage;
    while (1)
    {
      double v54 = v5;
      double v32 = v6;
      double v33 = v14;
      double v34 = v14 - 1;
      double v35 = *(v14 - 1);
      double v52 = v32;
      unint64_t v38 = *(v32 - 1);
      int v36 = v32 - 1;
      uint64_t v37 = v38;
      Swift::Int v39 = v31[174];
      swift_unknownObjectRetain(v35);
      swift_unknownObjectRetain(v38);
      if ([v35 v39] == (id)1) {
        uint64_t v40 = -1LL;
      }
      else {
        uint64_t v40 = (uint64_t)[v35 v31[174]];
      }
      if ([v37 v31[174]] == (id)1)
      {
        if (v40 == -1) {
          goto LABEL_49;
        }
      }

      else if ((id)v40 == [v37 v31[174]])
      {
LABEL_49:
        sub_100212DAC();
        double v42 = v41;
        sub_100212DAC();
        double v44 = v43;
        swift_unknownObjectRelease(v35);
        swift_unknownObjectRelease(v37);
        uint64_t v45 = v54;
        uint64_t v5 = v54 - 1;
        double v14 = v33;
        uint64_t v6 = v52;
        if (v44 >= v42) {
          goto LABEL_50;
        }
        goto LABEL_60;
      }

      uint64_t v51 = v33;
      if ([v35 classification] == (id)1) {
        uint64_t v50 = -1LL;
      }
      else {
        uint64_t v50 = (uint64_t)[v35 classification];
      }
      Swift::Int v47 = v4;
      uint64_t v6 = v52;
      if ([v37 classification] == (id)1) {
        uint64_t v48 = -1LL;
      }
      else {
        uint64_t v48 = (uint64_t)[v37 classification];
      }
      swift_unknownObjectRelease(v35);
      swift_unknownObjectRelease(v37);
      uint64_t v45 = v54;
      uint64_t v5 = v54 - 1;
      BOOL v30 = v48 < v50;
      uint64_t v4 = v47;
      double v14 = v51;
      if (!v30)
      {
LABEL_50:
        int v36 = v34;
        if (v45 != v14)
        {
          double v14 = v34;
LABEL_66:
          uint64_t v31 = &selRef_alertMessage;
LABEL_67:
          *uint64_t v5 = *v36;
          goto LABEL_68;
        }

        BOOL v46 = v5 >= v14;
        double v14 = v34;
        uint64_t v31 = &selRef_alertMessage;
        if (v46) {
          goto LABEL_67;
        }
        goto LABEL_68;
      }

LABEL_60:
      if (v45 != v6)
      {
        uint64_t v6 = v36;
        goto LABEL_66;
      }

      BOOL v46 = v5 >= v6;
      uint64_t v6 = v36;
      uint64_t v31 = &selRef_alertMessage;
      if (v46) {
        goto LABEL_67;
      }
LABEL_68:
      if (v6 <= v7 || v14 <= v4) {
        goto LABEL_70;
      }
    }
  }

  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 8 * v10);
  }
  double v14 = &v4[v10];
  if (v6 < v5 && v8 >= 8)
  {
    double v15 = &selRef_alertMessage;
    double v53 = v5;
    do
    {
      uint64_t v16 = *v6;
      id v17 = *v4;
      uint64_t v18 = v15[174];
      swift_unknownObjectRetain(*v6);
      swift_unknownObjectRetain(v17);
      if ([v16 v18] == (id)1) {
        uint64_t v19 = -1LL;
      }
      else {
        uint64_t v19 = (uint64_t)[v16 v15[174]];
      }
      if ([v17 v15[174]] == (id)1)
      {
        if (v19 == -1) {
          goto LABEL_20;
        }
      }

      else if ((id)v19 == [v17 v15[174]])
      {
LABEL_20:
        sub_100212DAC();
        double v22 = v21;
        sub_100212DAC();
        double v24 = v23;
        swift_unknownObjectRelease(v16);
        swift_unknownObjectRelease(v17);
        if (v24 < v22) {
          goto LABEL_30;
        }
        goto LABEL_21;
      }

      if ([v16 v15[174]] == (id)1) {
        uint64_t v20 = -1LL;
      }
      else {
        uint64_t v20 = (uint64_t)[v16 v15[174]];
      }
      unint64_t v28 = v4;
      if ([v17 v15[174]] == (id)1) {
        uint64_t v29 = -1LL;
      }
      else {
        uint64_t v29 = (uint64_t)[v17 v15[174]];
      }
      swift_unknownObjectRelease(v16);
      swift_unknownObjectRelease(v17);
      BOOL v30 = v29 < v20;
      uint64_t v4 = v28;
      double v15 = &selRef_alertMessage;
      if (v30)
      {
LABEL_30:
        uint64_t v25 = v6;
        BOOL v26 = v7 == v6++;
        unint64_t v27 = (unint64_t)v53;
        if (v26) {
          goto LABEL_32;
        }
LABEL_31:
        *uint64_t v7 = *v25;
        goto LABEL_32;
      }

uint64_t sub_10021556C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1001604E8( (unint64_t *)&unk_1003FAE60,  &qword_1003FAE58,  (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0LL; i != v7; ++i)
          {
            sub_100156B68(&qword_1003FAE58);
            uint64_t v11 = sub_100215718(v15, i, a3);
            uint64_t v13 = *v12;
            swift_unknownObjectRetain(*v12);
            ((void (*)(uint64_t **, void))v11)(v15, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          swift_bridgeObjectRelease();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_100156B68(&qword_1003FBEC0);
        swift_arrayInitWithCopy(v5);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void (*sub_100215718(uint64_t **a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_10021576C(v6, a2, a3);
  return sub_100179FC0;
}

uint64_t *sub_10021576C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain(*(void *)(a3 + 8 * a2 + 32));
LABEL_5:
    *Swift::Int v3 = v4;
    return (uint64_t *)sub_1002157D8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1002157D8(void *a1)
{
  return swift_unknownObjectRelease(*a1);
}

unint64_t sub_1002157E0()
{
  unint64_t result = qword_1003FADE0;
  if (!qword_1003FADE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1003FADE0);
  }

  return result;
}

uint64_t type metadata accessor for UserDefaultsLockScreenRoutingProvider()
{
  return objc_opt_self(&OBJC_CLASS___MRDUserDefaultsLockScreenRoutingProvider);
}

char *sub_100215858(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (!v2) {
      return (char *)_swiftEmptyArrayStorage;
    }
    unint64_t result = sub_100216400(0LL, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0LL;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      unint64_t v6 = v5;
      unsigned int v7 = [v5 deviceType];

      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_100216400((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      *((_DWORD *)&_swiftEmptyArrayStorage[4] + v9) = v7;
      if (v2 == v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

Swift::Int sub_100215A08()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100215A4C()
{
}

Swift::Int sub_100215A74(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100215AB4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_100215AC8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100215AD8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100215AE4(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v13, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13[0] = *v2;
    void *v2 = 0x8000000000000000LL;
    sub_100215EA8(a2, v8, isUniquelyReferenced_nonNull_native);
    void *v2 = v13[0];
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2);
  }

  uint64_t result = 0LL;
  LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48LL) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_100215C00(uint64_t a1)
{
  Swift::UInt32 v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FAF20);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    unint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v8 = -1LL << v28;
                }
                Swift::UInt32 v2 = v29;
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_100215EA8(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt32 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100215C00(v8);
  }

  else
  {
    if (v7 > v6)
    {
      Swift::Int result = (uint64_t)sub_100215FF4();
      goto LABEL_14;
    }

    sub_100216188(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(_DWORD *)(v11 + 4 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for MRAVOutputDeviceType();
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v11 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_100215FF4()
{
  Swift::UInt32 v1 = v0;
  sub_100156B68(&qword_1003FAF20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_100216188(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FAF20);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    Swift::Int *v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

char *sub_100216400(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_10021641C(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_10021641C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003FAF28);
    unint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 4 * v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_100216514(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for MRAVOutputDeviceType();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1002168EC(&qword_1003FAF18, (uint64_t)&unk_10034E078);
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    int64_t v7 = (unsigned int *)(a1 + 32);
    do
    {
      unsigned int v8 = *v7++;
      sub_100215AE4(&v9, v8);
      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

id sub_10021659C(void *a1)
{
  Swift::UInt32 v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70LL))();
  if (v1 && (v2 = v1, id v3 = [v1 outputDevices], v2, v3))
  {
    unint64_t v4 = sub_100162954();
    uint64_t v5 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);
  }

  else
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  unint64_t v6 = sub_100215858((uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100216514((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0LL;
  uint64_t v9 = v7 + 56;
  while (1)
  {
    if (*(void *)(v7 + 16))
    {
      Swift::UInt32 v10 = *((_DWORD *)&off_1003A9AF0 + v8 + 8);
      Hasher.init(_seed:)(&v25, *(void *)(v7 + 40));
      Hasher._combine(_:)(v10);
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v9 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0) {
        break;
      }
    }

uint64_t type metadata accessor for RouteRecommendationLocalOutputContextSuppressor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted47RouteRecommendationLocalOutputContextSuppressor);
}

void type metadata accessor for MRAVOutputDeviceType()
{
  if (!qword_1003FAF30)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1003A9B30);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1003FAF30);
    }
  }

uint64_t sub_1002168C8()
{
  return sub_1002168EC(&qword_1003FAF38, (uint64_t)&unk_10034E018);
}

uint64_t sub_1002168EC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MRAVOutputDeviceType();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

id sub_10021692C(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___MRDRouteRecommendationSuppressionController_suppressors] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for RouteRecommendationSuppressionController()
{
  return objc_opt_self(&OBJC_CLASS___MRDRouteRecommendationSuppressionController);
}

uint64_t sub_100216998(void *a1, void *a2)
{
  uint64_t v5 = sub_100156B68(&qword_1003F8310);
  uint64_t v6 = swift_allocObject(v5, 56LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10034D870;
  type metadata accessor for RouteRecommendationPlayingStateSuppressor();
  sub_100216A8C((uint64_t)a2, (uint64_t)v9);
  *(void *)(v6 + 32) = sub_100228114(v9);
  type metadata accessor for RouteRecommendationLocalOutputContextSuppressor();
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_1001AE93C();
  type metadata accessor for RouteRecommendationDisplayMonitorSuppressor();
  sub_100216A8C((uint64_t)a1, (uint64_t)v9);
  *(void *)(v6 + 48) = sub_100228114(v9);
  *(void *)&v9[0] = v6;
  specialized Array._endMutation()();
  uint64_t v7 = (*(uint64_t (**)(void))(v2 + 88))(*(void *)&v9[0]);
  sub_1001607E0(a2);
  sub_1001607E0(a1);
  return v7;
}

uint64_t sub_100216A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_BYTE *sub_100216AD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___MRDRouteRecommendationSuppressionController_suppressors);
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v4)
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      uint64_t v6 = v5 - 4;
      if ((v3 & 0xC000000000000001LL) == 0) {
        break;
      }
      uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_13;
      }
LABEL_9:
      uint64_t v9 = [v7 suppressionPolicyWithContext:a1];
      swift_unknownObjectRelease(v7);
      if (v9[OBJC_IVAR___MRDRouteRecommendationSuppressionPolicy_shouldSuppress] == 1)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_11;
      }
    }

    uint64_t v7 = *(void **)(v3 + 8 * v5);
    swift_unknownObjectRetain(v7);
    uint64_t v8 = v5 - 3;
    if (!__OFADD__(v6, 1LL)) {
      goto LABEL_9;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    if (v3 < 0) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11);
  }

id sub_100216CA0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RouteRecommendationSuppressionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100216CE0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  objc_super v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001F3AA4();
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v6);
  static DispatchQoS.unspecified.getter(v10);
  unint64_t v16 = &_swiftEmptyArrayStorage;
  unint64_t v11 = sub_100216EA8();
  uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FA190);
  unint64_t v13 = sub_100216EF0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x800000010033DAD0LL,  v5,  v2,  v9,  0LL);
  qword_100405C68 = result;
  return result;
}

uint64_t *sub_100216E68()
{
  if (qword_100400D00 != -1) {
    swift_once(&qword_100400D00, sub_100216CE0);
  }
  return &qword_100405C68;
}

unint64_t sub_100216EA8()
{
  unint64_t result = qword_1003FB950;
  if (!qword_1003FB950)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1003FB950);
  }

  return result;
}

unint64_t sub_100216EF0()
{
  unint64_t result = qword_1003FB960;
  if (!qword_1003FB960)
  {
    uint64_t v1 = sub_100160358((uint64_t *)&unk_1003FA190);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003FB960);
  }

  return result;
}

uint64_t sub_100216F3C(uint64_t a1)
{
  uint64_t v115 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v3 = *(void *)(v115 - 8);
  uint64_t v4 = __chkstk_darwin(v115);
  uint64_t v114 = (uint64_t)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v106 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v106 - v9);
  swift_bridgeObjectRelease();
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
  int64_t v12 = *(void *)(a1 + 16);
  id v108 = v11;
  uint64_t v110 = v3;
  unint64_t v109 = v8;
  if (v12)
  {
    *(void *)&v117[0] = _swiftEmptyArrayStorage;
    id v13 = v11;
    sub_10015DCE8(0, v12, 0);
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v15 = *(void *)(v3 + 72);
    do
    {
      sub_100183690(v14, (uint64_t)v10);
      if (sub_10024A5A8())
      {
        id v16 = (id)MRIRRouteBuiltInSpeakerIdentifier();
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        uint64_t v19 = v18;
      }

      else
      {
        uint64_t v17 = *v10;
        uint64_t v19 = v10[1];
        swift_bridgeObjectRetain();
      }

      sub_1001838D0((uint64_t)v10);
      uint64_t v20 = *(void **)&v117[0];
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)&v117[0]) & 1) == 0)
      {
        sub_10015DCE8(0, v20[2] + 1LL, 1);
        uint64_t v20 = *(void **)&v117[0];
      }

      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_10015DCE8(v21 > 1, v22 + 1, 1);
        uint64_t v20 = *(void **)&v117[0];
      }

      v20[2] = v22 + 1;
      uint64_t v23 = &v20[2 * v22];
      v23[4] = v17;
      v23[5] = v19;
      v14 += v15;
      --v12;
    }

    while (v12);
    uint64_t v3 = v110;
    uint64_t v8 = v109;
  }

  else
  {
    id v24 = v11;
    uint64_t v20 = _swiftEmptyArrayStorage;
  }

  *(void *)&v117[0] = v20;
  swift_bridgeObjectRetain();
  sub_10021A908((uint64_t *)v117);
  swift_bridgeObjectRelease();
  uint64_t v107 = *(void *)&v117[0];
  uint64_t v25 = swift_allocObject(&unk_1003A9BA8, 17LL, 7LL);
  uint64_t v111 = v25;
  *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = 1;
  unint64_t v106 = (unsigned __int8 *)(v25 + 16);
  uint64_t v120 = _swiftEmptyArrayStorage;
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26)
  {
    unint64_t v27 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v113 = *(void **)(v3 + 72);
    swift_bridgeObjectRetain();
    __int128 v112 = xmmword_10034BE40;
    while (1)
    {
      *(void *)&v117[0] = _swiftEmptyArrayStorage;
      sub_10024A50C();
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      unsigned __int16 v44 = v41;
      if ((v41 & 0xF800) == 0x4000) {
        break;
      }
      sub_100183618(v39, v40, v41);
      sub_10024A50C();
      uint64_t v48 = v45;
      uint64_t v49 = v46;
      unsigned __int16 v50 = v47;
      if (v47 >> 11 == 9)
      {
        uint64_t v51 = *(void *)(v45 + 16);
        unsigned __int8 v52 = *(_BYTE *)(v45 + 24);
        swift_bridgeObjectRetain();
        sub_100183618(v48, v49, v50);
        uint64_t v29 = v51;
        unsigned __int8 v30 = v52;
        goto LABEL_16;
      }

      sub_100183618(v45, v46, v47);
      sub_10024A50C();
      uint64_t v56 = v53;
      uint64_t v57 = v54;
      unsigned __int16 v58 = v55;
      if ((v55 & 0xF800) != 0x5000)
      {
        sub_100183618(v53, v54, v55);
        goto LABEL_18;
      }

      uint64_t v59 = *(void *)(v53 + 16);
      unsigned __int8 v60 = *(_BYTE *)(v53 + 24);
      swift_bridgeObjectRetain();
      sub_100183618(v56, v57, v58);
      sub_100217848(v59, v60, v117, v111);
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v31 = sub_100156B68(&qword_1003FAFB0);
      uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
      *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = v112;
      uint64_t v33 = *(void *)(a1 + v27 + 8);
      *(void *)(v32 + 32) = *(void *)(a1 + v27);
      *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v33;
      unint64_t v34 = a1 + v27 + *(int *)(v115 + 56);
      uint64_t v35 = *(void *)v34;
      uint64_t v36 = *(void *)(v34 + 8);
      *(void *)(v32 + 48) = *(void *)v34;
      *(void *)(v32 + 56) = v36;
      unsigned int v37 = *(unsigned __int16 *)(v34 + 16);
      *(_WORD *)(v32 + 64) = v37;
      swift_beginAccess(v117, v121, 0LL, 0LL);
      uint64_t v38 = *(void *)&v117[0];
      v119[0] = v32;
      swift_bridgeObjectRetain();
      sub_10018390C(v35, v36, v37);
      sub_100219A00(v38);
      sub_100219A00(v119[0]);
      v27 += (unint64_t)v113;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        uint64_t v61 = v120;
        uint64_t v8 = v109;
        goto LABEL_27;
      }
    }

    uint64_t v28 = *(void *)(v39 + 16);
    swift_bridgeObjectRetain();
    sub_100183618(v42, v43, v44);
    uint64_t v29 = v28;
    unsigned __int8 v30 = 2;
LABEL_16:
    sub_100217848(v29, v30, v117, v111);
    goto LABEL_17;
  }

  uint64_t v61 = _swiftEmptyArrayStorage;
LABEL_27:
  unint64_t v62 = sub_10021798C((uint64_t)v61);
  swift_bridgeObjectRelease();
  uint64_t v63 = v62[2];
  if (v63)
  {
    uint64_t v64 = (unsigned __int16 *)(v62 + 8);
    uint64_t v65 = v110;
    do
    {
      unsigned int v66 = *v64;
      v64 += 20;
      unsigned int v67 = (v66 >> 8) & 6 | (v66 >> 7) & 1;
      if (v67 < 5 && ((0x1Du >> v67) & 1) != 0)
      {
        LODWORD(v112) = 1;
        goto LABEL_35;
      }

      --v63;
    }

    while (v63);
    LODWORD(v112) = 0;
  }

  else
  {
    LODWORD(v112) = 0;
    uint64_t v65 = v110;
  }

void sub_100217848(uint64_t a1, unsigned __int8 a2, void *a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4 == a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = _swiftEmptyArrayStorage;
    if (v4)
    {
      v19[0] = _swiftEmptyArrayStorage;
      sub_10021A5C4(0, v4, 0);
      uint64_t v6 = _swiftEmptyArrayStorage;
      uint64_t v8 = (unsigned __int16 *)(a1 + 64);
      do
      {
        uint64_t v9 = *((void *)v8 - 4);
        uint64_t v10 = *((void *)v8 - 3);
        uint64_t v11 = *((void *)v8 - 2);
        uint64_t v12 = *((void *)v8 - 1);
        unsigned int v13 = *v8;
        swift_bridgeObjectRetain();
        sub_10018390C(v11, v12, v13);
        v19[0] = v6;
        unint64_t v15 = v6[2];
        unint64_t v14 = v6[3];
        if (v15 >= v14 >> 1)
        {
          sub_10021A5C4(v14 > 1, v15 + 1, 1);
          uint64_t v6 = (void *)v19[0];
        }

        v8 += 20;
        v6[2] = v15 + 1;
        id v16 = &v6[5 * v15];
        v16[4] = v9;
        v16[5] = v10;
        v16[6] = v11;
        v16[7] = v12;
        *((_WORD *)v16 + 32) = v13;
        --v4;
      }

      while (v4);
      uint64_t v5 = a3;
    }

    swift_beginAccess(v5, v19, 1LL, 0LL);
    *uint64_t v5 = v6;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_beginAccess(a4 + 16, v19, 1LL, 0LL);
    *(_BYTE *)(a4 + swift_weakDestroy(v0 + 16) = 0;
  }

void *sub_10021798C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  objc_super v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v24 = _swiftEmptyArrayStorage;
    sub_10021A598(0, v1, 0);
    objc_super v2 = _swiftEmptyArrayStorage;
    int64_t v4 = (unsigned __int16 *)(a1 + 64);
    do
    {
      uint64_t v5 = *((void *)v4 - 3);
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      unsigned int v8 = *v4;
      v20[0] = *((void *)v4 - 4);
      v20[1] = v5;
      v20[2] = v6;
      v20[3] = v7;
      __int16 v21 = v8;
      swift_bridgeObjectRetain();
      sub_10018390C(v6, v7, v8);
      swift_bridgeObjectRetain();
      sub_10018390C(v6, v7, v8);
      uint64_t v9 = sub_100156B68(&qword_1003FAF98);
      uint64_t v10 = sub_100156B68(&qword_1003FAFA0);
      swift_dynamicCast(v22, v20, v9, v10, 7LL);
      uint64_t v12 = v22[0];
      uint64_t v11 = v22[1];
      uint64_t v13 = v22[2];
      uint64_t v19 = v22[3];
      __int16 v18 = v23;
      swift_bridgeObjectRelease();
      sub_1001835D8(v6, v7, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10021A598(0, v2[2] + 1LL, 1);
        objc_super v2 = v24;
      }

      unint64_t v15 = v2[2];
      unint64_t v14 = v2[3];
      if (v15 >= v14 >> 1)
      {
        sub_10021A598(v14 > 1, v15 + 1, 1);
        objc_super v2 = v24;
      }

      v4 += 20;
      v2[2] = v15 + 1;
      id v16 = &v2[5 * v15];
      v16[4] = v12;
      v16[5] = v11;
      v16[6] = v13;
      v16[7] = v19;
      *((_WORD *)v16 + 32) = v18;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_100217B34()
{
  uint64_t v1 = sub_100217BD0();
  unsigned int v3 = (v2 >> 11) - 6;
  sub_100183618(v1, v4, v2);
  if (v3 > 4)
  {
    if ([v0 isRemoteControllable]
      && [v0 discoveredOnSameInfra])
    {
      goto LABEL_6;
    }

    if (![v0 isGroupable])
    {
      uint64_t v5 = (unsigned __int8 *)sub_1002493B0();
      return *v5;
    }

uint64_t sub_100217BD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v215 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v215 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v215 - v10;
  id v12 = [v0 modelID];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  switch([v1 deviceSubtype])
  {
    case 0u:
      swift_bridgeObjectRelease();
      return 0LL;
    case 1u:
      swift_bridgeObjectRelease();
      id v15 = [v1 sourceInfo];
      if (v15)
      {
        id v16 = v15;
        [v15 multipleBuiltInDevices];
      }

      uint64_t v14 = 0LL;
      [v1 producesLowFidelityAudio];
      return v14;
    case 2u:
    case 3u:
    case 0xCu:
    case 0xDu:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
      return v14;
    case 4u:
    case 5u:
      swift_bridgeObjectRelease();
      return [v1 producesLowFidelityAudio] ^ 1;
    case 6u:
      swift_bridgeObjectRelease();
      return 1LL;
    case 7u:
      swift_bridgeObjectRelease();
      return 2LL;
    case 8u:
      swift_bridgeObjectRelease();
      return 3LL;
    case 9u:
      swift_bridgeObjectRelease();
      return 4LL;
    case 0xAu:
      swift_bridgeObjectRelease();
      return 5LL;
    case 0xBu:
      swift_bridgeObjectRelease();
      return 6LL;
    case 0xEu:
      swift_bridgeObjectRelease();
      return 7LL;
    case 0xFu:
      swift_bridgeObjectRelease();
      id v17 = [v1 clusterCompositionOutputDevices];
      if (v17)
      {
        __int16 v18 = v17;
        uint64_t v19 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
        uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
      }

      else
      {
        uint64_t v20 = (uint64_t)&_swiftEmptyArrayStorage;
      }

      if (!((unint64_t)v20 >> 62))
      {
        uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v222 = v20;
        if (v23) {
          break;
        }
        goto LABEL_25;
      }

      if (v20 < 0) {
        uint64_t v214 = v20;
      }
      else {
        uint64_t v214 = v20 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v214);
      swift_bridgeObjectRelease();
      unint64_t v222 = v20;
      if (!v23)
      {
LABEL_25:
        uint64_t v24 = sub_1001741A8();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v24, v2);
        id v25 = v1;
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        int v28 = v27;
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v29 = swift_slowAlloc(12LL, -1LL);
          int v219 = v28;
          unsigned __int8 v30 = (uint8_t *)v29;
          uint64_t v220 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v221 = (void *)v23;
          *(_DWORD *)unsigned __int8 v30 = 138412290;
          uint64_t v31 = v30 + 12;
          uint64_t v217 = v30 + 4;
          uint64_t v218 = v30;
          *(void *)&__int128 v226 = v25;
          uint64_t v216 = (char *)&v226 + 8;
          id v32 = v25;
          uint64_t v33 = v31;
          uint64_t v23 = (uint64_t)v221;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v226, v216, v217, v33);
          *uint64_t v220 = v25;

          unint64_t v34 = v218;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v219,  "OutputDevice %@ is subtype .cluster with no composition",  v218,  0xCu);
          uint64_t v35 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
          uint64_t v36 = v220;
          swift_arrayDestroy(v220, 1LL, v35);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v34, -1LL, -1LL);
        }

        else
        {

          uint64_t v26 = (os_log_s *)v25;
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
        break;
      }

      break;
    case 0x10u:
      swift_bridgeObjectRelease();
      return 8LL;
    case 0x11u:
      swift_bridgeObjectRelease();
      return 9LL;
    default:
      swift_bridgeObjectRelease();
      *(void *)&__int128 v226 = 0LL;
      *((void *)&v226 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(21LL);
      v21._uint64_t countAndFlagsBits = 0xD000000000000013LL;
      v21._object = (void *)0x800000010033DB20LL;
      String.append(_:)(v21);
      LODWORD(v224) = [v1 deviceSubtype];
      type metadata accessor for MRAVOutputDeviceSubtype(0LL);
      _print_unlocked<A, B>(_:_:)( &v224,  &v226,  v22,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      return v226;
  }

  unsigned int v37 = [v1 clusterType];
  switch(v37)
  {
    case 0u:
      swift_bridgeObjectRelease();
      uint64_t v38 = sub_1001741A8();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v38, v2);
      id v39 = v1;
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v221 = (void *)swift_slowAlloc(8LL, -1LL);
        unint64_t v222 = (unint64_t)v42;
        *(_DWORD *)uint64_t v42 = 138412290;
        uint64_t v43 = v42 + 12;
        unsigned __int16 v44 = v42 + 4;
        *(void *)&__int128 v226 = v39;
        id v45 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v226, (char *)&v226 + 8, v44, v43);
        uint64_t v46 = v221;
        *uint64_t v221 = v39;

        unsigned __int16 v47 = (uint8_t *)v222;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "OutputDevice %@ is subtype .cluster but clusterType .none",  (uint8_t *)v222,  0xCu);
        uint64_t v48 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v46, 1LL, v48);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {

        uint64_t v40 = (os_log_s *)v39;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      return 0xD00000000000001ELL;
    case 1u:
      Swift::Int v125 = (uint8_t *)v222;
      if (!v23)
      {
        uint64_t v128 = (char *)&_swiftEmptyArrayStorage;
LABEL_134:
        swift_bridgeObjectRelease();
        uint64_t v14 = swift_allocObject(&unk_1003A9C48, 24LL, 7LL);
        *(void *)(v14 + swift_weakDestroy(v0 + 16) = v128;
        return v14;
      }

      if (v23 >= 1)
      {
        unint64_t v126 = v222 & 0xC000000000000001LL;
        swift_bridgeObjectRetain();
        uint64_t v127 = 0LL;
        uint64_t v128 = (char *)&_swiftEmptyArrayStorage;
        uint64_t v220 = (void *)0x800000010033DB00LL;
        do
        {
          if (v126) {
            id v129 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v127, v125);
          }
          else {
            id v129 = *(id *)&v125[8 * v127 + 32];
          }
          uint64_t v130 = v129;
          id v131 = [v129 uid];
          if (v131)
          {
            uint64_t v132 = v131;
            uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
            uint64_t v135 = v134;

            switch([v130 deviceType])
            {
              case 0u:
                uint64_t v136 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v136 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v136 + 24) = v137;
                *(_WORD *)(v136 + 32) = v138;
                uint64_t v139 = sub_1002465B8();
                uint64_t v140 = 0LL;
                __int16 v141 = 0;
                *(void *)(v136 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v139;
                *(void *)(v136 + 48) = v142;
                break;
              case 1u:
                uint64_t v136 = sub_100219408();
                uint64_t v140 = v149;
                __int16 v141 = v150 | 0x80;
                break;
              case 2u:
                uint64_t v136 = sub_100219408();
                uint64_t v140 = v145;
                __int16 v141 = v146 | 0x200;
                break;
              case 3u:
                uint64_t v136 = sub_100219408();
                uint64_t v140 = v147;
                __int16 v141 = v148 | 0x280;
                break;
              case 4u:
                uint64_t v136 = sub_100219408();
                uint64_t v140 = v143;
                __int16 v141 = v144 | 0x480;
                break;
              case 5u:
                uint64_t v136 = sub_100219408();
                uint64_t v140 = v151;
                __int16 v141 = v152 | 0x400;
                break;
              default:
                uint64_t v136 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v136 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v136 + 24) = v153;
                *(_WORD *)(v136 + 32) = v154;
                uint64_t v224 = 0LL;
                unint64_t v225 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(24LL);
                v155._uint64_t countAndFlagsBits = 0xD000000000000016LL;
                v155._object = v220;
                String.append(_:)(v155);
                unsigned int v223 = [v130 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)( &v223,  &v224,  v156,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
                uint64_t v140 = 0LL;
                __int16 v141 = 0;
                unint64_t v157 = v225;
                *(void *)(v136 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v224;
                *(void *)(v136 + 48) = v157;
                break;
            }

            sub_1002474F0(v133, v135, v136, v140, v141, (uint64_t)&v226);

            if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0) {
              uint64_t v128 = sub_1002198DC( 0LL,  *((void *)v128 + 2) + 1LL,  1,  v128,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            Swift::Int v125 = (uint8_t *)v222;
            unint64_t v159 = *((void *)v128 + 2);
            unint64_t v158 = *((void *)v128 + 3);
            if (v159 >= v158 >> 1) {
              uint64_t v128 = sub_1002198DC( (char *)(v158 > 1),  v159 + 1,  1,  v128,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            *((void *)v128 + 2) = v159 + 1;
            uint64_t v160 = &v128[40 * v159];
            __int128 v161 = v226;
            __int128 v162 = v227;
            *((_WORD *)v160 + 32) = v228;
            *((_OWORD *)v160 + 2) = v161;
            *((_OWORD *)v160 + 3) = v162;
          }

          else
          {

            Swift::Int v125 = (uint8_t *)v222;
          }

          ++v127;
        }

        while (v23 != v127);
        swift_bridgeObjectRelease();
        goto LABEL_134;
      }

      goto LABEL_143;
    case 2u:
      uint64_t v49 = (uint8_t *)v222;
      if (!v23)
      {
        unsigned __int8 v52 = (char *)&_swiftEmptyArrayStorage;
        goto LABEL_131;
      }

      uint64_t v221 = (void *)v23;
      if (v23 >= 1)
      {
        unint64_t v50 = v222 & 0xC000000000000001LL;
        swift_bridgeObjectRetain();
        uint64_t v51 = 0LL;
        unsigned __int8 v52 = (char *)&_swiftEmptyArrayStorage;
        uint64_t v220 = (void *)0x800000010033DB00LL;
        do
        {
          if (v50) {
            id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
          }
          else {
            id v53 = *(id *)&v49[8 * (void)v51 + 32];
          }
          uint64_t v54 = v53;
          id v55 = [v53 uid];
          if (v55)
          {
            uint64_t v56 = v55;
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
            uint64_t v59 = v58;

            switch([v54 deviceType])
            {
              case 0u:
                uint64_t v60 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v60 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v60 + 24) = v61;
                *(_WORD *)(v60 + 32) = v62;
                uint64_t v63 = sub_1002465B8();
                uint64_t v64 = 0LL;
                __int16 v65 = 0;
                *(void *)(v60 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v63;
                *(void *)(v60 + 48) = v66;
                break;
              case 1u:
                uint64_t v60 = sub_100219408();
                uint64_t v64 = v73;
                __int16 v65 = v74 | 0x80;
                break;
              case 2u:
                uint64_t v60 = sub_100219408();
                uint64_t v64 = v69;
                __int16 v65 = v70 | 0x200;
                break;
              case 3u:
                uint64_t v60 = sub_100219408();
                uint64_t v64 = v71;
                __int16 v65 = v72 | 0x280;
                break;
              case 4u:
                uint64_t v60 = sub_100219408();
                uint64_t v64 = v67;
                __int16 v65 = v68 | 0x480;
                break;
              case 5u:
                uint64_t v60 = sub_100219408();
                uint64_t v64 = v75;
                __int16 v65 = v76 | 0x400;
                break;
              default:
                uint64_t v60 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v60 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v60 + 24) = v77;
                *(_WORD *)(v60 + 32) = v78;
                uint64_t v224 = 0LL;
                unint64_t v225 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(24LL);
                v79._uint64_t countAndFlagsBits = 0xD000000000000016LL;
                v79._object = v220;
                String.append(_:)(v79);
                unsigned int v223 = [v54 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)( &v223,  &v224,  v80,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
                uint64_t v64 = 0LL;
                __int16 v65 = 0;
                unint64_t v81 = v225;
                *(void *)(v60 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v224;
                *(void *)(v60 + 48) = v81;
                break;
            }

            sub_1002474F0(v57, v59, v60, v64, v65, (uint64_t)&v226);

            if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0) {
              unsigned __int8 v52 = sub_1002198DC( 0LL,  *((void *)v52 + 2) + 1LL,  1,  v52,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            uint64_t v49 = (uint8_t *)v222;
            unint64_t v83 = *((void *)v52 + 2);
            unint64_t v82 = *((void *)v52 + 3);
            if (v83 >= v82 >> 1) {
              unsigned __int8 v52 = sub_1002198DC( (char *)(v82 > 1),  v83 + 1,  1,  v52,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            *((void *)v52 + 2) = v83 + 1;
            uint64_t v84 = &v52[40 * v83];
            __int128 v85 = v226;
            __int128 v86 = v227;
            *((_WORD *)v84 + 32) = v228;
            *((_OWORD *)v84 + 2) = v85;
            *((_OWORD *)v84 + 3) = v86;
          }

          else
          {
          }

          uint64_t v51 = (void *)((char *)v51 + 1);
        }

        while (v221 != v51);
        swift_bridgeObjectRelease();
LABEL_131:
        swift_bridgeObjectRelease();
        uint64_t v14 = swift_allocObject(&unk_1003A9C20, 25LL, 7LL);
        *(void *)(v14 + swift_weakDestroy(v0 + 16) = v52;
        id v212 = [v1 configuredClusterSize];
        if ((unint64_t)v212 <= 0xFF)
        {
          *(_BYTE *)(v14 + 24) = (_BYTE)v212;
          return v14;
        }

LABEL_145:
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
        __break(1u);
        JUMPOUT(0x100219184LL);
      }

      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    case 3u:
      uint64_t v87 = (uint8_t *)v222;
      if (!v23) {
        goto LABEL_123;
      }
      uint64_t v221 = (void *)v23;
      if (v23 < 1) {
        goto LABEL_142;
      }
      unint64_t v88 = v222 & 0xC000000000000001LL;
      swift_bridgeObjectRetain();
      uint64_t v89 = 0LL;
      uint64_t v90 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v220 = (void *)0x800000010033DB00LL;
      do
      {
        if (v88) {
          id v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v87);
        }
        else {
          id v91 = *(id *)&v87[8 * (void)v89 + 32];
        }
        BOOL v92 = v91;
        id v93 = [v91 uid];
        if (v93)
        {
          NSString v94 = v93;
          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
          uint64_t v97 = v96;

          switch([v92 deviceType])
          {
            case 0u:
              uint64_t v98 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
              *(void *)(v98 + swift_weakDestroy(v0 + 16) = sub_100219408();
              *(void *)(v98 + 24) = v99;
              *(_WORD *)(v98 + 32) = v100;
              uint64_t v101 = sub_1002465B8();
              uint64_t v102 = 0LL;
              __int16 v103 = 0;
              *(void *)(v98 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v101;
              *(void *)(v98 + 48) = v104;
              break;
            case 1u:
              uint64_t v98 = sub_100219408();
              uint64_t v102 = v111;
              __int16 v103 = v112 | 0x80;
              break;
            case 2u:
              uint64_t v98 = sub_100219408();
              uint64_t v102 = v107;
              __int16 v103 = v108 | 0x200;
              break;
            case 3u:
              uint64_t v98 = sub_100219408();
              uint64_t v102 = v109;
              __int16 v103 = v110 | 0x280;
              break;
            case 4u:
              uint64_t v98 = sub_100219408();
              uint64_t v102 = v105;
              __int16 v103 = v106 | 0x480;
              break;
            case 5u:
              uint64_t v98 = sub_100219408();
              uint64_t v102 = v113;
              __int16 v103 = v114 | 0x400;
              break;
            default:
              uint64_t v98 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
              *(void *)(v98 + swift_weakDestroy(v0 + 16) = sub_100219408();
              *(void *)(v98 + 24) = v115;
              *(_WORD *)(v98 + 32) = v116;
              uint64_t v224 = 0LL;
              unint64_t v225 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(24LL);
              v117._uint64_t countAndFlagsBits = 0xD000000000000016LL;
              v117._object = v220;
              String.append(_:)(v117);
              unsigned int v223 = [v92 deviceType];
              type metadata accessor for MRAVOutputDeviceType();
              _print_unlocked<A, B>(_:_:)( &v223,  &v224,  v118,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
              uint64_t v102 = 0LL;
              __int16 v103 = 0;
              unint64_t v119 = v225;
              *(void *)(v98 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v224;
              *(void *)(v98 + 48) = v119;
              break;
          }

          sub_1002474F0(v95, v97, v98, v102, v103, (uint64_t)&v226);

          if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0) {
            uint64_t v90 = sub_1002198DC( 0LL,  *((void *)v90 + 2) + 1LL,  1,  v90,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
          }
          uint64_t v87 = (uint8_t *)v222;
          unint64_t v121 = *((void *)v90 + 2);
          unint64_t v120 = *((void *)v90 + 3);
          if (v121 >= v120 >> 1) {
            uint64_t v90 = sub_1002198DC( (char *)(v120 > 1),  v121 + 1,  1,  v90,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
          }
          *((void *)v90 + 2) = v121 + 1;
          int v122 = &v90[40 * v121];
          __int128 v123 = v226;
          __int128 v124 = v227;
          *((_WORD *)v122 + 32) = v228;
          *((_OWORD *)v122 + 2) = v123;
          *((_OWORD *)v122 + 3) = v124;
        }

        else
        {
        }

        uint64_t v89 = (void *)((char *)v89 + 1);
      }

      while (v221 != v89);
      goto LABEL_122;
    default:
      uint64_t v163 = sub_1001741A8();
      uint64_t v164 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v163, v2);
      uint64_t v165 = (os_log_s *)Logger.logObject.getter(v164);
      os_log_type_t v166 = static os_log_type_t.error.getter();
      BOOL v167 = os_log_type_enabled(v165, v166);
      uint64_t v221 = (void *)v23;
      if (v167)
      {
        uint64_t v168 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v169 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v226 = v169;
        *(_DWORD *)uint64_t v168 = 136315138;
        uint64_t v220 = v168 + 4;
        LODWORD(v224) = v37;
        type metadata accessor for MRAVOutputDeviceClusterType(0LL);
        uint64_t v171 = String.init<A>(describing:)(&v224, v170);
        uint64_t v224 = sub_10015ADC4(v171, v172, (uint64_t *)&v226);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225, v220, v168 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v165,  v166,  "Unmatched clusterType: %s. Treat as generic cluster.",  v168,  0xCu);
        swift_arrayDestroy(v169, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v173 = v169;
        uint64_t v23 = (uint64_t)v221;
        swift_slowDealloc(v173, -1LL, -1LL);
        swift_slowDealloc(v168, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      char v174 = (uint8_t *)v222;
      if (v23)
      {
        if (v23 < 1)
        {
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }

        unint64_t v175 = v222 & 0xC000000000000001LL;
        swift_bridgeObjectRetain();
        uint64_t v176 = 0LL;
        uint64_t v90 = (char *)&_swiftEmptyArrayStorage;
        uint64_t v220 = (void *)0x800000010033DB00LL;
        do
        {
          if (v175) {
            id v177 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v176, v174);
          }
          else {
            id v177 = *(id *)&v174[8 * (void)v176 + 32];
          }
          id v178 = v177;
          id v179 = [v177 uid];
          if (v179)
          {
            uint64_t v180 = v179;
            uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
            uint64_t v183 = v182;

            switch([v178 deviceType])
            {
              case 0u:
                uint64_t v184 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v184 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v184 + 24) = v185;
                *(_WORD *)(v184 + 32) = v186;
                uint64_t v187 = sub_1002465B8();
                uint64_t v188 = 0LL;
                __int16 v189 = 0;
                *(void *)(v184 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v187;
                *(void *)(v184 + 48) = v190;
                break;
              case 1u:
                uint64_t v184 = sub_100219408();
                uint64_t v188 = v197;
                __int16 v189 = v198 | 0x80;
                break;
              case 2u:
                uint64_t v184 = sub_100219408();
                uint64_t v188 = v193;
                __int16 v189 = v194 | 0x200;
                break;
              case 3u:
                uint64_t v184 = sub_100219408();
                uint64_t v188 = v195;
                __int16 v189 = v196 | 0x280;
                break;
              case 4u:
                uint64_t v184 = sub_100219408();
                uint64_t v188 = v191;
                __int16 v189 = v192 | 0x480;
                break;
              case 5u:
                uint64_t v184 = sub_100219408();
                uint64_t v188 = v199;
                __int16 v189 = v200 | 0x400;
                break;
              default:
                uint64_t v184 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
                *(void *)(v184 + swift_weakDestroy(v0 + 16) = sub_100219408();
                *(void *)(v184 + 24) = v201;
                *(_WORD *)(v184 + 32) = v202;
                uint64_t v224 = 0LL;
                unint64_t v225 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(24LL);
                v203._uint64_t countAndFlagsBits = 0xD000000000000016LL;
                v203._object = v220;
                String.append(_:)(v203);
                unsigned int v223 = [v178 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)( &v223,  &v224,  v204,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
                uint64_t v188 = 0LL;
                __int16 v189 = 0;
                unint64_t v205 = v225;
                *(void *)(v184 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v224;
                *(void *)(v184 + 48) = v205;
                break;
            }

            sub_1002474F0(v181, v183, v184, v188, v189, (uint64_t)&v226);

            if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0) {
              uint64_t v90 = sub_1002198DC( 0LL,  *((void *)v90 + 2) + 1LL,  1,  v90,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            char v174 = (uint8_t *)v222;
            unint64_t v207 = *((void *)v90 + 2);
            unint64_t v206 = *((void *)v90 + 3);
            if (v207 >= v206 >> 1) {
              uint64_t v90 = sub_1002198DC( (char *)(v206 > 1),  v207 + 1,  1,  v90,  &qword_1003FAF80,  (void (*)(void, int64_t, char *, char *))sub_10021B728);
            }
            *((void *)v90 + 2) = v207 + 1;
            uint64_t v208 = &v90[40 * v207];
            __int128 v209 = v226;
            __int128 v210 = v227;
            *((_WORD *)v208 + 32) = v228;
            *((_OWORD *)v208 + 2) = v209;
            *((_OWORD *)v208 + 3) = v210;
          }

          else
          {
          }

          uint64_t v176 = (void *)((char *)v176 + 1);
        }

        while (v221 != v176);
LABEL_122:
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_123:
        uint64_t v90 = (char *)&_swiftEmptyArrayStorage;
      }

      swift_bridgeObjectRelease();
      uint64_t v14 = swift_allocObject(&unk_1003A9C20, 25LL, 7LL);
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = v90;
      id v211 = [v1 configuredClusterSize];
      *(_BYTE *)(v14 + 24) = (_BYTE)v211;
      return v14;
  }

uint64_t sub_10021924C()
{
  switch([v0 deviceType])
  {
    case 0u:
      uint64_t v1 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
      *(void *)(v1 + swift_weakDestroy(v0 + 16) = sub_100219408();
      *(void *)(v1 + 24) = v2;
      *(_WORD *)(v1 + 32) = v3;
      *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_1002465B8();
      *(void *)(v1 + 48) = v4;
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t v1 = sub_100219408();
      break;
    default:
      uint64_t v1 = swift_allocObject(&unk_1003A9BD0, 56LL, 7LL);
      *(void *)(v1 + swift_weakDestroy(v0 + 16) = sub_100219408();
      *(void *)(v1 + 24) = v5;
      *(_WORD *)(v1 + 32) = v6;
      *(_DWORD *)&v11[8] = 0;
      unint64_t v12 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      v7._object = (void *)0x800000010033DB00LL;
      v7._uint64_t countAndFlagsBits = 0xD000000000000016LL;
      String.append(_:)(v7);
      *(void *)uint64_t v11 = [v0 deviceType];
      type metadata accessor for MRAVOutputDeviceType();
      _print_unlocked<A, B>(_:_:)( v11,  &v11[4],  v8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      unint64_t v9 = v12;
      *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *(void *)&v11[4];
      *(void *)(v1 + 48) = v9;
      break;
  }

  return v1;
}

uint64_t sub_100219408()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [v0 uid];
  if (v6)
  {
    Swift::String v7 = v6;
    uint64_t v8 = (os_log_s *)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0LL;
  }

  id v11 = [v1 modelID];
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    unint64_t v15 = 0LL;
  }

  unsigned int v16 = [v1 isAirpodsDevice];
  unsigned int v17 = [v1 deviceType];
  unsigned int v18 = v17;
  if (!v16)
  {
    if (v17 == 2)
    {
      id v19 = [v1 name];
      if (v19)
      {
        uint64_t v20 = v19;
        os_log_t v49 = v8;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v23 = v22;

        v52[0] = v21;
        v52[1] = v23;
        uint64_t v50 = 0x646F70726961LL;
        unint64_t v51 = 0xE600000000000000LL;
        unint64_t v24 = sub_1001727A4();
        LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = StringProtocol.localizedCaseInsensitiveContains<A>(_:)( &v50,  &type metadata for String,  &type metadata for String,  v24,  v24);
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          uint64_t v25 = sub_1001741A8();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v25, v2);
          swift_bridgeObjectRetain();
          id v26 = v1;
          uint64_t v27 = swift_bridgeObjectRetain();
          int v28 = (os_log_s *)Logger.logObject.getter(v27);
          os_log_type_t v29 = static os_log_type_t.info.getter();
          int v30 = v29;
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v31 = swift_slowAlloc(28LL, -1LL);
            int v48 = v30;
            uint64_t v32 = v31;
            uint64_t v47 = swift_slowAlloc(64LL, -1LL);
            v52[0] = v47;
            *(_DWORD *)uint64_t v32 = 136315650;
            id v46 = v26;
            if (v10) {
              uint64_t v33 = (uint64_t)v49;
            }
            else {
              uint64_t v33 = 7104878LL;
            }
            os_log_t v49 = v28;
            if (v10) {
              unint64_t v34 = v10;
            }
            else {
              unint64_t v34 = 0xE300000000000000LL;
            }
            uint64_t v45 = v32 + 4;
            swift_bridgeObjectRetain();
            uint64_t v50 = sub_10015ADC4(v33, v34, v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v45, v32 + 12);
            swift_bridgeObjectRelease_n(v10, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v32 + 12) = 2080;
            if (v15) {
              uint64_t v35 = v13;
            }
            else {
              uint64_t v35 = 7104878LL;
            }
            if (v15) {
              unint64_t v36 = v15;
            }
            else {
              unint64_t v36 = 0xE300000000000000LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v50 = sub_10015ADC4(v35, v36, v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v32 + 14, v32 + 22);
            swift_bridgeObjectRelease_n(v15, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v32 + 22) = 1024;
            id v37 = v46;
            unsigned int v38 = [v46 isAppleAccessory];

            LODWORD(v5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v38;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 4, v32 + 24, v32 + 28);

            os_log_t v39 = v49;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v48,  "AVOD: %s named as airpods but not identified as such. Model=%s, genuine=%{BOOL}d",  (uint8_t *)v32,  0x1Cu);
            uint64_t v40 = v47;
            swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v40, -1LL, -1LL);
            swift_slowDealloc(v32, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v15, 2LL);
            swift_bridgeObjectRelease_n(v10, 2LL);
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
          goto LABEL_30;
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v13 = swift_allocObject(&unk_1003A9BF8, 34LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100217BD0();
    *(void *)(v13 + 24) = v41;
    *(_WORD *)(v13 + 32) = v42;
    return v13;
  }

  swift_bridgeObjectRelease();
  if (v18 != 2) {
    goto LABEL_29;
  }
  if (([v1 isAppleAccessory] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v13;
}

char *sub_1002198DC( char *result, int64_t a2, char a3, char *a4, uint64_t *a5, void (*a6)(void, int64_t, char *, char *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = *((void *)a4 + 3);
  int64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      int64_t v12 = *((void *)a4 + 2);
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100156B68(a5);
      unint64_t v14 = (char *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
      size_t v15 = j__malloc_size(v14);
      *((void *)v14 + 2) = v11;
      *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 40);
      unsigned int v16 = v14 + 32;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[40 * v11 + 32]) {
          memmove(v16, a4 + 32, 40 * v11);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v14 = (char *)&_swiftEmptyArrayStorage;
      unsigned int v16 = (char *)&_swiftEmptyArrayStorage + 32;
    }

    a6(0LL, v11, v16, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_100219A00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1002198DC( isUniquelyReferenced_nonNull_native,  v14,  1,  v3,  &qword_1003FAFB0,  (void (*)(void, int64_t, char *, char *))sub_10021B4E0);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100219B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40LL);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_100160954(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)(v17, a2);
      sub_100160990((uint64_t)v17);
      if ((v12 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease();
    sub_100160990(a2);
    sub_100160954(*(void *)(*v3 + 48LL) + 40 * v10, a1);
    return 0LL;
  }

  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100160954(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100219FB8((uint64_t)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    __int128 v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1LL;
  }

Swift::Int sub_100219CF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FAF88);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::Int v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v11) {
          goto LABEL_36;
        }
        unint64_t v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v20 = v8[v14];
          if (!v20)
          {
            int64_t v14 = v19 + 2;
            if (v19 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v20 = v8[v14];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *Swift::Int v8 = -1LL << v30;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v8[v14];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v21;
            }
          }
        }

uint64_t sub_100219FB8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100219CF0(v9);
  }

  else
  {
    if (v8 > v7)
    {
      Swift::Int result = (uint64_t)sub_10021A120();
      goto LABEL_12;
    }

    sub_10021A2EC(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    do
    {
      sub_100160954(*(void *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      char v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      Swift::Int result = sub_100160990((uint64_t)v20);
      if ((v13 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v12;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_10021A120()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FAF88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_10021A2EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FAF88);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v21 >= v11) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v8 + 8 * v21);
    ++v14;
    if (!v22)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v8 + 8 * v14);
      if (!v22)
      {
        int64_t v14 = v21 + 2;
        if (v21 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v22 = *(void *)(v8 + 8 * v14);
        if (!v22) {
          break;
        }
      }
    }

uint64_t sub_10021A57C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10021A5F0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10021A598(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10021A770(a1, a2, a3, (void *)*v3, &qword_1003FAFA8, &qword_1003FAFA0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10021A5C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10021A770(a1, a2, a3, (void *)*v3, &qword_1003FAFB0, &qword_1003FAF98);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10021A5F0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003FAF90);
    int64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10021A770(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100156B68(a5);
    int64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    int64_t v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v16 = v14 + 4;
  __int128 v17 = a4 + 4;
  size_t v18 = 5 * v11;
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= &v17[v18]) {
      memmove(v14 + 4, a4 + 4, v18 * 8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v17 >= &v16[v18] || v16 >= &v17[v18])
  {
    sub_100156B68(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }

Swift::Int sub_10021A908(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_10021B4CC(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10021A9D8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10021A970()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

unint64_t sub_10021A980()
{
  unint64_t result = qword_1003FAF78;
  if (!qword_1003FAF78)
  {
    uint64_t v1 = sub_10016083C(255LL, &qword_1003FAF70, &OBJC_CLASS___MRIRNode_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1003FAF78);
  }

  return result;
}

Swift::Int sub_10021A9D8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_10021B0C0(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v111 = result;
  __int16 v108 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      __int16 v100 = v11;
      __int16 v110 = v8;
      if (v12 >= 2)
      {
        uint64_t v101 = *v108;
        do
        {
          unint64_t v102 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v101) {
            goto LABEL_159;
          }
          __int16 v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v12 + 24];
          sub_10021B18C( (char *)(v101 + 16 * v104),  (char *)(v101 + 16LL * *(void *)&v100[16 * v12 + 16]),  v101 + 16 * v105,  __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0) {
            __int16 v103 = sub_1001A5B60((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_149;
          }
          __int16 v106 = &v103[16 * v102 + 32];
          *(void *)__int16 v106 = v104;
          *((void *)v106 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v12 > v107) {
            goto LABEL_150;
          }
          memmove(&v103[16 * v12 + 16], &v103[16 * v12 + 32], 16 * (v107 - v12));
          __int16 v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v12 = v107 - 1;
        }

        while (v107 > 2);
      }

LABEL_115:
      swift_bridgeObjectRelease();
      v110[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    __int16 v110 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
    __int16 v110 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v109 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v112 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    int64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    __int128 v17 = (void *)(v10 + 16 * v13);
    uint64_t v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      Swift::Int v21 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v20 = 0;
    }

    else
    {
      int v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1LL);
      Swift::Int v21 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    unint64_t v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      uint64_t v24 = *(v22 - 1);
      uint64_t v25 = *v22;
      unint64_t v26 = (void *)(v10 + 16 * v9);
      uint64_t v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1LL)) & 1) != 0)
      {
        goto LABEL_36;
      }

      v22 += 2;
      Swift::Int v23 = v21 + 1;
      Swift::Int v9 = v21;
      Swift::Int v21 = v23;
    }

    while (v23 < v3);
    Swift::Int v21 = v23;
LABEL_36:
    Swift::Int v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13) {
        goto LABEL_155;
      }
      if (v13 < v21)
      {
        uint64_t v29 = 16 * v21;
        uint64_t v30 = 16 * v13;
        Swift::Int v31 = v21;
        Swift::Int v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v33 = v10 + v29;
            uint64_t v34 = *(void *)(v10 + v30);
            uint64_t v35 = *(void *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *(_OWORD *)(v10 + v29 - 16);
            *(void *)(v33 - swift_weakDestroy(v0 + 16) = v34;
            *(void *)(v33 - 8) = v35;
          }

          ++v32;
          v29 -= 16LL;
          v30 += 16LL;
        }

        while (v32 < v31);
      }

  swift_release(v90);
  swift_bridgeObjectRelease();
  if (((v133 | v151) & 1) != 0)
  {
    id v131 = "updateEndpoints - removed mapped endpoint entry";
    if ((v133 & 1) != 0) {
      id v131 = "updateEndpoints - updated mapped endpoint entry";
    }
    sub_10026CE38(0xD00000000000002FLL, (unint64_t)(v131 - 32) | 0x8000000000000000LL);
  }

  swift_bridgeObjectRelease();
}

LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = sub_1001A595C(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v47 = *((void *)v11 + 2);
    unint64_t v46 = *((void *)v11 + 3);
    unint64_t v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      uint64_t v11 = sub_1001A595C((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    int v48 = v11 + 32;
    os_log_t v49 = &v11[16 * v47 + 32];
    *(void *)os_log_t v49 = v13;
    *((void *)v49 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v9;
    if (v47)
    {
      Swift::Int v113 = v9;
      while (1)
      {
        unint64_t v50 = v12 - 1;
        if (v12 >= 4)
        {
          id v55 = &v48[16 * v12];
          uint64_t v56 = *((void *)v55 - 8);
          uint64_t v57 = *((void *)v55 - 7);
          BOOL v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_135;
          }
          uint64_t v60 = *((void *)v55 - 6);
          uint64_t v59 = *((void *)v55 - 5);
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          char v54 = v61;
          if (v61) {
            goto LABEL_136;
          }
          unint64_t v62 = v12 - 2;
          uint64_t v63 = &v48[16 * v12 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_138;
          }
          BOOL v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_141;
          }
          if (v67 >= v58)
          {
            __int128 v85 = &v48[16 * v50];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_145;
            }
            BOOL v78 = v53 < v88;
            goto LABEL_105;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v79 = *((void *)v11 + 4);
            uint64_t v80 = *((void *)v11 + 5);
            BOOL v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            char v73 = v61;
            goto LABEL_99;
          }

          uint64_t v52 = *((void *)v11 + 4);
          uint64_t v51 = *((void *)v11 + 5);
          BOOL v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          char v54 = v61;
        }

        if ((v54 & 1) != 0) {
          goto LABEL_137;
        }
        unint64_t v62 = v12 - 2;
        __int16 v68 = &v48[16 * v12 - 32];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        char v73 = v71;
        if (v71) {
          goto LABEL_140;
        }
        __int16 v74 = &v48[16 * v50];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_143;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_144;
        }
        if (v72 + v77 >= v53)
        {
          BOOL v78 = v53 < v77;
LABEL_105:
          if (v78) {
            unint64_t v50 = v62;
          }
          goto LABEL_107;
        }

      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }

uint64_t sub_10021B0C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      uint64_t v13 = *(v12 - 2);
      uint64_t v14 = *(v12 - 1);
      BOOL v15 = result == v13 && v10 == v14;
      if (v15 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10021B18C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  uint64_t v13 = v12 >> 4;
  Swift::Int v31 = __src;
  uint64_t v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      unint64_t v19 = &v4[16 * v13];
      uint64_t v29 = v19;
      Swift::Int v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        int v20 = (char *)(a3 - 16);
        Swift::Int v21 = v6;
        while (1)
        {
          unint64_t v22 = v20 + 16;
          uint64_t v23 = *((void *)v19 - 2);
          uint64_t v24 = *((void *)v19 - 1);
          uint64_t v25 = *((void *)v21 - 2);
          uint64_t v26 = *((void *)v21 - 1);
          v21 -= 16;
          BOOL v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1LL) & 1) == 0)
          {
            uint64_t v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19) {
              *(_OWORD *)int v20 = *((_OWORD *)v19 - 1);
            }
            Swift::Int v21 = v6;
            v19 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }

          else
          {
            if (v22 != v6 || v20 >= v6) {
              *(_OWORD *)int v20 = *(_OWORD *)v21;
            }
            Swift::Int v31 = v21;
            if (v21 <= v7) {
              goto LABEL_50;
            }
          }

          v20 -= 16;
          uint64_t v6 = v21;
          if (v19 <= v4) {
            goto LABEL_50;
          }
        }
      }

      goto LABEL_50;
    }
  }

  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        uint64_t v15 = *((void *)v6 + 1);
        uint64_t v16 = *((void *)v4 + 1);
        BOOL v17 = *(void *)v6 == *(void *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v15, *(void *)v4, v16, 1LL) & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v30 = v4;
          uint64_t v18 = v6;
        }

        else
        {
          uint64_t v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }

        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v18;
      }

      while ((unint64_t)v18 < a3);
      Swift::Int v31 = v7;
    }

char *sub_10021B424(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7]) {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }

  return result;
}

uint64_t sub_10021B4CC(uint64_t a1)
{
  return sub_10015DEA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10021B4E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100156B68(&qword_1003FAF98);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10021B5EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100160954(v4, (uint64_t)v5);
      sub_100219B78((uint64_t)v6, (uint64_t)v5);
      sub_100160990((uint64_t)v6);
      v4 += 40LL;
      --v2;
    }

    while (v2);
    return v7;
  }

  return result;
}

uint64_t sub_10021B674()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10021B6A4()
{
  return swift_deallocObject(v0, 34LL, 7LL);
}

void type metadata accessor for MRAVOutputDeviceSubtype(uint64_t a1)
{
}

uint64_t sub_10021B6E0()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_10021B704()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10021B728(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

id sub_10021B834()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice);
}

id sub_10021B840@<X0>(void *a1@<X8>)
{
  id result = sub_10021B834();
  *a1 = result;
  return result;
}

void sub_10021B868(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice) = *a1;
  id v3 = v2;
}

id sub_10021B8A4()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice);
}

id sub_10021B8B0@<X0>(void *a1@<X8>)
{
  id result = sub_10021B8A4();
  *a1 = result;
  return result;
}

void sub_10021B8D8(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice) = *a1;
  id v3 = v2;
}

id sub_10021B914()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10021B920@<X0>(void *a1@<X8>)
{
  id result = sub_10021B914();
  *a1 = result;
  return result;
}

void sub_10021B948(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021B984()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
}

id sub_10021B990@<X0>(void *a1@<X8>)
{
  id result = sub_10021B984();
  *a1 = result;
  return result;
}

void sub_10021B9B8(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID) = *a1;
  id v3 = v2;
}

id sub_10021BB84(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD000000000000030LL;
  v6[1] = 0x800000010033DBB0LL;
  v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0LL;
  uint64_t v7 = &v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10021BDD0()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021BE18(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked);
}

uint64_t (*sub_10021BE24(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021BE6C(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_eventName);
}

unint64_t sub_10021BE7C(uint64_t a1, uint64_t a2)
{
  return sub_10021C6D0(a1, a2, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_requestID);
}

uint64_t sub_10021BE88()
{
  return sub_10021DEE0( (uint64_t (*)(void))sub_10021B834,  (uint64_t (*)(void))sub_10021B8A4,  (uint64_t (*)(void))sub_10021B914,  (uint64_t (*)(void))sub_10021B984);
}

id sub_10021BEE0()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy);
}

id sub_10021BEEC@<X0>(void *a1@<X8>)
{
  id result = sub_10021BEE0();
  *a1 = result;
  return result;
}

void sub_10021BF14(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy) = *a1;
  id v3 = v2;
}

id sub_10021BF50()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
}

id sub_10021BF5C@<X0>(void *a1@<X8>)
{
  id result = sub_10021BF50();
  *a1 = result;
  return result;
}

void sub_10021BF84(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021BFC0()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10021BFCC@<X0>(void *a1@<X8>)
{
  id result = sub_10021BFC0();
  *a1 = result;
  return result;
}

void sub_10021BFF4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021C030()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext);
}

id sub_10021C03C@<X0>(void *a1@<X8>)
{
  id result = sub_10021C030();
  *a1 = result;
  return result;
}

void sub_10021C064(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext) = *a1;
  id v3 = v2;
}

id sub_10021C0A0()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
}

id sub_10021C0AC@<X0>(void *a1@<X8>)
{
  id result = sub_10021C0A0();
  *a1 = result;
  return result;
}

void sub_10021C0D4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID) = *a1;
  id v3 = v2;
}

uint64_t sub_10021C110()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034C910;
  *(void *)(v1 + 32) = sub_10021BEE0();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_10021BF50();
  *(void *)(v1 + 48) = sub_10021BFC0();
  *(void *)(v1 + 56) = sub_10021C030();
  id v2 = sub_10021C0A0();
  *(void *)(v1 + 64) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

id sub_10021C384(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD00000000000002ALL;
  v6[1] = 0x800000010033DC30LL;
  v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext] = 0LL;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0LL;
  uint64_t v7 = &v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, "init");
}

id sub_10021C450(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  unint64_t v6 = &v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD00000000000002ALL;
  v6[1] = 0x800000010033DC30LL;
  v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0LL;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10021C618()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021C660(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked);
}

uint64_t (*sub_10021C66C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021C6B4(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName);
}

unint64_t sub_10021C6C4(uint64_t a1, uint64_t a2)
{
  return sub_10021C6D0(a1, a2, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID);
}

unint64_t sub_10021C6D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v6, v13);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = 0x4974736575716572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE900000000000044LL;
  int64_t v8 = (uint64_t *)(v5 + *a3);
  swift_beginAccess(v8, v12, 0LL, 0LL);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v9;
  swift_bridgeObjectRetain();
  return sub_1001B7BC8(inited);
}

uint64_t sub_10021C77C()
{
  return sub_10021C110();
}

id sub_10021C858()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10021C864@<X0>(void *a1@<X8>)
{
  id result = sub_10021C858();
  *a1 = result;
  return result;
}

void sub_10021C88C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021C8C8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
}

id sub_10021C8D4@<X0>(void *a1@<X8>)
{
  id result = sub_10021C8C8();
  *a1 = result;
  return result;
}

void sub_10021C8FC(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021C938()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext);
}

id sub_10021C944@<X0>(void *a1@<X8>)
{
  id result = sub_10021C938();
  *a1 = result;
  return result;
}

void sub_10021C96C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext) = *a1;
  id v3 = v2;
}

unint64_t sub_10021C9A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, v16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  *(void *)(inited + 32) = 0x4974736575716572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE900000000000044LL;
  id v4 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateEndpointAnalytics_requestID);
  swift_beginAccess(v4, v15, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "operationType");
  *(_WORD *)(inited + 94) = -4864;
  uint64_t v7 = (void *)(v1 + OBJC_IVAR___MRDCreateEndpointAnalytics_operationType);
  swift_beginAccess(v1 + OBJC_IVAR___MRDCreateEndpointAnalytics_operationType, v14, 0LL, 0LL);
  v13[0] = *v7;
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000015LL;
  *(void *)(inited + 136) = 0x800000010033DCC0LL;
  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR___MRDCreateEndpointAnalytics_operationTypeString);
  swift_beginAccess(v1 + OBJC_IVAR___MRDCreateEndpointAnalytics_operationTypeString, v13, 0LL, 0LL);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = v10;
  swift_bridgeObjectRetain();
  return sub_1001B7BC8(inited);
}

id sub_10021CC44(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10021CC84(a1, a2);
}

id sub_10021CC84(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics_operationType] = 0LL;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_operationTypeString];
  *uint64_t v6 = 0LL;
  v6[1] = 0xE000000000000000LL;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_eventName];
  *uint64_t v7 = 0xD000000000000024LL;
  v7[1] = 0x800000010033DC90LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext] = 0LL;
  v2[OBJC_IVAR___MRDCreateEndpointAnalytics_tracked] = 0;
  uint64_t v8 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_requestID];
  *uint64_t v8 = a1;
  v8[1] = a2;
  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

uint64_t sub_10021CE48()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateEndpointAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021CE90(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDCreateEndpointAnalytics_tracked);
}

uint64_t (*sub_10021CE9C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021CEE4(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDCreateEndpointAnalytics_eventName);
}

unint64_t sub_10021CEF4()
{
  return sub_10021C9A8();
}

uint64_t sub_10021CF14()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034D870;
  *(void *)(v1 + 32) = sub_10021C858();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_10021C8C8();
  id v2 = sub_10021C938();
  *(void *)(v1 + 48) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

id sub_10021D144()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices);
}

id sub_10021D150@<X0>(void *a1@<X8>)
{
  id result = sub_10021D144();
  *a1 = result;
  return result;
}

void sub_10021D178(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices) = *a1;
  id v3 = v2;
}

id sub_10021D1B4()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice);
}

id sub_10021D1C0@<X0>(void *a1@<X8>)
{
  id result = sub_10021D1B4();
  *a1 = result;
  return result;
}

void sub_10021D1E8(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice) = *a1;
  id v3 = v2;
}

id sub_10021D224()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint);
}

id sub_10021D230@<X0>(void *a1@<X8>)
{
  id result = sub_10021D224();
  *a1 = result;
  return result;
}

void sub_10021D258(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021D294()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion);
}

id sub_10021D2A0@<X0>(void *a1@<X8>)
{
  id result = sub_10021D294();
  *a1 = result;
  return result;
}

void sub_10021D2C8(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion) = *a1;
  id v3 = v2;
}

id sub_10021D304()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification);
}

id sub_10021D310@<X0>(void *a1@<X8>)
{
  id result = sub_10021D304();
  *a1 = result;
  return result;
}

void sub_10021D338(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification);
  *(void *)(*a2
            + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification) = *a1;
  id v3 = v2;
}

id sub_10021D374()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification);
}

id sub_10021D380@<X0>(void *a1@<X8>)
{
  id result = sub_10021D374();
  *a1 = result;
  return result;
}

void sub_10021D3A8(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification) = *a1;
  id v3 = v2;
}

uint64_t sub_10021D3E4()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034E130;
  *(void *)(v1 + 32) = sub_10021D144();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_10021D1B4();
  *(void *)(v1 + 48) = sub_10021D224();
  *(void *)(v1 + 56) = sub_10021D304();
  *(void *)(v1 + 64) = sub_10021D294();
  id v2 = sub_10021D374();
  *(void *)(v1 + 72) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

unint64_t sub_10021D46C()
{
  uint64_t v1 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v1, v13);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  *(void *)(inited + 32) = 0x4974736575716572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE900000000000044LL;
  id v3 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestID);
  swift_beginAccess(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestID, v12, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000014LL;
  *(void *)(inited + 88) = 0x800000010033DD40LL;
  uint64_t v6 = (_BYTE *)(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestContainsLocal);
  swift_beginAccess(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestContainsLocal, v11, 0LL, 0LL);
  *(_BYTE *)(inited + 96) = *v6;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD000000000000018LL;
  *(void *)(inited + 136) = 0x800000010033DD60LL;
  swift_beginAccess(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_numberOfUndesiredDevices, v10, 0LL, 0LL);
  swift_bridgeObjectRetain();
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = v8;
  return sub_1001B7BC8(inited);
}

id sub_10021D830(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10021D870(a1, a2);
}

id sub_10021D870(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestContainsLocal] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_numberOfUndesiredDevices] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_numberOfDevicesOnLocal] = 0LL;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_eventName];
  *uint64_t v6 = 0xD00000000000002DLL;
  v6[1] = 0x800000010033DD10LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification] = 0LL;
  v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked] = 0;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10021DA78()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021DAC0(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked);
}

uint64_t (*sub_10021DACC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021DB14(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_eventName);
}

unint64_t sub_10021DB24()
{
  return sub_10021D46C();
}

uint64_t sub_10021DB44()
{
  return sub_10021D3E4();
}

id sub_10021DD20()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader);
}

id sub_10021DD2C@<X0>(void *a1@<X8>)
{
  id result = sub_10021DD20();
  *a1 = result;
  return result;
}

void sub_10021DD54(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader) = *a1;
  id v3 = v2;
}

id sub_10021DD90()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint);
}

id sub_10021DD9C@<X0>(void *a1@<X8>)
{
  id result = sub_10021DD90();
  *a1 = result;
  return result;
}

void sub_10021DDC4(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021DE00()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint);
}

id sub_10021DE0C@<X0>(void *a1@<X8>)
{
  id result = sub_10021DE00();
  *a1 = result;
  return result;
}

void sub_10021DE34(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021DE70()
{
  return sub_1002018D4(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup);
}

id sub_10021DE7C@<X0>(void *a1@<X8>)
{
  id result = sub_10021DE70();
  *a1 = result;
  return result;
}

void sub_10021DEA4(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup) = *a1;
  id v3 = v2;
}

uint64_t sub_10021DEE0(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = sub_100156B68(&qword_1003F8310);
  uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10034E140;
  *(void *)(v9 + 32) = a1();
  *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a2();
  *(void *)(v9 + 48) = a3();
  uint64_t v10 = a4();
  *(void *)(v9 + 56) = v10;
  specialized Array._endMutation()(v10);
  return v9;
}

unint64_t sub_10021DF78()
{
  uint64_t v1 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v1, v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034E150;
  *(void *)(inited + 32) = 0x4974736575716572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE900000000000044LL;
  id v3 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_requestID);
  swift_beginAccess(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_requestID, v14, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000011LL;
  *(void *)(inited + 88) = 0x800000010033DDF0LL;
  uint64_t v6 = (_BYTE *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_containsLeaderInfo);
  swift_beginAccess(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_containsLeaderInfo, v13, 0LL, 0LL);
  *(_BYTE *)(inited + 96) = *v6;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD000000000000019LL;
  *(void *)(inited + 136) = 0x800000010033DE10LL;
  uint64_t v7 = (_BYTE *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_undiscoverableGroupLeader);
  swift_beginAccess( v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_undiscoverableGroupLeader,  v12,  0LL,  0LL);
  *(_BYTE *)(inited + 144) = *v7;
  *(void *)(inited + 168) = &type metadata for Bool;
  strcpy((char *)(inited + 176), "airlayActive");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 19_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = -5120;
  uint64_t v8 = (char *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_airplayActive);
  swift_beginAccess(v8, &v11, 0LL, 0LL);
  char v9 = *v8;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = v9;
  swift_bridgeObjectRetain();
  return sub_1001B7BC8(inited);
}

id sub_10021E2A4(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10021E2E4(a1, a2);
}

id sub_10021E2E4(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_undiscoverableGroupLeader] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_containsLeaderInfo] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_airplayActive] = 0;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_eventName];
  *uint64_t v6 = 0xD000000000000037LL;
  v6[1] = 0x800000010033DDB0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint] = 0LL;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup] = 0LL;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked] = 0;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10021E4B4()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021E4FC(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked);
}

uint64_t (*sub_10021E508(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021E550(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_eventName);
}

unint64_t sub_10021E560()
{
  return sub_10021DF78();
}

uint64_t sub_10021E580()
{
  return sub_10021DEE0( (uint64_t (*)(void))sub_10021DD20,  (uint64_t (*)(void))sub_10021DD90,  (uint64_t (*)(void))sub_10021DD90,  (uint64_t (*)(void))sub_10021DE70);
}

id sub_10021EA58()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint);
}

id sub_10021EA64@<X0>(void *a1@<X8>)
{
  id result = sub_10021EA58();
  *a1 = result;
  return result;
}

void sub_10021EA8C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021EAC8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology);
}

id sub_10021EAD4@<X0>(void *a1@<X8>)
{
  id result = sub_10021EAC8();
  *a1 = result;
  return result;
}

void sub_10021EAFC(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology) = *a1;
  id v3 = v2;
}

id sub_10021EB38()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint);
}

id sub_10021EB44@<X0>(void *a1@<X8>)
{
  id result = sub_10021EB38();
  *a1 = result;
  return result;
}

void sub_10021EB6C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint) = *a1;
  id v3 = v2;
}

id sub_10021EBA8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect);
}

id sub_10021EBB4@<X0>(void *a1@<X8>)
{
  id result = sub_10021EBA8();
  *a1 = result;
  return result;
}

void sub_10021EBDC(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect) = *a1;
  id v3 = v2;
}

id sub_10021EC18()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand);
}

id sub_10021EC24@<X0>(void *a1@<X8>)
{
  id result = sub_10021EC18();
  *a1 = result;
  return result;
}

void sub_10021EC4C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand) = *a1;
  id v3 = v2;
}

uint64_t sub_10021EC88()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034C910;
  *(void *)(v1 + 32) = sub_10021EA58();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_10021EAC8();
  *(void *)(v1 + 48) = sub_10021EB38();
  *(void *)(v1 + 56) = sub_10021EBA8();
  id v2 = sub_10021EC18();
  *(void *)(v1 + 64) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

uint64_t sub_10021ED08()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, v33);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C940;
  strcpy((char *)(inited + 32), "commandString");
  *(_WORD *)(inited + 46) = -4864;
  id v4 = (uint64_t *)(v0 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_commandString);
  swift_beginAccess(v4, v32, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x646E616D6D6F63LL;
  *(void *)(inited + 88) = 0xE700000000000000LL;
  uint64_t v7 = (void *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_command);
  swift_beginAccess(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_command, v31, 0LL, 0LL);
  v30[0] = *v7;
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0xD00000000000001DLL;
  *(void *)(inited + 136) = 0x800000010033DEA0LL;
  objc_super v9 = (_BYTE *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID,  v30,  0LL,  0LL);
  *(_BYTE *)(inited + 144) = *v9;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0xD00000000000001ELL;
  *(void *)(inited + 184) = 0x800000010033DEC0LL;
  uint64_t v10 = (_BYTE *)(v1
                + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration,  v29,  0LL,  0LL);
  *(_BYTE *)(inited + 192) = *v10;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000015LL;
  *(void *)(inited + 232) = 0x800000010033DEE0LL;
  uint64_t v11 = (_BYTE *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForLocalOrigin);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForLocalOrigin,  v28,  0LL,  0LL);
  *(_BYTE *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *v11;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD000000000000019LL;
  *(void *)(inited + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010033DF00LL;
  uint64_t v12 = (_BYTE *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCompanionOrigin);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCompanionOrigin,  v27,  0LL,  0LL);
  *(_BYTE *)(inited + 288) = *v12;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000021LL;
  *(void *)(inited + 328) = 0x800000010033DF20LL;
  uint64_t v13 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs,  v26,  0LL,  0LL);
  uint64_t v14 = *v13;
  *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Int;
  *(void *)(inited + 336) = v14;
  unint64_t v15 = sub_1001B7BC8(inited);
  uint64_t v16 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_deviceInfo);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_deviceInfo,  v25,  0LL,  0LL);
  id v17 = *v16;
  uint64_t v18 = sub_10021F028();

  uint64_t v19 = sub_1002210BC((uint64_t)v18, v15);
  int v20 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_details);
  swift_beginAccess(v20, &v24, 0LL, 0LL);
  id v21 = *v20;
  unint64_t v22 = sub_10021F2CC();

  return sub_1002210BC(v22, v19);
}

__CFString *sub_10021F028()
{
  uint64_t v1 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v1, &v22);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034E160;
  *(void *)(inited + 32) = 0x7469736F706D6F63LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xEB000000006E6F69LL;
  int v3 = MRAnalyticsCompositionForDeviceInfo(v0);
  type metadata accessor for MRAnalyticsDeviceComposition(0LL);
  *(_DWORD *)(inited + 48) = v3;
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000011LL;
  *(void *)(inited + 88) = 0x800000010033DF50LL;
  uint64_t v5 = MRAnalyticsCompositionForDeviceInfo(v0);
  id v6 = (id)MRAnalyticsDeviceCompositionDescription(v5);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = v9;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000017LL;
  *(void *)(inited + 136) = 0x800000010033DF70LL;
  id v10 = -[__CFString deviceUID](v0, "deviceUID");
  id v11 = v10;
  if (v10) {

  }
  *(_BYTE *)(inited + 144) = v11 != 0LL;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0x616C707269417369LL;
  *(void *)(inited + 184) = 0xEF65766974634179LL;
  *(_BYTE *)(inited + 192) = -[__CFString isAirPlayActive](v0, "isAirPlayActive");
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000017LL;
  *(void *)(inited + 232) = 0x800000010033CF90LL;
  *(_BYTE *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = -[__CFString groupContainsDiscoverableGroupLeader]( v0,  "groupContainsDiscoverableGroupLeader");
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD00000000000001DLL;
  *(void *)(inited + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010033DF90LL;
  *(_BYTE *)(inited + 288) = -[__CFString parentGroupContainsDiscoverableGroupLeader]( v0,  "parentGroupContainsDiscoverableGroupLeader");
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x5472657473756C63LL;
  *(void *)(inited + 328) = 0xEB00000000657079LL;
  unsigned int v12 = -[__CFString clusterType](v0, "clusterType");
  type metadata accessor for MRAVOutputDeviceClusterType(0LL);
  *(_DWORD *)(inited + 336) = v12;
  *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v13;
  *(void *)(inited + 368) = 0xD000000000000011LL;
  *(void *)(inited + 376) = 0x800000010033DFB0LL;
  unsigned int v14 = -[__CFString clusterType](v0, "clusterType");
  if (v14 <= 3)
  {
    uint64_t v15 = (int)v14;
    uint64_t v0 = off_1003A9FD8[v15];
    uint64_t v16 = off_1003A9FB8[v15];
  }

  id result = v0;
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v21 = v20;

    *(void *)(inited + 408) = &type metadata for String;
    *(void *)(inited + 384) = v19;
    *(void *)(inited + 392) = v21;
    return (__CFString *)sub_1001B7BC8(inited);
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_10021F2CC()
{
  uint64_t v1 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v1, &v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  *(void *)(inited + 32) = 0x4974736575716572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE900000000000044LL;
  id v3 = [v0 requestID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x6E6F73616572LL;
  *(void *)(inited + 88) = 0xE600000000000000LL;
  id v7 = [v0 reason];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = sub_100156B68(&qword_1003F8038);
  *(void *)(inited + 96) = v9;
  *(void *)(inited + 104) = v11;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v12;
  strcpy((char *)(inited + 128), "userInitiated");
  *(_WORD *)(inited + 142) = -4864;
  unsigned __int8 v13 = [v0 userInitiated];
  *(void *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = v13;
  return sub_1001B7BC8(inited);
}

id sub_10021F61C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_10021F674(a1, a2, a3, a4);
}

id sub_10021F674(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v4, a2);
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_command] = 0LL;
  uint64_t v10 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_commandString];
  *uint64_t v10 = 0LL;
  v10[1] = 0xE000000000000000LL;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForLocalOrigin] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCompanionOrigin] = 0;
  uint64_t v11 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs];
  *uint64_t v11 = 0LL;
  uint64_t v12 = (double *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_timeout];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_timeout] = 0LL;
  unsigned __int8 v13 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_eventName];
  *unsigned __int8 v13 = 0xD00000000000002BLL;
  v13[1] = 0x800000010033DE70LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand] = 0LL;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_details] = a1;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_deviceInfo] = a2;
  swift_beginAccess(v11, v17, 1LL, 0LL);
  *uint64_t v11 = a3;
  swift_beginAccess(v12, v16, 1LL, 0LL);
  double *v12 = a4;
  v15.receiver = v4;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t sub_10021F95C()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10021F9A4(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked);
}

uint64_t (*sub_10021F9B0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10021F9F8(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_eventName);
}

uint64_t sub_10021FA08()
{
  return sub_10021ED08();
}

uint64_t sub_10021FA28()
{
  return sub_10021EC88();
}

void sub_10021FAF0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (void **)(a1 + *a4);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = *v5;
  *uint64_t v5 = a3;
  id v7 = a3;
}

id sub_10021FBE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  swift_beginAccess(v3, v7, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 8);
  swift_bridgeObjectRetain(v4);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10021FC50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess(v9, v12, 1LL, 0LL);
  uint64_t v10 = v9[1];
  uint64_t *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease(v10);
}

id sub_100220468()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices);
}

id sub_100220474@<X0>(void *a1@<X8>)
{
  id result = sub_100220468();
  *a1 = result;
  return result;
}

void sub_10022049C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices) = *a1;
  id v3 = v2;
}

id sub_1002204D8()
{
  return sub_1002018D4(&OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands);
}

id sub_1002204E4@<X0>(void *a1@<X8>)
{
  id result = sub_1002204D8();
  *a1 = result;
  return result;
}

void sub_10022050C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands) = *a1;
  id v3 = v2;
}

uint64_t sub_100220548()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v2, v56);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034E170;
  strcpy((char *)(inited + 32), "commandString");
  *(_WORD *)(inited + 46) = -4864;
  id v4 = (uint64_t *)(v0 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_commandString);
  swift_beginAccess(v4, v55, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x646E616D6D6F63LL;
  *(void *)(inited + 88) = 0xE700000000000000LL;
  uint64_t v7 = (void *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_command);
  swift_beginAccess(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_command, v54, 0LL, 0LL);
  v53[0] = *v7;
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0xD00000000000001DLL;
  *(void *)(inited + 136) = 0x800000010033DEA0LL;
  id v9 = (_BYTE *)(v1
               + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID,  v53,  0LL,  0LL);
  *(_BYTE *)(inited + 144) = *v9;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0xD00000000000001ELL;
  *(void *)(inited + 184) = 0x800000010033DEC0LL;
  uint64_t v10 = (_BYTE *)(v1
                + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration,  v52,  0LL,  0LL);
  *(_BYTE *)(inited + 192) = *v10;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000015LL;
  *(void *)(inited + 232) = 0x800000010033DEE0LL;
  uint64_t v11 = (_BYTE *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForLocalOrigin);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForLocalOrigin,  v51,  0LL,  0LL);
  *(_BYTE *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *v11;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD000000000000019LL;
  *(void *)(inited + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010033DF00LL;
  uint64_t v12 = (_BYTE *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCompanionOrigin);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCompanionOrigin,  v50,  0LL,  0LL);
  *(_BYTE *)(inited + 288) = *v12;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000021LL;
  *(void *)(inited + 328) = 0x800000010033DF20LL;
  unsigned __int8 v13 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs,  v49,  0LL,  0LL);
  *(void *)(inited + 336) = *v13;
  *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Int;
  *(void *)(inited + 368) = 0xD000000000000022LL;
  *(void *)(inited + 376) = 0x800000010033E050LL;
  unsigned int v14 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfDiscoveredOutputDeviceUIDs);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfDiscoveredOutputDeviceUIDs,  v48,  0LL,  0LL);
  *(void *)(inited + 384) = *v14;
  *(void *)(inited + 408) = &type metadata for Int;
  *(void *)(inited + 4swift_weakDestroy(v0 + 16) = 0xD00000000000001FLL;
  *(void *)(inited + 424) = 0x800000010033E080LL;
  objc_super v15 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfMissingOutputDeviceUIDs);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfMissingOutputDeviceUIDs,  v47,  0LL,  0LL);
  *(void *)(inited + 432) = *v15;
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = 0xD000000000000011LL;
  *(void *)(inited + 472) = 0x800000010033E0A0LL;
  uint64_t v16 = (void *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfEndpoints);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfEndpoints,  v46,  0LL,  0LL);
  *(void *)(inited + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *v16;
  *(void *)(inited + 504) = &type metadata for Int;
  *(void *)(inited + 512) = 0xD000000000000018LL;
  *(void *)(inited + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010033E0C0LL;
  id v17 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfPendingAtTimeout);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfPendingAtTimeout,  v45,  0LL,  0LL);
  uint64_t v18 = *v17;
  *(void *)(inited + 552) = &type metadata for Int;
  *(void *)(inited + 528) = v18;
  *(void *)(inited + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000017LL;
  *(void *)(inited + 568) = 0x800000010033E0E0LL;
  uint64_t v19 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtTimeout);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtTimeout,  v44,  0LL,  0LL);
  uint64_t v20 = *v19;
  *(void *)(inited + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Int;
  *(void *)(inited + 576) = v20;
  *(void *)(inited + 608) = 0xD00000000000001ALL;
  *(void *)(inited + 6swift_weakDestroy(v0 + 16) = 0x800000010033E100LL;
  uint64_t v21 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtCompletion);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtCompletion,  v43,  0LL,  0LL);
  uint64_t v22 = *v21;
  *(void *)(inited + 648) = &type metadata for Int;
  *(void *)(inited + 624) = v22;
  *(void *)(inited + 656) = 0xD000000000000018LL;
  *(void *)(inited + 664) = 0x800000010033E120LL;
  uint64_t v23 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtTimeout);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtTimeout,  v42,  0LL,  0LL);
  uint64_t v24 = *v23;
  *(void *)(inited + 696) = &type metadata for Int;
  *(void *)(inited + 672) = v24;
  *(void *)(inited + 704) = 0xD00000000000001BLL;
  *(void *)(inited + 712) = 0x800000010033E140LL;
  uint64_t v25 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtCompletion);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtCompletion,  v41,  0LL,  0LL);
  uint64_t v26 = *v25;
  *(void *)(inited + 744) = &type metadata for Int;
  *(void *)(inited + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v26;
  *(void *)(inited + 752) = 0x74756F656D6974LL;
  *(void *)(inited + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE700000000000000LL;
  BOOL v27 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout);
  swift_beginAccess(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout, v40, 0LL, 0LL);
  uint64_t v28 = *v27;
  *(void *)(inited + 792) = &type metadata for Double;
  *(void *)(inited + 768) = v28;
  unint64_t v29 = sub_1001B7BC8(inited);
  uint64_t v30 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_deviceInfo);
  swift_beginAccess( v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_deviceInfo,  v39,  0LL,  0LL);
  id v31 = *v30;
  Swift::Int v32 = sub_10021F028();

  uint64_t v33 = sub_1002210BC((uint64_t)v32, v29);
  uint64_t v34 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_details);
  swift_beginAccess(v34, v38, 0LL, 0LL);
  id v35 = *v34;
  unint64_t v36 = sub_10021F2CC();

  return sub_1002210BC(v36, v33);
}

id sub_100220C38(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_100220C90(a1, a2, a3, a4);
}

id sub_100220C90(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v4, a2);
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_command] = 0LL;
  uint64_t v10 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_commandString];
  *uint64_t v10 = 0LL;
  v10[1] = 0xE000000000000000LL;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForLocalOrigin] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCompanionOrigin] = 0;
  uint64_t v11 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs];
  *uint64_t v11 = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfDiscoveredOutputDeviceUIDs] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfMissingOutputDeviceUIDs] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfEndpoints] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfPendingAtTimeout] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtTimeout] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtCompletion] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtTimeout] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtCompletion] = 0LL;
  uint64_t v12 = (double *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout] = 0LL;
  unsigned __int8 v13 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_eventName];
  *unsigned __int8 v13 = 0xD00000000000002CLL;
  v13[1] = 0x800000010033E020LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices] = 0LL;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands] = 0LL;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_details] = a1;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_deviceInfo] = a2;
  swift_beginAccess(v11, v17, 1LL, 0LL);
  *uint64_t v11 = a3;
  swift_beginAccess(v12, v16, 1LL, 0LL);
  double *v12 = a4;
  v15.receiver = v4;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t sub_100220F84()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100220FCC(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10020226C(a1, a2, a3, &OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked);
}

uint64_t (*sub_100220FD8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100221020(uint64_t a1, uint64_t a2)
{
  return sub_100202308(a1, a2, &OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_eventName);
}

uint64_t sub_100221030()
{
  return sub_100220548();
}

uint64_t sub_100221050()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034D880;
  *(void *)(v1 + 32) = sub_100220468();
  id v2 = sub_1002204D8();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

uint64_t sub_1002210BC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_100221178(a1, (uint64_t)sub_100221138, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100221138@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_100160800((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100221178(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  uint64_t v51 = a1;
  uint64_t v52 = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  uint64_t v53 = v9;
  uint64_t v54 = 0LL;
  uint64_t v55 = v12 & v10;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  swift_bridgeObjectRetain();
  swift_retain(a3);
  sub_100221B04(&v49);
  uint64_t v13 = *((void *)&v49 + 1);
  if (!*((void *)&v49 + 1)) {
    goto LABEL_27;
  }
  uint64_t v14 = v49;
  sub_100160944(v50, v48);
  objc_super v15 = *(void **)a5;
  unint64_t v17 = sub_10015CAD4(v14, v13);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  char v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_1001FCD60();
      if ((v21 & 1) != 0) {
        goto LABEL_12;
      }
    }

uint64_t sub_1002214CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FB388);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  BOOL v37 = v3;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v38) {
      break;
    }
    uint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v39 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v39 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v38)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v38) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v39 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

void *sub_1002217E8()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FB388);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

uint64_t sub_10022199C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001E12A0(a3, &qword_1003FB380);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002217E8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      unint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }

uint64_t sub_100221B04@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    char v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_100160800(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10022257C((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1002225C4((uint64_t)v21);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

unint64_t sub_100221CD8()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB410);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034E150;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034EA28);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD00000000000001DLL;
  *(void *)(inited + 48) = 0x800000010034E240LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034EA50);
  *(void *)(inited + 64) = 0xD000000000000020LL;
  *(void *)(inited + 72) = 0x800000010034E260LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034EA78);
  *(void *)(inited + 88) = 0xD000000000000014LL;
  *(void *)(inited + 96) = 0x800000010034E290LL;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034EAA0);
  *(void *)(inited + 112) = 0xD000000000000011LL;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010034E2B0LL;
  return sub_1001B7CFC(inited, &qword_1003FB418, &qword_1003FB420);
}

unint64_t sub_100221DD8()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB3F8);
  uint64_t inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BD10;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034E960);
  strcpy((char *)(inited + 40), "searchForBuddy");
  *(_BYTE *)(inited + 55) = -18;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034E988);
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x800000010034E310LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034E9B0);
  *(void *)(inited + 88) = 0xD000000000000014LL;
  *(void *)(inited + 96) = 0x800000010034E290LL;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034E9D8);
  *(void *)(inited + 112) = 0xD000000000000013LL;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010034E330LL;
  *(void *)(inited + 128) = swift_getKeyPath(&unk_10034EA00);
  *(void *)(inited + 136) = 0xD000000000000011LL;
  *(void *)(inited + 144) = 0x800000010034E2B0LL;
  return sub_1001B7CFC(inited, &qword_1003FB400, &qword_1003FB408);
}

unint64_t sub_100221F0C()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB3E0);
  uint64_t inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034E8E8);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000014LL;
  *(void *)(inited + 48) = 0x800000010034E290LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034E910);
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x800000010034E310LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034E938);
  *(void *)(inited + 88) = 0xD000000000000013LL;
  *(void *)(inited + 96) = 0x800000010034E330LL;
  return sub_1001B7CFC(inited, &qword_1003FB3E8, &qword_1003FB3F0);
}

unint64_t sub_100221FE4()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB3C8);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C930;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034E7F8);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000015LL;
  *(void *)(inited + 48) = 0x800000010034E390LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034E820);
  *(void *)(inited + 64) = 0xD00000000000001DLL;
  *(void *)(inited + 72) = 0x800000010034E3B0LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034E848);
  strcpy((char *)(inited + 88), "createEndpoint");
  *(_BYTE *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034E870);
  *(void *)(inited + 112) = 0xD000000000000011LL;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0x800000010034E3E0LL;
  *(void *)(inited + 128) = swift_getKeyPath(&unk_10034E898);
  *(void *)(inited + 136) = 0xD00000000000002FLL;
  *(void *)(inited + 144) = 0x800000010034E400LL;
  *(void *)(inited + 152) = swift_getKeyPath(&unk_10034E8C0);
  *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000021LL;
  *(void *)(inited + 168) = 0x800000010034E430LL;
  return sub_1001B7CFC(inited, &qword_1003FB3D0, &qword_1003FB3D8);
}

unint64_t sub_100222140()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB3B0);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034E150;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034E758);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000011LL;
  *(void *)(inited + 48) = 0x800000010034E490LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034E780);
  *(void *)(inited + 64) = 0xD000000000000017LL;
  *(void *)(inited + 72) = 0x800000010034E4B0LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034E7A8);
  strcpy((char *)(inited + 88), "createEndpoint");
  *(_BYTE *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034E7D0);
  strcpy((char *)(inited + 112), "discoverGroup");
  *(_WORD *)(inited + 126) = -4864;
  return sub_1001B7CFC(inited, &qword_1003FB3B8, &qword_1003FB3C0);
}

unint64_t sub_100222258()
{
  uint64_t v0 = sub_100156B68(&qword_1003FB398);
  uint64_t inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BD10;
  *(void *)(inited + 32) = swift_getKeyPath(&unk_10034E690);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xD000000000000017LL;
  *(void *)(inited + 48) = 0x800000010034E4B0LL;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_10034E6B8);
  *(void *)(inited + 64) = 0xD000000000000021LL;
  *(void *)(inited + 72) = 0x800000010034E510LL;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = swift_getKeyPath(&unk_10034E6E0);
  *(void *)(inited + 88) = 0xD000000000000015LL;
  *(void *)(inited + 96) = 0x800000010033EB70LL;
  *(void *)(inited + 104) = swift_getKeyPath(&unk_10034E708);
  *(void *)(inited + 112) = 0x7463656E6E6F63LL;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xE700000000000000LL;
  *(void *)(inited + 128) = swift_getKeyPath(&unk_10034E730);
  *(void *)(inited + 136) = 0x6D6D6F43646E6573LL;
  *(void *)(inited + 144) = 0xEB00000000646E61LL;
  return sub_1001B7CFC(inited, &qword_1003FB3A0, &qword_1003FB3A8);
}

void type metadata accessor for MRAnalyticsDeviceComposition(uint64_t a1)
{
}

unint64_t sub_10022239C()
{
  unint64_t v0 = sub_1001B7CFC((uint64_t)_swiftEmptyArrayStorage, &qword_1003FB388, &qword_1003FB380);
  uint64_t KeyPath = swift_getKeyPath(&unk_10034E640);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10022199C(0xD000000000000015LL, 0x800000010034E390LL, KeyPath, isUniquelyReferenced_nonNull_native);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_getKeyPath(&unk_10034E668);
  char v4 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10022199C(0x6D6D6F43646E6573LL, 0xEC00000073646E61LL, v3, v4);
  swift_release(v3);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for CreateRemoteHostedEndpointAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDCreateRemoteHostedEndpointAnalytics);
}

uint64_t type metadata accessor for CreateHostedEndpointAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDCreateHostedEndpointAnalytics);
}

uint64_t type metadata accessor for CreateEndpointAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDCreateEndpointAnalytics);
}

uint64_t type metadata accessor for CreateOptimizedEndpointAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDCreateOptimizedEndpointAnalytics);
}

uint64_t type metadata accessor for CreateEndpointWithCurrentTopologyAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDCreateEndpointWithCurrentTopologyAnalytics);
}

uint64_t type metadata accessor for SendCommandToNewEndpointWithOutputDevicesRequestAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics);
}

uint64_t type metadata accessor for SendCommandToEndpointsWithOutputDevicesRequestAnalytics()
{
  return objc_opt_self(&OBJC_CLASS___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics);
}

uint64_t sub_10022257C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FB390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002225C4(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003FAA70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1002226BC()
{
  if ((*(_BYTE *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction) & 1) != 0) {
    return 1LL;
  }
  if ((*(_BYTE *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute) & 1) != 0) {
    return 1LL;
  }
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion);
}

BOOL sub_100222714()
{
  return *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType) == 2LL;
}

id sub_10022272C(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10022275C(a1);
}

id sub_10022275C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = IRMBBundle.bundleIdentifier.getter(v4);
  uint64_t v6 = (uint64_t *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier];
  *uint64_t v6 = v5;
  v6[1] = v7;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion] = IRMBBundle.isEligibleForOneTapSuggestion.getter() & 1;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute] = IRMBBundle.isEligibleForAutoRoute.getter() & 1;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction] = IRMBBundle.isEligibleForCallToAction.getter() & 1;
  *(void *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType] = IRMBBundle.mediaType.getter();
  uint64_t v8 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v16 = v8;
  uint64_t v9 = sub_100156B68(&qword_1003FB450);
  uint64_t v10 = String.init<A>(describing:)(&v16, v9);
  char v11 = (uint64_t *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source];
  *char v11 = v10;
  v11[1] = v12;

  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for MRDBundleMediaRecommendationEligibility();
  id v13 = objc_msgSendSuper2(&v15, "init");
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v13;
}

uint64_t sub_1002228B8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._uint64_t countAndFlagsBits = 8250LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion)) {
    uint64_t v5 = 79LL;
  }
  else {
    uint64_t v5 = 95LL;
  }
  unint64_t v6 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&v5);
  if (*(_BYTE *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute)) {
    uint64_t v7 = 65LL;
  }
  else {
    uint64_t v7 = 95LL;
  }
  unint64_t v8 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&v7);
  if (*(_BYTE *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction)) {
    uint64_t v9 = 67LL;
  }
  else {
    uint64_t v9 = 95LL;
  }
  unint64_t v10 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&v9);
  v11._uint64_t countAndFlagsBits = 123LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._uint64_t countAndFlagsBits = 16509LL;
  v14._object = (void *)0xE200000000000000LL;
  String.append(_:)(v14);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source);
  uint64_t v16 = *(void **)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source + 8);
  swift_bridgeObjectRetain(v16);
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._uint64_t countAndFlagsBits = 62LL;
  v18._object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  return 60LL;
}

id sub_100222A88()
{
  return sub_1002142B8(type metadata accessor for MRDBundleMediaRecommendationEligibility);
}

id sub_100222AD4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for MRDMediaBundleManager()) init];
  qword_100405C70 = (uint64_t)result;
  return result;
}

unint64_t sub_100222B48(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003FB560);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    unint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(&qword_1003FB548);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  unint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  unint64_t v10 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1002280CC(v13, (uint64_t)v5);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_10015CAD4(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for IRMBBundle(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19,  v10,  v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100222CE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    unint64_t v10 = *v7;
    swift_bridgeObjectRetain();
    id v11 = v10;
    unint64_t result = sub_10015CAD4(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    uint64_t v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100222E74()
{
  return sub_100178610(&OBJC_IVAR___MRDMediaBundleManager_bundles);
}

uint64_t sub_100222EEC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___MRDMediaBundleManager_bundles;
  swift_beginAccess(v3, v13, 1LL, 0LL);
  *(void *)uint64_t v3 = a1;
  uint64_t v4 = swift_bridgeObjectRelease();
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  uint64_t v6 = (void *)*sub_100173EE8();
  uint64_t v7 = sub_100156B68(&qword_1003FADD0);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  uint64_t v9 = *(void *)(*(void *)v3 + 16LL);
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = v9;
  id v10 = v6;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v10, "[MRDRRC].MBM bundles changed, new count: (%ld)", v12);

  return swift_bridgeObjectRelease();
}

void (*sub_100222FD8(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDMediaBundleManager_bundles;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_100223030;
}

void sub_100223030(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v7 = static os_log_type_t.default.getter(v4);
    uint64_t v8 = (void *)*sub_100173EE8();
    uint64_t v9 = sub_100156B68(&qword_1003FADD0);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    uint64_t v11 = *(void *)(*(void *)(v6 + v5) + 16LL);
    *(void *)(v10 + 56) = &type metadata for Int;
    *(void *)(v10 + 64) = &protocol witness table for Int;
    *(void *)(v10 + 32) = v11;
    id v12 = v8;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v12, "[MRDRRC].MBM bundles changed, new count: (%ld)", v13);
    swift_bridgeObjectRelease();
  }

  free(v3);
}

uint64_t sub_100223108()
{
  return sub_100178610(&OBJC_IVAR___MRDMediaBundleManager__mediaBundles);
}

uint64_t sub_100223114(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___MRDMediaBundleManager__mediaBundles);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100223164(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1002231A8()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock) + 16LL);
  os_unfair_lock_lock(v1);
  sub_100227EEC(&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1);
  return v2;
}

uint64_t sub_100223200(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)((char *)v1 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock) + 16LL);
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x90LL);
  uint64_t v5 = swift_bridgeObjectRetain(a1);
  v4(v5);
  os_unfair_lock_unlock(v3);
  return swift_bridgeObjectRelease(a1);
}

uint64_t (*sub_10022326C(uint64_t *a1))(void *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock);
  a1[1] = v1;
  a1[2] = (uint64_t)v3;
  uint64_t v4 = v3 + 4;
  os_unfair_lock_lock(v3 + 4);
  sub_100227EEC(&v7);
  a1[3] = 0LL;
  uint64_t v5 = v7;
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_1002232E4;
}

uint64_t sub_1002232E4(void *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = (os_unfair_lock_s *)a1[2];
  uint64_t v5 = v4 + 4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*a1);
    os_unfair_lock_lock(v5);
    uint64_t v6 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x90LL);
    uint64_t v7 = swift_bridgeObjectRetain(v2);
    v6(v7);
    os_unfair_lock_unlock(v5);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    os_unfair_lock_lock(v4 + 4);
    uint64_t v9 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0x90LL);
    uint64_t v10 = swift_bridgeObjectRetain(v2);
    v9(v10);
    os_unfair_lock_unlock(v5);
  }

  return swift_bridgeObjectRelease(v2);
}

id sub_1002233C0()
{
  v0[OBJC_IVAR___MRDMediaBundleManager_isSupported] = 1;
  uint64_t v1 = OBJC_IVAR___MRDMediaBundleManager_bundles;
  uint64_t v2 = v0;
  *(void *)&v0[v1] = sub_100222CE0((uint64_t)_swiftEmptyArrayStorage, &qword_1003FB568);
  uint64_t v3 = OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock;
  uint64_t v4 = sub_100156B68(&qword_1003FCE80);
  uint64_t v5 = swift_allocObject(v4, 20LL, 7LL);
  *(_DWORD *)(v5 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)&v2[v3] = v5;
  *(void *)&v2[OBJC_IVAR___MRDMediaBundleManager__mediaBundles] = sub_100222B48((uint64_t)_swiftEmptyArrayStorage);

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for MRDMediaBundleManager();
  return objc_msgSendSuper2(&v7, "init");
}

id sub_10022349C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100156B68(&qword_1003FB480);
  __chkstk_darwin(v5);
  objc_super v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v2) + 0xD8LL))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_1001603DC((uint64_t)v7, &qword_1003FB480);
    uint64_t v15 = (objc_class *)type metadata accessor for MRDBundleMediaRecommendationEligibility();
    BOOL v16 = objc_allocWithZone(v15);
    uint64_t v17 = &v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier];
    *uint64_t v17 = a1;
    v17[1] = a2;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion] = 0;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute] = 0;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction] = 0;
    *(void *)&v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType] = 0LL;
    char v18 = &v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source];
    void *v18 = 0x696D206568636163LL;
    v18[1] = 0xEA00000000007373LL;
    v22.receiver = v16;
    v22.super_class = v15;
    swift_bridgeObjectRetain();
    return objc_msgSendSuper2(&v22, "init");
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    id v20 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
    id v19 = sub_10022275C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  return v19;
}

uint64_t sub_10022370C(uint64_t a1)
{
  v2[8] = a1;
  void v2[9] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100156B68(&qword_1003FB480) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v3);
  v2[11] = swift_task_alloc(v3);
  v2[12] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for IRMBBundle(0LL);
  v2[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[14] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v6);
  v2[16] = swift_task_alloc(v6);
  v2[17] = swift_task_alloc(v6);
  v2[18] = swift_task_alloc(v6);
  v2[19] = swift_task_alloc(v6);
  v2[20] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002237EC, 0LL, 0LL);
}

uint64_t sub_1002237EC(uint64_t a1)
{
  uint64_t v3 = v1[8];
  uint64_t v2 = (void *)v1[9];
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  uint64_t v5 = sub_100173EE8();
  v1[21] = v5;
  unint64_t v6 = (void *)*v5;
  uint64_t v7 = sub_100156B68(&qword_1003FADD0);
  v1[22] = v7;
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  uint64_t v9 = *(void *)(v3 + 16);
  v1[23] = v9;
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = v9;
  id v10 = v6;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v10, "[MRDRRC].MBM querying: (%ld)", v16);
  swift_bridgeObjectRelease();

  uint64_t v11 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x70LL))();
  sub_100224A8C(v11);
  uint64_t v13 = v12;
  _BYTE v1[24] = v12;
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to static IRMBManager.mergeBundles(_:)[1]);
  v1[25] = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_100223910;
  return static IRMBManager.mergeBundles(_:)(v13);
}

uint64_t sub_100223910(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 200);
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 2swift_weakDestroy(v0 + 16) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_100224934;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100223984;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100223984()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v134 = v1 + 56;
  uint64_t v132 = v0 + 26;
  uint64_t v3 = v0[14];
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v0[26] + 32LL);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v2;
  int64_t v133 = (unint64_t)(63 - v5) >> 6;
  uint64_t v138 = v0[26];
  uint64_t v7 = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v137 = v3;
  uint64_t v135 = v0;
  __int16 v146 = v0 + 2;
  while (1)
  {
    if (v6)
    {
      uint64_t v140 = (v6 - 1) & v6;
      int64_t v142 = v8;
      unint64_t v15 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_23;
    }

    unint64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_78;
    }
    unint64_t v17 = *(void *)(v134 + 8 * v16);
    int64_t v18 = v8 + 1;
    if (!v17)
    {
      int64_t v18 = v8 + 2;
      if (v8 + 2 >= v133) {
        break;
      }
      unint64_t v17 = *(void *)(v134 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v8 + 3;
        if (v8 + 3 >= v133) {
          break;
        }
        unint64_t v17 = *(void *)(v134 + 8 * v18);
        if (!v17)
        {
          unint64_t v16 = v8 + 4;
          if (v8 + 4 >= v133) {
            break;
          }
          unint64_t v17 = *(void *)(v134 + 8 * v16);
          if (!v17)
          {
            while (1)
            {
              int64_t v18 = v16 + 1;
              if (__OFADD__(v16, 1LL)) {
                goto LABEL_80;
              }
              if (v18 >= v133) {
                goto LABEL_39;
              }
              unint64_t v17 = *(void *)(v134 + 8 * v18);
              ++v16;
              if (v17) {
                goto LABEL_22;
              }
            }
          }

          int64_t v18 = v8 + 4;
        }
      }
    }

LABEL_90:
  uint64_t v122 = v0[19];
  uint64_t v123 = v0[20];
  uint64_t v125 = v0[17];
  uint64_t v124 = v0[18];
  uint64_t v127 = v0[15];
  uint64_t v126 = v0[16];
  uint64_t v129 = v0[11];
  uint64_t v128 = v0[12];
  uint64_t v130 = v0[10];
  swift_release(v7);
  swift_task_dealloc(v123);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  return ((uint64_t (*)(void))v0[1])(v0[29]);
}

uint64_t sub_100224498(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 272);
  *(void *)(*v2 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v6 = sub_1002249E0;
  }

  else
  {
    *(void *)(v4 + 288) = a1;
    unint64_t v6 = sub_100224520;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100224520()
{
  uint64_t v2 = (void *)(v0 + 232);
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v3 = *(void **)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  if (v3)
  {
    unint64_t v6 = v0 + 56;
    id v7 = v3;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    *(void *)(v0 + 56) = v1;
    unint64_t v10 = sub_10015CAD4(v5, v4);
    uint64_t v11 = v1[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
      goto LABEL_36;
    }

    char v14 = v9;
    if (*(void *)(*v2 + 24LL) >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1002277A8();
      }
    }

    else
    {
      uint64_t v16 = *(void *)(v0 + 256);
      uint64_t v15 = *(void *)(v0 + 264);
      sub_100226D1C(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = sub_10015CAD4(v16, v15);
      if ((v14 & 1) != (v18 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      unint64_t v10 = v17;
    }

    uint64_t v1 = *(void **)v6;
    if ((v14 & 1) != 0)
    {
      unint64_t v6 = v1[7];
      uint64_t v32 = 8 * v10;

      *(void *)(v6 + v32) = v7;
    }

    else
    {
      uint64_t v34 = *(void *)(v0 + 256);
      uint64_t v33 = *(void *)(v0 + 264);
      v1[(v10 >> 6) + 8] |= 1LL << v10;
      uint64_t v35 = (void *)(v1[6] + 16 * v10);
      *uint64_t v35 = v34;
      v35[1] = v33;
      *(void *)(v1[7] + 8 * v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v7;
      uint64_t v36 = v1[2];
      BOOL v37 = __OFADD__(v36, 1LL);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_37;
      }
      v1[2] = v38;
      swift_bridgeObjectRetain();
    }

    while (1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      int64_t v24 = *(void *)(v0 + 240);
      unint64_t v25 = *(void *)(v0 + 248);
      *(void *)(v0 + 232) = v1;
      if (v25) {
        goto LABEL_22;
      }
LABEL_12:
      int64_t v26 = v24 + 1;
      if (!__OFADD__(v24, 1LL)) {
        break;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      sub_1002277A8();
      uint64_t v2 = v1;
LABEL_8:
      uint64_t v1 = (void *)*v2;
      swift_bridgeObjectRelease();
      id v7 = *(id *)(v1[7] + 8 * v6);
      sub_1001B1630(v6, (uint64_t)v1);
    }

    int64_t v27 = (unint64_t)((1LL << *(_BYTE *)(v0 + 296)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 224);
    if (v26 >= v27) {
      goto LABEL_34;
    }
    uint64_t v28 = result + 56;
    unint64_t v29 = *(void *)(result + 56 + 8 * v26);
    ++v24;
    if (v29)
    {
LABEL_15:
      uint64_t v30 = (v29 - 1) & v29;
      unint64_t v31 = __clz(__rbit64(v29)) + (v24 << 6);
      goto LABEL_23;
    }

    int64_t v24 = v26 + 1;
    if (v26 + 1 >= v27) {
      goto LABEL_34;
    }
    unint64_t v29 = *(void *)(v28 + 8 * v24);
    if (v29) {
      goto LABEL_15;
    }
    int64_t v24 = v26 + 2;
    if (v26 + 2 >= v27) {
      goto LABEL_34;
    }
    unint64_t v29 = *(void *)(v28 + 8 * v24);
    if (v29) {
      goto LABEL_15;
    }
    int64_t v46 = v26 + 3;
    if (v46 >= v27)
    {
LABEL_34:
      uint64_t v47 = *(void *)(v0 + 152);
      uint64_t v48 = *(void *)(v0 + 160);
      uint64_t v50 = *(void *)(v0 + 136);
      uint64_t v49 = *(void *)(v0 + 144);
      uint64_t v52 = *(void *)(v0 + 120);
      uint64_t v51 = *(void *)(v0 + 128);
      uint64_t v54 = *(void *)(v0 + 88);
      uint64_t v53 = *(void *)(v0 + 96);
      uint64_t v55 = *(void *)(v0 + 80);
      swift_release(result);
      swift_task_dealloc(v48);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
    }

    else
    {
      unint64_t v29 = *(void *)(v28 + 8 * v46);
      if (v29)
      {
        int64_t v24 = v46;
        goto LABEL_15;
      }

      while (1)
      {
        int64_t v24 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          break;
        }
        if (v24 >= v27) {
          goto LABEL_34;
        }
        unint64_t v29 = *(void *)(v28 + 8 * v24);
        ++v46;
        if (v29) {
          goto LABEL_15;
        }
      }

      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_10015CAD4(v5, v4);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      uint64_t v1 = (void *)(v0 + 48);
      uint64_t v22 = *v2;
      char v23 = swift_isUniquelyReferenced_nonNull_native(*v2);
      *(void *)(v0 + 48) = v22;
      if ((v23 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_8;
    }

    swift_bridgeObjectRelease();
    int64_t v24 = *(void *)(v0 + 240);
    unint64_t v25 = *(void *)(v0 + 248);
    if (!v25) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v30 = (v25 - 1) & v25;
    unint64_t v31 = __clz(__rbit64(v25)) | (v24 << 6);
    uint64_t result = *(void *)(v0 + 224);
LABEL_23:
    *(void *)(v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v24;
    *(void *)(v0 + 248) = v30;
    uint64_t v39 = *(void **)(v0 + 72);
    char v40 = (uint64_t *)(*(void *)(result + 48) + 16 * v31);
    uint64_t v41 = *v40;
    *(void *)(v0 + 256) = *v40;
    uint64_t v42 = v40[1];
    *(void *)(v0 + 264) = v42;
    char v43 = *(int **)((swift_isaMask & *v39) + 0xC8LL);
    uint64_t v44 = v43[1];
    int64_t v56 = (uint64_t (*)(uint64_t, uint64_t))((char *)v43 + *v43);
    swift_bridgeObjectRetain();
    char v45 = (void *)swift_task_alloc(v44);
    *(void *)(v0 + 272) = v45;
    *char v45 = v0;
    v45[1] = sub_100224498;
    return v56(v41, v42);
  }

  return result;
}

uint64_t sub_100224934()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002249E0()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100224A8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_100228050();
  uint64_t v4 = sub_10022808C( &qword_1003FB550,  255LL,  (uint64_t (*)(uint64_t))sub_100228050,  (uint64_t)&protocol conformance descriptor for NSObject);
  int64_t v5 = 0LL;
  v16[1] = (id)Set.init(minimumCapacity:)(v2, v3, v4);
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_100224C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100156B68(&qword_1003FB480);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1LL, v11) == 1)
  {
    sub_1001603DC(a1, &qword_1003FB480);
    sub_100225ED0(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1001603DC((uint64_t)v10, &qword_1003FB480);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_100227224((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100224DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v37 = a2;
  uint64_t v6 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v33 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v34 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t j = 0LL;
  uint64_t v35 = a3;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v12,  *(void *)(v36 + 48) + *(void *)(v7 + 72) * i,  v6);
    int64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v24(v10, v12, v6);
    uint64_t v26 = IRMBBundle.bundleIdentifier.getter(v25);
    uint64_t v28 = v27;
    if (v26 == v37 && v27 == a3)
    {
      swift_release(v36);
      swift_bridgeObjectRelease(a3);
LABEL_27:
      uint64_t v30 = v32;
      v24(v32, v10, v6);
      uint64_t v31 = 0LL;
LABEL_29:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v30, v31, 1LL, v6);
      return swift_bridgeObjectRelease(v35);
    }

    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v37, a3, 0LL);
    swift_bridgeObjectRelease(v28);
    if ((v29 & 1) != 0)
    {
      swift_release(v36);
      goto LABEL_27;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    a3 = v35;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v21 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v34)
    {
LABEL_28:
      swift_release(v36);
      uint64_t v31 = 1LL;
      uint64_t v30 = v32;
      goto LABEL_29;
    }

    unint64_t v22 = *(void *)(v33 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_31;
      }
      if (j >= v34) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v33 + 8 * j);
    }

uint64_t sub_1002251B8(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v3[4] = v6;
  uint64_t v7 = dword_1003FB48C;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v7);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100225244;
  return sub_10022370C(v6);
}

uint64_t sub_100225244()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 40);
  int64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(v4);

  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v7 = _convertErrorToNSError(_:)(v0);
    swift_errorRelease(v2);
    Class isa = 0LL;
    uint64_t v9 = (void *)v7;
  }

  else
  {
    type metadata accessor for MRDBundleMediaRecommendationEligibility();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0LL;
    uint64_t v9 = isa;
  }

  int64_t v10 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10022532C(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  unint64_t v4 = (*(void *)(*(void *)(sub_100156B68(&qword_1003FB480) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v4);
  v3[10] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for IRMBBundle(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v3[15] = swift_task_alloc(v7);
  return swift_task_switch(sub_1002253E0, 0LL, 0LL);
}

uint64_t sub_1002253E0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  (*(void (**)(void, void))((swift_isaMask & **(void **)(v0 + 64)) + 0xD8LL))( *(void *)(v0 + 48),  *(void *)(v0 + 56));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = *(void **)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_1001603DC(*(void *)(v0 + 80), &qword_1003FB480);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v5) + 0xD0LL))(v6, v4);
    *(void *)(v0 + 128) = v7;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to static IRMBManager.query(_:priorBundle:)[1]);
    *(void *)(v0 + 136) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10022566C;
    return static IRMBManager.query(_:priorBundle:)( *(void *)(v0 + 104),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  v7);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 48);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v10, *(void *)(v0 + 80), v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
    uint64_t v15 = (objc_class *)type metadata accessor for MRDBundleMediaRecommendationEligibility();
    id v16 = objc_allocWithZone(v15);
    id v17 = sub_10022275C(v11);
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    unint64_t v19 = (void *)*sub_100173EE8();
    uint64_t v20 = sub_100156B68(&qword_1003FADD0);
    uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1002157E0();
    *(void *)(v21 + 32) = v29;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v14;
    *(void *)(v21 + 96) = v15;
    *(void *)(v21 + 104) = sub_10022808C( &qword_1003FB498,  v22,  (uint64_t (*)(uint64_t))type metadata accessor for MRDBundleMediaRecommendationEligibility,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v21 + 72) = v17;
    id v23 = v19;
    swift_bridgeObjectRetain();
    id v24 = v17;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v23,  "[MRDRRC].MBM returning cached value for %@ = %@",  47LL,  2LL,  v21);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v28 = *(void *)(v0 + 72);
    uint64_t v27 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(id))(v0 + 8))(v24);
  }

uint64_t sub_10022566C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10022582C;
  }
  else {
    uint64_t v3 = sub_1002256D0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002256D0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 112);
  unint64_t v19 = *(void **)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v5, v1, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v2);
  uint64_t v8 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0xB0LL);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void (*)(uint64_t, void))v8(v0 + 16);
  sub_100224C34(v5, v17, v6);
  v9(v0 + 16, 0LL);
  v7(v18, v1, v2);
  id v10 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
  id v11 = sub_10022275C(v18);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

uint64_t sub_10022582C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002259D0(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1003FB494;
  a3;
  id v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *id v10 = v3;
  v10[1] = sub_100169CA8;
  return sub_10022532C(v6, v8);
}

void *sub_100225A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70LL);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = v5(v6);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_10015CAD4(a1, a2), (v9 & 1) != 0))
  {
    id v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    id v11 = v10;
  }

  else
  {
    id v10 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100225AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA0LL);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = v7(v8);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_10015CAD4(a1, a2), (v11 & 1) != 0))
  {
    unint64_t v12 = v10;
    uint64_t v13 = *(void *)(v9 + 56);
    uint64_t v14 = type metadata accessor for IRMBBundle(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(a3, v13 + *(void *)(v15 + 72) * v12, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v16 = type metadata accessor for IRMBBundle(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(a3, 1LL, 1LL, v16);
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_100225BE0()
{
  return sub_1002142B8(type metadata accessor for MRDMediaBundleManager);
}

uint64_t type metadata accessor for MRDBundleMediaRecommendationEligibility()
{
  return objc_opt_self(&OBJC_CLASS___MRDBundleMediaRecommendationEligibility);
}

uint64_t sub_100225C54(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v30 = v9;
      unint64_t v10 = sub_100228050();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_100226000(v7, result + 1);
    Swift::Int v31 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v28 = v24 + 1;
      id v29 = v8;
      sub_1002264F0(v28);
      uint64_t v25 = v31;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_1001B101C((uint64_t)v8, v25);
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      sub_100228050();
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        id v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v31 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_100227958((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }

  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1LL;
}

uint64_t sub_100225ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10022754C();
      uint64_t v11 = v17;
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for IRMBBundle(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(void *)(v14 + 72) * v8, v13);
    sub_100227028(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for IRMBBundle(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a3,  1LL,  1LL,  v16);
  }

Swift::Int sub_100226000(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100156B68(&qword_1003FB558);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      unint64_t v8 = sub_100228050();
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_1002264F0(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

unint64_t *sub_1002261E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  uint64_t v31 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v29[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v29[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)(v30, *(void *)(v2 + 40));
      swift_bridgeObjectRetain();
      String.hash(into:)(v30, v8, v7);
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
      {
        uint64_t v12 = *(void *)(v2 + 48);
        unint64_t v13 = (void *)(v12 + 16 * v11);
        uint64_t v14 = v13[1];
        BOOL v15 = *v13 == v8 && v14 == v7;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v8, v7, 0LL) & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v32 = v5;
LABEL_19:
          char v21 = *(_BYTE *)(v2 + 32);
          unsigned int v22 = v21 & 0x3F;
          unint64_t v23 = (1LL << v21) + 63;
          uint64_t v24 = v23 >> 6;
          size_t v25 = 8 * (v23 >> 6);
          if (v22 < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v23 >> 6), 8LL),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v29 - ((v25 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v25);
            id v26 = sub_10022678C((void *)((char *)v29 - ((v25 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v24, v2, v11, &v31);
            swift_release(v2);
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v27 = (void *)swift_slowAlloc(v25, -1LL);
            memcpy(v27, (const void *)(v2 + 56), v25);
            id v26 = sub_10022678C((unint64_t *)v27, v24, v2, v11, &v31);
            swift_release(v2);
            swift_bridgeObjectRelease();
            swift_slowDealloc(v27, -1LL, -1LL);
          }

          return v26;
        }

        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
            break;
          }
          char v17 = (void *)(v12 + 16 * v11);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == v8 && v18 == v7;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v8, v7, 0LL) & 1) != 0)
          {
            uint64_t v32 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }

      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return (unint64_t *)v2;
      }
    }
  }

  return (unint64_t *)v2;
}

Swift::Int sub_1002264F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FB558);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

unint64_t *sub_10022678C( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v32 = result;
  uint64_t v33 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16LL);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain(a3);
    return (unint64_t *)sub_10015D15C(v32, a2, v33, a3);
  }

  uint64_t v35 = a3 + 56;
  while ((v7 & 0x8000000000000000LL) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v34, *(void *)(a3 + 40));
    swift_bridgeObjectRetain();
    String.hash(into:)(v34, v13, v12);
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1LL << v16;
    if (((1LL << v16) & *(void *)(v35 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    int64_t v20 = (void *)(v19 + 16 * v16);
    uint64_t v21 = v20[1];
    BOOL v22 = *v20 == v13 && v21 == v12;
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v13, v12, 0LL) & 1) == 0)
    {
      uint64_t v25 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v27 + 1)
      {
        unint64_t v27 = i & v25;
        uint64_t v28 = (void *)(v19 + 16 * v27);
        uint64_t v29 = v28[1];
        BOOL v30 = *v28 == v13 && v29 == v12;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v13, v12, 0LL) & 1) != 0)
        {
          Swift::Int result = (unint64_t *)swift_bridgeObjectRelease();
          unint64_t v17 = v27 >> 6;
          uint64_t v18 = 1LL << v27;
          goto LABEL_15;
        }
      }

Swift::Int sub_1002269B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  char v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100156B68(&qword_1003FB548);
  int v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v41 = v3;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  char v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  Swift::Int result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v42) {
      goto LABEL_36;
    }
    unint64_t v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v23 = v43[v17];
      if (!v23) {
        break;
      }
    }

Swift::Int sub_100226D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FB540);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_100227028(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v29, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for IRMBBundle(0LL) - 8) + 72LL);
        int64_t v19 = v18 * v3;
        Swift::Int result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

uint64_t sub_100227224(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for IRMBBundle(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  a1,  v20);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10022754C();
      goto LABEL_7;
    }

    sub_1002269B4(v15, a4 & 1);
    unint64_t v22 = sub_10015CAD4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1002274BC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100227360(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002277A8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

uint64_t sub_1002274BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for IRMBBundle(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_10022754C()
{
  uint64_t v34 = type metadata accessor for IRMBBundle(0LL);
  uint64_t v1 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003FB548);
  uint64_t v31 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v35 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release(v4);
    uint64_t v29 = v35;
    uint64_t v28 = v31;
LABEL_28:
    *uint64_t v28 = v29;
    return result;
  }

  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v35;
  }

  uint64_t v32 = v4 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = v34;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      int64_t v11 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v11);
      if (!v26) {
        break;
      }
    }

id sub_1002277A8()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FB540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_100227958(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002264F0(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_100227ACC();
      goto LABEL_14;
    }

    sub_100227C74(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    unint64_t v13 = sub_100228050();
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

id sub_100227ACC()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FB558);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_100227C74(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003FB558);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_100227EEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0x88LL))();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for MRDMediaBundleManager()
{
  return objc_opt_self(&OBJC_CLASS___MRDMediaBundleManager);
}

void type metadata accessor for IRMediaBundleType(uint64_t a1)
{
}

uint64_t sub_100227F64()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003FB4FC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10015FD10;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1003FB4F8 + dword_1003FB4F8))(v2, v3, v4);
}

uint64_t sub_100227FDC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003FB51C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1003FB518 + dword_1003FB518))(v2, v3, v4);
}

unint64_t sub_100228050()
{
  unint64_t result = qword_1003FB538;
  if (!qword_1003FB538)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IRMediaBundle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003FB538);
  }

  return result;
}

uint64_t sub_10022808C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1002280CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FB560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100228114(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  sub_100228154(a1, v3 + 16);
  return v3;
}

uint64_t sub_100228154(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

id sub_10022816C(void *a1)
{
  __int128 v3 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x88LL);
  uint64_t v4 = v3();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v1[5];
    uint64_t v7 = v1[6];
    sub_1001865C4(v1 + 2, v6);
    if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 8))(v5, v6, v7) & 1) != 0
      && ((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8LL))() & 1) != 0)
    {
      goto LABEL_8;
    }
  }

  uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70LL))();
  if (!v8)
  {
LABEL_10:
    uint64_t v12 = v3();
    if (v12)
    {
      int64_t v13 = (void *)v12;
      uint64_t v15 = v1[5];
      uint64_t v14 = v1[6];
      sub_1001865C4(v1 + 2, v15);
      if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 8))(v13, v15, v14) & 1) != 0)
      {
        type metadata accessor for RouteRecommendationSuppressionPolicy();
        unint64_t v16 = (uint64_t *)sub_1002A303C();
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        id v11 = sub_1002A2F68(v17, v18);

LABEL_16:
        swift_bridgeObjectRelease();
        return v11;
      }
    }

    return (id)*sub_1002A2F28();
  }

  uint64_t v5 = (void *)v8;
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  sub_1001865C4(v1 + 2, v9);
  if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 8))(v5, v9, v10) & 1) == 0)
  {

    goto LABEL_10;
  }

  if (((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xA0LL))() & 1) == 0)
  {
    type metadata accessor for RouteRecommendationSuppressionPolicy();
    int64_t v20 = (uint64_t *)sub_1002A3030();
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    swift_bridgeObjectRetain();
    id v11 = sub_1002A2F68(v21, v22);

    goto LABEL_16;
  }

uint64_t sub_1002283C0()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for RouteRecommendationPlayingStateSuppressor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted41RouteRecommendationPlayingStateSuppressor);
}

uint64_t sub_100228404()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_100400E88);
  sub_10015ADAC(v0, (uint64_t)qword_100400E88);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t type metadata accessor for NearbySessionsAdvertiserImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation);
}

id sub_100228500(uint64_t a1)
{
  return sub_100185D08(a1, type metadata accessor for NearbySessionsAdvertiser);
}

id sub_100228540(uint64_t a1, uint64_t a2)
{
  __int128 v3 = v2;
  uint64_t v41 = a1;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v40 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v40);
  char v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = &v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_delegate];
  swift_unknownObjectWeakInit( &v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_delegate],  0LL);
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session] = 0LL;
  v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_publicAssertion] = 0LL;
  uint64_t v12 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer;
  int64_t v13 = v3;
  id v14 = (id)*sub_100173F8C();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 =  [(id)objc_opt_self(MRLogBuffer) bufferWithCapacity:10 category:v14 loggingPrefix:v15];

  *(void *)&v3[v12] = v16;
  swift_unknownObjectWeakAssign(v11, v41);
  sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v7);
  uint64_t v18 = v38;
  static DispatchQoS.unspecified.getter(v17);
  int v44 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100156FEC( (unint64_t *)&qword_1003FB950,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003FA190);
  uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FB960,  (uint64_t *)&unk_1003FA190,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v22 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v20, v21, v40, v19);
  *(void *)&v13[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000042LL, 0x800000010033F4E0LL, v18, v22, v10, 0LL);

  uint64_t v23 = (objc_class *)type metadata accessor for NearbySessionsAdvertiserImplementation();
  v43.receiver = v13;
  v43.super_class = v23;
  id v24 = objc_msgSendSuper2(&v43, "init");
  uint64_t v25 = qword_100400E80;
  id v26 = v24;
  if (v25 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_10015ADAC(v27, (uint64_t)qword_100400E88);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = (void *)swift_slowAlloc(32LL, -1LL);
    int v44 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v42 = sub_10015ADC4(v33, v34, (uint64_t *)&v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%s] Initialize", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  swift_unknownObjectRelease(v41);
  return v26;
}

uint64_t type metadata accessor for NearbySessionsAdvertiser()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted24NearbySessionsAdvertiser);
}

id sub_1002289D8(uint64_t a1, uint64_t a2)
{
  __int128 v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask];
  if (v5)
  {
    swift_retain(v5);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v5);
  }

  uint64_t v6 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask];
  if (v6)
  {
    swift_retain(*(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v6);
  }

  uint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask];
  if (v7)
  {
    swift_retain(*(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v7);
  }

  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_10015ADAC(v8, (uint64_t)qword_100400E88);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v18 = sub_10015ADC4(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%s] Deinit", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  id v16 = (objc_class *)type metadata accessor for NearbySessionsAdvertiserImplementation();
  v20.receiver = v3;
  v20.super_class = v16;
  return objc_msgSendSuper2(&v20, "dealloc");
}

void sub_100228D10(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v12 = sub_10015ADAC(v8, (uint64_t)qword_100400E88);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  int v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    uint64_t v65 = v9;
    int v67 = v15;
    uint64_t v16 = a3;
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = swift_slowAlloc(96LL, -1LL);
    uint64_t v72 = v66;
    *(_DWORD *)uint64_t v17 = 136315650;
    uint64_t v68 = v16;
    uint64_t v18 = _typeName(_:qualified:)(v16, 0LL);
    uint64_t v70 = sub_10015ADC4(v18, v19, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v70 = sub_10015ADC4(0xD00000000000001DLL, 0x800000010033F4C0LL, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2080;
    if (a1)
    {
      id v20 = [a1 description];
      uint64_t v21 = a1;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v24 = v23;
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = 7104878LL;
      unint64_t v24 = 0xE300000000000000LL;
    }

    uint64_t v70 = sub_10015ADC4(v22, v24, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v17 + 24, v17 + 32);
    swift_unknownObjectRelease_n(v21, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v67, "[%s] %s - %s", (uint8_t *)v17, 0x20u);
    uint64_t v27 = v66;
    swift_arrayDestroy(v66, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v11, v8);
    a1 = v21;
    a3 = v68;
  }

  else
  {

    swift_unknownObjectRelease_n(a1, 2LL);
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v28 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session;
  if (*(void *)(a2
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session))
  {
    sub_10022D120(v25, v26);
    uint64_t v29 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask;
    uint64_t v30 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask);
    if (v30)
    {
      swift_retain(*(void *)(a2
                             + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask));
      sub_100156B68(&qword_1003F86D0);
      Task.cancel()();
      swift_release(v30);
      uint64_t v31 = *(void *)(a2 + v29);
    }

    else
    {
      uint64_t v31 = 0LL;
    }

    *(void *)(a2 + v29) = 0LL;
    swift_release(v31);
    uint64_t v33 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask;
    uint64_t v34 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask);
    if (v34)
    {
      swift_retain(*(void *)(a2
                             + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask));
      sub_100156B68(&qword_1003F86D0);
      Task.cancel()();
      swift_release(v34);
      uint64_t v35 = *(void *)(a2 + v33);
    }

    else
    {
      uint64_t v35 = 0LL;
    }

    *(void *)(a2 + v33) = 0LL;
    swift_release(v35);
    uint64_t v36 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask;
    uint64_t v37 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask);
    if (v37)
    {
      swift_retain(*(void *)(a2
                             + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask));
      sub_100156B68(&qword_1003F86D0);
      Task.cancel()();
      swift_release(v37);
      uint64_t v38 = *(void *)(a2 + v36);
    }

    else
    {
      uint64_t v38 = 0LL;
    }

    *(void *)(a2 + v36) = 0LL;
    swift_release(v38);
    uint64_t v39 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser);
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = 0LL;
    swift_release(v39);
    uint64_t v32 = *(void *)(a2 + v28);
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  *(void *)(a2 + v28) = a1;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v32);
  uint64_t v40 = *(void **)(a2
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  uint64_t v70 = 0LL;
  unint64_t v71 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  uint64_t v72 = 91LL;
  unint64_t v73 = 0xE100000000000000LL;
  v41._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a3, 0LL);
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x800000010033F460LL;
  v42._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v42);
  if (a1)
  {
    id v43 = [a1 identifier];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    v47._uint64_t countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 logInterpolatedString:v48];

    uint64_t v49 = (char *)[(id)swift_unknownObjectRetain(a1) nearbyInvitation];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = *(void *)&v49[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
      swift_retain(v51);

      uint64_t v52 = type metadata accessor for TaskPriority(0LL);
      uint64_t v53 = (uint64_t)v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v69, 1LL, 1LL, v52);
      uint64_t v54 = swift_allocObject(&unk_1003AA1C0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v54 + 16, a2);
      uint64_t v55 = (void *)swift_allocObject(&unk_1003AA760, 56LL, 7LL);
      v55[2] = 0LL;
      v55[3] = 0LL;
      v55[4] = v51;
      v55[5] = v54;
      v55[6] = a3;
      swift_retain(v51);
      uint64_t v56 = sub_1001669DC(v53, (uint64_t)&unk_1003FB8F0, (uint64_t)v55);
      uint64_t v57 = *(void *)(a2
                      + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask);
      *(void *)(a2
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask) = v56;
      swift_unknownObjectRelease(a1);
      swift_release(v51);
      swift_release(v57);
      return;
    }

    uint64_t v72 = 0LL;
    unint64_t v73 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v60._uint64_t countAndFlagsBits = 91LL;
    v60._object = (void *)0xE100000000000000LL;
    String.append(_:)(v60);
    v61._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a3, 0LL);
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 0xD000000000000032LL;
    v62._object = (void *)0x800000010033F480LL;
    String.append(_:)(v62);
    uint64_t v70 = (uint64_t)a1;
    uint64_t v63 = sub_100156B68(&qword_1003FB8E0);
    _print_unlocked<A, B>(_:_:)( &v70,  &v72,  v63,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 logErrorWithInterpolatedString:v59];
    swift_unknownObjectRelease(a1);
  }

  else
  {
    v58._uint64_t countAndFlagsBits = 7104878LL;
    v58._object = (void *)0xE300000000000000LL;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 logInterpolatedString:v59];
  }
}

uint64_t sub_100229498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v6[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[19] = v8;
  v6[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  v6[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[22] = v10;
  v6[23] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003FB610);
  _BYTE v6[24] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[25] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v6[26] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v6[27] = swift_task_alloc(v14);
  v6[28] = swift_task_alloc(v14);
  v6[29] = swift_task_alloc(v14);
  uint64_t v15 = sub_100156B68(&qword_1003FB8F8);
  v6[30] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[31] = v16;
  v6[32] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100156B68(&qword_1003FB900);
  v6[33] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[34] = v18;
  v6[35] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100156B68(&qword_1003FB908);
  v6[36] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v6[37] = v20;
  v6[38] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002295F4, 0LL, 0LL);
}

uint64_t sub_1002295F4()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v4 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v7 = v0[16] + 16LL;
  dispatch thunk of NearbyInvitation.$pendingMembers.getter();
  uint64_t v8 = sub_1001604E8( &qword_1003FB910,  &qword_1003FB900,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncPublisher.makeAsyncIterator()(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_beginAccess(v7, v0 + 8, 0LL, 0LL);
  v0[39] = &_swiftEmptySetSingleton;
  uint64_t v11 = (char *)&dword_1003FB918 + dword_1003FB918;
  uint64_t v9 = (void *)swift_task_alloc(unk_1003FB91C);
  v0[40] = v9;
  void *v9 = v0;
  v9[1] = sub_100229724;
  return ((uint64_t (*)(void, void, void *))v11)(0LL, 0LL, v0 + 11);
}

uint64_t sub_100229724(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 328LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100229780, 0LL, 0LL);
}

uint64_t sub_100229780()
{
  if (!*(void *)(v0 + 328))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));
LABEL_7:
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v52 = *(void *)(v0 + 328);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 128) + 16LL);
  if (!Strong)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v1 = *(void *)(v0 + 312);
  if (*(void *)(v1 + 16) <= *(void *)(v52 + 16) >> 3)
  {
    uint64_t v67 = v52;
    swift_bridgeObjectRetain();
    sub_100233168(v1, &qword_1003FB928, &qword_1003FB610, (void (*)(char *))sub_100233FE0);
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)v52;
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1002333F0(v1, v52);
    swift_bridgeObjectRelease();
  }

  if (qword_100400E80 != -1) {
LABEL_36:
  }
    swift_once(&qword_100400E80, sub_100228404);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v12, (uint64_t)qword_100400E88);
  uint64_t v13 = swift_bridgeObjectRetain_n(v2, 2LL);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  uint64_t v56 = v2;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v64 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    uint64_t v67 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v16, 0LL);
    *(void *)(v0 + 104) = sub_10015ADC4(v19, v20, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = sub_1001604E8( &qword_1003FB920,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    swift_bridgeObjectRetain();
    uint64_t v22 = Set.description.getter(v2, v64, v21);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 112) = sub_10015ADC4(v22, v24, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] New pending members: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v2, 2LL);
  }

  int64_t v25 = 0LL;
  uint64_t v27 = v2[7];
  v2 += 7;
  uint64_t v26 = v27;
  uint64_t v28 = -1LL;
  uint64_t v29 = -1LL << *((_BYTE *)v2 - 24);
  if (-v29 < 64) {
    uint64_t v28 = ~(-1LL << -(char)v29);
  }
  unint64_t v30 = v28 & v26;
  uint64_t v53 = v2;
  int64_t v54 = (unint64_t)(63 - v29) >> 6;
  while (1)
  {
    if (v30)
    {
      uint64_t v63 = (v30 - 1) & v30;
      int64_t v65 = v25;
      unint64_t v31 = __clz(__rbit64(v30)) | (v25 << 6);
      uint64_t v32 = v56;
      goto LABEL_17;
    }

    int64_t v47 = v25 + 1;
    uint64_t v32 = v56;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    if (v47 >= v54) {
      goto LABEL_33;
    }
    unint64_t v48 = v53[v47];
    int64_t v49 = v25 + 1;
    if (!v48)
    {
      int64_t v49 = v25 + 2;
      if (v25 + 2 >= v54) {
        goto LABEL_33;
      }
      unint64_t v48 = v53[v49];
      if (!v48)
      {
        int64_t v49 = v25 + 3;
        if (v25 + 3 >= v54) {
          goto LABEL_33;
        }
        unint64_t v48 = v53[v49];
        if (!v48) {
          break;
        }
      }
    }

uint64_t sub_100229EA8(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100156B68(&qword_1003FB908);
  uint64_t v4 = sub_1001604E8( (unint64_t *)&unk_1003FB940,  &qword_1003FB908,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1001667A8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t sub_100229F40(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100156B68(&qword_1003FB8A0);
  uint64_t v4 = sub_1001604E8( &qword_1003FB8D8,  &qword_1003FB8A0,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100229FD8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t sub_100229FD8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(v2 + 40);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 32), v5);
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
      uint64_t v10 = v9;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
    }

    unint64_t v14 = sub_100236790;
  }

  else
  {
    if (v4)
    {
      uint64_t v11 = *(void *)(v2 + 40);
      uint64_t v12 = swift_getObjectType(*(void *)(v2 + 32), v5);
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v12, v11);
      uint64_t v10 = v13;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
    }

    unint64_t v14 = sub_100236718;
  }

  return swift_task_switch(v14, v8, v10);
}

uint64_t sub_10022A108(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v12 = swift_allocObject(&unk_1003AA648, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v12 + 24) = ObjectType;
  aBlock[4] = sub_10023620C;
  uint64_t v21 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003AA660;
  uint64_t v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v16 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v21);
}

void sub_10022A300(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void **)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v7)
  {
    uint64_t v8 = (char *) [(id)swift_unknownObjectRetain(*(void *)(a1 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session)) nearbyInvitation];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
      swift_retain(v10);

      uint64_t v11 = *(void **)(a1
                     + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
      v68[0] = 91LL;
      v68[1] = 0xE100000000000000LL;
      uint64_t v67 = a2;
      v12._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a2, 0LL);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 8285LL;
      v13._object = (void *)0xE200000000000000LL;
      String.append(_:)(v13);
      v14._object = (void *)0x800000010033F3A0LL;
      v14._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = 2108704LL;
      v15._object = (void *)0xE300000000000000LL;
      String.append(_:)(v15);
      id v16 = [v7 description];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      v20._uint64_t countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 logInterpolatedString:v21];

      *(_BYTE *)(a1
               + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising) = 1;
      if ((MSVDeviceIsAudioAccessory(v22) & 1) != 0)
      {
        id v24 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationParameters(0LL, v23));
        LOBYTE(v68[0]) = 0;
        int64_t v25 = (void *)NearbyInvitationParameters.init(serviceName:browserType:route:)( 0x73655370756F7247LL,  0xEC0000006E6F6973LL,  2LL,  2LL);
      }

      else
      {
        int64_t v25 = 0LL;
      }

      swift_retain(v10);
      unsigned int v41 = [v7 routeType];
      uint64_t v42 = v7;
      if (v41 > 0xB) {
        uint64_t v43 = 0LL;
      }
      else {
        uint64_t v43 = byte_10034EC6A[(char)v41];
      }
      uint64_t v44 = sub_100156B68(&qword_1003FB858);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      id v66 = v25;
      uint64_t v45 = NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(v10, 1LL, 1LL, v43, v25);
      uint64_t v46 = *(void *)(a1
                      + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser);
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = v45;
      swift_retain(v45);
      swift_release(v46);
      v68[0] = v45;
      uint64_t v47 = String.init<A>(describing:)(v68, &type metadata for UnsafeMutableRawPointer);
      uint64_t v49 = v48;
      uint64_t v50 = type metadata accessor for TaskPriority(0LL);
      int64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL);
      v65(v6, 1LL, 1LL, v50);
      uint64_t v51 = v10;
      uint64_t v52 = swift_allocObject(&unk_1003AA1C0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v52 + 16, a1);
      uint64_t v53 = (void *)swift_allocObject(&unk_1003AA698, 80LL, 7LL);
      v53[2] = 0LL;
      void v53[3] = 0LL;
      v53[4] = v52;
      v53[5] = v45;
      v53[6] = v47;
      v53[7] = v49;
      int64_t v54 = v67;
      v53[8] = v51;
      v53[9] = v54;
      swift_retain(v51);
      swift_retain(v45);
      uint64_t v55 = sub_1001669DC((uint64_t)v6, (uint64_t)&unk_1003FB878, (uint64_t)v53);
      uint64_t v56 = *(void *)(a1
                      + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask);
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask) = v55;
      swift_release(v56);
      id v57 = [v42 identifier];
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      uint64_t v60 = v59;

      v65(v6, 1LL, 1LL, v50);
      uint64_t v61 = swift_allocObject(&unk_1003AA1C0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v61 + 16, a1);
      uint64_t v62 = (void *)swift_allocObject(&unk_1003AA6C0, 72LL, 7LL);
      v62[2] = 0LL;
      v62[3] = 0LL;
      v62[4] = v58;
      v62[5] = v60;
      v62[6] = v45;
      v62[7] = v61;
      v62[8] = v54;
      swift_retain(v45);
      uint64_t v63 = sub_1001669DC((uint64_t)v6, (uint64_t)&unk_1003FB888, (uint64_t)v62);
      uint64_t v64 = *(void *)(a1
                      + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask);
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask) = v63;
      swift_unknownObjectRelease(v42);
      swift_release(v45);
      swift_release(v51);

      swift_release(v64);
    }

    else
    {
      if (qword_100400E80 != -1) {
        swift_once(&qword_100400E80, sub_100228404);
      }
      uint64_t v33 = type metadata accessor for Logger(0LL);
      uint64_t v34 = sub_10015ADAC(v33, (uint64_t)qword_100400E88);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        v68[0] = v38;
        *(_DWORD *)uint64_t v37 = 136315138;
        uint64_t v39 = _typeName(_:qualified:)(a2, 0LL);
        uint64_t v69 = sub_10015ADC4(v39, v40, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%s] No invitation to begin advertising.", v37, 0xCu);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      swift_unknownObjectRelease(v7);
    }
  }

  else
  {
    if (qword_100400E80 != -1) {
      swift_once(&qword_100400E80, sub_100228404);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_10015ADAC(v26, (uint64_t)qword_100400E88);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      v68[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v31 = _typeName(_:qualified:)(a2, 0LL);
      uint64_t v69 = sub_10015ADC4(v31, v32, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v69 = sub_10015ADC4(0xD000000000000012LL, 0x800000010033F3A0LL, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v29 + 14, v29 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v67,  v28,  "[%s] %s - No session to begin advertising.",  (uint8_t *)v29,  0x16u);
      swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }
  }

uint64_t sub_10022AA88(unsigned __int8 a1)
{
  if (a1 > 0xBu) {
    return 0LL;
  }
  else {
    return byte_10034EC6A[(char)a1];
  }
}

uint64_t sub_10022AAB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return swift_task_switch(sub_10022AAD8, 0LL, 0LL);
}

uint64_t sub_10022AAD8()
{
  uint64_t v1 = v0[15] + 16LL;
  swift_beginAccess(v1, v0 + 2, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  v0[21] = Strong;
  if (Strong)
  {
    static Task<>.checkCancellation()(Strong);
    v0[22] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10022AB90;
    uint64_t v4 = v6;
  }

  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }

  return v4();
}

uint64_t sub_10022AB90()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10022B070;
  }
  else {
    uint64_t v3 = sub_10022ABF4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10022ABF4()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (qword_100400E80 != -1) {
      swift_once(&qword_100400E80, sub_100228404);
    }
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v2, (uint64_t)qword_100400E88);
    uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void **)(v0 + 168);
    if (v6)
    {
      uint64_t v8 = *(void *)(v0 + 160);
      unint64_t v9 = *(void *)(v0 + 144);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v17 = *(void **)(v0 + 168);
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      uint64_t v11 = swift_slowAlloc(64LL, -1LL);
      uint64_t v19 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v12 = _typeName(_:qualified:)(v8, 0LL);
      *(void *)(v0 + 104) = sub_10015ADC4(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_10015ADC4(v16, v9, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease_n(v9, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%s] Start advertising task was cancelled before completing with %s",  (uint8_t *)v10,  0x16u);
      swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 144), 2LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 192) = v14;
    *Swift::String v14 = v0;
    v14[1] = sub_10022AE64;
    return v18(2LL);
  }

uint64_t sub_10022AE64(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    BOOL v6 = sub_10022B240;
  }

  else
  {
    *(void *)(v4 + 208) = a1;
    BOOL v6 = sub_10022AED8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10022AED8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v1
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_publicAssertion);
  *(void *)(v1
            + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_publicAssertion) = *(void *)(v0 + 208);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(char **)(v0 + 168);
  uint64_t v5 = *(void **)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 136);
  id v8 = *(id *)&v4[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x800000010033F3F0LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v10);
  *(void *)(v0 + 72) = v6;
  uint64_t v11 = sub_100156B68(&qword_1003F8E50);
  uint64_t v12 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 544108320LL;
  v14._object = (void *)0xE400000000000000LL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v7;
  v15._object = v5;
  String.append(_:)(v15);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInterpolatedString:v16];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022B070()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(char **)(v0 + 168);
  uint64_t v4 = *(void **)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 136);
  id v7 = *(id *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(57LL);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0LL;
  *(void *)(v0 + 48) = 0xE000000000000000LL;
  v8._uint64_t countAndFlagsBits = 91LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v2, 0LL);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x800000010033F3C0LL;
  v10._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v10);
  *(void *)(v0 + 56) = v5;
  uint64_t v11 = sub_100156B68(&qword_1003F8E50);
  uint64_t v12 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 544108320LL;
  v14._object = (void *)0xE400000000000000LL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v6;
  v15._object = v4;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 8250LL;
  v16._object = (void *)0xE200000000000000LL;
  String.append(_:)(v16);
  *(void *)(v0 + 64) = v1;
  uint64_t v17 = sub_100156B68(&qword_1003F86D0);
  _print_unlocked<A, B>(_:_:)( v0 + 64,  v0 + 40,  v17,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 logErrorWithInterpolatedString:v18];

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022B240()
{
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v2, (uint64_t)qword_100400E88);
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 200);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 160);
    unint64_t v9 = *(void *)(v0 + 144);
    uint64_t v33 = *(void *)(v0 + 136);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v34;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v12 = _typeName(_:qualified:)(v8, 0LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = sub_10015ADC4(v12, v13, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 88) = sub_10015ADC4(v33, v9, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v10 + 22) = 2112;
    swift_errorRetain(v7);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 96) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v10 + 24, v10 + 32);
    *uint64_t v11 = v14;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%s] Failed to make public advertiser assertion for %s: %@",  (uint8_t *)v10,  0x20u);
    uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v11, 1LL, v15);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 144);
    swift_errorRelease(*(void *)(v0 + 200));
    swift_bridgeObjectRelease_n(v16, 2LL);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  uint64_t v17 = *(void *)(v0 + 160);
  NSString v18 = *(char **)(v0 + 168);
  uint64_t v19 = *(void **)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 136);
  uint64_t v22 = *(void **)&v18[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  uint64_t v35 = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  id v23 = v22;
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  uint64_t v35 = 91LL;
  unint64_t v36 = 0xE100000000000000LL;
  v24._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v17, 0LL);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x800000010033F3F0LL;
  v25._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v25);
  *(void *)(v0 + 72) = v20;
  uint64_t v26 = sub_100156B68(&qword_1003F8E50);
  uint64_t v27 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 544108320LL;
  v29._object = (void *)0xE400000000000000LL;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v21;
  v30._object = v19;
  String.append(_:)(v30);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 logInterpolatedString:v31];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022B648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  uint64_t v9 = sub_100156B68(&qword_1003FB640);
  v8[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[16] = v10;
  v8[17] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003FB890);
  v8[18] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[19] = v12;
  v8[20] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68(&qword_1003FB898);
  v8[21] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[22] = v14;
  v8[23] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100156B68(&qword_1003FB8A0);
  _BYTE v8[24] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[25] = v16;
  v8[26] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10022B738, 0LL, 0LL);
}

uint64_t sub_10022B738()
{
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[27] = sub_10015ADAC(v2, (uint64_t)qword_100400E88);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v23 = v0[10];
    uint64_t v6 = v0[14];
    unint64_t v7 = v0[11];
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v24 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = _typeName(_:qualified:)(v6, 0LL);
    v0[8] = sub_10015ADC4(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10015ADC4(v23, v7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%s] Started observing invitations for: %s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[11], 2LL);
  }

  uint64_t v12 = v0[22];
  uint64_t v13 = v0[23];
  uint64_t v15 = v0[20];
  uint64_t v14 = v0[21];
  uint64_t v17 = v0[18];
  uint64_t v16 = v0[19];
  uint64_t v18 = v0[13] + 16LL;
  dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.getter();
  uint64_t v19 = sub_1001604E8( &qword_1003FB8A8,  &qword_1003FB898,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v14, v19);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  AsyncPublisher.makeAsyncIterator()(v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  swift_beginAccess(v18, v0 + 2, 0LL, 0LL);
  v0[28] = &_swiftEmptySetSingleton;
  uint64_t v22 = (char *)&dword_1003FB8B0 + dword_1003FB8B0;
  uint64_t v20 = (void *)swift_task_alloc(unk_1003FB8B4);
  v0[29] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10022BA20;
  return ((uint64_t (*)(void, void, void *))v22)(0LL, 0LL, v0 + 5);
}

uint64_t sub_10022BA20(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 232);
  *(void *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10022BA7C, 0LL, 0LL);
}

void sub_10022BA7C(uint64_t a1)
{
  uint64_t v2 = v1[30];
  if (!v2)
  {
    (*(void (**)(void, void))(v1[25] + 8LL))(v1[26], v1[24]);
LABEL_5:
    uint64_t v9 = v1[26];
    uint64_t v10 = v1[23];
    uint64_t v11 = v1[20];
    uint64_t v12 = v1[17];
    swift_bridgeObjectRelease();
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    uint64_t v8 = (void (*)(void))v1[1];
    goto LABEL_6;
  }

  uint64_t v3 = v1[31];
  static Task<>.checkCancellation()(a1);
  if (v3)
  {
    uint64_t v4 = v1[26];
    uint64_t v5 = v1[23];
    uint64_t v6 = v1[20];
    uint64_t v7 = v1[17];
    (*(void (**)(uint64_t, void))(v1[25] + 8LL))(v4, v1[24]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (void (*)(void))v1[1];
LABEL_6:
    v8();
    return;
  }

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1[13] + 16LL);
  if (!Strong)
  {
    (*(void (**)(void, void))(v1[25] + 8LL))(v1[26], v1[24]);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  uint64_t v13 = v1[28];
  if (*(void *)(v13 + 16) <= *(void *)(v2 + 16) >> 3)
  {
    v48[0] = v2;
    swift_bridgeObjectRetain();
    sub_100233168(v13, &qword_1003FB8C0, &qword_1003FB640, (void (*)(char *))sub_10023424C);
    swift_bridgeObjectRelease();
    uint64_t v14 = (_BYTE *)v2;
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1002339E8(v13, v2);
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = swift_bridgeObjectRetain_n(v14, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  uint64_t v45 = v2;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = v1[14];
    uint64_t v18 = v1[15];
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    v48[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v22 = _typeName(_:qualified:)(v19, 0LL);
    v1[6] = sub_10015ADC4(v22, v23, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v24 = sub_1001604E8( &qword_1003FB8B8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = Set.description.getter(v25, v18, v24);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    v1[7] = sub_10015ADC4(v26, v28, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v14, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] New connection requests: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  int64_t v29 = 0LL;
  Swift::String v30 = v14 + 56;
  uint64_t v31 = -1LL;
  uint64_t v32 = -1LL << v14[32];
  if (-v32 < 64) {
    uint64_t v31 = ~(-1LL << -(char)v32);
  }
  unint64_t v33 = v31 & *((void *)v14 + 7);
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v36 = v35 | (v29 << 6);
      goto LABEL_19;
    }

    int64_t v41 = v29 + 1;
    if (__OFADD__(v29, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v41 >= v34) {
      goto LABEL_35;
    }
    unint64_t v42 = *(void *)&v30[8 * v41];
    ++v29;
    if (!v42)
    {
      int64_t v29 = v41 + 1;
      if (v41 + 1 >= v34) {
        goto LABEL_35;
      }
      unint64_t v42 = *(void *)&v30[8 * v29];
      if (!v42)
      {
        int64_t v29 = v41 + 2;
        if (v41 + 2 >= v34) {
          goto LABEL_35;
        }
        unint64_t v42 = *(void *)&v30[8 * v29];
        if (!v42) {
          break;
        }
      }
    }

uint64_t sub_10022BFB8(void *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v13 = (void *)swift_allocObject(&unk_1003AA5D0, 40LL, 7LL);
  v13[2] = a1;
  void v13[3] = v2;
  v13[4] = ObjectType;
  aBlock[4] = sub_100236130;
  unint64_t v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003AA5E8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = a1;
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v18 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

void sub_10022C1BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [a1 invitationData];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v13 = v12;

    uint64_t v14 = *(void **)(a2
                   + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
    v39[0] = 91LL;
    v39[1] = 0xE100000000000000LL;
    v15._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a3, 0LL);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 8285LL;
    v16._object = (void *)0xE200000000000000LL;
    String.append(_:)(v16);
    v17._object = (void *)0x800000010033F310LL;
    v17._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 logInterpolatedString:v18];

    *(_BYTE *)(a2
             + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising) = 1;
    uint64_t v19 = sub_100156B68(&qword_1003FB858);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    sub_100160874(v11, v13);
    uint64_t v27 = NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)( v11,  v13,  1LL,  1LL,  8LL,  0LL);
    uint64_t v28 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser);
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = v27;
    swift_retain(v27);
    swift_release(v28);
    v39[0] = v27;
    uint64_t v29 = String.init<A>(describing:)(v39, &type metadata for UnsafeMutableRawPointer);
    uint64_t v31 = v30;
    uint64_t v32 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v8, 1LL, 1LL, v32);
    uint64_t v33 = swift_allocObject(&unk_1003AA1C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v33 + 16, a2);
    int64_t v34 = (void *)swift_allocObject(&unk_1003AA620, 72LL, 7LL);
    v34[2] = 0LL;
    v34[3] = 0LL;
    v34[4] = v33;
    v34[5] = v27;
    v34[6] = v29;
    v34[7] = v31;
    char v34[8] = a3;
    swift_retain(v27);
    uint64_t v35 = sub_1001669DC((uint64_t)v8, (uint64_t)&unk_1003FB868, (uint64_t)v34);
    uint64_t v36 = *(void *)(a2
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask);
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask) = v35;
    swift_release(v36);
    sub_1001608B8(v11, v13);
    swift_release(v27);
  }

  else
  {
    if (qword_100400E80 != -1) {
      swift_once(&qword_100400E80, sub_100228404);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10015ADAC(v20, (uint64_t)qword_100400E88);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(64LL, -1LL);
      v39[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v25 = _typeName(_:qualified:)(a3, 0LL);
      uint64_t v40 = sub_10015ADC4(v25, v26, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v40 = sub_10015ADC4(0xD00000000000001CLL, 0x800000010033F310LL, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 14, v23 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v22,  "[%s] %s - No remote invitation to begin advertising.",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }
  }

uint64_t sub_10022C800( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  return swift_task_switch(sub_10022C820, 0LL, 0LL);
}

uint64_t sub_10022C820()
{
  uint64_t v1 = v0[10] + 16LL;
  swift_beginAccess(v1, v0 + 2, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  v0[15] = Strong;
  if (Strong)
  {
    static Task<>.checkCancellation()(Strong);
    v0[16] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10022C8D8;
    uint64_t v4 = v6;
  }

  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }

  return v4();
}

uint64_t sub_10022C8D8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10022CC20;
  }
  else {
    uint64_t v3 = sub_10022C93C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10022C93C()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (qword_100400E80 != -1) {
      swift_once(&qword_100400E80, sub_100228404);
    }
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v2, (uint64_t)qword_100400E88);
    uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void **)(v0 + 120);
    if (v6)
    {
      unint64_t v8 = *(void *)(v0 + 104);
      uint64_t v9 = *(void *)(v0 + 112);
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v25 = *(void **)(v0 + 120);
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      uint64_t v11 = swift_slowAlloc(64LL, -1LL);
      v26[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v12 = _typeName(_:qualified:)(v9, 0LL);
      *(void *)(v0 + 64) = sub_10015ADC4(v12, v13, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 72) = sub_10015ADC4(v24, v8, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease_n(v8, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%s] Start advertising task was cancelled before completing with %s",  (uint8_t *)v10,  0x16u);
      swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 104), 2LL);
    }
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 112);
    Swift::String v15 = *(char **)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 96);
    Swift::String v16 = *(void **)(v0 + 104);
    id v18 = *(id *)&v15[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease();
    v26[0] = 91LL;
    v26[1] = 0xE100000000000000LL;
    v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v14, 0LL);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x800000010033F370LL;
    v20._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = v17;
    v21._object = v16;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 logInterpolatedString:v22];
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022CC20()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(char **)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 104);
  id v6 = *(id *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(60LL);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0LL;
  *(void *)(v0 + 48) = 0xE000000000000000LL;
  v7._uint64_t countAndFlagsBits = 91LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v2, 0LL);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000010033F330LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000033LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = v5;
  v10._object = v4;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 8250LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  *(void *)(v0 + 56) = v1;
  uint64_t v12 = sub_100156B68(&qword_1003F86D0);
  _print_unlocked<A, B>(_:_:)( v0 + 56,  v0 + 40,  v12,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logErrorWithInterpolatedString:v13];

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022CE94()
{
  return sub_10022CF00((uint64_t)&unk_1003AA580, (uint64_t)sub_1002360E4, (uint64_t)&unk_1003AA598);
}

uint64_t sub_10022CEE4()
{
  return sub_10022CF00((uint64_t)&unk_1003AA530, (uint64_t)sub_1002360C4, (uint64_t)&unk_1003AA548);
}

uint64_t sub_10022CF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v14 = swift_allocObject(a1, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v3;
  aBlock[4] = a2;
  uint64_t v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = a3;
  Swift::String v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  NSString v22 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v18 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_10022D120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v15 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session;
  uint64_t v16 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  uint64_t v17 = &unk_100400000;
  if (!v16)
  {
LABEL_13:
    if (v17[464] == -1LL)
    {
LABEL_14:
      uint64_t v55 = type metadata accessor for Logger(0LL);
      uint64_t v56 = sub_10015ADAC(v55, (uint64_t)qword_100400E88);
      id v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v60 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = v60;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v61 = _typeName(_:qualified:)(ObjectType, 0LL);
        uint64_t v70 = sub_10015ADC4(v61, v62, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v59 + 4, v59 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%s] No invitation to end advertising.", v59, 0xCu);
        swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      return;
    }

uint64_t sub_10022D7A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  return swift_task_switch(sub_10022D7C8, 0LL, 0LL);
}

uint64_t sub_10022D7C8()
{
  v0[4] = v0[12];
  uint64_t v1 = String.init<A>(describing:)(v0 + 4, &type metadata for UnsafeMutableRawPointer);
  unint64_t v3 = v2;
  v0[17] = v1;
  v0[18] = v2;
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v0[19] = sub_10015ADAC(v4, (uint64_t)qword_100400E88);
  uint64_t v5 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[16];
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)(v8, 0LL);
    v0[10] = sub_10015ADC4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = sub_10015ADC4(v1, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%s] Waiting for existing advertise task on %s to finish",  (uint8_t *)v9,  0x16u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  id v13 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[20] = v13;
  uint64_t v14 = sub_100156B68(&qword_1003F86D0);
  v0[21] = v14;
  *id v13 = v0;
  v13[1] = sub_10022DA30;
  return Task.value.getter( v14,  v0[13],  (char *)&type metadata for () + 8,  v14,  &protocol self-conformance witness table for Error);
}

uint64_t sub_10022DA30()
{
  if (v0)
  {
    swift_errorRelease(v0);
    unint64_t v2 = sub_10022DE48;
  }

  else
  {
    unint64_t v2 = sub_10022DA9C;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10022DA9C()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(v0[18], 2LL);
  unint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[17];
    unint64_t v4 = v0[18];
    uint64_t v6 = v0[16];
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    v0[8] = sub_10015ADC4(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10015ADC4(v5, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%s] Stopping existing advertisement on %s",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[18], 2LL);
  }

  v0[22] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10022DC74;
  return v13();
}

uint64_t sub_10022DC74()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    os_log_type_t v3 = sub_10022E028;
  }
  else {
    os_log_type_t v3 = sub_10022DCD8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10022DCD8()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x800000010033F2E0LL;
  v7._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v7);
  *(void *)(v0 + 56) = v4;
  uint64_t v8 = sub_100156B68(&qword_1003F8E50);
  uint64_t v9 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 544108320LL;
  v11._object = (void *)0xE400000000000000LL;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "logInterpolatedString:", v13, 91);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022DE48()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(v0[18], 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[17];
    unint64_t v4 = v0[18];
    uint64_t v6 = v0[16];
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    v0[8] = sub_10015ADC4(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10015ADC4(v5, v4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%s] Stopping existing advertisement on %s",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = v0[18];

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  v0[22] = v12;
  void *v12 = v0;
  v12[1] = sub_10022DC74;
  return v14();
}

uint64_t sub_10022E028()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(v5
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(51LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  v7._uint64_t countAndFlagsBits = 91LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000010033F2B0LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  String.append(_:)(v9);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v4;
  uint64_t v10 = sub_100156B68(&qword_1003F8E50);
  uint64_t v11 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 2108704LL;
  v13._object = (void *)0xE300000000000000LL;
  String.append(_:)(v13);
  *(void *)(v0 + 48) = v1;
  _print_unlocked<A, B>(_:_:)( v0 + 48,  v0 + 16,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logErrorWithInterpolatedString:v14];

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10022E1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v5);
  Swift::String v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Swift::String v12 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    NSString v14 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
    uint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease();
    uint64_t v24 = 91LL;
    unint64_t v25 = 0xE100000000000000LL;
    v15._uint64_t countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000010033F1E0LL;
    v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v16);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 logInterpolatedString:v17];

    v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
    uint64_t v18 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask];
    if (v18)
    {
      uint64_t v19 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser];
      if (v19)
      {
        uint64_t v20 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v7, 1LL, 1LL, v20);
        uint64_t v21 = (void *)swift_allocObject(&unk_1003AA4E0, 64LL, 7LL);
        v21[2] = 0LL;
        _OWORD v21[3] = 0LL;
        v21[4] = v19;
        void v21[5] = v18;
        v21[6] = v3;
        v21[7] = ObjectType;
        swift_retain(v18);
        swift_retain(v19);
        os_log_type_t v22 = v3;
        uint64_t v23 = sub_10015AA50((uint64_t)v7, (uint64_t)&unk_1003FB838, (uint64_t)v21);
        swift_release(v23);
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10022E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  return swift_task_switch(sub_10022E420, 0LL, 0LL);
}

uint64_t sub_10022E420()
{
  v0[4] = v0[10];
  uint64_t v1 = String.init<A>(describing:)(v0 + 4, &type metadata for UnsafeMutableRawPointer);
  unint64_t v3 = v2;
  v0[14] = v1;
  v0[15] = v2;
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v0[16] = sub_10015ADAC(v4, (uint64_t)qword_100400E88);
  uint64_t v5 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[13];
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)(v8, 0LL);
    v0[8] = sub_10015ADC4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10015ADC4(v1, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%s] Waiting for existing advertise task on %s to finish",  (uint8_t *)v9,  0x16u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  id v13 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[17] = v13;
  uint64_t v14 = sub_100156B68(&qword_1003F86D0);
  v0[18] = v14;
  *id v13 = v0;
  v13[1] = sub_10022E688;
  return Task.value.getter( v14,  v0[11],  (char *)&type metadata for () + 8,  v14,  &protocol self-conformance witness table for Error);
}

uint64_t sub_10022E688()
{
  if (v0)
  {
    swift_errorRelease(v0);
    unint64_t v2 = sub_10022EA2C;
  }

  else
  {
    unint64_t v2 = sub_10022E6F4;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10022E6F4()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(v0[15], 2LL);
  unint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[14];
    unint64_t v4 = v0[15];
    uint64_t v6 = v0[13];
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    v0[6] = sub_10015ADC4(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10015ADC4(v5, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%s] Stopping existing advertisement on %s",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[15], 2LL);
  }

  v0[19] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10022E8CC;
  return v13();
}

uint64_t sub_10022E8CC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16swift_beginAccess(v0 + 16, v2, 0LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    os_log_type_t v3 = sub_10022EC0C;
  }
  else {
    os_log_type_t v3 = sub_10022E930;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10022E930()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._object = (void *)0x800000010033F240LL;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v2;
  v8._object = v1;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v1);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE100000000000000LL);
  [v4 logInterpolatedString:v9];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022EA2C()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(v0[15], 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[14];
    unint64_t v4 = v0[15];
    uint64_t v6 = v0[13];
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    v0[6] = sub_10015ADC4(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10015ADC4(v5, v4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%s] Stopping existing advertisement on %s",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = v0[15];

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  v0[19] = v12;
  void *v12 = v0;
  v12[1] = sub_10022E8CC;
  return v14();
}

uint64_t sub_10022EC0C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  uint64_t v5 = *(void **)(v3
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(54LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  v6._uint64_t countAndFlagsBits = 91LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v4, 0LL);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._object = (void *)0x800000010033F200LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000031LL;
  String.append(_:)(v9);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v1;
  _print_unlocked<A, B>(_:_:)( v0 + 40,  v0 + 16,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v10 = *(void *)(v0 + 24);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  [v5 logErrorWithInterpolatedString:v11];

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022ED2C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003FB640);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  unint64_t v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1003AA300, v16 + 8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v14, v12, v9);
  *(void *)(v17 + v15) = v2;
  *(void *)(v17 + vswift_weakDestroy(v0 + 16) = ObjectType;
  aBlock[4] = sub_100235A2C;
  uint64_t v33 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003AA318;
  uint64_t v18 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v22 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v20, v21, v27, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
  return swift_release(v33);
}

void sub_10022EFC0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100156B68(&qword_1003FB640);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v71 - v11;
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10015ADAC(v13, (uint64_t)qword_100400E88);
  uint64_t v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v15 = v79(v12, a1, v6);
  uint64_t v78 = v14;
  unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v77 = a3;
  uint64_t v80 = a1;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    unint64_t v76 = a2;
    uint64_t v20 = v19;
    uint64_t v21 = (void **)swift_slowAlloc(96LL, -1LL);
    unint64_t v75 = v10;
    uint64_t v22 = v21;
    aBlock = v21;
    *(_DWORD *)uint64_t v20 = 136315650;
    uint64_t v23 = _typeName(_:qualified:)(a3, 0LL);
    uint64_t v87 = sub_10015ADC4(v23, v24, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v87 = sub_10015ADC4(0xD00000000000001BLL, 0x800000010033F1C0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v25 = sub_1001604E8( &qword_1003FB7F0,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v6, v25);
    uint64_t v87 = sub_10015ADC4(v26, v27, (uint64_t *)&aBlock);
    a1 = v80;
    a3 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] %s - %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy(v22, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v22;
    uint64_t v10 = v75;
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v20;
    a2 = v76;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  uint64_t v31 = *(void *)&a2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  if (v31)
  {
    unint64_t v32 = (void *)kMREventGroupSessionPreLMIRequestReceived;
    uint64_t v85 = sub_10022F780;
    uint64_t v86 = 0LL;
    aBlock = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256LL;
    uint64_t v83 = sub_100169A74;
    uint64_t v84 = &unk_1003AA340;
    uint64_t v33 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v31);
    id v34 = v32;
    MRAnalyticsSendEvent(v34, 0LL, v33);
    _Block_release(v33);

    v79(v10, a1, v6);
    id v35 = objc_allocWithZone((Class)type metadata accessor for NearbySessionsPendingParticipant(0LL));
    id v36 = sub_100232BE0((uint64_t)v10);
    id v37 =   [objc_allocWithZone((Class)MRDGroupSessionInvitationRequest) initWithSession:v31 pendingParticipant:v36];
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    id v73 = v36;
    if (v40)
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      unint64_t v75 = v10;
      uint64_t v42 = v41;
      uint64_t v43 = swift_slowAlloc(8LL, -1LL);
      unint64_t v76 = a2;
      uint64_t v71 = (void *)v43;
      uint64_t v72 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v72;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v78 = v7;
      uint64_t v44 = _typeName(_:qualified:)(a3, 0LL);
      uint64_t v87 = sub_10015ADC4(v44, v45, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2112;
      uint64_t v87 = (uint64_t)v37;
      uint64_t v46 = v6;
      id v47 = v37;
      uint64_t v7 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v42 + 14, v42 + 22);
      NSString v48 = v71;
      *uint64_t v71 = v37;

      uint64_t v6 = v46;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%s] Parsed invitation request: - %@", (uint8_t *)v42, 0x16u);
      uint64_t v49 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v48, 1LL, v49);
      a2 = v76;
      swift_slowDealloc(v48, -1LL, -1LL);
      uint64_t v50 = v72;
      swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      uint64_t v51 = v42;
      uint64_t v10 = v75;
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(&a2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_delegate]);
    if (Strong)
    {
      uint64_t v59 = (void *)Strong;
      v79(v10, v80, v6);
      uint64_t v60 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v61 = v6;
      uint64_t v62 = (v60 + 32) & ~v60;
      uint64_t v63 = v7;
      unint64_t v64 = (v74 + v62 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v65 = swift_allocObject(&unk_1003AA378, v64 + 8, v60 | 7);
      uint64_t v66 = v10;
      uint64_t v67 = v65;
      *(void *)(v65 + swift_weakDestroy(v0 + 16) = a2;
      *(void *)(v65 + 24) = v31;
      (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v65 + v62, v66, v61);
      *(void *)(v67 + v64) = v77;
      uint64_t v85 = sub_100235B08;
      uint64_t v86 = v67;
      aBlock = _NSConcreteStackBlock;
      uint64_t v82 = 1107296256LL;
      uint64_t v83 = sub_10015ACC0;
      uint64_t v84 = &unk_1003AA390;
      uint64_t v68 = _Block_copy(&aBlock);
      uint64_t v69 = v86;
      swift_unknownObjectRetain(v31);
      uint64_t v70 = a2;
      swift_release(v69);
      [v59 advertiser:v70 didReceiveInvitationRequest:v37 accessHandler:v68];
      swift_unknownObjectRelease(v59);

      swift_unknownObjectRelease(v31);
      _Block_release(v68);
    }

    else
    {

      swift_unknownObjectRelease(v31);
    }
  }

  else
  {
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v56 = _typeName(_:qualified:)(a3, 0LL);
      uint64_t v87 = sub_10015ADC4(v56, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "[%s] Got connection request without active session. Ignoring",  v54,  0xCu);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }
  }

unint64_t sub_10022F780()
{
  return sub_10016995C((uint64_t)_swiftEmptyArrayStorage);
}

id sub_10022F78C(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100232BE0(a1);
}

uint64_t sub_10022F7BC(int a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a5;
  int v30 = a1;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v36 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = sub_100156B68(&qword_1003FB640);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = *(void *)&a2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = v17 + v14;
  uint64_t v19 = swift_allocObject(&unk_1003AA3C8, (v18 & 0xFFFFFFFFFFFFFFF8LL) + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(v19 + v17, v15, v12);
  *(_BYTE *)(v19 + v18) = v30;
  *(void *)((v18 & 0xFFFFFFFFFFFFFFF8LL) + v19 + 8) = v31;
  aBlock[4] = sub_100235BE8;
  uint64_t v40 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003AA3E0;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = a2;
  uint64_t v22 = swift_unknownObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v25 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v27 = v33;
  uint64_t v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v24, v25, v34, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v27, v20);
  _Block_release(v20);
  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v27, v26);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v11, v36);
  return swift_release(v40);
}

void sub_10022FA60(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = sub_100156B68(&qword_1003FB640);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&aBlock[-1] - v15;
  uint64_t v17 = *(void *)(a1
                  + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v17) {
    BOOL v18 = v17 == a2;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - v15, a3, v10);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = (v30 + 16) & ~v30;
    uint64_t v32 = v31 + v12;
    uint64_t v33 = v30 | 7;
    if ((a4 & 1) != 0)
    {
      uint64_t v34 = swift_allocObject(&unk_1003AA490, v32, v33);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v34 + v31, v16, v10);
      uint64_t v35 = &unk_1003FB810;
      uint64_t v36 = v34;
      uint64_t v37 = 0x65766F72707061LL;
      uint64_t v38 = 0xE700000000000000LL;
    }

    else
    {
      uint64_t v34 = swift_allocObject(&unk_1003AA418, v32, v33);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v34 + v31, v16, v10);
      uint64_t v35 = &unk_1003FB800;
      uint64_t v36 = v34;
      uint64_t v37 = 0x7463656A6572LL;
      uint64_t v38 = 0xE600000000000000LL;
    }

    sub_10022FE60((uint64_t)v35, v36, v37, v38, a3, a5);
    swift_release(v34);
    os_log_type_t v39 = (void *)kMREventGroupSessionPreLMIResponseSent;
    uint64_t v40 = swift_allocObject(&unk_1003AA440, 17LL, 7LL);
    *(_BYTE *)(v40 + swift_weakDestroy(v0 + 16) = a4 & 1;
    aBlock[4] = (uint64_t)sub_100235CB8;
    uint64_t v46 = v40;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100169A74;
    aBlock[3] = (uint64_t)&unk_1003AA458;
    uint64_t v41 = _Block_copy(aBlock);
    uint64_t v42 = v46;
    id v43 = v39;
    swift_release(v42);
    MRAnalyticsSendEvent(v43, 0LL, v41);
    _Block_release(v41);
  }

  else
  {
    if (qword_100400E80 != -1) {
      swift_once(&qword_100400E80, sub_100228404);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v19, (uint64_t)qword_100400E88);
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3, v10);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v25 = _typeName(_:qualified:)(a5, 0LL);
      uint64_t v47 = sub_10015ADC4(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v27 = sub_1001604E8( &qword_1003FB7F0,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v10, v27);
      uint64_t v47 = sub_10015ADC4(v28, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[%s] Attempted to approve connection request: %s but the requesting session is no longer active",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }

uint64_t sub_10022FE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a1;
  uint64_t v28 = a6;
  uint64_t v26 = a3;
  uint64_t v9 = sub_100156B68(&qword_1003FB640);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a5, v9);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 48) & ~v17;
  unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (char *)swift_allocObject(&unk_1003AA4B8, v20 + 8, v17 | 7);
  *((void *)v21 + 2) = 0LL;
  *((void *)v21 + 3) = 0LL;
  *((void *)v21 + 4) = v26;
  *((void *)v21 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v18], v12, v9);
  os_log_type_t v22 = &v21[v19];
  *(void *)os_log_type_t v22 = v27;
  *((void *)v22 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a2;
  *(void *)&v21[v20] = v28;
  swift_bridgeObjectRetain();
  swift_retain(a2);
  uint64_t v23 = sub_10015AA50((uint64_t)v15, (uint64_t)&unk_1003FB820, (uint64_t)v21);
  return swift_release(v23);
}

uint64_t sub_10022FFF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a8;
  v8[14] = v13;
  v8[11] = a6;
  v8[12] = a7;
  v8[9] = a4;
  v8[10] = a5;
  uint64_t v9 = sub_100156B68(&qword_1003FB640);
  v8[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[16] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[17] = swift_task_alloc(v11);
  v8[18] = swift_task_alloc(v11);
  return swift_task_switch(sub_100230074, 0LL, 0LL);
}

uint64_t sub_100230074()
{
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v0[19] = sub_10015ADAC(v6, (uint64_t)qword_100400E88);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[20] = v7;
  v7(v1, v4, v2);
  uint64_t v8 = swift_bridgeObjectRetain_n(v5, 2LL);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[15];
  uint64_t v14 = v0[16];
  if (v11)
  {
    uint64_t v27 = v0[9];
    uint64_t v15 = v0[14];
    unint64_t v16 = v0[10];
    uint64_t v29 = v0[16];
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v30 = swift_slowAlloc(96LL, -1LL);
    uint64_t v32 = v30;
    *(_DWORD *)uint64_t v17 = 136315650;
    os_log_type_t type = v10;
    uint64_t v18 = _typeName(_:qualified:)(v15, 0LL);
    v0[6] = sub_10015ADC4(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10015ADC4(v27, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(v16, 3LL);
    *(_WORD *)(v17 + 22) = 2080;
    uint64_t v20 = sub_1001604E8( &qword_1003FB7F0,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v13, v20);
    v0[8] = sub_10015ADC4(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v23(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "[%s] %s connection request: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v30, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[10], 2LL);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v23(v12, v13);
  }

  v0[21] = v23;
  uint64_t v24 = (int *)v0[12];
  uint64_t v31 = (uint64_t (*)(void))((char *)v24 + *v24);
  uint64_t v25 = (void *)swift_task_alloc(v24[1]);
  v0[22] = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_100230364;
  return v31();
}

uint64_t sub_100230364()
{
  uint64_t v2 = *(void *)(*v1 + 176);
  uint64_t v3 = *v1;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1002303E0, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 136);
  swift_task_dealloc(*(void *)(v3 + 144));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1002303E0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  (*(void (**)(void, void, void))(v0 + 160))( *(void *)(v0 + 136),  *(void *)(v0 + 88),  *(void *)(v0 + 120));
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v25 = *(void *)(v0 + 136);
    unint64_t v7 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v8 = swift_slowAlloc(42LL, -1LL);
    uint64_t v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(96LL, -1LL);
    uint64_t v30 = v29;
    *(_DWORD *)uint64_t v8 = 136315906;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    os_log_t log = v3;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10015ADC4(v9, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_10015ADC4(v23, v7, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 3LL);
    *(_WORD *)(v8 + 22) = 2080;
    uint64_t v11 = sub_1001604E8( &qword_1003FB7F0,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v24, v11);
    *(void *)(v0 + 32) = sub_10015ADC4(v12, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    v27(v25, v24);
    *(_WORD *)(v8 + 32) = 2112;
    swift_errorRetain(v5);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 34, v8 + 42);
    *uint64_t v28 = v14;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "[%s] Failed to %s: %s - error: %@", (uint8_t *)v8, 0x2Au);
    uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v28, 1LL, v15);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_arrayDestroy(v29, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 80);
    swift_errorRelease(v16);
    swift_bridgeObjectRelease_n(v20, 2LL);
    v17(v18, v19);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  uint64_t v21 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100230734()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to NearbyInvitationAdvertiser.PendingMember.approve()[1]);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_100156B68(&qword_1003FB640);
  void *v1 = v0;
  v1[1] = sub_100160A04;
  return NearbyInvitationAdvertiser.PendingMember.approve()(v2);
}

uint64_t sub_100230790()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to NearbyInvitationAdvertiser.PendingMember.reject()[1]);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_100156B68(&qword_1003FB640);
  void *v1 = v0;
  v1[1] = sub_100160A04;
  return NearbyInvitationAdvertiser.PendingMember.reject()(v2);
}

void sub_1002307EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v6 = sub_100156B68(&qword_1003FB610);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v87 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v90 = (char *)v84 - v11;
  uint64_t v86 = v12;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v84 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (void *)((char *)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void **)(v3
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    if (qword_100400E80 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100400E80, sub_100228404);
LABEL_3:
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10015ADAC(v21, (uint64_t)qword_100400E88);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v91 = a1;
  uint64_t v24 = v23(v14, a1, v6);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v89 = ObjectType;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v85 = v23;
    uint64_t v29 = v28;
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v88 = v3;
    uint64_t v31 = v30;
    aBlock[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v32 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v94 = sub_10015ADC4(v32, v33, aBlock);
    v84[1] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v34 = sub_1001604E8( &qword_1003FB790,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v6, v34);
    uint64_t v94 = sub_10015ADC4(v35, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v14, v6);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%s] Got join request: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v31;
    uint64_t v3 = v88;
    swift_slowDealloc(v38, -1LL, -1LL);
    uint64_t v39 = v29;
    uint64_t v23 = v85;
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v14, v6);
  }

  uint64_t v40 = v6;
  uint64_t v41 = *(void *)(v3
                  + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v41)
  {
    id v42 =  [(id)swift_unknownObjectRetain(*(void *)(v3 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session)) identifier];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v45 = v44;

    sub_10016083C(0LL, (unint64_t *)&unk_1003FB798, off_100397328);
    uint64_t v46 = (uint64_t)v90;
    v23(v90, v91, v40);
    id v47 = sub_100230FEC(v46);
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong( v3 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_delegate);
      if (Strong)
      {
        uint64_t v87 = Strong;
        uint64_t v50 = swift_allocObject(&unk_1003AA1C0, 24LL, 7LL);
        swift_unknownObjectWeakInit(v50 + 16, v3);
        uint64_t v51 = v90;
        v23(v90, v91, v40);
        uint64_t v52 = *(unsigned __int8 *)(v7 + 80);
        uint64_t v91 = v43;
        uint64_t v53 = (v52 + 24) & ~v52;
        uint64_t v54 = v52 | 7;
        uint64_t v55 = v86 + v53 + 7;
        uint64_t v85 = (uint64_t (*)(char *, uint64_t, uint64_t))v40;
        uint64_t v86 = v45;
        unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v57 = ((v55 & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v58 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v59 = swift_allocObject(&unk_1003AA1E8, v58 + 8, v54);
        uint64_t v88 = v3;
        uint64_t v60 = v59;
        *(void *)(v59 + swift_weakDestroy(v0 + 16) = v50;
        (*(void (**)(uint64_t, char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v7 + 32))( v59 + v53,  v51,  v85);
        *(void *)(v60 + v56) = v41;
        uint64_t v61 = (uint64_t *)(v60 + v57);
        uint64_t v62 = v86;
        *uint64_t v61 = v91;
        v61[1] = v62;
        *(void *)(v60 + v58) = v89;
        aBlock[4] = (uint64_t)sub_1002355FC;
        uint64_t v93 = v60;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_10015ACC0;
        aBlock[3] = (uint64_t)&unk_1003AA200;
        uint64_t v63 = _Block_copy(aBlock);
        uint64_t v64 = v93;
        swift_unknownObjectRetain(v41);
        swift_release(v64);
        uint64_t v65 = v87;
        [v87 advertiser:v88 didReceiveJoinRequest:v48 accessHandler:v63];
        swift_unknownObjectRelease(v41);

        swift_unknownObjectRelease(v65);
        _Block_release(v63);
      }

      else
      {
        swift_unknownObjectRelease(v41);
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      uint64_t v77 = swift_bridgeObjectRelease();
      uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
      os_log_type_t v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v81 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v81;
        *(_DWORD *)uint64_t v80 = 136315138;
        uint64_t v82 = _typeName(_:qualified:)(v89, 0LL);
        uint64_t v94 = sub_10015ADC4(v82, v83, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "[%s] Failed to parse join request information", v80, 0xCu);
        swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1LL, -1LL);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_unknownObjectRelease(v41);
      }

      else
      {

        swift_unknownObjectRelease(v41);
      }
    }
  }

  else
  {
    uint64_t v66 = v87;
    uint64_t v67 = v23(v87, v91, v6);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc(22LL, -1LL);
      uint64_t v71 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v71;
      *(_DWORD *)uint64_t v70 = 136315394;
      uint64_t v72 = _typeName(_:qualified:)(v89, 0LL);
      uint64_t v94 = sub_10015ADC4(v72, v73, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2080;
      uint64_t v74 = sub_1001604E8( &qword_1003FB790,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v6, v74);
      uint64_t v94 = sub_10015ADC4(v75, v76, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v70 + 14, v70 + 22);
      swift_bridgeObjectRelease();
      v37(v66, v6);
      _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "[%s] Got join request with no active session: %s. Ignoring",  (uint8_t *)v70,  0x16u);
      swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v70, -1LL, -1LL);
    }

    else
    {
      v37(v66, v6);
    }
  }

id sub_100230FEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003FB610);
  uint64_t v9 = NearbyInvitation.PendingMember.joinRequestUserInfo.getter();
  Class isa = 0LL;
  if (v10 >> 60 != 15)
  {
    uint64_t v12 = v9;
    unint64_t v13 = v10;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100171C30(v12, v13);
  }

  id v14 = [objc_allocWithZone(_MRGroupSessionJoinRequestProtobuf) initWithData:isa];

  if (!v14)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
    return 0LL;
  }

  id v15 = [v14 identity];
  id v16 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v15];

  if (!v16)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);

    return 0LL;
  }

  uint64_t v25 = v4;
  id v17 = [v14 oobKeys];
  if (!v17
    || (uint64_t v18 = v17,
        uint64_t v26 = 0LL,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v17, &v26, &type metadata for String),
        v18,
        !v26))
  {
    swift_bridgeObjectRelease();
  }

  id v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  uint64_t v20 = NearbyInvitation.PendingMember.invitationID.getter(v8);
  UUID.uuidString.getter(v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v25);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [v19 initWithIdentifier:v21 identity:v16 oobKeys:v22];

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v23;
}

char *sub_100231264(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a7;
  uint64_t v49 = a6;
  uint64_t v47 = a5;
  uint64_t v45 = a3;
  int v46 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  __chkstk_darwin(v13);
  id v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100156B68(&qword_1003FB610);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  id v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v55, 0LL, 0LL);
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    NSString v21 = result;
    uint64_t v44 = v12;
    uint64_t result = (char *)[objc_allocWithZone(_MRGroupSessionJoinResponseProtobuf) init];
    if (result)
    {
      Class v22 = result;
      uint64_t v41 = v15;
      uint64_t v42 = v10;
      uint64_t v43 = v9;
      id v23 = [a4 joinToken];
      NSString v24 = [v23 joinURLString];

      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      [v22 setJoinURL:v24];

      v40[1] = *(void *)&v21[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))( (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v45,  v16);
      uint64_t v25 = *(unsigned __int8 *)(v17 + 80);
      uint64_t v26 = (v25 + 41) & ~v25;
      unint64_t v27 = (v18 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v29 = swift_allocObject(&unk_1003AA238, v28 + 8, v25 | 7);
      uint64_t v30 = v47;
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v21;
      *(void *)(v29 + 24) = v30;
      *(void *)(v29 + 32) = v49;
      *(_BYTE *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v46 & 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v29 + v26, v19, v16);
      *(void *)(v29 + v27) = v22;
      *(void *)(v29 + v28) = v48;
      aBlock[4] = sub_100235714;
      uint64_t v54 = v29;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100157EA8;
      aBlock[3] = &unk_1003AA250;
      uint64_t v31 = _Block_copy(aBlock);
      uint64_t v32 = v21;
      swift_bridgeObjectRetain();
      unint64_t v33 = v22;
      uint64_t v34 = v41;
      static DispatchQoS.unspecified.getter(v33);
      uint64_t v52 = _swiftEmptyArrayStorage;
      uint64_t v35 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v36 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v37 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v38 = v43;
      uint64_t v39 = v44;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v36, v37, v43, v35);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v39, v31);
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v38);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);

      return (char *)swift_release(v54);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100231608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = a7;
  uint64_t v36 = a4;
  uint64_t v32 = a6;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v9 = sub_100156B68(&qword_1003FB610);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v19 = *(void **)(a5
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v14, 1LL, 1LL, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v32,  v9);
    uint64_t v23 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v24 = (v23 + 48) & ~v23;
    unint64_t v25 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v27 = (char *)swift_allocObject(&unk_1003AA2D8, v26 + 8, v23 | 7);
    *((void *)v27 + 2) = 0LL;
    *((void *)v27 + 3) = 0LL;
    *((void *)v27 + 4) = v33;
    *((void *)v27 + 5) = a2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))( &v27[v24],  (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
    unint64_t v28 = &v27[v25];
    uint64_t v29 = v36;
    *(void *)unint64_t v28 = v34;
    *((void *)v28 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v29;
    *(void *)&v27[v26] = v35;
    swift_bridgeObjectRetain();
    swift_retain(v29);
    uint64_t v30 = sub_10015AA50((uint64_t)v14, (uint64_t)&unk_1003FB7D8, (uint64_t)v27);
    return swift_release(v30);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10023182C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a8;
  v8[13] = v12;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  uint64_t v9 = sub_100156B68(&qword_1003FB610);
  v8[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[15] = v10;
  v8[16] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10023189C, 0LL, 0LL);
}

uint64_t sub_10023189C()
{
  if (qword_100400E80 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v0[17] = sub_10015ADAC(v6, (uint64_t)qword_100400E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v7 = swift_bridgeObjectRetain_n(v5, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v12 = v0[15];
  uint64_t v11 = v0[16];
  uint64_t v13 = v0[14];
  if (v10)
  {
    uint64_t v25 = v0[8];
    uint64_t v14 = v0[13];
    unint64_t v15 = v0[9];
    uint64_t v26 = v0[15];
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = swift_slowAlloc(96LL, -1LL);
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v16 = 136315650;
    uint64_t v17 = _typeName(_:qualified:)(v14, 0LL);
    v0[5] = sub_10015ADC4(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = sub_10015ADC4(v25, v15, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v15, 3LL);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v19 = sub_1001604E8( &qword_1003FB790,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v13, v19);
    v0[7] = sub_10015ADC4(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] %s pending member: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v27, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[9], 2LL);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  uint64_t v22 = (int *)v0[11];
  unint64_t v28 = (uint64_t (*)(void))((char *)v22 + *v22);
  uint64_t v23 = (void *)swift_task_alloc(v22[1]);
  v0[18] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100231B84;
  return v28();
}

uint64_t sub_100231B84()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100231BF8, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 128));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100231BF8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10015ADC4(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_10015ADC4(v16, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 3LL);
    *(_WORD *)(v8 + 22) = 2112;
    swift_errorRetain(v5);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 32) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 24, v8 + 32);
    *uint64_t v17 = v11;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s] Failed to %s pending member: %@", (uint8_t *)v8, 0x20u);
    uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v17, 1LL, v12);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = *(void *)(v0 + 72);
    swift_errorRelease(v13);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  swift_task_dealloc(*(void *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100231E8C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v36 = a6;
  uint64_t v38 = a5;
  uint64_t v12 = sub_100156B68(&qword_1003FB610);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v37 = a1;
  uint64_t result = *(void **)(a1
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (result)
  {
    int v35 = a4;
    id v16 = [result identifier];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    if (v17 == a2 && v19 == a3)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = a7;
      char v23 = v35;
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, a2, a3, 0LL);
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v22 = a7;
      char v23 = v35;
      if ((v21 & 1) == 0) {
        return result;
      }
    }

    uint64_t v24 = v38;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)], v38, v12);
    uint64_t v25 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v26 = (v25 + 16) & ~v25;
    if ((v23 & 1) != 0)
    {
      unint64_t v27 = (v14 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v28 = swift_allocObject(&unk_1003AA2B0, v27 + 8, v25 | 7);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))( v28 + v26,  &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v12);
      uint64_t v29 = v36;
      *(void *)(v28 + v27) = v36;
      id v30 = v29;
      uint64_t v31 = &unk_1003FB7C0;
      uint64_t v32 = 0x65766F72707061LL;
      uint64_t v33 = 0xE700000000000000LL;
    }

    else
    {
      uint64_t v28 = swift_allocObject(&unk_1003AA288, v26 + v14, v25 | 7);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))( v28 + v26,  &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v12);
      uint64_t v31 = &unk_1003FB7B0;
      uint64_t v32 = 0x7463656A6572LL;
      uint64_t v33 = 0xE600000000000000LL;
    }

    sub_100231608(v32, v33, (uint64_t)v31, v28, v37, v24, v22);
    return (void *)swift_release(v28);
  }

  return result;
}

uint64_t sub_1002320A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1002320B8, 0LL, 0LL);
}

uint64_t sub_1002320B8()
{
  id v1 = [*(id *)(v0 + 24) data];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    unint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 0LL;
    unint64_t v5 = 0xF000000000000000LL;
  }

  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v5;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to NearbyInvitation.PendingMember.approve(userInfo:)[1]);
  *(void *)(v0 + 48) = v6;
  uint64_t v7 = sub_100156B68(&qword_1003FB610);
  *uint64_t v6 = v0;
  v6[1] = sub_100232168;
  return NearbyInvitation.PendingMember.approve(userInfo:)(v3, v5, v7);
}

uint64_t sub_100232168()
{
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1002321DC, 0LL, 0LL);
  }
  sub_100171C30(*(void *)(v3 + 32), *(void *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1002321DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100232210()
{
  id v1 = (void *)swift_task_alloc(async function pointer to NearbyInvitation.PendingMember.reject()[1]);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_100156B68(&qword_1003FB610);
  void *v1 = v0;
  v1[1] = sub_10015FD10;
  return NearbyInvitation.PendingMember.reject()(v2);
}

uint64_t sub_10023226C(void *a1)
{
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  if (v3 && (unint64_t v4 = (char *)[v3 nearbyInvitation]) != 0)
  {
    unint64_t v5 = v4;
    uint64_t v6 = *(void *)&v4[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
    swift_retain(v6);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = *(dispatch_queue_s **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v8 = (void *)swift_allocObject(&unk_1003AA148, 40LL, 7LL);
  v8[2] = v6;
  v8[3] = v1;
  v8[4] = a1;
  uint64_t v9 = swift_allocObject(&unk_1003AA170, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_100232F60;
  *(void *)(v9 + 24) = v8;
  v16[4] = sub_1001840B4;
  uint64_t v17 = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  id v16[2] = sub_1001B2FA0;
  v16[3] = &unk_1003AA188;
  unint64_t v10 = _Block_copy(v16);
  uint64_t v11 = v17;
  id v12 = a1;
  swift_retain(v9);
  swift_retain(v6);
  uint64_t v13 = v1;
  swift_release(v11);
  dispatch_async_and_wait(v7, v10);
  swift_release(v6);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 151LL, 420LL, 33LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002324F4()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1002325B0(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *unint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*sub_10023260C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_100232698()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity, v3, 0LL, 0LL);
  return *v1;
}

void sub_100232738(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  unint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*sub_100232788(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100232810()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10023289C(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1002328E4(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10023296C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1002329F8(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_100232A40(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100232AC8()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_100232B54(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_100232B9C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id sub_100232BE0(uint64_t a1)
{
  uint64_t v2 = v1;
  v2[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected] = 0;
  unint64_t v4 = &v2[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connectionRequest];
  uint64_t v5 = sub_100156B68(&qword_1003FB640);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  uint64_t v7 = v2;
  uint64_t v8 = NearbyInvitationAdvertiser.PendingMember.identifier.getter(v5);
  uint64_t v9 = (uint64_t *)&v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier];
  uint64_t *v9 = v8;
  v9[1] = v10;
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___MRUserIdentity);
  NearbyInvitationAdvertiser.PendingMember.contactID.getter(v5);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NearbyInvitationAdvertiser.PendingMember.displayName.getter(v5);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 basicIdentityWithIdentifier:v12 displayName:v13];

  *(void *)&v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity] = v14;
  v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest] = 1;
  v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden] = 0;

  v17.receiver = v7;
  v17.super_class = (Class)type metadata accessor for NearbySessionsPendingParticipant(0LL);
  id v15 = objc_msgSendSuper2(&v17, "init");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v15;
}

uint64_t type metadata accessor for NearbySessionsPendingParticipant(uint64_t a1)
{
  uint64_t result = qword_100400EA8;
  if (!qword_100400EA8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbySessionsPendingParticipant);
  }
  return result;
}

id sub_100232DBC()
{
  return sub_100185D08(0LL, (uint64_t (*)(void))type metadata accessor for NearbySessionsPendingParticipant);
}

uint64_t sub_100232E34()
{
  return type metadata accessor for NearbySessionsPendingParticipant(0LL);
}

void sub_100232E3C(uint64_t a1)
{
  v4[0] = &unk_10034EC38;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_10034EC50;
  void v4[3] = &unk_10034EC50;
  void v4[4] = &unk_10034EC50;
  sub_100232ED0(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
  }

void sub_100232ED0(uint64_t a1)
{
  if (!qword_1003FB770)
  {
    uint64_t v2 = type metadata accessor for NearbyGroup(255LL);
    unint64_t v3 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember( a1,  v2,  &protocol witness table for NearbyGroup);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1003FB770);
    }
  }

uint64_t sub_100232F2C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100232F60()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v3 = *(void **)(v1 + 32);
  uint64_t v5 = sub_100156B68((uint64_t *)&unk_1003F9E80);
  uint64_t inited = swift_initStackObject(v5, &v15);
  uint64_t v7 = inited;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
  *(void *)(inited + 32) = 0x6974617469766E69LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0xEA00000000006E6FLL;
  if (v2)
  {
    uint64_t v8 = dispatch thunk of NearbyInvitation.description.getter();
    uint64_t v10 = (uint64_t *)(v7 + 48);
    *(void *)(v7 + 72) = &type metadata for String;
    if (v9)
    {
      *uint64_t v10 = v8;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v10 = (uint64_t *)(inited + 48);
    *(void *)(inited + 72) = &type metadata for String;
  }

  *uint64_t v10 = 7104878LL;
  unint64_t v9 = 0xE300000000000000LL;
LABEL_6:
  *(void *)(v7 + 56) = v9;
  strcpy((char *)(v7 + 80), "isAdvertising");
  *(_WORD *)(v7 + 94) = -4864;
  char v11 = *(_BYTE *)(v4
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising);
  *(void *)(v7 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &type metadata for Bool;
  *(_BYTE *)(v7 + 96) = v11;
  unint64_t v12 = sub_1001B7BC8(v7);
  if (v3)
  {
    Dictionary.description.getter( v12,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    swift_bridgeObjectRelease();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setGroupSessionAdvertiserState:v13];

    Class isa = (Class) [*(id *)(v4 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer) history];
    if (!isa)
    {
      static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }

    [v3 setGroupSessionAdvertiserEvents:isa];
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100233140()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100233150(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100233160(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100233168(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  uint64_t v32 = a4;
  uint64_t v8 = sub_100156B68(a2);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(a3);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v29 - v17;
  if (!*(void *)(*(void *)v4 + 16LL)) {
    return result;
  }
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v31 = (unint64_t)(v20 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0LL;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }

    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v26 >= v31) {
      return swift_release(a1);
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v31) {
        return swift_release(a1);
      }
      unint64_t v27 = *(void *)(v30 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v31) {
          return swift_release(a1);
        }
        unint64_t v27 = *(void *)(v30 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v31) {
            return swift_release(a1);
          }
          unint64_t v27 = *(void *)(v30 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }

void *sub_1002333F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FB928);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003FB610);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v57 = (char *)&v46 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1LL << -(char)v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  v58[0] = a1;
  v58[1] = a1 + 56;
  uint64_t v49 = ~v13;
  uint64_t v50 = a1 + 56;
  v58[2] = ~v13;
  unint64_t v16 = (unint64_t)(63 - v13) >> 6;
  unint64_t v56 = (char *)(a2 + 56);
  unint64_t v46 = v16 - 1;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0LL;
  int64_t v51 = v16;
  uint64_t v52 = v6;
  uint64_t v47 = a1 + 104;
  unint64_t v48 = v16 - 6;
  uint64_t v53 = a1;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v18 = (v15 - 1) & v15;
  unint64_t v19 = __clz(__rbit64(v15)) | (v17 << 6);
  uint64_t v20 = v17;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v6,  *(void *)(a1 + 48) + *(void *)(v8 + 72) * v19,  v7);
  uint64_t v21 = 0LL;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v21, 1LL, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_10016031C(a1);
      sub_1001603DC((uint64_t)v6, &qword_1003FB928);
      return (void *)a2;
    }

    uint64_t v54 = v18;
    uint64_t v55 = v20;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v6, v7);
    uint64_t v22 = *(void *)(a2 + 40);
    uint64_t v23 = sub_1001604E8( &qword_1003FB920,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v7, v23);
    uint64_t v25 = a2;
    uint64_t v26 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v27 = v24 & ~v26;
    if (((*(void *)&v56[(v27 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v27) & 1) != 0) {
      break;
    }
    uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_15:
    v33(v57, v7);
    unint64_t v15 = v54;
    uint64_t v17 = v55;
    a2 = v25;
    uint64_t v6 = v52;
    a1 = v53;
    if (v54) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      __break(1u);
    }
    if (v20 >= v51)
    {
      uint64_t v18 = 0LL;
      uint64_t v21 = 1LL;
      uint64_t v20 = v17;
    }

    else
    {
      unint64_t v34 = *(void *)(v50 + 8 * v20);
      if (v34) {
        goto LABEL_19;
      }
      uint64_t v35 = v17 + 2;
      if (v17 + 2 >= v51)
      {
        uint64_t v18 = 0LL;
        uint64_t v21 = 1LL;
      }

      else
      {
        unint64_t v34 = *(void *)(v50 + 8 * v35);
        if (v34) {
          goto LABEL_23;
        }
        if (v17 + 3 >= v51) {
          goto LABEL_36;
        }
        unint64_t v34 = *(void *)(v50 + 8 * (v17 + 3));
        if (v34)
        {
          uint64_t v20 = v17 + 3;
          goto LABEL_19;
        }

        uint64_t v35 = v17 + 4;
        if (v17 + 4 >= v51)
        {
          uint64_t v18 = 0LL;
          uint64_t v21 = 1LL;
          uint64_t v20 = v17 + 3;
        }

        else
        {
          unint64_t v34 = *(void *)(v50 + 8 * v35);
          if (v34)
          {
LABEL_23:
            uint64_t v20 = v35;
LABEL_19:
            uint64_t v18 = (v34 - 1) & v34;
            unint64_t v19 = __clz(__rbit64(v34)) + (v20 << 6);
            goto LABEL_7;
          }

          uint64_t v20 = v17 + 5;
          if (v17 + 5 >= v51)
          {
LABEL_36:
            uint64_t v18 = 0LL;
            uint64_t v21 = 1LL;
            uint64_t v20 = v35;
          }

          else
          {
            unint64_t v34 = *(void *)(v50 + 8 * v20);
            if (v34) {
              goto LABEL_19;
            }
            uint64_t v36 = v17;
            while (v48 != v36)
            {
              unint64_t v34 = *(void *)(v47 + 8 * v36++);
              if (v34)
              {
                uint64_t v20 = v36 + 5;
                goto LABEL_19;
              }
            }

            uint64_t v18 = 0LL;
            uint64_t v21 = 1LL;
            uint64_t v20 = v46;
          }
        }
      }
    }
  }

  uint64_t v28 = ~v26;
  uint64_t v29 = *(void *)(v8 + 72);
  uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v30(v11, *(void *)(v25 + 48) + v29 * v27, v7);
    uint64_t v31 = sub_1001604E8( &qword_1003FB930,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v57, v7, v31);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
    if ((v32 & 1) != 0) {
      break;
    }
    unint64_t v27 = (v27 + 1) & v28;
    if (((*(void *)&v56[(v27 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v27) & 1) == 0) {
      goto LABEL_15;
    }
  }

  v58[3] = v55;
  v58[4] = v54;
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v33)(v57, v7);
  char v38 = *(_BYTE *)(v25 + 32);
  unsigned int v39 = v38 & 0x3F;
  unint64_t v40 = (1LL << v38) + 63;
  uint64_t v41 = v40 >> 6;
  size_t v42 = 8 * (v40 >> 6);
  if (v39 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v46 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL), v56, v42);
    uint64_t v43 = sub_1002344B8((unint64_t *)((char *)&v46 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v41, v25, v27, v58);
    swift_release(v25);
    sub_10016031C(v58[0]);
  }

  else
  {
    uint64_t v44 = (void *)swift_slowAlloc(v42, -1LL);
    memcpy(v44, v56, v42);
    uint64_t v43 = sub_1002344B8((unint64_t *)v44, v41, v25, v27, v58);
    swift_release(v25);
    sub_10016031C(v58[0]);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  return v43;
}

void *sub_1002339E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FB8C0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003FB640);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v57 = (char *)&v46 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1LL << -(char)v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  v58[0] = a1;
  v58[1] = a1 + 56;
  uint64_t v49 = ~v13;
  uint64_t v50 = a1 + 56;
  v58[2] = ~v13;
  unint64_t v16 = (unint64_t)(63 - v13) >> 6;
  unint64_t v56 = (char *)(a2 + 56);
  unint64_t v46 = v16 - 1;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0LL;
  int64_t v51 = v16;
  uint64_t v52 = v6;
  uint64_t v47 = a1 + 104;
  unint64_t v48 = v16 - 6;
  uint64_t v53 = a1;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v18 = (v15 - 1) & v15;
  unint64_t v19 = __clz(__rbit64(v15)) | (v17 << 6);
  uint64_t v20 = v17;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v6,  *(void *)(a1 + 48) + *(void *)(v8 + 72) * v19,  v7);
  uint64_t v21 = 0LL;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v21, 1LL, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_10016031C(a1);
      sub_1001603DC((uint64_t)v6, &qword_1003FB8C0);
      return (void *)a2;
    }

    uint64_t v54 = v18;
    uint64_t v55 = v20;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v6, v7);
    uint64_t v22 = *(void *)(a2 + 40);
    uint64_t v23 = sub_1001604E8( &qword_1003FB8B8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v7, v23);
    uint64_t v25 = a2;
    uint64_t v26 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v27 = v24 & ~v26;
    if (((*(void *)&v56[(v27 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v27) & 1) != 0) {
      break;
    }
    uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_15:
    v33(v57, v7);
    unint64_t v15 = v54;
    uint64_t v17 = v55;
    a2 = v25;
    uint64_t v6 = v52;
    a1 = v53;
    if (v54) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      __break(1u);
    }
    if (v20 >= v51)
    {
      uint64_t v18 = 0LL;
      uint64_t v21 = 1LL;
      uint64_t v20 = v17;
    }

    else
    {
      unint64_t v34 = *(void *)(v50 + 8 * v20);
      if (v34) {
        goto LABEL_19;
      }
      uint64_t v35 = v17 + 2;
      if (v17 + 2 >= v51)
      {
        uint64_t v18 = 0LL;
        uint64_t v21 = 1LL;
      }

      else
      {
        unint64_t v34 = *(void *)(v50 + 8 * v35);
        if (v34) {
          goto LABEL_23;
        }
        if (v17 + 3 >= v51) {
          goto LABEL_36;
        }
        unint64_t v34 = *(void *)(v50 + 8 * (v17 + 3));
        if (v34)
        {
          uint64_t v20 = v17 + 3;
          goto LABEL_19;
        }

        uint64_t v35 = v17 + 4;
        if (v17 + 4 >= v51)
        {
          uint64_t v18 = 0LL;
          uint64_t v21 = 1LL;
          uint64_t v20 = v17 + 3;
        }

        else
        {
          unint64_t v34 = *(void *)(v50 + 8 * v35);
          if (v34)
          {
LABEL_23:
            uint64_t v20 = v35;
LABEL_19:
            uint64_t v18 = (v34 - 1) & v34;
            unint64_t v19 = __clz(__rbit64(v34)) + (v20 << 6);
            goto LABEL_7;
          }

          uint64_t v20 = v17 + 5;
          if (v17 + 5 >= v51)
          {
LABEL_36:
            uint64_t v18 = 0LL;
            uint64_t v21 = 1LL;
            uint64_t v20 = v35;
          }

          else
          {
            unint64_t v34 = *(void *)(v50 + 8 * v20);
            if (v34) {
              goto LABEL_19;
            }
            uint64_t v36 = v17;
            while (v48 != v36)
            {
              unint64_t v34 = *(void *)(v47 + 8 * v36++);
              if (v34)
              {
                uint64_t v20 = v36 + 5;
                goto LABEL_19;
              }
            }

            uint64_t v18 = 0LL;
            uint64_t v21 = 1LL;
            uint64_t v20 = v46;
          }
        }
      }
    }
  }

  uint64_t v28 = ~v26;
  uint64_t v29 = *(void *)(v8 + 72);
  uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v30(v11, *(void *)(v25 + 48) + v29 * v27, v7);
    uint64_t v31 = sub_1001604E8( &qword_1003FB8C8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v57, v7, v31);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
    if ((v32 & 1) != 0) {
      break;
    }
    unint64_t v27 = (v27 + 1) & v28;
    if (((*(void *)&v56[(v27 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v27) & 1) == 0) {
      goto LABEL_15;
    }
  }

  v58[3] = v55;
  v58[4] = v54;
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v33)(v57, v7);
  char v38 = *(_BYTE *)(v25 + 32);
  unsigned int v39 = v38 & 0x3F;
  unint64_t v40 = (1LL << v38) + 63;
  uint64_t v41 = v40 >> 6;
  size_t v42 = 8 * (v40 >> 6);
  if (v39 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v46 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL), v56, v42);
    uint64_t v43 = sub_100234920((unint64_t *)((char *)&v46 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v41, v25, v27, v58);
    swift_release(v25);
    sub_10016031C(v58[0]);
  }

  else
  {
    uint64_t v44 = (void *)swift_slowAlloc(v42, -1LL);
    memcpy(v44, v56, v42);
    uint64_t v43 = sub_100234920((unint64_t *)v44, v41, v25, v27, v58);
    swift_release(v25);
    sub_10016031C(v58[0]);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  return v43;
}

uint64_t sub_100233FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100156B68(&qword_1003FB610);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  uint64_t v11 = *(void *)(*v2 + 40);
  uint64_t v12 = sub_1001604E8( &qword_1003FB920,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v12);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    uint64_t v29 = v3;
    uint64_t v30 = a2;
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v7 + 72);
    uint64_t v32 = v7;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      unint64_t v19 = v17 * v15;
      v18(v9, *(void *)(v10 + 48) + v17 * v15, v6);
      uint64_t v20 = sub_1001604E8( &qword_1003FB930,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v31, v6, v20);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        break;
      }
      unint64_t v15 = (v15 + 1) & v16;
      if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = 1LL;
        a2 = v30;
        uint64_t v7 = v32;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v22, 1LL, v6);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
    uint64_t v25 = *v23;
    uint64_t v33 = *v23;
    *uint64_t v23 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10023507C(&qword_1003FB610, &qword_1003FB938);
      uint64_t v25 = v33;
    }

    unint64_t v26 = *(void *)(v25 + 48) + v19;
    uint64_t v7 = v32;
    a2 = v30;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 32))(v30, v26, v6);
    sub_10023529C( v15,  &qword_1003FB610,  &qword_1003FB920,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    *uint64_t v23 = v33;
    swift_bridgeObjectRelease();
    uint64_t v22 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v22, 1LL, v6);
}

uint64_t sub_10023424C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100156B68(&qword_1003FB640);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  uint64_t v11 = *(void *)(*v2 + 40);
  uint64_t v12 = sub_1001604E8( &qword_1003FB8B8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v12);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    uint64_t v29 = v3;
    uint64_t v30 = a2;
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v7 + 72);
    uint64_t v32 = v7;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      unint64_t v19 = v17 * v15;
      v18(v9, *(void *)(v10 + 48) + v17 * v15, v6);
      uint64_t v20 = sub_1001604E8( &qword_1003FB8C8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v31, v6, v20);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        break;
      }
      unint64_t v15 = (v15 + 1) & v16;
      if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = 1LL;
        a2 = v30;
        uint64_t v7 = v32;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v22, 1LL, v6);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
    uint64_t v25 = *v23;
    uint64_t v33 = *v23;
    *uint64_t v23 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10023507C(&qword_1003FB640, &qword_1003FB8D0);
      uint64_t v25 = v33;
    }

    unint64_t v26 = *(void *)(v25 + 48) + v19;
    uint64_t v7 = v32;
    a2 = v30;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 32))(v30, v26, v6);
    sub_10023529C( v15,  &qword_1003FB640,  &qword_1003FB8B8,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    *uint64_t v23 = v33;
    swift_bridgeObjectRelease();
    uint64_t v22 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v22, 1LL, v6);
}

void *sub_1002344B8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v51 = a2;
  uint64_t v9 = sub_100156B68(&qword_1003FB928);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003FB610);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v59 = (char *)&v50 - v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unint64_t *)((char *)a1 + v20) & ((-1LL << a4) - 1);
  uint64_t v53 = a1;
  uint64_t v54 = v11;
  *(unint64_t *)((char *)a1 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v21;
  uint64_t v22 = v19 - 1;
  uint64_t v57 = a3 + 56;
  uint64_t v58 = a3;
  uint64_t v55 = a5;
  while (2)
  {
    uint64_t v52 = v22;
    do
    {
      while (1)
      {
        uint64_t v25 = *a5;
        uint64_t v24 = a5[1];
        uint64_t v27 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v28 = a5[4];
        uint64_t v56 = v27;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v11,  *(void *)(v25 + 48) + *(void *)(v13 + 72) * v30,  v12);
          uint64_t v31 = 0LL;
          goto LABEL_8;
        }

        int64_t v43 = v26 + 1;
        if (__OFADD__(v26, 1LL))
        {
          __break(1u);
          goto LABEL_42;
        }

        int64_t v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v24 + 8 * v43);
        if (v45) {
          goto LABEL_17;
        }
        if (v26 + 2 >= v44) {
          goto LABEL_34;
        }
        unint64_t v45 = *(void *)(v24 + 8 * (v26 + 2));
        if (v45)
        {
          int64_t v43 = v26 + 2;
LABEL_17:
          uint64_t v29 = (v45 - 1) & v45;
          unint64_t v30 = __clz(__rbit64(v45)) + (v43 << 6);
          int64_t v26 = v43;
          goto LABEL_7;
        }

        if (v26 + 3 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          v26 += 2LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v24 + 8 * (v26 + 3));
        if (v45)
        {
          int64_t v43 = v26 + 3;
          goto LABEL_17;
        }

        int64_t v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          unint64_t v45 = *(void *)(v24 + 8 * v43);
          if (v45) {
            goto LABEL_17;
          }
          int64_t v43 = v44 - 1;
          int64_t v48 = v26 + 5;
          while (v44 != v48)
          {
            unint64_t v45 = *(void *)(v24 + 8 * v48++);
            if (v45)
            {
              int64_t v43 = v48 - 1;
              goto LABEL_17;
            }
          }

void *sub_100234920(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v51 = a2;
  uint64_t v9 = sub_100156B68(&qword_1003FB8C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003FB640);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v59 = (char *)&v50 - v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unint64_t *)((char *)a1 + v20) & ((-1LL << a4) - 1);
  uint64_t v53 = a1;
  uint64_t v54 = v11;
  *(unint64_t *)((char *)a1 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v21;
  uint64_t v22 = v19 - 1;
  uint64_t v57 = a3 + 56;
  uint64_t v58 = a3;
  uint64_t v55 = a5;
  while (2)
  {
    uint64_t v52 = v22;
    do
    {
      while (1)
      {
        uint64_t v25 = *a5;
        uint64_t v24 = a5[1];
        uint64_t v27 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v28 = a5[4];
        uint64_t v56 = v27;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v11,  *(void *)(v25 + 48) + *(void *)(v13 + 72) * v30,  v12);
          uint64_t v31 = 0LL;
          goto LABEL_8;
        }

        int64_t v43 = v26 + 1;
        if (__OFADD__(v26, 1LL))
        {
          __break(1u);
          goto LABEL_42;
        }

        int64_t v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v24 + 8 * v43);
        if (v45) {
          goto LABEL_17;
        }
        if (v26 + 2 >= v44) {
          goto LABEL_34;
        }
        unint64_t v45 = *(void *)(v24 + 8 * (v26 + 2));
        if (v45)
        {
          int64_t v43 = v26 + 2;
LABEL_17:
          uint64_t v29 = (v45 - 1) & v45;
          unint64_t v30 = __clz(__rbit64(v45)) + (v43 << 6);
          int64_t v26 = v43;
          goto LABEL_7;
        }

        if (v26 + 3 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          v26 += 2LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v24 + 8 * (v26 + 3));
        if (v45)
        {
          int64_t v43 = v26 + 3;
          goto LABEL_17;
        }

        int64_t v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          unint64_t v45 = *(void *)(v24 + 8 * v43);
          if (v45) {
            goto LABEL_17;
          }
          int64_t v43 = v44 - 1;
          int64_t v48 = v26 + 5;
          while (v44 != v48)
          {
            unint64_t v45 = *(void *)(v24 + 8 * v48++);
            if (v45)
            {
              int64_t v43 = v48 - 1;
              goto LABEL_17;
            }
          }

uint64_t sub_100234D88( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  int64_t v43 = a7;
  uint64_t v44 = a8;
  char v42 = a5;
  uint64_t v13 = sub_100156B68(a5);
  uint64_t v45 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100156B68(a6);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v16 = result;
  unint64_t v40 = a1;
  uint64_t v41 = a2;
  if (a2 < 1) {
    unint64_t v18 = 0LL;
  }
  else {
    unint64_t v18 = *a1;
  }
  uint64_t v19 = 0LL;
  uint64_t v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v19 << 6);
    }

    else
    {
      uint64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_40;
      }
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }

      unint64_t v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        uint64_t v19 = v23 + 1;
        if (v23 + 1 >= v41) {
          goto LABEL_37;
        }
        unint64_t v24 = v40[v19];
        if (!v24)
        {
          uint64_t v19 = v23 + 2;
          if (v23 + 2 >= v41) {
            goto LABEL_37;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            uint64_t v25 = v23 + 3;
            if (v25 >= v41) {
              goto LABEL_37;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_41;
                }
                if (v19 >= v41) {
                  goto LABEL_37;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v19 = v25;
          }
        }
      }

void *sub_10023507C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = sub_100156B68(a1);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release(v9);
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }

  uint64_t v28 = v4;
  uint64_t result = (void *)(v10 + 56);
  uint64_t v13 = v9 + 56;
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  int64_t v16 = 0LL;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = *(void *)(v9 + 16);
  uint64_t v17 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v9 + 56);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v24 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v16);
      if (!v25)
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v16);
        if (!v25) {
          break;
        }
      }
    }

uint64_t sub_10023529C(int64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v6 = sub_100156B68(a2);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v4;
  uint64_t v11 = *v4 + 56;
  uint64_t v12 = -1LL << *(_BYTE *)(*v4 + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1LL << v13) & *(void *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    char v35 = v4;
    uint64_t v14 = ~v12;
    swift_retain(v10);
    uint64_t v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1LL << v13)) != 0)
    {
      unint64_t v37 = (v15 + 1) & v14;
      uint64_t v16 = *(void *)(v41 + 72);
      unint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        uint64_t v17 = v11;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v13;
        v36(v9, *(void *)(v10 + 48) + v16 * v13, v6);
        uint64_t v20 = *(void *)(v10 + 40);
        uint64_t v21 = sub_1001604E8(v39, v38, v40);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v6, v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
        unint64_t v23 = v22 & v14;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            uint64_t v26 = *(void *)(v10 + 48);
            uint64_t v16 = v18;
            int64_t v27 = v18 * a1;
            unint64_t v28 = v26 + v18 * a1;
            uint64_t v29 = v26 + v19;
            if (v18 * a1 < v19 || v28 >= v29 + v18)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1LL, v6);
              a1 = v13;
            }

            else
            {
              a1 = v13;
              if (v27 != v19)
              {
                swift_arrayInitWithTakeBackToFront(v28);
                a1 = v13;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }

        uint64_t v16 = v18;
LABEL_5:
        unint64_t v13 = (v13 + 1) & v14;
        uint64_t v11 = v17;
      }

      while (((*(void *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
    }

    *(void *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v10);
    uint64_t v4 = v35;
  }

  else
  {
    *(void *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v30 = *v4;
  uint64_t v31 = *(void *)(*v4 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }

  return result;
}

uint64_t sub_100235528()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10023554C()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB610);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

char *sub_1002355FC(int a1)
{
  uint64_t v3 = *(void *)(sub_100156B68(&qword_1003FB610) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100231264( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void **)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100235670()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB610);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

void *sub_100235714()
{
  uint64_t v1 = *(void *)(sub_100156B68(&qword_1003FB610) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 41LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100231E8C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(unsigned __int8 *)(v0 + 40),  v0 + v2,  *(void **)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100235770()
{
  return sub_100235D34(&qword_1003FB610);
}

uint64_t sub_10023577C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1003FB7AC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100160A04;
  return sub_100232210();
}

uint64_t sub_1002357E4()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB610);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10023585C()
{
  uint64_t v2 = *(void *)(sub_100156B68(&qword_1003FB610) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v6 = (void *)swift_task_alloc(dword_1003FB7BC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_100160A04;
  v6[2] = v4;
  v6[3] = v5;
  return swift_task_switch(sub_1002320B8, 0LL, 0LL);
}

uint64_t sub_1002358EC()
{
  return sub_100235E04(&qword_1003FB610);
}

uint64_t sub_1002358F8()
{
  uint64_t v2 = *(void *)(sub_100156B68(&qword_1003FB610) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1003FB7D4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_10015FD10;
  return sub_10023182C((uint64_t)v10, v11, v12, v4, v5, v6, v8, v9);
}

uint64_t sub_1002359AC()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB640);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

void sub_100235A2C()
{
  uint64_t v1 = *(void *)(sub_100156B68(&qword_1003FB640) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10022EFC0(v0 + v2, *(char **)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100235A7C()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB640);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;

  swift_unknownObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100235B08(int a1)
{
  uint64_t v3 = *(void *)(sub_100156B68(&qword_1003FB640) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10022F7BC( a1,  *(char **)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100235B60()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB640);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 16;

  swift_unknownObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100235BE8()
{
  uint64_t v1 = *(void *)(sub_100156B68(&qword_1003FB640) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10022FA60( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + v2,  *(_BYTE *)(v0 + v2 + *(void *)(v1 + 64)),  *(void *)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFF8LL) + v0 + 8));
}

uint64_t sub_100235C34()
{
  return sub_100235D34(&qword_1003FB640);
}

uint64_t sub_100235C40()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1003FB7FC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100160A04;
  return sub_100230790();
}

uint64_t sub_100235CA8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

unint64_t sub_100235CB8()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinResponseApprovedKey);
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  return sub_10016995C(inited);
}

uint64_t sub_100235D28()
{
  return sub_100235D34(&qword_1003FB640);
}

uint64_t sub_100235D34(uint64_t *a1)
{
  uint64_t v2 = sub_100156B68(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100235D90()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1003FB80C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100160A04;
  return sub_100230734();
}

uint64_t sub_100235DF8()
{
  return sub_100235E04(&qword_1003FB640);
}

uint64_t sub_100235E04(uint64_t *a1)
{
  uint64_t v2 = sub_100156B68(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 48) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v1 + 16));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(void *)(v1 + v7 + 8));
  return swift_deallocObject(v1, ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v6);
}

uint64_t sub_100235EA4()
{
  uint64_t v2 = *(void *)(sub_100156B68(&qword_1003FB640) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = v0 + v3;
  unint64_t v7 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1003FB81C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100160A04;
  return sub_10022FFF4((uint64_t)v10, v11, v12, v4, v5, v6, v8, v9);
}

uint64_t sub_100235F58()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100235F94()
{
  uint64_t v2 = swift_task_alloc(dword_1003FB834);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100160A04;
  *(_OWORD *)(v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v3;
  *(_OWORD *)(v2 + 96) = v4;
  return swift_task_switch(sub_10022E420, 0LL, 0LL);
}

uint64_t sub_100235FF4()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100236038()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc(dword_1003FB84C);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  __int128 v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100160A04;
  *(void *)(v3 + 128) = v2;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 112) = v5;
  return swift_task_switch(sub_10022D7C8, 0LL, 0LL);
}

uint64_t sub_1002360A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002360C4(uint64_t a1, uint64_t a2)
{
}

void sub_1002360E4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100236104()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100236130()
{
}

uint64_t sub_10023613C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100236178()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1003FB864);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  __int128 v5 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100160A04;
  *(_OWORD *)(v3 + 104) = v5;
  *(void *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v4;
  return swift_task_switch(sub_10022C820, 0LL, 0LL);
}

uint64_t sub_1002361E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10023620C()
{
}

uint64_t sub_100236214()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100236258()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc(dword_1003FB874);
  __int128 v5 = *(_OWORD *)(v0 + 32);
  __int128 v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100160A04;
  *(void *)(v4 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(void *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v5;
  return swift_task_switch(sub_10022AAD8, 0LL, 0LL);
}

uint64_t sub_1002362D8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100236314()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  unint64_t v7 = (void *)swift_task_alloc(dword_1003FB884);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *unint64_t v7 = v1;
  v7[1] = sub_10015FD10;
  return sub_10022B648((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

uint64_t sub_100236388(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  unint64_t v13 = (void *)swift_allocObject(&unk_1003AA710, 40LL, 7LL);
  v13[2] = a1;
  void v13[3] = v2;
  v13[4] = ObjectType;
  aBlock[4] = sub_1002365BC;
  uint64_t v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003AA728;
  uint64_t v14 = _Block_copy(aBlock);
  swift_unknownObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v17 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v22);
}

uint64_t sub_100236590()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1002365BC()
{
}

uint64_t sub_1002365C8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1002365FC()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003FB8EC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return sub_100229498((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10023665C()
{
  uint64_t v1 = sub_100156B68(&qword_1003FB610);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1002366D4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100156B68(&qword_1003FB610) - 8) + 80LL);
  sub_1002307EC(v0 + ((v1 + 24) & ~v1), v2);
}

uint64_t sub_100236794()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  _DWORD *v2 = 0;
  return v1;
}

uint64_t sub_1002367D8()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_100236804(void (*a1)(void))
{
}

void sub_100236864()
{
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted4Lock);
}

const char *sub_10023688C()
{
  return "none";
}

const char *sub_100236898()
{
  return "lzfse";
}

const char *sub_1002368A4()
{
  return "sender";
}

const char *sub_1002368B0()
{
  return "type";
}

const char *sub_1002368BC()
{
  return "destination";
}

const char *sub_1002368C8()
{
  return "payload";
}

const char *sub_1002368D4()
{
  return "timestamp";
}

void *sub_1002368E0()
{
  return &unk_1003AA7C8;
}

void *sub_1002368EC()
{
  return &unk_10034ED28;
}

const char *sub_1002368F8()
{
  return "remoteControl";
}

void *sub_100236904()
{
  return &unk_1003AA7D8;
}

void *sub_100236910()
{
  return &unk_1003AA7E8;
}

const char *sub_10023691C()
{
  return "sessionEnd";
}

BOOL sub_100236928(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_10023693C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100238C8C(*a1);
  *a2 = result;
  return result;
}

void sub_100236964(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100236970(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002369B0
                                                            + 4 * asc_10034ECA0[a1]))( 0x694472656461656CLL,  0xEF797265766F6373LL);
}

uint64_t sub_1002369B0()
{
  return 0x797469746E656469LL;
}

unint64_t sub_1002369D4()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100236ABC()
{
  return sub_100236970(*v0);
}

uint64_t sub_100236AC4(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionFastSyncMessageProtobuf);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];

  if (!v6)
  {
    sub_1001608B8(a1, a2);
    return 11LL;
  }

  unsigned int v7 = [v6 messageType];
  if (v7 >= 0xB)
  {
    sub_1001608B8(a1, a2);

    return 11LL;
  }

  LODWORD(v8) = v7;
  uint64_t result = (uint64_t)[v6 payload];
  if (result)
  {
    uint64_t v10 = (void *)result;
    uint64_t v8 = v8;
    static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    sub_1001608B8(a1, a2);

    return v8;
  }

  __break(1u);
  return result;
}

id sub_100236BDC(unsigned __int8 a1)
{
  id result = [objc_allocWithZone(_MRGroupSessionFastSyncMessageProtobuf) init];
  if (result)
  {
    uint64_t v3 = result;
    [result setMessageType:a1];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v3 setPayload:isa];

    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100236C68(unsigned __int8 a1)
{
  id v1 = sub_100236BDC(a1);
  id v2 = [v1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    __break(1u);
  }

id sub_100236CD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10016083C( 0LL,  (unint64_t *)&unk_1003FBBD0,  &OBJC_CLASS____MRGroupSessionLeaderDiscoveryMessageProtobuf_ptr);
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [v7 initWithData:isa];

  if (!v9)
  {
    uint64_t v12 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
    goto LABEL_5;
  }

  id result = [v9 signature];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    unint64_t v14 = v13;

LABEL_5:
    id result = (id)sub_1001608B8(a1, a2);
    *a3 = v12;
    a3[1] = v14;
    return result;
  }

  __break(1u);
  return result;
}

void sub_100236DB4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10016083C(0LL, &qword_1003FBBB0, &OBJC_CLASS____MRGroupSessionIdentityShareReplyMessageProtobuf_ptr);
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [v7 initWithData:isa];

  if (!v9)
  {
    sub_1001608B8(a1, a2);
    *(_OWORD *)(a3 + 43) = 0u;
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }

  id v10 = [v9 localParticipant];
  if (!v10)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v11 = v10;
  uint64_t v37 = a1;
  id v12 = [v10 identifier];
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  unint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v35 = v15;
  uint64_t v36 = v14;

  id v16 = [v11 identity];
  id v17 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v16];

  if (!v17)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  unint64_t v34 = a2;
  unsigned __int8 v18 = [v11 connected];
  unsigned __int8 v33 = [v11 guest];
  unsigned __int8 v32 = [v11 hidden];

  id v19 = [v9 leaderParticipant];
  if (!v19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v20 = v19;
  unsigned __int8 v31 = v18;
  id v21 = [v19 identifier];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;

    id v26 = [v20 identity];
    id v27 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v26];

    if (v27)
    {
      unsigned __int8 v28 = [v20 connected];
      unsigned __int8 v29 = [v20 guest];
      unsigned __int8 v30 = [v20 hidden];

      sub_1001608B8(v37, v34);
      *(void *)a3 = v36;
      *(void *)(a3 + 8) = v35;
      *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
      *(_BYTE *)(a3 + 24) = v31;
      *(_BYTE *)(a3 + 25) = v33;
      *(_BYTE *)(a3 + 26) = v32;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v25;
      *(void *)(a3 + 48) = v27;
      *(_BYTE *)(a3 + 56) = v28;
      *(_BYTE *)(a3 + 57) = v29;
      *(_BYTE *)(a3 + 58) = v30;
      return;
    }

    goto LABEL_15;
  }

uint64_t sub_100237070@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a4, a3, &unk_10037FDDC, &unk_10037FDE4);
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(AssociatedTypeWitness));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v13 = [v11 initWithData:isa];

  if (v13)
  {
    (*(void (**)(id, uint64_t, uint64_t))(a4 + 24))(v13, a3, a4);
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  sub_1001608B8(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(a5, v14, 1LL, a3);
}

void sub_100237150(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = [objc_allocWithZone(_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (v4)
  {
    uint64_t v5 = v4;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setParticipantIdentifier:v6];

    [v5 setApproved:a3 & 1];
    id v7 = [v5 data];

    if (v7)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_100237220()
{
  id v1 = [objc_allocWithZone(_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (v1)
  {
    id v2 = v1;
    if (*(_BYTE *)(v0 + 25)) {
      int v3 = 256;
    }
    else {
      int v3 = 0;
    }
    int v4 = v3 | *(unsigned __int8 *)(v0 + 24);
    if (*(_BYTE *)(v0 + 26)) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0;
    }
    id v6 = sub_1002378F0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v4 | v5);
    [v2 setLocalParticipant:v6];

    if (*(_BYTE *)(v0 + 57)) {
      int v7 = 256;
    }
    else {
      int v7 = 0;
    }
    int v8 = v7 | *(unsigned __int8 *)(v0 + 56);
    if (*(_BYTE *)(v0 + 58)) {
      int v9 = 0x10000;
    }
    else {
      int v9 = 0;
    }
    id v10 = sub_1002378F0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), v8 | v9);
    [v2 setLeaderParticipant:v10];

    id v11 = [v2 data];
    if (v11)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_100237350(uint64_t a1, NSString a2)
{
  id v3 = [objc_allocWithZone(_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (v3)
  {
    int v4 = v3;
    if (a2) {
      a2 = String._bridgeToObjectiveC()();
    }
    [v4 setErrorMessage:a2];

    id v5 = [v4 data];
    if (v5)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_100237410(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 signature];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;

    *a2 = v6;
    a2[1] = v8;
  }

  else
  {
    __break(1u);
  }

id sub_100237478(uint64_t a1, uint64_t a2)
{
  return sub_100237D30( a1,  a2,  (Class *)&OBJC_CLASS____MRGroupSessionLeaderDiscoveryMessageProtobuf_ptr,  (uint64_t (*)(uint64_t, uint64_t))&Data._bridgeToObjectiveC(),  (SEL *)&selRef_setSignature_);
}

id sub_100237494(uint64_t a1, uint64_t a2)
{
  return sub_100237DC8( a1,  a2,  (Class *)&OBJC_CLASS____MRGroupSessionLeaderDiscoveryMessageProtobuf_ptr,  (uint64_t (*)(uint64_t, uint64_t))&Data._bridgeToObjectiveC(),  (SEL *)&selRef_setSignature_);
}

void sub_1002374B0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002374CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = v6;
  uint64_t result = sub_1001608B8(a1, a2);
  *a3 = v7;
  return result;
}

void sub_100237510(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = [a1 identity];
  id v5 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v4];

  if (v5)
  {

    *a2 = v5;
  }

  else
  {
    __break(1u);
  }

id sub_100237584()
{
  id v1 = *v0;
  id result = [objc_allocWithZone(_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (result)
  {
    id v3 = result;
    id v4 = [v1 protobuf];
    [v3 setIdentity:v4];

    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1002375FC(void *a1)
{
  id result = [objc_allocWithZone(_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (result)
  {
    id v3 = result;
    id v4 = [a1 protobuf];
    [v3 setIdentity:v4];

    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100237674()
{
  id v1 = *v0;
  id v2 = [objc_allocWithZone(_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v1 protobuf];
    [v3 setIdentity:v4];

    id v5 = [v3 data];
    if (v5)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

  ;
}

uint64_t sub_100237758@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10016083C(0LL, &qword_1003FBA10, &OBJC_CLASS____MRGroupSessionParticipantProtobuf_ptr);
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [v7 initWithData:isa];

  if (v9)
  {
    sub_100238F1C(v9);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    int v17 = v16;

    uint64_t result = sub_1001608B8(a1, a2);
    int v19 = v17 & 0x10101;
  }

  else
  {
    uint64_t result = sub_1001608B8(a1, a2);
    uint64_t v11 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
    int v19 = 0;
  }

  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(_WORD *)(a3 + 24) = v19;
  *(_BYTE *)(a3 + 26) = BYTE2(v19);
  return result;
}

void sub_100237850(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;

  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v11 & 1;
  *(_BYTE *)(a2 + 25) = BYTE1(v11) & 1;
  *(_BYTE *)(a2 + 26) = BYTE2(v11) & 1;
}

id sub_1002378B8()
{
  if (*(_BYTE *)(v0 + 25)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 26)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return sub_1002378F0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v2 | v3);
}

id sub_1002378F0(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id result = [objc_allocWithZone(_MRGroupSessionParticipantProtobuf) init];
  if (result)
  {
    uint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 setIdentifier:v8];

    id v9 = [a3 protobuf];
    [v7 setIdentity:v9];

    [v7 setConnected:a4 & 1];
    [v7 setGuest:(a4 >> 8) & 1];
    [v7 setHidden:HIWORD(a4) & 1];
    return v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1002379FC()
{
  if (*(_BYTE *)(v0 + 25)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 26)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  id v4 = sub_1002378F0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v2 | v3);
  id v5 = [v4 data];

  if (v5)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100237AA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = sub_100238D70();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t result = sub_1001608B8(a1, a2);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  return result;
}

void sub_100237AF8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 participantIdentifier];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;

    LOBYTE(v5) = [a1 approved];
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = (_BYTE)v5;
  }

  else
  {
    __break(1u);
  }

id sub_100237B78()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  id result = [objc_allocWithZone(_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (result)
  {
    int v3 = result;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setParticipantIdentifier:v4];

    [v3 setApproved:v1];
    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100237C04(uint64_t a1, uint64_t a2, char a3)
{
  id result = [objc_allocWithZone(_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (result)
  {
    id v5 = result;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setParticipantIdentifier:v6];

    [v5 setApproved:a3 & 1];
    return v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100237C94()
{
}

uint64_t sub_100237CA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100238AC4(a1, a2, (uint64_t (*)(void))sub_100238E54, a3);
}

void sub_100237CAC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 participantIdentifier];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;

    *a2 = v6;
    a2[1] = v8;
  }

  else
  {
    __break(1u);
  }

id sub_100237D14(uint64_t a1, uint64_t a2)
{
  return sub_100237D30( a1,  a2,  (Class *)&OBJC_CLASS____MRGroupSessionRemoveRequestProtobuf_ptr,  (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC(),  (SEL *)&selRef_setParticipantIdentifier_);
}

id sub_100237D30(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v8 = *v5;
  uint64_t v9 = v5[1];
  id result = [objc_allocWithZone(*a3) init];
  if (result)
  {
    int v11 = result;
    uint64_t v12 = (void *)a4(v8, v9);
    objc_msgSend(v11, *a5, v12);

    return v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100237DAC(uint64_t a1, uint64_t a2)
{
  return sub_100237DC8( a1,  a2,  (Class *)&OBJC_CLASS____MRGroupSessionRemoveRequestProtobuf_ptr,  (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC(),  (SEL *)&selRef_setParticipantIdentifier_);
}

id sub_100237DC8(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  id result = [objc_allocWithZone(*a3) init];
  if (result)
  {
    char v10 = result;
    int v11 = (void *)a4(a1, a2);
    objc_msgSend(v10, *a5, v11);

    return v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100237E48(uint64_t a1, uint64_t a2)
{
}

void sub_100237E64(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  id v10 = [objc_allocWithZone(*a3) init];
  if (v10)
  {
    int v11 = v10;
    uint64_t v12 = (void *)a4(v9, v8);
    objc_msgSend(v11, *a5, v12);

    id v13 = [v11 data];
    if (v13)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100237F20@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_BYTE *)(a9 + 25) = BYTE1(a4) & 1;
  *(_BYTE *)(a9 + 26) = BYTE2(a4) & 1;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a6;
  *(void *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  *(_BYTE *)(a9 + 57) = BYTE1(a8) & 1;
  *(_BYTE *)(a9 + 58) = BYTE2(a8) & 1;
  return result;
}

void sub_100237F68(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 localParticipant];
  if (v4)
  {
    id v5 = v4;
    sub_100238F1C(v4);
    uint64_t v23 = v6;
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    int v12 = v11;

    id v13 = [a1 leaderParticipant];
    if (v13)
    {
      uint64_t v14 = v13;
      sub_100238F1C(v13);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      int v22 = v21;

      *(void *)a2 = v23;
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
      *(_BYTE *)(a2 + 24) = v12 & 1;
      *(_BYTE *)(a2 + 25) = BYTE1(v12) & 1;
      *(_BYTE *)(a2 + 26) = BYTE2(v12) & 1;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v18;
      *(void *)(a2 + 48) = v20;
      *(_BYTE *)(a2 + 56) = v22 & 1;
      *(_BYTE *)(a2 + 57) = BYTE1(v22) & 1;
      *(_BYTE *)(a2 + 58) = BYTE2(v22) & 1;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

id sub_10023806C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(void **)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 25);
  int v6 = *(unsigned __int8 *)(v0 + 26);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 32);
  uint64_t v20 = *(void **)(v0 + 48);
  int v19 = *(unsigned __int8 *)(v0 + 56);
  int v7 = *(unsigned __int8 *)(v0 + 57);
  int v8 = *(unsigned __int8 *)(v0 + 58);
  id result = [objc_allocWithZone(_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v10 = result;
    if (v5) {
      int v11 = 256;
    }
    else {
      int v11 = 0;
    }
    int v12 = v11 | v4;
    if (v6) {
      int v13 = 0x10000;
    }
    else {
      int v13 = 0;
    }
    id v14 = sub_1002378F0(v1, v2, v3, v12 | v13);
    [v10 setLocalParticipant:v14];

    if (v7) {
      int v15 = 256;
    }
    else {
      int v15 = 0;
    }
    int v16 = v15 | v19;
    if (v8) {
      int v17 = 0x10000;
    }
    else {
      int v17 = 0;
    }
    id v18 = sub_1002378F0(v22, v21, v20, v16 | v17);
    [v10 setLeaderParticipant:v18];

    return v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10023819C()
{
  id result = [objc_allocWithZone(_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v2 = result;
    if (*(_BYTE *)(v0 + 25)) {
      int v3 = 256;
    }
    else {
      int v3 = 0;
    }
    int v4 = v3 | *(unsigned __int8 *)(v0 + 24);
    if (*(_BYTE *)(v0 + 26)) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0;
    }
    id v6 = sub_1002378F0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v4 | v5);
    [v2 setLocalParticipant:v6];

    if (*(_BYTE *)(v0 + 57)) {
      int v7 = 256;
    }
    else {
      int v7 = 0;
    }
    int v8 = v7 | *(unsigned __int8 *)(v0 + 56);
    if (*(_BYTE *)(v0 + 58)) {
      int v9 = 0x10000;
    }
    else {
      int v9 = 0;
    }
    id v10 = sub_1002378F0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), v8 | v9);
    [v2 setLeaderParticipant:v10];

    return v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10023828C()
{
}

uint64_t sub_1002382CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_10016083C(0LL, &qword_1003FBBA8, &OBJC_CLASS____MRGroupSessionMemberSyncMessageProtobuf_ptr);
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  int v9 = (void **)[v7 initWithData:isa];

  if (v9)
  {
    sub_1002390F8(v9);
    int v9 = v10;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t result = sub_1001608B8(a1, a2);
  }

  else
  {
    uint64_t result = sub_1001608B8(a1, a2);
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  *a3 = v9;
  a3[1] = v12;
  a3[2] = v14;
  return result;
}

void sub_100238394(void **a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
}

id sub_1002383BC()
{
  return sub_1002383C8(*v0, v0[1], v0[2]);
}

id sub_1002383C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [objc_allocWithZone(_MRGroupSessionMemberSyncMessageProtobuf) init];
  if (!result)
  {
LABEL_40:
    __break(1u);
    return result;
  }

  id v7 = result;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v57 = a3;
  id v58 = result;
  uint64_t v56 = a2;
  if (v8)
  {
    uint64_t v61 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10016F76C(0, v8, 0);
    int v9 = _swiftEmptyArrayStorage;
    id v10 = (unsigned __int8 *)(a1 + 58);
    while (1)
    {
      uint64_t v11 = *(void **)(v10 - 10);
      uint64_t v12 = *(v10 - 2);
      uint64_t v13 = *(v10 - 1);
      uint64_t v14 = *v10;
      id v15 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionParticipantProtobuf);
      swift_bridgeObjectRetain();
      id v16 = v11;
      id result = [v15 init];
      if (!result) {
        goto LABEL_37;
      }
      int v17 = result;
      NSString v18 = String._bridgeToObjectiveC()();
      [v17 setIdentifier:v18];

      id v19 = [v16 protobuf];
      [v17 setIdentity:v19];

      [v17 setConnected:v12];
      [v17 setGuest:v13];
      [v17 setHidden:v14];
      uint64_t v60 = sub_10016083C(0LL, &qword_1003FBA10, &OBJC_CLASS____MRGroupSessionParticipantProtobuf_ptr);

      swift_bridgeObjectRelease();
      *(void *)&__int128 v59 = v17;
      uint64_t v61 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_10016F76C(v20 > 1, v21 + 1, 1);
        int v9 = v61;
      }

      v10 += 32;
      __int128 v9[2] = v21 + 1;
      sub_100160944(&v59, &v9[4 * v21 + 4]);
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        a3 = v57;
        id v7 = v58;
        a2 = v56;
        break;
      }
    }
  }

  uint64_t v22 = (uint64_t)&MSVWeakLinkStringConstant_ptr;
  id v23 = objc_allocWithZone(&OBJC_CLASS___NSMutableArray);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v25 = &selRef_discoveryChannel;
  id v26 = [v23 initWithArray:isa];

  [v7 setParticipants:v26];
  int64_t v27 = *(void *)(a2 + 16);
  unsigned __int8 v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    uint64_t v61 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10016F76C(0, v27, 0);
    unsigned __int8 v29 = v61;
    unsigned __int8 v30 = (unsigned __int8 *)(a2 + 58);
    while (1)
    {
      unsigned __int8 v31 = *(void **)(v30 - 10);
      uint64_t v32 = *(v30 - 2);
      uint64_t v33 = *(v30 - 1);
      uint64_t v34 = *v30;
      id v35 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionParticipantProtobuf);
      swift_bridgeObjectRetain();
      id v36 = v31;
      id result = [v35 init];
      if (!result) {
        goto LABEL_38;
      }
      uint64_t v37 = result;
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 setIdentifier:v38];

      id v39 = [v36 protobuf];
      [v37 setIdentity:v39];

      [v37 setConnected:v32];
      [v37 setGuest:v33];
      [v37 setHidden:v34];
      uint64_t v60 = sub_10016083C(0LL, &qword_1003FBA10, &OBJC_CLASS____MRGroupSessionParticipantProtobuf_ptr);

      swift_bridgeObjectRelease();
      *(void *)&__int128 v59 = v37;
      uint64_t v61 = v29;
      unint64_t v41 = v29[2];
      unint64_t v40 = v29[3];
      if (v41 >= v40 >> 1)
      {
        sub_10016F76C(v40 > 1, v41 + 1, 1);
        unsigned __int8 v29 = v61;
      }

      v30 += 32;
      void v29[2] = v41 + 1;
      sub_100160944(&v59, &v29[4 * v41 + 4]);
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        a3 = v57;
        id v7 = v58;
        uint64_t v22 = 0x100397000LL;
        uint64_t v25 = &selRef_discoveryChannel;
        unsigned __int8 v28 = _swiftEmptyArrayStorage;
        break;
      }
    }
  }

  id v42 = objc_allocWithZone(*(Class *)(v22 + 2216));
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(v42, v25[387], v43);

  [v7 setPendingParticipants:v44];
  uint64_t v45 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (v45)
  {
    while (1)
    {
      uint64_t v61 = v28;
      id result = (id)sub_10016F76C(0, v45 & ~(v45 >> 63), 0);
      if (v45 < 0) {
        break;
      }
      uint64_t v22 = 0LL;
      uint64_t v46 = v61;
      unsigned __int8 v28 = (void *)(a3 & 0xC000000000000001LL);
      uint64_t v25 = (char **)&OBJC_CLASS____MRUserIdentityProtobuf_ptr;
      while (v45 != v22)
      {
        if (v28) {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a3);
        }
        else {
          id v47 = *(id *)(a3 + 8 * v22 + 32);
        }
        int64_t v48 = v47;
        id result = [v47 protobuf];
        if (!result) {
          goto LABEL_39;
        }
        id v49 = result;
        uint64_t v60 = sub_10016083C(0LL, &qword_1003FBA18, &OBJC_CLASS____MRUserIdentityProtobuf_ptr);

        *(void *)&__int128 v59 = v49;
        uint64_t v61 = v46;
        unint64_t v51 = v46[2];
        unint64_t v50 = v46[3];
        if (v51 >= v50 >> 1)
        {
          sub_10016F76C(v50 > 1, v51 + 1, 1);
          uint64_t v46 = v61;
        }

        ++v22;
        v46[2] = v51 + 1;
        sub_100160944(&v59, &v46[4 * v51 + 4]);
        if (v45 == v22)
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = 0x100397000LL;
          uint64_t v25 = &selRef_discoveryChannel;
          goto LABEL_35;
        }
      }

      __break(1u);
LABEL_30:
      if (a3 < 0) {
        uint64_t v52 = a3;
      }
      else {
        uint64_t v52 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v52);
      if (!v45) {
        goto LABEL_34;
      }
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

void sub_100238A48()
{
  id v1 = sub_1002383C8(*v0, v0[1], v0[2]);
  id v2 = [v1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100238AB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100238AC4(a1, a2, sub_100239024, a3);
}

uint64_t sub_100238AC4@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a3();
  uint64_t v9 = v8;
  uint64_t result = sub_1001608B8(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

void sub_100238B14(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 errorMessage];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a2 = v6;
  a2[1] = v8;
}

id sub_100238B88()
{
  uint64_t v1 = *(void *)(v0 + 8);
  id result = [objc_allocWithZone(_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v3 = result;
    if (v1) {
      NSString v4 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v4 = 0LL;
    }
    [v3 setErrorMessage:v4];

    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_100238C08(uint64_t a1, NSString a2)
{
  id result = [objc_allocWithZone(_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (result)
  {
    NSString v4 = result;
    if (a2) {
      a2 = String._bridgeToObjectiveC()();
    }
    [v4 setErrorMessage:a2];

    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100238C84()
{
}

unint64_t sub_100238C8C(unint64_t result)
{
  if (result >= 0xB) {
    return 11LL;
  }
  return result;
}

void sub_100238C9C()
{
  uint64_t v0 = sub_10016083C(0LL, &qword_1003FBBC8, &OBJC_CLASS____MRGroupSessionIdentityShareMessageProtobuf_ptr);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithData:isa];

  if (v3)
  {
    id v4 = [v3 identity];
    id v5 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v4];

    if (v5) {
    else
    }
      __break(1u);
  }

id sub_100238D70()
{
  uint64_t v0 = sub_10016083C(0LL, &qword_1003FBBC0, &OBJC_CLASS____MRGroupSessionJoinResponseMessageProtobuf_ptr);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithData:isa];

  if (!v3) {
    return 0LL;
  }
  id result = [v3 participantIdentifier];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    [v3 approved];
    return (id)v6;
  }

  __break(1u);
  return result;
}

id sub_100238E54()
{
  uint64_t v0 = sub_10016083C(0LL, &qword_1003FBBB8, &OBJC_CLASS____MRGroupSessionRemoveRequestProtobuf_ptr);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithData:isa];

  if (!v3) {
    return 0LL;
  }
  id result = [v3 participantIdentifier];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (id)v6;
  }

  __break(1u);
  return result;
}

void sub_100238F1C(void *a1)
{
  id v2 = [a1 identifier];
  if (v2)
  {
    id v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

    id v4 = [a1 identity];
    id v5 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v4];

    if (v5)
    {
      [a1 connected];
      [a1 guest];
      [a1 hidden];
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100239024()
{
  uint64_t v0 = sub_10016083C(0LL, &qword_1003FBBA0, &OBJC_CLASS____MRGroupSessionErrorReplyMessageProtobuf_ptr);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithData:isa];

  if (!v3) {
    return 0LL;
  }
  id v4 = [v3 errorMessage];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }

  else
  {

    return 0LL;
  }

  return v6;
}

void sub_1002390F8(void **a1)
{
  id v2 = a1;
  id v3 = [a1 participants];
  if (!v3)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  id v4 = v3;
  uint64_t v62 = 0LL;
  uint64_t v5 = sub_10016083C(0LL, &qword_1003FBA10, &OBJC_CLASS____MRGroupSessionParticipantProtobuf_ptr);
  static Array._forceBridgeFromObjectiveC(_:result:)(v4, &v62, v5);
  uint64_t v6 = (uint64_t)v62;
  if (!v62)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  for (unint64_t i = v2; v8; unint64_t i = v2)
  {
    uint64_t v62 = _swiftEmptyArrayStorage;
    id v2 = &v62;
    sub_1001E4490(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      goto LABEL_41;
    }
    uint64_t v56 = (void *)v5;
    uint64_t v10 = 0LL;
    uint64_t v11 = v62;
    unint64_t v7 = v6 & 0xC000000000000001LL;
    while (v8 != v10)
    {
      uint64_t v12 = v11;
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v13 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v6);
      }
      else {
        uint64_t v13 = (void **)*(id *)(v6 + 8 * v10 + 32);
      }
      id v2 = v13;
      id v14 = objc_msgSend(v13, "identifier", v56);
      if (!v14) {
        goto LABEL_68;
      }
      id v15 = v14;
      uint64_t v5 = v8;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;

      id v19 = [v2 identity];
      id v20 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v19];

      if (!v20) {
        goto LABEL_69;
      }
      unsigned __int8 v60 = [v2 connected];
      unsigned __int8 v58 = [v2 guest];
      unsigned __int8 v21 = [v2 hidden];

      uint64_t v11 = v12;
      uint64_t v62 = v12;
      unint64_t v23 = v12[2];
      unint64_t v22 = v12[3];
      id v1 = (void *)(v23 + 1);
      if (v23 >= v22 >> 1)
      {
        id v2 = &v62;
        sub_1001E4490(v22 > 1, v23 + 1, 1);
        uint64_t v11 = v62;
      }

      ++v10;
      v11[2] = v1;
      unint64_t v7 = (unint64_t)&v11[4 * v23];
      *(void *)(v7 + 32) = v16;
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v18;
      *(void *)(v7 + 48) = v20;
      *(_BYTE *)(v7 + 56) = v60;
      *(_BYTE *)(v7 + 57) = v58;
      *(_BYTE *)(v7 + 58) = v21;
      uint64_t v8 = v5;
      if (v5 == v10)
      {
        swift_bridgeObjectRelease();
        id v2 = i;
        uint64_t v5 = (uint64_t)v56;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (v6 >= 0) {
      unint64_t v24 = v7;
    }
    else {
      unint64_t v24 = v6;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
LABEL_23:
  id v25 = objc_msgSend(v2, "pendingParticipants", v56);
  id v1 = _swiftEmptyArrayStorage;
  if (!v25) {
    goto LABEL_47;
  }
  uint64_t v62 = 0LL;
  uint64_t v6 = (uint64_t)v25;
  static Array._forceBridgeFromObjectiveC(_:result:)(v6, &v62, v5);
  uint64_t v8 = (uint64_t)v62;
  if (v62)
  {

    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v26 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v26)
    {
      while (1)
      {
        uint64_t v62 = v1;
        sub_1001E4490(0, v26 & ~(v26 >> 63), 0);
        if (v26 < 0) {
          break;
        }
        uint64_t v56 = (void *)v6;
        uint64_t v27 = 0LL;
        unsigned __int8 v28 = v62;
        unint64_t v9 = v8 & 0xC000000000000001LL;
        while (v26 != v27)
        {
          unsigned __int8 v29 = v28;
          if ((v8 & 0xC000000000000001LL) != 0) {
            id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v8);
          }
          else {
            id v30 = *(id *)(v8 + 8 * v27 + 32);
          }
          unsigned __int8 v31 = v30;
          id v32 = objc_msgSend(v30, "identifier", v56);
          if (!v32) {
            goto LABEL_71;
          }
          uint64_t v33 = v32;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
          uint64_t v36 = v35;

          id v37 = [v31 identity];
          id v38 = [objc_allocWithZone(MRUserIdentity) initWithProtobuf:v37];

          if (!v38) {
            goto LABEL_72;
          }
          unsigned __int8 v61 = [v31 connected];
          unsigned __int8 v59 = [v31 guest];
          uint64_t v6 = (uint64_t)[v31 hidden];

          unsigned __int8 v28 = v29;
          uint64_t v62 = v29;
          unint64_t v39 = v29[2];
          unint64_t v40 = v28[3];
          id v1 = (void *)(v39 + 1);
          if (v39 >= v40 >> 1)
          {
            sub_1001E4490(v40 > 1, v39 + 1, 1);
            unsigned __int8 v28 = v62;
          }

          ++v27;
          uint64_t v28[2] = v1;
          unint64_t v9 = (unint64_t)&v28[4 * v39];
          *(void *)(v9 + 32) = v34;
          *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v36;
          *(void *)(v9 + 48) = v38;
          *(_BYTE *)(v9 + 56) = v61;
          *(_BYTE *)(v9 + 57) = v59;
          *(_BYTE *)(v9 + 58) = v6;
          if (v26 == v27)
          {
            swift_bridgeObjectRelease();

            id v2 = i;
            id v1 = _swiftEmptyArrayStorage;
            goto LABEL_47;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        if (v8 >= 0) {
          unint64_t v41 = v9;
        }
        else {
          unint64_t v41 = v8;
        }
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v41);
        swift_bridgeObjectRelease();
        if (!v26) {
          goto LABEL_46;
        }
      }

ValueMetadata *type metadata accessor for GroupSessionPushMessageCompressionType()
{
  return &type metadata for GroupSessionPushMessageCompressionType;
}

ValueMetadata *type metadata accessor for GroupSessionPushMessageKey()
{
  return &type metadata for GroupSessionPushMessageKey;
}

ValueMetadata *type metadata accessor for GroupSessionPushMessageType()
{
  return &type metadata for GroupSessionPushMessageType;
}

uint64_t getEnumTagSinglePayload for FastSyncMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for FastSyncMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_1002398AC + 4 * byte_10034ECB0[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1002398E0 + 4 * byte_10034ECAB[v4]))();
}

uint64_t sub_1002398E0(uint64_t result)
{
  *(_BYTE *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1002398E8(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (a2) {
    JUMPOUT(0x1002398F0LL);
  }
  return result;
}

uint64_t sub_1002398FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100239904LL);
  }
  *(_BYTE *)id result = a2 + 10;
  return result;
}

uint64_t sub_100239908(uint64_t result)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_100239910(uint64_t result)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FastSyncMessageType()
{
  return &type metadata for FastSyncMessageType;
}

uint64_t destroy for FastSyncMessage(uint64_t a1)
{
  return sub_1001608B8(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s12mediaremoted15FastSyncMessageVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100160874(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for FastSyncMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100160874(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  sub_1001608B8(v5, v6);
  return a1;
}

uint64_t assignWithTake for FastSyncMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1001608B8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncMessage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF6 && a1[24]) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xB;
  int v5 = v3 - 11;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FastSyncMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)id result = a2 - 246;
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)id result = a2 + 10;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FastSyncMessage()
{
  return &type metadata for FastSyncMessage;
}

uint64_t *initializeBufferWithCopyOfBuffer for LeaderDiscoveryMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100160874(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for LeaderDiscoveryMessage(uint64_t a1)
{
  return sub_1001608B8(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for LeaderDiscoveryMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100160874(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1001608B8(v5, v6);
  return a1;
}

__n128 initializeWithTake for HostedRoutingSourceSession.Source(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for LeaderDiscoveryMessage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1001608B8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LeaderDiscoveryMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LeaderDiscoveryMessage( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LeaderDiscoveryMessage()
{
  return &type metadata for LeaderDiscoveryMessage;
}

ValueMetadata *type metadata accessor for IdentityShareMessage()
{
  return &type metadata for IdentityShareMessage;
}

void destroy for GroupSessionParticipant(uint64_t a1)
{
}

uint64_t initializeWithCopy for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = *(void **)(a2 + 16);
  BOOL v7 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  id v8 = v6;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

__n128 initializeWithTake for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionParticipant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 27)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionParticipant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 27) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 27) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GroupSessionParticipant()
{
  return &type metadata for GroupSessionParticipant;
}

uint64_t sub_100239E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for JoinResponseMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for JoinResponseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinResponseMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JoinResponseMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for JoinResponseMessage()
{
  return &type metadata for JoinResponseMessage;
}

uint64_t getEnumTagSinglePayload for RemoveRequestMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoveRequestMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RemoveRequestMessage()
{
  return &type metadata for RemoveRequestMessage;
}

void destroy for IdentityShareReplyMessage(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

uint64_t initializeWithCopy for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v5;
  unint64_t v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  swift_bridgeObjectRetain(v3);
  id v7 = v4;
  swift_bridgeObjectRetain(v5);
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = *(void **)(a2 + 16);
  id v7 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  id v8 = v6;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void **)(a2 + 48);
  uint64_t v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v11;
  id v13 = v11;

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  return a1;
}

__n128 initializeWithTake for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  __int128 v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = *(_OWORD *)(a2 + 40);

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityShareReplyMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 59)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityShareReplyMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 59) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 59) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IdentityShareReplyMessage()
{
  return &type metadata for IdentityShareReplyMessage;
}

uint64_t destroy for MemberSyncMessage(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s12mediaremoted17MemberSyncMessageVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for MemberSyncMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for MemberSyncMessage(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for MemberSyncMessage()
{
  return &type metadata for MemberSyncMessage;
}

void *initializeBufferWithCopyOfBuffer for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for HostedRoutingSourceSession.Source(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorReplyMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorReplyMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ErrorReplyMessage()
{
  return &type metadata for ErrorReplyMessage;
}

uint64_t sub_10023A5BC(uint64_t a1)
{
  unint64_t v3 = *(uint64_t (**)(void))(*v1 + 128LL);
  uint64_t v4 = v3();
  v1[2] = a1;
  uint64_t v5 = swift_bridgeObjectRelease();
  uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(v5);
  char v7 = sub_10023D328(v4, v6);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 3);
  if (!Strong) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v10 = Strong;
  uint64_t v11 = v1[4];
  uint64_t ObjectType = swift_getObjectType(Strong, v9);
  uint64_t v13 = v3();
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 8))(v1, v13, ObjectType, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_10023A694(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_10023DC30(a2, a3, a4);
  swift_release(a1);

  swift_unknownObjectRelease(a3);
  return v9;
}

void *sub_10023A70C()
{
  __n128 result = *(void **)(v0 + 40);
  if (result)
  {
    id v2 = [result recommender];
    [v2 requestCurrentContext];
    return (void *)swift_unknownObjectRelease(v2);
  }

  return result;
}

uint64_t sub_10023A760(uint64_t a1, uint64_t a2)
{
  uint64_t v242 = a2;
  uint64_t v233 = *v2;
  uint64_t v4 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v4);
  os_log_t v235 = (char *)&v211 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v250 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v226 = *(void *)(v250 - 8);
  uint64_t v6 = __chkstk_darwin(v250);
  uint64_t v221 = (char *)&v211 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v247 = (char *)&v211 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v248 = (uint64_t)&v211 - v11;
  __chkstk_darwin(v10);
  uint64_t v220 = (char *)&v211 - v12;
  uint64_t v13 = sub_100156B68(&qword_1003F9518);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v223 = (uint64_t)&v211 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v228 = (uint64_t)&v211 - v17;
  __chkstk_darwin(v16);
  uint64_t v230 = (uint64_t)&v211 - v18;
  uint64_t v236 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v241 = *(void *)(v236 - 8);
  uint64_t v19 = __chkstk_darwin(v236);
  uint64_t v222 = (uint64_t)&v211 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v217 = (uint64_t)&v211 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v218 = (uint64_t)&v211 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v225 = (uint64_t)&v211 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v219 = (uint64_t)&v211 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v243 = (uint64_t *)((char *)&v211 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v224 = (uint64_t)&v211 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v229 = (char *)&v211 - v34;
  __chkstk_darwin(v33);
  uint64_t v227 = (uint64_t)&v211 - v35;
  uint64_t v239 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v245 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v238 = (char *)&v211 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for RoutingEvent(0LL);
  uint64_t v38 = __chkstk_darwin(v37);
  v234 = (char *)&v211 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  uint64_t v237 = (uint64_t)&v211 - v40;
  uint64_t v244 = type metadata accessor for Logger(0LL);
  uint64_t v246 = *(void *)(v244 - 8);
  __chkstk_darwin(v244);
  uint64_t v240 = (char *)&v211 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v211 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  unint64_t v50 = (char **)((char *)&v211 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)&v211 - v52;
  uint64_t v231 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v51);
  unint64_t v55 = v54;
  uint64_t v232 = v37;
  uint64_t v56 = *(int *)(v37 + 20);
  uint64_t v249 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, a1 + v56, v42);
  if ((*(unsigned int (**)(char *, uint64_t))(v43 + 88))(v45, v42) != enum case for RoutingSessionConfiguration.Attribution.attributed(_:))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v45, v42);
  }

  (*(void (**)(char *, uint64_t))(v43 + 96))(v45, v42);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v53, v45, v46);
  (*(void (**)(char **, char *, uint64_t))(v47 + 16))(v50, v53, v46);
  int v57 = (*(uint64_t (**)(char **, uint64_t))(v47 + 88))(v50, v46);
  uint64_t v58 = v46;
  unsigned __int8 v59 = v53;
  if (v57 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:))
  {
    (*(void (**)(char **, uint64_t))(v47 + 96))(v50, v58);
    unsigned __int8 v61 = *v50;
    unsigned __int8 v60 = v50[1];
  }

  else
  {
    (*(void (**)(char **, uint64_t))(v47 + 8))(v50, v58);
    unsigned __int8 v61 = 0LL;
    unsigned __int8 v60 = 0LL;
  }

  uint64_t v63 = v249;
  uint64_t v64 = v251;
  uint64_t v65 = (void *)v251[5];
  if (!v65)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v71 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
    uint64_t v72 = v59;
    return v71(v72, v58);
  }

  unint64_t v215 = v55;
  uint64_t v216 = v47;
  id v66 = v65;
  uint64_t v67 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v66);
  uint64_t v69 = v64[8];
  if (v69)
  {
    uint64_t v70 = v64[7];
    if (v67 == v70 && v69 == v68)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v214 = v59;
      swift_bridgeObjectRelease();
      uint64_t v75 = sub_1001741A8();
      uint64_t v76 = v246;
      uint64_t v77 = v240;
      uint64_t v78 = v244;
      (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v240, v75, v244);
      uint64_t v79 = v237;
      sub_1001A80F8(v63, v237, type metadata accessor for RoutingEvent);
      unint64_t v80 = v215;
      uint64_t v81 = swift_bridgeObjectRetain();
      uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = swift_slowAlloc(32LL, -1LL);
        id v213 = v66;
        uint64_t v85 = v84;
        uint64_t v86 = swift_slowAlloc(96LL, -1LL);
        uint64_t v253 = v86;
        *(_DWORD *)uint64_t v85 = 136315650;
        uint64_t v87 = _typeName(_:qualified:)(v233, 0LL);
        uint64_t v252 = sub_10015ADC4(v87, v88, &v253);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v252 = sub_10015ADC4(v231, v80, &v253);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v85 + 14, v85 + 22);
        swift_bridgeObjectRelease_n(v80, 3LL);
        *(_WORD *)(v85 + 22) = 2080;
        uint64_t v89 = sub_10022808C(&qword_1003FBBF8, 255LL, type metadata accessor for RoutingEvent, (uint64_t)&unk_10034BBF8);
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v232, v89);
        uint64_t v252 = sub_10015ADC4(v90, v91, &v253);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v85 + 24, v85 + 32);
        swift_bridgeObjectRelease();
        sub_1001A813C(v79, type metadata accessor for RoutingEvent);
        _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "[%s] donateEvent<%s> - drop duplicate donation for event: %s",  (uint8_t *)v85,  0x20u);
        swift_arrayDestroy(v86, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1LL, -1LL);
        swift_slowDealloc(v85, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v246 + 8))(v240, v244);
      }

      else
      {

        sub_1001A813C(v79, type metadata accessor for RoutingEvent);
        swift_bridgeObjectRelease_n(v80, 2LL);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
      }

      uint64_t v71 = *(uint64_t (**)(char *, uint64_t))(v216 + 8);
      uint64_t v72 = v214;
      return v71(v72, v58);
    }

    char v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v70, v69, 0LL);
    uint64_t v73 = swift_bridgeObjectRelease();
    if ((v74 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v73 = swift_bridgeObjectRelease();
  }

  uint64_t v92 = (*(uint64_t (**)(uint64_t))(*v64 + 128LL))(v73);
  sub_10023C01C(v92);
  uint64_t v94 = v93;
  uint64_t v96 = v95;
  uint64_t v97 = swift_bridgeObjectRelease();
  if (v94)
  {
    swift_bridgeObjectRelease();
    uint64_t v94 = *(void *)(v96 + 48);
    uint64_t v240 = *(char **)(v96 + 40);
    swift_bridgeObjectRetain();
    uint64_t v97 = swift_release(v96);
  }

  else
  {
    uint64_t v240 = 0LL;
  }

  uint64_t v98 = v247;
  uint64_t v99 = (uint64_t *)v238;
  j___s12MediaControl18RoutingInteractionV6actionAC6ActionOvg(v97);
  uint64_t v100 = v239;
  int v101 = (*(uint64_t (**)(uint64_t *, uint64_t))(v245 + 88))(v99, v239);
  uint64_t v212 = v58;
  if (v101 == enum case for RoutingInteraction.Action.add(_:)
    || v101 == enum case for RoutingInteraction.Action.remove(_:)
    || v101 == enum case for RoutingInteraction.Action.set(_:))
  {
    uint64_t v238 = v61;
    uint64_t v112 = v94;
    uint64_t v211 = (uint64_t)v60;
    (*(void (**)(uint64_t *, uint64_t))(v245 + 96))(v99, v100);
    uint64_t v113 = v99[2];
    uint64_t v114 = v99[3];
    swift_bridgeObjectRelease();
    uint64_t v115 = *(void *)(v242 + 16);
    if (v115)
    {
      uint64_t v214 = v59;
      id v116 = v66;
      uint64_t v117 = v242 + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
      uint64_t v118 = *(void *)(v241 + 72);
      swift_bridgeObjectRetain();
      uint64_t v119 = v229;
      while (1)
      {
        sub_1001A80F8(v117, (uint64_t)v119, type metadata accessor for HostedRoutingSourceSession);
        uint64_t v120 = v119[1];
        BOOL v121 = *v119 == v113 && v120 == v114;
        if (v121 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v119, v120, v113, v114, 0LL) & 1) != 0) {
          break;
        }
        sub_1001A813C((uint64_t)v119, type metadata accessor for HostedRoutingSourceSession);
        v117 += v118;
        if (!--v115)
        {
          swift_bridgeObjectRelease();
          uint64_t v122 = 1LL;
          id v66 = v116;
          unsigned __int8 v59 = v214;
          goto LABEL_49;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v128 = v230;
      sub_10023DF60((uint64_t)v119, v230);
      uint64_t v122 = 0LL;
      id v66 = v116;
      unsigned __int8 v59 = v214;
    }

    else
    {
      uint64_t v122 = 1LL;
LABEL_49:
      uint64_t v128 = v230;
    }

    uint64_t v129 = v241;
    uint64_t v130 = v236;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v241 + 56))(v128, v122, 1LL, v236);
    swift_bridgeObjectRelease();
    int v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v128, 1LL, v130);
    uint64_t v132 = v246;
    uint64_t v133 = v112;
    if (v131 == 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v212);
      return sub_1001603DC(v128, &qword_1003F9518);
    }

    uint64_t v134 = v128;
    uint64_t v135 = v227;
    sub_10023DF60(v134, v227);
    sub_10016083C(0LL, &qword_1003FBBF0, &OBJC_CLASS___MRIRRoute_ptr);
    uint64_t v136 = swift_bridgeObjectRetain();
    uint64_t v137 = (void *)sub_100216F3C(v136);
    uint64_t v138 = v212;
    if (v211)
    {
      NSString v139 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v139 = 0LL;
    }

    id v213 = v66;
    if (!v133) {
      goto LABEL_107;
    }
    goto LABEL_81;
  }

  if (v101 == enum case for RoutingInteraction.Action.setActiveSession(_:))
  {
    uint64_t v211 = (uint64_t)v60;
    (*(void (**)(uint64_t *, uint64_t))(v245 + 96))(v99, v100);
    uint64_t v102 = v99[1];
    uint64_t v103 = *(void *)(v242 + 16);
    if (v103)
    {
      uint64_t v214 = v59;
      uint64_t v237 = v94;
      uint64_t v238 = v61;
      uint64_t v104 = *v99;
      uint64_t v105 = v242 + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
      uint64_t v106 = *(void *)(v241 + 72);
      swift_bridgeObjectRetain();
      uint64_t v107 = v243;
      while (1)
      {
        sub_1001A80F8(v105, (uint64_t)v107, type metadata accessor for HostedRoutingSourceSession);
        uint64_t v108 = v107[1];
        BOOL v109 = *v107 == v104 && v108 == v102;
        if (v109 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v107, v108, v104, v102, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v107 = v243;
        sub_1001A813C((uint64_t)v243, type metadata accessor for HostedRoutingSourceSession);
        v105 += v106;
        if (!--v103)
        {
          swift_bridgeObjectRelease();
          uint64_t v110 = 1LL;
          uint64_t v94 = v237;
          uint64_t v111 = v228;
          goto LABEL_58;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v111 = v228;
      sub_10023DF60((uint64_t)v243, v228);
      uint64_t v110 = 0LL;
      uint64_t v94 = v237;
LABEL_58:
      unsigned __int8 v59 = v214;
    }

    else
    {
      uint64_t v110 = 1LL;
      uint64_t v111 = v228;
    }

    uint64_t v146 = v241;
    uint64_t v147 = v236;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v241 + 56))(v111, v110, 1LL, v236);
    swift_bridgeObjectRelease();
    int v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v111, 1LL, v147);
    uint64_t v149 = v246;
    if (v148 == 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v212);
      return sub_1001603DC(v111, &qword_1003F9518);
    }

    uint64_t v135 = v224;
    sub_10023DF60(v111, v224);
    sub_10016083C(0LL, &qword_1003FBBF0, &OBJC_CLASS___MRIRRoute_ptr);
    uint64_t v150 = swift_bridgeObjectRetain();
    uint64_t v137 = (void *)sub_100216F3C(v150);
    if (v211)
    {
      NSString v139 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v139 = 0LL;
    }

    uint64_t v132 = v149;
    id v213 = v66;
    uint64_t v138 = v212;
    if (!v94)
    {
LABEL_107:
      NSString v166 = 0LL;
LABEL_108:
      [v213 donatePickerChoiceFor:v137 bundleIdentifier:v139 contextIdentifier:v166];

      sub_1001A813C(v135, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v187 = (uint64_t)v234;
      uint64_t v186 = (uint64_t)v235;
      uint64_t v188 = v244;
LABEL_109:
      uint64_t v189 = sub_100174330();
      sub_10017434C(v189, v186);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v186, 1LL, v188) == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v190 = sub_1001603DC(v186, (uint64_t *)&unk_1003FBBE0);
        id v191 = v213;
      }

      else
      {
        __int16 v192 = v59;
        sub_1001A80F8(v63, v187, type metadata accessor for RoutingEvent);
        unint64_t v193 = v215;
        uint64_t v194 = swift_bridgeObjectRetain();
        uint64_t v195 = (os_log_s *)Logger.logObject.getter(v194);
        os_log_type_t v196 = static os_log_type_t.default.getter(v195);
        if (os_log_type_enabled(v195, v196))
        {
          uint64_t v197 = swift_slowAlloc(32LL, -1LL);
          uint64_t v253 = swift_slowAlloc(96LL, -1LL);
          uint64_t v198 = v253;
          *(_DWORD *)uint64_t v197 = 136315650;
          uint64_t v199 = _typeName(_:qualified:)(v233, 0LL);
          uint64_t v252 = sub_10015ADC4(v199, v200, &v253);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v197 + 4, v197 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v197 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v252 = sub_10015ADC4(v231, v193, &v253);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v197 + 14, v197 + 22);
          swift_bridgeObjectRelease_n(v193, 3LL);
          *(_WORD *)(v197 + 22) = 2080;
          unsigned __int8 v59 = v192;
          uint64_t v201 = sub_10022808C( &qword_1003FBBF8,  255LL,  type metadata accessor for RoutingEvent,  (uint64_t)&unk_10034BBF8);
          uint64_t v202 = (uint64_t)v234;
          uint64_t v203 = dispatch thunk of CustomStringConvertible.description.getter(v232, v201);
          uint64_t v252 = sub_10015ADC4(v203, v204, &v253);
          uint64_t v132 = v246;
          uint64_t v188 = v244;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v197 + 24, v197 + 32);
          swift_bridgeObjectRelease();
          sub_1001A813C(v202, type metadata accessor for RoutingEvent);
          _os_log_impl( (void *)&_mh_execute_header,  v195,  v196,  "[%s] donateEvent<%s> - donated event: %s",  (uint8_t *)v197,  0x20u);
          swift_arrayDestroy(v198, 3LL, (char *)&type metadata for Any + 8);
          uint64_t v205 = v198;
          uint64_t v138 = v212;
          swift_slowDealloc(v205, -1LL, -1LL);
          uint64_t v186 = (uint64_t)v235;
          swift_slowDealloc(v197, -1LL, -1LL);

          id v191 = v213;
        }

        else
        {
          swift_bridgeObjectRelease_n(v193, 2LL);

          sub_1001A813C(v187, type metadata accessor for RoutingEvent);
          id v191 = v213;
          unsigned __int8 v59 = v192;
        }

        uint64_t v190 = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 8))(v186, v188);
      }

      uint64_t v206 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v190);
      uint64_t v208 = v207;

      (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v138);
      __int128 v209 = v251;
      v251[7] = v206;
      v209[8] = v208;
      return swift_bridgeObjectRelease();
    }

LABEL_81:
    NSString v166 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }

  if (v101 == enum case for RoutingInteraction.Action.setActiveItem(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v245 + 96))(v99, v100);
    uint64_t v123 = v99[1];
    uint64_t v239 = *(void *)(v242 + 16);
    id v213 = v66;
    if (!v239)
    {
      uint64_t v165 = 1LL;
LABEL_84:
      uint64_t v164 = v223;
LABEL_85:
      uint64_t v167 = v241;
      uint64_t v168 = v236;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v241 + 56))(v164, v165, 1LL, v236);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v164, 1LL, v168) == 1)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v212);
        return sub_1001603DC(v164, &qword_1003F9518);
      }

      uint64_t v135 = v219;
      sub_10023DF60(v164, v219);
      sub_10016083C(0LL, &qword_1003FBBF0, &OBJC_CLASS___MRIRRoute_ptr);
      uint64_t v169 = swift_bridgeObjectRetain();
      uint64_t v170 = v60;
      uint64_t v137 = (void *)sub_100216F3C(v169);
      if (v170)
      {
        NSString v139 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      else
      {
        NSString v139 = 0LL;
      }

      uint64_t v138 = v212;
      uint64_t v132 = v246;
      if (!v94) {
        goto LABEL_107;
      }
      goto LABEL_81;
    }

    uint64_t v238 = v61;
    uint64_t v211 = (uint64_t)v60;
    uint64_t v124 = *v99;
    uint64_t v247 = (char *)(v242
                  + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80)));
    uint64_t v245 = *(void *)(v241 + 72);
    swift_bridgeObjectRetain();
    uint64_t v125 = 0LL;
    uint64_t v126 = v220;
    uint64_t v127 = v225;
    uint64_t v214 = v59;
    uint64_t v237 = v94;
    while (1)
    {
      sub_1001A80F8((uint64_t)&v247[v245 * v125], v127, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v151 = *(void *)(v127 + 32);
      uint64_t v152 = *(void *)(v151 + 16);
      if (v152) {
        break;
      }
LABEL_65:
      ++v125;
      sub_1001A813C(v127, type metadata accessor for HostedRoutingSourceSession);
      if (v125 == v239)
      {
        swift_bridgeObjectRelease();
        uint64_t v165 = 1LL;
        id v66 = v213;
        unsigned __int8 v60 = (char *)v211;
        goto LABEL_84;
      }
    }

    uint64_t v153 = v226;
    uint64_t v154 = v151 + ((*(unsigned __int8 *)(v226 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80));
    unint64_t v243 = *(void **)(v127 + 32);
    swift_bridgeObjectRetain_n(v151, 2LL);
    uint64_t v155 = *(void *)(v153 + 72);
    while (1)
    {
      sub_1001A80F8(v154, (uint64_t)v126, type metadata accessor for HostedRoutingItem);
      uint64_t v156 = v126[1];
      if (*v126 == v124 && v156 == v123)
      {
        uint64_t v162 = (uint64_t)v126;
        uint64_t v160 = (uint64_t)v126;
        uint64_t v161 = v248;
        sub_1001A80F8(v162, v248, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        char v158 = _stringCompareWithSmolCheck(_:_:expecting:)(*v126, v156, v124, v123, 0LL);
        uint64_t v159 = (uint64_t)v126;
        uint64_t v160 = (uint64_t)v126;
        uint64_t v161 = v248;
        sub_1001A80F8(v159, v248, type metadata accessor for HostedRoutingItem);
        if ((v158 & 1) == 0)
        {
          sub_1001A813C(v161, type metadata accessor for HostedRoutingItem);
          sub_1001A813C(v160, type metadata accessor for HostedRoutingItem);
          uint64_t v126 = (void *)v160;
          goto LABEL_69;
        }
      }

      char v163 = *(_BYTE *)(v161 + *(int *)(v250 + 36));
      sub_1001A813C(v161, type metadata accessor for HostedRoutingItem);
      sub_1001A813C(v160, type metadata accessor for HostedRoutingItem);
      uint64_t v126 = (void *)v160;
      if ((v163 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v243, 2LL);
        uint64_t v164 = v223;
        sub_10023DF60(v225, v223);
        uint64_t v165 = 0LL;
        unsigned __int8 v59 = v214;
        uint64_t v63 = v249;
        id v66 = v213;
        unsigned __int8 v60 = (char *)v211;
        uint64_t v94 = v237;
        goto LABEL_85;
      }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v107, 2LL);
    goto LABEL_82;
  }

  unint64_t v243 = [v239 deviceInfo];
  uint64_t v244 = [v243 systemMediaApplication];

  if (v244)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v244);
    uint64_t v240 = v245;

    uint64_t v246 = v489;
    uint64_t v242 = v487;
    goto LABEL_67;
  }

  if ((sub_1002A2764(v487, v489) & 1) != 0) {
    goto LABEL_68;
  }
LABEL_88:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v474(v461, v473, v233);
  uint64_t v295 = v489;
  swift_bridgeObjectRetain_n(v489, 2LL);
  uint64_t v296 = v239;
  uint64_t v297 = v488;
  swift_bridgeObjectRetain();
  uint64_t v298 = v296;
  uint64_t v299 = (os_log_s *)Logger.logObject.getter(v298);
  uint64_t v300 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v299, v300))
  {
    uint64_t v301 = swift_slowAlloc(42LL, -1LL);
    uint64_t v482 = (void *)swift_slowAlloc(8LL, -1LL);
    v484 = swift_slowAlloc(96LL, -1LL);
    aBlock[0] = v484;
    *(_DWORD *)uint64_t v301 = 136315906;
    uint64_t v302 = _typeName(_:qualified:)(v485, 0LL);
    *(void *)&int v494 = sub_10015ADC4(v302, v303, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v301 + 4, v301 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v301 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&int v494 = sub_10015ADC4(v469, v297, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v301 + 14, v301 + 22);
    swift_bridgeObjectRelease_n(v297, 3LL);
    *(_WORD *)(v301 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&int v494 = sub_10015ADC4(v487, v295, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v301 + 24, v301 + 32);
    swift_bridgeObjectRelease_n(v295, 3LL);
    *(_WORD *)(v301 + 32) = 2112;
    *(void *)&int v494 = v298;
    uint64_t v304 = v298;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v301 + 34, v301 + 42);
    os_log_t v305 = v482;
    *uint64_t v482 = v465;

    _os_log_impl( (void *)&_mh_execute_header,  v299,  v300,  "[%s] handoffFromApplication<%s> - failing because unable to localize client: %s for destination origin client: %@",  (uint8_t *)v301,  0x2Au);
    v306 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v305, 1LL, v306);
    swift_slowDealloc(v305, -1LL, -1LL);
    uint64_t v307 = v484;
    swift_arrayDestroy(v484, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v307, -1LL, -1LL);
    swift_slowDealloc(v301, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v295, 2LL);
    swift_bridgeObjectRelease_n(v297, 2LL);
  }

  v79(v461, v483);
  uint64_t v308 = type metadata accessor for InternalRoutingError(0LL);
  os_log_t v309 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
  uint64_t v310 = swift_allocError(v308, v309, 0LL, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v308 - 8) + 104LL))( v311,  enum case for InternalRoutingError.unsupportedOperation(_:),  v308);
  uint64_t v312 = *v490;
  v313 = v490[1];
  swift_bridgeObjectRetain();
  uint64_t v314 = MRDFastSyncGroupSessionState.rawValue.getter(v310, v312, v313, 2LL);
  uint64_t v316 = v315;
  uint64_t v318 = v317;
  uint64_t v320 = v319;
  sub_10029149C(v314, v315, v317, v319);
  swift_release(v479);

  swift_errorRelease(v314);
  uint64_t v145 = v316;
  uint64_t v146 = v318;
  uint64_t v147 = v320;
LABEL_36:
  sub_100156BA8(v145, v146, v147);
}

LABEL_69:
      v154 += v155;
      if (!--v152)
      {
        swift_bridgeObjectRelease_n(v243, 2LL);
        unsigned __int8 v59 = v214;
        uint64_t v63 = v249;
        uint64_t v94 = v237;
        uint64_t v127 = v225;
        goto LABEL_65;
      }
    }
  }

  if (v101 != enum case for RoutingInteraction.Action.handoff(_:))
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v58);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v245 + 8))(v99, v100);
  }

  (*(void (**)(uint64_t *, uint64_t))(v245 + 96))(v99, v100);
  uint64_t v140 = *v99;
  uint64_t v141 = *(void *)(v242 + 16);
  if (!v141)
  {
    swift_bridgeObjectRelease();

    goto LABEL_117;
  }

  uint64_t v237 = v94;
  uint64_t v238 = v61;
  id v213 = v66;
  uint64_t v142 = *(void *)(v140 + 32);
  uint64_t v143 = *(void *)(v140 + 40);
  uint64_t v236 = v140;
  uint64_t v248 = v242 + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
  uint64_t v245 = *(void *)(v241 + 72);
  swift_bridgeObjectRetain();
  uint64_t v144 = 0LL;
  uint64_t v145 = v222;
  uint64_t v214 = v59;
  uint64_t v211 = (uint64_t)v60;
  uint64_t v239 = v141;
  do
  {
    sub_1001A80F8(v248 + v245 * v144, v145, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v171 = *(void *)(v145 + 32);
    uint64_t v172 = *(void *)(v171 + 16);
    if (v172)
    {
      uint64_t v173 = v226;
      uint64_t v174 = v171 + ((*(unsigned __int8 *)(v226 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80));
      unint64_t v243 = *(void **)(v145 + 32);
      swift_bridgeObjectRetain_n(v171, 2LL);
      uint64_t v175 = *(void *)(v173 + 72);
      uint64_t v176 = (uint64_t)v221;
      while (1)
      {
        sub_1001A80F8(v174, (uint64_t)v98, type metadata accessor for HostedRoutingItem);
        uint64_t v177 = v98[1];
        if (*v98 == v142 && v177 == v143)
        {
          sub_1001A80F8((uint64_t)v98, v176, type metadata accessor for HostedRoutingItem);
        }

        else
        {
          char v179 = _stringCompareWithSmolCheck(_:_:expecting:)(*v98, v177, v142, v143, 0LL);
          sub_1001A80F8((uint64_t)v98, v176, type metadata accessor for HostedRoutingItem);
          if ((v179 & 1) == 0)
          {
            sub_1001A813C(v176, type metadata accessor for HostedRoutingItem);
            sub_1001A813C((uint64_t)v98, type metadata accessor for HostedRoutingItem);
            goto LABEL_94;
          }
        }

        char v180 = *(_BYTE *)(v176 + *(int *)(v250 + 36));
        sub_1001A813C(v176, type metadata accessor for HostedRoutingItem);
        sub_1001A813C((uint64_t)v98, type metadata accessor for HostedRoutingItem);
        if ((v180 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v243, 2LL);
          uint64_t v181 = v217;
          sub_10023DF60(v222, v217);
          uint64_t v182 = v218;
          sub_10023DF60(v181, v218);
          sub_10016083C(0LL, &qword_1003FBBF0, &OBJC_CLASS___MRIRRoute_ptr);
          uint64_t v183 = swift_bridgeObjectRetain();
          uint64_t v184 = (void *)sub_100216F3C(v183);
          if (v211)
          {
            NSString v185 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }

          else
          {
            NSString v185 = 0LL;
          }

          uint64_t v138 = v212;
          unsigned __int8 v59 = v214;
          uint64_t v188 = v244;
          uint64_t v63 = v249;
          uint64_t v132 = v246;
          if (v237)
          {
            NSString v210 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }

          else
          {
            NSString v210 = 0LL;
          }

          objc_msgSend(v213, "donatePickerChoiceFor:bundleIdentifier:contextIdentifier:", v184, v185, v210, v211);

          sub_1001A813C(v182, type metadata accessor for HostedRoutingSourceSession);
          swift_release(v236);
          uint64_t v187 = (uint64_t)v234;
          uint64_t v186 = (uint64_t)v235;
          goto LABEL_109;
        }

LABEL_94:
        v174 += v175;
        --v172;
        uint64_t v98 = v247;
        if (!v172)
        {
          swift_bridgeObjectRelease_n(v243, 2LL);
          unsigned __int8 v59 = v214;
          uint64_t v145 = v222;
          uint64_t v141 = v239;
          break;
        }
      }
    }

    ++v144;
    sub_1001A813C(v145, type metadata accessor for HostedRoutingSourceSession);
  }

  while (v144 != v141);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v58 = v212;
  uint64_t v140 = v236;
LABEL_117:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v216 + 8))(v59, v58);
  return swift_release(v140);
}

      swift_bridgeObjectRelease();
      goto LABEL_95;
    }

    goto LABEL_67;
  }

  uint64_t v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v89, v91, 0LL);
  swift_bridgeObjectRelease();
  if ((v93 & 1) != 0) {
    goto LABEL_44;
  }
  if ((*(_BYTE *)(v79 + 80) & 1) != 0) {
    int v101 = [*(id *)(v79 + 64) resolvedOutputDevices];
  }
  else {
    int v101 = [*(id *)(v79 + 72) outputDevices];
  }
  uint64_t v105 = v101;
  uint64_t v106 = v105;
  if (v105)
  {
    uint64_t v107 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
    uint64_t v108 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v106, v107);
  }

  else
  {
    uint64_t v108 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v105);
  *(&v130 - 2) = (const char *)v85;
  *(&v130 - sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v87;
  BOOL v109 = sub_100263768((uint64_t (*)(id *))sub_1002923E4, (uint64_t)(&v130 - 4), (uint64_t)v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v109 & 1) != 0)
  {
LABEL_67:
    uint64_t v92 = (uint64_t)v132;
    goto LABEL_68;
  }

  uint64_t v110 = [v80 server];
  uint64_t v111 = [v110 routingServer];

  uint64_t v98 = [v111 systemEndpointController];
  if (!v98)
  {
LABEL_107:
    __break(1u);
    return;
  }

  uint64_t v99 = v133;
  if ((*(_BYTE *)(v79 + 80) & 1) != 0) {
    uint64_t v112 = [*(id *)(v79 + 64) resolvedOutputDevices];
  }
  else {
    uint64_t v112 = [*(id *)(v79 + 72) outputDevices];
  }
  uint64_t v113 = v112;
  uint64_t v103 = (uint64_t)v132;
  if (v113)
  {
    uint64_t v114 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
    uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v113, v114);
  }

  else
  {
    uint64_t v52 = (uint64_t)_swiftEmptyArrayStorage;
  }

  if ((unint64_t)v52 >> 62)
  {
LABEL_90:
    if (v52 < 0) {
      uint64_t v122 = v52;
    }
    else {
      uint64_t v122 = v52 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v123 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease();
    if (!v123) {
      goto LABEL_94;
    }
    goto LABEL_78;
  }

  if (!*(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_94;
  }
LABEL_78:
  if ((v52 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      sub_1001603DC(v52, &qword_1003F9518);
      __break(1u);
      goto LABEL_104;
    }

    goto LABEL_80;
  }

    if (!*(void *)(*v101 + 16))
    {
      uint64_t v140 = v186;
      swift_beginAccess(v186 + 2, &v194, 1LL, 0LL);
      uint64_t v141 = v140[2];
      if ((v141 & 0xC000000000000001LL) != 0)
      {
        uint64_t v142 = v141 < 0 ? v141 : v141 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain();
        uint64_t v143 = __CocoaSet.count.getter(v142);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v143 = *(void *)(v141 + 16);
      }

      uint64_t v144 = v166;
      uint64_t v145 = v165;
      uint64_t v146 = v159;
      if (v143)
      {
        uint64_t v147 = sub_1001741A8();
        int v148 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 16))(v146, v147, v144);
        uint64_t v149 = (os_log_s *)Logger.logObject.getter(v148);
        uint64_t v150 = static os_log_type_t.default.getter(v149);
        if (os_log_type_enabled(v149, v150))
        {
          uint64_t v151 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v152 = swift_slowAlloc(32LL, -1LL);
          v193[0] = v152;
          *(_DWORD *)uint64_t v151 = v162.n128_u32[0];
          uint64_t v153 = _typeName(_:qualified:)(v163, 0LL);
          __int16 v192 = sub_10015ADC4(v153, v154, v193);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v151 + 4, v151 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v149,  v150,  "[%s] updateWithItemTypes - uninstall notification observers",  v151,  0xCu);
          swift_arrayDestroy(v152, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v152, -1LL, -1LL);
          swift_slowDealloc(v151, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v144);
        uint64_t v155 = v186;
        v186[2] = &_swiftEmptySetSingleton;
        swift_bridgeObjectRelease();
        swift_beginAccess(v155 + 3, v193, 1LL, 0LL);
        uint64_t v156 = v155[3];
        v155[3] = &_swiftEmptySetSingleton;
        swift_bridgeObjectRelease();
        uint64_t v183 = v156;
      }
    }

    return swift_bridgeObjectRelease();
  }

  uint64_t v108 = *(void *)(v190 + 8 * v107);
  ++v99;
  if (v108) {
    goto LABEL_73;
  }
  uint64_t v99 = v107 + 1;
  if (v107 + 1 >= v180) {
    goto LABEL_88;
  }
  uint64_t v108 = *(void *)(v190 + 8 * v99);
  if (v108) {
    goto LABEL_73;
  }
  uint64_t v99 = v107 + 2;
  if (v107 + 2 >= v180) {
    goto LABEL_88;
  }
  uint64_t v108 = *(void *)(v190 + 8 * v99);
  if (v108) {
    goto LABEL_73;
  }
  BOOL v109 = v107 + 3;
  if (v109 >= v180) {
    goto LABEL_88;
  }
  uint64_t v108 = *(void *)(v190 + 8 * v109);
  if (v108)
  {
    uint64_t v99 = v109;
LABEL_73:
    uint64_t v98 = (v108 - 1) & v108;
    uint64_t v106 = __clz(__rbit64(v108)) + (v99 << 6);
    goto LABEL_74;
  }

  while (1)
  {
    uint64_t v99 = v109 + 1;
    if (__OFADD__(v109, 1LL)) {
      break;
    }
    if (v99 >= v180) {
      goto LABEL_88;
    }
    uint64_t v108 = *(void *)(v190 + 8 * v99);
    ++v109;
    if (v108) {
      goto LABEL_73;
    }
  }

void *sub_10023C01C(uint64_t a1)
{
  __n128 result = (void *)sub_1001E5AA0(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (void *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return sub_10023DB9C(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

void sub_10023C0A4()
{
  __int16 v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100174330();
  sub_10017434C(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1LL, v7);
  if ((_DWORD)v9 == 1)
  {
    sub_1001603DC((uint64_t)v5, (uint64_t *)&unk_1003FBBE0);
    uint64_t v10 = (void *)v1[5];
    if (!v10) {
      return;
    }
LABEL_7:
    id v19 = v10;
    id v20 = [v19 recommendedRoutes];
    uint64_t v21 = sub_100156B68(&qword_1003FBEC0);
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0) {
        uint64_t v36 = v22;
      }
      else {
        uint64_t v36 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease();
      id v37 = v19;
      uint64_t v38 = v1;
      if (v23) {
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      id v37 = v19;
      uint64_t v38 = v1;
      if (v23)
      {
LABEL_9:
        if (v23 < 1)
        {
          __break(1u);
          return;
        }

        uint64_t v24 = 0LL;
        uint64_t v25 = &_swiftEmptyDictionarySingleton;
        do
        {
          if ((v22 & 0xC000000000000001LL) != 0)
          {
            uint64_t v26 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
          }

          else
          {
            uint64_t v26 = *(void **)(v22 + 8 * v24 + 32);
            swift_unknownObjectRetain(v26);
          }

          ++v24;
          id v27 = objc_msgSend(v26, "route", v37, v38);
          id v28 = [v27 routeIdentifier];
          swift_unknownObjectRelease(v27);
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          uint64_t v31 = v30;

          uint64_t v32 = type metadata accessor for RouteRelevance();
          uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
          uint64_t v34 = (void *)swift_unknownObjectRetain(v26);
          sub_10023CEAC(v34);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
          uint64_t v40 = v25;
          sub_10023D88C(v33, v29, v31, isUniquelyReferenced_nonNull_native);
          uint64_t v25 = v40;
          swift_unknownObjectRelease(v26);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        while (v23 != v24);
        goto LABEL_20;
      }
    }

    uint64_t v25 = &_swiftEmptyDictionarySingleton;
LABEL_20:
    swift_bridgeObjectRelease();
    sub_10023A5BC((uint64_t)v25);

    return;
  }

  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v1;
    uint64_t v15 = v14;
    uint64_t v40 = (void *)v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v16 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v39 = sub_10015ADC4(v16, v17, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] updateRecommendations", v13, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v18 = v15;
    __int16 v1 = v38;
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  uint64_t v10 = (void *)v1[5];
  if (v10) {
    goto LABEL_7;
  }
}

uint64_t sub_10023C444(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 72LL, 7LL);
  sub_10023CEAC(a1);
  return v3;
}

uint64_t sub_10023C480()
{
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t sub_10023C4CC()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = result + 64;
  unint64_t v7 = v5 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v15 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v16 = v15 | (v3 << 6);
      goto LABEL_22;
    }

    int64_t v17 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v8) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v3;
    if (!v18)
    {
      int64_t v3 = v17 + 1;
      if (v17 + 1 >= v8) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v3);
      if (!v18)
      {
        int64_t v3 = v17 + 2;
        if (v17 + 2 >= v8) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v3);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_10023C70C()
{
  return sub_10023C4CC();
}

void sub_10023C72C(uint64_t a1)
{
}

uint64_t sub_10023C738(__int16 a1)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 0x203A53437369202CLL;
  v5._object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  if ((a1 & 0x100) != 0) {
    uint64_t v6 = 1702195828LL;
  }
  else {
    uint64_t v6 = 0x65736C6166LL;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v7 = 0xE400000000000000LL;
  }
  else {
    unint64_t v7 = 0xE500000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  return 0x203A4154437369LL;
}

Swift::Int sub_10023C824()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10023C880()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10023C8BC(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10023C914()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_10023C738(v1 | *v0);
}

BOOL sub_10023C930(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

double sub_10023C958()
{
  return -INFINITY;
}

unint64_t sub_10023C964(unint64_t result, unint64_t a2, char a3)
{
  if (result - 2 >= 3)
  {
    unint64_t v3 = 0xFFF0000000000000LL;
    if ((a3 & 1) != 0) {
      unint64_t v4 = 0xFFF0000000000000LL;
    }
    else {
      unint64_t v4 = a2;
    }
    if ((a3 & 1) != 0) {
      unint64_t v5 = 0xFFF0000000000000LL;
    }
    else {
      unint64_t v5 = a2;
    }
    if ((a3 & 1) == 0) {
      unint64_t v3 = a2;
    }
    if (result) {
      unint64_t v3 = v5;
    }
    if (result == 1) {
      return v4;
    }
    else {
      return v3;
    }
  }

  return result;
}

uint64_t sub_10023C9C8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      double v3 = *(double *)&a1;
      uint64_t v12 = 0LL;
      unint64_t v13 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(19LL);
      unint64_t v4 = 0x800000010033F670LL;
      unint64_t v5 = 0xD000000000000010LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      unint64_t v13 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      v7._uint64_t countAndFlagsBits = 0xD000000000000016LL;
      v7._object = (void *)0x800000010033F650LL;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      double v3 = *(double *)&a2;
      unint64_t v5 = 0x203A6B6E6172202CLL;
      unint64_t v4 = 0xE800000000000000LL;
    }
  }

  else
  {
    double v3 = *(double *)&a1;
    uint64_t v12 = 0LL;
    unint64_t v13 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    unint64_t v5 = 0xD000000000000014LL;
    unint64_t v4 = 0x800000010033F690LL;
  }

  String.append(_:)(*(Swift::String *)&v5);
  Double.write<A>(to:)( &v12,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v3);
  v10._uint64_t countAndFlagsBits = 41LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return v12;
}

void sub_10023CB54(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unsigned __int8 a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      Swift::UInt v5 = 1LL;
    }

    else
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v5 = a2;
      a2 = a3;
    }
  }

  else
  {
    Swift::UInt v5 = a4;
  }

  Hasher._combine(_:)(v5);
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = a2;
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
}

uint64_t sub_10023CBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10023CE7C( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10023E098);
}

uint64_t sub_10023CBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10023CE7C( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10023CBD8);
}

BOOL sub_10023CBD8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a6)
  {
    if (a3)
    {
      unint64_t v6 = 0LL;
      return v6 >= a3;
    }

    goto LABEL_13;
  }

  if (a6 == 1)
  {
    if (a3 != 1)
    {
      unint64_t v6 = 1LL;
      return v6 >= a3;
    }

uint64_t sub_10023CC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10023CE7C( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10023CC7C);
}

BOOL sub_10023CC7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a3)
  {
    if (a6)
    {
      unint64_t v6 = 0LL;
      return v6 >= a6;
    }

    goto LABEL_13;
  }

  if (a3 == 1)
  {
    if (a6 != 1)
    {
      unint64_t v6 = 1LL;
      return v6 >= a6;
    }

uint64_t sub_10023CD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10023CE7C( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10023CD20);
}

BOOL sub_10023CD20(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a6)
  {
    if (a3)
    {
      unint64_t v6 = 0LL;
      return v6 < a3;
    }

    return *(double *)&a4 != *(double *)&a1 && *(double *)&a4 < *(double *)&a1;
  }

  if (a6 == 1)
  {
    if (a3 != 1)
    {
      unint64_t v6 = 1LL;
      return v6 < a3;
    }

    return *(double *)&a4 != *(double *)&a1 && *(double *)&a4 < *(double *)&a1;
  }

  if (a3 != 2)
  {
    unint64_t v6 = 2LL;
    return v6 < a3;
  }

  BOOL v7 = *(double *)&a5 < *(double *)&a2;
  if (a4 == a1) {
    return v7;
  }
  else {
    return a4 < a1;
  }
}

Swift::Int sub_10023CDAC()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0LL);
  sub_10023CB54((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10023CE04(uint64_t a1)
{
}

Swift::Int sub_10023CE10(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  Swift::UInt v3 = *(void *)(v1 + 8);
  unsigned __int8 v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_10023CB54((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10023CE64()
{
  return sub_10023C9C8(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10023CE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10023CE7C( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10023DFA4);
}

uint64_t sub_10023CE7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16));
}

BOOL sub_10023CE9C()
{
  return *(_BYTE *)(v0 + 32) == 1;
}

uint64_t sub_10023CEAC(void *a1)
{
  id v3 = [a1 classification];
  id v4 = [a1 sortingHint];
  Swift::UInt v5 = v4;
  if (v4)
  {
    [v4 doubleValue];
    unint64_t v7 = v6;

    unint64_t v8 = v7;
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10023C964((unint64_t)v3, v8, v5 == 0LL);
  *(void *)(v1 + sub_100183478(v0 + 24) = v9;
  *(_BYTE *)(v1 + 32) = v10;
  unsigned __int8 v11 = [a1 isCallToAction];
  unsigned __int8 v12 = [a1 isLockScreenControl];
  *(_BYTE *)(v1 + 33) = v11;
  *(_BYTE *)(v1 + 34) = v12;
  id v13 = [a1 contextIdentifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v14;
  *(void *)(v1 + 48) = v16;
  if (([a1 respondsToSelector:"reason"] & 1) != 0
    && (id v17 = [a1 reason]) != 0)
  {
    unint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;

    swift_unknownObjectRelease(a1);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  *(void *)(v1 + 56) = v19;
  *(void *)(v1 + 64) = v21;
  return v1;
}

uint64_t sub_10023D014()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(105LL);
  v2._uint64_t countAndFlagsBits = 60LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v1, 0LL);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000010033F6B0LL;
  v4._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = sub_10023C9C8(v0[2], v0[3], *((_BYTE *)v0 + 32));
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v6._object = (void *)0x800000010033F6D0LL;
  String.append(_:)(v6);
  if (*((_BYTE *)v0 + 34)) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  v8._uint64_t countAndFlagsBits = sub_10023C738(v7 | *((unsigned __int8 *)v0 + 33));
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v9._object = (void *)0x800000010033F6F0LL;
  String.append(_:)(v9);
  if (v0[8])
  {
    uint64_t v10 = v0[7];
    unsigned __int8 v11 = (void *)v0[8];
  }

  else
  {
    unsigned __int8 v11 = (void *)0xE300000000000000LL;
    uint64_t v10 = 7104878LL;
  }

  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v13._object = (void *)0x800000010033F710LL;
  String.append(_:)(v13);
  uint64_t v15 = v0[5];
  uint64_t v14 = (void *)v0[6];
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 62LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  return 0LL;
}

uint64_t sub_10023D1D8()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

Swift::Int sub_10023D204()
{
  return Hasher._finalize()();
}

uint64_t sub_10023D248()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t sub_10023D270()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

Swift::Int sub_10023D298(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_10023D2DC(uint64_t *a1, uint64_t *a2)
{
  return sub_10023E128(*a1, *a2);
}

uint64_t sub_10023D2F4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

BOOL sub_10023D31C(uint64_t *a1, uint64_t *a2)
{
  return sub_10023E018(*a1, *a2);
}

uint64_t sub_10023D328(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v31 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_29;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_47;
    }

    if (v12 >= v31) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v31) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v31) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v31) {
            return 1LL;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

Swift::Int sub_10023D578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FBEC8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    double v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10023D88C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10023D9E8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void *sub_10023D9E8()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FBEC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10023DB9C(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v8;
    swift_bridgeObjectRetain(v7);
    swift_retain(v8);
    return (void *)v6;
  }

uint64_t sub_10023DC30(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a3;
  uint64_t v37 = a2;
  uint64_t v6 = sub_100156B68(&qword_1003F8210);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68((uint64_t *)&unk_1003FBED0);
  uint64_t v34 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v4 + 32) = 0LL;
  uint64_t v35 = v4 + 24;
  swift_unknownObjectWeakInit(v4 + 24, 0LL);
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 0u;
  *(void *)(v4 + 72) = a1;
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___MRDMediaRemoteServer);
  id v17 = a1;
  id v18 = [v16 server];
  id v19 = [v18 routingServer];

  id v20 = [v19 recommendationController];
  if (v20)
  {
    unint64_t v21 = *(void **)(v4 + 40);
    *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v20;
    id v33 = v20;

    id v22 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    NSNotificationCenter.publisher(for:object:)( @"MRRouteRecommenderDidReceiveNewRecommendationsNotification",  0LL);

    id v38 = v17;
    uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v8, 1LL, 1LL, v23);
    uint64_t v24 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v25 = sub_10022808C( (unint64_t *)&unk_1003FBEE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    unint64_t v26 = sub_100184978();
    Publisher.receive<A>(on:options:)(&v38, v8, v9, v24, v25, v26);
    sub_1001603DC((uint64_t)v8, &qword_1003F8210);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v27 = swift_allocObject(&unk_1003AAEC0, 24LL, 7LL);
    swift_weakInit(v27 + 16, v4);
    unint64_t v28 = sub_10023E50C();
    uint64_t v29 = Publisher<>.sink(receiveValue:)(sub_10023E4B8, v27, v13, v28);

    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v13);
    uint64_t v30 = *(void *)(v4 + 48);
    *(void *)(v4 + 48) = v29;
    swift_release(v30);
  }

  sub_10023C0A4();
  uint64_t v31 = v35;
  *(void *)(v4 + 32) = v36;
  swift_unknownObjectWeakAssign(v31, v37);
  return v4;
}

uint64_t sub_10023DF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSourceSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

BOOL sub_10023DFA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    BOOL v6 = *(double *)&a1 == *(double *)&a4;
    if (a6 != 1) {
      BOOL v6 = 0;
    }
    BOOL v7 = *(double *)&a2 == *(double *)&a5;
    if (a1 != a4) {
      BOOL v7 = 0;
    }
    BOOL v8 = a6 == 2 && v7;
    if (a3 == 1) {
      return v6;
    }
    else {
      return v8;
    }
  }

  else
  {
    return !a6 && *(double *)&a1 == *(double *)&a4;
  }

BOOL sub_10023E018(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  double v3 = *(double *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a1 + 32)) {
    return !*(_BYTE *)(a2 + 32) && v2 == v3;
  }
  if (*(_BYTE *)(a1 + 32) == 1) {
    return v4 == 1 && v2 == v3;
  }
  if (v4 != 2 || *(void *)&v2 != *(void *)&v3) {
    return 0LL;
  }
  return *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

BOOL sub_10023E098(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a3)
  {
    if (a6)
    {
      unint64_t v6 = 0LL;
      return v6 < a6;
    }

    return *(double *)&a1 != *(double *)&a4 && *(double *)&a1 < *(double *)&a4;
  }

  if (a3 == 1)
  {
    if (a6 != 1)
    {
      unint64_t v6 = 1LL;
      return v6 < a6;
    }

    return *(double *)&a1 != *(double *)&a4 && *(double *)&a1 < *(double *)&a4;
  }

  if (a6 != 2)
  {
    unint64_t v6 = 2LL;
    return v6 < a6;
  }

  BOOL v7 = *(double *)&a2 < *(double *)&a5;
  if (a1 == a4) {
    return v7;
  }
  else {
    return a1 < a4;
  }
}

BOOL sub_10023E128(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  double v3 = *(double *)(a2 + 16);
  unint64_t v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a2 + 32))
    {
      unint64_t v5 = 0LL;
      return v5 < v4;
    }

    return v2 != v3 && v2 < v3;
  }

  if (*(_BYTE *)(a1 + 32) == 1)
  {
    if ((_DWORD)v4 != 1)
    {
      unint64_t v5 = 1LL;
      return v5 < v4;
    }

    return v2 != v3 && v2 < v3;
  }

  if ((_DWORD)v4 != 2)
  {
    unint64_t v5 = 2LL;
    return v5 < v4;
  }

  double v6 = *(double *)(a2 + 24);
  double v7 = *(double *)(a1 + 24);
  BOOL v8 = v7 < v6;
  if (v7 == v6) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(void *)&v2 == *(void *)&v3;
  BOOL v10 = *(void *)&v2 < *(void *)&v3;
  if (v9) {
    return v8;
  }
  else {
    return v10;
  }
}

unint64_t sub_10023E1B8()
{
  unint64_t result = qword_1003FBC00;
  if (!qword_1003FBC00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F0E4, &type metadata for RouteRelevance.InteractiveRelevance);
    atomic_store(result, (unint64_t *)&qword_1003FBC00);
  }

  return result;
}

uint64_t sub_10023E200(uint64_t a1, uint64_t a2)
{
  return sub_10022808C( &qword_1003FBC10,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RouteRelevance,  (uint64_t)&unk_10034F294);
}

uint64_t type metadata accessor for RouteRelevance()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted14RouteRelevance);
}

uint64_t type metadata accessor for RoutingRecommendationDataSource()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted31RoutingRecommendationDataSource);
}

_WORD *initializeBufferWithCopyOfBuffer for RouteRelevance.InteractiveRelevance(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RouteRelevance.InteractiveRelevance( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

uint64_t storeEnumTagSinglePayload for RouteRelevance.InteractiveRelevance( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10023E368 + 4 * byte_10034F065[v4]))();
  }
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_10023E39C + 4 * asc_10034F060[v4]))();
}

uint64_t sub_10023E39C(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10023E3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x10023E3ACLL);
  }
  return result;
}

uint64_t sub_10023E3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x10023E3C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10023E3C4(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10023E3CC(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RouteRelevance.InteractiveRelevance()
{
  return &type metadata for RouteRelevance.InteractiveRelevance;
}

uint64_t getEnumTagSinglePayload for RouteRelevance.Classification(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RouteRelevance.Classification( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10023E474(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10023E47C(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RouteRelevance.Classification()
{
  return &type metadata for RouteRelevance.Classification;
}

uint64_t sub_10023E494()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10023E4B8()
{
  uint64_t result = swift_weakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    sub_10023C0A4();
    return swift_release(v2);
  }

  return result;
}

unint64_t sub_10023E50C()
{
  unint64_t result = qword_1003FBEF0;
  if (!qword_1003FBEF0)
  {
    uint64_t v1 = sub_100160358((uint64_t *)&unk_1003FBED0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003FBEF0);
  }

  return result;
}

uint64_t sub_10023E558()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_100401648);
  sub_10015ADAC(v0, (uint64_t)qword_100401648);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t sub_10023E5B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100246528();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

void *sub_10023E5E8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1LL && *result != 0LL;
  *(void *)a2 = *result == 1LL;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_10023E618(uint64_t a1)
{
  unint64_t v2 = sub_100246528();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_10023E640(uint64_t a1)
{
  unint64_t v2 = sub_100246528();
  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_10023E668()
{
  return 0xD000000000000028LL;
}

uint64_t sub_10023E684(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100246528();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

BOOL sub_10023E6C4(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_10023E6D4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  uint64_t result = a2 == 2 && a1 == 2;
  if (v2 != 2)
  {
    BOOL v4 = ((a2 ^ v2) & 1) == 0;
    if (a2 == 2) {
      return result;
    }
    else {
      return v4;
    }
  }

  return result;
}

BOOL sub_10023E70C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2) {
    return ((v3 ^ v2) & 1) == 0;
  }
  return result;
}

void sub_10023E740()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_100401648);
  uint64_t v4 = swift_retain_n(v0, 4LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v8 = swift_slowAlloc(96LL, -1LL);
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v9 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v16 = sub_10015ADC4(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v11 = v1[2];
    unint64_t v12 = v1[3];
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_10015ADC4(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 14, v7 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    swift_beginAccess(v1 + 6, &v16, 0LL, 0LL);
    LOBYTE(v15) = *((_BYTE *)v1 + 48);
    uint64_t v13 = String.init<A>(describing:)(&v15, &type metadata for GroupSessionRemoteControlConnectionTransportType);
    uint64_t v15 = sub_10015ADC4(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 24, v7 + 32);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[%s]<%{public}s> Updated transportType: %s",  (uint8_t *)v7,  0x20u);
    swift_arrayDestroy(v8, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 4LL);
  }

uint64_t sub_10023E9A4()
{
  return *(unsigned __int8 *)(v0 + 48);
}

void sub_10023E9D4(char a1)
{
  char v2 = a1 & 1;
  swift_beginAccess(v1 + 48, v3, 1LL, 0LL);
  *(_BYTE *)(v1 + 48) = v2;
  sub_10023E740();
}

uint64_t (*sub_10023EA14(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + sub_100183478(v0 + 24) = v1;
  swift_beginAccess(v1 + 48, a1, 33LL, 0LL);
  return sub_10023EA54;
}

uint64_t sub_10023EA54(uint64_t a1, char a2)
{
  return sub_10023ED80(a1, a2, (uint64_t (*)(uint64_t))sub_10023E740);
}

void sub_10023EA60()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_100401648);
  uint64_t v4 = swift_retain_n(v0, 4LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v8 = swift_slowAlloc(96LL, -1LL);
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v9 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v16 = sub_10015ADC4(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v11 = v1[2];
    unint64_t v12 = v1[3];
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_10015ADC4(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 14, v7 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    swift_beginAccess((char *)v1 + 49, &v16, 0LL, 0LL);
    LOBYTE(v15) = *((_BYTE *)v1 + 49);
    uint64_t v13 = String.init<A>(describing:)(&v15, &type metadata for GroupSessionRemoteControlConnectionState);
    uint64_t v15 = sub_10015ADC4(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 24, v7 + 32);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s]<%{public}s> Updated state: %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v8, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 4LL);
  }

uint64_t sub_10023ECC4()
{
  return *(unsigned __int8 *)(v0 + 49);
}

void sub_10023ECF4(char a1)
{
  *(_BYTE *)(v1 + 49) = a1;
  sub_10023EA60();
}

uint64_t (*sub_10023ED34(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + sub_100183478(v0 + 24) = v1;
  swift_beginAccess(v1 + 49, a1, 33LL, 0LL);
  return sub_10023ED74;
}

uint64_t sub_10023ED74(uint64_t a1, char a2)
{
  return sub_10023ED80(a1, a2, (uint64_t (*)(uint64_t))sub_10023EA60);
}

uint64_t sub_10023ED80(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess(a1);
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t (*sub_10023EDC4(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10023EE00()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_10023EE30(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 64, v4, 1LL, 0LL);
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_10023EE6C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10023EEA8()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_10023EED8(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 72, v4, 1LL, 0LL);
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*sub_10023EF14(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10023EF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = swift_allocObject(v6, 96LL, 7LL);
  *(_WORD *)(v13 + 48) = 512;
  *(void *)(v13 + 64) = 0LL;
  *(void *)(v13 + 72) = 0LL;
  *(void *)(v13 + 56) = &_swiftEmptyDictionarySingleton;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a2;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v13 + sub_100183478(v0 + 24) = a4;
  *(void *)(v13 + 88) = a6;
  swift_unknownObjectUnownedInit(v13 + 80, a5);
  swift_unknownObjectRelease(a5);
  return v13;
}

void sub_10023EFE8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100160800(a1, (uint64_t)v19);
  if (swift_dynamicCast(v20, v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL))
  {
    __int128 v4 = v20[0];
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v1 + 10);
    uint64_t v6 = v2[11];
    uint64_t ObjectType = swift_getObjectType(Strong, v7);
    (*(void (**)(void *, void, void, uint64_t, uint64_t))(v6 + 8))( v2,  v4,  *((void *)&v4 + 1),  ObjectType,  v6);
    swift_unknownObjectRelease(Strong);
    sub_1001608B8(v4, *((unint64_t *)&v4 + 1));
    return;
  }

  sub_100160800(a1, (uint64_t)v19);
  uint64_t v9 = sub_100156B68(&qword_1003FA078);
  if ((swift_dynamicCast(v20, v19, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
  {
    uint64_t v10 = *(void *)&v20[0];
    uint64_t v11 = sub_1002368D4();
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)&v20[0] = *(void *)v11;
    *((void *)&v20[0] + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v12;
    swift_bridgeObjectRetain_n(v12, 2LL);
    AnyHashable.init<A>(_:)(v20, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v10 + 16))
    {
      unint64_t v13 = sub_10015CAA4((uint64_t)v19);
      if ((v14 & 1) != 0)
      {
        sub_100160800(*(void *)(v10 + 56) + 32 * v13, (uint64_t)v18);
        sub_100160990((uint64_t)v19);
        swift_bridgeObjectRelease();
        sub_100160944(v18, v20);
        swift_dynamicCast(&v17, v20, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
        uint64_t v15 = v17;
        void v19[3] = v9;
        v19[0] = v10;
        uint64_t v16 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(*v2 + 208LL))(v20);
        sub_10023F1BC((uint64_t)v19, v15);
        v16(v20, 0LL);
        sub_10023F2BC();
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_10023F1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_100160944((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000LL;
    sub_1002452C0(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }

  else
  {
    sub_100164B5C(a1);
    unint64_t v7 = sub_100244518(a2);
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000LL;
      if ((v10 & 1) == 0)
      {
        sub_100245708();
        uint64_t v11 = v13;
      }

      sub_100160944((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_100244F50(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v14, 0, sizeof(v14));
    }

    return sub_100164B5C((uint64_t)v14);
  }

void sub_10023F2BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t (**)(void))(*v0 + 240LL);
  uint64_t v4 = v3();
  unint64_t v5 = *(uint64_t (**)(void))(*v0 + 192LL);
  uint64_t v6 = v5();
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100244518(v4), (v8 & 1) != 0))
  {
    sub_100160800(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v48);
    swift_bridgeObjectRelease();
    if (*((void *)&v49 + 1))
    {
      unint64_t v9 = sub_100160944(&v48, v51);
      uint64_t v10 = ((uint64_t (*)(_OWORD *))v3)(v9);
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      uint64_t v11 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(*v1 + 208LL))(v50);
      sub_10023F1BC((uint64_t)&v48, v10);
      v11(v50, 0LL);
      sub_100160800((uint64_t)v51, (uint64_t)&v48);
      uint64_t v12 = sub_100156B68(&qword_1003FA078);
      swift_dynamicCast(v50, &v48, (char *)&type metadata for Any + 8, v12, 7LL);
      uint64_t v13 = *(void *)&v50[0];
      char v14 = sub_1002368C8();
      uint64_t v15 = *((void *)v14 + 1);
      *(void *)&v50[0] = *(void *)v14;
      *((void *)&v50[0] + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v15;
      swift_bridgeObjectRetain_n(v15, 2LL);
      AnyHashable.init<A>(_:)(v50, &type metadata for String, &protocol witness table for String);
      if (*(void *)(v13 + 16) && (unint64_t v16 = sub_10015CAA4((uint64_t)&v48), (v17 & 1) != 0))
      {
        sub_100160800(*(void *)(v13 + 56) + 32 * v16, (uint64_t)&v46);
      }

      else
      {
        __int128 v46 = 0u;
        __int128 v47 = 0u;
      }

      swift_bridgeObjectRelease();
      if (*((void *)&v47 + 1))
      {
        sub_100160990((uint64_t)&v48);
        swift_bridgeObjectRelease();
        sub_100160944(&v46, v50);
        swift_dynamicCast(v45, v50, (char *)&type metadata for Any + 8, &type metadata for Data, 7LL);
        uint64_t v34 = v45[0];
        unint64_t v33 = v45[1];
        uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v1 + 10);
        uint64_t v36 = v1[11];
        uint64_t ObjectType = swift_getObjectType(Strong, v37);
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v36 + 8))( v1,  v34,  v33,  ObjectType,  v36);
        swift_unknownObjectRelease(Strong);
        uint64_t v39 = (uint64_t (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*v1 + 256LL))(&v48);
        if (!__OFADD__(*v40, 1LL))
        {
          ++*v40;
          uint64_t v41 = v39(&v48, 0LL);
          uint64_t v42 = *(void *)(((uint64_t (*)(uint64_t))v5)(v41) + 16);
          uint64_t v43 = swift_bridgeObjectRelease();
          if (v42)
          {
            sub_10023F2BC(v43);
            sub_1001608B8(v34, v33);
            sub_1001607E0(v51);
          }

          else
          {
            sub_1001607E0(v51);
            sub_1001608B8(v34, v33);
          }

          return;
        }

        __break(1u);
      }

      __break(1u);
      return;
    }
  }

  else
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    swift_bridgeObjectRelease();
  }

  sub_100164B5C((uint64_t)&v48);
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v18, (uint64_t)qword_100401648);
  uint64_t v19 = swift_retain_n(v1, 6LL);
  id v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(42LL, -1LL);
    uint64_t v44 = swift_slowAlloc(96LL, -1LL);
    *(void *)&__int128 v48 = v44;
    *(_DWORD *)uint64_t v22 = 136315906;
    uint64_t v23 = _typeName(_:qualified:)(v2, 0LL);
    *(void *)&v51[0] = sub_10015ADC4(v23, v24, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, (char *)v51 + 8, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    uint64_t v25 = v1[2];
    unint64_t v26 = v1[3];
    swift_bridgeObjectRetain();
    *(void *)&v51[0] = sub_10015ADC4(v25, v26, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, (char *)v51 + 8, v22 + 14, v22 + 22);
    swift_release_n(v1, 2LL);
    uint64_t v27 = swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2050;
    uint64_t v28 = ((uint64_t (*)(uint64_t))v3)(v27);
    swift_release(v1);
    *(void *)&v51[0] = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, (char *)v51 + 8, v22 + 24, v22 + 32);
    uint64_t v29 = swift_release(v1);
    *(_WORD *)(v22 + 32) = 2082;
    ((void (*)(uint64_t))v5)(v29);
    uint64_t v30 = Dictionary.Keys.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *(void *)&v51[0] = sub_10015ADC4(v30, v32, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, (char *)v51 + 8, v22 + 34, v22 + 42);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[%s]<%{public}s> still waiting for message: %{public}ld with reordered messages %{public}s",  (uint8_t *)v22,  0x2Au);
    swift_arrayDestroy(v44, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 6LL);
  }

uint64_t sub_10023F7D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_100401648);
  uint64_t v4 = swift_retain_n(v0, 2LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v14 = sub_10015ADC4(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v11 = v1[2];
    unint64_t v12 = v1[3];
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_10015ADC4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 14, v7 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s]<%s> resetting state.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  (*(void (**)(void))(*v1 + 224LL))(0LL);
  return (*(uint64_t (**)(void))(*v1 + 248LL))(0LL);
}

uint64_t sub_10023F9E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10023FA2C()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

Swift::Int sub_10023FA68()
{
  return Hasher._finalize()();
}

uint64_t sub_10023FAAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

uint64_t sub_10023FAD8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328LL))();
}

uint64_t sub_10023FB00()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320LL))();
}

Swift::Int sub_10023FB28(uint64_t a1)
{
  return Hasher._finalize()();
}

void *sub_10023FB6C(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjectType = swift_getObjectType(a2, a2);
  return sub_100245D1C(a1, a2, a4, v4, ObjectType, a3);
}

uint64_t sub_10023FBC4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess(result + 40, &v9, 1LL, 0LL);
    uint64_t v4 = *(void *)(v3 + 40);
    if (*(void *)(v4 + 16))
    {
      *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = &_swiftEmptyDictionarySingleton;
      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v3 + 24);
      uint64_t v6 = *(void *)(v3 + 32);
      uint64_t ObjectType = swift_getObjectType(Strong, v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v3, v4, ObjectType, v6);
      swift_release(v3);
      swift_unknownObjectRelease(Strong);
      return swift_bridgeObjectRelease(v4);
    }

    else
    {
      return swift_release(v3);
    }
  }

  return result;
}

uint64_t sub_10023FC90(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(v3 + 40);
  swift_beginAccess(v3 + 40, v30, 0LL, 0LL);
  uint64_t v8 = *(void *)(v3 + 40);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_9;
  }
  swift_retain(a3);
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_100244548(a3);
  if ((v10 & 1) == 0)
  {
    swift_release(a3);
    swift_bridgeObjectRelease();
LABEL_9:
    swift_beginAccess(v7, v29, 33LL, 0LL);
    swift_retain(a3);
    sub_100160874(a1, a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v27[0] = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    sub_1002453D8(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v7 = v27[0];
    swift_release(a3);
    swift_bridgeObjectRelease();
    return swift_endAccess(v29);
  }

  uint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_100160874(*v11, v13);
  swift_release(a3);
  swift_bridgeObjectRelease();
  sub_1001608B8(v12, v13);
  swift_beginAccess(v7, v29, 33LL, 0LL);
  swift_retain(a3);
  uint64_t v14 = swift_isUniquelyReferenced_nonNull_native(*v7);
  uint64_t v28 = *v7;
  uint64_t v15 = v28;
  *uint64_t v7 = 0x8000000000000000LL;
  uint64_t v16 = swift_retain(a3);
  unint64_t v18 = sub_100244548(v16);
  uint64_t v19 = *(void *)(v15 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }

  LOBYTE(v13) = v17;
  if (*(void *)(v15 + 24) >= v21)
  {
    if ((v14 & 1) != 0)
    {
      if ((v17 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }

uint64_t sub_10023FF00(uint64_t a1)
{
  uint64_t v3 = v1 + 40;
  swift_beginAccess(v1 + 40, v13, 0LL, 0LL);
  uint64_t v4 = *(void *)(v1 + 40);
  if (!*(void *)(v4 + 16)) {
    return 0LL;
  }
  swift_retain(a1);
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100244548(a1);
  if ((v6 & 1) == 0)
  {
    swift_release(a1);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v7 = *(void *)(v4 + 56) + 16 * v5;
  uint64_t v8 = *(void *)v7;
  sub_100160874(*(void *)v7, *(void *)(v7 + 8));
  swift_release(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess(v3, v12, 33LL, 0LL);
  uint64_t v9 = swift_retain(a1);
  sub_1002445A8(v9, &v11);
  swift_release(a1);
  sub_100171C30(v11, *((unint64_t *)&v11 + 1));
  swift_endAccess(v12);
  return v8;
}

uint64_t sub_100240000()
{
  sub_1002444F4(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_10024003C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

uint64_t sub_100240070(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease(v3);
}

void sub_1002400B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_100401648);
  uint64_t v4 = swift_retain_n(v0, 2LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v14 = sub_10015ADC4(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_beginAccess(v1 + 8, &v14, 0LL, 0LL);
    LOBYTE(v13) = *((_BYTE *)v1 + 64);
    uint64_t v11 = String.init<A>(describing:)(&v13, &type metadata for GroupSessionRemoteControlConnectionTransportType);
    uint64_t v13 = sub_10015ADC4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Updated transportType: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

uint64_t sub_1002402B8()
{
  return *(unsigned __int8 *)(v0 + 64);
}

void sub_1002402E8(char a1)
{
  char v2 = a1 & 1;
  swift_beginAccess(v1 + 64, v3, 1LL, 0LL);
  *(_BYTE *)(v1 + 64) = v2;
  sub_1002400B4();
}

void sub_100240328()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v3, (uint64_t)qword_100401648);
  uint64_t v4 = swift_retain_n(v0, 2LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v14 = sub_10015ADC4(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_beginAccess((char *)v1 + 65, &v14, 0LL, 0LL);
    LOBYTE(v13) = *((_BYTE *)v1 + 65);
    uint64_t v11 = String.init<A>(describing:)(&v13, &type metadata for GroupSessionRemoteControlConnectionState);
    uint64_t v13 = sub_10015ADC4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Updated state: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

uint64_t sub_10024052C()
{
  return *(unsigned __int8 *)(v0 + 65);
}

void sub_10024055C(char a1)
{
  *(_BYTE *)(v1 + 65) = a1;
  sub_100240328();
}

uint64_t sub_10024059C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v13 = swift_allocObject(v6, 112LL, 7LL);
  sub_100240618(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t sub_100240618(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = &_swiftEmptyDictionarySingleton;
  *(_WORD *)(v6 + 64) = 512;
  *(_OWORD *)(v6 + 72) = xmmword_10034F3A0;
  *(_OWORD *)(v6 + 88) = xmmword_10034F3A0;
  *(void *)(v6 + 104) = 0LL;
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = a1;
  *(void *)(v6 + sub_100183478(v0 + 24) = a5;
  swift_unknownObjectUnownedInit(v6 + 16, a4);
  *(void *)(v6 + 32) = a6;
  uint64_t v10 = type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler();
  uint64_t v11 = (void *)swift_allocObject(v10, 56LL, 7LL);
  id v12 = a6;
  swift_retain(v6);
  uint64_t v13 = sub_100245D80(a3, v6, v12, v11);
  swift_unknownObjectRelease(a4);
  uint64_t v14 = *(void *)(v6 + 104);
  *(void *)(v6 + 104) = v13;
  swift_release(v14);
  return v6;
}

void (*sub_1002406E0(uint64_t a1, uint64_t a2))(uint64_t *, void)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  uint64_t v38 = *v2;
  uint64_t v43 = v2 + 2;
  uint64_t v41 = a2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v42 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = (void (*)(uint64_t *, void))swift_bridgeObjectRetain();
  int64_t v9 = 0LL;
  uint64_t v39 = v2;
  uint64_t v40 = v4;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = *(void **)(*(void *)(v4 + 48) + 8 * i);
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 56) + 16 * i);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_retain(v15);
    sub_100160874(v17, v18);
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v19, (uint64_t)qword_100401648);
    uint64_t v20 = swift_retain_n(v15, 4LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    int64_t v44 = v9;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = swift_slowAlloc(64LL, -1LL);
      v45[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v25 = _typeName(_:qualified:)(v38, 0LL);
      *(void *)(v23 + 4) = sub_10015ADC4(v25, v26, v45);
      uint64_t v27 = swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2050;
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*v15 + 216LL))(v27);
      swift_release(v15);
      *(void *)(v23 + 14) = v28;
      swift_release(v15);
      *(_WORD *)(v23 + 22) = 2082;
      uint64_t v29 = v15[2];
      unint64_t v30 = v15[3];
      swift_bridgeObjectRetain();
      *(void *)(v23 + sub_100183478(v0 + 24) = sub_10015ADC4(v29, v30, v45);
      swift_release_n(v15, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[%s] Send scheduled message: %{public}ld to: %{public}s",  (uint8_t *)v23,  0x20u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v31 = v24;
      uint64_t v4 = v40;
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v32 = v23;
      uint64_t v3 = v39;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v15, 4LL);
    }

    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v43);
    uint64_t v34 = v3[3];
    uint64_t ObjectType = swift_getObjectType(Strong, v35);
    (*(void (**)(void *, uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t))(v34 + 16))( v3,  v17,  v18,  v15,  1LL,  ObjectType,  v34);
    swift_unknownObjectRelease(Strong);
    uint64_t result = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v15 + 232LL))(v45);
    if (__OFADD__(*v37, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    ++*v37;
    result(v45, 0LL);
    sub_1001608B8(v17, v18);
    uint64_t result = (void (*)(uint64_t *, void))swift_release(v15);
    int64_t v9 = v44;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_29;
    }
    if (v12 >= v42) {
      return (void (*)(uint64_t *, void))swift_release(v4);
    }
    unint64_t v13 = *(void *)(v41 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v42) {
        return (void (*)(uint64_t *, void))swift_release(v4);
      }
      unint64_t v13 = *(void *)(v41 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v42) {
          return (void (*)(uint64_t *, void))swift_release(v4);
        }
        unint64_t v13 = *(void *)(v41 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }

void sub_100240ADC(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v102 = *v1;
  uint64_t v110 = *(uint64_t (**)(void))(*v1 + 200);
  uint64_t v4 = v110();
  uint64_t v5 = sub_100159180(v4);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_100159180(v6);
  char v8 = sub_10019F320(v5, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }

  int64_t v9 = 0LL;
  uint64_t v10 = *(void *)(v5 + 56);
  uint64_t v103 = v5 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v14 = v1 + 7;
  int64_t v106 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v108 = (uint64_t)v1;
  uint64_t v109 = a1;
  uint64_t v104 = v5;
  if ((v12 & v10) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v17 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }

  if (v17 >= v106)
  {
LABEL_41:
    swift_release(v5);
    uint64_t v105 = a1 + 64;
    uint64_t v49 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v50 = -1LL;
    if (v49 < 64) {
      uint64_t v50 = ~(-1LL << v49);
    }
    unint64_t v51 = v50 & *(void *)(a1 + 64);
    int64_t v107 = (unint64_t)(v49 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v52 = 0LL;
    if (v51) {
      goto LABEL_47;
    }
LABEL_48:
    while (2)
    {
      int64_t v57 = v52 + 1;
      if (!__OFADD__(v52, 1LL))
      {
        if (v57 >= v107) {
          goto LABEL_77;
        }
        unint64_t v58 = *(void *)(v105 + 8 * v57);
        ++v52;
        if (!v58)
        {
          int64_t v52 = v57 + 1;
          if (v57 + 1 >= v107) {
            goto LABEL_77;
          }
          unint64_t v58 = *(void *)(v105 + 8 * v52);
          if (!v58)
          {
            int64_t v52 = v57 + 2;
            if (v57 + 2 >= v107) {
              goto LABEL_77;
            }
            unint64_t v58 = *(void *)(v105 + 8 * v52);
            if (!v58)
            {
              int64_t v59 = v57 + 3;
              if (v59 < v107)
              {
                unint64_t v58 = *(void *)(v105 + 8 * v59);
                if (!v58)
                {
                  while (1)
                  {
                    int64_t v52 = v59 + 1;
                    if (__OFADD__(v59, 1LL)) {
                      goto LABEL_86;
                    }
                    if (v52 >= v107) {
                      goto LABEL_77;
                    }
                    unint64_t v58 = *(void *)(v105 + 8 * v52);
                    ++v59;
                    if (v58) {
                      goto LABEL_61;
                    }
                  }
                }

                int64_t v52 = v59;
                goto LABEL_61;
              }

LABEL_73:
        *(void *)(v2 + 8 * (v76 >> 6) + 64) |= 1LL << v76;
        os_log_type_t v83 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v76);
        *os_log_type_t v83 = v64;
        v83[1] = v63;
        *(void *)(*(void *)(v2 + 56) + 8 * v76) = v71;
        uint64_t v84 = *(void *)(v2 + 16);
        BOOL v85 = __OFADD__(v84, 1LL);
        uint64_t v86 = v84 + 1;
        if (v85) {
          goto LABEL_84;
        }
        *(void *)(v2 + swift_weakDestroy(v0 + 16) = v86;
        swift_bridgeObjectRetain();
        goto LABEL_46;
      }

      break;
    }

void sub_100241568(char a1, uint64_t a2, unint64_t a3)
{
  char v5 = a1 & 1;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  BOOL v8 = v6 == a2 && v7 == a3;
  if (v8 || (uint64_t v10 = *v3, (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v6, v7, 0LL) & 1) != 0))
  {
    sub_100241898(v5);
  }

  else
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*v3 + 200LL);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = v11(v12);
    if (*(void *)(v13 + 16) && (unint64_t v14 = sub_10015CAD4(a2, a3), (v15 & 1) != 0))
    {
      uint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100241F00(v5, v16);
      swift_release(v16);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100401640 != -1) {
        swift_once(&qword_100401640, sub_10023E558);
      }
      uint64_t v17 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v17, (uint64_t)qword_100401648);
      uint64_t v18 = swift_bridgeObjectRetain_n(a3, 2LL);
      int64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc(32LL, -1LL);
        uint64_t v22 = swift_slowAlloc(96LL, -1LL);
        uint64_t v30 = v22;
        *(_DWORD *)uint64_t v21 = 136315650;
        uint64_t v23 = _typeName(_:qualified:)(v10, 0LL);
        uint64_t v28 = sub_10015ADC4(v23, v24, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2080;
        uint64_t v28 = sub_10015ADC4(0xD00000000000001ELL, 0x800000010033F8D0LL, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 14, v21 + 22);
        *(_WORD *)(v21 + 22) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_10015ADC4(a2, a3, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 24, v21 + 32);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[%s] %s Could not find participant: %{public}s.",  (uint8_t *)v21,  0x20u);
        swift_arrayDestroy(v22, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
      }

      unint64_t v25 = sub_100246098();
      uint64_t v26 = swift_allocError(&type metadata for GroupSessionConnectionError, v25, 0LL, 0LL);
      void *v27 = 1LL;
      swift_willThrow(v26);
    }
  }

void sub_100241898(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  int v4 = a1 & 1;
  if (v4 == ((*(uint64_t (**)(void))(*v1 + 224))() & 1))
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10015ADAC(v5, (uint64_t)qword_100401648);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v10 = swift_slowAlloc(96LL, -1LL);
      v55[0] = v10;
      *(_DWORD *)uint64_t v9 = 136315650;
      uint64_t v11 = _typeName(_:qualified:)(v3, 0LL);
      uint64_t v53 = sub_10015ADC4(v11, v12, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v53 = sub_10015ADC4(0xD000000000000014LL, 0x800000010033FB90LL, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v9 + 14, v9 + 22);
      *(_WORD *)(v9 + 22) = 2080;
      LOBYTE(v53) = v4;
      uint64_t v13 = String.init<A>(describing:)(&v53, &type metadata for GroupSessionRemoteControlConnectionTransportType);
      uint64_t v53 = sub_10015ADC4(v13, v14, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%s] %s Cannot transition to same transport type: %s.",  (uint8_t *)v9,  0x20u);
      swift_arrayDestroy(v10, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v15 = 0LL;
LABEL_22:
    unint64_t v47 = sub_100246098();
    uint64_t v48 = swift_allocError(&type metadata for GroupSessionConnectionError, v47, 0LL, 0LL);
    *uint64_t v49 = v15;
    swift_willThrow(v48);
    return;
  }

  uint64_t v16 = (*(uint64_t (**)(void))(*v1 + 200))();
  sub_10023C01C(v16);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (!v18)
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    uint64_t v40 = sub_10015ADAC(v39, (uint64_t)qword_100401648);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      v55[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v45 = _typeName(_:qualified:)(v3, 0LL);
      uint64_t v53 = sub_10015ADC4(v45, v46, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v53 = sub_10015ADC4(0xD000000000000014LL, 0x800000010033FB90LL, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v43 + 14, v43 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[%s] %s Could not find host participant.",  (uint8_t *)v43,  0x16u);
      swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    uint64_t v15 = 1LL;
    goto LABEL_22;
  }

  swift_bridgeObjectRelease();
  swift_beginAccess((char *)v2 + 65, v55, 1LL, 0LL);
  *((_BYTE *)v2 + 65) = v4;
  sub_100240328();
  if (v4)
  {
    (*(void (**)(void))(*(void *)v20 + 312LL))();
    goto LABEL_24;
  }

  uint64_t v21 = v2[13];
  if (!v21)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 224LL);
  swift_retain(v2[13]);
  uint64_t v23 = v22(v20);
  unint64_t v25 = v24;
  swift_release(v21);
  if (v25 >> 60 == 15)
  {
LABEL_24:
    swift_release(v20);
    return;
  }

  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v27 = sub_10015ADAC(v26, (uint64_t)qword_100401648);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(12LL, -1LL);
    unint64_t v56 = v25;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v50 = v23;
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = _typeName(_:qualified:)(v3, 0LL);
    uint64_t v51 = sub_10015ADC4(v33, v34, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[%s] Moving enqueued messages to transition buffer.",  v31,  0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v32;
    uint64_t v23 = v50;
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v36 = v31;
    unint64_t v25 = v56;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  swift_beginAccess(v2 + 9, &v53, 1LL, 0LL);
  if ((unint64_t)v2[10] >> 60 == 15)
  {
    swift_release(v20);
    uint64_t v37 = v2[9];
    unint64_t v38 = v2[10];
    void v2[9] = v23;
    v2[10] = v25;
    sub_100171C30(v37, v38);
    return;
  }

  swift_beginAccess(v2 + 9, &v51, 33LL, 0LL);
  if ((unint64_t)v2[10] >> 60 != 15)
  {
    Data.append(_:)(v23, v25);
    swift_endAccess(&v51);
    sub_100171C30(v23, v25);
    goto LABEL_24;
  }

uint64_t sub_100241F00(char a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*(unsigned __int8 (**)(void))(*a2 + 168LL))() != 2)
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10015ADAC(v17, (uint64_t)qword_100401648);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_12;
    }
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v6, 0LL);
    uint64_t v46 = sub_10015ADC4(v19, v20, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v46 = sub_10015ADC4(0xD000000000000018LL, 0x800000010033FBB0LL, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 14, v12 + 22);
    uint64_t v16 = "[%s] %s Cannot begin transition while already transitioning.";
    goto LABEL_11;
  }

  uint64_t v7 = a1 & 1;
  if ((_DWORD)v7 == ((*(uint64_t (**)(void))(*a2 + 144LL))() & 1))
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10015ADAC(v8, (uint64_t)qword_100401648);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_12;
    }
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v14 = _typeName(_:qualified:)(v6, 0LL);
    uint64_t v46 = sub_10015ADC4(v14, v15, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v46 = sub_10015ADC4(0xD000000000000018LL, 0x800000010033FBB0LL, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v12 + 14, v12 + 22);
    uint64_t v16 = "[%s] %s Cannot transition to current transport type.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v16, (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
LABEL_12:

    unint64_t v21 = sub_100246098();
    uint64_t v22 = swift_allocError(&type metadata for GroupSessionConnectionError, v21, 0LL, 0LL);
    *uint64_t v23 = 0LL;
    return swift_willThrow(v22);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*a2 + 176LL))(v7);
  if ((_DWORD)v7) {
    return (*(uint64_t (**)(uint64_t))(*a2 + 312LL))(result);
  }
  uint64_t v25 = v2[13];
  if (v25)
  {
    uint64_t v26 = *(uint64_t (**)(void *))(*(void *)v25 + 224LL);
    swift_retain(v3[13]);
    uint64_t v27 = v26(a2);
    unint64_t v29 = v28;
    uint64_t result = swift_release(v25);
    if (v29 >> 60 != 15)
    {
      if (qword_100401640 != -1) {
        swift_once(&qword_100401640, sub_10023E558);
      }
      uint64_t v30 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v30, (uint64_t)qword_100401648);
      uint64_t v31 = swift_retain_n(a2, 2LL);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        os_log_type_t type = v33;
        uint64_t v34 = swift_slowAlloc(22LL, -1LL);
        uint64_t v43 = swift_slowAlloc(64LL, -1LL);
        uint64_t v48 = v43;
        *(_DWORD *)uint64_t v34 = 136315394;
        uint64_t v45 = v27;
        uint64_t v35 = _typeName(_:qualified:)(v6, 0LL);
        uint64_t v46 = sub_10015ADC4(v35, v36, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 4, v34 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2082;
        uint64_t v37 = a2[2];
        unint64_t v38 = a2[3];
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_10015ADC4(v37, v38, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 14, v34 + 22);
        swift_release_n(a2, 2LL);
        uint64_t v27 = v45;
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v32,  type,  "[%s] Immediately sending scheduled messages for %{public}s.",  (uint8_t *)v34,  0x16u);
        swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1LL, -1LL);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 2LL);
      }

      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v3 + 2);
      uint64_t v40 = v3[3];
      uint64_t ObjectType = swift_getObjectType(Strong, v41);
      (*(void (**)(void *, uint64_t, unint64_t, void *, void, uint64_t, uint64_t))(v40 + 16))( v3,  v27,  v29,  a2,  0LL,  ObjectType,  v40);
      swift_unknownObjectRelease(Strong);
      return sub_100171C30(v27, v29);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002424D8(char a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1 & 1;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  if (v6 == a2 && v7 == a3) {
    return sub_100242798(v5);
  }
  uint64_t v10 = *v3;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v6, v7, 0LL) & 1) != 0) {
    return sub_100242798(v5);
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*v3 + 200LL);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = v12(v13);
  if (*(void *)(v14 + 16) && (unint64_t v15 = sub_10015CAD4(a2, a3), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
    swift_retain(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100242C90(v5, v17);
    return swift_release(v17);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10015ADAC(v18, (uint64_t)qword_100401648);
    unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = swift_slowAlloc(64LL, -1LL);
      uint64_t v31 = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v24 = _typeName(_:qualified:)(v10, 0LL);
      uint64_t v29 = sub_10015ADC4(v24, v25, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v29 = sub_10015ADC4(0xD00000000000001CLL, 0x800000010033F8F0LL, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 14, v22 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[%s] %s Could not find host participant.",  (uint8_t *)v22,  0x16u);
      swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    unint64_t v26 = sub_100246098();
    uint64_t v27 = swift_allocError(&type metadata for GroupSessionConnectionError, v26, 0LL, 0LL);
    *unint64_t v28 = 1LL;
    return swift_willThrow(v27);
  }

uint64_t sub_100242798(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  int v4 = a1 & 1;
  char v5 = *(uint64_t (**)(void))(*v1 + 248);
  char v6 = v5();
  if (v6 != 2 && (v6 & 1) == v4)
  {
    uint64_t v21 = (*(uint64_t (**)(void))(*v1 + 200))();
    sub_10023C01C(v21);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRelease();
      swift_beginAccess((char *)v2 + 65, v41, 1LL, 0LL);
      *((_BYTE *)v2 + 65) = 2;
      sub_100240328();
      swift_beginAccess(v2 + 8, &v39, 1LL, 0LL);
      *((_BYTE *)v2 + 64) = v4;
      sub_1002400B4();
      sub_100243634(v25);
      return swift_release(v25);
    }

    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10015ADAC(v28, (uint64_t)qword_100401648);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      v41[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v34 = _typeName(_:qualified:)(v3, 0LL);
      uint64_t v39 = sub_10015ADC4(v34, v35, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v39 = sub_10015ADC4(0xD000000000000012LL, 0x800000010033FB50LL, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v32 + 14, v32 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "[%s] %s Could not find host participant.",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    uint64_t v27 = 1LL;
  }

  else
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v8, (uint64_t)qword_100401648);
    uint64_t v9 = swift_retain_n(v1, 2LL);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(42LL, -1LL);
      uint64_t v42 = swift_slowAlloc(128LL, -1LL);
      v41[0] = v42;
      *(_DWORD *)uint64_t v12 = 136315906;
      uint64_t v13 = _typeName(_:qualified:)(v3, 0LL);
      uint64_t v39 = sub_10015ADC4(v13, v14, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v39 = sub_10015ADC4(0xD000000000000012LL, 0x800000010033FB50LL, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2080;
      LOBYTE(v39) = v4;
      uint64_t v15 = String.init<A>(describing:)(&v39, &type metadata for GroupSessionRemoteControlConnectionTransportType);
      uint64_t v39 = sub_10015ADC4(v15, v16, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v12 + 24, v12 + 32);
      uint64_t v17 = swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 32) = 2080;
      LOBYTE(v39) = ((uint64_t (*)(uint64_t))v5)(v17);
      uint64_t v18 = String.init<A>(describing:)(&v39, &type metadata for GroupSessionRemoteControlConnectionState);
      uint64_t v39 = sub_10015ADC4(v18, v19, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v12 + 34, v12 + 42);
      swift_release_n(v1, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%s] %s Cannot end transition to: %s in state: %s.",  (uint8_t *)v12,  0x2Au);
      uint64_t v20 = v42;
      swift_arrayDestroy(v42, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }

    uint64_t v27 = 0LL;
  }

  unint64_t v36 = sub_100246098();
  uint64_t v37 = swift_allocError(&type metadata for GroupSessionConnectionError, v36, 0LL, 0LL);
  *unint64_t v38 = v27;
  return swift_willThrow(v37);
}

uint64_t sub_100242C90(char a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = a1 & 1;
  char v6 = (*(uint64_t (**)(void))(*(void *)a2 + 168LL))();
  if (v6 != 2 && (v6 & 1) == (_DWORD)v5)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 176LL))(2LL);
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152LL))(v5);
  }

  else
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v8, (uint64_t)qword_100401648);
    uint64_t v9 = swift_retain_n(a2, 2LL);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(42LL, -1LL);
      uint64_t v13 = swift_slowAlloc(128LL, -1LL);
      uint64_t v27 = v13;
      *(_DWORD *)uint64_t v12 = 136315906;
      uint64_t v14 = _typeName(_:qualified:)(v4, 0LL);
      uint64_t v25 = sub_10015ADC4(v14, v15, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v25 = sub_10015ADC4(0xD000000000000016LL, 0x800000010033FB70LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2080;
      LOBYTE(v25) = v5;
      uint64_t v16 = String.init<A>(describing:)(&v25, &type metadata for GroupSessionRemoteControlConnectionTransportType);
      uint64_t v25 = sub_10015ADC4(v16, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 32) = 2080;
      uint64_t v25 = a2;
      uint64_t v18 = type metadata accessor for ConnectedParticipant();
      swift_retain(a2);
      uint64_t v19 = String.init<A>(describing:)(&v25, v18);
      uint64_t v25 = sub_10015ADC4(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 34, v12 + 42);
      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%s] %s Cannot end transition to: %s for participant: %s.",  (uint8_t *)v12,  0x2Au);
      swift_arrayDestroy(v13, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a2, 2LL);
    }

    unint64_t v22 = sub_100246098();
    uint64_t v23 = swift_allocError(&type metadata for GroupSessionConnectionError, v22, 0LL, 0LL);
    *uint64_t v24 = 0LL;
    return swift_willThrow(v23);
  }

uint64_t sub_100242FA8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  uint64_t v7 = v4[6];
  BOOL v8 = v4[5] == a2 && v7 == a3;
  uint64_t v9 = *v4;
  if (!v8)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v4[5], v7, 0LL) & 1) == 0)
    {
      if (qword_100401640 != -1) {
        swift_once(&qword_100401640, sub_10023E558);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      uint64_t v32 = sub_10015ADAC(v31, (uint64_t)qword_100401648);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc(22LL, -1LL);
        uint64_t v36 = swift_slowAlloc(64LL, -1LL);
        v52[0] = v36;
        *(_DWORD *)uint64_t v35 = 136315394;
        uint64_t v37 = _typeName(_:qualified:)(v6, 0LL);
        uint64_t v53 = sub_10015ADC4(v37, v38, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        uint64_t v53 = sub_10015ADC4(0xD00000000000001FLL, 0x800000010033F910LL, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v35 + 14, v35 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "[%s] %s Should not cancel transition for another participant.",  (uint8_t *)v35,  0x16u);
        swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      goto LABEL_23;
    }

    uint64_t v9 = *v4;
  }

  uint64_t v10 = *(uint64_t (**)(void))(v9 + 248);
  char v11 = v10();
  if (v11 == 2 || (v11 & 1) != (a1 & 1))
  {
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v13, (uint64_t)qword_100401648);
    uint64_t v14 = swift_retain_n(v4, 2LL);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(42LL, -1LL);
      uint64_t v51 = swift_slowAlloc(128LL, -1LL);
      v52[0] = v51;
      *(_DWORD *)uint64_t v17 = 136315906;
      uint64_t v18 = _typeName(_:qualified:)(v6, 0LL);
      uint64_t v53 = sub_10015ADC4(v18, v19, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v53 = sub_10015ADC4(0xD00000000000001FLL, 0x800000010033F910LL, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 14, v17 + 22);
      *(_WORD *)(v17 + 22) = 2080;
      LOBYTE(v53) = a1 & 1;
      uint64_t v20 = String.init<A>(describing:)(&v53, &type metadata for GroupSessionRemoteControlConnectionTransportType);
      uint64_t v53 = sub_10015ADC4(v20, v21, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 24, v17 + 32);
      uint64_t v22 = swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 32) = 2080;
      LOBYTE(v53) = ((uint64_t (*)(uint64_t))v10)(v22);
      uint64_t v23 = String.init<A>(describing:)(&v53, &type metadata for GroupSessionRemoteControlConnectionState);
      uint64_t v53 = sub_10015ADC4(v23, v24, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 34, v17 + 42);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%s] %s Cannot cancel transition to: %s in state: %s.",  (uint8_t *)v17,  0x2Au);
      swift_arrayDestroy(v51, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v4, 2LL);
    }

uint64_t sub_100243634(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v29 = *v1;
  swift_beginAccess(v1 + 11, v34, 1LL, 0LL);
  uint64_t v4 = v1[11];
  unint64_t v5 = v1[12];
  if (v5 >> 60 != 15)
  {
    sub_100160874(v1[11], v1[12]);
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10015ADAC(v6, (uint64_t)qword_100401648);
    BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      v33[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v12 = _typeName(_:qualified:)(v29, 0LL);
      uint64_t v31 = sub_10015ADC4(v12, v13, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Flushing incoming message buffer.", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v2 + 2);
    uint64_t v15 = v2[3];
    uint64_t ObjectType = swift_getObjectType(Strong, v16);
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))( v2,  v4,  v5,  a1,  ObjectType,  v15);
    swift_unknownObjectRelease(Strong);
    sub_100171C30(v4, v5);
    uint64_t v4 = v2[11];
    unint64_t v5 = v2[12];
  }

  *(_OWORD *)(v2 + 1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = xmmword_10034F3A0;
  sub_100171C30(v4, v5);
  swift_beginAccess(v2 + 9, v33, 1LL, 0LL);
  uint64_t v18 = v2[9];
  unint64_t v19 = v2[10];
  if (v19 >> 60 != 15)
  {
    sub_100160874(v2[9], v2[10]);
    if (qword_100401640 != -1) {
      swift_once(&qword_100401640, sub_10023E558);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10015ADAC(v20, (uint64_t)qword_100401648);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v25;
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v26 = _typeName(_:qualified:)(v29, 0LL);
      uint64_t v30 = sub_10015ADC4(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%s] Flushing outgoing message buffer.", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(uint64_t, unint64_t, void, void))(*v2 + 440LL))( v18,  v19,  *(void *)(a1 + 16),  *(void *)(a1 + 24));
    sub_100171C30(v18, v19);
    uint64_t v18 = v2[9];
    unint64_t v19 = v2[10];
  }

  *(_OWORD *)(v2 + 9) = xmmword_10034F3A0;
  return sub_100171C30(v18, v19);
}

void sub_100243A3C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*v4 + 200LL);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = v11(v12);
  if (*(void *)(v13 + 16))
  {
    unint64_t v14 = sub_10015CAD4(a2, a3);
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_bridgeObjectRelease();
      char v18 = (*(uint64_t (**)(uint64_t))(*v5 + 248LL))(v17);
      if (v18 == 2 || (a4 & 1) != (v18 & 1))
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 296LL))(a1);
        swift_release(v16);
        return;
      }

      if ((a4 & 1) != 0)
      {
        sub_100160800(a1, (uint64_t)v43);
        uint64_t v29 = sub_100156B68(&qword_1003FA078);
        swift_dynamicCast(v44, v43, (char *)&type metadata for Any + 8, v29, 7LL);
        uint64_t v30 = *(void *)&v44[0];
        uint64_t v31 = sub_1002368C8();
        uint64_t v32 = *((void *)v31 + 1);
        *(void *)&v44[0] = *(void *)v31;
        *((void *)&v44[0] + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v32;
        swift_bridgeObjectRetain_n(v32, 2LL);
        AnyHashable.init<A>(_:)(v44, &type metadata for String, &protocol witness table for String);
        if (*(void *)(v30 + 16) && (unint64_t v33 = sub_10015CAA4((uint64_t)v43), (v34 & 1) != 0))
        {
          sub_100160800(*(void *)(v30 + 56) + 32 * v33, (uint64_t)&v41);
        }

        else
        {
          __int128 v41 = 0u;
          __int128 v42 = 0u;
        }

        swift_bridgeObjectRelease();
        if (*((void *)&v42 + 1))
        {
          sub_100160990((uint64_t)v43);
          swift_bridgeObjectRelease();
          sub_100160944(&v41, v44);
          swift_dynamicCast(&v45, v44, (char *)&type metadata for Any + 8, &type metadata for Data, 7LL);
          uint64_t v35 = v45;
          unint64_t v36 = v46;
          swift_beginAccess(v5 + 11, v44, 1LL, 0LL);
          unint64_t v37 = v5[12];
          if (v37 >> 60 == 15)
          {
            uint64_t v38 = v5[11];
            v5[11] = v35;
            v5[12] = v36;
            sub_100160874(v35, v36);
            sub_100171C30(v38, v37);
          }

          else
          {
            swift_beginAccess(v5 + 11, v43, 33LL, 0LL);
            if (v5[12] >> 60 == 15LL)
            {
LABEL_31:
              __break(1u);
              return;
            }

            Data.append(_:)(v35, v36);
            swift_endAccess(v43);
          }

          uint64_t v39 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v16 + 256LL))(v43);
          if (!__OFADD__(*v40, 1LL))
          {
            ++*v40;
            v39(v43, 0LL);
            goto LABEL_27;
          }

          __break(1u);
        }

        __break(1u);
      }

      else
      {
        swift_beginAccess(v5 + 11, v44, 1LL, 0LL);
        if (v5[12] >> 60 == 15LL)
        {
          swift_release(v16);
          sub_100160800(a1, (uint64_t)v43);
          swift_dynamicCast(&v41, v43, (char *)&type metadata for Any + 8, &type metadata for Data, 7LL);
          uint64_t v19 = v5[11];
          unint64_t v20 = v5[12];
          *(_OWORD *)(v5 + 1sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v41;
          sub_100171C30(v19, v20);
          return;
        }

        sub_100160800(a1, (uint64_t)v43);
        swift_dynamicCast(&v45, v43, (char *)&type metadata for Any + 8, &type metadata for Data, 7LL);
        uint64_t v35 = v45;
        unint64_t v36 = v46;
        swift_beginAccess(v5 + 11, &v41, 33LL, 0LL);
        if (v5[12] >> 60 != 15LL)
        {
          Data.append(_:)(v35, v36);
          swift_endAccess(&v41);
LABEL_27:
          swift_release(v16);
          sub_1001608B8(v35, v36);
          return;
        }
      }

      __break(1u);
      goto LABEL_31;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v21, (uint64_t)qword_100401648);
  uint64_t v22 = swift_bridgeObjectRetain_n(a3, 2LL);
  os_log_type_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = swift_slowAlloc(96LL, -1LL);
    v43[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v27 = _typeName(_:qualified:)(v10, 0LL);
    *(void *)&v44[0] = sub_10015ADC4(v27, v28, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    *(void *)&v44[0] = sub_10015ADC4(0xD000000000000019LL, 0x800000010033F930LL, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v25 + 14, v25 + 22);
    *(_WORD *)(v25 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v44[0] = sub_10015ADC4(a2, a3, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%s] %s Could not find participant: %s.",  (uint8_t *)v25,  0x20u);
    swift_arrayDestroy(v26, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

void sub_100243FE4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v12 = *v4;
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*v4 + 200LL);
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = v13(v14);
  if (!*(void *)(v15 + 16)) {
    goto LABEL_9;
  }
  unint64_t v16 = sub_10015CAD4(a3, a4);
  if ((v17 & 1) == 0) {
    goto LABEL_9;
  }
  a3 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_retain(a3);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRelease();
  if ((*(unsigned __int8 (**)(uint64_t))(*v7 + 248LL))(v18) != 2)
  {
    unint64_t v20 = v7 + 9;
    swift_beginAccess(v7 + 9, v38, 1LL, 0LL);
    if (v7[10] >> 60 == 15LL)
    {
      swift_release(a3);
      uint64_t v29 = v7[9];
      unint64_t v30 = v7[10];
      v7[9] = a1;
      v7[10] = a2;
      sub_100160874(a1, a2);
      sub_100171C30(v29, v30);
      return;
    }

uint64_t sub_100244418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t ObjectType = swift_getObjectType(Strong, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))( v3,  a2,  a3,  a1,  ObjectType,  v8);
  return swift_unknownObjectRelease(Strong);
}

uint64_t sub_100244488()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100171C30(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_100171C30(*(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t sub_1002444DC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t sub_1002444E8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448LL))();
}

uint64_t sub_1002444F4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100244518(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10024558C(a1, v3);
}

unint64_t sub_100244548(uint64_t a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100245628(a1, v3);
}

double sub_1002445A8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  Swift::Int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100244548(a1);
  LOBYTE(asub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *Swift::Int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002458C8();
      uint64_t v9 = v11;
    }

    swift_release(*(void *)(*(void *)(v9 + 48) + 8 * v6));
    *a2 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v6);
    sub_1002450E4(v6, v9);
    *Swift::Int v3 = v9;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a2 = xmmword_10034F3A0;
  }

  return result;
}

uint64_t sub_10024467C(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FC418);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_37;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_37;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                Swift::Int v3 = v32;
                goto LABEL_44;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v31;
              }
              Swift::Int v3 = v32;
              *(void *)(v5 + sub_1002444F4(v0 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_46;
                }
                if (v9 >= v14) {
                  goto LABEL_37;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

Swift::Int sub_10024493C(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FC410);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v32 = v3;
  uint64_t v33 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    os_log_type_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v33 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_36:
          swift_release(v5);
          Swift::Int v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v33 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

Swift::Int sub_100244C3C(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003FC408);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    os_log_type_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_100244F50(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v11);
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            unint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              __int128 v9 = v18[1];
              *unint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1LL << result) - 1;
  }

  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + sub_1002444F4(v0 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1002450E4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25, *(void *)(a2 + 40));
        uint64_t v10 = *(void (**)(void *))(*(void *)v9 + 320LL);
        swift_retain(v9);
        v10(v25);
        Swift::Int v11 = Hasher._finalize()();
        Swift::Int result = swift_release(v9);
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }

        else if (v12 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          int64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *int64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          unint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *unint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }

_OWORD *sub_1002452C0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100244518(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        unint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_1001607E0(v17);
        return sub_100160944(a1, v17);
      }

      return sub_100245528(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100245708();
      goto LABEL_7;
    }

    sub_10024467C(v13, a3 & 1);
    unint64_t v19 = sub_100244518(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100245528(v10, a2, a1, v16);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1002453D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100244548(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002458C8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = sub_1001608B8(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return result;
    }

_OWORD *sub_100245528(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * asub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a2;
  uint64_t result = sub_100160944(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_10024558C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100245628(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = *(void *)(v6 + 8 * v5);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    BOOL v11 = *(void *)(v7 + 16) == v9 && v8 == v10;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(v7 + 16), v8, v9, v10, 0LL) & 1) == 0)
    {
      uint64_t v12 = ~v4;
      do
      {
        unint64_t v5 = (v5 + 1) & v12;
        if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) == 0) {
          break;
        }
        uint64_t v13 = *(void *)(v6 + 8 * v5);
        uint64_t v14 = *(void *)(v13 + 16);
        uint64_t v15 = *(void *)(v13 + 24);
        BOOL v16 = v14 == v9 && v15 == v10;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v9, v10, 0LL) & 1) == 0);
    }
  }

  return v5;
}

void *sub_100245708()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FC418);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_1002444F4(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_1002458C8()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FC410);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_1002444F4(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_100245A88()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003FC408);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_1002444F4(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t *sub_100245C3C(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = *result;
  unint64_t v7 = result[1];
  if (v7 >> 60 == 15)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v9 = *(void *)(*a3 + 48) + 8 * a4;
      uint64_t v10 = type metadata accessor for ConnectedParticipant();
      swift_arrayDestroy(v9, 1LL, v10);
      sub_1002450E4(a4, *a3);
    }

    return (uint64_t *)sub_1001B1F1C(v8, v7);
  }

  uint64_t v11 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    unint64_t v12 = (uint64_t *)(v11[7] + 16 * a4);
    uint64_t *v12 = v8;
    v12[1] = v7;
    return (uint64_t *)sub_1001B1F1C(v8, v7);
  }

  v11[(a4 >> 6) + 8] |= 1LL << a4;
  *(void *)(v11[6] + 8 * a4) = a5;
  int64_t v13 = (uint64_t *)(v11[7] + 16 * a4);
  *int64_t v13 = v8;
  v13[1] = v7;
  uint64_t v14 = v11[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (!v15)
  {
    v11[2] = v16;
    swift_retain(a5);
    return (uint64_t *)sub_1001B1F1C(v8, v7);
  }

  __break(1u);
  return result;
}

void *sub_100245D1C(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler();
  unint64_t v12 = (void *)swift_allocObject(v11, 56LL, 7LL);
  return sub_100245EF0(a1, a2, a3, v12, a5, a6);
}

void *sub_100245D80(char a1, uint64_t a2, void *a3, void *a4)
{
  a4[5] = &_swiftEmptyDictionarySingleton;
  a4[6] = 0LL;
  a4[4] = &off_1003AAF58;
  swift_unknownObjectUnownedInit(a4 + 3, a2);
  a4[2] = a3;
  if ((a1 & 1) != 0) {
    double v8 = 1.0;
  }
  else {
    double v8 = 0.5;
  }
  uint64_t v9 = swift_allocObject(&unk_1003AB0C8, 24LL, 7LL);
  swift_weakInit(v9 + 16, a4);
  id v10 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
  v17[4] = sub_100246590;
  uint64_t v18 = v9;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  void v17[2] = sub_100157EA8;
  v17[3] = &unk_1003AB0E0;
  uint64_t v11 = _Block_copy(v17);
  uint64_t v12 = v18;
  id v13 = a3;
  swift_retain(v9);
  swift_release(v12);
  id v14 = [v10 initWithInterval:1 repeats:v13 queue:v11 block:v8];

  _Block_release(v11);
  swift_release(v9);
  swift_release(a2);

  BOOL v15 = (void *)a4[6];
  a4[6] = v14;

  return a4;
}

void *sub_100245EF0(char a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[6] = 0LL;
  a4[4] = a6;
  a4[5] = &_swiftEmptyDictionarySingleton;
  swift_unknownObjectUnownedInit(a4 + 3, a2);
  a4[2] = a3;
  if ((a1 & 1) != 0) {
    double v10 = 1.0;
  }
  else {
    double v10 = 0.5;
  }
  uint64_t v11 = swift_allocObject(&unk_1003AB0C8, 24LL, 7LL);
  swift_weakInit(v11 + 16, a4);
  id v12 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
  v19[4] = sub_100246590;
  uint64_t v20 = v11;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  v19[2] = sub_100157EA8;
  void v19[3] = &unk_1003AB108;
  id v13 = _Block_copy(v19);
  uint64_t v14 = v20;
  id v15 = a3;
  swift_retain(v11);
  swift_release(v14);
  id v16 = [v12 initWithInterval:1 repeats:v15 queue:v13 block:v10];

  _Block_release(v13);
  swift_release(v11);
  swift_unknownObjectRelease(a2);

  uint64_t v17 = (void *)a4[6];
  a4[6] = v16;

  return a4;
}

uint64_t type metadata accessor for ConnectedParticipant()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted20ConnectedParticipant);
}

uint64_t type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted48GroupSessionRemoteControlConnectionPushScheduler);
}

unint64_t sub_100246098()
{
  unint64_t result = qword_1003FBF00;
  if (!qword_1003FBF00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F46C, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FBF00);
  }

  return result;
}

unint64_t sub_1002460E0()
{
  unint64_t result = qword_1003FBF08;
  if (!qword_1003FBF08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F3CC, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FBF08);
  }

  return result;
}

unint64_t sub_100246128()
{
  unint64_t result = qword_1003FBF10;
  if (!qword_1003FBF10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F4F4, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FBF10);
  }

  return result;
}

unint64_t sub_100246170()
{
  unint64_t result = qword_1003FBF18;
  if (!qword_1003FBF18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F3F4, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FBF18);
  }

  return result;
}

unint64_t sub_1002461B8()
{
  unint64_t result = qword_1003FBF20;
  if (!qword_1003FBF20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F434, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FBF20);
  }

  return result;
}

unint64_t sub_100246204()
{
  unint64_t result = qword_1003FBF28;
  if (!qword_1003FBF28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F564, &type metadata for GroupSessionRemoteControlConnectionTransportType);
    atomic_store(result, (unint64_t *)&qword_1003FBF28);
  }

  return result;
}

unint64_t sub_10024624C()
{
  unint64_t result = qword_1003FBF30;
  if (!qword_1003FBF30)
  {
    uint64_t v1 = type metadata accessor for ConnectedParticipant();
    unint64_t result = swift_getWitnessTable(&unk_10034F5B4, v1);
    atomic_store(result, (unint64_t *)&qword_1003FBF30);
  }

  return result;
}

ValueMetadata *type metadata accessor for GroupSessionConnectionError()
{
  return &type metadata for GroupSessionConnectionError;
}

uint64_t storeEnumTagSinglePayload for GroupSessionRemoteControlConnectionTransportType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002462EC + 4 * byte_10034F3B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100246320 + 4 * byte_10034F3B0[v4]))();
}

uint64_t sub_100246320(uint64_t result)
{
  *(_BYTE *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_100246328(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (a2) {
    JUMPOUT(0x100246330LL);
  }
  return result;
}

uint64_t sub_10024633C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100246344LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100246348(uint64_t result)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_100246350(uint64_t result)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionRemoteControlConnectionTransportType()
{
  return &type metadata for GroupSessionRemoteControlConnectionTransportType;
}

uint64_t getEnumTagSinglePayload for GroupSessionRemoteControlConnectionState( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE)
  {
    unsigned int v6 = *a1;
    BOOL v7 = v6 >= 2;
    unsigned int v8 = v6 - 2;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1002463BC + 4 * byte_10034F3BA[v4]))();
  }

uint64_t storeEnumTagSinglePayload for GroupSessionRemoteControlConnectionState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100246464 + 4 * byte_10034F3C4[v5]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100246498 + 4 * byte_10034F3BF[v5]))();
}

uint64_t sub_100246498(uint64_t result)
{
  *(_BYTE *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1002464A0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (a2) {
    JUMPOUT(0x1002464A8LL);
  }
  return result;
}

uint64_t sub_1002464B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002464BCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1002464C0(uint64_t result)
{
  *(_DWORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1002464C8(uint64_t result)
{
  *(_WORD *)(result + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v1;
  return result;
}

uint64_t sub_1002464D4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_1002464E8(_BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionRemoteControlConnectionState()
{
  return &type metadata for GroupSessionRemoteControlConnectionState;
}

uint64_t type metadata accessor for GroupSessionRemoteControlConnectionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted42GroupSessionRemoteControlConnectionManager);
}

unint64_t sub_100246528()
{
  unint64_t result = qword_1003FC400;
  if (!qword_1003FC400)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F4AC, &type metadata for GroupSessionConnectionError);
    atomic_store(result, (unint64_t *)&qword_1003FC400);
  }

  return result;
}

uint64_t sub_10024656C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100246590()
{
  return sub_10023FBC4(v0);
}

uint64_t sub_100246598(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002465A8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002465B8()
{
  return 0LL;
}

void sub_1002465C4(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }

uint64_t sub_10024660C(uint64_t a1, uint64_t a2, __int16 a3)
{
  return v4;
}

void sub_100246640()
{
}

BOOL sub_10024664C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return ((a3 >> 8) & 6 | (a3 >> 7) & 1) == 5;
}

void sub_100246664(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }

uint64_t sub_1002466C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void **)(v0 + 48);
  __int16 v5 = *(_WORD *)(v0 + 32);
  sub_10018394C(v1, v2, v5);
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  sub_100247968(v1, v2, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x203A6F666E6920LL;
  v7._object = (void *)0xE700000000000000LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  sub_100183618(v1, v2, v5);
  return 0x6E776F6E6B6E752ELL;
}

void sub_1002468A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }

uint64_t sub_1002468E8()
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  __int16 v6 = *(_WORD *)(v1 + 32);
  Hasher._combine(_:)(0LL);
  sub_10018394C(v2, v3, v6);
  sub_100248328(v0, v2, v3, v6);
  String.hash(into:)(v0, v4, v5);
  return sub_100183618(v2, v3, v6);
}

uint64_t sub_100246950()
{
  return sub_1001835D8(v3, v2, v0);
}

void sub_1002469E4()
{
}

void sub_100246A08(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }

uint64_t sub_100246A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v5 >= 0x800)
  {
    char v7 = 0;
  }

  else
  {
    if (a1 != a4 || a2 != a5) {
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
    }
    char v7 = 1;
  }

  return v7 & 1;
}

void sub_100246F20(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }

Swift::Int sub_100246F74()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  __int16 v5 = *(_WORD *)(v0 + 32);
  Hasher._combine(_:)(0LL);
  sub_10018394C(v1, v2, v5);
  sub_100248328((uint64_t)v7, v1, v2, v5);
  String.hash(into:)(v7, v3, v4);
  sub_100183618(v1, v2, v5);
  return Hasher._finalize()();
}

void sub_10024708C()
{
}

void sub_1002470A8()
{
}

void sub_1002470B4(uint64_t a1)
{
}

void sub_1002470C0(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(v1 + 16);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }

Swift::Int sub_10024710C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  __int16 v5 = *(_WORD *)(v0 + 32);
  Hasher._combine(_:)(0LL);
  sub_10018394C(v1, v2, v5);
  sub_100248328((uint64_t)v7, v1, v2, v5);
  String.hash(into:)(v7, v3, v4);
  sub_100183618(v1, v2, v5);
  return Hasher._finalize()();
}

void sub_100247224()
{
}

void sub_100247240()
{
}

uint64_t sub_10024724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100249390( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100256A04);
}

uint64_t sub_100247258()
{
  return 0x6E61486C6C75702ELL;
}

void sub_100247278()
{
  __asm { BR              X11 }

uint64_t sub_1002472D8@<X0>(__int16 a1@<W8>)
{
  return v2;
}

void sub_100247320()
{
}

void sub_100247340()
{
  __asm { BR              X10 }

Swift::Int sub_1002473A4()
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v7 = *(_WORD *)(v2 + 32);
  Hasher._combine(_:)(0LL);
  sub_10018390C(v2, v1, v0);
  sub_10018394C(v3, v4, v7);
  sub_100248328((uint64_t)v9, v3, v4, v7);
  String.hash(into:)(v9, v5, v6);
  sub_100183618(v3, v4, v7);
  sub_1001835D8(v2, v1, v0);
  return Hasher._finalize()();
}

void sub_1002474D4()
{
}

uint64_t sub_1002474F0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a6 + sub_100183478(v0 + 24) = a4;
  *(_WORD *)(a6 + 32) = a5;
  return result;
}

uint64_t sub_100247504(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  unsigned int v7 = *((unsigned __int16 *)v1 + 16);
  String.hash(into:)(a1, v3, v4);
  sub_10018390C(v5, v6, v7);
  sub_1002468A0(a1, v5, v6, v7);
  return sub_1001835D8(v5, v6, v7);
}

void sub_100247568(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  int v4 = *((unsigned __int16 *)v1 + 16);
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  __asm { BR              X10 }

Swift::Int sub_1002475D0()
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v7 = *(_WORD *)(v2 + 32);
  Hasher._combine(_:)(0LL);
  sub_10018390C(v2, v1, v0);
  sub_10018394C(v3, v4, v7);
  sub_100248328((uint64_t)v9, v3, v4, v7);
  String.hash(into:)(v9, v5, v6);
  sub_100183618(v3, v4, v7);
  sub_1001835D8(v2, v1, v0);
  return Hasher._finalize()();
}

void sub_100247700()
{
}

uint64_t sub_10024771C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  unsigned int v5 = *(unsigned __int16 *)(v0 + 32);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 32LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  sub_10018390C(v3, v4, v5);
  sub_100246664(v3, v4, v5);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_1001835D8(v3, v4, v5);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 40LL;
}

void sub_1002477EC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  int v8 = *((unsigned __int16 *)a1 + 16);
  uint64_t v9 = a2[1];
  BOOL v10 = v4 == *a2 && v5 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v9, 0LL) & 1) != 0) {
    sub_100256A04(v6, v7, v8);
  }
}

BOOL sub_100247880(uint64_t a1, uint64_t a2, __int16 a3)
{
  BOOL v3 = (a3 & 0xF800) != 0x3000 || a2 == 0;
  return !v3 && String.hasPrefix(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1002478CC(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v3 = 0LL;
  unsigned int v4 = a3 >> 11;
  if (v4 > 0xB || ((1 << v4) & 0x806) == 0) {
    return v3;
  }
  if (!a2) {
    return 0LL;
  }
  if (a1 == 926036842 && a2 == 0xE400000000000000LL) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 926036842LL, 0xE400000000000000LL, 0LL);
}

uint64_t sub_100247938(char a1, uint64_t a2, unsigned __int16 a3)
{
  int v3 = a3 >> 11;
  unsigned int v4 = HIBYTE(a3) & 1;
  if (v3 != 1) {
    unsigned int v4 = 0;
  }
  if (v3 == 4) {
    unsigned int v4 = a1 & 1;
  }
  if (v3 == 5) {
    return a1 & 1;
  }
  else {
    return v4;
  }
}

void sub_100247968(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }

uint64_t sub_1002479A8()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0x6E776F6E6B6E752ELL;
}

void sub_100247F7C()
{
}

void sub_100247F94()
{
}

void *sub_100248194(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10015DCE8(0, v1, 0);
    Swift::String v3 = (unsigned __int16 *)(a1 + 64);
    do
    {
      uint64_t v5 = *((void *)v3 - 4);
      unsigned int v4 = (void *)*((void *)v3 - 3);
      uint64_t v6 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      uint64_t v8 = *v3;
      swift_bridgeObjectRetain();
      sub_10018390C(v6, v7, v8);
      v9._uint64_t countAndFlagsBits = v5;
      v9._object = v4;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = 32LL;
      v10._object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      sub_10018390C(v6, v7, v8);
      v11._uint64_t countAndFlagsBits = sub_100246664(v6, v7, v8);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      sub_1001835D8(v6, v7, v8);
      v12._uint64_t countAndFlagsBits = 41LL;
      v12._object = (void *)0xE100000000000000LL;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_1001835D8(v6, v7, v8);
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10015DCE8(v13 > 1, v14 + 1, 1);
      }
      v3 += 20;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      id v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = 40LL;
      v15[5] = 0xE100000000000000LL;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_100248328(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }

uint64_t sub_100248374()
{
  return String.hash(into:)(v0, v1, v2);
}

void sub_1002483A8()
{
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(v1, v2, v3);
    sub_100183618(v2, v3, v0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_100248C10( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, char *))
{
  uint64_t v8 = a3(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 == *(void *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      char v19 = 1;
    }

    else
    {
      unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v17 = *(void *)(v12 + 72);
      uint64_t v18 = v15 - 1;
      do
      {
        sub_1001A80F8(a1 + v16, (uint64_t)v14, a3);
        sub_1001A80F8(a2 + v16, (uint64_t)v11, a3);
        char v19 = a4(v14, v11);
        sub_1001A813C((uint64_t)v11, a3);
        sub_1001A813C((uint64_t)v14, a3);
        BOOL v21 = v18-- != 0;
        if ((v19 & 1) == 0) {
          break;
        }
        v16 += v17;
      }

      while (v21);
    }
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t sub_100248D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 64);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  unsigned int v23 = *(unsigned __int16 *)(a2 + 64);
  if (v5 == v10 && v6 == v11
    || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v10, v11, 0LL), result = 0LL, (v14 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    sub_10018390C(v8, v7, v9);
    swift_bridgeObjectRetain();
    sub_10018390C(v12, v13, v23);
    char v22 = sub_100256A04(v8, v7, v9, v12, v13, v23);
    swift_bridgeObjectRelease();
    sub_1001835D8(v12, v13, v23);
    swift_bridgeObjectRelease();
    sub_1001835D8(v8, v7, v9);
    if ((v22 & 1) != 0)
    {
      if (v2 == 1) {
        return 1LL;
      }
      uint64_t v16 = *(void *)(a1 + 72);
      uint64_t v17 = *(void *)(a1 + 80);
      int v18 = *(unsigned __int16 *)(a1 + 104);
      uint64_t v19 = *(void *)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 80);
      BOOL v21 = v16 == v19 && v17 == v20;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v20, 0LL) & 1) != 0) {
        __asm { BR              X9 }
      }
    }

    return 0LL;
  }

  return result;
}

Swift::Int sub_1002492C0()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  __int16 v3 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0LL);
  sub_100248328((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100249318(uint64_t a1)
{
}

Swift::Int sub_100249324(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  __int16 v4 = *(_WORD *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_100248328((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

void sub_100249378()
{
}

uint64_t sub_100249384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100249390( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100246A08);
}

uint64_t sub_100249390( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int16 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int16 *)(a2 + 16));
}

void *sub_1002493B0()
{
  return &unk_10034F988;
}

void *sub_1002493BC()
{
  return &unk_10034F989;
}

void *sub_1002493C8()
{
  return &unk_10034F98A;
}

void *sub_1002493D4()
{
  return &unk_10034F98B;
}

void *sub_1002493E0()
{
  return &unk_10034F98C;
}

uint64_t sub_1002493EC(char a1)
{
  uint64_t v2 = 0x655369746C756D2ELL;
  switch(a1)
  {
    case 2:
      return v2;
    case 7:
      return 0xD000000000000013LL;
    case 3:
      return 0x626170756F72672ELL;
  }

  if ((a1 & 1) != 0)
  {
    uint64_t v3 = sub_1001E1164(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v3[2];
    unint64_t v5 = v3[3];
    unint64_t v6 = v4 + 1;
    if (v4 >= v5 >> 1)
    {
      unint64_t v29 = v4 + 1;
      unsigned int v23 = v3;
      unint64_t v24 = v3[2];
      BOOL v25 = sub_1001E1164((void *)(v5 > 1), v4 + 1, 1, v23);
      unint64_t v4 = v24;
      unint64_t v6 = v29;
      uint64_t v3 = v25;
    }

    v3[2] = v6;
    uint64_t v7 = (char *)&v3[2 * v4];
    strcpy(v7 + 32, ".singleSelect");
    *((_WORD *)v7 + 23) = -4864;
    if ((a1 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if ((a1 & 2) != 0)
  {
LABEL_12:
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_1001E1164(0LL, v3[2] + 1LL, 1, v3);
    }
    unint64_t v8 = v3[2];
    unint64_t v9 = v3[3];
    unint64_t v10 = v8 + 1;
    if (v8 >= v9 >> 1)
    {
      unint64_t v30 = v8 + 1;
      uint64_t v26 = v3;
      unint64_t v27 = v3[2];
      BOOL v28 = sub_1001E1164((void *)(v9 > 1), v8 + 1, 1, v26);
      unint64_t v8 = v27;
      unint64_t v10 = v30;
      uint64_t v3 = v28;
    }

    v3[2] = v10;
    uint64_t v11 = (char *)&v3[2 * v8];
    strcpy(v11 + 32, ".multiSelect");
    v11[45] = 0;
    *((_WORD *)v11 + 23) = -5120;
  }

uint64_t sub_1002496C8()
{
  return sub_1002493EC(*v0);
}

void sub_1002496D0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1002496D8(char *a1, uint64_t a2)
{
  unint64_t v30 = a1;
  uint64_t v4 = sub_100156B68(&qword_1003FC920);
  uint64_t v5 = __chkstk_darwin(v4);
  BOOL v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for RoutingSession.Properties(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v2;
  v16(v13, v2, v9);
  uint64_t v17 = sub_100156FEC( &qword_1003FC928,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.Properties,  (uint64_t)&protocol conformance descriptor for RoutingSession.Properties);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  uint64_t v18 = sub_100156FEC( &qword_1003FC930,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.Properties,  (uint64_t)&protocol conformance descriptor for RoutingSession.Properties);
  uint64_t v26 = a2;
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v18) ^ 1;
  uint64_t v29 = v4;
  Swift::String v20 = &v8[*(int *)(v4 + 48)];
  *unint64_t v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v22 = v26;
    v16(v20, v26, v9);
    v16(v13, v22, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v17);
    Swift::String v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }

  else
  {
    Swift::String v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }

  unsigned int v23 = &v28[*(int *)(v29 + 48)];
  v21(v23, v20, v9);
  v21(v30, v23, v9);
  return v19 & 1;
}

uint64_t sub_10024990C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100249928(char a1)
{
  switch(a1)
  {
    case 1:
      return 0x655369746C756D2ELL;
    case 4:
      return 0x6574756D2ELL;
    case 2:
      return 0x626170756F72672ELL;
  }

  if ((a1 & 1) != 0)
  {
    uint64_t v3 = sub_1001E1164(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v5 = v3[2];
    unint64_t v4 = v3[3];
    unint64_t v6 = v5 + 1;
    if (v5 >= v4 >> 1)
    {
      unsigned int v23 = sub_1001E1164((void *)(v4 > 1), v5 + 1, 1, v3);
      unint64_t v6 = v5 + 1;
      uint64_t v3 = v23;
    }

    v3[2] = v6;
    uint64_t v7 = &v3[2 * v5];
    v7[4] = 0x74756C6F7362612ELL;
    v7[5] = 0xE900000000000065LL;
    if ((a1 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if ((a1 & 2) != 0)
  {
LABEL_13:
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_1001E1164(0LL, v3[2] + 1LL, 1, v3);
    }
    unint64_t v9 = v3[2];
    unint64_t v8 = v3[3];
    unint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1)
    {
      unint64_t v24 = sub_1001E1164((void *)(v8 > 1), v9 + 1, 1, v3);
      unint64_t v10 = v9 + 1;
      uint64_t v3 = v24;
    }

    v3[2] = v10;
    uint64_t v11 = &v3[2 * v9];
    v11[4] = 0x766974616C65722ELL;
    v11[5] = 0xE900000000000065LL;
  }

_BYTE *sub_100249BE0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int sub_100249BEC()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100249C30()
{
}

Swift::Int sub_100249C58(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100249C98()
{
  return sub_100249928(*v0);
}

_BYTE *sub_100249CA0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_100249CB4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_100249CC8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100249CDC(_BYTE *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    _BYTE *v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_100249D0C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    _BYTE *v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_100249D38@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  _BYTE *v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_100249D5C(_BYTE *result)
{
  *v1 |= *result;
  return result;
}

_BYTE *sub_100249D70(_BYTE *result)
{
  *v1 &= *result;
  return result;
}

_BYTE *sub_100249D84(_BYTE *result)
{
  *v1 ^= *result;
  return result;
}

_BYTE *sub_100249D98@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100249DAC(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100249DC0(_BYTE *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100249DD4(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100249DE8()
{
  return *v0 == 0;
}

_BYTE *sub_100249DF8(_BYTE *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_100249E0C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100249E1C(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100249E28@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3 = sub_100258594(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_100249E64()
{
  return &unk_1003AB1F8;
}

uint64_t sub_100249E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v5 = sub_100156B68(&qword_1003F8920);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = 0x206F742065766F4DLL;
  unint64_t v29 = 0xE800000000000000LL;
  uint64_t result = MSVCopyLocalizedModelName(v6);
  if (result)
  {
    unint64_t v10 = (void *)result;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    unint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = v28;
    unint64_t v15 = v29;
    uint64_t v17 = enum case for RoutingItem.SelectionIndicator.none(_:);
    uint64_t v18 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v8, v17, v18);
    Swift::String v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v20(v8, 0LL, 1LL, v18);
    Swift::String v21 = (int *)type metadata accessor for HostedRoutingItem(0LL);
    uint64_t v22 = (uint64_t)a3 + v21[8];
    v20((char *)v22, 1LL, 1LL, v18);
    unsigned int v23 = (char *)a3 + v21[12];
    *(_DWORD *)unsigned int v23 = 0;
    v23[4] = 1;
    *a3 = 0xD000000000000010LL;
    a3[1] = 0x800000010033FBD0LL;
    a3[2] = v27;
    a3[3] = a2;
    a3[4] = v16;
    a3[5] = v15;
    unint64_t v24 = (char *)a3 + v21[14];
    *(void *)unint64_t v24 = 0LL;
    *((void *)v24 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = 0LL;
    *((_WORD *)v24 + 8) = 1536;
    type metadata accessor for Symbols();
    swift_bridgeObjectRetain();
    a3[6] = sub_100299D84(0LL, 0LL, 0x600u);
    a3[7] = v25;
    *((_BYTE *)a3 + v21[9]) = 0;
    *((_BYTE *)a3 + v21[10]) = 0;
    uint64_t result = sub_1001A831C((uint64_t)v8, v22, &qword_1003F8920);
    *((_BYTE *)a3 + v21[11]) = 0;
    *((_BYTE *)a3 + v21[16]) = 0;
    *((_BYTE *)a3 + v21[15]) = 1;
    *(_DWORD *)unsigned int v23 = 0;
    v23[4] = 1;
    *((_BYTE *)a3 + v21[13]) = 0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10024A07C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int16 a10, char a11, char a12, uint64_t a13, char a14, char a15, char a16, int a17, int a18, char a19, __int16 a20, char a21)
{
  uint64_t v27 = (int *)type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v28 = (uint64_t)a9 + v27[8];
  uint64_t v29 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
  unint64_t v30 = (char *)a9 + v27[12];
  *(_DWORD *)unint64_t v30 = 0;
  v30[4] = 1;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t v31 = (char *)a9 + v27[14];
  *(void *)uint64_t v31 = a7;
  *((void *)v31 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = a8;
  *((_WORD *)v31 + 8) = a10;
  type metadata accessor for Symbols();
  sub_10018390C(a7, a8, a10);
  unint64_t v32 = sub_100299D84(a7, a8, a10);
  uint64_t v34 = v33;
  sub_1001835D8(a7, a8, a10);
  a9[6] = v32;
  a9[7] = v34;
  *((_BYTE *)a9 + v27[9]) = a11;
  *((_BYTE *)a9 + v27[10]) = a12;
  uint64_t result = sub_1001A831C(a13, v28, &qword_1003F8920);
  *((_BYTE *)a9 + v27[11]) = a14;
  *((_BYTE *)a9 + v27[16]) = a15;
  *((_BYTE *)a9 + v27[15]) = a16;
  *(_DWORD *)unint64_t v30 = a18;
  v30[4] = a19 & 1;
  *((_BYTE *)a9 + v27[13]) = a21;
  return result;
}

uint64_t sub_10024A248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for HostedRoutingItem(0LL) + 60));
  uint64_t result = sub_1001A80F8(a1, a2, type metadata accessor for HostedRoutingItem);
  if (v4 == 1)
  {
    sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
    uint64_t v6 = sub_1002A8974();
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a2 + 32) = v6;
    *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = v8;
  }

  return result;
}

uint64_t sub_10024A2D0(uint64_t a1, uint64_t a2)
{
  v10[2] = a1;
  v10[3] = a2;
  v10[0] = 14906LL;
  v10[1] = 0xE200000000000000LL;
  unint64_t v2 = sub_1001AEDE0();
  char v3 = (void *)((uint64_t (*)(void *, uint64_t, uint64_t, void *, void *, unint64_t, unint64_t, void *))Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:))( v10,  1LL,  1LL,  &type metadata for String,  &type metadata for String,  v2,  v2,  &protocol witness table for Character);
  if (v3[2])
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = v3[5];
    uint64_t v6 = v3[6];
    uint64_t v7 = v3[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
    swift_bridgeObjectRelease();
    return v8;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_10024A3A0(uint64_t a1, uint64_t a2)
{
  v12[2] = a1;
  v12[3] = a2;
  v12[0] = 14906LL;
  v12[1] = 0xE200000000000000LL;
  unint64_t v2 = sub_1001AEDE0();
  uint64_t v3 = ((uint64_t (*)(void *, uint64_t, uint64_t, void *, void *, unint64_t, unint64_t, void *))Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:))( v12,  1LL,  1LL,  &type metadata for String,  &type metadata for String,  v2,  v2,  &protocol witness table for Character);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v3 + 32 * v4);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[2];
    uint64_t v9 = v5[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v10 = static String._fromSubstring(_:)(v6, v7, v8, v9);
    swift_bridgeObjectRelease();
    return v10;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_10024A474()
{
  Swift::UInt8 v1 = v0;
  uint64_t v2 = v0[3];
  if (v2)
  {
    uint64_t v9 = v0[2];
    uint64_t v10 = v0[3];
    swift_bridgeObjectRetain(v2);
    v3._uint64_t countAndFlagsBits = 14906LL;
    v3._object = (void *)0xE200000000000000LL;
    String.append(_:)(v3);
    uint64_t v5 = *v0;
    uint64_t v4 = (void *)v0[1];
    swift_bridgeObjectRetain(v10);
    v6._uint64_t countAndFlagsBits = v5;
    v6._object = v4;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v10);
    return v9;
  }

  else
  {
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain(v1[1]);
  }

  return v7;
}

void sub_10024A50C()
{
  uint64_t v1 = type metadata accessor for HostedRoutingItem(0LL);
  __asm { BR              X11 }

uint64_t sub_10024A568@<X0>(__int16 a1@<W8>)
{
  return v1;
}

void sub_10024A59C()
{
}

BOOL sub_10024A5A8()
{
  unsigned int v1 = *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0LL) + 56) + 16);
  return ((v1 >> 8) & 6 | (v1 >> 7) & 1) == 5;
}

BOOL sub_10024A5E0()
{
  unsigned int v1 = *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0LL) + 56) + 16);
  return ((v1 >> 8) & 6 | (v1 >> 7) & 1) == 1;
}

uint64_t sub_10024A618()
{
  unsigned int v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0LL) + 56));
  uint64_t v2 = *v1;
  unsigned int v3 = *((unsigned __int16 *)v1 + 8);
  uint64_t v4 = (v3 >> 8) & 6 | (v3 >> 7) & 1;
  unsigned int v5 = v3 >> 11;
  if ((v4 - 1) >= 5)
  {
    if ((_DWORD)v4) {
      return 0LL;
    }
  }

  else if (v3 >> 11 == 15)
  {
    return 1LL;
  }

  if ((_DWORD)v4)
  {
    if (v5 != 2)
    {
LABEL_10:
      if ((_DWORD)v4)
      {
        if (v5 != 3) {
LABEL_14:
        }
          __asm { BR              X13 }
      }

      else if (*(unsigned __int16 *)(v2 + 32) >> 11 != 3)
      {
        goto LABEL_14;
      }
    }
  }

  else if (*(unsigned __int16 *)(v2 + 32) >> 11 != 2)
  {
    goto LABEL_10;
  }

  return 1LL;
}

void sub_10024A710()
{
}

uint64_t sub_10024A71C()
{
  uint64_t v1 = v0[1];
  if (*v0 == 0xD000000000000010LL && v1 == 0x800000010033FBD0LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*v0, v1, 0xD000000000000010LL, 0x800000010033FBD0LL, 0LL);
  }
}

uint64_t sub_10024A768(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (char *)v2 + *(int *)(type metadata accessor for HostedRoutingItem(0LL) + 56);
  uint64_t v6 = *(void *)v5;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  int v8 = (v7 >> 8) & 6 | (v7 >> 7) & 1;
  if ((v8 - 1) >= 5)
  {
    if (v8) {
      goto LABEL_16;
    }
    unsigned int v7 = *(unsigned __int16 *)(v6 + 32);
    uint64_t v6 = *(void *)(v6 + 16);
  }

  unsigned int v9 = v7 >> 11;
  if (v9 == 10 || v9 == 9 || v9 == 8)
  {
    uint64_t v10 = *(void *)(v6 + 16);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      unint64_t v12 = (uint64_t *)(v10 + 40);
      do
      {
        uint64_t v13 = *(v12 - 1);
        uint64_t v14 = *v12;
        BOOL v15 = v13 == a1 && v14 == a2;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0LL) & 1) != 0) {
          return 1LL;
        }
        v12 += 5;
      }

      while (--v11);
    }
  }

uint64_t sub_10024A870()
{
  uint64_t v1 = (int *)type metadata accessor for HostedRoutingItem(0LL);
  if (*((_BYTE *)v0 + v1[16]) == 1)
  {
    uint64_t v2 = sub_1001E1164(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_1001E1164((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    unsigned int v5 = &v2[2 * v4];
    v5[4] = 0x64656C6261736964LL;
    v5[5] = 0xE800000000000000LL;
  }

  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  if (*((_BYTE *)v0 + v1[9]) == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1001E1164(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_1001E1164((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    int v8 = &v2[2 * v7];
    v8[4] = 0x64656B636970LL;
    v8[5] = 0xE600000000000000LL;
  }

  if (*((_BYTE *)v0 + v1[15]) == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1001E1164(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_1001E1164((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0x6C61636F6CLL;
    v11[5] = 0xE500000000000000LL;
  }

  _StringGuts.grow(_:)(68LL);
  v12._uint64_t countAndFlagsBits = 60LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._object = (void *)0x800000010034F980LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0x203A6469202D20LL;
  v14._object = (void *)0xE700000000000000LL;
  String.append(_:)(v14);
  if (v0[3])
  {
    uint64_t v47 = v0[2];
    uint64_t v48 = (void *)v0[3];
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = 14906LL;
    v15._object = (void *)0xE200000000000000LL;
    String.append(_:)(v15);
    uint64_t v16 = *v0;
    uint64_t v17 = (void *)v0[1];
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v47;
    Swift::String v20 = v48;
  }

  else
  {
    uint64_t v19 = *v0;
    Swift::String v20 = (void *)v0[1];
    swift_bridgeObjectRetain();
  }

  v21._uint64_t countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0x3A656C746974202CLL;
  v22._object = (void *)0xE900000000000020LL;
  String.append(_:)(v22);
  uint64_t v23 = v0[4];
  unint64_t v24 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x7265706F7270202CLL;
  v26._object = (void *)0xEF5B203A73656974LL;
  String.append(_:)(v26);
  uint64_t v27 = sub_100156B68(&qword_1003FA010);
  unint64_t v28 = sub_100200720();
  uint64_t v29 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v27, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x203A63202C5DLL;
  v33._object = (void *)0xE600000000000000LL;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = sub_1002493EC(*((_BYTE *)v0 + v1[11]));
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x203A65707974202CLL;
  v35._object = (void *)0xE800000000000000LL;
  String.append(_:)(v35);
  uint64_t v36 = (char *)v0 + v1[14];
  uint64_t v37 = *(void *)v36;
  uint64_t v38 = *((void *)v36 + 1);
  LODWORD(v3sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = *((unsigned __int16 *)v36 + 8);
  sub_10018390C(*(void *)v36, v38, v31);
  sub_100246664(v37, v38, (int)v31);
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  sub_1001835D8(v37, v38, v31);
  v40._uint64_t countAndFlagsBits = 0x203A6C6F76202C5DLL;
  v40._object = (void *)0xE800000000000000LL;
  String.append(_:)(v40);
  __int128 v41 = (float *)((char *)v0 + v1[12]);
  if (((_BYTE)v41[1] & 1) != 0)
  {
    unint64_t v42 = 0xE300000000000000LL;
    uint64_t v43 = 7104878LL;
  }

  else
  {
    uint64_t v43 = Float.description.getter(*v41);
    unint64_t v42 = v44;
  }

  unint64_t v45 = v42;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease();
  return 0LL;
}

void sub_10024AD00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003F8920);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v1;
  uint64_t v12 = v2[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v2[3];
  if (v13)
  {
    uint64_t v14 = v2[2];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v15 = v2[4];
  uint64_t v16 = v2[5];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = v2[6];
  uint64_t v18 = v2[7];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v17, v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = (int *)type metadata accessor for HostedRoutingItem(0LL);
  sub_1001A8360((uint64_t)v2 + v19[8], (uint64_t)v10, &qword_1003F8920);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    uint64_t v20 = sub_100156FEC( &qword_1003FC420,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator,  (uint64_t)&protocol conformance descriptor for RoutingItem.SelectionIndicator);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  Hasher._combine(_:)(*((_BYTE *)v2 + v19[9]));
  Hasher._combine(_:)(*((_BYTE *)v2 + v19[10]));
  Hasher._combine(_:)(*((_BYTE *)v2 + v19[11]));
  Swift::String v21 = (char *)v2 + v19[12];
  if (v21[4] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt32 v22 = *(_DWORD *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v23 = v22;
    }
    else {
      Swift::UInt32 v23 = 0;
    }
    Hasher._combine(_:)(v23);
  }

  Hasher._combine(_:)(*((_BYTE *)v2 + v19[13]));
  unint64_t v24 = (char *)v2 + v19[14];
  uint64_t v25 = *(void *)v24;
  uint64_t v26 = *((void *)v24 + 1);
  unsigned int v27 = *((unsigned __int16 *)v24 + 8);
  sub_10018390C(*(void *)v24, v26, v27);
  sub_1002468A0(a1, v25, v26, v27);
  sub_1001835D8(v25, v26, v27);
  Hasher._combine(_:)(*((_BYTE *)v2 + v19[15]));
  Hasher._combine(_:)(*((_BYTE *)v2 + v19[16]));
}

Swift::Int sub_10024AFF8(uint64_t a1, uint64_t a2)
{
  return sub_1002550F4(a1, a2, (void (*)(void *))sub_10024AD00);
}

Swift::Int sub_10024B008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100255144(a1, a2, a3, (void (*)(void *))sub_10024AD00);
}

uint64_t sub_10024B01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0LL;
  }
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

Swift::Int sub_10024B058()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

void sub_10024B0C4(uint64_t a1)
{
  uint64_t v3 = v1[1];
  if (v3)
  {
    uint64_t v4 = *v1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v3);
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

Swift::Int sub_10024B128(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, v2, v3);
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

uint64_t sub_10024B190()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 0x6C61636F6C2ELL;
  }
  uint64_t v2 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0x6E696F70646E652ELL;
}

uint64_t sub_10024B208(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = *a1;
  if (v5 == *a2 && v3 == v4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0LL);
  }
}

const char *sub_10024B258()
{
  return "LOCAL";
}

uint64_t sub_10024B264()
{
  return sub_1002504F8(type metadata accessor for HostedRoutingSourceSession);
}

uint64_t sub_10024B270()
{
  uint64_t v0 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:),  v0);
  char v7 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)(v6, v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t sub_10024B354@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v82 = a6;
  uint64_t v83 = a5;
  uint64_t v78 = a4;
  uint64_t v89 = a1;
  unint64_t v81 = a7;
  uint64_t v9 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v9);
  uint64_t v80 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RoutingControls(0LL);
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v68 - v14;
  uint64_t v16 = sub_100156B68(&qword_1003F9F28);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v77 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  os_log_type_t v90 = (char *)&v68 - v23;
  uint64_t v24 = sub_100156B68(&qword_1003F9450);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v76 = (uint64_t)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v68 - v27;
  sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
  id v86 = sub_1002A8918();
  id v29 = [a3 origin];
  id v30 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v31 = [v30 nowPlayingServer];

  id v75 = v29;
  id v32 = [v31 originClientForOrigin:v29];

  id v33 = [v32 activeNowPlayingClient];
  id v34 = [v33 activePlayerClient];

  id v35 = v32;
  id v36 = v34;
  uint64_t v87 = v28;
  id v88 = v36;
  sub_10024B984(v32, v34, v28);
  unsigned int v37 = [a3 canModifyGroupMembership];
  if (v35)
  {
    id v38 = v35;
    sub_1002992E0();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0LL, 1LL, v19);
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19);
    if ((_DWORD)v39 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v90, v18, v19);
      if (!v88) {
        goto LABEL_9;
      }
LABEL_7:
      id v40 = [v88 supportedRemoteControlCommands];
      if (v40)
      {
        __int128 v41 = v40;
        id v42 = v35;
        uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, (char *)&type metadata for Any + 8);

        unint64_t v44 = sub_100197300(v43);
        id v35 = v42;
        swift_bridgeObjectRelease();
        if (v44) {
          goto LABEL_10;
        }
      }

      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1LL, 1LL, v19);
  }

  static Date.distantPast.getter(v39);
  sub_1001603DC((uint64_t)v18, &qword_1003F9F28);
  if (v88) {
    goto LABEL_7;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  unint64_t v44 = _swiftEmptyArrayStorage;
LABEL_10:
  uint64_t v45 = v19;
  id v46 = a3;
  swift_bridgeObjectRetain();
  sub_10024D78C(v89, a2, (uint64_t)v44, v46, (uint64_t)v15);
  id v72 = v35;
  uint64_t v48 = v15;
  if (v35)
  {
    id v49 = v35;
    uint64_t v74 = sub_10029902C();

    id v50 = v49;
    uint64_t v73 = sub_100299038();
  }

  else
  {
    uint64_t v73 = _swiftEmptyArrayStorage;
    uint64_t v74 = _swiftEmptyArrayStorage;
  }

  int v71 = v37 ^ 1;
  __chkstk_darwin(v47);
  uint64_t v63 = v89;
  uint64_t v64 = a2;
  uint64_t v68 = a2;
  uint64_t v51 = (uint64_t)v87;
  uint64_t v65 = (uint64_t)v87;
  id v66 = v86;
  id v67 = v46;
  char v69 = sub_10024DDB4((void (*)(id *))sub_10025864C, (uint64_t)(&v68 - 8), v78);
  swift_bridgeObjectRelease();
  uint64_t v52 = v76;
  sub_1001A8360(v51, v76, &qword_1003F9450);
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v54 = (uint64_t)v77;
  uint64_t v70 = v45;
  v53(v77, v90, v45);
  [v46 volume];
  uint64_t v56 = v55;
  uint64_t v78 = v20;
  uint64_t v58 = v84;
  uint64_t v57 = v85;
  uint64_t v59 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v79, v48, v85);
  id v60 = [v46 deviceInfo];
  uint64_t v61 = v80;
  sub_1002A8704(v80);

  char v91 = 0;
  sub_10024E3B8( v89,  v68,  (uint64_t)v69,  v52,  (uint64_t)v74,  (uint64_t)v73,  v54,  v71,  v81,  v56,  SBYTE4(v56),  v59,  v83,  v82,  v61);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v57);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v90, v70);
  return sub_1001603DC((uint64_t)v87, &qword_1003F9450);
}

void sub_10024B984(id a1@<X0>, id a2@<X1>, char *a3@<X8>)
{
  uint64_t v358 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v357 = *(void *)(v358 - 8);
  __chkstk_darwin(v358);
  os_log_t v359 = (char *)&v330 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v363 = (char *)&v330 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v370 = (char *)&v330 - v11;
  uint64_t v12 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v12);
  uint64_t v351 = (char *)&v330 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.ProgressSnapshot(0LL);
  __chkstk_darwin(v14);
  uint64_t v354 = (char *)&v330 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType(0LL);
  uint64_t v367 = *(void *)(v16 - 8);
  uint64_t v368 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v356 = (char *)&v330 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v352 = (char *)&v330 - v20;
  __chkstk_darwin(v19);
  uint64_t v366 = (char *)&v330 - v21;
  uint64_t v362 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
  uint64_t v369 = *(void *)(v362 - 8);
  uint64_t v22 = __chkstk_darwin(v362);
  uint64_t v361 = (char *)&v330 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v350 = (char *)&v330 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v353 = (char *)&v330 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v360 = (char *)&v330 - v29;
  __chkstk_darwin(v28);
  uint64_t v372 = (char *)&v330 - v30;
  uint64_t v31 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo(0LL);
  uint64_t v364 = *(void *)(v31 - 8);
  uint64_t v365 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v355 = (char *)&v330 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  uint64_t v371 = (char *)&v330 - v34;
  uint64_t v35 = type metadata accessor for URL(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v38 = (char *)&v330 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_100156B68(&qword_1003FC438);
  uint64_t v40 = __chkstk_darwin(v39);
  id v42 = (char *)&v330 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  unint64_t v44 = (char *)&v330 - v43;
  if (!a1) {
    goto LABEL_19;
  }
  if (!a2)
  {
LABEL_20:

    uint64_t v80 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(a3, 1LL, 1LL, v80);
    return;
  }

  uint64_t v349 = v8;
  uint64_t v348 = v7;
  a1 = a1;
  a2 = a2;
  id v45 = [a2 playerPath];
  if (!v45
    || (id v46 = v45, v47 = [v45 client], v46, !v47))
  {

    goto LABEL_20;
  }

  id v48 = v47;
  id v49 = [v47 bundleIdentifier];
  if (!v49)
  {

LABEL_19:
    a1 = a2;
    goto LABEL_20;
  }

  id v343 = v49;
  uint64_t v344 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  uint64_t v345 = v50;
  id v51 = [a2 nowPlayingContentItem];
  uint64_t v52 = &selRef_alertMessage;
  v342 = a3;
  id v347 = a2;
  id v341 = v51;
  id v346 = v48;
  if (!v51)
  {
    uint64_t v81 = 0LL;
LABEL_36:
    uint64_t v62 = v345;
    uint64_t v63 = v344;
    unsigned int v55 = v52;
    goto LABEL_37;
  }

  id v340 = [a1 deviceInfo];
  id v53 = [a2 playerPath];
  if (!v53)
  {
LABEL_154:

    __break(1u);
    goto LABEL_155;
  }

  uint64_t v54 = v53;
  unsigned int v55 = &selRef_alertMessage;
  id v56 = [v53 origin];

  id v57 = v341;
  if (!v56)
  {
LABEL_155:

    __break(1u);
    goto LABEL_156;
  }

  unsigned __int8 v58 = [v56 isLocallyHosted];

  id v82 = [v57 metadata];
  if (!v82
    || (uint64_t v83 = v82,
        id v84 = [v82 artworkURLTemplates],
        v83,
        !v84))
  {
LABEL_118:
    id v258 = [v57 availableRemoteArtworkFormats];
    if (v258)
    {
      uint64_t v259 = v258;
      uint64_t v260 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v258, &type metadata for String);

      id v339 = (id)MRContentItemArtworkFormatStandard;
      uint64_t v261 = static String._unconditionallyBridgeFromObjectiveC(_:)(MRContentItemArtworkFormatStandard);
      char v263 = sub_1002553D0(v261, v262, v260);
      unsigned int v55 = &selRef_alertMessage;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v263 & 1) != 0)
      {
        id v264 = [v347 playerPath];
        if (!v264)
        {
LABEL_158:

          __break(1u);
          goto LABEL_159;
        }

        uint64_t v265 = v264;
        id v266 = [v264 data];

        uint64_t v267 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v266);
        uint64_t v269 = v268;

        id v270 = [v57 identifier];
        if (!v270)
        {
LABEL_159:

          __break(1u);
          goto LABEL_160;
        }

        uint64_t v271 = v270;
        id v272 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        unint64_t v274 = v273;

        id v275 = [v57 metadata];
        unint64_t v337 = v274;
        if (v275
          && (uint64_t v276 = v275,
              id v277 = [v275 artworkIdentifier],
              v276,
              v277))
        {
          uint64_t v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
          uint64_t v280 = v279;
        }

        else
        {
          uint64_t v278 = 0LL;
          uint64_t v280 = 0LL;
        }

        id v285 = [v57 remoteArtworks];
        if (v285)
        {
          uint64_t v286 = sub_10016083C(0LL, &qword_1003FC440, &OBJC_CLASS___MRRemoteArtwork_ptr);
          uint64_t v287 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v285,  &type metadata for String,  v286,  &protocol witness table for String);

          uint64_t v288 = static String._unconditionallyBridgeFromObjectiveC(_:)(v339);
          if (*(void *)(v287 + 16))
          {
            unint64_t v290 = sub_10015CAD4(v288, v289);
            if ((v291 & 1) != 0)
            {
              id v292 = *(id *)(*(void *)(v287 + 56) + 8 * v290);
              id v339 = v272;
              uint64_t v293 = v267;
              uint64_t v294 = v269;
              id v295 = v292;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v296 = [v295 protobufData];

              uint64_t v269 = v294;
              uint64_t v267 = v293;
              id v272 = v339;
              id v285 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v296);
              unint64_t v298 = v297;

              unsigned int v55 = &selRef_alertMessage;
LABEL_143:
              type metadata accessor for ArtworkToken(0LL);
              uint64_t v81 = ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)( v267,  v269,  v272,  v337,  v278,  v280,  1LL,  0LL,  v285,  v298);

              goto LABEL_23;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v285 = 0LL;
        }

        unint64_t v298 = 0xF000000000000000LL;
        goto LABEL_143;
      }
    }

    id v281 = [v57 metadata];
    if (!v281)
    {
LABEL_11:
      id v59 = [v57 metadata];
      if (v59)
      {
        id v60 = v59;
        unsigned __int8 v61 = [v59 artworkAvailable];
        uint64_t v62 = v345;
        uint64_t v63 = v344;
        if ((v61 & 1) == 0)
        {

          uint64_t v81 = 0LL;
          id v48 = v346;
          goto LABEL_37;
        }

        id v64 = [v347 playerPath];
        if (!v64)
        {
LABEL_156:

          __break(1u);
          goto LABEL_157;
        }

        uint64_t v65 = v64;
        id v66 = [v64 data];

        uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
        uint64_t v69 = v68;

        id v70 = [v57 identifier];
        if (!v70)
        {
LABEL_157:

          __break(1u);
          goto LABEL_158;
        }

        int v71 = v70;
        uint64_t v52 = v55;
        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        uint64_t v74 = v73;

        id v75 = [v60 artworkIdentifier];
        if (v75)
        {
          uint64_t v76 = v75;
          uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
          uint64_t v79 = v78;
        }

        else
        {
          uint64_t v77 = 0LL;
          uint64_t v79 = 0LL;
        }

        type metadata accessor for ArtworkToken(0LL);
        uint64_t v81 = ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)( v67,  v69,  v72,  v74,  v77,  v79,  0LL,  0LL,  0LL,  0xF000000000000000LL);

        id v48 = v346;
        goto LABEL_36;
      }

      uint64_t v81 = 0LL;
LABEL_23:
      id v48 = v346;
      uint64_t v62 = v345;
      uint64_t v63 = v344;
      goto LABEL_37;
    }

    uint64_t v282 = v281;
    id v283 = [v281 artworkURL];

    if (v283)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v283);

      uint64_t v284 = 0LL;
    }

    else
    {
      uint64_t v284 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v42, v284, 1LL, v35);
    sub_10025867C((uint64_t)v42, (uint64_t)v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v44, 1LL, v35))
    {
      sub_1001603DC((uint64_t)v44, &qword_1003FC438);
      goto LABEL_11;
    }

    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v38, v44, v35);
    uint64_t v299 = sub_1001603DC((uint64_t)v44, &qword_1003FC438);
    URL.absoluteString.getter(v299);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    id v300 = objc_allocWithZone(&OBJC_CLASS___MRRemoteArtwork);
    NSString v301 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v302 = [v300 initWithArtworkURLString:v301 templateData:0];

    id v303 = [v347 playerPath];
    if (!v303)
    {
LABEL_162:

      __break(1u);
      goto LABEL_163;
    }

    uint64_t v304 = v303;
    id v305 = [v303 data];

    uint64_t v306 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v305);
    uint64_t v308 = v307;

    id v309 = [v57 identifier];
    if (!v309)
    {
LABEL_163:

      __break(1u);
      return;
    }

    uint64_t v310 = v309;
    uint64_t v311 = static String._unconditionallyBridgeFromObjectiveC(_:)(v309);
    v313 = v312;

    id v314 = [v57 metadata];
    v315 = v314;
    id v339 = v313;
    unint64_t v337 = v311;
    if (v314)
    {
      id v316 = [v314 artworkIdentifier];

      uint64_t v317 = v306;
      if (v316)
      {
        v315 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v316);
        uint64_t v319 = v318;

LABEL_151:
        type metadata accessor for ArtworkToken(0LL);
        id v325 = [v302 protobufData];
        uint64_t v326 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v325);
        uint64_t v327 = v302;
        uint64_t v329 = v328;

        uint64_t v81 = ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)( v317,  v308,  v337,  v339,  v315,  v319,  1LL,  0LL,  v326,  v329);
        goto LABEL_152;
      }

      v315 = 0LL;
    }

    else
    {
      uint64_t v317 = v306;
    }

    uint64_t v319 = 0LL;
    goto LABEL_151;
  }

  uint64_t v85 = sub_100156B68(&qword_1003FA078);
  uint64_t v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v84, v85);

  if (!*(void *)(v86 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v374 = 0LL;
  id v89 = [v87 dataWithJSONObject:isa options:0 error:&v374];

  os_log_type_t v90 = v374;
  if (!v89)
  {
    uint64_t v255 = v90;
    uint64_t v256 = _convertNSErrorToError(_:)();

    swift_willThrow(v257);
    swift_errorRelease(v256);
    unsigned int v55 = &selRef_alertMessage;
    goto LABEL_118;
  }

  char v91 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
  unint64_t v93 = v92;

  id v94 = objc_allocWithZone(&OBJC_CLASS___MRRemoteArtwork);
  sub_100160874((uint64_t)v91, v93);
  Class v95 = Data._bridgeToObjectiveC()().super.isa;
  sub_1001608B8((uint64_t)v91, v93);
  id v96 = [v94 initWithArtworkURLString:0 templateData:v95];

  id v97 = [v347 playerPath];
  if (!v97)
  {
LABEL_160:

    __break(1u);
    goto LABEL_161;
  }

  uint64_t v98 = v97;
  id v99 = [v97 data];

  uint64_t v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
  uint64_t v102 = v101;

  id v103 = [v57 identifier];
  if (!v103)
  {
LABEL_161:

    __break(1u);
    goto LABEL_162;
  }

  uint64_t v104 = v103;
  uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
  uint64_t v335 = v106;

  id v107 = [v57 metadata];
  uint64_t v108 = v107;
  id v339 = v91;
  unint64_t v337 = v93;
  uint64_t v336 = v105;
  if (!v107)
  {
    uint64_t v110 = v102;
    uint64_t v111 = v100;
LABEL_147:
    uint64_t v113 = 0LL;
    goto LABEL_148;
  }

  id v109 = [v107 artworkIdentifier];

  uint64_t v110 = v102;
  uint64_t v111 = v100;
  if (!v109)
  {
    uint64_t v108 = 0LL;
    goto LABEL_147;
  }

  uint64_t v108 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  uint64_t v113 = v112;

LABEL_148:
  type metadata accessor for ArtworkToken(0LL);
  id v320 = [v96 protobufData];
  v321 = v96;
  uint64_t v322 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v320);
  uint64_t v324 = v323;

  uint64_t v81 = ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)( v111,  v110,  v336,  v335,  v108,  v113,  1LL,  0LL,  v322,  v324);
  sub_1001608B8((uint64_t)v339, v337);

LABEL_152:
  id v48 = v346;
  uint64_t v62 = v345;
  uint64_t v63 = v344;
  unsigned int v55 = &selRef_alertMessage;
LABEL_37:
  id v114 = [v48 bundleIdentifierHierarchy];
  if (!v114)
  {

    swift_release(v81);
    __break(1u);
    goto LABEL_154;
  }

  uint64_t v115 = v48;
  id v116 = v114;
  uint64_t v117 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v114, &type metadata for String);

  unsigned int v118 = [v115 processIdentifier];
  id v119 = [a1 v55[458]];
  id v120 = [v119 systemMediaApplication];

  if (!v120) {
    goto LABEL_45;
  }
  uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
  uint64_t v123 = v122;

  if (v63 != v121 || v62 != v123)
  {
    char v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v62, v121, v123, 0LL);
    swift_bridgeObjectRelease();
    if ((v124 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      goto LABEL_44;
    }

void sub_10024D78C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_100156B68(&qword_1003FC428);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68(&qword_1003FC430);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain();
  sub_100251AB8(a1, a2, a3, a5);
  unsigned __int8 v16 = [a4 volumeCapabilities];
  if ((v16 & 2) != 0)
  {
    swift_bridgeObjectRetain();
    RoutingControls.AbsoluteVolumeControl.init(sessionIdentifier:)(a1, a2);
    uint64_t v17 = type metadata accessor for RoutingControls.AbsoluteVolumeControl(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v15, 0LL, 1LL, v17);
    RoutingControls.absoluteVolume.setter(v15);
  }

  if ((v16 & 1) != 0)
  {
    RoutingControls.RelativeVolumeControl.init(sessionIdentifier:)(a1, a2);
    uint64_t v18 = type metadata accessor for RoutingControls.RelativeVolumeControl(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v12, 0LL, 1LL, v18);
    RoutingControls.relativeVolume.setter(v12);
  }

  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10024D90C@<X0>( id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  id v73 = a5;
  id v74 = a6;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v10 = sub_100156B68(&qword_1003F8920);
  __chkstk_darwin(v10);
  uint64_t v77 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unsigned __int8 v16 = &v63[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v18 = &v63[-v17];
  uint64_t v19 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v19);
  uint64_t v21 = &v63[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v22 = *a1;
  id v23 = [*a1 uid];
  if (!v23) {
    goto LABEL_6;
  }
  uint64_t v24 = v23;
  uint64_t v71 = v13;
  uint64_t v25 = a4;
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v27 = v26;
  id v28 = [v22 name];
  if (!v28)
  {
    swift_bridgeObjectRelease();

LABEL_6:
    uint64_t v36 = type metadata accessor for HostedRoutingItem(0LL);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( a7,  1LL,  1LL,  v36);
  }

  uint64_t v29 = v28;
  uint64_t v70 = v27;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v65 = v31;
  uint64_t v66 = v30;

  uint64_t v32 = sub_10021924C();
  uint64_t v68 = v33;
  uint64_t v69 = v32;
  unsigned int v67 = v34;
  sub_1001A8360(v25, (uint64_t)v21, &qword_1003F9450);
  uint64_t v35 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v21, 1LL, v35) == 1)
  {
    sub_1001603DC((uint64_t)v21, &qword_1003F9450);
    int v64 = 0;
  }

  else
  {
    RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
    uint64_t v38 = v71;
    (*(void (**)(_BYTE *, void, uint64_t))(v71 + 104))( v16,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:),  v12);
    int v64 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)(v18, v16);
    uint64_t v39 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
    v39(v16, v12);
    v39(v18, v12);
    sub_1001A813C((uint64_t)v21, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  uint64_t v40 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  uint64_t v41 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL);
  v41(v77, 1LL, 1LL, v40);
  LODWORD(v7sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = sub_100217B34();
  BOOL v42 = 1;
  if (([v73 matchesUID:v24] & 1) == 0)
  {
    uint64_t v43 = sub_10021924C();
    BOOL v42 = ((v44 >> 8) & 6 | (v44 >> 7) & 1) == 5;
    sub_1001835D8(v43, v45, v44);
  }

  LODWORD(v73) = v42;
  id v46 = v74;
  [v74 volumeForOutputDeviceUID:v24];
  int v48 = v47;
  LOBYTE(v46) = [v46 volumeControlCapabilitiesForOutputDeviceUID:v24];

  char v49 = sub_1002585CC((char)v46);
  uint64_t v50 = (int *)type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v51 = (uint64_t)a7 + v50[8];
  v41((_BYTE *)v51, 1LL, 1LL, v40);
  uint64_t v52 = (char *)a7 + v50[12];
  *(_DWORD *)uint64_t v52 = 0;
  v52[4] = 1;
  uint64_t v54 = v69;
  uint64_t v53 = v70;
  *a7 = v72;
  a7[1] = v53;
  uint64_t v55 = v76;
  a7[2] = v75;
  a7[3] = v55;
  uint64_t v56 = v65;
  a7[4] = v66;
  a7[5] = v56;
  id v57 = (char *)a7 + v50[14];
  uint64_t v58 = v68;
  *(void *)id v57 = v54;
  *((void *)v57 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = v58;
  unsigned int v59 = v67;
  *((_WORD *)v57 + 8) = v67;
  type metadata accessor for Symbols();
  swift_bridgeObjectRetain();
  sub_10018390C(v54, v58, v59);
  unint64_t v60 = sub_100299D84(v54, v58, v59);
  uint64_t v62 = v61;
  sub_1001835D8(v54, v58, v59);
  a7[6] = v60;
  a7[7] = v62;
  *((_BYTE *)a7 + v50[9]) = 1;
  *((_BYTE *)a7 + v50[10]) = v64 & 1;
  sub_1001A831C((uint64_t)v77, v51, &qword_1003F8920);
  *((_BYTE *)a7 + v50[11]) = v71;
  *((_BYTE *)a7 + v50[16]) = 0;
  *((_BYTE *)a7 + v50[15]) = (_BYTE)v73;
  *(_DWORD *)uint64_t v52 = v48;
  v52[4] = 0;
  *((_BYTE *)a7 + v50[13]) = v49;
  return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v50 - 1) + 56LL))(a7, 0LL, 1LL, v50);
}

void *sub_10024DDB4(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a1;
  uint64_t v6 = sub_100156B68(&qword_1003F8918);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v9 = __chkstk_darwin(v28);
  uint64_t v27 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v25 = (uint64_t)&v23 - v11;
  uint64_t v12 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    unint64_t v26 = a3 & 0xC000000000000001LL;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4LL;
    uint64_t v24 = a3;
    while (1)
    {
      id v15 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a3) : *(id *)(a3 + 8 * v14);
      unsigned __int8 v16 = v15;
      uint64_t v17 = v14 - 3;
      if (__OFADD__(v14 - 4, 1LL)) {
        break;
      }
      id v31 = v15;
      v29(&v31);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v13;
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1LL, v28) == 1)
      {
        sub_1001603DC((uint64_t)v8, &qword_1003F8918);
      }

      else
      {
        uint64_t v18 = v25;
        sub_1001A81D4((uint64_t)v8, v25, type metadata accessor for HostedRoutingItem);
        sub_1001A81D4(v18, v27, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
          uint64_t v13 = (void *)sub_100256778( 0LL,  v13[2] + 1LL,  1,  v13,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        unint64_t v20 = v13[2];
        unint64_t v19 = v13[3];
        if (v20 >= v19 >> 1) {
          uint64_t v13 = (void *)sub_100256778( v19 > 1,  v20 + 1,  1,  v13,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        v13[2] = v20 + 1;
        sub_1001A81D4( v27,  (uint64_t)v13 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
        + *(void *)(v30 + 72) * v20,
          type metadata accessor for HostedRoutingItem);
        a3 = v24;
      }

      ++v14;
      if (v17 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }

    __break(1u);
LABEL_20:
    if (a3 < 0) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

char *sub_10024E0A8(uint64_t a1)
{
  uint64_t v3 = sub_100156B68(&qword_1003F94C0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v27 - v7;
  uint64_t v9 = sub_100156B68(&qword_1003FC4E8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingSession(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v30 = (char *)v27 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17) {
    return (char *)_swiftEmptyArrayStorage;
  }
  v27[1] = v1;
  unsigned int v34 = v15;
  uint64_t v18 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  uint64_t v32 = v19;
  uint64_t v33 = v18;
  uint64_t v31 = *(void *)(v19 + 72);
  v27[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v21 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v13;
  uint64_t v29 = v6;
  do
  {
    sub_1001A80F8(v20, (uint64_t)v8, type metadata accessor for HostedRoutingSession);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v8, 0LL, 1LL, v33);
    sub_1001A8360((uint64_t)v8, (uint64_t)v6, &qword_1003F94C0);
    sub_100252210((uint64_t)v6, (uint64_t)v11);
    sub_1001603DC((uint64_t)v8, &qword_1003F94C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_1001603DC((uint64_t)v11, &qword_1003FC4E8);
    }

    else
    {
      id v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      uint64_t v23 = v30;
      v22(v30, v11, v12);
      v22(v34, v23, v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
        uint64_t v21 = (char *)sub_100256778( 0LL,  *((void *)v21 + 2) + 1LL,  1,  v21,  &qword_1003FC918,  (uint64_t (*)(void))&type metadata accessor for RoutingSession);
      }
      unint64_t v25 = *((void *)v21 + 2);
      unint64_t v24 = *((void *)v21 + 3);
      if (v25 >= v24 >> 1) {
        uint64_t v21 = (char *)sub_100256778( v24 > 1,  v25 + 1,  1,  v21,  &qword_1003FC918,  (uint64_t (*)(void))&type metadata accessor for RoutingSession);
      }
      *((void *)v21 + 2) = v25 + 1;
      uint64_t v13 = v28;
      v22( &v21[((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
           + *(void *)(v28 + 72) * v25],
        v34,
        v12);
      uint64_t v6 = v29;
    }

    v20 += v31;
    --v17;
  }

  while (v17);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_10024E3B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19 = (int *)type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v20 = (uint64_t)a9 + v19[7];
  uint64_t v21 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  id v22 = (void *)((char *)a9 + v19[11]);
  *id v22 = 0LL;
  v22[1] = 0LL;
  uint64_t v23 = (char *)a9 + v19[12];
  *(_DWORD *)uint64_t v23 = 0;
  v23[4] = 1;
  uint64_t v24 = (uint64_t)a9 + v19[14];
  uint64_t v25 = type metadata accessor for RoutingSession.HostInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v24, 1LL, 1LL, v25);
  *a9 = a1;
  a9[1] = a2;
  a9[4] = a3;
  swift_bridgeObjectRetain();
  uint64_t v40 = a4;
  sub_1002586C4(a4, v20, &qword_1003F9450);
  *(void *)((char *)a9 + v19[9]) = a5;
  *(void *)((char *)a9 + v19[10]) = a6;
  unint64_t v26 = (char *)a9 + v19[15];
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v26, a7, v27);
  *((_BYTE *)a9 + v19[13]) = a8;
  *(_DWORD *)uint64_t v23 = a10;
  v23[4] = a11 & 1;
  uint64_t v29 = (char *)a9 + v19[8];
  uint64_t v30 = type metadata accessor for RoutingControls(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, a12, v30);
  a9[2] = a13;
  a9[3] = a14;
  sub_1002586C4(a15, v24, &qword_1003F9448);
  if (*(void *)(a3 + 16))
  {
    type metadata accessor for Symbols();
    uint64_t v32 = sub_10029956C(a3);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    sub_1001603DC(a15, &qword_1003F9448);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a12, v30);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a7, v27);
    sub_1001603DC(v40, &qword_1003F9450);
    uint64_t result = swift_bridgeObjectRelease();
    *id v22 = v32;
    v22[1] = v34;
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_1001603DC(a15, &qword_1003F9448);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a12, v30);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a7, v27);
    return sub_1001603DC(v40, &qword_1003F9450);
  }

  return result;
}

unint64_t sub_10024E65C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x3A736D657469202CLL;
  v4._object = (void *)0xE900000000000020LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v6 = swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = Array.description.getter(v6, v5);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 62LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0xD00000000000002ALL;
}

uint64_t sub_10024E754()
{
  uint64_t v1 = v0;
  uint64_t v2 = 7104878LL;
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(164LL);
  v10._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v10._object = (void *)0x800000010034F9A0LL;
  String.append(_:)(v10);
  v11._object = (void *)0x800000010033FC60LL;
  v11._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v11);
  uint64_t v12 = *v0;
  uint64_t v13 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v15._object = (void *)0x800000010033FC80LL;
  String.append(_:)(v15);
  uint64_t v16 = (int *)type metadata accessor for HostedRoutingSourceSession(0LL);
  if (*((_BYTE *)v0 + v16[13])) {
    uint64_t v17 = 1702195828LL;
  }
  else {
    uint64_t v17 = 0x65736C6166LL;
  }
  if (*((_BYTE *)v0 + v16[13])) {
    unint64_t v18 = 0xE400000000000000LL;
  }
  else {
    unint64_t v18 = 0xE500000000000000LL;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6C6F76202020200ALL;
  v20._object = (void *)0xED0000203A656D75LL;
  String.append(_:)(v20);
  uint64_t v21 = (float *)((char *)v0 + v16[12]);
  if (((_BYTE)v21[1] & 1) != 0)
  {
    unint64_t v22 = 0xE300000000000000LL;
    uint64_t v23 = 7104878LL;
  }

  else
  {
    uint64_t v23 = Float.description.getter(*v21);
    unint64_t v22 = v24;
  }

  unint64_t v25 = v22;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x657469202020200ALL;
  v26._object = (void *)0xEC0000000A3A736DLL;
  String.append(_:)(v26);
  uint64_t v27 = v0[4];
  int64_t v28 = *(void *)(v27 + 16);
  uint64_t v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    uint64_t v58 = v9;
    unsigned int v59 = v16;
    unint64_t v60 = v0;
    int v64 = _swiftEmptyArrayStorage;
    uint64_t v30 = v27;
    swift_bridgeObjectRetain();
    sub_10015DCE8(0, v28, 0);
    uint64_t v31 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v57 = v30;
    uint64_t v32 = v30 + ((v31 + 32) & ~v31);
    uint64_t v61 = *(void *)(v4 + 72);
    do
    {
      sub_1001A80F8(v32, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
      uint64_t v62 = 0x2020202020202020LL;
      unint64_t v63 = 0xE800000000000000LL;
      v33._uint64_t countAndFlagsBits = sub_10024A870();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      uint64_t v34 = v62;
      unint64_t v35 = v63;
      sub_1001A813C((uint64_t)v6, type metadata accessor for HostedRoutingItem);
      uint64_t v29 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_10015DCE8(0, v29[2] + 1LL, 1);
        uint64_t v29 = v64;
      }

      unint64_t v37 = v29[2];
      unint64_t v36 = v29[3];
      if (v37 >= v36 >> 1)
      {
        sub_10015DCE8(v36 > 1, v37 + 1, 1);
        uint64_t v29 = v64;
      }

      void v29[2] = v37 + 1;
      uint64_t v38 = &v29[2 * v37];
      v38[4] = v34;
      uint64_t v38[5] = v35;
      v32 += v61;
      --v28;
    }

    while (v28);
    swift_bridgeObjectRelease();
    uint64_t v16 = v59;
    uint64_t v1 = v60;
    uint64_t v2 = 7104878LL;
    uint64_t v9 = v58;
  }

  uint64_t v62 = (uint64_t)v29;
  uint64_t v39 = sub_100156B68(&qword_1003FA010);
  unint64_t v40 = sub_100200720();
  uint64_t v41 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v39, v40);
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._object = (void *)0x800000010033FCA0LL;
  v45._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v45);
  sub_1001A8360((uint64_t)v1 + v16[7], (uint64_t)v9, &qword_1003F9450);
  uint64_t v46 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48LL))(v9, 1LL, v46) == 1)
  {
    sub_1001603DC((uint64_t)v9, &qword_1003F9450);
    int v47 = (void *)0xE300000000000000LL;
  }

  else
  {
    uint64_t v2 = sub_10024EC4C();
    int v47 = v48;
    sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  v49._uint64_t countAndFlagsBits = v2;
  v49._object = v47;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v50._object = (void *)0x800000010033FCC0LL;
  String.append(_:)(v50);
  uint64_t v51 = swift_bridgeObjectRetain();
  v52._uint64_t countAndFlagsBits = Array.description.getter(v51, &type metadata for String);
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  v53._object = (void *)0x800000010033FCF0LL;
  String.append(_:)(v53);
  uint64_t v54 = swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = Array.description.getter(v54, &type metadata for String);
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t sub_10024EC4C()
{
  uint64_t v1 = 7104878LL;
  _StringGuts.grow(_:)(166LL);
  v2._uint64_t countAndFlagsBits = 0x6979616C50776F4ELL;
  v2._object = (void *)0xEE006F666E49676ELL;
  String.append(_:)(v2);
  v3._object = (void *)0x800000010033FD20LL;
  v3._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(unsigned int *)(v0 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 44);
  sub_1001A8278(v4, v5, *(_BYTE *)(v0 + 44));
  sub_10024F8A4(v4, v5 | (v6 << 32));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_1001A0918(v4, v5, v6);
  v8._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v8._object = (void *)0x800000010033FD40LL;
  String.append(_:)(v8);
  if (*(void *)(v0 + 8))
  {
    uint64_t v9 = *(void *)v0;
    Swift::String v10 = *(void **)(v0 + 8);
  }

  else
  {
    Swift::String v10 = (void *)0xE300000000000000LL;
    uint64_t v9 = 7104878LL;
  }

  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v12._object = (void *)0x800000010033FD60LL;
  String.append(_:)(v12);
  if (*(void *)(v0 + 24))
  {
    uint64_t v13 = *(void *)(v0 + 16);
    Swift::String v14 = *(void **)(v0 + 24);
  }

  else
  {
    Swift::String v14 = (void *)0xE300000000000000LL;
    uint64_t v13 = 7104878LL;
  }

  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v16._object = (void *)0x800000010033FD80LL;
  String.append(_:)(v16);
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v17 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
  uint64_t v18 = sub_100156FEC( &qword_1003FC448,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.NowPlayingInfo.PlaybackInfo);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x800000010033FDA0LL;
  v20._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v20);
  uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
  uint64_t v22 = sub_100156FEC( &qword_1003FC450,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.NowPlayingInfo.TrackInfo);
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v24._object = (void *)0x800000010033FDC0LL;
  String.append(_:)(v24);
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = dispatch thunk of ArtworkToken.description.getter();
    Swift::String v26 = v25;
  }

  else
  {
    Swift::String v26 = (void *)0xE300000000000000LL;
  }

  v27._uint64_t countAndFlagsBits = v1;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  v28._object = (void *)0x800000010033FDE0LL;
  String.append(_:)(v28);
  uint64_t v29 = swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = Array.description.getter(v29, &type metadata for String);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_10024EF84(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v58 = type metadata accessor for RoutingSession.HostInfo(0LL);
  uint64_t v4 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  Swift::String v55 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *v1;
  uint64_t v19 = v2[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = v2[3];
  uint64_t v57 = v4;
  if (v20)
  {
    uint64_t v21 = v2[2];
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v21, v20);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  uint64_t v22 = v2[4];
  Hasher._combine(_:)(*(void *)(v22 + 16));
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v54 = v10;
    uint64_t v24 = v22 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v25 = *(void *)(v15 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A80F8(v24, (uint64_t)v17, type metadata accessor for HostedRoutingItem);
      sub_10024AD00(a1);
      sub_1001A813C((uint64_t)v17, type metadata accessor for HostedRoutingItem);
      v24 += v25;
      --v23;
    }

    while (v23);
    swift_bridgeObjectRelease();
    Swift::String v10 = v54;
  }

  Swift::String v26 = (int *)type metadata accessor for HostedRoutingSourceSession(0LL);
  sub_1001A8360((uint64_t)v2 + v26[7], (uint64_t)v13, &qword_1003F9450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v13, 1LL, v60) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_1001A81D4((uint64_t)v13, (uint64_t)v10, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    Hasher._combine(_:)(1u);
    sub_10024FFE8(a1);
    sub_1001A813C((uint64_t)v10, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  uint64_t v28 = (uint64_t)v56;
  uint64_t v27 = v57;
  uint64_t v29 = type metadata accessor for RoutingControls(0LL);
  uint64_t v30 = sub_100156FEC( &qword_1003FC458,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControls,  (uint64_t)&protocol conformance descriptor for RoutingControls);
  dispatch thunk of Hashable.hash(into:)(a1, v29, v30);
  uint64_t v31 = *(void *)((char *)v2 + v26[9]);
  Hasher._combine(_:)(*(void *)(v31 + 16));
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    Swift::String v33 = (uint64_t *)(v31 + 40);
    do
    {
      uint64_t v34 = *(v33 - 1);
      uint64_t v35 = *v33;
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v34, v35);
      swift_bridgeObjectRelease();
      v33 += 2;
      --v32;
    }

    while (v32);
    swift_bridgeObjectRelease();
  }

  uint64_t v36 = *(void *)((char *)v2 + v26[10]);
  Hasher._combine(_:)(*(void *)(v36 + 16));
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = (uint64_t *)(v36 + 40);
    do
    {
      uint64_t v39 = *(v38 - 1);
      uint64_t v40 = *v38;
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v39, v40);
      swift_bridgeObjectRelease();
      v38 += 2;
      --v37;
    }

    while (v37);
    swift_bridgeObjectRelease();
  }

  uint64_t v41 = (void *)((char *)v2 + v26[11]);
  uint64_t v42 = v41[1];
  if (v42)
  {
    uint64_t v43 = *v41;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v43, v42);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::String v44 = (char *)v2 + v26[12];
  if (v44[4] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt32 v45 = *(_DWORD *)v44;
    Hasher._combine(_:)(1u);
    if ((v45 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v46 = v45;
    }
    else {
      Swift::UInt32 v46 = 0;
    }
    Hasher._combine(_:)(v46);
  }

  uint64_t v47 = v58;
  Hasher._combine(_:)(*((_BYTE *)v2 + v26[13]));
  sub_1001A8360((uint64_t)v2 + v26[14], v28, &qword_1003F9448);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1LL, v47) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int v48 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v55, v28, v47);
    Hasher._combine(_:)(1u);
    uint64_t v49 = sub_100156FEC( &qword_1003FC460,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.HostInfo);
    dispatch thunk of Hashable.hash(into:)(a1, v47, v49);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v48, v47);
  }

  uint64_t v50 = type metadata accessor for Date(0LL);
  uint64_t v51 = sub_100156FEC( &qword_1003FC468,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v50, v51);
}

Swift::Int sub_10024F4F8(uint64_t a1, uint64_t a2)
{
  return sub_1002550F4(a1, a2, (void (*)(void *))sub_10024EF84);
}

Swift::Int sub_10024F508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100255144(a1, a2, a3, (void (*)(void *))sub_10024EF84);
}

uint64_t sub_10024F520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v39 - v13);
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = 1LL;
    goto LABEL_35;
  }

  uint64_t v41 = v8;
  uint64_t v42 = a4;
  uint64_t v50 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v40 = v9;
  uint64_t v49 = *(void *)(v9 + 72);
  uint64_t v43 = a3;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0LL;
  while (1)
  {
    sub_1001A80F8(v50 + v49 * v16, (uint64_t)v14, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v17 = v14[1];
    if (*v14 != 0x4C41434F4CLL || v17 != 0xE500000000000000LL) {
      break;
    }
    sub_1001A80F8((uint64_t)v14, (uint64_t)v12, type metadata accessor for HostedRoutingSourceSession);
LABEL_4:
    ++v16;
    sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingSourceSession);
    sub_1001A813C((uint64_t)v14, type metadata accessor for HostedRoutingSourceSession);
    if (v16 == v15)
    {
      uint64_t v37 = 1LL;
      a4 = v42;
      goto LABEL_33;
    }
  }

  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v17, 0x4C41434F4CLL, 0xE500000000000000LL, 0LL);
  sub_1001A80F8((uint64_t)v14, (uint64_t)v12, type metadata accessor for HostedRoutingSourceSession);
  if ((v19 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v20 = *((void *)v12 + 4);
  uint64_t v45 = *(void *)(v20 + 16);
  if (!v45) {
    goto LABEL_4;
  }
  uint64_t v21 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v22 = 0LL;
  uint64_t v23 = *(void *)(v21 - 8);
  uint64_t v47 = v20 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v48 = v21;
  uint64_t v46 = *(void *)(v23 + 72);
  uint64_t v44 = v15;
  while (1)
  {
    uint64_t v24 = (void *)(v47 + v46 * v22);
    uint64_t v25 = (char *)v24 + *(int *)(v48 + 56);
    uint64_t v26 = *(void *)v25;
    unsigned int v27 = *((unsigned __int16 *)v25 + 8);
    int v28 = (v27 >> 8) & 6 | (v27 >> 7) & 1;
    if ((v28 - 1) >= 5)
    {
      if (v28) {
        goto LABEL_27;
      }
      unsigned int v27 = *(unsigned __int16 *)(v26 + 32);
      uint64_t v26 = *(void *)(v26 + 16);
    }

    unsigned int v29 = v27 >> 11;
    if (v29 == 10 || v29 == 9 || v29 == 8)
    {
      uint64_t v30 = *(void *)(v26 + 16);
      uint64_t v31 = *(void *)(v30 + 16);
      if (v31) {
        break;
      }
    }

uint64_t sub_10024F830(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result + 16 * v1;
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain(*(void *)(v2 + 24));
    return v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_10024F86C(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result[4];
    swift_bridgeObjectRetain(result[5]);
    return (void *)v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10024F8A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10024F8DC()
{
  v1._uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t, void *))Array.description.getter)( v0,  &type metadata for String);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._uint64_t countAndFlagsBits = 44LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0x28636973756D2ELL;
}

void sub_10024F9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void sub_10024FA24()
{
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::String v4 = (void *)(v2 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      String.hash(into:)(v1, v5, v6);
      swift_bridgeObjectRelease(v6);
      v4 += 2;
      --v3;
    }

    while (v3);
  }

  Hasher._combine(_:)(v0);
}

Swift::Int sub_10024FBCC()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 12);
  Hasher.init(_seed:)(v5, 0LL);
  sub_10024F9E8((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

void sub_10024FC24(uint64_t a1)
{
}

Swift::Int sub_10024FC38(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 12);
  Hasher.init(_seed:)(v6, a1);
  sub_10024F9E8((uint64_t)v6, v2, v3 | (v4 << 32));
  return Hasher._finalize()();
}

void sub_10024FC8C()
{
}

void sub_10024FCA0(uint64_t a1)
{
}

uint64_t sub_10024FCC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v37 - v7;
  v37[0] = 0LL;
  v37[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  v9._uint64_t countAndFlagsBits = 60LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x6979616C50776F4ELL;
  v10._object = (void *)0xEE006F666E49676ELL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0x656C746974202D20LL;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  if (*(void *)(v0 + 8))
  {
    uint64_t v12 = *(void *)v0;
    uint64_t v13 = *(void **)(v0 + 8);
  }

  else
  {
    uint64_t v13 = (void *)0xE300000000000000LL;
    uint64_t v12 = 7104878LL;
  }

  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x746974627573202CLL;
  v15._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v15);
  if (*(void *)(v0 + 24))
  {
    uint64_t v16 = *(void *)(v0 + 16);
    uint64_t v17 = *(void **)(v0 + 24);
  }

  else
  {
    uint64_t v17 = (void *)0xE300000000000000LL;
    uint64_t v16 = 7104878LL;
  }

  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x73696C627570202CLL;
  v19._object = (void *)0xED0000203A726568LL;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(v0 + 32);
  uint64_t v21 = *(unsigned int *)(v0 + 40);
  uint64_t v22 = *(unsigned __int8 *)(v0 + 44);
  sub_1001A8278(v20, v21, *(_BYTE *)(v0 + 44));
  sub_10024F8A4(v20, v21 | (v22 << 32));
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  sub_1001A0918(v20, v21, v22);
  v24._uint64_t countAndFlagsBits = 0x6E6979616C70202CLL;
  v24._object = (void *)0xEB00000000203A67LL;
  String.append(_:)(v24);
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:),  v2);
  char v25 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)(v8, v6);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v6, v2);
  v26(v8, v2);
  if ((v25 & 1) != 0) {
    uint64_t v27 = 1702195828LL;
  }
  else {
    uint64_t v27 = 0x65736C6166LL;
  }
  if ((v25 & 1) != 0) {
    unint64_t v28 = 0xE400000000000000LL;
  }
  else {
    unint64_t v28 = 0xE500000000000000LL;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._object = (void *)0xEB00000000203A6BLL;
  v30._uint64_t countAndFlagsBits = 0x726F77747261202CLL;
  String.append(_:)(v30);
  if (*(void *)(v1 + 48))
  {
    uint64_t v31 = dispatch thunk of ArtworkToken.description.getter();
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 62LL;
  v35._object = (void *)0xE100000000000000LL;
  String.append(_:)(v35);
  return v37[0];
}

uint64_t sub_10024FFE8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[1];
  if (v4)
  {
    uint64_t v5 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v5, v4);
    swift_bridgeObjectRelease();
    uint64_t v6 = v1[3];
    if (v6)
    {
LABEL_3:
      uint64_t v7 = v1[2];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v7, v6);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v6 = v1[3];
    if (v6) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
LABEL_6:
  uint64_t v8 = v1[4];
  uint64_t v9 = *((unsigned int *)v2 + 10);
  uint64_t v10 = *((unsigned __int8 *)v2 + 44);
  sub_1001A8278(v2[4], v9, *((_BYTE *)v2 + 44));
  sub_10024F9E8(a1, v8, v9 | (v10 << 32));
  sub_1001A0918(v8, v9, v10);
  if (v2[6])
  {
    Hasher._combine(_:)(1u);
    uint64_t v11 = type metadata accessor for ArtworkToken(0LL);
    uint64_t v12 = sub_100156FEC( &qword_1003FC470,  (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkToken,  (uint64_t)&protocol conformance descriptor for ArtworkToken);
    dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v13 = v2[7];
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    Swift::String v15 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v16 = *(v15 - 1);
      uint64_t v17 = *v15;
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v16, v17);
      swift_bridgeObjectRelease();
      v15 += 2;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease();
  }

  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v18 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
  uint64_t v19 = sub_100156FEC( &qword_1003FC478,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.NowPlayingInfo.PlaybackInfo);
  dispatch thunk of Hashable.hash(into:)(a1, v18, v19);
  uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
  uint64_t v21 = sub_100156FEC( &qword_1003FC480,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.NowPlayingInfo.TrackInfo);
  return dispatch thunk of Hashable.hash(into:)(a1, v20, v21);
}

Swift::Int sub_100250244(uint64_t a1, uint64_t a2)
{
  return sub_1002550F4(a1, a2, (void (*)(void *))sub_10024FFE8);
}

Swift::Int sub_100250254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100255144(a1, a2, a3, (void (*)(void *))sub_10024FFE8);
}

uint64_t sub_10025026C()
{
  uint64_t v3 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1002568EC(v1, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  return v3;
}

void *sub_1002502BC()
{
  uint64_t v1 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v22 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1002568EC(v8, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  uint64_t result = v22;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v11 = result[2];
  if (v11)
  {
    unint64_t v12 = 0LL;
    uint64_t v19 = result[2];
    uint64_t v20 = v2;
    uint64_t v21 = result;
    while (v12 < result[2])
    {
      unint64_t v13 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v14 = *(void *)(v2 + 72);
      sub_1001A80F8((uint64_t)result + v13 + v14 * v12, (uint64_t)v7, type metadata accessor for HostedRoutingItem);
      if (v7[*(int *)(v1 + 36)] == 1)
      {
        uint64_t v15 = (uint64_t)v5;
        sub_1001A81D4((uint64_t)v7, (uint64_t)v5, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
          sub_1001A3FBC(0, v10[2] + 1LL, 1);
        }
        uint64_t v10 = v22;
        unint64_t v17 = v22[2];
        unint64_t v16 = v22[3];
        if (v17 >= v16 >> 1)
        {
          sub_1001A3FBC(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v22;
        }

        v10[2] = v17 + 1;
        uint64_t v18 = (uint64_t)v10 + v13 + v17 * v14;
        uint64_t v5 = (char *)v15;
        sub_1001A81D4(v15, v18, type metadata accessor for HostedRoutingItem);
        uint64_t v11 = v19;
        uint64_t v2 = v20;
      }

      else
      {
        sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingItem);
      }

      ++v12;
      uint64_t result = v21;
      if (v11 == v12)
      {
        uint64_t v10 = v22;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v10;
  }

  return result;
}

uint64_t sub_1002504B8()
{
  uint64_t v1 = v0[1];
  if (*v0 == 0x4C41434F4CLL && v1 == 0xE500000000000000LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*v0, v1, 0x4C41434F4CLL, 0xE500000000000000LL, 0LL);
  }
}

uint64_t sub_1002504F8(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1(0LL);
  sub_1001A8360(v1 + *(int *)(v13 + 28), (uint64_t)v12, &qword_1003F9450);
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v12, 1LL, v14) == 1)
  {
    sub_1001603DC((uint64_t)v12, &qword_1003F9450);
    char v15 = 0;
  }

  else
  {
    RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))( v7,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:),  v3);
    char v15 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)(v9, v7);
    unint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
    sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  return v15 & 1;
}

uint64_t sub_10025068C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for HostedRoutingSession(0LL);
  sub_1001A8360(v1 + *(int *)(v14 + 28), (uint64_t)v13, &qword_1003F9450);
  uint64_t v15 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v13, 1LL, v15) == 1)
  {
    sub_1001603DC((uint64_t)v13, &qword_1003F9450);
  }

  else
  {
    RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v8,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:),  v4);
    char v16 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)(v10, v8);
    unint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    uint64_t v18 = sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    if ((v16 & 1) != 0) {
      return static Date.now.getter(v18);
    }
  }

  uint64_t v20 = v2 + *(int *)(v14 + 52);
  uint64_t v21 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, v20, v21);
}

uint64_t sub_100250860@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, void *a8@<X7>, void *a9@<X8>, unsigned __int8 a10, int a11, int a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v66 = a2;
  uint64_t v70 = a15;
  uint64_t v71 = a14;
  LODWORD(v67) = a10;
  uint64_t v73 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v75 = *(void *)(v73 - 8);
  uint64_t v21 = __chkstk_darwin(v73);
  Swift::String v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v74 = (uint64_t)&v61 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v61 - v26;
  unint64_t v28 = (int *)type metadata accessor for HostedRoutingSession(0LL);
  unint64_t v29 = (void *)((char *)a9 + v28[11]);
  *unint64_t v29 = 0LL;
  v29[1] = 0LL;
  uint64_t v61 = v29;
  uint64_t v30 = v66;
  *a9 = a1;
  a9[1] = v30;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v31 = (uint64_t)a9 + v28[7];
  uint64_t v66 = a5;
  sub_1001A8360(a5, v31, &qword_1003F9450);
  unint64_t v32 = (char *)a9 + v28[13];
  uint64_t v33 = type metadata accessor for Date(0LL);
  uint64_t v63 = *(void *)(v33 - 8);
  uint64_t v64 = v33;
  unint64_t v34 = *(void (**)(char *, uint64_t))(v63 + 16);
  uint64_t v65 = a6;
  v34(v32, a6);
  *(void *)((char *)a9 + v28[9]) = v68;
  *(void *)((char *)a9 + v28[10]) = v69;
  *((_BYTE *)a9 + v28[14]) = v67;
  Swift::String v35 = (char *)a9 + v28[12];
  *(_DWORD *)Swift::String v35 = a12;
  v35[4] = a13 & 1;
  uint64_t v36 = (char *)a9 + v28[8];
  uint64_t v37 = type metadata accessor for RoutingControls(0LL);
  uint64_t v62 = *(void *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v36, v71, v37);
  uint64_t v68 = v28;
  uint64_t v69 = a9;
  sub_1001A8360(v70, (uint64_t)a9 + v28[15], &qword_1003F9448);
  uint64_t v76 = a3;
  swift_bridgeObjectRetain();
  uint64_t v38 = swift_bridgeObjectRetain();
  uint64_t result = sub_1002568EC(v38, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  uint64_t v40 = v76;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v76 = _swiftEmptyArrayStorage;
  uint64_t v42 = v40[2];
  uint64_t v67 = v37;
  if (v42)
  {
    unint64_t v43 = 0LL;
    uint64_t v44 = _swiftEmptyArrayStorage;
    uint64_t v45 = v73;
    uint64_t v72 = v23;
    while (v43 < v40[2])
    {
      unint64_t v46 = (*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      uint64_t v47 = *(void *)(v75 + 72);
      sub_1001A80F8((uint64_t)v40 + v46 + v47 * v43, (uint64_t)v27, type metadata accessor for HostedRoutingItem);
      if (v27[*(int *)(v45 + 36)] == 1)
      {
        sub_1001A81D4((uint64_t)v27, v74, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0) {
          sub_1001A3FBC(0, v44[2] + 1LL, 1);
        }
        uint64_t v44 = v76;
        unint64_t v49 = v76[2];
        unint64_t v48 = v76[3];
        if (v49 >= v48 >> 1)
        {
          sub_1001A3FBC(v48 > 1, v49 + 1, 1);
          uint64_t v44 = v76;
        }

        _OWORD v44[2] = v49 + 1;
        uint64_t result = sub_1001A81D4(v74, (uint64_t)v44 + v46 + v49 * v47, type metadata accessor for HostedRoutingItem);
        Swift::String v23 = v72;
        uint64_t v45 = v73;
      }

      else
      {
        uint64_t result = sub_1001A813C((uint64_t)v27, type metadata accessor for HostedRoutingItem);
      }

      if (v42 == ++v43)
      {
        uint64_t v41 = v76;
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v45 = v73;
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v50 = v41[2];
    if (v50)
    {
      uint64_t v51 = (uint64_t)v41 + ((*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
      uint64_t v52 = *(void *)(v75 + 72);
      swift_retain(v41);
      uint64_t v53 = v50 - 1;
      do
      {
        uint64_t v54 = v53;
        sub_1001A80F8(v51, (uint64_t)v23, type metadata accessor for HostedRoutingItem);
        char v55 = v23[*(int *)(v45 + 60)];
        sub_1001A813C((uint64_t)v23, type metadata accessor for HostedRoutingItem);
        if ((v55 & 1) != 0) {
          break;
        }
        uint64_t v53 = v54 - 1;
        v51 += v52;
      }

      while (v54);
      swift_release(v41);
    }

    else
    {
      char v55 = 0;
    }

    uint64_t v56 = v67;
    *((_BYTE *)v69 + v68[16]) = v55;
    if (v41[2])
    {
      type metadata accessor for Symbols();
      uint64_t v57 = sub_10029956C((uint64_t)v41);
      uint64_t v59 = v58;
      swift_release(v41);
      sub_1001603DC(v70, &qword_1003F9448);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v71, v56);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
      sub_1001603DC(v66, &qword_1003F9450);
      uint64_t v60 = v61;
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v60 = v57;
      v60[1] = v59;
    }

    else
    {
      swift_release(v41);
      sub_1001603DC(v70, &qword_1003F9448);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v71, v56);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
      return sub_1001603DC(v66, &qword_1003F9450);
    }
  }

  return result;
}

unint64_t sub_100250D14()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x3A736D657469202CLL;
  v4._object = (void *)0xE900000000000020LL;
  String.append(_:)(v4);
  uint64_t v10 = v0[2];
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_1002568EC(v5, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  uint64_t v6 = type metadata accessor for HostedRoutingItem(0LL);
  v7._uint64_t countAndFlagsBits = Array.description.getter(v10, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 62LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0xD000000000000024LL;
}

uint64_t sub_100250E30()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v2);
  uint64_t v78 = (uint64_t)v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = 0LL;
  unint64_t v85 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(196LL);
  v8._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v8._object = (void *)0x800000010034F9C0LL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v9._object = (void *)0x800000010033FC60LL;
  uint64_t v76 = 0xD000000000000011LL;
  String.append(_:)(v9);
  uint64_t v10 = *v0;
  uint64_t v11 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x800000010033FC80LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v13);
  uint64_t v14 = type metadata accessor for HostedRoutingSession(0LL);
  else {
    uint64_t v15 = 0x65736C6166LL;
  }
  else {
    unint64_t v16 = 0xE500000000000000LL;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x6C6F76202020200ALL;
  v18._object = (void *)0xED0000203A656D75LL;
  String.append(_:)(v18);
  uint64_t v77 = v14;
  uint64_t v19 = (float *)((char *)v0 + *(int *)(v14 + 48));
  if (((_BYTE)v19[1] & 1) != 0)
  {
    unint64_t v20 = 0xE300000000000000LL;
    uint64_t v21 = 7104878LL;
  }

  else
  {
    uint64_t v21 = Float.description.getter(*v19);
    unint64_t v20 = v22;
  }

  unint64_t v23 = v20;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x800000010033FE40LL;
  v24._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v24);
  uint64_t v25 = v0[2];
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v79 = v0;
  if (v26)
  {
    uint64_t v83 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10015DCE8(0, v26, 0);
    uint64_t v28 = *(unsigned __int8 *)(v5 + 80);
    unint64_t v74 = v25;
    uint64_t v75 = v5;
    uint64_t v29 = v25 + ((v28 + 32) & ~v28);
    uint64_t v80 = *(void *)(v5 + 72);
    do
    {
      sub_1001A80F8(v29, (uint64_t)v7, type metadata accessor for HostedRoutingItem);
      uint64_t v81 = 0x2020202020202020LL;
      unint64_t v82 = 0xE800000000000000LL;
      v30._uint64_t countAndFlagsBits = sub_10024A870();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      uint64_t v31 = v81;
      unint64_t v32 = v82;
      sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingItem);
      uint64_t v27 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
      {
        sub_10015DCE8(0, v27[2] + 1LL, 1);
        uint64_t v27 = v83;
      }

      unint64_t v34 = v27[2];
      unint64_t v33 = v27[3];
      if (v34 >= v33 >> 1)
      {
        sub_10015DCE8(v33 > 1, v34 + 1, 1);
        uint64_t v27 = v83;
      }

      void v27[2] = v34 + 1;
      Swift::String v35 = &v27[2 * v34];
      v35[4] = v31;
      v35[5] = v32;
      v29 += v80;
      --v26;
    }

    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v1 = v79;
    uint64_t v5 = v75;
  }

  uint64_t v81 = (uint64_t)v27;
  uint64_t v36 = sub_100156B68(&qword_1003FA010);
  unint64_t v37 = sub_100200720();
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v36, v37);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x800000010033FE60LL;
  v42._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v42);
  uint64_t v43 = v1[3];
  int64_t v44 = *(void *)(v43 + 16);
  uint64_t v45 = _swiftEmptyArrayStorage;
  if (v44)
  {
    unint64_t v74 = v37;
    uint64_t v75 = v36;
    uint64_t v83 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10015DCE8(0, v44, 0);
    uint64_t v46 = *(unsigned __int8 *)(v5 + 80);
    v73[1] = v43;
    uint64_t v47 = v43 + ((v46 + 32) & ~v46);
    uint64_t v80 = *(void *)(v5 + 72);
    do
    {
      sub_1001A80F8(v47, (uint64_t)v7, type metadata accessor for HostedRoutingItem);
      uint64_t v81 = 0x2020202020202020LL;
      unint64_t v82 = 0xE800000000000000LL;
      v48._uint64_t countAndFlagsBits = sub_10024A870();
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      uint64_t v49 = v81;
      unint64_t v50 = v82;
      sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingItem);
      uint64_t v45 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
      {
        sub_10015DCE8(0, v45[2] + 1LL, 1);
        uint64_t v45 = v83;
      }

      unint64_t v52 = v45[2];
      unint64_t v51 = v45[3];
      if (v52 >= v51 >> 1)
      {
        sub_10015DCE8(v51 > 1, v52 + 1, 1);
        uint64_t v45 = v83;
      }

      void v45[2] = v52 + 1;
      uint64_t v53 = &v45[2 * v52];
      v53[4] = v49;
      v53[5] = v50;
      v47 += v80;
      --v44;
    }

    while (v44);
    swift_bridgeObjectRelease();
    uint64_t v1 = v79;
    unint64_t v37 = v74;
    uint64_t v36 = v75;
  }

  uint64_t v81 = (uint64_t)v45;
  uint64_t v54 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v36, v37);
  uint64_t v56 = v55;
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = v54;
  v57._object = v56;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v58._object = (void *)0x800000010033FCA0LL;
  v58._uint64_t countAndFlagsBits = v76;
  String.append(_:)(v58);
  uint64_t v60 = v77;
  uint64_t v59 = v78;
  sub_1001A8360((uint64_t)v1 + *(int *)(v77 + 28), v78, &qword_1003F9450);
  uint64_t v61 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48LL))(v59, 1LL, v61) == 1)
  {
    sub_1001603DC(v59, &qword_1003F9450);
    uint64_t v62 = (void *)0xE300000000000000LL;
    uint64_t v63 = 7104878LL;
  }

  else
  {
    uint64_t v63 = sub_10024EC4C();
    uint64_t v62 = v64;
    sub_1001A813C(v59, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  v65._uint64_t countAndFlagsBits = v63;
  v65._object = v62;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v66._object = (void *)0x800000010033FCC0LL;
  String.append(_:)(v66);
  uint64_t v67 = *(uint64_t *)((char *)v1 + *(int *)(v60 + 36));
  swift_bridgeObjectRetain();
  v68._uint64_t countAndFlagsBits = Array.description.getter(v67, &type metadata for String);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  v69._object = (void *)0x800000010033FCF0LL;
  String.append(_:)(v69);
  uint64_t v70 = swift_bridgeObjectRetain();
  v71._uint64_t countAndFlagsBits = Array.description.getter(v70, &type metadata for String);
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v84;
}

void sub_1002514B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RoutingSession.HostInfo(0LL);
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  __chkstk_darwin(v3);
  uint64_t v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v5);
  uint64_t v60 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  __chkstk_darwin(v7);
  uint64_t v58 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v9);
  uint64_t v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v57 - v16;
  uint64_t v18 = *v1;
  uint64_t v19 = v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  Swift::String v66 = v1;
  uint64_t v20 = v1[2];
  Hasher._combine(_:)(*(void *)(v20 + 16));
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v23 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A80F8(v22, (uint64_t)v17, type metadata accessor for HostedRoutingItem);
      sub_10024AD00(a1);
      sub_1001A813C((uint64_t)v17, type metadata accessor for HostedRoutingItem);
      v22 += v23;
      --v21;
    }

    while (v21);
    swift_bridgeObjectRelease();
  }

  Swift::String v24 = v66;
  uint64_t v25 = v66[3];
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v27 = v25 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v28 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A80F8(v27, (uint64_t)v15, type metadata accessor for HostedRoutingItem);
      sub_10024AD00(a1);
      sub_1001A813C((uint64_t)v15, type metadata accessor for HostedRoutingItem);
      v27 += v28;
      --v26;
    }

    while (v26);
    swift_bridgeObjectRelease();
  }

  uint64_t v29 = (int *)type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v30 = v63;
  sub_1001A8360((uint64_t)v24 + v29[7], v63, &qword_1003F9450);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v30, 1LL, v65) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v31 = v58;
    sub_1001A81D4(v30, v58, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    Hasher._combine(_:)(1u);
    sub_10024FFE8(a1);
    sub_1001A813C(v31, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  uint64_t v33 = (uint64_t)v60;
  uint64_t v32 = v61;
  uint64_t v34 = type metadata accessor for RoutingControls(0LL);
  uint64_t v35 = sub_100156FEC( &qword_1003FC458,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControls,  (uint64_t)&protocol conformance descriptor for RoutingControls);
  dispatch thunk of Hashable.hash(into:)(a1, v34, v35);
  uint64_t v36 = *(void *)((char *)v24 + v29[9]);
  Hasher._combine(_:)(*(void *)(v36 + 16));
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = (uint64_t *)(v36 + 40);
    do
    {
      uint64_t v39 = *(v38 - 1);
      uint64_t v40 = *v38;
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v39, v40);
      swift_bridgeObjectRelease();
      v38 += 2;
      --v37;
    }

    while (v37);
    swift_bridgeObjectRelease();
  }

  uint64_t v41 = *(void *)((char *)v24 + v29[10]);
  Hasher._combine(_:)(*(void *)(v41 + 16));
  uint64_t v42 = *(void *)(v41 + 16);
  if (v42)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = (uint64_t *)(v41 + 40);
    do
    {
      uint64_t v44 = *(v43 - 1);
      uint64_t v45 = *v43;
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v44, v45);
      swift_bridgeObjectRelease();
      v43 += 2;
      --v42;
    }

    while (v42);
    swift_bridgeObjectRelease();
  }

  uint64_t v46 = (void *)((char *)v24 + v29[11]);
  uint64_t v47 = v46[1];
  if (v47)
  {
    uint64_t v48 = *v46;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v48, v47);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v49 = (uint64_t)v24 + v29[12];
  if (*(_BYTE *)(v49 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt32 v50 = *(_DWORD *)v49;
    Hasher._combine(_:)(1u);
    if ((v50 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v51 = v50;
    }
    else {
      Swift::UInt32 v51 = 0;
    }
    Hasher._combine(_:)(v51);
  }

  uint64_t v52 = v62;
  uint64_t v53 = type metadata accessor for Date(0LL);
  uint64_t v54 = sub_100156FEC( &qword_1003FC468,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v53, v54);
  Hasher._combine(_:)(*((_BYTE *)v24 + v29[14]));
  sub_1001A8360((uint64_t)v24 + v29[15], v33, &qword_1003F9448);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1LL, v52) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v55 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v59, v33, v52);
    Hasher._combine(_:)(1u);
    uint64_t v56 = sub_100156FEC( &qword_1003FC460,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.HostInfo);
    dispatch thunk of Hashable.hash(into:)(a1, v52, v56);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v55, v52);
  }

  Hasher._combine(_:)(*((_BYTE *)v24 + v29[16]));
}

Swift::Int sub_100251A90(uint64_t a1, uint64_t a2)
{
  return sub_1002550F4(a1, a2, (void (*)(void *))sub_1002514B8);
}

Swift::Int sub_100251AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100255144(a1, a2, a3, (void (*)(void *))sub_1002514B8);
}

uint64_t sub_100251AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100156B68(&qword_1003FC488);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003FC490);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100156B68(&qword_1003FC498);
  __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100156B68(&qword_1003FC4A0);
  __chkstk_darwin(v16);
  uint64_t v67 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100156B68(&qword_1003FC4A8);
  __chkstk_darwin(v18);
  Swift::String v66 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100156B68(&qword_1003FC4B0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v65 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = a4;
  RoutingControls.init()(v21);
  uint64_t v23 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v23)
  {
    uint64_t v61 = v13;
    uint64_t v62 = v10;
    uint64_t v68 = kMRMediaRemoteCommandInfoPreferredIntervalsKey;
    uint64_t v24 = 4LL;
    uint64_t v64 = (char *)&type metadata for Any + 8;
    uint64_t v69 = a1;
    uint64_t v13 = v63;
    while (1)
    {
      id v27 = (a3 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, a3)
          : *(id *)(a3 + 8 * v24);
      uint64_t v28 = v27;
      uint64_t v10 = (char *)(v24 - 3);
      if (__OFADD__(v24 - 4, 1LL)) {
        break;
      }
      switch([v27 command])
      {
        case 0u:
          swift_bridgeObjectRetain();
          uint64_t v25 = v65;
          RoutingControls.PlayControl.init(sessionIdentifier:)(a1, a2);
          uint64_t v26 = type metadata accessor for RoutingControls.PlayControl(0LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 0LL, 1LL, v26);
          RoutingControls.play.setter(v25);
          goto LABEL_5;
        case 1u:
          swift_bridgeObjectRetain();
          uint64_t v29 = v66;
          RoutingControls.PauseControl.init(sessionIdentifier:)(a1, a2);
          uint64_t v30 = type metadata accessor for RoutingControls.PauseControl(0LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 0LL, 1LL, v30);
          RoutingControls.pause.setter(v29);
          goto LABEL_5;
        case 4u:
          swift_bridgeObjectRetain();
          RoutingControls.NextTrackControl.init(sessionIdentifier:)(a1, a2);
          uint64_t TrackControl = type metadata accessor for RoutingControls.NextTrackControl(0LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TrackControl - 8) + 56LL))( v13,  0LL,  1LL,  TrackControl);
          RoutingControls.nextTrack.setter(v13);
          goto LABEL_5;
        case 5u:
          swift_bridgeObjectRetain();
          uint64_t v32 = v67;
          RoutingControls.PreviousTrackControl.init(sessionIdentifier:)(a1, a2);
          uint64_t v33 = type metadata accessor for RoutingControls.PreviousTrackControl(0LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v32, 0LL, 1LL, v33);
          RoutingControls.previousTrack.setter(v32);
          goto LABEL_5;
        case 0x11u:
          id v34 = [v28 options];
          if (!v34) {
            goto LABEL_25;
          }
          uint64_t v35 = v34;
          uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v34,  &type metadata for AnyHashable,  v64,  &protocol witness table for AnyHashable);

          if (!v68)
          {
            __break(1u);
LABEL_45:
            __break(1u);
            JUMPOUT(0x1002521C4LL);
          }

          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          uint64_t v72 = v37;
          AnyHashable.init<A>(_:)(&v71, &type metadata for String, &protocol witness table for String);
          a1 = v69;
          if (*(void *)(v36 + 16) && (unint64_t v38 = sub_10015CAA4((uint64_t)v73), (v39 & 1) != 0))
          {
            sub_100160800(*(void *)(v36 + 56) + 32 * v38, (uint64_t)&v74);
          }

          else
          {
            __int128 v74 = 0u;
            __int128 v75 = 0u;
          }

          sub_100160990((uint64_t)v73);
          swift_bridgeObjectRelease();
          if (!*((void *)&v75 + 1)) {
            goto LABEL_36;
          }
          uint64_t v46 = sub_100156B68(&qword_1003FC4B8);
          uint64_t v47 = v73[0];
          if (!*(void *)(v73[0] + 16LL)) {
            goto LABEL_37;
          }
          double v48 = *(double *)(v73[0] + 32LL);
          swift_bridgeObjectRetain();
          uint64_t v49 = v62;
          RoutingControls.SkipForwardControl.init(intervals:preferredInterval:sessionIdentifier:)(v47, a1, a2, v48);
          uint64_t v50 = type metadata accessor for RoutingControls.SkipForwardControl(0LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v49, 0LL, 1LL, v50);
          Swift::UInt32 v51 = v49;
          uint64_t v13 = v63;
          RoutingControls.skipForward.setter(v51);
          goto LABEL_5;
        case 0x12u:
          id v40 = [v28 options];
          if (!v40)
          {
LABEL_25:
            __int128 v74 = 0u;
            __int128 v75 = 0u;
            a1 = v69;
LABEL_36:

            sub_1001603DC((uint64_t)&v74, &qword_1003F9EE0);
            goto LABEL_6;
          }

          uint64_t v41 = v40;
          uint64_t v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v40,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

          if (!v68) {
            goto LABEL_45;
          }
          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          uint64_t v72 = v43;
          AnyHashable.init<A>(_:)(&v71, &type metadata for String, &protocol witness table for String);
          a1 = v69;
          if (*(void *)(v42 + 16) && (unint64_t v44 = sub_10015CAA4((uint64_t)v73), (v45 & 1) != 0))
          {
            sub_100160800(*(void *)(v42 + 56) + 32 * v44, (uint64_t)&v74);
          }

          else
          {
            __int128 v74 = 0u;
            __int128 v75 = 0u;
          }

          sub_100160990((uint64_t)v73);
          swift_bridgeObjectRelease();
          if (!*((void *)&v75 + 1)) {
            goto LABEL_36;
          }
          uint64_t v52 = sub_100156B68(&qword_1003FC4B8);
          uint64_t v53 = v73[0];
          if (*(void *)(v73[0] + 16LL))
          {
            double v54 = *(double *)(v73[0] + 32LL);
            swift_bridgeObjectRetain();
            char v55 = v61;
            RoutingControls.SkipBackwardControl.init(intervals:preferredInterval:sessionIdentifier:)(v53, a1, a2, v54);
            uint64_t v56 = type metadata accessor for RoutingControls.SkipBackwardControl(0LL);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))(v55, 0LL, 1LL, v56);
            uint64_t v57 = v55;
            uint64_t v13 = v63;
            RoutingControls.skipBackward.setter(v57);
LABEL_5:

            goto LABEL_6;
          }

uint64_t sub_100252210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v332 = a2;
  uint64_t v3 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v3);
  uint64_t v326 = (uint64_t)v313 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v325 = type metadata accessor for Date(0LL);
  uint64_t v324 = *(void *)(v325 - 8);
  __chkstk_darwin(v325);
  uint64_t v331 = (char *)v313 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v6);
  uint64_t v323 = (uint64_t)v313 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003FC4C0);
  __chkstk_darwin(v8);
  uint64_t v330 = (uint64_t)v313 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v393 = sub_100156B68(&qword_1003FC4C8);
  uint64_t v10 = __chkstk_darwin(v393);
  id v340 = (BOOL *)v313 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  id v339 = (BOOL *)v313 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  id v338 = (BOOL *)v313 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v347 = (BOOL *)v313 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v346 = (BOOL *)v313 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v389 = (BOOL *)v313 - v21;
  __chkstk_darwin(v20);
  uint64_t v345 = (BOOL *)v313 - v22;
  uint64_t v23 = type metadata accessor for RoutingItem.Properties(0LL);
  uint64_t v376 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v371 = (char *)v313 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v337 = (char *)v313 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v336 = (char *)v313 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v356 = (char *)v313 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v335 = (char *)v313 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v334 = (char *)v313 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v383 = (char *)v313 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v350 = (char *)v313 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v355 = (char *)v313 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v354 = (char *)v313 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v344 = (char *)v313 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  id v343 = (char *)v313 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v388 = (char *)v313 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v342 = (char *)v313 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  id v341 = (char *)v313 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v391 = (char *)v313 - v55;
  __chkstk_darwin(v54);
  uint64_t v353 = (char *)v313 - v56;
  uint64_t v57 = sub_100156B68(&qword_1003FC428);
  __chkstk_darwin(v57);
  uint64_t v352 = (char *)v313 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = sub_100156B68(&qword_1003FC430);
  __chkstk_darwin(v59);
  uint64_t v351 = (char *)v313 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v321 = type metadata accessor for RoutingControls(0LL);
  uint64_t v320 = *(void *)(v321 - 8);
  uint64_t v61 = __chkstk_darwin(v321);
  uint64_t v387 = (char *)v313 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v322 = (char *)v313 - v64;
  __chkstk_darwin(v63);
  uint64_t v379 = (char *)v313 - v65;
  uint64_t v66 = sub_100156B68(&qword_1003F8920);
  uint64_t v67 = __chkstk_darwin(v66);
  uint64_t v373 = (uint64_t)v313 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v67);
  uint64_t v381 = (uint64_t)v313 - v69;
  uint64_t v375 = type metadata accessor for RoutingItem(0LL);
  uint64_t v374 = *(void *)(v375 - 8);
  uint64_t v70 = __chkstk_darwin(v375);
  uint64_t v370 = (char *)v313 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v70);
  uint64_t v378 = (char *)v313 - v72;
  uint64_t v392 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v333 = *(void *)(v392 - 8);
  uint64_t v73 = __chkstk_darwin(v392);
  uint64_t v384 = (uint64_t)v313 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v369 = (void *)((char *)v313 - v76);
  uint64_t v77 = __chkstk_darwin(v75);
  uint64_t v386 = (void *)((char *)v313 - v78);
  uint64_t v79 = __chkstk_darwin(v77);
  uint64_t v372 = (uint64_t)v313 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v385 = (uint64_t)v313 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  uint64_t v377 = (void *)((char *)v313 - v84);
  uint64_t v85 = __chkstk_darwin(v83);
  v390 = (char **)((char *)v313 - v86);
  uint64_t v87 = __chkstk_darwin(v85);
  uint64_t v380 = (uint64_t)v313 - v88;
  __chkstk_darwin(v87);
  os_log_type_t v90 = (char *)v313 - v89;
  uint64_t v91 = sub_100156B68(&qword_1003F8918);
  __chkstk_darwin(v91);
  uint64_t v368 = (char *)v313 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for RoutingSession.Properties(0LL);
  uint64_t v328 = *(void *)(v93 - 8);
  uint64_t v94 = __chkstk_darwin(v93);
  uint64_t v367 = (char *)v313 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = __chkstk_darwin(v94);
  uint64_t v327 = (char *)v313 - v97;
  __chkstk_darwin(v96);
  id v99 = (char *)v313 - v98;
  uint64_t v100 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v100);
  uint64_t v102 = (char *)v313 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v104 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v106 = (void *)((char *)v313 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1001A8360(a1, (uint64_t)v102, &qword_1003F94C0);
  id v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48);
  uint64_t v319 = (int *)v103;
  if (v107(v102, 1LL, v103) == 1)
  {
    sub_1001603DC(a1, &qword_1003F94C0);
    sub_1001603DC((uint64_t)v102, &qword_1003F94C0);
    uint64_t v108 = type metadata accessor for RoutingSession(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56LL))( v332,  1LL,  1LL,  v108);
  }

  uint64_t v316 = a1;
  sub_1001A81D4((uint64_t)v102, (uint64_t)v106, type metadata accessor for HostedRoutingSession);
  LOBYTE(v394) = 0;
  uint64_t v110 = sub_100156FEC( &qword_1003FC4D0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.Properties,  (uint64_t)&protocol conformance descriptor for RoutingSession.Properties);
  uint64_t v317 = v99;
  dispatch thunk of OptionSet.init(rawValue:)(&v394, v93, v110);
  uint64_t v111 = *v106;
  uint64_t v112 = v106[1];
  BOOL v113 = *v106 == 0x4C41434F4CLL;
  uint64_t v318 = v93;
  id v114 = (int *)v392;
  uint64_t v329 = v106;
  if (v113 && v112 == 0xE500000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, 0x4C41434F4CLL, 0xE500000000000000LL, 0LL) & 1) != 0)
  {
    int64_t v366 = (int64_t)sub_1002502BC();
    if (*(void *)(v366 + 16))
    {
      sub_1001A80F8( v366 + ((*(unsigned __int8 *)(v333 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v333 + 80)),  (uint64_t)v90,  type metadata accessor for HostedRoutingItem);
      int v115 = *(unsigned __int16 *)&v90[*(int *)(v392 + 56) + 16];
      __asm { BR              X12 }
    }

    uint64_t v116 = (uint64_t)v368;
    uint64_t v117 = v333;
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v333 + 56))(v368, 1LL, 1LL, v114);
    swift_bridgeObjectRelease();
    int v118 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v117 + 48))(v116, 1LL, v114);
    uint64_t v119 = sub_1001603DC(v116, &qword_1003F8918);
    uint64_t v120 = v318;
    if (v118 == 1)
    {
      uint64_t v121 = (uint64_t)v367;
      static RoutingSession.Properties.supportsAudioSampling.getter(v119);
      uint64_t v122 = v327;
      sub_1002496D8(v327, v121);
      uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v328 + 8);
      v123(v121, v120);
      v123((uint64_t)v122, v120);
    }
  }

  uint64_t v124 = v106[1];
  uint64_t v315 = *v106;
  uint64_t v125 = v106[2];
  int64_t v126 = *(void *)(v125 + 16);
  uint64_t v314 = v124;
  uint64_t v382 = v23;
  if (v126)
  {
    uint64_t v396 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002565D8(0LL, v126, 0);
    unint64_t v127 = (*(unsigned __int8 *)(v333 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v333 + 80);
    v313[1] = v125;
    uint64_t v128 = v125 + v127;
    uint64_t v349 = *(void *)(v333 + 72);
    uint64_t v348 = v385 + 16;
    while (1)
    {
      uint64_t v368 = (char *)v128;
      uint64_t v129 = v380;
      sub_1001A80F8(v128, v380, type metadata accessor for HostedRoutingItem);
      char v130 = v390;
      sub_1001A80F8(v129, (uint64_t)v390, type metadata accessor for HostedRoutingItem);
      uint64_t v131 = (uint64_t)v130[1];
      uint64_t v367 = *v130;
      id v132 = v130[3];
      int64_t v366 = (int64_t)v130[2];
      id v133 = v130[5];
      uint64_t v365 = v130[4];
      uint64_t v134 = v130[7];
      uint64_t v364 = v130[6];
      uint64_t v135 = v381;
      sub_1001A8360((uint64_t)v130 + v114[8], v381, &qword_1003F8920);
      uint64_t v136 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48LL))(v135, 1LL, v136) == 1)
      {
        __break(1u);
LABEL_83:
        __break(1u);
        JUMPOUT(0x1002543A8LL);
      }

      int64_t v363 = v126;
      id v137 = (unsigned int *)((char *)v130 + v114[12]);
      uint64_t v358 = *v137;
      int v357 = *((unsigned __int8 *)v137 + 4);
      uint64_t v138 = v377;
      sub_1001A80F8((uint64_t)v130, (uint64_t)v377, type metadata accessor for HostedRoutingItem);
      uint64_t v361 = v132;
      swift_bridgeObjectRetain();
      uint64_t v362 = v131;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v139 = swift_bridgeObjectRetain();
      RoutingControls.init()(v139);
      char v140 = *((_BYTE *)v138 + v114[13]);
      uint64_t v141 = v138[3];
      if (!v141) {
        break;
      }
      uint64_t v394 = v138[2];
      uint64_t v395 = v141;
      swift_bridgeObjectRetain();
      v142._uint64_t countAndFlagsBits = 14906LL;
      v142._object = (void *)0xE200000000000000LL;
      String.append(_:)(v142);
      uint64_t v144 = *v138;
      uint64_t v143 = (void *)v138[1];
      swift_bridgeObjectRetain();
      v145._uint64_t countAndFlagsBits = v144;
      v145._object = v143;
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
      uint64_t v146 = v394;
      uint64_t v147 = v395;
      uint64_t v148 = v376;
      if ((v140 & 1) != 0) {
        goto LABEL_16;
      }
LABEL_17:
      if ((v140 & 2) != 0)
      {
        uint64_t v151 = v352;
        RoutingControls.RelativeVolumeControl.init(itemIdentifier:)(v146, v147);
        uint64_t v152 = type metadata accessor for RoutingControls.RelativeVolumeControl(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56LL))(v151, 0LL, 1LL, v152);
        RoutingControls.relativeVolume.setter(v151);
        sub_1001A813C((uint64_t)v377, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        sub_1001A813C((uint64_t)v377, type metadata accessor for HostedRoutingItem);
        swift_bridgeObjectRelease();
      }

      os_log_t v359 = v134;
      uint64_t v360 = v133;
      uint64_t v153 = v385;
      sub_1001A80F8((uint64_t)v390, v385, type metadata accessor for HostedRoutingItem);
      uint64_t v154 = v391;
      uint64_t v155 = RoutingItem.Properties.init(rawValue:)(0LL);
      unsigned int v156 = *(unsigned __int16 *)(v348 + v114[14]);
      uint64_t v23 = v382;
      if (((v156 >> 8) & 6 | (v156 >> 7) & 1) == 5)
      {
        id v157 = v341;
        static RoutingItem.Properties.isBuiltIn.getter(v155);
        char v158 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
        uint64_t v159 = v388;
        v158(v388, v154, v23);
        uint64_t v160 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        uint64_t v161 = v342;
        dispatch thunk of SetAlgebra.intersection(_:)(v157, v23, v160);
        uint64_t v162 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v163 = dispatch thunk of static Equatable.== infix(_:_:)(v161, v157, v23, v162);
        uint64_t v164 = &v345[*(int *)(v393 + 48)];
        BOOL v165 = (v163 & 1) == 0;
        *uint64_t v345 = v165;
        if ((v163 & 1) != 0)
        {
          unint64_t v166 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
          v166(v164, v161, v23);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v148 + 8))(v161, v23);
          v158((char *)v164, v157, v23);
          v158(v159, v157, v23);
          dispatch thunk of SetAlgebra.formUnion(_:)(v159, v23, v160);
          unint64_t v166 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
        }

        uint64_t v167 = *(int *)(v393 + 48);
        uint64_t v168 = v389;
        uint64_t v169 = &v389[v167];
        BOOL *v389 = v165;
        v166(&v168[v167], (char *)v164, v23);
        uint64_t v170 = *(void (**)(BOOL *, uint64_t))(v148 + 8);
        v170(v169, v23);
        uint64_t v155 = ((uint64_t (*)(char *, uint64_t))v170)(v157, v23);
        uint64_t v154 = v391;
        id v114 = (int *)v392;
        uint64_t v153 = v385;
      }

      if (*(_BYTE *)(v153 + v114[10]) == 1)
      {
        id v171 = v343;
        static RoutingItem.Properties.isPlaying.getter(v155);
        uint64_t v172 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
        uint64_t v173 = v388;
        v172(v388, v154, v23);
        uint64_t v174 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        uint64_t v175 = v344;
        dispatch thunk of SetAlgebra.intersection(_:)(v171, v23, v174);
        uint64_t v176 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v177 = dispatch thunk of static Equatable.== infix(_:_:)(v175, v171, v23, v176);
        unsigned __int8 v178 = &v346[*(int *)(v393 + 48)];
        BOOL v179 = (v177 & 1) == 0;
        BOOL *v346 = v179;
        if ((v177 & 1) != 0)
        {
          uint64_t v180 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
          v180(v178, v175, v23);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v148 + 8))(v175, v23);
          v172((char *)v178, v171, v23);
          v172(v173, v171, v23);
          dispatch thunk of SetAlgebra.formUnion(_:)(v173, v23, v174);
          uint64_t v180 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
        }

        uint64_t v181 = *(int *)(v393 + 48);
        uint64_t v182 = v389;
        uint64_t v183 = &v389[v181];
        BOOL *v389 = v179;
        v180(&v182[v181], (char *)v178, v23);
        uint64_t v184 = *(void (**)(BOOL *, uint64_t))(v148 + 8);
        v184(v183, v23);
        uint64_t v155 = ((uint64_t (*)(char *, uint64_t))v184)(v171, v23);
        uint64_t v154 = v391;
        id v114 = (int *)v392;
        uint64_t v153 = v385;
      }

      NSString v185 = v355;
      unsigned int v186 = v354;
      if (*(_BYTE *)(v153 + v114[16]) == 1)
      {
        static RoutingItem.Properties.isDisabled.getter(v155);
        uint64_t v187 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
        double v188 = v388;
        v187(v388, v154, v23);
        uint64_t v189 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        dispatch thunk of SetAlgebra.intersection(_:)(v186, v23, v189);
        uint64_t v190 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v191 = dispatch thunk of static Equatable.== infix(_:_:)(v185, v186, v23, v190);
        double v192 = v185;
        double v193 = &v347[*(int *)(v393 + 48)];
        BOOL v194 = (v191 & 1) == 0;
        *id v347 = v194;
        double v197 = v361;
        if ((v191 & 1) != 0)
        {
          double v195 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
          v195(v193, v192, v23);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v148 + 8))(v192, v23);
          v187((char *)v193, v186, v23);
          v187(v188, v186, v23);
          dispatch thunk of SetAlgebra.formUnion(_:)(v188, v23, v189);
          double v195 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
        }

        uint64_t v198 = *(int *)(v393 + 48);
        uint64_t v199 = v389;
        float v200 = &v389[v198];
        BOOL *v389 = v194;
        v195(&v199[v198], (char *)v193, v23);
        __n128 v201 = *(void (**)(BOOL *, uint64_t))(v148 + 8);
        v201(v200, v23);
        sub_1001A813C(v385, type metadata accessor for HostedRoutingItem);
        v201((BOOL *)v186, v23);
        uint64_t v154 = v391;
        id v114 = (int *)v392;
        int64_t v196 = v363;
      }

      else
      {
        sub_1001A813C(v153, type metadata accessor for HostedRoutingItem);
        double v195 = *(void (**)(BOOL *, char *, uint64_t))(v148 + 32);
        int64_t v196 = v363;
        double v197 = v361;
      }

      uint64_t v202 = v353;
      v195((BOOL *)v353, v154, v23);
      LOBYTE(v394) = v357;
      RoutingItem.init(identifier:scopeIdentifier:title:symbolName:selectionIndicator:volume:controls:properties:)( v367,  v362,  v366,  v197,  v365,  v360,  v364,  v359,  v381,  v358 | ((unint64_t)v357 << 32),  v379,  v202);
      sub_1001A813C((uint64_t)v390, type metadata accessor for HostedRoutingItem);
      sub_1001A813C(v380, type metadata accessor for HostedRoutingItem);
      unsigned int v203 = v396;
      if ((swift_isUniquelyReferenced_nonNull_native(v396) & 1) == 0)
      {
        sub_1002565D8(0LL, v203[2] + 1LL, 1);
        unsigned int v203 = v396;
      }

      unint64_t v205 = v203[2];
      unint64_t v204 = v203[3];
      if (v205 >= v204 >> 1)
      {
        sub_1002565D8(v204 > 1, v205 + 1, 1);
        unsigned int v203 = v396;
      }

      v203[2] = v205 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v374 + 32))( (unint64_t)v203 + ((*(unsigned __int8 *)(v374 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v374 + 80))
      + *(void *)(v374 + 72) * v205,
        v378,
        v375);
      uint64_t v396 = v203;
      uint64_t v128 = (uint64_t)&v368[v349];
      int64_t v126 = v196 - 1;
      if (!v126)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
    }

    uint64_t v146 = *v138;
    uint64_t v147 = v138[1];
    swift_bridgeObjectRetain();
    uint64_t v148 = v376;
    if ((v140 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v149 = v351;
    RoutingControls.AbsoluteVolumeControl.init(itemIdentifier:)(v146, v147);
    uint64_t v150 = type metadata accessor for RoutingControls.AbsoluteVolumeControl(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56LL))(v149, 0LL, 1LL, v150);
    RoutingControls.absoluteVolume.setter(v149);
    goto LABEL_17;
  }

  swift_bridgeObjectRetain();
  unsigned int v203 = _swiftEmptyArrayStorage;
LABEL_45:
  uint64_t v361 = (char *)v203;
  uint64_t v206 = v329[3];
  int64_t v207 = *(void *)(v206 + 16);
  uint64_t v208 = _swiftEmptyArrayStorage;
  if (v207)
  {
    uint64_t v396 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002565D8(0LL, v207, 0);
    unint64_t v209 = (*(unsigned __int8 *)(v333 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v333 + 80);
    uint64_t v360 = (char *)v206;
    uint64_t v210 = v206 + v209;
    uint64_t v364 = *(char **)(v333 + 72);
    int64_t v363 = v384 + 16;
    uint64_t v211 = v386;
    do
    {
      uint64_t v212 = v23;
      uint64_t v381 = v210;
      uint64_t v213 = v372;
      sub_1001A80F8(v210, v372, type metadata accessor for HostedRoutingItem);
      sub_1001A80F8(v213, (uint64_t)v211, type metadata accessor for HostedRoutingItem);
      uint64_t v214 = *v211;
      uint64_t v215 = v211[1];
      uint64_t v216 = (char *)v211[3];
      uint64_t v379 = (char *)v211[2];
      uint64_t v380 = v214;
      uint64_t v217 = (char *)v211[4];
      uint64_t v218 = v211[5];
      uint64_t v219 = (char *)v211[7];
      uint64_t v377 = (uint64_t *)v211[6];
      uint64_t v378 = v217;
      uint64_t v220 = v373;
      sub_1001A8360((uint64_t)v211 + v114[8], v373, &qword_1003F8920);
      uint64_t v221 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
      uint64_t v368 = (char *)v207;
      id v222 = (unsigned int *)((char *)v211 + v114[12]);
      int64_t v366 = *v222;
      LODWORD(v365) = *((unsigned __int8 *)v222 + 4);
      uint64_t v223 = v369;
      sub_1001A80F8((uint64_t)v211, (uint64_t)v369, type metadata accessor for HostedRoutingItem);
      uint64_t v367 = v216;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v391 = v219;
      uint64_t v224 = swift_bridgeObjectRetain();
      RoutingControls.init()(v224);
      char v225 = *((_BYTE *)v223 + v114[13]);
      uint64_t v226 = v223[3];
      uint64_t v227 = v218;
      if (v226)
      {
        uint64_t v394 = v223[2];
        uint64_t v395 = v226;
        swift_bridgeObjectRetain();
        v228._uint64_t countAndFlagsBits = 14906LL;
        v228._object = (void *)0xE200000000000000LL;
        String.append(_:)(v228);
        uint64_t v230 = *v223;
        id v229 = (void *)v223[1];
        swift_bridgeObjectRetain();
        v231._uint64_t countAndFlagsBits = v230;
        v231._object = v229;
        String.append(_:)(v231);
        swift_bridgeObjectRelease();
        uint64_t v232 = v394;
        uint64_t v233 = v395;
      }

      else
      {
        uint64_t v232 = *v223;
        uint64_t v233 = v223[1];
        swift_bridgeObjectRetain();
      }

      id v234 = v356;
      uint64_t v235 = v212;
      char v236 = v391;
      int v237 = v383;
      if ((v225 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        id v238 = v351;
        RoutingControls.AbsoluteVolumeControl.init(itemIdentifier:)(v232, v233);
        uint64_t v239 = type metadata accessor for RoutingControls.AbsoluteVolumeControl(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v239 - 8) + 56LL))(v238, 0LL, 1LL, v239);
        RoutingControls.absoluteVolume.setter(v238);
      }

      if ((v225 & 2) != 0)
      {
        uint64_t v240 = v352;
        RoutingControls.RelativeVolumeControl.init(itemIdentifier:)(v232, v233);
        uint64_t v241 = type metadata accessor for RoutingControls.RelativeVolumeControl(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v241 - 8) + 56LL))(v240, 0LL, 1LL, v241);
        RoutingControls.relativeVolume.setter(v240);
        sub_1001A813C((uint64_t)v369, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        sub_1001A813C((uint64_t)v369, type metadata accessor for HostedRoutingItem);
        swift_bridgeObjectRelease();
      }

      id v242 = v371;
      uint64_t v243 = v384;
      sub_1001A80F8((uint64_t)v386, v384, type metadata accessor for HostedRoutingItem);
      uint64_t v244 = RoutingItem.Properties.init(rawValue:)(0LL);
      uint64_t v245 = v392;
      unsigned int v246 = *(unsigned __int16 *)(v363 + *(int *)(v392 + 56));
      uint64_t v247 = v376;
      v390 = (char **)v215;
      uint64_t v385 = v227;
      if (((v246 >> 8) & 6 | (v246 >> 7) & 1) == 5)
      {
        uint64_t v248 = v334;
        static RoutingItem.Properties.isBuiltIn.getter(v244);
        uint64_t v249 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
        uint64_t v250 = v388;
        v249(v388, v237, v235);
        uint64_t v251 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        uint64_t v252 = v335;
        uint64_t v362 = v251;
        dispatch thunk of SetAlgebra.intersection(_:)(v248, v235, v251);
        uint64_t v253 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v254 = dispatch thunk of static Equatable.== infix(_:_:)(v252, v248, v235, v253);
        uint64_t v255 = &v338[*(int *)(v393 + 48)];
        BOOL v256 = (v254 & 1) == 0;
        *id v338 = v256;
        if ((v254 & 1) != 0)
        {
          uint64_t v257 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
          v257(v255, v252, v235);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v247 + 8))(v252, v235);
          v249((char *)v255, v248, v235);
          v249(v250, v248, v235);
          dispatch thunk of SetAlgebra.formUnion(_:)(v250, v235, v362);
          uint64_t v257 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
        }

        uint64_t v258 = *(int *)(v393 + 48);
        uint64_t v259 = v389;
        uint64_t v260 = &v389[v258];
        BOOL *v389 = v256;
        v257(&v259[v258], (char *)v255, v235);
        uint64_t v261 = *(void (**)(BOOL *, uint64_t))(v247 + 8);
        v261(v260, v235);
        uint64_t v244 = ((uint64_t (*)(char *, uint64_t))v261)(v248, v235);
        id v242 = v371;
        id v234 = v356;
        int v237 = v383;
        uint64_t v243 = v384;
        char v236 = v391;
        uint64_t v245 = v392;
        uint64_t v215 = (uint64_t)v390;
        uint64_t v227 = v385;
      }

      uint64_t v262 = v237;
      if (*(_BYTE *)(v243 + *(int *)(v245 + 40)) == 1)
      {
        static RoutingItem.Properties.isPlaying.getter(v244);
        char v263 = v234;
        id v264 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
        uint64_t v265 = v388;
        uint64_t v266 = v382;
        v264(v388, v237, v382);
        uint64_t v267 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        uint64_t v268 = v336;
        uint64_t v362 = v267;
        dispatch thunk of SetAlgebra.intersection(_:)(v263, v266, v267);
        uint64_t v269 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v270 = dispatch thunk of static Equatable.== infix(_:_:)(v268, v263, v266, v269);
        uint64_t v271 = &v339[*(int *)(v393 + 48)];
        BOOL v272 = (v270 & 1) == 0;
        BOOL *v339 = v272;
        if ((v270 & 1) != 0)
        {
          unint64_t v273 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
          v273(v271, v268, v266);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v247 + 8))(v268, v266);
          v264((char *)v271, v263, v266);
          v264(v265, v263, v266);
          dispatch thunk of SetAlgebra.formUnion(_:)(v265, v266, v362);
          unint64_t v273 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
        }

        uint64_t v274 = *(int *)(v393 + 48);
        id v275 = v389;
        uint64_t v276 = &v389[v274];
        BOOL *v389 = v272;
        v273(&v275[v274], (char *)v271, v266);
        id v277 = *(void (**)(BOOL *, uint64_t))(v247 + 8);
        v277(v276, v266);
        uint64_t v244 = ((uint64_t (*)(char *, uint64_t))v277)(v263, v266);
        id v242 = v371;
        char v236 = v391;
        uint64_t v245 = v392;
        uint64_t v243 = v384;
        uint64_t v227 = v385;
        uint64_t v215 = (uint64_t)v390;
      }

      if (*(_BYTE *)(v243 + *(int *)(v245 + 64)) == 1)
      {
        uint64_t v278 = v337;
        static RoutingItem.Properties.isDisabled.getter(v244);
        uint64_t v279 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
        uint64_t v280 = v388;
        id v281 = v262;
        uint64_t v23 = v382;
        v279(v388, v281, v382);
        uint64_t v282 = sub_100156FEC( &qword_1003FC4D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        id v283 = v242;
        dispatch thunk of SetAlgebra.intersection(_:)(v278, v23, v282);
        uint64_t v284 = sub_100156FEC( &qword_1003FC4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.Properties,  (uint64_t)&protocol conformance descriptor for RoutingItem.Properties);
        char v285 = dispatch thunk of static Equatable.== infix(_:_:)(v242, v278, v23, v284);
        uint64_t v286 = &v340[*(int *)(v393 + 48)];
        BOOL v287 = (v285 & 1) == 0;
        BOOL *v340 = v287;
        if ((v285 & 1) != 0)
        {
          uint64_t v288 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
          v288(v286, v283, v23);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v247 + 8))(v242, v23);
          v279((char *)v286, v278, v23);
          v279(v280, v278, v23);
          dispatch thunk of SetAlgebra.formUnion(_:)(v280, v23, v282);
          uint64_t v288 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
        }

        uint64_t v291 = *(int *)(v393 + 48);
        id v292 = v389;
        uint64_t v293 = &v389[v291];
        BOOL *v389 = v287;
        v288(&v292[v291], (char *)v286, v23);
        uint64_t v294 = *(void (**)(BOOL *, uint64_t))(v247 + 8);
        v294(v293, v23);
        sub_1001A813C(v384, type metadata accessor for HostedRoutingItem);
        v294((BOOL *)v278, v23);
        unint64_t v290 = v383;
        uint64_t v289 = v368;
        uint64_t v215 = (uint64_t)v390;
        char v236 = v391;
        uint64_t v227 = v385;
      }

      else
      {
        sub_1001A813C(v243, type metadata accessor for HostedRoutingItem);
        uint64_t v288 = *(void (**)(BOOL *, char *, uint64_t))(v247 + 32);
        uint64_t v289 = v368;
        unint64_t v290 = v262;
        uint64_t v23 = v382;
      }

      id v295 = v350;
      v288((BOOL *)v350, v290, v23);
      LOBYTE(v394) = (_BYTE)v365;
      RoutingItem.init(identifier:scopeIdentifier:title:symbolName:selectionIndicator:volume:controls:properties:)( v380,  v215,  v379,  v367,  v378,  v227,  v377,  v236,  v373,  v366 | ((unint64_t)v365 << 32),  v387,  v295);
      uint64_t v211 = v386;
      sub_1001A813C((uint64_t)v386, type metadata accessor for HostedRoutingItem);
      sub_1001A813C(v372, type metadata accessor for HostedRoutingItem);
      uint64_t v208 = v396;
      if ((swift_isUniquelyReferenced_nonNull_native(v396) & 1) == 0)
      {
        sub_1002565D8(0LL, v208[2] + 1LL, 1);
        uint64_t v211 = v386;
        uint64_t v208 = v396;
      }

      unint64_t v297 = v208[2];
      unint64_t v296 = v208[3];
      if (v297 >= v296 >> 1)
      {
        sub_1002565D8(v296 > 1, v297 + 1, 1);
        uint64_t v211 = v386;
        uint64_t v208 = v396;
      }

      v208[2] = v297 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v374 + 32))( (unint64_t)v208 + ((*(unsigned __int8 *)(v374 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v374 + 80))
      + *(void *)(v374 + 72) * v297,
        v370,
        v375);
      uint64_t v396 = v208;
      uint64_t v210 = (uint64_t)&v364[v381];
      int64_t v207 = (int64_t)(v289 - 1);
      id v114 = (int *)v392;
    }

    while (v207);
    swift_bridgeObjectRelease();
  }

  unint64_t v298 = v319;
  uint64_t v299 = (uint64_t)v329;
  uint64_t v300 = v323;
  sub_1001A8360((uint64_t)v329 + v319[7], v323, &qword_1003F9450);
  sub_1002543C4(v300, v330);
  (*(void (**)(char *, uint64_t, uint64_t))(v324 + 16))(v331, v299 + v298[13], v325);
  LODWORD(v393) = *(unsigned __int8 *)(v299 + v298[14]);
  NSString v301 = (unsigned int *)(v299 + v298[12]);
  uint64_t v392 = *v301;
  LODWORD(v39sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = *((unsigned __int8 *)v301 + 4);
  id v302 = v322;
  (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v322, v299 + v298[8], v321);
  id v303 = (uint64_t *)(v299 + v298[11]);
  unint64_t v304 = v303[1];
  if (v304)
  {
    v390 = (char **)*v303;
    unint64_t v305 = v304;
  }

  else
  {
    unint64_t v305 = 0x800000010033FE80LL;
    v390 = (char **)0xD000000000000013LL;
  }

  uint64_t v306 = v317;
  uint64_t v307 = v326;
  sub_1001A8360(v299 + v298[15], v326, &qword_1003F9448);
  uint64_t v308 = v328;
  id v309 = v327;
  uint64_t v310 = v318;
  (*(void (**)(char *, char *, uint64_t))(v328 + 16))(v327, v306, v318);
  swift_bridgeObjectRetain();
  LOBYTE(v394) = (_BYTE)v391;
  uint64_t v311 = v332;
  RoutingSession.init(identifier:preferredItems:remainingItems:nowPlayingInfo:lastPlayingSnapshot:limitedRouting:volume:controls:symbolName:hostInfo:properties:)( v315,  v314,  v361,  v208,  v330,  v331,  v393,  v392 | ((unint64_t)v391 << 32),  v302,  v390,  v305,  v307,  v309);
  sub_1001603DC(v316, &qword_1003F94C0);
  (*(void (**)(char *, uint64_t))(v308 + 8))(v306, v310);
  sub_1001A813C(v299, type metadata accessor for HostedRoutingSession);
  uint64_t v312 = type metadata accessor for RoutingSession(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v312 - 8) + 56LL))( v311,  0LL,  1LL,  v312);
}

uint64_t sub_1002543C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v36 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
  uint64_t v3 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001A8360(a1, (uint64_t)v11, &qword_1003F9450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_1001603DC(a1, &qword_1003F9450);
    sub_1001603DC((uint64_t)v11, &qword_1003F9450);
    uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( v38,  1LL,  1LL,  v16);
  }

  else
  {
    uint64_t v35 = a1;
    sub_1001A81D4((uint64_t)v11, (uint64_t)v15, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    uint64_t v18 = *(void *)v15;
    uint64_t v19 = *((void *)v15 + 1);
    uint64_t v21 = *((void *)v15 + 2);
    uint64_t v20 = *((void *)v15 + 3);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v15[*(int *)(v12 + 36)], v5);
    uint64_t v22 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v23 = v37;
    uint64_t result = v22(v37, &v15[*(int *)(v12 + 40)], v36);
    uint64_t v24 = *((void *)v15 + 4);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = *((unsigned int *)v15 + 10);
      uint64_t v27 = v21;
      uint64_t v28 = *((void *)v15 + 6);
      uint64_t v29 = v24 + 16 * v25;
      uint64_t v30 = *(void *)(v29 + 24);
      uint64_t v36 = *(void *)(v29 + 16);
      swift_retain(v28);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v39 = 0;
      uint64_t v33 = v26;
      uint64_t v31 = v38;
      RoutingSession.NowPlayingInfo.init(title:subtitle:playbackInfo:trackInfo:artworkToken:applicationBundleIdentifier:playbackProcessIdentifier:)( v18,  v19,  v27,  v20,  v8,  v23,  v28,  v36,  v30,  v33);
      sub_1001603DC(v35, &qword_1003F9450);
      sub_1001A813C((uint64_t)v15, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      uint64_t v32 = type metadata accessor for RoutingSession.NowPlayingInfo(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( v31,  0LL,  1LL,  v32);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10025467C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68(&qword_1003F94C0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v20 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) + 20));
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1002568EC(v8, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
  uint64_t v9 = v20;
  sub_1001A8360(v0, (uint64_t)v7, &qword_1003F94C0);
  uint64_t v10 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1LL, v10);
  sub_1001603DC((uint64_t)v7, &qword_1003F94C0);
  if (v13 == 1)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_5:
    uint64_t v20 = v9;
    sub_1002568EC((uint64_t)v14, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
    return v20;
  }

  uint64_t v15 = sub_100156B68(&qword_1003F94E8);
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v14 = (void *)swift_allocObject(v15, v17 + *(void *)(v11 + 72), v16 | 7);
  *((_OWORD *)v14 + sub_1001BA1E8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1) = xmmword_10034BE40;
  sub_1001A8360(v1, (uint64_t)v5, &qword_1003F94C0);
  uint64_t result = v12(v5, 1LL, v10);
  if ((_DWORD)result != 1)
  {
    sub_1001A81D4((uint64_t)v5, (uint64_t)v14 + v17, type metadata accessor for HostedRoutingSession);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_100254850()
{
  uint64_t v3 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) + 20));
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1002568EC(v1, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
  return v3;
}

uint64_t sub_1002548B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for HostedRoutingSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(a4, 1LL, 1LL, v8);
  sub_1001A831C(a3, a4, &qword_1003F94C0);
  uint64_t result = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  *(void *)(a4 + *(int *)(result + 20)) = a1;
  *(void *)(a4 + *(int *)(result + sub_10022A300(*(void *)(v0 + 16), *(os_log_s **)(v0 + 24)) = a2;
  return result;
}

unint64_t sub_100254930()
{
  uint64_t v1 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD00000000000002FLL;
  unint64_t v17 = 0x800000010033FEA0LL;
  sub_1001A8360(v0, (uint64_t)v3, &qword_1003F94C0);
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v3, 1LL, v4) == 1)
  {
    sub_1001603DC((uint64_t)v3, &qword_1003F94C0);
    uint64_t v5 = (void *)0xE300000000000000LL;
    unint64_t v6 = 7104878LL;
  }

  else
  {
    unint64_t v6 = sub_100250D14();
    uint64_t v5 = v7;
    sub_1001A813C((uint64_t)v3, type metadata accessor for HostedRoutingSession);
  }

  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v9._object = (void *)0xEC000000203A736ELL;
  String.append(_:)(v9);
  uint64_t v15 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) + 20));
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_1002568EC(v10, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
  v11._uint64_t countAndFlagsBits = Array.description.getter(v15, v4);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 62LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return v16;
}

unint64_t sub_100254B04()
{
  uint64_t v1 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v38 = 0LL;
  unint64_t v39 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease();
  unint64_t v38 = 0xD00000000000002ELL;
  unint64_t v39 = 0x800000010033FED0LL;
  sub_1001A8360(v0, (uint64_t)v7, &qword_1003F94C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1LL, v1) == 1)
  {
    sub_1001603DC((uint64_t)v7, &qword_1003F94C0);
    Swift::String v8 = (void *)0xE300000000000000LL;
    uint64_t v9 = 7104878LL;
  }

  else
  {
    uint64_t v9 = sub_100250E30();
    Swift::String v8 = v10;
    sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingSession);
  }

  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v8;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x6F6973736573202CLL;
  v12._object = (void *)0xED00000A203A736ELL;
  String.append(_:)(v12);
  uint64_t v35 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) + 20));
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_1002568EC(v13, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
  uint64_t v14 = v35;
  int64_t v15 = *(void *)(v35 + 16);
  if (v15)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v15, 0);
    uint64_t v16 = v14 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v17 = *(void *)(v2 + 72);
    v33[1] = v14;
    uint64_t v34 = v17;
    do
    {
      sub_1001A80F8(v16, (uint64_t)v4, type metadata accessor for HostedRoutingSession);
      uint64_t v35 = 8224LL;
      unint64_t v36 = 0xE200000000000000LL;
      v18._uint64_t countAndFlagsBits = sub_100250E30();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      uint64_t v20 = v35;
      unint64_t v19 = v36;
      sub_1001A813C((uint64_t)v4, type metadata accessor for HostedRoutingSession);
      uint64_t v21 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_10015DCE8(0, v21[2] + 1LL, 1);
        uint64_t v21 = v37;
      }

      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1)
      {
        sub_10015DCE8(v22 > 1, v23 + 1, 1);
        uint64_t v21 = v37;
      }

      v21[2] = v23 + 1;
      uint64_t v24 = &v21[2 * v23];
      v24[4] = v20;
      v24[5] = v19;
      v16 += v34;
      --v15;
    }

    while (v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v35 = (uint64_t)v21;
  uint64_t v25 = sub_100156B68(&qword_1003FA010);
  unint64_t v26 = sub_100200720();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(2604LL, 0xE200000000000000LL, v25, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 10LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  return v38;
}

void sub_100254E70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v26 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001A8360(v2, (uint64_t)v16, &qword_1003F94C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_1001A81D4((uint64_t)v16, (uint64_t)v13, type metadata accessor for HostedRoutingSession);
    Hasher._combine(_:)(1u);
    sub_1002514B8(a1);
    sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSession);
  }

  uint64_t v17 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v18 = *(void *)(v2 + *(int *)(v17 + 20));
  Hasher._combine(_:)(*(void *)(v18 + 16));
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v26 = v2;
    uint64_t v27 = v5;
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v21 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A80F8(v20, (uint64_t)v11, type metadata accessor for HostedRoutingSession);
      sub_1002514B8(a1);
      sub_1001A813C((uint64_t)v11, type metadata accessor for HostedRoutingSession);
      v20 += v21;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v2 = v26;
    uint64_t v5 = v27;
  }

  uint64_t v22 = *(void *)(v2 + *(int *)(v17 + 24));
  Hasher._combine(_:)(*(void *)(v22 + 16));
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = v22 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v25 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A80F8(v24, (uint64_t)v8, type metadata accessor for HostedRoutingSession);
      sub_1002514B8(a1);
      sub_1001A813C((uint64_t)v8, type metadata accessor for HostedRoutingSession);
      v24 += v25;
      --v23;
    }

    while (v23);
    swift_bridgeObjectRelease();
  }

Swift::Int sub_1002550E8(uint64_t a1, uint64_t a2)
{
  return sub_1002550F4(a1, a2, (void (*)(void *))sub_100254E70);
}

Swift::Int sub_1002550F4(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  return Hasher._finalize()();
}

Swift::Int sub_100255138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100255144(a1, a2, a3, (void (*)(void *))sub_100254E70);
}

Swift::Int sub_100255144(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  return Hasher._finalize()();
}

uint64_t sub_10025518C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100156B68(&qword_1003FC4E8);
  __chkstk_darwin(v7);
  uint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1001A8360(a1, (uint64_t)v12, &qword_1003FD0B0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_1001603DC(a1, &qword_1003FD0B0);
    sub_1001603DC((uint64_t)v12, &qword_1003FD0B0);
    uint64_t v17 = type metadata accessor for RoutingSessionSnapshot(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( a2,  1LL,  1LL,  v17);
  }

  else
  {
    sub_1001A81D4((uint64_t)v12, (uint64_t)v16, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = sub_10024E0A8(v19);
    swift_bridgeObjectRelease();
    sub_1001A8360((uint64_t)v16, (uint64_t)v6, &qword_1003F94C0);
    sub_100252210((uint64_t)v6, (uint64_t)v9);
    RoutingSessionSnapshot.init(sessions:activeSession:)(v20, v9);
    sub_1001603DC(a1, &qword_1003FD0B0);
    sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v21 = type metadata accessor for RoutingSessionSnapshot(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))( a2,  0LL,  1LL,  v21);
  }

uint64_t sub_1002553D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100255494()
{
  uint64_t v1 = (void *)type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(void *, uint64_t, void *))(v2 + 16))(v4, v0, v1);
  LODWORD(result) = (*(uint64_t (**)(void *, void *))(v2 + 88))(v4, v1);
  if ((_DWORD)result == enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    (*(void (**)(void *, void *))(v2 + 96))(v4, v1);
    uint64_t v6 = *v4;
    uint64_t v1 = (void *)v4[1];
    uint64_t v4 = sub_1002A265C();
    swift_beginAccess(v4, v26, 0LL, 0LL);
    uint64_t v7 = (void *)v4[1];
    BOOL v8 = *v4 == v6 && v7 == v1;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v7, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A2718();
    swift_beginAccess(v4, v25, 0LL, 0LL);
    uint64_t v9 = (void *)v4[1];
    BOOL v10 = *v4 == v6 && v9 == v1;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v9, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A2898();
    swift_beginAccess(v4, v24, 0LL, 0LL);
    uint64_t v11 = (void *)v4[1];
    BOOL v12 = *v4 == v6 && v11 == v1;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v11, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A28A4();
    swift_beginAccess(v4, v23, 0LL, 0LL);
    uint64_t v13 = (void *)v4[1];
    BOOL v14 = *v4 == v6 && v13 == v1;
    if (v14
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v13, v6, v1, 0LL) & 1) != 0
      || (v4 = sub_1002A28B0(), swift_beginAccess(v4, v22, 0LL, 0LL), uint64_t v15 = (void *)v4[1], *v4 == v6) && v15 == v1
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v15, v6, v1, 0LL) & 1) != 0
      || (v4 = sub_1002A28BC(), swift_beginAccess(v4, v21, 0LL, 0LL), BOOL v16 = (void *)v4[1], *v4 == v6) && v16 == v1)
    {
LABEL_27:
      swift_bridgeObjectRelease();
    }

    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*v4, v16, v6, v1, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v1 = 0LL;
      if ((v20 & 1) == 0) {
        return (uint64_t)v1;
      }
    }

    uint64_t result = (uint64_t)[(id)objc_opt_self(MRUserSettings) currentSettings];
    if (result) {
      goto LABEL_42;
    }
    __break(1u);
  }

  if ((_DWORD)result == enum case for RoutingSessionConfiguration.Context.deviceTarget(_:)
    || (_DWORD)result == enum case for RoutingSessionConfiguration.Context.platterTarget(_:))
  {
    (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
    return 1LL;
  }

  if ((_DWORD)result != enum case for RoutingSessionConfiguration.Context.nonUI(_:)
    && (_DWORD)result != enum case for RoutingSessionConfiguration.Context.ui(_:))
  {
    (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
    return 0LL;
  }

  uint64_t result = (uint64_t)[(id)objc_opt_self(MRUserSettings) currentSettings];
  if (result)
  {
LABEL_42:
    uint64_t v19 = (void *)result;
    uint64_t v1 = [(id)result supportSystemEndpoints];

    return (uint64_t)v1;
  }

  __break(1u);
  return result;
}

void *sub_1002557B0()
{
  uint64_t v1 = (void *)type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(void *, uint64_t, void *))(v2 + 16))(v4, v0, v1);
  LODWORD(result) = (*(uint64_t (**)(void *, void *))(v2 + 88))(v4, v1);
  if ((_DWORD)result == enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    (*(void (**)(void *, void *))(v2 + 96))(v4, v1);
    uint64_t v6 = *v4;
    uint64_t v1 = (void *)v4[1];
    uint64_t v4 = sub_1002A265C();
    swift_beginAccess(v4, v26, 0LL, 0LL);
    uint64_t v7 = (void *)v4[1];
    BOOL v8 = *v4 == v6 && v7 == v1;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v7, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A2718();
    swift_beginAccess(v4, v25, 0LL, 0LL);
    uint64_t v9 = (void *)v4[1];
    BOOL v10 = *v4 == v6 && v9 == v1;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v9, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A2898();
    swift_beginAccess(v4, v24, 0LL, 0LL);
    uint64_t v11 = (void *)v4[1];
    BOOL v12 = *v4 == v6 && v11 == v1;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v11, v6, v1, 0LL) & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_1002A28A4();
    swift_beginAccess(v4, v23, 0LL, 0LL);
    uint64_t v13 = (void *)v4[1];
    BOOL v14 = *v4 == v6 && v13 == v1;
    if (v14
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v13, v6, v1, 0LL) & 1) != 0
      || (v4 = sub_1002A28B0(), swift_beginAccess(v4, v22, 0LL, 0LL), uint64_t v15 = (void *)v4[1], *v4 == v6) && v15 == v1
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v15, v6, v1, 0LL) & 1) != 0
      || (v4 = sub_1002A28BC(), swift_beginAccess(v4, v21, 0LL, 0LL), BOOL v16 = (void *)v4[1], *v4 == v6) && v16 == v1)
    {
LABEL_27:
      swift_bridgeObjectRelease();
    }

    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*v4, v16, v6, v1, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v1 = 0LL;
      if ((v20 & 1) == 0) {
        return v1;
      }
    }

    uint64_t result = [(id)objc_opt_self(MRUserSettings) currentSettings];
    if (result) {
      goto LABEL_40;
    }
    __break(1u);
  }

  BOOL v17 = (_DWORD)result == enum case for RoutingSessionConfiguration.Context.deviceTarget(_:)
     || (_DWORD)result == enum case for RoutingSessionConfiguration.Context.platterTarget(_:);
  if (v17
    || ((_DWORD)result != enum case for RoutingSessionConfiguration.Context.nonUI(_:)
      ? (BOOL v18 = (_DWORD)result == enum case for RoutingSessionConfiguration.Context.ui(_:))
      : (BOOL v18 = 1),
        !v18))
  {
    (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
    return 0LL;
  }

  uint64_t result = [(id)objc_opt_self(MRUserSettings) currentSettings];
  if (result)
  {
LABEL_40:
    uint64_t v19 = result;
    uint64_t v1 = [result supportSystemEndpoints];

    return v1;
  }

  __break(1u);
  return result;
}

id sub_100255AB4()
{
  uint64_t v0 = dispatch thunk of RoutingInteraction.Action.HandoffContext.sourcePlayerPath.getter();
  if (!v0) {
    return (id)RoutingInteraction.Action.HandoffContext.mediaTitle.getter(v0);
  }
  uint64_t v1 = v0;
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___MRPlayerPath);
  uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  sub_10016083C(0LL, &qword_1003F88E0, off_100397340);
  id v5 = sub_100298F38();
  id v6 = [v5 queryExistingPlayerPath:v4];

  if (!v6) {
    goto LABEL_11;
  }
  id v7 = [v6 playerClient];
  if (!v7)
  {
    swift_unknownObjectRelease(v1);

    return (id)RoutingInteraction.Action.HandoffContext.mediaTitle.getter(v0);
  }

  BOOL v8 = v7;
  id result = [v7 playbackQueue];
  if (result)
  {
    BOOL v10 = result;
    id v11 = [result contentItemWithOffset:0];

    if (v11)
    {
      id v12 = [v11 metadata];

      if (v12)
      {
        id v13 = [v12 title];

        if (v13)
        {
          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

          swift_unknownObjectRelease(v1);
          return (id)v14;
        }
      }
    }

LABEL_11:
    uint64_t v0 = swift_unknownObjectRelease(v1);
    return (id)RoutingInteraction.Action.HandoffContext.mediaTitle.getter(v0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100255C60@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v99 = a1;
  id v107 = a2;
  uint64_t v97 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(uint64_t (***)(char *, uint64_t))(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v106 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  id v5 = (uint64_t *)((char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v6);
  uint64_t v100 = (uint64_t)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v102 = *(void *)(v10 - 8);
  uint64_t v103 = v10;
  __chkstk_darwin(v10);
  uint64_t v105 = (uint64_t (**)(char *, uint64_t))((char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  BOOL v16 = (uint64_t *)((char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v14);
  BOOL v18 = (char *)&v94 - v17;
  uint64_t v19 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  char v20 = *(uint64_t (***)(char *, uint64_t))(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  RoutingSessionConfiguration.attribution.getter(v21);
  uint64_t v24 = v20[11](v23, v19);
  if ((_DWORD)v24 != enum case for RoutingSessionConfiguration.Attribution.attributed(_:))
  {
    if ((_DWORD)v24 == enum case for RoutingSessionConfiguration.Attribution.none(_:)) {
      return RoutingSessionConfiguration.attribution.getter(v24);
    }
LABEL_44:
    uint64_t v90 = v97;
    ((void (*)(char *, uint64_t, uint64_t))v2[2])(v96, v104, v97);
    uint64_t v108 = 0LL;
    unint64_t v109 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(107LL);
    v91._uint64_t countAndFlagsBits = 0xD000000000000069LL;
    v91._object = (void *)0x800000010033FF30LL;
    String.append(_:)(v91);
    uint64_t v92 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    v93._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v90, v92);
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v108,  v109,  "mediaremoted/HostedRoutingSessionModels.swift",  45LL,  2LL,  1092LL,  0);
    goto LABEL_45;
  }

  LODWORD(v97) = v24;
  v20[12](v23, v19);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v23, v12);
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  uint64_t v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 88))(v16, v12);
  uint64_t v26 = v25;
  uint64_t v27 = v12;
  if ((_DWORD)v25 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v28 = v13;
    uint64_t v29 = *v16;
    sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
    uint64_t v30 = sub_1002A27A4(v29);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v12);
    uint64_t v33 = v107;
    *id v107 = v30;
    v33[1] = v32;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 104))(v33, v26, v12);
    uint64_t v34 = v20[13];
LABEL_4:
    uint64_t v35 = v33;
    return ((uint64_t (*)(uint64_t *, void, uint64_t))v34)(v35, v97, v19);
  }

  uint64_t v37 = enum case for RoutingSessionConfiguration.Attribution.AttributionType.anonymous(_:);
  if ((_DWORD)v25 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.anonymous(_:))
  {
    RoutingSessionConfiguration.attribution.getter(v25);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }

  if ((_DWORD)v25 != enum case for RoutingSessionConfiguration.Attribution.AttributionType.nowPlayingApp(_:))
  {
    if ((_DWORD)v25 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.foregroundMediaApp(_:))
    {
LABEL_33:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v27);
      uint64_t v63 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104);
      uint64_t v64 = v107;
      v63(v107, v37, v27);
      uint64_t v34 = v20[13];
      uint64_t v35 = v64;
      return ((uint64_t (*)(uint64_t *, void, uint64_t))v34)(v35, v97, v19);
    }

    uint64_t v108 = 0LL;
    unint64_t v109 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(104LL);
    v52._object = (void *)0x800000010033FFA0LL;
    v52._uint64_t countAndFlagsBits = 0xD000000000000066LL;
    String.append(_:)(v52);
    uint64_t v53 = sub_100156FEC( &qword_1003FC4F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.Attribution.AttributionType);
    v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v53);
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v108,  v109,  "mediaremoted/HostedRoutingSessionModels.swift",  45LL,  2LL,  1089LL,  0);
LABEL_45:
    __break(1u);
    return result;
  }

  LODWORD(v96) = enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:);
  unint64_t v38 = v105;
  RoutingInteraction.action.getter(v25);
  uint64_t v39 = v102;
  uint64_t v40 = v103;
  int v41 = (*(uint64_t (**)(void *, uint64_t))(v102 + 88))(v38, v103);
  uint64_t v94 = v13;
  uint64_t v95 = v18;
  if (v41 == enum case for RoutingInteraction.Action.add(_:)
    || v41 == enum case for RoutingInteraction.Action.remove(_:)
    || v41 == enum case for RoutingInteraction.Action.set(_:))
  {
    (*(void (**)(uint64_t (**)(char *, uint64_t), uint64_t))(v39 + 96))(v38, v40);
    uint64_t v42 = v38[2];
    uint64_t v43 = v38[3];
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v44 = sub_10025467C();
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      LODWORD(v104) = v37;
      uint64_t v105 = v20;
      uint64_t v46 = v44 + ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
      uint64_t v47 = *(void *)(v106 + 72);
      while (1)
      {
        sub_1001A80F8(v46, (uint64_t)v5, type metadata accessor for HostedRoutingSession);
        uint64_t v48 = (uint64_t (*)(char *, uint64_t))v5[1];
        BOOL v49 = (uint64_t (*)(char *, uint64_t))*v5 == v42 && v48 == v43;
        if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v5, v48, v42, v43, 0LL) & 1) != 0) {
          break;
        }
        sub_1001A813C((uint64_t)v5, type metadata accessor for HostedRoutingSession);
        v46 += v47;
        if (!--v45)
        {
          uint64_t v50 = 1LL;
          char v20 = v105;
          uint64_t v51 = v100;
          uint64_t v37 = v104;
          goto LABEL_28;
        }
      }

      uint64_t v55 = (uint64_t)v5;
      uint64_t v51 = v100;
      sub_1001A81D4(v55, v100, type metadata accessor for HostedRoutingSession);
      uint64_t v50 = 0LL;
      char v20 = v105;
      uint64_t v37 = v104;
    }

    else
    {
      uint64_t v50 = 1LL;
      uint64_t v51 = v100;
    }

size_t sub_1002565D8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100256604( a1,  a2,  a3,  (void *)*v3,  &qword_1003FC938,  (uint64_t (*)(void))&type metadata accessor for RoutingItem);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100256604( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    BOOL v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100156B68(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  BOOL v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  _OWORD v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (char *)v18 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23);
  }

  swift_release(a4);
  return (size_t)v18;
}

size_t sub_100256778( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    BOOL v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100156B68(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  BOOL v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  _OWORD v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (char *)v18 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23);
  }

  swift_bridgeObjectRelease();
  return (size_t)v18;
}

uint64_t sub_1002568EC(uint64_t result, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(result + 16);
  id v5 = (void *)*v3;
  int64_t v6 = *(void *)(*v3 + 16LL);
  int64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = result;
  size_t result = swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((_DWORD)result && v7 <= v5[3] >> 1)
  {
    if (*(void *)(v10 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v6 <= v7) {
    int64_t v16 = v6 + v4;
  }
  else {
    int64_t v16 = v6;
  }
  size_t result = sub_100256778(result, v16, 1, v5, a2, a3);
  id v5 = (void *)result;
  if (!*(void *)(v10 + 16))
  {
LABEL_13:
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

void sub_100256A04(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }

uint64_t sub_100256A5C()
{
  if ((v2 >> 8) & 6 | (v2 >> 7) & 1) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  __int16 v5 = *(_WORD *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  unsigned __int16 v10 = *(_WORD *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v11 = *(void *)(v1 + 48);
  sub_10018394C(v4, v3, v5);
  sub_10018394C(v9, v8, v10);
  sub_100246A08(v4, v3, v5);
  if ((v13 & 1) == 0)
  {
    sub_100183618(v9, v8, v10);
    sub_100183618(v4, v3, v5);
    return 0LL;
  }

  if (v6 == v12 && v7 == v11)
  {
    sub_100183618(v9, v8, v10);
    sub_100183618(v4, v3, v5);
    return 1LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v11, 0LL);
    sub_100183618(v9, v8, v10);
    sub_100183618(v4, v3, v5);
    return v15 & 1;
  }

uint64_t sub_100256C98(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  *(_WORD *)(a2 + swift_weakDestroy(v0 + 16) = *((_WORD *)a1 + 8);
  *(_OWORD *)a2 = v2;
  return a2;
}

void sub_100256CB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100256CE4@<X0>(void *a1@<X0>, void *a2@<X2>, int a3@<W8>)
{
  if (a3) {
    return 0LL;
  }
  else {
    return sub_1001AE868(a1, a2) & (v4 == v3);
  }
}

uint64_t sub_100256D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v29 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = sub_100156B68(&qword_1003F94B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100156B68(&qword_1003F94C0);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = __chkstk_darwin(v11);
  int64_t v16 = (char *)&v28 - v15;
  __chkstk_darwin(v14);
  BOOL v18 = (char *)&v28 - v17;
  uint64_t v30 = a1;
  sub_1001A8360(a1, (uint64_t)&v28 - v17, &qword_1003F94C0);
  uint64_t v31 = a2;
  sub_1001A8360(a2, (uint64_t)v16, &qword_1003F94C0);
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1001A8360((uint64_t)v18, (uint64_t)v9, &qword_1003F94C0);
  sub_1001A8360((uint64_t)v16, v19, &qword_1003F94C0);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1LL, v4) == 1)
  {
    sub_1001603DC((uint64_t)v16, &qword_1003F94C0);
    sub_1001603DC((uint64_t)v18, &qword_1003F94C0);
    if (v20(v19, 1LL, v4) == 1)
    {
      sub_1001603DC((uint64_t)v9, &qword_1003F94C0);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_1001A8360((uint64_t)v9, (uint64_t)v13, &qword_1003F94C0);
  if (v20(v19, 1LL, v4) == 1)
  {
    sub_1001603DC((uint64_t)v16, &qword_1003F94C0);
    sub_1001603DC((uint64_t)v18, &qword_1003F94C0);
    sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSession);
LABEL_6:
    sub_1001603DC((uint64_t)v9, &qword_1003F94B8);
LABEL_10:
    char v26 = 0;
    return v26 & 1;
  }

  uint64_t v21 = v29;
  sub_1001A81D4(v19, (uint64_t)v29, type metadata accessor for HostedRoutingSession);
  char v22 = sub_100257E44(v13, v21);
  sub_1001A813C((uint64_t)v21, type metadata accessor for HostedRoutingSession);
  sub_1001603DC((uint64_t)v16, &qword_1003F94C0);
  sub_1001603DC((uint64_t)v18, &qword_1003F94C0);
  sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSession);
  sub_1001603DC((uint64_t)v9, &qword_1003F94C0);
  if ((v22 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v23 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v25 = v30;
  uint64_t v24 = v31;
  if ((sub_100248C10( *(void *)(v30 + *(int *)(v23 + 20)),  *(void *)(v31 + *(int *)(v23 + 20)),  type metadata accessor for HostedRoutingSession,  (uint64_t (*)(char *, char *))sub_100257E44) & 1) == 0) {
    goto LABEL_10;
  }
  char v26 = sub_100248C10( *(void *)(v25 + *(int *)(v23 + 24)),  *(void *)(v24 + *(int *)(v23 + 24)),  type metadata accessor for HostedRoutingSession,  (uint64_t (*)(char *, char *))sub_100257E44);
  return v26 & 1;
}

uint64_t sub_10025706C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for RoutingSession.HostInfo(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v80 = v4;
  uint64_t v81 = v5;
  __chkstk_darwin(v4);
  uint64_t v78 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = sub_100156B68(&qword_1003FC940);
  __chkstk_darwin(v79);
  uint64_t v85 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003F9448);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v84 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v82 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v83 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100156B68(&qword_1003FC948);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100156B68(&qword_1003F9450);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v74 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v74 - v28;
  uint64_t v30 = a1[1];
  uint64_t v31 = a2[1];
  if (*a1 == *a2 && v30 == v31
    || (char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v30, *a2, v31, 0LL), v33 = 0, (v32 & 1) != 0))
  {
    uint64_t v34 = a1[3];
    uint64_t v35 = a2[3];
    if (v34)
    {
      if (!v35) {
        goto LABEL_37;
      }
      uint64_t v36 = a1[2];
      uint64_t v37 = a2[2];
      if (v36 != v37 || v34 != v35)
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v34, v37, v35, 0LL);
        char v33 = 0;
        if ((v38 & 1) == 0) {
          return v33 & 1;
        }
      }
    }

    else if (v35)
    {
      goto LABEL_37;
    }

    if ((sub_100248C10( a1[4],  a2[4],  type metadata accessor for HostedRoutingItem,  (uint64_t (*)(char *, char *))sub_100257980) & 1) != 0)
    {
      uint64_t v74 = v17;
      uint64_t v39 = type metadata accessor for HostedRoutingSourceSession(0LL);
      uint64_t v40 = *(int *)(v39 + 28);
      uint64_t v75 = a1;
      sub_1001A8360((uint64_t)a1 + v40, (uint64_t)v29, &qword_1003F9450);
      uint64_t v76 = a2;
      uint64_t v77 = (int *)v39;
      sub_1001A8360((uint64_t)a2 + *(int *)(v39 + 28), (uint64_t)v27, &qword_1003F9450);
      uint64_t v41 = (uint64_t)&v20[*(int *)(v18 + 48)];
      sub_1001A8360((uint64_t)v29, (uint64_t)v20, &qword_1003F9450);
      sub_1001A8360((uint64_t)v27, v41, &qword_1003F9450);
      uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      if (v42((uint64_t)v20, 1LL, v14) == 1)
      {
        sub_1001603DC((uint64_t)v27, &qword_1003F9450);
        sub_1001603DC((uint64_t)v29, &qword_1003F9450);
        if (v42(v41, 1LL, v14) == 1)
        {
          sub_1001603DC((uint64_t)v20, &qword_1003F9450);
LABEL_20:
          uint64_t v48 = v76;
          uint64_t v47 = v77;
          BOOL v49 = v75;
          if ((static RoutingControls.== infix(_:_:)((char *)v75 + v77[8], (char *)v76 + v77[8]) & 1) == 0
            || (sub_1001AE868(*(void **)((char *)v49 + v47[9]), *(void **)((char *)v48 + v47[9])) & 1) == 0
            || (sub_1001AE868(*(void **)((char *)v49 + v47[10]), *(void **)((char *)v48 + v47[10])) & 1) == 0)
          {
            goto LABEL_37;
          }

          uint64_t v50 = v47[11];
          uint64_t v51 = (void *)((char *)v49 + v50);
          uint64_t v52 = *(void *)((char *)v49 + v50 + 8);
          uint64_t v53 = (void *)((char *)v48 + v50);
          uint64_t v54 = v53[1];
          if (v52)
          {
            if (!v54) {
              goto LABEL_37;
            }
            if (*v51 != *v53 || v52 != v54)
            {
              char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(*v51, v52, *v53, v54, 0LL);
              char v33 = 0;
              if ((v55 & 1) == 0) {
                return v33 & 1;
              }
            }
          }

          else if (v54)
          {
            goto LABEL_37;
          }

          uint64_t v56 = v47[12];
          uint64_t v57 = (float *)((char *)v49 + v56);
          char v58 = *((_BYTE *)v49 + v56 + 4);
          uint64_t v59 = (float *)((char *)v48 + v56);
          int v60 = *((unsigned __int8 *)v48 + v56 + 4);
          if ((v58 & 1) != 0)
          {
            uint64_t v62 = (uint64_t)v84;
            uint64_t v61 = (uint64_t)v85;
            uint64_t v64 = (uint64_t)v82;
            uint64_t v63 = (uint64_t)v83;
            if (!v60) {
              goto LABEL_37;
            }
          }

          else
          {
            if (*v57 != *v59) {
              LOBYTE(v6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x800000010033D3B0LL,  "mediaremoted/Analytics.swift",  28LL,  2LL,  91LL, 0) = 1;
            }
            uint64_t v62 = (uint64_t)v84;
            uint64_t v61 = (uint64_t)v85;
            uint64_t v64 = (uint64_t)v82;
            uint64_t v63 = (uint64_t)v83;
            if ((v60 & 1) != 0) {
              goto LABEL_37;
            }
          }

          sub_1001A8360((uint64_t)v49 + v47[14], v63, &qword_1003F9448);
          sub_1001A8360((uint64_t)v48 + v47[14], v64, &qword_1003F9448);
          uint64_t v66 = v61 + *(int *)(v79 + 48);
          sub_1001A8360(v63, v61, &qword_1003F9448);
          sub_1001A8360(v64, v66, &qword_1003F9448);
          uint64_t v67 = v80;
          uint64_t v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
          if (v68(v61, 1LL, v80) == 1)
          {
            sub_1001603DC(v64, &qword_1003F9448);
            sub_1001603DC(v63, &qword_1003F9448);
            if (v68(v66, 1LL, v67) == 1)
            {
              sub_1001603DC(v61, &qword_1003F9448);
              goto LABEL_46;
            }
          }

          else
          {
            sub_1001A8360(v61, v62, &qword_1003F9448);
            if (v68(v66, 1LL, v67) != 1)
            {
              uint64_t v69 = v81;
              uint64_t v70 = v78;
              (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v78, v66, v67);
              uint64_t v71 = sub_100156FEC( &qword_1003FC950,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo,  (uint64_t)&protocol conformance descriptor for RoutingSession.HostInfo);
              char v72 = dispatch thunk of static Equatable.== infix(_:_:)(v62, v70, v67, v71);
              uint64_t v73 = *(void (**)(char *, uint64_t))(v69 + 8);
              v73(v70, v67);
              sub_1001603DC(v64, &qword_1003F9448);
              sub_1001603DC(v63, &qword_1003F9448);
              v73((char *)v62, v67);
              sub_1001603DC(v61, &qword_1003F9448);
              if ((v72 & 1) == 0) {
                goto LABEL_37;
              }
LABEL_46:
              char v33 = static Date.== infix(_:_:)((char *)v49 + v77[15], (char *)v48 + v77[15]);
              return v33 & 1;
            }

            sub_1001603DC(v64, &qword_1003F9448);
            sub_1001603DC(v63, &qword_1003F9448);
            (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v62, v67);
          }

          uint64_t v43 = &qword_1003FC940;
          uint64_t v44 = v61;
          goto LABEL_18;
        }
      }

      else
      {
        sub_1001A8360((uint64_t)v20, (uint64_t)v24, &qword_1003F9450);
        if (v42(v41, 1LL, v14) != 1)
        {
          uint64_t v45 = (uint64_t)v74;
          sub_1001A81D4(v41, (uint64_t)v74, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          char v46 = sub_1002577C8(v24, v45);
          sub_1001A813C(v45, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          sub_1001603DC((uint64_t)v27, &qword_1003F9450);
          sub_1001603DC((uint64_t)v29, &qword_1003F9450);
          sub_1001A813C((uint64_t)v24, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          sub_1001603DC((uint64_t)v20, &qword_1003F9450);
          if ((v46 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_20;
        }

        sub_1001603DC((uint64_t)v27, &qword_1003F9450);
        sub_1001603DC((uint64_t)v29, &qword_1003F9450);
        sub_1001A813C((uint64_t)v24, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      }

      uint64_t v43 = &qword_1003FC948;
      uint64_t v44 = (uint64_t)v20;
LABEL_18:
      sub_1001603DC(v44, v43);
    }

uint64_t sub_1002577C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      goto LABEL_26;
    }
    goto LABEL_10;
  }

  if (!v5) {
    goto LABEL_26;
  }
  uint64_t v6 = *a1;
  BOOL v7 = *a1 == *(void *)a2 && v4 == v5;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, *(void *)a2, v5, 0LL), v9 = 0, (v8 & 1) != 0))
  {
LABEL_10:
    uint64_t v10 = a1[3];
    uint64_t v11 = *(void *)(a2 + 24);
    if (v10)
    {
      if (!v11) {
        goto LABEL_26;
      }
      uint64_t v12 = a1[2];
      uint64_t v13 = *(void *)(a2 + 16);
      if (v12 != v13 || v10 != v11)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0LL);
        char v9 = 0;
        if ((v14 & 1) == 0) {
          return v9 & 1;
        }
      }
    }

    else if (v11)
    {
      goto LABEL_26;
    }

    sub_100256CB0(a1[4], *((unsigned int *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 44) << 32));
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = a1[6];
      uint64_t v17 = *(void *)(a2 + 48);
      if (v16)
      {
        uint64_t v24 = a1[6];
        if (!v17) {
          goto LABEL_26;
        }
        uint64_t v23 = v17;
        uint64_t v18 = type metadata accessor for ArtworkToken(0LL);
        uint64_t v19 = sub_100156FEC( &qword_1003FC958,  (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkToken,  (uint64_t)&protocol conformance descriptor for ArtworkToken);
        swift_retain_n(v16, 2LL);
        LOBYTE(v18) = dispatch thunk of static Equatable.== infix(_:_:)(&v24, &v23, v18, v19);
        uint64_t v20 = v24;
        swift_release(v16);
        swift_release(v20);
        if ((v18 & 1) == 0) {
          goto LABEL_26;
        }
      }

      else if (v17)
      {
        goto LABEL_26;
      }

      if ((sub_1001AE868((void *)a1[7], *(void **)(a2 + 56)) & 1) != 0)
      {
        uint64_t v21 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
        if ((static RoutingSession.NowPlayingInfo.PlaybackInfo.== infix(_:_:)( (char *)a1 + *(int *)(v21 + 36),  a2 + *(int *)(v21 + 36)) & 1) != 0)
        {
          char v9 = static RoutingSession.NowPlayingInfo.TrackInfo.== infix(_:_:)( (char *)a1 + *(int *)(v21 + 40),  a2 + *(int *)(v21 + 40));
          return v9 & 1;
        }
      }
    }

uint64_t sub_100257980(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100156B68(&qword_1003F9528);
  __chkstk_darwin(v8);
  uint64_t v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100156B68(&qword_1003F8920);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = &v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v58[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v58[-v18];
  uint64_t v20 = a1[1];
  uint64_t v21 = a2[1];
  if (*a1 == *a2 && v20 == v21
    || (char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0LL), LOBYTE(v23) = 0, (v22 & 1) != 0))
  {
    uint64_t v24 = a1[3];
    uint64_t v25 = a2[3];
    if (v24)
    {
      if (!v25) {
        goto LABEL_36;
      }
      uint64_t v26 = a1[2];
      uint64_t v27 = a2[2];
      if (v26 != v27 || v24 != v25)
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v24, v27, v25, 0LL);
        LOBYTE(v23) = 0;
        if ((v28 & 1) == 0) {
          return v23 & 1;
        }
      }
    }

    else if (v25)
    {
      goto LABEL_36;
    }

    if ((uint64_t v29 = a1[4], v30 = a1[5], v31 = a2[4], v32 = a2[5], v29 == v31) && v30 == v32
      || (char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0LL), LOBYTE(v23) = 0, (v33 & 1) != 0))
    {
      if ((uint64_t v34 = a1[6], v35 = a1[7], v36 = a2[6], v37 = a2[7], v34 == v36) && v35 == v37
        || (char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v36, v37, 0LL), LOBYTE(v23) = 0, (v38 & 1) != 0))
      {
        uint64_t v62 = v14;
        int v60 = v7;
        uint64_t v39 = v4;
        uint64_t v40 = v5;
        uint64_t v41 = type metadata accessor for HostedRoutingItem(0LL);
        sub_1001A8360((uint64_t)a1 + *(int *)(v41 + 32), (uint64_t)v19, &qword_1003F8920);
        uint64_t v61 = (int *)v41;
        uint64_t v42 = *(int *)(v41 + 32);
        uint64_t v43 = v40;
        uint64_t v44 = v39;
        sub_1001A8360((uint64_t)a2 + v42, (uint64_t)v17, &qword_1003F8920);
        uint64_t v45 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_1001A8360((uint64_t)v19, (uint64_t)v10, &qword_1003F8920);
        sub_1001A8360((uint64_t)v17, v45, &qword_1003F8920);
        char v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
        if (v46((uint64_t)v10, 1LL, v39) == 1)
        {
          sub_1001603DC((uint64_t)v17, &qword_1003F8920);
          sub_1001603DC((uint64_t)v19, &qword_1003F8920);
          if (v46(v45, 1LL, v39) == 1)
          {
            sub_1001603DC((uint64_t)v10, &qword_1003F8920);
LABEL_24:
            uint64_t v51 = v61;
            if (*((unsigned __int8 *)a1 + v61[9]) == *((unsigned __int8 *)a2 + v61[9])
              && *((unsigned __int8 *)a1 + v61[10]) == *((unsigned __int8 *)a2 + v61[10])
              && *((unsigned __int8 *)a1 + v61[11]) == *((unsigned __int8 *)a2 + v61[11]))
            {
              uint64_t v52 = v61[12];
              uint64_t v53 = (float *)((char *)a1 + v52);
              char v54 = *((_BYTE *)a1 + v52 + 4);
              char v55 = (float *)((char *)a2 + v52);
              int v23 = *((unsigned __int8 *)a2 + v52 + 4);
              if ((v54 & 1) != 0)
              {
                if (!v23) {
                  return v23 & 1;
                }
LABEL_33:
                if (*((unsigned __int8 *)a1 + v61[13]) == *((unsigned __int8 *)a2 + v61[13]))
                {
                  sub_100256A04( *(void *)((char *)a1 + v61[14]),  *(void *)((char *)a1 + v61[14] + 8),  *(unsigned __int16 *)((char *)a1 + v61[14] + 16));
                  if ((v56 & 1) != 0 && *((unsigned __int8 *)a1 + v51[15]) == *((unsigned __int8 *)a2 + v51[15]))
                  {
                    LOBYTE(v23) = *((_BYTE *)a1 + v51[16]) ^ *((_BYTE *)a2 + v51[16]) ^ 1;
                    return v23 & 1;
                  }
                }

                goto LABEL_36;
              }

              if (*v53 != *v55) {
                LOBYTE(v23) = 1;
              }
              if ((v23 & 1) == 0) {
                goto LABEL_33;
              }
            }