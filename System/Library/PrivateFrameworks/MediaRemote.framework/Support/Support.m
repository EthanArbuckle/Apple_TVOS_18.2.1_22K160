void sub_1000040EC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSMutableDictionary *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *active;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "allValues", 0));
  v3 = [v2 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v3)
  {
    v4 = v3;
    v5 = *(void *)v27;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v27 != v5) {
          objc_enumerationMutation(v2);
        }
        v7 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        if ((char *)[v7 type] - 6 <= (char *)0xFFFFFFFFFFFFFFFBLL)
        {
          v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v7 type]));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v9, @"type");

          v10 = (void *)objc_claimAutoreleasedReturnValue([v7 date]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v10, @"date");

          v11 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDeviceUID]);
          if (v11)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDeviceUID]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v12, @"uid");
          }

          v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v7 event]));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v13, @"event");

          v14 = [v7 event];
          else {
            v15 = (uint64_t)*(&off_1003992C0 + (void)v14);
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v15,  @"eventdescription");
          v16 = (void *)objc_claimAutoreleasedReturnValue([v7 selectionReason]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v16,  @"selectionreason");

          v17 = (void *)objc_claimAutoreleasedReturnValue([v7 eventReason]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v17,  @"eventreason");

          v18 = (void *)objc_claimAutoreleasedReturnValue([v7 date]);
          [v18 timeIntervalSinceNow];
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", -v19));
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v20,  @"timesince");

          v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v7 changeType]));
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v21,  @"changeType");

          v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 supportsIdleReset]));
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v22,  @"supportsIdleReset");

          v23 = (void *)MRMediaRemoteActiveEndpointChangeTypeCopyDescription([v7 changeType]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v23,  @"changeTypeDescription");

          v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 demoteWhenSyncingToCompanion]));
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v24,  @"demoteWhenSyncingToCompanion");

          active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription([v7 type]);
          if (active) {
            [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:active];
          }
        }
      }

      v4 = [v2 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v4);
  }
}

void sub_100004568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100004580(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100004590(uint64_t a1)
{
}

void sub_100004598(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 40) mutableCopy];
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_map:", &stru_100398EA0));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10000461C(id a1, MRDSystemEndpointControllerRecentlyDismissedRecommendation *a2)
{
  return -[MRDSystemEndpointControllerRecentlyDismissedRecommendation dictionaryRepresentation]( a2,  "dictionaryRepresentation");
}

void sub_1000046E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000046FC(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 32LL);
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v7]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 outputDeviceUID]);
  uint64_t v5 = *(void *)(a1[5] + 8LL);
  v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

LABEL_6:
  return v4;
}

    v11 = objc_claimAutoreleasedReturnValue([v5 clientForBundleIdentifier:v8]);
    goto LABEL_7;
  }

  if (v7) {
    goto LABEL_6;
  }
  if ([v4 isNavigational])
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue([v5 frontmostClient]);
    if (v12) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue( -[MRDRemoteControlServer _contextuallyAwareDestinationAppDisplayIDForCommand:]( self,  "_contextuallyAwareDestinationAppDisplayIDForCommand:",  v4));
  if (v15)
  {
    v16 = _MRLogForCategory(0LL, v14);
    v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue([v4 contextID]);
      v19 = 138543618;
      v20 = v15;
      v21 = 2114;
      v22 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Using previously routed app %{public}@ for context %{public}@",  (uint8_t *)&v19,  0x16u);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue([v5 clientForBundleIdentifier:v15]);
  }

  else
  {
    v12 = 0LL;
  }

  if (!v12)
  {
LABEL_19:
    v11 = objc_claimAutoreleasedReturnValue([v5 localNowPlayingClient]);
    goto LABEL_7;
  }

  IsSystemBooksApplication = 1LL;
LABEL_7:

  return IsSystemBooksApplication;
}

  v15 = 0LL;
  return v15;
}

LABEL_20:
  if (ppStmt)
  {
    if (sqlite3_finalize(ppStmt))
    {
      v30 = _MRLogForCategory(0LL, v29);
      v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Failed to finalize database statement",  v34,  2u);
      }

      id v7 = 1;
    }

    else
    {
      id v7 = 0;
    }
  }

  v11 = v7 == 0;
LABEL_27:

  return v11;
}

  if (ppStmt && sqlite3_finalize(ppStmt))
  {
    v10 = _MRLogForCategory(0LL, v9);
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = ppStmt;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error finalizing database statement %p",  buf,  0xCu);
    }
  }

  if (v8 < 2)
  {
    if (v8) {
      return;
    }
  }

  else
  {
    path = self->_path;
    *(void *)buf = 0LL;
    if (!sqlite3_open_v2( -[NSString fileSystemRepresentation](path, "fileSystemRepresentation"), (sqlite3 **)buf, 2, 0LL))
    {
      LODWORD(ppStmt) = 129;
      sqlite3_file_control(*(sqlite3 **)buf, 0LL, 101, &ppStmt);
      sqlite3_close(*(sqlite3 **)buf);
    }
  }

  -[MRDExternalDeviceCredentialDatabase _initializeDatabaseSchema](self, "_initializeDatabaseSchema");
}
}
}
}

    if (++v8 == 3)
    {
      swift_bridgeObjectRelease();
      return (id)*sub_1002A2F28();
    }
  }

  v14 = *(void *)(v7 + 48);
  if (*(_DWORD *)(v14 + 4 * v13) != v10)
  {
    v15 = ~v12;
    do
    {
      v13 = (v13 + 1) & v15;
      if (((*(void *)(v9 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        goto LABEL_6;
      }
    }

    while (*(_DWORD *)(v14 + 4 * v13) != v10);
  }

  swift_bridgeObjectRelease();
  type metadata accessor for RouteRecommendationSuppressionPolicy();
  switch(v10)
  {
    case 2u:
      v16 = (void *)0xE900000000000068LL;
      v17 = 0x746F6F7465756C62LL;
      break;
    case 3u:
      v16 = (void *)0xE700000000000000LL;
      v17 = 0x79616C50726143LL;
      break;
    case 5u:
      v16 = (void *)0xE500000000000000LL;
      v17 = 0x6465726977LL;
      break;
    default:
      v25 = 0LL;
      v26 = 0xE000000000000000LL;
      v19._countAndFlagsBits = 0x797420726F727265LL;
      v19._object = (void *)0xEA00000000006570LL;
      String.append(_:)(v19);
      v27 = v10;
      type metadata accessor for MRAVOutputDeviceType();
      _print_unlocked<A, B>(_:_:)( &v27,  &v25,  v20,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v17 = v25;
      v16 = (void *)v26;
      break;
  }

  v21 = sub_1002A3048(v17, v16);
  v23 = v22;
  swift_bridgeObjectRelease();
  v24 = sub_1002A2F68(v21, v23);
  swift_bridgeObjectRelease();
  return v24;
}

  uint64_t v5 = (unsigned __int8 *)sub_1002493E0();
  return *v5;
}

  v122 = a5;
  v121 = a4;
  v31 = (id)kMRMediaRemoteOptionCommandID;
  if (kMRMediaRemoteOptionCommandID)
  {
    v32 = v9;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOptionCommandID);
    v35 = v34;
    v29 = (id *)v30;
    v36 = RoutingControl.identifier.getter();
    v132 = &type metadata for String;
    *(void *)&aBlock = v36;
    *((void *)&aBlock + 1) = v37;
    sub_100160944(&aBlock, v135);
    v38 = v128;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v128);
    v129 = v38;
    sub_1001FCB20(v135, v33, v35, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(void *)&aBlock = 0LL;
    v42 = [v40 dataWithPropertyList:isa format:200 options:0 error:&aBlock];

    v31 = (id)aBlock;
    if (v42)
    {
      v43 = a1;
      swift_bridgeObjectRelease();
      v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

      v47 = objc_allocWithZone((Class)&OBJC_CLASS___MRDRemoteControlCommand);
      v48 = v29;
      sub_100160874(v44, v46);
      v49 = String._bridgeToObjectiveC()();
      v128 = v44;
      v50 = Data._bridgeToObjectiveC()().super.isa;
      sub_1001608B8(v44, v46);
      v123 = [v47 initWithCommandType:v123 playerPath:v48 unresolvedPlayerPath:v48 senderAppDisplayID:v49 optionsData:v50];

      v51 = (void *)(*(uint64_t (**)(void))(*(void *)v127 + 280LL))();
      v52 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
      v53 = [v52 remoteControlServer];

      v55 = v125;
      v54 = v126;
      v56 = v43;
      v57 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v125, v56, v32);
      v58 = *(unsigned __int8 *)(v54 + 80);
      v59 = (v58 + 40) & ~v58;
      v60 = (char *)swift_allocObject(&unk_1003AC6D8, v59 + v124, v58 | 7);
      v61 = v121;
      *((void *)v60 + 2) = v51;
      *((void *)v60 + 3) = v61;
      v62 = v122;
      *((void *)v60 + 4) = v122;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v60[v59], v55, v57);
      v133 = sub_100291D3C;
      v134 = v60;
      *(void *)&aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      v131 = sub_100284344;
      v132 = &unk_1003AC6F0;
      v63 = _Block_copy(&aBlock);
      v64 = v134;
      v65 = v51;
      swift_retain(v62);
      swift_release(v64);
      v66 = v123;
      [v53 sendRemoteControlCommand:v123 completion:v63];

      sub_1001608B8(v128, v46);
      _Block_release(v63);

      return;
    }

    goto LABEL_45;
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  v113 = v31;

  v114 = _convertNSErrorToError(_:)(v113);
  swift_willThrow(v115);
  swift_unexpectedError(v114, "mediaremoted/HostedRoutingSessionDataSource.swift", 49LL, 1LL, 1198LL);
  __break(1u);
}

void sub_100004E7C(_Unwind_Exception *a1)
{
}

void sub_100004E9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);

  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (!v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
      v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v19 = 138543874;
      v20 = v10;
      __int16 v21 = 2114;
      v22 = v11;
      __int16 v23 = 2048;
      id v24 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v19,  0x20u);
      goto LABEL_13;
    }

    if (!v15) {
      goto LABEL_14;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
    v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v19 = 138544130;
    v20 = v10;
    __int16 v21 = 2114;
    v22 = v11;
    __int16 v23 = 2114;
    id v24 = v12;
    __int16 v25 = 2048;
    v26 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  (uint8_t *)&v19,  0x2Au);
LABEL_8:

LABEL_13:
    goto LABEL_14;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
    v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v19 = 138544386;
    v20 = v10;
    __int16 v21 = 2114;
    v22 = v11;
    __int16 v23 = 2114;
    id v24 = v3;
    __int16 v25 = 2114;
    v26 = v12;
    __int16 v27 = 2048;
    uint64_t v28 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v19,  0x34u);
    goto LABEL_8;
  }

  if (v9) {
    sub_1002B43E4(a1, (uint64_t)v3, v8);
  }
LABEL_14:

  uint64_t v18 = *(void *)(a1 + 56);
  if (v18) {
    (*(void (**)(uint64_t, id))(v18 + 16))(v18, v3);
  }
}

void sub_100005174(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 96);
    *(void *)(v4 + 96) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 40) type]));
  [v2 setObject:v6 forKeyedSubscript:v7];
}

void sub_100005208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    qos_class_t v7 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v7, 0LL);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100005300;
    v12[3] = &unk_100398F68;
    __int128 v11 = *(_OWORD *)(a1 + 32);
    id v10 = (id)v11;
    __int128 v13 = v11;
    [v5 waitForPlaybackWithTimeout:v9 queue:v12 completion:7.0];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100005300(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000534C(uint64_t a1, int a2, id obj)
{
  id v5 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10000539C(uint64_t a1)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
    active = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 40) type]));
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:active]);
    id v5 = *(id *)(a1 + 48);
    if (v4 == v5)
    {
    }

    else
    {
      id v6 = v5;
      unsigned __int8 v7 = [v4 isEqual:v5];

      if ((v7 & 1) != 0) {
        goto LABEL_7;
      }
      v8 = objc_alloc(&OBJC_CLASS___NSError);
      active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription(0LL);
      BOOL v9 = -[NSError initWithMRError:format:]( v8,  "initWithMRError:format:",  25LL,  @"Another client updated %@SystemEndpoint during update process",  active);
      uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8LL);
      id v4 = *(id *)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
  }

LABEL_7:
  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_updateSystemEndpoint:event:eventReason:",  *(void *)(a1 + 40),  *(void *)(a1 + 80),  *(void *)(a1 + 56)));
    uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 8LL);
    __int128 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

  v43 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.TelephonyUtilities.sharePlayAppPolicies");
  sharePlayDefaults = v6->_sharePlayDefaults;
  v6->_sharePlayDefaults = v43;

  MRMediaRemoteSetWantsNowPlayingNotifications(1LL);
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v45 addObserver:v6 selector:"handleNowPlayingApplicationDidChangeNotification:" name:kMRMediaRemoteNowPlayingApplicationDidChangeNotification object:0];

  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v46 addObserver:v6 selector:"handlePlaybackStateDidChangeNotification:" name:kMRMediaRemotePlayerPlaybackStateDidChangeNotification object:0];

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v47 addObserver:v6 selector:"handleLocalMusicStateUpdateNotification:" name:@"MRDMusicUserStateCenterLocalStateDidUpdateNotification" object:0];

  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v48 addObserver:v6 selector:"handleNearbyDiscoveryPreferenceChangedNotification:" name:MRGroupSessionNearbyContactDiscoveryPreferenceDidChangeNotification object:0];

  [v5 addObserver:v6];
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[MRSharedSettings currentSettings](&OBJC_CLASS___MRSharedSettings, "currentSettings"));
  v50 = [v49 supportGroupSessionHomePodBoop];

  if (v50)
  {
    if (MSVDeviceIsAudioAccessory())
    {
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v51 addObserver:v6 selector:"handleDeviceInfoChangeNotification:" name:kMRDeviceInfoDidChangeNotification object:0];
    }

    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    v53 = (void *)objc_claimAutoreleasedReturnValue( +[MRUserSettings groupSessionBoopAdvertisementEnabledDidChangeNotification]( &OBJC_CLASS___MRUserSettings,  "groupSessionBoopAdvertisementEnabledDidChangeNotification"));
    [v52 addObserver:v6 selector:"handleBoopAdvertisementEnabledChangeNotification:" name:v53 object:0];
  }

  v54 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionManager queue](v6, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000741B8;
  block[3] = &unk_100399250;
  v57 = v6;
  dispatch_async(v54, block);

LABEL_12:
  return v6;
}
}

  v17 = dispatch_group_create();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 nowPlayingServer]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v11 origin]);
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 originClientForOrigin:v20]);

  v22 = [v21 volumeControlCapabilities];
  if ((_DWORD)v22)
  {
    __int16 v23 = [[MRLegacyVolumeControlCapabilitiesDidChangeMessage alloc] initWithCapabilities:v22];
    [v44 addMessage:v23];
  }

  v42 = v12;
  id v24 = "@36@0:8@16B24@?28" + 17;
  if (([v10 registeredToOutputDeviceUpdates] & 1) != 0
    || (__int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v10 supportedMessages]),
        v26 = [v25 isSupported:65],
        v25,
        (v26 & 1) == 0))
  {
    v41 = v21;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    v54 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue([v11 outputDevices]);
    v31 = [obj countByEnumeratingWithState:&v54 objects:v58 count:16];
    if (v31)
    {
      v32 = v31;
      v33 = *(void *)v55;
      do
      {
        for (i = 0LL; i != v32; i = (char *)i + 1)
        {
          if (*(void *)v55 != v33) {
            objc_enumerationMutation(obj);
          }
          v35 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)i);
          v36 = (void *)objc_claimAutoreleasedReturnValue( -[MRDExternalDeviceRemoteServer _createLocalizedOutputDevice:redactVolume:forClient:endpoint:]( self,  "_createLocalizedOutputDevice:redactVolume:forClient:endpoint:",  v35,  0LL,  v10,  v11));
          dispatch_group_enter(v17);
          v37 = v10;
          v38 = (void *)objc_claimAutoreleasedReturnValue([v35 uid]);
          v47[0] = _NSConcreteStackBlock;
          v47[1] = 3221225472LL;
          v47[2] = sub_1000BF590;
          v47[3] = &unk_10039EEB0;
          v48 = v44;
          v49 = v36;
          v50 = self;
          v51 = v35;
          v52 = v17;
          v39 = v11;
          v53 = v39;
          v40 = v36;
          [v39 outputDeviceVolumeControlCapabilities:v38 queue:&_dispatch_main_q completion:v47];

          uint64_t v10 = v37;
        }

        v32 = [obj countByEnumeratingWithState:&v54 objects:v58 count:16];
      }

      while (v32);
    }

    __int16 v21 = v41;
    id v24 = "";
  }

  else
  {
    __int16 v27 = v10;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v11 outputDevices]);
    v29 = (void *)objc_claimAutoreleasedReturnValue( -[MRDExternalDeviceRemoteServer _createLocalizedOutputDevices:redactVolume:forClient:endpoint:]( self,  "_createLocalizedOutputDevices:redactVolume:forClient:endpoint:",  v28,  0LL,  v27,  v11));

    v30 = [[MRSyncOutputDevicesMessage alloc] initWithOutputDevices:v29];
    [v44 addMessage:v30];

    uint64_t v10 = v27;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = *((void *)v24 + 192);
  block[2] = sub_1000BF964;
  block[3] = &unk_100399EC0;
  uint64_t v12 = v42;
  v46 = v42;
  dispatch_group_notify(v17, &_dispatch_main_q, block);

LABEL_21:
}

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
}

  v16 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  uint64_t v18 = -[MRPlayerPath initWithOrigin:client:player:](v16, "initWithOrigin:client:player:", v17, 0LL, 0LL);

  int v19 = 0;
  id v6 = v18;
LABEL_10:
  [*(id *)(a1 + 32) setNowPlayingAirPlaySession:v6];
  v20 = *(void **)(a1 + 40);
  uint64_t v28 = _NSConcreteStackBlock;
  v29 = 3221225472LL;
  v30 = sub_10010D2A4;
  v31 = &unk_100399A78;
  __int16 v21 = v5;
  v32 = v21;
  v22 = v11;
  v33 = v22;
  __int16 v23 = v6;
  v34 = v23;
  sub_10013ADE4(v20, &v28);
  if ((v19 & 1) == 0)
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    __int16 v25 = [v24 startNowPlayingSessionABC];

    if (v25)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 120) description]);
      v35 = v26;
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
      +[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  &stru_1003AE680,  @"Routing",  @"StartNowPlayingSession",  0LL,  v27,  &stru_1003A1220,  v28,  v29,  v30,  v31,  v32,  v33);
    }
  }
}

    swift_bridgeObjectRelease(v16);
    result = v14;
    id v3 = v33;
  }

  __int128 v13 = v3 + 5;
  if (v3 + 5 >= v32) {
    return 1LL;
  }
  uint64_t v11 = *(void *)(v31 + 8 * v13);
  if (v11)
  {
    uint64_t v12 = v3 + 5;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      return 1LL;
    }
    uint64_t v11 = *(void *)(v31 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }

    __int16 v21 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v21 >= v34) {
      goto LABEL_29;
    }
    v22 = *(void *)(v33 + 8 * v21);
    ++v14;
    if (!v22)
    {
      uint64_t v14 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_29;
      }
      v22 = *(void *)(v33 + 8 * v14);
      if (!v22)
      {
        uint64_t v14 = v21 + 2;
        if (v21 + 2 >= v34) {
          goto LABEL_29;
        }
        v22 = *(void *)(v33 + 8 * v14);
        if (!v22)
        {
          uint64_t v14 = v21 + 3;
          if (v21 + 3 >= v34) {
            goto LABEL_29;
          }
          v22 = *(void *)(v33 + 8 * v14);
          if (!v22) {
            break;
          }
        }
      }
    }

    __int16 v25 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
  }

  swift_bridgeObjectRelease(v55);
  v30(v12, (unint64_t)v15, v8);
LABEL_33:
  v45 = *(void (**)(char *, uint64_t))(v9 + 8);
  v45(v12, v8);
  v45(v15, v8);
LABEL_35:
  swift_release(v56);
  return 1LL;
}

  id v6 = static _HashTable.scale(forCapacity:)(v4);
  if (v3 <= v6) {
    unsigned __int8 v7 = v6;
  }
  else {
    unsigned __int8 v7 = v3;
  }
  id v5 = sub_1001F9E10(v2, v7, 0, v3);
LABEL_11:
  result = swift_release(v1);
  *v0 = v5;
  return result;
}

    v16 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    *(_OWORD *)a1 = v16;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_errorRelease(v4);
    sub_100156BA8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
    goto LABEL_7;
  }

  swift_errorRetain(*a2);
  id v6 = *(void *)a1;
  *(void *)a1 = v5;
  swift_errorRelease(v6);
  unsigned __int8 v7 = a2[1];
  v8 = a2[2];
  BOOL v9 = *((_BYTE *)a2 + 24);
  sub_100156A2C(v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 160), 8) = v7;
  *(void *)(a1 + 16) = v8;
  uint64_t v12 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v9;
  sub_100156BA8(v10, v11, v12);
  return a1;
}

    v31 = v188;
    v34 = v189;
  }

  v37 = v34 + 1;
  if (__OFADD__(v34, 1LL)) {
    goto LABEL_109;
  }
  if (v37 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v37);
  v39 = v34 + 1;
  if (v38) {
    goto LABEL_27;
  }
  v39 = v34 + 2;
  if (v34 + 2 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v39);
  if (v38) {
    goto LABEL_27;
  }
  v39 = v34 + 3;
  if (v34 + 3 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v39);
  if (v38) {
    goto LABEL_27;
  }
  v39 = v34 + 4;
  if (v34 + 4 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v39);
  if (v38) {
    goto LABEL_27;
  }
  v39 = v34 + 5;
  if (v34 + 5 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v39);
  if (v38)
  {
LABEL_27:
    v188 = (v38 - 1) & v38;
    v189 = v39;
    v36 = __clz(__rbit64(v38)) + (v39 << 6);
    goto LABEL_28;
  }

  v40 = v34 + 6;
  if (v34 + 6 >= v178) {
    goto LABEL_53;
  }
  v38 = *(void *)(v176 + 8 * v40);
  if (v38)
  {
    v39 = v34 + 6;
    goto LABEL_27;
  }

  while (1)
  {
    v39 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      goto LABEL_114;
    }
    if (v39 >= v178) {
      break;
    }
    v38 = *(void *)(v176 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_27;
    }
  }

    __int16 v23 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v23 >= v36) {
      goto LABEL_29;
    }
    id v24 = *(void *)(v35 + 8 * v23);
    ++v16;
    if (!v24)
    {
      v16 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_29;
      }
      id v24 = *(void *)(v35 + 8 * v16);
      if (!v24)
      {
        v16 = v23 + 2;
        if (v23 + 2 >= v36) {
          goto LABEL_29;
        }
        id v24 = *(void *)(v35 + 8 * v16);
        if (!v24)
        {
          v16 = v23 + 3;
          if (v23 + 3 >= v36) {
            goto LABEL_29;
          }
          id v24 = *(void *)(v35 + 8 * v16);
          if (!v24) {
            break;
          }
        }
      }
    }

id sub_1000056B8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:",  *(void *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 72),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100005BD0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 80)])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:&off_1003BB1C8]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 outputDeviceUID]);
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = v4[1];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100005D54;
    v13[3] = &unk_100399008;
    id v14 = v3;
    id v15 = v2;
    v16 = v4;
    id v6 = v2;
    id v7 = v3;
    objc_msgSend(v4, "_onSerialQueue_reconnectToOutputDevice:queue:completion:", v7, v5, v13);
  }

  else if ([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 88)])
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:&off_1003BB1E0]);
    v8 = (void *)objc_claimAutoreleasedReturnValue([v12 outputDeviceUID]);
    BOOL v9 = *(void **)(a1 + 40);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);
    objc_msgSend( v9,  "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:",  2,  v8,  4,  @"Origin unregistered",  v11);
  }
}

  ;
}

void sub_100005D54(uint64_t a1, int a2)
{
  if (a2)
  {
    id v12 = [[MRUpdateActiveSystemEndpointRequest alloc] initWithOutputDeviceUID:*(void *)(a1 + 32) reason:@"Reconncetion"];
    objc_msgSend( v12,  "setDemoteWhenSyncingToCompanion:",  objc_msgSend(*(id *)(a1 + 40), "demoteWhenSyncingToCompanion"));
    id v3 = *(void **)(a1 + 48);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    id v5 = objc_msgSend(v3, "_onSerialQueue_updateSystemEndpoint:event:eventReason:", v12, 9, v4);
  }

  else
  {
    id v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
    objc_msgSend( v6,  "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:",  0,  v7,  4,  @"Reconnection",  v9);

    uint64_t v10 = *(void **)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
    objc_msgSend( v10,  "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:",  2,  v11,  4,  @"Reconnection",  v4);
  }
}

void sub_100006020(uint64_t a1)
{
  uint64_t v10 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Playback changed for %@",  *(void *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  objc_msgSend( v2,  "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:",  0,  v3,  v10,  v5);

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  objc_msgSend( v6,  "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:",  2,  v7,  v10,  v9);

  objc_msgSend(*(id *)(a1 + 40), "_onSerialQueue_maybeSetupPlaybackTimerForEvent:", *(void *)(a1 + 48));
}

uint64_t sub_100006D0C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDeviceUID]);
  if (v2 == v3) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = (uint64_t)[v2 isEqual:v3];
  }

  return v4;
}

uint64_t sub_100006ECC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDeviceUID]);
  uint64_t v4 = v3;
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

LABEL_13:
  __int16 v27 = objc_alloc_init(&OBJC_CLASS___MRDSystemEndpointEntry);
  -[MRDSystemEndpointEntry setOutputDeviceUID:](v27, "setOutputDeviceUID:", v92);
  v94 = v9;
  -[MRDSystemEndpointEntry setType:](v27, "setType:", v9);
  -[MRDSystemEndpointEntry setEvent:](v27, "setEvent:", a4);
  uint64_t v28 = v23;
  v29 = (void *)objc_claimAutoreleasedReturnValue([v23 reason]);
  -[MRDSystemEndpointEntry setSelectionReason:](v27, "setSelectionReason:", v29);

  -[MRDSystemEndpointEntry setEventReason:](v27, "setEventReason:", v8);
  v91 = v25;
  v30 = v25;
  v31 = v28;
  -[MRDSystemEndpointEntry setChangeType:](v27, "setChangeType:", v30);
  if (v92) {
    v32 = v20 ^ 1;
  }
  else {
    v32 = 0LL;
  }
  -[MRDSystemEndpointEntry setSupportsIdleReset:](v27, "setSupportsIdleReset:", v32);
  v33 = [v28 demoteWhenSyncingToCompanion];
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  v35 = (id)objc_claimAutoreleasedReturnValue([v31 outputDeviceUID]);
  v93 = v13;
  v89 = v8;
  if (v35 == v13)
  {

LABEL_20:
    v33 = (id)(v33 | [v12 demoteWhenSyncingToCompanion]);
    v38 = a4;
    if (a4 == 1)
    {
      __int16 v21 = v93;
    }

    else
    {
      __int16 v21 = v93;
      if (v12)
      {
        v39 = objc_claimAutoreleasedReturnValue([v12 date]);

        v34 = (void *)v39;
      }
    }

    goto LABEL_24;
  }

  v36 = v35;
  v37 = [v35 isEqual:v13];

  if (v37) {
    goto LABEL_20;
  }
  __int16 v21 = v13;
  v38 = a4;
LABEL_24:
  -[MRDSystemEndpointEntry setDemoteWhenSyncingToCompanion:](v27, "setDemoteWhenSyncingToCompanion:", v33);
  v87 = v34;
  -[MRDSystemEndpointEntry setDate:](v27, "setDate:", v34);
  v40 = self->_systemEndpointEntries;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v94));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v27, v41);

  v42 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVSystemEndpointController systemEndpointInfo](self, "systemEndpointInfo"));
  v43 = (void *)objc_claimAutoreleasedReturnValue( -[MRDAVSystemEndpointController recentlyDismissedRecommendationsInfo]( self,  "recentlyDismissedRecommendationsInfo"));
  -[MRDAVSystemEndpointController _writeSystemEndpointInfo:recentlyDismissedRecommendationsInfo:]( self,  "_writeSystemEndpointInfo:recentlyDismissedRecommendationsInfo:",  v42,  v43);

  v107[0] = _NSConcreteStackBlock;
  v107[1] = 3221225472LL;
  v107[2] = sub_10000784C;
  v107[3] = &unk_100399080;
  v111 = v38;
  v112 = v91;
  v88 = v12;
  v44 = v12;
  v108 = v44;
  v86 = v31;
  v45 = v31;
  v109 = v45;
  v46 = v21;
  v110 = v46;
  v85 = objc_retainBlock(v107);
  if (((unsigned int (*)(void))v85[2])())
  {
    v83 = v44;
    v48 = (void *)MRMediaRemoteActiveEndpointChangeTypeCopyDescription(v91);
    active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription(v94);
    v50 = objc_alloc(&OBJC_CLASS___NSString);
    v51 = (void *)objc_claimAutoreleasedReturnValue([v45 outputDeviceUID]);
    if (v38 > 9) {
      v52 = 0LL;
    }
    else {
      v52 = (uint64_t)*(&off_1003992C0 + v38);
    }
    v58 = (void *)objc_claimAutoreleasedReturnValue([v45 reason]);
    v84 = -[NSString initWithFormat:]( v50,  "initWithFormat:",  @"%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>",  active,  v46,  v51,  v48,  v52,  v89,  v58);

    v60 = _MRLogForCategory(0LL, v59);
    v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v114 = v84;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "[SystemEndpointController] %{public}@",  buf,  0xCu);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100007900;
    block[3] = &unk_1003990A8;
    v62 = v45;
    v103 = v62;
    v104 = self;
    v105 = v91;
    v106 = v94;
    dispatch_async(&_dispatch_main_q, block);
    __int16 v21 = v93;
    v38 = a4;
    if (([v62 isPairedDeviceSync] & 1) == 0)
    {
      v63 = sub_100007960(v84);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v65 = v64;
      if (v64)
      {
        v66 = v64;
      }

      else if ((unint64_t)a4 >= 0xA)
      {
        v66 = @"unknown";
      }

      else
      {
        v66 = *(&off_1003992C0 + a4);
      }

      v68 = kMREventChangeActiveSystemEndpoint;
      v96[0] = _NSConcreteStackBlock;
      v96[1] = 3221225472LL;
      v96[2] = sub_100007A48;
      v96[3] = &unk_1003990D0;
      v97 = v62;
      v98 = active;
      v99 = v48;
      v100 = v66;
      v101 = v83;
      v69 = v66;
      MRAnalyticsSendEvent(v68, 0LL, v96);

      __int16 v21 = v93;
    }
  }

  else
  {
    v53 = _MRLogForCategory(0LL, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled((os_log_t)v48, OS_LOG_TYPE_DEFAULT))
    {
      v54 = v38;
      v55 = (NSString *)MRMediaRemoteActiveEndpointTypeCopyDescription(v94);
      v56 = (void *)objc_claimAutoreleasedReturnValue([v45 outputDeviceUID]);
      if (v54 > 9) {
        v57 = 0LL;
      }
      else {
        v57 = (uint64_t)*(&off_1003992C0 + v54);
      }
      v67 = (void *)objc_claimAutoreleasedReturnValue([v45 reason]);
      *(_DWORD *)buf = 138413314;
      v114 = v55;
      v115 = 2112;
      v116 = v56;
      v117 = 2112;
      v118 = v57;
      v119 = 2112;
      v120 = v8;
      v121 = 2112;
      v122 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  OS_LOG_TYPE_DEFAULT,  "[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>",  buf,  0x34u);

      __int16 v21 = v93;
      v38 = a4;
    }
  }

  v70 = (void *)objc_claimAutoreleasedReturnValue([v45 outputDeviceUID]);
  v71 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVSystemEndpointController originClientForDeviceUID:](self, "originClientForDeviceUID:", v70));

  if (v94 == (id)1)
  {
    v76 = v89;
    v77 = v85;
    if (v38 == 5) {
      notify_post(kMRMediaRemoteProactiveSystemEndpointDidStartPlayingNotifyName);
    }
  }

  else if (v94)
  {
    v76 = v89;
    v77 = v85;
    if (v94 == (id)2)
    {
      v78 = (void *)objc_claimAutoreleasedReturnValue([v71 origin]);
      v79 = (MROrigin *)[v78 copy];
      activeRecommendedOrigin = self->_activeRecommendedOrigin;
      self->_activeRecommendedOrigin = v79;

      v81 = (void *)objc_claimAutoreleasedReturnValue([v45 clientBundleIdentifier]);
      -[MRDAVSystemEndpointController _onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:]( self,  "_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:",  3LL,  v38,  v91,  v89,  v81);
    }
  }

  else
  {
    v72 = (void *)objc_claimAutoreleasedReturnValue([v71 origin]);
    v73 = (MROrigin *)[v72 copy];
    activeOrigin = self->_activeOrigin;
    self->_activeOrigin = v73;

    v75 = (void *)objc_claimAutoreleasedReturnValue([v45 clientBundleIdentifier]);
    v76 = v89;
    -[MRDAVSystemEndpointController _onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:]( self,  "_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:",  1LL,  v38,  v91,  v89,  v75);

    v77 = v85;
    if (((unsigned int (*)(void *))v85[2])(v85))
    {
      -[MRDAVSystemEndpointController _onSerialQueue_maybeSetupUserSelectedTimerForEvent:]( self,  "_onSerialQueue_maybeSetupUserSelectedTimerForEvent:",  1LL);
      -[MRDAVSystemEndpointController _onSerialQueue_maybeSetupPlaybackTimerForEvent:]( self,  "_onSerialQueue_maybeSetupPlaybackTimerForEvent:",  1LL);
    }
  }

  v22 = 0LL;
  id v12 = v88;
  id v14 = v92;
  v8 = v76;
  uint64_t v7 = v86;
LABEL_52:

  return v22;
}

  return (char)v4;
}
}
}

LABEL_14:
  }
  }

  if (ppStmt && sqlite3_finalize(ppStmt))
  {
    v22 = _MRLogForCategory(0LL, v21);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Failed to finalize database statement",  v25,  2u);
    }
  }

  return v3;
}

  return v4;
}
  }
}

  v17 = *(void *)(a1 + 48);
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v3);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) invalidate];
}
}
}

    result = sub_10015B04C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

    v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    __int16 v23 = (uint64_t *)(v22[6] + 16 * v12);
    *__int16 v23 = v7;
    v23[1] = v6;
    *(void *)(v22[7] + 8 * v12) = v10;
    id v24 = v22[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v22[2] = v26;
    __int16 v27 = v45 - 1;
    if (v45 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = (void **)(a1 + 9); ; i += 3)
    {
      id v6 = (uint64_t)*(i - 1);
      v30 = *i;
      v48 = (uint64_t)*(i - 2);
      v29 = v48;
      v49 = v6;
      v31 = (void *)*a3;
      swift_bridgeObjectRetain(v6);
      uint64_t v10 = v30;
      v32 = sub_10015CAD4(v48, v6);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      __int16 v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25) {
        break;
      }
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_10015D9C0(v36, 1LL);
        v32 = sub_10015CAD4(v48, v6);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v37 & 1) != 0) {
        goto LABEL_10;
      }
      v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1LL << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v6;
      *(void *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      __int16 v25 = __OFADD__(v41, 1LL);
      v42 = v41 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v39[2] = v42;
      if (!--v27) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

  sub_10016F8F4(v3);
  return (void *)v2;
}

    uint64_t v3 = v50;
    uint64_t v11 = v52;
    uint64_t v10 = v53;
    id v12 = v54;
  }

        v40 = v80;
        v41 = v80 + *(int *)(v9 + 48);
        sub_1001A8360(v74, v80, &qword_1003F8920);
        sub_1001A8360(v73, v41, &qword_1003F8920);
        v42 = v38(v40, 1LL, v39);
        v43 = v82;
        v45 = (uint64_t)v78;
        v44 = (uint64_t)v79;
        if (v42 != 1)
        {
          v46 = v76;
          sub_1001A8360(v40, v76, &qword_1003F8920);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v43 + 88))(v46, v39) == enum case for RoutingItem.SelectionIndicator.pullable(_:))
          {
LABEL_26:
            sub_1001603DC(v41, &qword_1003F8920);
            sub_1001603DC(v40, &qword_1003F8920);
            v30 = 1;
            return v30 & 1;
          }

          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v39);
        }

        if (v38(v41, 1LL, v39) != 1)
        {
          sub_1001A8360(v41, v45, &qword_1003F8920);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v43 + 88))(v45, v39) == enum case for RoutingItem.SelectionIndicator.pullable(_:))
          {
            sub_1001603DC(v41, &qword_1003F8920);
            v47 = v40;
            v48 = &qword_1003F8920;
LABEL_41:
            sub_1001603DC(v47, v48);
            goto LABEL_42;
          }

          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v39);
        }

        if (v38(v40, 1LL, v39) != 1)
        {
          sub_1001A8360(v40, v44, &qword_1003F8920);
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v39);
        }

        v48 = &qword_1003F9528;
        v47 = v40;
        goto LABEL_41;
      }

      sub_1001603DC((uint64_t)v26, &qword_1003F8920);
      sub_1001603DC((uint64_t)v28, &qword_1003F8920);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v23, v35);
      v38 = v72;
      v39 = v35;
    }

    sub_1001603DC((uint64_t)v13, &qword_1003F9528);
    goto LABEL_13;
  }

  v30 = sub_10024A5A8();
  return v30 & 1;
}

    BOOL v9 = *(double *)&a4 < *(double *)&a1;
    return !v9;
  }

  if (a3 != 2)
  {
    id v6 = 2LL;
    return v6 >= a3;
  }

  uint64_t v7 = *(double *)&a5 < *(double *)&a2;
  if (a4 != a1) {
    uint64_t v7 = a4 < a1;
  }
  return !v7;
}

    BOOL v9 = *(double *)&a1 < *(double *)&a4;
    return !v9;
  }

  if (a6 != 2)
  {
    id v6 = 2LL;
    return v6 >= a6;
  }

  uint64_t v7 = *(double *)&a2 < *(double *)&a5;
  if (a1 != a4) {
    uint64_t v7 = a1 < a4;
  }
  return !v7;
}

BOOL sub_10000784C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  BOOL v2 = v1 > 9;
  uint64_t v3 = (1LL << v1) & 0x209;
  BOOL v4 = v2 || v3 == 0;
  if (!v4 || !*(void *)(a1 + 64) && [*(id *)(a1 + 32) changeType]) {
    return 1LL;
  }
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputDeviceUID]);
  id v8 = *(id *)(a1 + 48);
  if (v7 != v8)
  {
    BOOL v9 = v8;
    unsigned int v10 = [v7 isEqual:v8];

    return !v10;
  }

  return 0LL;
}

void sub_100007900(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) copy];
  [v3 setChangeType:*(void *)(a1 + 48)];
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) delegate]);
  [v2 systemEndpointController:*(void *)(a1 + 40) activeSystemEndpointDidChangeForRequest:v3 type:*(void *)(a1 + 56)];
}

id sub_100007960(void *a1)
{
  id v1 = a1;
  if ([v1 containsString:@"migrationPlaybackSession"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonMigrate;
LABEL_9:
    id v3 = *v2;
    goto LABEL_10;
  }

  if ([v1 containsString:@"ResolveActiveEndpoint"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonFallbackCouldNotResolve;
    goto LABEL_9;
  }

  if ([v1 containsString:@"invalid route error"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonInvalidRoute;
    goto LABEL_9;
  }

  if ([v1 containsString:@"from external device client"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonExternalDevice;
    goto LABEL_9;
  }

  if (![v1 containsString:@"Analytics: "])
  {
    BOOL v4 = 0LL;
    goto LABEL_11;
  }

  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 stringByReplacingOccurrencesOfString:@"Analytics: " withString:&stru_1003AE680]);
LABEL_10:
  BOOL v4 = v3;
LABEL_11:

  return v4;
}

id sub_100007A48(uint64_t a1)
{
  v16[0] = kMRChangeActiveSystemEndpointClientKey;
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientBundleIdentifier]);
  id v3 = (void *)v2;
  if (v2) {
    BOOL v4 = (const __CFString *)v2;
  }
  else {
    BOOL v4 = @"unknown";
  }
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = *(const __CFString **)(a1 + 40);
  if (!v6) {
    id v6 = @"unknown";
  }
  v17[0] = v4;
  v17[1] = v6;
  v16[1] = kMRChangeActiveSystemEndpointTypeKey;
  v16[2] = kMRChangeActiveSystemEndpointChangeTypeKey;
  id v7 = *(const __CFString **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  if (!v7) {
    id v7 = @"unknown";
  }
  v17[2] = v7;
  v17[3] = v8;
  v16[3] = kMRChangeActiveSystemEndpointReasonKey;
  v16[4] = kMRChangeActiveSystemEndpointIsLocalKey;
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDeviceUID]);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v9 == 0LL));
  v17[4] = v10;
  v16[5] = kMRChangeActiveSystemEndpointTimeSinceLastChangeKey;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) date]);
  [v11 timeIntervalSinceNow];
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", fabs(v12)));
  v17[5] = v13;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  6LL));

  return v14;
}

void sub_100007D64(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  dispatch_time_t v6 = dispatch_time(0LL, (uint64_t)(a3 * 1000000000.0));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100007E40;
  v11[3] = &unk_100399120;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v5;
  id v10 = v5;
  dispatch_after(v6, v7, v11);
}

void sub_100007E40(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MRDAutoConnectionController sharedConnectionController]( &OBJC_CLASS___MRDAutoConnectionController,  "sharedConnectionController"));
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  id v5 = (void *)a1[7];
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100007EE4;
  v7[3] = &unk_1003990F8;
  id v8 = v5;
  [v2 connectToOutputDevice:v3 reason:v4 queue:v6 completion:v7];
}

uint64_t sub_100007EE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 != 0);
  }
  return result;
}

void sub_100007F00(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v3 = *(void (***)(void, void, double))(a1 + 32);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100007FBC;
    v4[3] = &unk_100399198;
    id v5 = v3;
    id v6 = *(id *)(a1 + 40);
    ((void (**)(void, void *, double))v3)[2](v5, v4, 3.0);
  }

void sub_100007FBC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100008050;
    v3[3] = &unk_100399170;
    uint64_t v2 = *(void *)(a1 + 32);
    id v4 = *(id *)(a1 + 40);
    (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v3, 7.0);
  }

uint64_t sub_100008050(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_11:
}
}

  return v6;
}

    goto LABEL_15;
  }

  id v15 = _MRLogForCategory(2LL, v9);
  v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(void **)(a1 + 40);
    id v24 = 138543362;
    __int16 v25 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Adding command to assistant cache, context: %{public}@.",  (uint8_t *)&v24,  0xCu);
  }

  uint64_t v18 = *(void *)(a1 + 48);
  int v19 = (void *)objc_claimAutoreleasedReturnValue([v2 commandDictionary]);
  v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(a1 + 48) commandType]));
  [v19 setObject:v18 forKeyedSubscript:v20];

  __int16 v21 = objc_retainBlock(*(id *)(a1 + 64));
  v22 = (void *)objc_claimAutoreleasedReturnValue([v2 completionBlockDictionary]);
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(a1 + 48) commandType]));
  [v22 setObject:v21 forKeyedSubscript:v23];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
LABEL_15:
}

  id v15 = -[MRDNowPlayingPlayerClient isPictureInPictureEnabled](self, "isPictureInPictureEnabled");
  if (v15 != -[MRDNowPlayingPlayerClient pushStatePictureInPictureEnabled](self, "pushStatePictureInPictureEnabled"))
  {
    v17 = _MRLogForCategory(1LL, v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = @"false";
      v20 = self->_playerPath;
      if (v15) {
        int v19 = @"true";
      }
      *(_DWORD *)buf = 138543618;
      *(void *)v82 = v19;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] isPictureInPictureEnabled changed to %{public}@ for %{public}@",  buf,  0x16u);
    }

    -[MRDNowPlayingPlayerClient _onQueue_pictureInPictureEnabledDidChanged:]( self,  "_onQueue_pictureInPictureEnabledDidChanged:",  v15);
  }

  __int16 v21 = -[MRDNowPlayingPlayerClient _onQueue_isPlaying](self, "_onQueue_isPlaying");
  v22 = v21 ^ -[MRDNowPlayingPlayerClient pushStateIsPlaying](self, "pushStateIsPlaying");
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient _onQueue_playbackState](self, "_onQueue_playbackState"));
  id v24 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient pushStatePlaybackState](self, "pushStatePlaybackState"));
  __int16 v25 = [v24 playbackState];
  v26 = [v23 playbackState];

  if (v25 != v26)
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient pushStatePlaybackState](self, "pushStatePlaybackState"));
    v29 = (void *)MRMediaRemoteCopyPlaybackStateDescription([v28 playbackState]);

    v30 = (void *)MRMediaRemoteCopyPlaybackStateDescription([v23 playbackState]);
    v32 = _MRLogForCategory(1LL, v31);
    v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = self->_playerPath;
      *(_DWORD *)buf = 138543874;
      *(void *)v82 = v29;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v30;
      *(_WORD *)&v83[8] = 2114;
      v84 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@",  buf,  0x20u);
    }

    -[MRDNowPlayingPlayerClient _onQueue_playbackStateDidChanged:](self, "_onQueue_playbackStateDidChanged:", v23);
  }

  if (v22)
  {
    v35 = _MRLogForCategory(1LL, v27);
    v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = @"false";
      v38 = self->_playerPath;
      if (v21) {
        v37 = @"true";
      }
      *(_DWORD *)buf = 138543618;
      *(void *)v82 = v37;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@",  buf,  0x16u);
    }

    -[MRDNowPlayingPlayerClient _onQueue_isPlayingDidChange:](self, "_onQueue_isPlayingDidChange:", v21);
  }

  v39 = -[MRDNowPlayingPlayerClient canBeNowPlayingPlayer](self, "canBeNowPlayingPlayer");
  if (v39 != -[MRDNowPlayingPlayerClient pushStateCanBeNowPlayingPlayer](self, "pushStateCanBeNowPlayingPlayer"))
  {
    v41 = _MRLogForCategory(1LL, v40);
    v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = @"false";
      v44 = self->_playerPath;
      if (v39) {
        v43 = @"true";
      }
      *(_DWORD *)buf = 138543618;
      *(void *)v82 = v43;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] CanBeNowPlayingPlayer changed to %{public}@ for %{public}@",  buf,  0x16u);
    }

    -[MRDNowPlayingPlayerClient _onQueue_canBeNowPlayingDidChange:](self, "_onQueue_canBeNowPlayingDidChange:", v39);
  }

  v45 = (void *)objc_claimAutoreleasedReturnValue(-[MRPlayerPath player](self->_playerPath, "player"));
  v46 = (void *)objc_claimAutoreleasedReturnValue([v45 displayName]);
  v47 = (void *)objc_claimAutoreleasedReturnValue(-[MRPlayer displayName](self->_pushStatePlayer, "displayName"));
  v80 = v23;
  if (v46 && ([v46 isEqualToString:v47] & 1) == 0)
  {
    v50 = _MRLogForCategory(1LL, v48);
    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v52 = self->_playerPath;
      *(_DWORD *)buf = 138412802;
      *(void *)v82 = v47;
      *(_WORD *)&v82[8] = 2112;
      *(void *)v83 = v46;
      *(_WORD *)&v83[8] = 2114;
      v84 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] DisplayName changed from %@ to %@ for %{public}@",  buf,  0x20u);
    }

    v49 = 1;
  }

  else
  {
    v49 = 0;
  }

  v53 = [v45 audioSessionType];
  if (v53 != -[MRPlayer audioSessionType](self->_pushStatePlayer, "audioSessionType"))
  {
    v54 = ((uint64_t (*)(void))NSStringFromMRPlayerAudioSessionType)();
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    v56 = NSStringFromMRPlayerAudioSessionType(v53);
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    v59 = _MRLogForCategory(1LL, v58);
    v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      v61 = self->_playerPath;
      *(_DWORD *)buf = 138543874;
      *(void *)v82 = v55;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v57;
      *(_WORD *)&v83[8] = 2114;
      v84 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@",  buf,  0x20u);
    }

    v49 = 1;
  }

  v62 = (os_log_s *)objc_claimAutoreleasedReturnValue([v45 mxSessionIDs]);
  v63 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(-[MRPlayer mxSessionIDs](self->_pushStatePlayer, "mxSessionIDs"));
  if (v62 == v63)
  {
    v67 = v62;
  }

  else
  {
    v64 = -[os_log_s isEqual:](v62, "isEqual:", v63);

    if ((v64 & 1) != 0) {
      goto LABEL_49;
    }
    v49 = 1;
    v66 = _MRLogForCategory(1LL, v65);
    v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      v68 = self->_playerPath;
      *(_DWORD *)buf = 138543874;
      *(void *)v82 = v63;
      *(_WORD *)&v82[8] = 2114;
      *(void *)v83 = v62;
      *(_WORD *)&v83[8] = 2114;
      v84 = v68;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] MXSessionIDs changed from %{public}@ to %{public}@ for %{public}@",  buf,  0x20u);
      v49 = 1;
    }
  }

LABEL_49:
  v69 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient pushStatePlayer](self, "pushStatePlayer"));
  v70 = [v69 audioSessionID];
  v71 = [v45 audioSessionID];

  if (v70 == v71)
  {
    if (!v49) {
      goto LABEL_56;
    }
  }

  else
  {
    v73 = _MRLogForCategory(1LL, v72);
    v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient pushStatePlayer](self, "pushStatePlayer"));
      v76 = [v75 audioSessionID];
      v77 = [v45 audioSessionID];
      v78 = self->_playerPath;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v82 = v76;
      *(_WORD *)&v82[4] = 1024;
      *(_DWORD *)&v82[6] = v77;
      *(_WORD *)v83 = 2114;
      *(void *)&v83[2] = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingPlayerClient] AudioSessionID changed from %u to %u for %{public}@",  buf,  0x18u);
    }
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  [WeakRetained nowPlayingPlayerClient:self playerStateDidChange:v45];

LABEL_56:
}

  v22 = 0;
LABEL_12:

  return v22;
}
}
}
}
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[MRDTransportExternalDevice clientConnection](self, "clientConnection"));
  [v12 setDelegate:0];

  -[MRDTransportExternalDevice setClientConnection:](self, "setClientConnection:", 0LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[MRDTransportExternalDevice transport](self, "transport"));
  [v13 resetWithError:v14];
}
}

  return v6;
}

  return v4;
}

  return (char)v6;
}

  return (char)v4;
}

  return v6;
}
}

  return v6;
}

  return v5;
}
}
}

  id v12 = (id)objc_claimAutoreleasedReturnValue(-[MRDIDSServiceConnection device](self, "device"));
  if (v5 != v12 && ([v5 isEqual:v12] & 1) == 0)
  {
    -[MRDIDSServiceConnection setDevice:](self, "setDevice:", v5);
    id v13 = self;
    objc_sync_enter(v13);
    if (v5)
    {
      uint64_t v14 = (unint64_t)[v13->_connectionHandler copy];
      id v15 = 0LL;
    }

    else
    {
      id v15 = (unint64_t)[v13->_invalidationHandler copy];
      uint64_t v14 = 0LL;
    }

    objc_sync_exit(v13);

    if (v14 | v15)
    {
      queue = (dispatch_queue_s *)self->_queue;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_10012DB78;
      v17[3] = &unk_1003A1DD8;
      uint64_t v18 = (id)v14;
      int v19 = (id)v15;
      dispatch_async(queue, v17);
    }
  }
}

  return Error;
}
}

  return (char)v7;
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int16 v25 = (uint64_t *)(v20[6] + 16 * v14);
    *__int16 v25 = a3;
    v25[1] = a4;
    v26 = (void *)(v20[7] + 16 * v14);
    void *v26 = a1;
    v26[1] = a2;
    __int16 v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_100180AD8(v17, a5 & 1);
  __int16 v23 = sub_10015CAD4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int16 v25 = (uint64_t *)(v20[6] + 16 * v14);
    *__int16 v25 = a3;
    v25[1] = a4;
    v26 = (void *)(v20[7] + 16 * v14);
    void *v26 = a1;
    v26[1] = a2;
    __int16 v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_1001A1520(v17, a5 & 1);
  __int16 v23 = sub_10015CAD4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    __int16 v21 = 8 * v10;
    *(void *)(v16[6] + v21) = a2;
    *(void *)(v16[7] + v21) = a1;
    v22 = v16[2];
    __int16 v23 = __OFADD__(v22, 1LL);
    id v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return swift_retain(a2);
    }

    goto LABEL_14;
  }

  sub_1001A11EC(v13, a3 & 1);
  int v19 = sub_1001A0A48(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    id v10 = v19;
    v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      v17 = 0LL;
      goto LABEL_12;
    }

    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1001A32B0();
      goto LABEL_7;
    }

    sub_1001A11EC(v14, a3 & 1);
    uint64_t v18 = sub_1001A0A48(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      uint64_t v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  __int16 v21 = type metadata accessor for RoutingSessionServer.Client(0LL);
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    void *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    __int16 v23 = v18[2];
    id v24 = __OFADD__(v23, 1LL);
    __int16 v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }

    goto LABEL_14;
  }

  sub_10015D9C0(v15, a4 & 1);
  v20 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int16 v25 = (uint64_t *)(v20[6] + 16 * v14);
    *__int16 v25 = a3;
    v25[1] = a4;
    v26 = (void *)(v20[7] + 16 * v14);
    void *v26 = a1;
    v26[1] = a2;
    __int16 v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_1001E2448(v17, a5 & 1);
  __int16 v23 = sub_10015CAD4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    v20 = 8 * v9;
    *(void *)(v15[6] + v20) = a2;
    *(void *)(v15[7] + v20) = a1;
    __int16 v21 = v15[2];
    v22 = __OFADD__(v21, 1LL);
    __int16 v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }

    goto LABEL_14;
  }

  sub_1001E2A80(v12, a3 & 1);
  uint64_t v18 = sub_1001E1270((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    uint64_t v9 = v18;
    id v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    id v24 = (uint64_t *)(v20[6] + 16 * v14);
    *id v24 = a2;
    v24[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    __int16 v25 = v20[2];
    v26 = __OFADD__(v25, 1LL);
    __int16 v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain();
      return;
    }

    goto LABEL_14;
  }

  sub_1001E2D54(v17, a4 & 1, a5);
  v22 = sub_10015CAD4(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    void *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    __int16 v23 = v18[2];
    id v24 = __OFADD__(v23, 1LL);
    __int16 v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }

    goto LABEL_14;
  }

  sub_1001F2F34(v15, a4 & 1);
  v20 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  swift_bridgeObjectRelease();
  id v10 = *a1;
  if (v10 < 0) {
    v34 = v10;
  }
  else {
    v34 = v10 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease();
  return v35;
}

    v23[(v16 >> 6) + 8] |= 1LL << v16;
    v26 = (uint64_t *)(v23[6] + 16 * v16);
    void *v26 = v11;
    v26[1] = v12;
    *(void *)(v23[7] + 8 * v16) = v13;
    __int16 v27 = v23[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    v23[2] = v29;
LABEL_13:
    sub_100205CC4();
    if (v31)
    {
      v33 = v30;
      v34 = v31;
      v35 = v32;
      do
      {
        v41 = (void *)*a5;
        v43 = sub_10015CAD4(v33, v34);
        v44 = v41[2];
        v45 = (v42 & 1) == 0;
        v46 = v44 + v45;
        if (__OFADD__(v44, v45)) {
          goto LABEL_25;
        }
        v47 = v42;
        if (v41[3] < v46)
        {
          sub_10020566C(v46, 1LL);
          v48 = sub_10015CAD4(v33, v34);
          if ((v47 & 1) != (v49 & 1)) {
            goto LABEL_27;
          }
          v43 = v48;
        }

        v50 = (void *)*a5;
        if ((v47 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v36 = v50[7];
          v37 = 8 * v43;

          *(void *)(v36 + v37) = v35;
        }

        else
        {
          v50[(v43 >> 6) + 8] |= 1LL << v43;
          v51 = (uint64_t *)(v50[6] + 16 * v43);
          *v51 = v33;
          v51[1] = v34;
          *(void *)(v50[7] + 8 * v43) = v35;
          v52 = v50[2];
          uint64_t v28 = __OFADD__(v52, 1LL);
          v53 = v52 + 1;
          if (v28) {
            goto LABEL_26;
          }
          v50[2] = v53;
        }

        sub_100205CC4();
        v33 = v38;
        v34 = v39;
        v35 = v40;
      }

      while (v39);
    }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    void *v20 = a1;
    v20[1] = a2;
    *(float *)(v18[7] + 4 * v12) = a4;
    __int16 v21 = v18[2];
    v22 = __OFADD__(v21, 1LL);
    __int16 v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_100210804(result, a3 & 1);
  uint64_t result = sub_10015CAD4(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    id v12 = result;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    __int16 v23 = (uint64_t *)(v18[6] + 16 * v12);
    *__int16 v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v24 = v18[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_100210B08(v15, a4 & 1);
  __int16 v21 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  swift_bridgeObjectRelease();
  return (id)*sub_1002A2F28();
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    __int16 v23 = (void *)(v18[7] + 16 * v12);
    *__int16 v23 = a1;
    v23[1] = a2;
    id v24 = v18[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_retain(a3);
    }

    goto LABEL_14;
  }

  sub_1002214CC(v15, a4 & 1);
  __int16 v21 = sub_1001E12A0(a3, &qword_1003FB380);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    void *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    __int16 v23 = v18[2];
    id v24 = __OFADD__(v23, 1LL);
    __int16 v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }

    goto LABEL_14;
  }

  sub_100226D1C(v15, a4 & 1);
  v20 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    __int16 v23 = (uint64_t *)(v18[6] + 16 * v12);
    *__int16 v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v24 = v18[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_10023D578(v15, a4 & 1);
  __int16 v21 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    __int16 v23 = (void *)(v18[7] + 16 * v12);
    *__int16 v23 = a1;
    v23[1] = a2;
    id v24 = v18[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_retain(a3);
    }

    goto LABEL_14;
  }

  sub_10024493C(v15, a4 & 1);
  __int16 v21 = sub_100244548(a3);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  swift_bridgeObjectRelease(a3);
  id v13 = 0;
  return v13 & 1;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    __int16 v23 = (uint64_t *)(v18[6] + 16 * v12);
    *__int16 v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v24 = v18[2];
    __int16 v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_10028C99C(v15, a4 & 1);
  __int16 v21 = sub_10015CAD4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    id v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    void *v20 = a1;
    v20[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    __int16 v21 = v18[2];
    v22 = __OFADD__(v21, 1LL);
    __int16 v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_10028D044(result, a3 & 1);
  uint64_t result = sub_10015CAD4(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    id v12 = result;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

void sub_1000082E0(void *a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t active = MRMediaRemoteActiveEndpointTypeCopyDescription(0LL);
  id v4 = (void *)active;
  uint64_t v5 = 0LL;
  unint64_t v6 = a1[5];
  if (v6 <= 9) {
    uint64_t v5 = (uint64_t)*(&off_1003992C0 + v6);
  }
  id v10 = -[NSString initWithFormat:]( v2,  "initWithFormat:",  @" %@ timeout event %@ after <%lf> seconds ",  active,  v5,  a1[6]);

  id v7 = (void *)a1[4];
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  objc_msgSend( v7,  "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:",  0,  2,  v10,  v9);
}

void sub_1000085EC(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
  id v4 = (void *)v3;
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 > 9) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = (uint64_t)*(&off_1003992C0 + v5);
  }
  id v10 = -[NSString initWithFormat:]( v2,  "initWithFormat:",  @"%@ playback timedout event %@ after <%lf> seconds",  v3,  v6,  *(void *)(a1 + 56));

  id v7 = *(void **)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  objc_msgSend( v7,  "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:",  0,  6,  v10,  v9);
}

void sub_1000088C0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_UTILITY, 0);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.mediaremote.systemEndpointController.userDefaults.serialQueue", v3);
  unint64_t v5 = (void *)qword_1003FDBE0;
  qword_1003FDBE0 = (uint64_t)v4;
}

id sub_100008930(void *a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  dispatch_queue_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1002B4590((uint64_t)a1, v4);
  }

  [*(id *)(a1[5] + 56) setObject:a1[4] forKey:@"SystemEndpoint"];
  return [*(id *)(a1[5] + 56) setObject:a1[6] forKey:@"SystemEndpointRecentlyDismissedRecommendations"];
}

void sub_100008BCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"type"]);
  uint64_t v6 = (int)[v5 intValue];

  uint64_t v18 = objc_alloc_init(&OBJC_CLASS___MRDSystemEndpointEntry);
  -[MRDSystemEndpointEntry setType:](v18, "setType:", v6);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"event"]);
  -[MRDSystemEndpointEntry setEvent:](v18, "setEvent:", (int)[v7 intValue]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"uid"]);
  -[MRDSystemEndpointEntry setOutputDeviceUID:](v18, "setOutputDeviceUID:", v8);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"date"]);
  -[MRDSystemEndpointEntry setDate:](v18, "setDate:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"eventreason"]);
  -[MRDSystemEndpointEntry setEventReason:](v18, "setEventReason:", v10);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"selectionreason"]);
  -[MRDSystemEndpointEntry setSelectionReason:](v18, "setSelectionReason:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"changeType"]);
  -[MRDSystemEndpointEntry setChangeType:](v18, "setChangeType:", (int)[v12 intValue]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"demoteWhenSyncingToCompanion"]);
  -[MRDSystemEndpointEntry setDemoteWhenSyncingToCompanion:]( v18,  "setDemoteWhenSyncingToCompanion:",  [v13 BOOLValue]);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supportsIdleReset"]);
  if (v14) {
    id v15 = v14;
  }
  else {
    id v15 = &__kCFBooleanTrue;
  }
  -[MRDSystemEndpointEntry setSupportsIdleReset:](v18, "setSupportsIdleReset:", [v15 BOOLValue]);

  v16 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
  [v16 setObject:v18 forKeyedSubscript:v17];
}

void sub_100008DD4(uint64_t a1)
{
  dispatch_queue_attr_t v1 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  objc_msgSend( v1,  "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:",  0,  0,  @"Startup",  v2);
}

LABEL_16:
  _Block_object_dispose(&v37, 8);
}

  return v22;
}

    uint64_t v9 = 0LL;
    goto LABEL_17;
  }

      goto LABEL_17;
    }

    __int16 v23 = [v17 automaticSharePlayPreferenceEnabled];
    __int16 v25 = _MRLogForCategory(12LL, v24);
    v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    int v19 = v26;
    if ((v23 & 1) == 0)
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        v32 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        v40 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Not displaying session %{public}@ because automatic SharePlay preference is disabled.",  buf,  0xCu);
      }

      goto LABEL_16;
    }

    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v40 = v27;
      v41 = 2048;
      v42 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Displaying UI for discovered session: %{public}@, listener=%p",  buf,  0x16u);
    }

    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    v29 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007C9C0;
    block[3] = &unk_10039D330;
    v33 = *(int8x16_t *)(a1 + 32);
    v30 = (id)v33.i64[0];
    v37 = vextq_s8(v33, v33, 8uLL);
    objc_copyWeak(&v38, (id *)buf);
    dispatch_async(v29, block);

    v31 = *(void **)(a1 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10007CB40;
    v34[3] = &unk_10039D358;
    v34[4] = v31;
    id v10 = v10;
    v35 = v10;
    [v31 notifyObserversWithBlock:v34];

    objc_destroyWeak(&v38);
    objc_destroyWeak((id *)buf);
  }
}

  Error = 0LL;
LABEL_17:

  return Error;
}

      id v8 = 3LL;
      goto LABEL_23;
    }

LABEL_17:
  v88 = (void *)v12;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  obj = v14;
  v31 = [obj countByEnumeratingWithState:&v98 objects:v106 count:16];
  if (!v31)
  {
    v33 = 0LL;
    v34 = 0LL;
    goto LABEL_106;
  }

  v32 = v31;
  v33 = 0LL;
  v34 = 0LL;
  v93 = *(void *)v99;
  do
  {
    v35 = 0LL;
    v91 = v32;
    do
    {
      if (*(void *)v99 != v93) {
        objc_enumerationMutation(obj);
      }
      v36 = *(void **)(*((void *)&v98 + 1) + 8LL * (void)v35);
      v37 = [v36 isAuxiliary];
      if ([v36 canRelayCommunicationChannel]
        && [v36 isGroupable]
        && ![v36 isLocalDevice])
      {
        v37 |= 0x80uLL;
      }

      v38 = [v36 isRemoteControllable];
      if ((_DWORD)v38) {
        v40 = v37 | 0x100;
      }
      else {
        v40 = v37;
      }
      if ((a5 & 4) != 0)
      {
        v41 = (void *)objc_claimAutoreleasedReturnValue([v36 uid]);
        if (-[MRDHostedExternalDeviceManager isDirectConnectedToOutputDeviceUID:]( v13->_externalDeviceManager,  "isDirectConnectedToOutputDeviceUID:",  v41))
        {
          v40 |= 0x200uLL;
        }

        if ((a5 & 8) == 0)
        {
LABEL_35:
          if ((a5 & 0x10) == 0) {
            goto LABEL_36;
          }
          goto LABEL_45;
        }
      }

      else if ((a5 & 8) == 0)
      {
        goto LABEL_35;
      }

      v38 = [v36 canAccessAppleMusic];
      if ((_DWORD)v38) {
        v40 |= 0x10000uLL;
      }
      if ((a5 & 0x10) == 0)
      {
LABEL_36:
        if ((a5 & 2) != 0) {
          goto LABEL_37;
        }
        goto LABEL_48;
      }

  int v19 = (id)objc_claimAutoreleasedReturnValue([v12 player]);
LABEL_17:
  v20 = v19;
  __int16 v21 = -[MRPlayerPath initWithOrigin:client:player:]( objc_alloc(&OBJC_CLASS___MRPlayerPath),  "initWithOrigin:client:player:",  v13,  v18,  v19);
  __int16 v23 = _MRLogForCategory(0LL, v22);
  id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
    sub_1002B833C((uint64_t)v26, (uint64_t)v21, v24);
  }

  return v21;
}
      }

      __int16 v21 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
    }

    while (v21);
  }

  return v19;
}

  return v7;
}

  v32 = _MRLogForCategory(13LL, v31);
  v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  v34 = (char *)[*(id *)(a1 + 72) hash];
  if ((unint64_t)(v34 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v35 = (os_signpost_id_t)v34;
    if (os_signpost_enabled(v33))
    {
      LOWORD(v36) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_INTERVAL_END,  v35,  "ApplyRouteRecommendation",  "Type = DeltaBanner",  (uint8_t *)&v36,  2u);
    }
  }
}

          v60 = *(void *)((v58 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          if (v60) {
            goto LABEL_17;
          }
LABEL_45:
          swift_bridgeObjectRelease();
          v101 = v157;
          v175 = v57;
          if ((unint64_t)v157 >> 62)
          {
            if (v157 < 0) {
              v138 = v157;
            }
            else {
              v138 = v157 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            v102 = _CocoaArrayWrapper.endIndex.getter(v138);
            swift_bridgeObjectRelease();
            if (v102) {
              goto LABEL_47;
            }
          }

          else
          {
            v102 = *(void *)((v157 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v102)
            {
LABEL_47:
              if (v102 >= 1)
              {
                v103 = 0LL;
                v174 = v101 & 0xC000000000000001LL;
                v170 = v102;
                while (1)
                {
                  if (v174) {
                    v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v103, v101);
                  }
                  else {
                    v104 = *(id *)(v101 + 8 * v103 + 32);
                  }
                  v105 = v104;
                  v106 = [v104 v30[172]];
                  if (v106)
                  {
                    v107 = v106;
                    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
                    v110 = v109;
                    v111 = [v105 name];
                    if (v111)
                    {
                      v112 = v111;
                      v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
                      v172 = v113;

                      v114 = (uint64_t)v175;
                      if (!v175[2])
                      {
                        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v4, 1LL, 1LL, v173);
LABEL_63:
                        sub_1001603DC((uint64_t)v4, &qword_1003F8918);
                        v165 = sub_10021924C();
                        v163 = v119;
                        LODWORD(v162) = v120;
                        v121 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
                        v122 = 1;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56LL))( v164,  1LL,  1LL,  v121);
                        v123 = sub_100217B34();
                        v124 = [v169 matchesUID:v107];

                        if ((v124 & 1) == 0)
                        {
                          v125 = sub_10021924C();
                          v127 = v126;
                          v129 = v128;
                          v122 = sub_10024664C(v125, v126, v128);
                          sub_1001835D8(v125, v127, v129);
                        }

                        v130 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                        v131 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                        v132 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                        v133 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                        swift_bridgeObjectRetain();
                        LOBYTE(v176) = 1;
                        v146 = v130 & 1;
                        v134 = v155;
                        sub_10024A07C( v108,  v110,  0LL,  0LL,  v171,  v172,  v165,  v163,  v155,  v162,  v146,  v131 & 1,  v164,  v123,  v132 & 1,  v122,  v148,  0,  1,  0,  v133);
                        v135 = v167;
                        sub_10018364C((uint64_t)v134, v167);
                        v136 = (uint64_t)v175;
                        v137 = swift_isUniquelyReferenced_nonNull_native(v175);
                        v176 = (void *)v136;
                        sub_1001819BC(v135, v108, v110, v137);
                        v175 = v176;

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        id v4 = v166;
                        v59 = v168;
                        v101 = v157;
                        v30 = &selRef_state;
                        v102 = v170;
                        goto LABEL_50;
                      }

                      swift_bridgeObjectRetain();
                      v115 = sub_10015CAD4(v108, v110);
                      if ((v116 & 1) != 0)
                      {
                        sub_100183690(*(void *)(v114 + 56) + *(void *)(v59 + 72) * v115, (uint64_t)v4);
                        v117 = 0LL;
                      }

                      else
                      {
                        v117 = 1LL;
                      }

                      v118 = v173;
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v4, v117, 1LL, v173);
                      swift_bridgeObjectRelease();

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      sub_1001603DC((uint64_t)v4, &qword_1003F8918);
                      v102 = v170;
                    }

                    else
                    {
                      swift_bridgeObjectRelease();

                      v102 = v170;
                    }
                  }

                  else
                  {
                  }

  v37 = type metadata accessor for RoutingSessionServer.Client(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v37);
  __break(1u);
  return result;
}

      v110 += v111;
      --v108;
    }

    while (v108);
    swift_bridgeObjectRelease_n(v184, 2LL);
    v95 = v183;
LABEL_12:
    ++v93;
    v94 = v174;
    sub_1001A813C(v174, type metadata accessor for HostedRoutingSession);
    if (v93 != v175) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease();
  v117 = 1LL;
  v79 = (uint64_t)v182;
  v116 = v162;
LABEL_55:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56))(v116, v117, 1LL, v172);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v143 = v166;
  v144 = v116;
LABEL_61:
  sub_1002548B0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v144, v143);
  swift_release(v178);

  (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v79, v173);
  return sub_1001603DC(v95, &qword_1003FD0B0);
}

  v26 = String._bridgeToObjectiveC()();
  v129[0] = 0LL;
  __int16 v27 = (id)IDSCopyTokenAndIDForTokenWithID(v26, v129);

  uint64_t v28 = v129[0];
  if (!v27)
  {
    v40 = v129[0];
    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v41 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v41, (uint64_t)qword_1003FF018);
    v42 = v2;
    v43 = (os_log_s *)Logger.logObject.getter(v42);
    v44 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22LL, -1LL);
      v46 = (char **)swift_slowAlloc(8LL, -1LL);
      v124 = (void *)swift_slowAlloc(32LL, -1LL);
      v129[0] = v124;
      *(_DWORD *)v45 = 138543618;
      v126 = v12;
      *(void *)&v130 = v42;
      v47 = v42;
      v125 = v40;
      v48 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v45 + 4, v45 + 12);
      *v46 = v42;

      *(_WORD *)(v45 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&v130 = sub_10015ADC4(v126, v13, (uint64_t *)v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v45 + 14, v45 + 22);

      v40 = v125;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "[%{public}@]<%{public}s> could not parse sender from token.",  (uint8_t *)v45,  0x16u);
      v49 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v46, 1LL, v49);
      swift_slowDealloc(v46, -1LL, -1LL);
      v50 = v124;
      swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
    }

    return;
  }

  v126 = v12;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v31 = v30;
  v32 = v28;

  v33 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
  v34 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8];
  if ((!v34
     || (v29 != *(void *)v33 || v34 != v31)
     && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, *(void *)v33, v34, 0LL) & 1) == 0)
    && (v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v55 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v55, (uint64_t)qword_1003FF018);
    v56 = v2;
    v57 = (os_log_s *)Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22LL, -1LL);
      v123 = (char **)swift_slowAlloc(8LL, -1LL);
      v124 = (void *)swift_slowAlloc(32LL, -1LL);
      v129[0] = v124;
      *(_DWORD *)v59 = 138543618;
      v125 = v32;
      v60 = v13;
      *(void *)&v130 = v56;
      v61 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 4, v59 + 12);
      v62 = v123;
      *v123 = v56;

      *(_WORD *)(v59 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&v130 = sub_10015ADC4(v126, v60, (uint64_t *)v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 14, v59 + 22);

      v63 = v125;
      swift_bridgeObjectRelease();
      v64 = "[%{public}@]<%{public}s> dropping push message not from leader.";
LABEL_73:
      _os_log_impl((void *)&_mh_execute_header, v57, v58, v64, (uint8_t *)v59, 0x16u);
      v94 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v62, 1LL, v94);
      swift_slowDealloc(v62, -1LL, -1LL);
      v70 = (char *)&type metadata for Any + 8;
      goto LABEL_74;
    }

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_5;
  }

  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  v35 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v35, (uint64_t)qword_1003FF018);
  v36 = v1;
  v37 = (os_log_s *)Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(22LL, -1LL);
    v40 = (char **)swift_slowAlloc(8LL, -1LL);
    v41 = swift_slowAlloc(32LL, -1LL);
    v68[0] = v41;
    *(_DWORD *)v39 = 138543618;
    v69 = (uint64_t)v36;
    v42 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v39 + 4, v39 + 12);
    *v40 = v36;

    *(_WORD *)(v39 + 12) = 2082;
    v43 = *(void *)&v42[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    v44 = *(void *)&v42[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v69 = sub_10015ADC4(v43, v44, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v39 + 14, v39 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "[%{public}@]<%{public}s> No session to create messenger.",  (uint8_t *)v39,  0x16u);
    v45 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v40, 1LL, v45);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
  }

  v16 = v2[1];
  if (*v2 == a1 && v16 == a2) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(*v2, v16, a1, a2, 0LL);
}

void sub_1000091D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100009214(uint64_t a1)
{
}

id sub_100009228(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceUID]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_100009268(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceUID]);
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)] ^ 1;

  return v4;
}

unint64_t sub_1000097C4(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (unint64_t)[v1 entitlements];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 bundleIdentifier]);
  if ((MRBundlePermittedForGroupSessions() & 1) != 0)
  {
    unsigned int v4 = 1;
  }

  else
  {
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 bundleIdentifier]);
    unsigned int v4 = [v5 isEqualToString:@"com.apple.MusicUIService"];
  }

  return (v2 >> 12) & 1 | v4;
}

id sub_100009B2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_100009C10(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"MRDGroupSessionServerDidStartEligibilityMonitoringNotification" object:0];
}

void sub_100009DB0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDGroupSessionServerDidStartNotification" object:*(void *)(a1 + 32)];
}

void sub_100009F6C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDGroupSessionServerDidStopNotification" object:*(void *)(a1 + 32)];
}

void sub_10000A140(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 listener]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v6 endpoint]);
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _endpoint]);
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v5);
}

void sub_10000A568(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000A610;
  v10[3] = &unk_100399378;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  sub_10013ADE4(v7, v10);
}

uint64_t sub_10000A610(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32)) {
    return MRAddClientErrorToXPCMessage(a2);
  }
  else {
    return MRAddStringToXPCMessage(a2, *(void *)(a1 + 40), "MRXPC_GROUP_SESSION_IDENTIFIER_KEY");
  }
}

void sub_10000A638(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 identifier]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10000A69C(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3)
  {
    [v6 trackWithError:v7];
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 request]);
    [v9 end];

    [*(id *)(a1 + 32) track];
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v8 identifier]);

  (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v11, v7);
}

void sub_10000A968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  uint64_t v9 = _MRLogForCategory(12LL, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = v10;
  if (v6)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1002B4608(v11, v12, v13, v14, v15, v16, v17, v18);
    }

    [*(id *)(a1 + 40) joinGroupSessionWithToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 72)];
    [*(id *)(a1 + 56) trackWithError:v6];
  }

  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v30 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Found equivalent WHA endpoint: %@, connecting",  buf,  0xCu);
    }

    int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) recon]);
    [v19 end];

    uint64_t v27 = MREndpointConnectionReasonUserInfoKey;
    uint64_t v28 = @"MRDGroupSessionManager";
    v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) whaConnect]);
    [v21 start];

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10000AB88;
    v22[3] = &unk_1003994B8;
    v22[4] = *(void *)(a1 + 64);
    id v23 = *(id *)(a1 + 40);
    id v24 = *(id *)(a1 + 48);
    id v26 = *(id *)(a1 + 72);
    id v25 = *(id *)(a1 + 56);
    [v5 connectToExternalDeviceWithOptions:1 userInfo:v20 completion:v22];
  }
}

void sub_10000AB88(id *a1, void *a2)
{
  id v3 = a2;
  [a1[4] setLastConnectionError:v3];
  if (v3)
  {
    uint64_t v5 = _MRLogForCategory(12LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionServer] Failed to connect to WHA endpoint with error: %@.\nJoining session directly",  (uint8_t *)&buf,  0xCu);
    }

    [a1[5] joinGroupSessionWithToken:a1[6] completion:a1[8]];
    [a1[7] trackWithError:v3];
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[7] whaConnect]);
    [v7 end];

    [a1[7] track];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[6] equivalentMediaIdentifier]);
    uint64_t v10 = _MRLogForCategory(12LL, v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Connected to equivalent WHA endpoint, ASE switching to: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v12 = [[MRUpdateActiveSystemEndpointRequest alloc] initWithOutputDeviceUID:v8 reason:@"MRGroupSession.wha-connected"];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 routingServer]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 systemEndpointController]);
    [v15 updateSystemEndpointForRequest:v12];

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1[5] session]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 joinToken]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 equivalentMediaIdentifier]);
    LODWORD(v15) = [v18 isEqual:v8];

    if ((_DWORD)v15)
    {
      uint64_t v20 = _MRLogForCategory(12LL, v19);
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Immediately found active group session for device: %@",  (uint8_t *)&buf,  0xCu);
      }

      (*((void (**)(void))a1[8] + 2))();
    }

    else
    {
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v48 = 0x3032000000LL;
      v49 = sub_10000B044;
      v50 = sub_10000B054;
      v51 = objc_alloc_init(&OBJC_CLASS___MRDGroupSessionManagerObserverHelper);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_10000B05C;
      v42[3] = &unk_100399440;
      v42[4] = a1[4];
      p___int128 buf = &buf;
      id v43 = a1[8];
      v22 = objc_retainBlock(v42);
      id v23 = objc_alloc(&OBJC_CLASS___MSVBlockGuard);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_10000B184;
      v39[3] = &unk_100399468;
      id v24 = v8;
      id v40 = v24;
      id v25 = v22;
      id v41 = v25;
      id v26 = -[MSVBlockGuard initWithTimeout:interruptionHandler:]( v23,  "initWithTimeout:interruptionHandler:",  v39,  60.0);
      uint64_t v28 = _MRLogForCategory(12LL, v27);
      v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v45 = 138412290;
        id v46 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Waiting for active group session for device: %@",  v45,  0xCu);
      }

      v32 = _NSConcreteStackBlock;
      uint64_t v33 = 3221225472LL;
      v34 = sub_10000B274;
      v35 = &unk_100399490;
      id v36 = v24;
      id v30 = v26;
      v37 = v30;
      v31 = v25;
      id v38 = v31;
      [*(id *)(*((void *)&buf + 1) + 40) setActiveSessionDidChange:&v32];
      objc_msgSend(a1[5], "addObserver:", *(void *)(*((void *)&buf + 1) + 40), v32, v33, v34, v35);

      _Block_object_dispose(&buf, 8);
    }
  }
}

void sub_10000B020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_10000B044(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000B054(uint64_t a1)
{
}

void sub_10000B05C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000B134;
  block[3] = &unk_100399418;
  __int128 v11 = *(_OWORD *)(a1 + 40);
  id v8 = (id)v11;
  __int128 v15 = v11;
  id v13 = v5;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10000B134(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10000B184(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(12LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Timed out waiting to join group session for device: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  15LL,  @"Timed out waiting to auto-join ASE group session"));
  (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
}

void sub_10000B274(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(12LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v17 = 138412290;
    id v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionServer] Active session changed: %@",  (uint8_t *)&v17,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 joinToken]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 equivalentMediaIdentifier]);
  unsigned int v9 = [v8 isEqual:*(void *)(a1 + 32)];

  if (v9)
  {
    unsigned __int8 v10 = [*(id *)(a1 + 40) disarm];
    uint64_t v12 = _MRLogForCategory(12LL, v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = v13;
    if ((v10 & 1) != 0)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v15 = *(void **)(a1 + 32);
        int v17 = 138412290;
        id v18 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Joined active group session for device: %@",  (uint8_t *)&v17,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1002B463C((uint64_t *)(a1 + 32), v14, v16);
      }
    }
  }
}

uint64_t sub_10000B75C(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage(a2);
  }
  return result;
}

void sub_10000B7EC(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication();

  uint64_t v5 = v9;
  if (IsSystemMediaApplication)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localActiveIdentity]);

    if (v7)
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 protobufData]);
      MRAddDataToXPCMessage(v9, v8, "MRXPC_USER_IDENTITY_KEY");
    }

    uint64_t v5 = v9;
  }
}

void sub_10000BCD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000BD4C;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10000BD4C(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage(a2);
  }
  return result;
}

uint64_t sub_10000BD64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000BEDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  id v7 = v3;
  if (*(void *)(a1 + 32))
  {
    MRAddClientErrorToXPCMessage(v3);
    uint64_t v4 = v7;
  }

  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "data", v4));
    MRAddDataToXPCMessage(v7, v6, "MRXPC_GROUP_SESSION_TOKEN_KEY");

    uint64_t v4 = v7;
  }
}

void sub_10000C004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000C0AC;
  v10[3] = &unk_100399378;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  sub_10013ADE4(v7, v10);
}

void sub_10000C0AC(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v4 = a2;
    MRAddClientErrorToXPCMessage(v4);
  }

  else
  {
    uint64_t v2 = *(void **)(a1 + 40);
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 protobufData]);
    MRAddDataToXPCMessage(v3, v4, "MRXPC_USER_IDENTITY_KEY");
  }
}

uint64_t sub_10000C244(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage(a2);
  }
  return result;
}

void sub_10000C2D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000C378;
  v10[3] = &unk_100399378;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_10013ADE4(v7, v10);
}

uint64_t sub_10000C378(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    return MRAddStringToXPCMessage(a2, v3, "MRXPC_GROUP_SESSION_IDENTIFIER_KEY");
  }
  else {
    return MRAddClientErrorToXPCMessage(a2);
  }
}

void sub_10000C5E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10000C5FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

BOOL sub_10000CC38(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 pid];
  return v3 == [*(id *)(a1 + 32) pid];
}

BOOL sub_10000CC70(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 pid];
  return v3 == [*(id *)(a1 + 32) pid];
}

BOOL sub_10000D0B4(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMediaRemoteClient bundleIdentifier](v4, "bundleIdentifier"));
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication();

  if (IsSystemMediaApplication)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v7 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:]( v4,  "takeAssertion:forReason:duration:",  7LL,  @"MediaRemoteLocalMusicIdentityChanged");
  }

  return IsSystemMediaApplication;
}

LABEL_15:
}

    v22 = 0;
    goto LABEL_16;
  }

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 routingServer]);
  int v17 = [v16 airplayActive];

  if ((v17 & 1) == 0)
  {
    id v25 = _MRLogForCategory(0LL, v18);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = 138412290;
      uint64_t v28 = v5;
      unsigned __int8 v10 = "[LocalDeviceCommitManager] Not removing localDevice %@ because airplayActive=NO";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 WHAIdentifier]);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 outputContextForOutputDeviceUID:v20]);

  v22 = -[os_log_s containsLocalDevice](v9, "containsLocalDevice");
  if ((v22 & 1) == 0)
  {
    id v23 = _MRLogForCategory(0LL, v21);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = 138412290;
      uint64_t v28 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[LocalDeviceCommitManager] Not removing localDevice %@ because localDevice is not present",  (uint8_t *)&v27,  0xCu);
    }
  }
}
    }

    id v11 = [v9 countByEnumeratingWithState:&v34 objects:v38 count:16];
  }

  while (v11);

  unsigned int v3 = v31;
  if (!v33) {
    goto LABEL_20;
  }
LABEL_21:

  return v33;
}

LABEL_18:
        id v8 = (char *)v8 + 1;
      }

      while (v8 != v36);
      id v36 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
      if (v36) {
        continue;
      }
      break;
    }
  }

  id v26 = _MRLogForCategory(0LL, v25);
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
    sub_1002B88A8();
  }

  uint64_t v28 = v31;
  ((void (*)(void *, void))v31[2])(v31, 0LL);
LABEL_24:
}
}
}

        id v11 = (v17 - 1) & v17;
        id v12 = __clz(__rbit64(v17)) + (v13 << 6);
        id v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        __int16 v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(void *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        id v23 = -1LL << *(_BYTE *)(a3 + 32);
        id v24 = v22 & ~v23;
        id v25 = v24 >> 6;
        id v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        v29 = v28[1];
        id v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          v35 = (void *)(v27 + 16 * v34);
          id v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
            id v25 = v34 >> 6;
            id v26 = 1LL << v34;
            goto LABEL_23;
          }
        }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  id v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  unsigned __int8 v10 = NSObject._rawHashValue(seed:)(v9);
  id v11 = -1LL << *(_BYTE *)(v4 + 32);
  id v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for NearbyAdvertisement(0LL);
  id v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  id v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    __int128 v15 = ~v11;
    do
    {
      id v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      int v17 = static NSObject.== infix(_:_:)(v16);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v19 = *v2;
  __int16 v21 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100170E6C();
    uint64_t v19 = v21;
  }

  id v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_100171014(v12);
  *uint64_t v2 = v21;
  swift_bridgeObjectRelease();
  return v8;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  id v25 = type metadata accessor for RoutingSessionServer.Client(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  id v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  unsigned __int8 v10 = NSObject._rawHashValue(seed:)(v9);
  id v11 = -1LL << *(_BYTE *)(v4 + 32);
  id v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_1001B1CAC();
  id v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  id v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    __int128 v15 = ~v11;
    do
    {
      id v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      int v17 = static NSObject.== infix(_:_:)(v16);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v19 = *v2;
  __int16 v21 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001B1210();
    uint64_t v19 = v21;
  }

  id v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_100171014(v12);
  *uint64_t v2 = v21;
  swift_bridgeObjectRelease();
  return v8;
}

    swift_unknownObjectRelease(v183);
    swift_release_n(v77, 3LL);
    goto LABEL_16;
  }

  id v30 = objc_msgSend((id)objc_opt_self(IDSAccount), "mr_activeGroupSessionAccount");

  if (!v30)
  {
    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v87 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v87, (uint64_t)qword_1003FF018);
    v77 = v26;
    v88 = swift_retain_n(v26, 2LL);
    v79 = (os_log_s *)Logger.logObject.getter(v88);
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v89 = swift_slowAlloc(32LL, -1LL);
      v140 = v24;
      v83 = v89;
      v190 = v89;
      *(_DWORD *)v81 = 136446210;
      v90 = ((uint64_t (*)(void))dispatch thunk of NearbyGroupSessionProvider.id.getter)();
      v187 = (void *)sub_10015ADC4(v90, v91, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v81 + 4, v81 + 12);
      swift_release_n(v26, 2LL);
      swift_bridgeObjectRelease();
      v86 = "[MRDFastSyncGroupSession]<%{public}s> No local IDS account.";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  v140 = v24;
  v170 = v8;
  v171 = v7;
  v31 = v178;
  swift_beginAccess(v178, &v190, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v31, v183);
  v32 = v181;
  *(void *)&v181[OBJC_IVAR___MRDFastSyncGroupSession_provider] = v26;
  uint64_t v33 = swift_retain(v26);
  v34 = dispatch thunk of NearbyGroupSessionProvider.id.getter(v33);
  v35 = (uint64_t *)&v32[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
  void *v35 = v34;
  v35[1] = v36;
  v37 = v179;
  *(void *)&v32[OBJC_IVAR___MRDFastSyncGroupSession_localIdentity] = v179;
  *(void *)&v32[OBJC_IVAR___MRDFastSyncGroupSession__state] = 0LL;
  sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  LODWORD(v17_Block_object_dispose(va, 8) = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v172 = *(void (**)(char *))(v15 + 104);
  id v38 = v17;
  v138 = v14;
  v172(v17);
  v179 = v37;
  v39 = v145;
  static DispatchQoS.unspecified.getter(v179);
  v187 = _swiftEmptyArrayStorage;
  id v40 = sub_100156FEC( (unint64_t *)&qword_1003FB950,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  id v41 = sub_100156B68((uint64_t *)&unk_1003FA190);
  v139 = v26;
  v42 = v41;
  id v43 = sub_1001604E8( (unint64_t *)&qword_1003FB960,  (uint64_t *)&unk_1003FA190,  (uint64_t)&protocol conformance descriptor for [A]);
  v44 = v146;
  v45 = v147;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v187, v42, v43, v147, v40);
  *(void *)&v32[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000039LL,  0x800000010033C1E0LL,  v39,  v44,  v38,  0LL);
  id v46 = ((uint64_t (*)(char *, void, uint64_t))v172)(v38, v178, v138);
  static DispatchQoS.unspecified.getter(v46);
  v187 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v187, v42, v43, v45, v40);
  v47 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003CLL,  0x800000010033C220LL,  v39,  v44,  v38,  0LL);
  *(void *)&v32[OBJC_IVAR___MRDFastSyncGroupSession_notificationQueue] = v47;
  uint64_t v48 = v148;
  LOBYTE(v39) = v148 & 1;
  v32[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] = v148 & 1;
  v49 = dispatch thunk of NearbyGroupSessionProvider.id.getter(v47);
  v51 = v50;
  v52 = objc_allocWithZone((Class)type metadata accessor for PresenceDataSource(0LL));
  v53 = v182;
  swift_bridgeObjectRetain();
  v54 = v173;
  *(void *)&v32[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource] = sub_1001DE59C(v49, v51, v173, v53);
  v55 = v180;
  *v180 = v54;
  v55[1] = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = OBJC_IVAR___MRDFastSyncGroupSession_shouldHideLeader;
  v32[OBJC_IVAR___MRDFastSyncGroupSession_shouldHideLeader] = (_BYTE)v39;
  if ((v48 & 1) == 0)
  {

    goto LABEL_18;
  }

  v57 = v175;
  *v175 = v54;
  v57[1] = v53;
  swift_bridgeObjectRetain();
  v58 = swift_bridgeObjectRelease();
  v59 = v141;
  v60 = UUID.init()(v58);
  v61 = UUID.uuidString.getter(v60);
  v63 = v62;
  (*(void (**)(char *, uint64_t))(v142 + 8))(v59, v143);
  v64 = v177;
  *v177 = v61;
  v64[1] = v63;
  swift_bridgeObjectRelease();
  v65 = v64[1];
  v66 = v176;
  *v176 = *v64;
  v66[1] = v65;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v64[1])
  {
    v68 = v32[v56];
    v69 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
    v70 = v179;
    swift_bridgeObjectRetain();
    v71 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v72 = [v69 initWithIdentifier:v71 identity:v70 connected:1 guest:0 hidden:v68];

    v73 = v174;
    swift_beginAccess(v174, v185, 1LL, 0LL);
    v74 = *v73;
    *v73 = v72;

    v75 = v140;
    swift_beginAccess(v140, v184, 1LL, 0LL);
    *v75 = &_swiftEmptyDictionarySingleton;

    swift_bridgeObjectRelease();
LABEL_18:
    v97 = (objc_class *)type metadata accessor for MRDFastSyncGroupSession();
    v189.receiver = v32;
    v189.super_class = v97;
    v98 = (char *)objc_msgSendSuper2(&v189, "init");
    type metadata accessor for GroupSessionRemoteControlConnectionManager();
    v180 = (uint64_t *)OBJC_IVAR___MRDFastSyncGroupSession_executionQueue;
    v181 = v98;
    v99 = *(void **)&v98[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
    v100 = v98;
    swift_bridgeObjectRetain();
    v101 = v100;
    v102 = sub_10024059C(v54, v53, v48 & 1, (uint64_t)v101, (uint64_t)&off_1003A5540, v99);
    v103 = *(void *)&v101[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
    *(void *)&v101[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager] = v102;
    swift_release(v103);
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v104 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v104, (uint64_t)qword_1003FF018);
    v105 = v101;
    swift_bridgeObjectRetain_n(v53, 2LL);
    v96 = v105;
    v106 = (os_log_s *)Logger.logObject.getter(v96);
    v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = swift_slowAlloc(32LL, -1LL);
      v109 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      v177 = v109;
      v178 = (void *)swift_slowAlloc(64LL, -1LL);
      v186 = v96;
      v187 = v178;
      *(_DWORD *)v108 = 138543874;
      v110 = (char *)(id)v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v108 + 4, v108 + 12);
      *v109 = v96;

      *(_WORD *)(v108 + 12) = 2082;
      v112 = *(void *)&v110[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      v111 = *(void *)&v110[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v186 = sub_10015ADC4(v112, v111, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v108 + 14, v108 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 22) = 2082;
      swift_bridgeObjectRetain();
      v113 = v173;
      v186 = sub_10015ADC4(v173, v53, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v108 + 24, v108 + 32);
      swift_bridgeObjectRelease_n(v53, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v106,  v107,  "[%{public}@]<%{public}s> Created with local handle: %{public}s",  (uint8_t *)v108,  0x20u);
      v114 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      v115 = v177;
      swift_arrayDestroy(v177, 1LL, v114);
      swift_slowDealloc(v115, -1LL, -1LL);
      v116 = v178;
      swift_arrayDestroy(v178, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v108, -1LL, -1LL);

      v117 = v183;
      v118 = &off_1003F9000;
      v119 = v171;
      v120 = v170;
      v121 = v144;
    }

    else
    {

      swift_bridgeObjectRelease_n(v53, 2LL);
      v117 = v183;
      v118 = &off_1003F9000;
      v119 = v171;
      v120 = v170;
      v121 = v144;
      v113 = v173;
    }

    v122 = *(char **)(v96 + OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource);
    swift_beginAccess( &v122[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource__presentHandles],  &v187,  33LL,  0LL);
    v123 = v122;
    v124 = sub_100156B68(&qword_1003F9F18);
    Published.projectedValue.getter(v124);
    swift_endAccess(&v187);

    v125 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v125 + 16, v96);
    v126 = sub_1001604E8( (unint64_t *)&unk_1003FA1A0,  (uint64_t *)&unk_1003FA180,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v127 = Publisher<>.sink(receiveValue:)(sub_1001EF9F8, v125, v119, v126);
    swift_release(v125);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v119);
    v128 = (char *)(v96 + OBJC_IVAR___MRDFastSyncGroupSession_cancellables);
    swift_beginAccess(v96 + OBJC_IVAR___MRDFastSyncGroupSession_cancellables, &v187, 33LL, 0LL);
    AnyCancellable.store(in:)(v128);
    swift_endAccess(&v187);
    swift_release(v127);
    v129 = objc_msgSend((id)objc_opt_self(IDSService), "mr_sharedGroupSessionService");
    v130 = *(void **)((char *)v180 + (void)v181);
    v131 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v131 + 16, v96);
    v132 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v132 + 16, v96);
    v133 = objc_allocWithZone((Class)&OBJC_CLASS___MRDGroupSessionPushMessenger);
    v134 = v130;
    swift_retain(v131);
    swift_retain(v132);
    v135 = sub_1001E09F4(v129, v113, v182, v134, (uint64_t)sub_1001EFA00, v131, (uint64_t)sub_1001EFA7C, v132);
    swift_release(v131);
    swift_release(v132);

    swift_release(v139);
    swift_unknownObjectRelease(v117);
    v136 = (char *)v118[302];
    v137 = *(void **)&v136[v96];
    *(void *)&v136[v96] = v135;

    return v96;
  }

  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  id v24 = sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
  uint64_t result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v27 = sub_100156B68(&qword_1003FB380);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    sub_1002458C8();
    if ((v13 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }

  sub_10024493C(v21, v14);
  v22 = sub_100244548(a3);
  if ((v13 & 1) != (v23 & 1))
  {
LABEL_17:
    id v26 = type metadata accessor for ConnectedParticipant();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
    __break(1u);
    return result;
  }

  id v18 = v22;
  if ((v13 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v27 = type metadata accessor for ConnectedParticipant();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

BOOL sub_10000D62C(id a1, MRDiscoveredGroupSession *a2)
{
  return -[MRDiscoveredGroupSession source](a2, "source") == (id)1;
}

id sub_10000D64C(uint64_t a1)
{
  v6[0] = kMREventNearbyNotificationTypeProximityCard;
  v5[0] = kMREventNearbyNotificationTypeKey;
  v5[1] = kMREventSessionCreatedRouteKey;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hostInfo]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  [v1 routeType]));
  v6[1] = v2;
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  2LL));

  return v3;
}

BOOL sub_10000D87C(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  int v5 = sub_1000097C4(v4);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v6 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:]( v4,  "takeAssertion:forReason:duration:",  7LL,  @"MediaRemoteActiveGroupSessionStateChanged");
  }

  return v5;
}

BOOL sub_10000DB2C(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  int v5 = sub_1000097C4(v4);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v6 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:]( v4,  "takeAssertion:forReason:duration:",  7LL,  @"MediaRemoteLocalGroupSessionEligibilityStatusChanged");
  }

  return v5;
}

id sub_10000E35C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addClient:*(void *)(a1 + 40)];
}

id sub_10000E368(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeClient:*(void *)(a1 + 40)];
}

void sub_10000E664(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) isAsserting];
  uint64_t v4 = _MRLogForCategory(12LL, v3);
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v6)
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Stop timer elapsed but there are group session assertions - not stopping",  v7,  2u);
    }
  }

  else
  {
    if (v6)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionServer] Stop timer elapsed with no assertions remaining - stopping",  buf,  2u);
    }

    [*(id *)(a1 + 40) stop];
  }

void sub_10000EBD8( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_10000EC14( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10000EC24(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10000EEC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(12LL, v4);
  BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 134218242;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionClient] <%p> Server proxy error %@.",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10000F044(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) transportParticipants:*(void *)(a1 + 40) forSession:*(void *)(a1 + 48)]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  [v2 session:v3 didUpdateParticipants:v4];
}

void sub_10000F174(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 48)));
  [v4 session:v2 didUpdateMembers:v3];
}

void sub_10000F28C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  1LL,  @"Session state changed to invalidated."));
  [v4 session:v2 didInvalidateWithError:v3];
}

void sub_10000F3E0(id *a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "msv_compactMap:", &stru_1003996D0));
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v2));

  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] client]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[6] identifier]);
  [v3 session:v4 didUpdatePendingParticipants:v5];
}

id sub_10000F480(id a1, MRDGroupSessionParticipant *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identity](v2, "identity"));

  if (v3)
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRCodableGroupSessionParticipant);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v2, "identifier"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identity](v2, "identity"));
    id v8 = objc_msgSend( v5,  "initWithIdentifier:identity:connected:guest:hidden:",  v6,  v7,  0,  -[MRDGroupSessionParticipant guest](v2, "guest"),  -[MRDGroupSessionParticipant hidden](v2, "hidden"));

    [v8 setPending:1];
  }

  else
  {
    uint64_t v9 = _MRLogForCategory(12LL, v4);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = 0LL;
  }

  return v8;
}

void sub_10000F690(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v3 session:v2 didUpdateSynchronizedMetadata:*(void *)(a1 + 48)];
}

void sub_10000F784(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v3 session:v2 didChangeState:1];
}

void sub_10000F878(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v3 session:v2 didChangeState:3];
}

void sub_10000F96C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    [v2 discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }

void sub_10000FA90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
    [v4 activeSessionDidChange:*(void *)(a1 + 48)];
  }

  else
  {
    _[v3 reevaluatePendingStateFromSession:*(void *)(a1 + 40)];
  }

void sub_10000FB60(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    [v2 activeSessionDidChange:0];
  }

void sub_10000FC74(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    [v2 activeSessionDidChange:*(void *)(a1 + 40)];
  }

void sub_10000FD3C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    [v2 activeSessionDidChange:0];
  }

void sub_10000FE60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
    [v4 activeSessionDidChange:*(void *)(a1 + 48)];
  }

  else
  {
    _[v3 reevaluatePendingStateFromSession:*(void *)(a1 + 40)];
  }

LABEL_14:
}

  return v10;
}

  return v14;
}
      }

      uint64_t v9 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v9);
  }
}

  [v17 sendRemoteControlCommand:v33 withCompletionBlock:*(void *)(a1 + 48)];
LABEL_18:
}

  [*(id *)(*(void *)(a1[7] + 8) + 40) dismiss];
  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v23 removeObserver:*(void *)(*(void *)(a1[8] + 8) + 40)];
}

    sub_1001A32B0();
    if ((a3 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }

  sub_1001A11EC(v25, v19);
  id v26 = sub_1001A0A48(a2);
  if ((a3 & 1) == (v27 & 1))
  {
    v22 = v26;
    if ((a3 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v28 = *(void *)(v39[7] + 8 * v22);
    v29 = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_1001A2948((uint64_t)sub_1001A7E08, v17, v14, v16, v29);
    id v38 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001A3910(&v38, 1, (uint64_t *)&v39, v22, a2);
    swift_release(a2);
    swift_bridgeObjectRelease();
    id v30 = (uint64_t)v39;
    swift_release(a2);
    swift_release(a2);
    *(void *)(v5 + 40) = v30;
    swift_bridgeObjectRelease();
    v31 = *(void *)(a2
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
    v32 = *(void *)(a2
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                    + 8);
    ObjectType = swift_getObjectType(v31, v33);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    swift_unknownObjectRetain(v31);
    v35(a1, ObjectType, v32);
    return swift_unknownObjectRelease(v31);
  }

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  __int16 v21 = __OFADD__(v20, 1LL);
  v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

    return;
  }

  if ((*((_BYTE *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_isLeader) & 1) != 0)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }

  sub_100160874(a2, a3);
  sub_100237070( a2,  a3,  (uint64_t)&type metadata for IdentityShareReplyMessage,  (uint64_t)&off_1003FBB10,  (uint64_t)&aBlock);
  uint64_t v27 = v78;
  if (!v78)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v58 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v58, (uint64_t)qword_1003FF018);
    uint64_t v20 = v5;
    __int16 v21 = (os_log_s *)Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v24 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v23 = 138543362;
      aBlock = v20;
      v59 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v78, v23 + 4, v23 + 12);
      *id v24 = v20;

      id v26 = "[%{public}@] IdentityShareReply message payload is malformed.";
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  v62 = v10;
  v65 = v8;
  v68 = v79;
  uint64_t v28 = (uint64_t)v81;
  v67 = (uint64_t)v80;
  id v30 = v82;
  v29 = v83;
  v31 = v84 | (v85 << 16);
  v32 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier);
  v66 = (uint64_t)aBlock;
  *v32 = aBlock;
  v32[1] = v27;
  v69 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipantIdentifier);
  *uint64_t v33 = v28;
  v33[1] = v30;
  swift_bridgeObjectRetain_n(v30, 2LL);
  swift_bridgeObjectRelease();
  v34 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
  swift_bridgeObjectRetain();
  v64 = v29;
  v35 = v29;
  id v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v63 = v31;
  v37 = [v34 initWithIdentifier:v36 identity:v35 connected:v31 & 1 guest:(v31 >> 8) & 1 hidden:HIWORD(v31) & 1];

  (*(void (**)(id))((swift_isaMask & *v5) + 0x2A8LL))(v37);
  id v38 = sub_100156B68(&qword_1003F9EF8);
  inited = swift_initStackObject(v38, v76);
  *(_OWORD *)(inited + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = Participant.handle.getter(inited);
  *(void *)(inited + 40) = v40;
  v73 = v28;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v28;
  *(void *)(inited + 56) = v30;
  id v41 = sub_1001B7AA8(inited);
  v42 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap);
  swift_beginAccess( (char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap,  v75,  1LL,  0LL);
  *v42 = v41;
  swift_bridgeObjectRelease();
  id v43 = *(void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager);
  if (v43)
  {
    v44 = *(void (**)(uint64_t))(*(void *)v43 + 360LL);
    swift_retain(*(void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager));
    v45 = swift_bridgeObjectRetain();
    v44(v45);
    swift_release(v43);
    swift_bridgeObjectRelease();
    id v46 = sub_1001B28A4();
    v47 = sub_1001B2660();
    uint64_t v48 = swift_release(v46);
    (*(void (**)(uint64_t))((swift_isaMask & *v47) + 0xD0LL))(v48);

    aBlock = (void *)sub_1001B28A4();
    v49 = type metadata accessor for JoinTimingEvents();
    sub_1002047D4(v49, (uint64_t)&off_1003A55E0);
    v50 = *(void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings);
    *(void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings) = aBlock;
    swift_release(v50);
    v51 = swift_allocObject(&unk_1003A5D80, 24LL, 7LL);
    *(void *)(v51 + 16) = v5;
    v81 = sub_1001ED91C;
    v82 = v51;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256LL;
    v79 = sub_100157EA8;
    v80 = &unk_1003A5D98;
    v52 = _Block_copy(&aBlock);
    static DispatchQoS.unspecified.getter(v5);
    v74 = _swiftEmptyArrayStorage;
    v53 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v54 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    v55 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    v56 = v62;
    v57 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v54, v55, v65, v53);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v56, v52);
    _Block_release(v52);
    sub_1001EE9DC(v66, v69, v68, v67, v73, v30, v64);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v71);
    swift_release(v82);
  }

  else
  {
    __break(1u);
  }

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  __int16 v21 = __OFADD__(v20, 1LL);
  v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

  id v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_DWORD *)(*(void *)(v14 + 48) + 4 * a2) = v5;
  __int128 v15 = *(void *)(v14 + 16);
  uint64_t v16 = __OFADD__(v15, 1LL);
  int v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

    id v25 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v17 >> 6) + 64) |= 1LL << v17;
    id v26 = (uint64_t *)(v25[6] + 16 * v17);
    MSVBlockGuard *v26 = v14;
    v26[1] = v13;
    sub_100160944(v48, (_OWORD *)(v25[7] + 32 * v17));
    uint64_t v27 = v25[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v25[2] = v29;
LABEL_16:
    sub_100221B04(&v49);
    for (i = *((void *)&v49 + 1); *((void *)&v49 + 1); i = *((void *)&v49 + 1))
    {
      v32 = v49;
      sub_100160944(v50, v48);
      uint64_t v33 = *(void **)a5;
      v35 = sub_10015CAD4(v32, i);
      id v36 = v33[2];
      v37 = (v34 & 1) == 0;
      id v38 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_28;
      }
      v39 = v34;
      if (v33[3] < v38)
      {
        sub_1001FC650(v38, 1LL);
        id v40 = sub_10015CAD4(v32, i);
        if ((v39 & 1) != (v41 & 1)) {
          goto LABEL_30;
        }
        v35 = v40;
      }

      if ((v39 & 1) != 0)
      {
        sub_100160800((uint64_t)v48, (uint64_t)v47);
        sub_1001607E0(v48);
        swift_bridgeObjectRelease();
        v31 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v35);
        sub_1001607E0(v31);
        sub_100160944(v47, v31);
      }

      else
      {
        v42 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v35 >> 6) + 64) |= 1LL << v35;
        id v43 = (uint64_t *)(v42[6] + 16 * v35);
        *id v43 = v32;
        v43[1] = i;
        sub_100160944(v48, (_OWORD *)(v42[7] + 32 * v35));
        v44 = v42[2];
        uint64_t v28 = __OFADD__(v44, 1LL);
        v45 = v44 + 1;
        if (v28) {
          goto LABEL_29;
        }
        v42[2] = v45;
      }

      sub_100221B04(&v49);
    }

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  __int16 v21 = __OFADD__(v20, 1LL);
  v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

  __break(1u);
LABEL_15:
  __break(1u);
}

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  __int16 v21 = __OFADD__(v20, 1LL);
  v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

    swift_once(&qword_1004057A0, sub_1002A8A40);
    goto LABEL_4;
  }

  if (qword_1004057A0 != -1) {
    swift_once(&qword_1004057A0, sub_1002A8A40);
  }
  v37 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v37, (uint64_t)qword_1004057A8);
  swift_bridgeObjectRetain_n(a3, 2LL);
  v39 = (os_log_s *)Logger.logObject.getter(v38);
  id v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v41 = swift_slowAlloc(22LL, -1LL);
    v42 = swift_slowAlloc(64LL, -1LL);
    v52[0] = v42;
    *(_DWORD *)id v41 = 136315394;
    id v43 = _typeName(_:qualified:)(v50, 0LL);
    v51 = sub_10015ADC4(v43, v44, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2082;
    swift_bridgeObjectRetain();
    v51 = sub_10015ADC4(a2, a3, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "[%s] Received response from unknown notification: %{public}s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

void sub_100010494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
}

void sub_1000104D8(id *a1)
{
  id v2 = a1 + 7;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(v2);
    uint64_t v6 = _MRLogForCategory(12LL, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1002B4AFC((uint64_t)a1, v7, v8);
    }

    [a1[5] removeObserver:v4];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] identifier]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  1LL,  @"Timed out waiting for session to be joined."));
    [v9 session:v10 didInvalidateWithError:v11];
  }

id sub_1000107A0(id a1, MRDGroupSessionParticipant *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identity](v2, "identity"));

  if (v3)
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRCodableGroupSessionParticipant);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v2, "identifier"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identity](v2, "identity"));
    id v8 = objc_msgSend( v5,  "initWithIdentifier:identity:connected:guest:hidden:",  v6,  v7,  0,  -[MRDGroupSessionParticipant guest](v2, "guest"),  -[MRDGroupSessionParticipant hidden](v2, "hidden"));

    [v8 setPending:1];
  }

  else
  {
    uint64_t v9 = _MRLogForCategory(12LL, v4);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = 0LL;
  }

  return v8;
}

void sub_10001151C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100011538(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identity]);

  if (v4)
  {
    id v6 = objc_alloc(&OBJC_CLASS___MRCodableGroupSessionParticipant);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 identity]);
    id v9 = objc_msgSend( v6,  "initWithIdentifier:identity:connected:guest:hidden:",  v7,  v8,  objc_msgSend(v3, "connected"),  objc_msgSend(v3, "guest"),  objc_msgSend(v3, "hidden"));

    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    unsigned int v12 = [v10 isEqualToString:v11];

    if (v12)
    {
      [v9 setLocal:1];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    unsigned int v15 = [v13 isEqualToString:v14];

    if (v15) {
      [v9 setHost:1];
    }
  }

  else
  {
    uint64_t v16 = _MRLogForCategory(12LL, v5);
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@",  (uint8_t *)&v19,  0xCu);
    }

    id v9 = 0LL;
  }

  return v9;
}

void sub_100011858(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_100011CB8(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = -[MRCommandResult initWithHandlerStatuses:sendError:]( objc_alloc(&OBJC_CLASS___MRCommandResult),  "initWithHandlerStatuses:sendError:",  &off_1003BBA98,  0LL);
    uint64_t v5 = _MRLogForCategory(2LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Yielding AVRCP command to callCenterHandler",  buf,  2u);
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, NSString *))(v7 + 16))(v7, v3);
    }
  }

  else
  {
    id v8 = objc_alloc(&OBJC_CLASS___NSString);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
    __int16 v10 = -[NSString initWithFormat:](v8, "initWithFormat:", @"com.apple.mediaremote.remotecontrol.%@", v9);

    id v3 = v10;
    id v11 = -[NSString UTF8String](v3, "UTF8String");
    dispatch_queue_attr_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v13 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v12);
    dispatch_queue_attr_t v14 = dispatch_queue_attr_make_with_qos_class(v13, (dispatch_qos_class_t)*(_DWORD *)(a1 + 56), 0);
    unsigned int v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = dispatch_queue_create(v11, v15);

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100011E78;
    block[3] = &unk_100399768;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v17 = (id)v18.i64[0];
    int8x16_t v20 = vextq_s8(v18, v18, 8uLL);
    id v21 = *(id *)(a1 + 48);
    dispatch_async(v16, block);
  }
}

id sub_100011E78(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendRemoteControlCommand:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000121C4(_Unwind_Exception *a1)
{
}

void sub_1000121E8(uint64_t a1, void *a2)
{
  id v43 = a2;
  kdebug_trace(732233776LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v45 = a1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) optionValueForKey:kMRMediaRemoteOptionDirectUserInteraction]);
  unsigned int v4 = [v3 BOOLValue];

  v42 = (void *)objc_claimAutoreleasedReturnValue([v43 error]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v42 domain]);
  id v6 = [v42 code];

  if (v6 == (id)46) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 == 1)
  {
    id v8 = *(void **)(v45 + 40);
    uint64_t v9 = MRLocalizedString(@"MULTIPLAYER_CAPACITY_REACHED_TITLE", 0LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v10 = MRLocalizedString(@"MULTIPLAYER_CAPACITY_REACHED", 0LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = MRLocalizedString(@"OK", 0LL);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 =  objc_msgSend( v8,  "_onQueue_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:",  v5,  v11,  v13,  0,  0);

LABEL_7:
  }

  id v41 = (void *)objc_claimAutoreleasedReturnValue([v43 playerPath]);
  if (!v42 && v41)
  {
    id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v45 + 40) _effectiveContextIDForCommand:*(void *)(v45 + 32)]);
    if (v40
      && objc_msgSend( *(id *)(v45 + 40),  "_isCommandCacheCreating:",  objc_msgSend(*(id *)(v45 + 32), "commandType")))
    {
      *(void *)v55 = 0LL;
      v56 = v55;
      uint64_t v57 = 0x3032000000LL;
      v58 = sub_100012748;
      v59 = sub_100012758;
      id v60 = 0LL;
      uint64_t v16 = *(void *)(*(void *)(v45 + 40) + 8LL);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_100012760;
      v50[3] = &unk_1003997B8;
      id v17 = v41;
      id v51 = v17;
      id v18 = v40;
      uint64_t v19 = *(void *)(v45 + 40);
      id v44 = v18;
      id v52 = v18;
      uint64_t v53 = v19;
      v54 = v55;
      msv_dispatch_sync_on_queue(v16, v50);
      int8x16_t v20 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v56 + 5) completionBlockDictionary]);
      BOOL v21 = [v20 count] == 0;

      if (!v21)
      {
        __int128 v48 = 0u;
        __int128 v49 = 0u;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        v22 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v56 + 5) completionBlockDictionary]);
        id v23 = [v22 countByEnumeratingWithState:&v46 objects:v65 count:16];
        if (v23)
        {
          uint64_t v24 = *(void *)v47;
          do
          {
            for (i = 0LL; i != v23; i = (char *)i + 1)
            {
              if (*(void *)v47 != v24) {
                objc_enumerationMutation(v22);
              }
              id v26 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
              uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v56 + 5), "commandDictionary", v40));
              uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v26]);
              id v29 = [v28 mutableCopy];

              [v29 setPlayerPath:v17];
              objc_msgSend(v29, "setCommandType:", objc_msgSend(v26, "unsignedIntValue"));
              uint64_t v31 = _MRLogForCategory(2LL, v30);
              v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138543618;
                id v62 = v17;
                __int16 v63 = 2114;
                id v64 = v44;
                _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Sending cachable command to player path %{public}@ for context %{public}@.",  buf,  0x16u);
              }

              uint64_t v33 = *(void **)(v45 + 40);
              v34 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v56 + 5) completionBlockDictionary]);
              v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:v26]);
              [v33 _forwardCommand:v29 completion:v35];
            }

            id v23 = [v22 countByEnumeratingWithState:&v46 objects:v65 count:16];
          }

          while (v23);
        }
      }

      _Block_object_dispose(v55, 8);
    }
  }

  if (*(void *)(v45 + 48))
  {
    uint64_t v36 = _MRLogForCategory(2LL, v15);
    v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v45 + 32) commandID]);
    v39 = (char *)[v38 hash];

    if ((unint64_t)(v39 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v37))
    {
      *(_WORD *)v55 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  OS_SIGNPOST_INTERVAL_END,  (os_signpost_id_t)v39,  "SendCommandDaemon",  "",  v55,  2u);
    }

    (*(void (**)(void))(*(void *)(v45 + 48) + 16LL))();
  }
}

void sub_100012714( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_100012748(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100012758(uint64_t a1)
{
}

void sub_100012760(void *a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(2LL, a2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v21 = 138543618;
    uint64_t v22 = v5;
    __int16 v23 = 2114;
    uint64_t v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Caching resolved player path %{public}@ for context %{public}@.",  (uint8_t *)&v21,  0x16u);
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1[6] + 64) objectForKeyedSubscript:a1[5]]);
  uint64_t v8 = *(void *)(a1[7] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    uint64_t v11 = a1[4];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[6] + 64) objectForKeyedSubscript:a1[5]]);
    [v12 setPlayerPath:v11];
  }

  else
  {
    uint64_t v13 = _MRLogForCategory(2LL, v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR)) {
      sub_1002B4C8C((os_log_s *)v12, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

void sub_100012898(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___MRDRedirectionCacheEntry);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  -[MRDRedirectionCacheEntry setCommandDictionary:](v2, "setCommandDictionary:", v3);

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  -[MRDRedirectionCacheEntry setCompletionBlockDictionary:](v2, "setCompletionBlockDictionary:", v4);

  [*(id *)(*(void *)(a1 + 32) + 64) setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];
  dispatch_time_t v5 = dispatch_time(0LL, 60000000000LL);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10001299C;
  v10[3] = &unk_100398E60;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  id v11 = v8;
  uint64_t v12 = v9;
  dispatch_after(v5, v7, v10);
}

id sub_10001299C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(2LL, a2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Expiring player path for context %{public}@.",  (uint8_t *)&v7,  0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 64) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_100012A54(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v4 = _MRLogForCategory(2LL, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v6)
    {
      uint64_t v14 = *(void **)(a1 + 40);
      int v24 = 138543362;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "No assistant cache active, context: %{public}@.",  (uint8_t *)&v24,  0xCu);
    }

    goto LABEL_11;
  }

  if (v6)
  {
    int v7 = *(void **)(a1 + 40);
    int v24 = 138543362;
    id v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Got a cacheable command from assistant, context: %{public}@.",  (uint8_t *)&v24,  0xCu);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 playerPath]);
  if (v8)
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 playerPath]);
    if (v5)
    {
      [*(id *)(a1 + 56) setPlayerPath:v5];
      uint64_t v11 = _MRLogForCategory(2LL, v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) playerPath]);
        int v24 = 138543362;
        id v25 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Redirecting to cached path: %{public}@",  (uint8_t *)&v24,  0xCu);
      }
    }

void sub_100012F04(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = *(void **)(a1 + 32);
  if (v6)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100012FBC;
    block[3] = &unk_100399830;
    id v11 = v6;
    int v12 = a2;
    id v10 = v5;
    dispatch_async(v8, block);
  }
}

uint64_t sub_100012FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_100012FD0(id *a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    uint64_t v3 = _MRLogForCategory(2LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] commandID]);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Command <%{public}@> ignored because of device state",  (uint8_t *)&buf,  0xCu);
    }

    (*((void (**)(void))a1[7] + 2))();
  }

  else
  {
    BOOL v6 = dispatch_group_create();
    int v7 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] commandID]);
    uint64_t v9 = -[NSString initWithFormat:](v7, "initWithFormat:", @"com.apple.mediaremote.broadcastcommand.%@", v8);
    id v10 = -[NSString UTF8String](v9, "UTF8String");
    dispatch_queue_attr_t v11 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    int v12 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v11);
    dispatch_queue_t v13 = dispatch_queue_create(v10, v12);

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v65 = 0x2020000000LL;
    int v66 = 0;
    v37 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [a1[5] count]);
    id v38 = v13;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    id obj = a1[5];
    id v14 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v58;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v58 != v15) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = *(void **)(*((void *)&v57 + 1) + 8LL * (void)i);
          id v18 = [a1[4] mutableCopy];
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _createBroadcastCommandPlayerPathForClient:v17]);
          [v18 setPlayerPath:v19];

          dispatch_group_enter(v6);
          uint64_t v21 = _MRLogForCategory(0LL, v20);
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] commandID]);
            int v24 = (void *)objc_claimAutoreleasedReturnValue([v17 bundleIdentifier]);
            *(_DWORD *)v61 = 138543618;
            *(void *)&v61[4] = v23;
            *(_WORD *)&v61[12] = 2112;
            *(void *)&v61[14] = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Broadcasting command <%{public}@> to client: <%@>",  v61,  0x16u);
          }

          id v25 = a1[6];
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472LL;
          v50[2] = sub_100013534;
          v50[3] = &unk_1003998A8;
          p___int128 buf = &buf;
          id v51 = v38;
          id v26 = v37;
          id v27 = a1[6];
          id v52 = v26;
          id v53 = v27;
          v54 = v17;
          v55 = v6;
          [v25 _sendRemoteControlCommand:v18 toDestinationClient:v17 withLegacyCompletion:v50];
        }

        id v14 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
      }

      while (v14);
    }

    *(void *)v61 = 0LL;
    *(void *)&v61[8] = v61;
    *(void *)&v61[16] = 0x2020000000LL;
    char v62 = 0;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v28 broadcastCommandWaitDuration];
    double v30 = v29;

    uint64_t v31 = objc_alloc(&OBJC_CLASS___MSVTimer);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_100013638;
    v44[3] = &unk_1003998D0;
    __int128 v48 = v61;
    id v45 = a1[4];
    double v49 = v30;
    id v47 = a1[7];
    v32 = v37;
    __int128 v46 = v32;
    uint64_t v33 = -[MSVTimer initWithInterval:repeats:queue:block:]( v31,  "initWithInterval:repeats:queue:block:",  0LL,  v38,  v44,  v30);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100013738;
    block[3] = &unk_1003998F8;
    v42 = v61;
    id v34 = a1[7];
    id v43 = &buf;
    id v40 = v32;
    id v41 = v34;
    v35 = v32;
    dispatch_group_notify(v6, v38, block);

    _Block_object_dispose(v61, 8);
    _Block_object_dispose(&buf, 8);
  }

void sub_1000134E4(_Unwind_Exception *a1)
{
}

void sub_100013534(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  if (*(_DWORD *)(v6 + 24)) {
    *(_DWORD *)(v6 + 24) = a2;
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000135F0;
  v12[3] = &unk_100399880;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v5;
  uint64_t v16 = v10;
  id v11 = v5;
  msv_dispatch_sync_on_queue(v7, v12);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1000135F0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _createBroadcastCommandResponseFromStatuses:*(void *)(a1 + 48) forClient:*(void *)(a1 + 56)]);
  [v1 addObject:v2];
}

uint64_t sub_100013638(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(void *)(*(void *)(result + 56) + 8LL) + 24LL))
  {
    uint64_t v2 = result;
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 32) commandID]);
      uint64_t v6 = *(void *)(v2 + 64);
      int v7 = 138543618;
      id v8 = v5;
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Broadcast command %{public}@ timedout after %lf seconds",  (uint8_t *)&v7,  0x16u);
    }

    *(_BYTE *)(*(void *)(*(void *)(v2 + 56) + 8LL) + 24LL) = 1;
    return (*(uint64_t (**)(void))(*(void *)(v2 + 48) + 16LL))();
  }

  return result;
}

void *sub_100013738(void *result)
{
  uint64_t v1 = *(void *)(result[6] + 8LL);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    return (void *)(*(uint64_t (**)(void, void, void))(result[5] + 16LL))( result[5],  *(unsigned int *)(*(void *)(result[7] + 8LL) + 24LL),  result[4]);
  }

  return result;
}

void sub_1000137EC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v18 = _NSConcreteStackBlock;
  uint64_t v19 = 3221225472LL;
  uint64_t v20 = sub_1000139DC;
  uint64_t v21 = &unk_100399948;
  id v22 = v3;
  id v5 = v2;
  __int16 v23 = v5;
  [v4 enumerateKeysAndObjectsUsingBlock:&v18];
  if (-[NSMutableArray count](v5, "count", v18, v19, v20, v21))
  {
    uint64_t v7 = _MRLogForCategory(0LL, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = -[NSMutableArray count](v5, "count");
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 134218242;
      id v25 = v9;
      __int16 v26 = 2112;
      uint64_t v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Clearing %lld context(s) for client %@",  buf,  0x16u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 32) removeObjectsForKeys:v5];
  id v11 = *(void **)(a1 + 40);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandClientsRestriction]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requester]);

  if (v11 == v13)
  {
    uint64_t v15 = _MRLogForCategory(0LL, v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      id v25 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[RestrictedCommandClients Mode] %@ is gone, disabling restricted mode",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setCommandClientsRestriction:0];
  }
}

void sub_1000139DC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 originatingAppDisplayID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  unsigned int v7 = [v5 isEqualToString:v6];

  if (v7) {
    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_100013C64(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 destinationPlayerPath]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nowPlayingServer]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 originClientForOrigin:v7]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 createNewApplicationConnectionCallback]);
  if (v9)
  {
    uint64_t v10 = -[MRDApplicationConnection initWithContext:]( objc_alloc(&OBJC_CLASS___MRDApplicationConnection),  "initWithContext:",  v2);
    -[MRDApplicationConnection setClientBoundMessageHandler:]( v10,  "setClientBoundMessageHandler:",  *(void *)(a1 + 48));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100013E24;
    v15[3] = &unk_100399998;
    v15[4] = *(void *)(a1 + 40);
    uint64_t v16 = v10;
    id v18 = *(id *)(a1 + 56);
    id v17 = v2;
    id v11 = (void (*)(void *, MRDApplicationConnection *, void *, void *))v9[2];
    int v12 = v10;
    v11(v9, v12, v3, v15);
  }

  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 14LL);
    (*(void (**)(uint64_t, void, NSError *))(v13 + 16))(v13, 0LL, v14);
  }
}

void sub_100013E24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013EF0;
  block[3] = &unk_100399970;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_100013EF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_msgSend(v2, "invalidate:");
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    [v2 activate];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    uint64_t v4 = *(void *)(a1 + 40);
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) applicationConnections]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
    [v6 setObject:v4 forKeyedSubscript:v5];
  }

void sub_10001400C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v4]);

  [v5 handleClientBoundMessage:*(void *)(a1 + 40)];
}

void sub_100014110(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v4]);

  [v5 handleServerBoundMessage:*(void *)(a1 + 40)];
}

void sub_100014214(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v4]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [v6 invalidate:v5];
}

id sub_1000144B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) allValues]);
  [*(id *)(a1 + 32) setRemoteControlContexts:v2];

  return [*(id *)(a1 + 32) setCommandClientsRestriction:*(void *)(*(void *)(a1 + 40) + 104)];
}

MRDMutableRemoteControlCommand *sub_100014700(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = MRCreatePlayerPathFromXPCMessage(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "MRXPC_COMMAND_KEY");
  id v8 = (void *)MRCreateDataFromXPCMessage(v4, "MRXPC_COMMAND_OPTIONS_KEY");

  id v9 = [v6 copy];
  if ([v3 entitlements] & 2) != 0 || (sub_10001C54C(v6))
  {
    int v10 = 0;
  }

  else
  {
    [v9 setClient:0];
    [v9 setPlayer:0];
    int v10 = 1;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nowPlayingServer]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 resolveExistingPlayerPath:v9]);

  id v14 = objc_alloc(&OBJC_CLASS___MRDMutableRemoteControlCommand);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  uint64_t v16 = -[MRDRemoteControlCommand initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:]( v14,  "initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:",  uint64,  v13,  v9,  v15,  v8);

  if (v10)
  {
    id v17 = objc_alloc(&OBJC_CLASS___NSString);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[MRDRemoteControlCommand commandID](v16, "commandID"));
    uint64_t v20 = -[NSString initWithFormat:]( v17,  "initWithFormat:",  @"Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.",  v18,  v19,  v6);

    uint64_t v22 = _MRLogForCategory(2LL, v21);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_1002B4D28();
    }

    uint64_t v25 = _MRLogForCategory(2LL, v24);
    __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
      sub_1002B4CBC();
    }
  }

  return v16;
}

void sub_100014924(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace(732233776LL, 0LL, 0LL, 0LL, 0LL);
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  uint64_t v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v5)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
    if (reply)
    {
      uint64_t v8 = _MRLogForCategory(2LL, v6);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) commandID]);
      id v11 = (char *)[v10 hash];

      if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_BEGIN,  (os_signpost_id_t)v11,  "SendCommandXPCResultFromDaemon",  "",  v12,  2u);
      }

      MRAddCommandResultToXPCMessage(reply, v3);
      xpc_connection_send_message(v5, reply);
    }
  }
}

void sub_100014B84(uint64_t a1, unsigned int a2, void *a3)
{
  id v11 = a3;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  uint64_t v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v6)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
    uint64_t v8 = reply;
    if (reply)
    {
      xpc_dictionary_set_uint64(reply, "MRXPC_COMMAND_SEND_ERROR_KEY", a2);
      if (v11)
      {
        uint64_t v9 = MRCreateDataFromArray(v11, &stru_100399A28);
        int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        MRAddDataToXPCMessage(v8, v10, "MRXPC_COMMAND_STATUSES_DATA_KEY");
      }

      xpc_connection_send_message(v6, v8);
    }
  }
}

NSData *__cdecl sub_100014C40(id a1, _MRSendCommandResultMessageProtobuf *a2)
{
  return (NSData *)-[_MRSendCommandResultMessageProtobuf data](a2, "data");
}

void sub_100014D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(v5 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100014DE4;
  block[3] = &unk_100399880;
  void block[4] = v5;
  id v10 = v6;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = v4;
  uint64_t v8 = v4;
  dispatch_sync(v7, block);
  MRAddPropertyListToXPCMessage(v3, v8, "MRXPC_COMMAND_KEY");
}

void sub_100014DE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v9);
        if (!objc_msgSend(*(id *)(a1 + 48), "isResolved", (void)v17)
          || (id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 playerPath]),
              int v12 = MRNowPlayingPlayerPathEqualToPlayerPath(v11, *(void *)(a1 + 48)),
              v11,
              v12))
        {
          id v13 = *(void **)(a1 + 56);
          id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v10 commandType]));
          [v13 addObject:v14];
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v7);
  }

  uint64_t v15 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  LODWORD(v15) = [v15 containsObject:v16];

  if ((_DWORD)v15) {
    [*(id *)(a1 + 56) addObject:&off_1003BB210];
  }
}

LABEL_9:
}

  uint64_t v21 = MRLogCategoryDiscovery(v9, v10);
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v11 distantEndpoint]);
    uint64_t v25 = 138412290;
    __int16 v26 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "NativeGroup: %@", (uint8_t *)&v25, 0xCu);
  }

  return v12;
}

  if (!-[MRDGroupSession isHosted](self->_session, "isHosted")
    || -[MRDGroupSession state](self->_session, "state") != (id)3)
  {
    __int128 v20 = @"No active session";
    goto LABEL_14;
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSession participants](self->_session, "participants"));
  __int128 v19 = [v18 count];

  if ((unint64_t)v19 <= 1)
  {
    __int128 v20 = @"No participants in session";
LABEL_14:
    -[MRDGroupSessionManager invalidatePlaybackTimeoutTimerWithReason:]( self,  "invalidatePlaybackTimeoutTimerWithReason:",  v20);
    goto LABEL_15;
  }

  if ([v9 isPlaying] && self->_playbackTimeoutTimer) {
    -[MRDGroupSessionManager invalidatePlaybackTimeoutTimerWithReason:]( self,  "invalidatePlaybackTimeoutTimerWithReason:",  @"Session changed to playing");
  }
  if (([v9 isPlaying] & 1) == 0 && !self->_playbackTimeoutTimer)
  {
    uint64_t v22 = _MRLogForCategory(12LL, v21);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Starting timeout timer because: Session changed to not playing",  (uint8_t *)buf,  2u);
    }

    objc_initWeak(buf, self);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v24 groupSessionEndAfterPauseInterval];
    __int16 v26 = v25;

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionManager queue](self, "queue"));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1000790D4;
    v30[3] = &unk_10039D0A0;
    objc_copyWeak(v31, buf);
    v31[1] = v26;
    uint64_t v28 = (MSVTimer *)objc_claimAutoreleasedReturnValue( +[MSVTimer timerWithInterval:repeats:queue:block:]( &OBJC_CLASS___MSVTimer,  "timerWithInterval:repeats:queue:block:",  0LL,  v27,  v30,  *(double *)&v26 + 2.0));
    playbackTimeoutTimer = self->_playbackTimeoutTimer;
    self->_playbackTimeoutTimer = v28;

    objc_destroyWeak(v31);
    objc_destroyWeak(buf);
  }
}
  }

  uint64_t v15 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", self->_contentItemsArtwork);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet setByAddingObjectsFromArray:](v15, "setByAddingObjectsFromArray:", v4));
  __int128 v17 = (NSArray *)objc_claimAutoreleasedReturnValue([v16 allObjects]);
  __int128 v18 = self->_contentItemsArtwork;
  self->_contentItemsArtwork = v17;
}
  }

  uint64_t v15 = self->_supportedCommands;
  self->_supportedCommands = v4;
}
  }

  uint64_t v15 = self->_playerProperties;
  self->_playerProperties = v4;
}
  }

  uint64_t v16 = self->_playbackState;
  self->_playbackState = v4;
}
  }

  self->_playbackQueueCapabilities = a3;
}

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

LABEL_10:
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[MRUserSettings currentSettings]( &OBJC_CLASS___MRUserSettings,  "currentSettings",  *(_OWORD *)v32,  *(void *)&v32[16],  v33));
  __int128 v20 = [v19 verboseMRDMediaRemoteClientLogging];

  if (v20)
  {
    uint64_t v22 = _MRLogForCategory(8LL, v21);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = (void *)MRMediaRemoteCopyReadableDictionaryDescription(v6);
      *(_DWORD *)v32 = 138412290;
      *(void *)&v32[4] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[MRDMediaRemoteClient] Restoring connection with notification userInfo %@",  v32,  0xCu);
    }
  }

  if (v6) {
    uint64_t v25 = (NSMutableDictionary *)[v6 mutableCopy];
  }
  else {
    uint64_t v25 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  1LL);
  }
  __int16 v26 = v25;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 nowPlayingServer]);
  double v29 = (void *)objc_claimAutoreleasedReturnValue([v28 augmentedUserInfoForPlayerPath:v8]);
  -[NSMutableDictionary addEntriesFromDictionary:](v26, "addEntriesFromDictionary:", v29);

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v26,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  _MRMediaRemoteIsRestoringClientStateUserInfoKey);
  double v30 = *(void **)(a1 + 32);
  uint64_t v31 = [[MRNotification alloc] initWithNotification:v5 userInfo:v26];
  [v30 _postNotification:v31];
}
}

      sub_1001A80F8((uint64_t)v22, v76, type metadata accessor for HostedRoutingItem);
      uint64_t v28 = v73;
      swift_beginAccess(v73, v82, 33LL, 0LL);
      double v29 = *v28;
      double v30 = swift_isUniquelyReferenced_nonNull_native(*v28);
      *uint64_t v28 = v29;
      if ((v30 & 1) == 0)
      {
        double v29 = sub_10019F720( 0,  *(void *)(v29 + 16) + 1LL,  1,  v29,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        *v73 = v29;
      }

      v32 = *(void *)(v29 + 16);
      uint64_t v31 = *(void *)(v29 + 24);
      if (v32 >= v31 >> 1)
      {
        double v29 = sub_10019F720(v31 > 1, v32 + 1, 1, v29, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
        *v73 = v29;
      }

      *(void *)(v29 + 16) = v32 + 1;
      sub_1001A81D4(v76, v29 + v71 + v32 * v25, type metadata accessor for HostedRoutingItem);
      swift_endAccess(v82);
      id v14 = v74;
LABEL_4:
      sub_1001A813C((uint64_t)v22, type metadata accessor for HostedRoutingItem);
      v24 += v25;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        id v5 = v70;
        goto LABEL_20;
      }
    }

    sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
    sub_1001A80F8((uint64_t)v22, (uint64_t)v17, type metadata accessor for HostedRoutingItem);
LABEL_8:
    sub_1001A813C((uint64_t)v17, type metadata accessor for HostedRoutingItem);
    goto LABEL_9;
  }
    }
  }

  __break(1u);
  return result;
}

void sub_100015224(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_100015268(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 24LL))
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v2;
  }

  if (*(void *)(a1 + 40)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "addObject:");
  }
}

void sub_1000152C8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_100015598;
    v32[3] = &unk_100399350;
    id v33 = v6;
    sub_10013ADE4(v8, v32);
    uint64_t v9 = v33;
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 nowPlayingServer]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 queryExistingPlayerPathForXPCMessage:a1[4] forClient:a1[5]]);

    uint64_t v12 = a1[4];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 playerPath]);
    MRAddPlayerPathToXPCMessage(v12, v13);

    uint64_t v14 = MRCreatePlayerPathFromXPCMessage(a1[4]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 nowPlayingServer]);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 origin]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 originClientForOrigin:v18]);

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 activeNowPlayingClient]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 activePlayerClient]);

    uint64_t v22 = objc_claimAutoreleasedReturnValue([v9 playerClient]);
    if ((void *)v22 == v21)
    {
    }

    else
    {
      __int16 v23 = (void *)v22;
      unsigned int v24 = [v21 isPlaying];

      if (v24)
      {
        uint64_t v34 = kMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
        v35 = @"Pause because migration";
        uint64_t v25 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL);
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v21 playerPath]);
        MRMediaRemoteSendCommandToPlayer(1LL, v25, v26, 0LL, 0LL, 0LL);
      }
    }

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    sub_10013CEB0(v27);

    uint64_t v28 = a1[4];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1000155A8;
    v30[3] = &unk_100399378;
    double v29 = (void *)a1[7];
    v30[4] = a1[6];
    id v31 = v29;
    [v5 relayXPCMessage:v28 andReply:1 resultCallback:v30];
  }
}

uint64_t sub_100015598(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_1000155A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(dispatch_queue_s **)(v1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10001561C;
  v4[3] = &unk_100398E60;
  void v4[4] = v1;
  id v5 = v2;
  dispatch_async(v3, v4);
}

id sub_10001561C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

void sub_100015628(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  4LL,  @"No bundleID provided");
  MRAddClientErrorToXPCMessage(v2);
}

void sub_100015CDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_100015D28(uint64_t a1)
{
  id WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && notify_is_valid_token(WeakRetained[14])) {
    notify_cancel(WeakRetained[14]);
  }
  sub_10013ADE4(*(void **)(a1 + 32), &stru_100399B00);
}

void sub_100015D8C(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  id v3 = [[MRAudioFadeResponseMessage alloc] initWithFadeDuration:1000 error:0];
  MRAddProtobufToXPCMessage(v2, v3);
}

void sub_100015DE8(id *a1, int a2)
{
  if ([a1[4] disarm])
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    if (WeakRetained)
    {
      uint64_t state64 = 0LL;
      uint32_t state = notify_get_state(a2, &state64);
      if (state)
      {
        int v7 = state;
        uint64_t v8 = _MRLogForCategory(0LL, v6);
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1002B4D8C(v7, v9);
        }
      }

      dispatch_time_t v10 = dispatch_time(0LL, 1000000 * state64);
      id v11 = (dispatch_queue_s *)WeakRetained[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100015F04;
      block[3] = &unk_100399B70;
      id v13 = a1[5];
      uint64_t v14 = state64;
      dispatch_after(v10, v11, block);
    }

    notify_cancel(a2);
  }

uint64_t sub_100015F04(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100015F5C;
  v3[3] = &unk_100399B48;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return sub_10013ADE4(v1, v3);
}

void sub_100015F5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRAudioFadeResponseMessage alloc] initWithFadeDuration:*(void *)(a1 + 32) error:0];
  MRAddProtobufToXPCMessage(v3, v4);
}

void sub_100015FC4(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  id v3 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:0];
  MRAddProtobufToXPCMessage(v2, v3);
}

NSData *__cdecl sub_100016390(id a1, NSData *a2)
{
  return a2;
}

uint64_t sub_1000163A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    uint64_t v4 = [v3 isEqualToData:*(void *)(a1 + 40)] ^ 1;
  }

  return v4;
}

void sub_1000163F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);
  uint64_t v5 = MRCreateDataFromArray(v4, &stru_100399C40);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  MRAddDataToXPCMessage(v3, v6, "MRXPC_RESTRICT_COMMANDS_ARRAY_DATA_KEY");
}

NSData *__cdecl sub_100016464(id a1, NSData *a2)
{
  return a2;
}

void sub_1000165D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000165F0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onQueue_createAndActivateConnection:forClient:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001662C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v2)
  {
    id v3 = a2;
    MRAddErrorToXPCMessage(v3, [v2 code]);
  }

void sub_100016750(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v2]);
  [v3 invalidate:*(void *)(a1 + 48)];
}

void sub_1000169F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100016A28(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100016A98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v2)
  {
    id v3 = a2;
    MRAddErrorToXPCMessage(v3, [v2 code]);
  }

void sub_100016E90(_Unwind_Exception *a1)
{
}

void sub_100016EB0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ([v5 type] == (id)136) {
      uint64_t v7 = 0x70000000000000DLL;
    }
    else {
      uint64_t v7 = 0x70000000000000CLL;
    }
    uint64_t v9 = MRCreateXPCMessage(v7);
    uint64_t v8 = (NSError *)objc_claimAutoreleasedReturnValue(v9);
    MRAddProtobufToXPCMessage(v8, v5);
    [WeakRetained relayXPCMessage:v8 andReply:0];
  }

  else
  {
    uint64_t v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 179LL);
    [v10 invalidate:v8];
  }
}

void sub_100016F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100017048;
  block[3] = &unk_100399D08;
  void block[4] = v4;
  id v9 = v5;
  id v10 = v3;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_100017048(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    [v4 setType:0];
    if (*(void *)(a1 + 48))
    {
      objc_msgSend(v4, "invalidate:");
    }

    else
    {
      [v4 setLocalInvalidationXPCClient:*(void *)(a1 + 56)];
      [v4 activate];
    }
  }

  else
  {
    uint64_t v6 = _MRLogForCategory(0LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 64);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlServer] createAndActivateConnection - connection: %@ lost before activation",  (uint8_t *)&v9,  0xCu);
    }
  }
}

void sub_100017428(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationConnections]);
  [v2 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

id *sub_1000174C4(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] _clearAllQueuedCommandsForReason:@"phone call began"];
  }
  return result;
}

void sub_1000176A8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    int v8 = *(_DWORD *)(a1 + 64);
    unsigned __int8 v9 = [*(id *)(a1 + 32) appOptions];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) routeUID]);
    if ([v7 length]) {
      BOOL v10 = (v8 | 2) == 2;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) routingServer]);
      [v11 pickCachedRouteWithUID:v7];
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:*(void *)(a1 + 32)]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _destinationClientForRemoteControlCommand:*(void *)(a1 + 32)]);
    if (v13 | v12)
    {
      __int128 v17 = (void *)v13;
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nowPlayingServer]);
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v14 localActiveClientBundleIdentifier]);
      if (!v12)
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 localOriginClient]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 nowPlayingDataSource]);

        uint64_t v12 = objc_claimAutoreleasedReturnValue([v16 nowPlayingApplicationDisplayID]);
        if (!v12) {
          uint64_t v12 = MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
        }
      }

      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientForBundleIdentifier:v12]);
    }

    uint64_t v18 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationAppDisplayID]);
    if (v18)
    {
      __int128 v19 = (void *)v18;
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationAppDisplayID]);
      unsigned __int8 v21 = [(id)v12 isEqualToString:v20];

      if ((v21 & 1) == 0)
      {
        uint64_t v22 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]( objc_alloc(&OBJC_CLASS___MRClient),  "initWithProcessIdentifier:bundleIdentifier:",  sub_10013CFC0((void *)v12),  v12);
        __int16 v23 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
        unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
        uint64_t v25 = -[MRPlayerPath initWithOrigin:client:player:](v23, "initWithOrigin:client:player:", v24, v22, 0LL);

        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 nowPlayingServer]);

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 resolveExistingPlayerPath:v25]);
        if (v28) {
          [*(id *)(a1 + 32) setPlayerPath:v28];
        }
      }
    }

    unsigned __int8 v29 = [*(id *)(a1 + 32) shouldImplicitlyLaunchApplication];
    if (v17)
    {
      [*(id *)(a1 + 48) _sendRemoteControlCommand:*(void *)(a1 + 32) toDestinationClient:v17 withCompletion:*(void *)(a1 + 56)];
    }

    else
    {
      char v30 = v29 ^ 1;
      if ((v9 & 1) != 0) {
        char v30 = 0;
      }
      if ((v30 & 1) != 0)
      {
        id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unresolvedPlayerPath]);
        v32 = (void *)objc_claimAutoreleasedReturnValue([v31 client]);

        uint64_t v34 = _MRLogForCategory(0LL, v33);
        v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v36)
          {
            uint64_t v37 = *(void *)(a1 + 32);
            int v42 = 138412290;
            uint64_t v43 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.",  (uint8_t *)&v42,  0xCu);
          }

          uint64_t v38 = *(void *)(a1 + 56);
          if (!v38) {
            goto LABEL_39;
          }
          uint64_t v39 = 1LL;
        }

        else
        {
          if (v36)
          {
            uint64_t v40 = *(void *)(a1 + 32);
            int v42 = 138412290;
            uint64_t v43 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "No now playing client can be found for command %@, and the option to launch the app was not included. Dropping command.",  (uint8_t *)&v42,  0xCu);
          }

          uint64_t v38 = *(void *)(a1 + 56);
          if (!v38) {
            goto LABEL_39;
          }
          uint64_t v39 = 18LL;
        }

        id v41 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  v39));
        (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v41);
      }

      else
      {
        [*(id *)(a1 + 48) _enqueueCommand:*(void *)(a1 + 32) forApplication:v12 withCompletion:*(void *)(a1 + 56)];
      }
    }

LABEL_39:
    goto LABEL_40;
  }

  uint64_t v3 = _MRLogForCategory(2LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v42 = 138543362;
    uint64_t v43 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Command ignored because of device state: %{public}@",  (uint8_t *)&v42,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  3LL,  @"PhoneCall Active"));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
LABEL_40:
  }

  __break(1u);
  return result;
}

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_23;
  }

  v140 = v26;
  v35 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v33);
  uint64_t v37 = *v35;
  BOOL v36 = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = (uint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests], &v163, 0LL, 0LL);
  uint64_t v39 = *v38;
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_100158DD4(v37, v36, v39);
  swift_bridgeObjectRelease();
  id v41 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], v162, 0LL, 0LL);
  int v42 = *(void **)v41;
  if (!v42[2])
  {
    __break(1u);
    goto LABEL_41;
  }

  LODWORD(v139) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = sub_10015CAD4(v37, v36);
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_43;
  }

  id v45 = (uint64_t *)(v42[7] + 16 * v43);
  __int128 v46 = *v45;
  id v47 = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int128 v48 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_identities];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_identities], v161, 0LL, 0LL);
  double v49 = *(void *)v48;
  if (!*(void *)(v49 + 16))
  {
LABEL_43:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_44;
  }

  v138 = v27;
  swift_bridgeObjectRetain();
  v50 = sub_10015CAD4(v46, v47);
  if ((v51 & 1) == 0)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }

  id v52 = *(id *)(*(void *)(v49 + 56) + 8 * v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v53 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
  v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v55 = [v53 initWithIdentifier:v54 identity:v52 connected:1 guest:v139 & 1];

  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants], v160, 0LL, 0LL);
  swift_bridgeObjectRetain();
  v56 = swift_bridgeObjectRetain();
  __int128 v57 = sub_1001E9B04(v56, (uint64_t)v140, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v57)
  {
    v139 = v55;
    __int128 v58 = [v57 identifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v58);

    __int128 v59 = (void **)v57;
    __int128 v60 = [v57 identity];
    v61 = [v59 guest];
    v140 = v59;
    char v62 = [v59 hidden];
    __int16 v63 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
    id v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    int v42 = [v63 initWithIdentifier:v64 identity:v60 connected:0 guest:v61 hidden:v62];

    if (qword_1003FF010 == -1)
    {
LABEL_11:
      uint64_t v65 = sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
      int v66 = v149;
      v67 = v148;
      ((void (*)(char *, uint64_t, uint64_t))v149[2])(v148, v65, v15);
      v68 = v150;
      v69 = v147;
      (*(void (**)(char *, uint64_t, void **))(v150 + 16))(v147, a4, v151);
      swift_bridgeObjectRetain_n(v25, 2LL);
      v70 = v5;
      v71 = v42;
      v72 = v70;
      v73 = v71;
      v74 = (os_log_s *)Logger.logObject.getter(v73);
      v75 = static os_log_type_t.default.getter();
      v137 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        v76 = swift_slowAlloc(52LL, -1LL);
        v77 = v73;
        v78 = (char **)swift_slowAlloc(16LL, -1LL);
        v134 = v78;
        v136 = (void **)swift_slowAlloc(96LL, -1LL);
        aBlock = v136;
        *(_DWORD *)v76 = 138544386;
        v135 = v74;
        v158 = v72;
        v79 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v76 + 4, v76 + 12);
        *v78 = v72;
        v73 = v77;

        *(_WORD *)(v76 + 12) = 2080;
        v158 = (void *)sub_10015ADC4(0xD000000000000028LL, 0x800000010033C0E0LL, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v76 + 14, v76 + 22);
        *(_WORD *)(v76 + 22) = 2080;
        if ((v138 & 1) != 0) {
          v80 = 0x6465766F72707061LL;
        }
        else {
          v80 = 0x64657463656A6572LL;
        }
        v158 = (void *)sub_10015ADC4(v80, 0xE800000000000000LL, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v76 + 24, v76 + 32);
        swift_bridgeObjectRelease_n(v25, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 32) = 2112;
        v158 = v77;
        v81 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v76 + 34, v76 + 42);
        v82 = v134;
        v134[1] = (char *)v73;

        *(_WORD *)(v76 + 42) = 2082;
        v83 = v147;
        v85 = Participant.handle.getter(v84);
        v158 = (void *)sub_10015ADC4(v85, v86, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v76 + 44, v76 + 52);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void **))(v150 + 8))(v83, v151);
        v87 = v135;
        _os_log_impl( (void *)&_mh_execute_header,  v135,  (os_log_type_t)v137,  "[%{public}@] %s %s %@ from: %{public}s",  (uint8_t *)v76,  0x34u);
        v88 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v82, 2LL, v88);
        swift_slowDealloc(v82, -1LL, -1LL);
        v89 = v136;
        swift_arrayDestroy(v136, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v89, -1LL, -1LL);
        swift_slowDealloc(v76, -1LL, -1LL);

        ((void (*)(char *, uint64_t))v149[1])(v148, v15);
      }

      else
      {

        swift_bridgeObjectRelease_n(v25, 2LL);
        (*(void (**)(char *, void **))(v68 + 8))(v69, v151);

        ((void (*)(char *, uint64_t))v66[1])(v67, v15);
      }

      swift_bridgeObjectRelease();
      v118 = v139;
      if ((v138 & 1) != 0)
      {
        v121 = (void *)swift_allocObject(&unk_1003A5CB8, 40LL, 7LL);
        v121[2] = v72;
        v121[3] = v73;
        v121[4] = v118;
        v156 = sub_1001EE668;
        v157 = v121;
        aBlock = _NSConcreteStackBlock;
        v153 = 1107296256LL;
        v120 = &unk_1003A5CD0;
      }

      else
      {
        v119 = (void *)swift_allocObject(&unk_1003A5C68, 40LL, 7LL);
        v119[2] = v72;
        v119[3] = v73;
        v119[4] = v118;
        v156 = sub_1001EE624;
        v157 = v119;
        aBlock = _NSConcreteStackBlock;
        v153 = 1107296256LL;
        v120 = &unk_1003A5C80;
      }

      v154 = sub_100157EA8;
      v155 = v120;
      v122 = _Block_copy(&aBlock);
      v123 = v72;
      v124 = v73;
      v125 = v118;
      v126 = v141;
      static DispatchQoS.unspecified.getter(v125);
      v158 = _swiftEmptyArrayStorage;
      v127 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v128 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      v129 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      v130 = v143;
      v131 = v128;
      v132 = v146;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v158, v131, v129, v146, v127);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v126, v130, v122);
      _Block_release(v122);

      swift_unknownObjectRelease(v140);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v130, v132);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v126, v145);
      swift_release(v157);
      return;
    }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  id v51 = v0[26];
  swift_release(v51);
  id v52 = swift_bridgeObjectRetain();
  id v53 = sub_1001A6418(v52);
  swift_bridgeObjectRelease();
  v54 = *(void *)(v51 + 16);
  if (v54)
  {
    v55 = v0[26];
    sub_10015DCE8(0, v54, 0);
    v144 = v55;
    id v7 = (void *)sub_1001A5B74(v55);
    v56 = (int64_t)v7;
    __int128 v58 = v57;
    __int128 v60 = v59 & 1;
    while ((v56 & 0x8000000000000000LL) == 0)
    {
      uint64_t v16 = 1LL << *(_BYTE *)(v138 + 32);
      uint64_t v16 = *(void *)(v134 + (((unint64_t)v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56;
      if ((v16 & 1) == 0) {
        goto LABEL_76;
      }
      uint64_t v16 = *(unsigned int *)(v144 + 36);
      if ((_DWORD)v16 != v58) {
        goto LABEL_77;
      }
      v61 = v0[16];
      char v62 = v0[17];
      __int16 v63 = v0[13];
      (*(void (**)(uint64_t, int64_t, uint64_t))(v137 + 16))( v62,  *(void *)(v138 + 48) + *(void *)(v137 + 72) * v56,  v63);
      id v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 32))(v61, v62, v63);
      uint64_t v65 = IRMBBundle.bundleIdentifier.getter(v64);
      v147 = v66;
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v61, v63);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_10015DCE8(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      v68 = _swiftEmptyArrayStorage[2];
      v67 = _swiftEmptyArrayStorage[3];
      if (v68 >= v67 >> 1) {
        sub_10015DCE8(v67 > 1, v68 + 1, 1);
      }
      v69 = *v132;
      _swiftEmptyArrayStorage[2] = v68 + 1;
      v70 = &_swiftEmptyArrayStorage[2 * v68];
      v70[4] = v65;
      v70[5] = v147;
      id v7 = (void *)sub_10015E644(v56, v58, v60 & 1, v69);
      v56 = (int64_t)v7;
      __int128 v58 = v71;
      __int128 v60 = v72 & 1;
      if (!--v54)
      {
        sub_100160324((uint64_t)v7, v71, v72 & 1);
        goto LABEL_51;
      }
    }

    goto LABEL_75;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_100017D0C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 sendError];
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 handlerReturnStatuses]);

  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
}

void sub_100017F18(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  20LL));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    uint64_t v2 = v4;
  }
}

void sub_100017F6C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
    }
  }
}

void sub_100017FBC(id *a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    uint64_t v3 = _MRLogForCategory(2LL, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] commandID]);
      *(_DWORD *)__int128 buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Command <%{public}@> ignored because of device state",  buf,  0xCu);
    }

    uint64_t v6 = (void (**)(id, id))a1[7];
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  3LL,  @"PhoneCall Active"));
    v6[2](v6, v7);
    goto LABEL_36;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] commandClientsRestriction]);

  if (!v8)
  {
LABEL_11:
    id v17 = a1[4];
    id v16 = a1[5];
    uint64_t v18 = a1 + 4;
    id v19 = a1[6];
    id v92 = 0LL;
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v16 _resolveCommandBeforeSend:v17 toClient:v19 error:&v92]);
    id v7 = v92;
    if (v7)
    {
      uint64_t v22 = _MRLogForCategory(0LL, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_1002B4E78(a1 + 4);
      }

      unsigned int v24 = (void (**)(id, void *))a1[7];
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  3LL,  @"Processing error"));
      v24[2](v24, v25);

LABEL_35:
      goto LABEL_36;
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000LL;
    v98 = sub_100012748;
    v99 = sub_100012758;
    id v100 = 0LL;
    uint64_t v88 = 0LL;
    v89 = &v88;
    uint64_t v90 = 0x2020000000LL;
    unsigned __int8 v91 = [*v18 nowPlayingAppStackEligible];
    if (!*((_BYTE *)v89 + 24))
    {
LABEL_30:
      uint64_t v64 = _MRLogForCategory(2LL, v32);
      uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        int v66 = (void *)objc_claimAutoreleasedReturnValue([a1[6] bundleIdentifier]);
        v67 = (__CFString *)objc_claimAutoreleasedReturnValue([a1[6] displayName]);
        *(_DWORD *)v93 = 138543874;
        *(void *)&v93[4] = v20;
        *(_WORD *)&v93[12] = 2114;
        *(void *)&v93[14] = v66;
        *(_WORD *)&v93[22] = 2114;
        v94 = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Sending command %{public}@ to %{public}@ (%{public}@).",  v93,  0x20u);
      }

      v73[0] = _NSConcreteStackBlock;
      v73[1] = 3221225472LL;
      v73[2] = sub_100018E00;
      v73[3] = &unk_100399E70;
      id v68 = a1[6];
      v73[4] = a1[5];
      id v74 = v20;
      id v75 = a1[6];
      v77 = buf;
      id v76 = a1[7];
      [v68 sendRemoteControlCommand:v74 withCompletionBlock:v73];
      v69 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _remoteControlContextForCommand:a1[4]]);
      if (v69)
      {
        v70 = (void *)objc_claimAutoreleasedReturnValue([a1[6] bundleIdentifier]);
        v71 = -[MRDRoutedRemoteControlCommand initWithCommand:routedApp:]( objc_alloc(&OBJC_CLASS___MRDRoutedRemoteControlCommand),  "initWithCommand:routedApp:",  *v18,  v70);
        [v69 addRoutedCommand:v71];
      }

      _Block_object_dispose(&v88, 8);
      _Block_object_dispose(buf, 8);

      goto LABEL_35;
    }

    id v34 = a1[4];
    id v33 = a1[5];
    v35 = (dispatch_queue_s *)*((void *)v33 + 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100018914;
    block[3] = &unk_100399DF8;
    void block[4] = v33;
    id v86 = v34;
    v87 = &v88;
    dispatch_sync(v35, block);
    if (*((_BYTE *)v89 + 24))
    {
      BOOL v36 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 nowPlayingServer]);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 localActivePlayerClient]);
      unsigned int v39 = [v38 isPlaying];

      if (v39)
      {
        uint64_t v41 = _MRLogForCategory(10LL, v40);
        int v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*v18 commandID]);
          *(_DWORD *)v93 = 138543874;
          *(void *)&v93[4] = @"sendRemoteControlCommand";
          *(_WORD *)&v93[12] = 2114;
          *(void *)&v93[14] = v43;
          *(_WORD *)&v93[22] = 2112;
          v94 = @"Device is already playing. Demoting nowPlayingAppStackPopEligible command to ineligible";
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  v93,  0x20u);
        }

        *((_BYTE *)v89 + 24) = 0;
      }

      else if (*((_BYTE *)v89 + 24))
      {
        goto LABEL_26;
      }
    }

    id v44 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 nowPlayingServer]);
    __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 localOriginClient]);
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 nowPlayingDataSource]);

    [v47 popNowPlayingAppStack:0 forReason:6];
LABEL_26:

    if (*((_BYTE *)v89 + 24))
    {
      uint64_t v48 = _MRLogForCategory(10LL, v32);
      double v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v50 = (void *)objc_claimAutoreleasedReturnValue([*v18 commandID]);
        *(_DWORD *)v93 = 138543874;
        *(void *)&v93[4] = @"sendRemoteControlCommand";
        *(_WORD *)&v93[12] = 2114;
        *(void *)&v93[14] = v50;
        *(_WORD *)&v93[22] = 2112;
        v94 = @"Sending nowPlayingAppStackPopEligible command...";
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  v93,  0x20u);
      }

      *(void *)v93 = 0LL;
      *(void *)&v93[8] = v93;
      *(void *)&v93[16] = 0x3032000000LL;
      v94 = (const __CFString *)sub_100012748;
      v95 = sub_100012758;
      id v96 = 0LL;
      id v51 = objc_alloc(&OBJC_CLASS___MSVTimer);
      id v52 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      [v52 nowPlayingAppStackFailedPlayInterval];
      double v54 = v53;
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      v56 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
      v81[0] = _NSConcreteStackBlock;
      v81[1] = 3221225472LL;
      v81[2] = sub_100018A20;
      v81[3] = &unk_100399E20;
      v83 = v93;
      int8x16_t v72 = *(int8x16_t *)v18;
      id v57 = *v18;
      int8x16_t v82 = vextq_s8(v72, v72, 8uLL);
      v84 = buf;
      __int128 v58 = -[MSVTimer initWithInterval:repeats:queue:block:]( v51,  "initWithInterval:repeats:queue:block:",  0LL,  v56,  v81,  v54);

      __int128 v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      uint64_t v60 = kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification;
      v78[0] = _NSConcreteStackBlock;
      v78[1] = 3221225472LL;
      v78[2] = sub_100018CA0;
      v78[3] = &unk_100399E48;
      v78[4] = a1[5];
      v80 = v93;
      v61 = v58;
      v79 = v61;
      uint64_t v62 = objc_claimAutoreleasedReturnValue([v59 addObserverForName:v60 object:0 queue:0 usingBlock:v78]);
      __int16 v63 = *(void **)(*(void *)&v93[8] + 40LL);
      *(void *)(*(void *)&v93[8] + 40LL) = v62;

      _Block_object_dispose(v93, 8);
    }

    goto LABEL_30;
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue([a1[6] auditToken]);
  if (v7)
  {
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] commandClientsRestriction]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allowedAuditTokens]);
    unsigned __int8 v12 = [v11 containsObject:v7];

    if ((v12 & 1) != 0)
    {
      uint64_t v13 = _MRLogForCategory(0LL, v9);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = a1[4];
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[RestrictedCommandClients Mode] Allowed command %@. Allow-listed.",  buf,  0xCu);
      }

      goto LABEL_11;
    }
  }

  uint64_t v26 = _MRLogForCategory(0LL, v9);
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = a1[4];
    id v29 = a1[6];
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[RestrictedCommandClients Mode] Blocked command %@. %@ is not allow-listed",  buf,  0x16u);
  }

  char v30 = (void (**)(id, void *))a1[7];
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  3LL,  @"RestrictedCommandClients Mode - Client not in allow list"));
  v30[2](v30, v31);

LABEL_36:
}

void sub_1000188A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42)
{
}

void sub_100018914(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 80))
  {
    uint64_t v4 = _MRLogForCategory(10LL, a2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) commandID]);
      int v7 = 138543874;
      int v8 = @"sendRemoteControlCommand";
      __int16 v9 = 2114;
      BOOL v10 = v6;
      __int16 v11 = 2112;
      unsigned __int8 v12 = @"A previous nowPlayingAppStackPopEligible command already in progress. Demoting to ineligible";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  (uint8_t *)&v7,  0x20u);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

  else
  {
    *(_BYTE *)(v2 + 80) = 1;
  }

void sub_100018A20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100018C4C;
  v20[3] = &unk_100398EC8;
  uint64_t v4 = *(void *)(a1 + 48);
  v20[4] = v2;
  v20[5] = v4;
  dispatch_async(v3, v20);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nowPlayingServer]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localActivePlayerClient]);
  unsigned int v8 = [v7 isPlaying];

  if (v8)
  {
    uint64_t v10 = _MRLogForCategory(10LL, v9);
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) commandID]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v22 = @"sendRemoteControlCommand";
      __int16 v23 = 2114;
      unsigned int v24 = v12;
      __int16 v25 = 2112;
      uint64_t v26 = @"Something is already playing. Cancelling nowPlayingAppStackPop";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }
  }

  else
  {
    id v13 = *(id *)(a1 + 32);
    objc_sync_enter(v13);
    __int16 v11 = (os_log_s *)*(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    objc_sync_exit(v13);

    if (v11)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s error](v11, "error"));

      if (v14) {
        uint64_t v15 = 4LL;
      }
      else {
        uint64_t v15 = 5LL;
      }
    }

    else
    {
      uint64_t v15 = 3LL;
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 nowPlayingServer]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 localOriginClient]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 nowPlayingDataSource]);

    [v19 popNowPlayingAppStack:1 forReason:v15];
  }
}

void sub_100018C4C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = 0;
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_100018CA0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey]);
  unsigned int v5 = [v4 BOOLValue];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(dispatch_queue_s **)(v6 + 8);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100018DAC;
    v13[3] = &unk_100398EC8;
    uint64_t v8 = *(void *)(a1 + 48);
    void v13[4] = v6;
    v13[5] = v8;
    dispatch_async(v7, v13);
    [*(id *)(a1 + 40) invalidate];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 nowPlayingServer]);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localOriginClient]);
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nowPlayingDataSource]);

    [v12 popNowPlayingAppStack:0 forReason:0];
  }

void sub_100018DAC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = 0;
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_100018E00(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _performCommandProcessingAfterSend:*(void *)(a1 + 40)];
  if ([v3 sendError])
  {
    uint64_t v4 = MRMediaRemoteSendCommandErrorDescription([v3 sendError]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v7 = _MRLogForCategory(0LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002B4F0C(a1);
    }
  }

  id v9 = *(id *)(a1 + 32);
  objc_sync_enter(v9);
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
  __int16 v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v3;
  id v12 = v3;

  objc_sync_exit(v9);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000191AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3
    && [*(id *)(a1 + 32) _clearQueuedCommand:*(void *)(a1 + 40) forUnavailableApplicationWithDisplayID:*(void *)(a1 + 48)])
  {
    id v29 = _NSConcreteStackBlock;
    uint64_t v30 = 3221225472LL;
    id v31 = sub_100019560;
    uint64_t v32 = &unk_100399E98;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 32);
    id v33 = v4;
    uint64_t v34 = v5;
    if (sub_100019560((uint64_t)&v29))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server", v29, v30, v31, v32));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 nowPlayingServer]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localOriginClient]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 nowPlayingDataSource]);

      [v9 popNowPlayingAppStack:1 forReason:1];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 topOfNowPlayingAppStack]);
      if ((v10 || (uint64_t v10 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID()) != 0LL)
        && ([v10 isEqualToString:*(void *)(a1 + 48)] & 1) == 0)
      {
        id v24 = [*(id *)(a1 + 40) mutableCopy];
        [v24 setDestinationAppDisplayID:v10];
        uint64_t v26 = _MRLogForCategory(10LL, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) commandID]);
          *(_DWORD *)__int128 buf = 138543874;
          BOOL v36 = @"sendRemoteControlCommand";
          __int16 v37 = 2114;
          uint64_t v38 = v28;
          __int16 v39 = 2112;
          uint64_t v40 = @"Failed to launch app, forwarding nowPlayingAppStackPopEligible command";
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
        }

        [*(id *)(a1 + 32) _sendLocalCommand:v24 withCompletionHandler:*(void *)(a1 + 56)];
        goto LABEL_25;
      }
    }

    if (!*(void *)(a1 + 56))
    {
LABEL_24:
      id v4 = v33;
LABEL_25:

      goto LABEL_26;
    }

    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:NSUnderlyingErrorKey]);

    if ([v12 code] == (id)4
      && (id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 domain]),
          unsigned int v14 = [v13 isEqualToString:@"FBSOpenApplicationErrorDomain"],
          v13,
          v14))
    {
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = 9LL;
    }

    else
    {
      if (objc_msgSend(v12, "code", v29, v30, v31, v32) == (id)5)
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 domain]);
        unsigned int v18 = [v17 isEqualToString:@"FBSOpenApplicationErrorDomain"];

        if (v18)
        {
          uint64_t v19 = *(void *)(a1 + 56);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v12 localizedFailureReason]);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  16LL,  v20));
          (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v21);

LABEL_23:
          goto LABEL_24;
        }
      }

      if ([v3 code] == (id)126
        && (uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]),
            unsigned int v23 = [v22 isEqualToString:kMRMediaRemoteFrameworkErrorDomain],
            v22,
            v23))
      {
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = 15LL;
      }

      else
      {
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = 4LL;
      }
    }

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  v16,  v29,  v30,  v31,  v32));
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v20);
    goto LABEL_23;
  }

LABEL_26:
}
}
    }

    id v47 = [v45 countByEnumeratingWithState:&v120 objects:v135 count:16];
  }

  while (v47);
LABEL_28:

  -[MRDeviceInfo setGroupLogicalDeviceCount:](v11, "setGroupLogicalDeviceCount:", -[NSMutableSet count](v44, "count"));
  -[MRDeviceInfo setGroupedDevices:](v11, "setGroupedDevices:", v43);
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[MRDDeviceInfoDataSource clusteredDevices](v117, "clusteredDevices"));
  -[MRDeviceInfo setClusteredDevices:](v11, "setClusteredDevices:", v60);

  v61 = (void *)objc_claimAutoreleasedReturnValue(-[MRDDeviceInfoDataSource allClusteredDevices](v117, "allClusteredDevices"));
  -[MRDeviceInfo setAllClusteredDevices:](v11, "setAllClusteredDevices:", v61);

  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  -[MRDeviceInfo setSupportsSystemPairing:]( v11,  "setSupportsSystemPairing:",  [v62 useExternalDeviceSystemPairing]);

  __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 bundleIdentifier]);
  -[MRDeviceInfo setBundleIdentifier:](v11, "setBundleIdentifier:", v64);

  v119 = v63;
  uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v63 infoDictionary]);
  int v66 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKeyedSubscript:kCFBundleVersionKey]);
  -[MRDeviceInfo setBundleVersion:](v11, "setBundleVersion:", v66);

  v67 = (void *)objc_claimAutoreleasedReturnValue(-[MRDDeviceInfoDataSource _readDeviceInfo](v117, "_readDeviceInfo"));
  id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:@"identifier"]);
  -[MRDeviceInfo setIdentifier:](v11, "setIdentifier:", v68);

  v69 = MRMediaRemoteAirPlayReceiverCopyGroupIdentity();
  if (!v69)
  {
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "msv_firstWhere:", &stru_10039E120));
    v69 = objc_claimAutoreleasedReturnValue([v70 groupID]);

    if (!v69) {
      v69 = objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:@"defaultGroupUID"]);
    }
  }

  v113 = (void *)v69;
  v71 = MRMediaRemoteAirPlayReceiverCopyAirPlayGroupIdentity(-[MRDeviceInfo setGroupUID:](v11, "setGroupUID:", v69));
  if (!v71)
  {
    int8x16_t v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "msv_firstWhere:", &stru_10039E140));
    v71 = objc_claimAutoreleasedReturnValue([v72 airPlayGroupID]);

    if (!v71) {
      v71 = objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:@"defaultGroupUID"]);
    }
  }

  v118 = v67;
  v73 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID(-[MRDeviceInfo setAirPlayGroupUID:](v11, "setAirPlayGroupUID:", v71));
  -[MRDeviceInfo setSystemMediaApplication:](v11, "setSystemMediaApplication:", v73);

  id v74 = (void *)MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID();
  -[MRDeviceInfo setSystemPodcastApplication:](v11, "setSystemPodcastApplication:", v74);

  id v75 = (void *)MRMediaRemoteCopyLocalDeviceSystemBooksApplicationDisplayID();
  -[MRDeviceInfo setSystemBooksApplication:](v11, "setSystemBooksApplication:", v75);

  id v76 = MRMediaRemoteCopyLocalDeviceAirPlayReceiverDisplayID();
  v77 = (void *)v76;
  if (v76)
  {
    v134 = v76;
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v134, 1LL));
    -[MRDeviceInfo setAirPlayReceivers:](v11, "setAirPlayReceivers:", v78);
  }

  -[MRDeviceInfo setSupportsSharedQueue:](v11, "setSupportsSharedQueue:", 1LL);
  -[MRDeviceInfo setSharedQueueVersion:](v11, "setSharedQueueVersion:", 3LL);
  -[MRDeviceInfo setSupportsACL:](v11, "setSupportsACL:", 1LL);
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  -[MRDeviceInfo setSupportsMultiplayer:](v11, "setSupportsMultiplayer:", [v79 supportMultiplayerHost]);

  v80 = -[MRDeviceInfo setGroupContainsDiscoverableGroupLeader:]( v11,  "setGroupContainsDiscoverableGroupLeader:",  MRMediaRemoteGetLocalGroupContainsDiscoverableGroupLeader());
  -[MRDeviceInfo setParentGroupContainsDiscoverableGroupLeader:]( v11,  "setParentGroupContainsDiscoverableGroupLeader:",  MRMediaRemoteGetParentGroupContainsDiscoverableGroupLeader(v80));
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  else {
    int8x16_t v82 = 2LL;
  }
  -[MRDeviceInfo setLastSupportedClusterType:](v11, "setLastSupportedClusterType:", v82);

  v83 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  -[MRDeviceInfo setSupportsOutputContextSync:]( v11,  "setSupportsOutputContextSync:",  [v83 supportOutputContextSync]);

  -[MRDeviceInfo setLastSupportedProtocolMessageType:](v11, "setLastSupportedProtocolMessageType:", 137LL);
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  v85 = (void *)objc_claimAutoreleasedReturnValue([v84 groupSessionServer]);

  v111 = (void *)objc_claimAutoreleasedReturnValue([v85 sessionManager]);
  id v86 = (void *)objc_claimAutoreleasedReturnValue([v111 session]);
  v87 = [v86 isHosted];
  if ((_DWORD)v87)
  {
    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v86 joinToken]);
    -[MRDeviceInfo setGroupSessionToken:](v11, "setGroupSessionToken:", v88);
  }

  v112 = v77;
  if (MSVDeviceIsAudioAccessory(v87))
  {
    v89 = (void *)objc_claimAutoreleasedReturnValue([v85 eligibilityMonitor]);
    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v89 eligibilityStatus]);

    -[MRDeviceInfo setIsEligibleForHostingGroupSessionExcludingAcknowledgements:]( v11,  "setIsEligibleForHostingGroupSessionExcludingAcknowledgements:",  [v90 isEligibleForHostingGroupSessionExcludingAcknowledgements]);
  }

  unsigned __int8 v91 = (void *)v71;
  if (-[MRDeviceInfo isAirPlayActive](v11, "isAirPlayActive"))
  {
    id v92 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    v93 = (void *)objc_claimAutoreleasedReturnValue([v92 routingServer]);
    v94 = [v93 isStartingNowPlayingSession];

    if ((v94 & 1) == 0)
    {
      v95 = MRMediaRemoteAirPlayReceiverCopyAirPlayLeaderInfoData();
      id v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
      if (v96)
      {
        v110 = [[_MRAirPlayLeaderInfoProtobuf alloc] initWithData:v96];
        v97 = objc_alloc(&OBJC_CLASS___MRDeviceInfo);
        v98 = (void *)objc_claimAutoreleasedReturnValue([v110 deviceInfo]);
        v99 = -[MRDeviceInfo initWithProtobuf:](v97, "initWithProtobuf:", v98);
        -[MRDeviceInfo setLeaderDeviceInfo:](v11, "setLeaderDeviceInfo:", v99);
      }
    }
  }

  id v100 = (void *)objc_claimAutoreleasedReturnValue(-[MRDeviceInfo name](v11, "name"));

  v102 = _MRLogForCategory(10LL, v101);
  v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
  v104 = os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT);
  if (v100)
  {
    if (v104)
    {
      v105 = (void *)objc_claimAutoreleasedReturnValue(-[MRDeviceInfo name](v11, "name"));
      v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v106 timeIntervalSinceDate:v116];
      *(_DWORD *)__int128 buf = 138544130;
      v127 = @"CurrentDeviceInfo";
      v128 = 2114;
      v129 = v115;
      v130 = 2112;
      v131 = v105;
      v132 = 2048;
      v133 = v107;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  buf,  0x2Au);

      goto LABEL_55;
    }
  }

  else if (v104)
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v105 timeIntervalSinceDate:v116];
    *(_DWORD *)__int128 buf = 138543874;
    v127 = @"CurrentDeviceInfo";
    v128 = 2114;
    v129 = v115;
    v130 = 2048;
    v131 = v108;
    _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  buf,  0x20u);
LABEL_55:
  }

  return v11;
}

  uint64_t v42 = *(void *)(a1 + 56);
  if (v42) {
    (*(void (**)(uint64_t, id, id))(v42 + 16))(v42, v5, v6);
  }
}

        id v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      unsigned int v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      id v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unsigned int v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unsigned int v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    unsigned int v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    id v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unsigned int v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unsigned int v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  __int128 v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    uint64_t v21 = *(void *)(v6 + 40);
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    unsigned int v23 = -1LL << *(_BYTE *)(v6 + 32);
    id v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int128 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unsigned int v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned int v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    uint64_t v21 = *(void *)(v6 + 40);
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    unsigned int v23 = -1LL << *(_BYTE *)(v6 + 32);
    id v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int128 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unsigned int v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned int v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  sub_1001E2A80(v36, v29);
  uint64_t v38 = sub_1001E1270((uint64_t)v31);
  if ((v37 & 1) != (v39 & 1))
  {
LABEL_30:
    uint64_t v43 = sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
    __break(1u);
    return;
  }

  id v33 = v38;
  if ((v37 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_19:
  id v29 = *(void *)(*(void *)(v49 + 56) + 8 * v33);
  if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
LABEL_24:
  }
    id v29 = (uint64_t)sub_1001E1164(0LL, *(void *)(v29 + 16) + 1LL, 1, (void *)v29);
  uint64_t v41 = *(void *)(v29 + 16);
  uint64_t v40 = *(void *)(v29 + 24);
  if (v41 >= v40 >> 1) {
    id v29 = (uint64_t)sub_1001E1164((void *)(v40 > 1), v41 + 1, 1, (void *)v29);
  }
  *(void *)(v29 + 16) = v41 + 1;
  uint64_t v42 = v29 + 16 * v41;
  *(void *)(v42 + 32) = v2;
  *(void *)(v42 + 40) = v4;
  uint64_t v48 = v29;
  sub_1001E3370(&v48, 1, &v49, v33, v31);

  swift_bridgeObjectRelease();
  *(void *)__int128 v20 = v49;
  swift_endAccess(&v50);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      uint64_t v40 = (v22 - 1) & v22;
      uint64_t v41 = v23;
      __int128 v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }

    uint64_t v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    sub_100160800(*(void *)(v1 + 56) + 32 * v20, (uint64_t)v7);
    v44[0] = v27;
    v44[1] = v26;
    sub_100160800((uint64_t)v7, (uint64_t)v43);
    swift_bridgeObjectRetain_n(v26, 2LL);
    sub_1001603DC((uint64_t)v44, v9);
    id v28 = sub_10016083C(0LL, v10, v11);
    if (!swift_dynamicCast(&v42, v43, (char *)&type metadata for Any + 8, v28, 6LL))
    {
      uint64_t v42 = 0LL;
      swift_bridgeObjectRelease();

      sub_10016031C(v1);
      swift_release(v3);
      return;
    }

    id v29 = v42;
    uint64_t v30 = sub_10015CAD4(v27, v26);
    id v31 = v30;
    if ((v32 & 1) != 0)
    {
      __int16 v39 = v29;
      id v12 = v11;
      id v13 = v10;
      unsigned int v14 = v7;
      uint64_t v15 = v1;
      uint64_t v16 = v9;
      id v17 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease();
      void *v17 = v27;
      v17[1] = v26;
      id v9 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      uint64_t v10 = v13;
      __int16 v11 = v12;
      unsigned int v18 = v3[7];
      uint64_t v19 = 8 * v31;

      *(void *)(v18 + v19) = v39;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v30;
    id v33 = (uint64_t *)(v3[6] + 16 * v30);
    *id v33 = v27;
    v33[1] = v26;
    *(void *)(v3[7] + 8 * v30) = v29;
    uint64_t v34 = v3[2];
    v35 = __OFADD__(v34, 1LL);
    BOOL v36 = v34 + 1;
    if (v35) {
      goto LABEL_35;
    }
    v3[2] = v36;
LABEL_8:
    uint64_t v6 = v40;
    uint64_t v8 = v41;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

        __int16 v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      __int128 v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      unsigned int v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unsigned int v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unsigned int v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        unsigned int v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_DWORD *)(*(void *)(v6 + 48) + 4 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    __int16 v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    __int128 v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    unsigned int v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unsigned int v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unsigned int v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      unsigned int v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_DWORD *)(*(void *)(v6 + 48) + 4 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    id v2 = v28;
    goto LABEL_38;
  }

  unsigned int v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unsigned int v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

        uint64_t v10 = (v20 - 1) & v20;
        unsigned int v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = *(void *)(v3 + 48) + 40 * v18;
      uint64_t v32 = *(_OWORD *)v22;
      id v33 = *(_OWORD *)(v22 + 16);
      uint64_t v34 = *(void *)(v22 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
      unsigned int v23 = -1LL << *(_BYTE *)(v6 + 32);
      id v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          id v29 = *(void *)(v12 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = *(void *)(v6 + 48) + 40 * v15;
      *(_OWORD *)uint64_t v16 = v32;
      *(_OWORD *)(v16 + 16) = v33;
      *(void *)(v16 + 32) = v34;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v22 - 1) & v22;
    __int128 v20 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_27:
    sub_100160954(*(void *)(v3 + 48) + 40 * v20, (uint64_t)v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
    id v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v16 = *(void *)(v6 + 48) + 40 * v15;
    id v17 = v32[0];
    unsigned int v18 = v32[1];
    *(void *)(v16 + 32) = v33;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v6 + 16);
  }

  unsigned int v23 = v21 + 3;
  if (v23 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  uint64_t v22 = *(void *)(v8 + 8 * v23);
  if (v22)
  {
    unsigned int v14 = v23;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned int v14 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v22 = *(void *)(v8 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_26;
    }
  }

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    uint64_t v21 = *(void *)(v6 + 40);
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    unsigned int v23 = -1LL << *(_BYTE *)(v6 + 32);
    id v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int128 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unsigned int v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned int v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    id v9 = 0;
  }

  return v9 & 1;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    uint64_t v21 = *(void *)(v6 + 40);
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    unsigned int v23 = -1LL << *(_BYTE *)(v6 + 32);
    id v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int128 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unsigned int v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned int v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v31, *(void *)(v6 + 40));
      (*(void (**)(void *))(*(void *)v21 + 232LL))(v31);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unsigned int v23 = result & ~v22;
      id v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            id v24 = 0LL;
          }
          v25 |= v27;
          id v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    __int128 v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v31, *(void *)(v6 + 40));
    uint64_t v21 = *(void (**)(void *))(*(void *)v20 + 232LL);
    swift_retain(v20);
    v21(v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unsigned int v23 = result & ~v22;
    id v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      unsigned int v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          id v24 = 0LL;
        }
        v25 |= v27;
        id v28 = *(void *)(v11 + 8 * v24);
      }

      while (v28 == -1);
      unsigned int v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v30)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v29;
    goto LABEL_38;
  }

  unsigned int v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    id v13 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_36;
    }
    unsigned int v18 = *(void *)(v8 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

uint64_t sub_100019560(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) nowPlayingAppStackEligible];
  if ((_DWORD)result)
  {
    id v3 = *(void **)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v4 nowPlayingAppStackFailedPlayInterval];
    LOBYTE(v3) = objc_msgSend(v3, "_checkAndMaybeUpdateNowPlayingAppStackPopRateLimitingWithInterval:");

    if ((v3 & 1) != 0)
    {
      return 1LL;
    }

    else
    {
      uint64_t v6 = _MRLogForCategory(10LL, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
        int v13 = 138543874;
        unsigned int v14 = @"sendRemoteControlCommand";
        __int16 v15 = 2114;
        uint64_t v16 = v8;
        __int16 v17 = 2112;
        unsigned int v18 = @"nowPlayingAppStackPopEligible command recently sent. Ignoring due to rate limiting...";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  (uint8_t *)&v13,  0x20u);
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 nowPlayingServer]);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localOriginClient]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nowPlayingDataSource]);

      [v12 popNowPlayingAppStack:0 forReason:7];
      return 0LL;
    }
  }

  return result;
}

void sub_100019958(void *a1)
{
  id v2 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKey:a1[5]]);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1[4] + 16) setObject:v3 forKey:a1[5]];
    id v2 = v3;
  }

  id v4 = v2;
  -[NSMutableArray addObject:](v2, "addObject:", a1[6]);
}

void sub_1000199C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)]);
  if ([v2 containsObject:*(void *)(a1 + 48)])
  {
    uint64_t v4 = _MRLogForCategory(2LL, v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void **)(a1 + 48);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dateCreated]);
      [v7 timeIntervalSinceNow];
      *(_DWORD *)__int128 buf = 138543618;
      unsigned int v14 = v6;
      __int16 v15 = 2048;
      double v16 = -v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)",  buf,  0x16u);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _completionHandler]);
    uint64_t v10 = v9;
    if (v9)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100019B38;
      block[3] = &unk_100399EC0;
      id v12 = v9;
      dispatch_async(&_dispatch_main_q, block);
    }

    [v2 removeObject:*(void *)(a1 + 48)];
  }
}

void sub_100019B38(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  17LL));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100019DD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100019E04(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "objectForKey:"));
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = [v2 copy];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    [*(id *)(*(void *)(a1 + 40) + 16) removeObjectForKey:v7];
  }
}

void sub_100019F68(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKey:a1[5]]);
  if ([v2 containsObject:a1[6]])
  {
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
    [v2 removeObject:a1[6]];
  }
}

id sub_10001A048(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    uint64_t v4 = _MRLogForCategory(0LL, v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16LL);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v34 = v6;
      __int16 v35 = 2112;
      uint64_t v36 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removing queued commands because %{public}@ %@",  buf,  0x16u);
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) allValues]);
    id v18 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v18)
    {
      uint64_t v17 = *(void *)v28;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v28 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = v8;
          id v9 = *(void **)(*((void *)&v27 + 1) + 8 * v8);
          __int128 v23 = 0u;
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v26 = 0u;
          id v10 = v9;
          id v11 = [v10 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v11)
          {
            id v12 = v11;
            uint64_t v13 = *(void *)v24;
            do
            {
              unsigned int v14 = 0LL;
              do
              {
                if (*(void *)v24 != v13) {
                  objc_enumerationMutation(v10);
                }
                if (v15)
                {
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472LL;
                  block[2] = sub_10001A2E8;
                  block[3] = &unk_100399F10;
                  id v21 = *(id *)(a1 + 40);
                  id v22 = v15;
                  dispatch_async(&_dispatch_main_q, block);
                }

                unsigned int v14 = (char *)v14 + 1;
              }

              while (v12 != v14);
              id v12 = [v10 countByEnumeratingWithState:&v23 objects:v31 count:16];
            }

            while (v12);
          }

          uint64_t v8 = v19 + 1;
        }

        while ((id)(v19 + 1) != v18);
        id v18 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
      }

      while (v18);
    }

    return [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  }

  return result;
}

void sub_10001A2E8(uint64_t a1)
{
  id v2 = -[MRCommandResult initWithWithSendError:description:]( objc_alloc(&OBJC_CLASS___MRCommandResult),  "initWithWithSendError:description:",  5LL,  *(void *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001A410(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

LABEL_8:
  return v12;
}

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    if (*(void *)(*(void *)(a1 + 32) + 136LL)
      || (id v12 = MRMediaRemoteCreateError(100LL),
          uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL),
          unsigned int v14 = *(void **)(v13 + 40),
          *(void *)(v13 + 40) = v12,
          v14,
          !*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)))
    {
      if (!*(void *)(*(void *)(a1 + 32) + 128LL))
      {
        id v9 = MRMediaRemoteCreateError(8LL);
        id v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
        id v11 = *(void **)(v10 + 40);
        *(void *)(v10 + 40) = v9;
      }
    }
  }
}
}
}
}

      goto LABEL_11;
    case 3uLL:
      double v16 = 4LL;
      goto LABEL_10;
    case 4uLL:
      double v16 = 8LL;
      goto LABEL_10;
    default:
LABEL_10:
      id v22 = [[IRMediaEvent alloc] initWithEventType:v16 eventSubType:0];
      [v22 setBundleID:v13];
      [v22 setIsOutsideApp:v8];
      [v22 setContextIdentifier:v15];
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[MRDRouteRecommendationController recommender](self, "recommender"));
      [v23 addEvent:v22 forRouteCandidate:v12];

LABEL_11:
      return;
  }

  uint64_t v19 = sub_100254850();
  __int128 v20 = *(void *)(v19 + 16);
  if (!v20)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    __int128 v27 = (unsigned int *)&enum case for InternalRoutingError.sessionNotFound(_:);
LABEL_19:
    __int128 v28 = type metadata accessor for InternalRoutingError(0LL);
    __int128 v29 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    swift_allocError(v28, v29, 0LL, 0LL);
    id v31 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))(v30, *v27, v28);
    return swift_willThrow(v31);
  }

  id v21 = *(unsigned __int8 *)(v14 + 80);
  id v22 = *(void *)(v14 + 72);
  __int128 v23 = (uint64_t *)(((v21 + 32) & ~v21) + v19 + 8);
  while (1)
  {
    __int128 v24 = *(v23 - 1);
    __int128 v25 = *v23;
    __int128 v26 = v24 == a1 && v25 == a2;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a1, a2, 0LL) & 1) != 0) {
      break;
    }
    __int128 v23 = (uint64_t *)((char *)v23 + v22);
    if (!--v20) {
      goto LABEL_16;
    }
  }

  swift_bridgeObjectRelease();
  *id v9 = a1;
  v9[1] = a2;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))( v9,  enum case for RoutingInteraction.Action.setActiveSession(_:),  v35);
  swift_bridgeObjectRetain();
  return RoutingInteraction.init(action:)(v9);
}

  __break(1u);
  return result;
}

    __int128 v27 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v27 >= v66) {
      goto LABEL_32;
    }
    __int128 v28 = *(void *)(v67 + 8 * v27);
    ++v11;
    if (!v28)
    {
      id v11 = v27 + 1;
      if (v27 + 1 >= v66) {
        goto LABEL_32;
      }
      __int128 v28 = *(void *)(v67 + 8 * v11);
      if (!v28) {
        break;
      }
    }

    uint64_t v5 = (unsigned __int8 *)sub_1002493D4();
    return *v5;
  }

  id v11 = (id)*sub_1002A2F28();

  return v11;
}

  __break(1u);
  return result;
}

void sub_10001A850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001A868(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    uint64_t v5 = objc_alloc(&OBJC_CLASS___MRDRemoteControlContext);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) senderAppDisplayID]);
    uint64_t v8 = -[MRDRemoteControlContext initWithContextID:originatingAppDisplayID:]( v5,  "initWithContextID:originatingAppDisplayID:",  v6,  v7);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    [*(id *)(*(void *)(a1 + 32) + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKey:*(void *)(a1 + 40)];
  }

LABEL_12:
  }

  else
  {
    if (![v4 isContextSensitive])
    {
      uint64_t v9 = 0LL;
      goto LABEL_18;
    }

    __int16 v15 = _MRLogForCategory(0LL, v14);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEBUG)) {
      sub_1002B4F9C();
    }
    uint64_t v9 = 0LL;
  }

LABEL_18:
  return v9;
}

    __int128 v26 = v4;
    goto LABEL_34;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 playerPath]);
  id v10 = [v9 isSystemMediaApplication];

  id v12 = _MRLogForCategory(0LL, v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  unsigned int v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if ((v10 & 1) == 0)
  {
    if (v14)
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v64 = v4;
      __int128 v25 = "Not populating PPFSQ command options - playerPath is not systemMediaApplication - command: %@";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  if (v14)
  {
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v64 = v8;
    uint64_t v65 = 2112;
    int v66 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Ready to populate PPFSQ, reason: %@, command: %@",  buf,  0x16u);
  }

  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 nowPlayingServer]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 localOriginClient]);

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 nowPlayingClients]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "msv_firstWhere:", &stru_100399FC8));

  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 activePlayerClient]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 supportedRemoteControlCommands]);
  id v22 = v21;
  if (v21)
  {
    __int128 v23 = v21;
  }

  else
  {
    __int128 v27 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
    __int128 v23 = (id)objc_claimAutoreleasedReturnValue([v17 defaultSupportedCommandsForClient:v27]);
  }

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "msv_firstWhere:", &stru_10039A008));
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 options]);
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:kMRMediaRemoteCommandInfoProactiveCommandOptions]);

  if (v30)
  {
    double v53 = v28;
    double v54 = v23;
    v55 = v20;
    v56 = v19;
    id v57 = v17;
    __int128 v58 = v8;
    uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v59 = 0u;
    uint64_t v60 = 0u;
    v61 = 0u;
    uint64_t v62 = 0u;
    id v52 = v30;
    id v33 = v30;
    uint64_t v34 = [v33 countByEnumeratingWithState:&v59 objects:v69 count:16];
    if (v34)
    {
      __int16 v35 = v34;
      uint64_t v36 = *(void *)v60;
      do
      {
        for (i = 0LL; i != v35; i = (char *)i + 1)
        {
          if (*(void *)v60 != v36) {
            objc_enumerationMutation(v33);
          }
          uint64_t v38 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)i);
          __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v4 options]);
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 objectForKeyedSubscript:v38]);

          if (v40)
          {
            uint64_t v42 = _MRLogForCategory(0LL, v41);
            uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v64 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Not setting key '%@' for PPFSQ - key already populated",  buf,  0xCu);
            }
          }

          else
          {
            id v44 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v38]);
            [v4 setOptionValue:v44 forKey:v38];

            -[NSMutableArray addObject:](v32, "addObject:", v38);
          }
        }

        __int16 v35 = [v33 countByEnumeratingWithState:&v59 objects:v69 count:16];
      }

      while (v35);
    }

    __int128 v46 = _MRLogForCategory(0LL, v45);
    id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      uint64_t v48 = -[NSMutableArray count](v32, "count");
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v64 = v4;
      uint64_t v65 = 2048;
      int v66 = v48;
      v67 = 2112;
      id v68 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "Finished populating PPFSQ command options for command %@ - populated %lu keys: %@",  buf,  0x20u);
    }

    __int128 v26 = [v4 copy];
    uint64_t v17 = v57;
    uint64_t v8 = v58;
    __int128 v20 = v55;
    uint64_t v19 = v56;
    __int128 v28 = v53;
    __int128 v23 = v54;
    __int128 v30 = v52;
  }

  else
  {
    double v49 = _MRLogForCategory(0LL, v31);
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v64 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "Not populating PPFSQ command options - no data provided - command: %@",  buf,  0xCu);
    }

    __int128 v26 = v4;
  }

LABEL_34:
  return v26;
}

  if (ppStmt)
  {
    if (sqlite3_finalize(ppStmt))
    {
      id v18 = _MRLogForCategory(0LL, v17);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v22 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Failed to finalize database statement",  v22,  2u);
      }

      uint64_t v5 = 1;
    }

    else
    {
      uint64_t v5 = 0;
    }
  }

  return v5 == 0;
}

LABEL_13:
    uint64_t v19 = 0LL;
    goto LABEL_14;
  }

  if ([v5 isEqualToSet:*(void *)(a1 + 32)])
  {
    uint64_t v8 = _MRLogForCategory(13LL, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(void *)(a1 + 32);
      id v33 = 138412802;
      uint64_t v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      __int16 v37 = 2112;
      uint64_t v38 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Ignoring %@ - %@ same as routed (%@)",  (uint8_t *)&v33,  0x20u);
    }
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_10039C260));

  if (v11)
  {
    uint64_t v13 = _MRLogForCategory(13LL, v12);
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = 138412546;
      uint64_t v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      __int16 v15 = "[MRDRRC].RV Ignoring %@ - %@ has Speaker, ignoring";
      double v16 = v14;
      uint64_t v17 = 22;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v33, v17);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  id v21 = [v5 intersectsSet:*(void *)(a1 + 32)];
  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  __int128 v23 = [v22 enableDeltaRouteRecommendations];

  if (!v23)
  {
    if (!v21)
    {
      uint64_t v19 = 1LL;
      goto LABEL_14;
    }

    __int128 v30 = _MRLogForCategory(13LL, v24);
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      id v33 = 138412802;
      uint64_t v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      __int16 v37 = 2112;
      uint64_t v38 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Ignoring %@ - %@ intersects with routed (%@)",  (uint8_t *)&v33,  0x20u);
    }

    goto LABEL_13;
  }

  __int128 v26 = [v5 isEqualToSet:*(void *)(a1 + 32)];
  if (v26)
  {
    __int128 v27 = _MRLogForCategory(13LL, v25);
    __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v29 = *(void *)(a1 + 32);
      id v33 = 138412802;
      uint64_t v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v5;
      __int16 v37 = 2112;
      uint64_t v38 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Ignoring %@ - %@ same as routed (%@)",  (uint8_t *)&v33,  0x20u);
    }
  }

  uint64_t v19 = v26 ^ 1;
LABEL_14:

  return v19;
}
}
}
}

      [v26 addObject:@"ignoreExisitingHosts"];
      goto LABEL_13;
    }
      }

      uint64_t v7 = [v5 countByEnumeratingWithState:&v40 objects:v46 count:16];
    }

    while (v7);
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue( -[MRDRemoteControlDiscoverySession unclusteredOutputDevices]( self->_discoverySession,  "unclusteredOutputDevices"));
  __int128 v23 = [v22 copy];

  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "mr_map:", &stru_10039F558));
  __int128 v25 = (NSDictionary *)objc_claimAutoreleasedReturnValue( -[MRDHostedRoutingController computeHostsByGroupIDForOutputDevices:unclusteredDevices:]( self,  "computeHostsByGroupIDForOutputDevices:unclusteredDevices:",  v35,  v24));
  hostsByGroupID = self->_hostsByGroupID;
  self->_hostsByGroupID = v25;

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( -[MRDHostedRoutingController filterOutputDevices:remoteControllableOnly:]( self,  "filterOutputDevices:remoteControllableOnly:",  v35,  0LL));
  objc_storeStrong((id *)&self->_distantOutputDevices, v27);
  __int128 v28 = (NSDictionary *)[v34 copy];
  availableOutputDevices = self->_availableOutputDevices;
  self->_availableOutputDevices = v28;

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSHashTable allObjects](self->_weakObservers, "allObjects"));
  observerCalloutQueue = (dispatch_queue_s *)self->_observerCalloutQueue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CA86C;
  block[3] = &unk_100398F40;
  __int16 v37 = v30;
  uint64_t v38 = self;
  __int16 v39 = v27;
  uint64_t v32 = v27;
  id v33 = v30;
  dispatch_async(observerCalloutQueue, block);
}

  objc_sync_exit(v4);
}
}
}
}

        id v18 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v19 = -1LL << *(_BYTE *)(a3 + 32);
        __int128 v20 = v18 & ~v19;
        id v21 = v20 >> 6;
        id v22 = 1LL << v20;
        if (((1LL << v20) & *(void *)(v41 + 8 * (v20 >> 6))) == 0) {
          goto LABEL_3;
        }
        type metadata accessor for NearbyAdvertisement(0LL);
        __int128 v23 = *(id *)(*(void *)(a3 + 48) + 8 * v20);
        __int128 v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0) {
          break;
        }
        __int128 v25 = ~v19;
        for (i = v20 + 1; ; i = v27 + 1)
        {
          __int128 v27 = i & v25;
          __int128 v28 = *(id *)(*(void *)(a3 + 48) + 8 * v27);
          __int128 v29 = static NSObject.== infix(_:_:)(v28);

          if ((v29 & 1) != 0)
          {

            id v21 = v27 >> 6;
            id v22 = 1LL << v27;
            goto LABEL_25;
          }
        }

  if ((sub_10024B254() & 1) != 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1001A80F8((uint64_t)a1, (uint64_t)v20, type metadata accessor for HostedRoutingItem);
      if ((v30 & 1) == 0)
      {
        id v31 = !sub_10024A5E0();
LABEL_28:
        sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
        return v31 & 1;
      }

  __int128 v23 = v30;
  __int128 v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  id result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  __int128 v26 = *(void *)(v24 + 16);
  __int128 v27 = __OFADD__(v26, 1LL);
  __int128 v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  id v18 = 0LL;
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v19 = v30;
  if (v18) {
    goto LABEL_21;
  }
  __int128 v20 = ((uint64_t (*)(uint64_t, uint64_t))v26)(v30, v27);
  id v21 = v20;
  if (!((unint64_t)v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_17;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }

  if (v20 >= 0) {
    v20 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v20)) {
    goto LABEL_33;
  }
LABEL_17:
  if ((v21 & 0xC000000000000001LL) != 0)
  {
    id v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v21);
    goto LABEL_20;
  }

  if (*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v22 = *(id *)(v21 + 32);
LABEL_20:
    id v18 = v22;
    swift_bridgeObjectRelease();
LABEL_21:
    __int128 v23 = *(void (**)(uint64_t))((swift_isaMask & *v18) + 0xC8LL);
    __int128 v24 = v18;
    v23(v28);

LABEL_22:
    sub_1002047D4(v19, v29);
    return;
  }

  __break(1u);
}

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v19, 1LL, v11);
  return swift_bridgeObjectRelease();
}

  unsigned int v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  __int16 v15 = *(void *)(v14 + 48) + 40 * a2;
  double v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)__int16 v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(void *)(v15 + 32) = *(void *)(v6 + 32);
  uint64_t v17 = *(void *)(v14 + 16);
  id v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v14 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

  *(_OWORD *)__int128 v27 = *(_OWORD *)(*(void *)(v28 + 56) + 16 * v18);
  Data.append(_:)(a1, a2);
  sub_100245C3C(v27, 1, &v28, v18, a3);
  sub_100171C30(v27[0], v27[1]);
  swift_release(a3);
  *uint64_t v7 = v28;
  swift_endAccess(v29);
  return swift_release(a3);
}

void sub_10001AD50(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ignoring command because a phone call or FaceTime is active.",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nowPlayingServer]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localOriginClient]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v7 nowPlayingDataSource]);

    if (v8) {
      [v8 shouldSendCommand:*(void *)(a1 + 32)];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10001AEF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 88);
    *(void *)(v5 + 8_Block_object_dispose(va, 8) = v4;
  }

void sub_10001B028( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001B040(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001B0F8;
  v8[3] = &unk_100399F88;
  uint64_t v6 = *(void *)(a1 + 40);
  dispatch_semaphore_t v9 = v2;
  uint64_t v10 = v6;
  uint64_t v7 = v2;
  MRProcessIDForApplication(v3, v5, v8);

  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001B0F8(uint64_t a1, int a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2 > 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_10001BBD0(id a1, MRDNowPlayingClient *a2)
{
  dispatch_semaphore_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingClient client](a2, "client"));
  unsigned __int8 v3 = [v2 isSystemMediaApplication];

  return v3;
}

BOOL sub_10001BC08(id a1, MRCommandInfo *a2)
{
  return -[MRCommandInfo command](a2, "command") == 132;
}

id sub_10001C1F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_10001C54C(void *a1)
{
  id v1 = a1;
  dispatch_semaphore_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 origin]);
  unsigned int v3 = [v2 isLocal];

  if (!v3
    || (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server")),
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 client]),
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "clientForPID:", objc_msgSend(v5, "processIdentifier"))),
        v5,
        v4,
        !v6))
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v1 client]);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 bundleIdentifier]);
    char v24 = sub_10001C75C(v23);

    uint64_t v6 = 0LL;
    if ((v24 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v21 = 1LL;
    goto LABEL_7;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
  char v8 = sub_10001C75C(v7);

  if ((v8 & 1) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  dispatch_semaphore_t v9 = objc_alloc_init(&OBJC_CLASS___MRPlayerPath);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 origin]);
  -[MRPlayerPath setOrigin:](v9, "setOrigin:", v10);

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nowPlayingServer]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 nowPlayingServer]);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 resolveExistingPlayerPath:v9]);
  double v16 = (void *)objc_claimAutoreleasedReturnValue([v12 queryExistingPlayerPath:v15]);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 nowPlayingClient]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 playerPath]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 client]);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v1 client]);
  uint64_t v21 = (uint64_t)[v19 isEqual:v20];

LABEL_7:
  return v21;
}

uint64_t sub_10001C75C(void *a1)
{
  id v1 = a1;
  dispatch_semaphore_t v2 = v1;
  if (qword_1003FDBF8 == -1)
  {
    if (!v1) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&qword_1003FDBF8, &stru_10039A028);
    if (!v2) {
      goto LABEL_6;
    }
  }

  if (([(id)qword_1003FDBF0 containsObject:v2] & 1) == 0
    && (MRMediaRemoteApplicationIsSystemMediaApplication(v2) & 1) == 0
    && (MRMediaRemoteApplicationIsSystemPodcastApplication(v2) & 1) == 0)
  {
    uint64_t IsSystemBooksApplication = MRMediaRemoteApplicationIsSystemBooksApplication(v2);
    goto LABEL_7;
  }

void sub_10001C7F4(id a1)
{
  id v1 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", &off_1003BBAB0);
  dispatch_semaphore_t v2 = (void *)qword_1003FDBF0;
  qword_1003FDBF0 = (uint64_t)v1;
}

void sub_10001C8D8( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

LABEL_38:
  ((void (*)(void *, id, void))v32[2])(v32, v67, 0LL);
LABEL_41:

  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v125, 8);

  _Block_object_dispose(&v131, 8);
}

        uint64_t v17 = (v25 - 1) & v25;
        id v18 = __clz(__rbit64(v25)) + (v19 << 6);
      }

      __int128 v23 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
      if (!v23) {
        goto LABEL_42;
      }
      while (1)
      {
        __int128 v27 = (void *)sub_1001702D0(v23);

        id v11 = v19;
        id v12 = v17;
        if ((a1 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_20:
        __int128 v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          uint64_t v21 = v20;
          __int128 v29 = v20;
          id v22 = type metadata accessor for NearbyAdvertisement(0LL);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          __int128 v23 = v30;
          swift_unknownObjectRelease(v21);
          uint64_t v19 = v11;
          uint64_t v17 = v12;
          if (v23) {
            continue;
          }
        }

        goto LABEL_42;
      }
    }
  }

  if (v3 < 0) {
    uint64_t v4 = *v1;
  }
  else {
    uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (__CocoaSet.count.getter(v4)) {
    goto LABEL_8;
  }
}

    while (1)
    {
      v102 = *(void **)(v334[7] + 8 * v71);
      v333[0] = (uint64_t)v102;
      if (!v102[2]) {
        break;
      }
      __int128 v28 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) != 0)
      {
        v103 = v102[2];
        if (v103) {
          goto LABEL_41;
        }
      }

      else
      {
        v102 = sub_1001E5D90(v102);
        v103 = v102[2];
        if (v103)
        {
LABEL_41:
          v104 = v103 - 1;
          v105 = &v102[2 * v104];
          uint64_t v36 = v105[5];
          v320 = v105[4];
          v102[2] = v104;
          v333[0] = (uint64_t)v102;
          v71 = v28;
          goto LABEL_71;
        }
      }

      __break(1u);
LABEL_109:
      v307 = v71;
      uint64_t v64 = (uint64_t)sub_1001E37E4();
      v71 = v307;
      if ((v28 & 1) == 0) {
        goto LABEL_28;
      }
    }

    v320 = 0LL;
    uint64_t v36 = 0LL;
LABEL_71:
    sub_1001E3370(v333, 1, (uint64_t *)&v334, v71, v18);

    swift_bridgeObjectRelease();
    *(void *)__int16 v63 = v334;
    swift_endAccess(&v338);

    if (!v36) {
      goto LABEL_115;
    }
    v193 = *(void *)v63;
    if (!*(void *)v63)
    {
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }

    if (*(void *)(v193 + 16))
    {
      __int128 v28 = v18;
      swift_bridgeObjectRetain();
      v194 = sub_1001E1270(v28);
      if ((v195 & 1) == 0)
      {
LABEL_117:

        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_118;
      }

      v196 = *(void *)(*(void *)(v193 + 56) + 8 * v194);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      v197 = *(void *)(v196 + 16);
      swift_bridgeObjectRelease();
      id v18 = (char *)v328;
      if (!v197)
      {
        swift_beginAccess(v63, &v338, 33LL, 0LL);
        if (!*(void *)v63)
        {
LABEL_118:
          __break(1u);
          goto LABEL_119;
        }

        v198 = (id)v28;
        sub_1001E2384((uint64_t)v198);
        swift_endAccess(&v338);

        swift_bridgeObjectRelease();
      }

      __int16 v63 = v75;
      if (qword_1003FF010 == -1) {
        goto LABEL_79;
      }
      goto LABEL_106;
    }

  __break(1u);
}

    double v54 = (v60 - 1) & v60;
    __int128 v58 = __clz(__rbit64(v60)) + (v56 << 6);
LABEL_19:
    id result = (*(uint64_t (**)(uint64_t))(*(void *)(v50 + 56) + 16 * v58))(result);
  }

  v61 = v59 + 5;
  if (v61 >= v55)
  {
LABEL_39:
    swift_release(v50);
    uint64_t v62 = *(void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_identifierStore);
    __int16 v63 = *(void (**)(uint64_t))(*(void *)v62 + 272LL);
    swift_retain(v62);
    uint64_t v64 = swift_bridgeObjectRetain();
    v63(v64);
    swift_bridgeObjectRelease();
    swift_release(v62);
    return swift_bridgeObjectRelease();
  }

  uint64_t v60 = *(void *)(v51 + 8 * v61);
  if (v60)
  {
    v56 = v61;
    goto LABEL_38;
  }

  while (1)
  {
    v56 = v61 + 1;
    if (__OFADD__(v61, 1LL)) {
      break;
    }
    if (v56 >= v55) {
      goto LABEL_39;
    }
    uint64_t v60 = *(void *)(v51 + 8 * v56);
    ++v61;
    if (v60) {
      goto LABEL_38;
    }
  }

void sub_10001D440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_10001D4D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001D4E8(uint64_t a1)
{
}

void sub_10001D4F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    uint64_t v20 = _MRLogForCategory(10LL, v19);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v17)
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v30 = *(void *)(a1 + 32);
        uint64_t v31 = *(void *)(a1 + 40);
        uint64_t v32 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v54 = v30;
        __int16 v55 = 2114;
        uint64_t v56 = v31;
        __int16 v57 = 2114;
        id v58 = v32;
        __int16 v59 = 2048;
        uint64_t v60 = v33;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        __int16 v35 = v10;
        uint32_t v36 = 42;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v40 = *(void *)(a1 + 32);
        uint64_t v41 = *(void *)(a1 + 40);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v54 = v40;
        __int16 v55 = 2114;
        uint64_t v56 = v41;
        __int16 v57 = 2048;
        id v58 = v42;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int16 v35 = v10;
        uint32_t v36 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, buf, v36);
      goto LABEL_20;
    }

    if (v18)
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 40);
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v54 = v22;
      __int16 v55 = 2114;
      uint64_t v56 = v23;
      __int16 v57 = 2112;
      id v58 = v15;
      __int16 v59 = 2114;
      uint64_t v60 = v24;
      __int16 v61 = 2048;
      uint64_t v62 = v26;
      __int128 v27 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      __int128 v28 = v10;
      uint32_t v29 = 52;
    }

    else
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v37 = *(void *)(a1 + 32);
      uint64_t v38 = *(void *)(a1 + 40);
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v54 = v37;
      __int16 v55 = 2114;
      uint64_t v56 = v38;
      __int16 v57 = 2112;
      id v58 = v15;
      __int16 v59 = 2048;
      uint64_t v60 = v39;
      __int128 v27 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      __int128 v28 = v10;
      uint32_t v29 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);

    goto LABEL_20;
  }

  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  uint64_t v9 = _MRLogForCategory(10LL, v6);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v54 = v12;
      __int16 v55 = 2114;
      uint64_t v56 = v13;
      __int16 v57 = 2114;
      id v58 = v7;
      __int16 v59 = 2114;
      uint64_t v60 = v14;
      __int16 v61 = 2048;
      uint64_t v62 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_20:
    }
  }

  else if (v11)
  {
    sub_1002B5008((void *)a1, (uint64_t)v7, v10);
  }

LABEL_21:
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_10001D944;
  v47[3] = &unk_10039A050;
  uint64_t v43 = *(dispatch_queue_s **)(a1 + 56);
  id v44 = *(id *)(a1 + 64);
  id v49 = v7;
  id v50 = v44;
  id v48 = v5;
  uint64_t v52 = *(void *)(a1 + 96);
  __int128 v51 = *(_OWORD *)(a1 + 80);
  id v45 = v7;
  id v46 = v5;
  dispatch_async(v43, v47);
}

  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v13 first]);
  uint64_t v38 = [v37 BOOLValue];

  return v38;
}

  return v5;
}
                }
              }
            }

            BOOL v11 = [v37 countByEnumeratingWithState:&v40 objects:v54 count:16];
          }

          while (v11);
        }

        uint64_t v8 = v34 + 1;
      }

      while ((id)(v34 + 1) != v33);
      uint64_t v33 = [obj countByEnumeratingWithState:&v44 objects:v55 count:16];
      if (!v33)
      {
LABEL_27:

        unsigned int v3 = v30;
        break;
      }
    }
  }
}

      goto LABEL_11;
    }

    if ((([v7 clusterType] - 1) & 0xFFFFFFFD) != 0)
    {
LABEL_23:
      uint64_t v22 = 1;
      goto LABEL_12;
    }

    uint32_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 routingServer]);
    uint64_t v38 = [v37 airplayActive];

    if (v38)
    {
      uint64_t v40 = _MRLogForCategory(0LL, v39);
      __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      id v46 = 138412546;
      id v47 = v6;
      id v48 = 2112;
      id v49 = @"Dynamic";
      uint32_t v29 = "[LocalDeviceCommitManager] Not committing %@ because airplayActive on a %@ cluster";
    }

    else
    {
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceUID]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v7 clusterLeaderID]);
      uint64_t v43 = [v41 isEqualToString:v42];

      if ((v43 & 1) != 0) {
        goto LABEL_23;
      }
      id v45 = _MRLogForCategory(0LL, v44);
      __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      id v46 = 138412546;
      id v47 = v6;
      id v48 = 2112;
      id v49 = @"Dynamic";
      uint32_t v29 = "[LocalDeviceCommitManager] Not committing %@ because not leader of a %@ cluster";
    }

    uint64_t v34 = v28;
    __int16 v35 = 22;
    goto LABEL_20;
  }

  uint64_t v20 = _MRLogForCategory(0LL, v10);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v46 = 138412290;
    id v47 = v6;
    uint64_t v19 = "[LocalDeviceCommitManager] Not committing %@ because FF disabled";
    goto LABEL_10;
  }

  (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
  [*(id *)(a1 + 32) trackWithError:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 88) setStartingNowPlayingSession:0];
}

  [*(id *)(a1 + 64) trackWithError:v7];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

  uint64_t v37 = 0;
LABEL_26:

  return v37;
}

  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_100101088;
  v42[3] = &unk_10039AD10;
  uint64_t v39 = *(dispatch_queue_s **)(a1 + 64);
  uint64_t v40 = *(id *)(a1 + 72);
  uint64_t v43 = v4;
  id v44 = v40;
  uint64_t v41 = v4;
  dispatch_async(v39, v42);
}

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472LL;
  v44[2] = sub_10010194C;
  v44[3] = &unk_10039AD10;
  uint64_t v41 = *(dispatch_queue_s **)(a1 + 64);
  uint64_t v42 = *(id *)(a1 + 72);
  id v45 = v4;
  id v46 = v42;
  uint64_t v43 = v4;
  dispatch_async(v41, v44);
}

  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_100102218;
  v39[3] = &unk_10039AD10;
  uint32_t v36 = *(dispatch_queue_s **)(a1 + 64);
  uint64_t v37 = *(id *)(a1 + 72);
  uint64_t v40 = v4;
  uint64_t v41 = v37;
  uint64_t v38 = v4;
  dispatch_async(v36, v39);
}

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v39 removeObserver:*(void *)(a1 + 64)];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

  (*(void (**)(void))(a1[8] + 16LL))();
}

    __int128 v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    __int128 v27 = (-1LL << v3) - 1;
  }

  else
  {
    __int128 v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  *__int128 v25 = v27 & v26;
  __int128 v28 = *(void *)(a2 + 16);
  uint32_t v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    __int128 v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    __int128 v27 = (-1LL << v3) - 1;
  }

  else
  {
    __int128 v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  *__int128 v25 = v27 & v26;
  __int128 v28 = *(void *)(a2 + 16);
  uint32_t v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v9 = (v13 - 1) & v13;
    BOOL v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_22:
    __int16 v15 = 16 * v11;
    uint64_t v16 = (uint64_t *)(*(void *)(v5 + 48) + v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = (void *)(*(void *)(v5 + 56) + v15);
    uint64_t v20 = v19[1];
    if (*v19 == a2 && v20 == a3)
    {
      uint64_t v20 = a3;
LABEL_29:
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      return v17;
    }

    id result = _stringCompareWithSmolCheck(_:_:expecting:)(*v19, v19[1], a2, a3, 0LL);
    if ((result & 1) != 0) {
      goto LABEL_29;
    }
  }

  uint64_t v14 = v12 + 4;
  if (v14 >= v23) {
    return 0LL;
  }
  uint64_t v13 = *(void *)(v22 + 8 * v14);
  if (v13)
  {
    uint64_t v6 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v6 >= v23) {
      return 0LL;
    }
    uint64_t v13 = *(void *)(v22 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

      if (!v5)
      {
        __break(1u);
        return result;
      }

      uint64_t v17 = *(void **)v6;
      id v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + _Block_object_dispose((const void *)(v61 - 208), 8) = v17;
      v6 -= 8LL;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
  }

  return result;
}

      __int128 v25 = v4;
      uint64_t v26 = v7 == v4++;
      __int128 v27 = (unint64_t)v53;
      if (!v26) {
        goto LABEL_31;
      }
LABEL_32:
      ++v7;
    }

    while (v4 < v14 && (unint64_t)v6 < v27);
  }

  uint64_t v6 = v7;
LABEL_70:
  if (v6 != v4
    || v6 >= (void **)((char *)v4
                     + (((char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8LL)))
  {
    memmove(v6, v4, 8 * (v14 - v4));
  }

  return 1LL;
}

    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    __int128 v25 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v25 = *v23;
    uint64_t v24 = (-1LL << result) - 1;
  }

  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  __int128 v27 = __OFSUB__(v26, 1LL);
  __int128 v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    id v7 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v3 << 6);
LABEL_22:
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    BOOL v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v2 + 56) + 8 * v16);
    uint64_t v24 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000LL) == 0) {
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      swift_bridgeObjectRetain(v21);
    }

    else
    {
      BOOL v21 = 0xEC000000474E4952LL;
      uint64_t v22 = 0x5453205954504D45LL;
    }

    swift_retain(v23);
    v9._countAndFlagsBits = v22;
    v9._object = (void *)v21;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v21);
    v10._countAndFlagsBits = 540945696LL;
    v10._object = (void *)0xE400000000000000LL;
    String.append(_:)(v10);
    v11._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v23 + 136LL))();
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._countAndFlagsBits = 10LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    String.append(_:)(v14);
    swift_release(v23);
    id result = swift_bridgeObjectRelease(0xE000000000000000LL);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v8)
  {
LABEL_26:
    swift_release(v2);
    return 0xD00000000000002CLL;
  }

  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    unsigned int v3 = v19;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v3 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v3);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }

  int v66 = (void *)v32[2];
  v67 = (uint64_t)v136;
  if (!v66) {
    goto LABEL_40;
  }
  v69 = *v32;
  id v68 = v32[1];
  sub_10028E974(*v32, v68, v32[2]);
  swift_bridgeObjectRetain();
  sub_10028DA70(v69, v68, (uint64_t)v66);
  v70 = swift_bridgeObjectRetain();
  v71 = sub_1001A6418(v70);
  int8x16_t v72 = swift_bridgeObjectRelease();
  v73 = (*(uint64_t (**)(uint64_t))(*v1 + 328LL))(v72);
  id v74 = *(void *)(v73 + 16);
  if (v74)
  {
    v133 = v66;
    id v75 = v73 + ((*(unsigned __int8 *)(v138 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
    id v76 = *(void *)(v138 + 72);
    v128 = v73;
    v129 = v3;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A80F8(v75, (uint64_t)v20, type metadata accessor for HostedRoutingSourceSession);
      swift_bridgeObjectRetain();
      v77 = swift_bridgeObjectRetain();
      v78 = sub_10028F5FC(v77, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v79 = v78[2];
      swift_bridgeObjectRelease();
      if (v79) {
        break;
      }
      sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingSourceSession);
      v75 += v76;
      if (!--v74)
      {
        swift_bridgeObjectRelease();
        v80 = 1LL;
        unsigned int v3 = v129;
        v67 = (uint64_t)v136;
        goto LABEL_29;
      }
    }

    swift_bridgeObjectRelease();
    v67 = (uint64_t)v136;
    sub_1001A81D4((uint64_t)v20, (uint64_t)v136, type metadata accessor for HostedRoutingSourceSession);
    v80 = 0LL;
    unsigned int v3 = v129;
LABEL_29:
    int v66 = v133;
  }

  else
  {
    v80 = 1LL;
  }

  v81 = v137;
  int8x16_t v82 = v138;
  (*(void (**)(uint64_t, uint64_t, uint64_t, os_log_t))(v138 + 56))(v67, v80, 1LL, v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, os_log_t))(v82 + 48))(v67, 1LL, v81) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1001603DC(v67, &qword_1003F9518);
    goto LABEL_40;
  }

  v83 = v135;
  sub_1001A81D4(v67, (uint64_t)v135, type metadata accessor for HostedRoutingSourceSession);
  v84 = v83[3];
  if (!v84
    || (v85 = v83[2],
        id v86 = (void *)((char *)v1 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints),
        swift_beginAccess( (char *)v1 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints,  v142,  0LL,  0LL),  v87 = *v86,  !*(void *)(v87 + 16)))
  {
LABEL_39:
    sub_1001A813C((uint64_t)v83, type metadata accessor for HostedRoutingSourceSession);
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v88 = sub_10015CAD4(v85, v84);
  if ((v89 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }

  uint64_t v90 = *(void *)(*(void *)(v87 + 56) + 8 * v88);
  swift_retain(v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v90 + 16) != 2)
  {
    sub_1001A813C((uint64_t)v83, type metadata accessor for HostedRoutingSourceSession);
    swift_bridgeObjectRelease();
    swift_release(v90);
    goto LABEL_40;
  }

  unsigned __int8 v91 = sub_1001741A8();
  id v92 = v134;
  v93 = v131;
  (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v131, v91, v3);
  v94 = (uint64_t)v83;
  v95 = v130;
  sub_1001A80F8(v94, (uint64_t)v130, type metadata accessor for HostedRoutingSourceSession);
  id v96 = swift_bridgeObjectRetain();
  v97 = (os_log_s *)Logger.logObject.getter(v96);
  v98 = static os_log_type_t.debug.getter();
  v99 = v98;
  if (os_log_type_enabled(v97, v98))
  {
    id v100 = swift_slowAlloc(32LL, -1LL);
    v137 = v97;
    v101 = v100;
    v138 = swift_slowAlloc(96LL, -1LL);
    v141 = v138;
    *(_DWORD *)v101 = 136315650;
    v102 = _typeName(_:qualified:)(v132, 0LL);
    v129 = v3;
    v140 = sub_10015ADC4(v102, v103, &v141);
    LODWORD(v136) = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v101 + 4, v101 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v101 + 12) = 2080;
    v104 = swift_bridgeObjectRetain();
    v105 = Array.description.getter(v104, &type metadata for String);
    v106 = v1;
    v108 = v107;
    swift_bridgeObjectRelease();
    v140 = sub_10015ADC4(v105, v108, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v101 + 14, v101 + 22);
    swift_bridgeObjectRelease_n(v66, 2LL);
    id v1 = v106;
    swift_bridgeObjectRelease();
    *(_WORD *)(v101 + 22) = 2080;
    v109 = *v95;
    v110 = v95[1];
    swift_bridgeObjectRetain();
    v140 = sub_10015ADC4(v109, v110, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v101 + 24, v101 + 32);
    swift_bridgeObjectRelease();
    sub_1001A813C((uint64_t)v95, type metadata accessor for HostedRoutingSourceSession);
    v111 = v137;
    _os_log_impl( (void *)&_mh_execute_header,  v137,  (os_log_type_t)v136,  "[%s] updateActiveSessionIdentifierIfNeeded - matched session elements device identifiers: %s to session: %s",  (uint8_t *)v101,  0x20u);
    v112 = v138;
    swift_arrayDestroy(v138, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_slowDealloc(v101, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v134 + 8))(v93, v129);
  }

  else
  {
    swift_bridgeObjectRelease_n(v66, 2LL);
    sub_1001A813C((uint64_t)v95, type metadata accessor for HostedRoutingSourceSession);

    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v3);
  }

  v121 = v135;
  v122 = *v135;
  v123 = v135[1];
  v124 = *(void (**)(uint64_t, uint64_t))(*v1 + 552LL);
  swift_bridgeObjectRetain();
  v124(v122, v123);
  swift_release(v90);
  return (os_log_s *)sub_1001A813C((uint64_t)v121, type metadata accessor for HostedRoutingSourceSession);
}

    v80 = v120;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))(v17, v79, 1LL, v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v17, 1LL, v11) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1001603DC((uint64_t)v17, &qword_1003F9518);
LABEL_37:
      v95 = type metadata accessor for InternalRoutingError(0LL);
      id v96 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      v97 = swift_allocError(v95, v96, 0LL, 0LL);
      v99 = v98;
      id v100 = (unsigned int *)&enum case for InternalRoutingError.sessionNotFound(_:);
LABEL_42:
      v103 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v95 - 8) + 104LL))(v99, *v100, v95);
      v104 = RoutingControl.sessionIdentifier.getter(v103);
      v106 = MRDFastSyncGroupSessionState.rawValue.getter(v97, v104, v105, 2LL);
      v108 = v107;
      v110 = v109;
      v112 = v111;
      a4();
      swift_errorRelease(v106);
      sub_100156BA8(v108, v110, v112);
      return;
    }

    uint32_t v29 = (id *)*((void *)v17 + 2);
    v81 = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
    uint64_t v31 = (id)sub_1001A813C((uint64_t)v17, type metadata accessor for HostedRoutingSourceSession);
    if (!v81) {
      goto LABEL_44;
    }
    int8x16_t v82 = (uint64_t *)(v127 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints);
    swift_beginAccess(v127 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints, v136, 0LL, 0LL);
    v83 = *v82;
    if (*(void *)(v83 + 16))
    {
      swift_bridgeObjectRetain();
      v84 = sub_10015CAD4((uint64_t)v29, v81);
      if ((v85 & 1) != 0)
      {
        uint32_t v29 = *(id **)(*(void *)(v83 + 56) + 8 * v84);
        swift_retain(v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v86 = [v29[8] origin];
        if (v86)
        {
          v87 = v86;
          if (*((_BYTE *)v29 + 16) == 2)
          {
            uint64_t v88 = a1;
            v89 = a4;
            uint64_t v90 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
            unsigned __int8 v91 = [v90 nowPlayingServer];

            id v92 = [v91 originClientForOrigin:v87];
            if (v92
              && (v93 = [v92 activeNowPlayingClient],
                  v92,
                  v93)
              && (v94 = [v93 activePlayerClient],
                  v93,
                  v94))
            {
              uint64_t v30 = [v94 playerPath];
              swift_release(v29);

              a4 = v89;
              a1 = v88;
              if (v30) {
                goto LABEL_6;
              }
            }

            else
            {
              swift_release(v29);

              a4 = v89;
            }

            goto LABEL_41;
          }

          swift_release(v29);
        }

        else
        {
          swift_release(v29);
        }

        goto LABEL_36;
      }

      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

    swift_bridgeObjectRelease_n(v31, 2LL);
    goto LABEL_22;
  }

  id v58 = v193[2];
  __int16 v59 = (uint64_t *)(v181 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints);
  uint64_t v60 = swift_beginAccess( v181 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints,  &v200,  0LL,  0LL);
  __int16 v61 = *v59;
  uint64_t v62 = v192;
  if (!*(void *)(v61 + 16))
  {
LABEL_18:
    v81 = v180;
    ((void (*)(_BYTE *, uint64_t, id, __n128))v183)(v180, v182, v194, v60);
    id v92 = swift_bridgeObjectRetain();
    v83 = (os_log_s *)Logger.logObject.getter(v92);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v87 = swift_slowAlloc(22LL, -1LL);
      uint64_t v88 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v88;
      *(_DWORD *)v87 = 136315394;
      v93 = _typeName(_:qualified:)(v62, 0LL);
      v196 = sub_10015ADC4(v93, v94, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      swift_bridgeObjectRetain();
      v196 = sub_10015ADC4(v190, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease_n(v31, 3LL);
      unsigned __int8 v91 = "[%s] pullContentFromSession_new<%s> - failing because no connected entry for endpoint-sourced session";
      goto LABEL_20;
    }

    goto LABEL_21;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __int16 v63 = sub_10015CAD4(v58, v57);
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }

  v187 = v56;
  uint64_t v65 = *(void *)(*(void *)(v61 + 56) + 8 * v63);
  swift_retain(v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v65 + 16) != 2)
  {
    swift_release(v65);
    uint64_t v56 = v187;
    goto LABEL_18;
  }

  int v66 = [*(id *)(v65 + 64) origin];
  v67 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v68 = [v67 nowPlayingServer];

  v69 = [v68 originClientForOrigin:v66];
  if (v69)
  {
    v71 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v70);
    v73 = v72;
    id v74 = String._bridgeToObjectiveC()();
    id v75 = [v69 existingNowPlayingClientForDisplayID:v74];

    if (v75)
    {
      v194 = v66;
      v186 = v65;
      sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
      if ((sub_1002A2758(v71, v73) & 1) != 0)
      {
        id v76 = sub_1002A265C();
        swift_beginAccess(v76, v195, 0LL, 0LL);
      }

      swift_bridgeObjectRetain();
      v77 = sub_1002A2764(v71, v73);
      swift_bridgeObjectRelease();
      v78 = v190;
      v185 = v69;
      v79 = v188;
      if ((v77 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v80 = sub_1002A2718();
        swift_beginAccess(v80, &v196, 0LL, 0LL);
        swift_bridgeObjectRetain();
      }

      v131 = [(id)objc_opt_self(MROrigin) localOrigin];
      v132 = objc_allocWithZone(&OBJC_CLASS___MRPlayerPath);
      v133 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v134 = [v132 initWithOrigin:v131 bundleIdentifier:v133 player:0];

      v135 = (void *)(*(uint64_t (**)(void))(*(void *)v181 + 280LL))();
      sub_10016083C(0LL, &qword_1003F88E0, off_100397340);
      v136 = sub_100298F38();
      v137 = dispatch thunk of RoutingInteraction.Action.HandoffContext.sourcePlayerPath.getter();
      if (v137)
      {
        v138 = v137;
        v139 = objc_opt_self(&OBJC_CLASS___MRPlayerPath);
        v140 = (void *)swift_dynamicCastObjCClassUnconditional(v138, v139, 0LL, 0LL, 0LL);
        v141 = (void *)swift_allocObject(&unk_1003AC228, 64LL, 7LL);
        v141[2] = v78;
        v141[3] = v31;
        v141[4] = v79;
        v142 = v189;
        v141[5] = v189;
        v141[6] = v135;
        v141[7] = v192;
        aBlock[4] = (uint64_t)sub_100290BC8;
        v199 = v141;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_10028916C;
        aBlock[3] = (uint64_t)&unk_1003AC240;
        v143 = _Block_copy(aBlock);
        v144 = v199;
        swift_retain(v142);
        v145 = v135;
        swift_release(v144);
        [v136 beginMusicHandoffSessionWithSource:v140 destination:v134 completion:v143];
        swift_release(v186);

        _Block_release(v143);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      v122 = v176;
      v183(v176, v182, v194);
      swift_bridgeObjectRetain();
      v123 = swift_bridgeObjectRetain();
      v124 = (os_log_s *)Logger.logObject.getter(v123);
      v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = swift_slowAlloc(32LL, -1LL);
        v191 = swift_slowAlloc(96LL, -1LL);
        aBlock[0] = v191;
        *(_DWORD *)v126 = 136315650;
        v185 = v69;
        v127 = _typeName(_:qualified:)(v62, 0LL);
        v196 = sub_10015ADC4(v127, v128, aBlock);
        v186 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v126 + 4, v126 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v126 + 12) = 2080;
        swift_bridgeObjectRetain();
        v196 = sub_10015ADC4(v190, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v126 + 14, v126 + 22);
        swift_bridgeObjectRelease_n(v31, 3LL);
        *(_WORD *)(v126 + 22) = 2080;
        swift_bridgeObjectRetain();
        v196 = sub_10015ADC4(v71, v73, aBlock);
        uint64_t v65 = v186;
        v69 = v185;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v126 + 24, v126 + 32);
        swift_bridgeObjectRelease_n(v73, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "[%s] pullContentFromSession_new<%s> - failing because no source client found for: %s",  (uint8_t *)v126,  0x20u);
        v129 = v191;
        swift_arrayDestroy(v191, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1LL, -1LL);
        swift_slowDealloc(v126, -1LL, -1LL);

        v130 = v176;
      }

      else
      {

        swift_bridgeObjectRelease_n(v73, 2LL);
        swift_bridgeObjectRelease_n(v31, 2LL);
        v130 = v122;
      }

      v187(v130, v194);
      v159 = type metadata accessor for InternalRoutingError(0LL);
      v160 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      v161 = swift_allocError(v159, v160, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v159 - 8) + 104LL))( v162,  enum case for InternalRoutingError.unsupportedOperation(_:),  v159);
      v163 = *v193;
      v164 = v193[1];
      swift_bridgeObjectRetain();
      v165 = MRDFastSyncGroupSessionState.rawValue.getter(v161, v163, v164, 2LL);
      v167 = v166;
      v169 = v168;
      v171 = v170;
      v188();
      swift_errorRelease(v165);
      sub_100156BA8(v167, v169, v171);
      swift_release(v65);
    }
  }

  else
  {
    v108 = v177;
    v183(v177, v182, v194);
    v109 = v66;
    swift_bridgeObjectRetain();
    v110 = v109;
    v111 = (os_log_s *)Logger.logObject.getter(v110);
    v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = swift_slowAlloc(32LL, -1LL);
      v186 = swift_slowAlloc(8LL, -1LL);
      v191 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v191;
      *(_DWORD *)v113 = 136315650;
      v114 = _typeName(_:qualified:)(v62, 0LL);
      v196 = sub_10015ADC4(v114, v115, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 12) = 2080;
      swift_bridgeObjectRetain();
      v196 = sub_10015ADC4(v190, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v113 + 14, v113 + 22);
      swift_bridgeObjectRelease_n(v31, 3LL);
      *(_WORD *)(v113 + 22) = 2112;
      v196 = (uint64_t)v110;
      v116 = v65;
      v117 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v197, v113 + 24, v113 + 32);
      v118 = v186;
      *(void *)v186 = v110;

      uint64_t v65 = v116;
      _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "[%s] pullContentFromSession_new<%s> - failing because no source origin client found for: %@",  (uint8_t *)v113,  0x20u);
      v119 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v118, 1LL, v119);
      swift_slowDealloc(v118, -1LL, -1LL);
      v120 = v191;
      swift_arrayDestroy(v191, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);

      v121 = v177;
    }

    else
    {

      swift_bridgeObjectRelease_n(v31, 2LL);
      v121 = v108;
    }

    v187(v121, v194);
    v146 = type metadata accessor for InternalRoutingError(0LL);
    v147 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v148 = swift_allocError(v146, v147, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v146 - 8) + 104LL))( v149,  enum case for InternalRoutingError.sessionNotFound(_:),  v146);
    v150 = *v193;
    v151 = v193[1];
    swift_bridgeObjectRetain();
    v152 = MRDFastSyncGroupSessionState.rawValue.getter(v148, v150, v151, 2LL);
    v154 = v153;
    v156 = v155;
    v158 = v157;
    v188();
    swift_errorRelease(v152);
    sub_100156BA8(v154, v156, v158);
    swift_release(v65);
  }

        swift_bridgeObjectRelease();
      }

      uint64_t v14 = [(id)objc_opt_self(MRGroupComposition) homePodHomeTheaterComposition];
      return v14;
    }

    if (v2 != 8)
    {
LABEL_33:
      id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001003409E0LL,  "mediaremoted/Symbols.swift",  26LL,  2LL,  307LL,  0);
      __break(1u);
      return result;
    }

    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v64 = *(void *)(v26 + 16);
    if (v64)
    {
      __int128 v27 = *(void *)(v26 + 48);
      __int128 v28 = *(void *)(v26 + 56);
      uint32_t v29 = *(unsigned __int16 *)(v26 + 64);
      uint64_t v62 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10018390C(v27, v28, v29);
      sub_100247278();
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      __int16 v35 = v34;
      uint32_t v36 = sub_100247880(v30, v32, v34);
      sub_100183618(v31, v33, v35);
      swift_bridgeObjectRelease();
      sub_1001835D8(v27, v28, v29);
      if (v36)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        uint64_t v14 = [(id)objc_opt_self(MRGroupComposition) homePodMiniStereoPairComposition];
        return v14;
      }

      if (v64 != 1)
      {
        id v49 = (unsigned __int16 *)(v62 + 104);
        id v50 = 1LL;
        do
        {
          __int128 v51 = *((void *)v49 - 2);
          uint64_t v52 = *((void *)v49 - 1);
          double v53 = *v49;
          uint64_t v54 = v50 + 1;
          if (__OFADD__(v50, 1LL)) {
            goto LABEL_32;
          }
          swift_bridgeObjectRetain();
          sub_10018390C(v51, v52, v53);
          sub_100247278();
          uint64_t v56 = v55;
          id v58 = v57;
          uint64_t v60 = v59;
          int v66 = sub_100247880(v55, v57, v59);
          sub_100183618(v56, v58, v60);
          swift_bridgeObjectRelease();
          sub_1001835D8(v51, v52, v53);
          if (v66) {
            goto LABEL_15;
          }
          v49 += 20;
          ++v50;
        }

        while (v54 != v64);
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v14 = [(id)objc_opt_self(MRGroupComposition) homePodStereoPairComposition];
    return v14;
  }

  __int16 v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    sub_100299E34(0LL, v16, 0);
    uint64_t v17 = (unsigned __int16 *)(v15 + 64);
    do
    {
      uint64_t v18 = *((void *)v17 - 2);
      uint64_t v19 = *((void *)v17 - 1);
      uint64_t v20 = *v17;
      sub_10018390C(v18, v19, *v17);
      uint64_t v22 = _swiftEmptyArrayStorage[2];
      BOOL v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1) {
        sub_100299E34((char *)(v21 > 1), v22 + 1, 1);
      }
      v17 += 20;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      uint64_t v23 = &_swiftEmptyArrayStorage[3 * v22];
      v23[4] = v18;
      v23[5] = v19;
      *((_WORD *)v23 + 24) = v20;
      --v16;
    }

    while (v16);
  }

  uint64_t v24 = sub_100299F64((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v24;
}

  __int128 v28 = *(void *)(v2 + OBJC_IVAR___MRDRouteRecommendationDemotionController_appInFocusMonitor + 32);
  sub_1001865C4( (void *)(v2 + OBJC_IVAR___MRDRouteRecommendationDemotionController_appInFocusMonitor),  *(void *)(v2 + OBJC_IVAR___MRDRouteRecommendationDemotionController_appInFocusMonitor + 24));
  uint32_t v29 = v14();
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v28 + 8))(v29);
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
    uint64_t v31 = (objc_class *)type metadata accessor for RouteRecommendationDemotionPolicy();
    uint64_t v32 = objc_allocWithZone(v31);
    v32[OBJC_IVAR___MRDRouteRecommendationDemotionPolicy_shouldDemote] = 1;
    uint64_t v33 = &v32[OBJC_IVAR___MRDRouteRecommendationDemotionPolicy_reason];
    *uint64_t v33 = 0xD000000000000038LL;
    v33[1] = 0x8000000100340C90LL;
    return objc_msgSendSuper2( &v36,  "init",  v34.receiver,  v34.super_class,  v35.receiver,  v35.super_class,  v32,  v31,  v37.receiver,  v37.super_class,  v38.receiver,  v38.super_class,  v39.receiver,  v39.super_class);
  }

void sub_10001D944(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  id obj = *(id *)(a1 + 72);
  objc_sync_enter(obj);
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setDiscoveryMode:0];
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "removeEndpointsChangedCallback:");
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;

  objc_sync_exit(obj);
}

void sub_10001D9E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_10001D9F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_10001DA10(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

uint64_t sub_10001DA70(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVClusterController sharedController](&OBJC_CLASS___MRAVClusterController, "sharedController"));
  id v3 = [v2 clusterStatus];

  if (v3 == (id)2)
  {
    uint64_t v5 = _MRLogForCategory(10LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v20 = 138543874;
      uint64_t v21 = v7;
      __int16 v22 = 2114;
      uint64_t v23 = v8;
      __int16 v24 = 2112;
      __int128 v25 = @"Not short-circuiting because cluster secondary";
LABEL_10:
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  (uint8_t *)&v20,  0x20u);
    }
  }

  else if ([*(id *)(a1 + 48) isGroupLeader])
  {
    if (![*(id *)(a1 + 48) isAirPlayActive])
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      unsigned int v19 = [v18 supportMultiplayerHost];

      return v19 ^ 1;
    }

    uint64_t v11 = _MRLogForCategory(10LL, v10);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v20 = 138543874;
      uint64_t v21 = v12;
      __int16 v22 = 2114;
      uint64_t v23 = v13;
      __int16 v24 = 2112;
      __int128 v25 = @"Not short-circuiting because secondary";
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v14 = _MRLogForCategory(10LL, v9);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      int v20 = 138543874;
      uint64_t v21 = v15;
      __int16 v22 = 2114;
      uint64_t v23 = v16;
      __int16 v24 = 2112;
      __int128 v25 = @"Not short-circuiting not group leader";
      goto LABEL_10;
    }
  }

  return 0LL;
}

id sub_10001DC74(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_10001DC88(void *a1, void *a2)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend( *(id *)(*((void *)&v13 + 1) + 8 * (void)i),  "containsOutputDeviceWithUID:",  *(void *)(*(void *)(a1[7] + 8) + 40),  (void)v13))
        {
          uint64_t v9 = _MRLogForCategory(10LL, v8);
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = a1[4];
            uint64_t v12 = a1[5];
            *(_DWORD *)__int128 buf = 138543874;
            uint64_t v18 = v11;
            __int16 v19 = 2114;
            uint64_t v20 = v12;
            __int16 v21 = 2112;
            __int16 v22 = @"found device in discovery";
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
          }

          (*(void (**)(void))(a1[6] + 16LL))();
          goto LABEL_13;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

id sub_10001DFBC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) invalidated];
  if ((_DWORD)result) {
    return _[*(id *)(a1 + 32) _configureObserver];
  }
  return result;
}

LABEL_43:
    uint64_t v54 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v20,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v21,  v22,  4LL,  1LL);
LABEL_48:
    __int16 v57 = (__CFString *)v54;
    goto LABEL_49;
  }

  if (*(uint64_t *)v67 > 2999)
  {
    if (*(void *)v67 == 3000LL)
    {
      LODWORD(v70[0]) = bswap32(DWORD2(v68[0]));
      id v44 = (char *)calloc(8uLL, 1uLL);
      id v45 = 0LL;
      id v46 = v44 + 1;
      do
      {
        id v47 = *((unsigned __int8 *)v70 + v45);
        *(v46 - 1) = a0123456789abcd[v47 >> 4];
        *id v46 = a0123456789abcd[v47 & 0xF];
        v46 += 2;
        ++v45;
      }

      while (v45 != 4);
      uint64_t v20 = objc_alloc(&OBJC_CLASS___NSString);
      __int16 v21 = v44;
      __int16 v22 = 8LL;
    }

    else
    {
      if (*(void *)v67 != 3001LL) {
        goto LABEL_44;
      }
      v70[0] = bswap64(*((unint64_t *)&v68[0] + 1));
      uint64_t v23 = (char *)calloc(0x10uLL, 1uLL);
      __int16 v24 = 0LL;
      __int128 v25 = v23 + 1;
      do
      {
        uint64_t v26 = *((unsigned __int8 *)v70 + v24);
        *(v25 - 1) = a0123456789abcd[v26 >> 4];
        *__int128 v25 = a0123456789abcd[v26 & 0xF];
        v25 += 2;
        ++v24;
      }

      while (v24 != 8);
      uint64_t v20 = objc_alloc(&OBJC_CLASS___NSString);
      __int16 v21 = v23;
      __int16 v22 = 16LL;
    }

    goto LABEL_43;
  }

  if (*(void *)v67 == 1000LL)
  {
    uint64_t v33 = *((void *)&v68[0] + 1);
    uint64_t v34 = (UInt8 *)&v71;
    quot = *((void *)&v68[0] + 1);
    do
    {
      uint32_t v36 = lldiv(quot, 10LL);
      quot = v36.quot;
      if (v36.rem >= 0) {
        LOBYTE(v37) = v36.rem;
      }
      else {
        uint64_t v37 = -v36.rem;
      }
      *v34-- = v37 + 48;
    }

    while (v36.quot);
    if (v33 < 0) {
      const char *v34 = 45;
    }
    else {
      ++v34;
    }
    uint64_t v12 = (char *)v72 - (char *)v34;
    __int128 v13 = v34;
    goto LABEL_47;
  }

  if (*(void *)v67 == 2000LL)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = DWORD2(v68[0]);
    do
    {
      uint64_t v10 = ldiv(v9, 10LL);
      uint64_t v9 = v10.quot;
      if (v10.rem >= 0) {
        LOBYTE(v11) = v10.rem;
      }
      else {
        uint64_t v11 = -v10.rem;
      }
      *(&v71 + v8--) = v11 + 48;
    }

    while (v10.quot);
    uint64_t v12 = -v8;
    __int128 v13 = (const UInt8 *)v72 + v8;
LABEL_47:
    uint64_t v54 = CFStringCreateWithBytes(0LL, v13, v12, 0x8000100u, 0);
    goto LABEL_48;
  }

    __int128 v51 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v17,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v18,  v19,  4LL,  1LL,  4001LL,  *(void *)&v57.h0);
LABEL_48:
    uint64_t v54 = (__CFString *)v51;
    goto LABEL_49;
  }

  if (*(uint64_t *)v65 > 2999)
  {
    if (*(void *)v65 == 3000LL)
    {
      LODWORD(v68[0]) = bswap32(DWORD2(v66[0]));
      uint64_t v41 = (char *)calloc(8uLL, 1uLL);
      uint64_t v42 = 0LL;
      uint64_t v43 = v41 + 1;
      do
      {
        id v44 = *((unsigned __int8 *)v68 + v42);
        *(v43 - 1) = a0123456789abcd_0[v44 >> 4];
        *uint64_t v43 = a0123456789abcd_0[v44 & 0xF];
        v43 += 2;
        ++v42;
      }

      while (v42 != 4);
      uint64_t v17 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v18 = v41;
      __int16 v19 = 8LL;
    }

    else
    {
      if (*(void *)v65 != 3001LL) {
        goto LABEL_44;
      }
      v68[0] = bswap64(*((unint64_t *)&v66[0] + 1));
      uint64_t v20 = (char *)calloc(0x10uLL, 1uLL);
      __int16 v21 = 0LL;
      __int16 v22 = v20 + 1;
      do
      {
        uint64_t v23 = *((unsigned __int8 *)v68 + v21);
        *(v22 - 1) = a0123456789abcd_0[v23 >> 4];
        CFStringRef v22 = a0123456789abcd_0[v23 & 0xF];
        v22 += 2;
        ++v21;
      }

      while (v21 != 8);
      uint64_t v17 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v18 = v20;
      __int16 v19 = 16LL;
    }

    goto LABEL_43;
  }

  if (*(void *)v65 == 1000LL)
  {
    uint64_t v30 = *((void *)&v66[0] + 1);
    uint64_t v31 = (UInt8 *)&v69;
    quot = *((void *)&v66[0] + 1);
    do
    {
      uint64_t v33 = lldiv(quot, 10LL);
      quot = v33.quot;
      if (v33.rem >= 0) {
        LOBYTE(v34) = v33.rem;
      }
      else {
        uint64_t v34 = -v33.rem;
      }
      *v31-- = v34 + 48;
    }

    while (v33.quot);
    if (v30 < 0) {
      void *v31 = 45;
    }
    else {
      ++v31;
    }
    uint64_t v9 = (char *)&v70 - (char *)v31;
    uint64_t v10 = v31;
    goto LABEL_47;
  }

  if (*(void *)v65 == 2000LL)
  {
    id v5 = 0LL;
    uint64_t v6 = DWORD2(v66[0]);
    do
    {
      uint64_t v7 = ldiv(v6, 10LL);
      uint64_t v6 = v7.quot;
      if (v7.rem >= 0) {
        LOBYTE(v_Block_object_dispose((const void *)(v61 - 208), 8) = v7.rem;
      }
      else {
        uint64_t v8 = -v7.rem;
      }
      *(&v69 + v5--) = v8 + 48;
    }

    while (v7.quot);
    uint64_t v9 = -v5;
    uint64_t v10 = (const UInt8 *)&v70 + v5;
LABEL_47:
    __int128 v51 = CFStringCreateWithBytes(0LL, v10, v9, 0x8000100u, 0);
    goto LABEL_48;
  }

LABEL_44:
  contentItems = self->_contentItems;
  if (contentItems) {
    id v47 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObjectsFromArray:](contentItems, "arrayByAddingObjectsFromArray:", v4));
  }
  else {
    id v47 = v4;
  }
  id v48 = self->_contentItems;
  self->_contentItems = v47;
}

        *(void *)(v76 + 16) = v81;
        return sub_1001A81D4( v74,  v76 + ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
               + *(void *)(v78 + 72) * v80,
                 type metadata accessor for HostedRoutingSession);
      }

      int8x16_t v82 = v113;
      sub_1001A8360((uint64_t)a1 + *(int *)(v17 + 28), v113, &qword_1003F9450);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v82, 1LL, v111) == 1)
      {
        sub_1001603DC(v82, &qword_1003F9450);
        id v74 = v108;
        sub_1001A80F8((uint64_t)a1, v108, type metadata accessor for HostedRoutingSession);
        v83 = v119;
        id v76 = v119[1];
        v84 = swift_isUniquelyReferenced_nonNull_native(v76);
        v83[1] = v76;
        if ((v84 & 1) == 0)
        {
          id v76 = sub_10019F720( 0,  *(void *)(v76 + 16) + 1LL,  1,  v76,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
          v83[1] = v76;
        }

        v78 = v117;
        v80 = *(void *)(v76 + 16);
        v85 = *(void *)(v76 + 24);
        v81 = v80 + 1;
        if (v80 >= v85 >> 1)
        {
          id v76 = sub_10019F720( v85 > 1,  v80 + 1,  1,  v76,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
          v83[1] = v76;
        }

        goto LABEL_43;
      }

      id v86 = v109;
      sub_1001A81D4(v82, v109, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      v87 = v119;
      if (*(void *)(v86 + 8))
      {
        if ((sub_10024B270() & 1) != 0)
        {
          uint64_t v88 = (uint64_t)a1;
          v89 = (uint64_t)v104;
LABEL_50:
          sub_1001A80F8(v88, v89, type metadata accessor for HostedRoutingSession);
          v93 = *v87;
          v94 = swift_isUniquelyReferenced_nonNull_native(*v87);
          uint64_t *v87 = v93;
          if ((v94 & 1) == 0)
          {
            v93 = sub_10019F720( 0,  *(void *)(v93 + 16) + 1LL,  1,  v93,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
            uint64_t *v87 = v93;
          }

          v95 = v117;
          v97 = *(void *)(v93 + 16);
          id v96 = *(void *)(v93 + 24);
          v98 = v97 + 1;
          if (v97 >= v96 >> 1)
          {
            v93 = sub_10019F720( v96 > 1,  v97 + 1,  1,  v93,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
            uint64_t *v87 = v93;
          }

            v103 = (os_log_s *)((v106 - 1) & v106);
            v104 = __clz(__rbit64(v106)) + (v91 << 6);
          }

          v425 = (os_log_t)v91;
          v426 = v103;
          v108 = (uint64_t *)(*(void *)(v422 + 48) + 16 * v104);
          uint64_t v10 = *v108;
          v109 = v108[1];
          if (!*(void *)(v83 + 16))
          {
            swift_bridgeObjectRetain();
LABEL_79:
            v152 = *(void *)(*(void *)&v2[v419]
                             + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members);
            swift_bridgeObjectRetain();
            v153 = sub_100158DD4(v10, v109, v152);
            swift_bridgeObjectRelease();
            v424 = v10;
            if ((v153 & 1) != 0)
            {
              v154 = *v418;
              swift_bridgeObjectRetain();
              v155 = v10;
              uint64_t v10 = v109;
              v156 = sub_100158DD4(v155, v109, v154);
              swift_bridgeObjectRelease();
              if ((v156 & 1) == 0)
              {
                __int128 v13 = *v423;
                if (*(void *)(*v423 + 16))
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_10015CAD4(v424, v109);
                  __int128 v16 = v157;
                  swift_bridgeObjectRelease();
                  if ((v16 & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
LABEL_89:
                    swift_bridgeObjectRelease();
                    unsigned __int8 v91 = (uint64_t)v425;
                    goto LABEL_23;
                  }

                  swift_bridgeObjectRelease();
                }

                if (qword_1003FF010 != -1) {
                  swift_once(&qword_1003FF010, sub_1001B2258);
                }
                v158 = sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
                v159 = v420;
                (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v420, v158, v9);
                v160 = v2;
                v161 = (uint64_t)v2;
                v162 = v109;
                swift_bridgeObjectRetain_n(v109, 2LL);
                v163 = v160;
                v164 = (os_log_s *)Logger.logObject.getter(v163);
                v165 = static os_log_type_t.info.getter();
                uint64_t v10 = v161;
                v166 = v165;
                if (os_log_type_enabled(v164, v165))
                {
                  v167 = swift_slowAlloc(32LL, -1LL);
                  LODWORD(v410) = v166;
                  v168 = v167;
                  v408 = swift_slowAlloc(8LL, -1LL);
                  v409 = v164;
                  v169 = (void *)v408;
                  v411 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
                  v433 = v411;
                  *(_DWORD *)v168 = v406.n128_u32[0];
                  v431 = (uint64_t)v163;
                  v170 = v163;
                  v171 = v404;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v404, v168 + 4, v168 + 12);
                  *v169 = v10;

                  *(_WORD *)(v168 + 12) = 2082;
                  v173 = *v405;
                  v172 = v405[1];
                  swift_bridgeObjectRetain();
                  v174 = v173;
                  uint64_t v9 = v412;
                  v431 = sub_10015ADC4(v174, v172, (uint64_t *)&v433);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v171, v168 + 14, v168 + 22);

                  uint64_t v10 = v407;
                  swift_bridgeObjectRelease();

                  *(_WORD *)(v168 + 22) = 2082;
                  swift_bridgeObjectRetain();
                  id v92 = v424;
                  v431 = sub_10015ADC4(v424, v162, (uint64_t *)&v433);
                  v175 = v171;
                  uint64_t v33 = v10;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v175, v168 + 24, v168 + 32);
                  swift_bridgeObjectRelease_n(v162, 2LL);
                  swift_bridgeObjectRelease();
                  v176 = v409;
                  _os_log_impl( (void *)&_mh_execute_header,  v409,  (os_log_type_t)v410,  "[%{public}@]<%{public}s> Starting timeout timer for: %{public}s.",  (uint8_t *)v168,  0x20u);
                  v177 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                  v178 = v408;
                  swift_arrayDestroy(v408, 1LL, v177);
                  swift_slowDealloc(v178, -1LL, -1LL);
                  v179 = (uint64_t)v411;
                  swift_arrayDestroy(v411, 2LL, v402);
                  swift_slowDealloc(v179, -1LL, -1LL);
                  swift_slowDealloc(v168, -1LL, -1LL);

                  (*(void (**)(char *, uint64_t))(v10 + 8))(v420, v9);
                }

                else
                {

                  swift_bridgeObjectRelease_n(v109, 2LL);
                  (*(void (**)(char *, uint64_t))(v33 + 8))(v159, v9);
                  id v92 = v424;
                }

                v93 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
                swift_unknownObjectWeakInit(v93 + 16, v163);
                v94 = (void *)swift_allocObject(&unk_1003A5B50, 40LL, 7LL);
                v94[2] = v93;
                v94[3] = v92;
                v94[4] = v162;
                v95 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
                v437 = sub_1001EE0B4;
                v438 = v94;
                v433 = (os_log_t)_NSConcreteStackBlock;
                v434 = 1107296256LL;
                v435 = sub_100157EA8;
                v436 = &unk_1003A5B68;
                __int128 v16 = (uint64_t)_Block_copy(&v433);
                id v96 = v438;
                v97 = v414;
                swift_bridgeObjectRetain();
                swift_release(v96);
                v98 = [v95 initWithInterval:0 repeats:v97 queue:v16 block:15.0];

                _Block_release((const void *)v16);
                v99 = v423;
                swift_beginAccess(v423, &v433, 33LL, 0LL);
                id v100 = (uint64_t)v98;
                __int128 v13 = (uint64_t)v99;
                sub_1001B8000(v100, v92, v162);
                swift_endAccess(&v433);
                uint64_t v2 = v415;
                v83 = (uint64_t)v413;
                unsigned __int8 v91 = (uint64_t)v425;
                goto LABEL_23;
              }

              swift_beginAccess(v418, &v433, 33LL, 0LL);
              sub_10015CCDC(v424, v109);
              swift_endAccess(&v433);
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v10 = v109;
              v180 = v423;
              if (*(void *)(*v423 + 16))
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_10015CAD4(v424, v109);
                v182 = v181;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v182 & 1) != 0)
                {
                  v183 = *v180;
                  if (*(void *)(*v180 + 16))
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v184 = sub_10015CAD4(v424, v109);
                    if ((v185 & 1) != 0) {
                      v186 = *(id *)(*(void *)(v183 + 56) + 8 * v184);
                    }
                    else {
                      v186 = 0LL;
                    }
                    v205 = v109;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }

                  else
                  {
                    v186 = 0LL;
                    v205 = v109;
                  }

                  [v186 invalidate];

                  swift_beginAccess(v180, &v433, 33LL, 0LL);
                  swift_bridgeObjectRetain();
                  sub_1001B8000(0LL, v424, v205);
                  swift_endAccess(&v433);
                  if (qword_1003FF010 != -1) {
                    swift_once(&qword_1003FF010, sub_1001B2258);
                  }
                  v206 = sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
                  v207 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
                  v208 = v33;
                  v209 = v392;
                  v207(v392, v206, v9);
                  v210 = v2;
                  swift_bridgeObjectRetain_n(v205, 2LL);
                  v211 = v208;
                  v212 = v210;
                  v213 = (os_log_s *)Logger.logObject.getter(v212);
                  v214 = static os_log_type_t.info.getter();
                  LODWORD(v411) = v214;
                  if (os_log_type_enabled(v213, v214))
                  {
                    v215 = swift_slowAlloc(32LL, -1LL);
                    v408 = swift_slowAlloc(8LL, -1LL);
                    v409 = v213;
                    v216 = (void *)v408;
                    v410 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
                    v433 = v410;
                    *(_DWORD *)v215 = v406.n128_u32[0];
                    v431 = (uint64_t)v212;
                    v217 = v212;
                    v218 = v404;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v404, v215 + 4, v215 + 12);
                    *v216 = v415;

                    *(_WORD *)(v215 + 12) = 2082;
                    v220 = *v405;
                    v219 = v405[1];
                    swift_bridgeObjectRetain();
                    v221 = v220;
                    uint64_t v9 = v412;
                    v431 = sub_10015ADC4(v221, v219, (uint64_t *)&v433);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v218, v215 + 14, v215 + 22);

                    swift_bridgeObjectRelease();
                    *(_WORD *)(v215 + 22) = 2080;
                    swift_bridgeObjectRetain();
                    v431 = sub_10015ADC4(v424, v205, (uint64_t *)&v433);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v218, v215 + 24, v215 + 32);
                    swift_bridgeObjectRelease_n(v205, 2LL);
                    swift_bridgeObjectRelease();
                    v222 = v409;
                    _os_log_impl( (void *)&_mh_execute_header,  v409,  (os_log_type_t)v411,  "[%{public}@]<%{public}s> Ending timeout timer early and unmapping: %s.",  (uint8_t *)v215,  0x20u);
                    v223 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                    v224 = v408;
                    swift_arrayDestroy(v408, 1LL, v223);
                    uint64_t v2 = v415;
                    swift_slowDealloc(v224, -1LL, -1LL);
                    v225 = (uint64_t)v410;
                    swift_arrayDestroy(v410, 2LL, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v225, -1LL, -1LL);
                    swift_slowDealloc(v215, -1LL, -1LL);

                    uint64_t v33 = v407;
                    (*(void (**)(char *, uint64_t))(v407 + 8))(v392, v9);
                  }

                  else
                  {

                    swift_bridgeObjectRelease_n(v205, 2LL);
                    (*(void (**)(char *, uint64_t))(v211 + 8))(v209, v9);
                    uint64_t v33 = v211;
                  }
                }
              }
            }

            __int128 v16 = v33;
            __int128 v13 = *v393;
            uint64_t v33 = (uint64_t)v384;
            if (!*(void *)(*v393 + 16)) {
              goto LABEL_154;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v187 = sub_10015CAD4(v424, v10);
            if ((v188 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              id result = (id)swift_bridgeObjectRelease();
              __break(1u);
              goto LABEL_159;
            }

            v189 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v187);
            v191 = *v189;
            v190 = v189[1];
            swift_bridgeObjectRetain();
            v411 = (os_log_s *)v10;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_beginAccess(v33, &v433, 33LL, 0LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v410 = (os_log_s *)v191;
            v192 = sub_10015CAD4(v191, v190);
            LOBYTE(v191) = v193;
            swift_bridgeObjectRelease();
            if ((v191 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v33);
              v195 = *(void *)v33;
              v431 = *(void *)v33;
              *(void *)uint64_t v33 = 0x8000000000000000LL;
              v196 = v424;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1001E3448();
                v195 = v431;
              }

              swift_bridgeObjectRelease();
              sub_100181080(v192, v195);
              *(void *)uint64_t v33 = v195;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              swift_bridgeObjectRelease();
              v196 = v424;
            }

            swift_endAccess(&v433);
            v197 = v393;
            swift_beginAccess(v393, &v433, 33LL, 0LL);
            swift_bridgeObjectRetain();
            v198 = v196;
            uint64_t v10 = (uint64_t)v411;
            v199 = sub_10015CAD4(v198, (uint64_t)v411);
            v201 = v200;
            swift_bridgeObjectRelease();
            if ((v201 & 1) != 0)
            {
              v202 = swift_isUniquelyReferenced_nonNull_native(*v197);
              v203 = *v197;
              v431 = *v197;
              *v197 = 0x8000000000000000LL;
              if ((v202 & 1) == 0)
              {
                sub_1001E3448();
                v203 = v431;
              }

              swift_bridgeObjectRelease();
              sub_100181080(v199, v203);
              *v197 = v203;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            swift_endAccess(&v433);
            swift_beginAccess(v383, &v433, 33LL, 0LL);
            sub_10015CCDC((uint64_t)v410, v190);
            __int128 v13 = v204;
            swift_endAccess(&v433);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v401 = 1;
            v83 = (uint64_t)v413;
            unsigned __int8 v91 = (uint64_t)v425;
            uint64_t v33 = v16;
            goto LABEL_23;
          }

          Hasher.init(_seed:)(&v433, *(void *)(v83 + 40));
          swift_bridgeObjectRetain();
          String.hash(into:)(&v433, v10, v109);
          v110 = Hasher._finalize()();
          __int128 v16 = -1LL << *(_BYTE *)(v83 + 32);
          v111 = v110 & ~v16;
          v112 = *(void *)(v83 + 48);
          v113 = (void *)(v112 + 16 * v111);
          v114 = v113[1];
          v115 = *v113 == v10 && v114 == v109;
          if (!v115 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v113, v114, v10, v109, 0LL) & 1) == 0)
          {
            __int128 v16 = ~v16;
            do
            {
              v111 = (v111 + 1) & v16;
              v138 = (void *)(v112 + 16 * v111);
              v139 = v138[1];
              v140 = *v138 == v10 && v139 == v109;
            }

            while (!v140 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v138, v139, v10, v109, 0LL) & 1) == 0);
          }

          v116 = v423;
          __int128 v13 = *v423;
          if (!*(void *)(*v423 + 16)) {
            goto LABEL_89;
          }
          v117 = v10;
          uint64_t v10 = v33;
          v118 = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v424 = v117;
          sub_10015CAD4(v117, v109);
          __int128 v16 = v119;
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if (qword_1003FF010 != -1) {
              swift_once(&qword_1003FF010, sub_1001B2258);
            }
            v120 = sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
            v121 = v403;
            (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v403, v120, v9);
            v122 = v2;
            swift_bridgeObjectRetain_n(v109, 2LL);
            v123 = v122;
            v124 = (os_log_s *)Logger.logObject.getter(v123);
            v125 = static os_log_type_t.info.getter();
            LODWORD(v411) = v125;
            if (os_log_type_enabled(v124, v125))
            {
              v126 = swift_slowAlloc(32LL, -1LL);
              v127 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
              v409 = v127;
              v410 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
              v433 = v410;
              *(_DWORD *)v126 = v406.n128_u32[0];
              v431 = (uint64_t)v123;
              v128 = v123;
              v129 = v404;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v404, v126 + 4, v126 + 12);
              *(void *)v127 = v415;

              *(_WORD *)(v126 + 12) = 2082;
              v131 = *v405;
              v130 = v405[1];
              swift_bridgeObjectRetain();
              v431 = sub_10015ADC4(v131, v130, (uint64_t *)&v433);
              v83 = (uint64_t)v413;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v129, v126 + 14, v126 + 22);

              swift_bridgeObjectRelease();
              *(_WORD *)(v126 + 22) = 2080;
              swift_bridgeObjectRetain();
              v132 = v424;
              v431 = sub_10015ADC4(v424, v109, (uint64_t *)&v433);
              v116 = v423;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, v129, v126 + 24, v126 + 32);
              swift_bridgeObjectRelease_n(v109, 2LL);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v411,  "[%{public}@]<%{public}s> Cancel timeout timer for: %s.",  (uint8_t *)v126,  0x20u);
              v133 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
              v134 = v409;
              swift_arrayDestroy(v409, 1LL, v133);
              v135 = v134;
              v118 = v415;
              swift_slowDealloc(v135, -1LL, -1LL);
              v136 = (uint64_t)v410;
              swift_arrayDestroy(v410, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v136, -1LL, -1LL);
              swift_slowDealloc(v126, -1LL, -1LL);

              v137 = v407;
              (*(void (**)(char *, uint64_t))(v407 + 8))(v403, v412);
            }

            else
            {

              swift_bridgeObjectRelease_n(v109, 2LL);
              v141 = v407;
              (*(void (**)(char *, uint64_t))(v407 + 8))(v121, v9);
              v137 = v141;
              v132 = v424;
            }

            v142 = *v116;
            if (*(void *)(*v116 + 16))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v143 = sub_10015CAD4(v132, v109);
              if ((v144 & 1) != 0) {
                v145 = *(id *)(*(void *)(v142 + 56) + 8 * v143);
              }
              else {
                v145 = 0LL;
              }
              v146 = v109;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              v145 = 0LL;
              v146 = v109;
            }

            [v145 invalidate];

            swift_beginAccess(v116, &v433, 33LL, 0LL);
            swift_bridgeObjectRetain();
            __int128 v16 = sub_10015CAD4(v132, v146);
            uint64_t v10 = (uint64_t)v116;
            v148 = v147;
            swift_bridgeObjectRelease();
            if ((v148 & 1) != 0)
            {
              v149 = swift_isUniquelyReferenced_nonNull_native(*(void *)v10);
              v150 = *(void *)v10;
              v431 = *(void *)v10;
              *(void *)uint64_t v10 = 0x8000000000000000LL;
              if ((v149 & 1) == 0)
              {
                sub_1001E398C(&qword_1003FA008);
                v150 = v431;
              }

              swift_bridgeObjectRelease();
              v151 = *(void **)(*(void *)(v150 + 56) + 8 * v16);
              sub_1001B1630(v16, v150);
              __int128 v16 = *(void *)v10;
              *(void *)uint64_t v10 = v150;

              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            __int128 v13 = v137;
            uint64_t v2 = v118;
            swift_endAccess(&v433);
            uint64_t v9 = v412;
            unsigned __int8 v91 = (uint64_t)v425;
            v101 = (unint64_t)v426;
            uint64_t v33 = v13;
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unsigned __int8 v91 = (uint64_t)v425;
            v101 = (unint64_t)v426;
            uint64_t v33 = v10;
          }
        }
      }
    }

    else
    {
LABEL_159:
      __break(1u);
    }

    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
  }

  else
  {
    if (qword_1003FF010 != -1) {
LABEL_157:
    }
      swift_once(&qword_1003FF010, sub_1001B2258);
    v67 = sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v16, v67, v9);
    id v68 = v2;
    v69 = (os_log_s *)Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter();
    v71 = v70;
    if (os_log_type_enabled(v69, v70))
    {
      int8x16_t v72 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v425) = v71;
      v73 = v72;
      id v74 = (char **)swift_slowAlloc(8LL, -1LL);
      v426 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
      v433 = v426;
      *(_DWORD *)v73 = 138543874;
      v412 = v9;
      v441 = (uint64_t)v68;
      v407 = v10;
      id v75 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v73 + 4, v73 + 12);
      *id v74 = v68;

      *(_WORD *)(v73 + 12) = 2082;
      id v76 = *(void *)&v75[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      v77 = *(void *)&v75[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v441 = sub_10015ADC4(v76, v77, (uint64_t *)&v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v73 + 14, v73 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 22) = 2080;
      v441 = sub_10015ADC4(0xD000000000000037LL, 0x800000010033C070LL, (uint64_t *)&v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, v442, v73 + 24, v73 + 32);
      _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v425,  "[%{public}@]<%{public}s> %s No group session when updateParticipants called.",  (uint8_t *)v73,  0x20u);
      v78 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v74, 1LL, v78);
      swift_slowDealloc(v74, -1LL, -1LL);
      v79 = v426;
      swift_arrayDestroy(v426, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v407 + 8))(v16, v412);
    }

    else
    {

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v16, v9);
    }
  }

  return result;
}

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

LABEL_44:
  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull _MSVHashGetDigest(MSVHash)"));
  [v55 handleFailureInFunction:v56 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  __int16 v57 = &stru_1003AE680;
LABEL_49:

  return v57;
}

  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSAssertionHandler currentHandler]( &OBJC_CLASS___NSAssertionHandler,  "currentHandler",  4001LL,  *(void *)&v57.h0));
  double v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull _MSVHashGetDigest(MSVHash)"));
  [v52 handleFailureInFunction:v53 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  uint64_t v54 = &stru_1003AE680;
LABEL_49:

  __int16 v55 = objc_claimAutoreleasedReturnValue(-[__CFString substringToIndex:](v54, "substringToIndex:", 7LL));
  uint64_t v56 = (void *)qword_1003FDC08;
  qword_1003FDC08 = v55;
}

id sub_10001F49C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 hashedUserIdentityIdentifier]);
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

uint64_t sub_10001F68C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((_DWORD)a2)
  {
    uint64_t v6 = _MRLogForCategory(12LL, a2);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      uint64_t v9 = (void *)v8;
      if (a4 > 3) {
        uint64_t v10 = @"Feature disabled";
      }
      else {
        uint64_t v10 = off_10039A250[a4];
      }
      int v12 = 138412546;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      __int128 v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionApprovalManager] Auto-approving request %@, reason: %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001F7A8(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10001F844;
    v4[3] = &unk_10039A190;
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 48);
    id v5 = *(id *)(a1 + 40);
    [v3 shouldAutoApproveIdentity:v2 completion:v4];
  }

uint64_t sub_10001F844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001FA24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10001FA48(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))( a1[4],  *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL),  *(void *)(*(void *)(a1[6] + 8LL) + 24LL));
}

uint64_t sub_10001FA6C(void *a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  id v4 = (void *)a1[4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 hashedUserIdentityIdentifier]);
  unsigned int v6 = [v4 isEqualToString:v5];

  if (v6)
  {
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 1LL;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  return v6 ^ 1;
}

void sub_10001FC38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
  unsigned int v5 = [v8 intersectsSet:v4];

  if (v5)
  {
    uint64_t v6 = 1LL;
    uint64_t v7 = 2LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v6, v7);
}

id MRDGroupSessionAutoApproveReasonEnum(id a1)
{
  return a1;
}

void sub_10001FF60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
}

uint64_t sub_10002009C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100020780(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _MRLogForCategory(10LL, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B50E8(a1);
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v12 = _MRLogForCategory(10LL, v11);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v13 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v22 = 138544130;
      uint64_t v23 = v14;
      __int16 v24 = 2114;
      __int128 v25 = v15;
      __int16 v26 = 2112;
      __int128 v27 = v16;
      __int16 v28 = 2048;
      uint64_t v29 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  (uint8_t *)&v22,  0x2Au);
    }

    else
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v22 = 138543874;
      uint64_t v23 = v19;
      __int16 v24 = 2114;
      __int128 v25 = v15;
      __int16 v26 = 2048;
      __int128 v27 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v22,  0x20u);
    }
  }

LABEL_10:
  uint64_t v21 = *(void *)(a1 + 64);
  if (v21) {
    (*(void (**)(uint64_t, id, id, void))(v21 + 16))(v21, v5, v7, *(void *)(a1 + 56));
  }
}

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

  __int16 v26 = 0u;
  __int128 v27 = 0u;
  __int16 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v17 = *(id *)(a1 + 32);
  uint64_t v18 = [v17 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v25;
    do
    {
      uint64_t v21 = 0LL;
      do
      {
        if (*(void *)v25 != v20) {
          objc_enumerationMutation(v17);
        }
        int v22 = *(void **)(*(void *)(a1 + 48) + 152LL);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * (void)v21), "uid", (void)v24));
        [v22 removeAuthorizationCallbackForRouteID:v23];

        uint64_t v21 = (char *)v21 + 1;
      }

      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }

    while (v19);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

  v23.receiver = self;
  v23.super_class = (Class)&OBJC_CLASS___MRDConenctToGroupLeaderOperation;
  -[MRDConenctToGroupLeaderOperation finishWithError:](&v23, "finishWithError:", v5);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConenctToGroupLeaderOperation completionBlock](self, "completionBlock"));

  if (v21)
  {
    int v22 = (void (**)(void))objc_claimAutoreleasedReturnValue(-[MRDConenctToGroupLeaderOperation completionBlock](self, "completionBlock"));
    v22[2]();
  }
}

  v23.receiver = self;
  v23.super_class = (Class)&OBJC_CLASS___MRDConenctToClusterLeaderOperation;
  -[MRDConenctToClusterLeaderOperation finishWithError:](&v23, "finishWithError:", v5);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConenctToClusterLeaderOperation completionBlock](self, "completionBlock"));

  if (v21)
  {
    int v22 = (void (**)(void))objc_claimAutoreleasedReturnValue(-[MRDConenctToClusterLeaderOperation completionBlock](self, "completionBlock"));
    v22[2]();
  }
}

  uint64_t v21 = _MRLogForCategory(10LL, v9);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1002BAF28(a1, (uint64_t)v6, v14);
  }
LABEL_16:

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_filter:", &stru_1003A26D8));
  objc_msgSend(*(id *)(a1 + 56), "setNumberOfErrorsAtTimeout:", objc_msgSend(v24, "count"));

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_filter:", &stru_1003A26F8));
  objc_msgSend(*(id *)(a1 + 56), "setNumberOfSuccessAtTimeout:", objc_msgSend(v25, "count"));

  objc_msgSend( *(id *)(a1 + 56),  "setNumberOfPendingAtTimeout:",  (_BYTE *)objc_msgSend(*(id *)(a1 + 56), "numberOfEndpoints") - (_BYTE *)objc_msgSend(v5, "count"));
  [*(id *)(a1 + 56) trackWithError:v6];
  __int16 v26 = *(void *)(a1 + 64);
  if (v26) {
    (*(void (**)(uint64_t, id, NSError *))(v26 + 16))(v26, v5, v6);
  }
}

LABEL_13:
}

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease_n(v2, 2LL);
  return 0LL;
}

  swift_bridgeObjectRelease_n(v3, 2LL);
  return 0LL;
}

  swift_bridgeObjectRetain();
  return a1;
}

void sub_1000209AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
  uint64_t v9 = -[NSString initWithFormat:](v7, "initWithFormat:", @"Calling previewCallback with endpoint %@", v8);

  uint64_t v11 = _MRLogForCategory(10LL, v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v17 = v13;
    __int16 v18 = 2114;
    uint64_t v19 = v14;
    __int16 v20 = 2112;
    uint64_t v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    (*(void (**)(uint64_t, id, id))(v15 + 16))(v15, v5, v6);
  }
}

uint64_t sub_100020B08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100020B1C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

uint64_t sub_100020B7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100020B90(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

id sub_100020BF0(id a1, MRDeviceInfo *a2)
{
  return -[MRDeviceInfo deviceUID](a2, "deviceUID");
}

void sub_100020BF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createOptimizedEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100020C74(uint64_t a1, void *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "msv_map:", &stru_10039A3E8));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoverGroup]);
  [v5 end];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createEndpoint]);
  [v6 start];

  id v7 = [v4 count];
  id v8 = v4;
  if (!v7)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceUID]);
    uint64_t v15 = v2;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
  }

  double v9 = *(double *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100020E18;
  v11[3] = &unk_10039A430;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDCreateEndpointRequest,  "createEndpointWithOutputDeviceUIDs:timeout:details:completion:",  v8,  v10,  v11,  v9);
  if (!v7)
  {
  }
}

id sub_100020E10(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

void sub_100020E18(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createEndpoint]);
  [v6 endWithError:v5];

  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100020EB4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) findMyGroupLeader]);
  [v6 endWithError:v5];

  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100021280(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v12 = _MRLogForCategory(10LL, v11);
    double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v13 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138544130;
      uint64_t v22 = v14;
      __int16 v23 = 2114;
      __int16 v24 = v15;
      __int16 v25 = 2112;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  (uint8_t *)&v21,  0x2Au);
    }

    else
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      uint64_t v22 = v19;
      __int16 v23 = 2114;
      __int16 v24 = v15;
      __int16 v25 = 2048;
      __int16 v26 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v21,  0x20u);
    }

    goto LABEL_10;
  }

  uint64_t v8 = _MRLogForCategory(10LL, v6);
  double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1002B50E8(a1);
  }
LABEL_10:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000214A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  id v9 = *(id *)(a1 + 32);
  v8(v7, a4, a5);
}

  ;
}

void sub_100021524( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_10002154C(void *a1, const char *a2)
{
  return [a1 timeIntervalSinceDate:*(void *)(v2 + 48)];
}

uint64_t sub_1000216F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100021700(uint64_t a1)
{
}

void sub_100021708(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000217BC(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0LL, 60000000000LL);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100021864;
  v7[3] = &unk_100398E60;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_after(v2, v4, v7);
}

id sub_100021864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(2LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Purging command: %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 8) removeObject:*(void *)(a1 + 32)];
}

id sub_100021970(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
}

void sub_10002226C(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    dispatch_time_t v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
    if (!v2)
    {
      uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void **)(v4 + 8);
      *(void *)(v4 + _Block_object_dispose((const void *)(v15 - 128), 8) = v3;

      dispatch_time_t v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 40)]);

    if (!v6)
    {
      id v8 = [*(id *)(a1 + 48) copy];
      id v7 = objc_retainBlock(v8);
      [*(id *)(*(void *)(a1 + 32) + 8) setObject:v7 forKeyedSubscript:*(void *)(a1 + 40)];
    }
  }

id sub_100022398(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_10002247C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000224A4(uint64_t a1)
{
}

void sub_1000224AC(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1000226F0(id a1)
{
  return +[MRDUIActivityController deviceSupportsActivities]( &OBJC_CLASS___MRDUIActivityController,  "deviceSupportsActivities");
}

id *sub_1000230F4(id *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return (id *)_[result[4] _activeUserDidChange:a2 previous:a3];
  }
  return result;
}

void sub_100023110(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(11LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B518C((uint64_t)v6, v10);
    }
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[MRDUIActivityServer] Setting active user: %@",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(a1 + 32) setNowPlayingActivityUserIdentifier:v5];
  }
}

id sub_10002348C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

BOOL sub_1000237C8(id a1, MRDUIClient *a2)
{
  return -[MRDUIClient hasRouteRecommendationAssertion](a2, "hasRouteRecommendationAssertion");
}

BOOL sub_100023AFC(id a1, MRDUIClient *a2)
{
  return -[MRDUIClient hasGroupSessionNearbyAssertion](a2, "hasGroupSessionNearbyAssertion");
}

void sub_100024624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100024650(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    [WeakRetained setNowPlayingActivityAssertionEndTimer:0];
    unsigned int v2 = [v6 hasNowPlayingAssertion];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v6 activityController]);
    uint64_t v4 = v3;
    if (v2)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 combinedSuppressedBundleIdentifiers]);
      [v4 updateNowPlayingActivityState:1 suppressedBundleIdentifiers:v5];
    }

    else
    {
      [v3 endNowPlayingActivity];
    }

    id WeakRetained = v6;
  }
}

void sub_100024780(uint64_t a1)
{
  id v17 = *(id *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) electedPlayer]);
  if (v17 == v2)
  {
  }

  else
  {
    unsigned __int8 v3 = [v17 isEqual:v2];

    if ((v3 & 1) == 0)
    {
      [*(id *)(a1 + 40) setElectedPlayer:*(void *)(a1 + 32)];
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 MRUIClient]);

      if (v5)
      {
        uint64_t v7 = _MRLogForCategory(11LL, v6);
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          sub_1002B5318(v8, v9, v10, v11, v12, v13, v14, v15);
        }

        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
        [v16 nowPlayingUIWakingPlayerEventAssertionDuration];
        objc_msgSend(v5, "takeAssertion:forReason:duration:", 6, @"MediaRemoteUIProcessElectedPlayerChange");
      }
    }
  }

void sub_10002494C(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) electedPlayer]);
  if (v1 == v2)
  {
  }

  else
  {
    unsigned __int8 v3 = v2;
    unsigned int v4 = [v1 isEqual:v2];

    if (!v4) {
      return;
    }
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 MRUIClient]);

  if (v6)
  {
    uint64_t v8 = _MRLogForCategory(11LL, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_1002B5348(v9, v10, v11, v12, v13, v14, v15, v16);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v17 nowPlayingUIWakingPlayerEventAssertionDuration];
    objc_msgSend( v6,  "takeAssertion:forReason:duration:",  6,  @"MediaRemoteUIProcessElectedPlayerIsPlayingChange");
  }
}

void sub_100024AE0(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) electedPlayer]);
  if (v1 == v2)
  {
  }

  else
  {
    unsigned __int8 v3 = v2;
    unsigned int v4 = [v1 isEqual:v2];

    if (!v4) {
      return;
    }
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 MRUIClient]);

  if (v6)
  {
    uint64_t v8 = _MRLogForCategory(11LL, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_1002B5378(v9, v10, v11, v12, v13, v14, v15, v16);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v17 nowPlayingUIWakingPlayerEventAssertionDuration];
    objc_msgSend( v6,  "takeAssertion:forReason:duration:",  6,  @"MediaRemoteUIProcessElectedPlayerPlaybackQueueChange");
  }
}

void sub_100024F08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100024F34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = _MRLogForCategory(11LL, v1);
    unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDUIActivityServer] Resetting ASE and cleaning now playing assertion end date",  v11,  2u);
    }

    id v5 = [[MRUpdateActiveSystemEndpointRequest alloc] initWithOutputDeviceUID:0 type:0 reason:@"Initial active user changed"];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 routingServer]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 systemEndpointController]);
    [v8 updateSystemEndpointForRequest:v5];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
    [WeakRetained setNowPlayingActivityAssertionEndDate:v9];

    [WeakRetained setActiveUserChangedTimer:0];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeUserController]);
    [v10 stopObserving];
  }
}

void sub_100025108(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activityController]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 currentActivitiesInfo]);
  [*(id *)(a1 + 32) setUiActivitiesInfo:v2];
}

void sub_1000252E4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002561C(uint64_t a1)
{
}

void sub_1000257AC(uint64_t a1)
{
}

void sub_100025BEC(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userState]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 dsid]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 stringValue]);
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  memset(&v57, 0, sizeof(v57));
  CC_SHA1_Init(&v57);
  id v4 = v3;
  CC_SHA1_Update(&v57, [v4 UTF8String], (CC_LONG)objc_msgSend(v4, "length"));

  memset(&v65[8], 0, 64);
  *(void *)uint64_t v65 = 4001LL;
  CC_SHA1_Final(&v65[8], &v57);
  v66[0] = *(_OWORD *)v65;
  v66[1] = *(_OWORD *)&v65[16];
  v66[2] = *(_OWORD *)&v65[32];
  v66[3] = *(_OWORD *)&v65[48];
  uint64_t v67 = *(void *)&v65[64];
  if (*(uint64_t *)v65 > 3999)
  {
    if (*(uint64_t *)v65 > 4255)
    {
      if (*(void *)v65 == 4256LL)
      {
        id v45 = (unsigned __int8 *)v66 + 8;
        id v46 = (char *)calloc(0x40uLL, 1uLL);
        id v47 = v46;
        for (uint64_t i = 0LL; i != 64; i += 2LL)
        {
          unsigned int v49 = *v45++;
          id v50 = &v46[i];
          char *v50 = a0123456789abcd_0[(unint64_t)v49 >> 4];
          v50[1] = a0123456789abcd_0[v49 & 0xF];
        }

        id v17 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v18 = v47;
        uint64_t v19 = 64LL;
      }

      else
      {
        if (*(void *)v65 != 4512LL) {
          goto LABEL_44;
        }
        __int16 v24 = (unsigned __int8 *)v66 + 8;
        __int16 v25 = (char *)calloc(0x80uLL, 1uLL);
        __int16 v26 = v25;
        for (uint64_t j = 0LL; j != 128; j += 2LL)
        {
          unsigned int v28 = *v24++;
          uint64_t v29 = &v25[j];
          char *v29 = a0123456789abcd_0[(unint64_t)v28 >> 4];
          v29[1] = a0123456789abcd_0[v28 & 0xF];
        }

        id v17 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v18 = v26;
        uint64_t v19 = 128LL;
      }
    }

    else if (*(void *)v65 == 4000LL)
    {
      __int16 v35 = (unsigned __int8 *)v66 + 8;
      uint32_t v36 = (char *)calloc(0x20uLL, 1uLL);
      uint64_t v37 = v36;
      for (uint64_t k = 0LL; k != 32; k += 2LL)
      {
        unsigned int v39 = *v35++;
        uint64_t v40 = &v36[k];
        *uint64_t v40 = a0123456789abcd_0[(unint64_t)v39 >> 4];
        v40[1] = a0123456789abcd_0[v39 & 0xF];
      }

      id v17 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v18 = v37;
      uint64_t v19 = 32LL;
    }

    else
    {
      if (*(void *)v65 != 4001LL) {
        goto LABEL_44;
      }
      uint64_t v11 = (unsigned __int8 *)v66 + 8;
      uint64_t v12 = (char *)calloc(0x28uLL, 1uLL);
      uint64_t v13 = v12;
      for (uint64_t m = 0LL; m != 40; m += 2LL)
      {
        unsigned int v15 = *v11++;
        uint64_t v16 = &v12[m];
        char *v16 = a0123456789abcd_0[(unint64_t)v15 >> 4];
        v16[1] = a0123456789abcd_0[v15 & 0xF];
      }

      id v17 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v18 = v13;
      uint64_t v19 = 40LL;
    }

void sub_100026A54(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[MRSharedSettings currentSettings](&OBJC_CLASS___MRSharedSettings, "currentSettings"));
  else {
    uint64_t v1 = 0LL;
  }
  id v2 = (void *)qword_1003FDC18;
  qword_1003FDC18 = (uint64_t)v1;
}

id sub_100026B88(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateIsMusicAppInstalled];
}

LABEL_107:
    v131 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v96,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v97,  v98,  4LL,  1LL,  &OBJC_CLASS___MRUserIdentity);
LABEL_112:
    v124 = (__CFString *)v131;
    goto LABEL_113;
  }

  if (*(uint64_t *)v173 > 2999)
  {
    if (*(void *)v173 == 3000LL)
    {
      LODWORD(v176[0]) = bswap32(DWORD2(v174[0]));
      v120 = (char *)calloc(8uLL, 1uLL);
      v121 = 0LL;
      v122 = v120 + 1;
      do
      {
        v123 = *((unsigned __int8 *)v176 + v121);
        *(v122 - 1) = a0123456789abcd_0[v123 >> 4];
        *v122 = a0123456789abcd_0[v123 & 0xF];
        v122 += 2;
        ++v121;
      }

      while (v121 != 4);
      v124 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v120,  8LL,  4LL,  1LL);
      goto LABEL_114;
    }

    v83 = v39;
    if (*(void *)v173 != 3001LL) {
      goto LABEL_108;
    }
    v176[0] = bswap64(*((unint64_t *)&v174[0] + 1));
    v99 = (char *)calloc(0x10uLL, 1uLL);
    id v100 = 0LL;
    v101 = v99 + 1;
    do
    {
      v102 = *((unsigned __int8 *)v176 + v100);
      *(v101 - 1) = a0123456789abcd_0[v102 >> 4];
      *v101 = a0123456789abcd_0[v102 & 0xF];
      v101 += 2;
      ++v100;
    }

    while (v100 != 8);
    id v96 = objc_alloc(&OBJC_CLASS___NSString);
    v97 = v99;
    v98 = 16LL;
    goto LABEL_107;
  }

  v83 = v39;
  if (*(void *)v173 == 1000LL)
  {
    v109 = *((void *)&v174[0] + 1);
    v110 = (UInt8 *)&v177;
    uint64_t quot = *((void *)&v174[0] + 1);
    do
    {
      v112 = lldiv(quot, 10LL);
      uint64_t quot = v112.quot;
      if (v112.rem >= 0) {
        LOBYTE(v113) = v112.rem;
      }
      else {
        v113 = -v112.rem;
      }
      *v110-- = v113 + 48;
    }

    while (v112.quot);
    if (v109 < 0) {
      *v110 = 45;
    }
    else {
      ++v110;
    }
    uint64_t v88 = (char *)v178 - (char *)v110;
    v89 = v110;
    goto LABEL_111;
  }

  if (*(void *)v173 == 2000LL)
  {
    v84 = 0LL;
    v85 = DWORD2(v174[0]);
    do
    {
      id v86 = ldiv(v85, 10LL);
      v85 = v86.quot;
      if (v86.rem >= 0) {
        LOBYTE(v87) = v86.rem;
      }
      else {
        v87 = -v86.rem;
      }
      *(&v177 + v84--) = v87 + 48;
    }

    while (v86.quot);
    uint64_t v88 = -v84;
    v89 = (const UInt8 *)v178 + v84;
LABEL_111:
    v131 = CFStringCreateWithBytes(0LL, v89, v88, 0x8000100u, 0);
    goto LABEL_112;
  }

LABEL_108:
  v132 = (void *)objc_claimAutoreleasedReturnValue( +[NSAssertionHandler currentHandler]( &OBJC_CLASS___NSAssertionHandler,  "currentHandler",  &OBJC_CLASS___MRUserIdentity));
  v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull _MSVHashGetDigest(MSVHash)"));
  [v132 handleFailureInFunction:v133 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  v124 = &stru_1003AE680;
LABEL_113:
  unsigned int v39 = v83;
LABEL_114:

  v134 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringToIndex:](v124, "substringToIndex:", 7LL));
  v135 = (void *)objc_claimAutoreleasedReturnValue([v14 userProfile]);
  v136 = (void *)objc_claimAutoreleasedReturnValue([v135 name]);
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( -[MRDMusicUserStateCenter basicIdentityWithIdentifier:displayName:]( v153,  "basicIdentityWithIdentifier:displayName:",  v134,  v136));

LABEL_115:
  p_locuint64_t k = lock;
  if (v26)
  {
    os_unfair_lock_unlock(lock);
    v7[2](v7, v26, 0LL);
LABEL_125:

    goto LABEL_126;
  }

LABEL_117:
  v137 = (void *)objc_claimAutoreleasedReturnValue( -[MRDMusicUserStateCenter finishedWaitingForCloudStateDSIDs]( self,  "finishedWaitingForCloudStateDSIDs",  v153));
  v138 = [v137 containsObject:v11];

  if ((v138 & 1) == 0)
  {
    v139 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicUserStateCenter dsidToPendingCompletionMap](self, "dsidToPendingCompletionMap"));

    if (!v139)
    {
      v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      -[MRDMusicUserStateCenter setDsidToPendingCompletionMap:](self, "setDsidToPendingCompletionMap:", v140);
    }

    v141 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicUserStateCenter dsidToPendingCompletionMap](self, "dsidToPendingCompletionMap"));
    v142 = (void *)objc_claimAutoreleasedReturnValue([v141 objectForKeyedSubscript:v11]);

    if (!v142)
    {
      v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      v144 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicUserStateCenter dsidToPendingCompletionMap](self, "dsidToPendingCompletionMap"));
      [v144 setObject:v143 forKeyedSubscript:v11];

      v145 = dispatch_time(0LL, 5000000000LL);
      Queue = MRGroupSessionSubsystemGetQueue(v145);
      v147 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(Queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100027D90;
      block[3] = &unk_100398E60;
      void block[4] = self;
      v157 = v11;
      dispatch_after(v145, v147, block);
    }

    v148 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicUserStateCenter dsidToPendingCompletionMap](self, "dsidToPendingCompletionMap"));
    v149 = (void *)objc_claimAutoreleasedReturnValue([v148 objectForKeyedSubscript:v11]);
    v150 = objc_retainBlock(v7);
    [v149 addObject:v150];
  }

  os_unfair_lock_unlock(p_lock);
  v151 = (void *)objc_claimAutoreleasedReturnValue( -[MRDMusicUserStateCenter finishedWaitingForCloudStateDSIDs]( self,  "finishedWaitingForCloudStateDSIDs"));
  v152 = [v151 containsObject:v11];

  if (v152)
  {
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  4LL,  @"No identity found for dsid."));
    ((void (**)(id, void *, void *))v7)[2](v7, 0LL, v26);
    goto LABEL_125;
  }

LABEL_126:
}

uint64_t sub_100027D24(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 dsid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringValue]);
  uint64_t v5 = v4;
  else {
    uint64_t v6 = (uint64_t)objc_msgSend(v4, "isEqual:");
  }

  return v6;
}

void sub_100027D90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedWaitingForCloudStateDSIDs]);
  [v2 addObject:*(void *)(a1 + 40)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dsidToPendingCompletionMap]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dsidToPendingCompletionMap]);
  [v5 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  if (v4)
  {
    uint64_t NotificationQueue = MRGroupSessionSubsystemGetNotificationQueue();
    ldiv_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(NotificationQueue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100027E94;
    block[3] = &unk_100399250;
    id v9 = v4;
    dispatch_async(v7, block);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
}

void sub_100027E94(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v10;
    uint64_t v5 = MRGroupSessionError;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8LL * (void)v6);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  v5,  4LL,  @"No identity found for dsid.",  (void)v9));
        (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v3 != v6);
      id v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v3);
  }
}

LABEL_128:
LABEL_129:
            goto LABEL_130;
          }

          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v19 userProfile]);
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 name]);

          unsigned int v15 = v145;
          if (!v32) {
            goto LABEL_128;
          }
          v143 = v19;
          uint64_t v34 = _MRLogForCategory(12LL, v33);
          __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v145;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "[MRDMusicUserStateCenter] No social profile for dsid: %@. Will use basic identity.",  buf,  0xCu);
          }

          uint32_t v36 = v145;
          v165 = 0u;
          v166 = 0u;
          v163 = 0u;
          v164 = 0u;
          v161 = 0u;
          v162 = 0u;
          v159 = 0u;
          v160 = 0u;
          v157 = 0u;
          v158 = 0u;
          v156 = 0u;
          memset(&buf[8], 0, 32);
          *(void *)__int128 buf = 4001LL;
          CC_SHA1_Init((CC_SHA1_CTX *)&buf[8]);
          uint64_t v37 = v36;
          uint64_t v38 = [v37 UTF8String];
          unsigned int v39 = (size_t)[v37 length];
          if (*(uint64_t *)buf > 3999)
          {
            if (*(uint64_t *)buf > 4255)
            {
              if (*(void *)buf == 4256LL)
              {
                CC_SHA256_Update((CC_SHA256_CTX *)&buf[8], v38, v39);
              }

              else if (*(void *)buf == 4512LL)
              {
                CC_SHA512_Update((CC_SHA512_CTX *)&buf[8], v38, v39);
              }
            }

            else if (*(void *)buf == 4000LL)
            {
              CC_MD5_Update((CC_MD5_CTX *)&buf[8], v38, v39);
            }

            else if (*(void *)buf == 4001LL)
            {
              CC_SHA1_Update((CC_SHA1_CTX *)&buf[8], v38, v39);
            }
          }

          else if (*(uint64_t *)buf > 2999)
          {
            if (*(void *)buf == 3000LL)
            {
              sub_10002A9CC(&buf[8], v38, v39);
            }

            else if (*(void *)buf == 3001LL)
            {
              sub_10002AB74(&buf[8], v38, v39);
            }
          }

          else if (*(void *)buf)
          {
            if (*(void *)buf == 2000LL)
            {
              uint64_t v40 = &buf[buf[19] + 16];
              switch((((_BYTE)v39 + buf[19]) & 3) - buf[19])
              {
                case 0:
                  break;
                case 1:
                  *uint64_t v40 = *v38;
                  break;
                case 2:
                  uint64_t v43 = *(_WORD *)v38;
                  goto LABEL_38;
                case 3:
                  uint64_t v43 = *(_WORD *)v38;
                  v40[2] = v38[2];
LABEL_38:
                  *(_WORD *)uint64_t v40 = v43;
                  break;
                default:
                  memcpy(v40, v38, (((v39 + buf[19]) & 3) - buf[19]));
                  break;
              }

              *(_DWORD *)&buf[12] += v39;
            }
          }

          else
          {
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void _MSVHasherAppendBytes(MSVHasher * _Nonnull, const void * _Nonnull, size_t)"));
            [v41 handleFailureInFunction:v42 file:@"MSVHasher+Algorithms.h" lineNumber:262 description:@"Cannot append to unknown hasher algorithm"];
          }

          memset(&v167[8], 0, 64);
          *(void *)v167 = *(void *)buf;
          if (*(uint64_t *)buf > 3000)
          {
            unsigned int v15 = v145;
            if (*(uint64_t *)buf <= 4000)
            {
              if (*(void *)buf == 3001LL)
              {
                *(void *)&v167[8] = sub_10002ADD4(&buf[8]);
              }

              else if (*(void *)buf == 4000LL)
              {
                CC_MD5_Final(&v167[8], (CC_MD5_CTX *)&buf[8]);
              }
            }

            else
            {
              switch(*(void *)buf)
              {
                case 0xFA1LL:
                  CC_SHA1_Final(&v167[8], (CC_SHA1_CTX *)&buf[8]);
                  break;
                case 0x10A0LL:
                  CC_SHA256_Final(&v167[8], (CC_SHA256_CTX *)&buf[8]);
                  break;
                case 0x11A0LL:
                  CC_SHA512_Final(&v167[8], (CC_SHA512_CTX *)&buf[8]);
                  break;
              }
            }

            goto LABEL_77;
          }

          unsigned int v15 = v145;
          if (*(uint64_t *)buf <= 1999)
          {
            if (*(void *)buf)
            {
              if (*(void *)buf == 1000LL)
              {
                unint64_t v44 = (*(void *)&buf[8] + *(void *)&buf[16]) ^ __ROR8__(*(void *)&buf[16], 51);
                id v45 = *(void *)&buf[24] + (*(void *)&buf[32] ^ v156);
                id v46 = __ROR8__(*(void *)&buf[32] ^ v156, 48);
                id v47 = (v45 ^ v46) + __ROR8__(*(void *)&buf[8] + *(void *)&buf[16], 32);
                id v48 = v47 ^ __ROR8__(v45 ^ v46, 43);
                unsigned int v49 = v45 + v44;
                id v50 = v49 ^ __ROR8__(v44, 47);
                CFStringRef v51 = (v47 ^ v156) + v50;
                uint64_t v52 = v51 ^ __ROR8__(v50, 51);
                double v53 = (__ROR8__(v49, 32) ^ 0xFFLL) + v48;
                uint64_t v54 = __ROR8__(v48, 48);
                uint64_t v55 = __ROR8__(v51, 32) + (v53 ^ v54);
                uint64_t v56 = v55 ^ __ROR8__(v53 ^ v54, 43);
                CC_SHA1_CTX v57 = v52 + v53;
                __int128 v58 = v57 ^ __ROR8__(v52, 47);
                __int128 v59 = v58 + v55;
                __int128 v60 = v59 ^ __ROR8__(v58, 51);
                __int128 v61 = __ROR8__(v57, 32) + v56;
                __int128 v62 = __ROR8__(v56, 48);
                __int128 v63 = __ROR8__(v59, 32) + (v61 ^ v62);
                __int128 v64 = v63 ^ __ROR8__(v61 ^ v62, 43);
                uint64_t v65 = v60 + v61;
                int v66 = v65 ^ __ROR8__(v60, 47);
                uint64_t v67 = v66 + v63;
                id v68 = v67 ^ __ROR8__(v66, 51);
                char v69 = __ROR8__(v65, 32) + v64;
                uint64_t v70 = __ROR8__(v64, 48);
                v71 = __ROR8__(v67, 32) + (v69 ^ v70);
                int8x16_t v72 = v71 ^ __ROR8__(v69 ^ v70, 43);
                v73 = v68 + v69;
                *(void *)&buf[8] = v71;
                *(void *)&uint8_t buf[16] = v73 ^ __ROR8__(v68, 47);
                *(void *)&_BYTE buf[24] = __ROR8__(v73, 32);
                *(void *)&buf[32] = v72;
                *(void *)&v167[8] = *(void *)&buf[16] ^ v71 ^ *(void *)&buf[24] ^ v72;
              }
            }

            else
            {
              id v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
              id v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)"));
              [v75 handleFailureInFunction:v76 file:@"MSVHasher+Algorithms.h" lineNumber:156 description:@"Cannot finalize unknown hasher algorithm"];
            }

LABEL_77:
            v168[0] = *(_OWORD *)v167;
            v168[1] = *(_OWORD *)&v167[16];
            v168[2] = *(_OWORD *)&v167[32];
            v168[3] = *(_OWORD *)&v167[48];
            v169 = *(void *)&v167[64];
            if (*(uint64_t *)v167 > 3999)
            {
              if (*(uint64_t *)v167 > 4255)
              {
                if (*(void *)v167 == 4256LL)
                {
                  v128 = (char *)calloc(0x40uLL, 1uLL);
                  v129 = v128;
                  v130 = 0LL;
                  v131 = (unsigned __int8 *)v168 + 8;
                  do
                  {
                    v132 = *v131++;
                    v133 = &v128[v130];
                    *v133 = a0123456789abcd_0[(unint64_t)v132 >> 4];
                    v133[1] = a0123456789abcd_0[v132 & 0xF];
                    v130 += 2LL;
                  }

                  while (v130 != 64);
                  id v100 = objc_alloc(&OBJC_CLASS___NSString);
                  v101 = v129;
                  v102 = 64LL;
                }

                else
                {
                  if (*(void *)v167 != 4512LL) {
                    goto LABEL_121;
                  }
                  v107 = (char *)calloc(0x80uLL, 1uLL);
                  v108 = v107;
                  v109 = 0LL;
                  v110 = (unsigned __int8 *)v168 + 8;
                  do
                  {
                    v111 = *v110++;
                    v112 = &v107[v109];
                    *v112 = a0123456789abcd_0[(unint64_t)v111 >> 4];
                    v112[1] = a0123456789abcd_0[v111 & 0xF];
                    v109 += 2LL;
                  }

                  while (v109 != 128);
                  id v100 = objc_alloc(&OBJC_CLASS___NSString);
                  v101 = v108;
                  v102 = 128LL;
                }
              }

              else
              {
                if (*(void *)v167 == 4000LL)
                {
                  v118 = (char *)calloc(0x20uLL, 1uLL);
                  v119 = 0LL;
                  v120 = (unsigned __int8 *)v168 + 8;
                  do
                  {
                    v121 = *v120++;
                    v122 = &v118[v119];
                    *v122 = a0123456789abcd_0[(unint64_t)v121 >> 4];
                    v122[1] = a0123456789abcd_0[v121 & 0xF];
                    v119 += 2LL;
                  }

                  while (v119 != 32);
                  v123 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v118,  32LL,  4LL,  1LL);
                  goto LABEL_124;
                }

                if (*(void *)v167 != 4001LL) {
                  goto LABEL_121;
                }
                v94 = (char *)calloc(0x28uLL, 1uLL);
                v95 = v94;
                id v96 = 0LL;
                v97 = (unsigned __int8 *)v168 + 8;
                do
                {
                  v98 = *v97++;
                  v99 = &v94[v96];
                  *v99 = a0123456789abcd_0[(unint64_t)v98 >> 4];
                  v99[1] = a0123456789abcd_0[v98 & 0xF];
                  v96 += 2LL;
                }

                while (v96 != 40);
                id v100 = objc_alloc(&OBJC_CLASS___NSString);
                v101 = v95;
                v102 = 40LL;
              }
            }

            else
            {
              if (*(uint64_t *)v167 <= 2999)
              {
                if (*(void *)v167 != 1000LL)
                {
                  if (*(void *)v167 == 2000LL)
                  {
                    v89 = 0LL;
                    uint64_t quot = DWORD2(v168[0]);
                    do
                    {
                      unsigned __int8 v91 = ldiv(quot, 10LL);
                      uint64_t quot = v91.quot;
                      if (v91.rem >= 0) {
                        LOBYTE(v92) = v91.rem;
                      }
                      else {
                        id v92 = -v91.rem;
                      }
                      v172[--v89] = v92 + 48;
                    }

                    while (v91.quot);
                    v93 = CFStringCreateWithBytes(0LL, &v172[v89], -v89, 0x8000100u, 0);
LABEL_120:
                    uint64_t v30 = (__CFString *)v93;
LABEL_125:

                    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringToIndex:](v30, "substringToIndex:", 7LL));
                    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v19 userProfile]);
                    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 name]);
                    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[MRUserIdentity basicIdentityWithIdentifier:displayName:]( &OBJC_CLASS___MRUserIdentity,  "basicIdentityWithIdentifier:displayName:",  v24,  v26));
                    goto LABEL_126;
                  }

  __break(1u);
}

              swift_release(a1);
              if (qword_100401640 == -1) {
                goto LABEL_78;
              }
              goto LABEL_87;
            }
          }
        }

LABEL_121:
                  v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSAssertionHandler currentHandler]( &OBJC_CLASS___NSAssertionHandler,  "currentHandler"));
                  v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull _MSVHashGetDigest(MSVHash)"));
                  [v134 handleFailureInFunction:v135 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

                  uint64_t v30 = &stru_1003AE680;
                  goto LABEL_125;
                }

                v113 = *((void *)&v168[0] + 1);
                v114 = (UInt8 *)&v171;
                v115 = *((void *)&v168[0] + 1);
                do
                {
                  v116 = lldiv(v115, 10LL);
                  v115 = v116.quot;
                  if (v116.rem >= 0) {
                    LOBYTE(v117) = v116.rem;
                  }
                  else {
                    v117 = -v116.rem;
                  }
                  *v114-- = v117 + 48;
                }

                while (v116.quot);
                if (v113 < 0) {
                  *v114 = 45;
                }
                else {
                  ++v114;
                }
                v123 = CFStringCreateWithBytes(0LL, v114, v172 - v114, 0x8000100u, 0);
LABEL_124:
                uint64_t v30 = (__CFString *)v123;
                goto LABEL_125;
              }

              if (*(void *)v167 == 3000LL)
              {
                LODWORD(v170[0]) = bswap32(DWORD2(v168[0]));
                v124 = (char *)calloc(8uLL, 1uLL);
                v125 = 0LL;
                v126 = v124 + 1;
                do
                {
                  v127 = *((unsigned __int8 *)v170 + v125);
                  *(v126 - 1) = a0123456789abcd_0[v127 >> 4];
                  *v126 = a0123456789abcd_0[v127 & 0xF];
                  v126 += 2;
                  ++v125;
                }

                while (v125 != 4);
                id v100 = objc_alloc(&OBJC_CLASS___NSString);
                v101 = v124;
                v102 = 8LL;
              }

              else
              {
                if (*(void *)v167 != 3001LL) {
                  goto LABEL_121;
                }
                v170[0] = bswap64(*((unint64_t *)&v168[0] + 1));
                v103 = (char *)calloc(0x10uLL, 1uLL);
                v104 = 0LL;
                v105 = v103 + 1;
                do
                {
                  v106 = *((unsigned __int8 *)v170 + v104);
                  *(v105 - 1) = a0123456789abcd_0[v106 >> 4];
                  *v105 = a0123456789abcd_0[v106 & 0xF];
                  v105 += 2;
                  ++v104;
                }

                while (v104 != 8);
                id v100 = objc_alloc(&OBJC_CLASS___NSString);
                v101 = v103;
                v102 = 16LL;
              }
            }

            v93 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v100,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v101,  v102,  4LL,  1LL);
            goto LABEL_120;
          }

          if (*(void *)buf != 2000LL)
          {
            if (*(void *)buf != 3000LL) {
              goto LABEL_77;
            }
            if (*(_DWORD *)&buf[12]) {
              id v74 = vaddvq_s32((int32x4_t)vorrq_s8( (int8x16_t)vshlq_u32(*(uint32x4_t *)&buf[16], (uint32x4_t)xmmword_10034B6D0),  (int8x16_t)vshlq_u32(*(uint32x4_t *)&buf[16], (uint32x4_t)xmmword_10034B6C0)));
            }
            else {
              id v74 = *(_DWORD *)&buf[24] + 374761393;
            }
            v78 = *(_DWORD *)&buf[8] + v74;
            v79 = BYTE8(v156) & 0xF;
            v80 = &buf[32];
            if (v79 >= 4)
            {
              do
              {
                v81 = *(_DWORD *)v80;
                v80 += 4;
                HIDWORD(v82) = v78 - 1028477379 * v81;
                LODWORD(v82) = HIDWORD(v82);
                v78 = 668265263 * (v82 >> 15);
                v79 -= 4LL;
              }

              while (v79 > 3);
            }

            for (; v79; --v79)
            {
              v83 = *v80++;
              HIDWORD(v84) = v78 + 374761393 * v83;
              LODWORD(v84) = HIDWORD(v84);
              v78 = -1640531535 * (v84 >> 21);
            }

            v85 = -1028477379 * ((-2048144777 * (v78 ^ (v78 >> 15))) ^ ((-2048144777 * (v78 ^ (v78 >> 15))) >> 13));
            id v86 = v85 ^ HIWORD(v85);
            goto LABEL_76;
          }

          switch(buf[19])
          {
            case 1:
              v77 = buf[16];
              break;
            case 2:
              v77 = *(unsigned __int16 *)&buf[16];
              break;
            case 3:
              v77 = *(unsigned __int16 *)&buf[16] | (buf[18] << 16);
              break;
            default:
              v87 = *(_DWORD *)&buf[8];
LABEL_75:
              uint64_t v88 = -2048144789 * (v87 ^ *(_DWORD *)&buf[12] ^ ((v87 ^ *(_DWORD *)&buf[12]) >> 16));
              id v86 = (-1028477387 * (v88 ^ (v88 >> 13))) ^ ((-1028477387 * (v88 ^ (v88 >> 13))) >> 16);
              *(_DWORD *)&buf[8] = v86;
LABEL_76:
              *(_DWORD *)&v167[8] = v86;
              goto LABEL_77;
          }

          v87 = (461845907 * ((380141568 * v77) | ((-862048943 * v77) >> 17))) ^ *(_DWORD *)&buf[8];
          goto LABEL_75;
        }

LABEL_130:
        __int128 v11 = (char *)v11 + 1;
      }

      while (v11 != v9);
      __int128 v9 = [obj countByEnumeratingWithState:&v150 objects:v154 count:16];
      if (!v9)
      {
LABEL_132:

        p_locuint64_t k = v140;
        break;
      }
    }
  }

  os_unfair_lock_unlock(p_lock);
}

void sub_100028FC0(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

MRDMediaUserState *__cdecl sub_100029110(id a1, ICMediaUserState *a2)
{
  id v2 = a2;
  id v3 = -[MRDMediaUserState initWithUserState:](objc_alloc(&OBJC_CLASS___MRDMediaUserState), "initWithUserState:", v2);

  return v3;
}

LABEL_50:
          id v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSAssertionHandler currentHandler]( &OBJC_CLASS___NSAssertionHandler,  "currentHandler",  4001LL,  *(void *)&v71.h0));
          char v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull _MSVHashGetDigest(MSVHash)"));
          [v68 handleFailureInFunction:v69 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

          __int128 v10 = &stru_1003AE680;
LABEL_55:

          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringToIndex:](v10, "substringToIndex:", 7LL));
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 userProfile]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 name]);
          unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[MRUserIdentity basicIdentityWithIdentifier:displayName:]( &OBJC_CLASS___MRUserIdentity,  "basicIdentityWithIdentifier:displayName:",  v11,  v13));
          goto LABEL_56;
        }

        if (*(void *)v79 == 3000LL)
        {
          LODWORD(v82[0]) = bswap32(DWORD2(v80[0]));
          CC_SHA1_CTX v57 = (char *)calloc(8uLL, 1uLL);
          __int128 v58 = 0LL;
          __int128 v59 = v57 + 1;
          do
          {
            __int128 v60 = *((unsigned __int8 *)v82 + v58);
            *(v59 - 1) = a0123456789abcd_0[v60 >> 4];
            *__int128 v59 = a0123456789abcd_0[v60 & 0xF];
            v59 += 2;
            ++v58;
          }

          while (v58 != 4);
          lldiv_t v33 = objc_alloc(&OBJC_CLASS___NSString);
          uint64_t v34 = v57;
          __int16 v35 = 8LL;
        }

        else
        {
          if (*(void *)v79 != 3001LL) {
            goto LABEL_50;
          }
          v82[0] = bswap64(*((unint64_t *)&v80[0] + 1));
          uint32_t v36 = (char *)calloc(0x10uLL, 1uLL);
          uint64_t v37 = 0LL;
          uint64_t v38 = v36 + 1;
          do
          {
            unsigned int v39 = *((unsigned __int8 *)v82 + v37);
            *(v38 - 1) = a0123456789abcd_0[v39 >> 4];
            *uint64_t v38 = a0123456789abcd_0[v39 & 0xF];
            v38 += 2;
            ++v37;
          }

          while (v37 != 8);
          lldiv_t v33 = objc_alloc(&OBJC_CLASS___NSString);
          uint64_t v34 = v36;
          __int16 v35 = 16LL;
        }
      }

      uint64_t v67 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v33,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v34,  v35,  4LL,  1LL,  4001LL,  *(void *)&v71.h0);
LABEL_54:
      __int128 v10 = (__CFString *)v67;
      goto LABEL_55;
    }
  }

  unsigned int v15 = 0LL;
LABEL_57:

  return v15;
}

  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, v41, (uint8_t *)&v74, 0x16u);
LABEL_51:

LABEL_83:
}

  uint64_t v38 = *(_BYTE *)(v2 + 32);
  unsigned int v39 = v38 & 0x3F;
  uint64_t v40 = (1LL << v38) + 63;
  uint64_t v41 = v40 >> 6;
  uint64_t v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v42);
    sub_100170730((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v41, v2, v26, &v50);
    unint64_t v44 = v43;
    swift_release(v2);
    sub_10016031C(v50);
  }

  else
  {
    id v45 = (void *)swift_slowAlloc(v42, -1LL);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_100170730((unint64_t *)v45, v41, v2, v26, &v50);
    unint64_t v44 = v46;
    swift_release(v2);
    sub_10016031C(v50);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  return (void *)v44;
}

                  if (v102 == ++v103) {
                    goto LABEL_71;
                  }
                }
              }

              __break(1u);
              goto LABEL_73;
            }
          }

  v186 = v51;
  v187 = (os_log_s *)Logger.logObject.getter(v186);
  v188 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v187, v188))
  {
    v189 = swift_slowAlloc(22LL, -1LL);
    v190 = (void **)swift_slowAlloc(8LL, -1LL);
    v235 = v190;
    v236 = swift_slowAlloc(32LL, -1LL);
    aBlocuint64_t k = (void **)v236;
    *(_DWORD *)v189 = 138412546;
    v244 = v186;
    v191 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v189 + 4, v189 + 12);
    *v190 = v186;

    *(_WORD *)(v189 + 12) = 2082;
    v193 = *(void *)&v191[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    v192 = *(void *)&v191[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v244 = (void *)sub_10015ADC4(v193, v192, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v189 + 14, v189 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v187,  v188,  "[%@]<%{public}s> Received transportMigrationReply with no completion.",  (uint8_t *)v189,  0x16u);
    v194 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    v195 = (uint64_t)v235;
    swift_arrayDestroy(v235, 1LL, v194);
    swift_slowDealloc(v195, -1LL, -1LL);
    v196 = v236;
    swift_arrayDestroy(v236, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v196, -1LL, -1LL);
    swift_slowDealloc(v189, -1LL, -1LL);
  }

  else
  {
  }

  v197 = sub_1001E8078();
  v198 = swift_allocError(&type metadata for FastSyncSessionError, v197, 0LL, 0LL);
  *v199 = 6LL;
  sub_1001CF668(v198);
  swift_errorRelease(v198);
}

    sub_10021B424((void **)&v31, (const void **)&v30, &v29);
    return 1LL;
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_10002A1EC(uint64_t a1)
{
  id v2 = [[ICMediaUserStateCenter alloc] initLazily];
  id v3 = (void *)qword_1003FDC20;
  qword_1003FDC20 = (uint64_t)v2;

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICPrivacyInfo sharedPrivacyInfo](&OBJC_CLASS___ICPrivacyInfo, "sharedPrivacyInfo"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10002A474;
  v22[3] = &unk_10039A748;
  v22[4] = *(void *)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v4 beginObservingPrivacyAcknowledgementForIdentifier:ICPrivacyIdentifierMusic handler:v22]);
  [*(id *)(a1 + 32) setPrivacyObserver:v5];

  __int128 v6 = objc_alloc(&OBJC_CLASS___MRDMediaUserState);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1003FDC20 activeUserState]);
  __int128 v8 = -[MRDMediaUserState initWithUserState:](v6, "initWithUserState:", v7);

  uint64_t v10 = _MRLogForCategory(12LL, v9);
  __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMediaUserState userIdentity](v8, "userIdentity"));
    unsigned int v13 = -[MRDMediaUserState isFullSubscriber](v8, "isFullSubscriber");
    unsigned int v14 = -[MRDMediaUserState isMinor](v8, "isMinor");
    unsigned int v15 = -[MRDMediaUserState identitySupportsCollaboration](v8, "identitySupportsCollaboration");
    unsigned int v16 = -[MRDMediaUserState hasAcceptedPrivacyAcknowledgement](v8, "hasAcceptedPrivacyAcknowledgement");
    unsigned int v17 = -[MRDMediaUserState groupSessionsSupportedForAccountRegion](v8, "groupSessionsSupportedForAccountRegion");
    unsigned int v18 = -[MRDMediaUserState hasAcceptedDisplayNameAcknowledgement](v8, "hasAcceptedDisplayNameAcknowledgement");
    *(_DWORD *)__int128 buf = 138413826;
    __int16 v24 = v12;
    __int16 v25 = 1024;
    unsigned int v26 = v13;
    __int16 v27 = 1024;
    unsigned int v28 = v14;
    __int16 v29 = 1024;
    unsigned int v30 = v15;
    __int16 v31 = 1024;
    unsigned int v32 = v16;
    __int16 v33 = 1024;
    unsigned int v34 = v17;
    __int16 v35 = 1024;
    unsigned int v36 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRDMusicUserStateCenter] IC cached state (active): i=%@, s=%{BOOL}u, m=%{BOOL}u, sc=%{BOOL}u, p=%{BOOL}u, r=%{BOO L}u, dna=%{BOOL}u",  buf,  0x30u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  uint64_t NotificationQueue = MRGroupSessionSubsystemGetNotificationQueue();
  __int16 v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(NotificationQueue);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10002A47C;
  v21[3] = &unk_100399250;
  v21[4] = *(void *)(a1 + 32);
  dispatch_async(v20, v21);
}

id sub_10002A474(uint64_t a1)
{
  return [*(id *)(a1 + 32) postCloudStateChanged];
}

void sub_10002A47C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_10002A638(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDMusicUserStateCenterLocalStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_10002A7A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localActiveUserState]);
  uint64_t v4 = _MRLogForCategory(12LL, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v2 userIdentity]);
    int v8 = 138413826;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    unsigned int v11 = [v2 isFullSubscriber];
    __int16 v12 = 1024;
    unsigned int v13 = [v2 isMinor];
    __int16 v14 = 1024;
    unsigned int v15 = [v2 identitySupportsCollaboration];
    __int16 v16 = 1024;
    unsigned int v17 = [v2 hasAcceptedPrivacyAcknowledgement];
    __int16 v18 = 1024;
    unsigned int v19 = [v2 groupSessionsSupportedForAccountRegion];
    __int16 v20 = 1024;
    unsigned int v21 = [v2 hasAcceptedDisplayNameAcknowledgement];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDMusicUserStateCenter] Cloud state changed (active): i=%@, s=%{BOOL}u, m=%{BOOL}u, sc=%{BOOL}u, p=%{BOOL}u, r=% {BOOL}u, dna=%{BOOL}u",  (uint8_t *)&v8,  0x30u);
  }

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v7 postNotificationName:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

_DWORD *sub_10002A9CC(_DWORD *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    int v6 = result[1];
    unsigned int v7 = *result + __n;
    BOOL v9 = __n > 0xF || v7 > 0xF;
    *id result = v7;
    result[1] = v6 | v9;
    uint64_t v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      id result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }

    __int16 v12 = &__src[__n];
    if ((_DWORD)v10)
    {
      id result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      int v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      void v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }

    if (v4 <= v12 - 16)
    {
      int v15 = v5[2];
      int v16 = v5[3];
      int v17 = v5[4];
      int v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        int v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        int v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        int v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        int v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }

      while (v4 <= v12 - 16);
      void v5[2] = v15;
      v5[3] = v16;
      v5[4] = v17;
      v5[5] = v18;
    }

    if (v4 < v12)
    {
      size_t v11 = v12 - v4;
      id result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }

  return result;
}

char *sub_10002AB74(char *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    *(void *)result += __n;
    uint64_t v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      id result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 1_Block_object_dispose((const void *)(v15 - 128), 8) = v7;
      return result;
    }

    int v8 = &__src[__n];
    if ((_DWORD)v6)
    {
      id result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      uint64_t v9 = __ROR8__(*((void *)v5 + 2) - 0x3D4D51C2D82B14B1LL * *((void *)v5 + 6), 33);
      *((void *)v5 + 1) = 0x9E3779B185EBCA87LL
                          * __ROR8__(*((void *)v5 + 1) - 0x3D4D51C2D82B14B1LL * *((void *)v5 + 5), 33);
      *((void *)v5 + 2) = 0x9E3779B185EBCA87LL * v9;
      unint64_t v10 = 0x9E3779B185EBCA87LL * __ROR8__(*((void *)v5 + 4) - 0x3D4D51C2D82B14B1LL * *((void *)v5 + 8), 33);
      *((void *)v5 + 3) = 0x9E3779B185EBCA87LL
                          * __ROR8__(*((void *)v5 + 3) - 0x3D4D51C2D82B14B1LL * *((void *)v5 + 7), 33);
      *((void *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 1_Block_object_dispose((const void *)(v15 - 128), 8) = 0;
    }

    if (v4 + 32 <= v8)
    {
      unint64_t v11 = *((void *)v5 + 1);
      unint64_t v12 = *((void *)v5 + 2);
      unint64_t v14 = *((void *)v5 + 3);
      unint64_t v13 = *((void *)v5 + 4);
      do
      {
        unint64_t v11 = 0x9E3779B185EBCA87LL * __ROR8__(v11 - 0x3D4D51C2D82B14B1LL * *(void *)v4, 33);
        unint64_t v12 = 0x9E3779B185EBCA87LL * __ROR8__(v12 - 0x3D4D51C2D82B14B1LL * *((void *)v4 + 1), 33);
        unint64_t v14 = 0x9E3779B185EBCA87LL * __ROR8__(v14 - 0x3D4D51C2D82B14B1LL * *((void *)v4 + 2), 33);
        unint64_t v13 = 0x9E3779B185EBCA87LL * __ROR8__(v13 - 0x3D4D51C2D82B14B1LL * *((void *)v4 + 3), 33);
        v4 += 32;
      }

      while (v4 <= v8 - 32);
      *((void *)v5 + 1) = v11;
      *((void *)v5 + 2) = v12;
      *((void *)v5 + 3) = v14;
      *((void *)v5 + 4) = v13;
    }

    if (v4 < v8)
    {
      size_t v7 = v8 - v4;
      id result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }

  return result;
}

uint64_t sub_10002AD04(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    int v1 = vaddvq_s32((int32x4_t)vorrq_s8( (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 8), (uint32x4_t)xmmword_10034B6D0),  (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 8), (uint32x4_t)xmmword_10034B6C0)));
  }
  else {
    int v1 = *(_DWORD *)(a1 + 16) + 374761393;
  }
  unsigned int v2 = *(_DWORD *)a1 + v1;
  int v3 = (int *)(a1 + 24);
  unint64_t v4 = *(_DWORD *)(a1 + 40) & 0xF;
  if ((*(_DWORD *)(a1 + 40) & 0xFu) >= 4)
  {
    do
    {
      int v5 = *v3++;
      HIDWORD(v6) = v2 - 1028477379 * v5;
      LODWORD(v6) = HIDWORD(v6);
      unsigned int v2 = 668265263 * (v6 >> 15);
      v4 -= 4LL;
    }

    while (v4 > 3);
  }

  for (; v4; --v4)
  {
    int v7 = *(unsigned __int8 *)v3;
    int v3 = (int *)((char *)v3 + 1);
    HIDWORD(v_Block_object_dispose((const void *)(v15 - 128), 8) = v2 + 374761393 * v7;
    LODWORD(v_Block_object_dispose((const void *)(v15 - 128), 8) = HIDWORD(v8);
    unsigned int v2 = -1640531535 * (v8 >> 21);
  }

  unsigned int v9 = -1028477379 * ((-2048144777 * (v2 ^ (v2 >> 15))) ^ ((-2048144777 * (v2 ^ (v2 >> 15))) >> 13));
  return v9 ^ HIWORD(v9);
}

unint64_t sub_10002ADD4(void *a1)
{
  if (*a1 < 0x20uLL) {
    uint64_t v1 = a1[3] + 0x27D4EB2F165667C5LL;
  }
  else {
    uint64_t v1 = 0x85EBCA77C2B2AE63LL
  }
       - 0x61C8864E7A143579LL
       * ((0x85EBCA77C2B2AE63LL
         - 0x61C8864E7A143579LL
         * ((0x85EBCA77C2B2AE63LL
           - 0x61C8864E7A143579LL
           * ((0x85EBCA77C2B2AE63LL
             - 0x61C8864E7A143579LL
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87LL * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87LL * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87LL * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87LL * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  unint64_t v2 = v1 + *a1;
  int v3 = a1 + 5;
  unint64_t v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = 0x85EBCA77C2B2AE63LL
         - 0x61C8864E7A143579LL * __ROR8__((0x9E3779B185EBCA87LL * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8LL;
    }

    while (v4 > 7);
  }

  if (v4 >= 4)
  {
    unsigned int v6 = *(_DWORD *)v3;
    int v3 = (uint64_t *)((char *)v3 + 4);
    unint64_t v2 = 0x165667B19E3779F9LL - 0x3D4D51C2D82B14B1LL * __ROR8__((0x9E3779B185EBCA87LL * v6) ^ v2, 41);
    v4 -= 4LL;
  }

  for (; v4; --v4)
  {
    unsigned int v7 = *(unsigned __int8 *)v3;
    int v3 = (uint64_t *)((char *)v3 + 1);
    unint64_t v2 = 0x9E3779B185EBCA87LL * __ROR8__((0x27D4EB2F165667C5LL * v7) ^ v2, 53);
  }

  unint64_t v8 = 0x165667B19E3779F9LL
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

void sub_10002AF84(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MRDStreamCapacityManager);
  unint64_t v2 = (void *)qword_1003FDC30;
  qword_1003FDC30 = (uint64_t)v1;
}

LABEL_35:
      unsigned int v34 = 0LL;
      goto LABEL_36;
    }

    if (!v27) {
      goto LABEL_35;
    }
    unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v23 timeIntervalSinceDate:v5];
    *(_DWORD *)__int128 buf = 138544130;
    id v75 = @"canActivateStreamWithPlayerPath";
    id v76 = 2114;
    v77 = v7;
    v78 = 2112;
    v79 = @"PlayerPath does not take up a slot thus is always allowed to activate";
    v80 = 2048;
    v81 = v39;
    __int16 v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_32:
    __int16 v29 = v21;
    unsigned int v30 = 42;
    goto LABEL_33;
  }

  int v16 = -[MRDStreamCapacityManager remainingStreamCapacity](self, "remainingStreamCapacity");
  int v17 = ((uint64_t (*)(void *, __CFString *))v14[2])(v14, v4);
  unint64_t v19 = v17;
  if (v16 >= 1)
  {
    if (v17)
    {
      __int16 v20 = _MRLogForCategory(10LL, v18);
      unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      if (v4)
      {
        if (v22)
        {
          unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v23 timeIntervalSinceDate:v5];
          *(_DWORD *)__int128 buf = 138544386;
          id v75 = @"canActivateStreamWithPlayerPath";
          id v76 = 2114;
          v77 = v7;
          v78 = 2112;
          v79 = @"PlayerPath is already active";
          v80 = 2114;
          v81 = v4;
          int8x16_t v82 = 2048;
          v83 = v24;
          __int16 v25 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
LABEL_14:
          __int16 v29 = v21;
          unsigned int v30 = 52;
LABEL_33:
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v25, buf, v30);
          goto LABEL_34;
        }

        goto LABEL_35;
      }

      if (!v22) {
        goto LABEL_35;
      }
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:v5];
      *(_DWORD *)__int128 buf = 138544130;
      id v75 = @"canActivateStreamWithPlayerPath";
      id v76 = 2114;
      v77 = v7;
      v78 = 2112;
      v79 = @"PlayerPath is already active";
      v80 = 2048;
      v81 = v57;
      __int16 v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      goto LABEL_32;
    }

    unsigned int v21 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Number of currently activeStreams (%ld) is less that capacity (%ld) so allowing activation",  -[MRDStreamCapacityManager activeStreamCount](self, "activeStreamCount"),  -[MRDStreamCapacityManager maxStreamCapacity](self, "maxStreamCapacity"));
    uint64_t v41 = _MRLogForCategory(10LL, v40);
    unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v41);
    uint64_t v42 = os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT);
    if (v21)
    {
      if (v4)
      {
        if (!v42)
        {
LABEL_34:

          goto LABEL_35;
        }

        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v43 timeIntervalSinceDate:v5];
        *(_DWORD *)__int128 buf = 138544386;
        id v75 = @"canActivateStreamWithPlayerPath";
        id v76 = 2114;
        v77 = v7;
        v78 = 2112;
        v79 = (const __CFString *)v21;
        v80 = 2114;
        v81 = v4;
        int8x16_t v82 = 2048;
        v83 = v44;
        id v45 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v46 = (os_log_s *)v23;
        id v47 = 52;
LABEL_56:
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, v45, buf, v47);

        goto LABEL_34;
      }

      if (!v42) {
        goto LABEL_34;
      }
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v43 timeIntervalSinceDate:v5];
      *(_DWORD *)__int128 buf = 138544130;
      id v75 = @"canActivateStreamWithPlayerPath";
      id v76 = 2114;
      v77 = v7;
      v78 = 2112;
      v79 = (const __CFString *)v21;
      v80 = 2048;
      v81 = v60;
      id v45 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    }

    else
    {
      if (!v4)
      {
        if (!v42) {
          goto LABEL_34;
        }
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v43 timeIntervalSinceDate:v5];
        *(_DWORD *)__int128 buf = 138543874;
        id v75 = @"canActivateStreamWithPlayerPath";
        id v76 = 2114;
        v77 = v7;
        v78 = 2048;
        v79 = v68;
        id v45 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v46 = (os_log_s *)v23;
        id v47 = 32;
        goto LABEL_56;
      }

      if (!v42) {
        goto LABEL_34;
      }
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v43 timeIntervalSinceDate:v5];
      *(_DWORD *)__int128 buf = 138544130;
      id v75 = @"canActivateStreamWithPlayerPath";
      id v76 = 2114;
      v77 = v7;
      v78 = 2114;
      v79 = v4;
      v80 = 2048;
      v81 = v59;
      id v45 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    }

    id v46 = (os_log_s *)v23;
    id v47 = 42;
    goto LABEL_56;
  }

  __int16 v31 = objc_alloc(&OBJC_CLASS___NSError);
  unsigned int v32 = objc_claimAutoreleasedReturnValue(-[MRDStreamCapacityManager description](self, "description"));
  __int16 v33 = (void *)v32;
  if (v19)
  {
    unsigned int v34 = -[NSError initWithMRError:format:]( v31,  "initWithMRError:format:",  46LL,  @"Already above max capacity. %@",  v32);

    unsigned int v36 = _MRLogForCategory(10LL, v35);
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    unsigned int v21 = v37;
    if (v34)
    {
      uint64_t v38 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v38) {
          goto LABEL_29;
        }
        goto LABEL_36;
      }

      if (!v38) {
        goto LABEL_36;
      }
LABEL_52:
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v52 timeIntervalSinceDate:v5];
      *(_DWORD *)__int128 buf = 138544130;
      id v75 = @"canActivateStreamWithPlayerPath";
      id v76 = 2114;
      v77 = v7;
      v78 = 2114;
      v79 = (const __CFString *)v34;
      v80 = 2048;
      v81 = v67;
      uint64_t v54 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      uint64_t v55 = v21;
      uint64_t v56 = 42;
      goto LABEL_53;
    }

    __int128 v61 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v61) {
        goto LABEL_36;
      }
      goto LABEL_48;
    }

    if (!v61) {
      goto LABEL_36;
    }
    goto LABEL_60;
  }

  unsigned int v34 = -[NSError initWithMRError:description:](v31, "initWithMRError:description:", 46LL, v32);

  unsigned int v49 = _MRLogForCategory(10LL, v48);
  id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
  unsigned int v21 = v50;
  if (!v34)
  {
    __int128 v62 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v62) {
        goto LABEL_36;
      }
LABEL_48:
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v52 timeIntervalSinceDate:v5];
      *(_DWORD *)__int128 buf = 138544130;
      id v75 = @"canActivateStreamWithPlayerPath";
      id v76 = 2114;
      v77 = v7;
      v78 = 2114;
      v79 = v4;
      v80 = 2048;
      v81 = v63;
      __int128 v64 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v65 = v21;
      int v66 = 42;
LABEL_61:
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, v64, buf, v66);
      goto LABEL_62;
    }

    if (!v62) {
      goto LABEL_36;
    }
LABEL_60:
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v52 timeIntervalSinceDate:v5];
    *(_DWORD *)__int128 buf = 138543874;
    id v75 = @"canActivateStreamWithPlayerPath";
    id v76 = 2114;
    v77 = v7;
    v78 = 2048;
    v79 = v69;
    __int128 v64 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint64_t v65 = v21;
    int v66 = 32;
    goto LABEL_61;
  }

  CFStringRef v51 = os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
  if (!v4)
  {
    if (!v51) {
      goto LABEL_36;
    }
    goto LABEL_52;
  }

  if (v51)
  {
LABEL_29:
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v52 timeIntervalSinceDate:v5];
    *(_DWORD *)__int128 buf = 138544386;
    id v75 = @"canActivateStreamWithPlayerPath";
    id v76 = 2114;
    v77 = v7;
    v78 = 2114;
    v79 = (const __CFString *)v34;
    v80 = 2114;
    v81 = v4;
    int8x16_t v82 = 2048;
    v83 = v53;
    uint64_t v54 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
    uint64_t v55 = v21;
    uint64_t v56 = 52;
LABEL_53:
    _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, v54, buf, v56);
LABEL_62:
  }

  swift_release(v7);
  unint64_t v2 = v37;
  unsigned int v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    char *v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  id result = swift_release(v7);
  *unint64_t v2 = v9;
  return result;
}

  *(void *)&v117[0] = _swiftEmptyArrayStorage;
  id v68 = *(void *)(a1 + 16);
  v113 = v62;
  if (v68)
  {
    char v69 = 0LL;
    uint64_t v70 = _swiftEmptyArrayStorage;
    while (v69 < *(void *)(a1 + 16))
    {
      v71 = (*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
      int8x16_t v72 = *(void *)(v65 + 72);
      sub_100183690(a1 + v71 + v72 * v69, (uint64_t)v8);
      v73 = v8[*(int *)(v115 + 44)];
      LOBYTE(v119[0]) = *(_BYTE *)sub_1002493BC();
      LOBYTE(v120) = v73;
      id v74 = sub_1001AEE24();
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v119, &type metadata for RoutingCapabilities, v74) & 1) != 0)
      {
        sub_1001838D0((uint64_t)v8);
      }

      else
      {
        sub_10018364C((uint64_t)v8, v114);
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0) {
          sub_1001A3FBC(0, v70[2] + 1LL, 1);
        }
        uint64_t v70 = *(void **)&v117[0];
        id v76 = *(void *)(*(void *)&v117[0] + 16LL);
        id v75 = *(void *)(*(void *)&v117[0] + 24LL);
        if (v76 >= v75 >> 1)
        {
          sub_1001A3FBC(v75 > 1, v76 + 1, 1);
          uint64_t v70 = *(void **)&v117[0];
        }

        v70[2] = v76 + 1;
        sub_10018364C(v114, (uint64_t)v70 + v71 + v76 * v72);
        uint64_t v65 = v110;
        unint64_t v8 = v109;
      }

      if (v68 == ++v69)
      {
        v77 = *(void **)&v117[0];
        __int128 v62 = v113;
        goto LABEL_48;
      }
    }

    __break(1u);
    id result = swift_release(*(void *)&v117[0]);
    __break(1u);
  }

  else
  {
    v77 = _swiftEmptyArrayStorage;
LABEL_48:
    swift_bridgeObjectRelease();
    v78 = v77[2];
    swift_release(v77);
    v79 = v107;
    *(void *)&v117[0] = v107;
    v80 = sub_100156B68(&qword_1003FA010);
    v81 = sub_100200720();
    BidirectionalCollection<>.joined(separator:)(124LL, 0xE100000000000000LL, v80, v81);
    swift_release(v79);
    int8x16_t v82 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v83 = v108;
    [v108 setRouteIdentifier:v82];

    if ((v112 & 1) != 0)
    {
      v84 = 0LL;
    }

    else
    {
      v85 = v106;
      swift_beginAccess(v106, v119, 0LL, 0LL);
      if (v78 < 2) {
        v84 = *v85;
      }
      else {
        v84 = 0LL;
      }
    }

    objc_msgSend(v83, "setDonateAsCandidate:", v84, v106);
    id v86 = v62[2];
    if (v86)
    {
      v120 = _swiftEmptyArrayStorage;
      sub_10021A57C(0, v86, 0);
      v87 = v120;
      uint64_t v88 = (unsigned __int16 *)(v62 + 8);
      do
      {
        v89 = *((void *)v88 - 2);
        uint64_t v90 = *((void *)v88 - 1);
        unsigned __int8 v91 = *v88;
        swift_bridgeObjectRetain();
        sub_10018390C(v89, v90, v91);
        id v92 = sub_10024664C(v89, v90, v91);
        v93 = objc_allocWithZone(&OBJC_CLASS___MRIRNode);
        v94 = String._bridgeToObjectiveC()();
        v95 = [v93 initWithAVOutputDeviceID:v94 isLocal:v92];

        v116 = v95;
        id v96 = sub_10016083C(0LL, &qword_1003FAF70, &OBJC_CLASS___MRIRNode_ptr);
        v97 = sub_10021A980();
        AnyHashable.init<A>(_:)(&v116, v96, v97);
        swift_bridgeObjectRelease();
        sub_1001835D8(v89, v90, v91);
        v120 = v87;
        v99 = v87[2];
        v98 = v87[3];
        if (v99 >= v98 >> 1)
        {
          sub_10021A57C(v98 > 1, v99 + 1, 1);
          v87 = v120;
        }

        v88 += 20;
        v87[2] = v99 + 1;
        id v100 = &v87[5 * v99];
        v101 = v117[0];
        v102 = v117[1];
        v100[8] = v118;
        *((_OWORD *)v100 + 2) = v101;
        *((_OWORD *)v100 + 3) = v102;
        --v86;
      }

      while (v86);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      v87 = _swiftEmptyArrayStorage;
    }

    sub_10021B5EC((uint64_t)v87);
    swift_bridgeObjectRelease();
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v104 = v108;
    [v108 setNodes:isa];
    swift_release(v111);

    return (uint64_t)v104;
  }

  return result;
}

    swift_bridgeObjectRelease_n(v46, 2LL);
    v76(v119, v71);
    goto LABEL_36;
  }

  v87 = v460[2];
  uint64_t v88 = (uint64_t *)(v75 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints);
  v89 = swift_beginAccess( v75 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints,  v469,  0LL,  0LL);
  uint64_t v90 = *v88;
  if (!*(void *)(v90 + 16))
  {
LABEL_32:
    v119 = v441;
    ((void (*)(char *, uint64_t, id, __n128))v443)(v441, v442, v71, v89);
    v130 = swift_bridgeObjectRetain();
    v121 = (os_log_s *)Logger.logObject.getter(v130);
    v131 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v121, v131))
    {
      v132 = swift_slowAlloc(22LL, -1LL);
      v133 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v133;
      *(_DWORD *)v132 = 136315394;
      v134 = v46;
      v135 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v135, v136, aBlock);
      v128 = (void (*)(void, id))v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v132 + 4, v132 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v132 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v134, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v132 + 14, v132 + 22);
      swift_bridgeObjectRelease_n(v134, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v121,  v131,  "[%s] pullContentFromSession<%s> - failing because no connected entry for endpoint-sourced session",  (uint8_t *)v132,  0x16u);
      swift_arrayDestroy(v133, 2LL, (char *)&type metadata for Any + 8);
      v85 = v460;
      swift_slowDealloc(v133, -1LL, -1LL);
      swift_slowDealloc(v132, -1LL, -1LL);

      v129 = &v466;
      goto LABEL_34;
    }

    goto LABEL_35;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v91 = sub_10015CAD4(v87, v86);
  if ((v92 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }

  v93 = v46;
  v94 = v71;
  v95 = *(void *)(*(void *)(v90 + 56) + 8 * v91);
  swift_retain(v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v95 + 16) != 2)
  {
    swift_release(v95);
    id v46 = v93;
    v85 = v460;
    goto LABEL_32;
  }

  id v96 = [*(id *)(v95 + 64) origin];
  if (!v96)
  {
    v150 = v437;
    v443(v437, v442, v71);
    v151 = swift_bridgeObjectRetain();
    v152 = (os_log_s *)Logger.logObject.getter(v151);
    v153 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v152, v153))
    {
      v154 = swift_slowAlloc(22LL, -1LL);
      v155 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v155;
      *(_DWORD *)v154 = 136315394;
      v156 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v156, v157, aBlock);
      v453 = (void (**)(void *, uint64_t))v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v154 + 4, v154 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v154 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v154 + 14, v154 + 22);
      swift_bridgeObjectRelease_n(v93, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v152,  v153,  "[%s] pullContentFromSession<%s> - failing because no origin for endpoint-sourced session",  (uint8_t *)v154,  0x16u);
      swift_arrayDestroy(v155, 2LL, (char *)&type metadata for Any + 8);
      v158 = v460;
      swift_slowDealloc(v155, -1LL, -1LL);
      swift_slowDealloc(v154, -1LL, -1LL);

      ((void (*)(char *, id))v453)(v437, v71);
    }

    else
    {

      swift_bridgeObjectRelease_n(v93, 2LL);
      v76(v150, v71);
      v158 = v460;
    }

    v177 = v456;
    v178 = type metadata accessor for InternalRoutingError(0LL);
    v179 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v180 = swift_allocError(v178, v179, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v178 - 8) + 104LL))( v181,  enum case for InternalRoutingError.sessionNotFound(_:),  v178);
    v182 = *v158;
    v183 = v158[1];
    swift_bridgeObjectRetain();
    v184 = MRDFastSyncGroupSessionState.rawValue.getter(v180, v182, v183, 2LL);
    v186 = v185;
    v188 = v187;
    LOBYTE(v180) = v189;
    v177();
    swift_errorRelease(v184);
    sub_100156BA8(v186, v188, v180);
    swift_release(v95);
    return;
  }

  v97 = v96;
  v454 = v95;
  v98 = (void *)objc_opt_self(&OBJC_CLASS___MRDMediaRemoteServer);
  v99 = [v98 server];
  id v100 = [v99 nowPlayingServer];

  v101 = [v100 originClientForOrigin:v97];
  if (!v101)
  {
    v159 = v436;
    v160 = v94;
    v443(v436, v442, v94);
    v161 = v97;
    v162 = v93;
    swift_bridgeObjectRetain();
    v163 = v161;
    v164 = (os_log_s *)Logger.logObject.getter(v163);
    v165 = static os_log_type_t.error.getter();
    v166 = os_log_type_enabled(v164, v165);
    v459 = (uint64_t)v163;
    if (v166)
    {
      v167 = swift_slowAlloc(32LL, -1LL);
      v168 = (void *)swift_slowAlloc(8LL, -1LL);
      v169 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v169;
      *(_DWORD *)v167 = 136315650;
      v453 = (void (**)(void *, uint64_t))v76;
      v170 = _typeName(_:qualified:)(v444, 0LL);
      v449 = (void (**)(void, void))v97;
      *(void *)&v467 = sub_10015ADC4(v170, v171, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v167 + 4, v167 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v167 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v162, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v167 + 14, v167 + 22);
      swift_bridgeObjectRelease_n(v162, 3LL);
      *(_WORD *)(v167 + 22) = 2112;
      *(void *)&v467 = v163;
      v172 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v167 + 24, v167 + 32);
      *v168 = v449;

      _os_log_impl( (void *)&_mh_execute_header,  v164,  v165,  "[%s] pullContentFromSession<%s> - failing because no source origin client found for: %@",  (uint8_t *)v167,  0x20u);
      v173 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v168, 1LL, v173);
      swift_slowDealloc(v168, -1LL, -1LL);
      swift_arrayDestroy(v169, 2LL, (char *)&type metadata for Any + 8);
      v174 = v169;
      v175 = v460;
      swift_slowDealloc(v174, -1LL, -1LL);
      swift_slowDealloc(v167, -1LL, -1LL);

      ((void (*)(char *, id))v453)(v436, v458);
      v176 = v456;
    }

    else
    {

      swift_bridgeObjectRelease_n(v93, 2LL);
      v76(v159, v160);
      v176 = v456;
      v175 = v460;
    }

    v214 = type metadata accessor for InternalRoutingError(0LL);
    v215 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v216 = swift_allocError(v214, v215, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v214 - 8) + 104LL))( v217,  enum case for InternalRoutingError.sessionNotFound(_:),  v214);
    v219 = *v175;
    v218 = v175[1];
    swift_bridgeObjectRetain();
    v220 = MRDFastSyncGroupSessionState.rawValue.getter(v216, v219, v218, 2LL);
    v222 = v221;
    v224 = v223;
    v226 = v225;
    v176();
    swift_errorRelease(v220);
    sub_100156BA8(v222, v224, v226);
    swift_release(v454);
    v227 = &v471;
    goto LABEL_85;
  }

  v103 = (void *)RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v102);
  v105 = v104;
  v452 = v103;
  v106 = String._bridgeToObjectiveC()();
  v107 = [v101 existingNowPlayingClientForDisplayID:v106];

  if (!v107)
  {
    v202 = v434;
    v443(v434, v442, v94);
    swift_bridgeObjectRetain();
    v203 = swift_bridgeObjectRetain();
    v204 = (os_log_s *)Logger.logObject.getter(v203);
    v205 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v204, (os_log_type_t)v205))
    {
      v206 = swift_slowAlloc(32LL, -1LL);
      v459 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v459;
      *(_DWORD *)v206 = 136315650;
      v207 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v207, v208, aBlock);
      v450 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v206 + 4, v206 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v206 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v206 + 14, v206 + 22);
      swift_bridgeObjectRelease_n(v93, 3LL);
      *(_WORD *)(v206 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4((uint64_t)v452, v105, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v206 + 24, v206 + 32);
      swift_bridgeObjectRelease_n(v105, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v204,  (os_log_type_t)v205,  "[%s] pullContentFromSession<%s> - failing because no source client found for: %s",  (uint8_t *)v206,  0x20u);
      v209 = v459;
      swift_arrayDestroy(v459, 3LL, (char *)&type metadata for Any + 8);
      v210 = v209;
      v211 = v460;
      swift_slowDealloc(v210, -1LL, -1LL);
      swift_slowDealloc(v206, -1LL, -1LL);

      v76(v434, v458);
      v101 = v450;
      v212 = v456;
      v213 = v454;
    }

    else
    {

      swift_bridgeObjectRelease_n(v105, 2LL);
      swift_bridgeObjectRelease_n(v93, 2LL);
      v76(v202, v94);
      v212 = v456;
      v213 = v454;
      v211 = v460;
    }

    v241 = type metadata accessor for InternalRoutingError(0LL);
    v242 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v243 = swift_allocError(v241, v242, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v241 - 8) + 104LL))( v244,  enum case for InternalRoutingError.unsupportedOperation(_:),  v241);
    v245 = *v211;
    v246 = v211[1];
    swift_bridgeObjectRetain();
    v247 = MRDFastSyncGroupSessionState.rawValue.getter(v243, v245, v246, 2LL);
    v249 = v248;
    v251 = v250;
    v253 = v252;
    v212();
    swift_errorRelease(v247);
    sub_100156BA8(v249, v251, v253);
    swift_release(v213);

    return;
  }

  v451 = v107;
  v108 = [v107 activePlayerClient];
  if (!v108) {
    goto LABEL_43;
  }
  v109 = v108;
  v110 = [v108 supportedRemoteControlCommands];

  if (!v110
    || (v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v110, (char *)&type metadata for Any + 8),
        v448 = (char *)v105,
        v112 = v111,
        v110,
        v113 = (uint64_t)sub_100197300(v112),
        v105 = (unint64_t)v448,
        swift_bridgeObjectRelease(),
        !v113))
  {
LABEL_43:
    v190 = v435;
    v443(v435, v442, v94);
    swift_bridgeObjectRetain();
    v191 = swift_bridgeObjectRetain();
    v192 = (os_log_s *)Logger.logObject.getter(v191);
    v193 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v192, v193))
    {
      v194 = swift_slowAlloc(32LL, -1LL);
      v459 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v459;
      *(_DWORD *)v194 = 136315650;
      v195 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v195, v196, aBlock);
      v450 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v194 + 4, v194 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v194 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v194 + 14, v194 + 22);
      swift_bridgeObjectRelease_n(v93, 3LL);
      *(_WORD *)(v194 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4((uint64_t)v452, v105, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v194 + 24, v194 + 32);
      swift_bridgeObjectRelease_n(v105, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v192,  v193,  "[%s] pullContentFromSession<%s> - failing because no source supported commands found for: %s",  (uint8_t *)v194,  0x20u);
      v197 = v459;
      swift_arrayDestroy(v459, 3LL, (char *)&type metadata for Any + 8);
      v198 = v197;
      v199 = v460;
      swift_slowDealloc(v198, -1LL, -1LL);
      swift_slowDealloc(v194, -1LL, -1LL);

      v76(v435, v458);
      v101 = v450;
      v200 = v456;
      v201 = v454;
    }

    else
    {

      swift_bridgeObjectRelease_n(v105, 2LL);
      swift_bridgeObjectRelease_n(v93, 2LL);
      v76(v190, v94);
      v200 = v456;
      v201 = v454;
      v199 = v460;
    }

    v228 = type metadata accessor for InternalRoutingError(0LL);
    v229 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v230 = swift_allocError(v228, v229, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v228 - 8) + 104LL))( v231,  enum case for InternalRoutingError.unsupportedOperation(_:),  v228);
    v232 = *v199;
    v233 = v199[1];
    swift_bridgeObjectRetain();
    v234 = MRDFastSyncGroupSessionState.rawValue.getter(v230, v232, v233, 2LL);
    v236 = v235;
    v238 = v237;
    v240 = v239;
    v200();
    swift_errorRelease(v234);
    sub_100156BA8(v236, v238, v240);
    swift_release(v201);

LABEL_84:
    v227 = &v470;
LABEL_85:

    return;
  }

  if ((unint64_t)v113 >> 62)
  {
    if (v113 >= 0) {
      v403 = v113 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      v403 = v113;
    }
    swift_bridgeObjectRetain();
    v114 = _CocoaArrayWrapper.endIndex.getter(v403);
  }

  else
  {
    v114 = *(void *)((v113 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
  }

  v449 = (void (**)(void, void))v97;
  v450 = v101;
  if (!v114)
  {
    swift_bridgeObjectRelease_n(v113, 2LL);
    v254 = v443;
LABEL_80:
    v281 = v433;
    v254(v433, v442, v94);
    swift_bridgeObjectRetain();
    v282 = swift_bridgeObjectRetain();
    v283 = (os_log_s *)Logger.logObject.getter(v282);
    v284 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v283, v284))
    {
      v285 = swift_slowAlloc(32LL, -1LL);
      v286 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v286;
      *(_DWORD *)v285 = 136315650;
      v287 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v287, v288, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v285 + 4, v285 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v285 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v285 + 14, v285 + 22);
      swift_bridgeObjectRelease_n(v93, 3LL);
      *(_WORD *)(v285 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4((uint64_t)v452, v105, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v285 + 24, v285 + 32);
      swift_bridgeObjectRelease_n(v105, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v283,  v284,  "[%s] pullContentFromSession<%s> - failing because no source supported types found for: %s",  (uint8_t *)v285,  0x20u);
      swift_arrayDestroy(v286, 3LL, (char *)&type metadata for Any + 8);
      v289 = v460;
      swift_slowDealloc(v286, -1LL, -1LL);
      swift_slowDealloc(v285, -1LL, -1LL);

      v76(v433, v458);
      v101 = v450;
      v290 = v454;
    }

    else
    {

      swift_bridgeObjectRelease_n(v105, 2LL);
      swift_bridgeObjectRelease_n(v93, 2LL);
      v76(v281, v94);
      v290 = v454;
      v289 = v460;
    }

    v291 = type metadata accessor for InternalRoutingError(0LL);
    v292 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v293 = swift_allocError(v291, v292, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v291 - 8) + 104LL))( v294,  enum case for InternalRoutingError.unsupportedOperation(_:),  v291);
    v295 = *v289;
    v296 = v289[1];
    swift_bridgeObjectRetain();
    v297 = MRDFastSyncGroupSessionState.rawValue.getter(v293, v295, v296, 2LL);
    v299 = v298;
    v301 = v300;
    v303 = v302;
    v456();
    swift_errorRelease(v297);
    sub_100156BA8(v299, v301, v303);
    swift_release(v290);

    goto LABEL_84;
  }

  v453 = (void (**)(void *, uint64_t))v76;
  v115 = 4LL;
  while (1)
  {
    if ((v113 & 0xC000000000000001LL) != 0) {
      v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v115 - 4, v113);
    }
    else {
      v116 = *(id *)(v113 + 8 * v115);
    }
    v117 = v115 - 3;
    if (__OFADD__(v115 - 4, 1LL))
    {
      __break(1u);
LABEL_100:
      v467 = 0u;
      v468 = 0u;
LABEL_101:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001603DC((uint64_t)&v467, &qword_1003F9EE0);
LABEL_135:
      v405 = v456;
      v406 = v450;
      v407 = v432;
      v443(v432, v442, v94);
      swift_bridgeObjectRetain();
      v408 = (unint64_t)v448;
      v409 = swift_bridgeObjectRetain();
      v410 = (os_log_s *)Logger.logObject.getter(v409);
      v411 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v410, v411))
      {
        v412 = swift_slowAlloc(32LL, -1LL);
        v413 = swift_slowAlloc(96LL, -1LL);
        aBlock[0] = v413;
        *(_DWORD *)v412 = 136315650;
        v414 = _typeName(_:qualified:)(v444, 0LL);
        *(void *)&v467 = sub_10015ADC4(v414, v415, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v412 + 4, v412 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v412 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v412 + 14, v412 + 22);
        v405 = v456;
        swift_bridgeObjectRelease_n(v93, 3LL);
        *(_WORD *)(v412 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v467 = sub_10015ADC4((uint64_t)v452, v408, aBlock);
        v406 = v450;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v412 + 24, v412 + 32);
        swift_bridgeObjectRelease_n(v408, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v410,  v411,  "[%s] pullContentFromSession<%s> - failing because no destination supported types found for: %s",  (uint8_t *)v412,  0x20u);
        swift_arrayDestroy(v413, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v413, -1LL, -1LL);
        swift_slowDealloc(v412, -1LL, -1LL);

        v416 = v432;
      }

      else
      {

        swift_bridgeObjectRelease_n(v408, 2LL);
        swift_bridgeObjectRelease_n(v93, 2LL);
        v416 = v407;
      }

      ((void (*)(char *, id))v453)(v416, v94);
      v417 = type metadata accessor for InternalRoutingError(0LL);
      v418 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      v419 = swift_allocError(v417, v418, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v417 - 8) + 104LL))( v420,  enum case for InternalRoutingError.unsupportedOperation(_:),  v417);
      v421 = *v460;
      v422 = v460[1];
      swift_bridgeObjectRetain();
      v325 = MRDFastSyncGroupSessionState.rawValue.getter(v419, v421, v422, 2LL);
      v327 = v423;
      v329 = v424;
      v331 = v425;
      v405();
      swift_release(v454);

LABEL_139:
      swift_errorRelease(v325);
      sub_100156BA8(v327, v329, v331);
      v227 = &v466;
      goto LABEL_85;
    }

    v118 = v116;

    ++v115;
    if (v117 == v114)
    {
      swift_bridgeObjectRelease_n(v113, 2LL);
LABEL_79:
      id v76 = (void (*)(id, id))v453;
      v101 = v450;
      v254 = v443;
      v105 = (unint64_t)v448;
      goto LABEL_80;
    }
  }

  swift_bridgeObjectRelease_n(v113, 2LL);
  v447 = v118;
  v255 = [v118 options];
  if (!v255)
  {
    v467 = 0u;
    v468 = 0u;
LABEL_77:

    sub_1001603DC((uint64_t)&v467, &qword_1003F9EE0);
    goto LABEL_79;
  }

  v256 = v255;
  v257 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v255,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  v258 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  v462 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  v259 = (char *)kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  v260 = sub_100156B68(&qword_1003F9500);
  v261 = sub_1001A828C();
  AnyHashable.init<A>(_:)(&v462, v260, v261);
  if (*(void *)(v257 + 16) && (v262 = sub_10015CAA4((uint64_t)aBlock), (v263 & 1) != 0))
  {
    sub_100160800(*(void *)(v257 + 56) + 32 * v262, (uint64_t)&v467);
  }

  else
  {
    v467 = 0u;
    v468 = 0u;
  }

  sub_100160990((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v468 + 1)) {
    goto LABEL_77;
  }
  v264 = sub_100156B68(&qword_1003FA010);
  if ((swift_dynamicCast(aBlock, &v467, (char *)&type metadata for Any + 8, v264, 6LL) & 1) == 0)
  {

    goto LABEL_79;
  }

  v437 = (char *)v264;
  v438 = v261;
  v439 = v259;
  v440 = v260;
  v446 = (char *)aBlock[0];
  sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
  v265 = (char *)v452;
  v266 = (unint64_t)v448;
  if ((sub_1002A2758((uint64_t)v452, (uint64_t)v448) & 1) != 0)
  {
    v267 = sub_1002A265C();
    swift_beginAccess(v267, v461, 0LL, 0LL);
    v265 = (char *)*v267;
    v266 = v267[1];
  }

  swift_bridgeObjectRetain();
  if ((sub_1002A2764((uint64_t)v452, (uint64_t)v448) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v268 = sub_1002A2718();
    swift_beginAccess(v268, &v462, 0LL, 0LL);
    v265 = (char *)*v268;
    v266 = v268[1];
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain();
  v269 = [v98 server];
  v270 = [v269 nowPlayingServer];

  v271 = (char *)[v270 localOriginClient];
  v436 = v265;
  v272 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v273 = [v271 defaultSupportedCommandsForClient:v272];

  v274 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v273, (char *)&type metadata for Any + 8);
  v275 = (uint64_t)sub_100197300(v274);
  swift_bridgeObjectRelease();
  v441 = v271;
  if (!v275)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v304 = v431;
    v443(v431, v442, v94);
    swift_bridgeObjectRetain();
    v305 = (unint64_t)v448;
    v306 = swift_bridgeObjectRetain();
    v307 = (os_log_s *)Logger.logObject.getter(v306);
    v308 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v307, v308))
    {
      v309 = swift_slowAlloc(32LL, -1LL);
      v310 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v310;
      *(_DWORD *)v309 = 136315650;
      v311 = _typeName(_:qualified:)(v444, 0LL);
      *(void *)&v467 = sub_10015ADC4(v311, v312, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v309 + 4, v309 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v309 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4(v445, v93, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v309 + 14, v309 + 22);
      swift_bridgeObjectRelease_n(v93, 3LL);
      *(_WORD *)(v309 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v467 = sub_10015ADC4((uint64_t)v452, v305, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v467, (char *)&v467 + 8, v309 + 24, v309 + 32);
      swift_bridgeObjectRelease_n(v305, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v307,  v308,  "[%s] pullContentFromSession<%s> - failing because no destination supported commands found for: %s",  (uint8_t *)v309,  0x20u);
      swift_arrayDestroy(v310, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v310, -1LL, -1LL);
      swift_slowDealloc(v309, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v305, 2LL);
      swift_bridgeObjectRelease_n(v93, 2LL);
    }

    ((void (*)(char *, id))v453)(v304, v458);
    v319 = type metadata accessor for InternalRoutingError(0LL);
    v320 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v321 = swift_allocError(v319, v320, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v319 - 8) + 104LL))( v322,  enum case for InternalRoutingError.unsupportedOperation(_:),  v319);
    v323 = *v460;
    v324 = v460[1];
    swift_bridgeObjectRetain();
    v325 = MRDFastSyncGroupSessionState.rawValue.getter(v321, v323, v324, 2LL);
    v327 = v326;
    v329 = v328;
    v331 = v330;
    v456();
    swift_release(v454);

    goto LABEL_139;
  }

  v276 = v275 & 0xFFFFFFFFFFFFFF8LL;
  if ((unint64_t)v275 >> 62)
  {
LABEL_130:
    if (v275 >= 0) {
      v404 = v276;
    }
    else {
      v404 = v275;
    }
    swift_bridgeObjectRetain();
    v277 = _CocoaArrayWrapper.endIndex.getter(v404);
    if (v277) {
      goto LABEL_68;
    }
    goto LABEL_134;
  }

  v277 = *(void *)((v275 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v277)
  {
LABEL_134:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v275, 2LL);
    goto LABEL_135;
  }

LABEL_36:
  return v34;
}

  v197(v126, v196, v123);
  v138 = swift_retain_n(a1, 2LL);
  v139 = (os_log_s *)Logger.logObject.getter(v138);
  v140 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v139, v140))
  {
    v141 = swift_slowAlloc(22LL, -1LL);
    v142 = swift_slowAlloc(64LL, -1LL);
    v205 = v142;
    *(_DWORD *)v141 = 136315394;
    v143 = _typeName(_:qualified:)(v182, 0LL);
    v206 = sub_10015ADC4(v143, v144, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v141 + 4, v141 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v141 + 12) = 2080;
    swift_retain(a1);
    v145 = sub_10018756C();
    v146 = a1;
    v148 = v147;
    swift_release(v146);
    v206 = sub_10015ADC4(v145, v148, &v205);
    uint64_t v70 = v200;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v141 + 14, v141 + 22);
    swift_release_n(v146, 2LL);
    a1 = v146;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v139,  v140,  "[%s] reloadSnapshot - Updated filtered snapshot for: %s",  (uint8_t *)v141,  0x16u);
    swift_arrayDestroy(v142, 2LL, (char *)&type metadata for Any + 8);
    v149 = v142;
    v115 = v201;
    v150 = v195;
    swift_slowDealloc(v149, -1LL, -1LL);
    swift_slowDealloc(v141, -1LL, -1LL);

    ((void (*)(_BYTE *, uint64_t))v194)(v193, v179);
  }

  else
  {

    swift_release_n(a1, 2LL);
    ((void (*)(_BYTE *, uint64_t))v194)(v126, v123);
    v150 = v195;
  }

  v151 = OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context;
  if (*(_BYTE *)(*(void *)(a1
                            + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context)
                + 16LL) == 1)
  {
    v152 = *(void *)(*(void *)&v204[*(int *)(v70 + 20)] + 16LL);
    if (v152)
    {
      v153 = (*(unsigned __int8 *)(v150 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
      v154 = a1;
      v155 = *(void *)(v150 + 72);
      v203 = (_BYTE *)swift_bridgeObjectRetain();
      v156 = (uint64_t *)&v203[v153 + 8];
      do
      {
        v157 = *(void *)(v154 + v151);
        v158 = *(v156 - 1);
        v159 = *v156;
        swift_beginAccess( v157 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  &v205,  33LL,  0LL);
        swift_retain(v157);
        swift_bridgeObjectRetain();
        sub_10015B404(&v206, v158, v159);
        swift_endAccess(&v205);
        swift_release(v157);
        swift_bridgeObjectRelease();
        v156 = (uint64_t *)((char *)v156 + v155);
        --v152;
      }

      while (v152);
      swift_bridgeObjectRelease();
      a1 = v154;
      v115 = v201;
    }

    v160 = v176;
    sub_1001A8360((uint64_t)v204, (uint64_t)v176, &qword_1003F94C0);
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v198)(v160, 1LL, v115) == 1)
    {
      sub_1001603DC((uint64_t)v160, &qword_1003F94C0);
    }

    else
    {
      v161 = v173;
      sub_1001A81D4((uint64_t)v160, (uint64_t)v173, type metadata accessor for HostedRoutingSession);
      v162 = *(void *)(a1 + v151);
      v163 = *v161;
      v164 = v161[1];
      swift_beginAccess( v162 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  &v205,  33LL,  0LL);
      swift_retain(v162);
      swift_bridgeObjectRetain();
      sub_10015B404(&v206, v163, v164);
      swift_endAccess(&v205);
      swift_release(v162);
      swift_bridgeObjectRelease();
      sub_1001A813C((uint64_t)v161, type metadata accessor for HostedRoutingSession);
    }

    unsigned int v36 = v199;
  }

  v165 = sub_100156B68(&qword_1003F8310);
  v166 = swift_allocObject(v165, 40LL, 7LL);
  *(_OWORD *)(v166 + 16) = xmmword_10034BD90;
  *(void *)(v166 + 32) = a1;
  v205 = v166;
  specialized Array._endMutation()();
  v167 = v205;
  swift_retain(a1);
  v168 = v204;
  sub_1001A6BBC((uint64_t)v204, v167);
  sub_1001603DC((uint64_t)v36, &qword_1003FD0B0);
  sub_1001A813C((uint64_t)v168, type metadata accessor for HostedRoutingSessionSnapshot);
  return swift_bridgeObjectRelease();
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_release(v8);
  int v3 = v41;
  if ((v44 & 1) != 0)
  {
    unsigned int v39 = 1LL << *(_BYTE *)(v8 + 32);
    if (v39 >= 64) {
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v43 = -1LL << v39;
    }
    *(void *)(v8 + 16) = 0LL;
  }

            LOBYTE(v23) = 0;
            return v23 & 1;
          }
        }

        else
        {
          id v47 = (uint64_t)v62;
          sub_1001A8360((uint64_t)v10, (uint64_t)v62, &qword_1003F8920);
          if (v46(v45, 1LL, v44) != 1)
          {
            id v48 = v60;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 32))(v60, v45, v44);
            unsigned int v49 = sub_100156FEC( &qword_1003F9540,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator,  (uint64_t)&protocol conformance descriptor for RoutingItem.SelectionIndicator);
            __int128 v59 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v44, v49);
            id v50 = *(void (**)(_BYTE *, uint64_t))(v43 + 8);
            v50(v48, v44);
            sub_1001603DC((uint64_t)v17, &qword_1003F8920);
            sub_1001603DC((uint64_t)v19, &qword_1003F8920);
            v50((_BYTE *)v47, v44);
            sub_1001603DC((uint64_t)v10, &qword_1003F8920);
            if ((v59 & 1) == 0) {
              goto LABEL_36;
            }
            goto LABEL_24;
          }

          sub_1001603DC((uint64_t)v17, &qword_1003F8920);
          sub_1001603DC((uint64_t)v19, &qword_1003F8920);
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v44);
        }

        sub_1001603DC((uint64_t)v10, &qword_1003F9528);
        goto LABEL_36;
      }
    }
  }

  return v23 & 1;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

BOOL sub_10002BE00(id a1, NSArray *a2, MROrigin *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10002BE80;
  v6[3] = &unk_10039A7D0;
  unsigned int v7 = a3;
  unint64_t v4 = v7;
  LOBYTE(a2) = -[NSArray mr_any:](a2, "mr_any:", v6);

  return (char)a2;
}

id sub_10002BE80(uint64_t a1, void *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 origin]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10002BEC0(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 streamsThatCountTowardsCapacity]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);

  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
  return v7;
}

uint64_t sub_10002BF34(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 streamsActivelyUsingSlot]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);

  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
  return v7;
}

void sub_10002C338(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  unint64_t v11 = v10;
  if (v5 && !v6)
  {
    BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v12) {
        goto LABEL_22;
      }
      uint64_t v14 = a1[5];
      uint64_t v13 = a1[6];
      uint64_t v15 = a1[4];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544386;
      uint64_t v39 = v14;
      __int16 v40 = 2114;
      uint64_t v41 = v13;
      __int16 v42 = 2112;
      id v43 = v5;
      __int16 v44 = 2114;
      uint64_t v45 = v15;
      __int16 v46 = 2048;
      uint64_t v47 = v17;
      int v18 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      unint64_t v19 = v11;
      uint32_t v20 = 52;
      goto LABEL_16;
    }

    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v31 = a1[5];
    uint64_t v32 = a1[6];
    int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v16 timeIntervalSinceDate:a1[7]];
    int v38 = 138544130;
    uint64_t v39 = v31;
    __int16 v40 = 2114;
    uint64_t v41 = v32;
    __int16 v42 = 2112;
    id v43 = v5;
    __int16 v44 = 2048;
    uint64_t v45 = v33;
    int v18 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_15;
  }

  if (v6)
  {
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v21) {
        goto LABEL_22;
      }
      uint64_t v23 = a1[5];
      uint64_t v22 = a1[6];
      uint64_t v24 = a1[4];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544386;
      uint64_t v39 = v23;
      __int16 v40 = 2114;
      uint64_t v41 = v22;
      __int16 v42 = 2114;
      id v43 = v6;
      __int16 v44 = 2114;
      uint64_t v45 = v24;
      __int16 v46 = 2048;
      uint64_t v47 = v25;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v38,  0x34u);
      goto LABEL_17;
    }

    if (v21) {
      sub_1002B53A8(a1, (uint64_t)v6, v11);
    }
  }

  else
  {
    BOOL v26 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v26) {
        goto LABEL_22;
      }
      uint64_t v28 = a1[5];
      uint64_t v27 = a1[6];
      __int16 v29 = (void *)a1[4];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544130;
      uint64_t v39 = v28;
      __int16 v40 = 2114;
      uint64_t v41 = v27;
      __int16 v42 = 2114;
      id v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      int v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_15:
      unint64_t v19 = v11;
      uint32_t v20 = 42;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v38, v20);
LABEL_17:

      goto LABEL_22;
    }

    if (v26)
    {
      uint64_t v34 = a1[5];
      uint64_t v35 = a1[6];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138543874;
      uint64_t v39 = v34;
      __int16 v40 = 2114;
      uint64_t v41 = v35;
      __int16 v42 = 2048;
      id v43 = v36;
      int v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      unint64_t v19 = v11;
      uint32_t v20 = 32;
      goto LABEL_16;
    }
  }

LABEL_22:
  uint64_t v37 = a1[8];
  if (v37) {
    (*(void (**)(uint64_t, id))(v37 + 16))(v37, v5);
  }
}

  (*(void (**)(void))(a1[7] + 16LL))();
}

  uint64_t v37 = a1[8];
  if (v37) {
    (*(void (**)(uint64_t, id, id))(v37 + 16))(v37, v5, v6);
  }
}

  -[MRDGroupSessionManager setNotAdvertisingReason:](self, "setNotAdvertisingReason:", v22);
}

  return 0LL;
}
}
}
  }

  uint64_t v28 = (MRPlaybackQueue *)[v4 copy];
  __int16 v29 = v30->_playbackQueue;
  v30->_playbackQueue = v28;
}

          unint64_t v10 = v19;
          unint64_t v11 = v36;
        }

        else
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v35, "setObject:forKeyedSubscript:", v11, v18);
        }
      }

      uint64_t v39 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
    }

    while (v39);
  }

  return v35;
}
}

  if (v19)
  {
    uint64_t v24 = _MRLogForCategory(0LL, v23);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543362;
      unsigned int v36 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] Switching to route with UID %{public}@",  buf,  0xCu);
    }

    -[MRDAVRoutingServer _setPickedRoute:withPassword:options:]( self,  "_setPickedRoute:withPassword:options:",  v19,  0LL,  0LL);
  }

LABEL_27:
}

    uint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    BOOL v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10015B404(v17, v12, v13);
    id result = swift_bridgeObjectRelease(v17[1]);
  }

  int v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v18;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    int v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    id v6 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    unint64_t v10 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v9);
    unint64_t v11 = *v10;
    BOOL v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_10015B404(v16, v11, v12);
    id result = swift_bridgeObjectRelease(v16[1]);
  }

  uint64_t v15 = v13 + 4;
  if (v15 >= v7) {
    return swift_release(v1);
  }
  uint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    uint64_t v2 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v2 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release(v1);
    }
    uint64_t v14 = *(void *)(v3 + 8 * v2);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    uint64_t v24 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v25 = -1LL << *(_BYTE *)(v2 + 32);
    BOOL v26 = v24 & ~v25;
    if (((*(void *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
      goto LABEL_13;
    }
    type metadata accessor for NearbyAdvertisement(0LL);
    uint64_t v27 = *(id *)(*(void *)(v2 + 48) + 8 * v26);
    uint64_t v28 = static NSObject.== infix(_:_:)(v27);

    if ((v28 & 1) != 0) {
      break;
    }
    __int16 v29 = ~v25;
    while (1)
    {
      BOOL v26 = (v26 + 1) & v29;
      if (((*(void *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
        break;
      }
      uint64_t v30 = *(id *)(*(void *)(v2 + 48) + 8 * v26);
      uint64_t v31 = static NSObject.== infix(_:_:)(v30);

      if ((v31 & 1) != 0) {
        goto LABEL_50;
      }
    }

    uint64_t v17 = (v22 - 1) & v22;
    uint32_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v12,  *(void *)(a1 + 48) + *(void *)(v3 + 72) * v20,  v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_1001A39DC((uint64_t)v9, v6);
    id result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v18) {
    return swift_release(a1);
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v13 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v18) {
      return swift_release(a1);
    }
    uint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

    uint64_t v13 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    int v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int v18 = v17[1];
    uint32_t v20 = *(void *)(v28 + 72) * v15;
    sub_1001A8360(*(void *)(v5 + 56) + v20, (uint64_t)v4, &qword_1003F8E68);
    BOOL v21 = (void *)(*(void *)(v7 + 48) + v16);
    *BOOL v21 = v19;
    v21[1] = v18;
    sub_1001A78A0((uint64_t)v4, *(void *)(v7 + 56) + v20, &qword_1003F8E68);
    id result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    id result = (void *)swift_release(v5);
    uint64_t v1 = v25;
    goto LABEL_25;
  }

  uint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    unint64_t v10 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_23;
    }
    uint64_t v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
    uint32_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v11,  *(void *)(v38 + 48) + *(void *)(v6 + 72) * v20,  v5);
    uint64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v25 = v24(v9, v11, v5);
    BOOL v26 = Participant.handle.getter(v25);
    uint64_t v28 = v27;
    __int16 v29 = *((void *)v16 + 1);
    if (v29)
    {
      if (v26 == *(void *)v16 && v29 == v27)
      {
        swift_release(v38);
        swift_bridgeObjectRelease(v28);
        goto LABEL_30;
      }

      int v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, *(void *)v16, v29, 0LL);
      swift_bridgeObjectRelease(v28);
      if ((v18 & 1) != 0)
      {
        swift_release(v38);
LABEL_30:
        uint64_t v32 = v33;
        v24(v33, v9, v5);
        uint64_t v30 = 0LL;
        uint64_t v31 = v34;
LABEL_31:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v32, v30, 1LL, v5);

        return;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v27);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

  while (1)
  {
    uint64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v36) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v35 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

    BOOL v12 = (v22 - 1) & v22;
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v34)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v32;
  }

  uint64_t v22 = *(void *)(v33 + 8 * v23);
  if (v22)
  {
    uint64_t v14 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v14 >= v34) {
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)(v33 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

          unint64_t v11 = (v16 - 1) & v16;
          id v68 = v17;
          uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
        }

        unint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
        BOOL v21 = *v19;
        uint32_t v20 = v19[1];
        Hasher.init(_seed:)(v71, *(void *)(v5 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v71, v21, v20);
        uint64_t v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(v5 + 32);
        uint64_t v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        BOOL v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v12 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_6:
        id result = swift_bridgeObjectRelease();
        uint64_t v8 = v68;
        id v5 = a3;
        id v4 = v72;
      }

      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      __int16 v29 = v28[1];
      uint64_t v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (uint64_t i = v24 + 1; ; uint64_t i = v33 + 1)
        {
          uint64_t v33 = i & v31;
          uint64_t v34 = (void *)(v27 + 16 * v33);
          uint64_t v35 = v34[1];
          unsigned int v36 = *v34 == v21 && v35 == v20;
          if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v35, v21, v20, 0LL) & 1) != 0)
          {
            id result = swift_bridgeObjectRelease();
            uint64_t v25 = v33 >> 6;
            BOOL v26 = 1LL << v33;
            goto LABEL_38;
          }
        }

        goto LABEL_6;
      }

      id result = swift_bridgeObjectRelease();
LABEL_38:
      uint64_t v8 = v68;
      id v5 = a3;
      v63[v25] |= v26;
      uint64_t v37 = __OFADD__(v67++, 1LL);
      id v4 = v72;
      if (v37) {
        goto LABEL_82;
      }
    }
  }

  int v38 = 0LL;
  int v66 = a3 + 56;
  uint64_t v67 = 0LL;
  uint64_t v39 = 1LL << *(_BYTE *)(a3 + 32);
  if (v39 < 64) {
    __int16 v40 = ~(-1LL << v39);
  }
  else {
    __int16 v40 = -1LL;
  }
  uint64_t v41 = v40 & *(void *)(a3 + 56);
  char v69 = (unint64_t)(v39 + 63) >> 6;
  __int16 v42 = a4 + 56;
  while (1)
  {
    if (v41)
    {
      id v43 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      __int16 v44 = v43 | (v38 << 6);
      goto LABEL_63;
    }

    uint64_t v45 = v38 + 1;
    if (__OFADD__(v38, 1LL))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }

    if (v45 >= v69) {
      goto LABEL_79;
    }
    __int16 v46 = *(void *)(v66 + 8 * v45);
    ++v38;
    if (!v46)
    {
      int v38 = v45 + 1;
      if (v45 + 1 >= v69) {
        goto LABEL_79;
      }
      __int16 v46 = *(void *)(v66 + 8 * v38);
      if (!v46)
      {
        int v38 = v45 + 2;
        if (v45 + 2 >= v69) {
          goto LABEL_79;
        }
        __int16 v46 = *(void *)(v66 + 8 * v38);
        if (!v46) {
          break;
        }
      }
    }

  uint32_t v20 = (v28 - 1) & v28;
  for (uint64_t j = __clz(__rbit64(v28)) + (i << 6); ; uint64_t j = v25 | (i << 6))
  {
    uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v31 = v54;
    v30(v54, *(void *)(v56 + 48) + *(void *)(v9 + 72) * j, v8);
    uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v15, v31, v8);
    uint64_t v33 = Participant.handle.getter(v32);
    uint64_t v35 = v34;
    if (v33 == v57 && v34 == v55) {
      break;
    }
    unsigned int v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v57, v55, 0LL);
    swift_bridgeObjectRelease(v35);
    uint64_t v37 = ((uint64_t (*)(char *, char *, uint64_t))v30)(v12, v15, v8);
    if ((v36 & 1) != 0) {
      goto LABEL_33;
    }
    int v38 = v51;
    uint64_t v39 = Participant.id.getter(v37);
    __int16 v40 = UUID.uuidString.getter(v39);
    __int16 v42 = v41;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v53);
    id v43 = v50[1];
    if (v43)
    {
      if (v40 == *v50 && v43 == v42)
      {
        __int16 v46 = *(void (**)(char *, uint64_t))(v9 + 8);
        v46(v12, v8);
        swift_bridgeObjectRelease(v42);
        v46(v15, v8);
        goto LABEL_35;
      }

      uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, *v50, v43, 0LL);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
      v24(v12, v8);
      swift_bridgeObjectRelease(v42);
      id result = ((uint64_t (*)(char *, uint64_t))v24)(v15, v8);
      if ((v23 & 1) != 0) {
        goto LABEL_35;
      }
      if (!v20) {
        goto LABEL_8;
      }
    }

    else
    {
      __int16 v44 = *(void (**)(char *, uint64_t))(v9 + 8);
      v44(v12, v8);
      swift_bridgeObjectRelease(v42);
      id result = ((uint64_t (*)(char *, uint64_t))v44)(v15, v8);
      if (!v20) {
        goto LABEL_8;
      }
    }

  uint64_t v14 = (v22 - 1) & v22;
  for (uint64_t i = __clz(__rbit64(v22)) + (v17 << 6); ; uint64_t i = v19 | (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))( v10,  *(void *)(v32 + 48) + *(void *)(v5 + 72) * i,  v4);
    uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    uint64_t v25 = Participant.handle.getter(v24);
    uint64_t v27 = v26;
    uint64_t v28 = v15[1];
    if (!v28)
    {
      swift_bridgeObjectRelease(v26);
      id result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if (!v14) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    if (v25 == *v15 && v28 == v26) {
      break;
    }
    int v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v15, v28, 0LL);
    swift_bridgeObjectRelease(v27);
    id result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v18 & 1) != 0) {
      goto LABEL_30;
    }
    if (!v14) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v19 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
  }

  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_30:
  swift_release(v32);
  return 1LL;
}

    return;
  }

  unsigned int v49 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
  KeyPath = swift_getKeyPath(&unk_10034CF50);
  CFStringRef v51 = swift_getKeyPath(&unk_10034CF78);
  uint64_t v52 = v49;
  static Published.subscript.getter(&v127, v52, KeyPath, v51);

  swift_release(KeyPath);
  double v53 = swift_release(v51);
  uint64_t v54 = (uint64_t)v127;
  uint64_t v55 = Participant.handle.getter(v53);
  LOBYTE(v51) = sub_100158DD4(v55, v56, v54);
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v80 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v80, (uint64_t)qword_1003FF018);
    int8x16_t v82 = v123;
    v81 = v124;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v124 + 16))(v11, v42, v123);
    v83 = v2;
    v84 = swift_bridgeObjectRetain();
    v85 = (os_log_s *)Logger.logObject.getter(v84);
    id v86 = static os_log_type_t.error.getter();
    v87 = v86;
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v88 = swift_slowAlloc(32LL, -1LL);
      v89 = (char **)swift_slowAlloc(8LL, -1LL);
      v118 = v89;
      v120 = (_BYTE *)swift_slowAlloc(64LL, -1LL);
      v126 = (uint64_t)v83;
      v127 = v120;
      *(_DWORD *)uint64_t v88 = 138543874;
      v119 = v85;
      uint64_t v90 = v83;
      v117 = v87;
      unsigned __int8 v91 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v88 + 4, v88 + 12);
      uint64_t *v89 = v83;

      *(_WORD *)(v88 + 12) = 2080;
      id v92 = sub_100156FEC( &qword_1003F9AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
      v93 = v123;
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v123, v92);
      v126 = sub_10015ADC4(v94, v95, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v88 + 14, v88 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v124 + 8))(v11, v93);
      *(_WORD *)(v88 + 22) = 2082;
      id v96 = swift_bridgeObjectRetain();
      v97 = Set.description.getter(v96, &type metadata for String, &protocol witness table for String);
      v99 = v98;
      swift_bridgeObjectRelease();
      v126 = sub_10015ADC4(v97, v99, (uint64_t *)&v127);
      __int16 v42 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v88 + 24, v88 + 32);
      swift_bridgeObjectRelease_n(v54, 2LL);
      swift_bridgeObjectRelease();
      id v100 = v119;
      _os_log_impl( (void *)&_mh_execute_header,  v119,  (os_log_type_t)v117,  "[%{public}@] Could not find: %s in present handles: %{public}s. Cannot continue transport migration.",  (uint8_t *)v88,  0x20u);
      v101 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      v102 = v118;
      swift_arrayDestroy(v118, 1LL, v101);
      swift_slowDealloc(v102, -1LL, -1LL);
      v103 = v120;
      swift_arrayDestroy(v120, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v103, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v11, v82);
      swift_bridgeObjectRelease_n(v54, 2LL);
    }

    v106 = MRDFastSyncGroupSessionState.rawValue.getter(0xD000000000000021LL, 0x800000010033C110LL, v104, v105);
    v108 = sub_100238C08(v106, v107);
    swift_bridgeObjectRelease();
    static Participants.only(_:)(v42);
    v109 = *(void *)&v83[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v109)
    {
      swift_retain(*(void *)&v83[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]);
      sub_1001D73BC(7u, v108, (uint64_t)v15, v109, 0LL, 0LL);

      swift_release(v109);
      (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v15, v122);
      return;
    }

    goto LABEL_36;
  }

  swift_bridgeObjectRelease();
  CC_SHA1_CTX v57 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
  __int128 v58 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
  if (!v58)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  __int128 v59 = swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager]);
  __int128 v60 = Participant.handle.getter(v59);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v58 + 368LL))(1LL, v60, v61);
  swift_release(v58);
  swift_bridgeObjectRelease();
  __int128 v62 = *(void *)&v2[v57];
  if (!v62)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  __int128 v63 = swift_retain(*(void *)&v2[v57]);
  __int128 v64 = Participant.handle.getter(v63);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 392LL))(1LL, v64, v65);
  swift_release(v62);
  swift_bridgeObjectRelease();
  v112 = MRDFastSyncGroupSessionState.rawValue.getter(0LL, 0LL, v110, v111);
  v114 = sub_100238C08(v112, v113);
  swift_bridgeObjectRelease();
  static Participants.only(_:)(v42);
  v115 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
  if (v115)
  {
    swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]);
    sub_1001D73BC(7u, v114, (uint64_t)v18, v115, 0LL, 0LL);

    swift_release(v115);
    (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v18, v122);
    return;
  }

    unint64_t v11 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(v4 + 16))
    {
LABEL_23:
      uint64_t v39 = v5;
      uint64_t v17 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v13);
      int v18 = *v17;
      unint64_t v19 = v17[1];
      Hasher.init(_seed:)(v40, *(void *)(v4 + 40));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)(v40, v18, v19);
      uint32_t v20 = Hasher._finalize()();
      BOOL v21 = v4;
      uint64_t v22 = -1LL << *(_BYTE *)(v4 + 32);
      uint64_t v23 = v20 & ~v22;
      if (((*(void *)(v41 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v24 = *(void *)(v21 + 48);
      uint64_t v25 = (void *)(v24 + 16 * v23);
      BOOL v26 = v25[1];
      uint64_t v27 = *v25 == v18 && v26 == v19;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v18, v19, 0LL) & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        id result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v34 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
        uint64_t v32 = __OFADD__(v35++, 1LL);
        id v4 = v21;
        id v5 = v39;
        if (v32)
        {
          __break(1u);
          return sub_1001E4B48(v34, a2, v35, a3);
        }
      }

      else
      {
        uint64_t v28 = ~v22;
        while (1)
        {
          uint64_t v23 = (v23 + 1) & v28;
          if (((*(void *)(v41 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
            break;
          }
          __int16 v29 = (void *)(v24 + 16 * v23);
          uint64_t v30 = v29[1];
          uint64_t v31 = *v29 == v18 && v30 == v19;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v18, v19, 0LL) & 1) != 0) {
            goto LABEL_36;
          }
        }

    v140 = (v17 - 1) & v17;
    v142 = v18;
    uint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_23:
    unint64_t v19 = v0[19];
    uint32_t v20 = v0[20];
    uint64_t v22 = v0[12];
    BOOL v21 = v0[13];
    uint64_t v23 = (void *)v0[9];
    v136 = *(void *)(v3 + 72);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    v24(v20, *(void *)(v138 + 48) + v136 * v15, v21);
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    BOOL v26 = v25(v19, v20, v21);
    v143 = IRMBBundle.bundleIdentifier.getter(v26);
    uint64_t v28 = v27;
    v24(v22, v19, v21);
    __int16 v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v29(v22, 0LL, 1LL, v21);
    v139 = (void (*)(void *, void))(*(uint64_t (**)(void *))((swift_isaMask & *v23) + 0xB0LL))(v146);
    uint64_t v31 = v30;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v22, 1LL, v21) == 1)
    {
      sub_1001603DC(v0[12], &qword_1003FB480);
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_10015CAD4(v143, v28);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
        v150 = *v31;
        UInt8 *v31 = 0x8000000000000000LL;
        if (!isUniquelyReferenced_nonNull_native) {
          sub_10022754C();
        }
        unint64_t v10 = v135;
        unsigned int v36 = v135[13];
        uint64_t v37 = v135[11];
        swift_bridgeObjectRelease();
        v25(v37, *(void *)(v150 + 56) + v32 * v136, v36);
        sub_100227028(v32, v150);
        UInt8 *v31 = v150;
        swift_bridgeObjectRelease();
        uint64_t v9 = 0LL;
      }

      else
      {
        uint64_t v9 = 1LL;
        unint64_t v10 = v135;
      }

      unint64_t v11 = v10[11];
      v29(v11, v9, 1LL, v10[13]);
      swift_bridgeObjectRelease();
      sub_1001603DC(v11, &qword_1003FB480);
      int v3 = v137;
      BOOL v12 = v146;
      id v6 = v140;
      uint64_t v8 = v142;
      v0 = v10;
    }

    else
    {
      v25(v0[18], v0[12], v0[13]);
      int v38 = swift_isUniquelyReferenced_nonNull_native(*v31);
      uint64_t v39 = *v31;
      v151 = (void *)*v31;
      UInt8 *v31 = 0x8000000000000000LL;
      v0 = (void *)v143;
      uint64_t v41 = sub_10015CAD4(v143, v28);
      int v16 = *(void *)(v39 + 16);
      __int16 v42 = (v40 & 1) == 0;
      uint64_t v7 = (void *)(v16 + v42);
      if (__OFADD__(v16, v42))
      {
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        if (v16 >= 0x140)
        {
          v118 = v7[11];
          if (v118)
          {
            v107 = 4LL;
            goto LABEL_66;
          }

          v119 = 0LL;
          v120 = v16 >> 6;
          if (v120 <= 5) {
            v120 = 5LL;
          }
          v121 = v120 - 5;
          while (v121 != v119)
          {
            v118 = v7[v119++ + 12];
            if (v118)
            {
              v107 = v119 + 4;
              goto LABEL_66;
            }
          }
        }

        goto LABEL_90;
      }

      id v43 = v40;
      if (*(void *)(v39 + 24) >= (uint64_t)v7)
      {
        if ((v38 & 1) == 0) {
          sub_10022754C();
        }
      }

      else
      {
        sub_1002269B4((uint64_t)v7, v38);
        __int16 v44 = sub_10015CAD4(v143, v28);
        if ((v43 & 1) != (v45 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        uint64_t v41 = v44;
      }

      __int16 v46 = v135[18];
      uint64_t v47 = v135[13];
      if ((v43 & 1) != 0)
      {
        int v3 = v137;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v137 + 40))(v151[7] + v41 * v136, v46, v47);
      }

      else
      {
        v151[(v41 >> 6) + 8] |= 1LL << v41;
        id v48 = (uint64_t *)(v151[6] + 16 * v41);
        *id v48 = v143;
        v48[1] = v28;
        uint64_t v7 = (void *)v25(v151[7] + v41 * v136, v46, v47);
        unsigned int v49 = v151[2];
        id v50 = __OFADD__(v49, 1LL);
        int v16 = v49 + 1;
        if (v50) {
          goto LABEL_79;
        }
        v151[2] = v16;
        swift_bridgeObjectRetain();
        int v3 = v137;
      }

      UInt8 *v31 = (uint64_t)v151;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v12 = v146;
      id v6 = v140;
      uint64_t v8 = v142;
      v0 = v135;
    }

    uint64_t v13 = v0[19];
    uint64_t v14 = v0[13];
    v139(v12, 0LL);
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v13, v14);
  }

    uint64_t v9 = (v14 - 1) & v14;
    BOOL v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    sub_100225C54((Swift::Int *)v16, *(id *)(*(void *)(a1 + 56) + 8 * v12));
  }

  uint64_t v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    id v5 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    id v5 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_23;
    }
    uint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
  }

  uint64_t v25 = v23 + 4;
  if (v25 >= v36)
  {
LABEL_29:
    swift_release(a1);
    return v34;
  }

  uint64_t v24 = *(void *)(v35 + 8 * v25);
  if (v24)
  {
    int v16 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    int v16 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_29;
    }
    uint64_t v24 = *(void *)(v35 + 8 * v16);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

  BOOL v26 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v26 + 48) + 8 * a2) = v6;
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = __OFADD__(v27, 1LL);
  __int16 v29 = v27 + 1;
  if (v28) {
    __break(1u);
  }
  else {
    *(void *)(v26 + 16) = v29;
  }
  return result;
}

  if (qword_1004048F0 != -1) {
    swift_once(&qword_1004048F0, sub_1002A1F60);
  }
  return (id)qword_100405CA0;
}

void sub_10002C6A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 playerPath]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
}

MRDNowPlayingPlayerClient *__cdecl sub_10002C9C4(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient activeNowPlayingClient](a2, "activeNowPlayingClient"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 activePlayerClient]);

  return (MRDNowPlayingPlayerClient *)v3;
}

int64_t sub_10002CA00(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient lastPlayingDate](a2, "lastPlayingDate"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient lastPlayingDate](v4, "lastPlayingDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_10002D2F8(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient origin](a2, "origin"));
  unsigned __int8 v3 = [v2 isHosted];

  return v3;
}

BOOL sub_10002D370(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient deviceInfo](a2, "deviceInfo"));
  char v3 = [v2 containsLocalDevice] ^ 1;

  return v3;
}

BOOL sub_10002D48C(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient deviceInfo](a2, "deviceInfo"));
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v2 routingContextID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 localOriginClient]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceInfo]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 routingContextID]);
  unsigned __int8 v9 = [v3 isEqualToString:v8];

  return v9;
}

BOOL sub_10002D58C(id a1, MRDNowPlayingOriginClient *a2)
{
  return -[MRDNowPlayingOriginClient containsActiveStream](a2, "containsActiveStream");
}

LABEL_19:
        goto LABEL_20;
      }
    }

    remoteParticipantDataSource = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 origin]);
    if ((-[os_log_s isLocal](remoteParticipantDataSource, "isLocal") & 1) == 0)
    {
      CFStringRef v51 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);
      uint64_t v52 = [v51 isLocallyHosted];

      if ((v52 & 1) != 0)
      {
LABEL_20:
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        [v54 addObserver:v5 selector:"_handleNowPlayingAppDidChange:" name:kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification object:0];

        goto LABEL_21;
      }

      double v53 = -[MRDPlaybackQueueRemoteParticipantDataSource initWithDelegate:]( objc_alloc(&OBJC_CLASS___MRDPlaybackQueueRemoteParticipantDataSource),  "initWithDelegate:",  v5);
      remoteParticipantDataSource = (os_log_s *)v5->_remoteParticipantDataSource;
      v5->_remoteParticipantDataSource = v53;
    }

    goto LABEL_19;
  }

  return v10;
}

  -[MRExternalOutputContextDataSource volume](self->_externalOutputContext, "volume");
  uint64_t v33 = v32;
  uint64_t v34 = -[MRDAVHostedExternalDevice _endpointSupportsVolumeControl:](self, "_endpointSupportsVolumeControl:", v4);
  if (v34) {
    uint64_t v34 = -[MRExternalOutputContextDataSource volumeControlCapabilities]( self->_externalOutputContext,  "volumeControlCapabilities");
  }
  externalDeviceCallbackQueue = (dispatch_queue_s *)self->_externalDeviceCallbackQueue;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_1000B5ADC;
  v36[3] = &unk_100399B70;
  v36[4] = self;
  uint64_t v37 = v34;
  int v38 = v33;
  dispatch_async(externalDeviceCallbackQueue, v36);
LABEL_22:
}

  BOOL v26 = *(void *)(a1 + 48);
  if (v26) {
    (*(void (**)(uint64_t, uint64_t, id))(v26 + 16))(v26, a2, v5);
  }
}

  __break(1u);
  return result;
}

    int v16 = (v22 - 1) & v22;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    int v16 = (v22 - 1) & v22;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    return;
  }

  if ((v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0)
  {
    uint64_t v14 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
    if (v14)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 248LL);
      int v16 = swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager]);
      LOBYTE(v15) = v15(v16);
      swift_release(v14);
      if ((sub_10023E6D4(v15, 1u) & 1) != 0)
      {
        if (qword_1003FF010 == -1) {
          goto LABEL_6;
        }
        goto LABEL_24;
      }

      uint64_t v28 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
      if (!v28 || (__int16 v29 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]) == 0)
      {
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        double v53 = type metadata accessor for Logger(0LL);
        sub_10015ADAC(v53, (uint64_t)qword_1003FF018);
        int v18 = v2;
        unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
        uint32_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          BOOL v21 = swift_slowAlloc(22LL, -1LL);
          uint64_t v22 = (char **)swift_slowAlloc(8LL, -1LL);
          uint64_t v23 = swift_slowAlloc(32LL, -1LL);
          uint64_t v67 = (uint64_t)v18;
          id v68 = v23;
          *(_DWORD *)BOOL v21 = 138412546;
          uint64_t v54 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v21 + 4, v21 + 12);
          _BYTE *v22 = v18;

          *(_WORD *)(v21 + 12) = 2082;
          uint64_t v55 = *(void *)&v54[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
          uint64_t v56 = *(void *)&v54[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
          swift_bridgeObjectRetain();
          uint64_t v67 = sub_10015ADC4(v55, v56, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v21 + 14, v21 + 22);

          swift_bridgeObjectRelease();
          uint64_t v27 = "[%@]<%{public}s> No messenger available to share identity.";
          goto LABEL_18;
        }

        goto LABEL_19;
      }

      uint64_t v30 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_localIdentity];
      swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]);
      swift_retain(v29);
      uint64_t v31 = v30;
      uint64_t v35 = (void *)MRDFastSyncGroupSessionState.rawValue.getter(v31, v32, v33, v34);
      unsigned int v36 = sub_1002375FC(v35);

      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v37, (uint64_t)qword_1003FF018);
      int v38 = v2;
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      __int16 v40 = static os_log_type_t.info.getter();
      int v66 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(22LL, -1LL);
        __int128 v63 = v29;
        __int16 v42 = v41;
        uint64_t v65 = (char **)swift_slowAlloc(8LL, -1LL);
        __int128 v61 = swift_slowAlloc(32LL, -1LL);
        uint64_t v67 = (uint64_t)v38;
        id v68 = v61;
        *(_DWORD *)__int16 v42 = 138412546;
        __int128 v62 = v36;
        __int128 v60 = v39;
        __int128 v59 = &v68;
        id v43 = v38;
        __int128 v64 = v28;
        __int16 v44 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 4, v42 + 12);
        *uint64_t v65 = v38;

        *(_WORD *)(v42 + 12) = 2082;
        __int16 v46 = *(void *)&v44[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        uint64_t v45 = *(void *)&v44[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v47 = v46;
        unsigned int v36 = v62;
        uint64_t v67 = sub_10015ADC4(v47, v45, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v59, v42 + 14, v42 + 22);

        uint64_t v28 = v64;
        swift_bridgeObjectRelease();
        id v48 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  (os_log_type_t)v66,  "[%@]<%{public}s> Sharing identity.",  (uint8_t *)v42,  0x16u);
        unsigned int v49 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        id v50 = v65;
        swift_arrayDestroy(v65, 1LL, v49);
        swift_slowDealloc(v50, -1LL, -1LL);
        CFStringRef v51 = v61;
        swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1LL, -1LL);
        uint64_t v52 = v42;
        __int16 v29 = v63;
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      else
      {
      }

      __int128 v58 = v36;
      static Participants.only(_:)(a1);
      sub_1001D73BC(1u, v36, (uint64_t)v7, v29, 0LL, 0LL);
      swift_release(v29);

      swift_release(v28);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {
      __break(1u);
    }
  }

    if (v46 == a1 && v47 == a2)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      unsigned int v49 = sub_1001741A8();
      CFStringRef v51 = v160;
      id v50 = v161;
      uint64_t v52 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v155, v49, v161);
      swift_retain_n(v34, 2LL);
      swift_bridgeObjectRetain_n(a6, 2LL);
      double v53 = swift_retain_n(v162, 2LL);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      uint64_t v55 = static os_log_type_t.info.getter();
      uint64_t v56 = v55;
      if (os_log_type_enabled(v54, v55))
      {
        CC_SHA1_CTX v57 = swift_slowAlloc(42LL, -1LL);
        v152 = swift_slowAlloc(128LL, -1LL);
        v167 = v152;
        *(_DWORD *)CC_SHA1_CTX v57 = v144.n128_u32[0];
        LODWORD(v151) = v56;
        __int128 v58 = _typeName(_:qualified:)(v148, 0LL);
        __int128 v59 = v162;
        v165 = sub_10015ADC4(v58, v60, &v167);
        __int128 v61 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v145, v57 + 4, v57 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 12) = 2080;
        swift_bridgeObjectRetain();
        v165 = sub_10015ADC4(v149, (unint64_t)a6, &v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v61, v57 + 14, v57 + 22);
        swift_bridgeObjectRelease_n(a6, 3LL);
        *(_WORD *)(v57 + 22) = 2080;
        __int128 v62 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 152LL);
        __int128 v63 = swift_retain(v34);
        __int128 v64 = v62(v63);
        int v66 = v65;
        swift_release(v34);
        v165 = sub_10015ADC4(v64, v66, &v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v61, v57 + 24, v57 + 32);
        swift_release_n(v34, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 32) = 2080;
        uint64_t v67 = *(uint64_t (**)(uint64_t))(*(void *)v59 + 152LL);
        id v68 = swift_retain(v59);
        char v69 = v67(v68);
        v71 = v70;
        swift_release(v59);
        v165 = sub_10015ADC4(v69, v71, &v167);
        int8x16_t v72 = v59;
        a4 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v61, v57 + 34, v57 + 42);
        swift_release_n(v72, 2LL);
        a6 = v143;
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v54,  (os_log_type_t)v151,  "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s",  (uint8_t *)v57,  0x2Au);
        v73 = v152;
        swift_arrayDestroy(v152, 4LL, v142);
        a3 = v147;
        swift_slowDealloc(v73, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v160 + 8))(v52, v161);
      }

      else
      {

        swift_release_n(v162, 2LL);
        swift_release_n(v34, 2LL);
        swift_bridgeObjectRelease_n(a6, 2LL);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
      }

      uint64_t v28 = v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
      swift_beginAccess(v34 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state, v164, 1LL, 0LL);
      __int16 v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(void *)(v28 + 16);
      *(void *)(v28 + _Block_object_dispose((const void *)(v15 - 128), 8) = 0LL;
      *(void *)(v28 + 16) = 0LL;
      *(void *)uint64_t v28 = 2LL;
      uint64_t v32 = *(_BYTE *)(v28 + 24);
      *(_BYTE *)(v28 + 24) = 0;
      sub_1001A70C8(v29, v30, v31, v32);
      swift_release(v34);
      a2 = v154;
      a1 = v153;
      goto LABEL_5;
    }

    id v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, a1, a2, 0LL);
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0) {
      goto LABEL_23;
    }
    swift_release(v34);
LABEL_5:
    BOOL v26 = v157;
LABEL_6:
    if (v26 == ++v27) {
      return;
    }
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  v167 = 0LL;
  v168 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease();
  v167 = 91LL;
  v168 = 0xE100000000000000LL;
  v122._countAndFlagsBits = _typeName(_:qualified:)(v148, 0LL);
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  v123._countAndFlagsBits = 0x6C6975626572205DLL;
  v123._object = (void *)0xEA00000000003C64LL;
  String.append(_:)(v123);
  v124._countAndFlagsBits = v149;
  v124._object = a6;
  String.append(_:)(v124);
  v125._object = (void *)0x800000010033CCD0LL;
  v125._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v125);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v167,  v168,  "mediaremoted/RoutingTimeline.swift",  34LL,  2LL,  179LL,  0);
  __break(1u);
}

    uint64_t v15 = (v28 - 1) & v28;
  }

  __int16 v29 = v27 + 2;
  if (v29 < v66)
  {
    uint64_t v28 = *(void *)(v67 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        unint64_t v11 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          break;
        }
        if (v11 >= v66) {
          goto LABEL_32;
        }
        uint64_t v28 = *(void *)(v67 + 8 * v11);
        ++v29;
        if (v28) {
          goto LABEL_19;
        }
      }

    int v16 = (v22 - 1) & v22;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    swift_once(&qword_100400E80, sub_100228404);
    goto LABEL_14;
  }

  int v18 = qword_100400E80;
  swift_unknownObjectRetain(*(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session]);
  if (v18 != -1) {
    swift_once(&qword_100400E80, sub_100228404);
  }
  unint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v19, (uint64_t)qword_100400E88);
  uint32_t v20 = swift_unknownObjectRetain_n(v16, 2LL);
  BOOL v21 = (os_log_s *)Logger.logObject.getter(v20);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  uint64_t v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v67 = v15;
    uint64_t v25 = v24;
    int v66 = swift_slowAlloc(96LL, -1LL);
    id v68 = v66;
    *(_DWORD *)uint64_t v25 = 136315650;
    BOOL v26 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v65 = v23;
    uint64_t v70 = sub_10015ADC4(v26, v27, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v70 = sub_10015ADC4(0xD000000000000017LL, 0x800000010033F290LL, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v25 + 14, v25 + 22);
    *(_WORD *)(v25 + 22) = 2080;
    __int128 v64 = v25 + 24;
    uint64_t v28 = [v16 description];
    __int16 v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v30 = v7;
    uint64_t v31 = ObjectType;
    uint64_t v33 = v32;

    uint64_t v34 = v29;
    uint64_t v17 = (void *)&unk_100400000;
    uint64_t v70 = sub_10015ADC4(v34, v33, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v64, v25 + 32);
    swift_unknownObjectRelease_n(v16, 2LL);
    ObjectType = v31;
    id v7 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v65, "[%s] %s - %s", (uint8_t *)v25, 0x20u);
    uint64_t v35 = v66;
    swift_arrayDestroy(v66, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    unsigned int v36 = v25;
    uint64_t v37 = v67;
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_unknownObjectRelease(v16);

    int v38 = *(void **)&v3[v37];
    if (!v38) {
      goto LABEL_13;
    }
  }

  else
  {

    swift_unknownObjectRelease_n(v16, 3LL);
    int v38 = *(void **)&v3[v15];
    if (!v38) {
      goto LABEL_13;
    }
  }

  uint64_t v39 = (char *)[v38 nearbyInvitation];
  if (!v39) {
    goto LABEL_13;
  }
  __int16 v40 = v39;
  uint64_t v41 = *(void *)&v39[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
  swift_retain(v41);

  __int16 v42 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  id v68 = 0LL;
  char v69 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease();
  id v68 = 91LL;
  char v69 = 0xE100000000000000LL;
  v43._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  v44._object = (void *)0x800000010033F270LL;
  String.append(_:)(v44);
  uint64_t v70 = v41;
  uint64_t v45 = sub_100156B68(&qword_1003F8E50);
  __int16 v46 = sub_1001604E8( &qword_1003FB840,  &qword_1003F8E50,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>);
  v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  id v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 logInterpolatedString:v48];

  v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
  unsigned int v49 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask];
  if (v49
    && (id v50 = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser]) != 0)
  {
    CFStringRef v51 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v7, 1LL, 1LL, v51);
    uint64_t v52 = (void *)swift_allocObject(&unk_1003AA508, 72LL, 7LL);
    v52[2] = 0LL;
    v52[3] = 0LL;
    v52[4] = v50;
    v52[5] = v49;
    v52[6] = v3;
    v52[7] = v41;
    v52[8] = ObjectType;
    swift_retain(v49);
    swift_retain(v50);
    double v53 = v3;
    uint64_t v54 = sub_10015AA50((uint64_t)v7, (uint64_t)&unk_1003FB850, (uint64_t)v52);
    swift_release(v54);
  }

  else
  {
    swift_release(v41);
  }

  __break(1u);
}

void sub_10002DC84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002DC9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002DCAC(uint64_t a1)
{
}

void sub_10002DCB4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  char v3 = *(void **)(*(void *)(a1 + 32) + 72LL);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10002DFD0;
  v23[3] = &unk_10039A968;
  uint64_t v22 = v2;
  uint64_t v24 = v22;
  [v3 enumerateKeysAndObjectsUsingBlock:v23];
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v5 = (objc_class *)objc_opt_class(*(void *)(a1 + 32));
  id v6 = NSStringFromClass(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v4 appendFormat:@"%@ %p {\n", v7, *(void *)(a1 + 32)];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playerPath = %@\n", *(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) player]);
  [v8 appendFormat:@"  player = %@\n", v9];

  unint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  else {
    unint64_t v11 = @"NO";
  }
  [v10 appendFormat:@"  canBeNowPlayingPlayer = %@\n", v11];
  if (*(void *)(*(void *)(a1 + 32) + 88LL)) {
    BOOL v12 = @"YES";
  }
  else {
    BOOL v12 = @"NO";
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  transaction = %@\n", v12];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playbackState = %@\n", *(void *)(*(void *)(a1 + 32) + 56)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  inferredPlaybackState = %@\n", *(void *)(*(void *)(a1 + 32) + 64)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playbackStateHistory = %@\n", v22];
  if (*(_BYTE *)(*(void *)(a1 + 32) + 80LL)) {
    uint64_t v13 = @"YES";
  }
  else {
    uint64_t v13 = @"NO";
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  pictureInPictureEnabled = %@\n", v13];
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (*(void *)(v14 + 16))
  {
    [v15 appendFormat:@"  supportedCommands = %@\n", *(void *)(v14 + 16)];
  }

  else
  {
    StringRepresentation = (void *)MRDataCreateStringRepresentation(*(void *)(v14 + 24));
    [v15 appendFormat:@"  supportedCommands = %@\n", StringRepresentation];
  }

  uint64_t v17 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  int v18 = (void *)MRPlaybackQueueCapabilitiesCopyDescription(*(void *)(*(void *)(a1 + 32) + 40LL));
  [v17 appendFormat:@"  capabilities = %@\n", v18];

  unint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t v20 = MRCreateIndentedDebugDescriptionFromObject(*(void *)(*(void *)(a1 + 32) + 32LL));
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  [v19 appendFormat:@"  playbackQueue = %@\n", v21];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  subscriptionController = %@\n", *(void *)(*(void *)(a1 + 32) + 128)];
  if (*(void *)(*(void *)(a1 + 32) + 136LL)) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  participantDataSource = %@\n", *(void *)(*(void *)(a1 + 32) + 136)];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"}"];
}

void sub_10002DFD0(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = (id)MRMediaRemoteCopyPlaybackStateDescription([a2 intValue]);
  [v4 setObject:v5 forKeyedSubscript:v6];
}

void sub_10002E0E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002E0FC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002E1E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002E200(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002E324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002E33C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  if (!v3)
  {
    if (*(void *)(v2 + 24))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRCommandInfo commandInfosFromData:](&OBJC_CLASS___MRCommandInfo, "commandInfosFromData:"));
      [*(id *)(a1 + 32) setSupportedRemoteControlCommands:v4];

      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  id v5 = [v3 copy];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10002E430(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v4 = _MRLogForCategory(1LL, a2);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(v7 + 8);
      uint64_t v9 = *(void *)(v7 + 16);
      int v16 = 138544130;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      unint64_t v19 = @"supportedCommands";
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      uint64_t v23 = v8;
      unint64_t v11 = "Set: %{public}@ setting %{public}@ from <%@> to <%@>";
      BOOL v12 = v5;
      uint32_t v13 = 42;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
    }
  }

  else if (v6)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v16 = 138543874;
    uint64_t v17 = v15;
    __int16 v18 = 2114;
    unint64_t v19 = @"supportedCommands";
    __int16 v20 = 2112;
    uint64_t v21 = v14;
    unint64_t v11 = "Set: %{public}@ setting %{public}@ to <%@>";
    BOOL v12 = v5;
    uint32_t v13 = 32;
    goto LABEL_6;
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), *(id *)(a1 + 40));
}

void sub_10002E600(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v3 != v2 && (objc_msgSend(v3, "isEqualToData:") & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    id v6 = [*(id *)(a1 + 40) copy];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = v6;

    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) supportedRemoteControlCommands]);
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_supportedCommandsDidChange:", *(void *)(*(void *)(a1 + 32) + 24));
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }

id sub_10002E718(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(1LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) minimalReadableDescription]);
    int v34 = 138543874;
    uint64_t v35 = v5;
    __int16 v36 = 2114;
    uint64_t v37 = @"playbackQueue";
    __int16 v38 = 2112;
    uint64_t v39 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v34,  0x20u);
  }

  uint64_t v8 = _MRLogForCategory(1LL, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contentItemWithOffset:0]);
    int v34 = 138543874;
    uint64_t v35 = v10;
    __int16 v36 = 2114;
    uint64_t v37 = @"nowPlayingItem";
    __int16 v38 = 2112;
    uint64_t v39 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v34,  0x20u);
  }

  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) playbackQueue]);
  uint32_t v13 = (void *)MRContentItemCopyMinimalReadableDescription([v12 contentItemWithOffset:0], 0);

  uint64_t v15 = _MRLogForCategory(1LL, v14);
  int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 8);
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v18 + 32) playbackQueue]);
      uint64_t v21 = (void *)MRContentItemCopyMinimalReadableDescription([v20 contentItemWithOffset:0], 0);
      __int16 v22 = (void *)MRContentItemCopyMinimalReadableDescription( [*(id *)(a1 + 40) contentItemWithOffset:0],  0);
      int v34 = 138544130;
      uint64_t v35 = v19;
      __int16 v36 = 2114;
      uint64_t v37 = @"nowPlayingItem";
      __int16 v38 = 2112;
      uint64_t v39 = v21;
      __int16 v40 = 2112;
      uint64_t v41 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v34,  0x2Au);
    }
  }

  else if (v17)
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v24 = (void *)MRContentItemCopyMinimalReadableDescription( [*(id *)(a1 + 40) contentItemWithOffset:0],  0);
    int v34 = 138543874;
    uint64_t v35 = v23;
    __int16 v36 = 2114;
    uint64_t v37 = @"nowPlayingItem";
    __int16 v38 = 2112;
    uint64_t v39 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v34,  0x20u);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contentItemWithOffset:0]);
  BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) playbackQueue]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 contentItemWithOffset:0]);
  if (v25 == v27) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = [v25 isEqual:v27] ^ 1;
  }

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  uint64_t v29 = *(void *)(a1 + 40);
  if (v29) {
    uint64_t v30 = -[MRDPlaybackQueue initWithPlaybackQueue:]( objc_alloc(&OBJC_CLASS___MRDPlaybackQueue),  "initWithPlaybackQueue:",  *(void *)(a1 + 40));
  }
  else {
    uint64_t v30 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), v30);
  if (v29) {

  }
  uint64_t v31 = *(id **)(a1 + 32);
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31[4] playbackQueue]);
  objc_msgSend(v31, "_onQueue_playbackQueueDidChange:nowPlayingItemChanged:", v32, v28);

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

void sub_10002EBA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002EBB8(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) playbackQueue]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10002ECA4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 64) playbackState];
  if ((_DWORD)result != *(_DWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
    uint64_t v3 = (void *)MRMediaRemoteCopyPlaybackStateDescription([*(id *)(*(void *)(a1 + 32) + 64) playbackState]);

    uint64_t v5 = _MRLogForCategory(1LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(v8 + 8);
        uint64_t v10 = (void *)MRMediaRemoteCopyPlaybackStateDescription([*(id *)(v8 + 64) playbackState]);
        unint64_t v11 = (void *)MRMediaRemoteCopyPlaybackStateDescription(*(unsigned int *)(a1 + 40));
        int v19 = 138544130;
        uint64_t v20 = v9;
        __int16 v21 = 2114;
        __int16 v22 = @"inferred playback state";
        __int16 v23 = 2112;
        uint64_t v24 = v10;
        __int16 v25 = 2112;
        BOOL v26 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v19,  0x2Au);

LABEL_7:
      }
    }

    else if (v7)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v10 = (void *)MRMediaRemoteCopyPlaybackStateDescription(*(unsigned int *)(a1 + 40));
      int v19 = 138543874;
      uint64_t v20 = v12;
      __int16 v21 = 2114;
      __int16 v22 = @"inferred playback state";
      __int16 v23 = 2112;
      uint64_t v24 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v19,  0x20u);
      goto LABEL_7;
    }

    uint32_t v13 = objc_alloc(&OBJC_CLASS___MRDNowPlayingPlayerClientPlaybackState);
    uint64_t v14 = *(unsigned int *)(a1 + 40);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    int v16 = -[MRDNowPlayingPlayerClientPlaybackState initWithPlaybackState:date:]( v13,  "initWithPlaybackState:date:",  v14,  v15);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 64);
    *(void *)(v17 + 64) = v16;

    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }

  return result;
}

void sub_10002EF60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002EF78(uint64_t a1)
{
}

id sub_10002F018(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 56) playbackState];
  if ((_DWORD)result != *(_DWORD *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
    uint64_t v3 = (void *)MRMediaRemoteCopyPlaybackStateDescription([*(id *)(*(void *)(a1 + 32) + 56) playbackState]);

    uint64_t v5 = _MRLogForCategory(1LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(v8 + 8);
        uint64_t v10 = (void *)MRMediaRemoteCopyPlaybackStateDescription([*(id *)(v8 + 56) playbackState]);
        unint64_t v11 = (void *)MRMediaRemoteCopyPlaybackStateDescription(*(unsigned int *)(a1 + 48));
        int v16 = 138544130;
        uint64_t v17 = v9;
        __int16 v18 = 2114;
        int v19 = @"playback state";
        __int16 v20 = 2112;
        __int16 v21 = v10;
        __int16 v22 = 2112;
        __int16 v23 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v16,  0x2Au);

LABEL_7:
      }
    }

    else if (v7)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v10 = (void *)MRMediaRemoteCopyPlaybackStateDescription(*(unsigned int *)(a1 + 48));
      int v16 = 138543874;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      int v19 = @"playback state";
      __int16 v20 = 2112;
      __int16 v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v16,  0x20u);
      goto LABEL_7;
    }

    uint32_t v13 = -[MRDNowPlayingPlayerClientPlaybackState initWithPlaybackState:date:]( objc_alloc(&OBJC_CLASS___MRDNowPlayingPlayerClientPlaybackState),  "initWithPlaybackState:date:",  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 40));
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 56);
    *(void *)(v14 + 56) = v13;

    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }

  return result;
}

void sub_10002F278(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
}

void sub_10002F334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002F34C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 81LL);
  return result;
}

unsigned __int8 *sub_10002F3BC(uint64_t a1)
{
  id result = *(unsigned __int8 **)(a1 + 32);
  if (result[81] != *(unsigned __int8 *)(a1 + 40))
  {
    objc_msgSend(result, "_onQueue_pushState");
    *(_BYTE *)(*(void *)(a1 + 32) + 81LL) = *(_BYTE *)(a1 + 40);
    return (unsigned __int8 *)objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }

  return result;
}

void sub_10002F4C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002F4D8(uint64_t a1)
{
}

void sub_10002F568(uint64_t a1)
{
}

void sub_10002F628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002F640(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002F72C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 date]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10002F94C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 40LL);
  if (result != v2)
  {
    uint64_t v4 = (void *)MRPlaybackQueueCapabilitiesCopyDescription(result);

    uint64_t v6 = _MRLogForCategory(1LL, v5);
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(v9 + 8);
        unint64_t v11 = (void *)MRPlaybackQueueCapabilitiesCopyDescription(*(void *)(v9 + 40));
        uint64_t v12 = (void *)MRPlaybackQueueCapabilitiesCopyDescription(*(void *)(a1 + 40));
        int v14 = 138544130;
        uint64_t v15 = v10;
        __int16 v16 = 2114;
        uint64_t v17 = @"playbackQueueCapabilities";
        __int16 v18 = 2112;
        int v19 = v11;
        __int16 v20 = 2112;
        __int16 v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v14,  0x2Au);

LABEL_7:
      }
    }

    else if (v8)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
      unint64_t v11 = (void *)MRPlaybackQueueCapabilitiesCopyDescription(*(void *)(a1 + 40));
      int v14 = 138543874;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      uint64_t v17 = @"playbackQueueCapabilities";
      __int16 v18 = 2112;
      int v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v14,  0x20u);
      goto LABEL_7;
    }

    *(void *)(*(void *)(a1 + 32) + 40LL) = *(void *)(a1 + 40);
    return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_playbackQueueCapabilitiesDidChange:",  *(void *)(*(void *)(a1 + 32) + 40));
  }

  return result;
}

void sub_10002FB80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002FB98(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 40LL);
  return result;
}

void sub_10002FC3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002FC54(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_isPlaying");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10002FD5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002FD74(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 80LL);
  return result;
}

void sub_10002FE18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002FE30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32) || [*(id *)(v2 + 16) count]) {
    uint64_t result = 1LL;
  }
  else {
    uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_onQueue_isPlaying");
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_10002FF34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002FF4C(uint64_t a1)
{
  uint64_t v2 = -[MRNowPlayingState initWithPlayerPath:]( objc_alloc(&OBJC_CLASS___MRNowPlayingState),  "initWithPlayerPath:",  *(void *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) supportedRemoteControlCommands]);
  id v6 = [v5 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setSupportedCommands:v6];

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) playbackQueue]);
  id v8 = [v7 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPlaybackQueue:v8];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPlaybackQueueCapabilities:*(void *)(*(void *)(a1 + 32) + 40)];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) client]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 displayName]);
  id v11 = [v10 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setDisplayName:v11];

  id v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState"));
  objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "setPlaybackState:",  objc_msgSend(v13, "playbackState"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v13 date]);
  [v12 timeIntervalSinceReferenceDate];
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setPlaybackStateTimestamp:");
}

void sub_100030158( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100030170(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_lastPlayingDate"));
  [v3 timeIntervalSinceNow];
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -v2;
}

void sub_1000302BC(uint64_t a1)
{
}

id sub_10003034C(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) player]);
  id v3 = [v2 copy];
  [*(id *)(*(void *)(a1 + 32) + 8) setPlayer:v3];

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

id sub_100030408(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = *(_BYTE *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

void sub_1000304B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  [*(id *)(*(void *)(a1 + 32) + 8) setClient:v2];
}

id sub_100030578(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) player]);
  [v2 mergeFrom:*(void *)(a1 + 40)];

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

id sub_100030670(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onQueue_updatePlaybackQueue:fromRequest:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_100030A50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackQueueContentItemsArtworkDidChange:", *(void *)(a1 + 40));
}

void sub_100030B34(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100030C4C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "allValues", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        BOOL v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100030E54(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2[9] allValues]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 _sortSnapshots:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

int64_t sub_100030EC4( id a1, MRDNowPlayingPlayerClientPlaybackStateSnapshot *a2, MRDNowPlayingPlayerClientPlaybackStateSnapshot *a3)
{
  return -[MRDNowPlayingPlayerClientPlaybackStateSnapshot compare:](a3, "compare:", a2);
}

void sub_10003103C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id obj = *(id *)(v7 + 40);
    uint64_t v8 = objc_claimAutoreleasedReturnValue( [v3 createPlaybackQueueForRequest:v5 cachingPolicy:v4 playerPath:v6 partiallyCachedItems:&obj capabilities:*(void *)(v2 + 40)]);
    objc_storeStrong((id *)(v7 + 40), obj);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    __int128 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  else
  {
    __int128 v11 = -[MRPlaybackQueue initWithContentItems:]( objc_alloc(&OBJC_CLASS___MRPlaybackQueue),  "initWithContentItems:",  &__NSArray0__struct);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }

void sub_1000311A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToStrongObjectsMapTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 112);
    *(void *)(v4 + 112) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112LL);
  }

  id v6 = v2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v6 setObject:*(void *)(a1 + 40) forKey:v7];
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v17 = 0LL;
  __int16 v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  __int16 v20 = sub_10002DC9C;
  __int16 v21 = sub_10002DCAC;
  id v22 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100031378;
  v13[3] = &unk_10039AAC0;
  objc_copyWeak(&v16, &location);
  id v10 = v7;
  id v14 = v10;
  uint64_t v15 = &v17;
  uint64_t v11 = objc_claimAutoreleasedReturnValue( [v8 addObserverForName:@"MRDMusicHandoffSessionDidFinishNotification" object:v9 queue:0 usingBlock:v13]);
  uint64_t v12 = (void *)v18[5];
  v18[5] = v11;

  objc_destroyWeak(&v16);
  _Block_object_dispose(&v17, 8);

  objc_destroyWeak(&location);
}

void sub_100031348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_100031378(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v3 = (dispatch_queue_s *)WeakRetained[12];
    block[1] = 3221225472LL;
    block[2] = sub_100031410;
    block[3] = &unk_100399DF8;
    id v6 = WeakRetained;
    block[0] = _NSConcreteStackBlock;
    uint64_t v8 = WeakRetained;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v9 = v4;
    uint64_t v10 = v5;
    dispatch_sync(v3, block);

    id WeakRetained = v6;
  }
}

void sub_100031410(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_100031564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003157C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 112LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionIdentifier]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_100031690(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 32) clearArtwork];
}

void sub_100031718(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
  [WeakRetained nowPlayingPlayerClient:*(void *)(a1 + 32) playbackQueueParticipantsDidChange:*(void *)(a1 + 40)];
}

void sub_100032A28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100032A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(3LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138543362;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@",  (uint8_t *)&v8,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLastKnownBluetoothAddress:v3];
  [WeakRetained _txtDataChanged];
}

void sub_100032B3C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _initializeBonjourServiceWithDeviceInfo:v3];
}

void sub_1000331D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = dispatch_time(0LL, 30000000000LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10003327C;
  v6[3] = &unk_100398E60;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_after(v4, &_dispatch_main_q, v6);
}

id sub_10003327C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initializeBonjourServiceWithDeviceInfo:*(void *)(a1 + 40)];
}

id sub_1000334A4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _txtDataChangedWithDeviceInfo:a2];
}

id sub_100033D58(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100033FF4(_Unwind_Exception *a1)
{
}

void sub_1000340AC(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v12 hostedExternalDeviceConnectionStateDidChange:*(unsigned int *)(a1 + 48) withError:*(void *)(a1 + 40)];
  }

  else
  {
    dispatch_time_t v4 = v3;
    objc_sync_enter(v4);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (void *)MRExternalDeviceConnectionStateCopyDescription(*(unsigned int *)(a1 + 48));
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412802;
        id v14 = v9;
        __int16 v15 = 2112;
        uint64_t v16 = v10;
        __int16 v17 = 2112;
        uint64_t v18 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@",  buf,  0x20u);
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 104) setConnectionState:*(unsigned int *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 32) + 104) setConnectionStateError:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }

void sub_100034228(_Unwind_Exception *a1)
{
}

void sub_1000342DC(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v11 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v11 hostedExternalDeviceDeviceInfoDidChange:*(void *)(a1 + 40)];
  }

  else
  {
    dispatch_time_t v4 = v3;
    objc_sync_enter(v4);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v13 = v9;
        __int16 v14 = 2112;
        uint64_t v15 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching deviceInfo %@ for %@",  buf,  0x16u);
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 104) setDeviceInfo:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }

void sub_10003442C(_Unwind_Exception *a1)
{
}

void sub_100034500(void *a1, int a2)
{
  if (a2)
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 64) remoteObjectProxy]);
    [v10 hostedExternalDeviceDidReceiveCustomData:a1[5] withName:a1[6]];
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v4 = [v3 verboseHostedExternalDeviceClientLogging];

    if (v4)
    {
      uint64_t v5 = MRLogCategoryConnections();
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = a1[5];
        uint64_t v7 = a1[6];
        uint64_t v9 = a1[4];
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        uint64_t v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching customData %@ %@ for %@",  buf,  0x20u);
      }
    }
  }

void sub_1000346C8(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v11 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v11 hostedExternalDeviceEndpointDidChange:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v13 = v9;
        __int16 v14 = 2112;
        uint64_t v15 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching endpoint %@ for %@",  buf,  0x16u);
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 104) setEndpoint:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }

void sub_100034818(_Unwind_Exception *a1)
{
}

void sub_1000348D0(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v18 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v18 hostedExternalDeviceVolumeCapabilitiesDidChange:*(unsigned int *)(a1 + 48) forOutputDevice:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = (void *)MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription(*(unsigned int *)(a1 + 48));
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412802;
        __int16 v20 = v9;
        __int16 v21 = 2112;
        uint64_t v22 = v10;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@",  buf,  0x20u);
      }
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolumeCapabilities]);
      BOOL v13 = v12 == 0LL;

      if (v13)
      {
        __int16 v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceVolumeCapabilities:v14];
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolumeCapabilities]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
      [v16 setObject:v15 forKeyedSubscript:v17];
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
      [*(id *)(*(void *)(a1 + 32) + 104) setVolumeCapabilities:v15];
    }

    objc_sync_exit(v4);
  }

void sub_100034B00(_Unwind_Exception *a1)
{
}

void sub_100034BC4(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    id v22 = v4;
    [v4 hostedExternalDeviceVolumeDidChange:*(void *)(a1 + 40) forOutputDevice:v5];
  }

  else
  {
    unsigned int v6 = v3;
    objc_sync_enter(v6);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v8 = [v7 verboseHostedExternalDeviceClientLogging];

    if (v8)
    {
      uint64_t v10 = MRLogCategoryConnections();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        double v12 = *(float *)(a1 + 48);
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 134218498;
        double v24 = v12;
        __int16 v25 = 2112;
        uint64_t v26 = v13;
        __int16 v27 = 2112;
        uint64_t v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@",  buf,  0x20u);
      }
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolume]);
      BOOL v16 = v15 == 0LL;

      if (v16)
      {
        id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceVolume:v18];
      }

      LODWORD(v17) = *(_DWORD *)(a1 + 48);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17));
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolume]);
      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
      [v20 setObject:v19 forKeyedSubscript:v21];
    }

    else
    {
      LODWORD(v9) = *(_DWORD *)(a1 + 48);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v9));
      [*(id *)(*(void *)(a1 + 32) + 104) setVolume:v19];
    }

    objc_sync_exit(v6);
  }

void sub_100034DEC(_Unwind_Exception *a1)
{
}

void sub_100034EA4(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v18 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v18 hostedExternalDeviceIsMutedDidChange:*(unsigned __int8 *)(a1 + 48) forOutputDevice:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int8 *)(a1 + 48);
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 67109634;
        int v20 = v9;
        __int16 v21 = 2112;
        uint64_t v22 = v10;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching isMuted %u outputDevice %@ for %@",  buf,  0x1Cu);
      }
    }

    if (*(void *)(a1 + 40))
    {
      double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceMute]);
      BOOL v13 = v12 == 0LL;

      if (v13)
      {
        uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceMute:v14];
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 48)));
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceMute]);
      double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
      [v16 setObject:v15 forKeyedSubscript:v17];
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 48)));
      [*(id *)(*(void *)(a1 + 32) + 104) setIsMuted:v15];
    }

    objc_sync_exit(v4);
  }

void sub_1000350C8(_Unwind_Exception *a1)
{
}

void sub_100035178(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v15 hostedExternalDeviceDidAddOutputDevice:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@",  buf,  0x16u);
      }
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    BOOL v12 = v11 == 0LL;

    if (v12)
    {
      BOOL v13 = objc_alloc_init(&OBJC_CLASS___MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v13];
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    [v14 addOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }

void sub_100035320(_Unwind_Exception *a1)
{
}

void sub_1000353D0(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v15 hostedExternalDeviceDidChangeOutputDevice:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@",  buf,  0x16u);
      }
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    BOOL v12 = v11 == 0LL;

    if (v12)
    {
      BOOL v13 = objc_alloc_init(&OBJC_CLASS___MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v13];
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    [v14 changeOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }

void sub_100035578(_Unwind_Exception *a1)
{
}

void sub_100035628(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v15 hostedExternalDeviceDidRemoveOutputDevice:*(void *)(a1 + 40)];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@",  buf,  0x16u);
      }
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    BOOL v12 = v11 == 0LL;

    if (v12)
    {
      BOOL v13 = objc_alloc_init(&OBJC_CLASS___MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v13];
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications]);
    [v14 removeOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }

void sub_1000357D0(_Unwind_Exception *a1)
{
}

void sub_1000358A4(void *a1, int a2)
{
  id v3 = (id *)a1[4];
  if (a2)
  {
    id v17 = (id)objc_claimAutoreleasedReturnValue([v3[8] remoteObjectProxy]);
    [v17 discoveryOutputDevicesChanged:a1[5] forConfiguration:a1[6]];
  }

  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = a1[5];
        uint64_t v9 = a1[6];
        uint64_t v11 = a1[4];
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v19 = v10;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@",  buf,  0x20u);
      }
    }

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) discoverySessionConfigurationsResults]);
    BOOL v13 = v12 == 0LL;

    if (v13)
    {
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [*(id *)(a1[4] + 104) setDiscoverySessionConfigurationsResults:v14];
    }

    uint64_t v15 = a1[5];
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) discoverySessionConfigurationsResults]);
    [v16 setObject:v15 forKeyedSubscript:a1[6]];

    objc_sync_exit(v4);
  }

void sub_100035A5C(_Unwind_Exception *a1)
{
}

void sub_100035AE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100035B90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100035C40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100035CEC(_Unwind_Exception *a1)
{
}

void sub_100035DBC(_Unwind_Exception *a1)
{
}

void sub_100035E14(_Unwind_Exception *a1)
{
}

void sub_100035EB0(_Unwind_Exception *a1)
{
}

void sub_100035F24(_Unwind_Exception *a1)
{
}

void sub_1000365DC(uint64_t a1, void *a2, void *a3)
{
  unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 64LL);
  id v5 = a3;
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 remoteObjectProxy]);
  [v7 discoveryOutputDevicesChanged:v5 forConfiguration:v6];
}

void sub_100036648(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 unsignedIntValue];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDevices]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100036738;
  v12[3] = &unk_10039AC00;
  id v13 = v5;
  id v11 = v5;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "msv_firstWhere:", v12));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy]);
  [v10 hostedExternalDeviceVolumeCapabilitiesDidChange:v6 forOutputDevice:v9];
}

id sub_100036738(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100036778(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 floatValue];
  int v7 = v6;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 outputDevices]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100036868;
  v14[3] = &unk_10039AC00;
  id v15 = v5;
  id v13 = v5;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "msv_firstWhere:", v14));

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy]);
  LODWORD(v12) = v7;
  [v11 hostedExternalDeviceVolumeDidChange:v10 forOutputDevice:v12];
}

id sub_100036868(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000368A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 BOOLValue];
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDevices]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100036998;
  v12[3] = &unk_10039AC00;
  id v13 = v5;
  id v11 = v5;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "msv_firstWhere:", v12));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy]);
  [v10 hostedExternalDeviceIsMutedDidChange:v6 forOutputDevice:v9];
}

id sub_100036998(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100036EB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (id)MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription([a3 unsignedIntValue]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_1000373F0(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___MRDIDSService);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[IDSService mr_sharedIDSService](&OBJC_CLASS___IDSService, "mr_sharedIDSService"));
  id v2 = -[MRDIDSService initWithService:](v1, "initWithService:", v4);
  id v3 = (void *)qword_1003FDC40;
  qword_1003FDC40 = (uint64_t)v2;
}

void sub_100037630(_Unwind_Exception *a1)
{
}

uint64_t sub_1000376D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100037768(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100037890(_Unwind_Exception *a1)
{
}

void sub_10003796C(_Unwind_Exception *a1)
{
}

void sub_100037A34(_Unwind_Exception *a1)
{
}

id sub_100037A48(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_100037ED4(_Unwind_Exception *a1)
{
}

void sub_10003845C(_Unwind_Exception *a1)
{
}

uint64_t sub_100038478(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100038488(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10003856C;
  v3[3] = &unk_10039AD38;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 88);
  [v2 enumerateObjectsUsingBlock:v3];
}

uint64_t sub_10003856C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void))(a2 + 16))( a2,  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9],  a1[10]);
}

void sub_10003858C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10003865C;
  v3[3] = &unk_10039AD88;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  [v2 enumerateObjectsUsingBlock:v3];
}

uint64_t sub_10003865C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(a2 + 16))( a2,  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9]);
}

void sub_100038D8C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MRDNowPlayingDataSource);
  id v2 = (void *)qword_1003FDC50;
  qword_1003FDC50 = (uint64_t)v1;
}

void sub_100038ED8(_Unwind_Exception *a1)
{
}

void sub_100038F40(_Unwind_Exception *a1)
{
}

void sub_100038FF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100039004(uint64_t a1, uint64_t a2)
{
  return objc_opt_respondsToSelector(a2, *(void *)(a1 + 32)) & 1;
}

NSMutableDictionary *sub_1000390CC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 32)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, @"reason");

  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 > 7) {
    id v5 = @"?";
  }
  else {
    id v5 = off_10039AE30[v4];
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, @"reasonString");
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, @"wasPopped");

  return v2;
}

void sub_100039400(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidStartNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_1000394E0(uint64_t a1)
{
  id v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 184LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = @"MRDMusicHandoffSessionErrorKey";
  id v7 = v2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v3 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_10003972C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_1000397E8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_1000398A4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidStartNotification" object:v4 userInfo:v5];
}

void sub_10003A164(_Unwind_Exception *a1)
{
}

void sub_10003A1E8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v13 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v14 = (MRCommandResult *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:v9]);
    id v15 = [v10 mutableCopy];
    [v15 setObject:&__kCFBooleanTrue forKeyedSubscript:kMRMediaRemoteOptionIsRedirectingCommand];
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v17 = [v16 verboseOriginForwarderLogging];

    if (v17)
    {
      uint64_t v19 = _MRLogForCategory(0LL, v18);
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v27 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[MRDOriginForwarder] %@ forwarding command",  buf,  0xCu);
      }
    }

    uint64_t v21 = -[MRDRemoteControlCommand initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:]( objc_alloc(&OBJC_CLASS___MRDRemoteControlCommand),  "initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:",  a3,  v14,  v14,  0LL,  v15);
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 remoteControlServer]);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10003A428;
    v24[3] = &unk_100399DA8;
    id v25 = v11;
    [v23 sendRemoteControlCommand:v21 completion:v24];
  }

  else
  {
    uint64_t v14 = -[MRCommandResult initWithWithSendError:description:]( objc_alloc(&OBJC_CLASS___MRCommandResult),  "initWithWithSendError:description:",  6LL,  @"OriginForwarder does not exisit");
    (*((void (**)(id, MRCommandResult *))v11 + 2))(v11, v14);
  }
}

uint64_t sub_10003A428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003A434(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:a3]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v12 = [v11 verboseOriginForwarderLogging];

    if (v12)
    {
      uint64_t v14 = _MRLogForCategory(0LL, v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v20 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[MRDOriginForwarder] %@ forwarding playbackQueueRequest",  buf,  0xCu);
      }
    }

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10003A5D4;
    v17[3] = &unk_10039AEB8;
    id v18 = v7;
    MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(a2, v10, &_dispatch_main_q, v17);
  }

  else
  {
    BOOL v16 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
    (*((void (**)(id, void, NSError *))v7 + 2))(v7, 0LL, v16);
  }
}

uint64_t sub_10003A5D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003A5E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:a3]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v12 = [v11 verboseOriginForwarderLogging];

    if (v12)
    {
      uint64_t v14 = _MRLogForCategory(0LL, v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v20 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[MRDOriginForwarder] %@ forwarding playbackSessionRequest",  buf,  0xCu);
      }
    }

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10003A780;
    v17[3] = &unk_10039AEB8;
    id v18 = v7;
    MRMediaRemotePlaybackSessionRequest(a2, v10, &_dispatch_main_q, v17);
  }

  else
  {
    BOOL v16 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
    (*((void (**)(id, void, NSError *))v7 + 2))(v7, 0LL, v16);
  }
}

uint64_t sub_10003A780(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003A78C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v14 = WeakRetained;
  if (WeakRetained)
  {
    id v15 = (NSError *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:v11]);
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v17 = [v16 verboseOriginForwarderLogging];

    if (v17)
    {
      uint64_t v19 = _MRLogForCategory(0LL, v18);
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v24 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[MRDOriginForwarder] %@ forwarding playbackSessionMigrationRequest",  buf,  0xCu);
      }
    }

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10003A95C;
    v21[3] = &unk_10039AF08;
    id v22 = v12;
    MRMediaRemoteSendPlaybackSession(v9, v10, v15, &_dispatch_main_q, v21);
  }

  else
  {
    id v15 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
    (*((void (**)(id, void, NSError *))v12 + 2))(v12, 0LL, v15);
  }
}

uint64_t sub_10003A95C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003A968(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:a3]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10003AA58;
    v12[3] = &unk_100399530;
    id v13 = v7;
    MRMediaRemoteSendPlaybackSessionMigrateBegin(a2, v10, &_dispatch_main_q, v12);
  }

  else
  {
    id v11 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
    (*((void (**)(id, NSError *))v7 + 2))(v7, v11);
  }
}

uint64_t sub_10003AA58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003AA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = WeakRetained;
  if (WeakRetained)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained createDelocalizedPlayerPath:a4]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10003AB64;
    v14[3] = &unk_100399530;
    id v15 = v9;
    MRMediaRemoteSendPlaybackSessionMigrateEnd(a2, a3, v12, &_dispatch_main_q, v14);
  }

  else
  {
    id v13 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
    (*((void (**)(id, NSError *))v9 + 2))(v9, v13);
  }
}

uint64_t sub_10003AB64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10003DA90(uint64_t a1, void *a2)
{
  if ([a2 isMediaRemoteDaemon])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MRMediaRemoteServiceClient sharedServiceClient]( &OBJC_CLASS___MRMediaRemoteServiceClient,  "sharedServiceClient"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationClient]);
    id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v4 notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003DB50;
    block[3] = &unk_100399EC0;
    id v8 = *(id *)(a1 + 32);
    dispatch_async(v5, block);
  }

  return 0LL;
}

void sub_10003DB50(uint64_t a1)
{
  qos_class_t v2 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v2, 0LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10003DBDC;
  v5[3] = &unk_10039AFA8;
  id v6 = *(id *)(a1 + 32);
  MRMediaRemoteNowPlayingPing(v4, v5);
}

uint64_t sub_10003DBDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003E520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_10003E54C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003E55C(uint64_t a1)
{
}

void sub_10003E564(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if ([v6 count])
  {
    switch(*(_DWORD *)(a1 + 64))
    {
      case 1:
        id v10 = -[objc_class sharedAudioPresentationOutputContext]( off_1003F5BA0(),  "sharedAudioPresentationOutputContext");
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
        goto LABEL_10;
      case 2:
        id v14 = -[objc_class sharedSystemAudioContext](off_1003F5BA0(), "sharedSystemAudioContext");
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v14);
        goto LABEL_10;
      case 3:
        id v15 = -[objc_class sharedSystemScreenContext](off_1003F5BA0(), "sharedSystemScreenContext");
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v15);
        goto LABEL_10;
      case 4:
        id v16 = -[objc_class iTunesAudioContext](off_1003F5BA0(), "iTunesAudioContext");
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v16);
        goto LABEL_10;
      case 5:
        id v17 = -[objc_class auxiliaryOutputContext](off_1003F5BA0(), "auxiliaryOutputContext");
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v17);
LABEL_10:
        id v13 = (void *)v11;
        if (!v11) {
          goto LABEL_12;
        }
        unsigned int v18 = *(_DWORD *)(a1 + 64);
        break;
      default:
LABEL_12:
        uint64_t v19 = _MRLogForCategory(0LL, v9);
        __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v31) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.",  (uint8_t *)&v31,  2u);
        }

        id v21 = -[objc_class sharedSystemAudioContext](off_1003F5BA0(), "sharedSystemAudioContext");
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v21);
        unsigned int v18 = 2;
        break;
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 avOutputDevice]);
    uint64_t v25 = _MRLogForCategory(0LL, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      if (v18 > 5) {
        __int16 v27 = @"<Unknown>";
      }
      else {
        __int16 v27 = off_10039B038[v18];
      }
      int v31 = 138543874;
      uint64_t v32 = v23;
      __int16 v33 = 2114;
      int v34 = v13;
      __int16 v35 = 2114;
      __int16 v36 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)",  (uint8_t *)&v31,  0x20u);
    }

    [v13 setOutputDevice:v23 options:*(void *)(a1 + 32)];
  }

  else
  {
    uint64_t v12 = _MRLogForCategory(0LL, v9);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
      sub_1002B558C(a1, (uint64_t)v7, (os_log_t)v13);
    }
  }

  uint64_t v28 = (id *)*(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v29 = v28;
  if (v28) {
    BOOL v30 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) == 0LL;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30) {
    objc_msgSend(v28[6], "removeObject:");
  }
}

Class sub_10003E924()
{
  if (qword_1003FDC70 != -1) {
    dispatch_once(&qword_1003FDC70, &stru_10039B018);
  }
  Class result = objc_getClass("AVOutputDeviceDiscoverySession");
  qword_1003FDC68 = (uint64_t)result;
  off_1003F5B90 = (uint64_t (*)())sub_10003E980;
  return result;
}

id sub_10003E980()
{
  return (id)qword_1003FDC68;
}

void sub_10003E98C(id a1)
{
  qword_1003FDC78 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_10003E9B4()
{
  if (qword_1003FDC70 != -1) {
    dispatch_once(&qword_1003FDC70, &stru_10039B018);
  }
  v0 = (id *)dlsym((void *)qword_1003FDC78, "AVOutputContextSetOutputDevicePasswordKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDC60, *v0);
  }
  off_1003F5B98 = (uint64_t (*)())sub_10003EA2C;
  return (id)qword_1003FDC60;
}

id sub_10003EA2C()
{
  return (id)qword_1003FDC60;
}

Class sub_10003EA38()
{
  if (qword_1003FDC70 != -1) {
    dispatch_once(&qword_1003FDC70, &stru_10039B018);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_1003FDC80 = (uint64_t)result;
  off_1003F5BA0 = (uint64_t (*)())sub_10003EA94;
  return result;
}

id sub_10003EA94()
{
  return (id)qword_1003FDC80;
}

void sub_10003EC9C(_Unwind_Exception *a1)
{
}

void sub_10003ECDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = (dispatch_queue_s *)WeakRetained[1];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10003EDD0;
  v16[3] = &unk_100399120;
  id v17 = WeakRetained;
  id v18 = v8;
  id v19 = v7;
  id v20 = v9;
  id v12 = v9;
  id v13 = v7;
  id v14 = v8;
  id v15 = WeakRetained;
  dispatch_async(v11, v16);
}

uint64_t sub_10003EDD0(uint64_t a1)
{
  qos_class_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:RPOptionSenderID]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"destination"]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"destinationGroupUID"]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"session"]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) name]);
    objc_msgSend( v2,  "_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:",  v3,  v4,  v5,  v6,  v7);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10003EEC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = WeakRetained[1];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10003EF68;
    v8[3] = &unk_100398E60;
    id v9 = v4;
    id v10 = v6;
    dispatch_async(v7, v8);
  }
}

void sub_10003EF68(uint64_t a1)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:RPOptionSenderID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"destination"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"destinationGroupUID"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"session"]);
  id v6 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  104LL,  @"MRDRapportRemoteControlService received disconect event");
  id v7 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003F0BC;
  v12[3] = &unk_10039B098;
  id v13 = v2;
  id v14 = v3;
  id v15 = v4;
  id v16 = v5;
  id v8 = v5;
  id v9 = v4;
  id v10 = v3;
  id v11 = v2;
  objc_msgSend(v7, "_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:", v6, v12);
}

uint64_t sub_10003F0BC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 sourceUID]);
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 destinationOutputDeviceUID]);
    id v10 = a1[5];
    if (v9 == v10)
    {
    }

    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0LL;
LABEL_18:

        goto LABEL_19;
      }
    }

    id v13 = (id)objc_claimAutoreleasedReturnValue([v3 destinationGroupUID]);
    id v14 = a1[6];
    if (v13 == v14)
    {
    }

    else
    {
      id v15 = v14;
      unsigned int v16 = [v13 isEqual:v14];

      if (!v16)
      {
        uint64_t v8 = 0LL;
LABEL_17:

        goto LABEL_18;
      }
    }

    id v17 = (id)objc_claimAutoreleasedReturnValue([v3 sessionUID]);
    id v18 = v17;
    if (v17 == a1[7]) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v17, "isEqual:");
    }

    goto LABEL_17;
  }

  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0LL;
LABEL_19:

  return v8;
}

void sub_10003F214(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v7 = WeakRetained[1];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10003F2BC;
    v8[3] = &unk_100398E60;
    id v9 = v4;
    id v10 = v6;
    dispatch_async(v7, v8);
  }
}

void sub_10003F2BC(uint64_t a1)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:RPOptionSenderID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"destination"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"destinationGroupUID"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"session"]);
  id v6 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  104LL,  @"MRDRapportRemoteControlService received reset event");
  unsigned int v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10003F3DC;
  v9[3] = &unk_10039B0E8;
  id v10 = v2;
  id v8 = v2;
  objc_msgSend(v7, "_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:", v6, v9);
}

uint64_t sub_10003F3DC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 sourceUID]);
  id v4 = v3;
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

void sub_10003F470(id a1)
{
  uint64_t v1 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.mediaremote");
  qos_class_t v2 = (void *)qword_1003FDC88;
  qword_1003FDC88 = (uint64_t)v1;
}

uint64_t sub_10003F58C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 sessionUID]);
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 destinationOutputDeviceUID]);
    id v10 = a1[5];
    if (v9 == v10)
    {
    }

    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0LL;
LABEL_13:

        goto LABEL_14;
      }
    }

    id v13 = (id)objc_claimAutoreleasedReturnValue([v3 sourceUID]);
    id v14 = v13;
    if (v13 == a1[6]) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v13, "isEqual:");
    }

    goto LABEL_13;
  }

  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0LL;
LABEL_14:

  return v8;
}

void sub_10003FA58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_10003FA94(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (dispatch_queue_s *)WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003FB70;
    block[3] = &unk_100399D08;
    id v6 = WeakRetained;
    id v7 = a1[4];
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = a1[7];
    dispatch_async(v4, block);
  }
}

void sub_10003FB70(uint64_t a1)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _connectionForSource:*(void *)(a1 + 40) destination:*(void *)(a1 + 48) session:*(void *)(a1 + 56)]);

  if (v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 56),  @"session");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 48),  @"destination");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 64),  @"destinationGroupUID");
    [*(id *)(*(void *)(a1 + 32) + 24) sendEvent:@"com.apple.mediaremote.remotecontrol.disconnect" destination:*(void *)(a1 + 40) userInfo:v3];
  }

BOOL sub_10003FC5C(id a1, MRDRapportRemoteControlServiceConnection *a2)
{
  return 1;
}

uint64_t sub_10003FD38(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 sourceUID]);
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 destinationOutputDeviceUID]);
    id v10 = a1[5];
    if (v9 == v10)
    {
    }

    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0LL;
LABEL_13:

        goto LABEL_14;
      }
    }

    id v13 = (id)objc_claimAutoreleasedReturnValue([v3 sessionUID]);
    id v14 = v13;
    if (v13 == a1[6]) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v13, "isEqual:");
    }

    goto LABEL_13;
  }

  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0LL;
LABEL_14:

  return v8;
}

void sub_1000400D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000402EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100040C3C(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

uint64_t sub_100040C5C(uint64_t a1, void *a2)
{
  qos_class_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 ase]);
  unsigned int v5 = [v4 containsOutputDeviceWithUID:v3];

  return v5 ^ 1;
}

id sub_100040D50(id a1, HMHome *a2)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](a2, "currentUser"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);

  return v4;
}

void sub_100041150(_Unwind_Exception *a1)
{
}

id sub_100041198(id a1, HMHome *a2)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](a2, "currentUser"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);

  return v4;
}

void sub_1000416B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 destination]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 endpoint]);

    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 resolvedOutputDevices]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "msv_compactMap:", &stru_10039B260));
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v14));

    if ([v12 isEqualToSet:v15])
    {
      if (!MRMediaRemotePlaybackStateIsAdvancing([v5 playbackState]))
      {
LABEL_13:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

        goto LABEL_14;
      }

      id v17 = *(id *)(a1 + 56);
      objc_sync_enter(v17);
      if (![*(id *)(a1 + 56) count])
      {
        id v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) queue]);
        id v22 = _NSConcreteStackBlock;
        uint64_t v23 = 3221225472LL;
        uint64_t v24 = sub_10004195C;
        uint64_t v25 = &unk_100398E60;
        id v19 = *(void **)(a1 + 72);
        uint64_t v26 = *(void *)(a1 + 64);
        id v27 = v19;
        dispatch_async(v18, &v22);
      }

      objc_msgSend(*(id *)(a1 + 56), "addObject:", *(void *)(a1 + 72), v22, v23, v24, v25, v26);
      objc_sync_exit(v17);
    }

    else
    {
      uint64_t v20 = _MRLogForCategory(7LL, v16);
      id v17 = (id)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v29 = v12;
        __int16 v30 = 2112;
        int v31 = v15;
        __int16 v32 = 2112;
        uint64_t v33 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_DEFAULT,  "[ProximityController] Topology mismatch: recommended does not match response - recommended: (%@), response: (%@) skipping %@",  buf,  0x20u);
      }
    }

    goto LABEL_13;
  }

  uint64_t v8 = _MRLogForCategory(7LL, v6);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1002B5614((uint64_t)v7, v9);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
LABEL_14:
}

void sub_100041938(_Unwind_Exception *a1)
{
}

NSString *__cdecl sub_100041954(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)-[MRAVOutputDevice uid](a2, "uid");
}

id sub_10004195C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateRecommendedEndpointWithOutputDeviceUID:*(void *)(a1 + 40) reason:@"nearby device is playing"];
}

void sub_100041970(uint64_t a1)
{
  qos_class_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v3 = [v2 supportManyRecommendationsPlatters];

  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100041A44;
    v7[3] = &unk_10039B1C0;
    id v4 = *(void **)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_filter:", v7));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uiController]);
    [v6 acquireRouteRecommendationAssertionForIdentifiers:v5];
  }

id sub_100041A44(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

id sub_100041D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(7LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1002B5688(a1, v4);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) displayMonitor]);
  unsigned __int8 v6 = [v5 displayOn];

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = _MRLogForCategory(7LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[ProximityController] Asking to clear nearby devices because screen is off.",  v11,  2u);
    }

    [*(id *)(a1 + 32) setHasTriggered:0];
  }

  id result = [*(id *)(a1 + 32) shouldRun];
  if ((_DWORD)result) {
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateRemoteControlState");
  }
  return result;
}

id sub_100041ED8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateRecommendedEndpointWithOutputDeviceUID:*(void *)(a1 + 40) reason:@"received device event"];
}

void sub_100042088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100042108;
  block[3] = &unk_100399250;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_100042108(uint64_t a1)
{
  return _[*(id *)(a1 + 32) devicesUpdated];
}

void sub_10004229C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v2 = [v1 supportMultiplayerHost];

  if (v2)
  {
    id v3 = -[MRDAVOutputContextManager _init](objc_alloc(&OBJC_CLASS___MRDAVOutputContextManager), "_init");
    id v4 = (void *)qword_1003FDC98;
    qword_1003FDC98 = (uint64_t)v3;
  }

id sub_100042660(id a1, MRAVOutputContext *a2)
{
  return -[MRAVOutputContext debugDescription](a2, "debugDescription");
}

id sub_1000426E4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

id sub_10004276C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

uint64_t sub_10004282C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004283C(uint64_t a1)
{
}

void sub_100042844(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) allValues]);
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) allValues]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 arrayByAddingObjectsFromArray:v2]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) allValues]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 arrayByAddingObjectsFromArray:v4]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000429A8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100042A94(uint64_t a1, void *a2)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "allValues", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) registerCommunicationChannelForOutputContext:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

uint64_t sub_100042B88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100042C80(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

void sub_100042EF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100042F1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) allValues]);
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_10004346C;
  v70[3] = &unk_10039B388;
  uint64_t v3 = (id *)(a1 + 40);
  id v71 = *(id *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_filter:", v70));

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 firstObject]);
  uint64_t v6 = a1 + 56;
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  __int128 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  if (*(_BYTE *)(a1 + 64))
  {
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472LL;
    void v68[2] = sub_1000435A4;
    v68[3] = &unk_10039B388;
    id v69 = *v3;
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_filter:", v68));

    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 firstObject]);
    uint64_t v12 = *(void *)(*(void *)v6 + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v4 = v10;
  }

  if (*(void *)(*(void *)(*(void *)v6 + 8LL) + 40LL))
  {
    uint64_t v14 = _MRLogForCategory(0LL, v9);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      sub_1002B584C(v6, (uint64_t *)v3, v15);
    }
  }

  else
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    id v16 = *v3;
    id v17 = [v16 countByEnumeratingWithState:&v64 objects:v78 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v65;
      while (2)
      {
        for (uint64_t i = 0LL; i != v18; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(*((void *)&v64 + 1) + 8 * (void)i)]);
          if (v21)
          {
            uint64_t v33 = v21;
            uint64_t v34 = _MRLogForCategory(0LL, v22);
            __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
              sub_1002B57EC();
            }

            uint64_t v36 = *(void *)(*(void *)v6 + 8LL);
            uint64_t v37 = *(void **)(v36 + 40);
            *(void *)(v36 + 40) = v33;

            goto LABEL_34;
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v64 objects:v78 count:16];
        if (v18) {
          continue;
        }
        break;
      }
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) allValues]);
    __int128 v58 = _NSConcreteStackBlock;
    uint64_t v59 = 3221225472LL;
    __int128 v60 = sub_1000436DC;
    __int128 v61 = &unk_10039B3B0;
    uint64_t v24 = *(void **)(a1 + 40);
    uint64_t v62 = *(void *)(a1 + 32);
    id v63 = v24;
    uint64_t v25 = (MRAVConcreteOutputContext *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "msv_firstWhere:", &v58));

    id v27 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVConcreteOutputContext contextID](v25, "contextID", v58, v59, v60, v61, v62));
    if (v27)
    {
      uint64_t v28 = _MRLogForCategory(0LL, v26);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = *v3;
        int v31 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVConcreteOutputContext outputDeviceUIDs](v25, "outputDeviceUIDs"));
        *(_DWORD *)__int128 buf = 138543874;
        v73 = v25;
        __int16 v74 = 2114;
        id v75 = v30;
        __int16 v76 = 2114;
        v77 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] Reusing inactive outputContext %{public}@ for: %{public}@ (%{public}@)",  buf,  0x20u);
      }

      [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:v27];
    }

    else
    {
      id v38 = -[objc_class addSharedAudioOutputContext](off_1003F5DF0(), "addSharedAudioOutputContext");
      __int16 v40 = (void *)objc_claimAutoreleasedReturnValue(v38);
      if (v40)
      {
        uint64_t v41 = -[MRAVConcreteOutputContext initWithAVOutputContext:type:]( objc_alloc(&OBJC_CLASS___MRAVConcreteOutputContext),  "initWithAVOutputContext:type:",  v40,  5LL);

        [*(id *)(a1 + 32) registerOutputContext:v41];
        uint64_t v43 = _MRLogForCategory(0LL, v42);
        __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          id v45 = *v3;
          *(_DWORD *)__int128 buf = 138543618;
          v73 = v41;
          __int16 v74 = 2114;
          id v75 = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] Created new outputContext %{public}@ for: %{public}@",  buf,  0x16u);
        }
      }

      else
      {
        uint64_t v46 = _MRLogForCategory(0LL, v39);
        __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          sub_1002B5784(a1 + 40, v44, v47, v48, v49, v50, v51, v52);
        }
        uint64_t v41 = v25;
      }

      uint64_t v25 = v41;
    }

    uint64_t v53 = _MRLogForCategory(0LL, v32);
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      id v55 = *v3;
      *(_DWORD *)__int128 buf = 138543618;
      v73 = v25;
      __int16 v74 = 2114;
      id v75 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] Reserving outputContext %{public}@ for: %{public}@",  buf,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setObject:v25 forKeyedSubscript:*(void *)(a1 + 48)];
    if (*(_BYTE *)(a1 + 65)) {
      [*(id *)(a1 + 32) _notifyLocalDeviceDidChangeOutputContext];
    }
    uint64_t v56 = *(void *)(*(void *)v6 + 8LL);
    CC_SHA1_CTX v57 = *(void **)(v56 + 40);
    *(void *)(v56 + 40) = v25;
  }

LABEL_34:
}
}

    uint64_t v33 = (v42 - 1) & v42;
    uint64_t v36 = __clz(__rbit64(v42)) + (v29 << 6);
LABEL_19:
    uint64_t v37 = v1[16];
    id v38 = v1[17];
    uint64_t v39 = v1[15];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16))( v38,  *((void *)v14 + 6) + *(void *)(v37 + 72) * v36,  v39);
    sub_10022ED2C(v38, v40);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  }

  uint64_t v43 = v41 + 3;
  if (v43 >= v34)
  {
LABEL_35:
    swift_release(v14);

    v1[28] = v45;
    uint64_t v47 = (void (*)(uint64_t, uint64_t))((char *)&dword_1003FB8B0 + dword_1003FB8B0);
    __int16 v44 = (void *)swift_task_alloc(unk_1003FB8B4);
    v1[29] = v44;
    *__int16 v44 = v1;
    v44[1] = sub_10022BA20;
    v47(0LL, 0LL);
    return;
  }

  uint64_t v42 = *(void *)&v30[8 * v43];
  if (v42)
  {
    uint64_t v29 = v43;
    goto LABEL_34;
  }

  while (1)
  {
    uint64_t v29 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v29 >= v34) {
      goto LABEL_35;
    }
    uint64_t v42 = *(void *)&v30[8 * v29];
    ++v43;
    if (v42) {
      goto LABEL_34;
    }
  }

          uint64_t v29 = 0LL;
          int v31 = 1LL;
          uint64_t v26 = v43;
          goto LABEL_8;
        }

        uint64_t v29 = 0LL;
        int v31 = 1LL;
        v26 += 3LL;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1LL, v12);
        *a5 = v25;
        a5[1] = v24;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_1001603DC((uint64_t)v11, &qword_1003FB928);
          uint64_t v49 = v58;
          swift_retain(v58);
          return (void *)sub_100234D88( v53,  v51,  v52,  v49,  &qword_1003FB610,  &qword_1003FB938,  &qword_1003FB920,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
        }

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        uint64_t v32 = v58;
        uint64_t v33 = *(void *)(v58 + 40);
        uint64_t v34 = sub_1001604E8( &qword_1003FB920,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
        __int16 v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
        uint64_t v37 = v35 & ~v36;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0) {
          break;
        }
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        id result = (void *)v23(v59, v12);
        uint64_t v11 = v54;
        a5 = v55;
      }

      id v38 = ~v36;
      uint64_t v39 = *(void *)(v13 + 72);
      __int16 v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(void *)(v58 + 48) + v39 * v37, v12);
        uint64_t v41 = sub_1001604E8( &qword_1003FB930,  &qword_1003FB610,  (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
        uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_4;
        }
      }

      id result = (void *)v23(v59, v12);
      uint64_t v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v11 = v54;
      uint64_t v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1LL << v37);
      a5 = v55;
    }

    while ((v47 & (1LL << v37)) == 0);
    uint64_t v22 = v52 - 1;
    if (__OFSUB__(v52, 1LL))
    {
LABEL_42:
      __break(1u);
      return result;
    }

    if (v52 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

          uint64_t v29 = 0LL;
          int v31 = 1LL;
          uint64_t v26 = v43;
          goto LABEL_8;
        }

        uint64_t v29 = 0LL;
        int v31 = 1LL;
        v26 += 3LL;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1LL, v12);
        *a5 = v25;
        a5[1] = v24;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_1001603DC((uint64_t)v11, &qword_1003FB8C0);
          uint64_t v49 = v58;
          swift_retain(v58);
          return (void *)sub_100234D88( v53,  v51,  v52,  v49,  &qword_1003FB640,  &qword_1003FB8D0,  &qword_1003FB8B8,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
        }

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        uint64_t v32 = v58;
        uint64_t v33 = *(void *)(v58 + 40);
        uint64_t v34 = sub_1001604E8( &qword_1003FB8B8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
        __int16 v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
        uint64_t v37 = v35 & ~v36;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0) {
          break;
        }
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        id result = (void *)v23(v59, v12);
        uint64_t v11 = v54;
        a5 = v55;
      }

      id v38 = ~v36;
      uint64_t v39 = *(void *)(v13 + 72);
      __int16 v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(void *)(v58 + 48) + v39 * v37, v12);
        uint64_t v41 = sub_1001604E8( &qword_1003FB8C8,  &qword_1003FB640,  (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
        uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_4;
        }
      }

      id result = (void *)v23(v59, v12);
      uint64_t v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v11 = v54;
      uint64_t v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1LL << v37);
      a5 = v55;
    }

    while ((v47 & (1LL << v37)) == 0);
    uint64_t v22 = v52 - 1;
    if (__OFSUB__(v52, 1LL))
    {
LABEL_42:
      __break(1u);
      return result;
    }

    if (v52 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

  swift_bridgeObjectRelease();
LABEL_35:
  uint64_t v53 = objc_allocWithZone(*(Class *)(v22 + 2216));
  uint64_t v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v55 = objc_msgSend(v53, v25[387], v54);

  [v7 setMembers:v55];
  return v7;
}

    v132 = type metadata accessor for InternalRoutingError(0LL);
    v133 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v134 = swift_allocError(v132, v133, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v132 - 8) + 104LL))( v135,  enum case for InternalRoutingError.sessionNotFound(_:),  v132);
    v136 = *v490;
    v137 = v490[1];
    swift_bridgeObjectRetain();
    v138 = MRDFastSyncGroupSessionState.rawValue.getter(v134, v136, v137, 2LL);
    v140 = v139;
    v142 = v141;
    v144 = v143;
    sub_10029149C(v138, v139, v141, v143);
LABEL_35:
    swift_errorRelease(v138);
    v145 = v140;
    v146 = v142;
    v147 = v144;
    goto LABEL_36;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v91 = sub_10015CAD4(v87, v86);
  if ((v92 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }

  v93 = *(void *)(*(void *)(v89 + 56) + 8 * v91);
  swift_retain(v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v93 + 16) != 2)
  {
    swift_release(v93);
    goto LABEL_31;
  }

  v488 = v50;
  v94 = [*(id *)(v93 + 64) origin];
  if (!v94)
  {
    swift_bridgeObjectRelease();
    v148 = v466;
    v474(v466, v473, v69);
    swift_retain_n(v93, 2LL);
    v149 = v488;
    v150 = swift_bridgeObjectRetain();
    v151 = (os_log_s *)Logger.logObject.getter(v150);
    v152 = static os_log_type_t.error.getter();
    v153 = v152;
    if (os_log_type_enabled(v151, v152))
    {
      v154 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v489) = v153;
      v155 = v154;
      v487 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v487;
      *(_DWORD *)v155 = 136315650;
      v156 = _typeName(_:qualified:)(v485, 0LL);
      *(void *)&v494 = sub_10015ADC4(v156, v157, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v155 + 4, v155 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v155 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v494 = sub_10015ADC4(v469, v149, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v155 + 14, v155 + 22);
      swift_bridgeObjectRelease_n(v149, 3LL);
      *(_WORD *)(v155 + 22) = 2080;
      swift_retain(v93);
      v158 = sub_100262454();
      v160 = v159;
      swift_release(v93);
      *(void *)&v494 = sub_10015ADC4(v158, v160, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v155 + 24, v155 + 32);
      swift_release_n(v93, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v151,  (os_log_type_t)v489,  "[%s] handoffFromApplication<%s> - failing because no destination origin for entry: %s",  (uint8_t *)v155,  0x20u);
      v161 = v487;
      swift_arrayDestroy(v487, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v161, -1LL, -1LL);
      swift_slowDealloc(v155, -1LL, -1LL);

      v79(v466, v69);
    }

    else
    {

      swift_release_n(v93, 2LL);
      swift_bridgeObjectRelease_n(v149, 2LL);
      v79(v148, v69);
    }

    v185 = type metadata accessor for InternalRoutingError(0LL);
    v186 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v187 = swift_allocError(v185, v186, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v185 - 8) + 104LL))( v188,  enum case for InternalRoutingError.sessionNotFound(_:),  v185);
    v189 = *v490;
    v190 = v490[1];
    swift_bridgeObjectRetain();
    v191 = MRDFastSyncGroupSessionState.rawValue.getter(v187, v189, v190, 2LL);
    v193 = v192;
    v195 = v194;
    v197 = v196;
    sub_10029149C(v191, v192, v194, v196);
    swift_errorRelease(v191);
    sub_100156BA8(v193, v195, v197);
    swift_release(v93);
    return;
  }

  v95 = v94;
  v479 = v93;
  id v96 = (void *)objc_opt_self(&OBJC_CLASS___MRDMediaRemoteServer);
  v97 = [v96 server];
  v98 = [v97 nowPlayingServer];

  v99 = [v98 localOriginClient];
  id v100 = v489;
  v101 = String._bridgeToObjectiveC()();
  v102 = [v99 existingNowPlayingClientForDisplayID:v101];

  if (!v102)
  {
    swift_bridgeObjectRelease();
    v174 = v464;
    v474(v464, v473, v69);
    swift_bridgeObjectRetain_n(v100, 2LL);
    v175 = v488;
    v176 = swift_bridgeObjectRetain();
    v177 = (os_log_s *)Logger.logObject.getter(v176);
    v178 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v177, v178))
    {
      v179 = swift_slowAlloc(32LL, -1LL);
      v484 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v484;
      *(_DWORD *)v179 = 136315650;
      v180 = _typeName(_:qualified:)(v485, 0LL);
      *(void *)&v494 = sub_10015ADC4(v180, v181, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v179 + 4, v179 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v179 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v494 = sub_10015ADC4(v469, v175, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v179 + 14, v179 + 22);
      swift_bridgeObjectRelease_n(v175, 3LL);
      *(_WORD *)(v179 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v494 = sub_10015ADC4(v487, v100, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v179 + 24, v179 + 32);
      swift_bridgeObjectRelease_n(v100, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v177,  v178,  "[%s] handoffFromApplication<%s> - failing because no source client found for: %s",  (uint8_t *)v179,  0x20u);
      v182 = v484;
      swift_arrayDestroy(v484, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v182, -1LL, -1LL);
      swift_slowDealloc(v179, -1LL, -1LL);

      v183 = v464;
      v184 = v483;
    }

    else
    {

      swift_bridgeObjectRelease_n(v100, 2LL);
      swift_bridgeObjectRelease_n(v175, 2LL);
      v183 = v174;
      v184 = v69;
    }

    v79(v183, v184);
    v212 = v479;
    v213 = type metadata accessor for InternalRoutingError(0LL);
    v214 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v215 = swift_allocError(v213, v214, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v213 - 8) + 104LL))( v216,  enum case for InternalRoutingError.noActivePlayer(_:),  v213);
    v217 = *v490;
    v218 = v490[1];
    swift_bridgeObjectRetain();
    v219 = MRDFastSyncGroupSessionState.rawValue.getter(v215, v217, v218, 2LL);
    v221 = v220;
    v223 = v222;
    v225 = v224;
    sub_10029149C(v219, v220, v222, v224);
    swift_errorRelease(v219);
    sub_100156BA8(v221, v223, v225);
    swift_release(v212);

    return;
  }

  v103 = [v102 activePlayerClient];
  v478 = v102;
  if (!v103
    || (v104 = v103,
        v105 = [v103 supportedRemoteControlCommands],
        v104,
        !v105)
    || (v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, (char *)&type metadata for Any + 8),
        v105,
        v107 = (uint64_t)sub_100197300(v106),
        swift_bridgeObjectRelease(),
        !v107))
  {
    swift_bridgeObjectRelease();
    v162 = v465;
    v474(v465, v473, v69);
    v163 = v489;
    swift_bridgeObjectRetain_n(v489, 2LL);
    v164 = v488;
    v165 = swift_bridgeObjectRetain();
    v166 = (os_log_s *)Logger.logObject.getter(v165);
    v167 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v166, v167))
    {
      v168 = swift_slowAlloc(32LL, -1LL);
      v484 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v484;
      *(_DWORD *)v168 = 136315650;
      v169 = _typeName(_:qualified:)(v485, 0LL);
      *(void *)&v494 = sub_10015ADC4(v169, v170, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v168 + 4, v168 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v168 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v494 = sub_10015ADC4(v469, v164, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v168 + 14, v168 + 22);
      swift_bridgeObjectRelease_n(v164, 3LL);
      *(_WORD *)(v168 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v494 = sub_10015ADC4(v487, v163, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v494, (char *)&v494 + 8, v168 + 24, v168 + 32);
      swift_bridgeObjectRelease_n(v163, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v166,  v167,  "[%s] handoffFromApplication<%s> - failing because no source supported commands found for: %s",  (uint8_t *)v168,  0x20u);
      v171 = v484;
      swift_arrayDestroy(v484, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v171, -1LL, -1LL);
      swift_slowDealloc(v168, -1LL, -1LL);

      v172 = v465;
      v173 = v483;
    }

    else
    {

      swift_bridgeObjectRelease_n(v163, 2LL);
      swift_bridgeObjectRelease_n(v164, 2LL);
      v172 = v162;
      v173 = v69;
    }

    v79(v172, v173);
    v198 = v479;
    v199 = type metadata accessor for InternalRoutingError(0LL);
    v200 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    v201 = swift_allocError(v199, v200, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v199 - 8) + 104LL))( v202,  enum case for InternalRoutingError.unsupportedOperation(_:),  v199);
    v203 = *v490;
    v204 = v490[1];
    swift_bridgeObjectRetain();
    v205 = MRDFastSyncGroupSessionState.rawValue.getter(v201, v203, v204, 2LL);
    v207 = v206;
    v209 = v208;
    v211 = v210;
    sub_10029149C(v205, v206, v208, v210);
    swift_errorRelease(v205);
    sub_100156BA8(v207, v209, v211);
    swift_release(v198);

    goto LABEL_138;
  }

  v477 = v95;
  if ((unint64_t)v107 >> 62)
  {
    if (v107 >= 0) {
      v360 = v107 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      v360 = v107;
    }
    swift_bridgeObjectRetain();
    v108 = _CocoaArrayWrapper.endIndex.getter(v360);
    if (v108) {
      goto LABEL_18;
    }
LABEL_133:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v107, 2LL);
    v233 = v483;
    v227 = v477;
    goto LABEL_134;
  }

  v108 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v108) {
    goto LABEL_133;
  }
LABEL_18:
  v109 = 4LL;
  while (1)
  {
    if ((v107 & 0xC000000000000001LL) != 0) {
      v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v109 - 4, v107);
    }
    else {
      v110 = *(id *)(v107 + 8 * v109);
    }
    v111 = v110;
    v112 = (void *)(v109 - 3);
    if (__OFADD__(v109 - 4, 1LL))
    {
      __break(1u);
LABEL_93:
      swift_bridgeObjectRelease_n(v107, 2LL);
      v321 = [v112 options];
      if (v321)
      {
        v322 = v321;
        v323 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v321,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

        v493 = v475;
        v324 = v476;
        AnyHashable.init<A>(_:)(&v493, v464, v470);
        if (*(void *)(v323 + 16) && (v325 = sub_10015CAA4((uint64_t)aBlock), (v326 & 1) != 0))
        {
          sub_100160800(*(void *)(v323 + 56) + 32 * v325, (uint64_t)&v494);
        }

        else
        {
          v494 = 0u;
          v495 = 0u;
        }

        sub_100160990((uint64_t)aBlock);
        swift_bridgeObjectRelease();
        if (*((void *)&v495 + 1))
        {
          if ((swift_dynamicCast(aBlock, &v494, (char *)&type metadata for Any + 8, v463, 6LL) & 1) != 0)
          {
            v476 = (char *)aBlock[0];
            v475 = (id)*((void *)v466 + 2);
            if (v475)
            {
              v327 = 0LL;
              v470 = v466 + 32;
              v328 = *((void *)v476 + 2);
              v464 = v476 + 56;
              while (1)
              {
                if (v328)
                {
                  v348 = (uint64_t *)&v470[16 * v327];
                  v350 = *v348;
                  v349 = v348[1];
                  v351 = *((void *)v476 + 4);
                  v352 = *((void *)v476 + 5);
                  v353 = v351 == *v348 && v352 == v349;
                  if (v353 || (_stringCompareWithSmolCheck(_:_:expecting:)(v351, v352, v350, v349, 0LL) & 1) != 0)
                  {
LABEL_140:
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v388 = [objc_allocWithZone(MRPlaybackSessionRequest) init];
                    v389 = String._bridgeToObjectiveC()();
                    [v388 setRequestIdentifier:v389];

                    v390 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    v490 = (uint64_t *)v388;
                    [v388 setType:v390];

                    v391 = (char *)[objc_allocWithZone(MRPlaybackSessionMigrateRequest) init];
                    v476 = v391;
                    v392 = String._bridgeToObjectiveC()();
                    [v391 setRequestID:v392];

                    [v391 setPlaybackSessionRequest:v388];
                    [v391 setEndpointOptions:0];
                    objc_msgSend(v391, "setPlayerOptions:", (unint64_t)objc_msgSend(v391, "playerOptions") | 8);
                    v480 = (void (*)(id, id))[v478 activePlayerPath];
                    v393 = objc_allocWithZone(&OBJC_CLASS___MRPlayerPath);
                    v394 = v477;
                    v395 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    v483 = v394;
                    v477 = [v393 initWithOrigin:v394 bundleIdentifier:v395 player:0];

                    v396 = v472;
                    v397 = (void *)(*(uint64_t (**)(void))(*(void *)v472 + 280LL))();
                    v475 = v397;
                    v398 = v481;
                    v454(v458, v467, v481);
                    v399 = v456;
                    v400 = *(unsigned __int8 *)(v456 + 80);
                    v401 = (v400 + 104) & ~v400;
                    v402 = (v455 + v401 + 7) & 0xFFFFFFFFFFFFFFF8LL;
                    v403 = (v402 + 15) & 0xFFFFFFFFFFFFFFF8LL;
                    v404 = (char *)swift_allocObject(&unk_1003AC480, v403 + 8, v400 | 7);
                    v405 = v488;
                    *((void *)v404 + 2) = v469;
                    *((void *)v404 + 3) = v405;
                    v406 = v476;
                    *((void *)v404 + 4) = v476;
                    *((void *)v404 + 5) = sub_10029149C;
                    v407 = v471;
                    *((void *)v404 + 6) = v486;
                    *((void *)v404 + 7) = v407;
                    v408 = v487;
                    *((void *)v404 + _Block_object_dispose(va, 8) = v482;
                    *((void *)v404 + 9) = v408;
                    *((void *)v404 + 10) = v489;
                    *((void *)v404 + 11) = v397;
                    *((void *)v404 + 12) = v396;
                    (*(void (**)(char *, _BYTE *, uint64_t))(v399 + 32))(&v404[v401], v458, v398);
                    v410 = v484;
                    v409 = v485;
                    *(void *)&v404[v402] = v484;
                    *(void *)&v404[v403] = v409;
                    aBlock[4] = (uint64_t)sub_10029161C;
                    v492 = v404;
                    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                    aBlock[1] = 1107296256LL;
                    aBlock[2] = (uint64_t)sub_100157E54;
                    aBlock[3] = (uint64_t)&unk_1003AC498;
                    v411 = _Block_copy(aBlock);
                    v412 = v492;
                    v413 = v406;
                    v414 = v475;
                    swift_bridgeObjectRetain();
                    swift_retain(v410);
                    v415 = v413;
                    v416 = v414;
                    v417 = v480;
                    v418 = v477;
                    swift_retain(v486);
                    swift_retain(v472);
                    swift_release(v412);
                    MRMediaRemotePlaybackSessionMigrateForPlayer(v415, v417, v418, v416, v411);
                    swift_release(v479);

                    _Block_release(v411);
                    return;
                  }

                  if (v328 != 1) {
                    break;
                  }
                }

id sub_10004346C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDevices]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000434F8;
  v6[3] = &unk_10039AC00;
  id v7 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(v3, "mr_any:", v6);

  return v4;
}

id sub_1000434F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100043598;
  v8[3] = &unk_10039B1C0;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_100043598(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

id sub_1000435A4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDevices]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100043630;
  v6[3] = &unk_10039AC00;
  id v7 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(v3, "mr_all:", v6);

  return v4;
}

id sub_100043630(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000436D0;
  v8[3] = &unk_10039B1C0;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_1000436D0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

uint64_t sub_1000436DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      __int128 v8 = 0LL;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend( *(id *)(*((void *)&v14 + 1) + 8 * (void)v8),  "isOutputContextInUse:",  v3,  (void)v14))
        {
          uint64_t v11 = _MRLogForCategory(0LL, v9);
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
            sub_1002B5914((uint64_t)v3, a1, v12);
          }

          uint64_t v10 = 0LL;
          goto LABEL_13;
        }

        __int128 v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  uint64_t v10 = 1LL;
LABEL_13:

  return v10;
}

id sub_100043BB8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
}

id sub_100043BF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyLocalDeviceDidChangeOutputContext];
}

MRAVConcreteOutputContext *__cdecl sub_100043D54(id a1, AVOutputContext *a2)
{
  uint64_t v2 = a2;
  id v3 = -[MRAVConcreteOutputContext initWithAVOutputContext:type:]( objc_alloc(&OBJC_CLASS___MRAVConcreteOutputContext),  "initWithAVOutputContext:type:",  v2,  5LL);

  return v3;
}

void sub_100043E74(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
  id v3 = [v2 count];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeOutputContexts]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 48)]);
  id v6 = v5;
  if (v3)
  {

    if (v6) {
      goto LABEL_18;
    }
    uint64_t v8 = _MRLogForCategory(0LL, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 outputDeviceUIDs]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
      *(_DWORD *)__int128 buf = 138412546;
      CC_SHA1_CTX v57 = v10;
      __int16 v58 = 2112;
      uint64_t v59 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] OutputContext became active %@ with: %@",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeOutputContexts]);
    [v14 setObject:v13 forKeyedSubscript:*(void *)(a1 + 48)];

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inactiveOutputContexts]);
    [v15 removeObjectForKey:*(void *)(a1 + 48)];

    id v18 = (void *)MRMediaRemoteCopyDeviceUID(v16, v17);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_100044320;
    v53[3] = &unk_10039AC00;
    id v20 = v18;
    id v54 = v20;
    unsigned int v21 = objc_msgSend(v19, "mr_any:", v53);

    if (v21)
    {
      uint64_t v23 = _MRLogForCategory(0LL, v22);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void **)(a1 + 32);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 outputDeviceUIDs]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 firstObject]);
        *(_DWORD *)__int128 buf = 138412546;
        CC_SHA1_CTX v57 = v25;
        __int16 v58 = 2112;
        uint64_t v59 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] OutputContext became active %@ with local: %@",  buf,  0x16u);
      }

      [*(id *)(a1 + 40) _notifyLocalDeviceDidChangeOutputContext];
    }
  }

  else
  {

    if (v6)
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeOutputContexts]);
      [v29 removeObjectForKey:*(void *)(a1 + 48)];

      uint64_t v31 = _MRLogForCategory(0LL, v30);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *(void **)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        CC_SHA1_CTX v57 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] OutputContext deactiviating %@",  buf,  0xCu);
      }
    }

    uint64_t v34 = _MRLogForCategory(0LL, v28);
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      CC_SHA1_CTX v57 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[MRDAVOutputContextManager] OutputContext became inactive %@",  buf,  0xCu);
    }

    uint64_t v37 = *(void *)(a1 + 32);
    id v20 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inactiveOutputContexts]);
    [v20 setObject:v37 forKeyedSubscript:*(void *)(a1 + 48)];
  }

LABEL_18:
  id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUIDs]);
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v38));

  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int16 v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "outputDevices", 0));
  id v41 = [v40 countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = *(void *)v50;
    do
    {
      for (uint64_t i = 0LL; i != v42; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v43) {
          objc_enumerationMutation(v40);
        }
        id v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v49 + 1) + 8 * (void)i) clusterComposition]);
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "mr_map:", &stru_10039B458));
        [v39 addObjectsFromArray:v46];
      }

      id v42 = [v40 countByEnumeratingWithState:&v49 objects:v55 count:16];
    }

    while (v42);
  }

  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) reservedOutputContexts]);
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v39 allObjects]);
  [v47 removeObjectsForKeys:v48];
}

id sub_100044320(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

id sub_10004432C(id a1, MRAVOutputDeviceDescription *a2)
{
  return -[MRAVOutputDeviceDescription uid](a2, "uid");
}

id sub_1000444E4(id a1, MRDeviceInfo *a2)
{
  return -[MRDeviceInfo deviceUID](a2, "deviceUID");
}

uint64_t sub_1000444EC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_1000445C4()
{
  if (qword_1003FDCB0 != -1) {
    dispatch_once(&qword_1003FDCB0, &stru_10039B498);
  }
  v0 = (id *)dlsym((void *)qword_1003FDCB8, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDCA8, *v0);
  }
  off_1003F5DE8 = (uint64_t (*)())sub_10004463C;
  return (id)qword_1003FDCA8;
}

id sub_10004463C()
{
  return (id)qword_1003FDCA8;
}

void sub_100044648(id a1)
{
  qword_1003FDCB8 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

Class sub_100044670()
{
  if (qword_1003FDCB0 != -1) {
    dispatch_once(&qword_1003FDCB0, &stru_10039B498);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_1003FDCC0 = (uint64_t)result;
  off_1003F5DF0 = (uint64_t (*)())sub_1000446CC;
  return result;
}

id sub_1000446CC()
{
  return (id)qword_1003FDCC0;
}

void sub_1000446D8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000446EC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100044A5C(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100044AD8;
  block[3] = &unk_10039AA30;
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  char v6 = a2;
  dispatch_async(&_dispatch_main_q, block);
}

id sub_100044AD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) closeForClient:*(void *)(a1 + 40) userCancelled:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100045110(_Unwind_Exception *a1)
{
}

void sub_100045214(_Unwind_Exception *a1)
{
}

id sub_100045228(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_scheduleReload");
}

MRAVOutputDevice *__cdecl sub_1000452F0(id a1, IDSDevice *a2)
{
  return (MRAVOutputDevice *)-[IDSDevice mr_outputDevice](a2, "mr_outputDevice");
}

id sub_100045390(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_reload");
}

void sub_100045578(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleDeviceInfoDidChange:" name:kMRDeviceInfoDidChangeNotification object:0];

  id v7 = (id)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 nowPlayingServer]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 originClientForOrigin:v4]);
  char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceInfo]);
  [*(id *)(a1 + 32) setDeviceInfo:v6];
}

void sub_1000457C0(_Unwind_Exception *a1)
{
}

void sub_100045B1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputContext]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 concreteOutputDevices]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100045BC0;
  v5[3] = &unk_10039B568;
  void v5[4] = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_filter:", v5));

  [*(id *)(a1 + 32) publishToOutputDevices:v4];
}

id sub_100045BC0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isValidOutputDevice:a2];
}

void sub_100046E24(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTopologyChangeIdentifiers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_100046F20(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTopologyChangeIdentifiers]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTopologyChangeIdentifiers]);
    [v4 removeObject:*(void *)(a1 + 40)];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeTopologyChangeIdentifiers]);
    id v6 = [v5 count];

    if (!v6)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"alltopologyChangesFinished-%@",  *(void *)(a1 + 40)));
      [*(id *)(a1 + 32) eventuallyCommitOutputDevice:v7];
    }
  }

void sub_100047184(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);

  if ([*(id *)(a1 + 32) _shouldRemoveLocalDeviceWithReason:*(void *)(a1 + 40) deviceInfo:v3])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 WHAIdentifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 outputContextForOutputDeviceUID:v5]);

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDevices]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100047358;
    v13[3] = &unk_10039AC00;
    id v14 = v3;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "msv_firstWhere:", v13));

    if (v8)
    {
      uint64_t v9 = -[MRRequestDetails initWithName:requestID:reason:]( objc_alloc(&OBJC_CLASS___MRRequestDetails),  "initWithName:requestID:reason:",  @"LocalDeviceCommitManager.removeLocalDevice",  0LL,  *(void *)(a1 + 40));
      uint64_t v10 = objc_alloc(&OBJC_CLASS___MRGroupTopologyModificationRequest);
      __int128 v15 = v8;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
      uint64_t v12 = -[MRGroupTopologyModificationRequest initWithRequestDetails:type:outputDevices:]( v10,  "initWithRequestDetails:type:outputDevices:",  v9,  2LL,  v11);

      [v6 modifyTopologyWithRequest:v12 withReplyQueue:0 completion:0];
    }
  }
}

id sub_100047358(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceUID]);
  id v5 = [v3 containsUID:v4];

  return v5;
}

void sub_100047518(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  if (v3)
  {
    [v3 invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;

    id v2 = *(void **)(a1 + 32);
  }

  objc_initWeak(&location, v2);
  id v6 = objc_alloc(&OBJC_CLASS___MSVTimer);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100047638;
  v11[3] = &unk_10039B590;
  objc_copyWeak(&v13, &location);
  id v12 = *(id *)(a1 + 40);
  uint64_t v8 = -[MSVTimer initWithInterval:repeats:queue:block:](v6, "initWithInterval:repeats:queue:block:", 0LL, v7, v11, 8.0);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 24);
  *(void *)(v9 + 24) = v8;

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_100047614(_Unwind_Exception *a1)
{
}

void sub_100047638(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained maybeCommitLocalDeviceWithReason:*(void *)(a1 + 32)];
}

void sub_10004801C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(0LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      id v9 = v4;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[LocalDeviceCommitManager] Error %@ commiting local device for %@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_100048530(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Requesting client %@ to begin loading browsable content",  buf,  0xCu);
  }

  int v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100048664;
  v12[3] = &unk_100399A78;
  id v13 = v3;
  id v9 = v8;
  uint64_t v10 = *(void *)(a1 + 40);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v3;
  [v11 relayXPCMessage:v8 andReply:1 resultCallback:v12];
}

void sub_100048664(id *a1, uint64_t a2)
{
  id v3 = (void *)MRCreateClientErrorFromXPCMessage(a2);
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] bundleIdentifier]);
    *(_DWORD *)uint64_t v10 = 138412546;
    *(void *)&void v10[4] = v7;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client %@ finished loading browsable content with error: %@",  v10,  0x16u);
  }

  *(void *)uint64_t v10 = 0LL;
  data = xpc_dictionary_get_data(a1[5], "MRXPC_INDEXPATH_DATA_KEY", (size_t *)v10);
  if (data) {
    uint64_t v9 = *(void *)v10 >> 3;
  }
  else {
    uint64_t v9 = 0LL;
  }
  objc_msgSend(a1[6], "_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:", a1[4], data, v9, v3);
}

void sub_100048DA0(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[6];
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.",  (uint8_t *)&v6,  0xCu);
    }
  }

  else
  {
    [*(id *)(a1[4] + 8) addObject:a1[5]];
  }

void sub_1000492E4(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[5];
      uint64_t v5 = a1[6];
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2114;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to launch %@ for relayable browsable content message %{public}@.",  (uint8_t *)&v7,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1[4] + 16) addObject:a1[5]];
  }

uint64_t sub_100049EFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSMutableArray *sub_10004A51C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)i);
      }

      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v7);
  }

  return v4;
}

NSMutableArray *sub_10004A648(uint64_t a1, void *a2)
{
  id v15 = a2;
  uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v15 outputDevices]);
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v7);
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        id v9 = *(id *)(a1 + 32);
        id v10 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v18;
          while (2)
          {
            __int128 v13 = 0LL;
            do
            {
              if (*(void *)v18 != v12) {
                objc_enumerationMutation(v9);
              }
              if ([v8 containsUID:*(void *)(*((void *)&v17 + 1) + 8 * (void)v13)])
              {

                goto LABEL_16;
              }

              __int128 v13 = (char *)v13 + 1;
            }

            while (v11 != v13);
            id v11 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        -[NSMutableArray addObject:](v16, "addObject:", v8);
LABEL_16:
        id v7 = (char *)v7 + 1;
      }

      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }

    while (v5);
  }

  return v16;
}

BOOL sub_10004A810(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10004A890;
  v5[3] = &unk_10039B1C0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "msv_firstWhere:", v5));
  BOOL v3 = v2 != 0LL;

  return v3;
}

uint64_t sub_10004A890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
  if ([v4 isEqualToString:v3])
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clusterID]);
    uint64_t v5 = (uint64_t)[v6 isEqualToString:v3];
  }

  return v5;
}

void sub_10004A90C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v12 = _MRLogForCategory(10LL, v11);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v13 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v54 = v14;
      __int16 v55 = 2114;
      uint64_t v56 = v15;
      __int16 v57 = 2112;
      __int16 v58 = v16;
      __int16 v59 = 2048;
      uint64_t v60 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  buf,  0x2Au);
    }

    else
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v54 = v19;
      __int16 v55 = 2114;
      uint64_t v56 = v15;
      __int16 v57 = 2048;
      __int16 v58 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  buf,  0x20u);
    }

    goto LABEL_10;
  }

  uint64_t v8 = _MRLogForCategory(10LL, v6);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1002B50E8(a1);
  }
LABEL_10:

  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_10004AD80;
  v48[3] = &unk_10039B630;
  id v49 = *(id *)(a1 + 56);
  id v21 = v7;
  id v50 = v21;
  id v52 = *(id *)(a1 + 72);
  id v22 = v5;
  id v51 = v22;
  __int128 v23 = objc_retainBlock(v48);
  id v24 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestReasonID]);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_10004ADC8;
  v46[3] = &unk_100399530;
  uint64_t v26 = v23;
  id v47 = v26;
  id v27 = [v24 initWithTimeout:v25 reason:v46 handler:0.0];

  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_10004ADD4;
  v37[3] = &unk_10039B680;
  id v44 = *(id *)(a1 + 80);
  id v28 = v22;
  id v38 = v28;
  id v39 = *(id *)(a1 + 32);
  id v40 = *(id *)(a1 + 40);
  id v41 = *(id *)(a1 + 56);
  id v42 = *(id *)(a1 + 64);
  id v29 = v27;
  id v43 = v29;
  uint64_t v30 = v26;
  id v45 = v30;
  uint64_t v31 = objc_retainBlock(v37);
  if (*(void *)(a1 + 88) && (!v7 || [v21 isInformational]))
  {
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) waitForCompletion]);
    [v32 start];

    uint64_t v33 = *(void *)(a1 + 88);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10004B124;
    v34[3] = &unk_100399F10;
    id v35 = *(id *)(a1 + 56);
    uint64_t v36 = v31;
    (*(void (**)(uint64_t, id, void *))(v33 + 16))(v33, v28, v34);
  }
}

uint64_t sub_10004AD80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))( result,  *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10004ADC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004ADD4(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 count])
  {
    id v4 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Adding the remaining outputDevices: %@",  v3);
    uint64_t v6 = _MRLogForCategory(10LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v23 = v8;
      __int16 v24 = 2114;
      uint64_t v25 = v9;
      __int16 v26 = 2112;
      id v27 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) followupOutputContextModification]);
    [v10 start];

    uint64_t v11 = -[MRGroupTopologyModificationRequest initWithRequestDetails:type:outputDeviceUIDs:]( objc_alloc(&OBJC_CLASS___MRGroupTopologyModificationRequest),  "initWithRequestDetails:type:outputDeviceUIDs:",  *(void *)(a1 + 48),  3LL,  *(void *)(a1 + 64));
    uint64_t v12 = *(void **)(a1 + 32);
    qos_class_t v13 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v13, 0LL);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10004AFFC;
    v16[3] = &unk_10039B658;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 72);
    id v21 = *(id *)(a1 + 88);
    [v12 modifyTopologyWithRequest:v11 withReplyQueue:v15 completion:v16];
  }
}

id sub_10004AFFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(10LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    int v11 = 138543874;
    uint64_t v12 = v7;
    __int16 v13 = 2114;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = @"SetOutputDevices completed";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  (uint8_t *)&v11,  0x20u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) followupOutputContextModification]);
  [v9 endWithError:v3];

  id result = [*(id *)(a1 + 56) disarm];
  if ((_DWORD)result) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
  return result;
}

uint64_t sub_10004B124(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) waitForCompletion]);
  [v2 end];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10004B160(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004B174(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10004B1D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) searchEndpointsForLocalDevice]);
  [v7 endWithError:v6];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDevices]);
  objc_msgSend(*(id *)(a1 + 32), "setNumberOfDevicesOnLocal:", objc_msgSend(v8, "count"));

  if (v6 && ![v6 isInformational])
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ([v10 count])
    {
      int v11 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "msv_map:", &stru_10039B6C8));
      __int16 v13 = -[NSString initWithFormat:](v11, "initWithFormat:", @"Endpoint contains undesirable devices: %@", v12);

      uint64_t v15 = _MRLogForCategory(10LL, v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v49 = v17;
        __int16 v50 = 2114;
        id v51 = v18;
        __int16 v52 = 2112;
        uint64_t v53 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }

      objc_msgSend(*(id *)(a1 + 32), "setNumberOfUndesiredDevices:", objc_msgSend(v10, "count"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 designatedGroupLeader]);
      unsigned int v20 = [v19 supportsMultiplayer];

      uint64_t v22 = _MRLogForCategory(10LL, v21);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (v20)
      {
        if (v24)
        {
          uint64_t v25 = *(void *)(a1 + 40);
          __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v49 = v25;
          __int16 v50 = 2114;
          id v51 = v26;
          __int16 v52 = 2112;
          uint64_t v53 = @"Creating new endpoint with just localDevice, will add the rest later...";
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
        }

        id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createEndpoint]);
        [v27 start];

        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deviceUID]);
        id v47 = v28;
        id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v47, 1LL));
        double v30 = *(double *)(a1 + 80);
        uint64_t v31 = *(void *)(a1 + 48);
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472LL;
        v44[2] = sub_10004B6BC;
        v44[3] = &unk_10039B6F0;
        id v45 = (MRGroupTopologyModificationRequest *)*(id *)(a1 + 32);
        id v46 = *(id *)(a1 + 72);
        +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDCreateEndpointRequest,  "createEndpointWithOutputDeviceUIDs:timeout:details:completion:",  v29,  v31,  v44,  v30);

        uint64_t v32 = v45;
      }

      else
      {
        if (v24)
        {
          uint64_t v33 = *(void *)(a1 + 40);
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
          *(_DWORD *)__int128 buf = 138543874;
          uint64_t v49 = v33;
          __int16 v50 = 2114;
          id v51 = v34;
          __int16 v52 = 2112;
          uint64_t v53 = @"Removing undesired outputDevices, will add the rest later...";
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
        }

        id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removeUndesiredDevicesOutputContextModification]);
        [v35 start];

        uint64_t v32 = -[MRGroupTopologyModificationRequest initWithRequestDetails:type:outputDevices:]( objc_alloc(&OBJC_CLASS___MRGroupTopologyModificationRequest),  "initWithRequestDetails:type:outputDevices:",  *(void *)(a1 + 48),  2LL,  v10);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
        qos_class_t v37 = qos_class_self();
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(v37, 0LL);
        id v39 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472LL;
        v40[2] = sub_10004B738;
        v40[3] = &unk_10039B718;
        id v41 = *(id *)(a1 + 32);
        id v42 = v6;
        id v43 = *(id *)(a1 + 72);
        [v36 modifyTopologyWithRequest:v32 withReplyQueue:v39 completion:v40];
      }
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    }
  }
}

id sub_10004B6B4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

void sub_10004B6BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004B738(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 removeUndesiredDevicesOutputContextModification]);
  [v5 endWithError:a1[5]];

  uint64_t v6 = a1[6];
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
  (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v4);
}

void sub_10004B7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoverOutputDevices]);
  [v7 endWithError:v6];

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createEndpoint]);
    [v8 start];

    double v9 = *(double *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10004B8D4;
    v12[3] = &unk_10039B6F0;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 56);
    +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDCreateEndpointRequest,  "createEndpointWithOutputDeviceUIDs:timeout:details:completion:",  v11,  v10,  v12,  v9);
  }
}

void sub_10004B8D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004BC78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v12 = _MRLogForCategory(10LL, v11);
    double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v13 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138544130;
      uint64_t v22 = v14;
      __int16 v23 = 2114;
      BOOL v24 = v15;
      __int16 v25 = 2112;
      __int16 v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  (uint8_t *)&v21,  0x2Au);
    }

    else
    {
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      uint64_t v22 = v19;
      __int16 v23 = 2114;
      BOOL v24 = v15;
      __int16 v25 = 2048;
      __int16 v26 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v21,  0x20u);
    }

    goto LABEL_10;
  }

  uint64_t v8 = _MRLogForCategory(10LL, v6);
  double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1002B50E8(a1);
  }
LABEL_10:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_10004BE9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BEF0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MRDMRRelayConnectionManager);
  uint64_t v2 = (void *)qword_1003FDCC8;
  qword_1003FDCC8 = (uint64_t)v1;
}

void sub_10004C2B0(_Unwind_Exception *a1)
{
}

void sub_10004C2E4(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "relayConnectionManager:didIngestNewConnection:") & 1) != 0)
        {
          uint64_t v8 = *(void *)(a1 + 40);
          double v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "connection", (void)v10));
          [v7 relayConnectionManager:v8 didIngestNewConnection:v9];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_10004C488(_Unwind_Exception *a1)
{
}

void sub_10004C7FC(_Unwind_Exception *a1)
{
}

void sub_10004C81C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v11 = v10;
  if (v5 && !v6)
  {
    BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v12)
      {
        uint64_t v14 = a1[4];
        uint64_t v13 = a1[5];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[6]];
        int v32 = 138544386;
        uint64_t v33 = @"MRDMRRelayConnectionManager.waitForConnection";
        __int16 v34 = 2114;
        uint64_t v35 = v13;
        __int16 v36 = 2112;
        id v37 = v5;
        __int16 v38 = 2114;
        uint64_t v39 = v14;
        __int16 v40 = 2048;
        uint64_t v41 = v16;
        uint64_t v17 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v18 = v11;
        uint32_t v19 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v32, v19);
        goto LABEL_17;
      }

      goto LABEL_22;
    }

    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v28 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138544130;
    uint64_t v33 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v34 = 2114;
    uint64_t v35 = v28;
    __int16 v36 = 2112;
    id v37 = v5;
    __int16 v38 = 2048;
    uint64_t v39 = v29;
    uint64_t v17 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    uint64_t v18 = v11;
    uint32_t v19 = 42;
    goto LABEL_16;
  }

  if (v6)
  {
    BOOL v20 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v20)
      {
        uint64_t v22 = a1[4];
        uint64_t v21 = a1[5];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[6]];
        int v32 = 138544386;
        uint64_t v33 = @"MRDMRRelayConnectionManager.waitForConnection";
        __int16 v34 = 2114;
        uint64_t v35 = v21;
        __int16 v36 = 2114;
        id v37 = v6;
        __int16 v38 = 2114;
        uint64_t v39 = v22;
        __int16 v40 = 2048;
        uint64_t v41 = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v32,  0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }

    else if (v20)
    {
      sub_1002B5A4C((uint64_t)a1, (uint64_t)v6, v11);
    }

    goto LABEL_22;
  }

  BOOL v24 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (!v24) {
      goto LABEL_22;
    }
    uint64_t v30 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138543874;
    uint64_t v33 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v34 = 2114;
    uint64_t v35 = v30;
    __int16 v36 = 2048;
    id v37 = v31;
    uint64_t v17 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint64_t v18 = v11;
    uint32_t v19 = 32;
    goto LABEL_16;
  }

  if (v24)
  {
    __int16 v26 = (void *)a1[4];
    uint64_t v25 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138544130;
    uint64_t v33 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v34 = 2114;
    uint64_t v35 = v25;
    __int16 v36 = 2114;
    id v37 = v26;
    __int16 v38 = 2048;
    uint64_t v39 = v27;
    uint64_t v17 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }

void sub_10004CBA8(uint64_t a1)
{
  id obj = (NSError *)*(id *)(a1 + 32);
  objc_sync_enter(obj);
  id v2 = *(void **)(a1 + 40);
  id v3 = objc_retainBlock(*(id *)(a1 + 48));
  LODWORD(v2) = [v2 containsObject:v3];

  if ((_DWORD)v2)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = objc_retainBlock(*(id *)(a1 + 48));
    [v4 removeObject:v5];

    objc_sync_exit(obj);
    id obj = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 26LL);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    objc_sync_exit(obj);
  }
}

void sub_10004CC70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004CE1C(_Unwind_Exception *a1)
{
}

BOOL sub_10004CE3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 connection]);
  BOOL v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

void sub_10004CF18(_Unwind_Exception *a1)
{
}

void sub_10004CF90(_Unwind_Exception *a1)
{
}

void sub_10004D010(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:a2]);
  if (v6)
  {
    uint64_t v8 = _NSConcreteStackBlock;
    uint64_t v9 = 3221225472LL;
    __int128 v10 = sub_10004D0E4;
    __int128 v11 = &unk_100398E60;
    id v12 = [v5 copy];
    id v13 = v6;
    id v7 = v12;
    dispatch_async(&_dispatch_main_q, &v8);
    objc_msgSend(v5, "removeAllObjects", v8, v9, v10, v11);
  }
}

void sub_10004D0E4(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_10004D460(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_10004D4CC;
  v1[3] = &unk_10039B2B0;
  id v2 = *(id *)(a1 + 32);
  MRAVEndpointResolveActiveSystemEndpointWithTimeout(&_dispatch_main_q, v1, 7.0);
}

id sub_10004D4CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setActiveSystemEndpoint:a2];
}

id sub_10004D4D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluatePredictedRoutes];
}

void sub_10004D4E0(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 object]);
}

void sub_10004D528(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpoint]);

  if (v2)
  {
    [*(id *)(a1 + 32) _reevaluatePredictedRoutes];
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
    [*(id *)(a1 + 32) setActiveSystemEndpoint:v3];
  }

void sub_10004D8C0(_Unwind_Exception *a1)
{
}

id sub_10004D8EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluatePredictedRoutes];
}

id sub_10004DD1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 WHAIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
  else {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 WHAIdentifier]);
  }

  return v6;
}

id sub_10004DD9C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceUID]);

  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 WHAIdentifier]);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if ((v7 & 1) != 0) {
    goto LABEL_6;
  }
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 groupUID]);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupUID]);
  unsigned int v11 = [v9 isEqualToString:v10];

  if (!v11) {
    goto LABEL_6;
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
  if (([v12 supportsMultiplayer] & 1) == 0)
  {

    goto LABEL_9;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
  unsigned __int8 v14 = [v13 isProxyGroupPlayer];

  if ((v14 & 1) == 0)
  {
LABEL_9:
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderDeviceInfo]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v17 WHAIdentifier]);

    return v15;
  }

uint64_t sub_10004DEF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 deviceType] == 1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
    uint64_t v6 = (uint64_t)[v4 isEqualToString:v5];
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

uint64_t sub_10004DF74(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
  uint64_t v5 = [v3 isEqualToString:v4] ^ 1;

  return v5;
}

id sub_10004DFD4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

BOOL sub_10004DFDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 deviceType] == 1)
  {
    BOOL v4 = 1LL;
  }

  else if ([v3 isLocalDevice])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
    BOOL v4 = v5 != 0LL;
  }

  else
  {
    BOOL v4 = 0LL;
  }

  return v4;
}

id sub_10004E048(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

void sub_10004E218(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = MRLogCategoryDiscovery();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDRoutingContinuityManager] Error performing request: %@ - %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10004E424(_Unwind_Exception *a1)
{
}

id sub_10004E440(uint64_t a1)
{
  uint64_t v2 = MRLogCategoryDiscovery();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MRDRoutingContinuityManager] Resuming PredictedRoutesSync",  v5,  2u);
  }

  return [*(id *)(a1 + 32) setPausePredictedRoutesTimer:0];
}

void sub_10004E908(_Unwind_Exception *a1)
{
}

id sub_10004E958(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadLocalEndpointConnection];
}

void sub_10004E960(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetOriginFromUserInfo();
  id v6 = (id)objc_claimAutoreleasedReturnValue(v4);

  if ([v6 isLocal])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _scheduleAvailableOutputDevicesReload];
  }
}

void sub_10004E9C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10004E9F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

id sub_10004EA20(uint64_t a1)
{
  id result = (id)MSVDeviceOSIsInternalInstall([*(id *)(a1 + 32) _initializeDiscoverySessions]);
  if ((_DWORD)result)
  {
    id v3 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.mediaremote");
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 176);
    *(void *)(v4 + 176) = v3;

    [*(id *)(*(void *)(a1 + 32) + 176) addObserver:*(void *)(a1 + 32) forKeyPath:@"remotecontrol-denylist" options:0 context:off_1003F5EB8];
    [*(id *)(*(void *)(a1 + 32) + 176) addObserver:*(void *)(a1 + 32) forKeyPath:@"remotecontrol-allowlist" options:0 context:off_1003F5EC0];
    return [*(id *)(a1 + 32) _loadDefaults];
  }

  return result;
}

void sub_10004ECF4(_Unwind_Exception *a1)
{
}

void sub_10004ED0C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[12];
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = MRCreateIndentedDebugDescriptionFromObject(v3);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v4 appendFormat:@"  avDiscoverySession = %@\n", v6];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  uint64_t v7 = v2[13];
  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = MRCreateIndentedDebugDescriptionFromObject(v7);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v8 appendFormat:@"  idsDiscoverySession = %@\n", v10];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  uint64_t v11 = v2[14];
  if (v11)
  {
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = MRCreateIndentedDebugDescriptionFromObject(v11);
    unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    [v12 appendFormat:@"  groupSessionDiscoverySession = %@\n", v14];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  uint64_t v15 = (void *)v2[15];
  if (v15)
  {
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 debugDescription]);
    [v16 appendFormat:@"  companionDiscoverySession=%@\n", v17];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  uint64_t v18 = (void *)v2[16];
  if (v18)
  {
    uint32_t v19 = *(void **)(a1 + 40);
    BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([v18 debugDescription]);
    [v19 appendFormat:@"  externalDiscoverySession=%@\n", v20];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  uint64_t v21 = (void *)v2[17];
  if (v21)
  {
    uint64_t v22 = *(void **)(a1 + 40);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 debugDescription]);
    [v22 appendFormat:@"  companionConnectionController=%@\n", v23];

    uint64_t v2 = *(void **)(a1 + 32);
  }

  BOOL v24 = (void *)v2[18];
  if (v24)
  {
    uint64_t v25 = *(void **)(a1 + 40);
    id v26 = (id)objc_claimAutoreleasedReturnValue([v24 debugDescription]);
    [v25 appendFormat:@"  undiscoverableGroupLeader=%@\n", v26];
  }

void sub_10004F1D8(_Unwind_Exception *a1)
{
}

id sub_10004F204(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadLocalEndpointConnection];
}

void sub_10004F4CC(_Unwind_Exception *a1)
{
}

void sub_10004F4E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 52))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 availableOutputDevices]);
    [v2 logOutputDevicesChanged:v3 oldOutputDevices:0];
  }

  [*(id *)(*(void *)(a1 + 32) + 96) setDiscoveryMode:*(unsigned int *)(a1 + 48) forClientIdentifiers:*(void *)(a1 + 40)];
  if (*(_BYTE *)(a1 + 52))
  {
    uint64_t v5 = _MRLogForCategory(0LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription(*(unsigned int *)(a1 + 48), v7);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v24 = v8;
      __int16 v25 = 2114;
      id v26 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[RemoteControlDiscoverySession] %@ - Discovery mode changed to: %{public}@",  buf,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 104) setDiscoveryMode:*(unsigned int *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 32) + 128) setDiscoveryMode:*(unsigned int *)(a1 + 48)];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v10 persistentDiscoveryABCDuration];
    double v12 = v11;

    if (v12 > 0.0)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      if (!*(_DWORD *)(a1 + 48))
      {
LABEL_11:
        [*(id *)(v13 + 88) invalidate];
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void **)(v20 + 88);
        *(void *)(v20 + 8_Block_object_dispose(va, 8) = 0LL;

        return;
      }

      if (!*(void *)(v13 + 88))
      {
        unsigned __int8 v14 = objc_alloc(&OBJC_CLASS___MSVTimer);
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(-2LL, 0LL);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_10004F71C;
        v22[3] = &unk_10039A688;
        *(double *)&v22[4] = v12;
        uint64_t v17 = -[MSVTimer initWithInterval:repeats:queue:block:]( v14,  "initWithInterval:repeats:queue:block:",  0LL,  v16,  v22,  v12);
        uint64_t v18 = *(void *)(a1 + 32);
        uint32_t v19 = *(void **)(v18 + 88);
        *(void *)(v18 + 8_Block_object_dispose(va, 8) = v17;

        if (!*(_DWORD *)(a1 + 48))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          goto LABEL_11;
        }
      }
    }
  }

id sub_10004F71C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RemoteControlDiscoverySession] Discovery still on after %lf seconds. ABC...",  buf,  0xCu);
  }

  return +[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"Discovery",  @"Power",  @"Persistent RemoteControl Discovery",  0LL,  0LL,  0LL);
}

void sub_10004F97C(_Unwind_Exception *a1)
{
}

void sub_10004FA34(_Unwind_Exception *a1)
{
}

void sub_10004FBD8(_Unwind_Exception *a1)
{
}

id sub_10004FD24(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  }

  [v2 addObject:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _reloadOutputDevices];
}

id sub_10004FE08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reloadOutputDevices];
}

void sub_10004FEA4(_Unwind_Exception *a1)
{
}

void sub_10004FFC8(_Unwind_Exception *a1)
{
}

id sub_10005007C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleAvailableOutputDevicesReload];
}

id sub_100050128(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupProxiedDiscoveryWithDestinationEndpoint:*(void *)(a1 + 40)];
}

id sub_100050194(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupStandaloneDiscovery];
}

id sub_100050230(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
  objc_sync_exit(v2);

  return [*(id *)(a1 + 32) _reloadOutputDevices];
}

id sub_100050510(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 160LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

uint64_t sub_100050560(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 168LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

id sub_1000505B0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000507F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = -[MRDAVRemoteControlClusterOutputDevice initWithDevices:]( objc_alloc(&OBJC_CLASS___MRDAVRemoteControlClusterOutputDevice),  "initWithDevices:",  v4);

  uint64_t v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v5 = v6;
  }
}

LABEL_33:
                  }

                  id v44 = [v41 countByEnumeratingWithState:&v49 objects:v62 count:16];
                }

                while (v44);
              }

              double v12 = v38 + 1;
            }

            while ((id)(v38 + 1) != v37);
            id v37 = [v35 countByEnumeratingWithState:&v53 objects:v63 count:16];
            if (!v37)
            {
LABEL_37:

              uint64_t v9 = v30;
              uint64_t v8 = v32;
              id v10 = v34;
              break;
            }
          }
        }

        id v10 = (char *)v10 + 1;
      }

      while (v10 != v8);
      uint64_t v8 = [obj countByEnumeratingWithState:&v57 objects:v64 count:16];
    }

    while (v8);
  }

  return v40;
}
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      __int16 v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        double v12 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      uint64_t v31 = 16 * v23;
      int v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      __int16 v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain(*((void *)&v39 + 1));
      }

      Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      id result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      uint64_t v20 = 16 * v19;
      uint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *uint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v39;
      ++*(void *)(v9 + 16);
    }
  }

  id result = swift_release(v5);
  *uint64_t v3 = v9;
  return result;
}

    double v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    int v32 = 8 * v23;
    uint64_t v33 = *(void *)(*(void *)(v5 + 48) + v32);
    __int16 v34 = *(void *)(*(void *)(v5 + 56) + v32);
    if ((v38 & 1) == 0)
    {
      swift_retain(v33);
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    uint64_t v15 = *(void *)(v33
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
    uint64_t v16 = *(void *)(v33
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                    + 8);
    swift_bridgeObjectRetain();
    String.hash(into:)(v39, v15, v16);
    swift_bridgeObjectRelease();
    id result = Hasher._finalize()();
    uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v18 = result & ~v17;
    uint32_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v19 == v29;
        if (v19 == v29) {
          uint32_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v19);
      }

      while (v31 == -1);
      uint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t v21 = 8 * v20;
    *(void *)(*(void *)(v8 + 48) + v21) = v33;
    *(void *)(*(void *)(v8 + 56) + v21) = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  __int16 v25 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v25, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int16 v25 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        double v12 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      uint64_t v31 = 16 * v23;
      int v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      __int16 v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain(*((void *)&v39 + 1));
      }

      Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      id result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      uint64_t v20 = 16 * v19;
      uint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *uint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v39;
      ++*(void *)(v9 + 16);
    }
  }

  id result = swift_release(v5);
  *uint64_t v3 = v9;
  return result;
}

  id v26 = 2;
  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

    double v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    int v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    __int16 v34 = v33[1];
    __int16 v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    id v37 = *v36;
    __int16 v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    void *v20 = v35;
    v20[1] = v34;
    uint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *uint64_t v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  __int16 v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int16 v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    int v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      __int16 v34 = v32;
      swift_bridgeObjectRetain();
    }

    id result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v12 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    int v32 = v31[1];
    __int16 v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = v34;
    }

    Hasher.init(_seed:)(v41, *(void *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    id result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    void *v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  id v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v6);
  os_log_s *v4 = v9;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  __break(1u);
  return result;
}

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_7;
  }

  if (v2[OBJC_IVAR___MRDFastSyncGroupSession_hasEncounteredLowPowerError] == 1)
  {
    uint64_t v30 = MRDFastSyncGroupSessionState.rawValue.getter(0xD000000000000024LL, 0x800000010033C140LL, v28, v29);
    int v32 = sub_100238C08(v30, v31);
    swift_bridgeObjectRelease();
    static Participants.only(_:)(v125);
    uint64_t v33 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v33)
    {
      swift_retain(*(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]);
      sub_1001D73BC(7u, v32, (uint64_t)v20, v33, 0LL, 0LL);

      swift_release(v33);
      (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v20, v122);
      return;
    }

    __break(1u);
    goto LABEL_35;
  }

  id v42 = v125;
  id v43 = Participant.handle.getter(v27);
  id v45 = v44;
  id v46 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess( &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v128,  0LL,  0LL);
  if (!*(void *)(*(void *)v46 + 16LL))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  swift_bridgeObjectRetain();
  sub_10015CAD4(v43, v45);
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
  {
LABEL_17:
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    __int128 v66 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v66, (uint64_t)qword_1003FF018);
    __int128 v67 = v123;
    id v68 = v124;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v124 + 16))(v9, v42, v123);
    id v69 = v2;
    uint64_t v35 = (char *)Logger.logObject.getter(v69);
    uint64_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v35, v70))
    {
      id v71 = swift_slowAlloc(22LL, -1LL);
      int8x16_t v72 = (char **)swift_slowAlloc(8LL, -1LL);
      v125 = swift_slowAlloc(32LL, -1LL);
      v126 = (uint64_t)v69;
      v127 = (_BYTE *)v125;
      *(_DWORD *)id v71 = 138543618;
      v73 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v71 + 4, v71 + 12);
      *int8x16_t v72 = v69;

      *(_WORD *)(v71 + 12) = 2080;
      __int16 v74 = sub_100156FEC( &qword_1003F9AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
      id v75 = v123;
      __int16 v76 = dispatch thunk of CustomStringConvertible.description.getter(v123, v74);
      v126 = sub_10015ADC4(v76, v77, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v124 + 8))(v9, v75);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  v70,  "[%{public}@] Ignoring transport migration message from unmapped participant %s.",  (uint8_t *)v71,  0x16u);
      v78 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v72, 1LL, v78);
      swift_slowDealloc(v72, -1LL, -1LL);
      v79 = v125;
      swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v9, v67);
    }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        return;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
    }

    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_33;
  }

  swift_bridgeObjectRelease();
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v35, (uint64_t)qword_1003FF018);
  __int16 v36 = v114;
  ((void (*)(char *, uint64_t, uint64_t))v114[2])(v12, a1, v6);
  id v37 = v2;
  __int16 v38 = (os_log_s *)Logger.logObject.getter(v37);
  uint64_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    __int16 v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = (char **)swift_slowAlloc(8LL, -1LL);
    v113 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v113;
    *(_DWORD *)__int16 v40 = 138543874;
    v112 = v38;
    v119 = (uint64_t)v37;
    id v42 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v40 + 4, v40 + 12);
    *uint64_t v41 = v37;

    *(_WORD *)(v40 + 12) = 2080;
    v119 = sub_10015ADC4(0xD00000000000002CLL, 0x800000010033C170LL, aBlock);
    id v43 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v40 + 14, v40 + 22);
    *(_WORD *)(v40 + 22) = 2082;
    id v44 = Participant.handle.getter(v43);
    v119 = sub_10015ADC4(v44, v45, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v40 + 24, v40 + 32);
    swift_bridgeObjectRelease();
    v114[1](v12, (os_log_t)v16);
    __int16 v38 = v112;
    _os_log_impl( (void *)&_mh_execute_header,  v112,  v39,  "[%{public}@] %s guest cannot request to remove all participants: %{public}s",  (uint8_t *)v40,  0x20u);
    id v46 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v41, 1LL, v46);
    swift_slowDealloc(v41, -1LL, -1LL);
    id v47 = v113;
    swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {

    v36[1](v12, (os_log_t)v16);
  }
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      __int16 v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      __int16 v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    int v32 = v31[1];
    __int16 v34 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v22);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    id result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    void *v20 = v33;
    v20[1] = v32;
    *(_DWORD *)(*(void *)(v8 + 56) + 4 * v19) = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    int v32 = *(void *)(*(void *)(v5 + 48) + 8 * v23);
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v23);
    __int16 v34 = *v33;
    uint64_t v35 = v33[1];
    if ((v40 & 1) == 0)
    {
      swift_retain(v32);
      swift_bridgeObjectRetain();
    }

    uint64_t v15 = *(void *)(v8 + 40);
    uint64_t v16 = sub_100156B68(&qword_1003FB380);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v16, &protocol witness table for AnyKeyPath);
    uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v18 = result & ~v17;
    uint32_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v19 == v29;
        if (v19 == v29) {
          uint32_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v19);
      }

      while (v31 == -1);
      uint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(void *)(*(void *)(v8 + 48) + 8 * v20) = v32;
    uint64_t v21 = (void *)(*(void *)(v8 + 56) + 16 * v20);
    *uint64_t v21 = v34;
    v21[1] = v35;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  __int16 v25 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int16 v25 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      __int16 v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  swift_release(v56);

  *(void *)(v0 + 312) = v52;
  __int128 v66 = (char *)&dword_1003FB918 + dword_1003FB918;
  id v51 = (void *)swift_task_alloc(unk_1003FB91C);
  *(void *)(v0 + 320) = v51;
  void *v51 = v0;
  v51[1] = sub_100229724;
  return ((uint64_t (*)(void, void, uint64_t))v66)(0LL, 0LL, v0 + 88);
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_34:
    uint64_t v30 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
    __int16 v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      swift_retain(v30);
      sub_100160874(v34, *((unint64_t *)&v34 + 1));
    }

    Hasher.init(_seed:)(v35, *(void *)(v8 + 40));
    (*(void (**)(void *))(*(void *)v30 + 320LL))(v35);
    id result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v18 == v27;
        if (v18 == v27) {
          uint64_t v18 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v18);
      }

      while (v29 == -1);
      uint32_t v19 = __clz(__rbit64(~v29)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v8 + 48) + 8 * v19) = v30;
    *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19) = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v32;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v31;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

      swift_bridgeObjectRelease_n(v187, 2LL);
      (*(void (**)(char *, void **))(v184 + 8))(v185, v186);

      v68((char *)v183, v32);
      goto LABEL_34;
    }

    if (v316)
    {
      v104 = [v58 outputDevices];
      if (v104)
      {
        v105 = v104;
        v316 = v101;
        v106 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
        v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, v106);

        if ((unint64_t)v107 >> 62)
        {
          if (v107 < 0) {
            v287 = v107;
          }
          else {
            v287 = v107 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          v288 = _CocoaArrayWrapper.endIndex.getter(v287);
          swift_bridgeObjectRelease();
          if (v288) {
            goto LABEL_19;
          }
        }

        else if (*(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_19:
          v296 = v58;
          if ((v107 & 0xC000000000000001LL) != 0)
          {
            v108 = (void (*)(char *, uint64_t, uint64_t))v55;
            v109 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v107);
          }

          else
          {
            if (!*(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              __break(1u);
            }
            v108 = (void (*)(char *, uint64_t, uint64_t))v55;
            v109 = *(id *)(v107 + 32);
          }

          v110 = v109;
          swift_bridgeObjectRelease();
          v111 = [v110 groupID];

          if (v111)
          {
            v315 = v103;
            v112 = a10;
            v318 = (char *)a9;
            v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
            v115 = v114;

            v334 = v113;
            v335 = v115;
            v116 = (char *)[v296 designatedGroupLeader];
            v295 = a7;
            v319 = a10;
            if (!v116)
            {
LABEL_26:
              LODWORD(v314) = a11;
              v118 = *(void *)(a7 + v97);
              swift_beginAccess(&v334, &v344, 0LL, 0LL);
              v119 = v334;
              v120 = v335;
              v121 = *(void (**)(uint64_t, char *, uint64_t *, uint64_t, unint64_t))(*(void *)v118
                                                                                                  + 288LL);
              swift_retain(v118);
              swift_bridgeObjectRetain();
              v121(v316, v315, v100, v119, v120);
              swift_release(v118);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              aBlocuint64_t k = 0LL;
              v339 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(56LL);
              v122._object = (void *)0x8000000100340550LL;
              v122._countAndFlagsBits = 0xD000000000000014LL;
              String.append(_:)(v122);
              v123._countAndFlagsBits = v325;
              v123._object = v317;
              String.append(_:)(v123);
              v124._countAndFlagsBits = 0xD000000000000022LL;
              v124._object = (void *)0x8000000100340570LL;
              String.append(_:)(v124);
              sub_10026CE38((uint64_t)aBlock, v339);
              swift_bridgeObjectRelease();
              v328 = sub_1001A8998();
              v320 = v125;
              v126 = swift_allocObject(&unk_1003ABBC0, 24LL, 7LL);
              v316 = v126;
              swift_weakInit(v126 + 16, a7);
              v127 = v321;
              v128 = *(void (**)(char *, uint64_t *, void **))(v321 + 16);
              v129 = v300;
              v130 = v323;
              v128(v300, v100, v323);
              v128(v313, (uint64_t *)v129, v130);
              v131 = *(unsigned __int8 *)(v127 + 80);
              v132 = (v131 + 88) & ~v131;
              v133 = v132 + v311;
              v298 = (char *)(v131 | 7);
              v134 = v112;
              v135 = (void *)swift_allocObject(&unk_1003AC098, ((v132 + v311) & 0xFFFFFFFFFFFFFFF8LL) + 16, v131 | 7);
              v136 = (char *)v135 + (v133 & 0xFFFFFFFFFFFFFFF8LL);
              v137 = v328;
              v135[2] = v126;
              v135[3] = v137;
              v138 = v326;
              v135[4] = v320;
              v135[5] = v138;
              v139 = (uint64_t)v318;
              v135[6] = v327;
              v135[7] = v139;
              v140 = v325;
              v135[8] = v134;
              v135[9] = v140;
              v135[10] = v317;
              v141 = (char *)v135 + v132;
              v142 = v135;
              v143 = *(void (**)(char *, char *, void **))(v127 + 32);
              v144 = v323;
              v143(v141, v129, v323);
              LODWORD(v315) = v314 & 1;
              v142[v133] = v314 & 1;
              v145 = (uint64_t)v324;
              *((void *)v136 + 1) = v324;
              v146 = v301;
              v128(v301, v322, v144);
              v147 = (v131 + 32) & ~v131;
              v148 = (v311 + v147 + 7) & 0xFFFFFFFFFFFFFFF8LL;
              v149 = (v148 + 23) & 0xFFFFFFFFFFFFFFF8LL;
              v150 = swift_allocObject(&unk_1003AC0C0, v149 + 8, v298);
              *(void *)(v150 + 16) = v140;
              v151 = v317;
              *(void *)(v150 + 24) = v317;
              v143((char *)(v150 + v147), v146, v144);
              v152 = (void *)(v150 + v148);
              v153 = v327;
              *v152 = v326;
              v152[1] = v153;
              *(void *)(v150 + v149) = v145;
              v154 = swift_allocObject(&unk_1003AC0E8, 32LL, 7LL);
              *(void *)(v154 + 16) = sub_100290458;
              *(void *)(v154 + 24) = v142;
              v155 = v142;
              v299 = (os_log_s *)v142;
              v156 = v295;
              v157 = (void *)(v295
                              + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_internalSessionObservers);
              swift_beginAccess( v295 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_internalSessionObservers,  &aBlock,  33LL,  0LL);
              swift_bridgeObjectRetain_n(v151, 3LL);
              v158 = v320;
              swift_bridgeObjectRetain_n(v320, 3LL);
              swift_retain_n(v153, 3LL);
              swift_retain_n(v316, 2LL);
              swift_bridgeObjectRetain_n(v319, 2LL);
              swift_retain(v155);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v157);
              v333 = (void *)*v157;
              *v157 = 0x8000000000000000LL;
              v160 = v328;
              sub_100181C5C((uint64_t)sub_1001EFCC4, v154, v328, v158, isUniquelyReferenced_nonNull_native);
              *v157 = v333;
              v161 = v158;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v162 = swift_endAccess(&aBlock);
              v163 = v156;
              v322 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v156 + 280LL))(v162);
              v164 = v302;
              static DispatchTime.now()();
              v165 = v304;
              + infix(_:_:)(v164, 9.0);
              v166 = *(void (**)(char *, uint64_t))(v303 + 8);
              v166(v164, v312);
              v167 = swift_allocObject(&unk_1003ABBC0, 24LL, 7LL);
              swift_weakInit(v167 + 16, v163);
              v168 = (void *)swift_allocObject(&unk_1003AC110, 56LL, 7LL);
              v168[2] = v167;
              v168[3] = v160;
              v168[4] = v161;
              v168[5] = sub_100290564;
              v168[6] = v150;
              v342 = sub_10028FC60;
              v343 = v168;
              aBlocuint64_t k = _NSConcreteStackBlock;
              v339 = 1107296256LL;
              v340 = sub_100157EA8;
              v341 = &unk_1003AC128;
              v169 = _Block_copy(&aBlock);
              swift_bridgeObjectRetain();
              swift_retain(v167);
              v170 = swift_retain(v150);
              v171 = v305;
              static DispatchQoS.unspecified.getter(v170);
              v333 = _swiftEmptyArrayStorage;
              v172 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v173 = sub_100156B68((uint64_t *)&unk_1003F9A70);
              v174 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
              v175 = v308;
              v176 = v173;
              v177 = v310;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v333, v176, v174, v310, v172);
              v178 = v322;
              OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v165, v171, v175, v169);
              _Block_release(v169);

              (*(void (**)(char *, uint64_t))(v309 + 8))(v175, v177);
              (*(void (**)(char *, uint64_t))(v306 + 8))(v171, v307);
              v166(v165, v312);
              v179 = v343;
              swift_release(v167);
              swift_release(v179);
              v180 = (uint64_t)v313;
              v181 = v316;
              v182 = v327;
              sub_100278464( v316,  v328,  v320,  v326,  v327,  (uint64_t)v318,  v319,  v325,  (unint64_t)v317,  (uint64_t)v313,  (char)v315,  (uint64_t)v324);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release(v182);
              swift_bridgeObjectRelease();
              swift_release(v181);
              swift_release(v299);
              (*(void (**)(uint64_t, void **))(v321 + 8))(v180, v323);
              swift_release(v181);
              swift_release(v150);
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }

            v117 = v116;
            if ([v116 supportsMultiplayer])
            {
LABEL_25:

              goto LABEL_26;
            }

            v314 = v117;
            v222 = [v296 origin];
            v293 = v68;
            if (v222)
            {
              v223 = v222;
              v224 = v32;
              v225 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
              v226 = [v225 nowPlayingServer];

              v227 = [v226 originClientForOrigin:v223];
              if (v227
                && (v228 = [v227 deviceInfo], v227,
                                                                                                 v228))
              {
                v229 = [v228 senderDefaultGroupUID];
                if (v229)
                {
                  v230 = v229;
                  v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
                  v233 = v232;

                  if (v231 == v113 && v233 == v115
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(v231, v233, v113, v115, 0LL) & 1) != 0)
                  {
                    v234 = v298;
                    v235 = v328;
                  }

                  else
                  {
                    v259 = v297;
                    v235 = v328;
                    v108(v297, v328, v224);
                    v260 = (unint64_t)v317;
                    swift_bridgeObjectRetain_n(v317, 2LL);
                    swift_bridgeObjectRetain_n(v233, 2LL);
                    v262 = (os_log_s *)Logger.logObject.getter(v261);
                    v263 = static os_log_type_t.default.getter(v262);
                    v299 = v262;
                    LODWORD(v292) = v263;
                    if (os_log_type_enabled(v262, v263))
                    {
                      v264 = swift_slowAlloc(42LL, -1LL);
                      v294 = (void (*)(char *))v108;
                      v265 = v264;
                      v291 = (void **)swift_slowAlloc(128LL, -1LL);
                      aBlocuint64_t k = v291;
                      *(_DWORD *)v265 = 136315906;
                      v266 = _typeName(_:qualified:)(v324, 0LL);
                      v344 = sub_10015ADC4(v266, v267, (uint64_t *)&aBlock);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v265 + 4, v265 + 12);
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v265 + 12) = 2080;
                      swift_bridgeObjectRetain();
                      v344 = sub_10015ADC4(v325, v260, (uint64_t *)&aBlock);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v265 + 14, v265 + 22);
                      swift_bridgeObjectRelease_n(v260, 3LL);
                      *(_WORD *)(v265 + 22) = 2080;
                      v290 = v265 + 24;
                      swift_beginAccess(&v334, v336, 0LL, 0LL);
                      v268 = v334;
                      v269 = v335;
                      swift_bridgeObjectRetain();
                      v344 = sub_10015ADC4(v268, v269, (uint64_t *)&aBlock);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v290, v265 + 32);
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v265 + 32) = 2080;
                      swift_bridgeObjectRetain();
                      v344 = sub_10015ADC4(v231, v233, (uint64_t *)&aBlock);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v265 + 34, v265 + 42);
                      swift_bridgeObjectRelease_n(v233, 3LL);
                      v270 = v299;
                      _os_log_impl( (void *)&_mh_execute_header,  v299,  (os_log_type_t)v292,  "[%s] handleSetActiveItem<%s> - switch groupIdentifier: %s with defaultGroupIdentifier: %s",  (uint8_t *)v265,  0x2Au);
                      v271 = v291;
                      swift_arrayDestroy(v291, 4LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v271, -1LL, -1LL);
                      v272 = v265;
                      v235 = v328;
                      v108 = (void (*)(char *, uint64_t, uint64_t))v294;
                      swift_slowDealloc(v272, -1LL, -1LL);

                      v273 = v297;
                    }

                    else
                    {

                      swift_bridgeObjectRelease_n(v233, 2LL);
                      swift_bridgeObjectRelease_n(v260, 2LL);
                      v273 = v259;
                    }

                    v224 = v320;
                    v293(v273, v320);
                    swift_beginAccess(&v334, v337, 1LL, 0LL);
                    v334 = v231;
                    v335 = v233;
                    v234 = v298;
                  }

                  swift_bridgeObjectRelease();
                  v108(v234, v235, v224);
                  v274 = (unint64_t)v317;
                  swift_bridgeObjectRetain_n(v317, 2LL);
                  v276 = (os_log_s *)Logger.logObject.getter(v275);
                  v277 = static os_log_type_t.default.getter(v276);
                  v278 = v277;
                  if (os_log_type_enabled(v276, v277))
                  {
                    v279 = swift_slowAlloc(22LL, -1LL);
                    LODWORD(v32_Block_object_dispose(va, 8) = v278;
                    v280 = v279;
                    v281 = (void **)swift_slowAlloc(64LL, -1LL);
                    aBlocuint64_t k = v281;
                    *(_DWORD *)v280 = 136315394;
                    v282 = _typeName(_:qualified:)(v324, 0LL);
                    v344 = sub_10015ADC4(v282, v283, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v280 + 4, v280 + 12);
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v280 + 12) = 2080;
                    swift_bridgeObjectRetain();
                    v344 = sub_10015ADC4(v325, v274, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v280 + 14, v280 + 22);
                    swift_bridgeObjectRelease_n(v274, 3LL);
                    _os_log_impl( (void *)&_mh_execute_header,  v276,  (os_log_type_t)v328,  "[%s] handleSetActiveItem<%s> - remove item from parent group",  (uint8_t *)v280,  0x16u);
                    swift_arrayDestroy(v281, 2LL, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v281, -1LL, -1LL);
                    swift_slowDealloc(v280, -1LL, -1LL);

                    v284 = v298;
                    v285 = v320;
                  }

                  else
                  {

                    swift_bridgeObjectRelease_n(v274, 2LL);
                    v284 = v234;
                    v285 = v224;
                  }

                  v293(v284, v285);
                  id v100 = v322;
                  v112 = v319;
                  v117 = (char *)String._bridgeToObjectiveC()();
                  v342 = (uint64_t (*)())MRDFastSyncGroupSessionState.rawValue.getter;
                  v343 = 0LL;
                  aBlocuint64_t k = _NSConcreteStackBlock;
                  v339 = 1107296256LL;
                  v340 = sub_100157E54;
                  v341 = &unk_1003AC150;
                  v286 = _Block_copy(&aBlock);
                  [v296 removeOutputDeviceFromParentGroup:v117 queue:0 completion:v286];

                  _Block_release(v286);
                  a7 = v295;
                  goto LABEL_25;
                }
              }

              else
              {
                v228 = v223;
              }

              int v32 = v224;
              id v68 = v293;
            }

            swift_bridgeObjectRelease();
            v236 = v299;
            v108((char *)v299, v328, v32);
            v237 = (unint64_t)v317;
            swift_bridgeObjectRetain_n(v317, 2LL);
            v239 = (os_log_s *)Logger.logObject.getter(v238);
            v240 = v32;
            v241 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v239, v241))
            {
              v242 = swift_slowAlloc(22LL, -1LL);
              v243 = v236;
              v244 = (void **)swift_slowAlloc(64LL, -1LL);
              aBlocuint64_t k = v244;
              *(_DWORD *)v242 = 136315394;
              v245 = _typeName(_:qualified:)(v324, 0LL);
              v344 = sub_10015ADC4(v245, v246, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v242 + 4, v242 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v242 + 12) = 2080;
              swift_bridgeObjectRetain();
              v344 = sub_10015ADC4(v325, v237, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v242 + 14, v242 + 22);
              swift_bridgeObjectRelease_n(v237, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v239,  v241,  "[%s] handleSetActiveItem<%s> - no default group identifier for non-multiplayer device",  (uint8_t *)v242,  0x16u);
              swift_arrayDestroy(v244, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v244, -1LL, -1LL);
              swift_slowDealloc(v242, -1LL, -1LL);

              v293((char *)v243, v240);
            }

            else
            {

              swift_bridgeObjectRelease_n(v237, 2LL);
              v68((char *)v236, v240);
            }

            v247 = (void (*)(void))v326;
            v248 = type metadata accessor for InternalRoutingError(0LL);
            v249 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
            v250 = swift_allocError(v248, v249, 0LL, 0LL);
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v248 - 8) + 104LL))( v251,  enum case for InternalRoutingError.sessionNotFound(_:),  v248);
            v252 = MRDFastSyncGroupSessionState.rawValue.getter(v250, 1LL, 0LL, 4LL);
            v254 = v253;
            v256 = v255;
            v258 = v257;
            v247();
            swift_errorRelease(v252);
            sub_100156BA8(v254, v256, v258);

            return swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease();
          __int16 v55 = (void (*)(char *))v108;
LABEL_28:
          v183 = v319;
          ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v319, v328, v32);
          v184 = v321;
          v185 = v318;
          v186 = v323;
          (*(void (**)(char *, uint64_t *, void **))(v321 + 16))(v318, v100, v323);
          v187 = (unint64_t)v317;
          swift_bridgeObjectRetain_n(v317, 2LL);
          v189 = (os_log_s *)Logger.logObject.getter(v188);
          v190 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v189, v190))
          {
            v191 = swift_slowAlloc(32LL, -1LL);
            v192 = (void **)swift_slowAlloc(96LL, -1LL);
            aBlocuint64_t k = v192;
            *(_DWORD *)v191 = 136315650;
            v193 = _typeName(_:qualified:)(v324, 0LL);
            v344 = sub_10015ADC4(v193, v194, (uint64_t *)&aBlock);
            v293 = v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v191 + 4, v191 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v191 + 12) = 2080;
            swift_bridgeObjectRetain();
            v344 = sub_10015ADC4(v325, v187, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v191 + 14, v191 + 22);
            swift_bridgeObjectRelease_n(v187, 3LL);
            *(_WORD *)(v191 + 22) = 2080;
            v195 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
            v196 = (uint64_t)v318;
            v197 = dispatch thunk of CustomStringConvertible.description.getter(v186, v195);
            v344 = sub_10015ADC4(v197, v198, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v191 + 24, v191 + 32);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, void **))(v184 + 8))(v196, v186);
            _os_log_impl( (void *)&_mh_execute_header,  v189,  v190,  "[%s] handleSetActiveItem<%s> - formed endpoint for interaction: %s has no group identifier. Failing",  (uint8_t *)v191,  0x20u);
            swift_arrayDestroy(v192, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v192, -1LL, -1LL);
            swift_slowDealloc(v191, -1LL, -1LL);

            v199 = &v346;
LABEL_32:
            v293((char *)*(v199 - 32), v320);
LABEL_34:
            v210 = (void (*)(void))v326;
            v211 = type metadata accessor for InternalRoutingError(0LL);
            v212 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
            v213 = swift_allocError(v211, v212, 0LL, 0LL);
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v211 - 8) + 104LL))( v214,  enum case for InternalRoutingError.sessionNotFound(_:),  v211);
            v215 = MRDFastSyncGroupSessionState.rawValue.getter(v213, 1LL, 0LL, 4LL);
            v217 = v216;
            v219 = v218;
            v221 = v220;
            v210();
            swift_errorRelease(v215);
            return sub_100156BA8(v217, v219, v221);
          }

          goto LABEL_33;
        }

        swift_bridgeObjectRelease();
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  v296 = v46;
  uint64_t v49 = a7;
  __int16 v50 = v32;
  id v51 = v328;
  swift_getErrorValue(v328, v332, v329);
  __int16 v52 = v330;
  uint64_t v53 = v331;
  swift_errorRetain(v51);
  if ((sub_100202810(v52, v53) & 1) != 0)
  {
    swift_errorRelease(v328);
    int v32 = v50;
    a7 = v49;
    id v46 = v296;
    goto LABEL_4;
  }

  id v69 = sub_1001741A8();
  uint64_t v70 = v33;
  (*((void (**)(char *, uint64_t, uint64_t))v33 + 2))(v48, v69, v50);
  id v71 = v328;
  swift_errorRetain(v328);
  swift_bridgeObjectRetain();
  swift_errorRetain(v71);
  int8x16_t v72 = swift_bridgeObjectRetain();
  v73 = (os_log_s *)Logger.logObject.getter(v72);
  __int16 v74 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v73, v74))
  {
    id v75 = swift_slowAlloc(32LL, -1LL);
    v322 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    v323 = (void **)swift_slowAlloc(64LL, -1LL);
    aBlocuint64_t k = v323;
    *(_DWORD *)id v75 = 136315650;
    __int16 v76 = _typeName(_:qualified:)(v324, 0LL);
    v324 = v48;
    v344 = sub_10015ADC4(v76, v77, (uint64_t *)&aBlock);
    v320 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v75 + 4, v75 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    swift_bridgeObjectRetain();
    v344 = sub_10015ADC4(v325, a3, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v75 + 14, v75 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v75 + 22) = 2112;
    v78 = v328;
    swift_errorRetain(v328);
    v79 = _swift_stdlib_bridgeErrorToNSError(v78);
    v344 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v75 + 24, v75 + 32);
    v80 = v322;
    *v322 = v79;
    swift_errorRelease(v78);
    swift_errorRelease(v78);
    _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "[%s] handleSetActiveItem<%s> - create endpoint failed with error: %@",  (uint8_t *)v75,  0x20u);
    v81 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v80, 1LL, v81);
    int8x16_t v82 = v80;
    v83 = (void (*)(void))v326;
    swift_slowDealloc(v82, -1LL, -1LL);
    v84 = v323;
    swift_arrayDestroy(v323, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v75, -1LL, -1LL);

    (*((void (**)(char *, uint64_t))v70 + 1))(v324, v320);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    v85 = v328;
    swift_errorRelease(v328);
    swift_errorRelease(v85);

    (*((void (**)(char *, uint64_t))v70 + 1))(v48, v50);
    v83 = (void (*)(void))v326;
  }

  id v86 = v328;
  swift_errorRetain(v328);
  v87 = MRDFastSyncGroupSessionState.rawValue.getter(v86, 0LL, 0LL, 4LL);
  v89 = v88;
  unsigned __int8 v91 = v90;
  v93 = v92;
  v83();
  swift_errorRelease(v87);
  sub_100156BA8(v89, v91, v93);
  return swift_errorRelease(v86);
}

    double v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint32_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint32_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    double v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    int v32 = v31[1];
    __int16 v34 = *(void *)(*(void *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    id result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint32_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint32_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    void *v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

MRAVDistantOutputDevice *sub_100051218(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimaryLocalDevice])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 descriptor]);
    [*(id *)(a1 + 32) _mergeDeviceInfo:*(void *)(a1 + 40) intoProtobuf:v4];
    [*(id *)(a1 + 32) _logChangesInModifyingOutputDevice:v3 toOutputDevice:v4 reason:@"deviceInfo"];
    uint64_t v5 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v4);
  }

  else
  {
    uint64_t v5 = (MRAVDistantOutputDevice *)v3;
  }

  return v5;
}

MRAVDistantOutputDevice *sub_10005130C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimaryLocalDevice])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceUID]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 outputContextForOutputDeviceUID:v6]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 contextID]);
    [*(id *)(a1 + 32) setRoutingContextUID:v8];
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 descriptor]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
      uint64_t v11 = MRComputeGroupContextID();
      double v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (v12 && ([v8 isEqualToString:v12] & 1) == 0)
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 stringByReplacingOccurrencesOfString:v12 withString:v8]);
        [v9 setGroupID:v13];
      }

      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 airPlayGroupID]);
      uint64_t v15 = MRComputeGroupContextID();
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v16 && ([v8 isEqualToString:v16] & 1) == 0)
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByReplacingOccurrencesOfString:v16 withString:v8]);
        [v9 setAirPlayGroupID:v17];
      }

      [*(id *)(a1 + 32) _logChangesInModifyingOutputDevice:v3 toOutputDevice:v9 reason:@"reservedOutputContext"];
      uint64_t v18 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v9);
    }

    else
    {
      uint64_t v18 = (MRAVDistantOutputDevice *)v3;
    }
  }

  else
  {
    uint64_t v18 = (MRAVDistantOutputDevice *)v3;
  }

  return v18;
}

BOOL sub_100051890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100051920;
  v9[3] = &unk_10039AC00;
  id v10 = v3;
  id v5 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_firstWhere:", v9));
  BOOL v7 = v6 != 0LL;

  return v7;
}

id sub_100051920(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_100051980(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setIsRemoteControllable:1];
  [v3 setTransportType:5];
  id v4 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v3);
  [*(id *)(a1 + 32) addObject:v4];
  [*(id *)(a1 + 40) _logChangesInModifyingOutputDevice:0 toOutputDevice:v3 reason:@"addFromOutputContext"];
}

LABEL_27:
  -[MRDRemoteControlDiscoverySession setLocalEndpointConnection:](self, "setLocalEndpointConnection:", v18);
}
}

    double v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint32_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint32_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v21 = (v29 - 1) & v29;
    uint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_28:
    uint64_t v27 = *(id *)(*(void *)(v9 + 48) + 8 * v22);
    if (!v27) {
      goto LABEL_31;
    }
    while (1)
    {
      sub_100159EE8(1, v4, v27);

      uint64_t v15 = v23;
      uint64_t v16 = v21;
      if ((v9 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_11:
      uint64_t v24 = __CocoaSet.Iterator.next()(v10);
      if (v24)
      {
        __int16 v25 = v24;
        __int16 v40 = v24;
        id v26 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
        uint64_t v27 = (id)v41[0];
        swift_unknownObjectRelease(v25);
        uint64_t v23 = v15;
        uint64_t v21 = v16;
        if (v27) {
          continue;
        }
      }

      goto LABEL_31;
    }
  }

  uint64_t v30 = v15 + 5;
  while (v20 != v30)
  {
    uint64_t v29 = *(void *)(v39 + 8 * v30++);
    if (v29)
    {
      uint64_t v23 = v30 - 1;
      goto LABEL_27;
    }
  }

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    uint64_t v16 = (v22 - 1) & v22;
    uint32_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v20, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v20,  v5,  v2);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    id result = (void *)swift_release(v6);
    id v1 = v25;
    goto LABEL_30;
  }

  uint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    uint64_t v13 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    uint64_t v18 = 16 * v13;
    uint32_t v19 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = v19[1];
    uint64_t v21 = (uint64_t *)(*(void *)(a1 + 56) + v18);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    *(void *)&v42[0] = *v19;
    *((void *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
    __int16 v38 = v34;
    uint64_t v39 = v35;
    __int16 v40 = v36;
    sub_100160944(v37, v41);
    __int16 v34 = v38;
    uint64_t v35 = v39;
    __int16 v36 = v40;
    sub_100160944(v41, v42);
    sub_100160944(v42, &v38);
    id result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v24 = -1LL << *((_BYTE *)v3 + 32);
    __int16 v25 = result & ~v24;
    id v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          id v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)&v7[8 * v26];
      }

      while (v30 == -1);
      id v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(void *)(v11 + 32) = v36;
    id result = (uint64_t)sub_100160944(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_10016031C(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v29 = (v34 - 1) & v34;
    int v32 = __clz(__rbit64(v34)) + (v25 << 6);
LABEL_28:
    __int16 v36 = (uint64_t *)(*((void *)v24 + 6) + 16 * v32);
    __int16 v38 = *v36;
    id v37 = v36[1];
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_100187D24();
    swift_bridgeObjectRetain();
    __int16 v40 = sub_10015CAD4(v38, v37);
    LOBYTE(v3_Block_object_dispose(va, 8) = v41;
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
      aBlock[0] = v39;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001F339C();
        uint64_t v39 = (void *)aBlock[0];
      }

      swift_bridgeObjectRelease();
      id v43 = *(void **)(v39[7] + 8 * v40);
      sub_1001B1630(v40, (uint64_t)v39);
      swift_bridgeObjectRelease();
    }

    else
    {
      id v43 = 0LL;
    }

    v2[4] = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
      [v43 invalidate];
    }
  }

  uint64_t v35 = v33 + 3;
  if (v35 >= v30)
  {
LABEL_35:
    swift_release(v24);
    id v44 = sub_1001FCF44();
    id v45 = v44;
    id v46 = 0LL;
    id v47 = v44[8];
    id v100 = (char *)(v44 + 8);
    uint64_t v48 = 1LL << *((_BYTE *)v44 + 32);
    uint64_t v49 = -1LL;
    if (v48 < 64) {
      uint64_t v49 = ~(-1LL << v48);
    }
    __int16 v50 = v49 & v47;
    v101 = (unint64_t)(v48 + 63) >> 6;
    v97 = v44;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v50)
          {
            id v51 = __clz(__rbit64(v50));
            v50 &= v50 - 1;
            __int16 v52 = v51 | (v46 << 6);
          }

          else
          {
            uint64_t v53 = v46 + 1;
            if (__OFADD__(v46, 1LL)) {
              goto LABEL_81;
            }
            if (v53 >= v101) {
              return swift_release(v45);
            }
            uint64_t v54 = *(void *)&v100[8 * v53];
            ++v46;
            if (!v54)
            {
              id v46 = v53 + 1;
              if (v53 + 1 >= v101) {
                return swift_release(v45);
              }
              uint64_t v54 = *(void *)&v100[8 * v46];
              if (!v54)
              {
                id v46 = v53 + 2;
                if (v53 + 2 >= v101) {
                  return swift_release(v45);
                }
                uint64_t v54 = *(void *)&v100[8 * v46];
                if (!v54)
                {
                  __int16 v55 = v53 + 3;
                  if (v55 >= v101) {
                    return swift_release(v45);
                  }
                  uint64_t v54 = *(void *)&v100[8 * v55];
                  if (!v54)
                  {
                    while (1)
                    {
                      id v46 = v55 + 1;
                      if (__OFADD__(v55, 1LL)) {
                        goto LABEL_84;
                      }
                      if (v46 >= v101) {
                        return swift_release(v45);
                      }
                      uint64_t v54 = *(void *)&v100[8 * v46];
                      ++v55;
                      if (v54) {
                        goto LABEL_54;
                      }
                    }
                  }

                  id v46 = v55;
                }
              }
            }

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    double v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    double v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    id result = (void *)sub_100160954(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    uint64_t v18 = v23[0];
    uint32_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_10016031C(v51);
    return swift_release(v57);
  }

  sub_1001FC650(v20, a4 & 1);
  uint64_t v22 = sub_10015CAD4(v14, v13);
  if ((v21 & 1) == (v23 & 1))
  {
    uint64_t v17 = v22;
    if ((v21 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_100160800((uint64_t)v48, (uint64_t)v47);
    sub_1001607E0(v48);
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v17);
    sub_1001607E0(v24);
    sub_100160944(v47, v24);
    goto LABEL_16;
  }

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    uint32_t v19 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    uint64_t v23 = *(void *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v23, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v23,  v8,  v5);
  }

  id v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    id result = (void *)swift_release(v9);
    id v4 = v28;
    goto LABEL_30;
  }

  __int16 v25 = *(void *)(v13 + 8 * v26);
  if (v25)
  {
    uint64_t v16 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_28;
    }
    __int16 v25 = *(void *)(v13 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

    __int16 v36 = v24[1];
    if (*v24 == a1 && v36 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v36, a1, a2, 0LL) & 1) != 0) {
      goto LABEL_32;
    }
    ++v22;
    uint64_t v15 = v44;
    if (v22 == v45) {
      goto LABEL_4;
    }
  }

  int v32 = (uint64_t *)(v30 + 40);
  while (1)
  {
    uint64_t v33 = *(v32 - 1);
    __int16 v34 = *v32;
    uint64_t v35 = v33 == a1 && v34 == a2;
    if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, a1, a2, 0LL) & 1) != 0) {
      break;
    }
    v32 += 5;
    if (!--v31) {
      goto LABEL_27;
    }
  }

    id v45 = v123;
    id v46 = v117;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v9, v44, 1LL, v117);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v9, 1LL, v46) != 1)
    {
      id v47 = v124;
      id result = (id)sub_1001A81D4((uint64_t)v9, v124, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v48 = *(void *)(v47 + 24);
      if (!v48) {
        goto LABEL_84;
      }
      uint64_t v49 = *v111;
      if (*(void *)(*v111 + 16))
      {
        __int16 v50 = *(void *)(v124 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v51 = sub_10015CAD4(v50, v48);
        if ((v52 & 1) != 0)
        {
          uint64_t v53 = *(void *)(*(void *)(v49 + 56) + 8 * v51);
          swift_retain(v53);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_BYTE *)(v53 + 16) == 2)
          {
            uint64_t v54 = *(void *)(v53 + 40);
            v108 = *(void *)(v53 + 32);
            __int16 v55 = *(_BYTE *)(v53 + 80);
            v107 = v54;
            if ((v55 & 1) != 0)
            {
              uint64_t v56 = *(void **)(v53 + 64);
              swift_bridgeObjectRetain();
              __int16 v57 = [v56 resolvedOutputDevices];
            }

            else
            {
              __int16 v74 = *(void **)(v53 + 72);
              swift_bridgeObjectRetain();
              __int16 v57 = [v74 outputDevices];
            }

            id v75 = v57;
            if (v75)
            {
              __int16 v76 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
              v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v75, v76);

LABEL_69:
              if (v77 < 0) {
                v97 = v77;
              }
              else {
                v97 = v77 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain();
              v78 = _CocoaArrayWrapper.endIndex.getter(v97);
            }

            else
            {
              v77 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_51:
              v78 = *(void *)((v77 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              swift_bridgeObjectRetain();
            }

            v109 = v53;
            if (v78)
            {
              v79 = v78;
              v127 = v77 & 0xC000000000000001LL;
              v80 = 4LL;
              v81 = _swiftEmptyArrayStorage;
              v119 = v77;
              v113 = v78;
              while (1)
              {
                id result = v127
                       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v80 - 4, v77)
                       : *(id *)(v77 + 8 * v80);
                int8x16_t v82 = result;
                v83 = v80 - 3;
                if (__OFADD__(v80 - 4, 1LL)) {
                  break;
                }
                v84 = [result uid];
                if (v84)
                {
                  v85 = v84;
                  id v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                  uint64_t v88 = v87;

                  if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0) {
                    v81 = sub_1001E1164(0LL, v81[2] + 1LL, 1, v81);
                  }
                  uint64_t v90 = v81[2];
                  v89 = v81[3];
                  if (v90 >= v89 >> 1) {
                    v81 = sub_1001E1164((void *)(v89 > 1), v90 + 1, 1, v81);
                  }
                  v81[2] = v90 + 1;
                  unsigned __int8 v91 = &v81[2 * v90];
                  v91[4] = v86;
                  v91[5] = v88;
                  v77 = v119;
                  v79 = v113;
                }

                else
                {
                }

                ++v80;
                if (v83 == v79) {
                  goto LABEL_67;
                }
              }

              __break(1u);
              break;
            }

            v81 = _swiftEmptyArrayStorage;
LABEL_67:
            swift_bridgeObjectRelease_n(v77, 2LL);
            id v92 = v110;
            v93 = *v110;
            v94 = v110[1];
            v95 = (void *)v110[2];
            id v96 = v107;
            *v110 = v108;
            v92[1] = v96;
            v92[2] = (uint64_t)v81;
            sub_10028E974(v93, v94, (uint64_t)v95);
            sub_10028DA70(v93, v94, (uint64_t)v95);
            sub_100263A50(v93, v94, v95);
            sub_10028DA70(v93, v94, (uint64_t)v95);
            swift_release(v109);
            uint64_t v9 = v118;
            double v12 = v121;
LABEL_46:
            id result = (id)sub_1001A813C(v124, type metadata accessor for HostedRoutingSourceSession);
            goto LABEL_15;
          }

          swift_release(v53);
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }

      __int16 v58 = *(void *)(v124 + 32);
      __int16 v59 = *(void *)(v58 + 16);
      if (v59)
      {
        v130 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_10015DCE8(0, v59, 0);
        uint64_t v60 = *(unsigned __int8 *)(v122 + 80);
        v127 = v58;
        __int128 v61 = v58 + ((v60 + 32) & ~v60);
        uint64_t v62 = *(void *)(v122 + 72);
        id v63 = v130;
        do
        {
          __int128 v64 = v128;
          sub_1001A80F8(v61, (uint64_t)v128, type metadata accessor for HostedRoutingItem);
          __int128 v66 = *v64;
          __int128 v65 = v64[1];
          swift_bridgeObjectRetain();
          sub_1001A813C((uint64_t)v64, type metadata accessor for HostedRoutingItem);
          if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
          {
            sub_10015DCE8(0, v63[2] + 1LL, 1);
            id v63 = v130;
          }

          id v68 = v63[2];
          __int128 v67 = v63[3];
          if (v68 >= v67 >> 1)
          {
            sub_10015DCE8(v67 > 1, v68 + 1, 1);
            id v63 = v130;
          }

          v63[2] = v68 + 1;
          id v69 = &v63[2 * v68];
          v69[4] = v66;
          v69[5] = v65;
          v61 += v62;
          --v59;
        }

        while (v59);
        swift_bridgeObjectRelease();
        double v12 = v121;
      }

      else
      {
        id v63 = _swiftEmptyArrayStorage;
      }

      uint64_t v70 = v110;
      id v71 = *v110;
      int8x16_t v72 = v110[1];
      v73 = (void *)v110[2];
      *v110 = 0LL;
      v70[1] = 0LL;
      v70[2] = (uint64_t)v63;
      sub_10028E974(v71, v72, (uint64_t)v73);
      sub_10028DA70(v71, v72, (uint64_t)v73);
      sub_100263A50(v71, v72, v73);
      sub_10028DA70(v71, v72, (uint64_t)v73);
      uint64_t v9 = v118;
      goto LABEL_46;
    }

    id result = (id)sub_1001603DC((uint64_t)v9, &qword_1003F9518);
LABEL_15:
    uint64_t v28 = v114;
    uint64_t v31 = v125 + 1;
    if (v125 + 1 == v116) {
      return (id)swift_bridgeObjectRelease();
    }
  }

  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    uint64_t v54 = v24;
LABEL_28:
    id v26 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v9,  *(void *)(v53 + 48) + *(void *)(v3 + 72) * v21,  v2);
    uint64_t v27 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v21);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v51;
    uint64_t v31 = &v9[*(int *)(v51 + 48)];
    *(void *)uint64_t v31 = v28;
    *((void *)v31 + 1) = v29;
    sub_10029574C((uint64_t)v9, (uint64_t)v7);
    int v32 = &v7[*(int *)(v30 + 48)];
    uint64_t v33 = v52;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v52, v7, v2);
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v55, v33, v2, &type metadata for AnyHashable, 7LL);
    __int16 v34 = *((void *)v32 + 1);
    *(void *)&id v63 = *(void *)v32;
    *((void *)&v63 + 1) = v34;
    uint64_t v35 = v50;
    swift_dynamicCast(v50, &v63, &type metadata for String, v48, 7LL);
    __int16 v59 = v55;
    uint64_t v60 = v56;
    __int128 v61 = v57;
    __int16 v36 = v35;
    id v37 = v49;
    sub_100160944(v36, v49);
    __int16 v55 = v59;
    uint64_t v56 = v60;
    __int16 v57 = v61;
    sub_100160944(v37, &v63);
    sub_100160944(&v63, &v59);
    id result = AnyHashable._rawHashValue(seed:)(v11[5]);
    __int16 v38 = -1LL << *((_BYTE *)v11 + 32);
    uint64_t v39 = result & ~v38;
    __int16 v40 = v39 >> 6;
    if (((-1LL << v39) & ~*(void *)&v16[8 * (v39 >> 6)]) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v39) & ~*(void *)&v16[8 * (v39 >> 6)])) | v39 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v41 = 0;
      id v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v43 = v40 == v42;
        if (v40 == v42) {
          __int16 v40 = 0LL;
        }
        v41 |= v43;
        id v44 = *(void *)&v16[8 * v40];
      }

      while (v44 == -1);
      uint64_t v18 = __clz(__rbit64(~v44)) + (v40 << 6);
    }

    *(void *)&v16[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v18;
    uint32_t v19 = v11[6] + 40 * v18;
    *(_OWORD *)uint32_t v19 = v55;
    *(_OWORD *)(v19 + 16) = v56;
    *(void *)(v19 + 32) = v57;
    id result = (uint64_t)sub_100160944(&v59, (_OWORD *)(v11[7] + 32 * v18));
    ++v11[2];
  }

  __int16 v25 = v54 + 5;
  if (v54 + 5 >= v46)
  {
LABEL_37:
    swift_release(v11);
    sub_10016031C(v53);
    return (uint64_t)v11;
  }

  uint64_t v23 = *(void *)(v47 + 8 * v25);
  if (v23)
  {
    uint64_t v24 = v54 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_37;
    }
    uint64_t v23 = *(void *)(v47 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_27;
    }
  }

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    double v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = (void *)swift_retain(v17);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint32_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint32_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    id v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint32_t v19 = v18[1];
    sub_100160800(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&__int16 v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_100160944(v39, v33);
    __int16 v34 = v30;
    uint64_t v35 = v31;
    __int16 v36 = v32;
    sub_100160944(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    int v32 = v36;
    sub_100160944(v37, v38);
    sub_100160944(v38, &v34);
    id result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      __int16 v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        id v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      id v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    id result = (uint64_t)sub_100160944(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10016031C(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

void sub_100052EC8(_Unwind_Exception *a1)
{
}

void sub_100052EF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_100052F24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_100052F50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_100053168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100053190(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_1000533D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100053400(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_100053A1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100053A38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _invalidate];
    id WeakRetained = v2;
  }
}

void sub_100053D8C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.MRDAVHostedDiscoverySession.calloutQueue", 0LL);
  id v2 = (void *)qword_1003FDCD8;
  qword_1003FDCD8 = (uint64_t)v1;
}

void sub_100053F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (*(_DWORD *)(v2 + 20))
  {
    if (!v3)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)",  *(void *)(v2 + 112),  [*(id *)(v2 + 32) processIdentifier]));
      id v5 = -[MROSTransaction initWithName:](objc_alloc(&OBJC_CLASS___MROSTransaction), "initWithName:", v4);
      uint64_t v6 = *(void *)(a1 + 32);
      BOOL v7 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v5;

      MRRegisterTransaction(*(void *)(*(void *)(a1 + 32) + 56LL));
      uint64_t v2 = *(void *)(a1 + 32);
    }

    if (!*(void *)(v2 + 168))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessIdentifier identifierWithPid:]( RBSProcessIdentifier,  "identifierWithPid:",  [*(id *)(v2 + 32) processIdentifier]));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessHandle handleForIdentifier:error:]( &OBJC_CLASS___RBSProcessHandle,  "handleForIdentifier:error:",  v8,  0LL));

      if (v9)
      {
        objc_initWeak(&location, *(id *)(a1 + 32));
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        v14[2] = sub_100054114;
        v14[3] = &unk_10039BA90;
        id v15 = v9;
        objc_copyWeak(&v16, &location);
        uint64_t v10 = objc_claimAutoreleasedReturnValue( +[RBSProcessMonitor monitorWithConfiguration:]( &OBJC_CLASS___RBSProcessMonitor,  "monitorWithConfiguration:",  v14));
        uint64_t v11 = *(void *)(a1 + 32);
        double v12 = *(void **)(v11 + 168);
        *(void *)(v11 + 16_Block_object_dispose(va, 8) = v10;

        objc_destroyWeak(&v16);
        objc_destroyWeak(&location);
      }

      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 currentState]);
      objc_msgSend(*(id *)(a1 + 32), "setProcessSuspended:", objc_msgSend(v13, "taskState") == 3);
    }
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
  }

void sub_1000540F8(_Unwind_Exception *a1)
{
}

void sub_100054114(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](&OBJC_CLASS___RBSProcessStateDescriptor, "descriptor"));
  [v4 setValues:1];
  [v3 setStateDescriptor:v4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingHandle:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingHandle:",  *(void *)(a1 + 32)));
  uint64_t v9 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  [v3 setPredicates:v6];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100054268;
  v7[3] = &unk_10039BA68;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  [v3 setUpdateHandler:v7];
  objc_destroyWeak(&v8);
}

void sub_10005424C(_Unwind_Exception *a1)
{
}

void sub_100054268(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a4 state]);
  BOOL v5 = [v7 taskState] == 3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setProcessSuspended:v5];
}

uint64_t sub_100054350(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 24LL);
  return result;
}

void sub_10005448C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MRLogCategoryDiscovery();
  BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[HostedDiscoverySession] %@ error fetching configuration: %@",  (uint8_t *)&v7,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100054560(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setConfiguration:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100054664(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100054674(uint64_t a1)
{
}

void sub_10005467C(uint64_t a1)
{
}

void sub_10005470C(uint64_t a1)
{
}

void sub_100054894(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:*(void *)(a1 + 32)];
}

void *sub_100054940(void *result, uint64_t a2)
{
  uint64_t v2 = result[4];
  int v3 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v2 + 18) != v3)
  {
    id v4 = result;
    *(_BYTE *)(v2 + 1_Block_object_dispose(va, 8) = v3;
    uint64_t v5 = MRLogCategoryDiscovery(result, a2);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v4[4];
      int v8 = *((unsigned __int8 *)v4 + 40);
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[HostedDiscoverySession] %@ setting processSuspended to %{BOOL}u",  (uint8_t *)&v9,  0x12u);
    }

    return [(id)v4[4] _reevaluateEffectiveDiscoveryMode];
  }

  return result;
}

void sub_100054B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100054B30(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 20LL);
  return result;
}

id sub_100054BC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDiscoveryMode:*(unsigned int *)(a1 + 40)];
}

id sub_100054D10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMonitor]);
  [v2 invalidate];

  return _[*(id *)(a1 + 32) setEffectiveDiscoveryMode:0];
}

void sub_100054DD0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 104);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100054E54;
  v6[3] = &unk_10039AB88;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  [v4 canSendMessage:v6];
}

void sub_100054E54(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) remoteObjectProxy]);
    [v7 availableOutputDevicesDidChange:*(void *)(a1 + 40)];
  }

  else
  {
    id v4 = *(dispatch_queue_s **)(v3 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100054EF0;
    block[3] = &unk_100398E60;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    dispatch_sync(v4, block);
  }

void sub_100054EF0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v3 = [v2 verboseHostedDiscoverySessionLogging];

  if (v3)
  {
    uint64_t v6 = MRLogCategoryDiscovery(v4, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[HostedDiscoverySession] Caching outputDevices %@ for %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 96LL), *(id *)(a1 + 32));
}

void sub_10005505C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 104);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000550E0;
  v6[3] = &unk_10039AB88;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  [v4 canSendMessage:v6];
}

void sub_1000550E0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) remoteObjectProxy]);
    [v7 availableEndpointsDidChange:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v4 = *(dispatch_queue_s **)(v3 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10005517C;
    block[3] = &unk_100398E60;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    dispatch_sync(v4, block);
  }

void sub_10005517C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v3 = [v2 verboseHostedDiscoverySessionLogging];

  if (v3)
  {
    uint64_t v6 = MRLogCategoryDiscovery(v4, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[HostedDiscoverySession] Caching endpoints %@ for %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 88LL), *(id *)(a1 + 32));
}

void sub_1000554BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000554F0(void *a1)
{
  uint64_t v2 = a1[4];
  unsigned int v3 = *(void **)(v2 + 96);
  *(void *)(v2 + 96) = 0LL;

  uint64_t v4 = a1[4];
  uint64_t v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 8_Block_object_dispose(va, 8) = 0LL;
}

id sub_100055B38(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateSystemStateWithReason:@"Initial evaluation"];
}

void sub_100055E98(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[MRDeviceInfoRequest localDeviceInfo](&OBJC_CLASS___MRDeviceInfoRequest, "localDeviceInfo"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  unsigned int v4 = [v2 isEqualToString:v3];

  if (v4) {
    [*(id *)(a1 + 40) reevaluateSystemStateWithReason:@"Local device info changed"];
  }
}

LABEL_32:
    goto LABEL_33;
  }

  uint64_t v22 = _MRLogForCategory(12LL, v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = v9 != 0LL;
    uint64_t v24 = -[MRDRemoteControlGroupSessionCoordinator isStartingSession](self, "isStartingSession");
    __int16 v25 = -[MRDRemoteControlGroupSessionCoordinator isJoiningSession](self, "isJoiningSession");
    id v26 = -[MRDRemoteControlGroupSessionCoordinator isThrottled](self, "isThrottled");
    *(_DWORD *)__int128 buf = 67109888;
    *(_DWORD *)id v51 = v24;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v25;
    *(_WORD *)__int16 v52 = 1024;
    *(_DWORD *)&v52[2] = v26;
    LOWORD(v53) = 1024;
    *(_DWORD *)((char *)&v53 + 2) = v23;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlGroupSessionCoordinator] Returning. Rationale: starting=%{BOOL}u, joining=%{BOOL}u, throttled=%{B OOL}u, isRotating=%{BOOL}u.",  buf,  0x1Au);
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

              __break(1u);
              return result;
            }

            goto LABEL_22;
          }

  if (v16 < 0) {
    id v43 = v16;
  }
  else {
    id v43 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v43);
  if (!v17) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v18 = 4LL;
  while (1)
  {
    if ((v16 & 0xC000000000000001LL) != 0) {
      uint32_t v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v16);
    }
    else {
      uint32_t v19 = *(id *)(v16 + 8 * v18);
    }
    uint64_t v20 = v19;
    uint64_t v21 = v18 - 3;
    if (__OFADD__(v18 - 4, 1LL))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    uint64_t v22 = *(void (**)(void))((swift_isaMask & *v19) + 0x68LL);
    v22();
    uint64_t v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48);
    uint64_t v24 = v23(v9, 1LL, v52);
    sub_1001603DC((uint64_t)v9, &qword_1003F9F28);
    if (v24 != 1) {
      break;
    }

    ++v18;
    if (v21 == v17) {
      goto LABEL_10;
    }
  }

  uint64_t v27 = swift_bridgeObjectRelease_n(v16, 2LL);
  __int16 v25 = v49;
  ((void (*)(uint64_t))v22)(v27);

  uint64_t v28 = v52;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 32))(v48, v25, v28);
  uint64_t v30 = v46(v29);
  if ((unint64_t)v30 >> 62)
  {
LABEL_39:
    if (v30 < 0) {
      id v44 = v30;
    }
    else {
      id v44 = v30 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v44);
    if (v31) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v31)
    {
LABEL_15:
      uint64_t v16 = v30 & 0xC000000000000001LL;
      uint64_t v49 = v30 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v9 = &qword_1003F9F28;
      int v32 = (uint64_t)v50;
      while (!__OFSUB__(v31--, 1LL))
      {
        if (v16)
        {
          __int16 v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v30);
        }

        else
        {
          if ((v31 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }

          if (v31 >= *(void *)(v49 + 16)) {
            goto LABEL_38;
          }
          __int16 v34 = *(id *)(v30 + 32 + 8 * v31);
        }

        uint64_t v35 = v34;
        (*(void (**)(void))((swift_isaMask & *v34) + 0x80LL))();
        __int16 v36 = v23((uint64_t *)v32, 1LL, v28);
        sub_1001603DC(v32, &qword_1003F9F28);

        if (v36 != 1)
        {
          id v37 = (void *)sub_100205330(v31, v30);
          uint64_t v28 = v52;
          goto LABEL_26;
        }

        if (!v31) {
          goto LABEL_24;
        }
      }

      goto LABEL_31;
    }
  }

  if (v21 < 0) {
    id v43 = v21;
  }
  else {
    id v43 = v21 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v43);
  id v51 = v18;
  if (!v22) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v18 = 4LL;
  while (1)
  {
    if ((v21 & 0xC000000000000001LL) != 0) {
      uint64_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v21);
    }
    else {
      uint64_t v23 = *(id *)(v21 + 8 * v18);
    }
    uint64_t v24 = v23;
    __int16 v25 = v18 - 3;
    if (__OFADD__(v18 - 4, 1LL))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    id v26 = *(void (**)(void))((swift_isaMask & *v23) + 0x68LL);
    v26();
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
    uint64_t v28 = v27(v13, 1LL, v54);
    sub_1001603DC((uint64_t)v13, &qword_1003F9F28);
    if (v28 != 1) {
      break;
    }

    ++v18;
    if (v25 == v22) {
      goto LABEL_10;
    }
  }

  uint64_t v31 = swift_bridgeObjectRelease_n(v21, 2LL);
  uint64_t v29 = v52;
  ((void (*)(uint64_t))v26)(v31);

  int v32 = v54;
  uint64_t v18 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v51, v29, v32);
  uint64_t v33 = v46(v47, v49);
  if ((unint64_t)v33 >> 62)
  {
LABEL_39:
    if (v33 < 0) {
      id v44 = v33;
    }
    else {
      id v44 = v33 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v44);
    __int16 v34 = (uint64_t)v50;
    if (v21) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v21 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    __int16 v34 = (uint64_t)v50;
    if (v21)
    {
LABEL_15:
      uint64_t v13 = (char *)(v33 & 0xC000000000000001LL);
      __int16 v52 = v33 & 0xFFFFFFFFFFFFFF8LL;
      __int16 v50 = (char *)(v33 + 32);
      while (!__OFSUB__(v21--, 1LL))
      {
        if (v13)
        {
          __int16 v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v33);
        }

        else
        {
          if (v21 < 0)
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }

          __int16 v36 = *(id *)&v50[8 * v21];
        }

        id v37 = v36;
        (*(void (**)(void))((swift_isaMask & *v36) + 0x80LL))();
        __int16 v38 = v27((char *)v34, 1LL, v32);
        sub_1001603DC(v34, &qword_1003F9F28);

        if (v38 != 1)
        {
          uint64_t v39 = (void *)sub_100205330(v21, v33);
          goto LABEL_26;
        }

        if (!v21) {
          goto LABEL_24;
        }
      }

      goto LABEL_31;
    }
  }

  swift_release(v10);
  uint64_t v49 = (*(uint64_t (**)(uint64_t))(v62 + 56))(v60);
  sub_100204D18(v49);
  id v51 = v50;
  swift_bridgeObjectRelease();
  if (!v51) {
    id v51 = sub_10016995C((uint64_t)_swiftEmptyArrayStorage);
  }
  __int16 v52 = swift_isUniquelyReferenced_nonNull_native(v63);
  aBlock[0] = *(void *)(v65 + 16);
  *(void *)(v65 + 16) = 0x8000000000000000LL;
  sub_100205388(v51, (uint64_t)sub_100205B6C, 0LL, v52, aBlock);
  *(void *)(v65 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(v62 + 40))(v60);
  uint64_t v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v54 = (*(uint64_t (**)(uint64_t))(v59 + 24))(v60);
  if (v54)
  {
    __int16 v55 = v54;
    uint64_t v56 = (void *)_convertErrorToNSError(_:)(v54);
    swift_errorRelease(v55);
  }

  else
  {
    uint64_t v56 = 0LL;
  }

  aBlock[4] = sub_100205BA4;
  id v69 = v65;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100169A74;
  aBlock[3] = &unk_1003A7698;
  __int16 v57 = _Block_copy(aBlock);
  __int16 v58 = v69;
  swift_retain(v65);
  swift_release(v58);
  MRAnalyticsSendEvent(v53, v56, v57);
  _Block_release(v57);
  swift_release(v65);
}

    id v63 = (v48 - 1) & v48;
    __int128 v65 = v49;
    uint64_t v31 = __clz(__rbit64(v48)) + (v49 << 6);
LABEL_17:
    __int16 v34 = *(void *)(v0 + 224);
    uint64_t v33 = *(void *)(v0 + 232);
    __int16 v36 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 216);
    __int16 v38 = *(void *)(v0 + 192);
    id v37 = *(void *)(v0 + 200);
    __int16 v57 = *(void *)(v0 + 184);
    __int128 v61 = *(void *)(v0 + 176);
    uint64_t v62 = *(void *)(v0 + 168);
    uint64_t v60 = *(void *)(v0 + 152);
    __int16 v58 = *(void *)(v0 + 160);
    __int16 v59 = *(void *)(v0 + 144);
    uint64_t v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
    v39(v33, v32[6] + *(void *)(v37 + 72) * v31, v38);
    __int16 v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32);
    v40(v34, v33, v38);
    v39(v35, v34, v38);
    uint64_t v41 = *(unsigned __int8 *)(v37 + 80);
    id v42 = (v41 + 24) & ~v41;
    id v43 = swift_allocObject(&unk_1003AA788, v42 + v36, v41 | 7);
    *(void *)(v43 + 16) = Strong;
    v40(v43 + v42, v35, v38);
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_1002366D4;
    *(void *)(v0 + 56) = v43;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_100157EA8;
    *(void *)(v0 + 40) = &unk_1003AA7A0;
    uint64_t v2 = _Block_copy((const void *)(v0 + 16));
    static DispatchQoS.unspecified.getter(Strong);
    *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
    id v44 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    id v45 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    id v46 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 96, v45, v46, v59, v44);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v58, v2);
    _Block_release(v2);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v57, v62);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v38);
    swift_release(*(void *)(v0 + 56));
    uint64_t v30 = v63;
    __int16 v25 = v65;
  }

  __int16 v50 = v25 + 4;
  if (v25 + 4 < v54)
  {
    uint64_t v48 = v53[v50];
    if (!v48)
    {
      while (1)
      {
        uint64_t v49 = v50 + 1;
        if (__OFADD__(v50, 1LL)) {
          goto LABEL_35;
        }
        if (v49 >= v54) {
          goto LABEL_33;
        }
        uint64_t v48 = v53[v49];
        ++v50;
        if (v48) {
          goto LABEL_32;
        }
      }
    }

    uint64_t v49 = v25 + 4;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

  sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingSourceSession);
  a4 = v42;
  sub_1001A81D4((uint64_t)v14, v42, type metadata accessor for HostedRoutingSourceSession);
  id v37 = 0LL;
LABEL_33:
  uint64_t v9 = v40;
  uint64_t v8 = v41;
LABEL_35:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v37, 1LL, v8);
  return swift_bridgeObjectRelease();
}

  v202 = 0LL;
  v203 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  v202 = 0x206567617373654DLL;
  v203 = 0xE800000000000000LL;
  v140 = sub_10022808C( &qword_1003FD408,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for IPCServerMessage,  (uint64_t)&protocol conformance descriptor for IPCServerMessage);
  v141._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v30, v140);
  String.append(_:)(v141);
  swift_bridgeObjectRelease();
  v142._countAndFlagsBits = 0x6E616820746F6E20LL;
  v142._object = (void *)0xED00002E64656C64LL;
  String.append(_:)(v142);
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v202,  v203,  "mediaremoted/MediaControlIPCServer.swift",  40LL,  2LL,  224LL,  0);
  __break(1u);
  return result;
}

void sub_100056490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100056550;
  block[3] = &unk_100398F40;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v8;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

id sub_100056550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(12LL, a2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v14 = 138543362;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlGroupSessionCoordinator] Started session: %{public}@.",  (uint8_t *)&v14,  0xCu);
  }

  [*(id *)(a1 + 32) addObserver:*(void *)(a1 + 40)];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  [*(id *)(a1 + 40) setHostedSessionIdentifier:v6];

  [*(id *)(a1 + 40) setStartingSession:0];
  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = _MRLogForCategory(12LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B5B74((uint64_t *)(a1 + 48), v9);
    }

    [*(id *)(a1 + 40) reevaluateAfterInterval:@"Failed to start group session" withReason:15.0];
  }

  if ([*(id *)(a1 + 32) state] == (id)4)
  {
    uint64_t v11 = _MRLogForCategory(12LL, v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1002B5B34(v12);
    }

    [*(id *)(a1 + 40) reevaluateAfterInterval:@"Fast invalidation after start group session" withReason:15.0];
  }

  return [*(id *)(a1 + 40) reevaluateSystemStateWithReason:@"Started group session"];
}

void sub_100056890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000568AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setThrottled:0];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[Delayed] %@",  *(void *)(a1 + 32)));
  [WeakRetained reevaluateSystemStateWithReason:v2];
}

void sub_1000569F8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) diagnosticDescription]);
  [*(id *)(a1 + 32) setGroupSessionCoordinatorState:v2];
}

void sub_100056ADC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hostedSessionIdentifier]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  if (v2 == v3)
  {

    goto LABEL_7;
  }

  unsigned int v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if ((v5 & 1) != 0)
  {
LABEL_7:
    if (*(void *)(a1 + 48) != 4LL) {
      return;
    }
    uint64_t v12 = _MRLogForCategory(12LL, v6);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlGroupSessionCoordinator] Hosted session invalidated.",  buf,  2u);
    }

    [*(id *)(a1 + 32) clearHostedSessionState];
    int v14 = *(void **)(a1 + 32);
    uint64_t v15 = @"Hosted session invalidated";
    double v16 = 15.0;
    goto LABEL_15;
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rotatingSessionIdentifier]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  if (v7 == v8)
  {

    goto LABEL_12;
  }

  id v9 = v8;
  unsigned __int8 v10 = [v7 isEqual:v8];

  if ((v10 & 1) != 0)
  {
LABEL_12:
    uint64_t v17 = _MRLogForCategory(12LL, v11);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint32_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlGroupSessionCoordinator] Completed session rotation.",  v19,  2u);
    }

    [*(id *)(a1 + 32) clearHostedSessionState];
    int v14 = *(void **)(a1 + 32);
    uint64_t v15 = @"Completed session rotation";
    double v16 = 1.0;
LABEL_15:
    [v14 reevaluateAfterInterval:v15 withReason:v16];
  }

void sub_100056D28(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hostedSessionIdentifier]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  if (v2 == v3)
  {
  }

  else
  {
    unsigned int v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0) {
      return;
    }
  }

  uint64_t v7 = _MRLogForCategory(12LL, v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlGroupSessionCoordinator] Rotating hosted session.",  v11,  2u);
  }

  [*(id *)(a1 + 32) clearHostedSessionState];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [*(id *)(a1 + 32) setRotatingSessionIdentifier:v9];

  unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionManager]);
  [v10 finishRemoteControlGroupSession:*(void *)(a1 + 40)];
}

id sub_100056ED4(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateSystemStateWithReason:@"Eligibility status changed"];
}

id sub_100056F7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateSystemStateWithReason:@"Cluster status changed"];
}

uint64_t sub_100057764(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100057774(uint64_t a1)
{
}

void sub_10005777C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100057878(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000579E4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(a1[4] + 48LL);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[6]));
  [v3 setObject:v2 forKey:v4];

  return [(id)a1[5] setDelegate:a1[4]];
}

void sub_100057B08(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 48LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[6]));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:v6]);
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  unsigned __int8 v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100057BDC(uint64_t a1)
{
  dispatch_queue_t v1 = *(void **)(*(void *)(a1 + 32) + 48LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  [v1 removeObjectForKey:v2];
}

void sub_100057CDC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [*(id *)(a1 + 40) uniqueIdentifier]));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48)));
  [v2 setObject:v4 forKey:v3];
}

void sub_100057E38(void *a1)
{
  id v2 = *(void **)(a1[4] + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[6]));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);
  id v5 = [v4 longLongValue];

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v6 = *(id *)(a1[4] + 8LL);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (objc_msgSend(v11, "uniqueIdentifier", (void)v12) == v5)
        {
          objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), v11);
          goto LABEL_11;
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

id sub_100058008(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
}

void sub_10005813C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100058158(uint64_t a1)
{
  dispatch_queue_t v1 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  [v1 addObject:v2];
}

void sub_1000581B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained && [WeakRetained voiceRecordingState] != (_DWORD)a3)
  {
    uint64_t v7 = _MRLogForCategory(0LL, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)MRVoiceRecordingStateCopyDescription(a3);
      int v11 = 138412546;
      __int128 v12 = v9;
      __int16 v13 = 2112;
      __int128 v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@",  (uint8_t *)&v11,  0x16u);
    }

    [v5 setVoiceRecordingState:a3];
    id v10 = [[MRSetRecordingStateMessage alloc] initWithRecordingState:a3];
    [v5 sendMessage:v10];
  }
}

void sub_10005846C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_100058498(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000585C4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

void sub_10005865C(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v14 + 1) + 8LL * (void)i);
        uint64_t Token = MRLyricsEventGetToken(*(void *)(a1 + 40));
        uint64_t Identifier = MRLyricsItemTokenGetIdentifier(Token);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(Identifier);
        uint64_t v11 = MRLyricsEventGetToken(v7);
        uint64_t v12 = MRLyricsItemTokenGetIdentifier(v11);
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if (objc_msgSend(v13, "isEqualToString:", v10, (void)v14))
        {
          [*(id *)(*(void *)(a1 + 32) + 64) removeObject:v7];

          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

void sub_100058950( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_100058978(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
}

uint64_t sub_100058A28(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 44);
  if (v1 == 234)
  {
    int v2 = *(unsigned __int8 *)(result + 48);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 84LL;
  }

  else
  {
    if (v1 != 233) {
      return result;
    }
    int v2 = *(unsigned __int8 *)(result + 48);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 72LL;
  }

  uint64_t v5 = v3 + v4;
  if (v2)
  {
    uint64_t v6 = *(void *)(result + 40);
    *(_DWORD *)(v5 + _Block_object_dispose(va, 8) = *(_DWORD *)(result + 48);
    *(void *)uint64_t v5 = v6;
  }

  else
  {
    *(_DWORD *)(v5 + _Block_object_dispose(va, 8) = 0;
    *(void *)uint64_t v5 = 0LL;
  }

  return result;
}

void sub_100058B8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void *sub_100058BB0(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 72))
  {
    *(_BYTE *)(*(void *)(result[5] + 8LL) + 24LL) = 1;
    uint64_t v1 = result[4];
  }

  if (*(_DWORD *)(v1 + 84)) {
    *(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_100058CAC(void *a1)
{
  if (!*(void *)(a1[4] + 96LL))
  {
    int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void **)(v3 + 96);
    *(void *)(v3 + 96) = v2;
  }

  id v8 = [[MSVPair alloc] initWithFirst:a1[5] second:a1[6]];
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = *(void **)(a1[4] + 96LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 requestIdentifier]);
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_100058DFC(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);

  if (v4)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 96LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
    [v5 setObject:0 forKeyedSubscript:v6];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

void sub_100059058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_100059080(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 96) removeAllObjects];
}

void sub_100059174(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v10 = v3;
  if (v3)
  {
    uint64_t v5 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 origin]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
    uint64_t v9 = -[MRPlayerPath initWithOrigin:client:player:](v5, "initWithOrigin:client:player:", v6, v7, v8);
    (*(void (**)(uint64_t, MRPlayerPath *))(v4 + 16))(v4, v9);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
  }
}

void sub_100059308(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 origin]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000593C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connectOptions];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectUserInfo]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100059480;
  v8[3] = &unk_10039BC48;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v7 connectToExternalDeviceWithOptions:v4 userInfo:v5 completion:v8];
}

uint64_t sub_100059480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0LL, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_100059620(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setDestinationEndpoint:");
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_100059A74(_Unwind_Exception *a1)
{
}

uint64_t sub_100059CD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [a2 command]));
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

void sub_10005A194(_Unwind_Exception *a1)
{
}

void sub_10005A228(_Unwind_Exception *a1)
{
}

void sub_10005A288(_Unwind_Exception *a1)
{
}

void sub_10005A384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005A39C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned __int8 v3 = [v2 supportOutputContextSync];

  if ((v3 & 1) == 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = @"FF disabled";
    goto LABEL_9;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v9 = *(void **)(v8 + 40);
    id v10 = @"deviceInfo==nil";
LABEL_8:
    *(void *)(v8 + 40) = v10;

    uint64_t v6 = 0LL;
    goto LABEL_9;
  }

  if (([v4 supportsOutputContextSync] & 1) == 0)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v9 = *(void **)(v8 + 40);
    id v10 = @"endpoint does not support outputContextSync";
    goto LABEL_8;
  }

  uint64_t v6 = 1LL;
LABEL_9:

  return v6;
}

void sub_10005A6D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005A6EC(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  unsigned __int8 v3 = *(void **)(a1[4] + 48LL);
  v6[0] = _NSConcreteStackBlock;
  void v6[2] = sub_10005A768;
  v6[3] = &unk_10039BCE8;
  v6[1] = 3221225472LL;
  id v4 = v2;
  uint64_t v5 = a1[6];
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];
}

void *sub_10005A768(void *result, void *a2, uint64_t a3, _BYTE *a4)
{
  if (result[4] == a3)
  {
    uint64_t v5 = result;
    id result = [a2 shortValue];
    *(void *)(*(void *)(v5[5] + 8LL) + 24LL) = (int)result;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_10005ABE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005ABF0(uint64_t a1)
{
}

void sub_10005ABF8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) availableDistantEndpoints]);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "connectionType", (void)v17) == (id)1)
        {
          if (![*(id *)(a1 + 40) type])
          {
            uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
            id v15 = v8;
            __int128 v16 = *(void **)(v14 + 40);
            *(void *)(v14 + 40) = v15;
LABEL_16:

            goto LABEL_17;
          }
        }

        else
        {
          id v9 = *(void **)(*(void *)(a1 + 32) + 32LL);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueIdentifier]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v9 externalDeviceForEndpoint:v10]);

          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v16 externalDevice]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 customOrigin]);

          if (v12)
          {
            unsigned int v13 = [v12 identifier];
            if ([*(id *)(a1 + 40) identifier] == v13)
            {
              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v8);

              goto LABEL_16;
            }
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

LABEL_17:
}

  id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v14));
  -[MRDPersonalDeviceController setCurrentPersonalDeviceUIDs:](self, "setCurrentPersonalDeviceUIDs:", v26);

  v41[0] = @"kMRDPersonalDeviceControllerPersonalDeviceStateDateKey";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  v41[1] = @"kMRDPersonalDeviceControllerPersonalDeviceStateDevicesKey";
  v42[0] = v27;
  v42[1] = v14;
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v42,  v41,  2LL));
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v29 setPersonalDeviceState:v28];

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[MRDPersonalDeviceController currentPersonalDeviceUIDs](self, "currentPersonalDeviceUIDs"));
  uint64_t v31 = [v30 count];

  if (!v31)
  {
    -[MRDPersonalDeviceController setPersonalDeviceWasRecentlyAttached:]( self,  "setPersonalDeviceWasRecentlyAttached:",  0LL);
    int v32 = (void *)objc_claimAutoreleasedReturnValue(-[MRDPersonalDeviceController overrideTimer](self, "overrideTimer"));
    [v32 invalidate];
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[MRDPersonalDeviceController delegate](self, "delegate"));
  __int16 v34 = objc_opt_respondsToSelector(v33, "personalDeviceControllerStateDidChange:");

  if ((v34 & 1) != 0)
  {
    uint64_t v35 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[MRDPersonalDeviceController delegateQueue](self, "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100061474;
    block[3] = &unk_100399250;
    void block[4] = self;
    dispatch_async(v35, block);
  }
}
}

    uint64_t v8 = 1LL;
    goto LABEL_23;
  }

  if (v6 == 200470) {
    goto LABEL_17;
  }
  if (v6 == 1886609766) {
    goto LABEL_18;
  }
LABEL_20:
  id v9 = _MRLogForCategory(0LL, v7);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)__int16 v25 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "AirPlay Error: Unknown VADPortStatus: %d",  buf,  8u);
  }

  uint64_t v8 = 5LL;
LABEL_23:
  uint64_t v11 = _MRLogForCategory(0LL, v7);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:AVSystemController_RouteDescriptionKey_RouteName]);
    *(_DWORD *)__int128 buf = 67109378;
    *(_DWORD *)__int16 v25 = v6;
    *(_WORD *)&v25[4] = 2112;
    *(void *)&v25[6] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "VAD port status changed to %i for route %@",  buf,  0x12u);
  }

  id v15 = _MRLogForCategory(0LL, v14);
  __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:AVSystemController_RouteDescriptionKey_RouteName]);
    *(_DWORD *)__int128 buf = 134218242;
    *(void *)__int16 v25 = v8;
    *(_WORD *)&v25[8] = 2112;
    *(void *)&v25[10] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "MRMediaRemoteRouteStatus changed to %li for route %@",  buf,  0x16u);
  }

  __int128 v18 = -[MRDMediaServerAVRoute initWithDictionary:]( objc_alloc(&OBJC_CLASS___MRDMediaServerAVRoute),  "initWithDictionary:",  v4);
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  v8,  @"MRDAVRoutingDataSourceAVRouteUserInfoKey",  @"MRDAVRoutingDataSourceRouteStatusUserInfoKey",  v18));
  v23[1] = v19;
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  &v22,  2LL));

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v21 postNotificationName:@"MRDAVRoutingDataSourceRouteStatusDidChangeNotification" object:self userInfo:v20];
}

LABEL_18:
    __int128 v18 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
    uint64_t v21 = -[MRPlayerPath initWithOrigin:client:player:](v18, "initWithOrigin:client:player:", v19, v4, v20);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingClientForPlayerPath:v21]);

    uint64_t v23 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player]);
    uint64_t v24 = (void *)v23;
    if (*(_BYTE *)(a1 + 64) && !v23) {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[MRPlayer defaultPlayer](&OBJC_CLASS___MRPlayer, "defaultPlayer"));
    }
    uint64_t v39 = v4;
    if (v24) {
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v22 playerClientForPlayer:v24]);
    }
    else {
      __int16 v25 = 0LL;
    }
    id v26 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v22 client]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v25 player]);
    uint64_t v30 = -[MRPlayerPath initWithOrigin:client:player:](v26, "initWithOrigin:client:player:", v27, v28, v29);
    uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8LL);
    int v32 = *(void **)(v31 + 40);
    *(void *)(v31 + 40) = v30;

    __int16 v34 = _MRLogForCategory(0LL, v33);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      __int16 v36 = *(void *)(a1 + 32);
      id v37 = *(void *)(a1 + 48);
      __int16 v38 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v41 = v36;
      id v42 = 2114;
      id v43 = v38;
      id v44 = 2112;
      id v45 = v37;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "Resolving %{public}@ -> %{public}@ for client %@",  buf,  0x20u);
    }
  }
}

    goto LABEL_18;
  }

  *a4 = @"No media user state";
  uint64_t v22 = 1LL;
LABEL_18:

  return v22;
}

    -[MRDRouteRecommendationController signpostEndWillShowBanner:](self, "signpostEndWillShowBanner:", 0LL);
    goto LABEL_18;
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[MRDRouteRecommendationController validator](self, "validator"));
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_100147A58;
  v36[3] = &unk_1003A2D78;
  v36[4] = self;
  uint64_t v14 = v14;
  id v37 = v14;
  __int16 v38 = v7 != 0LL;
  [v31 bestRecommendationIn:v12 primaryBundleIdentifier:v14 eligibleToShowRecommendationsOutsideApp:v17 completion:v36];

LABEL_18:
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

    return;
  }

  uint64_t v21 = (void (**)(void *, void, uint64_t))v4;
  if (v4[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_10;
    }
    goto LABEL_103;
  }

  sub_100160874(a2, a3);
  id v26 = sub_100237070(a2, a3, (uint64_t)&type metadata for IdentityShareMessage, (uint64_t)&off_1003FBA50, (uint64_t)&v338);
  uint64_t v27 = v338;
  if (!v338)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v60, (uint64_t)qword_1003FF018);
    uint64_t v53 = v4;
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    __int16 v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      __int16 v57 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v56 = 138543362;
      v338 = (uint64_t *)v53;
      __int128 v61 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339, v56 + 4, v56 + 12);
      *__int16 v57 = v53;

      __int16 v59 = "[%{public}@] IdentityShare message payload is malformed.";
      goto LABEL_16;
    }

    goto LABEL_17;
  }

  uint64_t v28 = Participant.handle.getter(v26);
  uint64_t v30 = v29;
  v327 = v4;
  uint64_t v31 = &v4[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess( &v4[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  v337,  0LL,  0LL);
  int v32 = *v31;
  if (*(void *)(*v31 + 16LL))
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_10015CAD4(v28, v30);
    if ((v34 & 1) != 0)
    {
      uint64_t v35 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v33);
      id v37 = *v35;
      __int16 v36 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int16 v38 = [v27 identifier];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      id v42 = &v327[OBJC_IVAR___MRDFastSyncGroupSession_identities];
      swift_beginAccess(&v327[OBJC_IVAR___MRDFastSyncGroupSession_identities], v336, 0LL, 0LL);
      id v43 = *(void *)v42;
      if (*(void *)(v43 + 16))
      {
        swift_bridgeObjectRetain();
        id v44 = sub_10015CAD4(v39, v41);
        if ((v45 & 1) != 0)
        {
          id v46 = *(id *)(*(void *)(v43 + 56) + 8 * v44);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
          id v47 = v27;
          uint64_t v48 = v46;
          uint64_t v49 = static NSObject.== infix(_:_:)(v48);

          id v51 = v49 ^ 1u;
LABEL_44:
          v328 = v51;
LABEL_45:
          v106 = Participant.handle.getter(v50);
          v108 = v107;
          swift_beginAccess(v31, &v338, 33LL, 0LL);
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
          v334 = (void *)*v31;
          v110 = v36;
          void *v31 = 0x8000000000000000LL;
          sub_1001E3F10(v37, v36, v106, v108, isUniquelyReferenced_nonNull_native);
          void *v31 = v334;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(&v338);
          swift_bridgeObjectRetain();
          v111 = [v27 identifier];
          v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
          v114 = v113;

          v115 = v27;
          v116 = v327;
          v117 = &v327[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
          swift_beginAccess(&v327[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], &v338, 33LL, 0LL);
          v118 = swift_isUniquelyReferenced_nonNull_native(*(void *)v117);
          v334 = *(void **)v117;
          *(void *)v117 = 0x8000000000000000LL;
          v320 = v37;
          sub_1001E3F10(v112, v114, v37, v110, v118);
          *(void *)v117 = v334;
          v322 = v110;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(&v338);
          v119 = [v115 identifier];
          v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
          uint64_t v28 = v121;

          v122 = &v116[OBJC_IVAR___MRDFastSyncGroupSession_identities];
          swift_beginAccess(&v116[OBJC_IVAR___MRDFastSyncGroupSession_identities], &v338, 33LL, 0LL);
          v123 = v115;
          v124 = swift_isUniquelyReferenced_nonNull_native(*(void *)v122);
          v334 = *(void **)v122;
          *(void *)v122 = 0x8000000000000000LL;
          v329 = v123;
          sub_1001E431C((uint64_t)v123, v120, v28, v124, (uint64_t *)&unk_1003F9F68);
          *(void *)v122 = v334;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(&v338);
          v125 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
          v126 = *(void *)&v116[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
          if (v126)
          {
            v127 = *(uint64_t (**)(void))(*(void *)v126 + 200LL);
            v128 = swift_retain(*(void *)&v116[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager]);
            v129 = v127(v128);
            v130 = swift_release(v126);
            v131 = Participant.handle.getter(v130);
            v133 = v322;
            v134 = v320;
            if (!*(void *)(v129 + 16) || (v135 = sub_10015CAD4(v131, v132), (v136 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_59:
              v159 = *(char **)&v116[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
              if (!v159)
              {
                swift_bridgeObjectRelease();
                if (qword_1003FF010 != -1) {
                  swift_once(&qword_1003FF010, sub_1001B2258);
                }
                v182 = type metadata accessor for Logger(0LL);
                sub_10015ADAC(v182, (uint64_t)qword_1003FF018);
                v183 = v116;
                v184 = (os_log_s *)Logger.logObject.getter(v183);
                v185 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v184, v185))
                {
                  v186 = swift_slowAlloc(22LL, -1LL);
                  v187 = (char **)swift_slowAlloc(8LL, -1LL);
                  v330 = swift_slowAlloc(32LL, -1LL);
                  v338 = (uint64_t *)v330;
                  *(_DWORD *)v186 = 138543618;
                  v334 = v183;
                  v188 = v183;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v186 + 4, v186 + 12);
                  *v187 = v183;

                  *(_WORD *)(v186 + 12) = 2082;
                  v189 = *(void *)&v188[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
                  v190 = *(void *)&v188[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
                  swift_bridgeObjectRetain();
                  v334 = (void *)sub_10015ADC4(v189, v190, (uint64_t *)&v338);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v186 + 14, v186 + 22);

                  swift_bridgeObjectRelease();
                  _os_log_impl( (void *)&_mh_execute_header,  v184,  v185,  "[%{public}@]<%{public}s> No messenger to respond to identity share.",  (uint8_t *)v186,  0x16u);
                  v191 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                  swift_arrayDestroy(v187, 1LL, v191);
                  swift_slowDealloc(v187, -1LL, -1LL);
                  v192 = v330;
                  swift_arrayDestroy(v330, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v192, -1LL, -1LL);
                  swift_slowDealloc(v186, -1LL, -1LL);

                  return;
                }

                goto LABEL_69;
              }

              v160 = (uint64_t *)&v116[OBJC_IVAR___MRDFastSyncGroupSession_guests];
              swift_beginAccess(&v116[OBJC_IVAR___MRDFastSyncGroupSession_guests], &v334, 0LL, 0LL);
              v161 = *v160;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v327 = v159;
              swift_retain(v159);
              uint64_t v28 = sub_100158DD4(v134, v133, v161);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v329 = v329;
              sub_100237734();
              if (*(void *)&v116[OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier + 8])
              {
                v166 = v162;
                v167 = v163;
                v168 = v164;
                v169 = v165;
                v170 = *(void **)&v116[OBJC_IVAR___MRDFastSyncGroupSession_localIdentity];
                swift_bridgeObjectRetain();
                v171 = v170;
                sub_100237734();
                sub_100237F20(v166, v167, v168, v169 & 0x10101, v173, v174, v175, v172 & 0x10101, (uint64_t)&v338);
                v176 = sub_10023819C();
                sub_1001EEA28((uint64_t)&v338);
                v177 = v176;
                v178 = (uint64_t)v323;
                static Participants.only(_:)(v330);
                v179 = swift_allocObject(&unk_1003A5DD0, 24LL, 7LL);
                *(void *)(v179 + 16) = v116;
                v180 = v116;
                v181 = v327;
                sub_1001D73BC(2u, v176, v178, (uint64_t)v327, (uint64_t)sub_1001EEA70, v179);

                swift_release(v179);
                (*(void (**)(uint64_t, uint64_t))(v324 + 8))(v178, v325);
                if ((v328 & 1) != 0) {
                  sub_1001CC604(1);
                }
                swift_release(v181);

LABEL_69:
                return;
              }

              goto LABEL_113;
            }

            v137 = *(void **)(*(void *)(v129 + 56) + 8 * v135);
            swift_retain(v137);
            swift_bridgeObjectRelease();
            v138 = swift_bridgeObjectRelease();
            v139 = (*(uint64_t (**)(uint64_t))(*v137 + 168LL))(v138);
            if ((sub_10023E6D4(v139, 2u) & 1) == 0
              || (v140 = (*(uint64_t (**)(void))(*v137 + 144LL))(), !sub_10023E6C4(v140 & 1, 1)))
            {
              swift_release(v137);
LABEL_58:
              v116 = v327;
              goto LABEL_59;
            }

            v141 = *(void *)&v327[v125];
            if (!v141)
            {
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
              goto LABEL_121;
            }

            v142 = v137[2];
            v143 = v137[3];
            v144 = *(void (**)(void, void, void))(*(void *)v141 + 368LL);
            swift_retain(*(void *)&v327[v125]);
            swift_bridgeObjectRetain();
            v144(0LL, v142, v143);
            swift_release(v141);
            swift_bridgeObjectRelease();
            v219 = v327;
            v220 = (uint64_t *)&v327[OBJC_IVAR___MRDFastSyncGroupSession_expectedRealtimeParticipants];
            swift_beginAccess(&v327[OBJC_IVAR___MRDFastSyncGroupSession_expectedRealtimeParticipants], v333, 0LL, 0LL);
            v221 = *v220;
            v222 = v137[2];
            v223 = v137[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v224 = sub_100158DD4(v222, v223, v221);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v224 & 1) == 0)
            {
              swift_release(v137);
              v328 = 1LL;
              v133 = v322;
              v116 = v219;
              goto LABEL_59;
            }

            v225 = v137[2];
            v226 = v137[3];
            swift_beginAccess(v220, &v338, 33LL, 0LL);
            swift_bridgeObjectRetain();
            sub_10015CCDC(v225, v226);
            swift_endAccess(&v338);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v227 = *(void *)&v219[OBJC_IVAR___MRDFastSyncGroupSession_provider];
            v228 = swift_retain(v227);
            v229 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v228);
            v230 = swift_release(v227);
            v231 = NearbyGroup.members.getter(v230);
            swift_release(v229);
            swift_retain(v137);
            v232 = v316;
            sub_1001B95E0( v231,  (uint64_t)v137,  (uint64_t (*)(void))&type metadata accessor for NearbyGroup.Member,  (uint64_t (*)(uint64_t))&NearbyGroup.Member.handle.getter,  v316);
            swift_bridgeObjectRelease();
            v233 = type metadata accessor for NearbyGroup.Member(0LL);
            v234 = *(void *)(v233 - 8);
            v235 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1LL, v233);
            if ((_DWORD)v235 == 1)
            {
              sub_1001603DC((uint64_t)v232, &qword_1003F9A90);
            }

            else
            {
              v326 = (uint64_t *)NearbyGroup.Member.tokenDestination.getter(v235);
              v237 = v236;
              (*(void (**)(char *, uint64_t))(v234 + 8))(v232, v233);
              if (v237)
              {
LABEL_91:
                if (qword_1003FF010 != -1) {
                  swift_once(&qword_1003FF010, sub_1001B2258);
                }
                v238 = type metadata accessor for Logger(0LL);
                sub_10015ADAC(v238, (uint64_t)qword_1003FF018);
                v239 = v327;
                swift_retain_n(v137, 2LL);
                swift_bridgeObjectRetain_n(v237, 2LL);
                v240 = v239;
                v241 = (os_log_s *)Logger.logObject.getter(v240);
                v242 = static os_log_type_t.info.getter();
                v243 = v242;
                v321 = v241;
                v244 = os_log_type_enabled(v241, v242);
                v328 = (uint64_t)v240;
                v315 = 0LL;
                v316 = v237;
                if (v244)
                {
                  v245 = swift_slowAlloc(32LL, -1LL);
                  v246 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
                  v313 = v246;
                  v314 = swift_slowAlloc(64LL, -1LL);
                  v338 = (uint64_t *)v314;
                  *(_DWORD *)v245 = 138543874;
                  v334 = v240;
                  v247 = (id)v328;
                  LODWORD(v312) = v243;
                  v248 = v137;
                  v249 = v247;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v245 + 4, v245 + 12);
                  *v246 = v328;

                  *(_WORD *)(v245 + 12) = 2082;
                  v250 = v248[2];
                  v251 = v248[3];
                  swift_bridgeObjectRetain();
                  v334 = (void *)sub_10015ADC4(v250, v251, (uint64_t *)&v338);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v245 + 14, v245 + 22);
                  v252 = v248;
                  swift_release_n(v248, 2LL);
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v245 + 22) = 2082;
                  swift_bridgeObjectRetain();
                  v334 = (void *)sub_10015ADC4((uint64_t)v326, (unint64_t)v237, (uint64_t *)&v338);
                  v240 = (char *)v328;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v245 + 24, v245 + 32);
                  swift_bridgeObjectRelease_n(v237, 3LL);
                  v253 = v321;
                  _os_log_impl( (void *)&_mh_execute_header,  v321,  (os_log_type_t)v312,  "[%{public}@] Send transportMigrationReply push to: %{public}s, dst: %{public}s.",  (uint8_t *)v245,  0x20u);
                  v254 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                  v255 = v313;
                  swift_arrayDestroy(v313, 1LL, v254);
                  swift_slowDealloc(v255, -1LL, -1LL);
                  v256 = v314;
                  swift_arrayDestroy(v314, 2LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v256, -1LL, -1LL);
                  swift_slowDealloc(v245, -1LL, -1LL);
                }

                else
                {

                  swift_bridgeObjectRelease_n(v237, 2LL);
                  v252 = v137;
                  swift_release_n(v137, 2LL);
                }

                v257 = *(void **)&v240[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
                if (!v257) {
                  goto LABEL_120;
                }
                v258 = sub_100156B68((uint64_t *)&unk_1003F9AA0);
                inited = swift_initStackObject(v258, &v332);
                *(_OWORD *)(inited + 16) = xmmword_10034C930;
                v321 = v257;
                v260 = sub_1002368B0();
                v262 = *(void *)v260;
                v261 = *((void *)v260 + 1);
                v338 = (uint64_t *)v262;
                v339[0] = v261;
                v314 = v261;
                swift_bridgeObjectRetain_n(v261, 2LL);
                AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v263 = (uint64_t *)sub_100236910();
                v265 = *v263;
                v264 = v263[1];
                *(void *)(inited + 96) = &type metadata for String;
                *(void *)(inited + 72) = v265;
                *(void *)(inited + 80) = v264;
                swift_bridgeObjectRetain();
                v266 = sub_1002368C8();
                v268 = *(void *)v266;
                v267 = (uint64_t *)*((void *)v266 + 1);
                v338 = (uint64_t *)v268;
                v339[0] = v267;
                v313 = v267;
                swift_bridgeObjectRetain_n(v267, 2LL);
                AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v269 = *v263;
                v270 = v263[1];
                v271 = swift_bridgeObjectRetain();
                v272 = v317;
                static String.Encoding.utf8.getter(v271);
                v273 = String.data(using:allowLossyConversion:)(v272, 0LL, v269, v270);
                v275 = v274;
                swift_bridgeObjectRelease();
                ((void (*)(char *, uint64_t))v318[1])(v272, v319);
                if (v275 >> 60 == 15)
                {
LABEL_121:
                  __break(1u);
                  goto LABEL_122;
                }

                *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Data;
                *(void *)(inited + 144) = v273;
                *(void *)(inited + 152) = v275;
                v276 = sub_1002368D4();
                v278 = *(void *)v276;
                v277 = *((void *)v276 + 1);
                v338 = (uint64_t *)v278;
                v339[0] = v277;
                v319 = v277;
                swift_bridgeObjectRetain_n(v277, 2LL);
                v279 = AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v280 = v252;
                v281 = (*(uint64_t (**)(uint64_t))(*v252 + 216LL))(v279);
                *(void *)(inited + 240) = &type metadata for Int;
                *(void *)(inited + 216) = v281;
                v282 = (uint64_t *)sub_1002368E0();
                v283 = v282[1];
                v338 = (uint64_t *)*v282;
                v339[0] = v283;
                swift_bridgeObjectRetain_n(v283, 2LL);
                AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v284 = v328;
                v286 = *(void *)(v328 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
                v285 = *(void *)(v328 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8);
                *(void *)(inited + 312) = &type metadata for String;
                *(void *)(inited + 28_Block_object_dispose(va, 8) = v286;
                *(void *)(inited + 296) = v285;
                swift_bridgeObjectRetain();
                v287 = (uint64_t *)sub_1002368BC();
                v288 = v287[1];
                v338 = (uint64_t *)*v287;
                v339[0] = v288;
                swift_bridgeObjectRetain_n(v288, 2LL);
                AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v290 = v280[2];
                v289 = v280[3];
                v318 = v280;
                *(void *)(inited + 384) = &type metadata for String;
                *(void *)(inited + 360) = v290;
                *(void *)(inited + 36_Block_object_dispose(va, 8) = v289;
                swift_bridgeObjectRetain();
                v291 = (uint64_t *)sub_1002368A4();
                v292 = v291[1];
                v338 = (uint64_t *)*v291;
                v339[0] = v292;
                swift_bridgeObjectRetain_n(v292, 2LL);
                AnyHashable.init<A>(_:)(&v338, &type metadata for String, &protocol witness table for String);
                v293 = (uint64_t *)(v284 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle);
                v294 = *(void *)(v284 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8);
                if (!v294)
                {
LABEL_122:
                  __break(1u);
                  goto LABEL_123;
                }

                v295 = *v293;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                *(void *)(inited + 456) = &type metadata for String;
                *(void *)(inited + 432) = v295;
                *(void *)(inited + 440) = v294;
                sub_100159DBC(inited);
                isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                v297 = sub_100156B68(&qword_1003F8620);
                v298 = swift_initStackObject(v297, &v331);
                *(_OWORD *)(v298 + 16) = xmmword_10034BE40;
                *(void *)(v298 + 32) = v326;
                *(void *)(v298 + 40) = v316;
                sub_1001EA538(v298);
                swift_setDeallocating(v298);
                swift_arrayDestroy(v298 + 32, 1LL, &type metadata for String);
                v299 = Set._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                v300 = v321;
                -[os_log_s sendMessage:toDestinations:](v321, "sendMessage:toDestinations:", isa, v299);

                v301 = *(void *)&v327[v125];
                if (!v301)
                {
LABEL_123:
                  __break(1u);
                  goto LABEL_124;
                }

                v302 = v318;
                v303 = v318[2];
                v304 = v318[3];
                v305 = *(void (**)(void, void, void))(*(void *)v301 + 392LL);
                swift_retain(*(void *)&v327[v125]);
                swift_bridgeObjectRetain();
                v306 = v303;
                v155 = (uint64_t)v315;
                v305(0LL, v306, v304);
                v134 = v320;
                v133 = v322;
                if (v155)
                {
                  swift_release(v301);
                  swift_bridgeObjectRelease();
                  if (qword_1003FF010 != -1) {
                    swift_once(&qword_1003FF010, sub_1001B2258);
                  }
                  v145 = type metadata accessor for Logger(0LL);
                  sub_10015ADAC(v145, (uint64_t)qword_1003FF018);
                  v146 = v327;
                  swift_bridgeObjectRetain_n(v133, 2LL);
                  v147 = v146;
                  v148 = (os_log_s *)Logger.logObject.getter(v147);
                  v149 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v148, v149))
                  {
                    v150 = swift_slowAlloc(22LL, -1LL);
                    v321 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
                    v326 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
                    v338 = v326;
                    *(_DWORD *)v150 = 138543618;
                    v334 = v147;
                    v151 = v147;
                    v328 = v155;
                    v152 = v151;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v150 + 4, v150 + 12);
                    v153 = v321;
                    *(void *)v321 = v147;

                    *(_WORD *)(v150 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    v154 = v320;
                    v334 = (void *)sub_10015ADC4(v320, v322, (uint64_t *)&v338);
                    v155 = v328;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v150 + 14, v150 + 22);
                    swift_bridgeObjectRelease_n(v322, 3LL);
                    _os_log_impl( (void *)&_mh_execute_header,  v148,  v149,  "[%{public}@] realtime transition failure for: %{public}s. Resolve by removing participant.",  (uint8_t *)v150,  0x16u);
                    v156 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
                    swift_arrayDestroy(v153, 1LL, v156);
                    swift_slowDealloc(v153, -1LL, -1LL);
                    v157 = (uint64_t)v326;
                    swift_arrayDestroy(v326, 1LL, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v157, -1LL, -1LL);
                    v158 = v150;
                    v133 = v322;
                    swift_slowDealloc(v158, -1LL, -1LL);
                  }

                  else
                  {

                    swift_bridgeObjectRelease_n(v133, 2LL);
                    v154 = v320;
                  }

                  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *(void *)v147) + 0x538LL))(v154, v133);
                  swift_release(v302);
                  swift_errorRelease(v155);
                  v328 = 1LL;
                  v134 = v154;
                }

                else
                {
                  swift_release(v301);
                  swift_release(v302);
                  swift_bridgeObjectRelease();
                  v328 = 1LL;
                }

                goto LABEL_58;
              }
            }

            v237 = (char *)v137[3];
            v326 = (uint64_t *)v137[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            goto LABEL_91;
          }

          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }

        swift_bridgeObjectRelease();
      }

      __int16 v50 = swift_bridgeObjectRelease();
      id v51 = 1LL;
      goto LABEL_44;
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  v315 = v31;
  id v63 = &v327[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  swift_beginAccess(&v327[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers], v336, 0LL, 0LL);
  if (!*(void *)v63) {
    goto LABEL_112;
  }
  if (!*(void *)(*(void *)v63 + 16LL)
    || (uint64_t v28 = v27,
        swift_bridgeObjectRetain(),
        sub_1001E1270(v28),
        __int128 v66 = v65,
        (id)v28,
        __int128 v64 = swift_bridgeObjectRelease(),
        (v66 & 1) == 0))
  {
LABEL_29:
    __int16 v76 = UUID.init()(v64);
    v320 = UUID.uuidString.getter(v76);
    v78 = v77;
    v321 = *(os_log_s **)(v322 + 8);
    ((void (*)(char *, uint64_t *))v321)(v14, v326);
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v79 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v79, (uint64_t)qword_1003FF018);
    v80 = v328;
    v81 = v329;
    (*(void (**)(char *))(v328 + 16))(v18);
    int8x16_t v82 = v327;
    swift_bridgeObjectRetain_n(v78, 2LL);
    v83 = v82;
    v84 = v78;
    v85 = v83;
    id v86 = (os_log_s *)Logger.logObject.getter(v83);
    v87 = static os_log_type_t.default.getter();
    LODWORD(v314) = v87;
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = swift_slowAlloc(32LL, -1LL);
      v313 = v27;
      v89 = v88;
      uint64_t v90 = (char **)swift_slowAlloc(8LL, -1LL);
      v310 = v90;
      v312 = swift_slowAlloc(64LL, -1LL);
      v338 = (uint64_t *)v312;
      *(_DWORD *)v89 = 138543874;
      v311 = v86;
      v334 = v85;
      v322 = v84;
      unsigned __int8 v91 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v89 + 4, v89 + 12);
      *uint64_t v90 = v85;

      *(_WORD *)(v89 + 12) = 2082;
      v93 = Participant.id.getter(v92);
      v94 = UUID.uuidString.getter(v93);
      id v96 = v95;
      ((void (*)(char *, uint64_t *))v321)(v14, v326);
      v334 = (void *)sub_10015ADC4(v94, v96, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t *))(v328 + 8))(v18, v329);
      *(_WORD *)(v89 + 22) = 2082;
      __int16 v36 = v322;
      swift_bridgeObjectRetain();
      id v37 = v320;
      v334 = (void *)sub_10015ADC4(v320, v36, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v89 + 24, v89 + 32);
      swift_bridgeObjectRelease_n(v36, 3LL);
      v97 = v311;
      _os_log_impl( (void *)&_mh_execute_header,  v311,  (os_log_type_t)v314,  "[%{public}@] Mapping fast sync participant: %{public}s to identifier %{public}s.",  (uint8_t *)v89,  0x20u);
      v98 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      v99 = v310;
      swift_arrayDestroy(v310, 1LL, v98);
      swift_slowDealloc(v99, -1LL, -1LL);
      id v100 = v312;
      swift_arrayDestroy(v312, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1LL, -1LL);
      v101 = v89;
      uint64_t v27 = v313;
      swift_slowDealloc(v101, -1LL, -1LL);

      v328 = 1LL;
    }

    else
    {

      (*(void (**)(char *, uint64_t *))(v80 + 8))(v18, v81);
      __int16 v50 = swift_bridgeObjectRelease_n(v84, 2LL);
      v328 = 1LL;
      id v37 = v320;
      __int16 v36 = v84;
    }

    uint64_t v31 = v315;
    goto LABEL_45;
  }

  swift_beginAccess(v63, &v338, 33LL, 0LL);
  __int128 v67 = *(void *)v63;
  if (!*(void *)v63)
  {
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }

  id v68 = (id)v28;
  __int16 v36 = swift_isUniquelyReferenced_nonNull_native(v67);
  v334 = *(void **)v63;
  id v69 = (uint64_t)v334;
  *(void *)id v63 = 0x8000000000000000LL;
  __int128 v18 = (char *)v68;
  id v71 = sub_1001E1270((uint64_t)v18);
  int8x16_t v72 = *(void *)(v69 + 16);
  v73 = (v70 & 1) == 0;
  __int128 v64 = v72 + v73;
  if (__OFADD__(v72, v73))
  {
    __break(1u);
    goto LABEL_105;
  }

  uint64_t v28 = v70;
  if (*(void *)(v69 + 24) >= v64)
  {
    __int128 v66 = v330;
    id v75 = v327;
    if ((v36 & 1) == 0) {
      goto LABEL_109;
    }
    if ((v70 & 1) == 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

  if (qword_1003FF010 != -1) {
LABEL_23:
  }
    swift_once(&qword_1003FF010, sub_1001B2258);
  __int16 v55 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v55, (uint64_t)qword_1003FF018);
  uint64_t v56 = v5;
  __int16 v57 = (os_log_s *)Logger.logObject.getter(v56);
  __int16 v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    __int16 v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v60 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)__int16 v59 = 138543362;
    uint64_t v88 = v56;
    __int128 v61 = v56;
    v79 = v8;
    uint64_t v62 = a4;
    id v63 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v59 + 4, v59 + 12);
    *uint64_t v60 = v56;

    a4 = v62;
    uint64_t v8 = v79;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "[%{public}@] Received remote control message from unmapped participant. Kicking.",  v59,  0xCu);
    __int128 v64 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v60, 1LL, v64);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  else
  {

    __int16 v57 = (os_log_s *)v56;
  }

  __int128 v66 = v80;
  __int128 v65 = v81;
  id v68 = (uint64_t)v82;
  __int128 v67 = v83;

  uint64_t v70 = *(void *)((char *)v56 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
  id v69 = *(void *)((char *)v56 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8);
  id v71 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56LL))(v68, 1LL, 1LL, v71);
  int8x16_t v72 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v72 + 16, v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v67, a4, v8);
  v73 = *(unsigned __int8 *)(v66 + 80);
  __int16 v74 = (v73 + 40) & ~v73;
  id v75 = (v65 + v74 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  __int16 v76 = (char *)swift_allocObject(&unk_1003A5D08, v75 + 16, v73 | 7);
  *((void *)v76 + 2) = 0LL;
  *((void *)v76 + 3) = 0LL;
  *((void *)v76 + 4) = v72;
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v76[v74], v67, v8);
  v77 = &v76[v75];
  *(void *)v77 = v70;
  *((void *)v77 + 1) = v69;
  swift_bridgeObjectRetain();
  v78 = sub_10015AA50(v68, (uint64_t)&unk_1003FA028, (uint64_t)v76);
  return swift_release(v78);
}

      swift_unknownObjectRelease(v12);
      uint64_t v1 = v43;
      id v5 = v45;
      if (v9 == v45) {
        return;
      }
    }
  }

  id v26 = 0LL;
  id v42 = v1 + 32;
  id v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v44)
  {
    uint64_t v27 = v4[5];
    uint64_t v28 = *(id *)(v42 + 8 * v26);
    uint64_t v29 = NSObject._rawHashValue(seed:)(v27);
    uint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v31 = v29 & ~v30;
    int v32 = v31 >> 6;
    uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
    __int16 v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
      uint64_t v35 = *(id *)(v4[6] + 8 * v31);
      __int16 v36 = static NSObject.== infix(_:_:)(v35);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      id v37 = ~v30;
      while (1)
      {
        uint64_t v31 = (v31 + 1) & v37;
        int v32 = v31 >> 6;
        uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
        __int16 v34 = 1LL << v31;
        if ((v33 & (1LL << v31)) == 0) {
          break;
        }
        __int16 v38 = *(id *)(v4[6] + 8 * v31);
        uint64_t v39 = static NSObject.== infix(_:_:)(v38);

        if ((v39 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    __int16 v40 = v4[2];
    uint64_t v11 = __OFADD__(v40, 1LL);
    uint64_t v41 = v40 + 1;
    if (v11) {
      goto LABEL_44;
    }
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45) {
      return;
    }
  }

  uint64_t v6 = *a1;
  id v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 0xB;
  uint64_t v8 = v6 - 11;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  id v7 = v6 >= 2;
  uint64_t v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      id v3 = sub_1001E1164(0LL, v3[2] + 1LL, 1, v3);
    }
    unsigned int v13 = v3[2];
    uint64_t v12 = v3[3];
    if (v13 >= v12 >> 1) {
      id v3 = sub_1001E1164((void *)(v12 > 1), v13 + 1, 1, v3);
    }
    v3[2] = v13 + 1;
    uint64_t v14 = (char *)&v3[2 * v13];
    strcpy(v14 + 32, ".remoteControl");
    v14[47] = -18;
  }

  id v15 = sub_100156B68(&qword_1003FA010);
  __int128 v16 = sub_100200720();
  __int128 v17 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v15, v16);
  __int128 v19 = v18;
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = 93LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  return 91LL;
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 7;
  uint64_t v8 = v6 - 7;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 4;
  uint64_t v8 = v6 - 4;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

void sub_10005AEA4(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) availableEndpoints]);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "containsOutputDeviceWithUID:", a1[5], (void)v9))
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v8);
          goto LABEL_11;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

id sub_10005B048(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_10005B110(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

void sub_10005B198(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) allObjects]);
  [*(id *)(a1 + 32) setHostedDiscoverySessions:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) availableDistantEndpoints]);
  [*(id *)(a1 + 32) setEndpoints:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) availableExternalDevices]);
  [*(id *)(a1 + 32) setHostedExternalDevices:v4];

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) debugDescription]);
  [*(id *)(a1 + 32) setDiscoverySession:v5];
}

uint64_t sub_10005B3A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005B3B0(uint64_t a1)
{
}

void sub_10005B3B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 64),  *(void *)(a1 + 56)));
  id v4 = v2;
  if (v2)
  {
    if ([v2 isPrimaryLocalDevice]
      && (id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings")),
          unsigned int v6 = [v5 supportMultiplayerHost],
          v5,
          v6))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[MRDAVOutputContextManager sharedManager]( &OBJC_CLASS___MRDAVOutputContextManager,  "sharedManager"));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
      __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 outputContextForOutputDevice:v8]);

      __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 contextID]);
      uint64_t v11 = 6LL;
    }

    else if ([v4 supportsMultiplayer])
    {
      __int128 v10 = 0LL;
      uint64_t v11 = 5LL;
    }

    else if ([v4 isRemoteControllable])
    {
      __int128 v10 = 0LL;
      uint64_t v11 = 2LL;
    }

    else
    {
      __int128 v10 = 0LL;
      else {
        uint64_t v11 = 2LL;
      }
    }

    id v15 = -[MRConcreteEndpoint initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:]( objc_alloc(&OBJC_CLASS___MRConcreteEndpoint),  "initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:",  v4,  *(void *)(a1 + 40),  v10,  v11);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    __int128 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  0));
    __int128 v18 = objc_alloc(&OBJC_CLASS___MRAVDistantEndpoint);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) descriptor]);
    __int128 v19 = -[MRAVDistantEndpoint initWithDescriptor:](v18, "initWithDescriptor:", v13);
    [v14 hostedExternalDeviceEndpointDidChange:v19];

    goto LABEL_15;
  }

  uint64_t v12 = MRLogCategoryDiscovery(0LL, v3);
  __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) valueForKey:@"uid"]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "componentsJoinedByString:", @", "));
    int v20 = 138543362;
    uint64_t v21 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to make endpoint due to no qualified group leader in devices: %{public}@",  (uint8_t *)&v20,  0xCu);
LABEL_15:
  }
}

uint64_t sub_10005BFDC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned __int8 v3 = [v2 supportMultiplayerHost];

  if ((v3 & 1) != 0) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 40)) {
    return 1LL;
  }
  return [*(id *)(*(void *)(a1 + 32) + 72) groupContainsDiscoverableGroupLeader] ^ 1;
}

id sub_10005C058(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return -[MRDAVHostedRoutingControllerGroup distantEndpoint](a2, "distantEndpoint");
}

id sub_10005C060(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return -[MRDAVHostedRoutingControllerGroup distantEndpoint](a2, "distantEndpoint");
}

id sub_10005C068(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return -[MRDAVHostedRoutingControllerGroup concreteEndpoint](a2, "concreteEndpoint");
}

void sub_10005C070(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "hostedRoutingController:availableEndpointsDidChange:") & 1) != 0) {
          objc_msgSend( v7,  "hostedRoutingController:availableEndpointsDidChange:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v10);
        }
        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = objc_msgSend(*(id *)(a1 + 56), "copy", (void)v10);
        [v7 hostedRoutingController:v8 endpointsDidChange:v9];
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

MRDAVHostedRoutingControllerGroup *sub_10005C238(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:",  v4,  *(void *)(a1 + 40),  0));
  unsigned int v6 = v5;
  if (v5)
  {
    if ([v5 isLocalDevice]
      && (id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings")),
          unsigned int v8 = [v7 supportMultiplayerHost],
          v7,
          v8))
    {
      id v9 = [(id)objc_opt_class(*(void *)(a1 + 32)) _expectedSuffixForNewEndpointWithGroupLeader:v6 outputDevices:v4];
      __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (!v11)
      {
        uint64_t v12 = MRLogCategoryDiscovery(0LL, v10);
        __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 v18 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Cannot computed expected groupID suffix (ie contextID) for localDevice, ignoring until next update",  v18,  2u);
        }

        __int128 v13 = 0LL;
LABEL_17:

        goto LABEL_18;
      }
    }

    else
    {
      __int128 v11 = 0LL;
    }

    id v14 = [v4 mutableCopy];
    if (([v6 supportsMultiplayer] & 1) == 0
      && [v6 isProxyGroupPlayer])
    {
      [v14 removeObject:v6];
    }

    id v15 = -[MRConcreteEndpoint initWithDesignatedGroupLeader:outputDevices:preferredSuffix:]( objc_alloc(&OBJC_CLASS___MRConcreteEndpoint),  "initWithDesignatedGroupLeader:outputDevices:preferredSuffix:",  v6,  v14,  v11);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:", v15, 0));
    if (v16) {
      __int128 v13 = -[MRDAVHostedRoutingControllerGroup initWithEndpoint:externalDevice:]( objc_alloc(&OBJC_CLASS___MRDAVHostedRoutingControllerGroup),  "initWithEndpoint:externalDevice:",  v15,  v16);
    }
    else {
      __int128 v13 = 0LL;
    }

    goto LABEL_17;
  }

  __int128 v13 = 0LL;
LABEL_18:

  return v13;
}

BOOL sub_10005C5C0(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVHostedRoutingControllerGroup concreteEndpoint](v2, "concreteEndpoint"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 designatedGroupLeader]);
  if ([v4 isPrimaryLocalDevice])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVHostedRoutingControllerGroup concreteEndpoint](v2, "concreteEndpoint"));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDevices]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "msv_firstWhere:", &stru_10039BE60));
    BOOL v8 = v7 != 0LL;
  }

  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

BOOL sub_10005C668(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

int64_t sub_10005C680( id a1, MRDAVHostedRoutingControllerGroup *a2, MRDAVHostedRoutingControllerGroup *a3)
{
  id v4 = a3;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVHostedRoutingControllerGroup concreteEndpoint](a2, "concreteEndpoint"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDevices]);

  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    int64_t v10 = 1LL;
LABEL_3:
    uint64_t v11 = 0LL;
    while (1)
    {
      if (*(void *)v21 != v9) {
        objc_enumerationMutation(v6);
      }
      if (v8 == (id)++v11)
      {
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVHostedRoutingControllerGroup concreteEndpoint](v4, "concreteEndpoint", 0LL));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v12 outputDevices]);

    int64_t v10 = (int64_t)[v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v10)
    {
      uint64_t v13 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0LL; i != v10; ++i)
        {
          if (*(void *)v17 != v13) {
            objc_enumerationMutation(v6);
          }
          if ([*(id *)(*((void *)&v16 + 1) + 8 * i) isPrimaryLocalDevice])
          {
            int64_t v10 = -1LL;
            goto LABEL_19;
          }
        }

        int64_t v10 = (int64_t)[v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
  }

BOOL sub_10005CAE8(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

BOOL sub_10005CBAC(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isPrimaryLocalDevice](a2, "isPrimaryLocalDevice");
}

id sub_10005CCEC(id a1, MRAVEndpoint *a2)
{
  return -[MRAVEndpoint uniqueIdentifier](a2, "uniqueIdentifier");
}

BOOL sub_10005CCF4(id a1, MRAVEndpoint *a2, MRAVEndpoint *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint outputDeviceUIDs](a2, "outputDeviceUIDs"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint outputDeviceUIDs](v4, "outputDeviceUIDs"));

  LOBYTE(v4) = [v5 isEqualToArray:v6] ^ 1;
  return (char)v4;
}

NSString *__cdecl sub_10005CD60(id a1, MRAVEndpoint *a2)
{
  return (NSString *)-[MRAVEndpoint description](a2, "description");
}

BOOL sub_10005D2DC(sqlite3_stmt *a1, int a2, id a3)
{
  id v5 = a3;
  unsigned int v6 = (const char *)[v5 UTF8String];
  int v7 = [v5 length];

  int v9 = sqlite3_bind_text(a1, a2, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v9)
  {
    uint64_t v10 = _MRLogForCategory(0LL, v8);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error binding statement to database query",  v13,  2u);
    }
  }

  return v9 == 0;
}

void sub_10005DEF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10005DF0C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v17 = (dispatch_queue_s *)WeakRetained[5];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10005E03C;
  v23[3] = &unk_10039BFC8;
  id v24 = v13;
  __int16 v25 = WeakRetained;
  id v26 = v11;
  id v27 = v12;
  id v28 = v14;
  id v29 = v15;
  id v18 = v15;
  id v19 = v14;
  id v20 = v12;
  id v21 = v11;
  id v22 = v13;
  dispatch_async(v17, v23);
}

id sub_10005E03C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:MRIDSServiceMessageTypeDiscovery]) {
    return _objc_msgSend( *(id *)(a1 + 40),  "_handleDiscoveryMessage:fromDevice:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v2,  v3);
  }
  id result = [*(id *)(a1 + 32) isEqualToString:MRIDSServiceMessageTypeConnectRemoteControl];
  if ((_DWORD)result) {
    return _[*(id *)(a1 + 40) _handleConnectRemoteControlMessage:*(void *)(a1 + 48) fromDevice:*(void *)(a1 + 56) destination:*(void *)(a1 + 64) session:*(void *)(a1 + 72)];
  }
  return result;
}

void sub_10005E22C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(9LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
    uint64_t v6 = *(void *)(a1 + 40);
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDIDSRemoteControlService] Removing DiscoveryChannel for client %@ with error %@",  (uint8_t *)&v10,  0x16u);
  }

  int v7 = *(void **)(*(void *)(a1 + 48) + 48LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceUID]);
  [v7 setObject:0 forKeyedSubscript:v9];
}

void sub_10005E3F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mode];
  [*(id *)(a1 + 40) setDiscoveryMode:v2];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  [*(id *)(a1 + 40) setConfiguration:v3];

  if ((_DWORD)v2)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
    [v6 setPriority:5];
    [v6 setWaking:1];
    id v4 = *(void **)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
    objc_msgSend(v4, "_onWorkerQueue_sendEndpoint:toClient:options:", v5, *(void *)(a1 + 40), v6);
  }

void sub_10005E684( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10005E6A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = (dispatch_queue_s *)WeakRetained[5];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E750;
  block[3] = &unk_100398F40;
  void block[4] = WeakRetained;
  id v8 = *(id *)(a1 + 32);
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10005E750(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 48) objectForKeyedSubscript:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
    [v3 disconnectWithError:a1[6]];

    [*(id *)(a1[4] + 48) setObject:0 forKeyedSubscript:a1[5]];
  }

void sub_10005EAB4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = [[MRPromptForRouteAuthorizationMessage alloc] initWithRoute:0 inputType:a3];
  id v8 = (void *)a1[4];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 protobufData]);
  uint64_t v10 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10005EBAC;
  v14[3] = &unk_10039C038;
  id v15 = v6;
  id v13 = v6;
  [v8 sendMessage:v9 type:v10 destination:v12 session:v11 options:0 priority:300 response:v14];
}

void sub_10005EBAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);
    uint64_t v10 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v5,  &v10));
    uint64_t v7 = v10;

    id v8 = 0LL;
    if (!v7)
    {
      uint64_t v9 = objc_opt_class(&OBJC_CLASS___MRPromptForRouteAuthorizationResponseMessage);
      if ((objc_opt_isKindOfClass(v6, v9) & 1) != 0) {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 response]);
      }
      else {
        id v8 = 0LL;
      }
    }
  }

  else
  {
    id v8 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005EC98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 protobufData]);
  [v4 replyWithData:v5 priority:300];
}

void sub_10005EED4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.MRDIDSRemoteControlService.discoveryChannelClientQueue", v4);
  id v3 = (void *)qword_1003FDCE8;
  qword_1003FDCE8 = (uint64_t)v2;
}

void sub_10005F2AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

void sub_10005F2E8(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained(a1 + 8);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10005F3D4;
    v7[3] = &unk_10039BFC8;
    void v7[4] = WeakRetained;
    id v8 = a1[4];
    id v9 = a1[5];
    id v10 = a1[6];
    id v11 = v3;
    id v12 = a1[7];
    dispatch_async(v6, v7);
  }
}

void sub_10005F3D4(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2 channelForDestination:*(void *)(a1 + 48) session:*(void *)(a1 + 56)]);

  if (v8)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) object]);
    id v4 = objc_alloc(&OBJC_CLASS___MRProtocolMessage);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v6 = [v4 initWithUnderlyingCodableMessage:0 error:v5];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 protobufData]);

    [*(id *)(a1 + 72) sendMessage:v7 type:MRIDSServiceMessageTypeDisconnectRemoteControl destination:*(void *)(a1 + 48) session:*(void *)(a1 + 56) options:0 priority:300];
  }
}

void sub_10005F5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 groupLeader]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 exportOutputDevice:v5 endpoint:v3]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destination]);
  LOBYTE(v5) = [v6 containsUID:v7];

  if ((v5 & 1) != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) destinationOutputDeviceUID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceWithUID:v8]);

    if (*(_BYTE *)(a1 + 72) && ([*(id *)(a1 + 40) isDestinationLocal] & 1) == 0)
    {
      id v10 = *(void **)(*(void *)(a1 + 48) + 8LL);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryID]);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10005F814;
      v27[3] = &unk_10039C0A8;
      id v29 = *(id *)(a1 + 64);
      id v28 = v9;
      [v10 addAuthorizationCallbackForRouteID:v11 requestCallback:v27];
    }

    id v12 = *(void **)(a1 + 40);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10005F82C;
    v21[3] = &unk_10039C0D0;
    char v26 = *(_BYTE *)(a1 + 72);
    id v13 = v12;
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = *(void **)(a1 + 56);
    id v22 = v13;
    uint64_t v23 = v14;
    id v24 = v9;
    id v25 = v15;
    id v16 = v9;
    [v13 requestConnectedDestinationEndpoint:v21];
  }

  else
  {
    __int128 v17 = objc_alloc(&OBJC_CLASS___NSError);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 debugName]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destination]);
    id v20 = -[NSError initWithMRError:format:]( v17,  "initWithMRError:format:",  118LL,  @"Tried to connect to endpoint but its groupLeader changed from %@ to %@",  v18,  v19);

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

uint64_t sub_10005F814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2,  a3);
}

void sub_10005F82C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (*(_BYTE *)(a1 + 64) && ([*(id *)(a1 + 32) isDestinationLocal] & 1) == 0)
  {
    id v6 = *(void **)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryID]);
    [v6 removeAuthorizationCallbackForRouteID:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10005FAA4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[MRPromptForRouteAuthorizationMessage alloc] initWithRoute:a1[4] inputType:a2];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRIDSCompanionConnection sharedManager](&OBJC_CLASS___MRIDSCompanionConnection, "sharedManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 protobufData]);
  uint64_t v9 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v11 = a1[5];
  uint64_t v10 = a1[6];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10005FBB4;
  v13[3] = &unk_10039C120;
  id v14 = v5;
  id v12 = v5;
  [v7 sendMessage:v8 type:v9 destination:v11 session:v10 options:0 priority:300 response:v13];
}

void sub_10005FBB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);
    uint64_t v10 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v5,  &v10));
    uint64_t v7 = v10;

    id v8 = 0LL;
    if (!v7)
    {
      uint64_t v9 = objc_opt_class(&OBJC_CLASS___MRPromptForRouteAuthorizationResponseMessage);
      if ((objc_opt_isKindOfClass(v6, v9) & 1) != 0) {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 response]);
      }
      else {
        id v8 = 0LL;
      }
    }
  }

  else
  {
    id v8 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000600EC(id a1, NSMutableDictionary *a2)
{
  return -[NSMutableDictionary allValues](a2, "allValues");
}

void sub_1000602AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000602C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000602D4(uint64_t a1)
{
}

void sub_1000602DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v9 = v4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v5 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  104LL,  @"New RemoteControlChannel created for destination %@, clearing all previous channels for this destination",  *(void *)(a1 + 32));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v4 = v9;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 transport]);
  [v8 closeWithError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_100060980(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(7LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1002B5688(a1, v4);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) displayMonitor]);
  unsigned __int8 v6 = [v5 displayOn];

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyDevices]);
    id v8 = [v7 count];

    if (v8)
    {
      uint64_t v10 = _MRLogForCategory(7LL, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[ProximityController] Removing all nearby devices because screen off.",  v18,  2u);
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyDevices]);
      [v12 removeAllObjects];
    }

    [*(id *)(a1 + 32) setHasTriggered:0];
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) displayMonitor]);
  unsigned __int8 v14 = [v13 lockScreenVisible];
  id v15 = *(void **)(a1 + 32);
  if ((v14 & 1) != 0)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 displayMonitor]);
    objc_msgSend(*(id *)(a1 + 32), "setShouldRun:", objc_msgSend(v16, "controlCenterVisible") ^ 1);
  }

  else
  {
    [v15 setShouldRun:0];
  }

  id result = [*(id *)(a1 + 32) shouldRun];
  if ((_DWORD)result) {
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateRemoteControlState");
  }
  return result;
}

id sub_100060DD4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_restoreState");
}

id sub_100060E34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_recalculateStateForReason:", @"Personal devices did change.");
}

void sub_100061474(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 personalDeviceControllerStateDidChange:*(void *)(a1 + 32)];
}

void sub_1000615B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000615D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v4 = _MRLogForCategory(0LL, v2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentPersonalDeviceUIDs]);
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 32) setPersonalDeviceWasRecentlyAttached:0];
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_recalculateStateForReason:", @"Timeout reached.");
  }
}

void sub_1000617E8(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc(&OBJC_CLASS___IDSService);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[IDSService mr_sharedGroupSessionServiceName]( &OBJC_CLASS___IDSService,  "mr_sharedGroupSessionServiceName"));
  uint64_t v2 = -[IDSService initWithService:](v1, "initWithService:", v4);
  uint64_t v3 = (void *)qword_1003FDD00;
  qword_1003FDD00 = (uint64_t)v2;
}

void sub_100061CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRDRouteRecommendationSuppressionContext);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localEndpoint]);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 64);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  id v8 = -[MRDRouteRecommendationSuppressionContext initWithLocalEndpoint:activeSystemEndpoint:eligibleToShowRecommendationsOutsideApp:eligibleToShowDeltaBanners:]( v4,  "initWithLocalEndpoint:activeSystemEndpoint:eligibleToShowRecommendationsOutsideApp:eligibleToShowDeltaBanners:",  v5,  v3,  v6,  [v7 enableDeltaRouteRecommendations]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) suppressionController]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 suppressionPolicyWithContext:v8]);

  if ([v10 shouldSuppress])
  {
    uint64_t v12 = _MRLogForCategory(13LL, v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 reason]);
      int v15 = 138412290;
      id v16 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV %@, ignoring all recommendations",  (uint8_t *)&v15,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 32) _bestRecommendationIn:*(void *)(a1 + 40) primaryBundleIdentifier:*(void *)(a1 + 48) activeSystemEndpoint:v3 completion:*(void *)(a1 + 56)];
  }
}

void sub_100061FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v12 = MREndpointConnectionReasonUserInfoKey;
  id v13 = @"intelligentRoutingRecommendationValidator";
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000620F8;
  v8[3] = &unk_10039B718;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  [v7 connectToExternalDeviceWithUserInfo:v4 completion:v8];
}

void sub_1000620F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
      int v14 = 138412546;
      int v15 = v8;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Failed to connect to active system endpoint %@ with error %@. Fallback to local",  (uint8_t *)&v14,  0x16u);
    }

    id v9 = (id)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
  }

  else
  {
    if (v7)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
      int v14 = 138412290;
      int v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Setting active system endpoint to %@",  (uint8_t *)&v14,  0xCu);
    }

    id v9 = *(id *)(a1 + 32);
  }

  id v11 = v9;
  [*(id *)(a1 + 40) setActiveSystemEndpoint:v9];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeSystemEndpointLock]);
  [v12 unlock];

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v11);
  }
}

uint64_t sub_100062434(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 route]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nodes]);

  if (![v5 count])
  {
    uint64_t v18 = _MRLogForCategory(13LL, v6);
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = 138412290;
      id v34 = v3;
      int v15 = "[MRDRRC].RV Ignoring %@ - Recommendation has no devices";
      __int16 v16 = v14;
      uint32_t v17 = 12;
      goto LABEL_11;
    }

BOOL sub_100062758(id a1, MRRouteNodeRepresentable *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRRouteNodeRepresentable avOutputDeviceIdentifier](a2, "avOutputDeviceIdentifier"));
  unsigned __int8 v3 = [v2 isEqualToString:MRIRRouteDeviceSpeakerRoute];

  return v3;
}

void sub_10006279C( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, unsigned int a6, void *a7, void *a8)
{
  id v14 = a2;
  id v63 = a3;
  id v15 = a4;
  id v65 = a7;
  id v16 = a8;
  uint32_t v17 = objc_alloc(&OBJC_CLASS___MRDRouteRecommendationDemotionContext);
  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = [v14 recommendationType];
  id v20 = [*(id *)(a1 + 40) isLocalEndpoint];
  uint64_t v21 = *(unsigned __int8 *)(a1 + 64);
  __int128 v64 = v15;
  id v22 = v15;
  uint64_t v23 = a5;
  uint64_t v24 = a1;
  LOBYTE(v59) = [v22 groupContainsDiscoverableGroupLeader];
  id v25 = v19;
  unsigned int v26 = v14;
  uint64_t v27 = -[MRDRouteRecommendationDemotionContext initWithPrimaryBundleIdentifier:recommendationType:isASELocal:localOutputContextHasAirPlay:isSourceEndpointPlaying:isTargetEndpointPlaying:targetNowPlayingBundleIdentifier:targetEndpointContainsDiscoverableGroupLeader:]( v17,  "initWithPrimaryBundleIdentifier:recommendationType:isASELocal:localOutputContextHasAirPlay:isSourceEndpointPla ying:isTargetEndpointPlaying:targetNowPlayingBundleIdentifier:targetEndpointContainsDiscoverableGroupLeader:",  v18,  v25,  v20,  v21,  v23,  a6,  v16,  v59);

  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v24 + 48) demotionController]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 demotionPolicyWithContext:v27]);

  if ([v29 shouldDemote])
  {
    uint64_t v31 = _MRLogForCategory(13LL, v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v29 reason]);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v67 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV %@. Downgrading to OTS",  buf,  0xCu);
    }

    [v14 setRecommendationType:0];
  }

  if (![v14 recommendationType])
  {
    if ((_DWORD)v23)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      unsigned int v35 = [v34 enableDeltaRouteRecommendations];

      if (v35)
      {
        unsigned int v36 = [*(id *)(v24 + 40) isGroupable];
        unsigned int v37 = [v64 isGroupable];
        unsigned int v38 = objc_msgSend(v63, "mr_all:", &stru_10039C2A8);
        unsigned int v40 = v38;
        if (v64) {
          unsigned int v41 = v37;
        }
        else {
          unsigned int v41 = v38;
        }
        if (v65)
        {
          unsigned int v62 = v38;
          unsigned int v42 = v36;
          id v43 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
          if ([v43 displayOn])
          {
            unsigned int v60 = v37;
            id v44 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
            id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 presentedBundleIdentifiers]);
            unsigned int v46 = [v45 containsObject:v65];

            unsigned int v36 = v42;
            if ((v42 & v41) == 1)
            {
              unsigned int v37 = v60;
              unsigned int v40 = v62;
              if (v46)
              {
                uint64_t v47 = _MRLogForCategory(13LL, v39);
                uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138413570;
                  uint64_t v49 = @"NO";
                  __int128 v67 = @"YES";
                  if (v64) {
                    __int16 v50 = @"YES";
                  }
                  else {
                    __int16 v50 = @"NO";
                  }
                  __int16 v68 = 2112;
                  id v69 = v50;
                  if (v60) {
                    id v51 = @"YES";
                  }
                  else {
                    id v51 = @"NO";
                  }
                  __int16 v70 = 2112;
                  if (v62) {
                    uint64_t v49 = @"YES";
                  }
                  id v71 = v51;
                  __int16 v72 = 2112;
                  v73 = v49;
                  __int16 v74 = 2112;
                  id v75 = v65;
                  __int16 v76 = 2112;
                  v77 = @"YES";
                  _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Mutating to deltaOTS: sG:%@; e:%@, eG:%@, dG: %@, np: %@ (visible: %@)",
                    buf,
                    0x3Eu);
                }

                [v26 setRecommendationType:3];
                goto LABEL_47;
              }

              goto LABEL_30;
            }

            unsigned int v37 = v60;
          }

          else
          {

            unsigned int v46 = 0;
          }

          unsigned int v40 = v62;
        }

        else
        {
          unsigned int v46 = 0;
        }

LABEL_30:
        uint64_t v52 = _MRLogForCategory(13LL, v39);
        uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v54 = @"NO";
          if (v36) {
            __int16 v55 = @"YES";
          }
          else {
            __int16 v55 = @"NO";
          }
          *(_DWORD *)__int128 buf = 138413570;
          __int128 v67 = v55;
          if (v64) {
            uint64_t v56 = @"YES";
          }
          else {
            uint64_t v56 = @"NO";
          }
          __int16 v68 = 2112;
          id v69 = v56;
          if (v37) {
            __int16 v57 = @"YES";
          }
          else {
            __int16 v57 = @"NO";
          }
          __int16 v70 = 2112;
          id v71 = v57;
          if (v40) {
            __int16 v58 = @"YES";
          }
          else {
            __int16 v58 = @"NO";
          }
          __int16 v72 = 2112;
          if (v46) {
            uint64_t v54 = @"YES";
          }
          v73 = v58;
          __int16 v74 = 2112;
          id v75 = v65;
          __int16 v76 = 2112;
          v77 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV Not mutating to deltaOTS: sG:%@; e:%@, eG:%@, dG: %@, np: %@ (visible: %@)",
            buf,
            0x3Eu);
        }
      }
    }
  }

      id v34 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConnectionLifetimeController maintainReason](self, "maintainReason"));

      if (v34)
      {
        unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConnectionLifetimeController maintainReason](self, "maintainReason"));
        -[MRDConnectionLifetimeController setPreviousMaintainReason:](self, "setPreviousMaintainReason:", v35);
      }

      -[MRDConnectionLifetimeController setMaintainReason:](self, "setMaintainReason:", v11);
      goto LABEL_33;
    }

    if (-[MRDConnectionLifetimeController isPlaying](self, "isPlaying"))
    {
      if (!-[MRDConnectionLifetimeController continuousPlaybackDetected](self, "continuousPlaybackDetected"))
      {
        id v11 = @"Device is playing";
        goto LABEL_7;
      }
    }

    else
    {
      if (-[MRDConnectionLifetimeController hasPlayedRecently](self, "hasPlayedRecently"))
      {
        id v11 = @"Device played recently";
        goto LABEL_7;
      }

      if (-[MRDConnectionLifetimeController containsLocalDevice](self, "containsLocalDevice"))
      {
        id v11 = @"Remote device is playing to local device";
        goto LABEL_7;
      }
    }

    if (-[MRDConnectionLifetimeController hasDeferredDisconnectionDueToDeviceState]( self,  "hasDeferredDisconnectionDueToDeviceState"))
    {
      if (!-[MRDConnectionLifetimeController deviceState](self, "deviceState")) {
        -[MRDConnectionLifetimeController disconnectOrigin:](self, "disconnectOrigin:", v7);
      }
    }

    else
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConnectionLifetimeController disconnectTimer](self, "disconnectTimer"));
      uint64_t v23 = v22 == 0LL;

      if (v23)
      {
        -[MRDConnectionLifetimeController disconnectInterval](self, "disconnectInterval");
        id v25 = v24;
        if (-[MRDConnectionLifetimeController isPlaying](self, "isPlaying")) {
          id v25 = v25 + v25;
        }
        uint64_t v27 = _MRLogForCategory(2LL, v26);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[MROrigin displayName](v7, "displayName"));
          uint64_t v30 = -[MROrigin identifier](v7, "identifier");
          *(_DWORD *)__int128 buf = 134218754;
          unsigned int v46 = self;
          uint64_t v47 = 2112;
          uint64_t v48 = v29;
          uint64_t v49 = 2048;
          __int16 v50 = v30;
          id v51 = 2048;
          uint64_t v52 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "[MRDCLC] <%p> Schedule disconnect for origin-%@-%ld in %.2lf seconds.",  buf,  0x2Au);
        }

        objc_initWeak((id *)buf, self);
        uint64_t v31 = objc_alloc(&OBJC_CLASS___MRTimer);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[MRDConnectionLifetimeController queue](self, "queue"));
        uint64_t v39 = _NSConcreteStackBlock;
        unsigned int v40 = 3221225472LL;
        unsigned int v41 = sub_1000AB538;
        unsigned int v42 = &unk_10039B590;
        objc_copyWeak(&v44, (id *)buf);
        id v43 = v7;
        int v33 = -[MRTimer initWithInterval:name:queue:block:]( v31,  "initWithInterval:name:queue:block:",  @"CLC-disconnectTimer",  v32,  &v39,  v25);
        -[MRDConnectionLifetimeController setDisconnectTimer:](self, "setDisconnectTimer:", v33, v39, v40, v41, v42);

        objc_destroyWeak(&v44);
        objc_destroyWeak((id *)buf);
      }
    }

    id v11 = 0LL;
    goto LABEL_30;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          swift_once(&qword_1003FF010, sub_1001B2258);
          goto LABEL_22;
        }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease();
  id v75 = _swiftEmptyArrayStorage;
LABEL_26:
  v99 = (uint64_t)v75;
  v80 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v87, v86);
  int8x16_t v82 = v81;
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = v80;
  v83._object = v82;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._countAndFlagsBits = 10LL;
  v84._object = (void *)0xE100000000000000LL;
  String.append(_:)(v84);
  String.append(_:)(v102);
  swift_bridgeObjectRelease();
  return v103;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_47:
  (*(void (**)(void))(*(void *)(v24 + 56) + 16LL))();
}

          id v19 = 0LL;
          uint32_t v17 = 0LL;
          uint64_t v10 = v32;
          goto LABEL_18;
        }
      }

      id v19 = 0LL;
      uint32_t v17 = 0LL;
      uint64_t v10 = v35;
      goto LABEL_18;
    }

    uint64_t v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_57;
    }
    id v22 = v21;
    uint64_t v48 = v21;
    uint64_t v23 = type metadata accessor for NearbyAdvertisement(0LL);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      unsigned __int8 v3 = v50;
LABEL_57:
      sub_10016031C(v3);
      return (void *)v2;
    }

  __break(1u);
  return result;
}

BOOL sub_100062C2C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isGroupable](a2, "isGroupable");
}

id sub_100062FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(13LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) count];
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 134218242;
    id v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV retrying with %lu remaining: %@",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 40) evaluateRecommendations:*(void *)(a1 + 32) localOutputContextHasAirPlay:*(unsigned __int8 *)(a1 + 72) primaryBundleIdentifier:*(void *)(a1 + 48) activeSystemEndpoint:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000630B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472LL;
  v67[2] = sub_100063720;
  v67[3] = &unk_10039C320;
  id v8 = v5;
  id v68 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "msv_compactMap:", v67));
  id v10 = [v9 count];
  id v11 = [*(id *)(a1 + 32) count];

  uint64_t v13 = _MRLogForCategory(13LL, v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v10 == v11)
  {
    if (v15)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV all devices were found!",  buf,  2u);
    }

    if (!v6)
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue([v39 nowPlayingServer]);
      unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) origin]);
      unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue([v40 originClientForOrigin:v41]);

      id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 activeNowPlayingClient]);
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 activePlayerClient]);
      [v44 isPlaying];

      id v45 = (void *)objc_claimAutoreleasedReturnValue([v42 activeNowPlayingClient]);
      unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue([v45 client]);
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 bundleIdentifier]);

      uint64_t v49 = _MRLogForCategory(13LL, v48);
      __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v70 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV no endpoint, no RC, returning device collection: %@",  buf,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
      goto LABEL_29;
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRIRRoute routeWithEndpoint:](&OBJC_CLASS___MRIRRoute, "routeWithEndpoint:", v6));
    __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v16 nodes]);

    uint32_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 nowPlayingServer]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) origin]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 originClientForOrigin:v19]);

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 nowPlayingServer]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v6 origin]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 originClientForOrigin:v23]);

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v20 activeNowPlayingClient]);
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 activePlayerClient]);
    unsigned int v65 = [v26 isPlaying];

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v24 activeNowPlayingClient]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 activePlayerClient]);
    id v29 = [v28 isPlaying];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v20 activeNowPlayingClient]);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 client]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 bundleIdentifier]);

    int v33 = (void *)objc_claimAutoreleasedReturnValue([v24 activeNowPlayingClient]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 client]);
    unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue([v34 bundleIdentifier]);

    if (*(_BYTE *)(a1 + 80) && (_DWORD)v29)
    {
      uint64_t v37 = _MRLogForCategory(13LL, v36);
      unsigned int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV endpoint is not a perfect match.\n local endpoint is airplaying and target is playing.",  buf,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      unsigned int v42 = v66;
      if (![v66 isSubsetOfSet:*(void *)(a1 + 48)])
      {
        uint64_t v61 = _MRLogForCategory(13LL, v51);
        unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          id v63 = *(void **)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412546;
          id v70 = v63;
          __int16 v71 = 2112;
          __int16 v72 = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV endpoint is not a perfect match.\n desired nodes: %@\n available nodes: %@",  buf,  0x16u);
        }

        (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
        goto LABEL_28;
      }

      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", *(void *)(a1 + 48)));
      [v52 minusSet:v66];
      if ([v52 count])
      {
        uint64_t v54 = _MRLogForCategory(13LL, v53);
        __int16 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v70 = v52;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV could not find nodes: %@",  buf,  0xCu);
        }
      }

      __int128 v64 = v32;
      uint64_t v56 = _MRLogForCategory(13LL, v53);
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v70 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV endpoint is a perfect match, returning endpoint: %@",  buf,  0xCu);
      }

      uint64_t v58 = *(void *)(a1 + 72);
      uint64_t v59 = *(void *)(a1 + 56);
      unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDevices]);
      (*(void (**)(uint64_t, uint64_t, void *, id, void, id, void *, void *))(v58 + 16))( v58,  v59,  v60,  v6,  v65,  v29,  v64,  v35);

      uint64_t v32 = v64;
    }

    unsigned int v42 = v66;
LABEL_28:

LABEL_29:
    goto LABEL_30;
  }

  if (v15)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].RV not all devices were found!",  buf,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_30:
}

id sub_100063720(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000637A8;
  v8[3] = &unk_10039AC00;
  id v9 = v3;
  id v5 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mr_first:", v8));

  return v6;
}

id sub_1000637A8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100063AC8(_Unwind_Exception *a1)
{
}

void sub_100063C44(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = -[MRDExternalDeviceHomeServerRecentlyPlayedEntry initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___MRDExternalDeviceHomeServerRecentlyPlayedEntry),  "initWithDictionaryRepresentation:",  v4);

  [v3 _addEntry:v5];
}

void sub_100063CA8(id a1, MRDeviceInfo *a2, NSDictionary *a3, id a4)
{
  id v6 = a2;
  uint64_t v7 = a3;
  id v8 = a4;
  uint64_t v9 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kMRPlaybackQueueRequestUserInfoKey));
  uint64_t v10 = MRGetPlayerPathFromUserInfo(v7);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v43[0] = 0LL;
  v43[1] = v43;
  v43[2] = 0x3032000000LL;
  v43[3] = sub_100063FC8;
  v43[4] = sub_100063FD8;
  id v44 = 0LL;
  uint64_t v13 = dispatch_group_create();
  dispatch_group_enter(v13);
  id v14 = &_dispatch_main_q;
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_100063FE0;
  v39[3] = &unk_10039C3D8;
  unsigned int v42 = v43;
  BOOL v15 = v12;
  unsigned int v40 = v15;
  id v16 = v13;
  unsigned int v41 = v16;
  id v25 = (void *)v9;
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(v9, v11, &_dispatch_main_q, v39);

  dispatch_group_enter(v16);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100064044;
  v35[3] = &unk_10039C400;
  unsigned int v38 = v43;
  uint32_t v17 = v15;
  uint64_t v36 = v17;
  uint64_t v18 = v16;
  uint64_t v37 = v18;
  MRMediaRemoteGetSupportedCommandsForPlayer(v11, &_dispatch_main_q, v35);

  dispatch_group_enter(v18);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_1000640A8;
  v30[3] = &unk_10039C428;
  id v34 = v43;
  id v20 = v6;
  uint64_t v31 = v20;
  uint64_t v21 = v17;
  uint64_t v32 = v21;
  id v22 = v18;
  int v33 = v22;
  +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:]( &OBJC_CLASS___MRDeviceInfoRequest,  "deviceInfoForOrigin:queue:completion:",  v19,  &_dispatch_main_q,  v30);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100064138;
  block[3] = &unk_10039C450;
  uint64_t v27 = v21;
  id v28 = v8;
  id v29 = v43;
  uint64_t v23 = v21;
  id v24 = v8;
  dispatch_group_notify(v22, &_dispatch_main_q, block);

  _Block_object_dispose(v43, 8);
}

void sub_100063FB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100063FC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100063FD8(uint64_t a1)
{
}

void sub_100063FE0(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (a2 && !*(void *)(v5 + 40))
  {
    [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:kMRPlaybackQueueUserInfoKey];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  }

  objc_storeStrong((id *)(v5 + 40), obj);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100064044(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (a2 && !*(void *)(v5 + 40))
  {
    [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:kMRSupportedCommandsUserInfoKey];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  }

  objc_storeStrong((id *)(v5 + 40), obj);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000640A8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  if (!*(void *)(v6 + 40) && *(void *)(a1 + 32))
  {
    MRAddDeviceInfoToUserInfo(*(void *)(a1 + 40), v9);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_100064138(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_100064154(id a1, MRDeviceInfo *a2, NSDictionary *a3, id a4)
{
  id v5 = a4;
  uint64_t v6 = kMRPlaybackSessionRequestUserInfoKey;
  uint64_t v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", v6));
  uint64_t v9 = MRGetPlayerPathFromUserInfo(v7);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100064224;
  v12[3] = &unk_10039AEB8;
  id v13 = v5;
  id v11 = v5;
  MRMediaRemotePlaybackSessionRequest(v8, v10, &_dispatch_main_q, v12);
}

void sub_100064224(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  a2,  kMRPlaybackSessionUserInfoKey);
  }

  else
  {
    id v4 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000645E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v3 sendPlaybackSessionUpdateToCompanionCoalesceInterval];
    double v5 = v4;

    dispatch_time_t v6 = dispatch_time(0LL, (uint64_t)(v5 * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000646A4;
    block[3] = &unk_100399250;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v6, &_dispatch_main_q, block);
  }

id sub_1000646A4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  return _[*(id *)(a1 + 32) _maybeSendPlaybackStateMessageToCompanion];
}

void sub_100064C24(_Unwind_Exception *a1)
{
}

void sub_100064EBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100065030(_Unwind_Exception *a1)
{
}

void sub_10006510C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = objc_alloc(&OBJC_CLASS___MRDExternalDeviceHomeServerRecentlyPlayedEntry);
  uint64_t v5 = MRCreateDecodedUserInfo(v3);
  dispatch_time_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  id v13 = -[MRDExternalDeviceHomeServerRecentlyPlayedEntry initWithDictionaryRepresentation:]( v4,  "initWithDictionaryRepresentation:",  v6);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDExternalDeviceHomeServerRecentlyPlayedEntry date](v13, "date"));
  [v7 timeIntervalSinceNow];
  double v9 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v10 lastPlayingDeviceThresholdInterval];
  double v12 = v11;

  if (v9 < v12) {
    [*(id *)(a1 + 32) addObject:v13];
  }
}

int64_t sub_1000651D8( id a1, MRDExternalDeviceHomeServerRecentlyPlayedEntry *a2, MRDExternalDeviceHomeServerRecentlyPlayedEntry *a3)
{
  double v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDExternalDeviceHomeServerRecentlyPlayedEntry date](a2, "date"));
  dispatch_time_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRDExternalDeviceHomeServerRecentlyPlayedEntry date](v4, "date"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_100065D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100065D54(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained resetWithError:v3];
}

void sub_100065EB4(_Unwind_Exception *a1)
{
}

void sub_100066120(id a1, MRDIDSServiceMessage *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRDIDSServiceMessage data](v2, "data"));
  id v13 = 0LL;
  double v4 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v3,  &v13));
  id v5 = v13;

  if (!v5)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MRPromptForRouteAuthorizationMessage);
    if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[MRMediaRemoteServiceClient sharedServiceClient]( &OBJC_CLASS___MRMediaRemoteServiceClient,  "sharedServiceClient"));
      double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 workerQueue]);

      id v9 = v4;
      uint64_t v10 = MRGetSharedService();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100066250;
      v11[3] = &unk_10039C568;
      double v12 = v2;
      MRMediaRemoteServicePromptRouteAuthorization(v10, v9, v8, v11);
    }
  }
}

void sub_100066250(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 protobufData]);
  [v2 replyWithData:v3 priority:300];
}

void sub_100066298(uint64_t a1)
{
}

void sub_1000664FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100066518(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100066528(uint64_t a1)
{
}

void sub_100066530(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);
    id v11 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v5,  &v11));
    id v7 = v11;

    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 error]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100066654(_Unwind_Exception *a1)
{
}

void sub_1000666C4(_Unwind_Exception *a1)
{
}

void sub_100066824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100066840(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);
    uint64_t v8 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v5,  &v8));

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    [WeakRetained resetWithError:v7];
  }
}

void sub_100066ADC(id a1)
{
  uint64_t v1 = (void *)qword_1003FDD18;
  qword_1003FDD18 = (uint64_t)&off_1003BBAE0;
}

uint64_t sub_100066C50(uint64_t a1)
{
  return notify_post(*(const char **)(a1 + 32));
}

void sub_100066D7C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);

  id v5 = (MRDTelevisionSiriContext *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) objectForKeyedSubscript:v3]);
  if (v5)
  {
    uint64_t v6 = _MRLogForCategory(0LL, v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Invalidating previous context: %{public}@",  buf,  0xCu);
    }

    -[MRDTelevisionSiriContext setValid:](v5, "setValid:", 0LL);
  }

  uint64_t v8 = -[MRDTelevisionSiriContext initWithClient:]( objc_alloc(&OBJC_CLASS___MRDTelevisionSiriContext),  "initWithClient:",  *(void *)(a1 + 32));
  [*(id *)(*(void *)(a1 + 40) + 16) setObject:v8 forKeyedSubscript:v3];
  uint64_t v10 = _MRLogForCategory(0LL, v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    id v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Starting context: %{public}@",  buf,  0xCu);
  }

  dispatch_time_t v12 = dispatch_time(0LL, 400000000LL);
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = *(dispatch_queue_s **)(v13 + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100066F70;
  v16[3] = &unk_100398E60;
  uint32_t v17 = v8;
  uint64_t v18 = v13;
  BOOL v15 = v8;
  dispatch_after(v12, v14, v16);
}

void sub_100066F70(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) valid];
  uint64_t v4 = _MRLogForCategory(0LL, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138543362;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Context %{public}@ is still valid, requesting to start recording",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 40) _activateSiriWithContext:*(void *)(a1 + 32) andBeginRecording:1];
    [*(id *)(a1 + 32) setDidStartRecording:1];
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138543362;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Context %{public}@ is no longer valid. Cancelling timer.",  (uint8_t *)&v9,  0xCu);
    }
  }

void sub_100067108(uint64_t a1)
{
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v4]);

  uint64_t v7 = _MRLogForCategory(0LL, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v9)
    {
      int v16 = 138543362;
      uint32_t v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Received button up for context: %{public}@",  (uint8_t *)&v16,  0xCu);
    }

    unsigned int v10 = [v5 didStartRecording];
    uint64_t v12 = _MRLogForCategory(0LL, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v14)
      {
        int v16 = 138543362;
        uint32_t v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Requesting to end recording for context: %{public}@",  (uint8_t *)&v16,  0xCu);
      }

      [*(id *)(a1 + 32) _endSiriRecordingWithContext:v5];
    }

    else
    {
      if (v14)
      {
        int v16 = 138543362;
        uint32_t v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[SiriService] Requesting to activate Siri (but not record) for context: %{public}@",  (uint8_t *)&v16,  0xCu);
      }

      [*(id *)(a1 + 32) _activateSiriWithContext:v5 andBeginRecording:0];
    }

    [v5 setValid:0];
  }

  else
  {
    if (v9)
    {
      BOOL v15 = *(void **)(a1 + 40);
      int v16 = 138543362;
      uint32_t v17 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[SiriService] WARNING: No context found for client: %{public}@",  (uint8_t *)&v16,  0xCu);
    }
  }
}

void sub_100067384(uint64_t a1)
{
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v4]);

  id v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) _endSiriRecordingWithContext:v6];
    id v5 = v6;
  }
}

id sub_100067710(uint64_t a1)
{
  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

void sub_100067884(id a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v2 transactionWaitDurationOnOutOfMemory];
  qword_1003FDD28 = v1;
}

uint64_t sub_100067ABC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    else {
      uint64_t v5 = 0LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v5);
  }

  return result;
}

id sub_100067CF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

id sub_100068000(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 134217984;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%p Checking for available memory",  (uint8_t *)&v7,  0xCu);
  }

  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

id sub_1000680B0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _processMessage:a2];
}

void sub_1000681CC( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100068218(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100068224(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = _MRLogForCategory(0LL, a2);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting MediaRemote server", buf, 2u);
  }

  sub_1000DD58C();
  uint64_t v4 = getenv("MR_WAIT_FOR_DEBUGGER");
  if (v4 && *v4 == 49) {
    raise(2);
  }
  uint64_t v5 = objc_autoreleasePoolPush();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  [v6 initializeServer];

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  [v7 start];

  objc_autoreleasePoolPop(v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  [v8 run];

  uint64_t v10 = _MRLogForCategory(0LL, v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MediaRemote server exiting", v13, 2u);
  }

  return 0LL;
}

void sub_10006845C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremoted.MRDRoutingDiscoverySession", v4);
  uint64_t v3 = (void *)qword_1003FDD38;
  qword_1003FDD38 = (uint64_t)v2;
}

void sub_1000684AC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([v5 routingServer]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 hostedRoutingService]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 hostedRoutingController]);
  [v4 addObserver:*(void *)(a1 + 32)];
}

void sub_10006859C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:0];
}

void sub_100068960( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_100068980(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:*(void *)(a1 + 32)];
}

id sub_100068A5C(id a1, MRAVDistantEndpoint *a2)
{
  id v2 = a2;
  if ((-[MRAVDistantEndpoint isLocalEndpoint](v2, "isLocalEndpoint") & 1) != 0) {
    uint64_t v3 = (MRAVDistantEndpoint *)objc_claimAutoreleasedReturnValue( +[MRAVLocalEndpoint sharedLocalEndpoint]( &OBJC_CLASS___MRAVLocalEndpoint,  "sharedLocalEndpoint"));
  }
  else {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

id sub_100068AF8(id a1, MRAVDistantEndpoint *a2)
{
  id v2 = a2;
  if ((-[MRAVDistantEndpoint isLocalEndpoint](v2, "isLocalEndpoint") & 1) != 0) {
    uint64_t v3 = (MRAVDistantEndpoint *)objc_claimAutoreleasedReturnValue( +[MRAVLocalEndpoint sharedLocalEndpoint]( &OBJC_CLASS___MRAVLocalEndpoint,  "sharedLocalEndpoint"));
  }
  else {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

id sub_100068DA0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

id sub_100068E6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setTransactionWaitDuration:*(double *)(*(void *)(a1 + 40) + 32)];
}

id sub_100068F40(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_100069024(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) name] - 2;
  if (v2 <= 8 && ((0x17Fu >> v2) & 1) != 0) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = qword_10034B7B0[v2];
  }
  uint64_t v3 = *(void **)(a1 + 40);
  unint64_t v4 = v3[3] - v3[2];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unint64_t v6 = *(void *)(v5 + 24);
  if (v6 > v4)
  {
    *(void *)(v5 + 24) = v4;
    uint64_t v3 = *(void **)(a1 + 40);
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  }

  return [v3 adjustMemory:v6];
}

id sub_10006925C(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustMemory:*(void *)(a1 + 48) - *(void *)(a1 + 40)];
}

uint64_t sub_100069270(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000692E4;
  v6[3] = &unk_100399B70;
  uint64_t v4 = a1[6];
  void v6[4] = v2;
  void v6[5] = v4;
  dispatch_sync(v3, v6);
  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

id sub_1000692E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustMemory:-*(void *)(a1 + 40)];
}

void sub_1000697B0(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = _MRLogForCategory(0LL, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1002B6274(a1, v5);
  }

  unint64_t v6 = *(dispatch_group_s **)(a1 + 40);
  if (v6) {
    dispatch_group_leave(v6);
  }
  if (v2) {
    [*(id *)(a1 + 48) cancel];
  }
}

LABEL_24:
              }

              id v28 = [v60 countByEnumeratingWithState:&v70 objects:v89 count:16];
            }

            while (v28);
          }

          unsigned int v40 = _MRLogForCategory(0LL, v39);
          unsigned int v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          int v7 = v51;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            Description = MRTransactionNameGetDescription([v51 name]);
            id v45 = (void *)objc_claimAutoreleasedReturnValue(Description);
            Keys = MRTransactionPacketsGetKeys(v61);
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(Keys);
            *(_DWORD *)__int128 buf = v48;
            v83 = v45;
            v84 = 2112;
            v85 = v57;
            id v86 = 2112;
            v87 = v47;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "[MRTransactionServer] %@ sending client %@ subscribed packets %@",  buf,  0x20u);
          }

          uint64_t v9 = group;
          uint64_t i = v59;
          if (group) {
            dispatch_group_enter(group);
          }
          unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "connection", v48));
          id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 connection]);
          v64[0] = _NSConcreteStackBlock;
          v64[1] = 3221225472LL;
          v64[2] = sub_10006A08C;
          v64[3] = &unk_10039C788;
          unsigned int v65 = group;
          [v51 send:v61 toConnection:v43 completion:v64];

          id v24 = v58;
          id v25 = v56;
        }
      }

      __int16 v55 = [obj countByEnumeratingWithState:&v78 objects:v90 count:16];
    }

    while (v55);
  }
}

  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v49, 8);

  _Block_object_dispose(&v55, 8);
}

      v18 |= v22;
    }

    uint32_t v17 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
  }

  while (v17);
  uint64_t v13 = v44;
  if ((v18 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
}

        int v7 = (v13 - 1) & v13;
        uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }

      int v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint32_t v17 = v16[1];
      Hasher.init(_seed:)(v42, *(void *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      id v19 = Hasher._finalize()();
      id v20 = -1LL << *(_BYTE *)(v2 + 32);
      uint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }

    id v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    id v24 = v23[1];
    id v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      id v43 = a1;
      id v44 = v41;
      id v45 = v39;
      unsigned int v46 = v9;
      uint64_t v47 = v7;
    }

    else
    {
      unsigned int v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v27 = (void *)(v22 + 16 * v21);
        id v28 = v27[1];
        id v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      id v43 = a1;
      id v44 = v41;
      id v45 = v39;
      unsigned int v46 = v9;
      uint64_t v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    uint64_t v31 = *(_BYTE *)(v2 + 32);
    uint64_t v32 = v31 & 0x3F;
    int v33 = (1LL << v31) + 63;
    id v34 = v33 >> 6;
    unsigned int v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_10015CE68((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_10016031C(v43);
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_10015CE68((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_10016031C(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

        __break(1u);
        goto LABEL_25;
      }

        __break(1u);
        goto LABEL_25;
      }

    v159 = 0LL;
    uint64_t v48 = v143;
    if ((v148 & 1) != 0)
    {
      if (v44 < v32) {
        goto LABEL_155;
      }
      uint64_t v49 = v44;
      __int16 v50 = (uint64_t)v153;
      if (v32 >= v44)
      {
        int v33 = v44;
      }

      else
      {
        v145 = v31;
        uint64_t v51 = 0LL;
        uint64_t v52 = v154 * (v44 - 1);
        uint64_t v53 = v44 * v154;
        v139 = v32;
        uint64_t v54 = v32 * v154;
        do
        {
          if (v32 != v49 + v51 - 1)
          {
            __int16 v55 = v144;
            if (!v144) {
              goto LABEL_158;
            }
            uint64_t v56 = v144 + v54;
            sub_1001A81D4(v144 + v54, v151, type metadata accessor for HostedRoutingItem);
            if (v54 < v52 || v56 >= v55 + v53)
            {
              swift_arrayInitWithTakeFrontToBack(v55 + v54, v55 + v52, 1LL, v150);
            }

            else if (v54 != v52)
            {
              swift_arrayInitWithTakeBackToFront(v55 + v54);
            }

            sub_1001A81D4(v151, v55 + v52, type metadata accessor for HostedRoutingItem);
            a2 = v157;
            __int16 v50 = (uint64_t)v153;
          }

          ++v32;
          --v51;
          uint64_t v49 = v44;
          v52 -= v154;
          v53 -= v154;
          v54 += v154;
        }

        while (v32 < v44 + v51);
        uint64_t v31 = v145;
        uint64_t v48 = v143;
        int v33 = v44;
        uint64_t v32 = v139;
      }

      unsigned int v42 = v152;
      if (v33 >= v152) {
        goto LABEL_50;
      }
    }

    else
    {
      __int16 v50 = (uint64_t)v153;
      int v33 = v44;
      if (v44 >= v42) {
        goto LABEL_50;
      }
    }

    if (__OFSUB__(v33, v32)) {
      goto LABEL_152;
    }
    if (v33 - v32 >= v48) {
      goto LABEL_50;
    }
    if (__OFADD__(v32, v48)) {
      goto LABEL_153;
    }
    __int16 v57 = v32 + v48 >= v42 ? v42 : v32 + v48;
    if (v57 < v32) {
      break;
    }
    if (v33 == v57) {
      goto LABEL_50;
    }
    v145 = v31;
    v112 = *(void *)(v158 + 72);
    v154 = v112 * (v33 - 1);
    v148 = v112;
    v113 = v33 * v112;
    v139 = v32;
    v144 = v57;
    do
    {
      v152 = v33;
      v114 = 0LL;
      v115 = v32;
      v116 = v50;
      while (1)
      {
        v117 = *v160;
        v118 = v113;
        v119 = v113 + v114 + *v160;
        v120 = (uint64_t)v149;
        sub_1001A80F8(v119, (uint64_t)v149, type metadata accessor for HostedRoutingItem);
        sub_1001A80F8(v154 + v114 + v117, v116, type metadata accessor for HostedRoutingItem);
        v121 = v159;
        v122 = v161(v120, v116);
        v123 = v116;
        v159 = v121;
        if (v121)
        {
          sub_1001A813C(v116, type metadata accessor for HostedRoutingItem);
          sub_1001A813C(v120, type metadata accessor for HostedRoutingItem);
LABEL_128:
          swift_bridgeObjectRelease();
          v137 = v142;
          goto LABEL_129;
        }

        v124 = v122;
        sub_1001A813C(v123, type metadata accessor for HostedRoutingItem);
        sub_1001A813C(v120, type metadata accessor for HostedRoutingItem);
        if ((v124 & 1) == 0) {
          break;
        }
        v125 = *v160;
        if (!*v160) {
          goto LABEL_157;
        }
        v113 = v118;
        v126 = v125 + v118 + v114;
        v127 = v125 + v154 + v114;
        sub_1001A81D4(v126, v155, type metadata accessor for HostedRoutingItem);
        swift_arrayInitWithTakeFrontToBack(v126, v127, 1LL, v150);
        sub_1001A81D4(v155, v127, type metadata accessor for HostedRoutingItem);
        v114 -= v148;
        ++v115;
        v116 = (uint64_t)v153;
        if (v152 == v115) {
          goto LABEL_109;
        }
      }

      v113 = v118;
      v116 = v123;
LABEL_109:
      __int16 v50 = v116;
      int v33 = v152 + 1;
      v154 += v148;
      v113 += v148;
      uint64_t v32 = v139;
    }

    while (v152 + 1 != v144);
    int v33 = v144;
    a2 = v157;
    uint64_t v31 = v145;
    if (v144 < v139) {
      goto LABEL_150;
    }
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
      uint64_t v31 = sub_1001A595C(0LL, *((void *)v31 + 2) + 1LL, 1, v31);
    }
    uint64_t v59 = *((void *)v31 + 2);
    uint64_t v58 = *((void *)v31 + 3);
    unsigned int v60 = v59 + 1;
    if (v59 >= v58 >> 1) {
      uint64_t v31 = sub_1001A595C((char *)(v58 > 1), v59 + 1, 1, v31);
    }
    *((void *)v31 + 2) = v60;
    v154 = (uint64_t)(v31 + 32);
    uint64_t v61 = &v31[16 * v59 + 32];
    *(void *)uint64_t v61 = v32;
    *((void *)v61 + 1) = v33;
    v152 = v33;
    if (v59)
    {
      unsigned int v62 = v154;
      id v63 = v159;
      while (1)
      {
        __int128 v64 = v60 - 1;
        if (v60 >= 4)
        {
          id v69 = v62 + 16 * v60;
          id v70 = *(void *)(v69 - 64);
          __int16 v71 = *(void *)(v69 - 56);
          id v75 = __OFSUB__(v71, v70);
          __int16 v72 = v71 - v70;
          if (v75) {
            goto LABEL_135;
          }
          __int16 v74 = *(void *)(v69 - 48);
          v73 = *(void *)(v69 - 40);
          id v75 = __OFSUB__(v73, v74);
          __int128 v67 = v73 - v74;
          id v68 = v75;
          if (v75) {
            goto LABEL_136;
          }
          __int16 v76 = v60 - 2;
          v77 = (uint64_t *)(v62 + 16 * (v60 - 2));
          v79 = *v77;
          v78 = v77[1];
          id v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75) {
            goto LABEL_138;
          }
          id v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75) {
            goto LABEL_141;
          }
          if (v81 >= v72)
          {
            v99 = (uint64_t *)(v62 + 16 * v64);
            v101 = *v99;
            id v100 = v99[1];
            id v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75) {
              goto LABEL_145;
            }
            id v92 = v67 < v102;
            goto LABEL_88;
          }
        }

        else
        {
          if (v60 != 3)
          {
            v93 = *((void *)v31 + 4);
            v94 = *((void *)v31 + 5);
            id v75 = __OFSUB__(v94, v93);
            id v86 = v94 - v93;
            v87 = v75;
            goto LABEL_82;
          }

          __int128 v66 = *((void *)v31 + 4);
          unsigned int v65 = *((void *)v31 + 5);
          id v75 = __OFSUB__(v65, v66);
          __int128 v67 = v65 - v66;
          id v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_137;
        }
        __int16 v76 = v60 - 2;
        int8x16_t v82 = (uint64_t *)(v62 + 16 * (v60 - 2));
        v84 = *v82;
        v83 = v82[1];
        v85 = __OFSUB__(v83, v84);
        id v86 = v83 - v84;
        v87 = v85;
        if (v85) {
          goto LABEL_140;
        }
        uint64_t v88 = (uint64_t *)(v62 + 16 * v64);
        uint64_t v90 = *v88;
        v89 = v88[1];
        id v75 = __OFSUB__(v89, v90);
        unsigned __int8 v91 = v89 - v90;
        if (v75) {
          goto LABEL_143;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_144;
        }
        if (v86 + v91 >= v67)
        {
          id v92 = v67 < v91;
LABEL_88:
          if (v92) {
            __int128 v64 = v76;
          }
          goto LABEL_90;
        }

    return;
  }

  BOOL v14 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8];
  if (!v14)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    uint64_t v53 = v2;
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    __int16 v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc(22LL, -1LL);
      __int16 v57 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v103 = (uint64_t)v53;
      v104 = (os_log_t)v58;
      *(_DWORD *)uint64_t v56 = 138543618;
      id v63 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 4, v56 + 12);
      *__int16 v57 = v53;

      *(_WORD *)(v56 + 12) = 2082;
      __int128 v64 = *(void *)&v63[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unsigned int v65 = *(void *)&v63[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v103 = sub_10015ADC4(v64, v65, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 14, v56 + 22);

      swift_bridgeObjectRelease();
      unsigned int v62 = "[%{public}@]<%{public}s> Dropping handleParticipantsChanged before leader discovered.";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  v101 = *(os_log_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
  BOOL v15 = v2;
  swift_bridgeObjectRetain();
  int v16 = sub_1001EABB4((uint64_t)&_swiftEmptyDictionarySingleton, a1, (uint64_t)v15);

  uint32_t v17 = sub_1001E4610(v16);
  swift_bridgeObjectRelease();
  if (v17[2])
  {
    id v100 = a1;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    uint64_t v18 = v15;
    id v19 = swift_retain(v17);
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    uint64_t v21 = static os_log_type_t.fault.getter();
    id v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      v102 = v4;
      id v24 = v23;
      id v25 = (char **)swift_slowAlloc(8LL, -1LL);
      v95 = v25;
      v98 = swift_slowAlloc(64LL, -1LL);
      v103 = (uint64_t)v18;
      v104 = (os_log_t)v98;
      *(_DWORD *)id v24 = 138543874;
      v97 = v20;
      v99 = 0LL;
      unsigned int v26 = v18;
      id v96 = v22;
      uint64_t v27 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v24 + 4, v24 + 12);
      *id v25 = v18;

      *(_WORD *)(v24 + 12) = 2082;
      id v28 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      id v29 = *(void *)&v27[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v103 = sub_10015ADC4(v28, v29, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v24 + 14, v24 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 22) = 2082;
      swift_retain(v17);
      uint64_t v30 = sub_100156B68(&qword_1003FA010);
      uint64_t v31 = Dictionary.description.getter(v17, &type metadata for String, v30, &protocol witness table for String);
      int v33 = v32;
      swift_release(v17);
      v103 = sub_10015ADC4(v31, v33, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v24 + 24, v24 + 32);
      swift_release_n(v17, 2LL);
      swift_bridgeObjectRelease();
      id v34 = v97;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v96,  "[%{public}@]<%{public}s> Handle collision detected: %{public}s",  (uint8_t *)v24,  0x20u);
      unsigned int v35 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v36 = v95;
      swift_arrayDestroy(v95, 1LL, v35);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v37 = v98;
      swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      unsigned int v38 = v24;
      uint64_t v4 = v102;
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v17, 2LL);
    }

    a1 = v100;
  }

  else
  {
    swift_release(v17);
  }

  __int128 v67 = v15;
  swift_bridgeObjectRetain();
  id v68 = sub_1001E9210(a1, (uint64_t)v101, v14, (uint64_t)v67);
  swift_bridgeObjectRelease_n(v14, 2LL);

  if ((v68 & 1) != 0)
  {
    if ((v67[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0) {
      sub_1001D712C();
    }
    sub_1001D5D44();
    sub_1001CC604(0);
  }

  else
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    id v69 = sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
    id v70 = v67;
    __int16 v71 = (os_log_s *)Logger.logObject.getter(v70);
    __int16 v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc(22LL, -1LL);
      v102 = v69;
      __int16 v74 = v73;
      id v75 = (char **)swift_slowAlloc(8LL, -1LL);
      v101 = (os_log_t)swift_slowAlloc(32LL, -1LL);
      v103 = (uint64_t)v70;
      v104 = v101;
      *(_DWORD *)__int16 v74 = 138543618;
      __int16 v76 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v74 + 4, v74 + 12);
      *id v75 = v70;

      *(_WORD *)(v74 + 12) = 2082;
      v78 = *(void *)&v76[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      v77 = *(void *)&v76[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      v103 = sub_10015ADC4(v78, v77, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v74 + 14, v74 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "[%{public}@]<%{public}s> Leader lost from participants.",  (uint8_t *)v74,  0x16u);
      v79 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v75, 1LL, v79);
      swift_slowDealloc(v75, -1LL, -1LL);
      v80 = v101;
      swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    else
    {
    }

    if (v70[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] == 1)
    {
      v81 = v70;
      int8x16_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      v83 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc(22LL, -1LL);
        v85 = (char **)swift_slowAlloc(8LL, -1LL);
        v102 = swift_slowAlloc(32LL, -1LL);
        v103 = (uint64_t)v81;
        v104 = (os_log_t)v102;
        *(_DWORD *)v84 = 138543618;
        id v86 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v84 + 4, v84 + 12);
        *v85 = v81;

        *(_WORD *)(v84 + 12) = 2082;
        uint64_t v88 = *(void *)&v86[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        v87 = *(void *)&v86[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        v103 = sub_10015ADC4(v88, v87, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v84 + 14, v84 + 22);

        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "[%{public}@]<%{public}s> Leader lost from own participants.",  (uint8_t *)v84,  0x16u);
        v89 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v85, 1LL, v89);
        swift_slowDealloc(v85, -1LL, -1LL);
        uint64_t v90 = v102;
        swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      else
      {
      }

      unsigned __int8 v91 = sub_1001E8078();
      id v92 = swift_allocError(&type metadata for FastSyncSessionError, v91, 0LL, 0LL);
      *v93 = 4LL;
      sub_1001CF668(v92);
      swift_errorRelease(v92);
    }

    else
    {
      sub_1001D6B6C();
    }
  }

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    unsigned int v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      uint64_t v27 = *(_OWORD *)v26;
      id v28 = *(_OWORD *)(v26 + 16);
      unsigned int v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      unsigned int v40 = v28;
      sub_100160944((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_100160954(v26, (uint64_t)&v39);
      sub_100160800(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      int v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      int v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        id v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        unsigned int v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      int v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint32_t v17 = *(void *)(v8 + 48) + 40 * v16;
    uint64_t v18 = v39;
    id v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)uint32_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)sub_100160944(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

      uint64_t v10 = (v16 - 1) & v16;
      BOOL v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    id v20 = *v18;
    id v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(void *)(v9 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(v34, v20, v19);
    uint64_t result = Hasher._finalize()();
    id v22 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v23 = result & ~v22;
    id v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      id v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned int v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v24 == v27;
        if (v24 == v27) {
          id v24 = 0LL;
        }
        v26 |= v28;
        id v29 = *(void *)(v12 + 8 * v24);
      }

      while (v29 == -1);
      id v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }

    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }

      uint64_t v10 = (v16 - 1) & v16;
      unsigned int v41 = v17;
      BOOL v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }

    id v19 = 16 * v14;
    id v20 = v4;
    uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + v19);
    uint64_t v23 = *v21;
    id v22 = v21[1];
    id v24 = (uint64_t *)(*(void *)(v4 + 56) + v19);
    id v25 = *v24;
    unsigned int v26 = v24[1];
    Hasher.init(_seed:)(v42, *(void *)(v9 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(v42, v23, v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v9 + 32);
    id v28 = result & ~v27;
    id v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int v33 = v29 == v32;
        if (v29 == v32) {
          id v29 = 0LL;
        }
        v31 |= v33;
        id v34 = *(void *)(v12 + 8 * v29);
      }

      while (v34 == -1);
      uint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }

    *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
    unsigned int v35 = 16 * v30;
    uint64_t v36 = (void *)(*(void *)(v9 + 48) + v35);
    *uint64_t v36 = v23;
    v36[1] = v22;
    uint64_t v37 = (void *)(*(void *)(v9 + 56) + v35);
    dispatch_group_s *v37 = v25;
    v37[1] = v26;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    uint64_t v4 = v20;
    uint64_t v11 = v41;
    if (!v5) {
      return v9;
    }
  }

      BOOL v14 = (v21 - 1) & v21;
      id v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }

    uint64_t v23 = a4;
    id v24 = *(void *)(a4 + 48);
    id v25 = *(void *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    unsigned int v26 = *(void *)(v12 + 40);
    uint64_t v27 = sub_100156FEC( &qword_1003F9A88,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    id v28 = -1LL << *(_BYTE *)(v12 + 32);
    id v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      uint32_t v17 = v40;
    }

    else
    {
      uint64_t v32 = 0;
      int v33 = (unint64_t)(63 - v28) >> 6;
      uint32_t v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v34 = v30 == v33;
        if (v30 == v33) {
          uint64_t v30 = 0LL;
        }
        v32 |= v34;
        unsigned int v35 = *(void *)(v16 + 8 * v30);
      }

      while (v35 == -1);
      uint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }

    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))( *(void *)(v12 + 48) + v31 * v25,  v11,  v8);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v23;
    if (!a3) {
      goto LABEL_37;
    }
  }

        __break(1u);
        goto LABEL_25;
      }

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      id v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      id v24 = *v22;
      uint64_t v23 = v22[1];
      id v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100160944(v25, v38);
      }

      else
      {
        sub_100160800((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      unsigned int v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      id v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        BOOL v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            id v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        BOOL v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      int v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      dispatch_group_s *v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100160944(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  uint64_t v37 = 0LL;
LABEL_26:
  unsigned int v38 = swift_bridgeObjectRelease();
  if (!v37) {
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v48, v28);
  }
  uint64_t v39 = v28;
  unsigned int v40 = v45;
  (*(void (**)(uint64_t))((swift_isaMask & *v37) + 0x80LL))(v38);
  uint64_t result = v23((uint64_t *)v40, 1LL, v39);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    unsigned int v41 = v48;
    Date.timeIntervalSince(_:)(v48);

    unsigned int v42 = *(void (**)(char *, uint64_t))(v51 + 8);
    v42(v41, v39);
    return ((uint64_t (*)(char *, uint64_t))v42)(v40, v39);
  }

  return result;
}

  uint64_t v39 = 0LL;
LABEL_26:
  unsigned int v40 = swift_bridgeObjectRelease();
  if (!v39) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v18, v32);
  }
  unsigned int v41 = v45;
  (*(void (**)(uint64_t))((swift_isaMask & *v39) + 0x80LL))(v40);
  uint64_t result = v27(v41, 1LL, v32);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    Date.timeIntervalSince(_:)(v18);

    unsigned int v42 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v42(v18, v32);
    return ((uint64_t (*)(char *, uint64_t))v42)(v41, v32);
  }

  return result;
}

    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_10016031C(a1);
    return swift_release(a3);
  }

  sub_10020566C(v19, a4 & 1);
  uint64_t v21 = sub_10015CAD4(v11, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    int v16 = v21;
    uint64_t v23 = (void *)*a5;
    if ((v20 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    id v24 = v23[7];
    id v25 = 8 * v16;

    *(void *)(v24 + v25) = v13;
    goto LABEL_13;
  }

      uint64_t v18 = (v24 - 1) & v24;
      id v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }

    unsigned int v26 = a4;
    uint64_t v27 = *(void *)(a4 + 48);
    id v28 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    id v29 = *(void *)(v16 + 40);
    uint64_t v30 = sub_1001604E8(v43, v42, v44);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    uint64_t v31 = -1LL << *(_BYTE *)(v16 + 32);
    uint64_t v32 = result & ~v31;
    int v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      id v34 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned int v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v37 = v33 == v36;
        if (v33 == v36) {
          int v33 = 0LL;
        }
        v35 |= v37;
        unsigned int v38 = *(void *)(v20 + 8 * v33);
      }

      while (v38 == -1);
      id v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }

    *(void *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))( *(void *)(v16 + 48) + v34 * v28,  v15,  v13);
    ++*(void *)(v16 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v26;
    if (!a3) {
      goto LABEL_37;
    }
  }

        uint64_t v13 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      id v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0) {
        sub_100160944(v23, v33);
      }
      else {
        sub_100160800((uint64_t)v23, (uint64_t)v33);
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v22);
      id v24 = -1LL << *(_BYTE *)(v8 + 32);
      id v25 = result & ~v24;
      unsigned int v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        int v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          id v29 = v26 == v28;
          if (v26 == v28) {
            unsigned int v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        int v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v8 + 48) + 8 * v16) = v22;
      uint64_t result = (uint64_t)sub_100160944(v33, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_44:
  *uint64_t v3 = v8;
  return result;
}

        __break(1u);
        goto LABEL_25;
      }

NSMutableDictionary *sub_100069DB4(void *a1)
{
  id v2 = a1;
  id v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    uint64_t v7 = _kMRPlaybackQueueRequestIDUserInfoKey;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v23 + 1) + 8 * (void)v8) key]);
        uint64_t v10 = v9;
        if (v9)
        {
          id v11 = (id)objc_claimAutoreleasedReturnValue([v9 userData]);

          if (v11)
          {
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 userData]);
            uint64_t v13 = MSVPropertyListDataClasses();
            BOOL v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            uint64_t v15 = MRCreateFromData(v12, v14);
            int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

            uint32_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v7]);
            id v11 = [v17 copy];
          }

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);

          if (v18)
          {
            id v19 = v11;
            if (!v11)
            {
              id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              id v19 = v1;
            }

            id v20 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
            -[NSMutableDictionary setObject:forKey:](v22, "setObject:forKey:", v19, v20);

            if (!v11) {
          }
            }
        }

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v5 != v8);
      id v5 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v5);
  }

  return v22;
}

void sub_100069FC0(id *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1[4])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    if ([v5 isEqual:v6])
    {
    }

    else
    {
      unsigned int v7 = [a1[5] hasRequest:v5];

      if (!v7) {
        goto LABEL_9;
      }
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] requestForSubscribedContentItemIdentifier:v9]);

LABEL_9:
}

void sub_10006A08C(uint64_t a1)
{
  id v1 = *(dispatch_group_s **)(a1 + 32);
  if (v1) {
    dispatch_group_leave(v1);
  }
}

id sub_10006A224(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendContentItemTransaction:*(void *)(a1 + 40) request:*(void *)(a1 + 48) playerPath:*(void *)(a1 + 56)];
}

void sub_10006AF48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interruptions]);
  [v7 start];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRDStreamCapacityManager sharedManager](&OBJC_CLASS___MRDStreamCapacityManager, "sharedManager"));
  id v9 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@<%@>",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10006B0D0;
  v13[3] = &unk_10039C7B8;
  id v14 = *(id *)(a1 + 32);
  id v15 = v6;
  id v16 = v5;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 64);
  id v10 = *(id *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 72);
  id v22 = v10;
  id v11 = v5;
  id v12 = v6;
  [v8 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v11 reason:v9 completion:v13];
}

id sub_10006B0D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interruptions]);
  [v2 end];

  if (!*(void *)(a1 + 40))
  {
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v16 = _MRLogForCategory(10LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    BOOL v17 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      if (v14)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)(a1 + 64);
        uint64_t v19 = *(void *)(a1 + 72);
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v21 = *(void *)(a1 + 56);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 80)];
        int v38 = 138544386;
        uint64_t v39 = v18;
        __int16 v40 = 2114;
        uint64_t v41 = v19;
        __int16 v42 = 2112;
        uint64_t v43 = v20;
        __int16 v44 = 2114;
        uint64_t v45 = v21;
        __int16 v46 = 2048;
        uint64_t v47 = v22;
        __int128 v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        __int128 v24 = v6;
        uint32_t v25 = 52;
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v38, v25);
        goto LABEL_20;
      }

      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v30 = *(void *)(a1 + 64);
      uint64_t v31 = *(void *)(a1 + 72);
      uint64_t v32 = *(void *)(a1 + 48);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v38 = 138544130;
      uint64_t v39 = v30;
      __int16 v40 = 2114;
      uint64_t v41 = v31;
      __int16 v42 = 2112;
      uint64_t v43 = v32;
      __int16 v44 = 2048;
      uint64_t v45 = v33;
      __int128 v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    }

    else
    {
      if (!v14)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v34 = *(void *)(a1 + 64);
        uint64_t v35 = *(void *)(a1 + 72);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 80)];
        int v38 = 138543874;
        uint64_t v39 = v34;
        __int16 v40 = 2114;
        uint64_t v41 = v35;
        __int16 v42 = 2048;
        uint64_t v43 = v36;
        __int128 v23 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int128 v24 = v6;
        uint32_t v25 = 32;
        goto LABEL_19;
      }

      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v26 = *(void *)(a1 + 72);
      uint64_t v28 = *(void *)(a1 + 56);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v38 = 138544130;
      uint64_t v39 = v27;
      __int16 v40 = 2114;
      uint64_t v41 = v26;
      __int16 v42 = 2114;
      uint64_t v43 = v28;
      __int16 v44 = 2048;
      uint64_t v45 = v29;
      __int128 v23 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    }

    __int128 v24 = v6;
    uint32_t v25 = 42;
    goto LABEL_19;
  }

  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = _MRLogForCategory(10LL, v3);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 56);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v38 = 138544386;
      uint64_t v39 = v9;
      __int16 v40 = 2114;
      uint64_t v41 = v8;
      __int16 v42 = 2114;
      uint64_t v43 = v10;
      __int16 v44 = 2114;
      uint64_t v45 = v11;
      __int16 v46 = 2048;
      uint64_t v47 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v38,  0x34u);
LABEL_20:
    }
  }

  else if (v7)
  {
    sub_1002B6384(a1);
  }

uint64_t sub_10006B458(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006B46C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10006B4CC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 nowPlayingServer]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 localOriginClient]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceInfoDataSource]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceInfo]);

  unsigned int v7 = [v6 parentGroupContainsDiscoverableGroupLeader];
  uint64_t v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 setDiscoverableGroupLeader:1];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originForward]);
    [v9 start];

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10006B6C8;
    v29[3] = &unk_100399F10;
    uint64_t v10 = &v30;
    id v30 = *(id *)(a1 + 32);
    uint64_t v11 = &v31;
    id v31 = *(id *)(a1 + 64);
    +[MRDOriginForwarder waitUntilForwardingOperationsHaveFinished:]( &OBJC_CLASS___MRDOriginForwarder,  "waitUntilForwardingOperationsHaveFinished:",  v29);
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 groupUID]);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = v12;
    BOOL v17 = v13;
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v8 findEndpoint]);
    [v19 start];

    uint64_t v20 = *(void **)(a1 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 groupUID]);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 56);
    __int128 v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472LL;
    uint32_t v25 = sub_10006B764;
    uint64_t v26 = &unk_10039C808;
    uint64_t v10 = &v27;
    id v27 = *(id *)(a1 + 32);
    uint64_t v11 = &v28;
    id v28 = *(id *)(a1 + 64);
    uint64_t v18 = &v23;
    uint64_t v16 = v20;
    BOOL v17 = v13;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
  }

  objc_msgSend( v16,  "_findEndpointContainingGroupID:andDeviceID:requestID:completion:",  v17,  v14,  v15,  v18,  v23,  v24,  v25,  v26);
}

void sub_10006B6C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originForward]);
  [v2 end];

  uint64_t v3 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  id v5 = -[MRPlayerPath initWithOrigin:client:player:](v3, "initWithOrigin:client:player:", v4, 0LL, 0LL);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006B764(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 findEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10006B7E0(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_10006B7EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) removeLocalDevice]);
    [v4 start];

    id v5 = *(void **)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
    uint64_t v7 = *(void *)(a1 + 56);
    qos_class_t v8 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v8, 0LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10006B964;
    v12[3] = &unk_10039C858;
    id v13 = *(id *)(a1 + 40);
    id v14 = v3;
    [v5 removeOutputDevices:v6 initiator:v7 withCallbackQueue:v10 block:v12];
  }

  else
  {
    uint64_t v11 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  39LL,  @"Failed to remove local device from existing context");
    (*((void (**)(id, NSError *))v3 + 2))(v3, v11);
  }
}

uint64_t sub_10006B964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removeLocalDevice]);
  [v4 endWithError:a2];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006B9B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
    id v5 = (NSError *)objc_claimAutoreleasedReturnValue([v4 outputContextForOutputDeviceUID:*(void *)(a1 + 40)]);

    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) addLocalDevice]);
      [v6 start];

      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
      uint64_t v8 = *(void *)(a1 + 56);
      qos_class_t v9 = qos_class_self();
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(v9, 0LL);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_10006BB8C;
      v13[3] = &unk_10039C858;
      id v14 = *(id *)(a1 + 48);
      id v15 = v3;
      -[NSError setOutputDevices:initiator:withCallbackQueue:block:]( v5,  "setOutputDevices:initiator:withCallbackQueue:block:",  v7,  v8,  v11,  v13);
    }

    else
    {
      id v12 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  32LL,  @"Failed to reserve output context for local device");
      (*((void (**)(id, NSError *))v3 + 2))(v3, v12);
    }
  }

  else
  {
    id v5 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  39LL,  @"Failed to find local device from existing context");
    (*((void (**)(id, NSError *))v3 + 2))(v3, v5);
  }
}

uint64_t sub_10006BB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addLocalDevice]);
  [v4 endWithError:a2];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006BBDC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v10 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 reloadDeviceInfo]);
  [v4 start];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nowPlayingServer]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localOriginClient]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceInfoDataSource]);
  [v8 reloadDeviceInfoImmediately];

  qos_class_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) reloadDeviceInfo]);
  [v9 end];

  v10[2](v10, 0LL);
}

void sub_10006BCAC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  32LL,  @"Failed prepare outputContext for nowPlayingSession");
    (*(void (**)(uint64_t, void, NSError *))(v2 + 16))(v2, 0LL, v3);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_10006C5B8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v5 && !v6)
  {
    BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v12) {
        goto LABEL_22;
      }
      uint64_t v14 = a1[5];
      uint64_t v13 = a1[6];
      uint64_t v15 = a1[4];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544386;
      uint64_t v39 = v14;
      __int16 v40 = 2114;
      uint64_t v41 = v13;
      __int16 v42 = 2112;
      id v43 = v5;
      __int16 v44 = 2114;
      uint64_t v45 = v15;
      __int16 v46 = 2048;
      uint64_t v47 = v17;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v19 = v11;
      uint32_t v20 = 52;
      goto LABEL_16;
    }

    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v31 = a1[5];
    uint64_t v32 = a1[6];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v16 timeIntervalSinceDate:a1[7]];
    int v38 = 138544130;
    uint64_t v39 = v31;
    __int16 v40 = 2114;
    uint64_t v41 = v32;
    __int16 v42 = 2112;
    id v43 = v5;
    __int16 v44 = 2048;
    uint64_t v45 = v33;
    uint64_t v18 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_15;
  }

  if (v6)
  {
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v21) {
        goto LABEL_22;
      }
      uint64_t v23 = a1[5];
      uint64_t v22 = a1[6];
      uint64_t v24 = a1[4];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544386;
      uint64_t v39 = v23;
      __int16 v40 = 2114;
      uint64_t v41 = v22;
      __int16 v42 = 2114;
      id v43 = v6;
      __int16 v44 = 2114;
      uint64_t v45 = v24;
      __int16 v46 = 2048;
      uint64_t v47 = v25;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v38,  0x34u);
      goto LABEL_17;
    }

    if (v21) {
      sub_1002B6444((uint64_t)a1);
    }
  }

  else
  {
    BOOL v26 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v26) {
        goto LABEL_22;
      }
      uint64_t v28 = a1[5];
      uint64_t v27 = a1[6];
      uint64_t v29 = (void *)a1[4];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138544130;
      uint64_t v39 = v28;
      __int16 v40 = 2114;
      uint64_t v41 = v27;
      __int16 v42 = 2114;
      id v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_15:
      uint64_t v19 = v11;
      uint32_t v20 = 42;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v38, v20);
LABEL_17:

      goto LABEL_22;
    }

    if (v26)
    {
      uint64_t v34 = a1[5];
      uint64_t v35 = a1[6];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v38 = 138543874;
      uint64_t v39 = v34;
      __int16 v40 = 2114;
      uint64_t v41 = v35;
      __int16 v42 = 2048;
      id v43 = v36;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v19 = v11;
      uint32_t v20 = 32;
      goto LABEL_16;
    }
  }

id sub_10006C92C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDevices]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mr_first:", &stru_10039C8F0));

  if (!v5)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 designatedGroupLeader]);
    if ([v5 containsUID:a1[4]]
      && (uint32_t v20 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDevices]),
          id v21 = [v20 count],
          v20,
          !v21))
    {
      if (v5) {
        goto LABEL_2;
      }
    }

    else
    {

      id v5 = 0LL;
    }

LABEL_2:
  if (([v5 isAirPlayReceiverSessionActive] & 1) == 0)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v23 = [v22 verboseRemoteControlDiscoveryLogging];

    if (v23)
    {
      uint64_t v25 = _MRLogForCategory(10LL, v24);
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = a1[5];
        uint64_t v28 = a1[6];
        uint64_t v29 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v3 debugName]);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
        uint64_t v32 = -[NSString initWithFormat:]( v29,  "initWithFormat:",  @"Rejecting endpoint %@ because localDevice %@ isAirPlayReceiverSessionActive=NO",  v30,  v31);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v35 = v27;
        __int16 v36 = 2114;
        uint64_t v37 = v28;
        __int16 v38 = 2112;
        uint64_t v39 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }

    goto LABEL_16;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDevices]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 groupID]);

  id v9 = [v8 containsString:a1[7]];
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v11 = [v10 verboseRemoteControlDiscoveryLogging];

    if (v11)
    {
      uint64_t v13 = _MRLogForCategory(10LL, v12);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = a1[5];
        uint64_t v16 = a1[6];
        uint64_t v17 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 debugName]);
        uint64_t v19 = -[NSString initWithFormat:]( v17,  "initWithFormat:",  @"Rejecting endpoint %@ because endpointGroupID %@ != %@",  v18,  v8,  a1[7]);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v35 = v15;
        __int16 v36 = 2114;
        uint64_t v37 = v16;
        __int16 v38 = 2112;
        uint64_t v39 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }
  }

LABEL_17:
  return v9;
}

  id v6 = 0;
LABEL_6:

  return v6;
}

BOOL sub_10006CC48(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isPrimaryLocalDevice](a2, "isPrimaryLocalDevice");
}

void sub_10006CC50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Discovered local device on endpoint: %@",  v5));
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v26 = v11;
    __int16 v27 = 2114;
    uint64_t v28 = v12;
    __int16 v29 = 2112;
    uint64_t v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  if (v5)
  {
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  MREndpointConnectionReasonUserInfoKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  MREndpointConnectionCorrelationIDUserInfoKey);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10006CEC8;
    v22[3] = &unk_10039BAB8;
    id v23 = v5;
    id v24 = *(id *)(a1 + 48);
    [v23 connectToExternalDeviceWithUserInfo:v13 completion:v22];

    id v14 = v23;
  }

  else
  {
    id v21 = v6;
    uint64_t v13 = (NSMutableDictionary *)v6;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 routingServer]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 hostedRoutingService]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 hostedRoutingController]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 discoverySession]);
    id v14 = (id)objc_claimAutoreleasedReturnValue([v19 localEndpointConnection]);

    if (!v14)
    {
      uint32_t v20 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 131LL);

      uint64_t v13 = (NSMutableDictionary *)v20;
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    id v6 = v21;
  }
}

void sub_10006CEC8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
    if (v7)
    {
      id v3 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
      id v5 = -[MRPlayerPath initWithOrigin:client:player:](v3, "initWithOrigin:client:player:", v4, 0LL, 0LL);

      (*(void (**)(void, NSError *, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v5, 0LL);
    }

    else
    {
      uint64_t v6 = *(void *)(a1 + 40);
      id v5 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  121LL,  @"endpoint connected but then closed immediately after");
      (*(void (**)(uint64_t, void, NSError *))(v6 + 16))(v6, 0LL, v5);
    }
  }

void sub_10006D1F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10006D20C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);

  [WeakRetained ingestData:v4];
}

void sub_10006D448(_Unwind_Exception *a1)
{
}

void sub_10006D4B4(_Unwind_Exception *a1)
{
}

void sub_10006D6F0(_Unwind_Exception *a1)
{
}

id sub_10006D88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _exportDescriptorForOutputDevice:v3 endpoint:*(void *)(a1 + 40) remoteControl:1]);
  }

  return v4;
}

BOOL sub_10006DC3C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice deviceType](a2, "deviceType") == 1;
}

id sub_10006E540(id a1, MRDGroupSessionParticipant *a2)
{
  uint64_t v2 = a2;
  else {
    id v3 = 0LL;
  }

  return v3;
}

id sub_10006E588(id a1, MRDGroupSessionParticipant *a2)
{
  uint64_t v2 = a2;
  else {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v2, "identifier"));
  }

  return v3;
}

id sub_10006E5D0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10006E740(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006ECC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);

    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v20 = _MRLogForCategory(10LL, v19);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v17)
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v31 = *(void *)(a1 + 40);
        uint64_t v30 = *(void *)(a1 + 48);
        uint64_t v32 = *(void **)(a1 + 32);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v43 = 138544130;
        uint64_t v44 = v31;
        __int16 v45 = 2114;
        uint64_t v46 = v30;
        __int16 v47 = 2114;
        id v48 = v32;
        __int16 v49 = 2048;
        uint64_t v50 = v33;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v35 = v10;
        uint32_t v36 = 42;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v40 = *(void *)(a1 + 40);
        uint64_t v41 = *(void *)(a1 + 48);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v43 = 138543874;
        uint64_t v44 = v40;
        __int16 v45 = 2114;
        uint64_t v46 = v41;
        __int16 v47 = 2048;
        id v48 = v42;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v35 = v10;
        uint32_t v36 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v43, v36);
      goto LABEL_20;
    }

    if (v18)
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v43 = 138544386;
      uint64_t v44 = v22;
      __int16 v45 = 2114;
      uint64_t v46 = v23;
      __int16 v47 = 2112;
      id v48 = v15;
      __int16 v49 = 2114;
      uint64_t v50 = v24;
      __int16 v51 = 2048;
      uint64_t v52 = v26;
      __int16 v27 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v28 = v10;
      uint32_t v29 = 52;
    }

    else
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v38 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v43 = 138544130;
      uint64_t v44 = v37;
      __int16 v45 = 2114;
      uint64_t v46 = v38;
      __int16 v47 = 2112;
      id v48 = v15;
      __int16 v49 = 2048;
      uint64_t v50 = v39;
      __int16 v27 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v28 = v10;
      uint32_t v29 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v43, v29);

    goto LABEL_20;
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = _MRLogForCategory(10LL, v6);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v43 = 138544386;
      uint64_t v44 = v13;
      __int16 v45 = 2114;
      uint64_t v46 = v12;
      __int16 v47 = 2114;
      id v48 = v7;
      __int16 v49 = 2114;
      uint64_t v50 = v14;
      __int16 v51 = 2048;
      uint64_t v52 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v43,  0x34u);
LABEL_20:
    }
  }

  else if (v11)
  {
    sub_1002B6504();
  }

uint64_t sub_10006F08C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006F0A0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10006F100(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 outputContextForOutputDeviceUIDs:*(void *)(a1 + 40) strict:1]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) modifyOutputContext]);
    [v4 start];

    id v5 = -[MRGroupTopologyModificationRequest initWithRequestDetails:type:outputDeviceUIDs:]( objc_alloc(&OBJC_CLASS___MRGroupTopologyModificationRequest),  "initWithRequestDetails:type:outputDeviceUIDs:",  *(void *)(a1 + 48),  3LL,  *(void *)(a1 + 40));
    qos_class_t v6 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v6, 0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10006F298;
    v11[3] = &unk_10039CA40;
    id v12 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 32);
    id v16 = v9;
    uint64_t v13 = v10;
    id v14 = v3;
    uint64_t v17 = *(void *)(a1 + 72);
    id v15 = *(id *)(a1 + 48);
    [v14 modifyTopologyWithRequest:v5 withReplyQueue:v8 completion:v11];
  }

  else
  {
    id v5 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 32LL);
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10006F298(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifyOutputContext]);
  [v4 endWithError:v3];

  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    qos_class_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 28));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) searchForGroupUID]);
    [v7 start];

    uint64_t v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueIdentifier]);
    double v10 = *(double *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10006F3D4;
    v12[3] = &unk_10039A0A0;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 64);
    [v8 _searchForContextUID:v9 timeout:v11 details:v12 completion:v10];
  }
}

void sub_10006F3D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 searchForGroupUID]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006F450(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) searchForBuddy]);
  [v4 end];

  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createRemoteHostedEndpoint]);
    [v5 start];

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 groupLeader]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uid]);
    double v8 = *(double *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10006F588;
    v11[3] = &unk_10039CA90;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    +[MRDCreateRemoteHostedEndpointRequest createRemoteHostedEndpointWithGroupLeaderOutputDeviceUID:withOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDCreateRemoteHostedEndpointRequest,  "createRemoteHostedEndpointWithGroupLeaderOutputDeviceUID:withOutputDeviceUIDs:timeout:details:completion:",  v7,  v10,  v9,  v11,  v8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10006F588(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createRemoteHostedEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006FA84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1002B65BC();
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v23 = 138543874;
      uint64_t v24 = v18;
      __int16 v25 = 2114;
      uint64_t v26 = v12;
      __int16 v27 = 2048;
      id v28 = v19;
      id v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v16 = v10;
      uint32_t v17 = 32;
      goto LABEL_10;
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v23 = 138544130;
    uint64_t v24 = v11;
    __int16 v25 = 2114;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    id v28 = v5;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    id v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v23, v17);
  }

  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v5,  v6,  v20,  v21,  v22);
}

void sub_10006FC80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 clusterComposition]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10006FD98;
  v17[3] = &unk_10039CAE0;
  id v11 = v7;
  id v18 = v11;
  unsigned int v12 = objc_msgSend(v10, "mr_any:", v17);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryID]);
  unsigned __int8 v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

  if (!v12 || (v14 & 1) != 0)
  {
    id v15 = 0LL;
    id v16 = 0LL;
  }

  else
  {
    id v15 = v11;
    id v16 = v8;
  }

  (*(void (**)(void, id, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v15, v16);
}

id sub_10006FD98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 groupLeader]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);

  id v6 = [v4 containsUID:v5];
  return v6;
}

void sub_1000700B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1002B65BC();
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v23 = 138543874;
      uint64_t v24 = v18;
      __int16 v25 = 2114;
      uint64_t v26 = v12;
      __int16 v27 = 2048;
      id v28 = v19;
      id v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v16 = v10;
      uint32_t v17 = 32;
      goto LABEL_10;
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v23 = 138544130;
    uint64_t v24 = v11;
    __int16 v25 = 2114;
    uint64_t v26 = v12;
    __int16 v27 = 2112;
    id v28 = v5;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    id v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v23, v17);
  }

  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v5,  v6,  v20,  v21,  v22);
}

id sub_1000702AC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDevices]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupContextID]);

  id v6 = [v5 isEqualToString:*(void *)(a1 + 32)];
  return v6;
}

void sub_100070318(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "mr_errorByEnvelopingWithMRError:", 47));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_100070478(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100070AC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v5 && !v6)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544130;
    uint64_t v22 = v11;
    __int16 v23 = 2114;
    uint64_t v24 = v12;
    __int16 v25 = 2112;
    id v26 = v5;
    __int16 v27 = 2048;
    uint64_t v28 = v14;
    id v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v21, v17);

    goto LABEL_11;
  }

  if (!v6)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138543874;
    uint64_t v22 = v18;
    __int16 v23 = 2114;
    uint64_t v24 = v12;
    __int16 v25 = 2048;
    id v26 = v19;
    id v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 32;
    goto LABEL_10;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1002B65BC();
  }
LABEL_11:

  [*(id *)(a1 + 56) trackWithError:v6];
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20) {
    (*(void (**)(uint64_t, id, id, void))(v20 + 16))(v20, v5, v6, *(void *)(a1 + 56));
  }
}

uint64_t sub_100070CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100070CE4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

id sub_100070D44(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_100070D50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectToTransientExternalDevice]);
  [v4 endWithError:v3];

  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createHostedEndpoint]);
    [v5 start];

    id v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    qos_class_t v8 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v8, 0LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100070E98;
    v14[3] = &unk_10039CBA8;
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 56);
    id v13 = *(void **)(a1 + 64);
    id v15 = v11;
    uint64_t v16 = v12;
    uint64_t v20 = *(void *)(a1 + 80);
    id v17 = v13;
    id v19 = *(id *)(a1 + 72);
    id v18 = *(id *)(a1 + 40);
    [v6 createHostedEndpointWithOutputDeviceUIDs:v7 queue:v10 completion:v14];
  }
}

void sub_100070E98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createHostedEndpoint]);
  [v7 endWithError:v6];

  if (v6 || ([0 isInformational] & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    qos_class_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) searchForGroupUID]);
    [v8 start];

    double v9 = *(double *)(a1 + 72);
    id v11 = *(void **)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10007103C;
    v17[3] = &unk_10039A0A0;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 64);
    [v11 _searchForGroupUID:v5 timeout:v10 details:v17 completion:v9];
  }

  dispatch_time_t v12 = dispatch_time(0LL, 7000000000LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
  uint64_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000710B8;
  block[3] = &unk_100399250;
  id v16 = *(id *)(a1 + 56);
  dispatch_after(v12, v14, block);
}

void sub_10007103C(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 searchForGroupUID]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000710B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) disconnect:0];
}

void sub_100071370(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1002B65BC();
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      dispatch_time_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v23 = 138543874;
      uint64_t v24 = v18;
      __int16 v25 = 2114;
      id v26 = v12;
      __int16 v27 = 2048;
      id v28 = v19;
      id v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v16 = v10;
      uint32_t v17 = 32;
      goto LABEL_10;
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    dispatch_time_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v23 = 138544130;
    uint64_t v24 = v11;
    __int16 v25 = 2114;
    id v26 = v12;
    __int16 v27 = 2112;
    id v28 = v5;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    id v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v23, v17);
  }

  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v5,  v6,  v20,  v21,  v22);
}

id sub_10007156C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDevices]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  id v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  return v6;
}

void sub_1000715D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "mr_errorByEnvelopingWithMRError:", 129));
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

  ;
}

uint64_t sub_10007164C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void sub_100071B04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_100071B28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100071B38(uint64_t a1)
{
}

void sub_100071B40(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8 = a2;
  if ([v8 isClusterLeader])
  {
    [*(id *)(a1 + 32) removeObjectAtIndex:a3];
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

BOOL sub_100071BB4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice supportsMultiplayer](a2, "supportsMultiplayer");
}

BOOL sub_100071BBC(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isPrimaryLocalDevice](a2, "isPrimaryLocalDevice");
}

uint64_t sub_100071BC4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  uint64_t v5 = [v3 isEqual:v4] ^ 1;

  return v5;
}

id sub_100071D20(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___MRAVOutputDeviceDescription);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice descriptor](v2, "descriptor"));

  uint64_t v5 = -[MRAVOutputDeviceDescription initWithDescriptor:](v3, "initWithDescriptor:", v4);
  return v5;
}

id sub_100071DA0(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___MRAVOutputDeviceDescription);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice descriptor](v2, "descriptor"));

  uint64_t v5 = -[MRAVOutputDeviceDescription initWithDescriptor:](v3, "initWithDescriptor:", v4);
  return v5;
}

BOOL sub_100071E20(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

void sub_10007203C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_createStereoPairRepresentationFrom:"));
  [v1 addObject:v2];
}

BOOL sub_100072200(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice") ^ 1;
}

id sub_10007221C(id a1, MRAVOutputDevice *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS____MRAVOutputDeviceDescriptorProtobuf);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice uid](v2, "uid"));
  -[_MRAVOutputDeviceDescriptorProtobuf setUniqueIdentifier:](v3, "setUniqueIdentifier:", v4);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice modelID](v2, "modelID"));
  -[_MRAVOutputDeviceDescriptorProtobuf setModelID:](v3, "setModelID:", v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice name](v2, "name"));
  -[_MRAVOutputDeviceDescriptorProtobuf setName:](v3, "setName:", v6);

  -[_MRAVOutputDeviceDescriptorProtobuf setDeviceType:](v3, "setDeviceType:", 1LL);
  -[_MRAVOutputDeviceDescriptorProtobuf setDeviceSubType:](v3, "setDeviceSubType:", 12LL);
  return v3;
}

void sub_100072970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100072994(uint64_t a1, void *a2)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "msv_compactMap:", &stru_10039CD40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v4 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setMediaBundlesInFocus:v3];

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = objc_loadWeakRetained(v4);
  [v7 setBundlesInFocus:v6];
}

NSString *__cdecl sub_100072A30(id a1, NSString *a2, MRDBundleMediaRecommendationEligibility *a3)
{
  uint64_t v4 = a2;
  if (-[MRDBundleMediaRecommendationEligibility isEligible](a3, "isEligible")) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_100072B40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100072B58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100072B68(uint64_t a1)
{
}

void sub_100072B70(uint64_t a1)
{
}

void sub_100072C1C(uint64_t a1)
{
}

void sub_100072CF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100072D08(uint64_t a1)
{
}

void sub_100072DB4(uint64_t a1)
{
  id v4 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v2 = *(void **)(a1 + 40);
  id v3 = v2;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v2);
}

void sub_100072ED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100072EE8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

unsigned __int8 *sub_100072F78(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 4);
  int v2 = *(unsigned __int8 *)(v1 + 8);
  int v3 = result[40];
  *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = v3;
  if (v2 != v3) {
    return (unsigned __int8 *)[*((id *)result + 4) notifyDelegate];
  }
  return result;
}

void sub_100073038(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  char v3 = objc_opt_respondsToSelector(v2, "mediaApplicationsInFocus:");

  if ((v3 & 1) != 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v4 mediaApplicationsInFocus:*(void *)(a1 + 40)];
  }

void sub_100073120(id a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[MRSystemMediaBundles systemMediaBundleIDForBundle:type:]( &OBJC_CLASS___MRSystemMediaBundles,  "systemMediaBundleIDForBundle:type:",  0LL,  1LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[MRSystemMediaBundles systemMediaBundleIDForBundle:type:]( &OBJC_CLASS___MRSystemMediaBundles,  "systemMediaBundleIDForBundle:type:",  2LL,  1LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v4, v1, 0LL));
  char v3 = (void *)qword_1003FDD50;
  qword_1003FDD50 = v2;
}

void sub_1000737A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000737E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[BSServiceQuality userInitiated](&OBJC_CLASS___BSServiceQuality, "userInitiated"));
  [v3 setServiceQuality:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[MRDUIControllerConnection serviceInterface]( &OBJC_CLASS___MRDUIControllerConnection,  "serviceInterface"));
  [v3 setInterface:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  [v3 setInterfaceTarget:v6];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100073998;
  v11[3] = &unk_10039CDB0;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  [v3 setInvalidationHandler:v11];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100073A74;
  v9[3] = &unk_10039CDB0;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  [v3 setInterruptionHandler:v9];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100073B4C;
  v7[3] = &unk_10039CDB0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  [v3 setActivationHandler:v7];
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
}

void sub_100073964(_Unwind_Exception *a1)
{
}

void sub_100073998(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _MRLogForCategory(11LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    id v8 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRUIControllerConnection] <%p> BSServiceConnection invalidate.",  (uint8_t *)&v7,  0xCu);
  }

  if (WeakRetained)
  {
    uint64_t v5 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained invalidationHandler]);
    v5[2]();

    uint64_t v6 = (void *)WeakRetained[2];
    WeakRetained[2] = 0LL;
  }
}

void sub_100073A74(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _MRLogForCategory(11LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    int v7 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRUIControllerConnection] <%p> BSServiceConnection interrupt. Re-activating.",  (uint8_t *)&v6,  0xCu);
  }

  if (WeakRetained)
  {
    uint64_t v5 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained invalidationHandler]);
    v5[2]();

    [WeakRetained[2] activate];
  }
}

void sub_100073B4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _MRLogForCategory(11LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    id v6 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRUIControllerConnection] <%p> BSServiceConnection activated.",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100073C3C(id a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[BSMutableServiceInterface interfaceWithIdentifier:]( &OBJC_CLASS___BSMutableServiceInterface,  "interfaceWithIdentifier:",  @"com.apple.mediaremoteui.ui-service"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[BSObjCProtocol protocolForProtocol:]( &OBJC_CLASS___BSObjCProtocol,  "protocolForProtocol:",  &OBJC_PROTOCOL___MRUIServerProtocol));
  [v5 setServer:v1];

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[BSObjCProtocol protocolForProtocol:]( &OBJC_CLASS___BSObjCProtocol,  "protocolForProtocol:",  &OBJC_PROTOCOL___MRUIClientProtocol));
  [v5 setClient:v2];

  [v5 setClientMessagingExpectation:0];
  id v3 = [v5 copy];
  id v4 = (void *)qword_1003FDD58;
  qword_1003FDD58 = (uint64_t)v3;
}

id sub_1000741B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_1000742EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000743C4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10007454C(id *a1, void *a2)
{
  id v3 = a2;
  [a1[4] trackWithError:v3];
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[5] notificationQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100074600;
  v7[3] = &unk_10039AD10;
  id v5 = a1[6];
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100074600(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_100074614(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingCompletions]);
  id v4 = [v3 count];

  if (v4)
  {
    uint64_t v6 = _MRLogForCategory(12LL, v5);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1002B67D4();
    }

    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = MRGroupSessionError;
    id v10 = @"Cannot start session while starting/joining is in progress.";
LABEL_9:
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  v9,  5LL,  v10));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v19);
    goto LABEL_10;
  }

  if (*(void *)(*(void *)v2 + 24LL))
  {
    uint64_t v11 = _MRLogForCategory(12LL, v5);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1002B6768(v2, v12, v13, v14, v15, v16, v17, v18);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = MRGroupSessionError;
    id v10 = @"Cannot start session while already in a session.";
    goto LABEL_9;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v20 localActiveIdentity]);

  if (v19
    && (uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 displayName]), v22, v22))
  {
    int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(a1 + 32) setLastSessionEventDate:v23];
    id v24 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v25 groupSessionNearbyGroupCreateTimeout];
    double v27 = v26;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_10007496C;
    v43[3] = &unk_100399508;
    id v44 = *(id *)(a1 + 40);
    id v28 = [v24 initWithTimeout:@"NearbyGroupCreate" reason:v43 handler:v27];

    __int16 v29 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000749D4;
    block[3] = &unk_10039CE70;
    void block[4] = *(void *)(a1 + 32);
    id v36 = v23;
    id v40 = *(id *)(a1 + 48);
    id v37 = *(id *)(a1 + 40);
    id v38 = v28;
    id v39 = v19;
    char v42 = *(_BYTE *)(a1 + 64);
    id v41 = *(id *)(a1 + 56);
    id v30 = v28;
    id v31 = v23;
    dispatch_async(v29, block);
  }

  else
  {
    uint64_t v32 = _MRLogForCategory(12LL, v21);
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      sub_1002B673C();
    }

    uint64_t v34 = *(void *)(a1 + 48);
    id v31 = (id)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  4LL,  @"Cannot host session without identity."));
    (*(void (**)(uint64_t, id))(v34 + 16))(v34, v31);
  }

LABEL_10:
}

void sub_10007496C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(12LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1002B6800();
  }

  [*(id *)(a1 + 32) trackWithError:v3];
}

void sub_1000749D4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastSessionEventDate]);
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {

    goto LABEL_7;
  }

  uint64_t v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if ((v5 & 1) != 0)
  {
LABEL_7:
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) nearbyGroup]);
    [v11 start];

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100074BAC;
    v15[3] = &unk_10039CE98;
    id v16 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 72);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = v14;
    id v20 = *(id *)(a1 + 64);
    char v23 = *(_BYTE *)(a1 + 88);
    id v22 = *(id *)(a1 + 80);
    +[MRDNearbyGroup createWithCompletion:]( &OBJC_CLASS____TtC12mediaremoted14MRDNearbyGroup,  "createWithCompletion:",  v15);

    id v10 = v16;
    goto LABEL_8;
  }

  uint64_t v7 = _MRLogForCategory(12LL, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] New session event occurred after generating metadata.",  buf,  2u);
  }

  uint64_t v9 = *(void *)(a1 + 72);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  13LL,  @"Implicitly cancelled due to new session request"));
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
LABEL_8:
}

void sub_100074BAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _MRLogForCategory(12LL, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B6858();
    }

    [*(id *)(a1 + 32) trackWithError:v7];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    if (([*(id *)(a1 + 40) disarm] & 1) == 0)
    {
      uint64_t v11 = _MRLogForCategory(12LL, v10);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1002B682C();
      }
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyGroup]);
    [v13 end];

    uint64_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queue]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100074D64;
    v16[3] = &unk_10039CE70;
    uint64_t v15 = *(void **)(a1 + 56);
    void v16[4] = *(void *)(a1 + 48);
    id v17 = v15;
    id v21 = *(id *)(a1 + 72);
    id v18 = v5;
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 64);
    char v23 = *(_BYTE *)(a1 + 88);
    id v22 = *(id *)(a1 + 80);
    dispatch_async(v14, v16);
  }
}

void sub_100074D64(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastSessionEventDate]);
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {
  }

  else
  {
    uint64_t v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      uint64_t v7 = _MRLogForCategory(12LL, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] New session event occurred after generating nearby group.",  buf,  2u);
      }

      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  13LL,  @"Implicitly cancelled due to new session request"));
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
      goto LABEL_10;
    }
  }

  uint64_t v11 = _MRLogForCategory(12LL, v6);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v38 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Generated MRDNearbyGroup: %{public}@.",  buf,  0xCu);
  }

  id v14 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v15 groupSessionNearbyInvitationCreateTimeout];
  double v17 = v16;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10007508C;
  v35[3] = &unk_100399508;
  id v36 = *(id *)(a1 + 56);
  id v18 = [v14 initWithTimeout:@"NearbyInvitationCreate" reason:v35 handler:v17];

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) nearbyInvitation]);
  [v19 start];

  uint64_t v20 = *(void *)(a1 + 48);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) displayName]);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 88);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_1000750F4;
  v26[3] = &unk_10039CE48;
  id v27 = *(id *)(a1 + 56);
  id v33 = *(id *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = *(void **)(a1 + 40);
  id v28 = v18;
  uint64_t v29 = v23;
  id v30 = v24;
  id v31 = *(id *)(a1 + 48);
  id v32 = *(id *)(a1 + 64);
  id v34 = *(id *)(a1 + 80);
  id v25 = v18;
  +[MRDNearbyInvitation createWithNearbyGroup:displayName:routeType:completion:]( &OBJC_CLASS____TtC12mediaremoted19MRDNearbyInvitation,  "createWithNearbyGroup:displayName:routeType:completion:",  v20,  v21,  v22,  v26);

  uint64_t v10 = v36;
LABEL_10:
}

void sub_10007508C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(12LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1002B6800();
  }

  [*(id *)(a1 + 32) trackWithError:v3];
}

void sub_1000750F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _MRLogForCategory(12LL, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B68E4();
    }

    [*(id *)(a1 + 32) trackWithError:v7];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    if (([*(id *)(a1 + 40) disarm] & 1) == 0)
    {
      uint64_t v11 = _MRLogForCategory(12LL, v10);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1002B68B8();
      }
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyInvitation]);
    [v13 end];

    id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queue]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000752B8;
    v16[3] = &unk_10039CE20;
    uint64_t v15 = *(void **)(a1 + 56);
    void v16[4] = *(void *)(a1 + 48);
    id v17 = v15;
    id v22 = *(id *)(a1 + 80);
    id v18 = v5;
    id v19 = *(id *)(a1 + 64);
    id v20 = *(id *)(a1 + 72);
    id v21 = *(id *)(a1 + 32);
    id v23 = *(id *)(a1 + 88);
    dispatch_async(v14, v16);
  }
}

void sub_1000752B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastSessionEventDate]);
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {
  }

  else
  {
    uint64_t v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      uint64_t v7 = _MRLogForCategory(12LL, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v25) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] New session event occurred after creating nearby invitation.",  (uint8_t *)&v25,  2u);
      }

      uint64_t v9 = *(void *)(a1 + 80);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  13LL,  @"Implicitly cancelled due to new session request"));
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
      goto LABEL_12;
    }
  }

  uint64_t v11 = _MRLogForCategory(12LL, v6);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void **)(a1 + 48);
    int v25 = 138543362;
    double v26 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Generated MRDNearbyInvitation: %{public}@.",  (uint8_t *)&v25,  0xCu);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[MRDGroupSessionProvider createRemoteControlSessionWithNearbyGroup:nearbyInvitation:identity:]( &OBJC_CLASS___MRDGroupSessionProvider,  "createRemoteControlSessionWithNearbyGroup:nearbyInvitation:identity:",  *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(a1 + 64)));
  [*(id *)(a1 + 72) track];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v10);
  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v15 = *(void *)(a1 + 32);
  double v16 = *(void **)(v15 + 64);
  *(void *)(v15 + 64) = v14;

  uint64_t v18 = _MRLogForCategory(12LL, v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v10 joinToken]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 joinURLString]);
    int v25 = 138412290;
    double v26 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Generated join URL: %@",  (uint8_t *)&v25,  0xCu);
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingCompletions]);
  id v23 = objc_retainBlock(*(id *)(a1 + 88));
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  [v22 setObject:v23 forKey:v24];

  [v10 addObserver:*(void *)(a1 + 32)];
  [v10 start];
  [*(id *)(a1 + 32) reevaluateDiscoveryMode];
LABEL_12:
}

void sub_1000756EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___MRAVLightweightReconnaissanceSession);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100075864;
    v19[3] = &qword_10039CB30;
    id v20 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    id v8 = [v7 groupSessionEndpointDiscoveryInterval];
    double v10 = v9;
    uint64_t Queue = MRGroupSessionSubsystemGetQueue(v8);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(Queue);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000758D4;
    v14[3] = &unk_10039CEE8;
    id v15 = v6;
    id v18 = *(id *)(a1 + 40);
    id v16 = *(id *)(a1 + 32);
    id v17 = v20;
    id v13 = v6;
    [v13 searchEndpointsWithPredicate:v19 timeout:@"MRGroupSession.waitForGroupSessionEndpoint" reason:v12 queue:v14 completion:v10];
  }
}

id sub_100075864(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 groupSessionInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_1000758D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v15 = a2;
  id v5 = *(id *)(a1 + 32);
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:underlyingError:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:underlyingError:debugDescription:",  MRGroupSessionError,  1LL,  a3,  @"waitForGroupSessionEndpoint timeout"));
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedSecret]);

    if (!v8)
    {
      double v9 = (void *)objc_claimAutoreleasedReturnValue([v15 groupLeader]);
      double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uid]);

      id v11 = [[MRUpdateActiveSystemEndpointRequest alloc] initWithOutputDeviceUID:v10 reason:@"MRGroupSession.joined"];
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 routingServer]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 systemEndpointController]);
      [v14 updateSystemEndpointForRequest:v11];
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100075BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100075C74;
  v7[3] = &unk_10039AD10;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100075C74(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_100075C88(id *a1)
{
  id v2 = a1[4];
  id v20 = 0LL;
  unsigned __int8 v3 = [v2 checkCanJoinGroupSessionWithError:&v20];
  id v5 = v20;
  if ((v3 & 1) != 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [a1[4] setLastSessionEventDate:v6];
    [a1[4] cleanupExistingSessionIfNeeded];
    uint64_t v8 = _MRLogForCategory(12LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Fetch identity.",  buf,  2u);
    }

    id v10 = a1[4];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100075E24;
    v14[3] = &unk_10039CF88;
    void v14[4] = v10;
    id v17 = a1[6];
    id v15 = v6;
    id v16 = a1[5];
    id v18 = a1[7];
    id v11 = v6;
    [v10 fetchUserIdentity:v14];
  }

  else
  {
    uint64_t v12 = _MRLogForCategory(12LL, v4);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1002B6A04();
    }

    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_100075E24(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  dispatch_assert_queue_V2(v7);

  if (!v6)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 localActiveUserState]);

    if ([v12 isMinor])
    {
      id v13 = (void (**)(id, void *))a1[7];
      uint64_t v14 = MRGroupSessionError;
      id v15 = @"User is minor.";
      uint64_t v16 = 16LL;
LABEL_12:
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  v14,  v16,  v15));
      v13[2](v13, v24);
LABEL_25:

      goto LABEL_26;
    }

    id v17 = (id)objc_claimAutoreleasedReturnValue([a1[4] lastSessionEventDate]);
    id v18 = a1[5];
    if (v17 == v18)
    {
    }

    else
    {
      id v19 = v18;
      unsigned __int8 v20 = [v17 isEqual:v18];

      if ((v20 & 1) == 0)
      {
        uint64_t v22 = _MRLogForCategory(12LL, v21);
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] New session event occurred after fetching identity.",  buf,  2u);
        }

        id v13 = (void (**)(id, void *))a1[7];
        uint64_t v14 = MRGroupSessionError;
        id v15 = @"Implicitly cancelled due to new session request";
        uint64_t v16 = 13LL;
        goto LABEL_12;
      }
    }

    int v25 = (void *)objc_claimAutoreleasedReturnValue([a1[6] discoveredSession]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);

    double v26 = (void *)objc_claimAutoreleasedReturnValue([a1[4] listenerForSessionWithIdentifier:v24]);
    uint64_t v28 = _MRLogForCategory(12LL, v27);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    id v30 = v29;
    if (v26)
    {
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        id v42 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Will join as: %{public}@",  buf,  0xCu);
      }

      [a1[4] dismissAllDiscoveredSessions];
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472LL;
      v36[2] = sub_100076218;
      v36[3] = &unk_10039CF60;
      v36[4] = a1[4];
      id v39 = a1[7];
      id v37 = a1[5];
      id v38 = a1[6];
      id v40 = a1[8];
      id v31 = objc_retainBlock(v36);
      if (v24)
      {
        id v32 = a1[4];
        id v33 = (void *)objc_claimAutoreleasedReturnValue([a1[6] discoveredSession]);
        [v32 acknowledgeSession:v33];

        [v26 requestToJoinDiscoveredSession:v24 completion:v31];
      }

      else
      {
        [v26 requestToJoinSession:a1[6] completion:v31];
      }
    }

    else
    {
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_1002B6A64();
      }

      id v34 = (void (**)(id, void *))a1[7];
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  9LL,  @"No listener available to join session"));
      v34[2](v34, v35);
    }

    goto LABEL_25;
  }

  uint64_t v9 = _MRLogForCategory(12LL, v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_1002B6A90();
  }

  (*((void (**)(void))a1[7] + 2))();
LABEL_26:
}

void sub_100076218(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100076324;
  block[3] = &unk_10039CF38;
  id v14 = v5;
  id v15 = v6;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v19 = v8;
  uint64_t v16 = v9;
  id v17 = v10;
  id v18 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 64);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v7, block);
}

void sub_100076324(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    uint64_t v3 = _MRLogForCategory(12LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002B6AF0(a1, v4, v5, v6, v7, v8, v9, v10);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    return;
  }

  id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) lastSessionEventDate]);
  id v12 = *(id *)(a1 + 56);
  if (v11 == v12)
  {
  }

  else
  {
    id v13 = v12;
    unsigned __int8 v14 = [v11 isEqual:v12];

    if ((v14 & 1) == 0)
    {
      uint64_t v16 = _MRLogForCategory(12LL, v15);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        LOWORD(v29) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] New session event occurred after requesting to join with token.",  (uint8_t *)&v29,  2u);
      }

      uint64_t v18 = *(void *)(a1 + 72);
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  13LL,  @"Implicitly cancelled due to new session request"));
      (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);

      return;
    }
  }

  uint64_t v20 = _MRLogForCategory(12LL, v15);
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionIdentifier]);
    int v29 = 138543362;
    id v30 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Got invitation response with sessionID: %{public}@. Joining session",  (uint8_t *)&v29,  0xCu);
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) joinToken]);
  id v24 = v23;
  if (!v23) {
    id v24 = *(void **)(a1 + 64);
  }
  id v25 = v24;

  double v26 = *(void **)(a1 + 48);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyGroup]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicSigningKeyData]);
  [v26 joinGroupSessionWithNearbyGroup:v27 hostSigningKey:v28 joinToken:v25 completion:*(void *)(a1 + 80)];
}

void sub_100076650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100076668(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100076678(uint64_t a1)
{
}

void sub_100076680(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) nearbyInvitation]);
  [v2 markAsUsed];

  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) assertPublicAdvertisement]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  ++*(void *)(*(void *)(a1 + 32) + 216LL);
}

uint64_t sub_100076758(uint64_t result)
{
  return result;
}

void sub_100076810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100076828(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 216LL) > 0LL;
  return result;
}

void sub_100076A6C(id *a1)
{
  id v2 = [*((id *)a1[4] + 2) copy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100076BF4;
  v13[3] = &unk_10039CFB0;
  id v14 = a1[5];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_firstWhere:", v13));
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectForKeyedSubscript:MRGroupSessionEventOptionLaunchInBackground]);
    char v5 = [v4 BOOLValue] ^ 1;

    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100076C48;
    block[3] = &unk_10039CFD8;
    void block[4] = a1[4];
    id v10 = v3;
    char v12 = v5;
    id v11 = a1[7];
    dispatch_async(v6, block);
  }

  else
  {
    uint64_t v7 = (void (**)(id, void *))a1[7];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  2LL,  @"No discovered session found for identifier."));
    v7[2](v7, v8);
  }
}

uint64_t sub_100076BF4(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = v3;
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

void sub_100076C48(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiManager]);
  [v2 openMusicForDiscoveredSession:*(void *)(a1 + 40) foreground:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
}

LABEL_18:
  -[MRDGroupSessionManager reevaluateDiscoveryMode](self, "reevaluateDiscoveryMode", v31, v32, v33, v34);
}

  return v4;
}

  return v4;
}

    uint64_t v8 = 2LL;
    goto LABEL_23;
  }

  if (v6 > 1886609777)
  {
    if (v6 != 1886609778)
    {
      if (v6 != 1886610035)
      {
        if (v6 == 1886613355) {
          goto LABEL_23;
        }
        goto LABEL_20;
      }

  -[MRDAVRoutingServer _postRouteStatusDidChangeNotificationForRoute:newStatus:]( self,  "_postRouteStatusDidChangeNotificationForRoute:newStatus:",  v12,  v40);
}

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_4;
  }

  sub_100160874(a2, a3);
  id v30 = sub_100237070( a2,  a3,  (uint64_t)&type metadata for LeaderDiscoveryMessage,  (uint64_t)&off_1003FBA20,  (uint64_t)&v76);
  id v31 = v77;
  if (v77 >> 60 == 15)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    id v32 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v32, (uint64_t)qword_1003FF018);
    id v33 = v5;
    id v34 = (os_log_s *)Logger.logObject.getter(v33);
    uint64_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v37 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v36 = 138543362;
      __int16 v76 = (uint64_t)v33;
      id v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v36 + 4, v36 + 12);
      dispatch_group_s *v37 = v33;

      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "[%{public}@] LeaderDiscovery message payload is malformed.",  v36,  0xCu);
      id v39 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v37, 1LL, v39);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {

      id v34 = (os_log_s *)v33;
    }

    __int128 v67 = sub_1001E8078();
    id v68 = swift_allocError(&type metadata for FastSyncSessionError, v67, 0LL, 0LL);
    CFStringRef v69 = 4LL;
    sub_1001CF668(v68);
    return swift_errorRelease(v68);
  }

  else
  {
    uint64_t v56 = v76;
    __int16 v57 = Participant.handle.getter(v30);
    uint64_t v58 = (uint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
    *uint64_t v58 = v57;
    v58[1] = v59;
    uint64_t result = swift_bridgeObjectRelease();
    unsigned int v60 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
    if (v60)
    {
      uint64_t v61 = a4;
      unsigned int v62 = sub_100156B68(&qword_1003F8620);
      id v63 = swift_allocObject(v62, 48LL, 7LL);
      *(_OWORD *)(v63 + 16) = xmmword_10034BE40;
      __int128 v64 = v60;
      *(void *)(v63 + 32) = Participant.handle.getter(v64);
      *(void *)(v63 + 40) = v65;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v64 updateAllowedDestinations:isa];

      sub_1001D712C();
      sub_1001D63F4(v61);
      return sub_100171C30(v56, v31);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

  __int128 v64 = 0LL;
  __int128 v66 = 0xC000000000000000LL;
LABEL_19:
  __int128 v67 = v96;
  id v68 = MRDFastSyncGroupSessionState.rawValue.getter(v106, v64, v66, v54);
  id v70 = v69;
  __int16 v72 = v71;
  sub_100236C68(v68);
  __int16 v74 = v73;
  __int16 v76 = v75;
  v77 = v102;
  CFStringRef v67 = v102;
  v98(v67, v104, v16);
  v78 = v77;
  v79 = _dispatchPreconditionTest(_:)(v67);
  v103(v67, v16);
  if ((v79 & 1) == 0) {
    __break(1u);
  }
  v80 = (void *)swift_allocObject(&unk_1003A56E8, 40LL, 7LL);
  v81 = v95;
  int8x16_t v82 = v100;
  v83 = v101;
  v80[2] = v95;
  v80[3] = v82;
  v80[4] = v83;
  v84 = v81;
  sub_1001E80BC(v82, v83);
  GroupSessionMessenger.send(_:to:completion:)(v74, v76, v55, sub_1001EFCCC, v80);
  swift_release(v80);
  sub_1001608B8(v74, v76);
  return sub_1001608B8(v70, v72);
}

    uint64_t v7 = (v13 - 1) & v13;
  }

  id v14 = v12 + 3;
  if (v14 >= v42) {
    return (void (*)(uint64_t *, void))swift_release(v4);
  }
  id v13 = *(void *)(v41 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v42) {
      return (void (*)(uint64_t *, void))swift_release(v4);
    }
    id v13 = *(void *)(v41 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

    swift_beginAccess(v20, &v36, 33LL, 0LL);
    if (v7[10] >> 60 != 15LL)
    {
      Data.append(_:)(a1, a2);
      swift_endAccess(&v36);
LABEL_24:
      swift_release(a3);
      return;
    }

    __break(1u);
    goto LABEL_26;
  }

  if (((*(uint64_t (**)(void))(*v7 + 224LL))() & 1) != 0)
  {
    uint64_t v20 = (void *)v7[13];
    if (v20) {
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_18;
  }

  id v19 = (*(uint64_t (**)(void))(*(void *)a3 + 168LL))();
  if (v19 != 2)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v20 = (void *)v7[13];
    if (v20) {
      goto LABEL_23;
    }
LABEL_26:
    __break(1u);
    return;
  }

  if (((*(uint64_t (**)(void))(*(void *)a3 + 144LL))() & 1) == 0)
  {
LABEL_21:
    Strong = swift_unknownObjectUnownedLoadStrong(v7 + 2);
    id v32 = v7[3];
    ObjectType = swift_getObjectType(Strong, v33);
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t))(v32 + 16))( v7,  a1,  a2,  a3,  0LL,  ObjectType,  v32);
    swift_unknownObjectRelease(Strong);
    goto LABEL_24;
  }

  uint64_t v20 = (void *)v7[13];
  if (v20)
  {
LABEL_23:
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(*v20 + 216LL);
    swift_retain(v20);
    v35(a1, a2, a3);
    swift_release(v20);
    goto LABEL_24;
  }

  __break(1u);
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v21, (uint64_t)qword_100401648);
  uint64_t v22 = swift_bridgeObjectRetain_n(a4, 2LL);
  id v23 = (os_log_s *)Logger.logObject.getter(v22);
  id v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = swift_slowAlloc(32LL, -1LL);
    double v26 = swift_slowAlloc(96LL, -1LL);
    v38[0] = v26;
    *(_DWORD *)id v25 = 136315650;
    uint64_t v27 = _typeName(_:qualified:)(v12, 0LL);
    id v36 = sub_10015ADC4(v27, v28, v38);
    v38[4] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    id v36 = sub_10015ADC4(0xD000000000000014LL, 0x800000010033F950LL, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v25 + 14, v25 + 22);
    *(_WORD *)(v25 + 22) = 2080;
    swift_bridgeObjectRetain();
    id v36 = sub_10015ADC4(a3, a4, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%s] %s Could not find participant: %s.",  (uint8_t *)v25,  0x20u);
    swift_arrayDestroy(v26, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_1001E1164(0LL, v3[2] + 1LL, 1, v3);
    }
    id v13 = v3[2];
    char v12 = v3[3];
    id v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      id v25 = sub_1001E1164((void *)(v12 > 1), v13 + 1, 1, v3);
      id v14 = v13 + 1;
      uint64_t v3 = v25;
    }

    v3[2] = v14;
    uint64_t v15 = &v3[2 * v13];
    void v15[4] = 0x6574756D2ELL;
    void v15[5] = 0xE500000000000000LL;
  }

  uint64_t v16 = sub_100156B68(&qword_1003FA010);
  id v17 = sub_100200720();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v16, v17);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 93LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 91LL;
}

  __break(1u);
  return result;
}

void sub_100077048(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  13LL,  @"Implicitly cancelled due to new join request"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1000770B0(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if (objc_msgSend(*(id *)(a1 + 40), "isHosted", (void)v8))
        {
          if ((objc_opt_respondsToSelector(v7, "manager:didEndHostedGroupSession:") & 1) != 0) {
            [v7 manager:*(void *)(a1 + 48) didEndHostedGroupSession:*(void *)(a1 + 40)];
          }
        }

        else if ((objc_opt_respondsToSelector(v7, "manager:didLeaveRemoteGroupSession:") & 1) != 0)
        {
          [v7 manager:*(void *)(a1 + 48) didLeaveRemoteGroupSession:*(void *)(a1 + 40)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100077454(_Unwind_Exception *a1)
{
}

void sub_100077478(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) disarm])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

    uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10007755C;
    v6[3] = &unk_10039AD10;
    id v8 = *(id *)(a1 + 40);
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10007755C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100077570(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 localActiveUserState]);

  unsigned int v3 = [v7 identitySupportsCollaboration];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 userIdentity]);
  uint64_t v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && [v4 type] == (id)1) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100077610(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  4LL,  @"No resolvable identity available."));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_100077678(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100077938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000779E0;
  v7[3] = &unk_10039AD10;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1000779E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_100077AC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100077ADC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localActiveUserState]);

  if (([v3 groupSessionsSupportedForAccountRegion] & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    char v12 = @"Feature not available in account region.";
    uint64_t v13 = 17LL;
LABEL_8:
    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  v11,  v13,  v12));
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v10 = 0LL;
    goto LABEL_9;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eligibilityMonitor]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 eligibilityStatus]);
  unsigned __int8 v6 = [v5 isManateeEnabled];

  if ((v6 & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    char v12 = @"Manatee reported unavailable for current account.";
    uint64_t v13 = 10LL;
    goto LABEL_8;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eligibilityMonitor]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 eligibilityStatus]);
  unsigned __int8 v9 = [v8 idsAccountIsValid];

  if ((v9 & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    char v12 = @"No active IDS account for Group Session service";
    uint64_t v13 = 11LL;
    goto LABEL_8;
  }

  uint64_t v10 = 1LL;
LABEL_9:

  return v10;
}

void sub_100077D28(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      unsigned __int8 v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v6);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uiManager", (void)v10));
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
        [v8 dismissDiscoveredSession:v9];

        unsigned __int8 v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

id sub_1000785D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateAdvertisement];
}

void sub_10007897C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000789A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(12LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Removing acknowledgement for session: %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained resetAcknowledgementForSessionIdentifier:*(void *)(a1 + 32)];
}

void sub_100078C14(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      unsigned __int8 v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v6);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uiManager", (void)v10));
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
        [v8 dismissDiscoveredSession:v9];

        unsigned __int8 v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_100078D38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "manager:discoveredSessionsDidChange:") & 1) != 0) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(*(void *)(a1 + 32) + 16)];
  }
}

void sub_1000790B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000790D4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingServer]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 originClientForOrigin:v5]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 activeNowPlayingClient]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 activePlayerClient]);

    [v8 timeSincePlaying];
    double v11 = v10;
    if (v10 >= *(double *)(a1 + 40))
    {
      uint64_t v12 = _MRLogForCategory(12LL, v9);
      __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 134217984;
        double v15 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Ending session because: No playback in session for: %.2f seconds",  (uint8_t *)&v14,  0xCu);
      }

      [WeakRetained[3] removeAllParticipants];
    }
  }
}

void sub_100079554(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 == 4 || v2 == 2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingCompletions]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingCompletions]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    [v6 removeObjectForKey:v7];
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = (id *)(a1 + 40);
  id v10 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v11 = *(id *)(a1 + 40);
  if (v10 == v11)
  {

LABEL_14:
    uint64_t v20 = *(void *)(a1 + 48);
    switch(v20)
    {
      case 4LL:
        if ([*v9 isHosted])
        {
          int v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) advertiser]);
          [v29 setActiveSession:0 identity:0];

          [*(id *)(a1 + 32) setSessionRemoteParticipantsAssertion:0];
          [*(id *)(a1 + 32) reevaluateAdvertisement];
        }

        id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 allObjects]);

        id v32 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
        __int16 v47 = _NSConcreteStackBlock;
        uint64_t v48 = 3221225472LL;
        __int16 v49 = sub_100079D50;
        uint64_t v50 = &unk_10039D0C8;
        id v54 = v8;
        id v51 = v31;
        id v33 = *(id *)(a1 + 40);
        uint64_t v34 = *(void *)(a1 + 32);
        id v52 = v33;
        uint64_t v53 = v34;
        id v19 = v31;
        dispatch_async(v32, &v47);

        uint64_t v35 = *(void *)(a1 + 32);
        id v36 = *(void **)(v35 + 24);
        *(void *)(v35 + 24) = 0LL;

        id v37 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v38 = *(void *)(a1 + 32);
        id v39 = *(void **)(v38 + 64);
        *(void *)(v38 + 64) = v37;

        *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
        objc_msgSend(*(id *)(a1 + 32), "reevaluatePlaybackState", v47, v48, v49, v50);
        [*(id *)(a1 + 32) reevaluateDiscoveryMode];

        uint64_t v28 = v54;
        break;
      case 3LL:
        id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
        id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 allObjects]);

        id v42 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_100079C34;
        v55[3] = &unk_100398F40;
        uint64_t v43 = *(void *)(a1 + 32);
        id v44 = *(void **)(a1 + 40);
        uint64_t v56 = v41;
        uint64_t v57 = v43;
        id v58 = v44;
        id v19 = v41;
        dispatch_async(v42, v55);

        uint64_t v28 = v56;
        break;
      case 2LL:
        if (!v8)
        {
          uint64_t v45 = _MRLogForCategory(12LL, v15);
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            id v46 = *v9;
            *(_DWORD *)__int128 buf = 138543362;
            id v66 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] No completion for session in state .joined: %{public}@.",  buf,  0xCu);
          }

          goto LABEL_26;
        }

        if ([*v9 isHosted])
        {
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) advertiser]);
          uint64_t v22 = *(void **)(a1 + 40);
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 localIdentity]);
          [v21 setActiveSession:v22 identity:v23];

          [*(id *)(a1 + 32) reevaluateAdvertisement];
        }

        id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allObjects]);

        double v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
        v59[0] = _NSConcreteStackBlock;
        v59[1] = 3221225472LL;
        v59[2] = sub_100079AB4;
        v59[3] = &unk_10039B630;
        uint64_t v27 = *(void **)(a1 + 40);
        v59[4] = *(void *)(a1 + 32);
        id v60 = v27;
        id v61 = v25;
        id v62 = v8;
        id v19 = v25;
        dispatch_async(v26, v59);

        uint64_t v28 = v60;
        break;
      default:
        goto LABEL_27;
    }

    goto LABEL_26;
  }

  uint64_t v12 = v11;
  id v13 = v10;
  unsigned __int8 v14 = [v13 isEqual:v12];

  if ((v14 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v16 = _MRLogForCategory(12LL, v15);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
    sub_1002B6C10((uint64_t *)(a1 + 40), v17);
  }

  if (v8)
  {
    uint64_t v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100079A4C;
    block[3] = &unk_100399EC0;
    __int128 v64 = v8;
    dispatch_async(v18, block);

    id v19 = v64;
LABEL_26:
  }

void sub_100079A4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  2LL,  @"Session is untracked."));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100079AB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiManager]);
  [v2 beginObservingSession:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = *(id *)(a1 + 48);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if (objc_msgSend(*(id *)(a1 + 40), "isHosted", (void)v9))
        {
          if ((objc_opt_respondsToSelector(v8, "manager:didStartHostedGroupSession:") & 1) != 0) {
            [v8 manager:*(void *)(a1 + 32) didStartHostedGroupSession:*(void *)(a1 + 40)];
          }
        }

        else if ((objc_opt_respondsToSelector(v8, "manager:didJoinRemoteGroupSession:") & 1) != 0)
        {
          [v8 manager:*(void *)(a1 + 32) didJoinRemoteGroupSession:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_100079C34(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "manager:activeSessionDidChange:") & 1) != 0) {
          objc_msgSend(v7, "manager:activeSessionDidChange:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100079D50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError msv_errorWithDomain:code:debugDescription:]( &OBJC_CLASS___NSError,  "msv_errorWithDomain:code:debugDescription:",  MRGroupSessionError,  1LL,  @"Group session invalidated during start."));
    (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0LL);
  }

  else
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          __int128 v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
          if ([*(id *)(a1 + 40) isHosted])
          {
            if ((objc_opt_respondsToSelector(v8, "manager:didEndHostedGroupSession:") & 1) != 0) {
              [v8 manager:*(void *)(a1 + 48) didEndHostedGroupSession:*(void *)(a1 + 40)];
            }
          }

          else if ((objc_opt_respondsToSelector(v8, "manager:didLeaveRemoteGroupSession:") & 1) != 0)
          {
            [v8 manager:*(void *)(a1 + 48) didLeaveRemoteGroupSession:*(void *)(a1 + 40)];
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v5);
    }
  }

id sub_100079FE0(id *a1)
{
  if ([*((id *)a1[4] + 3) isHosted])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v3 = [v2 groupSessionRotateAfterLastGuest];

    if (v3)
    {
      unsigned int v4 = [a1[4] hasGuestParticipants];
      id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "msv_firstWhere:", &stru_10039D108));

      if (v4 && !v5)
      {
        uint64_t v7 = _MRLogForCategory(12LL, v6);
        __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Rotating session because all guest participants left",  buf,  2u);
        }

        [*((id *)a1[4] + 3) removeAllParticipants];
      }

      [a1[4] setHasGuestParticipants:v5 != 0];
    }

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10007A214;
    v18[3] = &unk_10039C9C8;
    id v9 = a1[5];
    id v19 = a1[6];
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mr_filter:", v18));
    id v11 = [v10 count];
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionRemoteParticipantsAssertion]);

    if (v11)
    {
      if (!v12)
      {
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
        unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 groupSessionServer]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 assertionManager]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 createAssertionWithReason:@"Session has participants"]);
        [a1[4] setSessionRemoteParticipantsAssertion:v16];
      }
    }

    else if (v12)
    {
      [a1[4] setSessionRemoteParticipantsAssertion:0];
    }
  }

  return [a1[4] reevaluatePlaybackState];
}

BOOL sub_10007A1D0(id a1, MRDGroupSessionParticipant *a2)
{
  id v2 = a2;
  else {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

uint64_t sub_10007A214(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leader]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  uint64_t v6 = [v3 isEqual:v5] ^ 1;

  return v6;
}

void sub_10007A344(uint64_t a1)
{
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472LL;
  v58[2] = sub_10007A820;
  v58[3] = &unk_10039C9C8;
  id v2 = *(void **)(a1 + 32);
  v58[4] = *(void *)(a1 + 40);
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_filter:", v58));
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) allKeys]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v4));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "msv_map:", &stru_10039D128));
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));

  id v41 = (void *)v7;
  [v5 minusSet:v7];
  __int128 v8 = *(void **)(*(void *)(a1 + 40) + 64LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v42 = (void *)objc_claimAutoreleasedReturnValue([v8 objectsForKeys:v9 notFoundMarker:v10]);

  id v11 = *(void **)(*(void *)(a1 + 40) + 64LL);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
  [v11 removeObjectsForKeys:v12];

  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  id obj = v3;
  id v13 = [obj countByEnumeratingWithState:&v54 objects:v62 count:16];
  if (v13)
  {
    id v15 = v13;
    uint64_t v16 = *(void *)v55;
    do
    {
      for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v55 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(MRDGroupSessionParticipant **)(*((void *)&v54 + 1) + 8LL * (void)i);
        uint64_t v19 = _MRLogForCategory(12LL, v14);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v61 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Observed new remote pending participant: %@",  buf,  0xCu);
        }

        id v22 = sub_10007A87C(v21, v18);
        id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        id v24 = *(void **)(*(void *)(a1 + 40) + 64LL);
        id v25 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v18, "identifier"));
        [v24 setObject:v18 forKeyedSubscript:v25];

        double v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationQueue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007A904;
        block[3] = &unk_100398F40;
        uint64_t v27 = *(void **)(a1 + 48);
        void block[4] = *(void *)(a1 + 40);
        id v52 = v23;
        id v53 = v27;
        id v28 = v23;
        dispatch_async(v26, block);
      }

      id v15 = [obj countByEnumeratingWithState:&v54 objects:v62 count:16];
    }

    while (v15);
  }

  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id v43 = v42;
  id v29 = [v43 countByEnumeratingWithState:&v47 objects:v59 count:16];
  if (v29)
  {
    id v31 = v29;
    uint64_t v32 = *(void *)v48;
    do
    {
      for (uint64_t j = 0LL; j != v31; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v48 != v32) {
          objc_enumerationMutation(v43);
        }
        uint64_t v34 = *(MRDGroupSessionParticipant **)(*((void *)&v47 + 1) + 8LL * (void)j);
        uint64_t v35 = _MRLogForCategory(12LL, v30);
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v61 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Observed removed remote pending participant: %@",  buf,  0xCu);
        }

        id v37 = *(void **)(*(void *)(a1 + 40) + 64LL);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v34, "identifier"));
        [v37 setObject:0 forKeyedSubscript:v38];

        id v39 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationQueue]);
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472LL;
        v45[2] = sub_10007AB14;
        v45[3] = &unk_10039D198;
        uint64_t v40 = *(void *)(a1 + 40);
        v45[5] = v34;
        id v46 = &stru_10039D148;
        uint8_t v45[4] = v40;
        dispatch_async(v39, v45);
      }

      id v31 = [v43 countByEnumeratingWithState:&v47 objects:v59 count:16];
    }

    while (v31);
  }
}

BOOL sub_10007A820(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);
  BOOL v5 = v4 == 0LL;

  return v5;
}

id sub_10007A874(id a1, MRDGroupSessionParticipant *a2)
{
  return -[MRDGroupSessionParticipant identifier](a2, "identifier");
}

id sub_10007A87C(id a1, MRDGroupSessionParticipant *a2)
{
  id v2 = a2;
  unsigned __int8 v3 = objc_alloc(&OBJC_CLASS___MRDGroupSessionJoinRequest);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identifier](v2, "identifier"));
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDGroupSessionParticipant identity](v2, "identity"));

  uint64_t v6 = -[MRDGroupSessionJoinRequest initWithIdentifier:identity:oobKeys:]( v3,  "initWithIdentifier:identity:oobKeys:",  v4,  v5,  &__NSArray0__struct);
  return v6;
}

void sub_10007A904(uint64_t a1)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10007A99C;
  v6[3] = &unk_10039D170;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 displayJoinRequest:v7 handler:v6];
}

void sub_10007A99C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    uint64_t v3 = _MRLogForCategory(12LL, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] User interacted with remote authorization request: %@",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 routingServer]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 systemEndpointController]);
    id v9 = objc_alloc(&OBJC_CLASS___MRUpdateActiveSystemEndpointRequest);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) joinToken]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 effectiveIdentifier]);
    id v12 = [v9 initWithOutputDeviceUID:v11 reason:@"MRGroupSession.remote-join.WHA"];
    [v8 updateSystemEndpointForRequest:v12];

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uiManager]);
    [v13 openMusicParticipantManagementWithCompletion:0];
  }

void sub_10007AB14(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiManager]);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v4 dismissJoinRequest:v3];
}

void sub_10007AD70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10007AD88(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10007AE88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10007AEA0(uint64_t a1)
{
}

id sub_10007AF7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateAdvertisement];
}

id sub_10007B04C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluatePlaybackState];
}

id sub_10007B0E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_10007B20C(uint64_t a1)
{
  id v10 = *(id *)(*(void *)(a1 + 32) + 32LL);
  id v2 = *(id *)(a1 + 40);
  if (v10 == v2)
  {
  }

  else
  {
    id v3 = v10;
    unsigned __int8 v4 = [v3 isEqual:v2];

    if ((v4 & 1) == 0)
    {
      uint64_t v6 = _MRLogForCategory(12LL, v5);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 32LL);
        *(_DWORD *)__int128 buf = 138543618;
        uint64_t v12 = v9;
        __int16 v13 = 2114;
        uint64_t v14 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Leader token changed from %{public}@ to %{public}@",  buf,  0x16u);
      }

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
      [*(id *)(a1 + 32) reevaluateProxyAdvertisement];
    }
  }

id sub_10007B3B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateProxyAdvertisement];
}

void sub_10007B544(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10007B61C;
  v10[3] = &unk_10039D250;
  uint64_t v9 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v9;
  uint64_t v14 = a3;
  char v15 = a2;
  id v12 = *(id *)(a1 + 48);
  char v16 = a4;
  id v13 = *(id *)(a1 + 56);
  dispatch_async(v8, v10);
}

void sub_10007B61C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiManager]);
  uint64_t v3 = kMREventGroupSessionJoinRequestReceived;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10007B8B8;
  v27[3] = &unk_10039D1C0;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 64);
  id v28 = v4;
  uint64_t v29 = v5;
  MRAnalyticsSendEvent(v3, 0LL, v27);
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v7 = _MRLogForCategory(12LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v31 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] Will auto approve request: %{public}@",  buf,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
    +[MRDGroupSessionApprovalManager donateApprovedIdentity:]( &OBJC_CLASS___MRDGroupSessionApprovalManager,  "donateApprovedIdentity:",  v10);

    [*(id *)(a1 + 48) handleApprovedJoinRequest:*(void *)(a1 + 40) isGuest:*(unsigned __int8 *)(a1 + 73)];
    id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007B9C0;
    block[3] = &unk_100399EC0;
    id v26 = *(id *)(a1 + 56);
    dispatch_async(v11, block);

    id v12 = v26;
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 73);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10007B9D0;
    v21[3] = &unk_10039D1E8;
    void v21[4] = *(void *)(a1 + 32);
    id v22 = v2;
    id v23 = *(id *)(a1 + 40);
    id v24 = *(id *)(a1 + 56);
    id v16 = [v13 handleJoinRequest:v14 isGuest:v15 completion:v21];
    id v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10007BAEC;
    v19[3] = &unk_100398E60;
    uint64_t v18 = *(void **)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    id v20 = v18;
    dispatch_async(v17, v19);

    id v12 = v22;
  }
}

id sub_10007B8B8(uint64_t a1)
{
  v8[0] = kMREventGroupSessionJoinRequestHasOOBKeysKey;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) oobKeys]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 count] != 0));
  v9[0] = v3;
  v9[1] = &__kCFBooleanFalse;
  v8[1] = kMREventGroupSessionJoinRequestIsProxy;
  v8[2] = kMREventGroupSessionJoinRequestAutoApprovedReasonKey;
  id v4 = MRDGroupSessionAutoApproveReasonEnum(*(id *)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v9[2] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  3LL));

  return v6;
}

uint64_t sub_10007B9C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007B9D0(id *a1, int a2)
{
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] notificationQueue]);
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  uint64_t v8 = sub_10007BAB8;
  uint64_t v9 = &unk_10039CFD8;
  id v10 = a1[5];
  id v11 = a1[6];
  id v12 = a1[7];
  char v13 = a2;
  dispatch_async(v4, &v6);

  if (a2)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "identity", v6, v7, v8, v9, v10, v11));
    +[MRDGroupSessionApprovalManager donateApprovedIdentity:]( &OBJC_CLASS___MRDGroupSessionApprovalManager,  "donateApprovedIdentity:",  v5);
  }
}

uint64_t sub_10007BAB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_10007BAEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) displayJoinRequest:*(void *)(a1 + 40) handler:&stru_10039D228];
}

void sub_10007BED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_10007BF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(12LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v12 = 138412546;
      char v13 = v8;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] %@ - Discovered equivalent WHA endpoint: %@",  (uint8_t *)&v12,  0x16u);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v10 = v3;
    uint64_t v7 = *(os_log_s **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 40);
    int v12 = 138412290;
    char v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Unable to discover endpoint for WHA identifier: %@",  (uint8_t *)&v12,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

NSDictionary *__cdecl sub_10007C048(id a1)
{
  v2[0] = kMREventGroupSessionJoinRequestIsProxy;
  v2[1] = kMREventGroupSessionJoinRequestHasOOBKeysKey;
  v3[0] = &__kCFBooleanTrue;
  v3[1] = &__kCFBooleanFalse;
  return (NSDictionary *)(id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  2LL));
}

void sub_10007C0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, 1LL);
  }
  if (a2 != 1)
  {
    uint64_t v5 = _MRLogForCategory(12LL, a2);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v35 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] User interacted with proxy authorization request: %@",  buf,  0xCu);
    }

    id v28 = _NSConcreteStackBlock;
    uint64_t v29 = 3221225472LL;
    uint64_t v30 = sub_10007C3C0;
    uint64_t v31 = &unk_100398E60;
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v32 = v8;
    uint64_t v33 = v9;
    id v10 = objc_retainBlock(&v28);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "session", v28, v29, v30, v31));
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
    char v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sessionIdentifier]);
    unsigned int v14 = [v12 isEqualToString:v13];

    if (v14)
    {
      uint64_t v16 = _MRLogForCategory(12LL, v15);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sessionIdentifier]);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v35 = v18;
        __int16 v36 = 2112;
        id v37 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] %@ - User already joined to session: %@. Short-circuiting request",  buf,  0x16u);
      }
    }

    else
    {
      id v20 = *(dispatch_group_s **)(a1 + 64);
      dispatch_time_t v21 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 88) * 1000000000.0));
      dispatch_group_wait(v20, v21);
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      uint64_t v24 = _MRLogForCategory(12LL, v23);
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      id v26 = v25;
      if (!v22)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_1002B6CE4(a1, a1 + 56, v26);
        }

        goto LABEL_15;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v35 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[MRDGroupSessionManager] %@ Using equivalent WHA endpoint",  buf,  0xCu);
      }
    }

    ((void (*)(void ***))v10[2])(v10);
LABEL_15:
  }

void sub_10007C3C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 routingServer]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 systemEndpointController]);
  id v5 = [[MRUpdateActiveSystemEndpointRequest alloc] initWithOutputDeviceUID:*(void *)(a1 + 32) reason:@"MRGroupSession.proxy.WHA"];
  [v4 updateSystemEndpointForRequest:v5];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uiManager]);
  [v6 openMusicParticipantManagementWithCompletion:0];
}

void sub_10007C540(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMusicUserStateCenter sharedCenter](&OBJC_CLASS___MRDMusicUserStateCenter, "sharedCenter"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localActiveUserState]);

  if (([v3 isMinor] & 1) != 0
    || ([v3 groupSessionsSupportedForAccountRegion] & 1) == 0)
  {
    uint64_t v11 = _MRLogForCategory(12LL, v4);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Ignore session listener callback for user.",  buf,  2u);
    }
  }

  else
  {
    if (![*(id *)(a1 + 32) source])
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hostInfo]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 modelIdentifier]);
      unsigned int v7 = [v6 containsString:@"AudioAccessory"];

      if (v7)
      {
        uint64_t v9 = _MRLogForCategory(12LL, v8);
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1002B6D94();
        }
        goto LABEL_17;
      }
    }

    [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
    id v10 = (os_log_s *)[*(id *)(*(void *)(a1 + 40) + 16) copy];
    int v12 = *(void **)(a1 + 40);
    char v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    [v12 cancelAcknowledgeResetTimerForSessionIdentifier:v13];

    unsigned int v14 = *(void **)(a1 + 40);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    LOBYTE(v14) = [v14 shouldNotifyForSessionIdentifier:v15];

    if ((v14 & 1) == 0)
    {
      uint64_t v21 = _MRLogForCategory(12LL, v16);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v40 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Not displaying discovered session: %{public}@ because it was already acknowledged by the user.",  buf,  0xCu);
      }

      goto LABEL_16;
    }

    id v17 = *(void **)(a1 + 40);
    if (v17[3])
    {
      uint64_t v18 = _MRLogForCategory(12LL, v16);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v40 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionManager] Not displaying session %{public}@ because there is an active session.",  buf,  0xCu);
      }

void sub_10007C994(_Unwind_Exception *a1)
{
}

void sub_10007C9C0(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] uiManager]);
  id v3 = a1[5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10007CA84;
  v4[3] = &unk_10039B590;
  objc_copyWeak(&v6, a1 + 6);
  id v5 = a1[5];
  [v2 displayDiscoveredSession:v3 dismissalHandler:v4];

  objc_destroyWeak(&v6);
}

void sub_10007CA70(_Unwind_Exception *a1)
{
}

void sub_10007CA84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    void v5[2] = sub_10007CB34;
    v5[3] = &unk_100398E60;
    id v6 = v3;
    id v7 = *(id *)(a1 + 32);
    dispatch_async(v4, v5);
  }
}

id sub_10007CB34(uint64_t a1)
{
  return [*(id *)(a1 + 32) acknowledgeSession:*(void *)(a1 + 40)];
}

void sub_10007CB40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "manager:discoveredSessionsDidChange:") & 1) != 0) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }
}

void sub_10007CC24(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007CD44;
  block[3] = &unk_100398E60;
  uint64_t v4 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v12 = v4;
  dispatch_async(v3, block);

  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v5 startAcknowledgeResetTimerForSessionIdentifier:v6];

  id v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10007CD9C;
  void v9[3] = &unk_10039D358;
  void v9[4] = v7;
  id v10 = v2;
  id v8 = v2;
  [v7 notifyObserversWithBlock:v9];
}

void sub_10007CD44(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiManager]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v3 dismissDiscoveredSession:v2];
}

void sub_10007CD9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "manager:discoveredSessionsDidChange:") & 1) != 0) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }
}

void sub_10007CECC(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

id sub_10007D02C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_10007D0CC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) description]);
  [*(id *)(a1 + 32) setCurrentGroupSession:v2];

  [*(id *)(a1 + 32) setGroupSessionDiscoveryEnabled:*(void *)(*(void *)(a1 + 40) + 120) != 0];
  id v13 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notAdvertisingReason]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notAdvertisingReason]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Not advertising because: %@",  v4));
    [v13 addObject:v5];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notProxyAdvertisingReason]);

  if (v6)
  {
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notProxyAdvertisingReason]);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Not proxy-advertising because: %@",  v7));
    [v13 addObject:v8];
  }

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v13 componentsJoinedByString:@","]);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"<%@>", v9));

  [*(id *)(a1 + 32) setGroupSessionManagerAdvertiseReason:v10];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) advertiser]);
  [v11 collectDiagnostic:*(void *)(a1 + 32)];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) listener]);
  [v12 collectDiagnostic:*(void *)(a1 + 32)];
}

uint64_t sub_10007D644(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007D8EC(uint64_t a1)
{
  uint64_t v2 = a1 + 32;

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)v2 + 8) error]);
  uint64_t v5 = _MRLogForCategory(10LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  __int128 v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B6DC0(a1, v2, v7);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v9 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v35 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
    __int16 v36 = 2114;
    int8x16_t v37 = v8;
    __int16 v38 = 2048;
    uint64_t v39 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  buf,  0x20u);
  }

  uint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)v2 + 8) error]);
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
  }

  uint64_t v13 = MRLogCategoryMigrationOversize();
  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(const __CFString **)(*(void *)v2 + 8LL);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v35 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 56) count]));
  [v16 setObject:v17 forKeyedSubscript:@"requestDeviceCount"];

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) reason]);
  [v16 setObject:v18 forKeyedSubscript:@"source"];

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) endpointsForcedRemoved]));
  [v16 setObject:v19 forKeyedSubscript:@"forceRemovedEndpointCount"];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) devicesForcedRemoved]));
  [v16 setObject:v20 forKeyedSubscript:@"forceRemoveDeviceCount"];

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) endpointsRemoved]));
  [v16 setObject:v21 forKeyedSubscript:@"removedEndpointCount"];

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) devicesRemoved]));
  [v16 setObject:v22 forKeyedSubscript:@"removedDeviceCount"];

  unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) devicesPaused]));
  [v16 setObject:v23 forKeyedSubscript:@"pausedDeviceCount"];

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) endpointsPaused]));
  [v16 setObject:v24 forKeyedSubscript:@"pausedEndpointCount"];

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) appletvsEffected]));
  [v16 setObject:v25 forKeyedSubscript:@"appleTVsAffected"];

  id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(*(void *)(a1 + 32) + 8) homepodsEffected]));
  [v16 setObject:v26 forKeyedSubscript:@"homepodsAffected"];

  [*(id *)(*(void *)(a1 + 32) + 8) duration];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  [v16 setObject:v27 forKeyedSubscript:@"duration"];

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) error]);
  if (v28) {
    uint64_t v29 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v29 = &__kCFBooleanFalse;
  }
  [v16 setObject:v29 forKeyedSubscript:@"success"];

  id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) error]);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10007DE10;
  v32[3] = &unk_100399650;
  id v33 = v16;
  id v31 = v16;
  MRAnalyticsSendEvent(@"com.apple.mediaplaybackcore.assistant.pause", v30, v32);
}

id sub_10007DE10(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10007DF70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  __int128 v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 endEvent:@"discover" withError:0];
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    id obj = (NSString *)v5;
    id v9 = -[NSString countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v44,  v54,  16LL);
    if (v9)
    {
      id v10 = v9;
      id v33 = v6;
      id v34 = v5;
      uint64_t v36 = *(void *)v45;
      uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
      uint64_t v12 = MREndpointConnectionCorrelationIDUserInfoKey;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v36) {
            objc_enumerationMutation(obj);
          }
          unsigned int v14 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
          uint64_t v15 = -[MRDPauseOutputDevicesRequestEndpointOperation initWithEndpoint:]( objc_alloc(&OBJC_CLASS___MRDPauseOutputDevicesRequestEndpointOperation),  "initWithEndpoint:",  v14);
          [*(id *)(*(void *)(a1 + 40) + 8) addOperation:v15];
          uint64_t v16 = objc_alloc(&OBJC_CLASS___NSString);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v14 debugName]);
          uint64_t v18 = -[NSString initWithFormat:](v16, "initWithFormat:", @"Discovered endpoint: %@", v17);

          uint64_t v20 = _MRLogForCategory(10LL, v19);
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
            *(_DWORD *)__int128 buf = 138543874;
            __int128 v49 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
            __int16 v50 = 2114;
            id v51 = v22;
            __int16 v52 = 2112;
            id v53 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
          }

          dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
          -[MRDPauseOutputDevicesRequestEndpointOperation startEvent:](v15, "startEvent:", @"Connect");
          unsigned __int8 v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) reason]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v24, v11);

          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v25, v12);

          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472LL;
          v37[2] = sub_10007E39C;
          v37[3] = &unk_10039D3D0;
          __int16 v38 = v15;
          uint64_t v39 = v14;
          id v26 = *(id *)(a1 + 48);
          uint64_t v27 = *(void *)(a1 + 40);
          id v40 = v26;
          uint64_t v41 = v27;
          id v42 = *(id *)(a1 + 64);
          id v43 = *(id *)(a1 + 56);
          uint64_t v28 = v15;
          [v14 connectToExternalDeviceWithUserInfo:v23 completion:v37];
        }

        id v10 = -[NSString countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v44,  v54,  16LL);
      }

      while (v10);
      id v6 = v33;
      id v5 = v34;
    }
  }

  else
  {
    [v8 endEvent:@"discover" withError:v6];
    id obj = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Could not discover any endpoints");
    uint64_t v30 = _MRLogForCategory(10LL, v29);
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      *(_DWORD *)__int128 buf = 138543874;
      __int128 v49 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
      __int16 v50 = 2114;
      id v51 = v32;
      __int16 v52 = 2112;
      id v53 = obj;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10007E39C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) origin]);
  if (v3)
  {
    uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) debugName]);
    id v6 = -[NSString initWithFormat:](v4, "initWithFormat:", @"Connected to endpoint: %@", v5);

    uint64_t v8 = _MRLogForCategory(10LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v35 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
      __int16 v36 = 2114;
      int8x16_t v37 = v10;
      __int16 v38 = 2112;
      uint64_t v39 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 nowPlayingServer]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 originClientForOrigin:v3]);

    unsigned int v14 = [v13 isPlaying];
    uint64_t v15 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v16 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) debugName]);
    id v17 = (void *)v16;
    if (v14)
    {
      uint64_t v18 = -[NSString initWithFormat:](v15, "initWithFormat:", @"Endpoint is playing %@", v16);

      uint64_t v20 = _MRLogForCategory(10LL, v19);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v35 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
        __int16 v36 = 2114;
        int8x16_t v37 = v22;
        __int16 v38 = 2112;
        uint64_t v39 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }

      unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) _calculateOperationForEndpoint:*(void *)(a1 + 40) outputDeviceUIDs:*(void *)(a1 + 64)]);
      [*(id *)(a1 + 32) setPauseOperation:v23];

      dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v25 = *(void **)(a1 + 56);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_10007E740;
      v32[3] = &unk_100399250;
      id v33 = (NSString *)*(id *)(a1 + 72);
      [v25 _performOperation:v24 details:v26 completion:v32];
      uint64_t v27 = v33;
    }

    else
    {
      uint64_t v27 = -[NSString initWithFormat:](v15, "initWithFormat:", @"Endpoint is NOT playing %@", v16);

      uint64_t v29 = _MRLogForCategory(10LL, v28);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v35 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
        __int16 v36 = 2114;
        int8x16_t v37 = v31;
        __int16 v38 = 2112;
        uint64_t v39 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_10007E740(uint64_t a1)
{
}

uint64_t sub_10007E828(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_20:
  }

  return v4;
}

  id v33 = *(void *)(a1 + 56);
  if (v33) {
    (*(void (**)(uint64_t, id, id))(v33 + 16))(v33, v5, v6);
  }
}

    id v6 = (v19 - 1) & v19;
    uint64_t v11 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = *a4;
    uint64_t v13 = *(id *)(*(void *)(v29 + 48) + 8 * v11);
    swift_bridgeObjectRetain(v12);
    unsigned int v14 = [v13 effectiveIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    id v17 = v16;

    LOBYTE(v15) = sub_100158DD4(v15, v17, v12);
    swift_bridgeObjectRelease(v17);
    uint64_t result = swift_bridgeObjectRelease(v12);
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v25++, 1LL))
      {
        __break(1u);
LABEL_24:
        uint64_t v22 = v29;
        swift_retain(v29);
        return sub_10015D3F0(a1, a2, v25, v22);
      }
    }
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v27) {
    goto LABEL_24;
  }
  uint64_t v19 = *(void *)(v26 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_20;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_24;
    }
    uint64_t v19 = *(void *)(v26 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }

              if (v60 == ++v61) {
                goto LABEL_45;
              }
            }
          }

  id v42 = v73;
  swift_beginAccess(v73, v82, 0LL, 0LL);
  id v43 = *v42;
  v81[0] = _swiftEmptyArrayStorage;
  __int128 v44 = *(void *)(v43 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v44)
  {
    __int128 v46 = 0LL;
    __int128 v47 = _swiftEmptyArrayStorage;
    while (v46 < *(void *)(v43 + 16))
    {
      __int128 v48 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      __int128 v49 = *(void *)(v5 + 72);
      sub_1001A80F8(v43 + v48 + v49 * v46, (uint64_t)v14, type metadata accessor for HostedRoutingItem);
      if ((v14[*(int *)(v75 + 36)] & 1) != 0)
      {
        uint64_t result = sub_1001A813C((uint64_t)v14, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        sub_1001A81D4((uint64_t)v14, v72, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0) {
          sub_1001A3FBC(0, v47[2] + 1LL, 1);
        }
        __int128 v47 = (void *)v81[0];
        id v51 = *(void *)(v81[0] + 16LL);
        __int16 v50 = *(void *)(v81[0] + 24LL);
        if (v51 >= v50 >> 1)
        {
          sub_1001A3FBC(v50 > 1, v51 + 1, 1);
          __int128 v47 = (void *)v81[0];
        }

        v47[2] = v51 + 1;
        uint64_t result = sub_1001A81D4(v72, (uint64_t)v47 + v48 + v51 * v49, type metadata accessor for HostedRoutingItem);
        id v5 = v70;
        unsigned int v14 = v74;
      }

      if (v44 == ++v46)
      {
        __int16 v52 = (void *)v81[0];
        goto LABEL_33;
      }
    }

    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }

  __int16 v52 = _swiftEmptyArrayStorage;
LABEL_33:
  swift_bridgeObjectRelease();
  id v53 = v52[2];
  swift_release(v52);
  if (!v53)
  {
    __int128 v54 = (uint64_t *)v67;
    swift_beginAccess(v67, v78, 0LL, 0LL);
    __int128 v55 = *v54;
    swift_beginAccess(v73, v81, 33LL, 0LL);
    swift_bridgeObjectRetain_n(v55, 2LL);
    sub_1001A3E3C(v55, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
    swift_endAccess(v81);
    swift_bridgeObjectRelease();
    swift_beginAccess(v54, v77, 1LL, 0LL);
    CFStringRef v54 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }

  __int128 v56 = v73;
  swift_beginAccess(v73, v81, 0LL, 0LL);
  __int128 v57 = *(void *)(*v56 + 16);
  id v58 = (uint64_t *)v67;
  uint64_t result = swift_beginAccess(v67, v80, 0LL, 0LL);
  uint64_t v59 = *v58;
  id v60 = *(void *)(v59 + 16);
  id v61 = __OFADD__(v57, v60);
  id v62 = v57 + v60;
  if (v61) {
    goto LABEL_40;
  }
  if (v62 <= 3)
  {
    swift_beginAccess(v73, v79, 33LL, 0LL);
    swift_bridgeObjectRetain_n(v59, 2LL);
    sub_1001A3E3C(v59, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
    swift_endAccess(v79);
    swift_bridgeObjectRelease();
    id v63 = v67;
    swift_beginAccess(v67, v79, 1LL, 0LL);
    *id v63 = (unint64_t)_swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease();
  }

  return result;
}

    return;
  }

  if ((v4[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) != 0)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_4;
    }
    goto LABEL_24;
  }

  sub_100160874(a2, a3);
  sub_100237070(a2, a3, (uint64_t)&type metadata for MemberSyncMessage, (uint64_t)&off_1003FBB40, (uint64_t)&aBlock);
  uint64_t v27 = aBlock;
  if (!aBlock)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    __int128 v57 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v57, (uint64_t)qword_1003FF018);
    uint64_t v20 = v4;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    uint64_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unsigned __int8 v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unsigned __int8 v23 = 138543362;
      aBlocuint64_t k = v20;
      id v58 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v82, v23 + 4, v23 + 12);
      *uint64_t v24 = v20;

      uint64_t v26 = "[%{public}@] MemberSync message payload is malformed.";
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  uint64_t v28 = v82;
  id v70 = v83;
  uint64_t v29 = (char *)aBlock[2];
  uint64_t v30 = (void **)_swiftEmptyArrayStorage;
  __int16 v74 = v7;
  id v75 = v4;
  __int16 v72 = aBlock;
  v73 = v8;
  __int16 v71 = v82;
  if (v29)
  {
    aBlocuint64_t k = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)(v29);
    id v31 = (unsigned __int8 *)v27 + 58;
    do
    {
      uint64_t v32 = *(void **)(v31 - 10);
      id v33 = *(v31 - 2);
      id v34 = *(v31 - 1);
      uint64_t v35 = *v31;
      v31 += 32;
      __int16 v36 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
      swift_bridgeObjectRetain();
      int8x16_t v37 = v32;
      __int16 v38 = String._bridgeToObjectiveC()();
      uint64_t v39 = [v36 initWithIdentifier:v38 identity:v37 connected:v33 guest:v34 hidden:v35];

      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      uint64_t v41 = aBlock[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
      id v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized ContiguousArray._endMutation()(v42);
      --v29;
    }

    while (v29);
    uint64_t v30 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v7 = v74;
    uint64_t v4 = v75;
    uint64_t v8 = v73;
    uint64_t v28 = v71;
  }

  id v43 = *(void *)(v28 + 16);
  if (v43)
  {
    id v69 = v30;
    aBlocuint64_t k = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)(v43);
    __int128 v44 = (unsigned __int8 *)(v28 + 58);
    do
    {
      __int128 v45 = *(void **)(v44 - 10);
      __int128 v46 = *(v44 - 2);
      __int128 v47 = *(v44 - 1);
      __int128 v48 = *v44;
      v44 += 32;
      __int128 v49 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
      swift_bridgeObjectRetain();
      __int16 v50 = v45;
      id v51 = String._bridgeToObjectiveC()();
      __int16 v52 = [v49 initWithIdentifier:v51 identity:v50 connected:v46 guest:v47 hidden:v48];

      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
      __int128 v54 = aBlock[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
      __int128 v55 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
      specialized ContiguousArray._endMutation()(v55);
      --v43;
    }

    while (v43);
    __int128 v56 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v7 = v74;
    uint64_t v4 = v75;
    uint64_t v8 = v73;
    uint64_t v30 = v69;
  }

  else
  {
    __int128 v56 = (void **)_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v60 = (void *)swift_allocObject(&unk_1003A5D30, 48LL, 7LL);
  id v61 = v70;
  v60[2] = v4;
  v60[3] = v61;
  v60[4] = v30;
  v60[5] = v56;
  v85 = sub_1001EE804;
  id v86 = v60;
  aBlocuint64_t k = _NSConcreteStackBlock;
  int8x16_t v82 = 1107296256LL;
  v83 = sub_100157EA8;
  v84 = &unk_1003A5D48;
  id v62 = _Block_copy(&aBlock);
  id v63 = v4;
  __int128 v64 = v76;
  static DispatchQoS.unspecified.getter(v63);
  v80 = _swiftEmptyArrayStorage;
  unsigned int v65 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  id v66 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  __int128 v67 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  id v68 = v79;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v66, v67, v7, v65);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v64, v68, v62);
  _Block_release(v62);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v68, v7);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v78);
  swift_release(v86);
}

    id v9 = (v14 - 1) & v14;
    uint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16LL) >= 2uLL)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v4++, 1LL))
      {
        __break(1u);
        return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
      }
    }
  }

  uint64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
  }
  unsigned int v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    id v5 = v15;
    goto LABEL_20;
  }

  while (1)
  {
    id v5 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1001E48B0(result, a2, v4, a3);
    }
    unsigned int v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }

    uint64_t v4 = (v10 - 1) & v10;
    uint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_21:
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 16 * v8 + 8);
    uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain(v12);
    unsigned int v14 = v13;
    uint64_t v15 = [v14 identifier];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    uint64_t v19 = [a2 identifier];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v16 == v20 && v18 == v22)
    {

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease_n(v18, 2LL);
LABEL_28:
      swift_release(a1);
      return 1LL;
    }

    uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);

    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v18);
    uint64_t result = swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0) {
      goto LABEL_28;
    }
  }

  while (1)
  {
    id v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v26) {
      goto LABEL_29;
    }
    id v10 = *(void *)(v25 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }

    id v17 = (v23 - 1) & v23;
  }

  uint64_t v24 = v22 + 4;
  if (v24 >= v26)
  {
LABEL_25:
    swift_release(a2);
    return v27;
  }

  unsigned __int8 v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    uint64_t v19 = v24;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v19 >= v26) {
      goto LABEL_25;
    }
    unsigned __int8 v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }

  uint64_t v21 = sub_1001741A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v21, v8);
  uint64_t v22 = swift_retain_n(v4, 4LL);
  unsigned __int8 v23 = (os_log_s *)Logger.logObject.getter(v22);
  uint64_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    int8x16_t v37 = v9;
    __int16 v38 = v8;
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = swift_slowAlloc(96LL, -1LL);
    id v40 = v26;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v27 = _typeName(_:qualified:)(v36, 0LL);
    uint64_t v39 = sub_10015ADC4(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    if (v13[2] && (uint64_t v29 = v13[1]) != 0)
    {
      uint64_t v30 = *v13;
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = 0xE300000000000000LL;
      uint64_t v30 = 7104878LL;
    }

    uint64_t v39 = sub_10015ADC4(v30, v29, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 14, v25 + 22);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    if (v13[2])
    {
      id v31 = swift_bridgeObjectRetain();
      uint64_t v32 = Array.description.getter(v31, &type metadata for String);
      id v34 = v33;
      swift_bridgeObjectRelease();
    }

    else
    {
      id v34 = 0xE300000000000000LL;
      uint64_t v32 = 7104878LL;
    }

    uint64_t v39 = sub_10015ADC4(v32, v34, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 24, v25 + 32);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%s] setActiveSessionElements - value: <SessionElements - groupIdentifier: %s, devices: %s",  (uint8_t *)v25,  0x20u);
    swift_arrayDestroy(v26, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  }

  else
  {

    swift_release_n(v4, 4LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  return sub_100269150();
}

BOOL sub_10007EE28(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  else {
    unsigned __int8 v3 = -[MRAVOutputDevice canRelayCommunicationChannel](v2, "canRelayCommunicationChannel");
  }

  return v3;
}

uint64_t sub_10007F61C(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 error]);
  [v3 endEvent:@"pause" withError:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10007F674(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = MRGroupTopologyModificationRequestTypeDescription(2LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v3 endEvent:v6 withError:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10007F6D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

BOOL sub_10007F70C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isRemoteControllable](a2, "isRemoteControllable") ^ 1;
}

uint64_t sub_10007F728(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 pauseOperation]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 relevantOutputDeviceUIDs]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);

  uint64_t v7 = [v5 containsObject:v6] ^ 1;
  return v7;
}

void sub_10007F7A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  if (*(_BYTE *)(a1 + 48))
  {

    id v4 = 0LL;
  }

  [*(id *)(a1 + 32) endEvent:@"modifyRelayEndpoint" withError:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10007F87C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

BOOL sub_10007FC8C(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDPauseOutputDevicesRequestEndpointOperationEvent error](a2, "error"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

id sub_10007FD98(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  return -[MRDPauseOutputDevicesRequestEndpointOperationEvent startDate](a2, "startDate");
}

id sub_10007FDA0(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  return -[MRDPauseOutputDevicesRequestEndpointOperationEvent endDate](a2, "endDate");
}

int64_t sub_10007FDA8(id a1, NSDate *a2, NSDate *a3)
{
  return -[NSDate compare:](a2, "compare:", a3);
}

int64_t sub_10007FDB0(id a1, NSDate *a2, NSDate *a3)
{
  return -[NSDate compare:](a2, "compare:", a3);
}

void sub_10007FF58(_Unwind_Exception *a1)
{
}

BOOL sub_10007FFB0(id a1, MRDPauseOutputDevicesRequestEndpointOperation *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDPauseOutputDevicesRequestEndpointOperation error](a2, "error"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

BOOL sub_100080148(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = -[MRAVOutputDevice deviceSubtype](v2, "deviceSubtype") == 12
    || -[MRAVOutputDevice clusterType](v2, "clusterType") == 1;

  return v3;
}

BOOL sub_1000802DC(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = -[MRAVOutputDevice deviceSubtype](v2, "deviceSubtype") == 13
    || -[MRAVOutputDevice clusterType](v2, "clusterType") == 2;

  return v3;
}

void sub_1000812A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = (dispatch_queue_s *)v10[5];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100081384;
  v15[3] = &unk_100399880;
  id v16 = v7;
  id v17 = v10;
  id v18 = v8;
  id v19 = v9;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

void sub_100081384(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) data]);
  if (v2)
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) data]);
    id v11 = 0LL;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v3,  0LL,  0LL,  &v11));
    id v5 = v11;
  }

  else
  {
    id v4 = 0LL;
    id v5 = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10008148C;
  void v9[3] = &unk_10039C568;
  id v8 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 32);
  objc_msgSend( v8,  "_onWorkerQueue_connectRemoteControlChannelForDestination:session:userInfo:completion:",  v6,  v7,  v4,  v9);
}

void sub_10008148C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 protobufData]);
  [v2 replyWithData:v3 priority:300];
}

id sub_1000814D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_initializeDiscoveryChannel");
}

id sub_100081660(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_connectDiscoveryChannelWithReason:", @"Start");
}

id sub_1000816F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectDiscoveryChannel");
}

id sub_1000817C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_connectDiscoveryChannelWithReason:", @"IDS Connected");
}

void sub_100081830(uint64_t a1)
{
  uint64_t v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  104LL,  @"IDSConnection Disconnected");
  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:", v2);
}

void sub_100081A20(_Unwind_Exception *a1)
{
}

void sub_100081A34(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(_BYTE *)(*(void *)(a1 + 32) + 49LL) = 0;
  objc_sync_exit(v2);

  id v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 discoveryChannel]);
  objc_msgSend(v4, "_onWorkerQueue_sendEndpoint:toClient:options:", v3, v5, 0);
}

void sub_100081B94(uint64_t a1)
{
  id v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  104LL,  @"MRDIDSCompanionRemoteControlService.setConnectionState");
  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:", v2);
}

id sub_100081D84(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onWorkerQueue_sendEndpoint:toClient:options:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_1000821E8(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create( "com.apple.mediaremote.MRDIDSCompanionRemoteControlService.discoveryChannelClientQueue",  v4);
  uint64_t v3 = (void *)qword_1003FDD68;
  qword_1003FDD68 = (uint64_t)v2;
}

void sub_1000826F4(_Unwind_Exception *a1)
{
}

void sub_10008273C(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = (dispatch_queue_s *)WeakRetained[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10008280C;
    v7[3] = &unk_100399880;
    id v8 = WeakRetained;
    id v9 = a1[4];
    id v10 = a1[5];
    id v11 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_10008280C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 48)]);

  if (v3)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) object]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRIDSCompanionConnection sharedManager](&OBJC_CLASS___MRIDSCompanionConnection, "sharedManager"));
    id v5 = objc_alloc(&OBJC_CLASS___MRProtocolMessage);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 error]);
    id v7 = [v5 initWithUnderlyingCodableMessage:0 error:v6];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 protobufData]);
    [v4 sendMessage:v8 type:MRIDSServiceMessageTypeDisconnectRemoteControl destination:*(void *)(a1 + 40) session:*(void *)(a1 + 48) options:0 priority:300];
  }

void sub_100082924(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 groupLeader]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 exportOutputDevice:v5 endpoint:v3]);

  if ([v6 containsUID:*(void *)(a1 + 40)])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) destinationOutputDeviceUID]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceWithUID:v7]);

    if (*(_BYTE *)(a1 + 80) && ([*(id *)(a1 + 48) isDestinationLocal] & 1) == 0) {
      [*(id *)(a1 + 56) _addAuthorizationCallbackForOutputDevice:v8 destination:*(void *)(a1 + 40) session:*(void *)(a1 + 64)];
    }
    id v9 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100082AF4;
    v17[3] = &unk_10039C0D0;
    char v22 = *(_BYTE *)(a1 + 80);
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 56);
    id v18 = v10;
    uint64_t v19 = v11;
    id v20 = v8;
    id v21 = *(id *)(a1 + 72);
    id v12 = v8;
    [v10 requestConnectedDestinationEndpoint:v17];
  }

  else
  {
    id v13 = objc_alloc(&OBJC_CLASS___NSError);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 debugName]);
    uint64_t v15 = -[NSError initWithMRError:format:]( v13,  "initWithMRError:format:",  118LL,  @"Tried to connect to endpoint but its groupLeader changed from %@ to %@",  v14,  *(void *)(a1 + 40));

    id v16 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v15];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_100082AF4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v5];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100082C74(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[MRPromptForRouteAuthorizationMessage alloc] initWithRoute:a1[4] inputType:a2];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRIDSCompanionConnection sharedManager](&OBJC_CLASS___MRIDSCompanionConnection, "sharedManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 protobufData]);
  uint64_t v9 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v11 = a1[5];
  uint64_t v10 = a1[6];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100082D84;
  v13[3] = &unk_10039C120;
  id v14 = v5;
  id v12 = v5;
  [v7 sendMessage:v8 type:v9 destination:v11 session:v10 options:0 priority:300 response:v13];
}

void sub_100082D84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 data]);
    uint64_t v10 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRProtocolMessage protocolMessageWithProtobufData:error:]( &OBJC_CLASS___MRProtocolMessage,  "protocolMessageWithProtobufData:error:",  v5,  &v10));
    uint64_t v7 = v10;

    id v8 = 0LL;
    if (!v7)
    {
      uint64_t v9 = objc_opt_class(&OBJC_CLASS___MRPromptForRouteAuthorizationResponseMessage);
      if ((objc_opt_isKindOfClass(v6, v9) & 1) != 0) {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 response]);
      }
      else {
        id v8 = 0LL;
      }
    }
  }

  else
  {
    id v8 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100082F88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MRLogCategoryConnections();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = 138412546;
    uint64_t v12 = v9;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[IDSCompanionRemoteControlService] Disconnecting remoteControlChannel from %@-%@...",  (uint8_t *)&v11,  0x16u);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 connection]);
  [v10 closeWithError:*(void *)(a1 + 40)];
}

id sub_100083110(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:",  a2,  *(void *)(a1 + 40));
}

void sub_100083CB0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  [*(id *)(*(void *)(a1 + 32) + 120) setDeviceInfo:v2];
}

void sub_100083DC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100083DE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100083DF0(uint64_t a1)
{
}

void sub_100083DF8(uint64_t a1)
{
}

void *sub_100083E98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 128))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingServer]);
    [v4 unregisterOrigin:*(void *)(*(void *)(a1 + 32) + 128)];

    uint64_t v2 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(v2 + 128), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (result[16]) {
    return _objc_msgSend(result, "_onSerialQueue_registerOriginCallbacks");
  }
  return result;
}

void sub_100083FEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100084004(uint64_t a1)
{
}

id sub_1000840A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
  [*(id *)(a1 + 32) setLinkAgent:v3];

  if ([*(id *)(a1 + 32) isCompanion])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
    [*(id *)(a1 + 32) setDeviceUID:v4];
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 136LL), *(id *)(a1 + 32));
  return [*(id *)(*(void *)(a1 + 40) + 120) setDeviceInfo:*(void *)(a1 + 32)];
}

void sub_100084248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100084260(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_deviceInfo"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100084364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10008437C(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 40LL);
  return result;
}

void sub_100084470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100084488(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 40LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 40LL) = *(_DWORD *)(a1 + 56);
  uint64_t v3 = _MRLogForCategory(3LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 32) + 40LL);
    id v8 = v6;
    uint64_t v9 = (void *)MRExternalDeviceConnectionStateCopyDescription(v7);
    [*(id *)(*(void *)(a1 + 32) + 32) timeIntervalSinceNow];
    double v11 = v10;

    int v15 = 138544130;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    id v18 = v6;
    __int16 v19 = 2112;
    id v20 = v9;
    __int16 v21 = 2050;
    double v22 = -v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WHAPRO: ConnectionState for device %{public}@ change from %{public}@ to %@ in %{public}f seconds",  (uint8_t *)&v15,  0x2Au);
  }

  uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + 32);
  *(void *)(v13 + 32) = v12;

  if ((*(_DWORD *)(a1 + 56) & 0xFFFFFFFE) == 2) {
    [*(id *)(a1 + 32) _callAllPendingCompletionsWithError:*(void *)(a1 + 40)];
  }
}

id sub_1000846F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setPairingCallbackQueue:*(void *)(a1 + 40)];
}

id sub_1000847E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setConnectionStateCallbackQueue:*(void *)(a1 + 40)];
}

id sub_1000848D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setNameCallbackQueue:*(void *)(a1 + 40)];
}

id sub_1000849C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setPairingAllowedCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084AB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setCustomDataCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084BA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setOutputDevicesUpdatedCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084C94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setOutputDevicesRemovedCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084D84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setVolumeCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084E74(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setVolumeControlCapabilitiesCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100084F64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setVolumeMutedCallbackQueue:*(void *)(a1 + 40)];
}

id sub_100085054(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDeviceInfoCallbackQueue:*(void *)(a1 + 40)];
}

void sub_100086128( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id location)
{
}

void sub_100086164(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v17 = a1[5];
      uint64_t v16 = a1[6];
      id v18 = (void *)a1[4];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:a1[7]];
      int v27 = 138544130;
      uint64_t v28 = v17;
      __int16 v29 = 2114;
      uint64_t v30 = v16;
      __int16 v31 = 2114;
      id v32 = v18;
      __int16 v33 = 2048;
      uint64_t v34 = v19;
      id v20 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      __int16 v21 = v8;
      uint32_t v22 = 42;
    }

    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v23 = a1[5];
      uint64_t v24 = a1[6];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:a1[7]];
      int v27 = 138543874;
      uint64_t v28 = v23;
      __int16 v29 = 2114;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      id v20 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      __int16 v21 = v8;
      uint32_t v22 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v27, v22);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    uint64_t v12 = a1[4];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:a1[7]];
    int v27 = 138544386;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    uint64_t v30 = v10;
    __int16 v31 = 2114;
    id v32 = v3;
    __int16 v33 = 2114;
    uint64_t v34 = v12;
    __int16 v35 = 2048;
    uint64_t v36 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v27,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v9) {
    sub_1002B6504();
  }
LABEL_14:

  uint64_t v26 = a1[8];
  if (v26) {
    (*(void (**)(uint64_t, id))(v26 + 16))(v26, v3);
  }
}

id sub_1000863B0(uint64_t a1)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3032000000LL;
  BOOL v9 = sub_100083DE0;
  uint64_t v10 = sub_100083DF0;
  id v11 = 0LL;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10008646C;
  v5[3] = &unk_100398EC8;
  void v5[4] = v1;
  void v5[5] = &v6;
  dispatch_sync(v2, v5);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_10008646C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 57) || *(_DWORD *)(v2 + 40) != 1)
  {
    uint64_t Error = MRMediaRemoteCreateError(104LL);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = Error;
  }

id sub_1000864D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceInfo]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceInfo]);
    uint64_t v5 = MRAnalyticsCompositionForDeviceInfo();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  v23[0] = kMREventOriginatorKey;
  uint64_t v6 = MRAnalyticsCompositionForLocalDevice();
  uint64_t v7 = MRAnalyticsDeviceCompositionDescription(v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v24[0] = v8;
  v23[1] = kMREventDestinationKey;
  uint64_t v9 = MRAnalyticsDeviceCompositionDescription(v5);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v24[1] = v10;
  v23[2] = kMRConnectionIsRetryKey;
  uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 88)));
  uint64_t v12 = (void *)v11;
  uint64_t v13 = @"NONE";
  uint64_t v14 = *(const __CFString **)(a1 + 32);
  BOOL v15 = *(const __CFString **)(a1 + 40);
  if (!v14) {
    uint64_t v14 = @"NONE";
  }
  v24[2] = v11;
  v24[3] = v14;
  v23[3] = kMRConnectionReasonKey;
  void v23[4] = @"requestID";
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = @"NONE";
  }
  if (*(void *)(a1 + 48)) {
    uint64_t v13 = *(const __CFString **)(a1 + 48);
  }
  void v24[4] = v16;
  v24[5] = v13;
  v23[5] = kMREventAppBundleKey;
  v23[6] = kMRConnectionAllowAuthenticationPromptKey;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 89)));
  v24[6] = v17;
  v23[7] = kMREventDurationKey;
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 80)));
  v24[7] = v18;
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v24,  v23,  8LL));
  id v20 = [v19 mutableCopy];

  [v20 addEntriesFromDictionary:*(void *)(a1 + 56)];
  uint64_t v21 = *(void *)(a1 + 64);
  if (v21) {
    [v20 setObject:v21 forKeyedSubscript:kMRConnectionFailureReasonKey];
  }

  return v20;
}

id sub_10008670C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_prepareToDisconnect:userInfo:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_10008671C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 48LL) = 0LL;
  if (!*(void *)(*(void *)(a1 + 32) + 80LL))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 80);
    *(void *)(v3 + 80) = v2;

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

void sub_10008678C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[MRPowerLogger sharedLogger](&OBJC_CLASS___MRPowerLogger, "sharedLogger"));
  [v2 logEvent:MRPowerLogEventRemoteControlSession withInfo:*(void *)(a1 + 32)];
}

uint64_t sub_100086C88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086C94(uint64_t a1, void *a2)
{
  id v3 = a2;
}

id sub_100086CE0(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onWorkerQueue_connectWithOptions:isRetry:userInfo:completion:",  *(unsigned int *)(a1 + 56),  0,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_100087148(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"qos: %u->%u",  *(unsigned int *)(a1 + 72),  qos_class_self());
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v34 = @"TransportExternalDevice.connectWithOptions";
    __int16 v35 = 2114;
    uint64_t v36 = v8;
    __int16 v37 = 2112;
    __int16 v38 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = _MRLogForCategory(10LL, v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = v12;
  if (!v3)
  {
    BOOL v19 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (!v19) {
        goto LABEL_16;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(NSString **)(a1 + 40);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v34 = @"TransportExternalDevice.connectWithOptions";
      __int16 v35 = 2114;
      uint64_t v36 = v20;
      __int16 v37 = 2114;
      __int16 v38 = v21;
      __int16 v39 = 2048;
      uint64_t v40 = v22;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v24 = v13;
      uint32_t v25 = 42;
    }

    else
    {
      if (!v19) {
        goto LABEL_16;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v34 = @"TransportExternalDevice.connectWithOptions";
      __int16 v35 = 2114;
      uint64_t v36 = v26;
      __int16 v37 = 2048;
      __int16 v38 = v27;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v24 = v13;
      uint32_t v25 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
    goto LABEL_15;
  }

  BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (!v14) {
      goto LABEL_16;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v34 = @"TransportExternalDevice.connectWithOptions";
    __int16 v35 = 2114;
    uint64_t v36 = v15;
    __int16 v37 = 2114;
    __int16 v38 = v3;
    __int16 v39 = 2114;
    uint64_t v40 = v16;
    __int16 v41 = 2048;
    uint64_t v42 = v18;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_15:

    goto LABEL_16;
  }

  if (v14) {
    sub_1002B6ED0();
  }
LABEL_16:

  uint64_t v28 = *(void **)(a1 + 64);
  if (v28)
  {
    __int16 v29 = *(dispatch_queue_s **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000874A0;
    block[3] = &unk_10039AD10;
    id v32 = v28;
    __int16 v31 = v3;
    dispatch_async(v29, block);
  }
}

uint64_t sub_1000874A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1000874B0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 352LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 352);
    *(void *)(v4 + 352) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 352LL);
  }

  [v2 addObject:*(void *)(a1 + 40)];
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100087558;
  v11[3] = &unk_100399508;
  void v11[4] = v9;
  return objc_msgSend( v9,  "_onSerialQueue_prepareToConnectWithOptions:userInfo:connectionAttemptDetails:connectionHandler:",  v6,  v7,  v8,  v11);
}

id sub_100087558(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _callAllPendingCompletionsWithError:a2];
}

uint64_t sub_100087644(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 57LL) = 0;
  return result;
}

void sub_100087EF0(id a1)
{
  uint64_t v1 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", &off_1003BBAF8);
  id v2 = (void *)qword_1003FDD78;
  qword_1003FDD78 = (uint64_t)v1;
}

id sub_100087F24(uint64_t a1)
{
  v7[0] = kMREventDurationKey;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v8[0] = v2;
  v7[1] = kMRDisconnectionRetryCount;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  v8[1] = v3;
  v7[2] = kMRDisconnectionWillAttemptReconnection;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  v8[2] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  3LL));

  return v5;
}

void sub_100088028(uint64_t a1)
{
  id v2 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 3LL);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  MRExternalDeviceConnectionReasonUserInfoKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  MRExternalDeviceConnectionCorrelationIDUserInfoKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 48),  MRExternalDeviceConnectionClientBundleIDUserInfoKey);
  id v3 = *(unsigned int **)(a1 + 56);
  uint64_t v4 = v3[11];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100088148;
  v5[3] = &unk_100398F18;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  objc_msgSend(v3, "_onWorkerQueue_connectWithOptions:isRetry:userInfo:completion:", v4, 1, v2, v5);
}

void sub_100088148(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shortDescription]);

  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (!v3)
  {
    BOOL v14 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (!v4)
    {
      if (!v14) {
        goto LABEL_14;
      }
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v20 = 138543874;
      uint64_t v21 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
      __int16 v22 = 2114;
      uint64_t v23 = v17;
      __int16 v24 = 2048;
      id v25 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v20,  0x20u);
      goto LABEL_13;
    }

    if (!v14) {
      goto LABEL_14;
    }
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shortDescription]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v20 = 138544130;
    uint64_t v21 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
    __int16 v22 = 2114;
    uint64_t v23 = v15;
    __int16 v24 = 2114;
    id v25 = v11;
    __int16 v26 = 2048;
    int v27 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  (uint8_t *)&v20,  0x2Au);
LABEL_8:

LABEL_13:
    goto LABEL_14;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shortDescription]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v20 = 138544386;
    uint64_t v21 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
    __int16 v22 = 2114;
    uint64_t v23 = v10;
    __int16 v24 = 2114;
    id v25 = v3;
    __int16 v26 = 2114;
    int v27 = v11;
    __int16 v28 = 2048;
    uint64_t v29 = v13;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v20,  0x34u);
    goto LABEL_8;
  }

  if (v9) {
    sub_1002B6FC8();
  }
LABEL_14:

  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_sendBatchedMessages");
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19) {
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);
  }
}

void sub_1000883D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_onWorkerQueue_disconnect:", *(void *)(a1 + 32));
    id v3 = v5;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, *(void *)(a1 + 32));
    id v3 = v5;
  }
}

void sub_1000886B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id sub_1000886EC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 352) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 352) removeAllObjects];
}

id sub_1000887BC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_prepareToDisconnect:userInfo:completion:",  *(void *)(a1 + 40),  0,  0);
}

void sub_100088894(_Unwind_Exception *a1)
{
}

void sub_1000888B0(uint64_t a1, __CFError *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (a2 && WeakRetained)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    BOOL v9 = @"reason";
    uint64_t v10 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    id v8 = -[NSError initWithMRError:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:userInfo:",  CFErrorGetCode(a2),  v7);
    [v5 disconnect:v8];
  }
}

void sub_100088C74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100088D14;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100088D14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100088D24(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 error]);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
}

void sub_100088E44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100088E5C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 120) isValid] & 1) == 0)
  {
    uint64_t Error = MRMediaRemoteCreateError(100LL);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = Error;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) cryptoSession]);
    if ([v5 isValid])
    {
LABEL_7:

      goto LABEL_8;
    }

    unsigned int v6 = [*(id *)(*(void *)(a1 + 32) + 152) requiresCustomPairing];

    if (v6)
    {
      uint64_t v7 = MRMediaRemoteCreateError(101LL);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v5 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
      goto LABEL_7;
    }
  }

void sub_100089298( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000892B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (WeakRetained) {
    *((_BYTE *)WeakRetained + 5_Block_object_dispose(va, 8) = 0;
  }
  qos_class_t v6 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v6, 0LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100089388;
  v11[3] = &unk_10039D958;
  id v9 = *(id *)(a1 + 32);
  id v12 = v3;
  id v13 = v9;
  id v10 = v3;
  MRMediaRemoteNowPlayingPing(v8, v11);
}

uint64_t sub_100089388(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000893A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 0LL);
  qos_class_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100089454;
  void v9[3] = &unk_10039AD10;
  id v7 = *(id *)(a1 + 32);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  dispatch_async(v6, v9);
}

void sub_100089454(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000896D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100089770;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100089770(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100089780(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000897C8(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 72);
  return [*(id *)(a1 + 32) setOutputDeviceVolume:*(void *)(a1 + 40) outputDeviceUID:*(void *)(a1 + 48) details:*(void *)(a1 + 56) queue:*(void *)(a1 + 64) completion:a2];
}

void sub_100089A2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100089AC4;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100089AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100089AD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_100089B1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) muteOutputDeviceVolume:*(unsigned __int8 *)(a1 + 72) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48) queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100089D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100089E18;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_100089E18(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100089E28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_100089E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustOutputDeviceVolume:*(void *)(a1 + 72) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48) queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100089FF4(uint64_t a1, void *a2, float a3)
{
  id v6 = a2;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory(3LL, v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting volume %@", buf, 0xCu);
    }
  }

  id v9 = *(void **)(a1 + 40);
  if (v9)
  {
    id v10 = *(dispatch_queue_s **)(a1 + 32);
    if (v10)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008A128;
      block[3] = &unk_100399830;
      id v13 = v9;
      float v14 = a3;
      id v12 = v6;
      dispatch_async(v10, block);
    }
  }
}

uint64_t sub_10008A128(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(float *)(a1 + 48));
}

void sub_10008A13C(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);

  float v4 = 0.0;
  if (!v3)
  {
    [v8 volume];
    float v4 = v5;
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);
  (*(void (**)(uint64_t, void *, float))(v6 + 16))(v6, v7, v4);
}

void sub_10008A3D4(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory(3LL, v5);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error getting volume control capablities %@",  buf,  0xCu);
    }
  }

  id v9 = *(void **)(a1 + 40);
  if (v9)
  {
    id v10 = *(dispatch_queue_s **)(a1 + 32);
    if (v10)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008A500;
      block[3] = &unk_100399830;
      id v13 = v9;
      int v14 = a2;
      id v12 = v6;
      dispatch_async(v10, block);
    }
  }
}

uint64_t sub_10008A500(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_10008A514(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);

  if (v3) {
    id v4 = 0LL;
  }
  else {
    id v4 = [v7 capabilities];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
  (*(void (**)(uint64_t, id, void *))(v5 + 16))(v5, v4, v6);
}

uint64_t sub_10008A5A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008A734(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(3LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error setting listening mode %@", buf, 0xCu);
    }
  }

  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    if (v8)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10008A858;
      void v9[3] = &unk_10039AD10;
      id v11 = v7;
      id v10 = v4;
      dispatch_async(v8, v9);
    }
  }
}

uint64_t sub_10008A858(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10008A868(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10008AA20(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(3LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error setting conversation detection %@",  buf,  0xCu);
    }
  }

  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    if (v8)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10008AB44;
      void v9[3] = &unk_10039AD10;
      id v11 = v7;
      id v10 = v4;
      dispatch_async(v8, v9);
    }
  }
}

uint64_t sub_10008AB44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10008AB54(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10008AD74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_10008AE0C;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_10008AE0C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10008AE1C(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10008AE64(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyTopologyWithRequest:*(void *)(a1 + 40) withReplyQueue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10008B050(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    if (v8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008B110;
      block[3] = &unk_10039A550;
      id v12 = v7;
      id v10 = v5;
      id v11 = v6;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_10008B110(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10008B124(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___MRCreateHostedEndpointResponseMessage);
  char isKindOfClass = objc_opt_isKindOfClass(v10, v3);
  uint64_t v5 = *(void *)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    id v6 = v10;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 groupUID]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

    (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v7, v8);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v10 error]);
    if (v7)
    {
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v7);
    }

    else
    {
      id v9 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 1LL);
      (*(void (**)(uint64_t, void, NSError *))(v5 + 16))(v5, 0LL, v9);
    }
  }
}

id sub_10008B224(uint64_t a1)
{
  return [*(id *)(a1 + 32) createHostedEndpointWithOutputDeviceUIDs:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10008B444(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(3LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error removing from parent group %@",  buf,  0xCu);
    }
  }

  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    if (v8)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10008B568;
      void v9[3] = &unk_10039AD10;
      id v11 = v7;
      id v10 = v4;
      dispatch_async(v8, v9);
    }
  }
}

uint64_t sub_10008B568(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_10008B578(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeFromParentGroup:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10008B744( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10008B75C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008B814;
  block[3] = &unk_10039A550;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10008B814(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10008B828(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_deviceInfo"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupSessionToken]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sessionIdentifier]);

  if (v4)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    id v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v19[2] = sub_10008BA20;
    v19[3] = &unk_100399530;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    id v20 = v6;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10008BA34;
    v16[3] = &unk_10039DAC0;
    id v8 = [v5 initWithTimeout:@"requestGroupSession" reason:v7 queue:v19 handler:30.0];
    id v17 = v8;
    id v18 = *(id *)(a1 + 40);
    id v9 = objc_retainBlock(v16);
    id v10 = *(void **)(*(void *)(a1 + 32) + 104LL);
    if (!v10)
    {
      id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = *(void **)(v12 + 104);
      *(void *)(v12 + 104) = v11;

      id v10 = *(void **)(*(void *)(a1 + 32) + 104LL);
    }

    id v14 = [v9 copy];
    id v15 = objc_retainBlock(v14);
    [v10 addObject:v15];
  }
}

uint64_t sub_10008BA20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008BA34(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10008C390(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.transportExternalDevice.clientConnectionQueue", v4);
  uint64_t v3 = (void *)qword_1003FDD88;
  qword_1003FDD88 = (uint64_t)v2;
}

void sub_10008C9E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 64))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 152) name]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) uid]);
    id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.mediaremote.MRExternalDevice/%@(%@)",  v3,  v4));

    id v5 = -[MROSTransaction initWithName:](objc_alloc(&OBJC_CLASS___MROSTransaction), "initWithName:", v8);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 64);
    *(void *)(v6 + 64) = v5;

    MRRegisterTransaction(*(void *)(*(void *)(a1 + 32) + 64LL));
  }

void sub_10008D160( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location, char a27)
{
}

void sub_10008D194(uint64_t a1, void *a2)
{
  id v15 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v15 error]);

    if (v4)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v15 error]);
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v7 = *(id *)(v6 + 40);
      *(void *)(v6 + 40) = v5;
LABEL_10:

      goto LABEL_11;
    }

    uint64_t v8 = objc_opt_class(&OBJC_CLASS___MRDeviceInfoMessage);
    if ((objc_opt_isKindOfClass(v15, v8) & 1) != 0)
    {
      id v7 = v15;
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 deviceInfo]);
      if (v9)
      {
        id v10 = (void *)v9;
        uint64_t v11 = WeakRetained[1];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_10008D314;
        v16[3] = &unk_100398F40;
        id v17 = WeakRetained;
        id v18 = v10;
        id v7 = v7;
        id v19 = v7;
        id v12 = v10;
        msv_dispatch_sync_on_queue(v11, v16);

LABEL_9:
        goto LABEL_10;
      }
    }

    else
    {
      id v7 = 0LL;
    }

    id v13 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  100LL,  @"deviceInfo response was nil");
    uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v12 = *(id *)(v14 + 40);
    *(void *)(v14 + 40) = v13;
    goto LABEL_9;
  }

void sub_10008D314(uint64_t a1)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);
  [v2 _handleDeviceInfoChange:v3 oldDevice:v4];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) supportedProtocolMessages]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientConnection]);
  [v5 setSupportedMessages:v6];
}

void sub_10008D398(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 0LL);
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10008D448;
  void v9[3] = &unk_10039AD10;
  id v7 = *(id *)(a1 + 32);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  dispatch_async(v6, v9);
}

uint64_t sub_10008D448(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_10008DC14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_registerOriginCallbacks");
}

uint64_t sub_10008E068(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10008E24C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10008E278(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  qos_class_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 96);
  *(void *)(v5 + 96) = 0LL;
}

void sub_10008E438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0LL;

  *(_DWORD *)(*(void *)(a1 + 32) + 44LL) = 0;
}

void sub_10008E9A4(_Unwind_Exception *a1)
{
}

void sub_10008EA10(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10008EB0C;
    v14[3] = &unk_100399DA8;
    id v15 = v11;
    [WeakRetained _handleRemoteCommand:a3 withOptions:v10 playerPath:v9 completion:v14];
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  2LL));
    (*((void (**)(id, void *))v11 + 2))(v11, v13);
  }
}

uint64_t sub_10008EB0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008EB18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10008EBF8;
    v10[3] = &unk_10039DB80;
    id v11 = v7;
    [WeakRetained _handlePlaybackQueueRequest:a2 forPlayerPath:a3 completion:v10];
  }

  else
  {
    id v9 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  100LL,  @"Connection Dealloc");
    (*((void (**)(id, void, NSError *))v7 + 2))(v7, 0LL, v9);
  }
}

uint64_t sub_10008EBF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008EC04(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained errorForCurrentState]);
    if (v6)
    {
      uint64_t v7 = _MRLogForCategory(4LL, v5);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1002B7124((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
      }
    }

    else
    {
      id v8 = (os_log_s *)[[MRSendLyricsEventMessage alloc] initWithEvent:a2];
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 clientConnection]);
      [v15 sendMessage:v8];
    }
  }
}

void sub_10008ECB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10008ED84;
    v10[3] = &unk_10039DBD0;
    id v11 = v7;
    [WeakRetained _handlePlaybackSessionRequest:a2 forPlayerPath:a3 completion:v10];
  }

  else
  {
    uint64_t Error = (void *)MRMediaRemoteCreateError(100LL);
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, Error);
  }
}

uint64_t sub_10008ED84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008ED90(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v15 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v13 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _handlePlaybackSessionMigrateRequest:v15 request:v9 forPlayerPath:v10 completion:v11];
  }

  else
  {
    uint64_t v14 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  100LL,  @"TransportExternalDevice Dealloc");
    v11[2](v11, v9, v14);
  }
}

void sub_10008EE68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10008EF44;
    v10[3] = &unk_100399530;
    id v11 = v7;
    [WeakRetained _handlePlaybackSessionMigrateBeginRequest:a2 forPlayerPath:a3 completion:v10];
  }

  else
  {
    id v9 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  100LL,  @"TransportExternalDevice Dealloc");
    (*((void (**)(id, NSError *))v7 + 2))(v7, v9);
  }
}

uint64_t sub_10008EF44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008EF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10008F044;
    v12[3] = &unk_100399530;
    id v13 = v9;
    [WeakRetained _handlePlaybackSessionMigrateEndRequest:a2 error:a3 forPlayerPath:a4 completion:v12];
  }

  else
  {
    id v11 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  100LL,  @"TransportExternalDevice Dealloc");
    (*((void (**)(id, NSError *))v9 + 2))(v9, v11);
  }
}

uint64_t sub_10008F044(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008F058(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _sendClientMessage:v8 completion:v5];
  }
}

void sub_10008F0BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v12 = objc_alloc(&OBJC_CLASS___MRCreateApplicationConnectionMessage);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 context]);
    uint64_t v14 = (NSError *)[v12 initWithConnectionContext:v13 requestInfo:v8];

    id v15 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
    [v15 setPriority:4];
    [v15 setWaking:1];
    -[NSError setTransportOptions:](v14, "setTransportOptions:", v15);
    [v7 setRemoteInvalidationExternalDevice:WeakRetained];
    [v7 setType:2];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10008F2BC;
    v19[3] = &unk_100399CE0;
    objc_copyWeak(&v20, v10);
    [v7 setServerBoundMessageHandler:v19];
    id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained clientConnection]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10008F35C;
    v17[3] = &unk_10039D9A8;
    id v18 = v9;
    [v16 sendMessage:v14 reply:v17];

    objc_destroyWeak(&v20);
  }

  else
  {
    uint64_t v14 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 176LL);
    (*((void (**)(id, NSError *))v9 + 2))(v9, v14);
  }
}

void sub_10008F2A4(_Unwind_Exception *a1)
{
}

void sub_10008F2BC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = (NSError *)objc_claimAutoreleasedReturnValue([WeakRetained clientConnection]);
    -[NSError sendMessage:](v8, "sendMessage:", v5);
  }

  else
  {
    id v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 176LL);
    [v9 invalidate:v8];
  }
}

void sub_10008F35C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10008F3A4(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 132LL);
  (*((void (**)(id, NSError *))a4 + 2))(v5, v6);
}

void sub_10008F40C(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 180LL);
  (*((void (**)(id, NSError *))a4 + 2))(v5, v6);
}

void sub_10008F6A8(_Unwind_Exception *a1)
{
}

void sub_10008F6E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    uint64_t Error = (void *)MRMediaRemoteCreateError(100LL);
    uint64_t v16 = *(void *)(a1 + 40);
    id v15 = *(void (**)(uint64_t, void *, void *))(v16 + 16);
LABEL_7:
    id v17 = 0LL;
    id v18 = Error;
    goto LABEL_16;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v7 = [v6 code];

    if (v7 == (id)26)
    {
      id v8 = objc_alloc(&OBJC_CLASS___NSString);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestIdentifier]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
      id v12 = -[NSString initWithFormat:]( v8,  "initWithFormat:",  @"event = <playbackQueueRequest>, request = <%@>, error = <%@>",  v9,  v11);
      [WeakRetained verifyConnectionStatusAndMaybeDisconnect:v12];
    }

    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t Error = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v15 = *(void (**)(uint64_t, void *, void *))(v13 + 16);
    uint64_t v16 = v13;
    goto LABEL_7;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v3 state]);
  uint64_t Error = (void *)objc_claimAutoreleasedReturnValue([v19 playbackQueue]);

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v20 = (void *)objc_claimAutoreleasedReturnValue([Error contentItems]);
  id v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v27;
    do
    {
      for (uint64_t i = 0LL; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v23) {
          objc_enumerationMutation(v20);
        }
        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v26 + 1) + 8 * (void)i) metadata]);
        [v25 setDeviceSpecificUserInfo:0];
      }

      id v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v22);
  }

  uint64_t v16 = *(void *)(a1 + 40);
  id v15 = *(void (**)(uint64_t, void *, void *))(v16 + 16);
  id v17 = Error;
  id v18 = 0LL;
LABEL_16:
  v15(v16, v17, v18);
}

void sub_10008F93C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _handlePlaybackQueueRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10008FB38(_Unwind_Exception *a1)
{
}

void sub_10008FB64(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);

  if (v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 playbackSession]);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v4, v6);
}

void sub_10008FBF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _handlePlaybackSessionRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10008FDF4(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);

  if (v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 request]);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v4, v6);
}

id sub_10008FE88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateRequest:*(void *)(a1 + 40) request:*(void *)(a1 + 48) forPlayerPath:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10009002C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_100090074(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateBeginRequest:*(void *)(a1 + 40) forPlayerPath:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100090238(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_100090280(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateEndRequest:*(void *)(a1 + 40) error:*(void *)(a1 + 48) forPlayerPath:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100090328(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[22];
  if (v3 && v2[23])
  {
    id v4 = [v3 copy];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    id v7 = *(dispatch_queue_s **)(v5 + 184);
    block[2] = sub_100090458;
    block[3] = &unk_10039DD20;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    void block[4] = v5;
    id v18 = v4;
    int v19 = *(_DWORD *)(a1 + 48);
    id v17 = v6;
    id v8 = v4;
    dispatch_async(v7, block);

    uint64_t v2 = *(void **)(a1 + 32);
  }

  id v9 = (dispatch_queue_s *)v2[2];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100090498;
  v12[3] = &unk_10039A9B8;
  int v15 = *(_DWORD *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v13 = v10;
  uint64_t v14 = v11;
  dispatch_async(v9, v12);
}

id sub_100090458(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100090498(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
  [v5 setObject:v2 forKey:kMRExternalDeviceConnectionStateUserInfoKey];

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    [v5 setObject:v3 forKey:NSUnderlyingErrorKey];
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v4 postNotificationName:kMRExternalDeviceConnectionStateDidChangeNotification object:*(void *)(a1 + 40) userInfo:v5];
}

void sub_1000905D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 160) && *(void *)(v3 + 168))
  {
    uint64_t v4 = _MRLogForCategory(3LL, a2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
      *(_DWORD *)__int128 buf = 138543362;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "<%{public}@> Calling pairingCallback",  buf,  0xCu);
    }

    id v7 = [*(id *)(*(void *)(a1 + 32) + 160) copy];
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009078C;
    block[3] = &unk_10039DD70;
    void block[4] = v8;
    id v15 = v7;
    id v16 = v9;
    id v11 = v7;
    dispatch_async(v10, block);
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000908D0;
    v12[3] = &unk_100399EC0;
    id v13 = *(id *)(a1 + 40);
    dispatch_async(&_dispatch_main_q, v12);
    id v11 = v13;
  }
}

void sub_10009078C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MRPasscodeCredentials standardCredentials]( &OBJC_CLASS___MRPasscodeCredentials,  "standardCredentials"));
  unsigned int v3 = [v2 type];
  id v4 = [v2 characterCount];
  uint64_t v6 = _MRLogForCategory(3LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Calling Client Registered Pairing Callback",  buf,  2u);
  }

  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000908A0;
  v10[3] = &unk_10039DD48;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v9;
  (*(void (**)(uint64_t, void, id, void *))(v8 + 16))(v8, v3, v4, v10);
}

id sub_1000908A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

uint64_t sub_1000908D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100090968(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 192);
  if (v3)
  {
    if (*(void *)(v2 + 200))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 40);
      id v7 = *(dispatch_queue_s **)(v5 + 200);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100090A28;
      block[3] = &unk_100399768;
      void block[4] = v5;
      id v10 = v6;
      id v11 = v4;
      id v8 = v4;
      dispatch_async(v7, block);
    }
  }

id sub_100090A28(uint64_t a1)
{
  uint64_t v3 = _MRLogForCategory(3LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling Client Registered Name Callback with %@",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100090B54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 208))
  {
    if (*(void *)(v1 + 216))
    {
      unsigned __int8 v3 = [*(id *)(v1 + 136) isPairingAllowed];
      id v4 = [*(id *)(*(void *)(a1 + 32) + 208) copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(dispatch_queue_s **)(v5 + 216);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100090C20;
      block[3] = &unk_10039DD98;
      unsigned __int8 v10 = v3;
      void block[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }

id sub_100090C20(uint64_t a1)
{
  uint64_t v3 = _MRLogForCategory(3LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 48)) {
      uint64_t v5 = @"true";
    }
    else {
      uint64_t v5 = @"false";
    }
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling Client Registered pairing allowed Callback with %@",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100090DBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 224);
  if (v3)
  {
    if (*(void *)(v2 + 232))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 40);
      int v7 = *(dispatch_queue_s **)(v5 + 232);
      v9[0] = _NSConcreteStackBlock;
      v9[2] = sub_100090E94;
      void v9[3] = &unk_10039DDC0;
      v9[1] = 3221225472LL;
      void v9[4] = v5;
      id v12 = v4;
      id v10 = v6;
      id v11 = *(id *)(a1 + 48);
      id v8 = v4;
      dispatch_async(v7, v9);
    }
  }

id sub_100090E94(uint64_t a1)
{
  uint64_t v3 = _MRLogForCategory(3LL, v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling Client Registered custom data Callback",  v6,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100090FAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 240);
  if (v3)
  {
    if (*(void *)(v2 + 248))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 40);
      int v7 = *(dispatch_queue_s **)(v5 + 248);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100091070;
      block[3] = &unk_10039D198;
      void block[4] = v5;
      id v11 = v4;
      id v10 = v6;
      id v8 = v4;
      dispatch_async(v7, block);
    }
  }

id sub_100091070(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100091130(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 256);
  if (v3)
  {
    if (*(void *)(v2 + 264))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 40);
      int v7 = *(dispatch_queue_s **)(v5 + 264);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000911F4;
      block[3] = &unk_10039D198;
      void block[4] = v5;
      id v11 = v4;
      id v10 = v6;
      id v8 = v4;
      dispatch_async(v7, block);
    }
  }

id sub_1000911F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000912C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(3LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    double v6 = *(float *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138543874;
    id v20 = v5;
    __int16 v21 = 2048;
    double v22 = v6;
    __int16 v23 = 2114;
    uint64_t v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "<%{public}@> Volume did change to %lf for outputDevice: <%{public}@>",  buf,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 272);
  if (v9)
  {
    if (*(void *)(v8 + 280))
    {
      id v10 = [v9 copy];
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = *(void **)(a1 + 40);
      id v13 = *(dispatch_queue_s **)(v11 + 280);
      v15[0] = _NSConcreteStackBlock;
      v15[2] = sub_100091448;
      v15[3] = &unk_10039DD20;
      v15[1] = 3221225472LL;
      void v15[4] = v11;
      id v17 = v10;
      int v18 = *(_DWORD *)(a1 + 48);
      id v16 = v12;
      id v14 = v10;
      dispatch_async(v13, v15);
    }
  }

id sub_100091448(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_10009151C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 288LL);
  if (v2)
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    double v6 = *(dispatch_queue_s **)(v4 + 296);
    v8[0] = _NSConcreteStackBlock;
    v8[2] = sub_1000915E0;
    void v8[3] = &unk_10039DD20;
    v8[1] = 3221225472LL;
    void v8[4] = v4;
    id v10 = v3;
    int v11 = *(_DWORD *)(a1 + 48);
    id v9 = v5;
    id v7 = v3;
    dispatch_async(v6, v8);
  }

id sub_1000915E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000916B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 304);
  if (v3)
  {
    if (*(void *)(v2 + 312))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      double v6 = *(void **)(a1 + 40);
      id v7 = *(dispatch_queue_s **)(v5 + 312);
      v9[0] = _NSConcreteStackBlock;
      v9[2] = sub_100091780;
      void v9[3] = &unk_10039DDE8;
      v9[1] = 3221225472LL;
      void v9[4] = v5;
      id v11 = v4;
      char v12 = *(_BYTE *)(a1 + 48);
      id v10 = v6;
      id v8 = v4;
      dispatch_async(v7, v9);
    }
  }

id sub_100091780(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_100091870(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[40];
  if (v3 && v2[41])
  {
    id v4 = [v3 copy];
    uint64_t v5 = *(void *)(a1 + 32);
    double v6 = *(void **)(a1 + 40);
    id v7 = *(dispatch_queue_s **)(v5 + 328);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000919A4;
    block[3] = &unk_10039D198;
    void block[4] = v5;
    id v18 = v4;
    id v17 = v6;
    id v8 = v4;
    dispatch_async(v7, block);

    uint64_t v2 = *(void **)(a1 + 32);
  }

  id v9 = (dispatch_queue_s *)v2[2];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000919E0;
  v12[3] = &unk_100398F40;
  id v13 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v14 = v10;
  uint64_t v15 = v11;
  dispatch_async(v9, v12);
}

id sub_1000919A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000919E0(void *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  [v3 setObject:a1[4] forKeyedSubscript:MRExternalDevicePreviousDeviceInfoUserInfoKey];
  [v3 setObject:a1[5] forKeyedSubscript:MRExternalDeviceDeviceInfoUserInfoKey];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:MRExternalDeviceDeviceInfoDidChangeNotification object:a1[6] userInfo:v3];
}

void sub_100091B30(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a1 + 32) + 96LL))
  {
    uint64_t v3 = _MRLogForCategory(3LL, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Batching Request...", v7, 2u);
    }

    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 96LL);
    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    [v5 addObject:v6];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

void sub_100091FC8(_Unwind_Exception *a1)
{
}

void sub_100091FEC(uint64_t a1, void *a2)
{
  id v24 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  0LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v24 error]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v24 error]);
    id v6 = [v5 code];

    if (v6 == (id)26)
    {
      id v7 = *(void **)(a1 + 32);
      if (v7)
      {
        id v8 = v7;
        id v9 = objc_alloc(&OBJC_CLASS___NSString);
        id v10 = (void *)MRMediaRemoteCopyCommandDescription(*(unsigned int *)(a1 + 72));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kMRMediaRemoteOptionCommandID]);
        char v12 = (void *)objc_claimAutoreleasedReturnValue([v24 error]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 description]);
        id v14 = -[NSString initWithFormat:]( v9,  "initWithFormat:",  @"event = <%@>, command = <%@>, error = <%@>",  v10,  v11,  v13);
        [v8 verifyConnectionStatusAndMaybeDisconnect:v14];
      }

      uint64_t v15 = 5LL;
    }

    else
    {
      uint64_t v15 = 2LL;
    }

    uint64_t v16 = objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  v15));
  }

  else
  {
    uint64_t v16 = objc_claimAutoreleasedReturnValue([v24 commandResult]);
  }

  id v17 = (void *)v16;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  int v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceInfo]);
  if ([v19 supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions])
  {
  }

  else
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 error]);

    if (v20) {
      goto LABEL_16;
    }
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v17 playerPath]);
    double v22 = v21;
    if (!v21) {
      double v22 = *(void **)(a1 + 48);
    }
    id WeakRetained = v22;

    MRMediaRemoteSendImplicitCommandsForOptions(*(unsigned int *)(a1 + 72), *(void *)(a1 + 40), WeakRetained);
  }

LABEL_16:
  uint64_t v23 = *(void *)(a1 + 56);
  if (v23) {
    (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v17);
  }
}

void sub_100092208(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10009229C;
  void v7[3] = &unk_10039AD10;
  id v4 = *(dispatch_queue_s **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10009229C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1000922AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRemoteCommand:*(unsigned int *)(a1 + 64) withOptions:*(void *)(a1 + 40) playerPath:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100092DFC(id *a1)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100092F38;
  void v8[3] = &unk_100398F40;
  id v2 = a1[5];
  void v8[4] = a1[4];
  id v9 = v2;
  id v10 = a1[6];
  id v3 = objc_retainBlock(v8);
  if (*((void *)a1[4] + 16))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
    [v5 updateDeviceInfo:*((void *)a1[4] + 17) origin:*((void *)a1[4] + 16)];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] groupSessionToken]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 sessionIdentifier]);

  if (v7) {
    objc_msgSend(a1[4], "_onSerialQueue_completeGroupSessionRequestsWithIdentifier:error:", v7, 0);
  }
  ((void (*)(void *))v3[2])(v3);
}

void sub_100092F38(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2) {
    id v6 = (id)objc_claimAutoreleasedReturnValue([v2 name]);
  }
  else {
    id v6 = 0LL;
  }
  id v3 = *(void **)(*(void *)(a1 + 32) + 136LL);
  if (v3) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
  }
  else {
    id v4 = 0LL;
  }
  unsigned int v5 = [*(id *)(a1 + 48) isPairingAllowed];
}

id sub_1000932CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) replyWithMessage:a2];
}

id sub_100093390(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) replyWithMessage:a2];
}

void sub_10009356C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRProtocolMessage);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

  id v5 = [v4 initWithUnderlyingCodableMessage:0 error:v6];
  [v2 replyWithMessage:v5];
}

uint64_t sub_100093C28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100093C34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendClientMessage:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100094378(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.transportExternalDevice.jsonClientConnectionQueue", v4);
  id v3 = (void *)qword_1003FDD98;
  qword_1003FDD98 = (uint64_t)v2;
}

void sub_1000943FC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

id sub_100094428(void *a1, const char *a2)
{
  return [a1 timeIntervalSinceDate:*(void *)(v2 + 48)];
}

void sub_100094938(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v13 = a5;
  if (!v13)
  {
    uint64_t v22 = objc_opt_class(v11);
    uint64_t v24 = _MRLogForCategory(10LL, v23);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    BOOL v25 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v22)
    {
      if (v10)
      {
        if (!v25) {
          goto LABEL_22;
        }
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v17 timeIntervalSinceDate:*(void *)(a1 + 32)];
        int v40 = 138544130;
        __int16 v41 = @"handlePlaybackQueueRequest";
        __int16 v42 = 2114;
        id v43 = v9;
        __int16 v44 = 2114;
        uint64_t v45 = (uint64_t)v10;
        __int16 v46 = 2048;
        id v47 = v33;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        __int16 v35 = v15;
        uint32_t v36 = 42;
      }

      else
      {
        if (!v25) {
          goto LABEL_22;
        }
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v17 timeIntervalSinceDate:*(void *)(a1 + 32)];
        int v40 = 138543874;
        __int16 v41 = @"handlePlaybackQueueRequest";
        __int16 v42 = 2114;
        id v43 = v9;
        __int16 v44 = 2048;
        uint64_t v45 = v39;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int16 v35 = v15;
        uint32_t v36 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v40, v36);
      goto LABEL_21;
    }

    if (v10)
    {
      if (!v25) {
        goto LABEL_22;
      }
      uint64_t v26 = objc_opt_class(v11);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v27 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v40 = 138544386;
      __int16 v41 = @"handlePlaybackQueueRequest";
      __int16 v42 = 2114;
      id v43 = v9;
      __int16 v44 = 2112;
      uint64_t v45 = v26;
      __int16 v46 = 2114;
      id v47 = v10;
      __int16 v48 = 2048;
      uint64_t v49 = v28;
      __int128 v29 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v30 = v15;
      uint32_t v31 = 52;
    }

    else
    {
      if (!v25) {
        goto LABEL_22;
      }
      uint64_t v37 = objc_opt_class(v11);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v27 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v40 = 138544130;
      __int16 v41 = @"handlePlaybackQueueRequest";
      __int16 v42 = 2114;
      id v43 = v9;
      __int16 v44 = 2112;
      uint64_t v45 = v37;
      __int16 v46 = 2048;
      id v47 = v38;
      __int128 v29 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v30 = v15;
      uint32_t v31 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, (uint8_t *)&v40, v31);

    goto LABEL_22;
  }

  uint64_t v14 = _MRLogForCategory(10LL, v12);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (v16)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v40 = 138544386;
      __int16 v41 = @"handlePlaybackQueueRequest";
      __int16 v42 = 2114;
      id v43 = v9;
      __int16 v44 = 2114;
      uint64_t v45 = (uint64_t)v13;
      __int16 v46 = 2114;
      id v47 = v10;
      __int16 v48 = 2048;
      uint64_t v49 = v18;
      int v19 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      id v20 = v15;
      uint32_t v21 = 52;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v40, v21);
LABEL_21:
    }
  }

  else if (v16)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v17 timeIntervalSinceDate:*(void *)(a1 + 32)];
    int v40 = 138544130;
    __int16 v41 = @"handlePlaybackQueueRequest";
    __int16 v42 = 2114;
    id v43 = v9;
    __int16 v44 = 2114;
    uint64_t v45 = (uint64_t)v13;
    __int16 v46 = 2048;
    id v47 = v32;
    int v19 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    id v20 = v15;
    uint32_t v21 = 42;
    goto LABEL_11;
  }

void sub_100094D50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_100094D94(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) removeRequest:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_100094F0C(uint64_t a1, uint64_t a2)
{
  return MRAddPlaybackQueueToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_100095268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);

    uint64_t v9 = _MRLogForCategory(10LL, v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v11) {
        goto LABEL_20;
      }
      uint64_t v12 = *(void *)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v14 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v34 = 138544386;
      __int16 v35 = @"relayPlaybackQueueRequest";
      __int16 v36 = 2114;
      uint64_t v37 = v12;
      __int16 v38 = 2114;
      uint64_t v39 = (uint64_t)v6;
      __int16 v40 = 2114;
      __int16 v41 = v13;
      __int16 v42 = 2048;
      uint64_t v43 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v34,  0x34u);
LABEL_14:

LABEL_19:
      goto LABEL_20;
    }

    if (v11) {
      sub_1002B7188();
    }
  }

  else
  {
    uint64_t v16 = objc_opt_class(v5);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);

    uint64_t v19 = _MRLogForCategory(10LL, v18);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    BOOL v20 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v16)
    {
      if (!v17)
      {
        if (!v20) {
          goto LABEL_20;
        }
        uint64_t v31 = *(void *)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v34 = 138543874;
        __int16 v35 = @"relayPlaybackQueueRequest";
        __int16 v36 = 2114;
        uint64_t v37 = v31;
        __int16 v38 = 2048;
        uint64_t v39 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v34,  0x20u);
        goto LABEL_19;
      }

      if (!v20) {
        goto LABEL_20;
      }
      uint64_t v25 = *(void *)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v14 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v34 = 138544130;
      __int16 v35 = @"relayPlaybackQueueRequest";
      __int16 v36 = 2114;
      uint64_t v37 = v25;
      __int16 v38 = 2114;
      uint64_t v39 = (uint64_t)v13;
      __int16 v40 = 2048;
      __int16 v41 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  (uint8_t *)&v34,  0x2Au);
      goto LABEL_14;
    }

    if (v17)
    {
      if (!v20) {
        goto LABEL_20;
      }
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = objc_opt_class(v5);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v34 = 138544386;
      __int16 v35 = @"relayPlaybackQueueRequest";
      __int16 v36 = 2114;
      uint64_t v37 = v21;
      __int16 v38 = 2112;
      uint64_t v39 = v22;
      __int16 v40 = 2114;
      __int16 v41 = v13;
      __int16 v42 = 2048;
      uint64_t v43 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v34,  0x34u);

      goto LABEL_19;
    }

    if (v20)
    {
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = objc_opt_class(v5);
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v29 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v34 = 138544130;
      __int16 v35 = @"relayPlaybackQueueRequest";
      __int16 v36 = 2114;
      uint64_t v37 = v27;
      __int16 v38 = 2112;
      uint64_t v39 = v28;
      __int16 v40 = 2048;
      __int16 v41 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  (uint8_t *)&v34,  0x2Au);
    }
  }

void sub_100095688(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)MRCreateClientErrorFromXPCMessage(v6);
  if (v3)
  {
    id v4 = 0LL;
  }

  else
  {
    id v4 = (void *)MRCreatePlaybackQueueFromXPCMessage(v6);
    if (v4)
    {
      [*(id *)(a1 + 32) subscribeToPlaybackQueue:v4 forRequest:*(void *)(a1 + 40)];
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
      [v5 updatePlaybackQueue:v4 fromRequest:*(void *)(a1 + 40)];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100095AD4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = v10;
  if (v5 && !v6)
  {
    BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v12)
      {
        uint64_t v14 = a1[4];
        uint64_t v13 = a1[5];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[6]];
        int v32 = 138544386;
        uint64_t v33 = @"requestArtworkForContentItems";
        __int16 v34 = 2114;
        uint64_t v35 = v13;
        __int16 v36 = 2112;
        id v37 = v5;
        __int16 v38 = 2114;
        uint64_t v39 = v14;
        __int16 v40 = 2048;
        uint64_t v41 = v16;
        id v17 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v18 = v11;
        uint32_t v19 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v32, v19);
        goto LABEL_17;
      }

      goto LABEL_22;
    }

    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v28 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138544130;
    uint64_t v33 = @"requestArtworkForContentItems";
    __int16 v34 = 2114;
    uint64_t v35 = v28;
    __int16 v36 = 2112;
    id v37 = v5;
    __int16 v38 = 2048;
    uint64_t v39 = v29;
    id v17 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    uint64_t v18 = v11;
    uint32_t v19 = 42;
    goto LABEL_16;
  }

  if (v6)
  {
    BOOL v20 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v20)
      {
        uint64_t v22 = a1[4];
        uint64_t v21 = a1[5];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[6]];
        int v32 = 138544386;
        uint64_t v33 = @"requestArtworkForContentItems";
        __int16 v34 = 2114;
        uint64_t v35 = v21;
        __int16 v36 = 2114;
        id v37 = v6;
        __int16 v38 = 2114;
        uint64_t v39 = v22;
        __int16 v40 = 2048;
        uint64_t v41 = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v32,  0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }

    else if (v20)
    {
      sub_1002B7228();
    }

    goto LABEL_22;
  }

  BOOL v24 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (!v24) {
      goto LABEL_22;
    }
    uint64_t v30 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138543874;
    uint64_t v33 = @"requestArtworkForContentItems";
    __int16 v34 = 2114;
    uint64_t v35 = v30;
    __int16 v36 = 2048;
    id v37 = v31;
    id v17 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint64_t v18 = v11;
    uint32_t v19 = 32;
    goto LABEL_16;
  }

  if (v24)
  {
    uint64_t v26 = (void *)a1[4];
    uint64_t v25 = a1[5];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[6]];
    int v32 = 138544130;
    uint64_t v33 = @"requestArtworkForContentItems";
    __int16 v34 = 2114;
    uint64_t v35 = v25;
    __int16 v36 = 2114;
    id v37 = v26;
    __int16 v38 = 2048;
    uint64_t v39 = v27;
    id v17 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }

id sub_100095E4C(id a1, MRContentItem *a2)
{
  return -[MRContentItem identifier](a2, "identifier");
}

void sub_100095E54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 contentItems]);
  uint64_t v7 = v6;
  if (!v5)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "msv_compactMap:", &stru_10039DFF0));
    if ([v8 count])
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      MRAddPlayerPathToUserInfo(v9, *(void *)(a1 + 32));
      MRAddContentItemsToUserInfo(v9, v8);
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      uint64_t v11 = _MRPlayerPlaybackQueueContentItemArtworkChangedNotification;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100095FFC;
      v12[3] = &unk_1003995A8;
      id v13 = *(id *)(a1 + 40);
      [v10 postClientNotificationNamed:v11 userInfo:v9 predicate:v12];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

MRContentItem *__cdecl sub_100095F90(id a1, MRContentItem *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRContentItem artwork](v2, "artwork"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 imageData]);
  if (v4) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRContentItem skeleton](v2, "skeleton"));
  }
  else {
    id v5 = 0LL;
  }

  return (MRContentItem *)v5;
}

BOOL sub_100095FFC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

void sub_1000967B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *a10, id *a11, id *a12, id *location)
{
}

void sub_1000968A0(uint64_t a1)
{
  id obj = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(obj);
  [obj setDeviceName:0];
  objc_sync_exit(obj);

  [obj _deviceInfoDidChange];
}

void sub_1000968FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100096910(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceInfoDidChange];
}

void sub_10009693C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceInfoDidChange];
}

void sub_100096968(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceInfoDidChange];
}

void sub_100096994(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(v3);
  [v3 setDeviceUID:0];
  objc_sync_exit(v3);

  [v3 _deviceInfoDidChange];
}

void sub_1000969FC(_Unwind_Exception *a1)
{
}

void sub_100096A10(uint64_t a1)
{
  id obj = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(obj);
  [obj setDeviceUID:0];
  objc_sync_exit(obj);

  [obj _deviceInfoDidChange];
}

void sub_100096A6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100096A80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) _workerQueue];
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100096B18;
  block[3] = &unk_100399250;
  id v7 = WeakRetained;
  id v5 = WeakRetained;
  dispatch_async(v4, block);
}

id sub_100096B18(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadDeviceInfoImmediately];
}

void sub_100096B20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) _workerQueue];
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100096BB8;
  block[3] = &unk_100399250;
  id v7 = WeakRetained;
  id v5 = WeakRetained;
  dispatch_async(v4, block);
}

id sub_100096BB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadDeviceInfoImmediately];
}

void sub_100096BC0(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[MRSharedSettings currentSettings](&OBJC_CLASS___MRSharedSettings, "currentSettings"));
  if (![v7 supportAirPlayLeaderInfoSync])
  {
    id v4 = v7;
LABEL_6:

    return;
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned __int8 v3 = [v2 supportMultiplayerHost];

  if ((v3 & 1) == 0)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___MRDAirPlayLeaderInfoPublisher);
    uint64_t v6 = *(void *)(a1 + 32);
    id v4 = *(void **)(v6 + 56);
    *(void *)(v6 + 56) = v5;
    goto LABEL_6;
  }

void sub_100096DA0(_Unwind_Exception *a1)
{
}

void sub_100096E0C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.MRDDeviceInfoDataSource.workerQueue", v4);
  unsigned __int8 v3 = (void *)qword_1003FDDA8;
  qword_1003FDDA8 = (uint64_t)v2;
}

void sub_100096F18(_Unwind_Exception *a1)
{
}

id sub_100096F2C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
  objc_sync_exit(v2);

  return [*(id *)(a1 + 32) reloadDeviceInfoImmediately];
}

void sub_100097060(_Unwind_Exception *a1)
{
}

id sub_100097078(uint64_t a1)
{
  return _[*(id *)(a1 + 32) deviceInfoDataSource:*(void *)(a1 + 40) deviceInfoDidChange:*(void *)(a1 + 48)];
}

void sub_1000971A8(_Unwind_Exception *a1)
{
}

id sub_100097EF4(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceInfo]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceUID]);
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

BOOL sub_100097F4C(id a1, MRAVOutputDevice *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice groupID](a2, "groupID"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

BOOL sub_100097F80(id a1, MRAVOutputDevice *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice airPlayGroupID](a2, "airPlayGroupID"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

void sub_100097FF4(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:]( &OBJC_CLASS___MRAVRoutingDiscoverySession,  "discoverySessionWithEndpointFeatures:",  1LL));
  id v2 = (void *)qword_1003FDDB8;
  qword_1003FDDB8 = v1;
}

void sub_100098898(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceInfoFilePath]);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v2));
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceInfoArchiveClasses]);
    id v17 = 0LL;
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v4,  v3,  &v17));
    id v6 = v17;
    id v7 = (void *)qword_1003FDDC8;
    qword_1003FDDC8 = v5;

    if (v6)
    {
      uint64_t v9 = _MRLogForCategory(0LL, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to unarchive device info data",  v16,  2u);
      }
    }
  }

  if (!qword_1003FDDC8)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _readLegacyDeviceInfoIdentifier]);
    if (!v11)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
      if (!v11)
      {
        BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
      }
    }

    id v13 = (void *)MRMediaRemoteCopySenderDefaultGroupUID();
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v15 = (void *)qword_1003FDDC8;
    qword_1003FDDC8 = (uint64_t)v14;

    [(id)qword_1003FDDC8 setObject:v11 forKeyedSubscript:@"identifier"];
    [(id)qword_1003FDDC8 setObject:v13 forKeyedSubscript:@"defaultGroupUID"];
    [*(id *)(a1 + 32) _writeDeviceInfo:qword_1003FDDC8 toPath:v2];
  }
}

id sub_100098EC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:", 0);
}

uint64_t sub_100099378(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 playerPath]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 displayName]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 playerPath]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 client]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 displayName]);
  id v11 = [v7 compare:v10 options:1];

  return (uint64_t)v11;
}

uint64_t sub_100099508(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100099518(uint64_t a1)
{
}

void sub_100099520(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10009960C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _playerPathForNowPlayingClient:*(void *)(*(void *)(a1 + 32) + 64)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000996FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100099714(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000997C8(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  id v29 = *(id *)(*(void *)(a1 + 32) + 48LL);
  id v2 = (void *)(a1 + 40);
  id v3 = *(id *)(a1 + 40);
  if (v29 == v3)
  {
  }

  else
  {
    id v4 = v29;
    unsigned __int8 v5 = [v4 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      uint64_t v7 = *(void *)(*(void *)v1 + 48LL);
      uint64_t v8 = _MRLogForCategory(1LL, v6);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        if (v10)
        {
          uint64_t v11 = *(void *)(*(void *)v1 + 112LL);
          BOOL v12 = (void *)MRPairedDeviceCopyDeltaMinimalDescription(*v2, *(void *)(*(void *)v1 + 48LL));
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v31 = v11;
          __int16 v32 = 2112;
          uint64_t v33 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:\n %@",  buf,  0x16u);
        }

        uint64_t v14 = _MRLogForCategory(1LL, v13);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_1002B7340(v1, (uint64_t)v2);
        }
      }

      else
      {
        if (v10)
        {
          uint64_t v16 = *(void *)(*(void *)v1 + 112LL);
          id v17 = (void *)MRPairedDeviceCopyMinimalDescription(*v2);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v31 = v16;
          __int16 v32 = 2112;
          uint64_t v33 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:\n %@",  buf,  0x16u);
        }

        uint64_t v19 = _MRLogForCategory(1LL, v18);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_1002B72C8(v1, (uint64_t)v2);
        }
      }

      BOOL v20 = (void *)*v2;
      id v21 = *(id *)(*(void *)v1 + 48LL);
      id v22 = [v20 copy];
      uint64_t v23 = *(void **)(*(void *)v1 + 48LL);
      *(void *)(*(void *)v1 + 48LL) = v22;

      BOOL v24 = *(void **)(*(void *)v1 + 120LL);
      *(void *)(*(void *)v1 + 120LL) = 0LL;

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)v1 + 192LL));
      uint64_t v26 = *(void *)v1;
      id v27 = [*(id *)(v26 + 48) copy];
      id v28 = [v21 copy];
      [WeakRetained nowPlayingOriginClient:v26 deviceInfoDidChange:v27 previousDeviceInfo:v28];
    }
  }

void sub_100099B2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  if (!v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(v2 + 48) data]);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 120);
    *(void *)(v5 + 120) = v4;

    id v3 = *(void **)(*(void *)(a1 + 32) + 120LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

void sub_100099C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

float sub_100099C30(uint64_t a1)
{
  float result = *(float *)(*(void *)(a1 + 32) + 36LL);
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100099CA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(float *)(a1 + 40);
  if (vabds_f32(*(float *)(v1 + 36), v2) > 2.2204e-16)
  {
    *(float *)(v1 + 36) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192LL));
    LODWORD(v4) = *(_DWORD *)(*(void *)(a1 + 32) + 36LL);
    objc_msgSend(WeakRetained, "nowPlayingOriginClient:currentRouteVolumeDidChange:", v4);
  }

void sub_100099DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100099DBC(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 32LL);
  return result;
}

void sub_100099E2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(v1 + 32) != v2)
  {
    *(_DWORD *)(v1 + 32) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192LL));
    [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) currentRouteVolumeControlCapabilitiesDidChange:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  }

void sub_100099F24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100099F3C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 40LL);
  return result;
}

void sub_100099FAC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 40LL);
  if (v1 != *(unsigned __int8 *)(a1 + 40))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v1 != 0));

    uint64_t v5 = _MRLogForCategory(1LL, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(v8 + 112);
        BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(v8 + 40)));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 40)));
        int v14 = 138544130;
        uint64_t v15 = v9;
        __int16 v16 = 2114;
        id v17 = @"isMuted";
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        __int16 v20 = 2112;
        id v21 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v14,  0x2Au);

LABEL_7:
      }
    }

    else if (v7)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 112LL);
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 40)));
      int v14 = 138543874;
      uint64_t v15 = v12;
      __int16 v16 = 2114;
      id v17 = @"isMuted";
      __int16 v18 = 2112;
      uint64_t v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v14,  0x20u);
      goto LABEL_7;
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = *(_BYTE *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192LL));
    [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) currentRouteIsMutedDidChange:*(unsigned __int8 *)(*(void *)(a1 + 32) + 40)];
  }

void sub_10009A234(id *a1)
{
  int v1 = a1;
  if (*((void *)a1[4] + 8)) {
    a1 = (id *)objc_msgSend(a1[5], "addObject:");
  }
  int v2 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID(a1);
  id v3 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]( objc_alloc(&OBJC_CLASS___MRClient),  "initWithProcessIdentifier:bundleIdentifier:",  0LL,  v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1[4] existingNowPlayingClientForClient:v3]);
  if (v4) {
    [v1[5] addObject:v4];
  }
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = *((id *)v1[4] + 2);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(v1[5], "addObject:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v9), (void)v10);
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

id sub_10009A438(uint64_t a1)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nowPlayingClients]);
  id v2 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v15 = *(void *)v21;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerClients]);
        id v7 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v17;
          do
          {
            for (uint64_t j = 0LL; j != v8; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v17 != v9) {
                objc_enumerationMutation(v6);
              }
              __int128 v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)j);
              if ([v5 canBeNowPlayingForPlayerClient:v11])
              {
                __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 snapshotForIsPlaying:1]);

                if (v12) {
                  [*(id *)(a1 + 40) addObject:v11];
                }
              }
            }

            id v8 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }

          while (v8);
        }
      }

      id v3 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }

    while (v3);
  }

  return [*(id *)(a1 + 40) sortUsingComparator:&stru_10039E1A8];
}

int64_t sub_10009A614(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient snapshotForIsPlaying:](a3, "snapshotForIsPlaying:", 1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 date]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient snapshotForIsPlaying:](v4, "snapshotForIsPlaying:", 1LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 date]);
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

void sub_10009A768( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009A780(uint64_t a1)
{
}

id sub_10009A810(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 200LL);
  if (result != v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([result client]);

    uint64_t v6 = _MRLogForCategory(1LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(v9 + 112);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 200) client]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
        int v14 = 138544130;
        uint64_t v15 = v10;
        __int16 v16 = 2114;
        __int128 v17 = @"computedNowPlayingClient";
        __int16 v18 = 2112;
        __int128 v19 = v11;
        __int16 v20 = 2112;
        __int128 v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v14,  0x2Au);

LABEL_7:
      }
    }

    else if (v8)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 112LL);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      int v14 = 138543874;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      __int128 v17 = @"computedNowPlayingClient";
      __int16 v18 = 2112;
      __int128 v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v14,  0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 200LL), *(id *)(a1 + 40));
    return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"Updated computedNowPlayingClient.");
  }

  return result;
}

id sub_10009AA48(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 56LL);
  if (result != v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([result client]);

    uint64_t v6 = _MRLogForCategory(1LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(v9 + 112);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 56) client]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
        int v14 = 138544130;
        uint64_t v15 = v10;
        __int16 v16 = 2114;
        __int128 v17 = @"explicitNowPlayingClient";
        __int16 v18 = 2112;
        __int128 v19 = v11;
        __int16 v20 = 2112;
        __int128 v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v14,  0x2Au);

LABEL_7:
      }
    }

    else if (v8)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 112LL);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      int v14 = 138543874;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      __int128 v17 = @"explicitNowPlayingClient";
      __int16 v18 = 2112;
      __int128 v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v14,  0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 56LL), *(id *)(a1 + 40));
    return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"Updated explicitNowPlayingClient.");
  }

  return result;
}

id sub_10009AC80(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 208LL);
  if (result != v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([result client]);

    uint64_t v6 = _MRLogForCategory(1LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(v9 + 112);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 208) client]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
        int v14 = 138544130;
        uint64_t v15 = v10;
        __int16 v16 = 2114;
        __int128 v17 = @"inferredNowPlayingClient";
        __int16 v18 = 2112;
        __int128 v19 = v11;
        __int16 v20 = 2112;
        __int128 v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v14,  0x2Au);

LABEL_7:
      }
    }

    else if (v8)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 112LL);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      int v14 = 138543874;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      __int128 v17 = @"inferredNowPlayingClient";
      __int16 v18 = 2112;
      __int128 v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v14,  0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 208LL), *(id *)(a1 + 40));
    return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"Updated inferredNowPlayingClient.");
  }

  return result;
}

id sub_10009AEB8(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 136LL);
  if (result != *(id *)(a1 + 40))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([result displayName]);

    uint64_t v5 = _MRLogForCategory(1LL, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(v8 + 112);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 136) displayName]);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
        int v13 = 138544130;
        uint64_t v14 = v9;
        __int16 v15 = 2114;
        __int16 v16 = @"overrideNowPlayingClient";
        __int16 v17 = 2112;
        __int16 v18 = v10;
        __int16 v19 = 2112;
        __int16 v20 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v13,  0x2Au);

LABEL_7:
      }
    }

    else if (v7)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 112LL);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
      int v13 = 138543874;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      __int16 v16 = @"overrideNowPlayingClient";
      __int16 v17 = 2112;
      __int16 v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v13,  0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136LL), *(id *)(a1 + 40));
    return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"Updated overrideNowPlayingClient.");
  }

  return result;
}

void sub_10009B0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 128LL);
  if (v3 != *(void *)(a1 + 40))
  {
    uint64_t v4 = _MRLogForCategory(1LL, a2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(v7 + 112);
        uint64_t v10 = *(void *)(v7 + 128);
        *(_DWORD *)__int128 v23 = 138544130;
        *(void *)&void v23[4] = v9;
        *(_WORD *)&v23[12] = 2114;
        *(void *)&v23[14] = @"applicationActivity";
        *(_WORD *)&v23[22] = 2112;
        uint64_t v24 = v10;
        LOWORD(v25) = 2112;
        *(void *)((char *)&v25 + 2) = v8;
        __int128 v11 = "Set: %{public}@ setting %{public}@ from <%@> to <%@>";
        uint64_t v12 = v5;
        uint32_t v13 = 42;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, v23, v13);
      }
    }

    else if (v6)
    {
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 112LL);
      *(_DWORD *)__int128 v23 = 138543874;
      *(void *)&void v23[4] = v18;
      *(_WORD *)&v23[12] = 2114;
      *(void *)&v23[14] = @"applicationActivity";
      *(_WORD *)&v23[22] = 2112;
      uint64_t v24 = v17;
      __int128 v11 = "Set: %{public}@ setting %{public}@ to <%@>";
      uint64_t v12 = v5;
      uint32_t v13 = 32;
      goto LABEL_10;
    }

    uint64_t v19 = *(void *)(a1 + 32);
    if (*(void *)(v19 + 128))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v19 + 192));
      [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) applicationActivityDidEnd:*(void *)(*(void *)(a1 + 32) + 128)];

      uint64_t v19 = *(void *)(a1 + 32);
    }

    objc_msgSend((id)v19, "_onQueue_updateActivityStatus:", 4, *(_OWORD *)v23, *(void *)&v23[16], v24, v25);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), *(id *)(a1 + 40));
    uint64_t v21 = *(void *)(a1 + 32);
    if (*(void *)(v21 + 128))
    {
      id v22 = objc_loadWeakRetained((id *)(v21 + 192));
      [v22 nowPlayingOriginClient:*(void *)(a1 + 32) applicationActivityDidBegin:*(void *)(*(void *)(a1 + 32) + 128)];

      uint64_t v21 = *(void *)(a1 + 32);
    }

    objc_msgSend((id)v21, "_onQueue_reevaluateStateWithReason:", @"Updated applicationActivity.");
    return;
  }

  uint64_t v14 = _MRLogForCategory(1LL, a2);
  __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 128LL);
    *(_DWORD *)__int128 v23 = 138543362;
    *(void *)&void v23[4] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingOriginClient] Application Activity %{public}@ already set",  v23,  0xCu);
  }
}

void sub_10009B3B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009B3CC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 128LL);
  if (v2)
  {
    unsigned int v3 = [v2 creatorProcessID];
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeNowPlayingClient]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3 == [v4 processIdentifier];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

void sub_10009B4F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009B510(uint64_t a1)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      BOOL v6 = 0LL;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v6);
        __int128 v13 = 0u;
        __int128 v14 = 0u;
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "playerClients", 0));
        id v9 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v14;
          do
          {
            uint64_t v12 = 0LL;
            do
            {
              if (*(void *)v14 != v11) {
                objc_enumerationMutation(v8);
              }
              *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) |= [*(id *)(*((void *)&v13 + 1) + 8 * (void)v12) isPlaying];
              uint64_t v12 = (char *)v12 + 1;
            }

            while (v10 != v12);
            id v10 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
          }

          while (v10);
        }

        BOOL v6 = (char *)v6 + 1;
      }

      while (v6 != v4);
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }

    while (v4);
  }
}

void sub_10009B740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009B758(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 96)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;

  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerClients", 0));
        id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v19;
          do
          {
            for (uint64_t j = 0LL; j != v12; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v19 != v13) {
                objc_enumerationMutation(v10);
              }
              __int128 v15 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)j);
              [v15 timeSincePlaying];
              if (v16 < *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
              {
                [v15 timeSincePlaying];
                *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v17;
              }
            }

            id v12 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
          }

          while (v12);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v6);
  }
}

void sub_10009B9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009B9E8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 96LL))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 96)];
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
    [v3 timeIntervalSinceNow];
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_10009BBAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009BBC4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);

  if (v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) existingNowPlayingClientForPlayerPath:*(void *)(a1 + 32)]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_onQueue_addNowPlayingClient:", *(void *)(a1 + 32)));
      uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;
    }
  }

void sub_10009BE38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009BE50(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeNowPlayingClient]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 client]);
  unsigned int v4 = [v3 isEqual:*(void *)(a1 + 40)];

  if (v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeNowPlayingClient]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v8 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "client", (void)v15));
          if ([v14 isEqual:*(void *)(a1 + 40)])
          {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v13);

            goto LABEL_13;
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

id sub_10009C05C(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "copy", 0);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(a1 + 32),  "_onQueue_removeNowPlayingClient:",  *(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"RemoveAllClients");
}

void sub_10009C1E8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) existingNowPlayingClientForClient:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_removeNowPlayingClient:", v2);
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Removed nowPlayingClient.");
    id v2 = v3;
  }
}

void sub_10009C588(void *a1)
{
  if ([*(id *)(a1[4] + 104) isLocal])
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v6 updateDefaultSupportedCommandsData:a1[5] forClient:a1[6]];
  }

  else
  {
    id v2 = *(void **)(a1[4] + 80LL);
    if (!v2)
    {
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v4 = a1[4];
      uint64_t v5 = *(void **)(v4 + 80);
      *(void *)(v4 + 80) = v3;

      id v2 = *(void **)(a1[4] + 80LL);
    }

    [v2 setObject:a1[5] forKeyedSubscript:a1[6]];
  }

void sub_10009C6F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009C710(void *a1)
{
  if ([*(id *)(a1[4] + 104) isLocal])
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    uint64_t v2 = objc_claimAutoreleasedReturnValue([v8 defaultSupportedCommandsDataForClient:a1[5]]);
    uint64_t v3 = *(void *)(a1[6] + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    uint64_t v5 = v8;
  }

  else
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 80) objectForKeyedSubscript:a1[5]]);
    uint64_t v7 = *(void *)(a1[6] + 8LL);
    uint64_t v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_10009C940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009C968(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) isLocal])
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    uint64_t v2 = objc_claimAutoreleasedReturnValue([v8 defaultSupportedCommandsData]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    uint64_t v5 = v8;
  }

  else
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_10009C9F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRCommandInfo commandInfosFromData:](&OBJC_CLASS___MRCommandInfo, "commandInfosFromData:", a3));
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];

  LODWORD(v6) = MRMediaRemoteApplicationIsSystemApplication(v5);
  if ((_DWORD)v6) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
}

id sub_10009CACC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) removeAllObjects];
}

void sub_10009CB54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = v2;
}

void sub_10009CC3C(uint64_t a1)
{
}

void sub_10009CCC4(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 176);
  *(void *)(v3 + 176) = v2;
}

void sub_10009CD70(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 184);
  *(void *)(v3 + 184) = v2;
}

id sub_10009CE38(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(*(void *)(a1 + 32) + 144),  @"setNowPlayingDataSource");
}

id sub_10009CEC8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(a1 + 40),  @"nowPlayingApplicationDidChange");
}

id sub_10009CF58(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(a1 + 40),  @"nowPlayingApplicationPlaybackStateDidChange");
}

id sub_10009CFE8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(a1 + 40),  @"nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange");
}

id sub_10009D078(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(a1 + 40),  @"nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange");
}

void sub_10009D3E4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_calculateComputedNowPlayingClient"));
  [*(id *)(a1 + 32) setComputedNowPlayingClient:v2];

  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInfo]);
  uint64_t v6 = MRGetPlayerPathFromUserInfo(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  __int128 v8 = -[NSString initWithFormat:](v4, "initWithFormat:", @"%@-%@", v9, v7);
  objc_msgSend(v3, "_onQueue_reevaluateStateWithReason:", v8);
}

id sub_10009D540(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 laterDate:*(void *)(*(void *)(a1 + 32) + 96)]);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 96);
  *(void *)(v4 + 96) = v3;

  id result = [*(id *)(*(void *)(a1 + 32) + 104) isLocal];
  if ((_DWORD)result) {
    return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_maybeSavePlaybackStateForNotification:", *(void *)(a1 + 40));
  }
  return result;
}

id sub_10009D66C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:",  *(void *)(a1 + 40));
}

id sub_10009D77C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(*(void *)(a1 + 32) + 144),  *(void *)(a1 + 40));
}

id sub_10009D820(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"PlayerPictureInPictureEnabledDidChange");
}

id sub_10009D8C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"ActivePlayerDidChange");
}

id sub_10009D968(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateStateWithReason:",  @"NowPlayingApplicationDidUnregisterCanBeNowPlaying");
}

id sub_10009DAA4(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reloadInferredStateFromDataSource:reason:",  *(void *)(*(void *)(a1 + 32) + 144),  *(void *)(a1 + 40));
}

id sub_10009EB8C(id a1, MRDNowPlayingPlayerClient *a2)
{
  return -[MRDNowPlayingPlayerClient playerPath](a2, "playerPath");
}

id sub_10009EB94(id a1, MRDNowPlayingPlayerClient *a2)
{
  return -[MRDNowPlayingPlayerClient playerPath](a2, "playerPath");
}

uint64_t sub_10009F02C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) isLocal])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned __int8 v3 = [v2 computeNowPlayingApplication];

    if ((v3 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 104) isLocallyHosted];
  if ((_DWORD)result)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    id v6 = [v5 computeDevicePlaybackSessionID];

    return (uint64_t)v6;
  }

  return result;
}

void sub_10009F0C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 UUIDString]);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 160);
  *(void *)(v4 + 160) = v3;

  __int128 v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  __int128 v10 = sub_10009F184;
  __int128 v11 = &unk_100398E60;
  id v6 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v6;
  dispatch_async(&_dispatch_main_q, &v8);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192LL));
  objc_msgSend(WeakRetained, "nowPlayingOriginClientPlaybackDidTimeout:", *(void *)(a1 + 32), v8, v9, v10, v11, v12);
}

id sub_10009F184(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNowPlayingAppMaybeDidChange:*(void *)(a1 + 40)];
}

void sub_10009F29C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_DEFAULT, 0);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.mediaremote.originClient.userDefaults.serialQueue", v3);
  id v5 = (void *)qword_1003FDDD8;
  qword_1003FDDD8 = (uint64_t)v4;
}

void sub_10009F30C(uint64_t a1)
{
  dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v2 setLocalPlaybackState:*(unsigned int *)(a1 + 40)];

  LODWORD(v2) = MRMediaRemotePlaybackStateIsAdvancing(*(unsigned int *)(a1 + 40));
  if ((_DWORD)v2 != MRMediaRemotePlaybackStateIsAdvancing(*(unsigned int *)(a1 + 44)))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v3 setLocalLastPlayingDate:*(void *)(a1 + 32)];
  }

void sub_10009F684(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl("MediaRemote", "ApplicationConnection");
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_queue_t v4 = &stru_10039E2E0;
  id v5 = *(void **)(v3 + 176);
  if (v2) {
    dispatch_queue_t v4 = &stru_10039E298;
  }
  *(void *)(v3 + 176) = v4;
}

void sub_10009F6D8(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v6 = a2;
  uint64_t v7 = a3;
  id v8 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[MRDApplicationConnection context](v6, "context"));
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[MRDApplicationConnection context](v6, "context"));
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 destinationPlayerPath]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 client]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
  __int128 v14 = (void *)MRMediaRemoteCopyLocalizedDisplayID();

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10009F82C;
  v19[3] = &unk_10039E2C0;
  __int128 v20 = v6;
  id v21 = v9;
  __int128 v22 = v7;
  id v23 = v8;
  __int128 v15 = v7;
  id v16 = v9;
  __int128 v17 = v6;
  id v18 = v8;
  sub_10013C460(v14, 0LL, v19, 7.0);
}

void sub_10009F82C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    objc_initWeak(&location, v5);
    [*(id *)(a1 + 32) setType:1];
    __int128 v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3221225472LL;
    __int128 v22 = sub_10009FAB0;
    id v23 = &unk_100399CE0;
    objc_copyWeak(&v24, &location);
    [*(id *)(a1 + 32) setServerBoundMessageHandler:&v20];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier", v20, v21, v22, v23));
    sub_10013CEB0(v7);

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 nowPlayingServer]);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) destinationPlayerPath]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 resolveExistingPlayerPath:v10]);

    if ([v11 isResolved])
    {
      uint64_t v12 = MRCreateXPCMessage(0x70000000000000BLL);
      id v13 = (NSError *)objc_claimAutoreleasedReturnValue(v12);
      __int128 v14 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionContext);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
      __int128 v17 = -[MRApplicationConnectionContext initWithIdentifier:service:destinationPlayerPath:]( v14,  "initWithIdentifier:service:destinationPlayerPath:",  v15,  v16,  v11);

      id v18 = [[MRCreateApplicationConnectionMessage alloc] initWithConnectionContext:v17 requestInfo:*(void *)(a1 + 48)];
      MRAddProtobufToXPCMessage(v13, v18);
      [v5 relayXPCMessage:v13 andReply:0];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    else
    {
      uint64_t v19 = *(void *)(a1 + 56);
      id v13 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 42LL);
      (*(void (**)(uint64_t, NSError *))(v19 + 16))(v19, v13);
    }

    objc_destroyWeak(&v24);
    objc_destroyWeak(&location);
  }
}

void sub_10009FA78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10009FAB0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v7 = MRCreateXPCMessage(0x70000000000000CLL);
    id v8 = (NSError *)objc_claimAutoreleasedReturnValue(v7);
    MRAddProtobufToXPCMessage(v8, v5);
    [WeakRetained relayXPCMessage:v8 andReply:0];
  }

  else
  {
    id v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 178LL);
    [v9 invalidate:v8];
  }
}

void sub_10009FB64(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 132LL);
  (*((void (**)(id, NSError *))a4 + 2))(v5, v6);
}

void sub_10009FE60( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10009FE70(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

id sub_1000A0250(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  dispatch_queue_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  id v5 = [v3 containsUID:v4];

  return v5;
}

void sub_1000A0BE8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v13)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v13 configuration]);
    id v7 = [v6 mode];
    id v8 = *(id *)(a1 + 40);

    if (v7 != v8)
    {
      __int128 v10 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v13 configuration]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 serviceToken]);
      [v10 runSession:v13 withMode:v9 andServiceToken:v12];
    }
  }
}

void sub_1000A0D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___IRMediaEvent);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) irCandidateFor:*(void *)(a1 + 48)]);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000A0FE4;
    v24[3] = &unk_10039E358;
    id v8 = v7;
    id v25 = v8;
    id v26 = v3;
    uint64_t v9 = objc_retainBlock(v24);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v8 candidateIdentifier]);

    if (v10)
    {
      id v12 = (id)objc_claimAutoreleasedReturnValue([v4 bundleID]);
      if (v12)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaBundleManager shared](&OBJC_CLASS___MRDMediaBundleManager, "shared"));
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_1000A10B8;
        v20[3] = &unk_10039E380;
        id v12 = v12;
        id v21 = v12;
        id v22 = v4;
        id v23 = v9;
        [v13 queryEligibilityOf:v12 completionHandler:v20];
      }

      else
      {
        ((void (*)(void *, id))v9[2])(v9, v4);
      }
    }

    else
    {
      uint64_t v18 = _MRLogForCategory(13LL, v11);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        id v28 = v4;
        __int16 v29 = 2112;
        id v30 = v8;
        __int16 v31 = 2112;
        uint64_t v32 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD EVENT: MR is DROPPING %@ for candidate %@, no candidate identifier - %@",  buf,  0x20u);
      }
    }
  }

  else
  {
    uint64_t v14 = _MRLogForCategory(13LL, v6);
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1002B7584((uint64_t)v4, v15);
    }

    uint64_t v17 = _MRLogForCategory(13LL, v16);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_FAULT)) {
      sub_1002B74F0((uint64_t)v4, (os_log_s *)v8);
    }
  }
}

void sub_1000A0FE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD EVENT: MR is adding %@ for candidate %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 40) addEvent:v3 forCandidate:*(void *)(a1 + 32)];
}

void sub_1000A10B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _MRLogForCategory(13LL, v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B7610(a1, (uint64_t)v7, v9);
    }
  }

  objc_msgSend(*(id *)(a1 + 40), "setIsEligibleApp:", objc_msgSend(v5, "isEligible"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000A115C(id a1, IRSession *a2)
{
  int v2 = a2;
  uint64_t v4 = _MRLogForCategory(13LL, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD requestCurrentContext", v6, 2u);
  }

  -[IRSession requestCurrentContext](v2, "requestCurrentContext");
}

void sub_1000A1250(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD requestCurrentContextWithBundleID:%@",  (uint8_t *)&v8,  0xCu);
  }

  [*(id *)(a1 + 40) setAllowedContextUpdates:1];
  [*(id *)(a1 + 40) setBundleIdentifierPendingUpdate:*(void *)(a1 + 32)];
  if ((objc_opt_respondsToSelector(v3, "requestCurrentContextWithBundleID:") & 1) != 0) {
    [v3 requestCurrentContextWithBundleID:*(void *)(a1 + 32)];
  }
  else {
    [v3 requestCurrentContext];
  }
}

void sub_1000A13C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) donateAsCandidate];
  uint64_t v6 = _MRLogForCategory(13LL, v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD updateRouteCandidate: %@",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) irCandidateFor:*(void *)(a1 + 32)]);
    [v3 updateCandidate:v7];
  }

  else if (v8)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD NOT donating %@",  (uint8_t *)&v11,  0xCu);
  }
}

void sub_1000A1570(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "msv_filter:", &stru_10039E450));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 UUIDString]);

  id v39 = v3;
  if ([v4 count])
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_1000A19D8;
    v48[3] = &unk_10039E478;
    uint64_t v38 = a1;
    void v48[4] = *(void *)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_map:", v48));
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v7));

    uint64_t v10 = _MRLogForCategory(13LL, v9);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v4 count];
      *(_DWORD *)__int128 buf = 134218242;
      id v52 = v12;
      __int16 v53 = 2112;
      __int128 v54 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD will updateRouteCandidates (%lu) [batch: %@]",  buf,  0x16u);
    }

    id v37 = (void *)v8;
    [v3 updateCandidates:v8];
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    id v13 = v4;
    id v14 = [v13 countByEnumeratingWithState:&v44 objects:v50 count:16];
    if (v14)
    {
      id v16 = v14;
      uint64_t v17 = *(void *)v45;
      do
      {
        for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v17) {
            objc_enumerationMutation(v13);
          }
          uint64_t v19 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
          uint64_t v20 = _MRLogForCategory(13LL, v15);
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v52 = v19;
            __int16 v53 = 2112;
            __int128 v54 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD updateRouteCandidate: %@ [batch: %@]",  buf,  0x16u);
          }
        }

        id v16 = [v13 countByEnumeratingWithState:&v44 objects:v50 count:16];
      }

      while (v16);
    }

    id v3 = v39;
    a1 = v38;
  }

  id v22 = [v4 count];
  if (v22 != [*(id *)(a1 + 32) count])
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "msv_filter:", &stru_10039E498));
    uint64_t v25 = _MRLogForCategory(13LL, v24);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v27 = [v23 count];
      *(_DWORD *)__int128 buf = 134218242;
      id v52 = v27;
      __int16 v53 = 2112;
      __int128 v54 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD will NOT donate (%lu) [batch: %@]",  buf,  0x16u);
    }

    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v28 = v23;
    id v29 = [v28 countByEnumeratingWithState:&v40 objects:v49 count:16];
    if (v29)
    {
      id v31 = v29;
      uint64_t v32 = *(void *)v41;
      do
      {
        for (uint64_t j = 0LL; j != v31; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v41 != v32) {
            objc_enumerationMutation(v28);
          }
          __int16 v34 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)j);
          uint64_t v35 = _MRLogForCategory(13LL, v30);
          __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v52 = v34;
            __int16 v53 = 2112;
            __int128 v54 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD NOT donating %@ [batch: %@]",  buf,  0x16u);
          }
        }

        id v31 = [v28 countByEnumeratingWithState:&v40 objects:v49 count:16];
      }

      while (v31);
    }

    id v3 = v39;
  }
}

BOOL sub_1000A19D0(id a1, MRRouteRepresentable *a2)
{
  return -[MRRouteRepresentable donateAsCandidate](a2, "donateAsCandidate");
}

id sub_1000A19D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) irCandidateFor:a2];
}

BOOL sub_1000A19E4(id a1, MRRouteRepresentable *a2)
{
  return -[MRRouteRepresentable donateAsCandidate](a2, "donateAsCandidate") ^ 1;
}

int64_t sub_1000A1BB0(id a1, IRCandidateResult *a2, IRCandidateResult *a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = a3;
  id v6 = -[IRCandidateResult classification](v4, "classification");
  if ((uint64_t)v6 <= (uint64_t)-[IRCandidateResult classification](v5, "classification"))
  {
    id v8 = -[IRCandidateResult classification](v4, "classification");
    int64_t v7 = (uint64_t)v8 < (uint64_t)-[IRCandidateResult classification](v5, "classification");
  }

  else
  {
    int64_t v7 = -1LL;
  }

  return v7;
}

id sub_1000A1C30(uint64_t a1, uint64_t a2)
{
  return +[MRDIRRouteRecommendation recommendationWithIRCandidateResult:contextIdentifier:]( &OBJC_CLASS___MRDIRRouteRecommendation,  "recommendationWithIRCandidateResult:contextIdentifier:",  a2,  *(void *)(a1 + 32));
}

IRNode *__cdecl sub_1000A1D0C(id a1, MRRouteNodeRepresentable *a2)
{
  int v2 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS___IRNode);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRRouteNodeRepresentable avOutputDeviceIdentifier](v2, "avOutputDeviceIdentifier"));
  -[IRNode setAvOutpuDeviceIdentifier:](v3, "setAvOutpuDeviceIdentifier:", v4);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRRouteNodeRepresentable rapportIdentifier](v2, "rapportIdentifier"));
  -[IRNode setRapportIdentifier:](v3, "setRapportIdentifier:", v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRRouteNodeRepresentable idsIdentifier](v2, "idsIdentifier"));
  -[IRNode setIdsIdentifier:](v3, "setIdsIdentifier:", v6);

  id v7 = -[MRRouteNodeRepresentable isLocal](v2, "isLocal");
  -[IRNode setIsLocal:](v3, "setIsLocal:", v7);
  return v3;
}

void sub_1000A1FFC(_Unwind_Exception *a1)
{
}

void sub_1000A2040(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(13LL, a2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD Received first unlock notification",  v6,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_initializeSessionWithCompletion:", *(void *)(a1 + 32));
}

void sub_1000A20C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_initializeSessionWithCompletion:", *(void *)(a1 + 32));
}

void sub_1000A2200(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  dispatch_assert_queue_V2(v6);

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000A23D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD createRunningSession: service token found: %@",  (uint8_t *)&v14,  0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_onQueue_createRunningSessionWithServiceToken:", v3);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = (NSError *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) session]);
    (*(void (**)(uint64_t, NSError *, void))(v8 + 16))(v8, v9, 0LL);
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B76BC();
    }

    uint64_t v11 = _MRLogForCategory(13LL, v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
      sub_1002B7690();
    }

    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v9 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 175LL);
    (*(void (**)(uint64_t, void, NSError *))(v13 + 16))(v13, 0LL, v9);
  }
}

void sub_1000A2718(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v2 = _MRLogForCategory(13LL, 0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1002B7714();
    }

    uint64_t v5 = _MRLogForCategory(13LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_1002B76E8();
    }
  }

void sub_1000A2A20(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] configuration]);

  if (!v2)
  {
    uint64_t v4 = _MRLogForCategory(13LL, v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002B776C();
    }

    uint64_t v7 = _MRLogForCategory(13LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      sub_1002B7740();
    }
  }

  uint64_t v9 = _MRLogForCategory(13LL, v3);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = a1[5];
    int v32 = 138412290;
    uint64_t v33 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD session:didFailWithError: %@",  (uint8_t *)&v32,  0xCu);
  }

  id v12 = a1[4];
  id v13 = (id)objc_claimAutoreleasedReturnValue([a1[6] session]);
  if (v12 == v13)
  {
    int v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] domain]);
    unsigned int v15 = [v14 isEqualToString:IRErrorDomain];

    if (v15)
    {
      if ([a1[5] code] == (id)-12887)
      {
        uint64_t v17 = _MRLogForCategory(13LL, v16);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = a1[4];
          int v32 = 134217984;
          uint64_t v33 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].IRD Session %p invalidated, recreating",  (uint8_t *)&v32,  0xCu);
        }

        objc_msgSend(a1[6], "_onQueue_invalidateSession");
        [a1[6] initializeSessionIfNeededWithCompletion:0];
      }

      else if ([a1[5] code] == (id)-12889)
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] configuration]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 serviceToken]);

        uint64_t v23 = _MRLogForCategory(13LL, v22);
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v28 = a1[4];
          id v29 = a1[5];
          int v32 = 138412802;
          uint64_t v33 = v21;
          __int16 v34 = 2048;
          id v35 = v28;
          __int16 v36 = 2112;
          id v37 = v29;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[MRDRRC].IRD Dynamic token %@ invalidated for session %p, discarding session and giving up - %@",  (uint8_t *)&v32,  0x20u);
        }

        uint64_t v26 = _MRLogForCategory(13LL, v25);
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          id v30 = a1[4];
          id v31 = a1[5];
          int v32 = 138412802;
          uint64_t v33 = v21;
          __int16 v34 = 2048;
          id v35 = v30;
          __int16 v36 = 2112;
          id v37 = v31;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "Dynamic token %@ invalidated for session %p, discarding session and giving up - %@",  (uint8_t *)&v32,  0x20u);
        }

        [a1[6] setSession:0];
      }
    }
  }

  else
  {
  }

void sub_1000A33A0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000A33C8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000A35F4(_Unwind_Exception *a1)
{
}

void sub_1000A3D10(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_1003BBB10));
  uint64_t v2 = (void *)qword_1003FDDE8;
  qword_1003FDDE8 = v1;
}

void sub_1000A3DC0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_1003BBB28));
  uint64_t v2 = (void *)qword_1003FDDF8;
  qword_1003FDDF8 = v1;
}

uint64_t sub_1000A4068(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A4078(uint64_t a1)
{
}

void sub_1000A4080(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = objc_opt_class(v3);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(v5 + 32);
  uint64_t v7 = *(unsigned int *)(v5 + 36);
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 56) allValues]);
  uint64_t v8 = MRCreateIndentedDebugDescriptionFromArray(v13);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = -[NSString initWithFormat:]( v2,  "initWithFormat:",  @"<%p> %@ {\nregisteredForNowPlayingCount = %u\nregisteredForVolumeCount = %u\ncoalescingStates = %@\n}>",  v3,  v4,  v6,  v7,  v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_1000A4398(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) nowPlayingClient]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v3 setClientProperties:v2];
}

void sub_1000A47C8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 supportedRemoteControlCommands]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v3 setSupportedCommands:v2];
}

void sub_1000A492C(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v2 playbackState]));
  [v6 setPlaybackState:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playbackStateTimestamp]);
  [v6 setPlaybackStateTimestamp:v5];
}

void sub_1000A4AE4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 playbackQueue]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v3 setPlaybackQueue:v2];
}

void sub_1000A4C48(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerClient]);
  id v2 = [v4 playbackQueueCapabilities];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v3 setPlaybackQueueCapabilities:v2];
}

void sub_1000A4DC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v2 setContentItems:v1];
}

void sub_1000A4F30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v2 setContentItemsArtwork:v1];
}

void sub_1000A5064(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) player]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40)));
  [v2 setPlayerProperties:v3];
}

id sub_1000A51C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

unsigned __int8 *sub_1000A5234(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 5);
  if (v1 == 2) {
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "_onQueue_setReceiveVolumeControlUpdates:", result[48]);
  }
  if (v1 == 1) {
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "_onQueue_setReceiveNowPlayingUpdates:", result[48]);
  }
  return result;
}

void sub_1000A5670( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000A5694(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleVolumeAvailabilityDidChangeNotification:v5];
  }
}

id sub_1000A5A60(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_notifyCoalescedPlayerPath:", *(void *)(a1 + 40));
}

void sub_1000A5BEC(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 48LL));
  [WeakRetained stateObserver:a1[4] didReceiveCoalescedNowPlayingStateChange:a1[5] playerPath:a1[6]];
}

id sub_1000A8588()
{
  if (qword_1003FDE10 != -1) {
    dispatch_once(&qword_1003FDE10, &stru_10039E6C8);
  }
  v0 = (id *)dlsym((void *)qword_1003FDE18, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDE08, *v0);
  }
  off_1003F6708 = (uint64_t (*)())sub_1000A8600;
  return (id)qword_1003FDE08;
}

id sub_1000A8600()
{
  return (id)qword_1003FDE08;
}

void sub_1000A860C(id a1)
{
  qword_1003FDE18 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_1000A893C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateShouldShowLockScreenForReason:", @"Startup");
}

void sub_1000A89DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000A89F4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 72LL);
  return result;
}

id sub_1000A8AE4(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_isLockScreenWidgetVisible");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

id sub_1000A8B9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "lockScreenController:lockScreenWidgetActiveDidChange:");
}

uint64_t sub_1000A8C3C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 73LL);
  return result;
}

uint64_t sub_1000A8CAC(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 73LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1000A8DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000A8DC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained setPreviousPlayerPath:0];
    id v2 = objc_alloc(&OBJC_CLASS___NSString);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 previousPlayerPath]);
    id v4 = -[NSString initWithFormat:](v2, "initWithFormat:", @"Previous playerPath %@ invalidated", v3);
    objc_msgSend(v5, "_onQueue_reevaluateShouldShowLockScreenForReason:", v4);

    id WeakRetained = v5;
  }
}

void sub_1000A9188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

id sub_1000A91AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "lockScreenController:playerPathDidChange:");
}

void sub_1000A91B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_onSerialQueue_restoreElectedPlayer");
    id WeakRetained = v2;
  }
}

id sub_1000A934C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) personalDeviceWasRecentlyAttached] & 1) == 0)
  {
    [*(id *)(a1 + 40) setHasPresentedForCurrentPersonalDevices:0];
    [*(id *)(a1 + 40) setShouldFinishPresentationForCurrentPersonalDevices:0];
  }

  return objc_msgSend( *(id *)(a1 + 40),  "_onQueue_reevaluateShouldShowLockScreenForReason:",  @"Personal devices changed");
}

id sub_1000A93F0(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onQueue_reevaluateShouldShowLockScreenForReason:",  @"Lock screen content changed");
}

id sub_1000A9510(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasPresentedForCurrentPersonalDevices]
    && ([*(id *)(*(void *)(a1 + 32) + 8) lockScreenVisible] & 1) == 0)
  {
    [*(id *)(a1 + 32) setShouldFinishPresentationForCurrentPersonalDevices:1];
  }

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateShouldShowLockScreenForReason:", @"LayoutChange");
}

id sub_1000A9674(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) isEqual:*(void *)(*(void *)(a1 + 32) + 24)];
  if ((result & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 32) + 112LL) = *(void *)(a1 + 48);
    *(void *)(*(void *)(a1 + 32) + 120LL) = *(void *)(a1 + 56);
    return [*(id *)(a1 + 32) setPlayerPath:*(void *)(*(void *)(a1 + 32) + 104)];
  }

  return result;
}

void sub_1000A9754(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = MRGetPlayerPathFromUserInfo(v2);
  id v11 = (id)objc_claimAutoreleasedReturnValue(v3);

  if ([*(id *)(*(void *)(a1 + 40) + 104) isEqual:v11])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:kMRMediaRemotePlayerIsPlayingDidChangeNotification]);
    unsigned int v6 = [v5 BOOLValue];

    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v9 = @"stopped";
    if (v6) {
      uint64_t v9 = @"started";
    }
    uint64_t v10 = -[NSString initWithFormat:](v8, "initWithFormat:", @"ElectedPlayer %@ playback", v9);
    objc_msgSend(v7, "_onQueue_reevaluateShouldShowLockScreenForReason:", v10);
  }
}

void sub_1000AA10C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000AA134(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138543362;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDLockScreenController] lockScreenAssertion error %{public}@",  (uint8_t *)&v9,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setAssertion:0];
    [v8 delayCreateAssertion];
  }
}

void sub_1000AA2B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained createAssertion];
    id WeakRetained = v2;
  }
}

Class sub_1000AA37C()
{
  if (qword_1003FDE30 != -1) {
    dispatch_once(&qword_1003FDE30, &stru_10039E710);
  }
  Class result = objc_getClass("SBSLockScreenContentAssertion");
  qword_1003FDE28 = (uint64_t)result;
  off_1003F67D0 = (uint64_t (*)())sub_1000AA3D8;
  return result;
}

id sub_1000AA3D8()
{
  return (id)qword_1003FDE28;
}

void sub_1000AA3E4(id a1)
{
  qword_1003FDE38 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices",  2);
}

id sub_1000AA40C()
{
  if (qword_1003FDE30 != -1) {
    dispatch_once(&qword_1003FDE30, &stru_10039E710);
  }
  v0 = (id *)dlsym((void *)qword_1003FDE38, "SBSLockScreenContentAssertionSlotPlatter");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDE20, *v0);
  }
  off_1003F67D8 = (uint64_t (*)())sub_1000AA484;
  return (id)qword_1003FDE20;
}

id sub_1000AA484()
{
  return (id)qword_1003FDE20;
}

id sub_1000AA6C8()
{
  if (qword_1003FDE40 != -1) {
    dispatch_once(&qword_1003FDE40, &stru_10039E730);
  }
  return (id)qword_1003FDE48;
}

void sub_1000AA708(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.MediaRemote.MRDConnectionLifetimeSubsystem.targetQueue", v4);
  id v3 = (void *)qword_1003FDE48;
  qword_1003FDE48 = (uint64_t)v2;
}

id sub_1000AA990(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(2LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 112) displayName]);
    signed int v7 = [*(id *)(*(void *)(a1 + 32) + 112) identifier];
    int v12 = 134218498;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    unsigned int v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDCLC] <%p> Initializing for origin-%@-%ld.",  (uint8_t *)&v12,  0x20u);
  }

  [*(id *)(a1 + 32) registerForChanges];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
  unsigned int v9 = [v8 displayOn];

  if (v9) {
    uint64_t v10 = 2LL;
  }
  else {
    uint64_t v10 = 0LL;
  }
  [*(id *)(a1 + 32) setDeviceState:v10];
  [*(id *)(a1 + 32) _adjustPlaybackTimerIfNeeded];
  [*(id *)(a1 + 32) _adjustContinuousPlaybackDetectionTimerIfNeeded];
  return [*(id *)(a1 + 32) evaluateShouldDisconnectWithReason:@"Init"];
}

id sub_1000AAC5C(uint64_t a1)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_opt_class(*(void *)(a1 + 40));
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);
  [v2 appendFormat:@"<%@:%p origin=<%@>, deviceState=<%lu>, hasDeferredDisconnectionDueToDeviceState=<%u>", v3, v4, v5, objc_msgSend(*(id *)(a1 + 40), "deviceState"), objc_msgSend(*(id *)(a1 + 40), "hasDeferredDisconnectionDueToDeviceState")];

  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) maintainReason]);
  if (v6)
  {
    signed int v7 = *(void **)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) maintainReason]);
    [v7 appendFormat:@", maintainReason=<%@>", v8];
  }

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) previousMaintainReason]);

  if (v9)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) previousMaintainReason]);
    [v10 appendFormat:@", previousMaintainReason=<%@>", v11];
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playbackTimer]);
  unsigned int v13 = [v12 isValid];

  if (v13)
  {
    __int16 v14 = *(void **)(a1 + 32);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playbackTimer]);
    [v15 timeRemaining];
    objc_msgSend(v14, "appendFormat:", @", playbackTimer=<%lf seconds remaining>", v16);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) continuousPlaybackDetectionTimer]);
  unsigned int v18 = [v17 isValid];

  if (v18)
  {
    id v19 = *(void **)(a1 + 32);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) continuousPlaybackDetectionTimer]);
    [v20 timeRemaining];
    objc_msgSend(v19, "appendFormat:", @", continuousPlaybackDetectionTimer=<%lf seconds remaining>", v21);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) disconnectTimer]);
  unsigned int v23 = [v22 isValid];

  if (v23)
  {
    uint64_t v24 = *(void **)(a1 + 32);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) disconnectTimer]);
    [v25 timeRemaining];
    objc_msgSend(v24, "appendFormat:", @", disconnectTimer=<%lf seconds remaining>", v26);
  }

  return [*(id *)(a1 + 32) appendString:@">"];
}

void sub_1000AB50C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000AB538(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained disconnectTimer]);

    if (v4)
    {
      if ([v3 deviceState])
      {
        uint64_t v6 = _MRLogForCategory(2LL, v5);
        signed int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) displayName]);
          signed int v9 = [*(id *)(a1 + 32) identifier];
          int v10 = 134218498;
          id v11 = v3;
          __int16 v12 = 2112;
          unsigned int v13 = v8;
          __int16 v14 = 2048;
          uint64_t v15 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDCLC] <%p> Defer disconnect for origin-%@-%ld due to device state.",  (uint8_t *)&v10,  0x20u);
        }

        [v3 setHasDeferredDisconnectionDueToDeviceState:1];
      }

      else
      {
        [v3 disconnectOrigin:*(void *)(a1 + 32)];
      }
    }
  }
}

void sub_1000AB840(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMRMediaRemoteOriginUserInfoKey]);

  id v3 = *(id *)(*(void *)(a1 + 40) + 112LL);
  if (v5 == v3)
  {
  }

  else
  {
    unsigned int v4 = [v5 isEqual:v3];

    if (!v4) {
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 40) evaluateShouldDisconnectWithReason:@"DeviceInfo changed"];
LABEL_6:
}

void sub_1000AB97C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMRNowPlayingPlayerPathUserInfoKey]);

  id v3 = (id)objc_claimAutoreleasedReturnValue([v7 origin]);
  id v4 = *(id *)(*(void *)(a1 + 40) + 112LL);
  if (v3 == v4)
  {
  }

  else
  {
    id v5 = v4;
    unsigned int v6 = [v3 isEqual:v4];

    if (!v6) {
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 40) _adjustPlaybackTimerIfNeeded];
  [*(id *)(a1 + 40) _adjustContinuousPlaybackDetectionTimerIfNeeded];
  [*(id *)(a1 + 40) evaluateShouldDisconnectWithReason:@"isPlayingDidChange"];
LABEL_6:
}

void sub_1000ABC2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000ABC50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained evaluateShouldDisconnectWithReason:@"Has not played recently"];
}

void sub_1000ABE58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000ABE7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained evaluateShouldDisconnectWithReason:@"Continuous Playback Detected"];
}

id sub_1000ABF1C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
  unsigned int v3 = [v2 displayOn];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
  if ([v4 lockScreenForegrounded])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
    unsigned int v6 = [v5 controlCenterForegrounded] ^ 1;
  }

  else
  {
    unsigned int v6 = 0;
  }

  id result = [*(id *)(a1 + 32) deviceState];
  if (result == (id)2)
  {
    if ((v3 & 1) != 0) {
      return result;
    }
    [*(id *)(a1 + 32) setDeviceState:0];
    signed int v9 = @"InUse -> ScreenOff";
    return [*(id *)(a1 + 32) evaluateShouldDisconnectWithReason:v9];
  }

  if (result == (id)1)
  {
    if (v3)
    {
      if ((v6 & 1) != 0) {
        return result;
      }
      [*(id *)(a1 + 32) setDeviceState:2];
      signed int v9 = @"CoverSheet -> InUse";
    }

    else
    {
      [*(id *)(a1 + 32) setDeviceState:0];
      signed int v9 = @"CoverSheet -> ScreenOff";
    }

    return [*(id *)(a1 + 32) evaluateShouldDisconnectWithReason:v9];
  }

  if (!result && v3)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    if (v6)
    {
      [v8 setDeviceState:1];
      signed int v9 = @"ScreenOff -> CoverSheet";
    }

    else
    {
      [v8 setDeviceState:2];
      signed int v9 = @"ScreenOff -> InUse";
    }

    return [*(id *)(a1 + 32) evaluateShouldDisconnectWithReason:v9];
  }

  return result;
}

void sub_1000AC0F8(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointTypeUserInfoKey]);
  unsigned int v4 = [v3 intValue];

  if (!v4) {
    [*(id *)(a1 + 40) evaluateShouldDisconnectWithReason:@"Active endpoint changed"];
  }
}

LABEL_23:
    goto LABEL_24;
  }
}

  return v20;
}
}

    __break(1u);
    goto LABEL_24;
  }

  sub_10015D9C0(v15, a2 & 1);
  uint64_t v17 = sub_10015CAD4(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    __int16 v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v20 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow();
    __int16 v50 = v20;
    swift_errorRetain(v20);
    uint64_t v21 = sub_100156B68(&qword_1003F86D0);
    if ((swift_dynamicCast(v21, &v50, v21, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v6);

      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v50);
    }

    goto LABEL_26;
  }

    unsigned int v6 = (v17 - 1) & v17;
    int v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    id v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    __int16 v12 = *v11;
    unsigned int v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10015CCDC(v12, v13);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v13);
    id result = swift_bridgeObjectRelease(v15);
  }

  unsigned int v18 = v16 + 4;
  if (v18 >= v7) {
    return swift_release(v2);
  }
  uint64_t v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    uint64_t v8 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    uint64_t v17 = *(void *)(v3 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    signed int v9 = (v15 - 1) & v15;
    unsigned int v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    unsigned int v18 = *v17;
    id v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    id result = Hasher._finalize()();
    uint64_t v20 = -1LL << *((_BYTE *)v8 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unsigned int v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        id v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      unsigned int v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    id v28 = (void *)(v8[6] + 16 * v23);
    *id v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    int v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    int v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    int v10 = (v16 - 1) & v16;
    __int16 v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unsigned int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unsigned int v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        id v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      unsigned int v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  uint64_t v16 = v29[v17];
  if (v16)
  {
    id v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    id v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    uint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  signed int v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v21 = v9;
  int v10 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    id v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      __int128 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      __int128 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      swift_retain(*((void *)&v43 + 1));
    }

    id v29 = *(void *)(v12 + 40);
    id v30 = sub_100164A6C(&qword_1003F8410, (uint64_t)&protocol conformance descriptor for UUID);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    id v31 = -1LL << *(_BYTE *)(v12 + 32);
    int v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v34 = 0;
      id v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int16 v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        id v37 = *(void *)(v17 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20) = v43;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  unsigned int v3 = v39;
  uint64_t v24 = v41;
  if ((v42 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v10 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v10);
  *unsigned int v3 = v12;
  return result;
}

    int v10 = (v16 - 1) & v16;
    __int16 v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unsigned int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unsigned int v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        id v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      unsigned int v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  uint64_t v16 = v29[v17];
  if (v16)
  {
    id v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    id v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    uint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  signed int v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v21 = v9;
  int v10 = type metadata accessor for NearbyAdvertisement(0LL);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

    uint64_t v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    id v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    id v29 = *v27;
    id v28 = v27[1];
    id v30 = *(void *)(v43 + 72);
    id v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_10018364C(v31, (uint64_t)v8);
    }

    else
    {
      sub_100183690(v31, (uint64_t)v8);
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v45, *(void *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    id result = Hasher._finalize()();
    int v32 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v33 = result & ~v32;
    __int16 v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v35 = 0;
      __int16 v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          __int16 v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      id v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    void *v20 = v29;
    v20[1] = v28;
    id result = sub_10018364C((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  unsigned int v3 = v40;
  uint64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v9);
  *unsigned int v3 = v11;
  return result;
}

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    id v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      __int128 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      __int128 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      swift_retain(*((void *)&v43 + 1));
    }

    id v29 = *(void *)(v12 + 40);
    id v30 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    id v31 = -1LL << *(_BYTE *)(v12 + 32);
    int v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v34 = 0;
      id v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int16 v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        id v37 = *(void *)(v17 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20) = v43;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  unsigned int v3 = v39;
  uint64_t v24 = v41;
  if ((v42 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v10 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v10);
  *unsigned int v3 = v12;
  return result;
}

      id v31 = 0;
      goto LABEL_28;
    }

    id v31 = v30 ^ 1;
  }

  else
  {
    if ((a4 & 1) == 0)
    {
      if (sub_1002A88D4())
      {
        sub_1001A80F8((uint64_t)a1, (uint64_t)v16, type metadata accessor for HostedRoutingItem);
        if ((v30 & 1) != 0)
        {
          id v31 = 0;
          uint64_t v20 = v16;
        }

        else
        {
          int v32 = sub_10024A5E0();
          uint64_t v20 = v35;
          sub_1001A81D4((uint64_t)v16, (uint64_t)v35, type metadata accessor for HostedRoutingItem);
          if (v32) {
            id v31 = 1;
          }
          else {
            id v31 = v20[*(int *)(v34 + 60)];
          }
        }

        goto LABEL_28;
      }

      uint64_t v20 = v36;
      sub_1001A80F8((uint64_t)a1, (uint64_t)v36, type metadata accessor for HostedRoutingItem);
      if ((v30 & 1) == 0)
      {
        id v31 = sub_10024A5E0();
        goto LABEL_28;
      }

      goto LABEL_23;
    }

    id v31 = 0;
  }

  return v31 & 1;
}

    uint64_t v15 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    uint64_t v26 = *(void *)(*(void *)(v9 + 48) + 8 * v21);
    id v27 = *(void *)(v42 + 72);
    id v28 = *(void *)(v9 + 56) + v27 * v21;
    if ((v43 & 1) != 0)
    {
      sub_1001A81D4(v28, (uint64_t)v8, type metadata accessor for HostedRoutingSessionSnapshot);
    }

    else
    {
      sub_1001A80F8(v28, (uint64_t)v8, type metadata accessor for HostedRoutingSessionSnapshot);
      swift_retain(v26);
    }

    Hasher.init(_seed:)(v44, *(void *)(v11 + 40));
    id v29 = *(void *)(v26
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
    id v30 = *(void *)(v26
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                    + 8);
    swift_bridgeObjectRetain();
    String.hash(into:)(v44, v29, v30);
    swift_bridgeObjectRelease();
    id result = Hasher._finalize()();
    id v31 = -1LL << *(_BYTE *)(v11 + 32);
    int v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v34 = 0;
      id v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int16 v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        id v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      id v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v11 + 48) + 8 * v19) = v26;
    id result = sub_1001A81D4( (uint64_t)v8,  *(void *)(v11 + 56) + v27 * v19,  type metadata accessor for HostedRoutingSessionSnapshot);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  unsigned int v3 = v39;
  unsigned int v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unsigned int v23 = -1LL << v38;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v9);
  *unsigned int v3 = v11;
  return result;
}

    uint64_t v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    id v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    id v29 = *v27;
    id v28 = v27[1];
    id v30 = *(void *)(v43 + 72);
    id v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_1001A78A0(v31, (uint64_t)v8, &qword_1003F8E68);
    }

    else
    {
      sub_1001A8360(v31, (uint64_t)v8, &qword_1003F8E68);
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v45, *(void *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    id result = Hasher._finalize()();
    int v32 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v33 = result & ~v32;
    __int16 v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v35 = 0;
      __int16 v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          __int16 v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      id v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    void *v20 = v29;
    v20[1] = v28;
    id result = sub_1001A78A0((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19, &qword_1003F8E68);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  unsigned int v3 = v40;
  uint64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v9);
  *unsigned int v3 = v11;
  return result;
}

  __break(1u);
LABEL_24:
  id v29 = 2;
  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v29,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v26 = 2;
  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1092LL,  0);
  __break(1u);
  return result;
}

    __int16 v12 = v31;
  }

  unsigned int v18 = v16 + 4;
  if (v18 >= v30) {
    return;
  }
  uint64_t v17 = *(void *)(v29 + 8 * v18);
  if (v17)
  {
    __int16 v12 = v18;
    goto LABEL_41;
  }

  while (1)
  {
    __int16 v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v30) {
      return;
    }
    uint64_t v17 = *(void *)(v29 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_41;
    }
  }

  __break(1u);
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  signed int v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v21 = v9;
  int v10 = sub_10016083C(0LL, &qword_1003F9EC0, &OBJC_CLASS___SKPresentDevice_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

        dispatch_queue_t v2 = (uint64_t)log;
LABEL_26:
        sub_1001E8E38(v1, v48);
        sub_1001E3370((uint64_t *)&v74, 1, (uint64_t *)&v77, v2, v24);
        dispatch_queue_t v2 = (uint64_t)v74;

        swift_bridgeObjectRelease();
        *(void *)unsigned int v18 = v77;
        swift_endAccess(&v75);

        swift_bridgeObjectRelease();
        __int16 v50 = *(void **)v18;
        if (!*(void *)v18) {
          goto LABEL_63;
        }
        if (v50[2])
        {
          dispatch_queue_t v2 = (uint64_t)v24;
          swift_bridgeObjectRetain();
          id v51 = sub_1001E1270(v2);
          if ((v52 & 1) != 0)
          {
            __int16 v53 = *(void *)(v50[7] + 8 * v51);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();

            __int128 v54 = *(void *)(v53 + 16);
            swift_bridgeObjectRelease();
            if (v54) {
              return;
            }
            swift_beginAccess(v18, &v75, 33LL, 0LL);
            if (*(void *)v18)
            {
              __int128 v55 = (id)v2;
              sub_1001E2384((uint64_t)v55);
              swift_endAccess(&v75);

              swift_bridgeObjectRelease();
              return;
            }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  signed int v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RoutingTimeline.Event(0LL);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    uint64_t v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    id v27 = *(void *)(v48 + 72);
    id v28 = *(void *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      id v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      id v31 = *v29;
      id v30 = v29[1];
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      int v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      id v31 = *v32;
      id v30 = v32[1];
      swift_bridgeObjectRetain();
    }

    uint64_t v33 = *(void *)(v11 + 40);
    __int16 v34 = sub_1002007D4(&qword_1003F7F98, (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    id v35 = -1LL << *(_BYTE *)(v11 + 32);
    __int16 v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v38 = 0;
      id v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        __int128 v41 = *(void *)(v16 + 8 * v37);
      }

      while (v41 == -1);
      id v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))( *(void *)(v11 + 48) + v27 * v19,  v8,  v6);
    uint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    void *v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  unsigned int v3 = v43;
  uint64_t v24 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v42 = 1LL << *(_BYTE *)(v9 + 32);
  if (v42 >= 64) {
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v42;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v9);
  *unsigned int v3 = v11;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    __int16 v14 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    uint64_t v25 = *(void *)(v8 + 56);
    uint64_t v26 = v8;
    id v27 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    id v29 = *v27;
    id v28 = v27[1];
    id v30 = *(void *)(v6 + 72);
    id v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v47, *(void *)(v10 + 40));
    String.hash(into:)(v47, v29, v28);
    id result = Hasher._finalize()();
    int v32 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v33 = result & ~v32;
    __int16 v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      unsigned int v18 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v35 = 0;
      __int16 v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          __int16 v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v15 + 8 * v34);
      }

      while (v38 == -1);
      unsigned int v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *id v19 = v29;
    v19[1] = v28;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v10 + 56) + v30 * v18,  v45,  v46);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v26;
  }

  uint64_t v24 = v22 + 2;
  if (v24 < v42)
  {
    unsigned int v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        uint64_t v17 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_43;
        }
        if (v17 >= v42) {
          goto LABEL_36;
        }
        unsigned int v23 = v43[v17];
        ++v24;
        if (v23) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v17 = v24;
    goto LABEL_23;
  }

    uint64_t v22 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))( v18,  *(void *)(a1 + 48) + *(void *)(v12 + 72) * v25,  v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v18, v11);
    v32(v15);
    sub_1001603DC((uint64_t)v10, a2);
    id result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  id v28 = v26 + 4;
  if (v28 >= v31) {
    return swift_release(a1);
  }
  id v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    unsigned int v23 = v28;
    goto LABEL_23;
  }

  while (1)
  {
    unsigned int v23 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v23 >= v31) {
      return swift_release(a1);
    }
    id v27 = *(void *)(v30 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }

  unsigned int v13 = (v18 - 1) & v18;
  for (uint64_t j = __clz(__rbit64(v18)) + (v9 << 6); ; uint64_t j = v15 | (v9 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * j);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    unsigned int v23 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v23)
    {
      swift_bridgeObjectRetain();
      sub_10015CAD4(v22, v21);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }

    uint64_t v26 = *(void *)(v2 + 104);
    if (!v26) {
      goto LABEL_89;
    }
    swift_bridgeObjectRetain();
    id v27 = swift_retain(v26);
    id v28 = ((uint64_t (*)(uint64_t))v110)(v27);
    if (!*(void *)(v28 + 16)) {
      break;
    }
    id v29 = sub_10015CAD4(v22, v21);
    if ((v30 & 1) == 0) {
      break;
    }
    id v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
    swift_retain(v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 224LL))(v31);
    __int16 v34 = v33;
    swift_release(v31);
    swift_release(v26);
    if (v34 >> 60 != 15)
    {
      sub_100171C30(v32, v34);
      if (qword_100401640 != -1) {
        swift_once(&qword_100401640, sub_10023E558);
      }
      id v35 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v35, (uint64_t)qword_100401648);
      __int16 v36 = swift_bridgeObjectRetain_n(v21, 2LL);
      id v37 = (os_log_s *)Logger.logObject.getter(v36);
      uint64_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = swift_slowAlloc(22LL, -1LL);
        __int128 v40 = swift_slowAlloc(64LL, -1LL);
        v112[0] = v40;
        *(_DWORD *)id v39 = 136315394;
        __int128 v41 = _typeName(_:qualified:)(v102, 0LL);
        *(void *)(v39 + 4) = sub_10015ADC4(v41, v42, v112);
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v39 + 14) = sub_10015ADC4(v22, v21, v112);
        swift_bridgeObjectRelease_n(v21, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "[%s] remove enqueued messages for removed participant: %{public}s",  (uint8_t *)v39,  0x16u);
        swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v21, 2LL);
      }
    }

    swift_beginAccess(v14, v112, 33LL, 0LL);
    swift_bridgeObjectRetain();
    __int128 v43 = sub_10015CAD4(v22, v21);
    __int128 v45 = v44;
    swift_bridgeObjectRelease();
    dispatch_queue_t v2 = v108;
    if ((v45 & 1) != 0)
    {
      __int128 v46 = swift_isUniquelyReferenced_nonNull_native(*v14);
      __int128 v47 = *v14;
      v111 = *v14;
      *__int16 v14 = 0x8000000000000000LL;
      a1 = v109;
      if ((v46 & 1) == 0)
      {
        sub_100245A88();
        __int128 v47 = v111;
      }

      swift_bridgeObjectRelease();
      __int16 v48 = *(void *)(*(void *)(v47 + 56) + 8 * v43);
      sub_1001B1630(v43, v47);
      *__int16 v14 = v47;
      swift_release(v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      a1 = v109;
    }

    swift_endAccess(v112);
    id v5 = v104;
    if (!v13) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    id v39 = 0LL;
    goto LABEL_24;
  }

  uint64_t v25 = (*(uint64_t (**)(void))(*v4 + 200))();
  sub_10023C01C(v25);
  id v27 = v26;
  id v29 = v28;
  swift_bridgeObjectRelease();
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_beginAccess((char *)v4 + 65, v52, 1LL, 0LL);
    *((_BYTE *)v4 + 65) = 2;
    sub_100240328();
    sub_100243634(v29);
    return swift_release(v29);
  }

  if (qword_100401640 != -1) {
    swift_once(&qword_100401640, sub_10023E558);
  }
  __int128 v43 = type metadata accessor for Logger(0LL);
  __int128 v44 = sub_10015ADAC(v43, (uint64_t)qword_100401648);
  __int128 v45 = (os_log_s *)Logger.logObject.getter(v44);
  __int128 v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    __int128 v47 = swift_slowAlloc(22LL, -1LL);
    __int16 v48 = swift_slowAlloc(64LL, -1LL);
    v52[0] = v48;
    *(_DWORD *)__int128 v47 = 136315394;
    uint64_t v49 = _typeName(_:qualified:)(v6, 0LL);
    __int16 v53 = sub_10015ADC4(v49, v50, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2080;
    __int16 v53 = sub_10015ADC4(0xD00000000000001FLL, 0x800000010033F910LL, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v47 + 14, v47 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "[%s] %s Could not find host participant.",  (uint8_t *)v47,  0x16u);
    swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  id v39 = 1LL;
LABEL_24:
  __int128 v40 = sub_100246098();
  __int128 v41 = swift_allocError(&type metadata for GroupSessionConnectionError, v40, 0LL, 0LL);
  void *v42 = v39;
  return swift_willThrow(v41);
}

  __break(1u);
  return result;
}

    id v63 = v193;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v193 + 56))(v61, v60, 1LL, v62);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62) == 1)
    {
      swift_release(v189);
      return sub_1001603DC(v61, &qword_1003F9518);
    }

    sub_1001A81D4(v61, (uint64_t)v35, type metadata accessor for HostedRoutingSourceSession);
    if ((sub_10024B254() & 1) != 0)
    {
      __int128 v64 = sub_1001741A8();
      unsigned int v65 = v22;
      id v66 = v181;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v41, v64, v181);
      __int128 v67 = v184;
      id v68 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v184, a10, v190);
      swift_bridgeObjectRetain_n(a9, 2LL);
      id v69 = v41;
      __int16 v71 = (os_log_s *)Logger.logObject.getter(v70);
      __int16 v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = swift_slowAlloc(32LL, -1LL);
        __int16 v74 = (char *)swift_slowAlloc(96LL, -1LL);
        v209 = v74;
        *(_DWORD *)v73 = 136315650;
        id v75 = _typeName(_:qualified:)(a12, 0LL);
        v207 = sub_10015ADC4(v75, v76, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v73 + 4, v73 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2080;
        swift_bridgeObjectRetain();
        v207 = sub_10015ADC4(v183, a9, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v73 + 14, v73 + 22);
        swift_bridgeObjectRelease_n(a9, 3LL);
        *(_WORD *)(v73 + 22) = 2080;
        v77 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        v78 = v184;
        v79 = v190;
        v80 = dispatch thunk of CustomStringConvertible.description.getter(v190, v77);
        v207 = sub_10015ADC4(v80, v81, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v73 + 24, v73 + 32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v195 + 8))(v78, v79);
        _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "[%s] handleSetActiveItem<%s> - interaction: %s is an illogical action for a picked item on the local session",  (uint8_t *)v73,  0x20u);
        swift_arrayDestroy(v74, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v65 + 8))(v198, v181);
      }

      else
      {
        swift_bridgeObjectRelease_n(a9, 2LL);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v67, v68);

        (*(void (**)(char *, uint64_t))(v65 + 8))(v69, v66);
      }

      uint64_t v90 = (uint64_t *)v188;
      v95 = type metadata accessor for InternalRoutingError(0LL);
      id v96 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      v97 = swift_allocError(v95, v96, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v95 - 8) + 104LL))( v98,  enum case for InternalRoutingError.invalidAction(_:),  v95);
      v99 = MRDFastSyncGroupSessionState.rawValue.getter(v97, 1LL, 0LL, 4LL);
      v101 = v100;
      v103 = v102;
      v105 = v104;
      v106 = v189;
      swift_beginAccess( v189 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_internalSessionObservers,  &v209,  33LL,  0LL);
      v107 = v186;
      swift_bridgeObjectRetain();
      v108 = sub_100180288(v185, v107);
      v110 = v109;
      v111 = (uint64_t *)&v209;
    }

    else
    {
      int8x16_t v82 = *((void *)v35 + 3);
      if (!v82)
      {
        v112 = sub_1001741A8();
        v113 = v22;
        v114 = v181;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v29, v112, v181);
        v115 = v195;
        v116 = v182;
        v117 = v190;
        (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v182, a10, v190);
        swift_bridgeObjectRetain_n(a9, 2LL);
        v119 = (os_log_s *)Logger.logObject.getter(v118);
        v120 = static os_log_type_t.debug.getter();
        v121 = v120;
        if (os_log_type_enabled(v119, v120))
        {
          v122 = swift_slowAlloc(32LL, -1LL);
          v123 = v117;
          v124 = (char *)swift_slowAlloc(96LL, -1LL);
          v209 = v124;
          *(_DWORD *)v122 = 136315650;
          LODWORD(v205) = v121;
          v125 = _typeName(_:qualified:)(a12, 0LL);
          v203 = v29;
          v207 = sub_10015ADC4(v125, v126, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v122 + 4, v122 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v122 + 12) = 2080;
          swift_bridgeObjectRetain();
          v207 = sub_10015ADC4(v183, a9, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v122 + 14, v122 + 22);
          swift_bridgeObjectRelease_n(a9, 3LL);
          *(_WORD *)(v122 + 22) = 2080;
          v127 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
          v128 = dispatch thunk of CustomStringConvertible.description.getter(v123, v127);
          v207 = sub_10015ADC4(v128, v129, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v122 + 24, v122 + 32);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v195 + 8))(v116, v123);
          _os_log_impl( (void *)&_mh_execute_header,  v119,  (os_log_type_t)v205,  "[%s] handleSetActiveItem<%s> - session is not endpoint sourced. Continuing to wait to handle interaction: %s",  (uint8_t *)v122,  0x20u);
          swift_arrayDestroy(v124, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v124, -1LL, -1LL);
          swift_slowDealloc(v122, -1LL, -1LL);

          swift_release(v189);
          (*(void (**)(char *, uint64_t))(v113 + 8))(v203, v181);
        }

        else
        {

          swift_release(v189);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
          swift_bridgeObjectRelease_n(a9, 2LL);
          (*(void (**)(char *, uint64_t))(v113 + 8))(v29, v114);
        }

        v130 = (uint64_t)v188;
        return sub_1001A813C(v130, type metadata accessor for HostedRoutingSourceSession);
      }

      v83 = *((void *)v35 + 2);
      v84 = (uint64_t *)(v189 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints);
      swift_beginAccess( v189 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_endpoints,  &v209,  0LL,  0LL);
      v85 = *v84;
      id v86 = v181;
      if (*(void *)(v85 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v87 = sub_10015CAD4(v83, v82);
        if ((v88 & 1) != 0)
        {
          v89 = *(void *)(*(void *)(v85 + 56) + 8 * v87);
          swift_retain(v89);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_BYTE *)(v89 + 16) == 2)
          {
            uint64_t v90 = (uint64_t *)v188;
            if ((a11 & 1) != 0)
            {
              unsigned __int8 v91 = *(void *)(v89 + 32);
              id v92 = *(void *)(v89 + 40);
              if ((*(_BYTE *)(v89 + 80) & 1) != 0)
              {
                v93 = *(void **)(v89 + 64);
                swift_bridgeObjectRetain();
                v94 = [v93 resolvedOutputDevices];
              }

              else
              {
                v162 = *(void **)(v89 + 72);
                swift_bridgeObjectRetain();
                v94 = [v162 outputDevices];
              }

              v163 = v94;
              if (v163)
              {
                v164 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
                v165 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v163, v164);
              }

              else
              {
                v165 = _swiftEmptyArrayStorage;
              }

              v166 = sub_1002622C0((uint64_t)v165);
              swift_bridgeObjectRelease();
              v167 = (void *)(v189
                              + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_activeSessionElements);
              v168 = *(void *)(v189
                               + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_activeSessionElements);
              v169 = *(void *)(v189
                               + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_activeSessionElements
                               + 8);
              v170 = *(void **)(v189
                                + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_activeSessionElements
                                + 16);
              *v167 = v91;
              v167[1] = v92;
              v167[2] = v166;
              sub_10028E974(v168, v169, (uint64_t)v170);
              sub_10028DA70(v168, v169, (uint64_t)v170);
              sub_100263A50(v168, v169, v170);
              sub_10028DA70(v168, v169, (uint64_t)v170);
            }

            v171 = v189;
            swift_beginAccess( v189 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_internalSessionObservers,  &v207,  33LL,  0LL);
            v172 = v186;
            swift_bridgeObjectRetain();
            v173 = sub_100180288(v185, v172);
            v175 = v174;
            swift_endAccess(&v207);
            swift_bridgeObjectRelease();
            sub_100162944(v173, v175);
            v180(0LL, 0LL, 0LL, 0LL);
            swift_release(v171);
            v161 = v89;
            goto LABEL_48;
          }

          swift_release(v89);
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }

      v131 = sub_1001741A8();
      v132 = v22;
      v133 = v178;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v178, v131, v86);
      v134 = v195;
      v135 = v177;
      v136 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v177, a10, v190);
      swift_bridgeObjectRetain_n(a9, 2LL);
      v138 = (os_log_s *)Logger.logObject.getter(v137);
      v139 = static os_log_type_t.error.getter();
      v140 = v139;
      if (os_log_type_enabled(v138, v139))
      {
        v141 = swift_slowAlloc(32LL, -1LL);
        v194 = v132;
        v142 = v141;
        v143 = v136;
        v144 = swift_slowAlloc(96LL, -1LL);
        v207 = v144;
        *(_DWORD *)v142 = 136315650;
        LODWORD(v205) = v140;
        v145 = _typeName(_:qualified:)(a12, 0LL);
        v206 = sub_10015ADC4(v145, v146, &v207);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v142 + 4, v142 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v142 + 12) = 2080;
        swift_bridgeObjectRetain();
        v206 = sub_10015ADC4(v183, a9, &v207);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v142 + 14, v142 + 22);
        swift_bridgeObjectRelease_n(a9, 3LL);
        *(_WORD *)(v142 + 22) = 2080;
        v147 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        v148 = dispatch thunk of CustomStringConvertible.description.getter(v143, v147);
        v206 = sub_10015ADC4(v148, v149, &v207);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v142 + 24, v142 + 32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v195 + 8))(v135, v143);
        _os_log_impl( (void *)&_mh_execute_header,  v138,  (os_log_type_t)v205,  "[%s] handleSetActiveItem<%s> - endpoint sourced session has no connected endpoint, Failing interaction: %s",  (uint8_t *)v142,  0x20u);
        swift_arrayDestroy(v144, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v144, -1LL, -1LL);
        swift_slowDealloc(v142, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v194 + 8))(v178, v86);
      }

      else
      {
        swift_bridgeObjectRelease_n(a9, 2LL);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);

        (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v86);
      }

      uint64_t v90 = (uint64_t *)v188;
      v150 = type metadata accessor for InternalRoutingError(0LL);
      v151 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      v152 = swift_allocError(v150, v151, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v150 - 8) + 104LL))( v153,  enum case for InternalRoutingError.sessionNotFound(_:),  v150);
      v154 = *v90;
      v155 = v90[1];
      swift_bridgeObjectRetain();
      v99 = MRDFastSyncGroupSessionState.rawValue.getter(v152, v154, v155, 2LL);
      v101 = v156;
      v103 = v157;
      v105 = v158;
      v106 = v189;
      swift_beginAccess( v189 + OBJC_IVAR____TtC12mediaremoted30HostedRoutingSessionDataSource_internalSessionObservers,  &v207,  33LL,  0LL);
      v159 = v186;
      swift_bridgeObjectRetain();
      v108 = sub_100180288(v185, v159);
      v110 = v160;
      v111 = &v207;
    }

    swift_endAccess(v111);
    swift_bridgeObjectRelease();
    sub_100162944(v108, v110);
    v180(v99, v101, v103, v105);
    swift_errorRelease(v99);
    sub_100156BA8(v101, v103, v105);
    v161 = v106;
LABEL_48:
    swift_release(v161);
    v130 = (uint64_t)v90;
    return sub_1001A813C(v130, type metadata accessor for HostedRoutingSourceSession);
  }

  return result;
}

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    id v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_retain(v29);
    }

    id v30 = *(void *)(v12 + 40);
    id v31 = sub_100156FEC( &qword_1003F94A0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    int v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    __int16 v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v35 = 0;
      __int16 v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          __int16 v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  unsigned int v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v10);
  *unsigned int v3 = v12;
  return result;
}

    uint64_t v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    id v27 = *(void *)(v48 + 72);
    id v28 = *(void *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      id v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      id v31 = *v29;
      id v30 = v29[1];
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      int v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      id v31 = *v32;
      id v30 = v32[1];
      swift_bridgeObjectRetain();
    }

    uint64_t v33 = *(void *)(v11 + 40);
    __int16 v34 = sub_100156FEC( &qword_1003F8410,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    id v35 = -1LL << *(_BYTE *)(v11 + 32);
    __int16 v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v38 = 0;
      id v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        __int128 v41 = *(void *)(v16 + 8 * v37);
      }

      while (v41 == -1);
      id v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))( *(void *)(v11 + 48) + v27 * v19,  v8,  v6);
    uint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    void *v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  unsigned int v3 = v43;
  uint64_t v24 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v42 = 1LL << *(_BYTE *)(v9 + 32);
  if (v42 >= 64) {
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v42;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v9);
  *unsigned int v3 = v11;
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  signed int v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10016083C(0LL, &qword_1003FCFA0, &OBJC_CLASS___HMUser_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  signed int v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v21 = v9;
  int v10 = sub_10016083C(0LL, &qword_1003FCFA0, &OBJC_CLASS___HMUser_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

void sub_1000AC930( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000ACBD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000ACBEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000ACBFC(uint64_t a1)
{
}

void sub_1000ACC04(uint64_t a1)
{
  uint64_t v2 = objc_opt_class(*(void *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) debugName]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"<%@:%p %@", v2, v3, v4));
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(_BYTE *)(*(void *)(a1 + 32) + 9LL))
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) stringByAppendingFormat:@" TOMBSTONED"]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) stringByAppendingString:@">"]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1000ACDB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000ACDC8(uint64_t a1)
{
  uint64_t v2 = objc_opt_class(*(void *)(a1 + 32));
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = v2;
  uint64_t v3 = MRCreateIndentedDebugDescriptionFromObject(*(void *)(v30 + 32));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v4 = MRCreateIndentedDebugDescriptionFromObject(*(void *)(*(void *)(a1 + 32) + 24LL));
  id v28 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v27 = (void *)MRExternalDeviceConnectionStateCopyDescription([*(id *)(*(void *)(a1 + 32) + 24) connectionState]);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(v5 + 88);
  int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 24) deviceInfo]);
  uint64_t v6 = MRCreateIndentedDebugDescriptionFromObject(v32);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) discoveryDescription]);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) allObjects]);
  uint64_t v8 = MRCreateIndentedDebugDescriptionFromArray(v29);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) description]);
  uint64_t v10 = MRCreateIndentedDebugDescriptionFromObject(v26);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = MRCreateIndentedDebugDescriptionFromObject(*(void *)(*(void *)(a1 + 32) + 72LL));
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) groupSessionToken]);
  uint64_t v15 = MRCreateIndentedDebugDescriptionFromObject(v14);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = MRCreateIndentedDebugDescriptionFromObject(*(void *)(v17 + 96));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: %p {\n    endpoint = %@\n    external device = %@\n    connection state = %@\n    last can migrate to local endpoint error = %@\n    deviceInfo = %@\n    discovery modes = %@    external device clients = %@\n    external output context = %@\n    external output context debug = %@\n    groupSession token = %@\n    subscribed playerPaths = %@\n    lifetimeController = %@\n}",  v31,  v30,  v33,  v28,  v27,  v25,  v24,  v7,  v9,  v11,  v13,  v16,  v18,  v20));
  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;
}

void sub_1000AD08C(uint64_t a1)
{
}

void sub_1000AD15C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) allObjects]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000AD284( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000AD29C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) uid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000AD3D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
}

void sub_1000AD4B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 88))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 80), "availableOutputDevices", 0));
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      do
      {
        for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
          if ([v8 deviceType] == 4 && objc_msgSend(v8, "deviceSubtype") != 4
            || [v8 isPersonalRoute])
          {
            uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 descriptor]);
            else {
              uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 name]);
            }
            uint64_t v11 = (void *)v10;
            [v9 setName:v10];

            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 uid]);
            [v9 setUniqueIdentifier:v12];

            unsigned int v13 = *(void **)(a1 + 40);
            __int16 v14 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v9);
            [v13 addObject:v14];
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v5);
    }
  }

void sub_1000ADA8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, id a39, id a40)
{
}

uint64_t sub_1000ADAE8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 9LL);
  return result;
}

void sub_1000ADAFC(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ADBA4;
  block[3] = &unk_100399580;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  id v4 = a2;
  dispatch_sync(v3, block);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _externalDeviceClientDidInvalidate:v5 withError:v4];
}

uint64_t sub_1000ADBA4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

void sub_1000ADBB8(uint64_t a1)
{
  uint64_t v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  1LL,  @"xpc interruption");
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000ADC10(uint64_t a1)
{
  uint64_t v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  1LL,  @"xpc invalidation");
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void *sub_1000ADC68(void *result)
{
  if (!*(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL)) {
    return [*(id *)(result[4] + 64) addObject:result[5]];
  }
  return result;
}

void sub_1000AE570(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v17 = a1[5];
      uint64_t v16 = a1[6];
      __int128 v18 = (void *)a1[4];
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:a1[7]];
      int v27 = 138544130;
      uint64_t v28 = v17;
      __int16 v29 = 2114;
      uint64_t v30 = v16;
      __int16 v31 = 2114;
      id v32 = v18;
      __int16 v33 = 2048;
      uint64_t v34 = v19;
      uint64_t v20 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v21 = v8;
      uint32_t v22 = 42;
    }

    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v23 = a1[5];
      uint64_t v24 = a1[6];
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:a1[7]];
      int v27 = 138543874;
      uint64_t v28 = v23;
      __int16 v29 = 2114;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      uint64_t v20 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v21 = v8;
      uint32_t v22 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v27, v22);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    uint64_t v12 = a1[4];
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:a1[7]];
    int v27 = 138544386;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    uint64_t v30 = v10;
    __int16 v31 = 2114;
    id v32 = v3;
    __int16 v33 = 2114;
    uint64_t v34 = v12;
    __int16 v35 = 2048;
    uint64_t v36 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v27,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v9) {
    sub_1002B6504();
  }
LABEL_14:

  uint64_t v26 = a1[8];
  if (v26) {
    (*(void (**)(uint64_t, id))(v26 + 16))(v26, v3);
  }
}

uint64_t sub_1000AE7BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AE7C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setHasConnectionAttemptCompleted:1];
  if (!v3) {
    [*(id *)(a1 + 32) hostedExternalDeviceConnectionStateDidChange:2 withError:0];
  }
}

void sub_1000AEAC8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(*(void *)(a1 + 32) + 72LL);
    id v13 = 0LL;
    unsigned int v4 = [v3 volumeControlCapabilitiesForOutputDeviceUID:v2 error:&v13];
    id v5 = v13;
  }

  else
  {
    id v5 = 0LL;
    unsigned int v4 = 0;
  }

  uint64_t v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000AEBA0;
  void v9[3] = &unk_100399830;
  id v7 = *(id *)(a1 + 48);
  unsigned int v12 = v4;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1000AEBA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_1000AEBB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
  (*(void (**)(uint64_t, void, NSError *))(v1 + 16))(v1, 0LL, v2);
}

void sub_1000AF088( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_1000AF0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v17 = *(void **)(a1 + 32);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v30 = v16;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2114;
      id v34 = v17;
      __int16 v35 = 2048;
      uint64_t v36 = v18;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 42;
    }

    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v30 = v22;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2048;
      id v34 = v23;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v30 = v10;
    __int16 v31 = 2114;
    id v32 = v11;
    __int16 v33 = 2114;
    id v34 = v3;
    __int16 v35 = 2114;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v9) {
    sub_1002B79F0();
  }
LABEL_14:

  uint64_t v24 = *(void **)(a1 + 72);
  if (v24)
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 56LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000AF380;
    v26[3] = &unk_10039AD10;
    id v28 = v24;
    id v27 = v3;
    msv_dispatch_async_on_queue(v25, v26);
  }
}

uint64_t sub_1000AF380(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000AF390(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 24LL));
}

uint64_t sub_1000AF3D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AF3E4(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_1000AF570(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(*(void *)(a1 + 32) + 72LL);
    id v14 = 0LL;
    [v3 volumeForOutputDeviceUID:v2 error:&v14];
    int v5 = v4;
    id Error = v14;
  }

  else
  {
    id Error = (id)MRMediaRemoteCreateError(36LL);
    int v5 = 0;
  }

  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000AF658;
  v10[3] = &unk_100399830;
  id v8 = *(id *)(a1 + 48);
  int v13 = v5;
  id v11 = Error;
  id v12 = v8;
  id v9 = Error;
  dispatch_async(v7, v10);
}

uint64_t sub_1000AF658(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(float *)(a1 + 48));
}

void sub_1000AF66C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
  (*(void (**)(uint64_t, NSError *, float))(v1 + 16))(v1, v2, 0.0);
}

void sub_1000AFB50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1000AFB80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v17 = *(void **)(a1 + 32);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v30 = v16;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2114;
      id v34 = v17;
      __int16 v35 = 2048;
      uint64_t v36 = v18;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 42;
    }

    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v30 = v22;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2048;
      id v34 = v23;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v30 = v10;
    __int16 v31 = 2114;
    id v32 = v11;
    __int16 v33 = 2114;
    id v34 = v3;
    __int16 v35 = 2114;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v9) {
    sub_1002B79F0();
  }
LABEL_14:

  uint64_t v24 = *(void **)(a1 + 72);
  if (v24)
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 56LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000AFE48;
    v26[3] = &unk_10039AD10;
    id v28 = v24;
    id v27 = v3;
    msv_dispatch_async_on_queue(v25, v26);
  }
}

uint64_t sub_1000AFE48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000AFE58(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 24LL));
}

uint64_t sub_1000AFEA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AFEAC(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_1000B0378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1000B03A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v17 = *(void **)(a1 + 32);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v30 = v16;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2114;
      id v34 = v17;
      __int16 v35 = 2048;
      uint64_t v36 = v18;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 42;
    }

    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v30 = v22;
      __int16 v31 = 2114;
      id v32 = v11;
      __int16 v33 = 2048;
      id v34 = v23;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v20 = v8;
      uint32_t v21 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v30 = v10;
    __int16 v31 = 2114;
    id v32 = v11;
    __int16 v33 = 2114;
    id v34 = v3;
    __int16 v35 = 2114;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v9) {
    sub_1002B79F0();
  }
LABEL_14:

  uint64_t v24 = *(void **)(a1 + 72);
  if (v24)
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 56LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000B0670;
    v26[3] = &unk_10039AD10;
    id v28 = v24;
    id v27 = v3;
    msv_dispatch_async_on_queue(v25, v26);
  }
}

uint64_t sub_1000B0670(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000B0680(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 24LL));
}

uint64_t sub_1000B06C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B06D4(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_1000B0A64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
  (*(void (**)(uint64_t, NSError *))(v1 + 16))(v1, v2);
}

void sub_1000B0C48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
  (*(void (**)(uint64_t, void, NSError *))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_1000B0FBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B0FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 123LL);
  (*(void (**)(uint64_t, NSError *))(v1 + 16))(v1, v2);
}

id sub_1000B123C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) discoveryOutputDevicesChanged:a2 forConfiguration:*(void *)(a1 + 40)];
}

void sub_1000B16F8(_Unwind_Exception *a1)
{
}

void sub_1000B1710(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lifetimeController]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000B1748(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setLifetimeController:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_1000B1758(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setLifetimeController:0];
}

void sub_1000B1C60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

void sub_1000B1CD0(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) customOrigin]);
  uint64_t v3 = *(void *)(a1[5] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), *(id *)(a1[4] + 32LL));
  objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), *(id *)(a1[4] + 24LL));
}

void sub_1000B1D3C(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  [WeakRetained _processCanMigrateToLocalEndpointEvent:v5 timestamp:*(void *)(a1 + 40) error:v4];
}

void sub_1000B1EC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000B1EE0(uint64_t a1)
{
  if (v2 > 0.0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 104LL), *(id *)(a1 + 32));
    id v3 = [*(id *)(a1 + 48) code];
    id v4 = [*(id *)(*(void *)(a1 + 40) + 88) code];
    uint64_t v5 = *(void **)(a1 + 48);
    if (v3 == v4)
    {
LABEL_14:
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 88LL), v5);
      return;
    }

    if (!v5)
    {
      uint64_t v14 = MRLogCategoryConnections(v4);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v16 = *(void *)(a1 + 56);
        int v19 = 138543618;
        uint64_t v20 = v15;
        __int16 v21 = 2114;
        uint64_t v22 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDAVHostedExternalDevice] %{public}@ adding iPhone row for pull handoff back to self for: <%{public}@>",  (uint8_t *)&v19,  0x16u);
      }

      goto LABEL_12;
    }

    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 88LL);
    uint64_t v7 = MRLogCategoryConnections(v4);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v9) {
        goto LABEL_12;
      }
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localizedDescription]);
      int v19 = 138543874;
      uint64_t v20 = v11;
      __int16 v21 = 2114;
      uint64_t v22 = v10;
      __int16 v23 = 2114;
      uint64_t v24 = v12;
      int v13 = "[MRDAVHostedExternalDevice] %{public}@ maintaing iPhone row for pull handoff back to self for: <%{public}@> "
            "because: <%{public}@>";
    }

    else
    {
      if (!v9) {
        goto LABEL_12;
      }
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localizedDescription]);
      int v19 = 138543874;
      uint64_t v20 = v18;
      __int16 v21 = 2114;
      uint64_t v22 = v17;
      __int16 v23 = 2114;
      uint64_t v24 = v12;
      int v13 = "[MRDAVHostedExternalDevice] %{public}@ removing iPhone row for pull handoff back to self for: <%{public}@> b"
            "ecause: <%{public}@>";
    }

    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, 0x20u);

LABEL_12:
    uint64_t v5 = *(void **)(a1 + 48);
    if ((v5 != 0LL) == (*(void *)(*(void *)(a1 + 40) + 88LL) == 0LL))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
      uint64_t v5 = *(void **)(a1 + 48);
    }

    goto LABEL_14;
  }

id sub_1000B26C0(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 72) removeAllOutputDevices];
}

void sub_1000B2BE8(uint64_t a1)
{
}

void sub_1000B2C18(uint64_t a1)
{
}

id sub_1000B3738(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
}

void sub_1000B3818(void *a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1[4] + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "connection", (void)v10));
        unsigned int v9 = [v8 isEqual:a1[5]];

        if (v9)
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v7);
          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

void sub_1000B3A04(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) allObjects]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1000B3AD0(uint64_t a1, void *a2)
{
  return (*(void *)(a1 + 32) & ~(unint64_t)[a2 registeredCallbacks]) == 0;
}

BOOL sub_1000B3B78(uint64_t a1, void *a2)
{
  return (*(void *)(a1 + 32) & (unint64_t)[a2 notifications]) != 0;
}

BOOL sub_1000B3BE8(id a1, MRDAVHostedExternalDeviceClient *a2)
{
  return -[MRDAVHostedExternalDeviceClient hasConnectionAttemptCompleted](a2, "hasConnectionAttemptCompleted");
}

BOOL sub_1000B3C30(id a1, MRDAVHostedExternalDeviceClient *a2)
{
  return -[MRDAVHostedExternalDeviceClient hasAttemptedToConnect](a2, "hasAttemptedToConnect");
}

void sub_1000B413C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, id *a13)
{
}

void sub_1000B41DC(uint64_t a1, int a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v7 = a3;
    id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) notificationQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B42A4;
    block[3] = &unk_10039A9B8;
    int v13 = a2;
    id v11 = WeakRetained;
    id v12 = v7;
    id v9 = v7;
    dispatch_async(v8, block);
  }
}

id sub_1000B42A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) hostedExternalDeviceConnectionStateDidChange:*(unsigned int *)(a1 + 48) withError:*(void *)(a1 + 40)];
}

void sub_1000B42B4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setUseOutputDeviceCache:1];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 externalOutputContext]);
    [v5 updateOutputDevices:v6];
  }
}

void sub_1000B4320(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained externalOutputContext]);
  [v4 removeOutputDevices:v3];
}

void sub_1000B4378(uint64_t a1, void *a2, float a3)
{
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v10) {
    id v10 = (id)objc_claimAutoreleasedReturnValue([WeakRetained outputDeviceUID]);
  }
  if (WeakRetained)
  {
    if ([WeakRetained useOutputDeviceCache])
    {
      id v6 = (_MRAVOutputDeviceDescriptorProtobuf *)objc_claimAutoreleasedReturnValue([WeakRetained externalOutputContext]);
      *(float *)&double v7 = a3;
      -[_MRAVOutputDeviceDescriptorProtobuf updateVolume:outputDeviceUID:](v6, "updateVolume:outputDeviceUID:", v10, v7);
    }

    else
    {
      id v6 = objc_alloc_init(&OBJC_CLASS____MRAVOutputDeviceDescriptorProtobuf);
      -[_MRAVOutputDeviceDescriptorProtobuf setUniqueIdentifier:](v6, "setUniqueIdentifier:", v10);
      id v8 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v6);
      *(float *)&double v9 = a3;
      [WeakRetained _maybePostVolumeDidChange:v8 outputDevice:v9];
    }
  }
}

void sub_1000B445C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v8) {
    id v8 = (id)objc_claimAutoreleasedReturnValue([WeakRetained outputDeviceUID]);
  }
  if (WeakRetained)
  {
    if ([WeakRetained useOutputDeviceCache])
    {
      id v6 = (_MRAVOutputDeviceDescriptorProtobuf *)objc_claimAutoreleasedReturnValue([WeakRetained externalOutputContext]);
      -[_MRAVOutputDeviceDescriptorProtobuf updateVolumeControlCapabilities:outputDeviceUID:]( v6,  "updateVolumeControlCapabilities:outputDeviceUID:",  a2,  v8);
    }

    else
    {
      id v6 = objc_alloc_init(&OBJC_CLASS____MRAVOutputDeviceDescriptorProtobuf);
      -[_MRAVOutputDeviceDescriptorProtobuf setUniqueIdentifier:](v6, "setUniqueIdentifier:", v8);
      double v7 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v6);
      [WeakRetained _maybePostVolumeControlCapabilitiesDidChange:a2 outputDevice:v7];
    }
  }
}

void sub_1000B4538(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = (uint64_t)v8;
  if (!v8) {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([WeakRetained outputDeviceUID]);
  }
  id v9 = (id)v6;
  if (WeakRetained)
  {
    double v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained externalOutputContext]);
    [v7 updateVolumeMuted:a2 outputDeviceUID:v9];
  }
}

void sub_1000B45C0(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained hostedExternalDeviceDeviceInfoDidChange:v3];
}

void sub_1000B4608(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000LL;
    uint64_t v20 = sub_1000ACBEC;
    __int16 v21 = sub_1000ACBFC;
    id v22 = 0LL;
    uint64_t v6 = (dispatch_queue_s *)WeakRetained[6];
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    int v13 = sub_1000B4744;
    uint64_t v14 = &unk_100399278;
    uint64_t v16 = &v17;
    double v7 = WeakRetained;
    id v15 = v7;
    dispatch_sync(v6, &v11);
    id v8 = objc_msgSend((id)v18[5], "count", v11, v12, v13, v14);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 personalOutputDevices]);
    id v10 = [v9 count];

    if (v8 != v10) {
      [v7 _reloadEndpoint];
    }

    _Block_object_dispose(&v17, 8);
  }
}

void sub_1000B472C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B4744(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) personalOutputDevices]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000B495C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B4974(uint64_t a1)
{
}

void sub_1000B4AEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location, char a23)
{
}

void sub_1000B4B28(void *a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v2 = *(id *)(a1[4] + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) |= (unint64_t)objc_msgSend( *(id *)(*((void *)&v7 + 1)
                                                                                  + 8LL * (void)v6),
                                                                            "registeredCallbacks",
                                                                            (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1000B4C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained hostedExternalDeviceDidReceiveCustomData:a3 withName:a2];
}

void sub_1000B4D64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000B4D88(void *a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v2 = *(id *)(a1[4] + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) |= (unint64_t)objc_msgSend( *(id *)(*((void *)&v7 + 1)
                                                                                  + 8LL * (void)v6),
                                                                            "notifications",
                                                                            (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1000B4F9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000B4FB4(void *a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1[4] + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = (void *)a1[5];
        __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v9 + 1) + 8 * (void)v6),  "subscribedPlayerPaths",  (void)v9));
        [v7 addObjectsFromArray:v8];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_1000B51C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B51D8(uint64_t a1)
{
}

void sub_1000B52CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B52E4(uint64_t a1)
{
}

void sub_1000B53D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B53F0(uint64_t a1)
{
}

void sub_1000B54D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B54E8(uint64_t a1)
{
}

void sub_1000B55C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B55E0(uint64_t a1)
{
}

void sub_1000B56C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B56D8(uint64_t a1)
{
}

id sub_1000B5ADC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) hostedExternalDeviceVolumeCapabilitiesDidChange:*(unsigned int *)(a1 + 40) forOutputDevice:0];
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 44);
    return [*(id *)(a1 + 32) hostedExternalDeviceVolumeDidChange:0 forOutputDevice:v3];
  }

  return result;
}

id sub_1000B5EA4(void *a1, const char *a2)
{
  return [a1 timeIntervalSinceDate:*(void *)(v2 + 56)];
}

id sub_1000B61C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerCallbacks];
}

id sub_1000B662C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

uint64_t sub_1000B66EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B66FC(uint64_t a1)
{
}

void sub_1000B6704(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000B67F0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000B70EC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000B71C8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000B7348(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___MRCompositeMessage);
  [v4 setTransportOptions:*(void *)(a1 + 32)];
  [v4 addMessage:*(void *)(a1 + 40)];
  if (([*(id *)(a1 + 48) _connection:v3 wasPreviouslySubscribedToPlayerPath:*(void *)(a1 + 56)] & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 64);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) origin]);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v5 originClientForOrigin:v6]);

    if (v7)
    {
      [*(id *)(a1 + 48) _addSubscribedStateToMessage:v4 forClient:v3 originClient:v7];
      __int128 v8 = *(void **)(a1 + 48);
      __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 activeNowPlayingClient]);
      [v8 _addSubscribedStateToMessage:v4 forClient:v3 nowPlayingClient:v9];

      __int128 v10 = *(void **)(a1 + 48);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 activeNowPlayingClient]);
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 activePlayerClient]);
      [v10 _addSubscribedStateToMessage:v4 forClient:v3 playerClient:v12];
    }
  }

  return v4;
}

id sub_1000B7538(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000B7618(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000B7778(void *a1, uint64_t a2)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (!v6)
  {
    id v6 = [[MRSetDefaultSupportedCommandsMessage alloc] initWithDefaultSupportedCommands:a1[5] forPlayerPath:a1[6] encoding:a2];
    __int128 v7 = (void *)a1[4];
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
    [v7 setObject:v6 forKeyedSubscript:v8];
  }

  return v6;
}

id sub_1000B782C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 supportedMessages]);
  unsigned int v5 = [v4 isSupported:72];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
    [v6 preferredEncoding];

    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    __int128 v8 = 0LL;
  }

  return v8;
}

id sub_1000B7998(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___MRCompositeMessage);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProperties]);
  if (v5)
  {
    id v6 = [[MRUpdateClientMessage alloc] initWithClient:v5];
    [v4 addMessage:v6];
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerProperties]);
  if (v25)
  {
    id v7 = [[MRUpdatePlayerMessage alloc] initWithPlayerPath:*(void *)(a1 + 40)];
    [v4 addMessage:v7];
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) state]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 exportNowPlayingState:v8 forPlayerPath:*(void *)(a1 + 40)]);

  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
  id v11 = [v10 preferredEncoding];

  if (v9)
  {
    id v12 = [[MRSetStateMessage alloc] initWithNowPlayingState:v9 encoding:v11];
    [v4 addMessage:v12];
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue([v9 playbackQueue]);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[MRPlaybackQueueRequest defaultPlaybackQueueRequest]( &OBJC_CLASS___MRPlaybackQueueRequest,  "defaultPlaybackQueueRequest"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 playbackQueueRequests]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 subscriptionControllerForPlayerPath:*(void *)(a1 + 40)]);

    [v16 subscribeToPlaybackQueue:v13 forRequest:v14];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contentItems]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 exportContentItems:v17 forPlayerPath:*(void *)(a1 + 40)]);

  if ([v18 count])
  {
    id v19 = [[MRUpdateContentItemMessage alloc] initWithContentItems:v18 forPlayerPath:*(void *)(a1 + 40) encoding:v11];
    [v4 addMessage:v19];
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contentItemsArtwork]);
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v3 exportContentItemArtworkUpdates:v20 forPlayerPath:*(void *)(a1 + 40)]);

  if ([v21 count])
  {
    id v22 = [[MRUpdateContentItemArtworkMessage alloc] initWithContentItems:v21 forPlayerPath:*(void *)(a1 + 40) encoding:v11];
    [v4 addMessage:v22];
  }

  id v23 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
  [v23 setPriority:4];
  [v4 setTransportOptions:v23];

  return v4;
}

void sub_1000B8054(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v5 = [v4 shouldLogPairingSetupCode];

  if (v5)
  {
    uint64_t v7 = _MRLogForCategory(3LL, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Remote Passcode: %@",  (uint8_t *)&buf,  0xCu);
    }
  }

  if ([v3 isPairingAllowed])
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v17 = 0x3032000000LL;
    uint64_t v18 = sub_1000B66EC;
    id v19 = sub_1000B66FC;
    id v20 = *(id *)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B820C;
    block[3] = &unk_100399CB8;
    p___int128 buf = &buf;
    int8x16_t v12 = *(int8x16_t *)(a1 + 32);
    id v10 = (id)v12.i64[0];
    int8x16_t v14 = vextq_s8(v12, v12, 8uLL);
    dispatch_async(&_dispatch_main_q, block);

    _Block_object_dispose(&buf, 8);
  }

  else
  {
    id Error = (void *)MRMediaRemoteCreateError(114LL);
    [*(id *)(a1 + 40) _notifyAndDisconnectClient:*(void *)(a1 + 48) withError:Error];
  }
}

void sub_1000B820C(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
    objc_msgSend(*(id *)(a1[4] + 64), "showWithPin:forClient:", a1[5]);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000B8490(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(*(void *)(a1 + 32) + 64) closeForClient:*(void *)(a1 + 40)];
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000B882C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 parentUID]);
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    if ([v4 supportGenericAudioGroup])
    {
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
      uint64_t v6 = (uint64_t)[v5 isAwareOfCluster:3];
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

id sub_1000B88BC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 exportOutputDevice:v4 endpoint:*(void *)(a1 + 40)]);

  return v6;
}

MRAVDistantOutputDevice *sub_1000B891C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(_BYTE *)(a1 + 32))
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 descriptor]);
    [v5 setIsVolumeControlAvailable:0];
    [v5 setHasIsVolumeControlAvailable:0];
    [v5 setVolumeCapabilities:0];
    [v5 setHasVolumeCapabilities:0];
    LODWORD(v6) = 0;
    [v5 setVolume:v6];
    [v5 setHasVolume:0];
    [v5 setVolumeMuted:0];
    [v5 setHasVolumeMuted:0];
    uint64_t v7 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v5);
  }

  else
  {
    uint64_t v7 = (MRAVDistantOutputDevice *)v3;
  }

  return v7;
}

id sub_1000B8AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___MRCompositeMessage);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:v3 endpoint:*(void *)(a1 + 48)]);
  if (v5)
  {
    id v6 = objc_alloc(&OBJC_CLASS___MRSyncOutputDevicesMessage);
    id v11 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
    id v8 = [v6 initWithOutputDevices:v7];

    [v4 addMessage:v8];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:v3 endpoint:*(void *)(a1 + 48)]);
    [*(id *)(a1 + 32) _addVolumeToMessage:v4 forClient:v3 outputDevice:v9 withEndpoint:*(void *)(a1 + 48)];
  }

  return v4;
}

id sub_1000B8CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
  unsigned int v5 = [v4 supportsOutputContextSync];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:v3 endpoint:*(void *)(a1 + 48)]);
    if (v6)
    {
      id v7 = objc_alloc(&OBJC_CLASS___MRSyncOutputDevicesMessage);
      id v11 = v6;
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
      id v9 = [v7 initWithOutputDevices:v8];
    }

    else
    {
      id v9 = 0LL;
    }
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

id sub_1000B8ED0(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:a2 endpoint:*(void *)(a1 + 48)]);
  id v3 = objc_alloc(&OBJC_CLASS___MRRemoveSyncedOutputDevicesMessage);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uid]);
  id v5 = [v3 initWithOutputDeviceUID:v4];

  return v5;
}

id sub_1000B9080(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)]);
  id v4 = objc_alloc(&OBJC_CLASS___MRVolumeControlCapabilitiesDidChangeMessage);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
  id v8 = [v4 initWithCapabilities:v5 endpointUID:v6 outputDeviceUID:v7];

  return v8;
}

id sub_1000B9260(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)]);
  id v4 = objc_alloc(&OBJC_CLASS___MRVolumeDidChangeMessage);
  int v5 = *(_DWORD *)(a1 + 56);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
  LODWORD(v_Block_object_dispose(va, 8) = v5;
  id v9 = [v4 initWithVolume:v6 endpointUID:v7 outputDeviceUID:v8];

  return v9;
}

id sub_1000B9438(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)]);
  id v4 = objc_alloc(&OBJC_CLASS___MRVolumeMutedDidChangeMessage);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
  id v7 = [v4 initWithMuted:v5 outputDeviceUID:v6];

  return v7;
}

void sub_1000B95EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000B9604(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v2)
  {
    id v3 = [[MRDeviceInfoUpdateMessage alloc] initWithDeviceInfo:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  }

  return v2;
}

id sub_1000B9808(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000B9900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000B9918(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingServer]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 originClientForOrigin:*(void *)(a1 + 32)]);

    [v5 timeSincePlaying];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v6));
    double v8 = (void *)objc_claimAutoreleasedReturnValue([v5 devicePlaybackSessionID]);
    id v9 = [[MROriginClientPropertiesMessage alloc] initWithLastPlayingDate:v7 devicePlaybackSessionID:v8];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  }

  return v2;
}

id sub_1000B9D68(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000B9F70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) allObjects]);
  [*(id *)(a1 + 32) setConnectedExternalDevices:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) allObjects]);
  [*(id *)(a1 + 32) setTelevisionEndpoints:v3];

  uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 40) + 128) count]);
  uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 128LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000BA0BC;
  void v9[3] = &unk_10039EB90;
  uint64_t v10 = v4;
  double v8 = v4;
  [v5 enumerateKeysAndObjectsUsingBlock:v9];
  [*(id *)(a1 + 32) setDiscoverySessions:v8];
  [*(id *)(a1 + 32) setRemoteControlService:*(void *)(*(void *)(a1 + 40) + 160)];
  double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 56) debugDescription]);
  [*(id *)(a1 + 32) setBatchedNowPlayingState:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 136), "mr_formattedDebugDescription"));
  [*(id *)(a1 + 32) setRemoteASEState:v7];
}

void sub_1000BA0BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc(&OBJC_CLASS___NSString);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v6 description]);

  id v8 = [v5 discoveryMode];
  uint64_t v10 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription(v8, v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 availableOutputDevices]);

  int8x16_t v12 = -[NSString initWithFormat:](v7, "initWithFormat:", @"%@ -> %@\n%@", v13, v10, v11);
  [v4 addObject:v12];
}

id sub_1000BA2F4(uint64_t a1)
{
  return _[*(id *)(a1 + 40) setServerDelegate:*(void *)(a1 + 32)];
}

void sub_1000BA7F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1000BA834(void *a1)
{
  *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [*(id *)(a1[4] + 8) containsObject:a1[5]];
  if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    [*(id *)(a1[4] + 8) removeObject:a1[5]];
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 168) objectForKey:a1[5]]);
    uint64_t v3 = *(void *)(a1[7] + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

void sub_1000BA8B0(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = mach_absolute_time();
  KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent(kCFAllocatorDefault, v7, a2, v6, a3 & 1, 0LL);
  [*(id *)(*(void *)(a1 + 32) + 72) dispatchHIDEvent:KeyboardEvent];
  CFRelease(KeyboardEvent);
}

void sub_1000BA92C(id a1, _MRLyricsEventProtobuf *a2)
{
  uint64_t v2 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t StartDate = MRLyricsEventGetStartDate(v2);
  uint64_t Token = MRLyricsEventGetToken(v2);

  End = (void *)MRLyricsEventCreateEnd(StartDate, v7, Token);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  MRMediaRemoteRemoteSendLyricsEvent(v6, 0LL, End);
}

void sub_1000BA9D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc(&OBJC_CLASS___NSError);
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
  uint64_t v9 = -[NSError initWithMRError:format:]( v7,  "initWithMRError:format:",  25LL,  @"Connection %@ exited in the middle of a migration",  v8);
  MRMediaRemoteSendPlaybackSessionMigrateEnd(v6, v9, v5, 0LL, 0LL);
}

BOOL sub_1000BAC38(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 cryptoSession]);
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

id sub_1000BACF8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceInfo]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

void sub_1000BB5D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000BB5F8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v3 = *(void *)(a1 + 40);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
    LODWORD(v3) = [WeakRetained _connection:v3 canReceiveUpdatesForOrigin:v4];

    id v5 = WeakRetained;
    if ((_DWORD)v3)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      if (v7) {
        [*(id *)(a1 + 40) sendMessage:v7];
      }

      id v5 = WeakRetained;
    }
  }

id sub_1000BB764(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) parentUID]);
  if (!v4) {
    goto LABEL_4;
  }
  id v5 = (void *)v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  if (([v6 supportGenericAudioGroup] & 1) == 0)
  {

    goto LABEL_6;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
  unsigned int v8 = [v7 isAwareOfCluster:3];

  if (!v8)
  {
LABEL_6:
    id v10 = 0LL;
    goto LABEL_7;
  }

LABEL_4:
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
LABEL_7:

  return v10;
}

  uint64_t v25 = _MRNowPlayingPlaybackQueueChangedNotification;
  uint64_t v26 = v22;
  if (v11)
  {
    v11[2](v11, _MRNowPlayingPlaybackQueueChangedNotification, v12);
    id v27 = v30;
  }

  else
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1000D9608;
    v31[3] = &unk_10039FD00;
    id v32 = v16;
    id v27 = v30;
    __int16 v33 = v30;
    -[MRDNowPlayingServer postClientNowPlayingNotificationNamed:userInfo:predicate:]( v29,  "postClientNowPlayingNotificationNamed:userInfo:predicate:",  v25,  v13,  v31);
    -[MRDNowPlayingServer postClientNowPlayingNotificationNamed:userInfo:predicate:]( v29,  "postClientNowPlayingNotificationNamed:userInfo:predicate:",  v25,  v12,  &stru_10039FD20);
  }
}

    id v11 = (void *)((char *)v11 + v12);
    --v10;
  }

  while (v10);
  uint64_t v17 = 0LL;
LABEL_16:
  swift_bridgeObjectRelease();
  return v17;
}

    id v11 = (void *)((char *)v11 + v12);
    --v10;
  }

  while (v10);
  uint64_t v17 = 0LL;
LABEL_16:
  swift_bridgeObjectRelease();
  return v17;
}

    id v13 = (void *)((char *)v13 + v14);
    --v12;
  }

  while (v12);
  __int16 v21 = 0LL;
LABEL_17:
  swift_bridgeObjectRelease();
  return v21;
}

      id result = (unint64_t *)swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    id result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_15:
    id v23 = v32[v17];
    v32[v17] = v23 & ~v18;
    if ((v18 & v23) != 0)
    {
      uint64_t v24 = v33 - 1;
      if (__OFSUB__(v33, 1LL)) {
        goto LABEL_30;
      }
      --v33;
      if (!v24) {
        return (unint64_t *)&_swiftEmptySetSingleton;
      }
    }

    id v7 = (uint64_t *)((char *)v7 + v8);
    --v6;
  }

  while (v6);
  uint64_t v17 = 0LL;
LABEL_16:
  swift_bridgeObjectRelease();
  return v17;
}

    id v7 = (uint64_t *)((char *)v7 + v8);
    --v6;
  }

  while (v6);
  uint64_t v17 = 0LL;
LABEL_16:
  swift_bridgeObjectRelease();
  return v17;
}

        uint64_t v16 = type metadata accessor for JSONDecoder(0LL);
        swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
        uint64_t v2 = JSONDecoder.init()();
        uint64_t v17 = type metadata accessor for RouteRecommendationContext();
        uint64_t v18 = sub_1002A869C( &qword_1003FD848,  type metadata accessor for RouteRecommendationContext,  (uint64_t)&unk_100351418);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v31, v17, v13, v15, v17, v18);
LABEL_10:
        sub_1001608B8(v13, v15);
        swift_release(v2);
        return v31;
      }
    }

    uint64_t v26 = objc_opt_self(&OBJC_CLASS___NSData);
    id result = swift_dynamicCastObjCClass(a1, v26);
    if (result)
    {
      __int16 v31 = xmmword_10034F3A0;
      static Data._conditionallyBridgeFromObjectiveC(_:result:)(result, &v31);
      id v15 = *((void *)&v31 + 1);
      if (*((void *)&v31 + 1) >> 60 == 15LL) {
        return 0LL;
      }
      id v13 = v31;
      goto LABEL_4;
    }
  }

  return result;
}

void sub_1000BBEE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000BBF10(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000BC0CC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000BC41C(id *a1)
{
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_1000BC7A8;
  v38[3] = &unk_10039ECD0;
  id v39 = a1[4];
  id v2 = objc_retainBlock(v38);
  id v3 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
  [v3 setPriority:5];
  id v27 = v3;
  [v3 setWaking:1];
  uint64_t v4 = dispatch_group_create();
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v5 = a1[5];
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v41 count:16];
  BOOL v7 = v6 != 0LL;
  if (!v6) {
    goto LABEL_12;
  }
  id v8 = v6;
  BOOL v26 = v6 != 0LL;
  char v9 = 0;
  uint64_t v10 = *(void *)v35;
  do
  {
    for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v35 != v10) {
        objc_enumerationMutation(v5);
      }
      int8x16_t v12 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
      if (((unsigned int (*)(void *, void *))v2[2])(v2, v12))
      {
        id v13 = [[MRSetConnectionStateMessage alloc] initWithConnectionState:3];
        [v13 setTransportOptions:v27];
        [v13 setError:a1[4]];
        dispatch_group_enter(v4);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_1000BC87C;
        v32[3] = &unk_10039C568;
        __int16 v33 = v4;
        [v12 sendMessage:v13 reply:v32];

        char v9 = 1;
      }
    }

    id v8 = [v5 countByEnumeratingWithState:&v34 objects:v41 count:16];
  }

  while (v8);

  if ((v9 & 1) != 0)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v5 externalDeviceDisconnectWaitDuration];
    dispatch_time_t v15 = dispatch_time(0LL, (uint64_t)(v14 * 1000000000.0));
    dispatch_group_wait(v4, v15);
    BOOL v7 = v26;
LABEL_12:

    goto LABEL_14;
  }

  BOOL v7 = 0;
LABEL_14:
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v16 = a1[5];
  id v17 = [v16 countByEnumeratingWithState:&v28 objects:v40 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v29;
    do
    {
      for (uint64_t j = 0LL; j != v18; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v29 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)j);
      }

      id v18 = [v16 countByEnumeratingWithState:&v28 objects:v40 count:16];
    }

    while (v18);
  }

  id v22 = (void (**)(void))a1[7];
  if (v7)
  {
    if (v22)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      [v23 externalDeviceDisconnectSleepDuration];
      dispatch_time_t v25 = dispatch_time(0LL, (uint64_t)(v24 * 1000000000.0));
      dispatch_after(v25, &_dispatch_main_q, a1[7]);
    }
  }

  else if (v22)
  {
    v22[2]();
  }
}

BOOL sub_1000BC7A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) code] == (id)115)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleVersion]);
    else {
      BOOL v7 = 0;
    }
    BOOL v8 = (v7 | [v5 isEqualToString:@"com.apple.tvremotecore.xpc"]) != 0;
  }

  else
  {
    BOOL v8 = 1LL;
  }

  return v8;
}

void sub_1000BC87C(uint64_t a1)
{
}

void sub_1000BC9FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000BCA1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = _MRLogForCategory(3LL, v5);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138543362;
    id v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...",  (uint8_t *)&v17,  0xCu);
  }

  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v3 info]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kMRMediaRemoteTelevisionPairingExtendedInfoKey]);

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:kMRMediaRemoteTelevisionPairingExtendedInfoIdentifierKey]);
  if (v11)
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained _clientForIdentifier:v11]);
    if (v13)
    {
      id Error = (os_log_s *)MRMediaRemoteCreateError(110LL);
      [WeakRetained _notifyAndDisconnectClient:v13 withError:Error];
    }

    else
    {
      uint64_t v16 = _MRLogForCategory(3LL, v12);
      id Error = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(Error, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  Error,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] No active connection to disconnect",  (uint8_t *)&v17,  2u);
      }
    }
  }

  else
  {
    uint64_t v15 = _MRLogForCategory(3LL, v10);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing",  (uint8_t *)&v17,  2u);
    }
  }
}

void sub_1000BD07C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000BD0B0(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained outputDevicesChanged:v4 forConfiguration:*(void *)(a1 + 32)];
}

void sub_1000BD184( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_1000BD198(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend( v2,  "setServerDiscoveryMode:forConfiguration:",  objc_msgSend(v2, "serverDiscoveryModeForConfiguration:", v3),  v3);
}

void sub_1000BD48C(uint64_t a1, void *a2)
{
  id v15 = *(id *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  if (([v4 features] & 8) != 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 routingServer]);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 hostedRoutingService]);
    char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 hostedRoutingController]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 discoverySession]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 unclusteredOutputDevices]);

    id v15 = (id)v11;
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) connection]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 exportOutputDevices:v15 endpoint:v5]);

  id v14 = [[MRDiscoveryUpdateOutputDevicesMessage alloc] initWithOutputDevices:v13 configuration:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) sendMessage:v14];
}

void sub_1000BD8C0(uint64_t a1)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v15 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v15)
  {
    uint64_t v13 = *(void *)v21;
    do
    {
      uint64_t v1 = 0LL;
      do
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(obj);
        }
        id v2 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v1);
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        id v3 = *(id *)(*(void *)(a1 + 40) + 8LL);
        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v4)
        {
          id v5 = v4;
          uint64_t v6 = *(void *)v17;
          do
          {
            BOOL v7 = 0LL;
            do
            {
              if (*(void *)v17 != v6) {
                objc_enumerationMutation(v3);
              }
              char v9 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
              uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
              unsigned int v11 = [v9 isEqualToString:v10];

              if (v11) {
                [v2 setConnected:1];
              }

              BOOL v7 = (char *)v7 + 1;
            }

            while (v5 != v7);
            id v5 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }

          while (v5);
        }

        uint64_t v1 = (char *)v1 + 1;
      }

      while (v1 != v15);
      id v15 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }

    while (v15);
  }
}

id sub_1000BDCC4(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = _MRLogForCategory(3LL, a2);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 138543362;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Adding television endpoint %{public}@",  (uint8_t *)&v10,  0xCu);
    }

    return [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
  }

  else
  {
    if (v6)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Removing television endpoint %{public}@",  (uint8_t *)&v10,  0xCu);
    }

    return [*(id *)(*(void *)(a1 + 40) + 16) removeObject:*(void *)(a1 + 32)];
  }

id sub_1000BDEFC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000BDF80(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
  [v6 setPriority:5];
  [v6 setWaking:1];
  if (v15)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 nowPlayingServer]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v15 origin]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 originClientForOrigin:v9]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceInfo]);

    id v12 = [[MRDeviceInfoMessage alloc] initWithDeviceInfo:v11];
  }

  else if (v5)
  {
    id v12 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v5];
  }

  else
  {
    id v12 = 0LL;
  }

  [v12 setTransportOptions:v6];
  [*(id *)(a1 + 32) replyWithMessage:v12];
  uint64_t v13 = *(void **)(a1 + 40);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  [v13 _handleRemoteDeviceInfo:v14];
}

void sub_1000BE1A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
  id v6 = [v5 mutableCopy];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID]);
  [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:kMRMediaRemoteOptionOriginatedFromRemoteDevice];
  id v32 = _NSConcreteStackBlock;
  uint64_t v33 = 3221225472LL;
  __int128 v34 = sub_1000BE50C;
  __int128 v35 = &unk_1003999E8;
  id v8 = v7;
  id v36 = v8;
  id v37 = *(id *)(a1 + 32);
  uint64_t v9 = objc_retainBlock(&v32);
  if ((objc_msgSend(*(id *)(a1 + 40), "hasAccessToPlayerPath:", v3, v32, v33, v34, v35) & 1) == 0)
  {
    uint64_t v24 = _MRLogForCategory(3LL, v10);
    dispatch_time_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_1002B8014();
    }

    BOOL v26 = @"Client not authorized to send command to playerPath";
    goto LABEL_11;
  }

  if ((objc_msgSend( *(id *)(a1 + 40),  "isAllowedToSendCommand:",  objc_msgSend(*(id *)(a1 + 32), "command")) & 1) == 0)
  {
    uint64_t v27 = _MRLogForCategory(3LL, v11);
    __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1002B7F88(v4, v28);
    }

    BOOL v26 = @"Client not authorized to send command type";
LABEL_11:
    __int128 v16 = (MRPlayerPath *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:description:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:description:",  3LL,  v26));
    ((void (*)(void ***, MRPlayerPath *))v9[2])(v9, v16);
    goto LABEL_12;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:kMRMediaRemoteOptionPrepareForSetQueueIsProactive]);
  unsigned int v13 = [v12 BOOLValue];

  if (v13)
  {
    id v14 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
    __int128 v16 = -[MRPlayerPath initWithOrigin:bundleIdentifier:player:]( v14,  "initWithOrigin:bundleIdentifier:player:",  v15,  kMRMediaRemoteSystemMediaApplicationDisplayIdentifier,  0LL);

    id v17 = [*v4 command];
    id v18 = [*v4 appOptions];
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    MRMediaRemoteSendCommandToPlayerWithResult(v17, v6, v16, v18, v20, v9);

    __int128 v21 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
    __int128 v23 = -[MRPlayerPath initWithOrigin:bundleIdentifier:player:]( v21,  "initWithOrigin:bundleIdentifier:player:",  v22,  kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier,  0LL);

    MRMediaRemoteSendCommandToPlayerWithResult( [*v4 command],  v6,  v23,  objc_msgSend(*v4, "appOptions"),  v20,  v9);
  }

  else
  {
    id v29 = [*v4 command];
    id v30 = [*v4 appOptions];
    dispatch_queue_global_t v31 = dispatch_get_global_queue(0LL, 0LL);
    __int128 v16 = (MRPlayerPath *)objc_claimAutoreleasedReturnValue(v31);
    MRMediaRemoteSendCommandToPlayerWithResult(v29, v6, v3, v30, v16, v9);
  }

void sub_1000BE50C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
  [v5 setPriority:5];
  id v4 = [[MRSendCommandResultMessage alloc] initWithCommandID:*(void *)(a1 + 32) commandResult:v3];

  [v4 setTransportOptions:v5];
  [*(id *)(a1 + 40) replyWithMessage:v4];
}

void sub_1000BEBD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
  [v7 setPriority:5];
  [v7 setWaking:1];
  if (v6)
  {
    id v8 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v6];
    [v8 setTransportOptions:v7];
    [*(id *)(a1 + 32) replyWithMessage:v8];
  }

  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setRegisteredKeyboardUpdates:", objc_msgSend(*(id *)(a1 + 32), "keyboardUpdates"));
    objc_msgSend( *(id *)(a1 + 40),  "setRegisteredToOutputDeviceUpdates:",  objc_msgSend(*(id *)(a1 + 32), "outputDeviceUpdates"));
    objc_msgSend( *(id *)(a1 + 40),  "setRegisteredToSystemEndpointUpdates:",  objc_msgSend(*(id *)(a1 + 32), "systemEndpointUpdates"));
    objc_msgSend( *(id *)(a1 + 40),  "setRegisteredToNowPlayingUpdates:",  objc_msgSend(*(id *)(a1 + 32), "nowPlayingUpdates"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscribedPlayerPaths]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000BEED4;
    v25[3] = &unk_10039EE10;
    id v8 = v9;
    id v26 = v8;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mr_map:", v25));
    [*(id *)(a1 + 40) setSubscribedPlayerPaths:v11];

    id v12 = objc_alloc_init(&OBJC_CLASS___MRCompositeMessage);
    [v12 setTransportOptions:v7];
    unsigned int v13 = dispatch_group_create();
    if (!*(_BYTE *)(a1 + 64) && [*(id *)(a1 + 32) outputDeviceUpdates]) {
      [*(id *)(a1 + 48) _addOutputDevicesToMessage:v12 forClient:*(void *)(a1 + 40) withEndpoint:v5];
    }
    if (!*(_BYTE *)(a1 + 65) && [*(id *)(a1 + 32) volumeUpdates])
    {
      dispatch_group_enter(v13);
      uint64_t v15 = *(void *)(a1 + 40);
      id v14 = *(void **)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_1000BEF88;
      v23[3] = &unk_100399250;
      uint64_t v24 = v13;
      [v14 _addVolumeToMessage:v12 forClient:v15 withEndpoint:v5 completion:v23];
    }

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subscribedPlayerPaths]);
    id v17 = v16;
    else {
      unsigned int v18 = objc_msgSend(v16, "isEqual:") ^ 1;
    }

    if (!*(_BYTE *)(a1 + 66) || v18)
    {
      if ([*(id *)(a1 + 32) nowPlayingUpdates]) {
        [*(id *)(a1 + 48) _addNowPlayingStateToMessage:v12 forClient:*(void *)(a1 + 40) withEndpoint:v5];
      }
    }

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000BEF90;
    v20[3] = &unk_100398E60;
    id v21 = *(id *)(a1 + 32);
    id v22 = v12;
    id v19 = v12;
    dispatch_group_notify(v13, &_dispatch_main_q, v20);
  }
}

MRPlayerPath *sub_1000BEED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
  if ([v4 isLocal])
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 player]);
    uint64_t v9 = -[MRPlayerPath initWithOrigin:client:player:](v5, "initWithOrigin:client:player:", v6, v7, v8);
  }

  else
  {
    uint64_t v9 = (MRPlayerPath *)v3;
  }

  return v9;
}

void sub_1000BEF88(uint64_t a1)
{
}

id sub_1000BEF90(uint64_t a1)
{
  return [*(id *)(a1 + 32) replyWithMessage:*(void *)(a1 + 40)];
}

void sub_1000BF590(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = objc_alloc(&OBJC_CLASS___MRVolumeControlCapabilitiesDidChangeMessage);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
    id v8 = [v5 initWithCapabilities:a2 endpointUID:v6 outputDeviceUID:v7];
    [v4 addMessage:v8];

    uint64_t v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1000BF73C;
    v19[3] = &unk_10039EE60;
    int v21 = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    [v9 _addToMessage:v11 withAllClusterDeviceMembers:v10 block:v19];
    if ((_DWORD)a2 == 2)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
      id v12 = *(void **)(a1 + 72);
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uid]);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_1000BF7CC;
      v14[3] = &unk_10039EE88;
      id v15 = *(id *)(a1 + 32);
      id v16 = *(id *)(a1 + 40);
      __int128 v17 = *(_OWORD *)(a1 + 48);
      id v18 = *(id *)(a1 + 64);
      [v12 outputDeviceVolume:v13 queue:&_dispatch_main_q completion:v14];
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1000BF73C(uint64_t a1, void *a2, int a3)
{
  if (a3 == 13)
  {
    id v3 = 0LL;
  }

  else
  {
    id v5 = a2;
    id v6 = objc_alloc(&OBJC_CLASS___MRVolumeControlCapabilitiesDidChangeMessage);
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupID]);
    id v3 = [v6 initWithCapabilities:v7 endpointUID:v8 outputDeviceUID:v5];
  }

  return v3;
}

void sub_1000BF7CC(uint64_t a1, float a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = objc_alloc(&OBJC_CLASS___MRVolumeDidChangeMessage);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
  *(float *)&double v8 = a2;
  id v9 = [v5 initWithVolume:v6 endpointUID:v7 outputDeviceUID:v8];
  [v4 addMessage:v9];

  uint64_t v10 = *(void **)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000BF8D4;
  v13[3] = &unk_10039EE60;
  float v15 = a2;
  uint64_t v12 = *(void *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  [v10 _addToMessage:v12 withAllClusterDeviceMembers:v11 block:v13];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1000BF8D4(uint64_t a1, void *a2, int a3)
{
  if (a3 == 13)
  {
    id v3 = 0LL;
  }

  else
  {
    id v5 = a2;
    id v6 = objc_alloc(&OBJC_CLASS___MRVolumeDidChangeMessage);
    int v7 = *(_DWORD *)(a1 + 40);
    double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupID]);
    LODWORD(v9) = v7;
    id v3 = [v6 initWithVolume:v8 endpointUID:v5 outputDeviceUID:v9];
  }

  return v3;
}

uint64_t sub_1000BF964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C04D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v12 = -[MRClient initWithBundleIdentifier:](objc_alloc(&OBJC_CLASS___MRClient), "initWithBundleIdentifier:", v6);

  int v7 = -[MRPlayerPath initWithOrigin:client:player:]( objc_alloc(&OBJC_CLASS___MRPlayerPath),  "initWithOrigin:client:player:",  0LL,  v12,  0LL);
  double v8 = *(void **)(a1 + 32);
  id v9 = objc_alloc(&OBJC_CLASS___MRSetDefaultSupportedCommandsMessage);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceInfo]);
  id v11 = objc_msgSend( v9,  "initWithDefaultSupportedCommands:forPlayerPath:encoding:",  v5,  v7,  objc_msgSend(v10, "preferredEncoding"));

  [v8 addMessage:v11];
}

void sub_1000C1170(uint64_t a1, uint64_t a2, __CFError *a3)
{
  uint64_t v6 = _MRLogForCategory(3LL, a2);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v8)
    {
      int v12 = 138543362;
      unsigned int v13 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@",  (uint8_t *)&v12,  0xCu);
    }

    CFIndex Code = CFErrorGetCode(a3);
  }

  else
  {
    if (v8)
    {
      int v12 = 67109120;
      LODWORD(v13) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u",  (uint8_t *)&v12,  8u);
    }

    [*(id *)(a1 + 32) addRegisteredVirtualVoiceInputDevice:a2];
    CFIndex Code = 0LL;
  }

  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = [[MRRegisterVoiceInputDeviceResponseMessage alloc] initWithDeviceID:a2 errorCode:Code];
  [v10 replyWithMessage:v11];
}

void sub_1000C1428(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resolveExistingPlayerPath:v3]);

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playbackQueueRequests]);
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 subscriptionControllerForPlayerPath:v6]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
  [v8 addRequest:v9];

  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
  id v11 = &_dispatch_main_q;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000C15DC;
  v13[3] = &unk_10039EF28;
  objc_copyWeak(&v16, &location);
  id v12 = v6;
  id v14 = v12;
  id v15 = *(id *)(a1 + 40);
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(v10, v12, &_dispatch_main_q, v13);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void sub_1000C15B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000C15DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v16 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    if (a3)
    {
      id v7 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:a3];
    }

    else
    {
      BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained playbackQueueRequests]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 subscriptionControllerForPlayerPath:*(void *)(a1 + 32)]);

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
      [v9 subscribeToPlaybackQueue:v16 forRequest:v10];

      id v11 = -[MRNowPlayingState initWithPlayerPath:]( objc_alloc(&OBJC_CLASS___MRNowPlayingState),  "initWithPlayerPath:",  *(void *)(a1 + 32));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
      -[MRNowPlayingState setRequest:](v11, "setRequest:", v12);

      -[MRNowPlayingState setPlaybackQueue:](v11, "setPlaybackQueue:", v16);
      id v13 = objc_alloc(&OBJC_CLASS___MRSetStateMessage);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceInfo]);
      id v7 = objc_msgSend(v13, "initWithNowPlayingState:encoding:", v11, objc_msgSend(v14, "preferredEncoding"));
    }

    id v15 = objc_alloc_init(&OBJC_CLASS___MRProtocolMessageOptions);
    [v15 setPriority:5];
    [v15 setWaking:1];
    [v7 setTransportOptions:v15];
    [*(id *)(a1 + 40) replyWithMessage:v7];
  }
}

id sub_1000C1B44(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000C1F68(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 event]);
  uint64_t EndDate = MRLyricsEventGetEndDate();
  MRMediaRemoteRemoteSendLyricsEvent(v4, 0LL, v7);

  uint64_t v6 = *(void **)(a1 + 40);
  if (EndDate) {
    [v6 removeLyricsEvent:v7];
  }
  else {
    [v6 addLyricsEvent:v7];
  }
}

void sub_1000C2134(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[MRPromptForRouteAuthorizationMessage alloc] initWithRoute:*(void *)(a1 + 32) inputType:a2];
  id v7 = *(void **)(a1 + 40);
  double v8 = MRExternalDeviceAuthenticatedConnectionTimeout;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C21FC;
  v10[3] = &unk_10039D9A8;
  id v11 = v5;
  id v9 = v5;
  [v7 sendMessage:v6 timeout:v10 reply:v8];
}

void sub_1000C21FC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 error]);

  if (v3) {
    id v4 = 0LL;
  }
  else {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 response]);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C2394(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVClusterController sharedController](&OBJC_CLASS___MRAVClusterController, "sharedController"));
    [v4 getClusterStatus:&stru_10039EFB8];
  }

  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_1000C27A4;
  v48[3] = &unk_100399508;
  id v49 = *(id *)(a1 + 32);
  uint64_t v33 = objc_retainBlock(v48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addingOutputDeviceUIDs]);
  id v6 = (char *)[v5 count];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removingOutputDeviceUIDs]);
  double v8 = &v6[(void)[v7 count]];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) settingOutputDeviceUIDs]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  (char *)[v9 count] + (void)v8));

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addingOutputDeviceUIDs]);
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addingOutputDeviceUIDs]);
    [v10 addObjectsFromArray:v12];
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removingOutputDeviceUIDs]);

  if (v13)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removingOutputDeviceUIDs]);
    [v10 addObjectsFromArray:v14];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) settingOutputDeviceUIDs]);

  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) settingOutputDeviceUIDs]);
    [v10 addObjectsFromArray:v16];
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[MRDeviceInfoRequest deviceInfoForOrigin:]( &OBJC_CLASS___MRDeviceInfoRequest,  "deviceInfoForOrigin:",  v17));

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 WHAIdentifier]);
  unsigned __int8 v20 = [v10 containsObject:v19];
  unsigned __int8 v21 = [v3 isProxyGroupPlayer];
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDevices]);
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v22));

  id v24 = [[MRAVReconnaissanceSession alloc] initWithOutputDeviceUIDs:v10 outputDeviceGroupID:0 features:1];
  [v24 setReturnPartialResults:1];
  objc_initWeak(&location, v24);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  v34[2] = sub_1000C280C;
  v34[3] = &unk_10039F080;
  id v35 = *(id *)(a1 + 32);
  id v25 = v19;
  id v36 = v25;
  unsigned __int8 v45 = v21;
  id v26 = v10;
  id v37 = v26;
  unsigned __int8 v46 = v20;
  id v27 = v23;
  id v38 = v27;
  id v28 = v3;
  uint64_t v29 = *(void *)(a1 + 40);
  id v30 = *(void **)(a1 + 48);
  id v39 = v28;
  uint64_t v40 = v29;
  id v41 = v30;
  dispatch_queue_global_t v31 = v33;
  id v43 = v31;
  objc_copyWeak(&v44, &location);
  id v32 = v24;
  id v42 = v32;
  [v32 beginSearchWithTimeout:v34 mapCompletion:2.0];
  [*(id *)(*(void *)(a1 + 40) + 24) addObject:v32];

  objc_destroyWeak(&v44);
  objc_destroyWeak(&location);
}

void sub_1000C2764( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location)
{
}

void sub_1000C2784(id a1, unint64_t a2)
{
  if (a2 != 1) {
    sub_10013D8E8(1, 0, @"ModifyOutputContext");
  }
}

void sub_1000C27A4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000C280C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v54 = a3;
  id v55 = a4;
  id v10 = a5;
  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v95 = 0LL;
  id v96 = &v95;
  uint64_t v97 = 0x2020000000LL;
  char v98 = 0;
  v87[0] = _NSConcreteStackBlock;
  v87[1] = 3221225472LL;
  v87[2] = sub_1000C3010;
  v87[3] = &unk_10039EFE0;
  id v88 = *(id *)(a1 + 32);
  id v14 = v11;
  v89 = v14;
  id v15 = *(id *)(a1 + 40);
  char v94 = *(_BYTE *)(a1 + 112);
  id v90 = v15;
  v93 = &v95;
  id v16 = v12;
  unsigned __int8 v91 = v16;
  __int128 v56 = v13;
  id v92 = v56;
  [v9 enumerateKeysAndObjectsUsingBlock:v87];
  if (!v10)
  {
LABEL_10:
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v101 = 0x3032000000LL;
    v102 = sub_1000B66EC;
    v103 = sub_1000B66FC;
    id v104 = 0LL;
    v85[0] = 0LL;
    v85[1] = v85;
    v85[2] = 0x3032000000LL;
    v85[3] = sub_1000B66EC;
    v85[4] = sub_1000B66FC;
    id v86 = 0LL;
    v83[0] = 0LL;
    v83[1] = v83;
    v83[2] = 0x3032000000LL;
    v83[3] = sub_1000B66EC;
    v83[4] = sub_1000B66FC;
    id v84 = 0LL;
    group = dispatch_group_create();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    queue = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    if (-[NSMutableSet count](v14, "count") || -[NSMutableSet count](v16, "count"))
    {
      if (-[NSMutableSet count](v14, "count"))
      {
        __int128 v78 = 0u;
        __int128 v79 = 0u;
        __int128 v76 = 0u;
        __int128 v77 = 0u;
        __int128 v23 = v14;
        id v24 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v23,  "countByEnumeratingWithState:objects:count:",  &v76,  v99,  16LL);
        if (v24)
        {
          uint64_t v25 = *(void *)v77;
          do
          {
            for (uint64_t i = 0LL; i != v24; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v77 != v25) {
                objc_enumerationMutation(v23);
              }
              [*(id *)(a1 + 72) addAuthorizationCallbackForOutputDevice:*(void *)(*((void *)&v76 + 1) + 8 * (void)i) client:*(void *)(a1 + 80)];
            }

            id v24 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v23,  "countByEnumeratingWithState:objects:count:",  &v76,  v99,  16LL);
          }

          while (v24);
        }

        dispatch_group_enter(group);
        unsigned __int8 v27 = -[NSMutableSet isSubsetOfSet:](v23, "isSubsetOfSet:", *(void *)(a1 + 56));
        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replyIdentifier]);
        uint64_t v29 = v28;
        if (v28)
        {
          id v30 = v28;
        }

        else
        {
          id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          id v30 = (id)objc_claimAutoreleasedReturnValue([v32 UUIDString]);
        }

        uint64_t v33 = *(void **)(a1 + 64);
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v23, "allObjects"));
        char v31 = v27 ^ 1;
        v67[0] = _NSConcreteStackBlock;
        v67[1] = 3221225472LL;
        v67[2] = sub_1000C327C;
        v67[3] = &unk_10039F030;
        char v74 = *(_BYTE *)(a1 + 112);
        __int16 v72 = &v95;
        p___int128 buf = &buf;
        char v75 = v27 ^ 1;
        id v68 = v23;
        id v35 = *(id *)(a1 + 80);
        uint64_t v36 = *(void *)(a1 + 72);
        id v69 = v35;
        uint64_t v70 = v36;
        __int16 v71 = group;
        [v33 addOutputDevices:v34 initiator:v30 withReplyQueue:queue completion:v67];
      }

      else
      {
        char v31 = 0;
      }

      if (!-[NSMutableSet count](v16, "count")) {
        goto LABEL_35;
      }
      dispatch_group_enter(group);
      unsigned __int8 v37 = -[NSMutableSet intersectsSet:](v16, "intersectsSet:", *(void *)(a1 + 56));
      id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replyIdentifier]);
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }

      else
      {
        id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        id v40 = (id)objc_claimAutoreleasedReturnValue([v41 UUIDString]);
      }

      id v42 = *(void **)(a1 + 64);
      id v43 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v16, "allObjects"));
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472LL;
      v64[2] = sub_1000C34D4;
      v64[3] = &unk_10039F008;
      char v65 = *(_BYTE *)(a1 + 112);
      v64[5] = &v95;
      v64[6] = v85;
      char v66 = v37 | v31;
      id v44 = v64;
      v64[4] = group;
      [v42 removeOutputDevices:v43 initiator:v40 withReplyQueue:queue completion:v64];
    }

    else
    {
      dispatch_group_enter(group);
      unsigned __int8 v45 = -[NSMutableSet isEqualToSet:](v56, "isEqualToSet:", *(void *)(a1 + 56));
      unsigned __int8 v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replyIdentifier]);
      __int128 v47 = v46;
      if (v46)
      {
        id v40 = v46;
      }

      else
      {
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        id v40 = (id)objc_claimAutoreleasedReturnValue([v48 UUIDString]);
      }

      id v49 = *(void **)(a1 + 64);
      id v43 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v56, "allObjects"));
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472LL;
      v80[2] = sub_1000C3140;
      v80[3] = &unk_10039F008;
      char v81 = *(_BYTE *)(a1 + 112);
      v80[5] = &v95;
      v80[6] = v83;
      char v82 = v45 ^ 1;
      id v44 = v80;
      v80[4] = group;
      [v49 setOutputDevices:v43 initiator:v40 withReplyQueue:queue completion:v80];
    }

LABEL_35:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C3608;
    block[3] = &unk_10039F058;
    id v60 = &buf;
    id v59 = *(id *)(a1 + 96);
    uint64_t v61 = v85;
    id v62 = v83;
    objc_copyWeak(&v63, (id *)(a1 + 104));
    void block[4] = *(void *)(a1 + 72);
    dispatch_group_notify(group, queue, block);
    objc_destroyWeak(&v63);

    _Block_object_dispose(v83, 8);
    _Block_object_dispose(v85, 8);

    _Block_object_dispose(&buf, 8);
    id v10 = 0LL;
    goto LABEL_36;
  }

  if ([v9 count])
  {
    id v18 = [v9 count];
    if (v18 == (char *)[*(id *)(a1 + 48) count] - 1 && *(_BYTE *)(a1 + 113) && !*((_BYTE *)v96 + 24))
    {

      goto LABEL_10;
    }
  }

  uint64_t v19 = _MRLogForCategory(3LL, v17);
  unsigned __int8 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
    sub_1002B80A0();
  }

  (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
LABEL_36:
  uint64_t v50 = _MRLogForCategory(3LL, v21);
  id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v52 = *(void *)(a1 + 88);
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Completed recon session: %{public}@",  (uint8_t *)&buf,  0xCu);
  }

  _Block_object_dispose(&v95, 8);
}

void sub_1000C2FA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_1000C3010(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addingOutputDeviceUIDs]);
  unsigned int v7 = [v6 containsObject:v12];

  if (v7)
  {
    [*(id *)(a1 + 40) addObject:v5];
LABEL_11:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
    goto LABEL_12;
  }

  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removingOutputDeviceUIDs]);
  unsigned int v9 = [v8 containsObject:v12];

  if (v9)
  {
    [*(id *)(a1 + 56) addObject:v5];
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) settingOutputDeviceUIDs]);
    unsigned int v11 = [v10 containsObject:v12];

    if (v11)
    {
      [*(id *)(a1 + 64) addObject:v5];
    }
  }

void sub_1000C3140(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(3LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 56);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    v15[0] = 67109376;
    v15[1] = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u",  (uint8_t *)v15,  0xEu);
  }

  if (v3)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = v3;
    unsigned int v11 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
LABEL_9:

    goto LABEL_10;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v12 = 200LL;
    }

    else
    {
      if (*(_BYTE *)(a1 + 57)) {
        goto LABEL_10;
      }
      uint64_t v12 = 202LL;
    }

    uint64_t Error = MRMediaRemoteCreateError(v12);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
    unsigned int v11 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = Error;
    goto LABEL_9;
  }

void sub_1000C327C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v6 = _MRLogForCategory(3LL, v5);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 80);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    *(_DWORD *)__int128 buf = 67109376;
    int v30 = v8;
    __int16 v31 = 1024;
    int v32 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u",  buf,  0xEu);
  }

  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a2);
    if ((MRMediaRemoteErrorIsInformational(v4) & 1) != 0) {
      goto LABEL_10;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);

    uint64_t v12 = *(void **)(a1 + 40);
    id v13 = [[MRPresentRouteAuthorizationStatusMessage alloc] initWithRoute:v11 status:5];
    [v12 sendMessage:v13];

    goto LABEL_9;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    uint64_t v14 = 200LL;
LABEL_8:
    uint64_t Error = MRMediaRemoteCreateError(v14);
    uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
    unsigned int v11 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = Error;
LABEL_9:

    goto LABEL_10;
  }

  if (!*(_BYTE *)(a1 + 81))
  {
    uint64_t v14 = 202LL;
    goto LABEL_8;
  }

void sub_1000C34D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(3LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 56);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    v15[0] = 67109376;
    v15[1] = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u",  (uint8_t *)v15,  0xEu);
  }

  if (v3)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = v3;
    unsigned int v11 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }

  else
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      uint64_t v12 = 201LL;
    }

    else
    {
      if (*(_BYTE *)(a1 + 57)) {
        goto LABEL_9;
      }
      uint64_t v12 = 202LL;
    }

    uint64_t Error = MRMediaRemoteCreateError(v12);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
    unsigned int v11 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = Error;
  }

LABEL_9:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000C3608(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v3 = _MRLogForCategory(3LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002B81C8();
    }
LABEL_4:

    uint64_t v5 = *(void *)(a1 + 40);
LABEL_13:
    unsigned int v11 = *(void (**)(void))(v5 + 16);
    goto LABEL_14;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    uint64_t v6 = _MRLogForCategory(3LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002B8164();
    }
    goto LABEL_4;
  }

  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  uint64_t v8 = _MRLogForCategory(3LL, a2);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B8100();
    }

    uint64_t v5 = *(void *)(a1 + 40);
    goto LABEL_13;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Successfully executed output context modification.",  v13,  2u);
  }

  unsigned int v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_14:
  v11();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained) {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObject:WeakRetained];
  }
}

void sub_1000C3810(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceUID]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000C38B8;
  v6[3] = &unk_10039F0A8;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolume:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000C38B8(uint64_t a1, float a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc(&OBJC_CLASS___MRGetVolumeResultMessage);
  *(float *)&double v5 = a2;
  id v6 = [v4 initWithVolume:v5];
  [v3 replyWithMessage:v6];
}

void sub_1000C3988(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceUID]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000C3A30;
  v6[3] = &unk_10039F0F8;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolumeControlCapabilities:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000C3A30(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [[MRGetVolumeControlCapabilitiesResultMessage alloc] initWithCapabilities:a2];
  [v2 replyWithMessage:v3];
}

void sub_1000C3AF8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 volume];
  int v6 = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) details]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C3BD0;
  v10[3] = &unk_100399508;
  id v11 = *(id *)(a1 + 32);
  LODWORD(v9) = v6;
  [v4 setOutputDeviceVolume:v7 outputDevice:v8 details:&_dispatch_main_q queue:v10 completion:v9];
}

void sub_1000C3BD0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000C3CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resolveExistingPlayerPath:v3]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000C3DCC;
  void v8[3] = &unk_10039F120;
  id v9 = *(id *)(a1 + 32);
  MRMediaRemotePlaybackSessionRequest(v7, v6, &_dispatch_main_q, v8);
}

void sub_1000C3DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:a3];
  }
  else {
    id v4 = [[MRPlaybackSessionResponseMessage alloc] initWithPlaybackSession:a2];
  }
  id v5 = v4;
  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C3F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resolveExistingPlayerPath:v3]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 origin]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1000C4168;
  v27[3] = &unk_10039F198;
  id v28 = *(id *)(a1 + 32);
  id v29 = v7;
  id v30 = v6;
  id v31 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v7;
  id v10 = objc_retainBlock(v27);
  id v11 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  uint64_t v12 = objc_alloc(&OBJC_CLASS___NSString);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 requestID]);
  id v15 = -[NSString initWithFormat:](v12, "initWithFormat:", @"sendPlaybackSession<%@>", v14);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000C4838;
  v25[3] = &unk_100399530;
  __int16 v16 = v10;
  id v26 = v16;
  id v17 = [v11 initWithTimeout:v15 reason:v25 handler:10.0];

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playbackSession]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000C4854;
  v22[3] = &unk_10039F1C0;
  id v23 = v17;
  id v24 = v16;
  uint64_t v20 = v16;
  id v21 = v17;
  MRMediaRemoteSendPlaybackSession(v18, v19, v8, &_dispatch_main_q, v22);
}

void sub_1000C4168(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6) {
    id v7 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v6];
  }
  else {
    id v7 = [[MRPlaybackSessionMigrateResponseMessage alloc] initWithRequest:v5];
  }
  id v8 = v7;
  [a1[4] replyWithMessage:v7];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_1000C43F8;
  v29[3] = &unk_100399E98;
  id v30 = a1[5];
  id v31 = a1[6];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000C44B4;
  v25[3] = &unk_10039A550;
  id v9 = objc_retainBlock(v29);
  id v28 = v9;
  id v26 = a1[5];
  id v27 = a1[7];
  id v10 = objc_retainBlock(v25);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000C45D4;
  v19[3] = &unk_10039F170;
  id v11 = v9;
  id v23 = v11;
  id v20 = a1[5];
  id v21 = a1[6];
  id v22 = a1[7];
  uint64_t v12 = v10;
  id v24 = v12;
  id v13 = objc_retainBlock(v19);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playbackSession]);

  if (v6)
  {
    id v15 = v12;
    if (!v14) {
      goto LABEL_8;
    }
  }

  else
  {
    id v15 = v13;
    if (v14) {
LABEL_8:
    }
      ((void (*)(void))v15[2])();
  }

  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVClusterController sharedController](&OBJC_CLASS___MRAVClusterController, "sharedController"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000C47D8;
  v17[3] = &unk_100399D58;
  id v18 = a1[4];
  [v16 getClusterStatus:v17];
}

BOOL sub_1000C43F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 nowPlayingServer]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 originClientForOrigin:*(void *)(a1 + 32)]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 activeNowPlayingClient]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
  unsigned int v7 = [v6 processIdentifier];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
  BOOL v9 = v7 == [v8 processIdentifier];

  return v9;
}

void sub_1000C44B4(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))() & 1) == 0)
  {
    uint64_t v3 = _MRLogForCategory(3LL, v2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Reseting Facade",  v12,  2u);
    }

    id v5 = objc_alloc(&OBJC_CLASS___MRSetNowPlayingClientMessage);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 nowPlayingServer]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 originClientForOrigin:*(void *)(a1 + 32)]);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 activeNowPlayingClient]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 client]);
    id v11 = [v5 initWithClient:v10];

    [*(id *)(a1 + 40) sendMessage:v11];
  }

void sub_1000C45D4(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))() & 1) == 0)
  {
    uint64_t v3 = _MRLogForCategory(3LL, v2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nowPlayingServer]);
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 originClientForOrigin:*(void *)(a1 + 32)]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 activeNowPlayingClient]);
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 client]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      *(_DWORD *)__int128 buf = 138412546;
      id v18 = v9;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@",  buf,  0x16u);
    }

    id v11 = objc_alloc(&OBJC_CLASS___MRSetNowPlayingClientMessage);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
    id v13 = [v11 initWithClient:v12];

    [*(id *)(a1 + 48) sendMessage:v13];
    dispatch_time_t v14 = dispatch_time(0LL, 30000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C47CC;
    block[3] = &unk_100399EC0;
    id v16 = *(id *)(a1 + 64);
    dispatch_after(v14, &_dispatch_main_q, block);
  }

uint64_t sub_1000C47CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C47D8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    sub_10013D8E8(1, 0, v2);
  }

uint64_t sub_1000C4838(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_1000C4854(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_1000C496C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resolveExistingPlayerPath:v3]);

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000C4B58;
  v22[3] = &unk_100399508;
  id v23 = *(id *)(a1 + 32);
  unsigned int v7 = objc_retainBlock(v22);
  id v8 = *(void **)(a1 + 40);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  [v8 addPendingPlaybackSessionMigrateEvent:v9 playerPath:v6];

  id v10 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  id v11 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestIdentifier]);
  dispatch_time_t v14 = -[NSString initWithFormat:](v11, "initWithFormat:", @"sendPlaybackSessionMigrateBegin<%@>", v13);
  id v15 = [v10 initWithTimeout:v14 reason:v7 handler:10.0];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000C4BC0;
  v19[3] = &unk_10039BAB8;
  id v20 = v15;
  id v21 = v7;
  id v17 = v7;
  id v18 = v15;
  MRMediaRemoteSendPlaybackSessionMigrateBegin(v16, v6, &_dispatch_main_q, v19);
}

void sub_1000C4B58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C4BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_1000C4DC0(id a1, MRCommandResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));

  if (!v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 uiServer]);
    [v3 releaseTimeBasedNowPlayingActivityAssertions];
  }

void sub_1000C4EEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingServer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 resolveExistingPlayerPath:v3]);

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1000C50EC;
  v23[3] = &unk_100399508;
  id v24 = *(id *)(a1 + 32);
  unsigned int v7 = objc_retainBlock(v23);
  id v8 = *(void **)(a1 + 40);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  [v8 removePendingPlaybackSessionMigrateEvent:v9];

  id v10 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  id v11 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestIdentifier]);
  dispatch_time_t v14 = -[NSString initWithFormat:](v11, "initWithFormat:", @"sendPlaybackSessionMigrateEnd<%@>", v13);
  id v15 = [v10 initWithTimeout:v14 reason:v7 handler:10.0];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) request]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1000C5154;
  v20[3] = &unk_10039BAB8;
  id v21 = v15;
  id v22 = v7;
  id v18 = v7;
  id v19 = v15;
  MRMediaRemoteSendPlaybackSessionMigrateEnd(v16, v17, v6, &_dispatch_main_q, v20);
}

void sub_1000C50EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C5154(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_1000C5380(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRProtocolMessage);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

  id v5 = [v4 initWithUnderlyingCodableMessage:0 error:v6];
  [v2 replyWithMessage:v5];
}

void sub_1000C5564(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = [[MRAudioFadeResponseMessage alloc] initWithFadeDuration:a2 error:v5];

  [v4 replyWithMessage:v6];
}

void sub_1000C55D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000C57DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1000C5804(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v14 = objc_alloc_init(&OBJC_CLASS___MRCompositeMessage);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) availableOutputDevices]);
  if (([*(id *)(a1 + 32) features] & 8) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 routingServer]);
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 hostedRoutingService]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 hostedRoutingController]);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 discoverySession]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 unclusteredOutputDevices]);

    id v4 = (void *)v10;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 exportOutputDevices:v4 endpoint:v3]);

  id v13 = [[MRDiscoveryUpdateOutputDevicesMessage alloc] initWithOutputDevices:v12 configuration:*(void *)(a1 + 32)];
  [v14 addMessage:v13];

  [*(id *)(a1 + 40) sendMessage:v14];
}

void sub_1000C59DC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 listeningMode]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000C5A9C;
  void v7[3] = &unk_100399508;
  id v8 = *(id *)(a1 + 32);
  [v4 setListeningMode:v5 outputDeviceUID:v6 queue:&_dispatch_main_q completion:v7];
}

void sub_1000C5A9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C5B7C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 enabled];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000C5C34;
  void v7[3] = &unk_100399508;
  id v8 = *(id *)(a1 + 32);
  [v4 setConversationDetectionEnabled:v5 outputDeviceUID:v6 queue:&_dispatch_main_q completion:v7];
}

void sub_1000C5C34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C5DB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v16 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v16 && !v7)
  {
    id v9 = objc_alloc(&OBJC_CLASS___MRCreateHostedEndpointResponseMessage);
    uint64_t v10 = (NSError *)objc_claimAutoreleasedReturnValue([v16 outputDevices]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSError firstObject](v10, "firstObject"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 groupID]);
    id v13 = [v9 initWithGroupUID:v12];

LABEL_7:
    goto LABEL_8;
  }

  id v14 = objc_alloc(&OBJC_CLASS___MRProtocolMessage);
  id v15 = v14;
  if (!v7)
  {
    uint64_t v10 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 1LL);
    id v13 = [v15 initWithUnderlyingCodableMessage:0 error:v10];
    goto LABEL_7;
  }

  id v13 = [v14 initWithUnderlyingCodableMessage:0 error:v7];
LABEL_8:
  [*(id *)(a1 + 32) replyWithMessage:v13];
}

void sub_1000C5F64(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 adjustment];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) details]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000C603C;
  void v8[3] = &unk_100399508;
  id v9 = *(id *)(a1 + 32);
  [v4 adjustOutputDeviceVolume:v5 outputDevice:v6 details:v7 queue:&_dispatch_main_q completion:v8];
}

void sub_1000C603C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C611C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceUID]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000C61C4;
  v6[3] = &unk_10039F2A0;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolumeMuted:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000C61C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (v7) {
    id v5 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v7];
  }
  else {
    id v5 = [[MRGetVolumeMutedResultMessage alloc] initWithMuted:a2];
  }
  id v6 = v5;
  [*(id *)(a1 + 32) replyWithMessage:v5];
}

void sub_1000C62B8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 isMuted];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDeviceUID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) details]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000C6390;
  void v8[3] = &unk_100399508;
  id v9 = *(id *)(a1 + 32);
  [v4 muteOutputDeviceVolume:v5 outputDevice:v6 details:v7 queue:&_dispatch_main_q completion:v8];
}

void sub_1000C6390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000C6470(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v5)
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) details]);
    [v5 requestGroupSessionWithDetails:v8 queue:&_dispatch_main_q completion:&stru_10039F2E0];
  }

  else
  {
    uint64_t v9 = _MRLogForCategory(3LL, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002B822C();
    }
  }
}

void sub_1000C6514(id a1, NSString *a2, NSError *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(3LL, v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B822C();
    }
  }
}

void sub_1000C668C(_Unwind_Exception *a1)
{
}

void sub_1000C66B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionContext);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  id v7 = -[MRApplicationConnectionContext initWithIdentifier:service:destinationPlayerPath:]( v4,  "initWithIdentifier:service:destinationPlayerPath:",  v5,  v6,  v3);

  id v8 = objc_alloc(&OBJC_CLASS___MRCreateApplicationConnectionMessage);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestInfo]);
  id v10 = [v8 initWithConnectionContext:v7 requestInfo:v9];

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 remoteControlServer]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000C6870;
  v17[3] = &unk_100399CE0;
  objc_copyWeak(&v18, (id *)(a1 + 64));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000C6904;
  v14[3] = &unk_10039F380;
  id v13 = *(void **)(a1 + 56);
  void v14[4] = *(void *)(a1 + 48);
  id v15 = v13;
  id v16 = *(id *)(a1 + 40);
  [v12 registerIncomingApplicationConnection:v10 clientBoundMessageHandler:v17 completion:v14];

  objc_destroyWeak(&v18);
}

void sub_1000C685C(_Unwind_Exception *a1)
{
}

void sub_1000C6870(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained sendMessage:v5];
  }

  else
  {
    id v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 177LL);
    [v9 invalidate:v8];
  }
}

void sub_1000C6904(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v24 = 0LL;
  __int128 v25 = &v24;
  uint64_t v26 = 0x2020000000LL;
  char v27 = 0;
  objc_initWeak(&location, v5);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 32);
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_1000C6AA0;
  id v17 = &unk_10039F358;
  id v21 = &v24;
  uint64_t v18 = v7;
  id v19 = v8;
  id v10 = v6;
  id v20 = v10;
  objc_copyWeak(&v22, &location);
  dispatch_sync(v9, &v14);
  if (!*((_BYTE *)v25 + 24))
  {
    id v11 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v12 = -[NSError initWithMRError:](v11, "initWithMRError:", 35LL, v14, v15, v16, v17, v18, v19, v20, v21);
    [v5 invalidate:v12];
  }

  id v13 = [[MRProtocolMessage alloc] initWithUnderlyingCodableMessage:0 error:v10];
  [*(id *)(a1 + 48) replyWithMessage:v13];

  objc_destroyWeak(&v22);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v24, 8);
}

void sub_1000C6A74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

void sub_1000C6AA0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 8) containsObject:*(void *)(a1 + 40)];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    if (!*(void *)(a1 + 48))
    {
      uint64_t v2 = *(void **)(a1 + 32);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472LL;
      void v3[2] = sub_1000C6B6C;
      v3[3] = &unk_10039F330;
      objc_copyWeak(&v4, (id *)(a1 + 64));
      objc_msgSend(v2, "_onQueue_registerDisconnectionHandler:forClient:", v3, *(void *)(a1 + 40));
      objc_destroyWeak(&v4);
    }
  }

void sub_1000C6B58(_Unwind_Exception *a1)
{
}

void sub_1000C6B6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 177LL);
  [WeakRetained invalidate:v1];
}

void sub_1000C6C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionContext);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  uint64_t v12 = -[MRApplicationConnectionContext initWithIdentifier:service:destinationPlayerPath:]( v4,  "initWithIdentifier:service:destinationPlayerPath:",  v5,  v6,  v3);

  id v7 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionProtocolMessage);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) message]);
  id v9 = [v7 initWithMessage:v8 connectionContext:v12];

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 remoteControlServer]);
  [v11 handleServerBoundApplicationConnectionMessage:v9];
}

void sub_1000C6E58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionContext);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  uint64_t v12 = -[MRApplicationConnectionContext initWithIdentifier:service:destinationPlayerPath:]( v4,  "initWithIdentifier:service:destinationPlayerPath:",  v5,  v6,  v3);

  id v7 = objc_alloc(&OBJC_CLASS___MRInvalidateApplicationConnectionMessage);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  id v9 = [v7 initWithConnectionContext:v12 error:v8];

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 remoteControlServer]);
  [v11 handleInvalidateApplicationConnectionMessage:v9];
}

void sub_1000C70A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 136LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);
  id v5 = v4;
  if (v4) {
    id v6 = v4;
  }
  else {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  }
  id v7 = v6;

  int v8 = *(unsigned __int8 *)(a1 + 48);
  unsigned int v9 = -[NSMutableSet containsObject:](v7, "containsObject:", *(void *)(a1 + 40));
  if (v8)
  {
    if ((v9 & 1) == 0)
    {
      uint64_t v11 = _MRLogForCategory(3LL, v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v29 = 138412290;
        uint64_t v30 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Device: %@ has ASE set to local, adding assertion",  (uint8_t *)&v29,  0xCu);
      }

      -[NSMutableSet addObject:](v7, "addObject:", *(void *)(a1 + 40));
    }
  }

  else if (v9)
  {
    uint64_t v14 = _MRLogForCategory(3LL, v10);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      int v29 = 138412290;
      uint64_t v30 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[ExternalDeviceServer] Device: %@ no longer has ASE set to local, removing assertion",  (uint8_t *)&v29,  0xCu);
    }

    -[NSMutableSet removeObject:](v7, "removeObject:", *(void *)(a1 + 40));
  }

  id v17 = *(void **)(*(void *)(a1 + 32) + 136LL);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  [v17 setObject:v7 forKeyedSubscript:v18];

  id v19 = -[NSMutableSet count](v7, "count");
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 groupSessionServer]);

  if (v19) {
    [v21 requestEligibilityMonitoring];
  }
  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v23 = [v22 groupSessionASEAssertionEnabled];

  if (v23)
  {
    uint64_t v24 = *(void *)(a1 + 32);
    __int128 v25 = *(void **)(v24 + 144);
    if (!v25 && v19)
    {
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v21 assertionManager]);
      uint64_t v26 = objc_claimAutoreleasedReturnValue([v25 createAssertionWithReason:@"Remote device(s) has ASE set to local"]);
      uint64_t v27 = *(void *)(a1 + 32);
      id v28 = *(void **)(v27 + 144);
      *(void *)(v27 + 144) = v26;

LABEL_22:
      goto LABEL_23;
    }

    if (v25 && !v19)
    {
      *(void *)(v24 + 144) = 0LL;
      goto LABEL_22;
    }
  }

void sub_1000C7434(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x250], 8) = a1;
}

Class sub_1000C78E8(id a1, MRAVRoutingDiscoverySessionConfiguration *a2)
{
  uint64_t v2 = a2;
  if (-[MRAVRoutingDiscoverySessionConfiguration isLocal](v2, "isLocal")
    && (-[MRAVRoutingDiscoverySessionConfiguration features](v2, "features") & 8) != 0)
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRDRoutingDiscoverySession);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  else
  {
    id v3 = 0LL;
  }

  return (Class)v3;
}

void sub_1000C7CB0(_Unwind_Exception *a1)
{
}

void sub_1000C7CE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = (dispatch_queue_s *)WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C7D68;
    block[3] = &unk_100399250;
    id v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

id sub_1000C7D68(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
}

void sub_1000C7D70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = (dispatch_queue_s *)WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C7DF0;
    block[3] = &unk_100399250;
    id v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

id sub_1000C7DF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

id sub_1000C7DF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

id sub_1000C8218(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000C829C;
  void v8[3] = &unk_10039B1C0;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_1000C829C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

uint64_t sub_1000C843C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000C844C(uint64_t a1)
{
}

void sub_1000C8454(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeExternalDeviceForEndpoint:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C8554(uint64_t a1)
{
}

void sub_1000C861C(uint64_t a1)
{
}

id sub_1000C8670(id a1, MRAVDistantEndpoint *a2)
{
  uint64_t v2 = a2;
  if ((-[MRAVDistantEndpoint isLocalEndpoint](v2, "isLocalEndpoint") & 1) != 0) {
    uint64_t v3 = (MRAVDistantEndpoint *)objc_claimAutoreleasedReturnValue( +[MRAVLocalEndpoint sharedLocalEndpoint]( &OBJC_CLASS___MRAVLocalEndpoint,  "sharedLocalEndpoint"));
  }
  else {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_1000C8770(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) availableExternalDevices]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C8860(uint64_t a1)
{
}

void sub_1000C8928(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000C89E8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

id sub_1000C8A78(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

void sub_1000C8BC4(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 96) hostedExternalDeviceForEndpointIdentifier:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C8C00(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 96) hostedExternalDeviceForEndpointIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000C8CDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeExternalDeviceForEndpoint:", *(void *)(a1 + 40));
}

MRDAVOutputContextExternalDevice *sub_1000C8D80(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) designatedProxyGroupLeader]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 outputContextForOutputDevice:v1]);

  uint64_t v4 = -[MRDAVOutputContextExternalDevice initWithOutputContext:]( objc_alloc(&OBJC_CLASS___MRDAVOutputContextExternalDevice),  "initWithOutputContext:",  v3);
  return v4;
}

void sub_1000C92D0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 64),  *(void *)(a1 + 56)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C93D8(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "allValues", 0));
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObjectsFromArray:*(void *)(*((void *)&v7 + 1) + 8 * (void)v6)];
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1000C959C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) virtualOutputDeviceDictionary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (!v6)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) virtualOutputDeviceDictionary]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
    [v4 setObject:v6 forKeyedSubscript:v5];
  }

  [v6 addObject:*(void *)(a1 + 48)];
}

void sub_1000C9704(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) virtualOutputDeviceDictionary]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
  [v3 setObject:0 forKeyedSubscript:v2];
}

LABEL_139:
    [v26 addObject:@"preferSubscription"];
    if ((a5 & 0x10) == 0)
    {
LABEL_9:
      if ((a5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_141;
    }

LABEL_140:
    [v26 addObject:@"preferCloudLibrary"];
    if ((a5 & 0x20) == 0)
    {
LABEL_10:
      if ((a5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_142;
    }

LABEL_141:
    [v26 addObject:@"preferHomePod"];
    if ((a5 & 0x40) == 0)
    {
LABEL_11:
      if ((a5 & 0x80) == 0)
      {
LABEL_13:
        uint64_t v27 = v12;
        if (![v26 count]) {
          [v26 addObject:@"none"];
        }
        id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "componentsJoinedByString:", @", "));
        int v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"{ %@ }", v28));

        uint64_t v30 = v29;
        *(_DWORD *)__int128 buf = 138543362;
        v103 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "- Selection options: %{public}@",  buf,  0xCu);

        uint64_t v12 = v27;
        uint64_t v13 = v90;
        goto LABEL_16;
      }

LABEL_142:
    [v26 addObject:@"preferAppleTV"];
    if ((a5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A813C(v374, type metadata accessor for HostedRoutingSession);
  sub_1001A813C(v408, type metadata accessor for HostedRoutingSessionSnapshot);
  LODWORD(v113) = 1;
  v107 = v422;
  v108 = v426;
  __int128 v79 = v386;
LABEL_35:
  v131 = sub_1002A88D4();
  v132 = v410;
  v133 = v409;
  v134 = v420;
  v428 = (uint64_t (*)(char *, uint64_t, uint64_t))v410[2];
  v135 = v428(v409, v424, v420);
  if (v131)
  {
    v427 = (char *)v132[1];
    ((void (*)(char *, uint64_t))v427)(v133, v134);
LABEL_43:
    v145 = v411;
    goto LABEL_44;
  }

  v426 = v108;
  v136 = v379;
  RoutingSessionConfiguration.context.getter(v135);
  v137 = sub_1002557B0();
  v138 = *(void (**)(char *, uint64_t))(v79 + 8);
  v138(v136, v381);
  v139 = (void (*)(char *, uint64_t))v132[1];
  v139(v133, v134);
  v427 = (char *)v139;
  if ((v137 & 1) == 0)
  {
LABEL_42:
    v107 = v422;
    v108 = v426;
    goto LABEL_43;
  }

  v140 = v422;
  if ((sub_10024B254() & 1) != 0)
  {
    v108 = v426;
    v107 = v140;
    goto LABEL_43;
  }

  v141 = (uint64_t)v140 + v421[7];
  v142 = v370;
  sub_1001A8360(v141, v370, &qword_1003F9450);
  v143 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 48LL);
  if (v144(v142, 1LL, v143) == 1)
  {
    sub_1001603DC(v142, &qword_1003F9450);
    goto LABEL_42;
  }

  LODWORD(v425) = v113;
  v199 = *(void *)(v142 + 32);
  v200 = *(unsigned int *)(v142 + 40);
  v201 = *(unsigned __int8 *)(v142 + 44);
  sub_1001A8278(v199, v200, *(_BYTE *)(v142 + 44));
  sub_1001A813C(v142, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  v423 = (void *)v141;
  v202 = v366;
  sub_1001A8360(v141, v366, &qword_1003F9450);
  v418 = v143;
  v417 = (char *)v144;
  if (v144(v202, 1LL, v143) == 1)
  {
    sub_1001603DC(v202, &qword_1003F9450);
    v203 = v199;
    v204 = v200;
LABEL_145:
    v283 = v201;
LABEL_146:
    sub_1001A0918(v203, v204, v283);
    v107 = v422;
    v108 = v426;
LABEL_147:
    v145 = v411;
    LOBYTE(v113) = (_BYTE)v425;
LABEL_44:
    v146 = swift_beginAccess(&v437, &v430, 0LL, 0LL);
    v147 = (uint64_t)v437;
    __chkstk_darwin(v146);
    v148 = (void *)v108;
    v149 = (char *)sub_10019772C((void (*)(uint64_t))sub_1001A824C, (uint64_t)v356, v147);
    swift_bridgeObjectRelease();
    v435 = v149;
    v150 = swift_beginAccess(&v436, &v431, 0LL, 0LL);
    v151 = (uint64_t)v436;
    __chkstk_darwin(v150);
    v357 = v107;
    LOBYTE(v35_Block_object_dispose(&STACK[0x250], 8) = v145;
    v152 = sub_10019772C((void (*)(uint64_t))sub_1001A891C, (uint64_t)v356, v151);
    swift_bridgeObjectRelease();
    v434 = (uint64_t)v152;
    if ((v113 & 1) == 0)
    {
      v153 = v378;
      sub_10019C698(v378, a10);
      sub_10019C698(v153, a10);
    }

    v429 = v148;
    v154 = v419;
    v155 = v398;
    v156 = sub_1001A8360((uint64_t)v107 + v421[7], v419, &qword_1003F9450);
    v157 = v396;
    v158 = v424;
    v159 = RoutingSessionConfiguration.nowPlayingInfoProperties.getter(v156);
    v160 = v397;
    static RoutingSessionConfiguration.NowPlayingInfoProperties.trackInfo.getter(v159);
    v161 = sub_100156FEC( &qword_1003F94F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.NowPlayingInfoProperties,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.NowPlayingInfoProperties);
    v162 = dispatch thunk of SetAlgebra.isSuperset(of:)(v160, v155, v161);
    v163 = *(void (**)(char *, uint64_t))(v395 + 8);
    v163(v160, v155);
    v163(v157, v155);
    v164 = v394;
    v165 = v158;
    v166 = v420;
    v167 = v428(v394, v165, v420);
    if ((v162 & 1) != 0)
    {
      v168 = ((uint64_t (*)(char *, uint64_t))v427)(v164, v166);
    }

    else
    {
      v169 = RoutingSessionConfiguration.nowPlayingInfoProperties.getter(v167);
      static RoutingSessionConfiguration.NowPlayingInfoProperties.extendedTrackInfo.getter(v169);
      v170 = dispatch thunk of SetAlgebra.isSuperset(of:)(v160, v155, v161);
      v163(v160, v155);
      v163(v157, v155);
      v168 = ((uint64_t (*)(char *, uint64_t))v427)(v164, v166);
      if ((v170 & 1) == 0)
      {
        v175 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 48LL))( v154,  1LL,  v175))
        {
          v176 = (uint64_t *)v375;
          RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)(0LL, 1LL, 0LL, 0LL);
          v357 = v176;
          v177 = v367;
          RoutingSession.NowPlayingInfo.TrackInfo.init(title:album:artist:composer:station:attribution:extendedInfo:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v357);
          (*(void (**)(uint64_t, char *, uint64_t))(v368 + 40))(v154 + *(int *)(v175 + 40), v177, v369);
        }

        goto LABEL_54;
      }
    }

    v171 = RoutingSessionConfiguration.nowPlayingInfoProperties.getter(v168);
    static RoutingSessionConfiguration.NowPlayingInfoProperties.extendedTrackInfo.getter(v171);
    v172 = dispatch thunk of SetAlgebra.isSuperset(of:)(v160, v155, v161);
    v163(v160, v155);
    v163(v157, v155);
    if ((v172 & 1) == 0)
    {
      v173 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 48LL))(v154, 1LL, v173))
      {
        v174 = v375;
        RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)(0LL, 1LL, 0LL, 0LL);
        RoutingSession.NowPlayingInfo.TrackInfo.extendedInfo.setter(v174);
      }
    }

LABEL_45:
      id v38 = [v36 canAccessiCloudMusicLibrary];
      if ((_DWORD)v38) {
        v40 |= 0x20000uLL;
      }
      if ((a5 & 2) != 0)
      {
LABEL_37:
        if ((a5 & 0x20) == 0) {
          goto LABEL_59;
        }
        goto LABEL_55;
      }

                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain(a3);
                return (unint64_t *)sub_10015D15C(v41, a2, v40, a3);
              }

              goto LABEL_15;
            }
          }

          uint64_t v13 = v18;
        }

  __break(1u);
  return result;
}

    id v28 = _swiftEmptyArrayStorage;
LABEL_46:
    swift_bridgeObjectRelease();
    return (uint64_t)v28;
  }

  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_release(v13);
  if (!v14) {
    goto LABEL_44;
  }
LABEL_23:
  id v38 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10015DCE8(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = (void *)v38;
    do
    {
      if ((v13 & 0xC000000000000001LL) != 0)
      {
        id v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
      }

      else
      {
        id v17 = *(void **)(v13 + 8 * v15 + 32);
        swift_unknownObjectRetain(v17);
      }

      uint64_t v18 = [v17 route];
      id v19 = [v18 routeIdentifier];
      swift_unknownObjectRelease(v18);
      id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      id v22 = v21;
      swift_unknownObjectRelease(v17);

      id v38 = (unint64_t)v16;
      uint64_t v24 = v16[2];
      unsigned int v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        sub_10015DCE8(v23 > 1, v24 + 1, 1);
        uint64_t v16 = (void *)v38;
      }

      ++v15;
      v16[2] = v24 + 1;
      __int128 v25 = &v16[2 * v24];
      void v25[4] = v20;
      v25[5] = v22;
    }

    while (v14 != v15);
    swift_release(v13);
    uint64_t v26 = v16[2];
    if (v26) {
      goto LABEL_32;
    }
    goto LABEL_45;
  }

      __int128 v9 = v21;
    }

    v125 = [a1 v55[458]];
    v126 = [v125 systemPodcastApplication];

    if (v126)
    {
      v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
      v129 = v128;

      if (v63 == v127 && v62 == v129)
      {

        swift_bridgeObjectRelease_n(v62, 2LL);
LABEL_51:
        v131 = 1;
LABEL_56:
        LODWORD(v343) = v131;
        goto LABEL_57;
      }

      v130 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v62, v127, v129, 0LL);
      swift_bridgeObjectRelease();
      if ((v130 & 1) != 0)
      {
        swift_bridgeObjectRelease();

        goto LABEL_51;
      }
    }

    v132 = [a1 v55[458]];
    v133 = [v132 systemBooksApplication];

    if (v133)
    {
      v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      v136 = v135;

      if (v63 == v134 && v62 == v136)
      {

        swift_bridgeObjectRelease_n(v62, 2LL);
        v131 = 3;
        goto LABEL_56;
      }

      v236 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v62, v134, v136, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v137 = v347;
      if ((v236 & 1) != 0)
      {

        v237 = 3;
LABEL_111:
        LODWORD(v343) = v237;
        goto LABEL_58;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      v137 = v347;
    }

    v238 = v343;
    IsSystemAppleTVApplication = MRMediaRemoteApplicationIsSystemAppleTVApplication(v343);

    if (IsSystemAppleTVApplication) {
      v237 = 2;
    }
    else {
      v237 = 4;
    }
    goto LABEL_111;
  }

  swift_bridgeObjectRelease_n(v62, 2LL);
LABEL_44:
  LODWORD(v343) = 0;
LABEL_57:
  v137 = v347;
LABEL_58:
  v138 = sub_100299314();
  v139 = [v137 nowPlayingContentItem];
  v140 = [v139 metadata];

  v345 = v81;
  v344 = v117;
  LODWORD(v341) = v118;
  v340 = v138;
  v339 = v140;
  v338 = a1;
  if (v140)
  {
    v141 = [v140 iTunesStoreIdentifier];
    v142 = [v140 internationalStandardRecordingCode];
    if (v142)
    {
      v143 = v142;
      v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
      v146 = v145;
    }

    else
    {
      v144 = 0LL;
      v146 = 0LL;
    }

    RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)(v141, 0LL, v144, v146);
    v155 = v140;
    v336 = sub_100164E18();
    v154 = v156;

    v157 = [v155 albumName];
    if (v157)
    {
      v158 = v157;
      v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      v333 = v159;
    }

    else
    {
      v152 = 0LL;
      v333 = 0LL;
    }

    v160 = [v155 trackArtistName];
    if (v160)
    {
      v161 = v160;
      v332 = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
      v331 = v162;
    }

    else
    {
      v332 = 0LL;
      v331 = 0LL;
    }

    v163 = [v155 composer];
    if (v163)
    {
      v164 = v163;
      v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
      v337 = v166;
    }

    else
    {
      v165 = 0LL;
      v337 = 0LL;
    }

    v167 = [v155 radioStationName];
    if (v167)
    {
      v168 = v167;
      v140 = (id)v336;
      v330 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
      v170 = v169;
    }

    else
    {
      v140 = (id)v336;
      v330 = 0LL;
      v170 = 0LL;
    }

    v171 = v155;
    v336 = sub_100164CCC();
    v335 = v172;

    v147 = v371;
    v153 = v333;
    v150 = v332;
    v151 = v331;
    v334 = v165;
    v148 = v330;
    v149 = v170;
  }

  else
  {
    v147 = v371;
    RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)(0LL, 1LL, 0LL, 0LL);
    v336 = 0LL;
    v335 = 0LL;
    v148 = 0LL;
    v149 = 0LL;
    v334 = 0LL;
    v337 = 0LL;
    v150 = 0LL;
    v151 = 0LL;
    v152 = 0LL;
    v153 = 0LL;
    v154 = 0LL;
  }

  v173 = v355;
  (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v355, v147, v365);
  v174 = RoutingSession.NowPlayingInfo.TrackInfo.init(title:album:artist:composer:station:attribution:extendedInfo:)( v140,  v154,  v152,  v153,  v150,  v151,  v334,  v337,  v148,  v149,  v336,  v335,  v173);
  v175 = &selRef_initWithListeningMode_outputDeviceUID_;
  v176 = v339;
  if (v339)
  {
    v177 = v339;
    v178 = [v177 isAlwaysLive];
    v179 = v349;
    v180 = v362;
    v181 = v368;
    v182 = v369;
    v184 = v366;
    v183 = (void (**)(void, void, void))v367;
    v185 = v338;
    if ((v178 & 1) != 0)
    {

      ((void (**)(char *, void, uint64_t))v183)[13]( v184,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.live(_:),  v181);
    }

    else
    {
      v186 = [v177 hasElapsedTimeTimestamp];
      v187 = &selRef_elapsedTimeTimestamp;
      if (!v186) {
        v187 = &selRef_inferredTimestamp;
      }
      objc_msgSend(v177, *v187, v330);
      v189 = v188;
      [v177 startTime];
      v191 = v190;
      sub_100164B9C();
      v193 = v192;
      [v177 duration];
      v195 = v194;
      v196 = [v177 elapsedTime];
      v198 = v197;
      v199 = v351;
      Date.init(timeIntervalSinceReferenceDate:)(v196, v189);
      RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.ProgressSnapshot.init(time:date:)(v199, v198);
      if ([v177 hasPlaybackRate])
      {
        [v177 playbackRate];
        v201.n128_f64[0] = v200;
      }

      else if ([v347 isPlaying])
      {
        v201.n128_f64[0] = 1.0;
      }

      else
      {
        v201.n128_f64[0] = 0.0;
      }

      v202 = v352;
      RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.init(start:end:duration:progressSnapshot:rate:)( v354,  v191,  v193,  v195,  v201);

      ((void (**)(char *, void, uint64_t))v183)[13]( v202,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.finite(_:),  v181);
      ((void (**)(char *, char *, uint64_t))v183)[4](v184, v202, v181);
      v175 = &selRef_initWithListeningMode_outputDeviceUID_;
    }
  }

  else
  {
    v184 = v366;
    static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.empty.getter(v174);
    v183 = (void (**)(void, void, void))v367;
    v181 = v368;
    (*(void (**)(char *, void, uint64_t))(v367 + 104))( v184,  enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.finite(_:),  v368);
    v179 = v349;
    v180 = v362;
    v182 = v369;
    v185 = v338;
  }

  v203 = objc_msgSend(v347, v175[244], v330);
  v204 = (unsigned int *)&enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:);
  if (!v203) {
    v204 = (unsigned int *)&enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.paused(_:);
  }
  v205 = v359;
  (*(void (**)(char *, void, uint64_t))(v357 + 104))(v359, *v204, v358);
  v206 = v356;
  ((void (**)(char *, char *, uint64_t))v183)[2](v356, v184, v181);
  v207 = RoutingSession.NowPlayingInfo.PlaybackInfo.init(playbackState:playbackType:)(v205, v206);
  v374 = (char *)RoutingSession.NowPlayingInfo.TrackInfo.title.getter(v207);
  v375 = v208;
  if (v176)
  {
    v209 = v208;
    v210 = v176;
    if ([v210 isExplicitItem]
      && ([v210 hasLoadingPlaceholderTitle] & 1) == 0
      && v209)
    {
      v373._countAndFlagsBits = 32LL;
      v373._object = (void *)0xE100000000000000LL;
      v211 = sub_100164B50();
      if (v212)
      {
        v213 = v212;
      }

      else
      {
        v211 = 3028656112LL;
        v213 = 0xA400000000000000LL;
      }

      v214 = v213;
      String.append(_:)(*(Swift::String *)&v211);
      swift_bridgeObjectRelease();
      String.append(contentsOf:)(v373);
      swift_bridgeObjectRelease();
    }
  }

  v215 = v372;
  v216 = RoutingSession.NowPlayingInfo.TrackInfo.artist.getter();
  v218 = v217;
  v219 = *(uint64_t (**)(char *, char *, uint64_t))(v182 + 16);
  v220 = v360;
  v221 = v219(v360, v215, v180);
  if (v218)
  {
    v359 = v218;
    v362 = v216;

    v222 = v347;
    v223 = *(void (**)(char *, uint64_t))(v182 + 8);
    v223(v220, v180);
  }

  else
  {
    v224 = RoutingSession.NowPlayingInfo.TrackInfo.station.getter(v221);
    v226 = v225;
    v227 = v353;
    v228 = v219(v353, v220, v180);
    if (v226)
    {
      v359 = v226;
      v362 = v224;

      v229 = v347;
      v223 = *(void (**)(char *, uint64_t))(v182 + 8);
      v223(v227, v180);
    }

    else
    {
      v362 = RoutingSession.NowPlayingInfo.TrackInfo.composer.getter(v228);
      v231 = v230;
      v232 = v350;
      v233 = v219(v350, v227, v180);
      v359 = v231;
      if (v231)
      {

        v234 = v347;
        v235 = v362;
      }

      else
      {
        v240 = RoutingSession.NowPlayingInfo.TrackInfo.attribution.getter(v233);
        v232 = v350;
        v235 = v240;
        v359 = v241;

        v242 = v347;
      }

      v362 = v235;
      v223 = *(void (**)(char *, uint64_t))(v182 + 8);
      v223(v232, v180);
      v223(v227, v180);
    }

    v223(v220, v180);
  }

  v243 = v375;
  v360 = v374;
  v244 = v363;
  v245 = v180;
  v246 = v370;
  v247 = v348;
  (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v363, v370, v348);
  v248 = v361;
  v249 = v372;
  v219(v361, v372, v245);
  v250 = *(void (**)(char *, uint64_t))(v179 + 8);
  swift_bridgeObjectRetain();
  v250(v246, v247);
  (*(void (**)(char *, uint64_t))(v367 + 8))(v366, v368);
  v223(v249, v245);
  (*(void (**)(char *, uint64_t))(v364 + 8))(v371, v365);
  v251 = v342;
  *(void *)v342 = v360;
  *((void *)v251 + 1) = v243;
  v252 = v359;
  *((void *)v251 + 2) = v362;
  *((void *)v251 + 3) = v252;
  v253 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  (*(void (**)(char *, char *, uint64_t))(v179 + 32))(&v251[*(int *)(v253 + 36)], v244, v247);
  (*(void (**)(char *, char *, uint64_t))(v369 + 32))(&v251[*(int *)(v253 + 40)], v248, v245);
  *((void *)v251 + 4) = v344;
  *((_DWORD *)v251 + 10) = (_DWORD)v341;
  v251[44] = (char)v343;
  v254 = v340;
  *((void *)v251 + 6) = v345;
  *((void *)v251 + 7) = v254;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v253 - 8) + 56LL))(v251, 0LL, 1LL, v253);
}

LABEL_48:
      id v42 = [v36 isGroupLeader];
      if ([v36 supportsMultiplayer])
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue([v36 airPlayGroupID]);
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v36 groupID]);
        unsigned __int8 v45 = v34;
        unsigned __int8 v46 = [v43 isEqual:v44];

        v42 &= v46;
        __int128 v34 = v45;
        uint64_t v13 = v90;
        int v32 = v91;
      }

      id v38 = [v36 isRemoteControllable];
      __int128 v47 = v40 | 0xFFFFFFFF80000000LL;
      if (!v42) {
        __int128 v47 = v40;
      }
      if ((_DWORD)v38) {
        id v40 = v47;
      }
      if ((a5 & 0x20) == 0) {
        goto LABEL_59;
      }
LABEL_55:
      id v38 = [v36 deviceType];
      if ((_DWORD)v38 != 1) {
        goto LABEL_59;
      }
      id v38 = [v36 deviceSubtype];
      if ((_DWORD)v38 != 12) {
        goto LABEL_59;
      }
      id v38 = [v36 isB238Device];
      if ((_DWORD)v38)
      {
        v40 |= 0x2400uLL;
LABEL_59:
        if ((a5 & 0x40) == 0) {
          goto LABEL_63;
        }
LABEL_60:
        id v38 = [v36 deviceType];
        if ((_DWORD)v38 == 1)
        {
          id v38 = [v36 deviceSubtype];
          if ((_DWORD)v38 == 13) {
            v40 |= 0x1000uLL;
          }
        }

        goto LABEL_63;
      }

      id v38 = [v36 isB620Device];
      id v58 = 0x2000LL;
      if ((_DWORD)v38) {
        id v58 = 10240LL;
      }
      v40 |= v58;
      if ((a5 & 0x40) != 0) {
        goto LABEL_60;
      }
LABEL_63:
      if (v40 <= v33) {
        goto LABEL_86;
      }
      if (a5)
      {
        __int16 v48 = MRLogCategoryDiscovery(v38, v39);
        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v36 uid]);
          id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
          uint64_t v52 = v51;
          if ((v40 & 0x10) != 0)
          {
            [v51 addObject:@"proxyGroupPlayer"];
            if ((v40 & 0x80) != 0) {
              goto LABEL_89;
            }
LABEL_68:
            if ((v40 & 0x100) == 0) {
              goto LABEL_69;
            }
LABEL_90:
            [v52 addObject:@"remoteControllable"];
            if ((v40 & 0x200) != 0) {
              goto LABEL_91;
            }
LABEL_70:
            if ((v40 & 0x10000) == 0) {
              goto LABEL_71;
            }
LABEL_92:
            [v52 addObject:@"appleMusicSubscription"];
            if ((v40 & 0x20000) != 0) {
LABEL_72:
            }
              [v52 addObject:@"iCloudMusicLibrary"];
          }

          else
          {
            if ((v40 & 0x80) == 0) {
              goto LABEL_68;
            }
LABEL_89:
            [v52 addObject:@"relayable"];
            if ((v40 & 0x100) != 0) {
              goto LABEL_90;
            }
LABEL_69:
            if ((v40 & 0x200) == 0) {
              goto LABEL_70;
            }
LABEL_91:
            [v52 addObject:@"existingConnection"];
            if ((v40 & 0x10000) != 0) {
              goto LABEL_92;
            }
LABEL_71:
            if ((v40 & 0x20000) != 0) {
              goto LABEL_72;
            }
          }

          if (v40 < 0xFFFFFFFF80000000LL)
          {
            if ((v40 & 0x2000) == 0) {
              goto LABEL_75;
            }
LABEL_95:
            [v52 addObject:@"HomePod"];
            if ((v40 & 0x1000) != 0) {
              goto LABEL_96;
            }
LABEL_76:
            if ((v40 & 0x400) == 0) {
              goto LABEL_77;
            }
LABEL_97:
            [v52 addObject:@"PreferredWireless"];
            if ((v40 & 0x800) == 0) {
              goto LABEL_79;
            }
LABEL_78:
            [v52 addObject:@"PreferredCompute"];
            goto LABEL_79;
          }

          [v52 addObject:@"existingLeader"];
          if ((v40 & 0x2000) != 0) {
            goto LABEL_95;
          }
LABEL_75:
          if ((v40 & 0x1000) == 0) {
            goto LABEL_76;
          }
LABEL_96:
          [v52 addObject:@"AppleTV"];
          if ((v40 & 0x400) != 0) {
            goto LABEL_97;
          }
LABEL_77:
          if ((v40 & 0x800) != 0) {
            goto LABEL_78;
          }
LABEL_79:
          if (v40 >= 0xFFFFFFFF80000000LL) {
            [v52 addObject:@"existingDesignatedLeader"];
          }
          __int16 v53 = v34;
          if (![v52 count]) {
            [v52 addObject:@"none"];
          }
          id v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "componentsJoinedByString:", @", "));
          id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{ %@ }",  v54));

          __int128 v56 = v55;
          *(_DWORD *)__int128 buf = 138543618;
          v103 = v50;
          id v104 = 2114;
          v105 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "- Updating preferred group leader %{public}@ based on better criteria: %{public}@",  buf,  0x16u);

          __int128 v34 = v53;
          uint64_t v13 = v90;
          int v32 = v91;
        }
      }

      __int128 v57 = v36;

      uint64_t v33 = v40;
      __int128 v34 = v57;
LABEL_86:
      id v35 = (char *)v35 + 1;
    }

    while (v32 != v35);
    id v59 = [obj countByEnumeratingWithState:&v98 objects:v106 count:16];
    int v32 = v59;
  }

  while (v59);
LABEL_106:

  id v60 = objc_msgSend(obj, "mr_any:", &stru_10039F4F0);
  uint64_t v61 = v34;
  id v62 = v60;
  v94[0] = _NSConcreteStackBlock;
  v94[1] = 3221225472LL;
  v94[2] = sub_1000CA43C;
  v94[3] = &unk_10039F518;
  id v63 = v61;
  uint64_t v97 = v62;
  uint64_t v95 = v63;
  id v96 = a5;
  __int128 v64 = (id)((uint64_t (*)(void *))sub_1000CA43C)(v94);
  if ((_DWORD)v64)
  {
    uint64_t v66 = v88;
    __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v13->_hostsByGroupID, "objectForKeyedSubscript:", v88));

    id v68 = v87;
    if (v67)
    {
      id v69 = (id)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v13->_hostsByGroupID, "objectForKeyedSubscript:", v88));

      __int16 v72 = MRLogCategoryDiscovery(v70, v71);
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        char v74 = (void *)objc_claimAutoreleasedReturnValue([v69 uid]);
        *(_DWORD *)__int128 buf = 138543362;
        v103 = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "- Updating preferred group leader because found a remote host: %{public}@",  buf,  0xCu);
      }

      goto LABEL_114;
    }

    __int128 v64 = [v63 shouldBeLocallyHosted];
    if ((_DWORD)v64)
    {
      id v69 = v87;

      __int128 v77 = MRLogCategoryDiscovery(v75, v76);
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "- Updating preferred group leader because locally hosting the group",  buf,  2u);
      }

  __break(1u);
  return result;
}

  __break(1u);
  uint64_t result = swift_release(v38);
  __break(1u);
  return result;
}

LABEL_114:
      id v63 = v69;
    }
  }

  else
  {
    id v68 = v87;
    uint64_t v66 = v88;
  }

  if (a5)
  {
    __int128 v78 = MRLogCategoryDiscovery(v64, v65);
    __int128 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      char v81 = v80;
      if ((v33 & 0x10) != 0)
      {
        [v80 addObject:@"proxyGroupPlayer"];
        if ((v33 & 0x80) != 0) {
          goto LABEL_145;
        }
LABEL_119:
        if ((v33 & 0x100) == 0) {
          goto LABEL_120;
        }
LABEL_146:
        [v81 addObject:@"remoteControllable"];
        if ((v33 & 0x200) != 0) {
          goto LABEL_147;
        }
LABEL_121:
        if ((v33 & 0x10000) == 0) {
          goto LABEL_122;
        }
LABEL_148:
        [v81 addObject:@"appleMusicSubscription"];
        if ((v33 & 0x20000) != 0) {
LABEL_123:
        }
          [v81 addObject:@"iCloudMusicLibrary"];
      }

      else
      {
        if ((v33 & 0x80) == 0) {
          goto LABEL_119;
        }
LABEL_145:
        [v81 addObject:@"relayable"];
        if ((v33 & 0x100) != 0) {
          goto LABEL_146;
        }
LABEL_120:
        if ((v33 & 0x200) == 0) {
          goto LABEL_121;
        }
LABEL_147:
        [v81 addObject:@"existingConnection"];
        if ((v33 & 0x10000) != 0) {
          goto LABEL_148;
        }
LABEL_122:
        if ((v33 & 0x20000) != 0) {
          goto LABEL_123;
        }
      }

      if (v33 < 0xFFFFFFFF80000000LL)
      {
        if ((v33 & 0x2000) == 0) {
          goto LABEL_126;
        }
LABEL_151:
        [v81 addObject:@"HomePod"];
        if ((v33 & 0x1000) != 0) {
          goto LABEL_152;
        }
LABEL_127:
        if ((v33 & 0x400) == 0) {
          goto LABEL_128;
        }
LABEL_153:
        [v81 addObject:@"PreferredWireless"];
        if ((v33 & 0x800) == 0) {
          goto LABEL_130;
        }
LABEL_129:
        [v81 addObject:@"PreferredCompute"];
        goto LABEL_130;
      }

      [v81 addObject:@"existingLeader"];
      if ((v33 & 0x2000) != 0) {
        goto LABEL_151;
      }
LABEL_126:
      if ((v33 & 0x1000) == 0) {
        goto LABEL_127;
      }
LABEL_152:
      [v81 addObject:@"AppleTV"];
      if ((v33 & 0x400) != 0) {
        goto LABEL_153;
      }
LABEL_128:
      if ((v33 & 0x800) != 0) {
        goto LABEL_129;
      }
LABEL_130:
      if (v33 >= 0xFFFFFFFF80000000LL) {
        [v81 addObject:@"existingDesignatedLeader"];
      }
      if (![v81 count]) {
        [v81 addObject:@"none"];
      }
      char v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "componentsJoinedByString:", @", "));
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"{ %@ }", v82));

      id v84 = v83;
      *(_DWORD *)__int128 buf = 138543618;
      v103 = v63;
      id v104 = 2114;
      v105 = v84;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "-- Final preferred group leader: %{public}@ based on criteria: %{public}@",  buf,  0x16u);
    }
  }

  v85 = v63;

  return v85;
}

int64_t sub_1000CA38C(id a1, MRAVOutputDevice *a2, MRAVOutputDevice *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice uid](a2, "uid"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice uid](v4, "uid"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_1000CA3F8(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  else {
    LOBYTE(v3) = 0;
  }

  return v3;
}

BOOL sub_1000CA43C(uint64_t a1)
{
  return ([*(id *)(a1 + 32) isAuxiliary] & 1) != 0
      || !*(_BYTE *)(a1 + 48) && (*(_BYTE *)(a1 + 40) & 0x80) == 0;
}

MRAVDistantOutputDevice *__cdecl sub_1000CA804(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice descriptor](v2, "descriptor"));

  uint64_t v5 = -[MRAVDistantOutputDevice initWithDescriptor:](v3, "initWithDescriptor:", v4);
  return v5;
}

void sub_1000CA86C(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v6);
        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = objc_msgSend(*(id *)(a1 + 48), "copy", (void)v10);
        [v7 hostedRoutingController:v8 outputDevicesDidChange:v9 forFeature:8];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

id sub_1000CAA30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

id sub_1000CAA94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

void sub_1000CAB18(uint64_t a1)
{
  v6[0] = 0LL;
  v6[1] = v6;
  void v6[2] = 0x3032000000LL;
  v6[3] = sub_1000C843C;
  void v6[4] = sub_1000C844C;
  id v7 = 0LL;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) availableExternalDevices]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1000CAC04;
  v3[3] = &unk_10039F580;
  uint64_t v5 = v6;
  id v4 = *(id *)(a1 + 40);
  [v2 enumerateKeysAndObjectsUsingBlock:v3];

  _Block_object_dispose(v6, 8);
}

void sub_1000CABEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CAC04(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = (id)objc_claimAutoreleasedReturnValue([a3 externalDevice]);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRDAVOutputContextExternalDevice);
  if ((objc_opt_isKindOfClass(v11, v4) & 1) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    if (!v5)
    {
      id v6 = objc_alloc(&OBJC_CLASS___NSError);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
      uint64_t v8 = -[NSError initWithMRError:description:](v6, "initWithMRError:description:", 1LL, v7);
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
      __int128 v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    [v11 disconnect:v5];
  }
}

void sub_1000CAD24(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) allObjects]);
  id v3 = [v2 copy];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = 0LL;
    uint64_t v9 = *(void *)v29;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        id v12 = objc_msgSend(v11, "discoveryMode", (void)v28);
        if (v12 <= v8)
        {
          if ((_DWORD)v12 == (_DWORD)v8) {
            [v4 addObject:v11];
          }
        }

        else
        {
          uint64_t v13 = (uint64_t)v12;
          uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithObject:](&OBJC_CLASS___NSMutableSet, "setWithObject:", v11));

          uint64_t v4 = (void *)v14;
          uint64_t v8 = v13;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v28 objects:v36 count:16];
    }

    while (v7);

    if ((_DWORD)v8)
    {
      objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
      objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
    }
  }

  else
  {

    uint64_t v8 = 0LL;
  }

  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "endpointFeatures", (void)v28) == 8)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRSharedSettings currentSettings](&OBJC_CLASS___MRSharedSettings, "currentSettings"));
    unsigned __int8 v16 = [v15 supportNanoStandalone];

    if ((v16 & 1) == 0 && (_DWORD)v8 == 3)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_filter:", &stru_10039F5C0));
      [v4 addObjectsFromArray:v17];

      uint64_t v8 = 2LL;
    }
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_compactMap:", &stru_10039F600));
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v18));

  if ((_DWORD)v8 != [*(id *)(*(void *)(a1 + 32) + 104) discoveryMode]
    || (id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) lastReportedClientIdentifiers]),
        unsigned __int8 v22 = [v19 isEqualToSet:v21],
        v21,
        (v22 & 1) == 0))
  {
    uint64_t v23 = _MRLogForCategory(0LL, v20);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription(v8, v25);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_map:", &stru_10039F620));
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v33 = v26;
      __int16 v34 = 2114;
      id v35 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@",  buf,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 104) setDiscoveryMode:v8 forClientIdentifiers:v19];
  }
}

BOOL sub_1000CB048(id a1, MRDAVHostedRoutingObserver *a2)
{
  return -[MRDAVHostedRoutingObserver discoveryMode](a2, "discoveryMode") == 2;
}

NSString *__cdecl sub_1000CB068(id a1, MRDAVHostedRoutingObserver *a2)
{
  return (NSString *)-[MRDAVHostedRoutingObserver clientIdentifier](a2, "clientIdentifier");
}

NSString *__cdecl sub_1000CB070(id a1, MRDAVHostedRoutingObserver *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRDAVHostedRoutingObserver clientIdentifier](v2, "clientIdentifier"));
  id v5 = -[MRDAVHostedRoutingObserver discoveryMode](v2, "discoveryMode");
  id v7 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription(v5, v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"<%@: %p> %@: %@",  v3,  v2,  v4,  v7));

  return (NSString *)v8;
}

id sub_1000CB1A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

void sub_1000CB1C8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDHostedRoutingControllerAvailableExternalDevicesDidChangeNotification" object:*(void *)(a1 + 32)];
}

NSString *__cdecl sub_1000CB5E0(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)-[MRAVOutputDevice baseGroupID](a2, "baseGroupID");
}

BOOL sub_1000CB5E8(id a1, MRAVDistantOutputDevice *a2)
{
  return -[MRAVDistantOutputDevice deviceSubtype](a2, "deviceSubtype") != 15;
}

BOOL sub_1000CB608(id a1, MRAVOutputDevice *a2)
{
  id v2 = a2;
  if (-[MRAVOutputDevice deviceSubtype](v2, "deviceSubtype") == 12)
  {
    unsigned __int8 v3 = 1;
  }

  else if (-[MRAVOutputDevice supportsMultiplayer](v2, "supportsMultiplayer"))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned __int8 v3 = [v4 isMultiplayerAware];
  }

  else
  {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

BOOL sub_1000CB680(id a1, MRAVDistantOutputDevice *a2)
{
  return -[MRAVDistantOutputDevice isPrimaryLocalDevice](a2, "isPrimaryLocalDevice");
}

id sub_1000CB688(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

_MRAVOutputDeviceDescriptorProtobuf *__cdecl sub_1000CB780(id a1, MRAVOutputDevice *a2, MRAVOutputDevice *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned __int8 v6 = -[MRAVOutputDevice isEqual:](v4, "isEqual:", v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice descriptor](v5, "descriptor"));

  if ((v6 & 1) == 0)
  {
    objc_msgSend(v7, "setIsRemoteControllable:", -[MRAVOutputDevice isRemoteControllable](v4, "isRemoteControllable"));
    objc_msgSend( v7,  "setCanAccessiCloudMusicLibrary:",  -[MRAVOutputDevice canAccessiCloudMusicLibrary](v4, "canAccessiCloudMusicLibrary"));
    objc_msgSend(v7, "setCanAccessAppleMusic:", -[MRAVOutputDevice canAccessAppleMusic](v4, "canAccessAppleMusic"));
    objc_msgSend( v7,  "setCanAccessRemoteAssets:",  -[MRAVOutputDevice canAccessRemoteAssets](v4, "canAccessRemoteAssets"));
  }

  return (_MRAVOutputDeviceDescriptorProtobuf *)v7;
}

MRAVDistantOutputDevice *sub_1000CB834(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 baseGroupID]);
  if (v4
    && [v3 isAuxiliary]
    && ((id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4])) != 0
     || [v3 shouldBeLocallyHosted]))
  {
    unsigned __int8 v6 = objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice);
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = -[MRAVDistantOutputDevice initWithDescriptor:](v6, "initWithDescriptor:", v8);
  }

  else
  {
    uint64_t v9 = (MRAVDistantOutputDevice *)v3;
  }

  return v9;
}

uint64_t sub_1000CBC2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(_BYTE *)(a1 + 32)
    && ([v3 isRemoteControllable] & 1) == 0
    && ![v4 canRelayCommunicationChannel])
  {
    goto LABEL_15;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  if (([v5 showUncommitedDevices] & 1) == 0
    && [v4 supportsMultiplayer]
    && ([v4 isLocalDevice] & 1) == 0
    && ![v4 canRelayCommunicationChannel])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 groupContextID]);

    if (v8) {
      goto LABEL_9;
    }
    uint64_t v10 = _MRLogForCategory(0LL, v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 uid]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 name]);
      int v14 = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Ignoring uncommitted output device: %@ (%@)",  (uint8_t *)&v14,  0x16u);
    }

LABEL_15:
    uint64_t v6 = 0LL;
    goto LABEL_10;
  }

LABEL_9:
  uint64_t v6 = 1LL;
LABEL_10:

  return v6;
}

id sub_1000CBE84(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 contextID]);
  id v5 = [v3 hasSuffix:v4];

  return v5;
}

id sub_1000CC098(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDeviceUIDs]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  id v5 = [v3 containsObject:v4];

  return v5;
}

void sub_1000CCEF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000CCF10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CCF20(uint64_t a1)
{
}

void sub_1000CCF28(uint64_t a1)
{
}

void sub_1000CCFF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CD008(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_activeOriginClient"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CD0F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CD10C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_companionOriginClient"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CD3DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CD3F4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_allNowPlayingInfoClients"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CD694( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CD6AC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_allNowPlayingInfoClients"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CD82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000CD844(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "addObject:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)v6),  (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1000CDC00(_Unwind_Exception *a1)
{
}

void sub_1000CDC14(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v2 = (void *)qword_1003FDE50;
  qword_1003FDE50 = (uint64_t)v1;
}

id sub_1000CDC3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v3 = @"bundleID";
  uint64_t v4 = v1;
  return (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v4,  &v3,  1LL));
}

void sub_1000CDDCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000CDDE4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_onQueue_originClientForOrigin:", v2));
  if (v3)
  {
    uint64_t v4 = (MRClient *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    if (!v4)
    {
      uint64_t v5 = objc_alloc(&OBJC_CLASS___MRClient);
      id v6 = [*(id *)(a1 + 48) pid];
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) bundleIdentifier]);
      uint64_t v4 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]( v5,  "initWithProcessIdentifier:bundleIdentifier:",  v6,  v7);
    }

    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
    unsigned int v9 = [v8 isLocallyHosted];

    if (!v9) {
      goto LABEL_18;
    }
    int v10 = -[MRClient processIdentifier](v4, "processIdentifier");
    id v11 = (id *)(a1 + 48);
    if (v10 != [*(id *)(a1 + 48) pid]
      && ([*v11 isEntitledFor:64] & 1) == 0)
    {
      uint64_t v13 = _MRLogForCategory(0LL, v12);
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1002B828C((id *)(a1 + 48), v10, v14);
      }

      -[MRClient setProcessIdentifier:](v4, "setProcessIdentifier:", [*v11 pid]);
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[MRClient bundleIdentifier](v4, "bundleIdentifier"));
    if (v15)
    {
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*v11 bundleIdentifier]);
      if ([v15 isEqualToString:v16])
      {
LABEL_16:

        goto LABEL_17;
      }

      unsigned __int8 v17 = [*v11 isEntitledFor:64];

      if ((v17 & 1) == 0)
      {
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*v11 bundleIdentifier]);
        -[MRClient setBundleIdentifier:](v4, "setBundleIdentifier:", v16);
        goto LABEL_16;
      }
    }

void sub_1000CE294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000CE2AC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onQueue_resolveExistingPlayerPath:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CE624( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000CE63C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_queryExistingPlayerPath:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CEBD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000CEBF0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CED00(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForDeviceUID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CEE10(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForGroupLeaderOfDeviceUID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CF024(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc(&OBJC_CLASS___MRPlaybackSessionMigrateEndMessage);
  __int128 v8 = objc_alloc(&OBJC_CLASS___NSError);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  int v10 = -[NSError initWithMRError:format:]( v8,  "initWithMRError:format:",  4LL,  @"%@ has exited in the middle of a migration attempt",  v9);
  id v14 = [v7 initWithRequest:v6 error:v10 playerPath:v5];

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) xpcClientForPlayerPath:v5]);
  uint64_t v12 = MRCreateXPCMessage(0x400000000000009LL);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  MRAddProtobufToXPCMessage(v13, v14);
  [v11 relayXPCMessage:v13 andReply:0];
}

void sub_1000CFD24(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) hasRequestedSupportedCommands])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) supportedRemoteControlCommandsData]);
    [v5 setObject:v6 forKeyedSubscript:kMRSupportedCommandsDataUserInfoKey];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000CFDB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasRequestedLegacyNowPlayingInfo])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contentItemWithOffset:0]);
    if (v7)
    {
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:]( &OBJC_CLASS___MRPlaybackQueueRequest,  "defaultPlaybackQueueRequestWithRange:",  0LL,  1LL));
      unsigned int v9 = (void *)MRContentItemCreateFromRequest(v7, v8);
      id v19 = v9;
      int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
      MRAddContentItemsToUserInfo(v6, v10);

      if (v9)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playbackQueueRequests]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerPath]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 subscriptionControllerForPlayerPath:v12]);

        id v14 = objc_alloc(&OBJC_CLASS___MRPlaybackQueue);
        uint64_t v18 = v9;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
        __int16 v16 = -[MRPlaybackQueue initWithContentItems:location:](v14, "initWithContentItems:location:", v15, 0LL);

        unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue( +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:]( &OBJC_CLASS___MRPlaybackQueueRequest,  "defaultPlaybackQueueRequestWithRange:",  0LL,  1LL));
        [v13 subscribeToPlaybackQueue:v16 forRequest:v17];
      }
    }

    else
    {
      MRAddContentItemsToUserInfo(v6, &__NSArray0__struct);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000CFFB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 playbackQueueRequests]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerPath]);
  id v12 = (id)objc_claimAutoreleasedReturnValue([v8 existingSubscriptionControllerForPlayerPath:v9]);

  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contentItems]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 filteredContentItemsBySubscriptionsForContentItems:v10]);

  MRAddContentItemsToUserInfo(v6, v11);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000D0090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = -[MRPlaybackQueueRequest initFromTransactionName:]( objc_alloc(&OBJC_CLASS___MRPlaybackQueueRequest),  "initFromTransactionName:",  7LL);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playbackQueueRequests]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerPath]);
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 existingSubscriptionControllerForPlayerPath:v9]);

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playbackQueue]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 contentItems]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v12 count]));

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contentItems]);
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472LL;
  id v21 = sub_1000D0264;
  unsigned __int8 v22 = &unk_10039F880;
  id v15 = v7;
  id v23 = v15;
  id v16 = v13;
  id v24 = v16;
  [v10 enumerateFilteredContentItemsBySubscriptionsForContentItems:v14 block:&v19];

  if (objc_msgSend(v16, "count", v19, v20, v21, v22))
  {
    id v17 = -[MRPlaybackQueueRequest initFromTransactionName:]( objc_alloc(&OBJC_CLASS___MRPlaybackQueueRequest),  "initFromTransactionName:",  0LL);
    uint64_t v18 = (void *)MRContentItemsCreateFromRequest(v16, v17);
    MRAddContentItemsToUserInfo(v6, v18);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000D0264(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
}

void sub_1000D039C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v7 = objc_alloc(&OBJC_CLASS___MRDMusicHandoffSession);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = a1 + 40;
    int v10 = -[MRDMusicHandoffSession initWithSource:destination:]( v7,  "initWithSource:destination:",  *(void *)(v8 - 8),  v9);
    (*(void (**)(void))(*(void *)(v8 + 16) + 16LL))();
    uint64_t v37 = 0LL;
    uint64_t v38 = &v37;
    uint64_t v39 = 0x3032000000LL;
    id v40 = sub_1000CCF10;
    uint64_t v41 = sub_1000CCF20;
    id v42 = 0LL;
    uint64_t v31 = 0LL;
    int v32 = &v31;
    uint64_t v33 = 0x3032000000LL;
    uint64_t v34 = sub_1000CCF10;
    id v35 = sub_1000CCF20;
    id v36 = 0LL;
    uint64_t v11 = *(void *)(v8 + 8);
    id v12 = *(dispatch_queue_s **)(v11 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D065C;
    block[3] = &unk_10039F8A8;
    void block[4] = v11;
    id v13 = v5;
    id v27 = v13;
    __int128 v29 = &v37;
    __int128 v30 = &v31;
    id v14 = v10;
    __int128 v28 = v14;
    dispatch_sync(v12, block);
    if (v38[5])
    {
      -[MRDMusicHandoffSession invalidate](v14, "invalidate");
    }

    else
    {
      -[MRDMusicHandoffSession start](v14, "start");
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v8 origin]);
      unsigned int v16 = [v15 isLocallyHosted];
      id v17 = (id *)(v32 + 5);
      if (!v16) {
        id v17 = (id *)v8;
      }
      id v18 = *v17;

      id v19 = objc_alloc(&OBJC_CLASS___MRMusicHandoffSession);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicHandoffSession identifier](v14, "identifier"));
      id v21 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMusicHandoffSession sourcePlayerPath](v14, "sourcePlayerPath"));
      id v22 = [v19 initWithIdentifier:v20 sourcePlayerPath:v21 destinationPlayerPath:v18];

      uint64_t v23 = MRCreateXPCMessage(0x70000000000000ELL);
      id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      MRAddPlayerPathToXPCMessage(v24, v32[5]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v22 protobufData]);
      MRAddDataToXPCMessage(v24, v25, "MRXPC_MUSIC_HANDOFF_SESSION_KEY");

      [v13 relayXPCMessage:v24 andReply:0];
    }

    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v37, 8);
  }
}

void sub_1000D062C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000D065C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) createNowPlayingClient]);
  id v5 = -[MRPlayerPath initWithOrigin:client:player:](v3, "initWithOrigin:client:player:", 0LL, v4, 0LL);
  id v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "onQueue_resolveExistingPlayerPath:", v5));

  if ([v17 isResolved])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_queryExistingPlayerPath:", v17));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerClient]);
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 playerPath]);
      uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      [v8 registerHandoffSession:*(void *)(a1 + 48)];
    }

    else
    {
      uint64_t v14 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 29LL);
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;
    }
  }

  else
  {
    uint64_t v12 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 42LL);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v6 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

uint64_t sub_1000D093C(uint64_t a1, uint64_t a2)
{
  return MRAddOriginsToXPCMessage(a2, *(void *)(a1 + 32));
}

uint64_t sub_1000D0ADC(uint64_t a1, uint64_t a2)
{
  return MRAddOriginToXPCMessage(a2, *(void *)(a1 + 32));
}

uint64_t sub_1000D1770(uint64_t a1, uint64_t a2)
{
  return MRAddErrorToXPCMessage(a2, *(unsigned int *)(a1 + 32));
}

uint64_t sub_1000D1828(uint64_t a1, uint64_t a2)
{
  return MRAddApplicationActivityToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_1000D1AF0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerClient]);
  MRAddPlaybackQueueCapabilitiesToXPCMessage(v5, [v4 playbackQueueCapabilities]);

  MRAddErrorToXPCMessage(v5, [*(id *)(a1 + 32) error]);
}

void sub_1000D1E7C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingClient]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 client]);

  MRAddClientToXPCMessage(v4, v6);
  MRAddErrorToXPCMessage(v4, [*(id *)(a1 + 32) error]);
}

void sub_1000D2010(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_1000D2168(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nowPlayingClient]);

  if (!v3) {
    MRAddErrorToXPCMessage(v4, [*(id *)(a1 + 32) error]);
  }
}

void sub_1000D2264(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerClient]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 player]);

  MRAddPlayerToXPCMessage(v4, v6);
  MRAddErrorToXPCMessage(v4, [*(id *)(a1 + 32) error]);
}

void sub_1000D23DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_1000D2530(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_1000D2614(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerClient]);
  id v7 = v5;
  if (v5) {
    uint64_t v6 = [v5 playbackState];
  }
  else {
    uint64_t v6 = 2LL;
  }
  xpc_dictionary_set_uint64(v4, "MRXPC_PLAYBACK_STATE_KEY", v6);
  MRAddErrorToXPCMessage(v4, [*(id *)(a1 + 32) error]);
}

void sub_1000D3088(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);

  if (v4) {
    MRAddPlayerPathToXPCMessage(v5, *(void *)(a1 + 32));
  }
  else {
    MRAddErrorToXPCMessage(v5, 5LL);
  }
}

uint64_t sub_1000D3354(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerPath]);
  LODWORD(v2) = [v2 isAllowedAccessToDataFromPlayerPath:v3];

  if (!(_DWORD)v2) {
    return 0LL;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerPath]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 origin]);
  unsigned int v6 = [v5 isLocal];

  if (v6) {
    return (uint64_t)[*(id *)(a1 + 40) canBeNowPlaying];
  }
  else {
    return 1LL;
  }
}

int64_t sub_1000D33F0(id a1, MRDNowPlayingClient *a2, MRDNowPlayingClient *a3)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingClient activePlayerClient](a3, "activePlayerClient"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 lastPlayingDate]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingClient activePlayerClient](v4, "activePlayerClient"));

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 lastPlayingDate]);
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

id sub_1000D3488(id a1, MRDNowPlayingClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingClient client](a2, "client"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 data]);

  return v3;
}

void sub_1000D35E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000D3604(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40)));
  id v3 = v2;
  if (!v2)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    int v10 = 5;
LABEL_8:
    *(_DWORD *)(v9 + 24) = v10;
    goto LABEL_14;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 origin]);
  if ([v4 isLocallyHosted])
  {
    unsigned __int8 v5 = [*(id *)(a1 + 48) isEntitledFor:32];

    if ((v5 & 1) == 0)
    {
      uint64_t v7 = _MRLogForCategory(0LL, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1002B8444();
      }

      uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
      int v10 = 3;
      goto LABEL_8;
    }
  }

  else
  {
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) client]);
  if (v11) {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingClientForPlayerPath:*(void *)(a1 + 56)]);
  }
  else {
    uint64_t v12 = 0LL;
  }
  [v3 setExplicitNowPlayingClient:v12];

LABEL_14:
}

void sub_1000D37AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 nowPlayingClient]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 client]);

  MRAddClientToXPCMessage(v3, v5);
}

void sub_1000D3C84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 playerClient]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 player]);

  MRAddPlayerToXPCMessage(v3, v5);
}

NSData *__cdecl sub_1000D3E40(id a1, MRDNowPlayingPlayerClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient playerPath](a2, "playerPath"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 data]);

  return (NSData *)v3;
}

void sub_1000D3F3C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  xpc_object_t xdict = a2;
  MRAddErrorToXPCMessage(xdict, [v3 error]);
  xpc_dictionary_set_BOOL(xdict, "MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY", *(_BYTE *)(a1 + 40));
}

void sub_1000D42B8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v4 = a2;
  MRAddErrorToXPCMessage(v4, v3);
  MRAddDeviceInfoToXPCMessage(v4, *(void *)(a1 + 32));
}

void sub_1000D4354(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 electedPlayerPath]);
  MRAddPlayerPathToXPCMessage(v3, v4);
}

void sub_1000D4494(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  MRAddErrorToXPCMessage(v3, [v2 error]);
}

void sub_1000D4690(_Unwind_Exception *a1)
{
}

void sub_1000D46A8(uint64_t a1, void *a2)
{
  uint64_t v18 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) queryExistingPlayerPathForXPCMessage:*(void *)(a1 + 40) forClient:*(void *)(a1 + 48)]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 unresolvedPlayerPath]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 playerClient]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 supportedRemoteControlCommandsData]);

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 playerClient]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedRemoteControlCommandsData]);
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 originClient]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 origin]);
    else {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v3 originClient]);
    }
    uint64_t v9 = (void *)v13;

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 unresolvedPlayerPath]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 client]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleIdentifier]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 defaultSupportedCommandsDataForClient:v16]);
  }

  if (v10) {
    id v17 = 0LL;
  }
  else {
    id v17 = [v3 error];
  }
  v18[2](v18, v10, v17);
}

void sub_1000D4824(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000D48C8;
  v10[3] = &unk_100399378;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_10013ADE4(v7, v10);
}

void sub_1000D48C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRAddSupportedCommandsDataToXPCMessage();
  MRAddErrorToXPCMessage(v3, [*(id *)(a1 + 40) code]);
}

void sub_1000D4918(uint64_t a1, void *a2)
{
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1000D4BF0;
  v33[3] = &unk_10039FA50;
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  id v34 = v3;
  uint64_t v36 = v4;
  id v35 = *(id *)(a1 + 32);
  id v5 = objc_retainBlock(v33);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) client]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);

  if (((unsigned int (*)(void *, void *))v5[2])(v5, v7))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v8 launchApplicationTimeoutInterval];
    double v10 = v9;

    id v11 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    id v12 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Application <%@> waiting for can be now playing",  v7);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1000D4C78;
    v31[3] = &unk_100399530;
    id v32 = *(id *)(a1 + 40);
    id v13 = [v11 initWithTimeout:v12 reason:v31 handler:v10];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v15 = kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000D4C94;
    v26[3] = &unk_10039FAA0;
    id v16 = v7;
    id v27 = v16;
    id v17 = v13;
    id v28 = v17;
    id v29 = *(id *)(a1 + 48);
    id v30 = *(id *)(a1 + 40);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 addObserverForName:v15 object:0 queue:0 usingBlock:v26]);

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1000D4DC4;
    v21[3] = &unk_10039FAC8;
    double v25 = v10;
    id v22 = v18;
    id v23 = v17;
    id v24 = *(id *)(a1 + 40);
    id v19 = v17;
    id v20 = v18;
    sub_10013B9E8(v16, 0LL, v21, v10);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

unint64_t sub_1000D4BF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) origin]);
    else {
      unint64_t v4 = 0LL;
    }
  }

  return v4;
}

uint64_t sub_1000D4C78(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_1000D4C94(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetClientFromUserInfo(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7 && [*(id *)(a1 + 40) disarm])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000D4D64;
    void v9[3] = &unk_10039FA78;
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void sub_1000D4D64(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id Error = (id)MRMediaRemoteCreateError(a3);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, Error);
}

void sub_1000D4DC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v7 removeObserver:*(void *)(a1 + 32)];
  }

  else
  {
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)((*(double *)(a1 + 56) + *(double *)(a1 + 56)) * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D4EC8;
    block[3] = &unk_100399250;
    id v10 = *(id *)(a1 + 32);
    dispatch_after(v8, &_dispatch_main_q, block);
  }
}

void sub_1000D4EC8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(a1 + 32)];
}

void sub_1000D53BC(uint64_t a1, void *a2)
{
  xpc_object_t xdict = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  [v3 timeIntervalSinceReferenceDate];
  double v5 = v4;

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  if (v6 || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) player])) != 0)
  {
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originClient]);

    if (v13)
    {
      dispatch_time_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originClient]);
      goto LABEL_6;
    }
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerClient]);

  if (v7)
  {
    dispatch_time_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerClient]);
LABEL_6:
    double v9 = v8;
    [v8 timeSincePlaying];
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v10));
    [v11 timeIntervalSinceReferenceDate];
    double v5 = v12;
  }

  xpc_dictionary_set_double(xdict, "MRXPC_TIMESTAMP", v5);
  MRAddErrorToXPCMessage(*(void *)(a1 + 48), [*(id *)(a1 + 40) error]);
}

uint64_t sub_1000D5898(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

uint64_t sub_1000D5A14(uint64_t a1, uint64_t a2)
{
  return MRAddArrayToXPCMessage(a2, "MRXPC_AUDIO_FORMAT_CONTENT_INFO", *(void *)(a1 + 32), &stru_10039FB30);
}

NSData *__cdecl sub_1000D5A34(id a1, MRNowPlayingAudioFormatContentInfo *a2)
{
  return (NSData *)-[MRNowPlayingAudioFormatContentInfo data](a2, "data");
}

void sub_1000D5ACC(uint64_t a1, void *a2)
{
  double v3 = *(double *)(a1 + 32);
  xpc_object_t xdict = a2;
  xpc_dictionary_set_double(xdict, "MRXPC_ARTWORK_DIMENSION_WIDTH_KEY", v3);
  xpc_dictionary_set_double(xdict, "MRXPC_ARTWORK_DIMENSION_HEIGHT_KEY", *(double *)(a1 + 40));
}

id sub_1000D5C20(id a1, MRPlaybackQueueParticipant *a2)
{
  return -[MRPlaybackQueueParticipant protobufData](a2, "protobufData");
}

void sub_1000D5C28(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    double v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v3,  200LL,  0LL,  0LL));
    MRAddDataToXPCMessage(v5, v4, "MRXPC_PLAYBACKQUEUE_PARTICIPANTS");
  }

  MRAddErrorToXPCMessage(v5, [*(id *)(a1 + 40) error]);
}

void sub_1000D5D94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = v6;
  if (v6)
  {
    sub_10013AD7C(*(void **)(a1 + 32), [v6 code]);
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x3032000000LL;
    id v17 = sub_1000CCF10;
    uint64_t v18 = sub_1000CCF20;
    id v19 = 0LL;
    dispatch_time_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000D5EF0;
    v11[3] = &unk_10039FBB8;
    id v13 = &v14;
    id v12 = *(id *)(a1 + 32);
    uint64_t v9 = objc_claimAutoreleasedReturnValue( [v8 addObserverForName:@"MRDMusicHandoffSessionDidFinishNotification" object:v5 queue:0 usingBlock:v11]);
    double v10 = (void *)v15[5];
    void v15[5] = v9;

    _Block_object_dispose(&v14, 8);
  }
}

void sub_1000D5ED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000D5EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"MRDMusicHandoffSessionErrorKey"]);

  unsigned int v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000D5FE8;
  void v9[3] = &unk_100399378;
  id v10 = v6;
  id v11 = v7;
  id v8 = v6;
  sub_10013ADE4(v7, v9);
}

void *sub_1000D5FE8(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result) {
    return (void *)MRAddErrorToXPCMessage(*(void *)(a1 + 40), [result code]);
  }
  return result;
}

void *sub_1000D61E0(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result) {
    return (void *)MRAddErrorToXPCMessage(*(void *)(a1 + 40), [result code]);
  }
  return result;
}

id sub_1000D63CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) startObservingNowPlayingInfoForNowPlayingPlayerClient:*(void *)(a1 + 40)];
}

void sub_1000D699C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
}

void sub_1000D69F8(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);

  uint64_t v7 = MRGetPlayerPathFromUserInfo(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if ([v8 isEqual:*(void *)(a1 + 32)])
  {
    uint64_t v9 = (id *)(a1 + 48);
    id v10 = objc_loadWeakRetained(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 playbackQueue]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 contentItems]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 metadata]);
    id v15 = [v14 mediaType];

    if (v15)
    {
      uint64_t v16 = (dispatch_queue_s *)WeakRetained[9];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_1000D6B50;
      v17[3] = &unk_10039D050;
      void v17[4] = WeakRetained;
      objc_copyWeak(&v18, v9);
      dispatch_async(v16, v17);
      objc_destroyWeak(&v18);
    }
  }
}

void sub_1000D6B50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 wakeDeviceIfNecessaryForNowPlayingPlayerClient:WeakRetained];
}

void sub_1000D6B90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained wakeDeviceIfNecessaryForNowPlayingPlayerClient:v2];
}

id sub_1000D6BE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) wakeDeviceIfNecessaryForNowPlayingPlayerClient:*(void *)(a1 + 40)];
}

BOOL sub_1000D7168(uint64_t a1, void *a2)
{
  return [a2 pid] == *(_DWORD *)(a1 + 32);
}

BOOL sub_1000D7834(uint64_t a1, void *a2)
{
  return [a2 pid] == *(_DWORD *)(a1 + 32);
}

void sub_1000D7AF8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) sortedArrayUsingComparator:&stru_10039FC90]);
  [*(id *)(a1 + 32) setOriginClients:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) origin]);
  [*(id *)(a1 + 32) setActiveOrigin:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) electedPlayerPath]);
  [*(id *)(a1 + 32) setElectedPlayer:v4];

  id v5 = objc_alloc(&OBJC_CLASS___NSString);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) event]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) eventReason]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) selectionReason]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) mostRecentEvent]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) mostRecentEventReason]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) mostRecentSelectionReason]);
  uint64_t v12 = -[NSString initWithFormat:]( v5,  "initWithFormat:",  @"event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>",  v6,  v7,  v8,  v9,  v10,  v11);
  [*(id *)(a1 + 32) setElectedPlayerReason:v12];

  objc_msgSend( *(id *)(a1 + 32),  "setLockScreenWidgetActive:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "isLockScreenWidgetActive"));
  objc_msgSend( *(id *)(a1 + 32),  "setLockScreenWidgetVisible:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "isLockScreenWidgetVisible"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) playerPath]);
  [*(id *)(a1 + 32) setLockScreenPlayerPath:v13];

  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 40) allObjects]);
  [*(id *)(a1 + 32) setOriginForwarders:v14];
}

int64_t sub_1000D7CF0(id a1, MRDNowPlayingOriginClient *a2, MRDNowPlayingOriginClient *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient origin](v4, "origin"));
  unsigned __int8 v7 = [v6 isLocal];

  if ((v7 & 1) != 0)
  {
    int64_t v8 = -1LL;
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient origin](v4, "origin"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 displayName]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient origin](v5, "origin"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 displayName]);
    int64_t v8 = (int64_t)[v10 compare:v12 options:1];
  }

  return v8;
}

uint64_t sub_1000D7EA0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = MRGetPlayerPathFromUserInfo(*(void *)(a1 + 32));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v10 && ![v7 isAllowedAccessToDataFromPlayerPath:v10])
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, id, id, uint64_t))(v11 + 16))(v11, v7, v8, a4);
    }
    else {
      uint64_t v12 = 1LL;
    }
  }

  return v12;
}

BOOL sub_1000D82F8(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return -[MRDMediaRemoteClient isEntitledFor:](a2, "isEntitledFor:", 0x2000LL, a4);
}

uint64_t sub_1000D9308(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return 1LL;
}

id sub_1000D9608(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 hasRequestedLegacyNowPlayingInfo];
  if ((_DWORD)v4 && *(void *)(a1 + 32))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playbackQueueRequests]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionControllerForPlayerPath:*(void *)(a1 + 40)]);

    id v7 = objc_alloc(&OBJC_CLASS___MRPlaybackQueue);
    uint64_t v12 = *(void *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    uint64_t v9 = -[MRPlaybackQueue initWithContentItems:location:](v7, "initWithContentItems:location:", v8, 0LL);

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:]( &OBJC_CLASS___MRPlaybackQueueRequest,  "defaultPlaybackQueueRequestWithRange:",  0LL,  1LL));
    [v6 subscribeToPlaybackQueue:v9 forRequest:v10];
  }

  return v4;
}

BOOL sub_1000D9734(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return !-[MRDMediaRemoteClient hasRequestedLegacyNowPlayingInfo](a2, "hasRequestedLegacyNowPlayingInfo", a3, a4);
}

BOOL sub_1000D992C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playbackQueueRequests]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 existingSubscriptionControllerForPlayerPath:*(void *)(a1 + 32)]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 filteredContentItemsBySubscriptionsForContentItems:*(void *)(a1 + 40)]);
  id v10 = [v9 count];
  if (v10)
  {
    *a4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v12 = _MRLogForCategory(1LL, v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 displayName]);
      id v17 = (void *)MRContentItemsCopyMinimalReadableDescription(v9, 0LL);
      int v18 = 138543874;
      uint64_t v19 = v15;
      __int16 v20 = 2114;
      id v21 = v16;
      __int16 v22 = 2112;
      id v23 = v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %@",  (uint8_t *)&v18,  0x20u);
    }

    MRAddContentItemsToUserInfo(*a4, v9);
  }

  return v10 != 0LL;
}

BOOL sub_1000D9BD0(uint64_t a1, void *a2, uint64_t a3, NSMutableDictionary **a4)
{
  id v6 = a2;
  id v7 = -[MRPlaybackQueueRequest initFromTransactionName:]( objc_alloc(&OBJC_CLASS___MRPlaybackQueueRequest),  "initFromTransactionName:",  7LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 playbackQueueRequests]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 existingSubscriptionControllerForPlayerPath:*(void *)(a1 + 32)]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 40) count]));
  uint64_t v11 = *(void *)(a1 + 40);
  __int16 v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472LL;
  __int16 v22 = sub_1000D9D68;
  id v23 = &unk_10039F880;
  id v12 = v7;
  id v24 = v12;
  id v13 = v10;
  id v25 = v13;
  [v9 enumerateFilteredContentItemsBySubscriptionsForContentItems:v11 block:&v20];
  id v14 = objc_msgSend(v13, "count", v20, v21, v22, v23);
  if (v14)
  {
    id v15 = -[MRPlaybackQueueRequest initFromTransactionName:]( objc_alloc(&OBJC_CLASS___MRPlaybackQueueRequest),  "initFromTransactionName:",  0LL);
    uint64_t v16 = (void *)MRContentItemsCreateFromRequest(v13, v15);
    id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    MRAddContentItemsToUserInfo(v17, v16);
    int v18 = v17;
    *a4 = v18;
  }

  return v14 != 0LL;
}

void sub_1000D9D68(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
}

BOOL sub_1000DA25C(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return 1;
}

BOOL sub_1000DA300(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = -[MRDMediaRemoteClient pid](a2, "pid", a3, a4);
  return v4 == getpid();
}

BOOL sub_1000DA3CC(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = -[MRDMediaRemoteClient pid](a2, "pid", a3, a4);
  return v4 == getpid();
}

BOOL sub_1000DA520(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = -[MRDMediaRemoteClient pid](a2, "pid", a3, a4);
  return v4 == getpid();
}

void sub_1000DA550(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000DA650;
  void v7[3] = &unk_10039B878;
  void v7[4] = *(void *)(a1 + 32);
  id v3 =  [v2 addObserverForName:kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification object:0 queue:0 usingBlock:v7];

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000DA6E4;
  v6[3] = &unk_10039B878;
  void v6[4] = *(void *)(a1 + 32);
  id v5 =  [v4 addObserverForName:MROriginNowPlayingPlaybackQueueNowPlayingItemChangedNotification object:0 queue:0 usingBlock:v6];
}

void sub_1000DA650(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetPlayerPathFromUserInfo(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) playerPath]);
  unsigned int v7 = [v5 isEqual:v6];

  if (v7) {
    [*(id *)(a1 + 32) postLockScreenControlsDidChangeDistributedNotification];
  }
}

void sub_1000DA6E4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetPlayerPathFromUserInfo(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) playerPath]);
  unsigned int v7 = [v5 isEqual:v6];

  if (v7) {
    [*(id *)(a1 + 32) postLockScreenControlsDidChangeDistributedNotification];
  }
}

void sub_1000DA888(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activePlayerClient]);
  unsigned int v3 = [v2 isPlaying];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 playerPath]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 skeleton]);

  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localOriginClient]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 activePlayerClients]);

  id v8 = [v7 countByEnumeratingWithState:&v39 objects:v49 count:16];
  if (v8)
  {
    id v9 = v8;
    LOBYTE(IsAdvancing) = 0;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v7);
        }
        if ((IsAdvancing & 1) != 0) {
          int IsAdvancing = 1;
        }
        else {
          int IsAdvancing = MRMediaRemotePlaybackStateIsAdvancing(objc_msgSend(*(id *)(*((void *)&v39 + 1)
        }
                                                                                 + 8LL * (void)i), "playbackState"));
      }

      id v9 = [v7 countByEnumeratingWithState:&v39 objects:v49 count:16];
    }

    while (v9);
  }

  else
  {
    int IsAdvancing = 0;
  }

  if (qword_1003FDE90 != -1) {
    dispatch_once(&qword_1003FDE90, &stru_10039FDC0);
  }
  if (byte_1003FDE68 != v3)
  {
    uint64_t v14 = _MRLogForCategory(1LL, v13);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    id v17 = (void *)kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName;
    if (v16)
    {
      int v18 = @"Not Playing";
      if (v3) {
        int v18 = @"Playing";
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v44 = kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName;
      __int16 v45 = 2112;
      uint64_t v46 = (uint64_t)v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Posting %@ with <%@>", buf, 0x16u);
    }

    notify_post((const char *)[v17 UTF8String]);
    dispatch_async((dispatch_queue_t)qword_1003FDE88, &stru_10039FDE0);
  }

  id v19 = (id)qword_1003FDE70;
  __int16 v20 = v5;
  if (v19 != v5)
  {
    uint64_t v21 = v19;
    unsigned __int8 v22 = [v19 isEqual:v5];

    if ((v22 & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v24 = _MRLogForCategory(1LL, v23);
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    id v27 = (void *)kMRNowPlayingActivePlayerPathDidChangeDistributedNotificationName;
    if (v26)
    {
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v44 = kMRNowPlayingActivePlayerPathDidChangeDistributedNotificationName;
      __int16 v45 = 2114;
      uint64_t v46 = qword_1003FDE70;
      __int16 v47 = 2114;
      id v48 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>",  buf,  0x20u);
    }

    notify_post((const char *)[v27 UTF8String]);
    id v28 = (dispatch_queue_s *)qword_1003FDE88;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000DAE08;
    block[3] = &unk_100399250;
    id v38 = v5;
    dispatch_async(v28, block);
    __int16 v20 = v38;
  }

LABEL_27:
  if (byte_1003FDE78 != IsAdvancing)
  {
    uint64_t v29 = _MRLogForCategory(1LL, v23);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    id v32 = (void *)kMRNowPlayingActivePlayersIsPlayingDidChangeDistributedNotificationName;
    if (v31)
    {
      uint64_t v33 = @"Not Playing";
      if (IsAdvancing) {
        uint64_t v33 = @"Playing";
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v44 = kMRNowPlayingActivePlayersIsPlayingDidChangeDistributedNotificationName;
      __int16 v45 = 2112;
      uint64_t v46 = (uint64_t)v33;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Posting %@ with <%@>", buf, 0x16u);
    }

    notify_post((const char *)[v32 UTF8String]);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1000DAE58;
    v35[3] = &unk_10039FE00;
    char v36 = IsAdvancing;
    dispatch_async((dispatch_queue_t)qword_1003FDE88, v35);
  }

  byte_1003FDE68 = v3;
  id v34 = (void *)qword_1003FDE70;
  qword_1003FDE70 = (uint64_t)v5;

  byte_1003FDE78 = IsAdvancing;
}

void sub_1000DACDC(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.maybePostDistributedNotifications.serialQueue", v4);
  id v6 = (void *)qword_1003FDE88;
  qword_1003FDE88 = (uint64_t)v5;

  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v8 = (void *)qword_1003FDE80;
  qword_1003FDE80 = v7;

  byte_1003FDE68 = [(id)qword_1003FDE80 BOOLForKey:@"LastNowPlayingAppIsPlayingState"];
  id v9 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1003FDE80 dataForKey:@"_MRDActivePlayerPathDateDefaultsKey"]);
  uint64_t v11 = -[MRPlayerPath initWithData:](v9, "initWithData:", v10);
  id v12 = (void *)qword_1003FDE70;
  qword_1003FDE70 = (uint64_t)v11;

  byte_1003FDE78 = [(id)qword_1003FDE80 BOOLForKey:@"_MRDAnyNowPlayingAppIsPlayingDefaultsKey"];
}

void sub_1000DADE4(id a1)
{
  [(id)qword_1003FDE80 setBool:byte_1003FDE68 == 0 forKey:@"LastNowPlayingAppIsPlayingState"];
}

void sub_1000DAE08(uint64_t a1)
{
  dispatch_queue_attr_t v1 = (void *)qword_1003FDE80;
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) data]);
  [v1 setObject:v2 forKey:@"_MRDActivePlayerPathDateDefaultsKey"];
}

id sub_1000DAE58(uint64_t a1)
{
  return [(id)qword_1003FDE80 setBool:*(unsigned __int8 *)(a1 + 32) forKey:@"_MRDAnyNowPlayingAppIsPlayingDefaultsKey"];
}

id sub_1000DB044(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    dispatch_queue_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

id sub_1000DB114(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

void sub_1000DB3A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40)));
  uint64_t v4 = _MRLogForCategory(0LL, v3);
  dispatch_queue_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v22 = 138543362;
    uint64_t v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Registering origin %{public}@",  (uint8_t *)&v22,  0xCu);
  }

  unsigned int v7 = [*(id *)(a1 + 40) isLocal];
  id v8 = objc_alloc(&OBJC_CLASS___MRDNowPlayingOriginClient);
  if (v7)
  {
    id v9 = -[MRDNowPlayingOriginClient initWithDeviceInfoDataSource:delegate:]( v8,  "initWithDeviceInfoDataSource:delegate:",  *(void *)(*(void *)(a1 + 32) + 48LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned __int8 v11 = [v10 supportMultiplayerHost];

    if ((v11 & 1) == 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[MRDNowPlayingDataSource sharedDataSource]( &OBJC_CLASS___MRDNowPlayingDataSource,  "sharedDataSource"));
      -[MRDNowPlayingOriginClient setNowPlayingDataSource:](v9, "setNowPlayingDataSource:", v12);
    }

    [*(id *)(a1 + 32) setLocalOriginClient:v9];
  }

  else
  {
    id v9 = -[MRDNowPlayingOriginClient initWithOrigin:deviceInfo:delegate:]( v8,  "initWithOrigin:deviceInfo:delegate:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 32));
    if ([*(id *)(a1 + 40) isLocallyHosted])
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      unsigned int v14 = [v13 supportMultiplayerHost];

      if (v14)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[MRDNowPlayingDataSource sharedDataSource]( &OBJC_CLASS___MRDNowPlayingDataSource,  "sharedDataSource"));
        -[MRDNowPlayingOriginClient setNowPlayingDataSource:](v9, "setNowPlayingDataSource:", v15);
      }
    }
  }

  BOOL v16 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v16)
  {
    id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 16);
    *(void *)(v18 + 16) = v17;

    BOOL v16 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  [v16 addObject:v9];
  if (*(_BYTE *)(a1 + 56)) {
    [*(id *)(a1 + 32) postOriginDidRegister:*(void *)(a1 + 40) handler:0];
  }
  __int16 v20 = *(void **)(a1 + 32);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient deviceInfo](v9, "deviceInfo"));
  [v20 handleNowPlayingOriginClient:v9 deviceInfoDidChange:v21 previousDeviceInfo:0];
}

void sub_1000DB670(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40)));
  uint64_t v4 = _MRLogForCategory(0LL, v3);
  dispatch_queue_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unregistering origin %{public}@", buf, 0xCu);
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_activeOriginClient"));
  if (v2 == v7)
  {
    uint64_t v9 = _MRLogForCategory(0LL, v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v29 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Removing active origin %{public}@. Setting active origin to the local one.",  buf,  0xCu);
    }

    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
    objc_msgSend(v12, "_onQueue_setActiveOrigin:saveState:", v13, 0);
  }

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v2 nowPlayingClients]);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v15 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      uint64_t v18 = 0LL;
      do
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v23 + 1) + 8 * (void)v18) client]);
        [v2 removeNowPlayingClientForClient:v19];

        uint64_t v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v16);
  }

  __int16 v20 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  int v22 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);
  [v20 postOriginDidUnRegister:v21 deviceInfo:v22 handler:0];

  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v2];
}

id sub_1000DBA2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_setActiveOrigin:saveState:", *(void *)(a1 + 40), 1);
}

id sub_1000DC6E8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = MRIDSCompanionConnectionDeviceDidConnect;
  dispatch_queue_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRIDSCompanionConnection sharedManager](&OBJC_CLASS___MRIDSCompanionConnection, "sharedManager"));
  [v2 addObserver:v3 selector:"_handleCompanionDeviceConnectedNotification:" name:v4 object:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v6 addObserver:*(void *)(a1 + 32) selector:"_handleExternalDeviceConnectionStateDidChangeNotification:" name:kMRExternalDeviceConnectionStateDidChangeNotification object:0];

  return [*(id *)(a1 + 32) _maybeAttemptToDiscoverAndConnectToCompanionWithReason:@"Startup"];
}

void sub_1000DCA84(_Unwind_Exception *a1)
{
}

id sub_1000DCAA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _maybeAttemptToDiscoverAndConnectToCompanionWithReason:@"Try again"];
}

void sub_1000DCAB8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 controllerDidUndiscoverCompanion:*(void *)(a1 + 32)];
}

void sub_1000DCAF8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 controller:*(void *)(a1 + 32) didDiscoverCompanion:*(void *)(a1 + 40)];
}

void sub_1000DCCA0(_Unwind_Exception *a1)
{
}

void sub_1000DCF90(_Unwind_Exception *a1)
{
}

void sub_1000DCFB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  if (v5)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 17LL) = 1;
    [*(id *)(a1 + 32) setCompanionEndpoint:v5];
    uint64_t v10 = _MRLogForCategory(9LL, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 32)];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 134218242;
      uint64_t v30 = v14;
      __int16 v31 = 2112;
      uint64_t v32 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRCompanionConnectionController] Discovered companion endpoint in <%lf> seconds. Attempting to connect because <%@>",  buf,  0x16u);
    }

    uint64_t v27 = MREndpointConnectionReasonUserInfoKey;
    id v28 = @"discoverAndConnectToCompanion";
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000DD208;
    v25[3] = &unk_10039FE50;
    id v16 = *(void **)(a1 + 40);
    void v25[4] = *(void *)(a1 + 32);
    id v26 = v16;
    [v5 connectToExternalDeviceWithUserInfo:v15 completion:v25];
  }

  else
  {
    uint64_t v17 = _MRLogForCategory(9LL, v8);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1002B84E0((uint64_t)v6, v18, v19, v20, v21, v22, v23, v24);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 40LL), a3);
    [*(id *)(a1 + 32) setCompanionEndpoint:0];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
  objc_sync_exit(v7);
}

void sub_1000DD1DC(_Unwind_Exception *a1)
{
}

void sub_1000DD208(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  if (v4)
  {
    uint64_t v7 = _MRLogForCategory(9LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002B8544((uint64_t)v4, v8, v9, v10, v11, v12, v13, v14);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 40LL), a2);
    [*(id *)(a1 + 32) setCompanionEndpoint:0];
  }

  else
  {
    uint64_t v15 = _MRLogForCategory(9LL, v6);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v17 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 32)];
      uint64_t v18 = *(void *)(a1 + 40);
      int v20 = 134218242;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      uint64_t v23 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[MRCompanionConnectionController] Connected to companion endpoint in <%lf> seconds because <%@>",  (uint8_t *)&v20,  0x16u);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 17LL) = 0;
  objc_sync_exit(v5);
}

void sub_1000DD378(_Unwind_Exception *a1)
{
}

void sub_1000DD518(_Unwind_Exception *a1)
{
}

void sub_1000DD58C()
{
  if ((_set_user_dir_suffix("com.apple.mediaremoted") & 1) == 0
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_1002B85A8();
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v0 = NSTemporaryDirectory();
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
    int v2 = 138412290;
    uint64_t v3 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Temporary directory set to %@",  (uint8_t *)&v2,  0xCu);
  }

uint64_t sub_1000DD90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _MRLogForCategory(1LL, a2);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
    int v8 = 138543618;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingClient] Setting pid for %{public}@ to %d",  (uint8_t *)&v8,  0x12u);
  }

  [*(id *)(a1 + 40) setProcessIdentifier:a2];
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_1000DDD40(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 playerPath]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 player]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 displayName]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v4 playerPath]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 player]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 displayName]);
  id v11 = [v7 compare:v10 options:1];

  return (uint64_t)v11;
}

void sub_1000DDED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000DDEE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DDEF8(uint64_t a1)
{
}

void sub_1000DDF00(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000DE2E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

void sub_1000DE3CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DE3E4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000DE4D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DE4E8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activePlayerClient]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 playerPath]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

id sub_1000DE5E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

id sub_1000DE698(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) client]);
  [v2 mergeFrom:*(void *)(a1 + 40)];

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

void sub_1000DE794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DE7AC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) client]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000DE87C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_setActivePlayerClient:", *(void *)(a1 + 40));
}

void sub_1000DEAFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DEB14(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_activePlayerClient"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000DEBCC(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000DED28;
  v12[3] = &unk_10039E258;
  void v12[4] = *(void *)(a1 + 32);
  uint64_t v2 = objc_retainBlock(v12);
  int v3 = ((uint64_t (*)(void))v2[2])();
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v5 + 25) != v3)
  {
    int v6 = v3;
    *(_BYTE *)(v5 + 25) = v3;
    uint64_t v7 = _MRLogForCategory(1LL, v4);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = @"false";
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32LL);
      if (v6) {
        uint64_t v9 = @"true";
      }
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      uint64_t v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@",  buf,  0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
    [WeakRetained nowPlayingPlayerClient:*(void *)(a1 + 32) clientCanBeNowPlayingDidChange:*(unsigned __int8 *)(*(void *)(a1 + 32) + 25)];
  }
}

BOOL sub_1000DED28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 26)) {
    return *(_BYTE *)(v1 + 24) != 0;
  }
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(v1 + 16);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      int v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v6),  "canBeNowPlayingPlayer",  (void)v8))
        {

          return 1LL;
        }

        int v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  return 0LL;
}

id sub_1000DEE9C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 26LL) = *(_BYTE *)(a1 + 40);
  return [*(id *)(a1 + 32) _reevaluateCanBeNowPlaying];
}

id sub_1000DEF0C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = *(_BYTE *)(a1 + 40);
  return [*(id *)(a1 + 32) _reevaluateCanBeNowPlaying];
}

void sub_1000DEFB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000DEFC8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 25LL);
  return result;
}

void sub_1000DF090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DF0A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 26))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)v2 activePlayerClient]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 canBeNowPlayingPlayerTimestamp]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(v2 + 40));
}

void sub_1000DF1A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000DF1B8(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_anyPlayerIsPlaying");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000DF3A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 27) != v2)
  {
    *(_BYTE *)(v1 + 27) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
    [WeakRetained nowPlayingClient:*(void *)(a1 + 32) applicationDidForeground:*(unsigned __int8 *)(*(void *)(a1 + 32) + 27)];
  }

void sub_1000DF4E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000DF4FC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_playerClientForPlayer:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000DF8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000DF8F8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_onQueue_existingPlayerClientForPlayer:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000DFAE8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_removePlayerClientForPlayer:", *(void *)(a1 + 40));
}

void sub_1000DFC20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DFC38(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend( *(id *)(*((void *)&v7 + 1) + 8 * (void)i),  "hasNowPlayingData",  (void)v7))
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

LABEL_51:
  pushStateClient = self->_pushStateClient;
  self->_pushStateClient = 0LL;

  -[MRDNowPlayingClient setPushStateActivePlayerClient:](self, "setPushStateActivePlayerClient:", 0LL);
}
        }

        id v55 = [&off_1003BBB70 countByEnumeratingWithState:&v79 objects:v96 count:16];
      }

      while (v55);
      if (v56 == 4) {
        val[9] = (id)((unint64_t)val[9] | 4);
      }
    }
  }

  id v68 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(val[20], "connection", v70));
  xpc_connection_resume(v68);

  objc_destroyWeak(v72);
  objc_destroyWeak(v71);
  objc_destroyWeak(location);

LABEL_56:
  return v75;
}

      char v75 = sub_100156B68(&qword_1003F8EE8);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56LL))(v9, 1LL, 1LL, v75);
      __int16 v45 = 0LL;
    }

    v73 = *(void *)(v101 + 8 * v74);
    if (v73)
    {
LABEL_40:
      __int16 v72 = v74;
LABEL_37:
      __int16 v45 = (v73 - 1) & v73;
      uint64_t v66 = __clz(__rbit64(v73)) + (v72 << 6);
      v110 = v72;
      continue;
    }

    break;
  }

  while (1)
  {
    __int16 v72 = v74 + 1;
    if (__OFADD__(v74, 1LL)) {
      break;
    }
    if (v72 >= v102)
    {
      v110 = v99;
      goto LABEL_51;
    }

    v73 = *(void *)(v101 + 8 * v72);
    ++v74;
    if (v73) {
      goto LABEL_37;
    }
  }

  v73 = v0[23];
  char v74 = sub_1002261E4((uint64_t)_swiftEmptyArrayStorage, v53);
  v0[28] = v74;
  swift_bridgeObjectRelease();
  char v75 = sub_100222CE0((uint64_t)_swiftEmptyArrayStorage, &qword_1003FB540);
  __int128 v76 = v75;
  if (v73)
  {
    v148 = v75;
    v141 = v74;
    __int128 v77 = v0[27];
    __int128 v78 = 0LL;
    __int128 v79 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      char v81 = v0[26];
      char v82 = v0[13];
      v83 = (char *)v0[10];
      id v84 = *(v79 - 1);
      v85 = *v79;
      swift_bridgeObjectRetain_n(*v79, 2LL);
      sub_100224DA8(v81, v84, v85, v83);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v83, 1LL, v82) == 1)
      {
        v80 = v0[10];
        swift_bridgeObjectRelease();
        sub_1001603DC(v80, &qword_1003FB480);
      }

      else
      {
        id v86 = v0[17];
        v145 = v77;
        v87 = v0[15];
        id v88 = v0[13];
        (*(void (**)(uint64_t, void, uint64_t))(v137 + 32))(v87, v0[10], v88);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(v86, v87, v88);
        v89 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
        id v90 = v84;
        unsigned __int8 v91 = sub_10022275C(v86);
        id v92 = swift_isUniquelyReferenced_nonNull_native(v148);
        sub_100227360((uint64_t)v91, v90, v85, v92);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v93 = v87;
        __int128 v77 = v145;
        (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v93, v88);
      }

      ++v78;
      v79 += 2;
    }

    while (v78 != v0[23]);
    swift_bridgeObjectRelease();
    char v74 = v141;
    __int128 v76 = v148;
  }

  uint64_t v95 = (void **)v0[21];
  char v94 = v0[22];
  id v96 = swift_bridgeObjectRelease();
  uint64_t v97 = static os_log_type_t.default.getter(v96);
  char v98 = *v95;
  v99 = swift_allocObject(v94, 72LL, 7LL);
  *(_OWORD *)(v99 + 16) = xmmword_10034BE40;
  id v100 = v74[2];
  *(void *)(v99 + 56) = &type metadata for Int;
  *(void *)(v99 + 64) = &protocol witness table for Int;
  *(void *)(v99 + 32) = v100;
  uint64_t v101 = v98;
  os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v101, "[MRDRRC].MBM missing: (%ld)", v131);
  swift_bridgeObjectRelease();

  v102 = *((_BYTE *)v74 + 32);
  *((_BYTE *)v0 + 296) = v102;
  v103 = -1LL;
  id v104 = -1LL << v102;
  v105 = v74[7];
  if (-v104 < 64) {
    v103 = ~(-1LL << -(char)v104);
  }
  v0[29] = v76;
  v106 = v103 & v105;
  if (v106)
  {
    v107 = 0LL;
    v108 = __clz(__rbit64(v106));
    v109 = (v106 - 1) & v106;
    __int128 v7 = (void *)v0[28];
LABEL_62:
    v0[30] = v107;
    v0[31] = v109;
    v110 = (void *)v0[9];
    v111 = (uint64_t *)(v7[6] + 16 * v108);
    v112 = *v111;
    v0[32] = *v111;
    v113 = v111[1];
    v0[33] = v113;
    v114 = *(int **)((swift_isaMask & *v110) + 0xC8LL);
    v115 = v114[1];
    v149 = (uint64_t (*)(uint64_t, uint64_t))((char *)v114 + *v114);
    swift_bridgeObjectRetain();
    v116 = (void *)swift_task_alloc(v115);
    v0[34] = v116;
    *v116 = v0;
    v116[1] = sub_100224498;
    return v149(v112, v113);
  }

  uint64_t v16 = 63 - v104;
  __int128 v7 = (void *)v0[28];
  if (v16 > 0x7F)
  {
    v118 = v7[8];
    if (v118)
    {
      v107 = 1LL;
LABEL_66:
      v109 = (v118 - 1) & v118;
      v108 = __clz(__rbit64(v118)) + (v107 << 6);
      goto LABEL_62;
    }

    if (v16 >= 0xC0)
    {
      v118 = v7[9];
      if (v118)
      {
        v107 = 2LL;
        goto LABEL_66;
      }

      if (v16 >= 0x100)
      {
        v118 = v7[10];
        if (v118)
        {
          v107 = 3LL;
          goto LABEL_66;
        }

        goto LABEL_81;
      }
    }
  }

void sub_1000E0810(id a1)
{
  id v1 = -[MRDMediaRemoteServer _init](objc_alloc(&OBJC_CLASS___MRDMediaRemoteServer), "_init");
  id v2 = (void *)qword_1003FDE98;
  qword_1003FDE98 = (uint64_t)v1;
}

id sub_1000E0C64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _terminationHandler];
}

void sub_1000E0C6C(id a1, int a2)
{
  uint64_t v2 = _MRLogForCategory(0LL, *(void *)&a2);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received AppleLanguagePreferencesChangedNotification. Will tell libxpc to kill us once we're clean. Will invalidat e MROSTransactions.",  buf,  2u);
  }

  uint64_t v4 = xpc_transaction_exit_clean();
  MRInvalidateTransactions(v4);
  uint64_t v6 = _MRLogForCategory(0LL, v5);
  __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received AppleLanguagePreferencesChangedNotification. Did tell libxpc to kill us once we're clean. Did invalidate MROSTransactions.",  v8,  2u);
  }
}

AVOutputContext *__cdecl sub_1000E0D24(id a1)
{
  id v1 = (void *)MRMediaRemoteCopyDeviceUID(a1);
  if (v1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 outputContextForOutputDeviceUID:v1]);
  }

  else
  {
    id v3 = 0LL;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 avOutputContext]);

  return (AVOutputContext *)v4;
}

void sub_1000E0D9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  if (string)
  {
    uint64_t v5 = string;
    if (strcmp("com.apple.ProximityControl.LockScreenDiscovery", string))
    {
      *(double *)&uint64_t v7 = COERCE_DOUBLE(xpc_dictionary_get_uint64(v3, "_State"));
      uint64_t v9 = _MRLogForCategory(0LL, v8);
      __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 136315138;
        uint64_t v30 = (uint64_t)v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received DACP command '%s'.",  (uint8_t *)&v29,  0xCu);
      }

      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) activeOriginClient]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 origin]);

      if (!strcmp("com.apple.AirTunes.DACP.nextitem", v5))
      {
        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 4LL;
      }

      else if (!strcmp("com.apple.AirTunes.DACP.previtem", v5))
      {
        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 5LL;
      }

      else if (!strcmp("com.apple.AirTunes.DACP.pause", v5))
      {
        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 1LL;
      }

      else if (!strcmp("com.apple.AirTunes.DACP.play", v5))
      {
        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 0LL;
      }

      else if (!strcmp("com.apple.AirTunes.DACP.repeatadv", v5))
      {
        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 7LL;
      }

      else
      {
        if (strcmp("com.apple.AirTunes.DACP.shuffletoggle", v5))
        {
          if (!strcmp("com.apple.AirTunes.DACP.volumeup", v5))
          {
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
            uint64_t v19 = v22;
            int v24 = 1031798784;
          }

          else
          {
            if (strcmp("com.apple.AirTunes.DACP.volumedown", v5))
            {
              if (!strcmp("com.apple.AirTunes.DACP.mutetoggle", v5))
              {
                uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
                [v19 toggleActiveCategoryMuted];
              }

              else
              {
                if (strcmp("com.apple.AirTunes.DACP.devicevolume", v5))
                {
                  if (!strcmp("com.apple.AirTunes.DACP.devicevolumechanged", v5))
                  {
                    uint64_t v15 = _MRLogForCategory(0LL, v14);
                    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                    {
                      int v29 = 134217984;
                      uint64_t v30 = v7;
                      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "System volume was set to %f",  (uint8_t *)&v29,  0xCu);
                    }
                  }

                  goto LABEL_30;
                }

                double v25 = *(double *)&v7;
                uint64_t v26 = _MRLogForCategory(0LL, v13);
                uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  int v29 = 134217984;
                  uint64_t v30 = v7;
                  _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Setting volume to %f",  (uint8_t *)&v29,  0xCu);
                }

                uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
                *(float *)&double v28 = v25;
                [v19 setActiveCategoryVolumeTo:v28];
              }

              goto LABEL_22;
            }

            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
            uint64_t v19 = v22;
            int v24 = -1115684864;
          }

          LODWORD(v23) = v24;
          [v22 changeActiveCategoryVolumeBy:v23];
LABEL_22:

LABEL_30:
          goto LABEL_31;
        }

        int v20 = *(void **)(a1 + 32);
        uint64_t v21 = 6LL;
      }

      [v20 _sendMediaRemoteCommand:v21 withOrigin:v12];
      goto LABEL_30;
    }

    uint64_t v17 = _MRLogForCategory(0LL, v6);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Received Proximity event.",  (uint8_t *)&v29,  2u);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nowPlayingServer]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v12 lockScreenRoutingController]);
    [v19 startObservationIfNeeded];
    goto LABEL_22;
  }

LABEL_31:
}

  sub_10016031C(v9);
  swift_beginAccess(v38, v41, 33LL, 0LL);
  if (*(void *)(*(void *)v38 + 16LL))
  {
    __int16 v31 = v37[2];
    if (v31)
    {
      swift_bridgeObjectRetain(v37);
      uint64_t v32 = v37 + 5;
      do
      {
        id v34 = *(v32 - 1);
        uint64_t v33 = *v32;
        swift_bridgeObjectRetain(*v32);
        sub_10015CCDC(v34, v33);
        char v36 = v35;
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease(v36);
        v32 += 2;
        --v31;
      }

      while (v31);
      swift_bridgeObjectRelease(v37);
    }
  }

  swift_endAccess(v41);
  swift_bridgeObjectRelease(v37);
  swift_release(v7);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        swift_once(&qword_1004057A0, sub_1002A8A40);
        goto LABEL_18;
      }
    }
  }

void sub_1000E1190(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 object]);
  [v2 _removeClient:v3];
}

void sub_1000E145C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000E1488(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection)
  {
    [*(id *)(a1 + 32) _clientDidOpenConnection:v3];
  }

  else if (v3 == &_xpc_error_connection_invalid)
  {
    string = xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
    uint64_t v7 = _MRLogForCategory(0LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      __int128 v10 = string;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "XPC Error: %s", (uint8_t *)&v9, 0xCu);
    }
  }

  objc_autoreleasePoolPop(v4);
}

uint64_t sub_1000E15A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E15B4(uint64_t a1)
{
}

void sub_1000E15BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 152);
  *(void *)(v2 + 152) = 0LL;
}

void sub_1000E1794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000E17AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding client %{public}@", buf, 0xCu);
  }

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 128LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 pid]));
  [v7 setObject:v6 forKey:v8];

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 expectedClientAuditTokens]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));
  id v12 = [v11 mutableCopy];

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) auditToken]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v12 containsObject:v13];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) auditToken]);
  [v12 removeObject:v14];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 allObjects]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v16 setExpectedClientAuditTokens:v15];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 128), "allValues", 0));
  id v19 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v21) {
          objc_enumerationMutation(v18);
        }
        double v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v25 + 1) + 8 * (void)i) auditToken]);
        [v17 addObject:v23];
      }

      id v20 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v20);
  }

  int v24 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v24 setConnectedClientAuditTokens:v17];
}

void sub_1000E1AD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 128) objectForKey:v2]);
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing client %{public}@", buf, 0xCu);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "allValues", 0));
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) auditToken]);
        [v7 addObject:v13];

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v10);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  [v14 setConnectedClientAuditTokens:v7];
}

void sub_1000E1D84(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 128LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000E1EC4(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  uint64_t v3 = *(void **)(a1[4] + 128LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000E1F38;
  v6[3] = &unk_10039FF78;
  id v4 = v2;
  uint64_t v5 = a1[6];
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000E1F38(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

int64_t sub_1000E2438(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient snapshotForIsPlaying:](a2, "snapshotForIsPlaying:", 1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 date]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingPlayerClient snapshotForIsPlaying:](v4, "snapshotForIsPlaying:", 1LL));

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 date]);
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

void sub_1000E258C(uint64_t a1)
{
  id v11 = [*(id *)(*(void *)(a1 + 32) + 128) mutableCopy];
  uint64_t v2 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", getpid());
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v3]);

  if (v4)
  {
    uint64_t v5 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", getpid());
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v11 removeObjectForKey:v6];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v11 allValues]);
  id v8 = [v7 mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (v4) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) insertObject:v4 atIndex:0];
  }
}

void sub_1000E28C4(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 152LL);
  if (v1)
  {
    id v2 = objc_retainBlock(*(id *)(a1 + 40));
    [v1 addObject:v2];
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000E296C;
    block[3] = &unk_100399EC0;
    id v4 = *(id *)(a1 + 40);
    dispatch_async(&_dispatch_main_q, block);
  }

uint64_t sub_1000E296C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E2AE4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.mediaremoted.notificationQueue", v4);
  uint64_t v3 = (void *)qword_1003FDEB0;
  qword_1003FDEB0 = (uint64_t)v2;
}

void sub_1000E2B34(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v3 = (NSMutableDictionary *)[v2 mutableCopy];
  }
  else {
    uint64_t v3 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  1LL);
  }
  id v4 = v3;
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  *(void *)(v1 + 40),  @"_MROriginatingNotification");
  uint64_t v43 = (uint64_t *)(v1 + 40);
  if (*(void *)(v1 + 48))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(v1 + 56) + 40), "augmentedUserInfoForPlayerPath:"));
    -[NSMutableDictionary addEntriesFromDictionary:](v4, "addEntriesFromDictionary:", v6);
  }

  uint64_t v7 = _MRLogForCategory(0LL, v5);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_1002B8754(v43, v8, v9);
  }

  uint64_t v11 = _MRLogForCategory(0LL, v10);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_1002B86CC((uint64_t)v4, v12);
  }

  id v13 = [[MRNotification alloc] initWithNotification:*(void *)(v1 + 40) userInfo:v4];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) allClients]);
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id obj = v14;
  id v15 = [v14 countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (!v15)
  {
LABEL_27:
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v13 notification]);
    char v36 = (void *)objc_claimAutoreleasedReturnValue([v13 userInfo]);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[MRMediaRemoteServiceClient sharedServiceClient]( &OBJC_CLASS___MRMediaRemoteServiceClient,  "sharedServiceClient"));
    MRNotificationServiceClientPostNotificationCallback(v35, v36, v37, 0LL);

    goto LABEL_28;
  }

  id v17 = v15;
  id v44 = v13;
  char v18 = 0;
  uint64_t v19 = *(void *)v48;
  *(void *)&__int128 v16 = 138412546LL;
  __int128 v38 = v16;
  uint64_t v41 = v1;
  __int128 v42 = v4;
  do
  {
    for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v48 != v19) {
        objc_enumerationMutation(obj);
      }
      uint64_t v21 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
      unsigned __int8 v22 = objc_msgSend(v21, "isMediaRemoteDaemon", v38);
      uint64_t v23 = *(void *)(v1 + 64);
      if (!v23) {
        goto LABEL_23;
      }
      id v46 = 0LL;
      int v24 = (*(uint64_t (**)(uint64_t, void *, NSMutableDictionary *, id *))(v23 + 16))(v23, v21, v4, &v46);
      id v25 = v46;
      __int128 v26 = v25;
      if (!v24) {
        goto LABEL_24;
      }
      if (v25)
      {
        id v27 = -[NSMutableDictionary mutableCopy](v4, "mutableCopy");
        [v27 addEntriesFromDictionary:v26];
        id v28 = [[MRNotification alloc] initWithNotification:*v43 userInfo:v27];
        uint64_t v30 = _MRLogForCategory(0LL, v29);
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = *v43;
          __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v21 displayName]);
          *(_DWORD *)__int128 buf = v38;
          uint64_t v54 = v39;
          __int16 v55 = 2112;
          __int128 v56 = v40;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "Posting Custom Notification %@ to %@",  buf,  0x16u);
        }

        uint64_t v33 = _MRLogForCategory(0LL, v32);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          sub_1002B865C(v51, (uint64_t)v27, &v52, v34);
        }

        [v21 postNotification:v28];
        uint64_t v1 = v41;
        id v4 = v42;
      }

      else
      {
LABEL_23:
        [v21 postNotification:v44];
        __int128 v26 = 0LL;
      }

void sub_1000E2F94(uint64_t a1, void *a2, void *a3)
{
  id v15 = a3;
  id v5 = a2;
  uint64_t v6 = MRGetPlayerPathFromUserInfo(v15);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v15) {
    id v8 = (NSMutableDictionary *)[v15 mutableCopy];
  }
  else {
    id v8 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  1LL);
  }
  uint64_t v9 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 nowPlayingServer]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 augmentedUserInfoForPlayerPath:v7]);
  -[NSMutableDictionary addEntriesFromDictionary:](v9, "addEntriesFromDictionary:", v12);

  id v13 = *(void **)(a1 + 32);
  id v14 = [[MRNotification alloc] initWithNotification:v5 userInfo:v9];

  [v13 postNotification:v14];
}

id sub_1000E321C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  dispatch_queue_t v2 = *(void **)(*(void *)(a1 + 32) + 128LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000E3274;
  v4[3] = &unk_1003A0008;
  void v4[4] = v1;
  return [v2 enumerateKeysAndObjectsUsingBlock:v4];
}

void sub_1000E3274(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication(v7);

  if (IsSystemMediaApplication)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

id sub_1000E33A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  dispatch_queue_t v2 = *(void **)(*(void *)(a1 + 32) + 128LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000E3400;
  v4[3] = &unk_1003A0008;
  void v4[4] = v1;
  return [v2 enumerateKeysAndObjectsUsingBlock:v4];
}

void sub_1000E3400(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
  int IsSystemPodcastApplication = MRMediaRemoteApplicationIsSystemPodcastApplication(v7);

  if (IsSystemPodcastApplication)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

void sub_1000E3544(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkClient);
  dispatch_queue_t v2 = (void *)qword_1003FDEB8;
  qword_1003FDEB8 = (uint64_t)v1;

  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.mediaremote.companionLinkClient", v4);
  [(id)qword_1003FDEB8 setDispatchQueue:v5];

  [(id)qword_1003FDEB8 setInvalidationHandler:&stru_1003A0048];
  [(id)qword_1003FDEB8 setInterruptionHandler:&stru_1003A0068];
  dispatch_semaphore_t v6 = dispatch_semaphore_create(0LL);
  uint64_t v7 = (void *)qword_1003FDEB8;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000E36D4;
  void v9[3] = &unk_100399508;
  dispatch_semaphore_t v10 = v6;
  id v8 = v6;
  [v7 activateWithCompletion:v9];
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1000E364C(id a1)
{
  uint64_t v2 = _MRLogForCategory(0LL, v1);
  dispatch_queue_attr_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1002B87C0();
  }
}

void sub_1000E3690(id a1)
{
  uint64_t v2 = _MRLogForCategory(0LL, v1);
  dispatch_queue_attr_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1002B87EC();
  }
}

void sub_1000E36D4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(0LL, v3);
    dispatch_semaphore_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B8818((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000E3E00(uint64_t a1, uint64_t a2)
{
  id v3 = (id)MRCreateDiagnosticFromXPCMessage(a2);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000E4370(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_1000E443C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRGetVolumeMutedResultMessage alloc] initWithMuted:*(unsigned __int8 *)(a1 + 32)];
  MRAddProtobufToXPCMessage(v3, v4);
}

uint64_t sub_1000E455C(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

uint64_t sub_1000E47C8(uint64_t a1, unsigned int a2)
{
  return sub_10013AB4C(*(void **)(a1 + 32), (uint64_t)"MRXPC_BOOL_RESULT_KEY", 2LL, a2, 0LL);
}

void sub_1000E47E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _MRLogForCategory(0LL, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B88D4((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
      char v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"System Media Wake - %@",  v17));
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, [v5 takeAssertionAndBlessForReason:v18]);

      goto LABEL_7;
    }

    uint64_t v19 = _MRLogForCategory(0LL, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1002B88A8();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_7:
}

uint64_t sub_1000E4CB4(uint64_t a1, unsigned int a2)
{
  return sub_10013AB4C(*(void **)(a1 + 32), (uint64_t)"MRXPC_BOOL_RESULT_KEY", 2LL, a2, 0LL);
}

void sub_1000E4EF0(uint64_t a1, xpc_object_t xdict)
{
}

void sub_1000E4FEC(id *a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "** Beginning Diagnostic Collection **", buf, 2u);
  }

  uint64_t v6 = _MRLogForCategory(0LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Main Server **",  buf,  2u);
  }

  [a1[4] collectDiagnostic:a1[5]];
  uint64_t v9 = _MRLogForCategory(0LL, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for UI Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 11) collectDiagnostic:a1[5]];
  uint64_t v12 = _MRLogForCategory(0LL, v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Now Playing Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 5) collectDiagnostic:a1[5]];
  uint64_t v15 = _MRLogForCategory(0LL, v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Remote Control Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 7) collectDiagnostic:a1[5]];
  uint64_t v18 = _MRLogForCategory(0LL, v17);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Browsable Content Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 8) collectDiagnostic:a1[5]];
  uint64_t v21 = _MRLogForCategory(0LL, v20);
  unsigned __int8 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for External Device Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 9) collectDiagnostic:a1[5]];
  uint64_t v24 = _MRLogForCategory(0LL, v23);
  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Routing Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 10) collectDiagnostic:a1[5]];
  uint64_t v27 = _MRLogForCategory(0LL, v26);
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Group Session Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 22) collectDiagnostic:a1[5]];
  uint64_t v30 = _MRLogForCategory(0LL, v29);
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Virtual Audio Input Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 13) collectDiagnostic:a1[5]];
  uint64_t v33 = _MRLogForCategory(0LL, v32);
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Transaction Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 14) collectDiagnostic:a1[5]];
  uint64_t v36 = _MRLogForCategory(0LL, v35);
  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "** Collecting Diagnostic for Media Control Server **",  buf,  2u);
  }

  [*((id *)a1[4] + 12) collectDiagnostic:a1[5]];
  id v38 = a1[4];
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_1000E5454;
  v39[3] = &unk_1003A0128;
  id v40 = a1[6];
  id v41 = a1[5];
  [v38 _handleCollectClientDiagnosticsMessageWithCompletion:v39];
}

void sub_1000E5454(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "** Diagnostic Complete **", buf, 2u);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000E5530;
  void v9[3] = &unk_100399378;
  id v7 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = v3;
  id v8 = v3;
  sub_10013ADE4(v7, v9);
}

void sub_1000E5530(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 createDiagnosticInfo]);
  uint64_t v5 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 diagnosticInfo]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) diagnosticInfo]);
  id v8 = -[NSString initWithFormat:](v5, "initWithFormat:", @"%@\n%@", v6, v7);
  [v9 setDiagnosticInfo:v8];

  MRAddDiagnosticToXPCMessage(v4, v9);
}

void sub_1000E5664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000E56E0;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_1000E56E0(uint64_t a1, uint64_t a2)
{
  return MRAddDiagnosticToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_1000E5A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E5AC4;
  block[3] = &unk_100399880;
  id v5 = *(dispatch_queue_s **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_sync(v5, block);
}

void sub_1000E5AC4(uint64_t a1)
{
  uint64_t v2 = (const __CFString *)MRDiagnosticCopyInfo(*(void *)(a1 + 32));
  if (!v2) {
    uint64_t v2 = @"No diagnostic info";
  }
  id v5 = (__CFString *)v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) displayName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"XPC Client: %@:\n%@\n",  v3,  v5));

  [*(id *)(a1 + 48) addObject:v4];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000E5B64(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  id v6 = objc_alloc_init(&OBJC_CLASS___NSDate);
  -[NSMutableString appendString:](v2, "appendString:", @"MediaRemote Client Diagnostic\n");
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"Collected at: %@\n", v6);
  -[NSMutableString appendString:]( v2,  "appendString:",  @"================================================================================\n");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E5C70;
  block[3] = &unk_100398E60;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = v2;
  uint64_t v4 = v2;
  dispatch_sync(v3, block);
  id v5 = (void *)MRDiagnosticCreate(v6, v4);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000E5C70(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(a1 + 40),  "appendString:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)v6),  (void)v7);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

uint64_t sub_1000E5D60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000E5D6C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) disarm];
  if ((_DWORD)result) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  return result;
}

void sub_1000E5F40(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = _MRLogForCategory(0LL, v6);
  __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v18 = v9;
    __int16 v19 = 2114;
    uint64_t v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding authorization callback for route UID: %{public}@ | process: %{public}@",  buf,  0x16u);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pairingHandler]);
  [v11 addHandlerForRouteUID:*(void *)(a1 + 32) completion:v5];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  a2,  kMRMediaRemotePairingHandlerRouteUIDUserInfoKey,  @"inputType",  *(void *)(a1 + 32)));
  v16[1] = v12;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  &v15,  2LL));

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  [v14 postClientNotificationNamed:kMRMediaRemotePairingHandlerNotification userInfo:v13];
}

void sub_1000E657C(uint64_t a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E65F4;
  block[3] = &unk_100399250;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_1000E65F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateClientsForActiveCriticalSection];
}

BOOL sub_1000E6664(id a1, MRDMediaRemoteClient *a2)
{
  return -[MRDMediaRemoteClient isInCriticalSection](a2, "isInCriticalSection");
}

void sub_1000E67E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_1000E6814(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isACriticalSectionActive];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000E6A4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 128) allValues]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sortedArrayUsingComparator:&stru_1003A01F8]);
  [*(id *)(a1 + 32) setActiveClients:v3];

  uint64_t v4 = MRCopyRegisteredTransactionDescriptions();
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  [*(id *)(a1 + 32) setActiveTransactions:v5];
}

int64_t sub_1000E6AD0(id a1, MRDMediaRemoteClient *a2, MRDMediaRemoteClient *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  unsigned int v6 = -[MRDMediaRemoteClient pid](v4, "pid");
  if (v6 == getpid())
  {
    int64_t v7 = -1LL;
  }

  else
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMediaRemoteClient displayName](v4, "displayName"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 stringByReplacingOccurrencesOfString:@"com.apple." withString:&stru_1003AE680]);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[MRDMediaRemoteClient displayName](v5, "displayName"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 stringByReplacingOccurrencesOfString:@"com.apple." withString:&stru_1003AE680]);
    int64_t v7 = (int64_t)[v9 compare:v11 options:1];
  }

  return v7;
}

void sub_1000E6CDC(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  id v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  kMRMediaRemoteSupportedCommandsDidChangeNotification,  kMRMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification,  kMRMediaRemoteNowPlayingApplicationDisplayNameDidChangeNotification,  kMRMediaRemoteApplicationDidReportPlaybackErrorNotification,  kMRMediaRemoteBrowsableContentEndpointChangedNotification,  kMRMediaRemoteApplicationFinishedLoadingContentNotification,  kMRMediaRemoteApplicationInvalidatedBrowsableContentDataSourceNotification,  kMRMediaRemoteContentItemsUpdatedNotification,  kMRMediaRemoteBrowsableContentNowPlayingIdentifiersUpdatedNotification,  kMRMediaRemoteApplicationInitiatedPlaybackOfContentItemNotification,  kMRMediaRemoteBrowsableContentAPIChangedNotification,  kMRMediaRemoteSystemAppDidSkipTrackNotification,  0LL);
  id v3 = (void *)qword_1003FDEC8;
  qword_1003FDEC8 = (uint64_t)v2;
}

void sub_1000E723C(id a1)
{
  size_t v8 = 37LL;
  if (sysctlbyname("kern.bootsessionuuid", v9, &v8, 0LL, 0LL) < 0)
  {
    uint64_t v3 = _MRLogForCategory(0LL, v1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002B89E8();
    }

    id v2 = 0LL;
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
  }

  if ([v2 length])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 lastBootUUID]);
    byte_1003F6F60 = [v2 isEqualToString:v6] ^ 1;

    int64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    [v7 setLastBootUUID:v2];
  }
}

void sub_1000E76E4(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(obj);
        }
        unsigned int v6 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        int64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientForPID:", objc_msgSend(v6, "intValue")));
        size_t v8 = objc_alloc(&OBJC_CLASS___MRDTaskAssertion);
        id v9 = [v6 intValue];
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
        id v11 = -[MRDTaskAssertion initWithType:pid:bundleID:name:]( v8,  "initWithType:pid:bundleID:name:",  5LL,  v9,  v10,  @"Restoring state of client after daemon launch");

        -[MRDTaskAssertion invalidateInDuration:](v11, "invalidateInDuration:", 10.0);
      }

      id v3 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v3);
  }
}

void sub_1000E7868(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___MRMutableApplicationActivity);
  -[MRMutableApplicationActivity setStatus:](v2, "setStatus:", 4LL);
  [*(id *)(a1 + 32) _postAppActivityNotificationNamed:kMRApplicationActivityStatusDidChangeNotification withActivity:v2];
}

void sub_1000E7AA0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000E7C58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000E7C78(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (id *)(a1 + 32);
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);

  [WeakRetained invalidateWithReason:v5];
}

void sub_1000E80A8(_Unwind_Exception *a1)
{
}

void sub_1000E8500(_Unwind_Exception *a1)
{
}

id sub_1000E8528(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invalidateWithReason:a2];
}

void sub_1000E857C(_Unwind_Exception *a1)
{
}

void sub_1000E85D0(_Unwind_Exception *a1)
{
}

void sub_1000E86F4(_Unwind_Exception *a1)
{
}

void sub_1000E8750(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.mrdtaskassertion", v4);
  id v3 = (void *)qword_1003FDEE0;
  qword_1003FDEE0 = (uint64_t)v2;
}

void sub_1000E8B70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000E8B94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained invalidateWithReason:@"Timer Elapsed"];
}

void sub_1000E8F68(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) currentSession]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) currentSession]);
    id v14 = (id)objc_claimAutoreleasedReturnValue([v3 textOperations]);

    switch((unint64_t)[*(id *)(a1 + 40) actionType])
    {
      case 1uLL:
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v14 keyboardOutput]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) text]);
        [v4 insertText:v5];

        goto LABEL_7;
      case 2uLL:
        id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) text]);
        [v14 setTextToAssert:v4];
        goto LABEL_7;
      case 3uLL:
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v14 keyboardOutput]);
        [v4 deleteBackward];
LABEL_7:

        break;
      case 4uLL:
        [v14 setTextToAssert:&stru_1003AE680];
        break;
      default:
        break;
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) currentSession]);
    [v6 flushOperations];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    char v8 = objc_opt_respondsToSelector(WeakRetained, "textEditingService:echoWithText:");

    if ((v8 & 1) != 0)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) currentSession]);
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 documentState]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 documentState]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 contextBeforeInput]);

      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
      [v13 textEditingService:*(void *)(a1 + 32) echoWithText:v12];
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

void sub_1000E9400(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeConnection]);

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 activeConnection]);
    [v3 _textEditingDidEndForConnection:v4];
  }

  [*(id *)(a1 + 32) setActiveConnection:*(void *)(a1 + 40)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  char v6 = objc_opt_respondsToSelector(WeakRetained, "textEditingService:textEditingDidBegin:withAttributes:payload:");

  if ((v6 & 1) != 0)
  {
    id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 32);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentDataPayload]);
    [v11 textEditingService:v9 textEditingDidBegin:v7 withAttributes:v8 payload:v10];
  }

void sub_1000E9598(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeConnection]);
  id v3 = *(void **)(a1 + 40);

  if (v2 == v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    char v5 = objc_opt_respondsToSelector(WeakRetained, "textEditingService:textDidChange:payload:");

    if ((v5 & 1) != 0)
    {
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentDataPayload]);
      [v9 textEditingService:v7 textDidChange:v6 payload:v8];
    }
  }

void sub_1000E9708(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeConnection]);
  id v3 = *(void **)(a1 + 40);

  if (v2 == v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    char v5 = objc_opt_respondsToSelector(WeakRetained, "textEditingService:textDidChange:payload:");

    if ((v5 & 1) != 0)
    {
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentDataPayload]);
      [v9 textEditingService:v7 attributesDidChange:v6 payload:v8];
    }
  }

id sub_1000E98EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _textEditingDidEndForConnection:*(void *)(a1 + 40)];
}

id sub_1000E9A28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
}

id sub_1000E9CA8(id a1, NSData *a2)
{
  audit_token_t atoken = v6;
  uint64_t v2 = audit_token_to_pid(&atoken);
  audit_token_t atoken = v6;
  id v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"PID: %i, PID_V: %i",  v2,  audit_token_to_pidversion(&atoken));
  return (id)objc_claimAutoreleasedReturnValue(v3);
}

void sub_1000E9F7C(id a1)
{
  id v1 = -[MRDAutoConnectionController _init](objc_alloc(&OBJC_CLASS___MRDAutoConnectionController), "_init");
  uint64_t v2 = (void *)qword_1003FDEF0;
  qword_1003FDEF0 = (uint64_t)v1;
}

void sub_1000EA20C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = MRGetPlayerPathFromUserInfo(a3);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"player %@ started playing",  v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[MRDAutoConnectionControllerReason reasonWithType:string:]( &OBJC_CLASS___MRDAutoConnectionControllerReason,  "reasonWithType:string:",  1LL,  v8));
  __int128 v10 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000EA304;
  v12[3] = &unk_1003A03B8;
  id v13 = v5;
  id v11 = v5;
  [v10 connectToAllOutputDevicesForReason:v9 comparator:v12 queue:0 completion:0];
}

uint64_t sub_1000EA304(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDeviceUIDs]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
  unsigned __int8 v8 = [v6 containsObject:v7];

  if ((v8 & 1) != 0)
  {
    uint64_t v9 = 1LL;
  }

  else
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDeviceUIDs]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
    id v12 = [v10 containsObject:v11];

    uint64_t v9 = (uint64_t)((void)v12 << 63) >> 63;
  }

  return v9;
}

void sub_1000EA3C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = MRGetPlayerPathFromUserInfo(a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"player %@ started playing",  v11);
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue( +[MRDAutoConnectionControllerReason reasonWithType:string:]( &OBJC_CLASS___MRDAutoConnectionControllerReason,  "reasonWithType:string:",  1LL,  v7));
  uint64_t v9 = *(void **)(a1 + 32);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceUID]);

  [v9 connectToOutputDevice:v10 reason:v8 queue:0 completion:0];
}

void sub_1000EA494(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 addObserver:*(void *)(a1 + 32) selector:"_handleActiveSystemEndpointDidChangeNotification:" name:kMRMediaRemoteActiveSystemEndpointDidChangeNotification object:0];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1000EA548;
  v3[3] = &unk_1003A03E0;
  uint64_t v5 = 0LL;
  id v4 = *(id *)(a1 + 32);
  MRAVEndpointGetActiveSystemEndpointUID(0LL, &_dispatch_main_q, v3);
}

void sub_1000EA548(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription(*(void *)(a1 + 40));
  uint64_t v7 = -[NSString initWithFormat:](v4, "initWithFormat:", @"%@ endpoint changed", active);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[MRDAutoConnectionControllerReason reasonWithType:string:]( &OBJC_CLASS___MRDAutoConnectionControllerReason,  "reasonWithType:string:",  2LL,  v7));
  [*(id *)(a1 + 32) connectToOutputDevice:a2 reason:v6 queue:0 completion:0];
}

uint64_t sub_1000EA6A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000EA6B0(uint64_t a1)
{
}

void sub_1000EA6B8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EA7A8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) allObjects]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000EA91C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1000EA9BC;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000EA9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000EAAF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1000EAB94;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000EAB94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000EACCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1000EAD6C;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000EAD6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000EAEA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1000EAF44;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000EAF44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000EB07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1000EB11C;
      v6[3] = &unk_10039AD10;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000EB11C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000EB3C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EB48C;
  block[3] = &unk_1003A04F8;
  id v13 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1000EB48C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = *(void **)(a1 + 32);
  if (v2) {
    id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sortedArrayUsingComparator:"));
  }
  else {
    id v4 = v3;
  }
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id obj = v4;
  id v5 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)v8);
        uint64_t v10 = *(void **)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_1000EB610;
        v13[3] = &unk_10039FE50;
        id v14 = *(id *)(a1 + 56);
        uint64_t v15 = v9;
        objc_msgSend(v10, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v9, v11, &_dispatch_main_q, v13);

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v6);
  }
}

id *sub_1000EB610(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)[result[4] addObject:result[5]];
  }
  return result;
}

id sub_1000EB624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDAutoConnectionController] Begin DiscoverySession %@ because %@",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 48) setDiscoveryMode:3];
}

void sub_1000EB6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDAutoConnectionController] End DiscoverySession %@",  buf,  0xCu);
  }

  [*(id *)(a1 + 40) setDiscoveryMode:0];
  if (*(void *)(a1 + 64))
  {
    id v6 = [*(id *)(a1 + 48) copy];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000EB814;
    v10[3] = &unk_10039AD10;
    uint64_t v7 = *(dispatch_queue_s **)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    id v11 = v6;
    id v12 = v8;
    id v9 = v6;
    dispatch_async(v7, v10);
  }

uint64_t sub_1000EB814(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1000EB8EC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_discoverOutputDevice:connect:reason:completion:",  *(void *)(a1 + 40),  1,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

id sub_1000EB9C8(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_discoverGroup:connect:reason:completion:",  *(void *)(a1 + 40),  1,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

id sub_1000EBAA4(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_discoverOutputDevice:connect:reason:completion:",  *(void *)(a1 + 40),  0,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

id sub_1000EBB80(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onSerialQueue_discoverGroup:connect:reason:completion:",  *(void *)(a1 + 40),  0,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_1000EBE88(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL));
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 32),  "objectForKeyedSubscript:",  *(void *)(a1 + 40),  0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8) + 16LL))();
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_1000EBFC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }

  else if (v3 && *(_BYTE *)(a1 + 56))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v6[1];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000EC0CC;
    void v9[3] = &unk_10039BC48;
    id v11 = *(id *)(a1 + 48);
    id v10 = v3;
    objc_msgSend(v6, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v10, v7, v8, v9);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1000EC0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_1000EC0EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000EC3B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL));
  [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 48),  "objectForKeyedSubscript:",  *(void *)(a1 + 40),  0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8) + 16LL))();
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 48) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_1000EC4EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }

  else if (v3 && *(_BYTE *)(a1 + 56))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v6[1];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000EC5F4;
    void v9[3] = &unk_10039BC48;
    id v11 = *(id *)(a1 + 48);
    id v10 = v3;
    objc_msgSend(v6, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v10, v7, v8, v9);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1000EC5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_1000EC614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000EC9A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_1000ECA38;
    v6[3] = &unk_10039AD10;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_1000ECA38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000ECA48(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifier", 0));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8LL * (void)v10) + 16LL))();
        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v8);
  }

  id v11 = *(void **)(a1 + 40);
  __int128 v12 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueIdentifier]);
  [v12 setObject:0 forKeyedSubscript:v13];
}

void sub_1000ECBA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v5 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  @"autoConnectToEndpoint",  v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
    -[NSMutableString appendFormat:](v5, "appendFormat:", @" for %@", v7);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) string]);

  if (v8)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) string]);
    -[NSMutableString appendFormat:](v5, "appendFormat:", @" because %@", v10);
  }

  uint64_t v11 = _MRLogForCategory(10LL, v9);
  __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  unint64_t v13 = (unint64_t)[*(id *)(a1 + 40) type];
  if (v13 > 4) {
    __int128 v14 = @"endpointChanged";
  }
  else {
    __int128 v14 = off_1003A0590[v13];
  }
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"autoConnectToEndpoint-%@",  v14));
  v28[0] = MREndpointConnectionReasonUserInfoKey;
  v28[1] = MREndpointConnectionCorrelationIDUserInfoKey;
  v29[0] = v15;
  v29[1] = v3;
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));
  __int128 v17 = *(void **)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000ECE68;
  v22[3] = &unk_10039B658;
  id v23 = v17;
  id v24 = v3;
  uint64_t v18 = *(void *)(a1 + 48);
  __int128 v19 = *(void **)(a1 + 56);
  id v25 = v4;
  uint64_t v26 = v18;
  id v27 = v19;
  id v20 = v4;
  id v21 = v3;
  [v23 connectToExternalDeviceWithUserInfo:v16 completion:v22];
}

void sub_1000ECE68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);

  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v3)
  {
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)__int128 buf = 138544386;
        id v27 = @"autoConnectToEndpoint";
        __int16 v28 = 2114;
        uint64_t v29 = v10;
        __int16 v30 = 2114;
        id v31 = v3;
        __int16 v32 = 2114;
        uint64_t v33 = v11;
        __int16 v34 = 2048;
        uint64_t v35 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_8:

LABEL_13:
      }
    }

    else if (v9)
    {
      sub_1002B8B58(a1, (uint64_t)v3, v8);
    }
  }

  else
  {
    BOOL v14 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v14)
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)__int128 buf = 138544130;
        id v27 = @"autoConnectToEndpoint";
        __int16 v28 = 2114;
        uint64_t v29 = v15;
        __int16 v30 = 2114;
        id v31 = v11;
        __int16 v32 = 2048;
        uint64_t v33 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  buf,  0x2Au);
        goto LABEL_8;
      }
    }

    else if (v14)
    {
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138543874;
      id v27 = @"autoConnectToEndpoint";
      __int16 v28 = 2114;
      uint64_t v29 = v17;
      __int16 v30 = 2048;
      id v31 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  buf,  0x20u);
      goto LABEL_13;
    }
  }

  uint64_t v19 = *(void *)(a1 + 56);
  id v20 = *(dispatch_queue_s **)(v19 + 8);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000ED154;
  v22[3] = &unk_100399120;
  void v22[4] = v19;
  id v23 = *(id *)(a1 + 32);
  id v24 = v3;
  id v25 = *(id *)(a1 + 64);
  id v21 = v3;
  dispatch_sync(v20, v22);
}

uint64_t sub_1000ED154(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueIdentifier]);
  [v2 setObject:0 forKeyedSubscript:v3];

  if (!*(void *)(a1 + 48)) {
    objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_addConnectedEndpoint:", *(void *)(a1 + 40));
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_1000ED7B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_removeConnectedEndpoint:", *(void *)(a1 + 40));
}

void sub_1000EDC44(_Unwind_Exception *a1)
{
}

void sub_1000EDCD0(_Unwind_Exception *a1)
{
}

void sub_1000EDD78(_Unwind_Exception *a1)
{
}

void sub_1000EDEEC(_Unwind_Exception *a1)
{
}

void sub_1000EE000(_Unwind_Exception *a1)
{
}

void sub_1000EE0CC(_Unwind_Exception *a1)
{
}

void sub_1000EE1C8(_Unwind_Exception *a1)
{
}

void sub_1000EE32C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
  __int128 v12 = @"activeSystemEndpointDidChange";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000EE434;
  void v7[3] = &unk_1003A05C8;
  uint64_t v5 = (void *)a1[5];
  void v7[4] = a1[4];
  id v8 = v5;
  id v9 = v3;
  uint64_t v10 = a1[6];
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}

void sub_1000EE434(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpointOutputDeviceUID]);
  id v6 = *(void **)(a1 + 40);
  id v7 = v5;
  id v8 = v6;
  if (v7 == v8)
  {
  }

  else
  {
    id v9 = v8;
    unsigned int v10 = [v7 isEqual:v8];

    if (!v10)
    {
      uint64_t v12 = _MRLogForCategory(0LL, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpointOutputDeviceUID]);
        int v25 = 138412546;
        uint64_t v26 = v14;
        __int16 v27 = 2112;
        id v28 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received",  (uint8_t *)&v25,  0x16u);
      }

      goto LABEL_12;
    }
  }

  if (v3)
  {
    uint64_t v16 = _MRLogForCategory(0LL, v11);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      int v25 = 138412546;
      uint64_t v26 = v18;
      __int16 v27 = 2112;
      id v28 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.",  (uint8_t *)&v25,  0x16u);
    }

    uint64_t v19 = &_dispatch_main_q;
    MRAVEndpointUpdateActiveSystemEndpointWithReason( 0LL,  1LL,  @"ElectedPlayerController failed to connect",  &_dispatch_main_q,  0LL);
  }

  else
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) origin]);
    id v21 = *(void **)(a1 + 32);
    unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 nowPlayingServer]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 originClientForOrigin:v20]);
    [v21 setOriginClient:v24 withChangeType:*(void *)(a1 + 56)];
  }

void sub_1000EE694(_Unwind_Exception *a1)
{
}

id sub_1000EEA48(uint64_t a1)
{
  return _objc_msgSend( *(id *)(*(void *)(a1 + 32) + 96),  "electedPlayerController:electedPlayerDidChange:change:event:reason:");
}

void sub_1000EF190(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = objc_alloc(&OBJC_CLASS___NSString);
  unint64_t v4 = *(void *)(a1 + 48);
  if (v4 > 5) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = off_1003A0638[v4];
  }
  id v6 = -[NSString initWithFormat:]( v3,  "initWithFormat:",  @"%@ playback timeout event %@ after <%lf> seconds",  *(void *)(a1 + 40),  v5,  *(void *)(a1 + 56));
  objc_msgSend(v2, "_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:", 2, v6);

  objc_sync_exit(obj);
}

void sub_1000EF230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1000EF5E0(_Unwind_Exception *a1)
{
}

void sub_1000EF8E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void **)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000EF980;
  v5[3] = &unk_1003A0670;
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v2 _didReceiveData:v3 fromCommunicationChannel:v6 connectionFactory:v5];
}

MRAirPlayTransportConnection *sub_1000EF980(uint64_t a1)
{
  return  -[MRAirPlayTransportConnection initWithOutputContextCommunicationChannel:outputContext:]( objc_alloc(&OBJC_CLASS___MRAirPlayTransportConnection),  "initWithOutputContextCommunicationChannel:outputContext:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000EFA2C(uint64_t a1)
{
  uint64_t v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  105LL,  @"AVOutputContextCommunicationChannel.didCloseCommunicationChannel");
  [*(id *)(a1 + 32) _didCloseCommunicationChannel:*(void *)(a1 + 40) error:v2];
}

void sub_1000EFB28(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)a1[6];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000EFBA0;
  v4[3] = &unk_1003A0698;
  id v5 = v3;
  [v1 _didReceiveData:v2 fromCommunicationChannel:v5 connectionFactory:v4];
}

MRAirPlayTransportConnection *sub_1000EFBA0(uint64_t a1)
{
  return  -[MRAirPlayTransportConnection initWithAPCommunicationChannel:]( objc_alloc(&OBJC_CLASS___MRAirPlayTransportConnection),  "initWithAPCommunicationChannel:",  *(void *)(a1 + 32));
}

void sub_1000EFC4C(uint64_t a1)
{
  uint64_t v2 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  105LL,  @"APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel");
  [*(id *)(a1 + 32) _didCloseCommunicationChannel:*(void *)(a1 + 40) error:v2];
}

void sub_1000F0008(_Unwind_Exception *a1)
{
}

void sub_1000F00A8(_Unwind_Exception *a1)
{
}

void sub_1000F01C4(id a1)
{
  qword_1003FDF08 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver",  2);
}

void sub_1000F01EC(void *a1)
{
  uint64_t v1 = qword_1003FDF00;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1003FDF00, &stru_1003A06B8);
  }
  off_1003F7210 = (uint64_t (*)())dlsym((void *)qword_1003FDF08, "APReceiverMediaRemoteXPCClient_SetDelegate");
  ((void (*)(id))off_1003F7210)(v2);
}

Class sub_1000F0268()
{
  if (qword_1003FDF18 != -1) {
    dispatch_once(&qword_1003FDF18, &stru_1003A06D8);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_1003FDF10 = (uint64_t)result;
  off_1003F7148 = (uint64_t (*)())sub_1000F02C4;
  return result;
}

id sub_1000F02C4()
{
  return (id)qword_1003FDF10;
}

void sub_1000F02D0(id a1)
{
  qword_1003FDF20 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

void sub_1000F1078(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  id v5 = *(void **)(a1 + 40);
  id v12 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  [v5 _appendDescribableArray:v6 toString:*(void *)(a1 + 48) withTitle:@"Endpoint" indentLevel:0 usingDebugDescription:1];

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 352) objectForKeyedSubscript:v4]);
  id v8 = (void *)v7;
  if (v7)
  {
    id v9 = *(void **)(a1 + 40);
    uint64_t v11 = v7;
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
    [v9 _appendDescribableArray:v10 toString:*(void *)(a1 + 48) withTitle:@"External Device" indentLevel:1 usingDebugDescription:1];
  }

  [*(id *)(a1 + 48) appendString:@"\n"];
}

void sub_1000F11C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 appendFormat:@"EndpointID: %@\n", a2];
  uint64_t v7 = *(void **)(a1 + 40);
  id v9 = v6;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  [v7 _appendDescribableArray:v8 toString:*(void *)(a1 + 32) withTitle:@"External Device" indentLevel:1 usingDebugDescription:1];

  [*(id *)(a1 + 32) appendString:@"\n"];
}

BOOL sub_1000F1D04(uint64_t a1, void *a2)
{
  return [a2 deviceType] == *(_DWORD *)(a1 + 32);
}

id sub_1000F1FC8()
{
  if (qword_1003FDF28 != -1) {
    dispatch_once(&qword_1003FDF28, &stru_1003A0768);
  }
  return (id)qword_1003FDF30;
}

void sub_1000F2008(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.MediaRemote.MRDParticipantDataSource.notification.targetQueue", v4);
  id v3 = (void *)qword_1003FDF30;
  qword_1003FDF30 = (uint64_t)v2;
}

id sub_1000F2300(uint64_t a1)
{
  return [*(id *)(a1 + 32) dataSource:*(void *)(a1 + 40) didUpdateParticipants:*(void *)(a1 + 48)];
}

void sub_1000F25A8(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleMusicStateUpdateNotification:" name:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:0];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 addObserver:*(void *)(a1 + 32) selector:"handleGroupSessionServerDidStartNotification:" name:@"MRDGroupSessionServerDidStartNotification" object:0];

  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupSessionServer]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 sessionManager]);

  [v6 addObserver:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) loadFromStorage];
  [*(id *)(a1 + 32) loadLocalIdentities];
}

void sub_1000F27E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F27F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F2808(uint64_t a1)
{
}

void sub_1000F2810(uint64_t a1)
{
}

void sub_1000F2914( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F292C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localIdentityMap]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteIdentityMap]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 objectForKey:*(void *)(a1 + 40)]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pepper]);
      uint64_t v12 = objc_claimAutoreleasedReturnValue( +[MRPlaybackQueueParticipant expectedIdentifierForUserIdentity:withRandomData:]( &OBJC_CLASS___MRPlaybackQueueParticipant,  "expectedIdentifierForUserIdentity:withRandomData:",  v10,  v11));
      uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteIdentityMap]);
      [v15 setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKey:*(void *)(a1 + 40)];

      [*(id *)(a1 + 32) rebuildParticipants];
    }
  }

void sub_1000F2E54(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 dataSource:*(void *)(a1 + 32) didUpdateParticipants:*(void *)(a1 + 40)];
}

void sub_1000F3400( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
}

void sub_1000F342C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupSessionServer]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 sessionManager]);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 session]);
  [WeakRetained updatePepperIfNeededWithSession:v5];
}

void sub_1000F3730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F3758(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupSessionServer]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 sessionManager]);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 session]);
  [WeakRetained updatePepperIfNeededWithSession:v5];
}

id sub_1000F39E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) loadLocalIdentities];
}

id sub_1000F3AF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePepperIfNeededWithSession:*(void *)(a1 + 40)];
}

id sub_1000F3B9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePepperIfNeededWithSession:*(void *)(a1 + 40)];
}

id sub_1000F3FA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _initializeIDSRemoteControlServiceWithRoutingDataSource:*(void *)(a1 + 40)];
}

void sub_1000F4244( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000F4270(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F4280(uint64_t a1)
{
}

void sub_1000F4288(void *a1)
{
  id v2 = -[MRDIDSCompanionRemoteControlService initWithRoutingDataSource:]( objc_alloc(&OBJC_CLASS___MRDIDSCompanionRemoteControlService),  "initWithRoutingDataSource:",  a1[5]);
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;

  objc_msgSend(*(id *)(a1[4] + 56), "setDelegate:");
  uint64_t v5 = a1[4];
  if (*(_BYTE *)(v5 + 8)) {
    [*(id *)(v5 + 56) start];
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v6 removeObserver:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_1000F4318(uint64_t a1)
{
  if ([*(id *)(a1 + 32) disarm])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](&OBJC_CLASS___NRPairedDeviceRegistry, "sharedInstance"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 getActivePairedDevice]);

    uint64_t v5 = _MRLogForCategory(0LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRemoteControlService] observed new activePairedDevice <%@>, creating IDSRemoteControlService...",  (uint8_t *)&v8,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1000F4774(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.remoteControlService.serverClientConnectionQueue", v4);
  uint64_t v3 = (void *)qword_1003FDF38;
  qword_1003FDF38 = (uint64_t)v2;
}

void sub_1000F4CD4(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___MRDUIServer);
  dispatch_queue_t v2 = (void *)qword_1003FDF48;
  qword_1003FDF48 = (uint64_t)v1;
}

void sub_1000F5090(uint64_t a1, void *a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 listener]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 endpoint]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _endpoint]);
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v5);
}

void sub_1000F5290(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000F530C;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

void sub_1000F530C(uint64_t a1, void *a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 _endpoint]);
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v4);
}

void sub_1000F54F4(id a1, OS_xpc_object *a2)
{
  xpc_object_t xdict = a2;
  char v2 = MRSupportsSystemUIActivities();
  xpc_dictionary_set_BOOL(xdict, "MRXPC_BOOL_RESULT_KEY", v2);
}

id sub_1000F58BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addClient:*(void *)(a1 + 40)];
}

id sub_1000F58C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeClient:*(void *)(a1 + 40)];
}

void sub_1000F64A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);

    uint64_t v8 = _MRLogForCategory(10LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!v6)
    {
      if (!v10) {
        goto LABEL_19;
      }
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v28 = 138544130;
      uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
      __int16 v30 = 2114;
      id v31 = v11;
      __int16 v32 = 2114;
      id v33 = v5;
      __int16 v34 = 2048;
      uint64_t v35 = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds",  (uint8_t *)&v28,  0x2Au);
      goto LABEL_18;
    }

    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v28 = 138544386;
    uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v30 = 2114;
    id v31 = v11;
    __int16 v32 = 2114;
    id v33 = v5;
    __int16 v34 = 2114;
    uint64_t v35 = v12;
    __int16 v36 = 2048;
    uint64_t v37 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v28,  0x34u);
    goto LABEL_17;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
  uint64_t v18 = _MRLogForCategory(10LL, v17);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  BOOL v19 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v16)
    {
      if (!v19) {
        goto LABEL_19;
      }
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v28 = 138544386;
      uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
      __int16 v30 = 2114;
      id v31 = v11;
      __int16 v32 = 2112;
      id v33 = v12;
      __int16 v34 = 2114;
      uint64_t v35 = v13;
      __int16 v36 = 2048;
      uint64_t v37 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v28,  0x34u);

      goto LABEL_17;
    }

    if (!v19) {
      goto LABEL_19;
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v28 = 138544130;
    uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v30 = 2114;
    id v31 = v11;
    __int16 v32 = 2112;
    id v33 = v12;
    __int16 v34 = 2048;
    uint64_t v35 = v25;
    id v24 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v28, 0x2Au);
LABEL_17:

LABEL_18:
    goto LABEL_19;
  }

  if (v16)
  {
    if (!v19) {
      goto LABEL_19;
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerPath]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v28 = 138544130;
    uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v30 = 2114;
    id v31 = v11;
    __int16 v32 = 2114;
    id v33 = v12;
    __int16 v34 = 2048;
    uint64_t v35 = v23;
    id v24 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_16;
  }

  if (v19)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v12 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v28 = 138543874;
    uint64_t v29 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v30 = 2114;
    id v31 = v11;
    __int16 v32 = 2048;
    id v33 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v28,  0x20u);
    goto LABEL_18;
  }

void sub_1000F7524(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMRNowPlayingPlayerPathUserInfoKey]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
  unsigned int v4 = [v3 isLocallyHosted];

  if (v4) {
    objc_msgSend(*(id *)(a1 + 40), "_onQueue_adjustPlaybackTimerIfNeededForPlayerPath:", v5);
  }
}

void sub_1000F78C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000F78F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_simplifyToplogyOfPlayerPathIfNeeded:", *(void *)(a1 + 32));
}

id sub_1000F7AE0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 origin]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) origin]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_1000F7B40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v5)
  {
    uint64_t v19 = _MRLogForCategory(2LL, v6);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v27 = v20;
      __int16 v28 = 2112;
      id v29 = v21;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[MRDITS] <%p> Could not find endpoint for playerPath <%@> - error: %@",  buf,  0x20u);
    }

    goto LABEL_10;
  }

  if ([v5 connectionType] == (id)6)
  {
    if ([v5 hasASmartDevice])
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localDeviceUID]);
      unsigned __int8 v9 = [v5 containsOutputDeviceWithUID:v8];

      if ((v9 & 1) == 0)
      {
        uint64_t v11 = _MRLogForCategory(2LL, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 134218242;
          uint64_t v27 = v13;
          __int16 v28 = 2112;
          id v29 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[MRDITS] <%p> Letting endpoint be hosted by a smart device - %@",  buf,  0x16u);
        }

        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 outputDevices]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDeviceUIDs]);
        uint64_t v16 = *(void *)(a1 + 48);
        uint64_t v17 = *(void *)(a1 + 56);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_1000F7D8C;
        v22[3] = &unk_100399D30;
        void v22[4] = *(void *)(a1 + 32);
        id v23 = v15;
        id v24 = v5;
        id v25 = *(id *)(a1 + 56);
        id v18 = v15;
        [v24 removeOutputDevices:v14 initiator:v16 withReplyQueue:v17 completion:v22];

LABEL_10:
      }
    }
  }
}

void sub_1000F7D8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(2LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v7)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueIdentifier]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) componentsJoinedByString:@","]);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v28 = v14;
      __int16 v29 = 2112;
      __int16 v30 = v15;
      __int16 v31 = 2112;
      __int16 v32 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDITS] <%p> Removed devices from existing endpoint %@: <%@>",  buf,  0x20u);
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) outputDevices]);
    if ([v17 count] == (id)1)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) outputDevices]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);
      unsigned int v20 = [v19 isSmartDevice];

      if (v20)
      {
        uint64_t v22 = _MRLogForCategory(2LL, v21);
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_5;
        }
        uint64_t v23 = *(void *)(a1 + 32);
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueIdentifier]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v28 = v23;
        __int16 v29 = 2112;
        __int16 v30 = v9;
        __int16 v31 = 2112;
        __int16 v32 = v10;
        uint64_t v11 = "[MRDITS] <%p> Not trying to recreate WHA group; Endpoint (%@) only had one smart device (%@)";
        uint64_t v12 = v6;
        uint32_t v13 = 32;
        goto LABEL_4;
      }
    }

    else
    {
    }

    uint64_t v24 = *(void *)(a1 + 56);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000F804C;
    v26[3] = &unk_10039F308;
    uint64_t v25 = *(void *)(a1 + 40);
    void v26[4] = *(void *)(a1 + 32);
    +[MRAVEndpoint createEndpointWithOutputDeviceUIDs:options:queue:completion:]( &OBJC_CLASS___MRAVEndpoint,  "createEndpointWithOutputDeviceUIDs:options:queue:completion:",  v25,  128LL,  v24,  v26);
    goto LABEL_14;
  }

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) componentsJoinedByString:@","]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueIdentifier]);
    *(_DWORD *)__int128 buf = 134218754;
    uint64_t v28 = v8;
    __int16 v29 = 2112;
    __int16 v30 = v9;
    __int16 v31 = 2112;
    __int16 v32 = v10;
    __int16 v33 = 2112;
    id v34 = v3;
    uint64_t v11 = "[MRDITS] <%p> Could not remove devices <%@> from existing endpoint (%@) - error: %@";
    uint64_t v12 = v6;
    uint32_t v13 = 42;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
  }

LABEL_5:
LABEL_14:
}

  uint64_t v5 = -[__CFString copy](v3, "copy");

  objc_sync_exit(v2);
  return (NSString *)v5;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Class result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  unsigned int v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unsigned int v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unsigned int v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unsigned int v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unsigned int v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v12 = *(void *)(v5 + 16);
  uint32_t v13 = (*(void *)(v5 + 24) >> 1) - v12;
  uint64_t v14 = a3(0LL);
  if (v13 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v15 + 72);
  id v18 = v5 + v16 + v17 * v12;
  uint64_t v19 = a1 + v16;
  unsigned int v20 = v17 * v4;
  uint64_t v21 = v18 + v20;
  uint64_t v22 = v19 + v20;
  if (v19 < v21 && v18 < v22) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v18);
  if (!v4)
  {
LABEL_19:
    Class result = swift_bridgeObjectRelease();
    *id v3 = v5;
    return result;
  }

  uint64_t v24 = *(void *)(v5 + 16);
  uint64_t v25 = __OFADD__(v24, v4);
  uint64_t v26 = v24 + v4;
  if (!v25)
  {
    *(void *)(v5 + 16) = v26;
    goto LABEL_19;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unsigned int v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unsigned int v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        swift_bridgeObjectRelease();
        Class result = swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        uint64_t v5 = v39;
      }
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v38) {
    return sub_1001E4B48(v34, a2, v35, a3);
  }
  uint64_t v15 = *(void *)(v37 + 8 * v16);
  if (v15)
  {
    uint64_t v5 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v5 >= v38) {
      return sub_1001E4B48(v34, a2, v35, a3);
    }
    uint64_t v15 = *(void *)(v37 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    _HashTable.BucketIterator.advance()();
    uint64_t v16 = v31;
    uint64_t v14 = v32;
    uint64_t v10 = v33;
    uint64_t v12 = v34;
    uint32_t v13 = v35;
    uint64_t v11 = v36;
    if (!v33) {
      return _HashTable.UnsafeHandle.subscript.setter(0LL, v7, a2, a3);
    }
  }

  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unsigned int v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unsigned int v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unsigned __int8 v9 = (unint64_t)&v3[40 * v8 + 32];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_100156B68(&qword_1003FAF98);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    Class result = swift_bridgeObjectRelease();
    *dispatch_queue_attr_t v1 = v3;
    return result;
  }

  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  uint32_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }

    uint64_t v8 = *a5;
    BOOL v7 = a5[1];
    unsigned __int8 v9 = *(void *)(*a5 + 16LL);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unsigned int v20 = *v19;
    uint64_t v21 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    unsigned int v20 = (-1LL << result) - 1;
  }

  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v11 = v5[2];
  uint64_t v12 = (v5[3] >> 1) - v11;
  Class result = a3(0LL);
  if (v12 < v4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  Class result = swift_arrayInitWithCopy( (char *)v5 + ((*(unsigned __int8 *)(*(void *)(result - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(result - 8) + 80LL))
           + *(void *)(*(void *)(result - 8) + 72LL) * v11);
  if (!v4)
  {
LABEL_14:
    Class result = swift_bridgeObjectRelease();
    *id v3 = v5;
    return result;
  }

  uint32_t v13 = v5[2];
  uint64_t v14 = __OFADD__(v13, v4);
  uint64_t v15 = v13 + v4;
  if (!v14)
  {
    void v5[2] = v15;
    goto LABEL_14;
  }

  uint64_t v27 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  uint64_t v28 = [v27 nowPlayingServer];

  __int16 v29 = (id *)[v28 localActivePlayerClient];
  __int16 v30 = [v29 playerPath];

  if (!v30)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v95 = type metadata accessor for InternalRoutingError(0LL);
    uint64_t v101 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    uint64_t v97 = swift_allocError(v95, v101, 0LL, 0LL);
    v99 = v102;
    id v100 = (unsigned int *)&enum case for InternalRoutingError.noActivePlayer(_:);
    goto LABEL_42;
  }

  uint64_t v10 = 4LL;
  while (1)
  {
    if ((v7 & 0xC000000000000001LL) != 0) {
      uint64_t v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7);
    }
    else {
      uint64_t v11 = *(id *)(v7 + 8 * v10);
    }
    uint64_t v12 = v11;
    uint32_t v13 = v10 - 3;
    if (__OFADD__(v10 - 4, 1LL))
    {
      __break(1u);
LABEL_25:
      if (v7 >= 0) {
        uint64_t v24 = v8;
      }
      else {
        uint64_t v24 = v7;
      }
      swift_bridgeObjectRetain();
      unsigned __int8 v9 = _CocoaArrayWrapper.endIndex.getter(v24);
      if (!v9) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }

    ++v10;
    if (v13 == v9) {
      goto LABEL_12;
    }
  }

  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = [v12 options];
  if (!v14)
  {

    uint64_t v27 = 0u;
    uint64_t v28 = 0u;
LABEL_22:
    sub_100164B5C((uint64_t)&v27);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v15 = v14;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v25 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  uint64_t v17 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  id v18 = sub_100156B68(&qword_1003F9500);
  uint64_t v19 = sub_1001A828C();
  AnyHashable.init<A>(_:)(&v25, v18, v19);
  if (*(void *)(v16 + 16) && (unsigned int v20 = sub_10015CAA4((uint64_t)v26), (v21 & 1) != 0))
  {
    sub_100160800(*(void *)(v16 + 56) + 32 * v20, (uint64_t)&v27);
  }

  else
  {
    uint64_t v27 = 0u;
    uint64_t v28 = 0u;
  }

  sub_100160990((uint64_t)v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v28 + 1)) {
    goto LABEL_22;
  }
  uint64_t v22 = sub_100156B68(&qword_1003FA010);
  return (void *)v26[0];
}

  BOOL v7 = 4LL;
  while (1)
  {
    if ((v4 & 0xC000000000000001LL) != 0) {
      uint64_t v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4);
    }
    else {
      uint64_t v8 = *(id *)(v4 + 8 * v7);
    }
    unsigned __int8 v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1LL))
    {
      __break(1u);
LABEL_25:
      if (v4 >= 0) {
        uint64_t v21 = v5;
      }
      else {
        uint64_t v21 = v4;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }

    ++v7;
    if (v10 == v6) {
      goto LABEL_12;
    }
  }

  swift_bridgeObjectRelease_n(v4, 2LL);
  uint64_t v11 = [v9 options];
  if (!v11)
  {

    uint64_t v24 = 0u;
    uint64_t v25 = 0u;
LABEL_22:
    sub_100164B5C((uint64_t)&v24);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v12 = v11;
  uint32_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v22 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  uint64_t v14 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  uint64_t v15 = sub_100156B68(&qword_1003F9500);
  uint64_t v16 = sub_1001A828C();
  AnyHashable.init<A>(_:)(&v22, v15, v16);
  if (*(void *)(v13 + 16) && (uint64_t v17 = sub_10015CAA4((uint64_t)v23), (v18 & 1) != 0))
  {
    sub_100160800(*(void *)(v13 + 56) + 32 * v17, (uint64_t)&v24);
  }

  else
  {
    uint64_t v24 = 0u;
    uint64_t v25 = 0u;
  }

  sub_100160990((uint64_t)v23);
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_22;
  }
  uint64_t v19 = sub_100156B68(&qword_1003FA010);
  return (void *)v23[0];
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Class result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v17 = *(void *)(v3 + 16);
  id v18 = __OFSUB__(v17, 1LL);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void sub_1000F804C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(2LL, v7);
  unsigned __int8 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 134218242;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v6;
      uint64_t v12 = "[MRDITS] <%p> Topology not simplified, error: %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 0x16u);
    }
  }

  else if (v10)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 134218242;
    uint64_t v15 = v13;
    __int16 v16 = 2112;
    id v17 = v5;
    uint64_t v12 = "[MRDITS] <%p> Topology simplified, new endpoint: %@";
    goto LABEL_6;
  }
}

BOOL sub_1000F8218(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isSmartDevice](a2, "isSmartDevice");
}

id sub_1000F8824(uint64_t a1)
{
  return [*(id *)(a1 + 32) cleanUp];
}

id sub_1000F8920(uint64_t a1)
{
  return [*(id *)(a1 + 32) prewarmSoon];
}

void sub_1000F8928(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v15 userInfo]);
  uint64_t v4 = MRGetPlayerPathFromUserInfo(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
  unsigned int v7 = [v6 isLocallyHosted];

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v15 userInfo]);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey]);
    unsigned int v10 = [v9 BOOLValue];

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
      if ([v11 isLocal])
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceInfo]);
        unsigned int v14 = [v13 considerLocalOriginAsSeperateStream];

        if (!v14) {
          goto LABEL_8;
        }
      }

      else
      {
      }

      [(id)objc_opt_class(*(void *)(a1 + 32)) _reportStreamCountAnalytics];
    }
  }

id sub_1000F8AE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) prewarm];
}

void sub_1000F8E04(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000F8E98;
  v4[3] = &unk_1003A08C8;
  void v4[4] = *(void *)(a1 + 32);
  id v3 =  [v2 addObserverForName:_MRMediaRemoteDefaultSupportedCommandsDidChangeNotification object:0 queue:0 usingBlock:v4];
}

void sub_1000F8E98(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetPlayerPathFromUserInfo(v3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 origin]);
  unsigned int v6 = [v5 isLocal];

  if (v6) {
    [*(id *)(a1 + 32) prewarmSoon];
  }
}

void sub_1000F9148(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a1[4];
  uint64_t v12 = _MRLogForCategory(10LL, v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  unsigned int v14 = v13;
  if (v8 && !v9)
  {
    BOOL v15 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v15)
      {
        uint64_t v17 = a1[5];
        uint64_t v16 = a1[6];
        uint64_t v18 = a1[4];
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v19 timeIntervalSinceDate:a1[7]];
        int v40 = 138544386;
        uint64_t v41 = v17;
        __int16 v42 = 2114;
        uint64_t v43 = v16;
        __int16 v44 = 2112;
        id v45 = v8;
        __int16 v46 = 2114;
        uint64_t v47 = v18;
        __int16 v48 = 2048;
        uint64_t v49 = v20;
        uint64_t v21 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v22 = v14;
        uint32_t v23 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v40, v23);
        goto LABEL_17;
      }

      goto LABEL_22;
    }

    if (!v15) {
      goto LABEL_22;
    }
    uint64_t v34 = a1[5];
    uint64_t v35 = a1[6];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v19 timeIntervalSinceDate:a1[7]];
    int v40 = 138544130;
    uint64_t v41 = v34;
    __int16 v42 = 2114;
    uint64_t v43 = v35;
    __int16 v44 = 2112;
    id v45 = v8;
    __int16 v46 = 2048;
    uint64_t v47 = v36;
    uint64_t v21 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    uint64_t v22 = v14;
    uint32_t v23 = 42;
    goto LABEL_16;
  }

  if (v9)
  {
    BOOL v24 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v24)
      {
        uint64_t v26 = a1[5];
        uint64_t v25 = a1[6];
        uint64_t v27 = a1[4];
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v19 timeIntervalSinceDate:a1[7]];
        int v40 = 138544386;
        uint64_t v41 = v26;
        __int16 v42 = 2114;
        uint64_t v43 = v25;
        __int16 v44 = 2114;
        id v45 = v9;
        __int16 v46 = 2114;
        uint64_t v47 = v27;
        __int16 v48 = 2048;
        uint64_t v49 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v40,  0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }

    else if (v24)
    {
      sub_1002B902C();
    }

    goto LABEL_22;
  }

  BOOL v29 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (!v29) {
      goto LABEL_22;
    }
    uint64_t v37 = a1[5];
    uint64_t v38 = a1[6];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v19 timeIntervalSinceDate:a1[7]];
    int v40 = 138543874;
    uint64_t v41 = v37;
    __int16 v42 = 2114;
    uint64_t v43 = v38;
    __int16 v44 = 2048;
    id v45 = v39;
    uint64_t v21 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint64_t v22 = v14;
    uint32_t v23 = 32;
    goto LABEL_16;
  }

  if (v29)
  {
    uint64_t v31 = a1[5];
    uint64_t v30 = a1[6];
    __int16 v32 = (void *)a1[4];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v19 timeIntervalSinceDate:a1[7]];
    int v40 = 138544130;
    uint64_t v41 = v31;
    __int16 v42 = 2114;
    uint64_t v43 = v30;
    __int16 v44 = 2114;
    id v45 = v32;
    __int16 v46 = 2048;
    uint64_t v47 = v33;
    uint64_t v21 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }

void sub_1000F9584( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F959C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F95AC(uint64_t a1)
{
}

id sub_1000F95B4(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) debugName]);
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v2 forKeyedSubscript:@"designatedGroupLeader"];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) displayName]);
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v3 forKeyedSubscript:@"origin"];

  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:*(void *)(*(void *)(a1 + 32) + 64) forKeyedSubscript:@"outputContext"];
}

void sub_1000F9958( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F9970(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) name]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F9A88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F9AA0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F9B9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F9BB4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F9C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F9CA0(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_1000F9D98(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F9DB0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  BOOL v3 = *(_DWORD *)(*(void *)(result + 32) + 8LL) != v1 || v1 == 3;
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = v3;
  *(_DWORD *)(*(void *)(result + 32) + 8LL) = *(_DWORD *)(result + 48);
  return result;
}

void sub_1000F9DE8(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
    [v4 setObject:v2 forKey:kMRExternalDeviceConnectionStateUserInfoKey];

    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v3 postNotificationName:kMRExternalDeviceConnectionStateDidChangeNotification object:*(void *)(a1 + 32) userInfo:v4];
  }

void sub_1000F9F64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F9F7C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) uid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000FA2F4(_Unwind_Exception *a1)
{
}

void sub_1000FA314(uint64_t a1)
{
}

void sub_1000FA358(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 200);
  if (v3)
  {
    if (*(void *)(v2 + 208))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      unsigned int v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 208LL);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000FA418;
      void v8[3] = &unk_10039AD10;
      id v10 = v4;
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

uint64_t sub_1000FA418(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000FA428(void *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  [v3 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:MRExternalDevicePreviousDeviceInfoUserInfoKey];
  [v3 setObject:a1[4] forKeyedSubscript:MRExternalDeviceDeviceInfoUserInfoKey];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:MRExternalDeviceDeviceInfoDidChangeNotification object:a1[5] userInfo:v3];
}

void sub_1000FA900( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12)
{
}

void sub_1000FA988(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:v9]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    _DWORD v15[2] = sub_1000FAA9C;
    v15[3] = &unk_100399DA8;
    id v16 = v11;
    [WeakRetained _handleRemoteCommand:a3 withOptions:v10 playerPath:v13 completion:v15];
  }

  else
  {
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue( +[MRCommandResult commandResultWithSendError:]( &OBJC_CLASS___MRCommandResult,  "commandResultWithSendError:",  2LL));
    (*((void (**)(id, void *))v11 + 2))(v11, v14);
  }
}

uint64_t sub_1000FAA9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FAAA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained(v7);
  if (WeakRetained)
  {
    id Error = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3]);
    [WeakRetained _handlePlaybackQueueRequest:a2 forPlayerPath:Error completion:v8];
  }

  else
  {
    id Error = (void *)MRMediaRemoteCreateError(100LL);
    v8[2](v8, 0LL, Error);
  }
}

void sub_1000FAB58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000FAC44;
    v11[3] = &unk_10039DBD0;
    id v12 = v7;
    [WeakRetained _handlePlaybackSessionRequest:a2 forPlayerPath:v9 completion:v11];
  }

  else
  {
    id Error = (void *)MRMediaRemoteCreateError(100LL);
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, Error);
  }
}

uint64_t sub_1000FAC44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FAC50(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v14 = a2;
  id v9 = a4;
  id v10 = a5;
  id v11 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id Error = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:v9]);
    [WeakRetained _handlePlaybackSessionMigrateRequest:v14 request:v11 forPlayerPath:Error completion:v10];
  }

  else
  {
    id Error = (void *)MRMediaRemoteCreateError(100LL);
    v10[2](v10, v11, Error);
  }
}

void sub_1000FAD2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000FAE20;
    v11[3] = &unk_100399530;
    id v12 = v7;
    [WeakRetained _handlePlaybackSessionMigrateBeginRequest:a2 forPlayerPath:v9 completion:v11];
  }

  else
  {
    id v10 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 100LL);
    (*((void (**)(id, NSError *))v7 + 2))(v7, v10);
  }
}

uint64_t sub_1000FAE20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000FAE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a4]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000FAF30;
    v13[3] = &unk_100399530;
    id v14 = v9;
    [WeakRetained _handlePlaybackSessionMigrateEndRequest:a2 error:a3 forPlayerPath:v11 completion:v13];
  }

  else
  {
    id v12 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 100LL);
    (*((void (**)(id, NSError *))v9 + 2))(v9, v12);
  }
}

uint64_t sub_1000FAF30(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000FAF44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 context]);
  id v12 = v11;
  if (WeakRetained)
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 destinationPlayerPath]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    _DWORD v15[2] = sub_1000FB068;
    v15[3] = &unk_1003A09E0;
    id v19 = v9;
    id v16 = v7;
    id v17 = v12;
    id v18 = v8;
    [v13 _createPlayerAndWaitForCanBeNowPlaying:v14 completion:v15];
  }
}

void sub_1000FB068(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
    sub_10013CEB0(v10);

    objc_initWeak(&location, v7);
    [*(id *)(a1 + 32) setType:1];
    id v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472LL;
    uint64_t v20 = sub_1000FB274;
    uint64_t v21 = &unk_100399CE0;
    objc_copyWeak(&v22, &location);
    [*(id *)(a1 + 32) setServerBoundMessageHandler:&v18];
    objc_msgSend(*(id *)(a1 + 32), "setLocalHostedInvalidationPlayerPath:", v8, v18, v19, v20, v21);
    uint64_t v11 = MRCreateXPCMessage(0x70000000000000BLL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = objc_alloc(&OBJC_CLASS___MRApplicationConnectionContext);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
    id v16 = -[MRApplicationConnectionContext initWithIdentifier:service:destinationPlayerPath:]( v13,  "initWithIdentifier:service:destinationPlayerPath:",  v14,  v15,  v8);

    id v17 = [[MRCreateApplicationConnectionMessage alloc] initWithConnectionContext:v16 requestInfo:*(void *)(a1 + 48)];
    MRAddProtobufToXPCMessage(v12, v17);
    [v7 relayXPCMessage:v12 andReply:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

    objc_destroyWeak(&v22);
    objc_destroyWeak(&location);
  }
}

void sub_1000FB240( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000FB274(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ([v5 type] == (id)136) {
      uint64_t v7 = 0x70000000000000DLL;
    }
    else {
      uint64_t v7 = 0x70000000000000CLL;
    }
    uint64_t v9 = MRCreateXPCMessage(v7);
    id v8 = (NSError *)objc_claimAutoreleasedReturnValue(v9);
    MRAddProtobufToXPCMessage(v8, v5);
    [WeakRetained relayXPCMessage:v8 andReply:0];
  }

  else
  {
    id v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 178LL);
    [v10 invalidate:v8];
  }
}

void sub_1000FB348(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  unsigned int v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 132LL);
  (*((void (**)(id, NSError *))a4 + 2))(v5, v6);
}

void sub_1000FB46C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000FB484(uint64_t a1)
{
}

void sub_1000FB668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1000FB694(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 40) + 48LL);
  id v3 = *(id *)(a1 + 32);
  id v4 = v3;
  if (v3 == v2) {
    char v5 = 0;
  }
  else {
    char v5 = [v3 isEqual:v2] ^ 1;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v5;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    return;
  }
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) debugName]);

  uint64_t v8 = _MRLogForCategory(0LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 48) debugName]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
      int v17 = 138544130;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = @"designatedGroupLeader";
      __int16 v21 = 2112;
      id v22 = v12;
      __int16 v23 = 2112;
      BOOL v24 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ from <%@> to <%@>",  (uint8_t *)&v17,  0x2Au);

LABEL_10:
    }
  }

  else if (v10)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugName]);
    int v17 = 138543874;
    uint64_t v18 = v14;
    __int16 v19 = 2114;
    uint64_t v20 = @"designatedGroupLeader";
    __int16 v21 = 2112;
    id v22 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Set: %{public}@ setting %{public}@ to <%@>",  (uint8_t *)&v17,  0x20u);
    goto LABEL_10;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 40) + 48LL));
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 48LL), *(id *)(a1 + 32));
  [*(id *)(*(void *)(a1 + 40) + 40) setDesignatedGroupLeaderWhenContextEmpty:*(void *)(a1 + 32)];
  if (([*(id *)(a1 + 32) isLocalDevice] & 1) == 0) {
    objc_msgSend( *(id *)(a1 + 40),  "_onQueue_clearLocalOriginForwaderWithReason:",  @"designatedGroupLeader no longer local");
  }
  if ([*(id *)(a1 + 32) isLocalDevice])
  {
    uint64_t v15 = *(void **)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 origin]);
    objc_msgSend(v15, "_onQueue_forwardOriginToLocalOrigin:", v16);
  }

  [*(id *)(a1 + 40) _reevaluateDeviceInfo];
}

void sub_1000FBBF4(_Unwind_Exception *a1)
{
}

void sub_1000FBC18(uint64_t a1)
{
  uint64_t v2 = kMRMediaRemoteOptionDestinationDeviceUIDs;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKeyedSubscript:kMRMediaRemoteOptionDestinationDeviceUIDs]);

  if (!v3)
  {
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) mutableCopy];
    char v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputContext]);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDeviceUIDs]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v6,  1LL,  0LL));
    [v4 setObject:v7 forKeyedSubscript:v2];

    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v4;
  }

  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) origin]);
  unsigned int v11 = [v10 isLocal];

  if (!v11)
  {
    if (!*(_BYTE *)(a1 + 68))
    {
      uint64_t v26 = *(void **)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 64)));
      v34[0] = _NSConcreteStackBlock;
      v34[2] = sub_1000FBFE4;
      v34[3] = &unk_1003A0A50;
      int v38 = *(_DWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 56);
      uint64_t v30 = *(void **)(a1 + 40);
      void v34[4] = *(void *)(a1 + 32);
      uint64_t v37 = v29;
      v34[1] = 3221225472LL;
      id v35 = v30;
      id v36 = *(id *)(a1 + 48);
      [v26 _createPlayerAndWaitForConnection:v27 command:v28 completion:v34];

      return;
    }

    uint64_t v33 = -[MRDRemoteControlCommand initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:]( objc_alloc(&OBJC_CLASS___MRDRemoteControlCommand),  "initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:",  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 40),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 nowPlayingServer]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 localOriginClient]);
    int v17 = (void *)objc_claimAutoreleasedReturnValue([v20 overrideClient]);

    if (v17) {
      goto LABEL_14;
    }
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 deviceInfo]);
    unsigned int v23 = [v22 isAirPlayActive];

    if (v23) {
      BOOL v24 = @"Could not find overrideClient";
    }
    else {
      BOOL v24 = @"AirPlay not active";
    }
    uint64_t v25 = -[MRCommandResult initWithWithSendError:description:]( objc_alloc(&OBJC_CLASS___MRCommandResult),  "initWithWithSendError:description:",  22LL,  v24);
LABEL_17:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

    goto LABEL_18;
  }

  uint64_t v33 = -[MRDRemoteControlCommand initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:]( objc_alloc(&OBJC_CLASS___MRDRemoteControlCommand),  "initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:",  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 40),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  int v12 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v14 = v13;
  if (v12)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 nowPlayingServer]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 localOriginClient]);
    int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 overrideClient]);
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
    int v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "clientForPID:", objc_msgSend(v15, "processIdentifier")));
  }

  if (!v17)
  {
    uint64_t v31 = objc_alloc(&OBJC_CLASS___MRCommandResult);
    __int16 v32 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Could not find xpcClient for playerPath %@",  *(void *)(a1 + 40));
    uint64_t v25 = -[MRCommandResult initWithWithSendError:description:](v31, "initWithWithSendError:description:", 1LL, v32);

    goto LABEL_17;
  }

void sub_1000FBFE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v14)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) designatedGroupLeader]);
    unsigned int v10 = [v9 isLocalDevice];

    if (v10) {
      [(id)objc_opt_class(*(void *)(a1 + 32)) _sendCommandPreview:*(unsigned int *)(a1 + 64) options:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) playerPath:v7];
    }
    unsigned int v11 = -[MRDRemoteControlCommand initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:]( objc_alloc(&OBJC_CLASS___MRDRemoteControlCommand),  "initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:options:",  *(unsigned int *)(a1 + 64),  v7,  *(void *)(a1 + 40),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
    [v14 sendRemoteControlCommand:v11 withCompletionBlock:*(void *)(a1 + 48)];
  }

  else
  {
    int v12 = objc_alloc(&OBJC_CLASS___MRCommandResult);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedFailureReason]);
    unsigned int v11 = -[MRCommandResult initWithWithSendError:description:](v12, "initWithWithSendError:description:", 1LL, v13);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000FC11C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 > 121)
  {
    if (v2 != 122 && v2 != 133) {
      goto LABEL_9;
    }
LABEL_8:
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRDStreamCapacityManager sharedManager](&OBJC_CLASS___MRDStreamCapacityManager, "sharedManager"));
    uint64_t v9 = *(void *)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000FC270;
    v10[3] = &unk_1003A0AA0;
    id v11 = v8;
    id v12 = *(id *)(a1 + 48);
    [v7 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v9 reason:v11 completion:v10];

    return;
  }

  if (!v2) {
    goto LABEL_8;
  }
  if (v2 == 2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nowPlayingServer]);
    char v5 = (void *)objc_claimAutoreleasedReturnValue([(id)v4 queryExistingPlayerPath:*(void *)(a1 + 32)]);

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerClient]);
    LOBYTE(v4) = [v6 isPlaying];

    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
  }

uint64_t sub_1000FC270(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Needed to interrupt %@ in order to continue with command",  v3);

    uint64_t v6 = _MRLogForCategory(10LL, v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138543874;
      id v11 = @"originCommand";
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000FC384(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = -[MRCommandResult initWithWithSendError:description:]( objc_alloc(&OBJC_CLASS___MRCommandResult),  "initWithWithSendError:description:",  21LL,  @"Failed to commit group leader to output context");
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

BOOL sub_1000FC5F8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

id sub_1000FC8EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 32) || !*(_BYTE *)(a1 + 33)) {
    return 0LL;
  }
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 nowPlayingServer]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localOriginClient]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 overrideClient]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nowPlayingAirPlaySession]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 origin]);
  id v7 = [v6 isLocal];

  return v7;
}

void sub_1000FCA80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1000FCBA4;
  v18[3] = &unk_1003A0AE8;
  id v19 = *(id *)(a1 + 40);
  unsigned int v10 = objc_retainBlock(v18);
  id v11 = (void (**)(void, void, void, void))v10;
  if (v9)
  {
    ((void (*)(void *, id, void, id))v10[2])(v10, v7, 0LL, v9);
  }

  else
  {
    __int16 v12 = *(void **)(a1 + 32);
    id v17 = 0LL;
    unsigned __int8 v13 = [v12 verifyCreatedPlayerPath:v8 forClient:v7 error:&v17];
    id v14 = v17;
    if ((v13 & 1) != 0)
    {
      id v15 = v8;
      id v16 = 0LL;
    }

    else
    {
      id v15 = 0LL;
      id v16 = v14;
    }

    ((void (**)(void, id, id, id))v11)[2](v11, v7, v15, v16);
  }
}

uint64_t sub_1000FCBA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000FD198(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  if (v6)
  {
    id v8 = v6;
    id v9 = 0LL;
  }

  else
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSError client](v5, "client"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "clientForPID:", objc_msgSend(v11, "processIdentifier")));

    if (v9) {
      id v8 = 0LL;
    }
    else {
      id v8 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  4LL,  @"Could not find xpcClient for playerPath %@",  v5);
    }
  }

  uint64_t v12 = _MRLogForCategory(2LL, v7);
  unsigned __int8 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v15 = (os_signpost_id_t)v14;
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_INTERVAL_END,  v15,  "createPlayerAndWaitForConnection",  "",  buf,  2u);
    }
  }

  if (!v8)
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v9 displayName]);

    uint64_t v29 = _MRLogForCategory(10LL, v28);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    BOOL v30 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (!v27)
    {
      if (v5)
      {
        if (!v30) {
          goto LABEL_30;
        }
        uint64_t v42 = *(void *)(a1 + 32);
        uint64_t v41 = *(void *)(a1 + 40);
        id v22 = (NSError *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[NSError timeIntervalSinceDate:](v22, "timeIntervalSinceDate:", *(void *)(a1 + 48));
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v54 = v41;
        __int16 v55 = 2114;
        uint64_t v56 = v42;
        __int16 v57 = 2114;
        id v58 = v5;
        __int16 v59 = 2048;
        id v60 = v43;
        __int16 v44 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v45 = v18;
        uint32_t v46 = 42;
      }

      else
      {
        if (!v30) {
          goto LABEL_30;
        }
        uint64_t v51 = *(void *)(a1 + 32);
        uint64_t v50 = *(void *)(a1 + 40);
        id v22 = (NSError *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[NSError timeIntervalSinceDate:](v22, "timeIntervalSinceDate:", *(void *)(a1 + 48));
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v54 = v50;
        __int16 v55 = 2114;
        uint64_t v56 = v51;
        __int16 v57 = 2048;
        id v58 = v52;
        __int16 v44 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v45 = v18;
        uint32_t v46 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
      goto LABEL_29;
    }

    if (v5)
    {
      if (!v30) {
        goto LABEL_30;
      }
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v31 = *(void *)(a1 + 40);
      id v22 = (NSError *)objc_claimAutoreleasedReturnValue([v9 displayName]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v33 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v54 = v31;
      __int16 v55 = 2114;
      uint64_t v56 = v32;
      __int16 v57 = 2112;
      id v58 = v22;
      __int16 v59 = 2114;
      id v60 = v5;
      __int16 v61 = 2048;
      uint64_t v62 = v34;
      id v35 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v36 = v18;
      uint32_t v37 = 52;
    }

    else
    {
      if (!v30) {
        goto LABEL_30;
      }
      uint64_t v48 = *(void *)(a1 + 32);
      uint64_t v47 = *(void *)(a1 + 40);
      id v22 = (NSError *)objc_claimAutoreleasedReturnValue([v9 displayName]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v33 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v54 = v47;
      __int16 v55 = 2114;
      uint64_t v56 = v48;
      __int16 v57 = 2112;
      id v58 = v22;
      __int16 v59 = 2048;
      id v60 = v49;
      id v35 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v36 = v18;
      uint32_t v37 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);

    goto LABEL_29;
  }

  uint64_t v17 = _MRLogForCategory(10LL, v16);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v19)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 40);
      id v22 = (NSError *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      -[NSError timeIntervalSinceDate:](v22, "timeIntervalSinceDate:", *(void *)(a1 + 48));
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v54 = v20;
      __int16 v55 = 2114;
      uint64_t v56 = v21;
      __int16 v57 = 2114;
      id v58 = v8;
      __int16 v59 = 2114;
      id v60 = v5;
      __int16 v61 = 2048;
      uint64_t v62 = v23;
      BOOL v24 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      uint64_t v25 = v18;
      uint32_t v26 = 52;
LABEL_19:
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
LABEL_29:
    }
  }

  else if (v19)
  {
    uint64_t v39 = *(void *)(a1 + 32);
    uint64_t v38 = *(void *)(a1 + 40);
    id v22 = (NSError *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[NSError timeIntervalSinceDate:](v22, "timeIntervalSinceDate:", *(void *)(a1 + 48));
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v54 = v38;
    __int16 v55 = 2114;
    uint64_t v56 = v39;
    __int16 v57 = 2114;
    id v58 = v8;
    __int16 v59 = 2048;
    id v60 = v40;
    BOOL v24 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    uint64_t v25 = v18;
    uint32_t v26 = 42;
    goto LABEL_19;
  }

uint64_t sub_1000FD698(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FD6AC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_1000FD70C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    if (v9)
    {
      id v7 = [*(id *)(a1 + 32) copy];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 createNowPlayingClient]);
      [v7 setClient:v8];

      [(id)objc_opt_class(*(void *)(a1 + 56)) _createPlayerForClient:v9 playerPath:v7 deviceInfo:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
      goto LABEL_6;
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v6();
LABEL_6:
}

void sub_1000FD898(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000FD99C;
  v17[3] = &unk_1003A0AE8;
  id v18 = *(id *)(a1 + 40);
  id v9 = a2;
  unsigned int v10 = objc_retainBlock(v17);
  id v11 = *(void **)(a1 + 32);
  id v16 = 0LL;
  unsigned __int8 v12 = [v11 verifyCreatedPlayerPath:v7 forClient:v9 error:&v16];
  id v13 = v16;
  if ((v12 & 1) != 0)
  {
    id v14 = v7;
    id v15 = v8;
  }

  else
  {
    id v14 = 0LL;
    id v15 = v13;
  }

  ((void (*)(void *, id, id, id))v10[2])(v10, v9, v14, v15);
}

uint64_t sub_1000FD99C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000FDDE8(_Unwind_Exception *a1)
{
}

void sub_1000FDE0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = _MRLogForCategory(2LL, v10);
  unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v14 = (os_signpost_id_t)v13;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v55) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v14,  "createPlayerAndWaitForCanBeNowPlaying",  "",  (uint8_t *)&v55,  2u);
    }
  }

  if (v9)
  {
    uint64_t v16 = _MRLogForCategory(10LL, v15);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (!v18) {
        goto LABEL_25;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v55 = 138544386;
      uint64_t v56 = v19;
      __int16 v57 = 2114;
      uint64_t v58 = v20;
      __int16 v59 = 2114;
      id v60 = v9;
      __int16 v61 = 2114;
      id v62 = v8;
      __int16 v63 = 2048;
      uint64_t v64 = v22;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      BOOL v24 = v17;
      uint32_t v25 = 52;
    }

    else
    {
      if (!v18) {
        goto LABEL_25;
      }
      uint64_t v38 = *(void *)(a1 + 32);
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v55 = 138544130;
      uint64_t v56 = v37;
      __int16 v57 = 2114;
      uint64_t v58 = v38;
      __int16 v59 = 2114;
      id v60 = v9;
      __int16 v61 = 2048;
      id v62 = v39;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      BOOL v24 = v17;
      uint32_t v25 = 42;
    }

    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v55, v25);
  }

  else
  {
    uint32_t v26 = (void *)objc_claimAutoreleasedReturnValue([v7 displayName]);

    uint64_t v28 = _MRLogForCategory(10LL, v27);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    BOOL v29 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      if (v8)
      {
        if (!v29) {
          goto LABEL_25;
        }
        uint64_t v31 = *(void *)(a1 + 32);
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v7 displayName]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v32 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v55 = 138544386;
        uint64_t v56 = v30;
        __int16 v57 = 2114;
        uint64_t v58 = v31;
        __int16 v59 = 2112;
        id v60 = v21;
        __int16 v61 = 2114;
        id v62 = v8;
        __int16 v63 = 2048;
        uint64_t v64 = v33;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v35 = v17;
        uint32_t v36 = 52;
      }

      else
      {
        if (!v29) {
          goto LABEL_25;
        }
        uint64_t v47 = *(void *)(a1 + 32);
        uint64_t v46 = *(void *)(a1 + 40);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v7 displayName]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v32 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v55 = 138544130;
        uint64_t v56 = v46;
        __int16 v57 = 2114;
        uint64_t v58 = v47;
        __int16 v59 = 2112;
        id v60 = v21;
        __int16 v61 = 2048;
        id v62 = v48;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        id v35 = v17;
        uint32_t v36 = 42;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v55, v36);
    }

    else
    {
      if (v8)
      {
        if (!v29) {
          goto LABEL_25;
        }
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v40 = *(void *)(a1 + 40);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v55 = 138544130;
        uint64_t v56 = v40;
        __int16 v57 = 2114;
        uint64_t v58 = v41;
        __int16 v59 = 2114;
        id v60 = v8;
        __int16 v61 = 2048;
        id v62 = v42;
        uint64_t v43 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        __int16 v44 = v17;
        uint32_t v45 = 42;
      }

      else
      {
        if (!v29) {
          goto LABEL_25;
        }
        uint64_t v50 = *(void *)(a1 + 32);
        uint64_t v49 = *(void *)(a1 + 40);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v55 = 138543874;
        uint64_t v56 = v49;
        __int16 v57 = 2114;
        uint64_t v58 = v50;
        __int16 v59 = 2048;
        id v60 = v51;
        uint64_t v43 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int16 v44 = v17;
        uint32_t v45 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v43, (uint8_t *)&v55, v45);
    }
  }

LABEL_25:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v52 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    uint64_t v53 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v54 = *(void **)(v53 + 40);
    *(void *)(v53 + 40) = 0LL;
  }
}

uint64_t sub_1000FE2E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FE2FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
}

void sub_1000FE378(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v10 = kMRMediaRemoteNowPlayingPlayerDidRegisterCanBeNowPlaying;
    uint64_t v28 = _NSConcreteStackBlock;
    uint64_t v29 = 3221225472LL;
    uint64_t v30 = sub_1000FE608;
    uint64_t v31 = &unk_1003A0BD8;
    id v11 = v8;
    id v32 = v11;
    id v34 = *(id *)(a1 + 48);
    id v12 = v7;
    id v33 = v12;
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 addObserverForName:v10 object:0 queue:0 usingBlock:&v28]);
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 nowPlayingServer]);
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([v17 queryExistingPlayerPath:v11]);

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 playerClient]);
    LODWORD(v17) = [v19 canBeNowPlayingPlayer];

    if ((_DWORD)v17)
    {
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = (NSString *)objc_claimAutoreleasedReturnValue([v18 playerClient]);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[NSString playerPath](v21, "playerPath"));
      (*(void (**)(uint64_t, id, os_log_s *, void))(v20 + 16))(v20, v12, v22, 0LL);
    }

    else
    {
      uint64_t v23 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v21 = -[NSString initWithFormat:]( v23,  "initWithFormat:",  @"Waiting for %@ to set canBeNowPlayingPlayer=YES",  v11,  v28,  v29,  v30,  v31,  v32);
      uint64_t v25 = _MRLogForCategory(10LL, v24);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v27 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v36 = v26;
        __int16 v37 = 2114;
        uint64_t v38 = v27;
        __int16 v39 = 2112;
        uint64_t v40 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }
  }
}

void sub_1000FE608(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
  uint64_t v4 = MRGetPlayerPathFromUserInfo(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
}

void sub_1000FE990(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(2LL, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v11 = (os_signpost_id_t)v10;
    if (os_signpost_enabled(v9))
    {
      LOWORD(v43) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v11,  "CreatePlayer",  "",  (uint8_t *)&v43,  2u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v14 = _MRLogForCategory(10LL, v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  uint64_t v16 = v15;
  if (v5 && !v6)
  {
    BOOL v17 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (!v17) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544386;
      __int16 v44 = @"createPlayer";
      __int16 v45 = 2114;
      uint64_t v46 = v18;
      __int16 v47 = 2112;
      id v48 = v5;
      __int16 v49 = 2114;
      uint64_t v50 = v19;
      __int16 v51 = 2048;
      uint64_t v52 = v21;
      uint64_t v22 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v23 = v16;
      uint32_t v24 = 52;
      goto LABEL_19;
    }

    if (!v17) {
      goto LABEL_26;
    }
    uint64_t v36 = *(void *)(a1 + 32);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v43 = 138544130;
    __int16 v44 = @"createPlayer";
    __int16 v45 = 2114;
    uint64_t v46 = v36;
    __int16 v47 = 2112;
    id v48 = v5;
    __int16 v49 = 2048;
    uint64_t v50 = v37;
    uint64_t v22 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_18;
  }

  if (v6)
  {
    BOOL v25 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (!v25) {
        goto LABEL_26;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544386;
      __int16 v44 = @"createPlayer";
      __int16 v45 = 2114;
      uint64_t v46 = v26;
      __int16 v47 = 2114;
      id v48 = v6;
      __int16 v49 = 2114;
      uint64_t v50 = v27;
      __int16 v51 = 2048;
      uint64_t v52 = v28;
      uint64_t v29 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      uint64_t v30 = v16;
      uint32_t v31 = 52;
      goto LABEL_23;
    }

    if (v25)
    {
      uint64_t v38 = *(void *)(a1 + 32);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544130;
      __int16 v44 = @"createPlayer";
      __int16 v45 = 2114;
      uint64_t v46 = v38;
      __int16 v47 = 2114;
      id v48 = v6;
      __int16 v49 = 2048;
      uint64_t v50 = v39;
      uint64_t v29 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      uint64_t v30 = v16;
      uint32_t v31 = 42;
LABEL_23:
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v43, v31);
      goto LABEL_20;
    }
  }

  else
  {
    BOOL v32 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (!v32) {
        goto LABEL_26;
      }
      uint64_t v33 = *(void *)(a1 + 32);
      id v34 = *(void **)(a1 + 40);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544130;
      __int16 v44 = @"createPlayer";
      __int16 v45 = 2114;
      uint64_t v46 = v33;
      __int16 v47 = 2114;
      id v48 = v34;
      __int16 v49 = 2048;
      uint64_t v50 = v35;
      uint64_t v22 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_18:
      uint64_t v23 = v16;
      uint32_t v24 = 42;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v43, v24);
LABEL_20:

      goto LABEL_26;
    }

    if (v32)
    {
      uint64_t v40 = *(void *)(a1 + 32);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138543874;
      __int16 v44 = @"createPlayer";
      __int16 v45 = 2114;
      uint64_t v46 = v40;
      __int16 v47 = 2048;
      id v48 = v41;
      uint64_t v22 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v23 = v16;
      uint32_t v24 = 32;
      goto LABEL_19;
    }
  }

void sub_1000FEDF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  uint64_t v6 = MRCreatePlayerPathFromXPCMessage(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v7, v5);
}

id sub_1000FEF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MRCreateXPCMessage(*(void *)(a1 + 40));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, id))(v6 + 16))(v6, v3);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    MRAddProtobufToXPCMessage(v5, v8);
  }

  MRAddPlayerPathToXPCMessage(v5, v3);

  return v5;
}

void sub_1000FEFC0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v8 = MRCreateProtobufFromXPCMessage(v10);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void *, void *))(v9 + 16))(v9, v7, v6);
  }
}

uint64_t sub_1000FF1F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FF204(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_1000FF264(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  if (a4)
  {
    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    uint64_t v6 = (*(uint64_t (**)(void))(a1[6] + 16LL))();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [v9 takeAssertion:2 forReason:a1[4] duration:30.0];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v9 connection]);
    [v8 sendMessage:v7 queue:*(void *)(a1[5] + 88) reply:a1[7]];
  }
}

uint64_t sub_1000FF5B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000FF5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FF5D4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = (void *)MRCreatePlaybackQueueFromXPCMessage(v7);
  }
}

id sub_1000FF774(uint64_t a1)
{
  return  [[MRPlaybackSessionRequestMessage alloc] initWithRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40)];
}

void sub_1000FF7A4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = a3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 playbackSession]);
    (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v6);
  }
}

void sub_1000FF918(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 32) startEvent:@"interruptBestStreamIfNecessary"];
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDStreamCapacityManager sharedManager](&OBJC_CLASS___MRDStreamCapacityManager, "sharedManager"));
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestID]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000FFA48;
    void v8[3] = &unk_1003A0D18;
    id v9 = *(id *)(a1 + 32);
    int8x16_t v7 = *(int8x16_t *)(a1 + 40);
    id v6 = (id)v7.i64[0];
    int8x16_t v10 = vextq_s8(v7, v7, 8uLL);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    [v3 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v4 reason:v5 completion:v8];
  }

void sub_1000FFA48(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _resolveReason:@"_handlePlaybackSessionMigrateRequest"]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000FFB5C;
  void v7[3] = &unk_1003A0CC8;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000FFBB0;
  v5[3] = &unk_1003A0CF0;
  id v6 = *(id *)(a1 + 64);
  [v2 sendMessageWithType:0x400000000000007 playerPath:v3 timeout:v4 reason:v7 factory:v5 completion:7.0];
}

id sub_1000FFB5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRPlaybackSessionMigrateRequestMessage alloc] initWithPlaybackSession:*(void *)(a1 + 32) request:*(void *)(a1 + 40) forPlayerPath:v3];

  return v4;
}

void sub_1000FFBB0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = a3;
    int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 request]);
    (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v6);
  }
}

id sub_1000FFD34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRPlaybackSessionMigrateBeginMessage alloc] initWithRequest:*(void *)(a1 + 32) playerPath:v3];

  return v4;
}

uint64_t sub_1000FFD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

id sub_1000FFECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRPlaybackSessionMigrateEndMessage alloc] initWithRequest:*(void *)(a1 + 32) error:*(void *)(a1 + 40) playerPath:v3];

  return v4;
}

uint64_t sub_1000FFF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1000FFFFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 152);
  *(void *)(v3 + 152) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 160LL), *(id *)(a1 + 40));
}

void sub_10010010C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 168);
  *(void *)(v3 + 16_Block_object_dispose((const void *)(v1 - 160), 8) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 176LL), *(id *)(a1 + 40));
}

void sub_10010021C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 184);
  *(void *)(v3 + 184) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 192LL), *(id *)(a1 + 40));
}

void sub_10010032C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), *(id *)(a1 + 40));
}

void sub_10010043C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), *(id *)(a1 + 40));
}

void sub_10010054C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 112LL), *(id *)(a1 + 40));
}

void sub_10010065C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 200);
  *(void *)(v3 + 200) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 208LL), *(id *)(a1 + 40));
}

uint64_t sub_100100784(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32));
}

uint64_t sub_10010087C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(float *)(a1 + 48));
}

void sub_100100C48(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    LODWORD(v5) = *(_DWORD *)(a1 + 80);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5));

    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v18 = _MRLogForCategory(10LL, v17);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    BOOL v19 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v19) {
          goto LABEL_21;
        }
        uint64_t v28 = *(void *)(a1 + 40);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint64_t v29 = *(void **)(a1 + 32);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v46 = v28;
        __int16 v47 = 2114;
        id v48 = v11;
        __int16 v49 = 2114;
        id v50 = v29;
        __int16 v51 = 2048;
        uint64_t v52 = v30;
        uint32_t v31 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        BOOL v32 = v8;
        uint32_t v33 = 42;
      }

      else
      {
        if (!v19) {
          goto LABEL_21;
        }
        uint64_t v37 = *(void *)(a1 + 40);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v46 = v37;
        __int16 v47 = 2114;
        id v48 = v11;
        __int16 v49 = 2048;
        id v50 = v38;
        uint32_t v31 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        BOOL v32 = v8;
        uint32_t v33 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
      goto LABEL_20;
    }

    if (v16)
    {
      if (!v19) {
        goto LABEL_21;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      LODWORD(v21) = *(_DWORD *)(a1 + 80);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v21));
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v46 = v20;
      __int16 v47 = 2114;
      id v48 = v11;
      __int16 v49 = 2112;
      id v50 = v13;
      __int16 v51 = 2114;
      uint64_t v52 = v22;
      __int16 v53 = 2048;
      uint64_t v54 = v24;
      BOOL v25 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v26 = v8;
      uint32_t v27 = 52;
    }

    else
    {
      if (!v19) {
        goto LABEL_21;
      }
      uint64_t v34 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      LODWORD(v35) = *(_DWORD *)(a1 + 80);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v35));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v46 = v34;
      __int16 v47 = 2114;
      id v48 = v11;
      __int16 v49 = 2112;
      id v50 = v13;
      __int16 v51 = 2048;
      uint64_t v52 = v36;
      BOOL v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v26 = v8;
      uint32_t v27 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);

    goto LABEL_20;
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = _MRLogForCategory(10LL, v3);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v46 = v10;
      __int16 v47 = 2114;
      id v48 = v11;
      __int16 v49 = 2114;
      id v50 = v4;
      __int16 v51 = 2114;
      uint64_t v52 = v12;
      __int16 v53 = 2048;
      uint64_t v54 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_20:
    }
  }

  else if (v9)
  {
    sub_1002B90D0();
  }

uint64_t sub_100101088(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100101098(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 64);
  id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) setVolume:*(void *)(a1 + 40) outputDeviceUID:*(void *)(a1 + 48) details:a2]);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1001010F4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100101514(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    uint64_t v14 = MRMediaRemoteVolumeControlAdjustmentDescription(*(void *)(a1 + 80));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v18 = _MRLogForCategory(10LL, v17);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    BOOL v19 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v19) {
          goto LABEL_21;
        }
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint32_t v31 = *(void **)(a1 + 32);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v48 = v30;
        __int16 v49 = 2114;
        id v50 = v10;
        __int16 v51 = 2114;
        id v52 = v31;
        __int16 v53 = 2048;
        uint64_t v54 = v32;
        uint32_t v33 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v34 = v7;
        uint32_t v35 = 42;
      }

      else
      {
        if (!v19) {
          goto LABEL_21;
        }
        uint64_t v39 = *(void *)(a1 + 40);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v48 = v39;
        __int16 v49 = 2114;
        id v50 = v10;
        __int16 v51 = 2048;
        id v52 = v40;
        uint32_t v33 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v34 = v7;
        uint32_t v35 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
      goto LABEL_20;
    }

    if (v16)
    {
      if (!v19) {
        goto LABEL_21;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      double v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v22 = MRMediaRemoteVolumeControlAdjustmentDescription(*(void *)(a1 + 80));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v24 = *(void *)(a1 + 32);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v48 = v20;
      __int16 v49 = 2114;
      id v50 = v21;
      __int16 v51 = 2112;
      id v52 = v23;
      __int16 v53 = 2114;
      uint64_t v54 = v24;
      __int16 v55 = 2048;
      uint64_t v56 = v26;
      uint32_t v27 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v28 = v7;
      uint32_t v29 = 52;
    }

    else
    {
      if (!v19) {
        goto LABEL_21;
      }
      uint64_t v36 = *(void *)(a1 + 40);
      double v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v37 = MRMediaRemoteVolumeControlAdjustmentDescription(*(void *)(a1 + 80));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v37);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v48 = v36;
      __int16 v49 = 2114;
      id v50 = v21;
      __int16 v51 = 2112;
      id v52 = v23;
      __int16 v53 = 2048;
      uint64_t v54 = v38;
      uint32_t v27 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v28 = v7;
      uint32_t v29 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);

    goto LABEL_21;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = _MRLogForCategory(10LL, v3);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v48 = v9;
      __int16 v49 = 2114;
      id v50 = v10;
      __int16 v51 = 2114;
      id v52 = v4;
      __int16 v53 = 2114;
      uint64_t v54 = v11;
      __int16 v55 = 2048;
      uint64_t v56 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_20:
    }
  }

  else if (v8)
  {
    sub_1002B90D0();
  }

uint64_t sub_10010194C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10010195C(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) adjustVolume:a1[8] outputDeviceUID:a1[5] details:a1[6]]);
  (*(void (**)(void))(a1[7] + 16LL))();
}

uint64_t sub_1001019B8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100101DD8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 80)));

    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v17 = _MRLogForCategory(10LL, v16);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    BOOL v18 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (!v14)
    {
      if (v15)
      {
        if (!v18) {
          goto LABEL_21;
        }
        uint64_t v26 = *(void *)(a1 + 40);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint32_t v27 = *(void **)(a1 + 32);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v43 = v26;
        __int16 v44 = 2114;
        id v45 = v10;
        __int16 v46 = 2114;
        id v47 = v27;
        __int16 v48 = 2048;
        uint64_t v49 = v28;
        uint32_t v29 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v30 = v7;
        uint32_t v31 = 42;
      }

      else
      {
        if (!v18) {
          goto LABEL_21;
        }
        uint64_t v34 = *(void *)(a1 + 40);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v43 = v34;
        __int16 v44 = 2114;
        id v45 = v10;
        __int16 v46 = 2048;
        id v47 = v35;
        uint32_t v29 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v30 = v7;
        uint32_t v31 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
      goto LABEL_20;
    }

    if (v15)
    {
      if (!v18) {
        goto LABEL_21;
      }
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 80)));
      uint64_t v20 = *(void *)(a1 + 32);
      double v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v21 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v43 = v19;
      __int16 v44 = 2114;
      id v45 = v10;
      __int16 v46 = 2112;
      id v47 = v12;
      __int16 v48 = 2114;
      uint64_t v49 = v20;
      __int16 v50 = 2048;
      uint64_t v51 = v22;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v24 = v7;
      uint32_t v25 = 52;
    }

    else
    {
      if (!v18) {
        goto LABEL_21;
      }
      uint64_t v32 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 80)));
      double v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v21 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v43 = v32;
      __int16 v44 = 2114;
      id v45 = v10;
      __int16 v46 = 2112;
      id v47 = v12;
      __int16 v48 = 2048;
      uint64_t v49 = v33;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v24 = v7;
      uint32_t v25 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);

    goto LABEL_20;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = _MRLogForCategory(10LL, v3);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544386;
      uint64_t v43 = v9;
      __int16 v44 = 2114;
      id v45 = v10;
      __int16 v46 = 2114;
      id v47 = v4;
      __int16 v48 = 2114;
      uint64_t v49 = v11;
      __int16 v50 = 2048;
      uint64_t v51 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_20:
    }
  }

  else if (v8)
  {
    sub_1002B90D0();
  }

uint64_t sub_100102218(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100102228(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) muteVolume:*(unsigned __int8 *)(a1 + 64) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48)]);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_100102284(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10010236C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputContext]);
  [v2 modifyTopologyWithRequest:*(void *)(a1 + 40) withReplyQueue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_100102428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100102820(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  qos_class_t v4 = *(_DWORD *)(a1 + 80);
  qos_class_t v5 = qos_class_self();
  if (!v3 && v4 < v5)
  {
    uint64_t v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"qos: %u->%u",  *(unsigned int *)(a1 + 80),  qos_class_self());
    uint64_t v9 = _MRLogForCategory(10LL, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v41 = v11;
      __int16 v42 = 2114;
      uint64_t v43 = v12;
      __int16 v44 = 2112;
      id v45 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }

    goto LABEL_10;
  }

  if (!v3)
  {
LABEL_10:
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = _MRLogForCategory(10LL, v6);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    BOOL v24 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      if (!v24) {
        goto LABEL_19;
      }
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 40);
      uint32_t v27 = *(NSString **)(a1 + 48);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v41 = v25;
      __int16 v42 = 2114;
      uint64_t v43 = v26;
      __int16 v44 = 2114;
      id v45 = v27;
      __int16 v46 = 2048;
      uint64_t v47 = v28;
      uint32_t v29 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v30 = v15;
      uint32_t v31 = 42;
    }

    else
    {
      if (!v24) {
        goto LABEL_19;
      }
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = *(void *)(a1 + 40);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v20 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v41 = v32;
      __int16 v42 = 2114;
      uint64_t v43 = v33;
      __int16 v44 = 2048;
      id v45 = v34;
      uint32_t v29 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v30 = v15;
      uint32_t v31 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    goto LABEL_16;
  }

  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = _MRLogForCategory(10LL, v6);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (v13)
  {
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v20 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v41 = v17;
    __int16 v42 = 2114;
    uint64_t v43 = v18;
    __int16 v44 = 2114;
    id v45 = v3;
    __int16 v46 = 2114;
    uint64_t v47 = v19;
    __int16 v48 = 2048;
    uint64_t v49 = v21;
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_16:

    goto LABEL_19;
  }

  if (v16) {
    sub_1002B9170();
  }
LABEL_19:

  uint32_t v35 = *(void **)(a1 + 72);
  if (v35)
  {
    uint64_t v36 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100102B90;
    block[3] = &unk_10039AD10;
    id v39 = v35;
    id v38 = v3;
    dispatch_async(v36, block);
  }
}

uint64_t sub_100102B90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100102BA0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectionState] == 2)
  {
    (*(void (**)(void, void))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), 0LL);
  }

  else
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3[28])
    {
      uint64_t v4 = _MRLogForCategory(10LL, v2);
      qos_class_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v25 = v6;
        __int16 v26 = 2114;
        uint64_t v27 = v7;
        __int16 v28 = 2112;
        uint32_t v29 = @"Previously Disconnected";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 outputContext]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 contextID]);

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) designatedGroupLeader]);
      if (v10 && v9)
      {
        id v11 = [v9 hash];
        uint64_t v12 = objc_alloc(&OBJC_CLASS___MROrigin);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
        uint64_t v14 = -[MROrigin initWithIdentifier:type:displayName:]( v12,  "initWithIdentifier:type:displayName:",  v11,  1LL,  v13);

        -[MROrigin setLocallyHosted:](v14, "setLocallyHosted:", 1LL);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
        BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v15 nowPlayingServer]);
        [v16 registerOrigin:v14 deviceInfo:*(void *)(a1 + 56)];

        [*(id *)(a1 + 32) setOrigin:v14];
        [*(id *)(a1 + 32) setConnectionState:2];

        uint64_t v21 = 0LL;
      }

      else
      {
        uint64_t v21 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  32LL,  @"Called connect without a group leader (usually this means we are in the process of disconnecting)");
        [*(id *)(a1 + 32) setConnectionState:3];
      }

      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(v17 + 80);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_100102EC4;
      v23[3] = &unk_100399250;
      void v23[4] = v17;
      msv_dispatch_sync_on_queue(v18, v23);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)(v19 + 80);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      v22[2] = sub_100102F98;
      v22[3] = &unk_100399250;
      void v22[4] = v19;
      msv_dispatch_sync_on_queue(v20, v22);
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }

void sub_100102EC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    if (*(void *)(v2 + 112))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(dispatch_queue_s **)(v5 + 112);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100102F68;
      void v8[3] = &unk_10039AD10;
      void v8[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

uint64_t sub_100102F68(uint64_t a1)
{
  return (*(uint64_t (**)(void, id, void))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) connectionState],  0);
}

void sub_100102F98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(dispatch_queue_s **)(v5 + 128);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10010303C;
      void v8[3] = &unk_10039AD10;
      void v8[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

void sub_10010303C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) outputDevices]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

MRDeviceInfo *sub_100103380(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  unsigned __int8 v5 = [v3 containsUID:v4];

  if ((v5 & 1) != 0) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = -[MRDeviceInfo initWithOutputDevice:](objc_alloc(&OBJC_CLASS___MRDeviceInfo), "initWithOutputDevice:", v3);
  }

  return v6;
}

void sub_100103514(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mr_errorByEnvelopingWithMRError:", 128));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 80);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001035D0;
  v6[3] = &unk_100398E60;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  msv_dispatch_sync_on_queue(v4, v6);
}

void sub_1001035D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    if (*(void *)(v2 + 112))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 40);
      id v7 = *(dispatch_queue_s **)(v5 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100103694;
      block[3] = &unk_10039A550;
      id v11 = v4;
      void block[4] = v5;
      id v10 = v6;
      id v8 = v4;
      dispatch_async(v7, block);
    }
  }

uint64_t sub_100103694(uint64_t a1)
{
  return (*(uint64_t (**)(void, id, void))(*(void *)(a1 + 48) + 16))( *(void *)(a1 + 48),  [*(id *)(a1 + 32) connectionState],  *(void *)(a1 + 40));
}

void sub_1001038FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001039B4;
  block[3] = &unk_10039A550;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1001039B4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_100103CC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100103D84;
      void v8[3] = &unk_10039AD10;
      id v10 = v4;
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

void sub_100103D84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v3, 1LL));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_100103EBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100103F7C;
      void v8[3] = &unk_10039AD10;
      id v10 = v4;
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

void sub_100103F7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v3, 1LL));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1001040B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 136);
  if (v3)
  {
    if (*(void *)(v2 + 144))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100104174;
      void v8[3] = &unk_10039AD10;
      id v10 = v4;
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }

void sub_100104174(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  id v4 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

void sub_10010431C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 168);
  if (v3)
  {
    if (*(void *)(v2 + 176))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 176LL);
      block[0] = _NSConcreteStackBlock;
      block[2] = sub_1001043E4;
      block[3] = &unk_100399830;
      block[1] = 3221225472LL;
      id v10 = v4;
      int v11 = *(_DWORD *)(a1 + 48);
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }

void sub_1001043E4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_100104544(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 152);
  if (v3)
  {
    if (*(void *)(v2 + 160))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100104618;
      block[3] = &unk_10039A550;
      id v11 = v4;
      id v9 = v5;
      id v10 = *(id *)(a1 + 48);
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }

void sub_100104618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) floatValue];
  float v4 = v3;
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uid]);
  (*(void (**)(uint64_t, id, float))(v2 + 16))(v2, v5, v4);
}

void sub_100104788(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(void **)(v2 + 184);
  if (v3)
  {
    if (*(void *)(v2 + 192))
    {
      id v4 = [v3 copy];
      id v5 = *(void **)(a1 + 40);
      id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 192LL);
      block[0] = _NSConcreteStackBlock;
      block[2] = sub_100104850;
      block[3] = &unk_1003A0E58;
      block[1] = 3221225472LL;
      id v10 = v4;
      char v11 = *(_BYTE *)(a1 + 48);
      id v9 = v5;
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }

void sub_100104850(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

BOOL sub_100104CA4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 outputDevices]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_firstWhere:", &stru_1003A0E78));

  if (v4) {
    BOOL v5 = [v4 clusterType] == *(_DWORD *)(a1 + 32);
  }
  else {
    BOOL v5 = 0LL;
  }

  return v5;
}

BOOL sub_100104D18(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

void sub_100104D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MRLogCategoryConnections(v3);
  BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v16 = v7;
      __int16 v17 = 2114;
      id v18 = v3;
      id v8 = "%{public}@ Found endpoint containing local in discovery that matches cluster type: %{public}@";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v16 = v12;
    id v8 = "%{public}@ Timed out waiting for local device to appear with expected clusterType in discovery";
    id v9 = v6;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
    uint32_t v11 = 12;
    goto LABEL_6;
  }

  id v13 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  32LL,  @"Local device changed clusterType to %u",  *(unsigned int *)(a1 + 40));
  [*(id *)(a1 + 32) disconnect:v13];
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v14 postNotificationName:@"MRDAVOutputContextExternalDeviceDiscoveryLocalClusterTypeDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100105064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10010507C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) outputDevices]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100105124;
  v6[3] = &unk_10039AC00;
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mr_first:", v6));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_100105124(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_10010529C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001052B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x3032000000LL;
  BOOL v24 = sub_1000F959C;
  uint64_t v25 = sub_1000F95AC;
  id v26 = 0LL;
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(dispatch_queue_s **)(v4 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001054F0;
  block[3] = &unk_100399278;
  void block[4] = v4;
  void block[5] = &v21;
  dispatch_sync(v5, block);
  uint64_t v7 = MRLogCategoryConnections(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = [(id)v22[5] count];
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v29 = v9;
    __int16 v30 = 2048;
    id v31 = v10;
    __int16 v32 = 2114;
    uint64_t v33 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Calling %lu completions - Original reason: %{public}@",  buf,  0x20u);
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v12 = (id)v22[5];
  id v13 = [v12 countByEnumeratingWithState:&v16 objects:v27 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v17;
    do
    {
      uint64_t v15 = 0LL;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v12);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v16 + 1) + 8LL * (void)v15) + 16LL))(*(void *)(*((void *)&v16 + 1) + 8LL * (void)v15));
        uint64_t v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v12 countByEnumeratingWithState:&v16 objects:v27 count:16];
    }

    while (v13);
  }

  _Block_object_dispose(&v21, 8);
}

void sub_1001054C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

id sub_1001054F0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
}

void sub_10010553C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 48))
  {
    uint64_t v3 = *(void **)(v2 + 32);
    if (!v3)
    {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = v4;

      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
    }

    id v7 = [*(id *)(a1 + 48) copy];
    [v3 addObject:v7];

    id v8 = [*(id *)(*(void *)(a1 + 32) + 32) count];
    if ((unint64_t)v8 < 2)
    {
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_100105A8C;
      v50[3] = &unk_10039E258;
      void v50[4] = *(void *)(a1 + 32);
      uint64_t v20 = objc_retainBlock(v50);
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) uid]);
      uint64_t v21 = ((uint64_t (*)(void *))v20[2])(v20);
      if ((_DWORD)v21)
      {
        id v22 = *(id *)(*(void *)(a1 + 32) + 64LL);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
        uint64_t v24 = MRLogCategoryConnections(v23);
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          uint64_t v27 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138544130;
          uint64_t v53 = v26;
          __int16 v54 = 2114;
          __int16 v55 = v42;
          __int16 v56 = 2114;
          id v57 = v22;
          __int16 v58 = 2114;
          uint64_t v59 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@",  buf,  0x2Au);
        }

        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        __int16 v28 = *(void **)(*(void *)(a1 + 32) + 64LL);
        uint64_t v51 = *(void *)(*(void *)(a1 + 32) + 48LL);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v51, 1LL));
        __int16 v30 = (objc_class *)objc_opt_class(*(void *)(a1 + 32));
        id v31 = NSStringFromClass(v30);
        __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v32,  *(void *)(a1 + 40)));
        uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 88LL);
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472LL;
        v43[2] = sub_100105B4C;
        v43[3] = &unk_1003A0F08;
        id v35 = v23;
        id v44 = v35;
        id v45 = v42;
        id v36 = v22;
        id v46 = v36;
        id v47 = *(id *)(a1 + 40);
        objc_copyWeak(&v49, (id *)buf);
        id v48 = *(id *)(a1 + 56);
        [v28 setOutputDevices:v29 initiator:v33 withCallbackQueue:v34 block:v43];

        objc_destroyWeak(&v49);
        objc_destroyWeak((id *)buf);
      }

      else if (*(void *)(a1 + 48))
      {
        uint64_t v37 = MRLogCategoryConnections(v21);
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(a1 + 32);
          uint64_t v40 = *(void *)(a1 + 40);
          uint64_t v41 = *(void **)(v39 + 64);
          *(_DWORD *)__int128 buf = 138544130;
          uint64_t v53 = v39;
          __int16 v54 = 2114;
          __int16 v55 = v42;
          __int16 v56 = 2114;
          id v57 = v41;
          __int16 v58 = 2114;
          uint64_t v59 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@",  buf,  0x2Au);
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
      }
    }

    else
    {
      uint64_t v9 = MRLogCategoryConnections(v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = *(void **)(v11 + 48);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 64) contextID]);
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v53 = v11;
        __int16 v54 = 2114;
        __int16 v55 = v12;
        __int16 v56 = 2114;
        id v57 = v13;
        __int16 v58 = 2114;
        uint64_t v59 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@",  buf,  0x2Au);
      }
    }
  }

  else
  {
    uint64_t v15 = MRLogCategoryConnections(a1);
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      __int128 v18 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v53 = v17;
      __int16 v54 = 2114;
      __int16 v55 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Ignoring request to commit in an invalid state (no designatedGroupLeader) reason: %{public}@",  buf,  0x16u);
    }

    __int128 v19 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  5LL,  @"External device is invalid (no designatedGroupLeader)");
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_100105A60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

uint64_t sub_100105A8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  uint64_t v3 = (void *)MRMediaRemoteCopyDeviceUID(a1);
  unsigned __int8 v4 = [v2 containsUID:v3];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) outputDevices]);
  unsigned int v6 = objc_msgSend(v5, "mr_any:", &stru_1003A0EE0);

  if ((v4 & 1) == 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) outputDevices]);
    unsigned int v6 = [v7 containsObject:*(void *)(*(void *)(a1 + 32) + 48)];
  }

  return v6 ^ 1;
}

BOOL sub_100105B44(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

void sub_100105B4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (v3)
  {
    uint64_t IsInformational = MRMediaRemoteErrorIsInformational(v3);
    if ((IsInformational & 1) == 0)
    {
      uint64_t v6 = MRLogCategoryConnections(IsInformational);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextID]);
        uint64_t v11 = *(void *)(a1 + 56);
        int v14 = 138544386;
        uint64_t v15 = v8;
        __int16 v16 = 2114;
        uint64_t v17 = v9;
        __int16 v18 = 2114;
        __int128 v19 = v10;
        __int16 v20 = 2114;
        uint64_t v21 = v11;
        __int16 v22 = 2114;
        uint64_t v23 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@",  (uint8_t *)&v14,  0x34u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      id v13 = WeakRetained;
      if (WeakRetained) {
        [WeakRetained disconnect:v4];
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100106864( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100106888(uint64_t a1)
{
}

BOOL sub_100106CAC(id a1, MRAVEndpoint *a2)
{
  return -[MRAVEndpoint connectionType](a2, "connectionType") == (id)6;
}

id sub_100106CCC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 origin]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originClientForOrigin:v3]);

  return v4;
}

BOOL sub_100106D14(id a1, MRDNowPlayingOriginClient *a2)
{
  return -[MRDNowPlayingOriginClient isPlaying](a2, "isPlaying");
}

BOOL sub_100106D1C(id a1, MRAVEndpoint *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint outputDevices](a2, "outputDevices"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_firstWhere:", &stru_1003A0FF8));
  BOOL v4 = v3 != 0LL;

  return v4;
}

BOOL sub_100106D68(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isAuxiliary](a2, "isAuxiliary") ^ 1;
}

BOOL sub_100106D84(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRDNowPlayingOriginClient deviceInfo](a2, "deviceInfo"));
  unsigned __int8 v3 = [v2 containsLocalDevice];

  return v3;
}

id sub_100106DBC(id a1, MRAVEndpoint *a2)
{
  return -[MRAVEndpoint debugName](a2, "debugName");
}

NSString *sub_100106DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = objc_alloc(&OBJC_CLASS___NSMutableString);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 origin]);
  uint64_t v6 = (int)[v5 identifier];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
  uint64_t v9 = -[NSMutableString initWithFormat:](v4, "initWithFormat:", @"origin-%ld %@ (%@)", v6, v7, v8);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupedDevices]);
  id v11 = [v10 count];

  if (v11) {
    -[NSMutableString appendString:](v9, "appendString:", @" + ");
  }
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupedDevices]);
  id v13 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v25;
    do
    {
      for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 name]);
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceUID]);
        -[NSMutableString appendFormat:](v9, "appendFormat:", @"%@ (%@) + ", v18, v19);
      }

      id v14 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }

    while (v14);
  }

  __int16 v20 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 activePlayerPath]);
  __int16 v22 = -[NSString initWithFormat:](v20, "initWithFormat:", @"%@ (%@)", v21, v9);

  return v22;
}

id sub_100106FF0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100107514(void *a1, const char *a2)
{
  return [a1 timeIntervalSinceDate:*(void *)(v2 + 56)];
}

void sub_100107638(_Unwind_Exception *a1)
{
}

void sub_100107798( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001077B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001077C0(uint64_t a1)
{
}

uint64_t sub_1001077C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 connection]);

  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100107910(_Unwind_Exception *a1)
{
}

void sub_100107E40(_Unwind_Exception *a1)
{
}

uint64_t sub_100107F20(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) _canSendMessage]);
}

void sub_100107FF0(_Unwind_Exception *a1)
{
}

void sub_100108258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1001082A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onCalloutQueue_notifyStatusDidChange:", 1);
}

void sub_1001082D8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(void *)(*(void *)(a1 + 32) + 64LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
  objc_sync_exit(v2);

  if ([*(id *)(a1 + 40) disarm])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v4 = [v3 verboseConnectionMonitorLogging];

    if (v4)
    {
      uint64_t v6 = _MRLogForCategory(8LL, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        [*(id *)(v8 + 88) timeIntervalSinceNow];
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v14 = v8;
        __int16 v15 = 2048;
        double v16 = -v9;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ConnectionMonitor] Checked-in connection %@ in %lf seconds",  buf,  0x16u);
      }
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(dispatch_queue_s **)(v10 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100108440;
    block[3] = &unk_100399250;
    void block[4] = v10;
    dispatch_async(v11, block);
  }

id sub_100108440(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onCalloutQueue_notifyStatusDidChange:", 0);
}

void sub_100108704(_Unwind_Exception *a1)
{
}

void sub_100108728(uint64_t a1)
{
  uint64_t v3 = _MRLogForCategory(8LL, v2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    [*(id *)(a1 + 48) timeIntervalSinceNow];
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2048;
    double v10 = -v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[ConnectionMonitor] Resumed connection %@ in %lf seconds",  (uint8_t *)&v7,  0x16u);
  }
}

id sub_100108E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "searchEndpointsForOutputDeviceUID:timeout:details:completion:", a2, a3);
}

void sub_100108E44( id a1, MRGroupTopologyModificationRequest *a2, MRAVConcreteOutputContext *a3, OS_dispatch_queue *a4, id a5)
{
  id v8 = a5;
  __int16 v9 = a4;
  double v10 = a3;
  id v11 = a2;
  id v12 = -[MRDOutputContextModification initWithRequest:]( objc_alloc(&OBJC_CLASS___MRDOutputContextModification),  "initWithRequest:",  v11);

  -[MRDOutputContextModification modifyWithOutputContext:queue:completion:]( v12,  "modifyWithOutputContext:queue:completion:",  v10,  v9,  v8);
}

void sub_100108EE4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned __int8 v3 = [v2 supportMultiplayerHost];

  if ((v3 & 1) == 0)
  {
    double v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    id v8 = sub_100108FA8;
    __int16 v9 = &unk_1003A1120;
    id v10 = *(id *)(a1 + 32);
    uint64_t v4 = notify_register_dispatch("com.apple.airplay.active", &out_token, &_dispatch_main_q, &v6);
    uint64_t IsAirPlayActive = MRMediaRemoteGetIsAirPlayActive(v4);
    objc_msgSend(*(id *)(a1 + 32), "setAirplayActive:", IsAirPlayActive, v6, v7, v8, v9);
  }

id sub_100108FA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAirplayActive:MRMediaRemoteGetIsAirPlayActive()];
}

id sub_10010A5D8(id result, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002B9214(v2, v4);
    }

    return [*(id *)(v2 + 48) _clearPasswordForOutputDevice:*(void *)(v2 + 32)];
  }

  return result;
}

uint64_t sub_10010A634(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(0LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] User cancelled authorization request for %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 40) cancel];
  return notify_post("com.apple.mediaplayer.airPlayPasswordAlertDidCancel");
}

void sub_10010A6F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 length])
  {
    uint64_t v5 = _MRLogForCategory(0LL, v4);
    double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v17 = v7;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@",  buf,  0x16u);
    }

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10010A85C;
    v11[3] = &unk_1003A1148;
    uint64_t v8 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v12 = v9;
    uint64_t v13 = v10;
    id v14 = v3;
    id v15 = *(id *)(a1 + 32);
    [v8 respondWithAuthorizationToken:v14 completionHandler:v11];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10010A85C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = _MRLogForCategory(0LL, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  double v6 = v5;
  if (v2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v14 = 138543362;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.",  (uint8_t *)&v14,  0xCu);
    }

    [*(id *)(a1 + 40) _storePassword:*(void *)(a1 + 48) forOutputDevice:*(void *)(a1 + 56)];
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002B92BC(a1, v6, v8, v9, v10, v11, v12, v13);
    }
  }

void sub_10010AEF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location, id a21)
{
}

void sub_10010AF2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (v5)
  {
    uint64_t v9 = _MRLogForCategory(0LL, v7);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v25 = 138543618;
      uint64_t v26 = v11;
      __int16 v27 = 2114;
      id v28 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@",  (uint8_t *)&v25,  0x16u);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 dictionary]);
    [WeakRetained setPickedRoute:v12 withPassword:*(void *)(a1 + 40) options:*(unsigned int *)(a1 + 72)];

    unsigned int v13 = 0;
  }

  else
  {
    uint64_t v14 = _MRLogForCategory(0LL, v7);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v16) {
        sub_1002B93B8();
      }

      unsigned int v13 = [v6 code];
    }

    else
    {
      if (v16) {
        sub_1002B9350(a1, v15, v17, v18, v19, v20, v21, v22);
      }

      unsigned int v13 = 1;
    }
  }

  id v23 = objc_loadWeakRetained((id *)(a1 + 64));
  __int128 v24 = v23;
  if (WeakRetained && v23) {
    [WeakRetained[4] removeObject:v23];
  }
  sub_10013AD7C(*(void **)(a1 + 48), v13);
}

void sub_10010BA44(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createAirPlaySecuritySettings]);
  ExternalRepresentation = (void *)MRAVAirPlaySecuritySettingsCreateExternalRepresentation();
  sub_10013AC78(*(void **)(a1 + 40), (uint64_t)"MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY", ExternalRepresentation, 0LL);
}

void sub_10010BB50(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v3 = [v2 supportsNativeThirdPartyApps];

  if (!v3 || ([*(id *)(a1 + 32) entitlements] & 0x8000) != 0)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) xpcEndpoint]);
    int v11 = 0;
  }

  else
  {
    uint64_t v5 = _MRLogForCategory(0LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B9558((id *)(a1 + 32), v6);
    }

    uint64_t v8 = _MRLogForCategory(8LL, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      sub_1002B94C0((id *)(a1 + 32), v9);
    }

    uint64_t v10 = 0LL;
    int v11 = 130;
  }

  uint64_t v12 = *(void **)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10010BC88;
  v14[3] = &unk_10039F9D8;
  id v15 = v10;
  int v16 = v11;
  id v13 = v10;
  sub_10013ADE4(v12, v14);
}

void sub_10010BC88(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  xpc_object_t xdict = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _endpoint]);
  xpc_dictionary_set_value(xdict, "MRXPC_CUSTOM_XPC_ENDPOINT_KEY", v4);

  xpc_dictionary_set_uint64(xdict, "MRXPC_ERROR_CODE_KEY", *(unsigned int *)(a1 + 40));
}

void sub_10010BEF8(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10010C060;
  v12[3] = &unk_100399508;
  id v13 = *(id *)(a1 + 32);
  int v2 = objc_retainBlock(v12);
  uint64_t v3 = MRCreateProtobufFromXPCMessage(*(void *)(a1 + 32));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (!*(void *)(*(void *)(a1 + 40) + 168LL))
  {
    uint64_t v10 = objc_alloc(&OBJC_CLASS___NSError);
    int v11 = @"SystemEndpointController is not supported on platform";
LABEL_6:
    uint64_t v9 = -[NSError initWithMRError:format:](v10, "initWithMRError:format:", 6LL, v11);
    ((void (*)(void *, NSError *))v2[2])(v2, v9);
    goto LABEL_7;
  }

  uint64_t v5 = objc_opt_class(&OBJC_CLASS___MRUpdateActiveSystemEndpointMessage);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
  {
    uint64_t v10 = objc_alloc(&OBJC_CLASS___NSError);
    int v11 = @"Malformed xpc message types";
    goto LABEL_6;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) bundleIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 request]);
  [v7 setClientBundleIdentifier:v6];

  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 168LL);
  uint64_t v9 = (NSError *)objc_claimAutoreleasedReturnValue([v4 request]);
  [v8 updateSystemEndpointForRequest:v9 completion:v2];
LABEL_7:
}

void sub_10010C060(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010C0DC;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10010C0DC(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_10010C19C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEntitledFor:0x10000];
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    id v4 = objc_msgSend( *(id *)(*(void *)(a1 + 48) + 168),  "activeOutputDeviceUID:",  xpc_dictionary_get_int64(v3, "MRXPC_ROUTE_OPTIONS_KEY"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10010C260;
    void v8[3] = &unk_100399350;
    id v9 = v5;
    id v7 = v5;
    sub_10013ADE4(v6, v8);
  }

  else
  {
    sub_10013AD7C(v3, 0x82u);
  }

uint64_t sub_10010C260(uint64_t a1, uint64_t a2)
{
  return MRAddStringToXPCMessage(a2, *(void *)(a1 + 32), "MRXPC_ROUTE_UID_KEY");
}

void sub_10010C328(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEntitledFor:0x8000];
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10010C3C0;
    v6[3] = &unk_100399378;
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = v4;
    uint64_t v8 = v5;
    sub_10013ADE4(v4, v6);
  }

  else
  {
    sub_10013AD7C(v3, 0x82u);
  }

void sub_10010C3C0(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_ROUTE_UID_KEY");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) endpointForDeviceUID:v4]);
  if (v5)
  {
    MRAddDistantEndpointToXPCMessage(v7, v5);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 24LL;
  }

  MRAddErrorToXPCMessage(*(void *)(a1 + 32), v6);
}

void sub_10010C5B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010C630;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

void sub_10010C630(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[MRPromptForRouteAuthorizationResponseMessage alloc] initWithResponse:*(void *)(a1 + 32)];
  MRAddProtobufToXPCMessage(v3, v4);
}

uint64_t sub_10010C694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10010C7CC(uint64_t a1)
{
  int LocalGroupContainsDiscoverableGroupLeader = MRMediaRemoteGetLocalGroupContainsDiscoverableGroupLeader();
  unsigned int v3 = [*(id *)(a1 + 32) airplayActive];
  uint64_t v4 = 1LL;
  if (LocalGroupContainsDiscoverableGroupLeader) {
    uint64_t v4 = 2LL;
  }
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  return sub_10013AB4C(*(void **)(a1 + 40), (uint64_t)"MRXPC_AIRPLAY_LEADER_TYPE", 1LL, v5, 0LL);
}

uint64_t sub_10010C890(uint64_t a1)
{
  return MRAddErrorToXPCMessage(*(void *)(a1 + 32), 6LL);
}

void sub_10010C918(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "requestID");
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[MRAVLocalEndpoint sharedLocalEndpointForRoutingContextWithUID:]( &OBJC_CLASS___MRAVLocalEndpoint,  "sharedLocalEndpointForRoutingContextWithUID:",  0LL));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10010C9D8;
  v5[3] = &unk_100399508;
  id v6 = *(id *)(a1 + 32);
  [v4 setOutputDevices:0 initiator:v3 withReplyQueue:&_dispatch_main_q completion:v5];
}

void sub_10010C9D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010CA54;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10010CA54(uint64_t a1, uint64_t a2)
{
  return MRAddClientToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_10010CADC(id a1, OS_xpc_object *a2)
{
}

void sub_10010CB60(id a1, OS_xpc_object *a2)
{
}

void sub_10010CC14(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "MRXPC_ENDPOINT_LEADER_OPTIONS_KEY");
  uint64_t v4 = MRCreateRequestDetailsFromXPCMessage(*(void *)(a1 + 32));
  id v5 = (MRRequestDetails *)objc_claimAutoreleasedReturnValue(v4);
  if (!v5)
  {
    id v6 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
    uint64_t v7 = MRRequestDetailsInitiatorInfer;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
    id v5 = -[MRRequestDetails initWithInitiator:requestID:reason:userInitiated:originatingBundleID:]( v6,  "initWithInitiator:requestID:reason:userInitiated:originatingBundleID:",  v7,  0LL,  @"RoutingServer.handleCreateGroupWithDevices",  0LL,  v8);
  }

  id v9 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10010CD3C;
  v10[3] = &unk_1003A1200;
  id v11 = *(id *)(a1 + 32);
  [v9 createEndpointForOutputDeviceIDs:v2 options:uint64 details:v5 completion:v10];
}

void sub_10010CD3C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ((_DWORD)a3 && (MRMediaRemoteErrorCodeIsInformational(a3) & 1) == 0)
  {
    sub_10013AD7C(*(void **)(a1 + 32), a3);
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10010CDE8;
    void v7[3] = &unk_10039F9D8;
    id v8 = v5;
    int v9 = a3;
    sub_10013ADE4(v6, v7);
  }
}

void sub_10010CDE8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) designatedGroupLeader]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
  MRAddPropertyListToXPCMessage(v6, v4, "MRXPC_ROUTE_UID_KEY");

  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v5) {
    MRAddErrorToXPCMessage(v6, v5);
  }
}

void sub_10010CF18(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(*(void *)(a1 + 40) + 120LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010CFB0;
  v6[3] = &unk_1003A1248;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 startNowPlayingSessionWithCompletion:v6];
}

void sub_10010CFB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = (MRPlayerPath *)[a2 copy];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 nowPlayingServer]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[MRPlayerPath origin](v6, "origin"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 originClientForOrigin:v9]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceInfo]);

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 routingContextID]);
  if (v12)
  {
    if (!v5)
    {
LABEL_5:
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
      unsigned int v15 = [v14 forceNowPlayingSessionFailure];

      if (v15)
      {
        uint64_t v5 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 6LL);
        if (v5) {
          goto LABEL_7;
        }
      }

      else
      {
        uint64_t v5 = 0LL;
      }

      char v19 = 1;
      goto LABEL_10;
    }
  }

  else
  {
    id v13 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 32LL);

    uint64_t v5 = v13;
    if (!v13) {
      goto LABEL_5;
    }
  }

void sub_10010D2A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRAddClientErrorToXPCMessage(v3);
  MRAddDeviceInfoToXPCMessage(v3, *(void *)(a1 + 40));
  MRAddPlayerPathToXPCMessage(v3, *(void *)(a1 + 48));
}

uint64_t sub_10010D3AC(uint64_t a1)
{
  return sub_10013ADE4(*(void **)(a1 + 48), 0LL);
}

uint64_t sub_10010D4D0(uint64_t a1)
{
  return sub_10013ADE4(*(void **)(a1 + 56), 0LL);
}

void sub_10010D5C4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.routingServer.getDeviceUID", v4);
  id v3 = (void *)qword_1003FDF60;
  qword_1003FDF60 = (uint64_t)v2;
}

void sub_10010D614(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 outputContextForOutputDeviceUID:v3]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 contextID]);
  id v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10010D6DC;
  void v9[3] = &unk_100399350;
  id v10 = v6;
  id v8 = v6;
  sub_10013ADE4(v7, v9);
}

uint64_t sub_10010D6DC(uint64_t a1, uint64_t a2)
{
  return MRAddStringToXPCMessage(a2, *(void *)(a1 + 32), "MRXPC_ROUTING_CONTEXT_UID_KEY");
}

void sub_10010D770(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t v3 = MSVPropertyListDataClasses();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = MSVUnarchivedObjectOfClasses(v4, v2);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mr_map:", &stru_1003A1288));
  uint64_t v8 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_SOURCE_ENDPOINT_UID_KEY");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 availableEndpoints]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10010DA40;
    v25[3] = &qword_10039CB30;
    uint64_t v20 = &v26;
    id v26 = v9;
    id v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mr_first:", v25));
  }

  else
  {
    id v12 = (id)MRAVEndpointGetLocalEndpoint();
  }

  id v13 = objc_alloc(&OBJC_CLASS___MRPlaybackSessionMigrateRequest);
  uint64_t v14 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_MIGRATE_REQUEST_DATA_KEY");
  id v15 = [v13 initWithData:v14];

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10010DA80;
  v21[3] = &unk_10039B5E0;
  id v16 = v12;
  id v22 = v16;
  id v23 = *(id *)(a1 + 32);
  id v17 = v15;
  id v24 = v17;
  uint64_t v18 = objc_retainBlock(v21);
  if (v16 && [v7 count])
  {
    [v16 performMigrationToOutputDevices:v7 request:v17 initiator:&stru_1003AE680 queue:&_dispatch_main_q completion:v18];
  }

  else
  {
    id Error = (void *)MRMediaRemoteCreateError(24LL);
    ((void (*)(void *, void *))v18[2])(v18, Error);
  }

  if (v9) {
}
  }

id sub_10010D9D0(id a1, NSData *a2)
{
  dispatch_queue_t v2 = a2;
  uint64_t v3 = objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice);
  id v4 = -[_MRAVOutputDeviceDescriptorProtobuf initWithData:]( objc_alloc(&OBJC_CLASS____MRAVOutputDeviceDescriptorProtobuf),  "initWithData:",  v2);

  uint64_t v5 = -[MRAVDistantOutputDevice initWithDescriptor:](v3, "initWithDescriptor:", v4);
  return v5;
}

id sub_10010DA40(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10010DA80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10010DB24;
  void v8[3] = &unk_100399378;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v6 = v3;
  id v7 = v5;
  sub_10013ADE4(v4, v8);
}

void sub_10010DB24(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) protobufData]);
  MRAddDataToXPCMessage(v4, v3, "MRXPC_MIGRATE_REQUEST_DATA_KEY");

  if (*(void *)(a1 + 40)) {
    MRAddClientErrorToXPCMessage(v4);
  }
}

void sub_10010DC08(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_SOURCE_ENDPOINT_UID_KEY");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_DESTINATION_ENDPOINT_UID_KEY");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (id *)&qword_10039CB30;
  if (!v3)
  {
    id v9 = (id)MRAVEndpointGetLocalEndpoint(0LL);
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    id v12 = (id)MRAVEndpointGetLocalEndpoint(0LL);
    goto LABEL_6;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 availableEndpoints]);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  void v28[2] = sub_10010DED0;
  v28[3] = &qword_10039CB30;
  id v22 = &v29;
  id v29 = v3;
  id v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mr_first:", v28));

  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 availableEndpoints]);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10010DF10;
  v26[3] = &qword_10039CB30;
  id v6 = &v27;
  id v27 = v5;
  id v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mr_first:", v26));

LABEL_6:
  id v13 = objc_alloc(&OBJC_CLASS___MRPlaybackSessionMigrateRequest);
  uint64_t v14 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_MIGRATE_REQUEST_DATA_KEY");
  id v15 = [v13 initWithData:v14];

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10010DF50;
  v23[3] = &unk_10039FE50;
  id v24 = *(id *)(a1 + 32);
  id v16 = v15;
  id v25 = v16;
  uint64_t v18 = objc_retainBlock(v23);
  if (v9 && v12)
  {
    [v9 performMigrationToEndpoint:v12 request:v16 queue:&_dispatch_main_q completion:v18];
  }

  else
  {
    uint64_t v19 = _MRLogForCategory(0LL, v17);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1002B95E8();
    }

    id Error = (void *)MRMediaRemoteCreateError(24LL);
    ((void (*)(void *, void *))v18[2])(v18, Error);
  }

  if (v5) {
  if (v3)
  }
}

id sub_10010DED0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10010DF10(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10010DF50(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010DFE4;
  v6[3] = &unk_100399378;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

void sub_10010DFE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) protobufData]);
  MRAddDataToXPCMessage(v4, v3, "MRXPC_MIGRATE_REQUEST_DATA_KEY");

  if (*(void *)(a1 + 40)) {
    MRAddClientErrorToXPCMessage(v4);
  }
}

void sub_10010E100(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t v3 = MRCreateRequestDetailsFromXPCMessage(*(void *)(a1 + 32));
  id v4 = (MRRequestDetails *)objc_claimAutoreleasedReturnValue(v3);
  if (!v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
    uint64_t v6 = MRRequestDetailsInitiatorInfer;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
    id v4 = -[MRRequestDetails initWithInitiator:requestID:reason:userInitiated:originatingBundleID:]( v5,  "initWithInitiator:requestID:reason:userInitiated:originatingBundleID:",  v6,  0LL,  @"RoutingServer.handleCreateDirectEndpointForDevices",  0LL,  v7);
  }

  id v8 = *(void **)(a1 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10010E214;
  v11[3] = &unk_1003A12D8;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  id v12 = v9;
  uint64_t v13 = v10;
  [v8 createEndpointForOutputDeviceIDs:v2 details:v4 completion:v11];
}

void sub_10010E214(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10010E2A0;
  void v9[3] = &unk_1003A12B0;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v10 = v5;
  uint64_t v11 = v6;
  int v12 = a3;
  id v8 = v5;
  sub_10013ADE4(v7, v9);
}

void sub_10010E2A0(uint64_t a1, void *a2)
{
  id v11 = a2;
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___MRAVDistantEndpoint);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) descriptor]);
    id v5 = -[MRAVDistantEndpoint initWithDescriptor:](v3, "initWithDescriptor:", v4);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVDistantEndpoint uniqueIdentifier](v5, "uniqueIdentifier"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 externalDeviceForEndpoint:v7]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 externalDeviceListenerEndpoint]);
    -[MRAVDistantEndpoint setExternalDeviceListenerEndpoint:](v5, "setExternalDeviceListenerEndpoint:", v9);

    MRAddDistantEndpointToXPCMessage(v11, v5);
  }

  uint64_t v10 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v10) {
    MRAddErrorToXPCMessage(v11, v10);
  }
}

void sub_10010E444(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t v3 = MRCreateRequestDetailsFromXPCMessage(*(void *)(a1 + 32));
  id v4 = (MRRequestDetails *)objc_claimAutoreleasedReturnValue(v3);
  if (!v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
    uint64_t v6 = MRRequestDetailsInitiatorInfer;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
    id v4 = -[MRRequestDetails initWithInitiator:requestID:reason:userInitiated:originatingBundleID:]( v5,  "initWithInitiator:requestID:reason:userInitiated:originatingBundleID:",  v6,  0LL,  @"RoutingServer.handleGroupDevicesAndSendCommand",  0LL,  v7);
  }

  id v8 = *(void **)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10010E554;
  void v9[3] = &unk_1003A1200;
  id v10 = *(id *)(a1 + 32);
  [v8 createEndpointForOutputDeviceIDs:v2 details:v4 completion:v9];
}

void sub_10010E554(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ((_DWORD)a3 && !MRMediaRemoteErrorCodeIsInformational(a3))
  {
    sub_10013AD7C(*(void **)(a1 + 32), a3);
  }

  else
  {
    uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
    int v12 = @"groupDevicesAndSendCommand";
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10010E67C;
    void v7[3] = &unk_1003A1328;
    id v8 = *(id *)(a1 + 32);
    id v9 = v5;
    int v10 = a3;
    [v9 connectToExternalDeviceWithUserInfo:v6 completion:v7];
  }
}

void sub_10010E67C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (v3)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_10010E8B4;
    v26[3] = &unk_100399350;
    id v27 = v3;
    sub_10013ADE4(v5, v26);
    uint64_t v6 = v27;
  }

  else
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "MRXPC_COMMAND_KEY");
    uint64_t v8 = MRCreatePlayerPathFromXPCMessage(*(void *)(a1 + 32));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v9 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_COMMAND_OPTIONS_KEY");
    uint64_t ExternalDevice = MRAVEndpointGetExternalDevice(*(void *)(a1 + 40));
    uint64_t v11 = (void *)MRExternalDeviceCopyCustomOrigin(ExternalDevice);
    [v6 setOrigin:v11];
    int v12 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 nowPlayingServer]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 queryExistingPlayerPath:v6]);

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 client]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 originClient]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 deviceInfo]);
    [v15 resolvePlaceholdersForDeviceInfo:v17];

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:kMRMediaRemoteOptionSendOptionsNumber]);
    id v19 = [v18 intValue];

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10010E8C4;
    v22[3] = &unk_1003A1300;
    id v23 = *(id *)(a1 + 40);
    id v24 = *(id *)(a1 + 32);
    int v25 = *(_DWORD *)(a1 + 48);
    MRMediaRemoteSendCommandToPlayerWithResult(uint64, v9, v6, v19, v21, v22);
  }
}

uint64_t sub_10010E8B4(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_10010E8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 sendError])
  {
    id v4 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10010EA64;
    void v9[3] = &unk_100399350;
    id v5 = &v10;
    id v10 = v3;
    id v6 = v3;
    sub_10013ADE4(v4, v9);
  }

  else
  {
    MRAVEndpointUpdateActiveSystemEndpointWithReason( *(void *)(a1 + 32),  0LL,  @"Analytics: Group devices and send message",  0LL,  0LL);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10010E9DC;
    v11[3] = &unk_1003A12B0;
    id v5 = &v12;
    id v12 = v3;
    id v7 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 32);
    int v14 = *(_DWORD *)(a1 + 48);
    id v8 = v3;
    sub_10013ADE4(v7, v11);
  }
}

void sub_10010E9DC(uint64_t a1, void *a2)
{
  id v6 = a2;
  MRAddCommandResultToXPCMessage(v6, *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) designatedGroupLeader]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);
  MRAddPropertyListToXPCMessage(v6, v4, "MRXPC_ROUTE_UID_KEY");

  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5) {
    MRAddErrorToXPCMessage(v6, v5);
  }
}

uint64_t sub_10010EA64(uint64_t a1, uint64_t a2)
{
  return MRAddCommandResultToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_10010EB1C(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10010EC90;
  v16[3] = &unk_10039EDC0;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v17 = v3;
  uint64_t v18 = v4;
  uint64_t v5 = objc_retainBlock(v16);
  uint64_t v6 = MRCreateRequestDetailsFromXPCMessage(*(void *)(a1 + 32));
  id v7 = (MRRequestDetails *)objc_claimAutoreleasedReturnValue(v6);
  if (!v7)
  {
    id v8 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
    uint64_t v9 = MRRequestDetailsInitiatorInfer;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) bundleIdentifier]);
    id v7 = -[MRRequestDetails initWithInitiator:requestID:reason:userInitiated:originatingBundleID:]( v8,  "initWithInitiator:requestID:reason:userInitiated:originatingBundleID:",  v9,  0LL,  @"RoutingServer.handleCreateHostedEndpointForDevices",  0LL,  v10);
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10010EE3C;
  v13[3] = &unk_1003A1350;
  int v14 = v7;
  id v15 = v5;
  uint64_t v11 = v7;
  id v12 = v5;
  +[MRDCreateHostedEndpointRequest createHostedEndpointWithOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDCreateHostedEndpointRequest,  "createHostedEndpointWithOutputDeviceUIDs:timeout:details:completion:",  v2,  v11,  v13,  0.0);
}

void sub_10010EC90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10010ED38;
  v11[3] = &unk_100399A78;
  id v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  sub_10013ADE4(v8, v11);
}

void sub_10010ED38(uint64_t a1, void *a2)
{
  id v11 = a2;
  if (*(void *)(a1 + 32))
  {
    id v3 = objc_alloc(&OBJC_CLASS___MRAVDistantEndpoint);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) descriptor]);
    id v5 = -[MRAVDistantEndpoint initWithDescriptor:](v3, "initWithDescriptor:", v4);

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVDistantEndpoint uniqueIdentifier](v5, "uniqueIdentifier"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 externalDeviceForEndpoint:v7]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 externalDeviceListenerEndpoint]);
    -[MRAVDistantEndpoint setExternalDeviceListenerEndpoint:](v5, "setExternalDeviceListenerEndpoint:", v9);

    MRAddDistantEndpointToXPCMessage(v11, v5);
  }

  id v10 = *(void **)(a1 + 48);
  if (v10) {
    MRAddErrorToXPCMessage(v11, [v10 code]);
  }
}

void sub_10010EE3C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v12[0] = @"createHostedEndpointForDevices";
    v11[0] = MREndpointConnectionReasonUserInfoKey;
    v11[1] = MREndpointConnectionCorrelationIDUserInfoKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestID]);
    v12[1] = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  2LL));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10010EF80;
    void v8[3] = &unk_10039BC48;
    id v10 = *(id *)(a1 + 40);
    id v9 = v5;
    [v9 connectToExternalDeviceWithUserInfo:v7 completion:v8];
  }
}

uint64_t sub_10010EF80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0LL, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_10010F050(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t v3 = MRCreateRequestDetailsFromXPCMessage(*(void *)(a1 + 32));
  uint64_t v4 = (MRRequestDetails *)objc_claimAutoreleasedReturnValue(v3);
  if (!v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
    uint64_t v6 = MRRequestDetailsInitiatorInfer;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
    uint64_t v4 = -[MRRequestDetails initWithInitiator:requestID:reason:userInitiated:originatingBundleID:]( v5,  "initWithInitiator:requestID:reason:userInitiated:originatingBundleID:",  v6,  0LL,  @"RoutingServer.handlePredictGroupLeader",  0LL,  v7);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _predictGroupLeaderForOutputDeviceIDs:v2 options:0 details:v4]);
  id v9 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10010F174;
  v11[3] = &unk_100399350;
  id v12 = v8;
  id v10 = v8;
  sub_10013ADE4(v9, v11);
}

void sub_10010F174(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 uid]);
  MRAddPropertyListToXPCMessage(v3, v4, "MRXPC_ROUTE_UID_KEY");
}

void sub_10010F2FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010F378;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10010F378(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_10010F46C(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.routingServer.getExternalDevice", v4);
  id v3 = (void *)qword_1003FDF70;
  qword_1003FDF70 = (uint64_t)v2;
}

void sub_10010F4BC(id a1, OS_xpc_object *a2)
{
}

void sub_10010F4C8(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_ENDPOINT_UID_KEY");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 externalDeviceForEndpoint:v3]);

  if (v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 127LL);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 externalDeviceListenerEndpoint]);
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10010F5DC;
  v11[3] = &unk_100399378;
  id v12 = v6;
  id v13 = v7;
  id v9 = v7;
  id v10 = v6;
  sub_10013ADE4(v8, v11);
}

void sub_10010F5DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRAddClientErrorToXPCMessage(v3);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpoint]);
  xpc_dictionary_set_value(v3, "MRXPC_EXTERNAL_DEVICE_LISTENER_KEY", v4);
}

void sub_10010F6C4(uint64_t a1)
{
  uint64_t v2 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_CONTEXT_MODIFICATION_DATA_KEY");
  id v3 = -[MRGroupTopologyModificationRequest initWithData:]( objc_alloc(&OBJC_CLASS___MRGroupTopologyModificationRequest),  "initWithData:",  v2);
  uint64_t v4 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_ROUTING_CONTEXT_UID_KEY");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10010F8DC;
  v18[3] = &unk_100399508;
  id v19 = *(id *)(a1 + 32);
  uint64_t v6 = objc_retainBlock(v18);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v8 = [v7 supportMultiplayerHost];

  if (!v8)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[MRAVConcreteOutputContext createOutputContextWithUniqueIdentifier:]( &OBJC_CLASS___MRAVConcreteOutputContext,  "createOutputContextWithUniqueIdentifier:",  v5));
    if (v11) {
      goto LABEL_3;
    }
LABEL_5:
    id v12 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  32LL,  @"Failed to create output context with UID=%@",  v5);
    ((void (*)(void *, NSError *))v6[2])(v6, v12);
    goto LABEL_6;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MRDAVOutputContextManager sharedManager](&OBJC_CLASS___MRDAVOutputContextManager, "sharedManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 outputContexts]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10010F968;
  v16[3] = &unk_10039B388;
  id v17 = v5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "msv_firstWhere:", v16));

  if (!v11) {
    goto LABEL_5;
  }
LABEL_3:
  id v12 = -[MRDOutputContextModification initWithRequest:]( objc_alloc(&OBJC_CLASS___MRDOutputContextModification),  "initWithRequest:",  v3);
  qos_class_t v13 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v13, 0LL);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  -[NSError modifyWithOutputContext:queue:completion:](v12, "modifyWithOutputContext:queue:completion:", v11, v15, v6);

LABEL_6:
}

void sub_10010F8DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010F958;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10010F958(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

id sub_10010F968(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10010FA24(uint64_t a1)
{
  dispatch_queue_attr_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  void v2[2] = sub_10010FA84;
  v2[3] = &unk_100399350;
  id v3 = v1;
  sub_10013ADE4(v3, v2);
}

void sub_10010FA84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v5 = (id)MRCreatePropertyListFromXPCMessage(v2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRDStreamCapacityManager sharedManager](&OBJC_CLASS___MRDStreamCapacityManager, "sharedManager"));
  xpc_dictionary_set_BOOL( v3,  "MRXPC_BOOL_RESULT_KEY",  (BOOL)[v4 willStartingPlaybackToOutputDevicesInterrupt:v5]);
}

void sub_10010FC1C(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_RECOMMENDATION_ROUTE_IDENTIFIER_KEY");
  id v9 = (id)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v3 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "MRXPC_RECOMMENDATION_CLASSIFICATION_KEY");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unsigned int v5 = [v4 isEqualToString:@"auto"];
  id v6 = [v4 isEqualToString:@"cta"];
  uint64_t v7 = 2LL;
  if (!(_DWORD)v6) {
    uint64_t v7 = 3LL;
  }
  if (v5) {
    uint64_t v8 = 4LL;
  }
  else {
    uint64_t v8 = v7;
  }
  [*(id *)(*(void *)(a1 + 40) + 176) ingestMockedRecommendation:v9 classification:v8 isCallToAction:v6];
}

id sub_10010FE0C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 176) dismissAllBannerRequests];
}

void sub_10010FF30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010FFAC;
  v6[3] = &unk_100399350;
  id v7 = v3;
  id v5 = v3;
  sub_10013ADE4(v4, v6);
}

uint64_t sub_10010FFAC(uint64_t a1, uint64_t a2)
{
  return MRAddClientErrorToXPCMessage(a2);
}

void sub_100110038(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "outputDeviceID");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  double v4 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v5 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
  id v6 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_REQUEST_DETAILS");
  id v7 = -[MRRequestDetails initWithData:](v5, "initWithData:", v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100110150;
  v11[3] = &unk_10039EDC0;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  id v9 = objc_retainBlock(v11);
  [*(id *)(a1 + 40) searchEndpointsForOutputDeviceUID:v3 timeout:v7 details:v9 completion:v4];
}

void sub_100110150(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 160) hostedRoutingController]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 availableDistantEndpoints]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100110280;
  v17[3] = &unk_1003A13B8;
  id v18 = v5;
  id v9 = v5;
  int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "msv_firstWhere:", v17));

  id v11 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001102E0;
  v14[3] = &unk_100399378;
  id v15 = v10;
  id v16 = v6;
  id v12 = v6;
  id v13 = v10;
  sub_10013ADE4(v11, v14);
}

id sub_100110280(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_1001102E0(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddDistantEndpointToXPCMessage();
  MRAddClientErrorToXPCMessage(v2);
}

void sub_1001107D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resolvedAvailableEndpoints]);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_100110C40;
  v43[3] = &qword_10039CB30;
  id v8 = v5;
  id v44 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "msv_firstWhere:", v43));

  if (!v6)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v9 debugName]);

    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v23 = _MRLogForCategory(10LL, v22);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    BOOL v24 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v21)
      {
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v25 = *(void *)(a1 + 48);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestID]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 debugName]);
        uint64_t v26 = *(void *)(a1 + 40);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v27 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)__int128 buf = 138544386;
        uint64_t v46 = v25;
        __int16 v47 = 2114;
        id v48 = v16;
        __int16 v49 = 2112;
        id v50 = v18;
        __int16 v51 = 2114;
        uint64_t v52 = v26;
        __int16 v53 = 2048;
        uint64_t v54 = v28;
        id v29 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        __int16 v30 = v13;
        uint32_t v31 = 52;
      }

      else
      {
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v38 = *(void *)(a1 + 48);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestID]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 debugName]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v27 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v46 = v38;
        __int16 v47 = 2114;
        id v48 = v16;
        __int16 v49 = 2112;
        id v50 = v18;
        __int16 v51 = 2048;
        uint64_t v52 = v39;
        id v29 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        __int16 v30 = v13;
        uint32_t v31 = 42;
      }

      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }

    else
    {
      if (v21)
      {
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v32 = *(void *)(a1 + 48);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestID]);
        id v33 = *(void **)(a1 + 40);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)__int128 buf = 138544130;
        uint64_t v46 = v32;
        __int16 v47 = 2114;
        id v48 = v16;
        __int16 v49 = 2114;
        id v50 = v33;
        __int16 v51 = 2048;
        uint64_t v52 = v34;
        id v35 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v36 = v13;
        uint32_t v37 = 42;
      }

      else
      {
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v40 = *(void *)(a1 + 48);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestID]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v46 = v40;
        __int16 v47 = 2114;
        id v48 = v16;
        __int16 v49 = 2048;
        id v50 = v41;
        id v35 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v36 = v13;
        uint32_t v37 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
    }

    goto LABEL_20;
  }

  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = _MRLogForCategory(10LL, v10);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  if (v11)
  {
    if (!v14) {
      goto LABEL_21;
    }
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) requestID]);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v46 = v15;
    __int16 v47 = 2114;
    id v48 = v16;
    __int16 v49 = 2114;
    id v50 = v6;
    __int16 v51 = 2114;
    uint64_t v52 = v17;
    __int16 v53 = 2048;
    uint64_t v54 = v19;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_20:

    goto LABEL_21;
  }

  if (v14) {
    sub_1002B965C();
  }
LABEL_21:

  uint64_t v42 = *(void *)(a1 + 72);
  if (v42) {
    (*(void (**)(uint64_t, void *, id))(v42 + 16))(v42, v9, v6);
  }
}

id sub_100110C40(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100110CA0(uint64_t a1, void *a2)
{
  return [a2 containsOutputDeviceWithUID:*(void *)(a1 + 32)];
}

void sub_100110CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) availableEndpoints]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_100110E20;
  v12[3] = &unk_1003A13E0;
  id v13 = v3;
  id v5 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_firstWhere:", v12));

  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  MREndpointConnectionReasonUserInfoKey);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v8,  MREndpointConnectionCorrelationIDUserInfoKey);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100110E80;
  void v9[3] = &unk_10039FE50;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  [v6 connectToExternalDeviceWithUserInfo:v7 completion:v9];
}

id sub_100110E20(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_100110E80(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory(10LL, a2);
    double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      int v7 = 138543874;
      uint64_t v8 = v5;
      __int16 v9 = 2114;
      id v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = @"Endpoint failed to connect";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  (uint8_t *)&v7,  0x20u);
    }
  }

void sub_100110FE0(uint64_t a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "command");
  uint64_t v3 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "commandOptions");
  double v4 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  double v5 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v6 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kMRMediaRemoteOptionRemoteControlInterfaceIdentifier]);
  __int16 v9 = -[MRRequestDetails initWithName:requestID:reason:]( v6,  "initWithName:requestID:reason:",  @"RoutingServer.sendCommandToEachEndpointContainingOutputDeviceUIDs",  v7,  v8);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100111154;
  v10[3] = &unk_1003A1470;
  id v11 = *(id *)(a1 + 32);
  +[MRDSendCommandToOutputDevicesRequest sendCommand:withOptions:toEachEndpointContainingOutputDeviceUIDs:timeout:details:completion:]( &OBJC_CLASS___MRDSendCommandToOutputDevicesRequest,  "sendCommand:withOptions:toEachEndpointContainingOutputDeviceUIDs:timeout:details:completion:",  uint64,  v3,  v4,  v9,  v10,  v5);
}

void sub_100111154(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001111F8;
  v10[3] = &unk_100399378;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_10013ADE4(v7, v10);
}

void sub_1001111F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  MRAddArrayToXPCMessage(v3, "commandResultsData", v2, &stru_1003A1448);
  MRAddClientErrorToXPCMessage(v3);
}

NSData *__cdecl sub_100111250(id a1, MRCommandResult *a2)
{
  return (NSData *)-[MRCommandResult data](a2, "data");
}

void sub_1001112D4(uint64_t a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "command");
  id v3 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "commandOptions");
  double v4 = (void *)MRCreatePropertyListFromXPCMessage(*(void *)(a1 + 32), "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  uint64_t v5 = MRCreatePlayerPathFromXPCMessage(*(void *)(a1 + 32));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  double v7 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v8 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kMRMediaRemoteOptionRemoteControlInterfaceIdentifier]);
  id v11 = -[MRRequestDetails initWithName:requestID:reason:]( v8,  "initWithName:requestID:reason:",  @"RoutingServer.sendCommandToNewGroupContainingOutputDeviceUIDs",  v9,  v10);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100111470;
  v14[3] = &unk_1003A1498;
  int8x16_t v13 = *(int8x16_t *)(a1 + 32);
  id v12 = (id)v13.i64[0];
  int8x16_t v15 = vextq_s8(v13, v13, 8uLL);
  +[MRDSendCommandToOutputDevicesRequest sendCommand:withOptions:toNewEndpointContainingOutputDeviceUIDs:playerPath:timeout:details:completion:]( &OBJC_CLASS___MRDSendCommandToOutputDevicesRequest,  "sendCommand:withOptions:toNewEndpointContainingOutputDeviceUIDs:playerPath:timeout:details:completion:",  uint64,  v3,  v4,  v6,  v11,  v14,  v7);
}

void sub_100111470(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hostedRoutingService]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 hostedRoutingController]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 availableDistantEndpoints]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1001115AC;
  v18[3] = &unk_1003A13B8;
  id v19 = v5;
  id v10 = v5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "msv_firstWhere:", v18));

  id v12 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  _DWORD v15[2] = sub_10011160C;
  v15[3] = &unk_100399378;
  id v16 = v6;
  id v17 = v11;
  id v13 = v11;
  id v14 = v6;
  sub_10013ADE4(v12, v15);
}

id sub_1001115AC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10011160C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  MRAddCommandResultToXPCMessage(v4, v3);
  MRAddDistantEndpointToXPCMessage(v4, *(void *)(a1 + 40));
}

void sub_1001116D0(uint64_t a1)
{
  uint64_t v2 = MRCreateStringFromXPCMessage(*(void *)(a1 + 32), "routingContextID");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  double v4 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v5 = objc_alloc(&OBJC_CLASS___MRRequestDetails);
  id v6 = (void *)MRCreateDataFromXPCMessage(*(void *)(a1 + 32), "MRXPC_REQUEST_DETAILS");
  double v7 = -[MRRequestDetails initWithData:](v5, "initWithData:", v6);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001117C8;
  void v9[3] = &unk_10039F308;
  id v8 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 32);
  [v8 searchEndpointsForRoutingContextUID:v3 timeout:v7 details:v9 completion:v4];
}

void sub_1001117C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10011186C;
  v10[3] = &unk_100399378;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_10013ADE4(v7, v10);
}

void sub_10011186C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  MRAddDistantEndpointToXPCMessage(v3, v2);
  MRAddClientErrorToXPCMessage(v3);
}

void sub_100111C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v20 = _MRLogForCategory(10LL, v19);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v17)
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v29 = *(void *)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        __int16 v30 = *(void **)(a1 + 32);
        int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v40 = 138544130;
        uint64_t v41 = v29;
        __int16 v42 = 2114;
        uint64_t v43 = v13;
        __int16 v44 = 2114;
        id v45 = v30;
        __int16 v46 = 2048;
        uint64_t v47 = v31;
        uint64_t v32 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v33 = v10;
        uint32_t v34 = 42;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v37 = *(void *)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
        int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v40 = 138543874;
        uint64_t v41 = v37;
        __int16 v42 = 2114;
        uint64_t v43 = v13;
        __int16 v44 = 2048;
        id v45 = v38;
        uint64_t v32 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v33 = v10;
        uint32_t v34 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v40, v34);
      goto LABEL_20;
    }

    if (v18)
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      uint64_t v23 = *(void *)(a1 + 32);
      BOOL v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v24 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v40 = 138544386;
      uint64_t v41 = v22;
      __int16 v42 = 2114;
      uint64_t v43 = v13;
      __int16 v44 = 2112;
      id v45 = v15;
      __int16 v46 = 2114;
      uint64_t v47 = v23;
      __int16 v48 = 2048;
      uint64_t v49 = v25;
      uint64_t v26 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v27 = v10;
      uint32_t v28 = 52;
    }

    else
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v35 = *(void *)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      BOOL v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v24 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v40 = 138544130;
      uint64_t v41 = v35;
      __int16 v42 = 2114;
      uint64_t v43 = v13;
      __int16 v44 = 2112;
      id v45 = v15;
      __int16 v46 = 2048;
      uint64_t v47 = v36;
      uint64_t v26 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v27 = v10;
      uint32_t v28 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&v40, v28);

    goto LABEL_20;
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = _MRLogForCategory(10LL, v6);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestID]);
      uint64_t v14 = *(void *)(a1 + 32);
      int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v15 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v40 = 138544386;
      uint64_t v41 = v12;
      __int16 v42 = 2114;
      uint64_t v43 = v13;
      __int16 v44 = 2114;
      id v45 = v7;
      __int16 v46 = 2114;
      uint64_t v47 = v14;
      __int16 v48 = 2048;
      uint64_t v49 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v40,  0x34u);
LABEL_20:
    }
  }

  else if (v11)
  {
    sub_1002B9700();
  }

uint64_t sub_100112080(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_10011209C(uint64_t a1)
{
  id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 160) hostedRoutingController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v11 availableExternalDevices]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1001121FC;
  v12[3] = &unk_1003A14C0;
  id v13 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_firstWhere:", v12));
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 second]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 endpoint]);

  if (v5 && [*(id *)(a1 + 48) disarm])
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___MRAVDistantEndpoint);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 descriptor]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 second]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 externalDeviceListenerEndpoint]);
    id v10 = -[MRAVDistantEndpoint initWithDescriptor:xpcEndpointListener:]( v6,  "initWithDescriptor:xpcEndpointListener:",  v7,  v9);

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

id sub_1001121FC(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = (void *)objc_claimAutoreleasedReturnValue([a3 externalDevice]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceInfo]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 routingContextID]);
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  return v7;
}

uint64_t sub_100112264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL sub_100112580(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return -[MRDMediaRemoteClient isEntitledFor:](a2, "isEntitledFor:", 0x10000LL, a4);
}

void sub_100113000(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(0LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] Custom authorization callback returned for route %{public}@",  (uint8_t *)&v8,  0xCu);
  }

  [*(id *)(a1 + 40) respondWithAuthorizationToken:v3];
}

void sub_1001130D8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 buttonIdentifier];
  if (!v4 || v4 == (id)2)
  {
    v13[0] = &off_1003BB7B0;
    v12[0] = kMRMediaRemoteRouteStatusUserInfoKey;
    v12[1] = kMRMediaRemoteRouteDescriptionUserInfoKey;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] dictionary]);
    v13[1] = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  2LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v9));

    [a1[4] cancel];
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    [v11 postClientNotificationNamed:kMRMediaRemoteRouteStatusDidChangeNotification userInfo:v10];
  }

  else if (v4 == (id)1)
  {
    id v5 = a1[4];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 textFieldValues]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    [v5 respondWithAuthorizationToken:v7];
  }

  [a1[6] setActivePasswordDialog:0];
}

id sub_100113448(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reevaluateAirplayActive];
}

id sub_100113450(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reevaluateAirplayActive];
}

void sub_1001140B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001140E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001140F4(uint64_t a1)
{
}

void sub_1001140FC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v6 = _MRLogForCategory(10LL, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = v7;
  if (!v3)
  {
    BOOL v14 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v14) {
        goto LABEL_14;
      }
      uint64_t v16 = (void *)a1[4];
      uint64_t v15 = a1[5];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:a1[6]];
      int v24 = 138544130;
      uint64_t v25 = @"Dialog.handleClusterErrorStatus";
      __int16 v26 = 2114;
      uint64_t v27 = v15;
      __int16 v28 = 2114;
      id v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v19 = v8;
      uint32_t v20 = 42;
    }

    else
    {
      if (!v14) {
        goto LABEL_14;
      }
      uint64_t v21 = a1[5];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:a1[6]];
      int v24 = 138543874;
      uint64_t v25 = @"Dialog.handleClusterErrorStatus";
      __int16 v26 = 2114;
      uint64_t v27 = v21;
      __int16 v28 = 2048;
      id v29 = v22;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v19 = v8;
      uint32_t v20 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v24, v20);
    goto LABEL_13;
  }

  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v9)
    {
      uint64_t v11 = a1[4];
      uint64_t v10 = a1[5];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:a1[6]];
      int v24 = 138544386;
      uint64_t v25 = @"Dialog.handleClusterErrorStatus";
      __int16 v26 = 2114;
      uint64_t v27 = v10;
      __int16 v28 = 2114;
      id v29 = v3;
      __int16 v30 = 2114;
      uint64_t v31 = v11;
      __int16 v32 = 2048;
      uint64_t v33 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v24,  0x34u);
LABEL_13:
    }
  }

  else if (v9)
  {
    sub_1002B985C();
  }

uint64_t sub_100114374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100114380(uint64_t a1, void *a2)
{
  id v3 = a2;
}

uint64_t sub_1001143CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001143DC(uint64_t a1, void *a2)
{
  id v3 = [a2 buttonIdentifier];
  if (v3 == (id)1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;
  }

  else if (v3 == (id)2)
  {
    [*(id *)(a1 + 32) _launchTVClusterSettings];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001144F4(id a1, NSError *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory(0LL, v2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138543362;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[AVRoutingServer] Failed to open TVSettings: %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_10011522C(uint64_t a1, void *a2)
{
  id v9 = a2;
  if ([v9 buttonIdentifier] == (id)1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v9 textFieldValues]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);

    id v5 = [v4 length];
    int v6 = *(id **)(a1 + 32);
    if (v5)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionary]);
      unsigned int v8 = [v6 setPickedRoute:v7 withPassword:v4 options:*(unsigned int *)(a1 + 48)];

      if (v8) {
        [*(id *)(a1 + 32) _storePassword:v4 forRoute:*(void *)(a1 + 40)];
      }
    }

    else
    {
      [v6[19] userCancelledPickingRoute:*(void *)(a1 + 40)];
      notify_post("com.apple.mediaplayer.airPlayPasswordAlertDidCancel");
    }
  }

  [*(id *)(a1 + 32) setActivePasswordDialog:0];
}

void sub_100115728(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, [a3 code]);
}

id sub_100115B2C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100115FE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100116010(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 56;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v5 = _MRLogForCategory(10LL, a2);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002B99E8(a1, v3, v7);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v9 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v12 = 138543874;
    uint64_t v13 = @"removeOutputDeviceUIDsFromParentGroup";
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)v3 + 8LL) + 40LL));
  }
  return result;
}

void sub_100116168(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001161B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ((_DWORD)a3 && !MRMediaRemoteErrorCodeIsInformational(a3))
  {
    unsigned int v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", a3);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100116298;
    v11[3] = &unk_100398F68;
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    [v5 removeOutputDeviceFromParentGroup:v7 queue:v6 completion:v11];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100116298(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1001162E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100116628(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(v3, "containsUID:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9))
        {
          uint64_t v5 = 1LL;
          goto LABEL_11;
        }
      }

      uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

BOOL sub_1001167D8(id a1, MRDMediaRemoteClient *a2)
{
  return -[MRDMediaRemoteClient declaringAirplayActive](a2, "declaringAirplayActive");
}

Class sub_10011697C()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  Class result = objc_getClass("AVOutputDeviceAuthorizationSession");
  qword_1003FDFD0 = (uint64_t)result;
  off_1003F7818 = (uint64_t (*)())sub_1001169D8;
  return result;
}

id sub_1001169D8()
{
  return (id)qword_1003FDFD0;
}

void sub_1001169E4(id a1)
{
  qword_1003FDFE0 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_100116A0C()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputDeviceAuthorizationTokenTypePIN");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDF80, *v0);
  }
  off_1003F7820 = (uint64_t (*)())sub_100116A84;
  return (id)qword_1003FDF80;
}

id sub_100116A84()
{
  return (id)qword_1003FDF80;
}

id sub_100116A90()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextManagerOutputDeviceKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDF90, *v0);
  }
  off_1003F7828 = (uint64_t (*)())sub_100116B08;
  return (id)qword_1003FDF90;
}

id sub_100116B08()
{
  return (id)qword_1003FDF90;
}

id sub_100116B14()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextManagerFailureReasonKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDF98, *v0);
  }
  off_1003F7830 = (uint64_t (*)())sub_100116B8C;
  return (id)qword_1003FDF98;
}

id sub_100116B8C()
{
  return (id)qword_1003FDF98;
}

id sub_100116B98()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextManagerDidFailToConnectToOutputDeviceUserInfoKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFC8, *v0);
  }
  off_1003F7838 = (uint64_t (*)())sub_100116C10;
  return (id)qword_1003FDFC8;
}

id sub_100116C10()
{
  return (id)qword_1003FDFC8;
}

id sub_100116C1C()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextDeviceConnectionFailureReasonDeviceInUse");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFA0, *v0);
  }
  off_1003F7840 = (uint64_t (*)())sub_100116C94;
  return (id)qword_1003FDFA0;
}

id sub_100116C94()
{
  return (id)qword_1003FDFA0;
}

id sub_100116CA0()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFA8, *v0);
  }
  off_1003F7848 = (uint64_t (*)())sub_100116D18;
  return (id)qword_1003FDFA8;
}

id sub_100116D18()
{
  return (id)qword_1003FDFA8;
}

id sub_100116D24()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFB0, *v0);
  }
  off_1003F7850 = (uint64_t (*)())sub_100116D9C;
  return (id)qword_1003FDFB0;
}

id sub_100116D9C()
{
  return (id)qword_1003FDFB0;
}

id sub_100116DA8()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym( (void *)qword_1003FDFE0,  "AVOutputContextDeviceConnectionFailureReasonInfraRelayFailedMultiDFSNetwork");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFC0, *v0);
  }
  off_1003F7858 = (uint64_t (*)())sub_100116E20;
  return (id)qword_1003FDFC0;
}

id sub_100116E20()
{
  return (id)qword_1003FDFC0;
}

id sub_100116E2C()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym((void *)qword_1003FDFE0, "AVOutputContextDeviceConnectionFailureReasonInfraRelayFailed2GHzNetwork");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDFB8, *v0);
  }
  off_1003F7860 = (uint64_t (*)())sub_100116EA4;
  return (id)qword_1003FDFB8;
}

id sub_100116EA4()
{
  return (id)qword_1003FDFB8;
}

id sub_100116EB0()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  v0 = (id *)dlsym( (void *)qword_1003FDFE0,  "AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FDF88, *v0);
  }
  off_1003F7868 = (uint64_t (*)())sub_100116F28;
  return (id)qword_1003FDF88;
}

id sub_100116F28()
{
  return (id)qword_1003FDF88;
}

Class sub_100116F34()
{
  if (qword_1003FDFD8 != -1) {
    dispatch_once(&qword_1003FDFD8, &stru_1003A1680);
  }
  Class result = objc_getClass("AVOutputContextManager");
  qword_1003FDFE8 = (uint64_t)result;
  off_1003F7870 = (uint64_t (*)())sub_100116F90;
  return result;
}

id sub_100116F90()
{
  return (id)qword_1003FDFE8;
}

void sub_100116F9C(id a1)
{
  qword_1003FDFF8 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver",  2);
}

uint64_t sub_100116FC4(uint64_t a1, uint64_t a2)
{
  if (qword_1003FDFF0 != -1) {
    dispatch_once(&qword_1003FDFF0, &stru_1003A16A0);
  }
  off_1003F7938[0] = (uint64_t (*)())dlsym( (void *)qword_1003FDFF8,  "APReceiverMediaRemoteXPCClient_CopyProperty");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1003F7938[0])(a1, a2);
}

  ;
}

  ;
}

id sub_100117170(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initialize];
}

void sub_1001174D0(_Unwind_Exception *a1)
{
}

id sub_10011759C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_reevaluate");
}

void sub_100117678(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastFetchAttemptToken]);

  if (v3 == v4) {
    [*(id *)(a1 + 40) setActiveEndpoint:v5];
  }
}

id sub_1001177BC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_onWorkerQueue_reevaluateWithEndpoint:deviceInfo:previousDeviceInfo:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100117DAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setDiscoveryMode:0];
  if (!v5) {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
  }
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  __int128 v10 = v9;
  if (v6 || !v5)
  {
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1002B53A8((void *)a1, (uint64_t)v6, v10);
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v28 = v18;
      __int16 v29 = 2114;
      uint64_t v30 = v19;
      __int16 v31 = 2048;
      id v32 = v20;
      uint64_t v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      __int16 v16 = v10;
      uint32_t v17 = 32;
      goto LABEL_12;
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)__int128 buf = 138544130;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    uint64_t v30 = v12;
    __int16 v31 = 2112;
    id v32 = v5;
    __int16 v33 = 2048;
    uint64_t v34 = v14;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    __int16 v16 = v10;
    uint32_t v17 = 42;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
  }

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100117FF8;
  v24[3] = &unk_10039AD10;
  uint64_t v21 = *(dispatch_queue_s **)(a1 + 64);
  id v22 = *(id *)(a1 + 72);
  id v25 = v5;
  id v26 = v22;
  id v23 = v5;
  dispatch_async(v21, v24);
}

uint64_t sub_100117FF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100118008(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = -[MRRequestDetails initWithName:requestID:reason:]( objc_alloc(&OBJC_CLASS___MRRequestDetails),  "initWithName:requestID:reason:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 32));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    void v5[2] = sub_1001180F4;
    v5[3] = &unk_10039BC48;
    id v7 = *(id *)(a1 + 48);
    id v6 = v3;
    [v6 connectToExternalDeviceWithOptions:0 details:v4 completion:v5];
  }

  else
  {
    id v4 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 24LL);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1001180F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2);
}

void sub_1001184B8(_Unwind_Exception *a1)
{
}

void sub_100118610(_Unwind_Exception *a1)
{
}

void sub_100118674(_Unwind_Exception *a1)
{
}

void sub_1001187CC(_Unwind_Exception *a1)
{
}

void sub_100118830(_Unwind_Exception *a1)
{
}

void sub_100118988(_Unwind_Exception *a1)
{
}

void sub_100118A70(_Unwind_Exception *a1)
{
}

void sub_100118B98(_Unwind_Exception *a1)
{
}

void sub_1001192A4(_Unwind_Exception *a1)
{
}

void sub_1001197F4(_Unwind_Exception *a1)
{
}

void sub_1001198FC(_Unwind_Exception *a1)
{
}

void sub_100119B5C(uint64_t a1)
{
}

uint64_t sub_100119C2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100119C3C(uint64_t a1)
{
}

void sub_100119C44(uint64_t a1)
{
}

void sub_10011A4D0(_Unwind_Exception *a1)
{
}

void sub_10011B5DC(_Unwind_Exception *a1)
{
}

void sub_10011BE20(_Unwind_Exception *a1)
{
}

id sub_10011BEEC()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE028, *v0);
  }
  off_1003F7940[0] = (uint64_t (*)())sub_10011BF64;
  return (id)qword_1003FE028;
}

id sub_10011BF64()
{
  return (id)qword_1003FE028;
}

void sub_10011BF70(id a1)
{
  qword_1003FE040 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

Class sub_10011BF98()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  Class result = objc_getClass("AVAudioSession");
  qword_1003FE048 = (uint64_t)result;
  off_1003F7948[0] = (uint64_t (*)())sub_10011BFF4;
  return result;
}

id sub_10011BFF4()
{
  return (id)qword_1003FE048;
}

id sub_10011C000()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionSourceContentCurrentlyPlayingFormatKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE000, *v0);
  }
  off_1003F7950[0] = (uint64_t (*)())sub_10011C078;
  return (id)qword_1003FE000;
}

id sub_10011C078()
{
  return (id)qword_1003FE000;
}

id sub_10011C084()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionSourceContentCurrentlyPlayingChannelCountKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE008, *v0);
  }
  off_1003F7958[0] = (uint64_t (*)())sub_10011C0FC;
  return (id)qword_1003FE008;
}

id sub_10011C0FC()
{
  return (id)qword_1003FE008;
}

id sub_10011C108()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionSourceContentCurrentlyPlayingIsEligibleForSpatializationKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE018, *v0);
  }
  off_1003F7960[0] = (uint64_t (*)())sub_10011C180;
  return (id)qword_1003FE018;
}

id sub_10011C180()
{
  return (id)qword_1003FE018;
}

id sub_10011C18C()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionSourceContentCurrentlyPlayingIsSpatializedKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE020, *v0);
  }
  off_1003F7968[0] = (uint64_t (*)())sub_10011C204;
  return (id)qword_1003FE020;
}

id sub_10011C204()
{
  return (id)qword_1003FE020;
}

id sub_10011C210()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionSourceContentBestAvailableContentTypeKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE010, *v0);
  }
  off_1003F7970[0] = (uint64_t (*)())sub_10011C288;
  return (id)qword_1003FE010;
}

id sub_10011C288()
{
  return (id)qword_1003FE010;
}

id sub_10011C294()
{
  if (qword_1003FE038 != -1) {
    dispatch_once(&qword_1003FE038, &stru_1003A1730);
  }
  v0 = (id *)dlsym((void *)qword_1003FE040, "AVAudioSessionRenderingModeChangeNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE030, *v0);
  }
  off_1003F7978[0] = (uint64_t (*)())sub_10011C30C;
  return (id)qword_1003FE030;
}

id sub_10011C30C()
{
  return (id)qword_1003FE030;
}

void sub_10011C648(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointTypeUserInfoKey]);
  signed int v4 = [v3 intValue];

  if (v4 == 1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v8 = [v7 sendProactivePFSQOnProactiveASEChange];

    if (!v8) {
      return;
    }
LABEL_6:
    uint64_t v9 = v4;
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) systemMediaAppPlayerPathForNotification:*(void *)(a1 + 32)]);
    uint64_t active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription(v9);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ ASE Change",  active));

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointReasonUserInfoKey]);

    uint64_t v16 = _MRLogForCategory(2LL, v15);
    uint32_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v34 = v12;
      __int16 v35 = 2112;
      uint64_t v36 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[MRDPPFSQS] %@ - Reported reason: %@",  buf,  0x16u);
    }

    uint64_t v18 = objc_claimAutoreleasedReturnValue([v10 origin]);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint32_t v20 = (void *)objc_claimAutoreleasedReturnValue([v10 origin]);
      if ([v20 isLocal])
      {
      }

      else
      {
        unsigned int v21 = [v10 isSystemMediaApplication];

        if (v21)
        {
          uint64_t v23 = _MRLogForCategory(2LL, v22);
          int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v34 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[MRDPPFSQS] Will send PPFSQ to <%@>",  buf,  0xCu);
          }

          objc_msgSend(*(id *)(a1 + 40), "_onQueue_sendPrepareForSetQueueTo:reason:type:", v10, v12, 2);
          goto LABEL_20;
        }
      }
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:kMRAVEndpointOutputDeviceIdentifierUserInfoKey]);

    uint64_t v28 = _MRLogForCategory(2LL, v27);
    __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v10 origin]);
      unsigned int v31 = [v30 isLocal];
      id v32 = @"NO";
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v34 = v26;
      __int16 v35 = 2112;
      if (v31) {
        id v32 = @"YES";
      }
      uint64_t v36 = v10;
      __int16 v37 = 2112;
      uint64_t v38 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[MRDPPFSQS] Won't send PFSQ for ASE change - endpoint: <%@>, playerPath:<%@>, isLocal:<%@>",  buf,  0x20u);
    }

LABEL_20:
    return;
  }

  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned __int8 v6 = [v5 sendProactivePFSQOnUserSelectedASEChange];

    if ((v6 & 1) != 0) {
      goto LABEL_6;
    }
  }

void sub_10011CB20(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  if ([v10 isFirstLaunchAfterBoot])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v3 = [v2 sendProactivePFSQAfterBoot];

    if (v3)
    {
      if (MSVDeviceIsAudioAccessory(v4))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v7 = *(void **)(v6 + 8);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        void v12[2] = sub_10011CC40;
        v12[3] = &unk_100399250;
        void v12[4] = v6;
        sub_10013D6FC(v7, v12);
      }

      else
      {
        uint64_t v8 = _MRLogForCategory(2LL, v5);
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDPPFSQS] First MRD launch after boot, device is not an AudioAccessory",  buf,  2u);
        }
      }
    }
  }

  else
  {
  }

void sub_10011CC40(uint64_t a1)
{
  uint64_t v2 = kMRMediaRemoteSystemMediaApplicationDisplayIdentifier;
  unsigned int v3 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  uint64_t v5 = -[MRClient initWithBundleIdentifier:](objc_alloc(&OBJC_CLASS___MRClient), "initWithBundleIdentifier:", v2);
  uint64_t v9 = -[MRPlayerPath initWithOrigin:client:player:](v3, "initWithOrigin:client:player:", v4, v5, 0LL);

  objc_msgSend( *(id *)(a1 + 32),  "_onQueue_sendPrepareForSetQueueTo:reason:type:",  v9,  @"AudioAccessory Boot",  1);
  uint64_t v6 = objc_alloc(&OBJC_CLASS___MRPlayerPath);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  uint64_t v8 = -[MRPlayerPath initWithOrigin:bundleIdentifier:player:]( v6,  "initWithOrigin:bundleIdentifier:player:",  v7,  kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier,  0LL);

  objc_msgSend( *(id *)(a1 + 32),  "_onQueue_sendPrepareForSetQueueTo:reason:type:",  v8,  @"AudioAccessory Boot",  1);
}

void sub_10011CF80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  if (v4)
  {
  }

  else
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 resultStatuses]);

    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);

      uint64_t v15 = _MRLogForCategory(10LL, v14);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      BOOL v16 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        if (!v16) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 resultStatuses]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);
        uint32_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v20 timeIntervalSinceDate:*(void *)(a1 + 40)];
        int v30 = 138544386;
        unsigned int v31 = @"proactivePrepareForSetQueue";
        __int16 v32 = 2114;
        uint64_t v33 = v17;
        __int16 v34 = 2112;
        __int16 v35 = v18;
        __int16 v36 = 2114;
        __int16 v37 = v19;
        __int16 v38 = 2048;
        uint64_t v39 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v30,  0x34u);

        goto LABEL_21;
      }

      if (!v16) {
        goto LABEL_23;
      }
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 resultStatuses]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v19 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v30 = 138544130;
      unsigned int v31 = @"proactivePrepareForSetQueue";
      __int16 v32 = 2114;
      uint64_t v33 = v28;
      __int16 v34 = 2112;
      __int16 v35 = v18;
      __int16 v36 = 2048;
      __int16 v37 = v29;
      id v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v30, 0x2Au);
LABEL_21:

      goto LABEL_22;
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v9;
  if (!v5)
  {
    BOOL v22 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (!v6)
    {
      if (!v22) {
        goto LABEL_23;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v18 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v30 = 138543874;
      unsigned int v31 = @"proactivePrepareForSetQueue";
      __int16 v32 = 2114;
      uint64_t v33 = v26;
      __int16 v34 = 2048;
      __int16 v35 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v30,  0x20u);
LABEL_22:

      goto LABEL_23;
    }

    if (!v22) {
      goto LABEL_23;
    }
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v19 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v30 = 138544130;
    unsigned int v31 = @"proactivePrepareForSetQueue";
    __int16 v32 = 2114;
    uint64_t v33 = v23;
    __int16 v34 = 2114;
    __int16 v35 = v18;
    __int16 v36 = 2048;
    __int16 v37 = v24;
    id v25 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_20;
  }

  BOOL v11 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    if (v11) {
      sub_1002B9BBC(a1, v3, v10);
    }
  }

  else if (v11)
  {
    sub_1002B9AD4(a1, v3, v10);
  }

void sub_10011DC74(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v6 = @"MRDApplicationConnectionInvalidationReasonKey";
  uint64_t v7 = v3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v2 postNotificationName:@"MRDApplicationConnectionDidInvalidateNotification" object:v4 userInfo:v5];
}

void sub_10011E4C4(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  id v6 = a1;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);

  switch(a3)
  {
    case -536870288:
      BOOL v11 = @"CanSleep";
      break;
    case -536870112:
      BOOL v11 = @"WillPowerOn";
      break;
    case -536870272:
      BOOL v11 = @"WillSleep";
      break;
    default:
      BOOL v11 = 0LL;
      goto LABEL_11;
  }

  uint64_t v12 = _MRLogForCategory(0LL, v10);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v26 = v11;
    __int16 v27 = 2114;
    uint64_t v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "POWER: Did recieve power callback %{public}@-%{public}@",  buf,  0x16u);
  }

LABEL_11:
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10011E864;
  v19[3] = &unk_1003A1768;
  uint32_t v20 = (__CFString *)v11;
  id v21 = v9;
  id v22 = v7;
  id v14 = v6;
  id v23 = v14;
  uint64_t v24 = a4;
  id v15 = v7;
  id v16 = v9;
  uint64_t v17 = objc_retainBlock(v19);
  uint64_t v18 = v17;
  switch(a3)
  {
    case -536870112:
      [v14 notifyDelegateOfWake];
      break;
    case -536870272:
      ((void (*)(void *))v17[2])(v17);
      break;
    case -536870288:
      [v14 notifyDelegateOfSleepWithCompletion:v17];
      break;
  }
}

void sub_10011E864(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011E918;
  block[3] = &unk_1003A1768;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v2 = *(id *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  id v8 = v2;
  uint64_t v9 = v3;
  dispatch_async(&_dispatch_main_q, block);
}

uint64_t sub_10011E918(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = _MRLogForCategory(0LL, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v10 = 138543874;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds",  (uint8_t *)&v10,  0x20u);
    }
  }

  return IOAllowPowerChange((io_connect_t)[*(id *)(a1 + 56) connection], *(void *)(a1 + 64));
}

void sub_10011EBC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory(12LL, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      sub_1002B9E50((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  else
  {
    [*(id *)(a1 + 32) setFirewall:a2];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allowedDestinations]);

    if (v15)
    {
      id v16 = *(void **)(a1 + 32);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 allowedDestinations]);
      [v16 _updateAllowedDestinations:v17];
    }
  }
}

id sub_10011F110(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAllowedDestinations:*(void *)(a1 + 40)];
}

id sub_10011F27C(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [[IDSURI alloc] initWithPrefixedURI:v2];

  if (v3) {
    id v4 = [[IDSFirewallEntry alloc] initWithURI:v3];
  }
  else {
    id v4 = 0LL;
  }

  return v4;
}

void sub_10011F2E8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(12LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_1002B9EB8((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    }

    uint64_t v13 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errorHandler]);
    ((void (**)(void, id))v13)[2](v13, v4);
  }
}

void sub_10011F428( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10011F6D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10011F700(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5 && ([v5 isValid] & 1) != 0)
    {
      uint64_t v9 = objc_alloc(&OBJC_CLASS___MRDTaskAssertion);
      id v10 = [v5 pid];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
      uint64_t v12 = -[MRDTaskAssertion initWithType:pid:bundleID:name:]( v9,  "initWithType:pid:bundleID:name:",  4LL,  v10,  v11,  @"NowPlayingCap");

      -[MRDTaskAssertion invalidateInDuration:](v12, "invalidateInDuration:", 10.0);
      uint64_t v14 = _MRLogForCategory(1LL, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        int v20 = 138543362;
        uint64_t v21 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Launched %{public}@",  (uint8_t *)&v20,  0xCu);
      }
    }

    else
    {
      uint64_t v17 = _MRLogForCategory(1LL, v7);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        int v20 = 138543618;
        uint64_t v21 = v19;
        __int16 v22 = 2114;
        id v23 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Failed to open %{public}@: %{public}@",  (uint8_t *)&v20,  0x16u);
      }

      [WeakRetained _cleanup];
      [WeakRetained _submitLaunchFailure];
    }
  }
}

void sub_10011FA84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(1LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Suspended %{public}@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_10011FEE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10011FF10(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v7 = _MRLogForCategory(1LL, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained bundleIdentifier]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 status]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 error]);
      int v16 = 138543618;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Process %{public}@ did terminate: %{public}@",  (uint8_t *)&v16,  0x16u);
    }

    [WeakRetained _cleanup];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 status]);
    objc_msgSend(WeakRetained, "_submitTerminationEvent:", objc_msgSend(v12, "code"));

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 status]);
    if ([v13 isCrash])
    {

LABEL_7:
      [WeakRetained _relaunch];
      goto LABEL_8;
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 status]);
    unsigned int v15 = [v14 isJetsam];

    if (v15) {
      goto LABEL_7;
    }
  }

void sub_100120218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100120244(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _nowPlayingPlaybackStateDidChange:v5];
  }
}

void sub_100120678( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1001206B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 nowPlayingServer]);

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 queryExistingPlayerPath:*(void *)(a1 + 32)]);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerClient]);
    unsigned int v7 = [v6 playbackState];

    if (*(_DWORD *)(a1 + 56) != v7)
    {
      +[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"NowPlayingLauncher",  @"PlaybackStateDidChange",  @"Notification and server states diverge",  *(void *)(a1 + 40),  0LL,  0LL);
      uint64_t v9 = _MRLogForCategory(1LL, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained bundleIdentifier]);
        int v12 = *(_DWORD *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138544386;
        int v16 = v11;
        __int16 v17 = 2114;
        uint64_t v18 = v13;
        __int16 v19 = 1026;
        int v20 = v12;
        __int16 v21 = 1026;
        unsigned int v22 = v7;
        __int16 v23 = 2114;
        uint64_t v24 = v14;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%{public}@ received PlaybackStateDidChangeNotification (%{public}@) with playback state %{public}d, expected % {public}d for %{public}@.",  buf,  0x2Cu);
      }
    }
  }
}